#
# PySNMP MIB module Fore-Switch-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Fore-Switch-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:03:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
ipFilterStatsIfName, ipFilterStatsVCI, ipFilterStatsVPI = mibBuilder.importSymbols("Fore-Adapter-MIB", "ipFilterStatsIfName", "ipFilterStatsVCI", "ipFilterStatsVPI")
crXfrSecondaryTrapStatus, crXfrIndex, crXfrPrimaryTrapStatus, crMemoryAllocated = mibBuilder.importSymbols("Fore-Callrecord-MIB", "crXfrSecondaryTrapStatus", "crXfrIndex", "crXfrPrimaryTrapStatus", "crMemoryAllocated")
NsapAddr, TransitNetwork, atmSwitch, IntegerBitString, asx, EntryStatus, GeneralState, hardware, NsapPrefix, SpansAddress, systems, AtmSigProtocol, asxd, ConnectionType, software = mibBuilder.importSymbols("Fore-Common-MIB", "NsapAddr", "TransitNetwork", "atmSwitch", "IntegerBitString", "asx", "EntryStatus", "GeneralState", "hardware", "NsapPrefix", "SpansAddress", "systems", "AtmSigProtocol", "asxd", "ConnectionType", "software")
trapLogIndex, = mibBuilder.importSymbols("Fore-TrapLog-MIB", "trapLogIndex")
hrSystemDate, = mibBuilder.importSymbols("HOST-RESOURCES-MIB", "hrSystemDate")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
pnniNodeId, = mibBuilder.importSymbols("PNNI-MIB", "pnniNodeId")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Gauge32, Bits, IpAddress, NotificationType, MibIdentifier, iso, Counter64, Unsigned32, Counter32, ModuleIdentity, ObjectIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Gauge32", "Bits", "IpAddress", "NotificationType", "MibIdentifier", "iso", "Counter64", "Unsigned32", "Counter32", "ModuleIdentity", "ObjectIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TestAndIncr, RowStatus, TimeInterval, PhysAddress, TimeStamp, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TestAndIncr", "RowStatus", "TimeInterval", "PhysAddress", "TimeStamp", "DateAndTime", "TextualConvention")
foreSwitchModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 326, 2, 7))
if mibBuilder.loadTexts: foreSwitchModule.setLastUpdated('9911050000Z')
if mibBuilder.loadTexts: foreSwitchModule.setOrganization('FORE')
boardGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1))
moduleGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2))
timing = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 3))
netmodTimingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 3, 1))
boardTimingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 3, 2))
environment = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4))
alarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 1))
powerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 2))
fansGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 3))
tempGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 4))
cpuGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 5))
mgmtGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 6))
fabricGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 7))
shmem = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5))
netmodShmemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 1))
portShmemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 2))
netmodShmem2Group = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 3))
portShmem2Group = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 4))
connShmem2Group = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 5))
netmodShmem3Group = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 6))
portShmem3Group = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 7))
connShmem3Group = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 8))
netmodGenericShmemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 9))
genericOutputPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 10))
dualScp = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 6))
dualScpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 6, 1))
etherChipSet = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 10))
etherChipSetDec = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 10, 1))
etherChipSetDec21440 = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 10, 1, 1))
switchGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1))
portGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2))
pathGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3))
channelGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4))
topologyGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 5))
signalingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6))
spansGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1))
q2931Group = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2))
q2931LayerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1))
swBoardGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 7))
swBoardTopologyGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 8))
nsapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9))
upcContractGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 10))
confTopologyGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 11))
oamGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 12))
guardGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 13))
ifIndexMapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 14))
ifIndexNameGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 15))
cesExtGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 16))
qosClassExpansionGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 17))
pathExtGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 18))
poolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 19))
asxAtmIfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 20))
syncStatusMsgGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 21))
syslogGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 22))
poolConfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 19, 1))
snmp = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 2))
trapConfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 2, 1))
snmpConfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 2, 2))
snmpAgentAddressGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 2, 5))
class E164Address(TextualConvention, OctetString):
    status = 'current'
    displayHint = '15a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(15, 15)
    fixedLength = 15

class AtmConnSchedMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("default", 1), ("roundrobin", 2), ("smoothed", 3), ("guaranteed", 4))

class AtmOrigPathSchedMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("flat", 1), ("shaped", 2), ("shaped-roundrobin", 3))

class AAL5CountingMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("default", 1), ("cell-counting", 2), ("packet-counting", 3))

boardTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 1), )
if mibBuilder.loadTexts: boardTable.setStatus('current')
boardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 1, 1), ).setIndexNames((0, "Fore-Switch-MIB", "boardIndex"))
if mibBuilder.loadTexts: boardEntry.setStatus('current')
boardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardIndex.setStatus('current')
boardVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardVersion.setStatus('current')
boardModel = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22))).clone(namedValues=NamedValues(("unknown", 0), ("asx100", 1), ("asx200", 2), ("asx200wg", 4), ("asx200bx", 5), ("asx200bxe", 6), ("cabletron9A000", 7), ("asx1000", 8), ("le155", 9), ("sfcs200wg", 10), ("sfcs200bx", 11), ("sfcs1000", 12), ("tnx210", 15), ("tnx1100", 16), ("asx1200", 17), ("asx4000", 18), ("le25", 19), ("esx3000", 20), ("tnx1100b", 21), ("asx150", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardModel.setStatus('current')
boardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardSerialNumber.setStatus('current')
numberOfModules = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfModules.setStatus('current')
vpiLookupErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpiLookupErrors.setStatus('obsolete')
vciLookupErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vciLookupErrors.setStatus('obsolete')
boardControlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardControlPort.setStatus('current')
boardHDCOMPAsicVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardHDCOMPAsicVersion.setStatus('obsolete')
boardMcastSpaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardMcastSpaceIndex.setStatus('current')
numberOfBoards = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfBoards.setStatus('current')
utilization = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 3))
procUtilGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 3, 1))
mbufUtilGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 3, 3))
procUtilLastUpdate = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 3, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: procUtilLastUpdate.setStatus('current')
procUtilValue = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 3, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: procUtilValue.setStatus('current')
procUtilMonInterval = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 6000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: procUtilMonInterval.setStatus('current')
procUtilMinLoad = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 3, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: procUtilMinLoad.setStatus('current')
procUtilMinLoadLastUpdate = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 3, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: procUtilMinLoadLastUpdate.setStatus('current')
procUtilMaxLoad = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 3, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: procUtilMaxLoad.setStatus('current')
procUtilMaxLoadLastUpdate = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 3, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: procUtilMaxLoadLastUpdate.setStatus('current')
procUtilHistoryReset = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: procUtilHistoryReset.setStatus('current')
procUtilsNumMallocPart = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: procUtilsNumMallocPart.setStatus('current')
procUtilsSystemPartitionID = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: procUtilsSystemPartitionID.setStatus('current')
boardStatsTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 4), )
if mibBuilder.loadTexts: boardStatsTable.setStatus('current')
boardStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 4, 1), ).setIndexNames((0, "Fore-Switch-MIB", "boardStatsBoard"), (0, "Fore-Switch-MIB", "boardStatsIndex"))
if mibBuilder.loadTexts: boardStatsEntry.setStatus('current')
boardStatsBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: boardStatsBoard.setStatus('current')
boardStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 4, 1, 2), Integer32())
if mibBuilder.loadTexts: boardStatsIndex.setStatus('current')
boardStatsName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardStatsName.setStatus('current')
boardStatsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardStatsValue.setStatus('current')
portCardGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 5))
portCardTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 5, 1), )
if mibBuilder.loadTexts: portCardTable.setStatus('current')
portCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 5, 1, 1), ).setIndexNames((0, "Fore-Switch-MIB", "portCardIndex"))
if mibBuilder.loadTexts: portCardEntry.setStatus('current')
portCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 5, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: portCardIndex.setStatus('current')
portCardName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCardName.setStatus('current')
portCardFlavor = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCardFlavor.setStatus('current')
portCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 5, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCardType.setStatus('current')
portCardUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 5, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCardUptime.setStatus('current')
portCardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 5, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCardSerialNumber.setStatus('current')
portCardAssemblyRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCardAssemblyRevision.setStatus('current')
portCardHardwareConf = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 5, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCardHardwareConf.setStatus('current')
portCardState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("reset", 1), ("inService", 2), ("outOfService", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portCardState.setStatus('current')
boardTrafficManagementGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 6))
boardTrafficManagementPerPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 6, 1), )
if mibBuilder.loadTexts: boardTrafficManagementPerPriorityTable.setStatus('current')
boardTrafficManagementPerPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 6, 1, 1), ).setIndexNames((0, "Fore-Switch-MIB", "btmPerPriorityBoard"), (0, "Fore-Switch-MIB", "btmPerPriorityPriority"), (0, "Fore-Switch-MIB", "btmPerPriorityFeature"))
if mibBuilder.loadTexts: boardTrafficManagementPerPriorityEntry.setStatus('current')
btmPerPriorityBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 6, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: btmPerPriorityBoard.setStatus('current')
btmPerPriorityPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 6, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: btmPerPriorityPriority.setStatus('current')
btmPerPriorityFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 6, 1, 1, 3), Integer32())
if mibBuilder.loadTexts: btmPerPriorityFeature.setStatus('current')
btmPerPriorityPriorityName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 6, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btmPerPriorityPriorityName.setStatus('current')
btmPerPriorityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 6, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: btmPerPriorityValue.setStatus('current')
mallocUtilTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 3, 2), )
if mibBuilder.loadTexts: mallocUtilTable.setStatus('current')
mallocUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 3, 2, 1), ).setIndexNames((0, "Fore-Switch-MIB", "mallocPartId"))
if mibBuilder.loadTexts: mallocUtilEntry.setStatus('current')
mallocPartId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 3, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: mallocPartId.setStatus('current')
numBytesFree = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numBytesFree.setStatus('current')
numBlocksFree = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numBlocksFree.setStatus('current')
maxBlockSizeFree = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxBlockSizeFree.setStatus('current')
numBytesAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numBytesAlloc.setStatus('current')
numBlocksAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numBlocksAlloc.setStatus('current')
mbufsCount = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbufsCount.setStatus('current')
mbufsClusters = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 3, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbufsClusters.setStatus('current')
mbufsSpace = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 3, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbufsSpace.setStatus('current')
mbufsClFree = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 3, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbufsClFree.setStatus('current')
mbufsDrops = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 3, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbufsDrops.setStatus('current')
mbufsWait = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 3, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbufsWait.setStatus('current')
mbufsDrain = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 3, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbufsDrain.setStatus('current')
mbufsFreeAlloc = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 3, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbufsFreeAlloc.setStatus('current')
mbufsDataFreeAlloc = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 3, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbufsDataFreeAlloc.setStatus('current')
mbufsHeaderAlloc = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 3, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbufsHeaderAlloc.setStatus('current')
mbufsSocketAlloc = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 3, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbufsSocketAlloc.setStatus('current')
mbufsPcbAlloc = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 3, 3, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbufsPcbAlloc.setStatus('current')
mbufsRtableAlloc = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 3, 3, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbufsRtableAlloc.setStatus('current')
mbufsHtableAlloc = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 3, 3, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbufsHtableAlloc.setStatus('current')
mbufsAtableAlloc = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 3, 3, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbufsAtableAlloc.setStatus('current')
mbufsSoNameAlloc = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 3, 3, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbufsSoNameAlloc.setStatus('current')
mbufsZombieAlloc = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 3, 3, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbufsZombieAlloc.setStatus('current')
mbufsSoOptsAlloc = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 3, 3, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbufsSoOptsAlloc.setStatus('current')
mbufsFtableAlloc = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 3, 3, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbufsFtableAlloc.setStatus('current')
mbufsRightsAlloc = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 3, 3, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbufsRightsAlloc.setStatus('current')
mbufsIFaddrAlloc = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 1, 3, 3, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbufsIFaddrAlloc.setStatus('current')
moduleTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 1), )
if mibBuilder.loadTexts: moduleTable.setStatus('current')
moduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 1, 1), ).setIndexNames((0, "Fore-Switch-MIB", "moduleBoard"), (0, "Fore-Switch-MIB", "moduleNumber"))
if mibBuilder.loadTexts: moduleEntry.setStatus('current')
moduleBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBoard.setStatus('current')
moduleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleNumber.setStatus('current')
moduleName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleName.setStatus('current')
moduleSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSpeed.setStatus('current')
moduleNumberOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleNumberOfPorts.setStatus('current')
moduleUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleUptime.setStatus('current')
moduleHwMajorRev = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleHwMajorRev.setStatus('current')
moduleHwMinorRev = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleHwMinorRev.setStatus('current')
moduleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 67))).clone(namedValues=NamedValues(("generationA", 1), ("generationB", 2), ("generationC", 3), ("generationLC", 4), ("generationLE", 5), ("generationD", 6), ("generationPC1", 7), ("generationPC2", 8), ("generationE", 10), ("generationPCF1", 11), ("generationC2", 67)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleVersion.setStatus('current')
moduleTimingSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleTimingSupport.setStatus('current')
moduleProductNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleProductNumber.setStatus('current')
moduleState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("reset", 1), ("inService", 2), ("outOfService", 3), ("resetPair", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleState.setStatus('current')
moduleSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSerialNumber.setStatus('current')
moduleTestAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("startTest", 2), ("abortTest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleTestAdminStatus.setStatus('current')
moduleTestOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("normal", 1), ("underTest", 2), ("testSuccessful", 3), ("testFailed", 4), ("testAborted", 5), ("testUnsupported", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleTestOperStatus.setStatus('current')
moduleTestStatusText = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleTestStatusText.setStatus('current')
moduleAttachState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inService", 1), ("outOfService", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAttachState.setStatus('current')
moduleCLEI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleCLEI.setStatus('current')
appModuleTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 6), )
if mibBuilder.loadTexts: appModuleTable.setStatus('current')
appModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 6, 1), ).setIndexNames((0, "Fore-Switch-MIB", "appModuleIndex"))
if mibBuilder.loadTexts: appModuleEntry.setStatus('current')
appModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appModuleIndex.setStatus('current')
appModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appModuleName.setStatus('current')
appModuleOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notConfigured", 1), ("hwInitInProgress", 2), ("up", 3), ("shutDownInProgress", 4), ("down", 5), ("failed", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appModuleOperState.setStatus('current')
appModuleStatusText = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appModuleStatusText.setStatus('current')
appModuleApplicationType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 6, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appModuleApplicationType.setStatus('current')
appModuleSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appModuleSoftwareVersion.setStatus('current')
appModuleBootSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appModuleBootSoftwareVersion.setStatus('current')
appModuleOosLed = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("red", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appModuleOosLed.setStatus('current')
appModulePanicAction = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("suspend", 2))).clone('reset')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appModulePanicAction.setStatus('current')
outputBufferTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 2), )
if mibBuilder.loadTexts: outputBufferTable.setStatus('current')
outputBufferEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 2, 1), ).setIndexNames((0, "Fore-Switch-MIB", "obufBoard"), (0, "Fore-Switch-MIB", "obufNumber"), (0, "Fore-Switch-MIB", "obufType"))
if mibBuilder.loadTexts: outputBufferEntry.setStatus('current')
obufBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obufBoard.setStatus('current')
obufNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obufNumber.setStatus('current')
obufType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obufType.setStatus('current')
obufOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: obufOperStatus.setStatus('current')
obufBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obufBufferSize.setStatus('current')
obufQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obufQueueLength.setStatus('current')
obufOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obufOverflows.setStatus('current')
obufPriorityName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obufPriorityName.setStatus('current')
obufName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: obufName.setStatus('current')
hwPortTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 3), )
if mibBuilder.loadTexts: hwPortTable.setStatus('current')
hwPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 3, 1), ).setIndexNames((0, "Fore-Switch-MIB", "hwPortBoard"), (0, "Fore-Switch-MIB", "hwPortModule"), (0, "Fore-Switch-MIB", "hwPortNumber"))
if mibBuilder.loadTexts: hwPortEntry.setStatus('current')
hwPortBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortBoard.setStatus('current')
hwPortModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortModule.setStatus('current')
hwPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortNumber.setStatus('current')
hwPortVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 67))).clone(namedValues=NamedValues(("generationA", 1), ("generationB", 2), ("generationC", 3), ("generationLC", 4), ("generationLE", 5), ("generationD", 6), ("generationPC1", 7), ("generationPC2", 8), ("generationE", 10), ("generationPCF1", 11), ("generationC2", 67)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortVersion.setStatus('current')
hwPortModel = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35))).clone(namedValues=NamedValues(("model-TAXI-100", 1), ("model-TAXI-140", 2), ("model-DS3", 3), ("model-OC3", 4), ("model-8B10B", 5), ("model-6port-TAXI-100", 6), ("model-ASX-CTL", 7), ("model-OC12", 8), ("model-OC48", 9), ("model-DS3-PDH", 16), ("model-E3", 17), ("model-J2", 18), ("model-DS1", 19), ("model-E1", 20), ("model-TP25", 21), ("model-ASX-BP", 22), ("model-CESDS1", 23), ("model-CESE1", 24), ("model-FRAMDS1", 25), ("model-FRAME1", 26), ("model-IMADS1", 27), ("model-IMAE1", 28), ("model-RJ-45", 29), ("model-CHOC12", 30), ("model-STM1", 31), ("model-OC3-POS", 32), ("model-OC12-POS", 33), ("model-CHOC3", 34), ("model-ETH", 35)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortModel.setStatus('current')
hwPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3), ("unused", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortOperStatus.setStatus('current')
hwPortBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortBufferSize.setStatus('deprecated')
hwPortQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortQueueLength.setStatus('deprecated')
hwPortOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortOverflows.setStatus('deprecated')
hwPortErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortErrors.setStatus('deprecated')
hwPortCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("carrier", 1), ("noCarrier", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortCarrier.setStatus('current')
hwPortGlobalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortGlobalIndex.setStatus('deprecated')
hwPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortName.setStatus('current')
hwPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortAdminStatus.setStatus('current')
hwPortTAXILoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noLoopback", 1), ("loopback", 2))).clone('noLoopback')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortTAXILoopback.setStatus('current')
hwPortLEDModel = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lan", 1), ("wan", 2))).clone('lan')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortLEDModel.setStatus('current')
hwPortTxLED = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("green", 2), ("red", 3), ("yellow", 4), ("auto", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortTxLED.setStatus('current')
hwPortRxLED = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("green", 2), ("red", 3), ("yellow", 4), ("auto", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortRxLED.setStatus('current')
hwPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortIfIndex.setStatus('current')
hwPortRxSyncLED = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("green", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortRxSyncLED.setStatus('current')
hwPortCounterResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 3, 1, 21), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortCounterResetTime.setStatus('current')
hwPortCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("resetRequest", 1), ("resetTrue", 3), ("resetFalse", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortCounterReset.setStatus('current')
hwPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 3, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortSpeed.setStatus('current')
netmodAlarmsTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 4), )
if mibBuilder.loadTexts: netmodAlarmsTable.setStatus('current')
netmodAlarmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 4, 1), ).setIndexNames((0, "Fore-Switch-MIB", "netmodSlot"))
if mibBuilder.loadTexts: netmodAlarmsEntry.setStatus('current')
netmodSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netmodSlot.setStatus('current')
netmodSlotPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("high", 1), ("low", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netmodSlotPriority.setStatus('current')
netmodStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("absent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netmodStatus.setStatus('current')
netmodName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netmodName.setStatus('current')
hdcompTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 5), )
if mibBuilder.loadTexts: hdcompTable.setStatus('current')
hdcompEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 5, 1), ).setIndexNames((0, "Fore-Switch-MIB", "hdcompIndex"))
if mibBuilder.loadTexts: hdcompEntry.setStatus('current')
hdcompIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: hdcompIndex.setStatus('current')
hdcompDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdcompDescr.setStatus('current')
hdcompAsicVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdcompAsicVersion.setStatus('current')
hdcompVpiLookupErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdcompVpiLookupErrors.setStatus('current')
hdcompVciLookupErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 2, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdcompVciLookupErrors.setStatus('current')
swAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 1, 1), )
if mibBuilder.loadTexts: swAlarmTable.setStatus('current')
swAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 1, 1, 1), ).setIndexNames((0, "Fore-Switch-MIB", "swAlarmType"))
if mibBuilder.loadTexts: swAlarmEntry.setStatus('current')
swAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("powerSupplyInputFailed", 1), ("powerSupplyOutputFailed", 2), ("fanBankFailed", 3), ("tempSensorOverTemp", 4), ("linkFailed", 5), ("spansFailed", 6), ("powerSupplyOverCurrent", 7), ("powerSupply5VoltFailed", 8), ("netmodRemovedHighPrio", 9), ("netmodRemovedLowPrio", 10), ("fabricRemoved", 11), ("genPortFailure", 12), ("singleTimingRefFailed", 13), ("allTimingRefsFailed", 14), ("singleTCMFailed", 15), ("allTCMsFailed", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAlarmType.setStatus('current')
swAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAlarmStatus.setStatus('current')
swAlarmMinorCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAlarmMinorCategory.setStatus('current')
swAlarmMajorCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAlarmMajorCategory.setStatus('current')
swAlarmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAlarmReset.setStatus('current')
swAlarmCriticalCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAlarmCriticalCategory.setStatus('current')
swAlarmACOState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAlarmACOState.setStatus('current')
swAlarmMajorRelayState = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAlarmMajorRelayState.setStatus('current')
swAlarmMinorRelayState = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAlarmMinorRelayState.setStatus('current')
swAlarmCriticalRelayState = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAlarmCriticalRelayState.setStatus('current')
swAlarmRelayTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 1, 5), )
if mibBuilder.loadTexts: swAlarmRelayTable.setStatus('current')
swAlarmRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 1, 5, 1), ).setIndexNames((0, "Fore-Switch-MIB", "swAlarmRelayIndex"))
if mibBuilder.loadTexts: swAlarmRelayEntry.setStatus('current')
swAlarmRelayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAlarmRelayIndex.setStatus('current')
swAlarmRelayFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("swUnusedRelay", 1), ("swMajorAlarmRelay", 2), ("swMinorAlarmRelay", 3), ("swCriticalAlarmRelay", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAlarmRelayFunction.setStatus('current')
swAlarmRelayState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAlarmRelayState.setStatus('current')
swAlarmRelayOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("test", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAlarmRelayOperMode.setStatus('current')
envMaxNumberOfPowerSupplies = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envMaxNumberOfPowerSupplies.setStatus('current')
envNumberOfPowerSupplies = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envNumberOfPowerSupplies.setStatus('current')
envPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 2, 3), )
if mibBuilder.loadTexts: envPowerSupplyTable.setStatus('current')
envPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 2, 3, 1), ).setIndexNames((0, "Fore-Switch-MIB", "envPowerSupplyIndex"))
if mibBuilder.loadTexts: envPowerSupplyEntry.setStatus('current')
envPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envPowerSupplyIndex.setStatus('current')
envPowerSupplyType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("psUnknown", 1), ("psAutoRangeAC", 4), ("ps48VDC", 5), ("psRM1000HA", 6), ("ps30ADC", 7), ("psRM1000HA-C", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envPowerSupplyType.setStatus('current')
envPowerSupplyInputState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 2, 3, 1, 3), GeneralState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envPowerSupplyInputState.setStatus('current')
envPowerSupplyOutputState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 2, 3, 1, 4), GeneralState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envPowerSupplyOutputState.setStatus('current')
envPowerSupplySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envPowerSupplySerialNumber.setStatus('current')
envPowerSupplyVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envPowerSupplyVersion.setStatus('current')
envPowerSupplyCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 2, 3, 1, 7), GeneralState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envPowerSupplyCurrentState.setStatus('current')
envPowerSupply5VoltState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 2, 3, 1, 8), GeneralState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envPowerSupply5VoltState.setStatus('current')
envNumberOfFanBanks = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envNumberOfFanBanks.setStatus('current')
envFanBanksTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 3, 2), )
if mibBuilder.loadTexts: envFanBanksTable.setStatus('current')
envFanBanksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 3, 2, 1), ).setIndexNames((0, "Fore-Switch-MIB", "envFanBankIndex"))
if mibBuilder.loadTexts: envFanBanksEntry.setStatus('current')
envFanBankIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envFanBankIndex.setStatus('current')
envFanBankState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 3, 2, 1, 3), GeneralState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envFanBankState.setStatus('current')
envFanBankSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 3, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envFanBankSerialNumber.setStatus('current')
envFanBankType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envFanBankType.setStatus('current')
envFanBankRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envFanBankRevision.setStatus('current')
envNumberOfTempSensors = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envNumberOfTempSensors.setStatus('current')
envTempSensorsTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 4, 2), )
if mibBuilder.loadTexts: envTempSensorsTable.setStatus('current')
envTempSensorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 4, 2, 1), ).setIndexNames((0, "Fore-Switch-MIB", "envTempSensorIndex"))
if mibBuilder.loadTexts: envTempSensorsEntry.setStatus('current')
envTempSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("enclosure", 1), ("power-supply-1", 2), ("power-supply-2", 3), ("power-supply-3", 4), ("power-supply-4", 5), ("power-supply-5", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTempSensorIndex.setStatus('current')
envTempSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("overTemp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envTempSensorState.setStatus('current')
envMaxNumberOfCPUs = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envMaxNumberOfCPUs.setStatus('current')
envNumberOfCPUs = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envNumberOfCPUs.setStatus('current')
envCPUsTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 5, 3), )
if mibBuilder.loadTexts: envCPUsTable.setStatus('current')
envCPUsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 5, 3, 1), ).setIndexNames((0, "Fore-Switch-MIB", "envCpuBoard"), (0, "Fore-Switch-MIB", "envCpuSlot"))
if mibBuilder.loadTexts: envCPUsEntry.setStatus('current')
envCpuBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envCpuBoard.setStatus('current')
envCpuSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 5, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envCpuSlot.setStatus('current')
envCpuType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("other", 1), ("sun4e", 2), ("sun4c", 3), ("sparc", 4), ("i960ca", 5), ("i960cf", 6), ("i960ha", 7), ("i960hd", 8), ("p55", 9), ("p6", 10), ("cpv5000", 11), ("p266", 12), ("p200", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envCpuType.setStatus('current')
envCPUState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("fail", 2), ("standby", 3), ("boot", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envCPUState.setStatus('current')
envCpuDRAMSize = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 5, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envCpuDRAMSize.setStatus('current')
envCpuRevLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 5, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envCpuRevLevel.setStatus('current')
envCpuFlashSize = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 5, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envCpuFlashSize.setStatus('current')
envCpuBoardRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 5, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envCpuBoardRevision.setStatus('current')
envCpuPromRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 5, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envCpuPromRevision.setStatus('current')
envCpuMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 5, 3, 1, 10), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envCpuMACAddress.setStatus('current')
envCpuSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 5, 3, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envCpuSerialNumber.setStatus('current')
envCpuProductPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 5, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envCpuProductPartNumber.setStatus('current')
envCpuCLEI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 5, 3, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envCpuCLEI.setStatus('current')
envCpuIDESize = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 5, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envCpuIDESize.setStatus('current')
envMgmtBoardType = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envMgmtBoardType.setStatus('current')
envMgmtBoardRevision = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envMgmtBoardRevision.setStatus('current')
envMgmtBoardSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envMgmtBoardSerialNumber.setStatus('current')
envFabricAlarmTripTemperature = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 7, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envFabricAlarmTripTemperature.setStatus('current')
envFabricAlarmResetTemperature = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envFabricAlarmResetTemperature.setStatus('current')
envFabricTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 7, 3), )
if mibBuilder.loadTexts: envFabricTable.setStatus('current')
envFabricEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 7, 3, 1), ).setIndexNames((0, "Fore-Switch-MIB", "envFabricIndex"))
if mibBuilder.loadTexts: envFabricEntry.setStatus('current')
envFabricIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envFabricIndex.setStatus('current')
envFabricTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 7, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envFabricTemperature.setStatus('current')
envFabricTemperatureState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 4, 7, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("overTemp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envFabricTemperatureState.setStatus('current')
netmodTimingTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 3, 1, 1), )
if mibBuilder.loadTexts: netmodTimingTable.setStatus('obsolete')
netmodTimingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 3, 1, 1, 1), ).setIndexNames((0, "Fore-Switch-MIB", "ntBoard"), (0, "Fore-Switch-MIB", "ntModule"))
if mibBuilder.loadTexts: netmodTimingEntry.setStatus('obsolete')
ntBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntBoard.setStatus('obsolete')
ntModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 3, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntModule.setStatus('obsolete')
ntPrimaryRecoveredClock = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 3, 1, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntPrimaryRecoveredClock.setStatus('obsolete')
ntSecondaryRecoveredClock = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 3, 1, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntSecondaryRecoveredClock.setStatus('obsolete')
ntPrimaryExportClock = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primaryRecoveredClock", 1), ("crystalClock", 2), ("noClock", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntPrimaryExportClock.setStatus('obsolete')
ntSecondaryExportClock = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("secondaryRecoveredClock", 1), ("crystalClock", 2), ("noClock", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntSecondaryExportClock.setStatus('obsolete')
ntGlobalClock = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 3, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("exportClock", 1), ("importClock", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntGlobalClock.setStatus('obsolete')
ntExportClockOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 3, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primaryClock", 1), ("secondaryClock", 2), ("crystalClock", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntExportClockOperStatus.setStatus('obsolete')
ntPrimaryImportClock = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 3, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("netmodAExportClock", 1), ("netmodBExportClock", 2), ("netmodCExportClock", 3), ("netmodDExportClock", 4), ("board1PrimaryClock", 5), ("board2PrimaryClock", 6), ("board3PrimaryClock", 7), ("board4PrimaryClock", 8), ("managementStationClock", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntPrimaryImportClock.setStatus('obsolete')
ntSecondaryImportClock = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 3, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("netmodAExportClock", 1), ("netmodBExportClock", 2), ("netmodCExportClock", 3), ("netmodDExportClock", 4), ("board1PrimaryClock", 5), ("board2PrimaryClock", 6), ("board3PrimaryClock", 7), ("board4PrimaryClock", 8), ("managementStationClock", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntSecondaryImportClock.setStatus('obsolete')
ntImportClockOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 3, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primaryClock", 1), ("secondaryClock", 2), ("netmodExportClock", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntImportClockOperStatus.setStatus('obsolete')
boardTimingTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 3, 2, 1), )
if mibBuilder.loadTexts: boardTimingTable.setStatus('obsolete')
boardTimingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 3, 2, 1, 1), ).setIndexNames((0, "Fore-Switch-MIB", "btBoard"))
if mibBuilder.loadTexts: boardTimingEntry.setStatus('obsolete')
btBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btBoard.setStatus('obsolete')
btPrimaryClock = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("netmodAExportClock", 1), ("netmodBExportClock", 2), ("netmodCExportClock", 3), ("netmodDExportClock", 4), ("netmodNone", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: btPrimaryClock.setStatus('obsolete')
btSecondaryClock = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("netmodAExportClock", 1), ("netmodBExportClock", 2), ("netmodCExportClock", 3), ("netmodDExportClock", 4), ("netmodNone", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: btSecondaryClock.setStatus('obsolete')
btPrimaryClockOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clockUp", 1), ("clockDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: btPrimaryClockOperStatus.setStatus('obsolete')
btSecondaryClockOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clockUp", 1), ("clockDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: btSecondaryClockOperStatus.setStatus('obsolete')
shmemConfTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 1, 1), )
if mibBuilder.loadTexts: shmemConfTable.setStatus('current')
shmemConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 1, 1, 1), ).setIndexNames((0, "Fore-Switch-MIB", "shmemConfIndex"))
if mibBuilder.loadTexts: shmemConfEntry.setStatus('current')
shmemConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shmemConfIndex.setStatus('current')
shmemUcastConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shmemUcastConnections.setStatus('current')
shmemMcastConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shmemMcastConnections.setStatus('current')
shmemVpiVciLists = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shmemVpiVciLists.setStatus('current')
shmemCellsBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shmemCellsBuffers.setStatus('current')
shmemConfName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shmemConfName.setStatus('current')
shmemMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shmemMemorySize.setStatus('current')
netmodShmemTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 1, 2), )
if mibBuilder.loadTexts: netmodShmemTable.setStatus('current')
netmodShmemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 1, 2, 1), ).setIndexNames((0, "Fore-Switch-MIB", "nshmemBoard"), (0, "Fore-Switch-MIB", "nshmemModule"))
if mibBuilder.loadTexts: netmodShmemEntry.setStatus('current')
nshmemBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nshmemBoard.setStatus('current')
nshmemModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nshmemModule.setStatus('current')
nshmemConfRow = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 1, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nshmemConfRow.setStatus('current')
nshmemConfSharedMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nshmemConfSharedMemory.setStatus('current')
nshmemCurrentUcastConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nshmemCurrentUcastConnections.setStatus('current')
nshmemCurrentMcastConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nshmemCurrentMcastConnections.setStatus('current')
nshmemCurrentVpiVciLists = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 1, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nshmemCurrentVpiVciLists.setStatus('current')
nshmemCurrentCellsBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 1, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nshmemCurrentCellsBuffers.setStatus('current')
nshmemCurrentSharedMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 1, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nshmemCurrentSharedMemory.setStatus('current')
nshmemConfAal5PacketDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 1, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nshmemConfAal5PacketDrop.setStatus('current')
nshmemAssertXACPT = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clearXACPT", 1), ("assertXACPT", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nshmemAssertXACPT.setStatus('current')
nshmemMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nshmemMemorySize.setStatus('current')
portShmemConfTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 2, 1), )
if mibBuilder.loadTexts: portShmemConfTable.setStatus('current')
portShmemConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 2, 1, 1), ).setIndexNames((0, "Fore-Switch-MIB", "pshmemConfBoard"), (0, "Fore-Switch-MIB", "pshmemConfModule"), (0, "Fore-Switch-MIB", "pshmemConfPort"))
if mibBuilder.loadTexts: portShmemConfEntry.setStatus('current')
pshmemConfBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pshmemConfBoard.setStatus('current')
pshmemConfModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pshmemConfModule.setStatus('current')
pshmemConfPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pshmemConfPort.setStatus('current')
pshmemMaxCDVforCBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pshmemMaxCDVforCBR.setStatus('current')
pshmemMaxCDVforVBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 2, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pshmemMaxCDVforVBR.setStatus('current')
pshmemQsizeforABR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 2, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pshmemQsizeforABR.setStatus('current')
pshmemEfciOnABR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 2, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pshmemEfciOnABR.setStatus('current')
pshmemEfciOffABR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 2, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pshmemEfciOffABR.setStatus('current')
pshmemQsizeforCBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 2, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pshmemQsizeforCBR.setStatus('current')
pshmemQsizeforVBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 2, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pshmemQsizeforVBR.setStatus('current')
pshmemClpThreshforCBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 2, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pshmemClpThreshforCBR.setStatus('current')
pshmemClpThreshforVBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 2, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pshmemClpThreshforVBR.setStatus('current')
pshmemClpThreshforABR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 2, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pshmemClpThreshforABR.setStatus('current')
pShmemAtmInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pShmemAtmInterfaceIndex.setStatus('current')
portShmemTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 2, 2), )
if mibBuilder.loadTexts: portShmemTable.setStatus('current')
portShmemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 2, 2, 1), ).setIndexNames((0, "Fore-Switch-MIB", "pshmemBoard"), (0, "Fore-Switch-MIB", "pshmemModule"), (0, "Fore-Switch-MIB", "pshmemPort"), (0, "Fore-Switch-MIB", "pshmemPriority"))
if mibBuilder.loadTexts: portShmemEntry.setStatus('current')
pshmemBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pshmemBoard.setStatus('current')
pshmemModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pshmemModule.setStatus('current')
pshmemPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pshmemPort.setStatus('current')
pshmemPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("priorityUBR-ABR", 1), ("priorityVBR", 2), ("priorityCBR", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pshmemPriority.setStatus('current')
pshmemClpThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pshmemClpThreshold.setStatus('current')
pshmemDedicatedQsize = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pshmemDedicatedQsize.setStatus('current')
pshmemCurrentQsize = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pshmemCurrentQsize.setStatus('current')
pshmemTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pshmemTxCells.setStatus('current')
pshmemLostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pshmemLostCells.setStatus('current')
shmem2ConfTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 3, 1), )
if mibBuilder.loadTexts: shmem2ConfTable.setStatus('current')
shmem2ConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 3, 1, 1), ).setIndexNames((0, "Fore-Switch-MIB", "shmem2ConfIndex"))
if mibBuilder.loadTexts: shmem2ConfEntry.setStatus('current')
shmem2ConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shmem2ConfIndex.setStatus('current')
shmem2UcastConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shmem2UcastConnections.setStatus('current')
shmem2McastConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shmem2McastConnections.setStatus('current')
shmem2CellsBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shmem2CellsBuffers.setStatus('current')
shmem2ConfName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 3, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shmem2ConfName.setStatus('current')
shmem2Counters = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shmem2Counters.setStatus('current')
shmem2CellMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shmem2CellMemorySize.setStatus('current')
shmem2TableMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shmem2TableMemorySize.setStatus('current')
shmem2NumPriorities = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shmem2NumPriorities.setStatus('current')
netmodShmem2Table = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 3, 2), )
if mibBuilder.loadTexts: netmodShmem2Table.setStatus('current')
netmodShmem2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 3, 2, 1), ).setIndexNames((0, "Fore-Switch-MIB", "nShmem2Board"), (0, "Fore-Switch-MIB", "nShmem2Module"))
if mibBuilder.loadTexts: netmodShmem2Entry.setStatus('current')
nShmem2Board = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nShmem2Board.setStatus('current')
nShmem2Module = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nShmem2Module.setStatus('current')
nShmem2ConfRow = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 3, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nShmem2ConfRow.setStatus('current')
nShmem2ConfSharedMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nShmem2ConfSharedMemory.setStatus('current')
nShmem2CurrentUcastConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 3, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nShmem2CurrentUcastConnections.setStatus('current')
nShmem2CurrentMcastConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 3, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nShmem2CurrentMcastConnections.setStatus('current')
nShmem2CurrentCellsBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 3, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nShmem2CurrentCellsBuffers.setStatus('current')
nShmem2CurrentSharedMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 3, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nShmem2CurrentSharedMemory.setStatus('current')
nShmem2ConfAal5PacketDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 3, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nShmem2ConfAal5PacketDrop.setStatus('current')
nShmem2ConfAal5PacketDropforUBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 3, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nShmem2ConfAal5PacketDropforUBR.setStatus('current')
nShmem2ConfEfciOn = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 3, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nShmem2ConfEfciOn.setStatus('current')
nShmem2ConfEfciOff = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 3, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nShmem2ConfEfciOff.setStatus('current')
nShmem2CellMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 3, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nShmem2CellMemorySize.setStatus('current')
nShmem2TableMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 3, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nShmem2TableMemorySize.setStatus('current')
nShmem2NumPriorities = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 3, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nShmem2NumPriorities.setStatus('current')
nShmem2VBRPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("priorityRt", 1), ("priorityNrt", 2), ("unSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nShmem2VBRPriority.setStatus('current')
portShmem2ConfTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 4, 1), )
if mibBuilder.loadTexts: portShmem2ConfTable.setStatus('current')
portShmem2ConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 4, 1, 1), ).setIndexNames((0, "Fore-Switch-MIB", "pShmem2ConfBoard"), (0, "Fore-Switch-MIB", "pShmem2ConfModule"), (0, "Fore-Switch-MIB", "pShmem2ConfPort"))
if mibBuilder.loadTexts: portShmem2ConfEntry.setStatus('current')
pShmem2ConfBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pShmem2ConfBoard.setStatus('current')
pShmem2ConfModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pShmem2ConfModule.setStatus('current')
pShmem2ConfPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pShmem2ConfPort.setStatus('current')
pShmem2QsizeforCBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 4, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pShmem2QsizeforCBR.setStatus('deprecated')
pShmem2QsizeforVBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 4, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pShmem2QsizeforVBR.setStatus('deprecated')
pShmem2QsizeforABR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 4, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pShmem2QsizeforABR.setStatus('deprecated')
pShmem2QsizeforUBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 4, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pShmem2QsizeforUBR.setStatus('deprecated')
pShmem2ClpThreshforCBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 4, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pShmem2ClpThreshforCBR.setStatus('deprecated')
pShmem2ClpThreshforVBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 4, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pShmem2ClpThreshforVBR.setStatus('deprecated')
pShmem2ClpThreshforABR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 4, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pShmem2ClpThreshforABR.setStatus('deprecated')
pShmem2ClpThreshforUBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 4, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pShmem2ClpThreshforUBR.setStatus('deprecated')
pShmem2AtmInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 4, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pShmem2AtmInterfaceIndex.setStatus('current')
portPriorityShmem2ConfTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 4, 3), )
if mibBuilder.loadTexts: portPriorityShmem2ConfTable.setStatus('current')
portPriorityShmem2ConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 4, 3, 1), ).setIndexNames((0, "Fore-Switch-MIB", "ppShmem2ConfBoard"), (0, "Fore-Switch-MIB", "ppShmem2ConfModule"), (0, "Fore-Switch-MIB", "ppShmem2ConfPort"), (0, "Fore-Switch-MIB", "ppShmem2ConfPriority"))
if mibBuilder.loadTexts: portPriorityShmem2ConfEntry.setStatus('current')
ppShmem2ConfBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppShmem2ConfBoard.setStatus('current')
ppShmem2ConfModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppShmem2ConfModule.setStatus('current')
ppShmem2ConfPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppShmem2ConfPort.setStatus('current')
ppShmem2ConfPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("priorityABR", 1), ("priorityVBR", 2), ("priorityCBR", 3), ("priorityUBR", 4), ("priorityRt", 5), ("priorityNrt", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppShmem2ConfPriority.setStatus('current')
ppShmem2Qsize = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 4, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ppShmem2Qsize.setStatus('current')
ppShmem2ClpThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 4, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ppShmem2ClpThreshold.setStatus('current')
portShmem2Table = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 4, 2), )
if mibBuilder.loadTexts: portShmem2Table.setStatus('current')
portShmem2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 4, 2, 1), ).setIndexNames((0, "Fore-Switch-MIB", "pShmem2Board"), (0, "Fore-Switch-MIB", "pShmem2Module"), (0, "Fore-Switch-MIB", "pShmem2Port"), (0, "Fore-Switch-MIB", "pShmem2Priority"))
if mibBuilder.loadTexts: portShmem2Entry.setStatus('current')
pShmem2Board = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pShmem2Board.setStatus('current')
pShmem2Module = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pShmem2Module.setStatus('current')
pShmem2Port = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pShmem2Port.setStatus('current')
pShmem2Priority = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("priorityABR", 1), ("priorityVBR", 2), ("priorityCBR", 3), ("priorityUBR", 4), ("priorityRt", 5), ("priorityNrt", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pShmem2Priority.setStatus('current')
pShmem2ClpThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pShmem2ClpThreshold.setStatus('current')
pShmem2DedicatedQsize = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pShmem2DedicatedQsize.setStatus('current')
pShmem2CurrentQsize = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pShmem2CurrentQsize.setStatus('current')
pShmem2TxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pShmem2TxCells.setStatus('current')
pShmem2LostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pShmem2LostCells.setStatus('current')
pShmem2IntentionalLostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pShmem2IntentionalLostCells.setStatus('current')
pShmem2UnintentionalLostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pShmem2UnintentionalLostCells.setStatus('current')
channelShmem2Table = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 5, 1), )
if mibBuilder.loadTexts: channelShmem2Table.setStatus('current')
channelShmem2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 5, 1, 1), ).setIndexNames((0, "Fore-Switch-MIB", "vcShmem2OutputPort"), (0, "Fore-Switch-MIB", "vcShmem2OutputVPI"), (0, "Fore-Switch-MIB", "vcShmem2OutputVCI"))
if mibBuilder.loadTexts: channelShmem2Entry.setStatus('current')
vcShmem2OutputPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcShmem2OutputPort.setStatus('current')
vcShmem2OutputVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcShmem2OutputVPI.setStatus('current')
vcShmem2OutputVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcShmem2OutputVCI.setStatus('current')
vcShmem2TotalLostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcShmem2TotalLostCells.setStatus('current')
vcShmem2IntentionalLostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcShmem2IntentionalLostCells.setStatus('current')
vcShmem2UnintentionalLostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcShmem2UnintentionalLostCells.setStatus('current')
vcShmem2TransmittedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcShmem2TransmittedCells.setStatus('current')
pathShmem2Table = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 5, 2), )
if mibBuilder.loadTexts: pathShmem2Table.setStatus('current')
pathShmem2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 5, 2, 1), ).setIndexNames((0, "Fore-Switch-MIB", "vpShmem2OutputPort"), (0, "Fore-Switch-MIB", "vpShmem2OutputVPI"))
if mibBuilder.loadTexts: pathShmem2Entry.setStatus('current')
vpShmem2OutputPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpShmem2OutputPort.setStatus('current')
vpShmem2OutputVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpShmem2OutputVPI.setStatus('current')
vpShmem2TotalLostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 5, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpShmem2TotalLostCells.setStatus('current')
vpShmem2IntentionalLostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 5, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpShmem2IntentionalLostCells.setStatus('current')
vpShmem2UnintentionalLostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 5, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpShmem2UnintentionalLostCells.setStatus('current')
vpShmem2TransmittedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 5, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpShmem2TransmittedCells.setStatus('current')
netmodShmem2CustomBCSTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 3, 3), )
if mibBuilder.loadTexts: netmodShmem2CustomBCSTable.setStatus('current')
netmodShmem2CustomBCSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 3, 3, 1), ).setIndexNames((0, "Fore-Switch-MIB", "nShmem2CustomBCSBoard"), (0, "Fore-Switch-MIB", "nShmem2CustomBCSModule"), (0, "Fore-Switch-MIB", "nShmem2CustomBCSValue"))
if mibBuilder.loadTexts: netmodShmem2CustomBCSEntry.setStatus('current')
nShmem2CustomBCSBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 3, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: nShmem2CustomBCSBoard.setStatus('current')
nShmem2CustomBCSModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 3, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: nShmem2CustomBCSModule.setStatus('current')
nShmem2CustomBCSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 3, 3, 1, 3), Integer32())
if mibBuilder.loadTexts: nShmem2CustomBCSValue.setStatus('current')
nShmem2CustomBCSWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 3, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nShmem2CustomBCSWeight.setStatus('current')
nShmem2CustomBCSRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 3, 3, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nShmem2CustomBCSRowStatus.setStatus('current')
shmem3ConfTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 6, 1), )
if mibBuilder.loadTexts: shmem3ConfTable.setStatus('current')
shmem3ConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 6, 1, 1), ).setIndexNames((0, "Fore-Switch-MIB", "shmem3ConfIndex"))
if mibBuilder.loadTexts: shmem3ConfEntry.setStatus('current')
shmem3ConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shmem3ConfIndex.setStatus('current')
shmem3UcastConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shmem3UcastConnections.setStatus('current')
shmem3McastConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shmem3McastConnections.setStatus('current')
shmem3VpiVciLists = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shmem3VpiVciLists.setStatus('current')
shmem3CellsBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shmem3CellsBuffers.setStatus('current')
shmem3ConfName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 6, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shmem3ConfName.setStatus('current')
shmem3Counters = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 6, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shmem3Counters.setStatus('current')
shmem3CellMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 6, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shmem3CellMemorySize.setStatus('current')
shmem3TableMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 6, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shmem3TableMemorySize.setStatus('current')
netmodShmem3Table = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 6, 2), )
if mibBuilder.loadTexts: netmodShmem3Table.setStatus('current')
netmodShmem3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 6, 2, 1), ).setIndexNames((0, "Fore-Switch-MIB", "nShmem3Board"), (0, "Fore-Switch-MIB", "nShmem3Module"))
if mibBuilder.loadTexts: netmodShmem3Entry.setStatus('current')
nShmem3Board = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nShmem3Board.setStatus('current')
nShmem3Module = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nShmem3Module.setStatus('current')
nShmem3ConfRow = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 6, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nShmem3ConfRow.setStatus('current')
nShmem3ConfSharedMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 6, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nShmem3ConfSharedMemory.setStatus('current')
nShmem3CurrentUcastConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 6, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nShmem3CurrentUcastConnections.setStatus('current')
nShmem3CurrentMcastConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 6, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nShmem3CurrentMcastConnections.setStatus('current')
nShmem3CurrentVpiVciLists = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 6, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nShmem3CurrentVpiVciLists.setStatus('current')
nShmem3CurrentCellsBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 6, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nShmem3CurrentCellsBuffers.setStatus('current')
nShmem3ConfAal5PacketDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 6, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nShmem3ConfAal5PacketDrop.setStatus('current')
nShmem3ConfAal5PacketDropforUBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 6, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nShmem3ConfAal5PacketDropforUBR.setStatus('current')
nShmem3ConfEfciOn = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 6, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nShmem3ConfEfciOn.setStatus('current')
nShmem3ConfEfciOff = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 6, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nShmem3ConfEfciOff.setStatus('current')
nShmem3CellMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 6, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nShmem3CellMemorySize.setStatus('current')
nShmem3TableMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 6, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nShmem3TableMemorySize.setStatus('current')
nShmem3ConfCountPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 6, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nShmem3ConfCountPackets.setStatus('current')
nShmem3ConfAltCLP1Threshold = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 6, 2, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nShmem3ConfAltCLP1Threshold.setStatus('current')
nShmem3ConfAltCLP01Threshold = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 6, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nShmem3ConfAltCLP01Threshold.setStatus('current')
nShmem3ConfVcCLP1ForCBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 6, 2, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nShmem3ConfVcCLP1ForCBR.setStatus('current')
nShmem3ConfVcCLP01ForCBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 6, 2, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nShmem3ConfVcCLP01ForCBR.setStatus('current')
nShmem3ConfVcCLP1ForVBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 6, 2, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nShmem3ConfVcCLP1ForVBR.setStatus('current')
nShmem3ConfVcCLP01ForVBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 6, 2, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nShmem3ConfVcCLP01ForVBR.setStatus('current')
nShmem3ConfVcCLP1ForABR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 6, 2, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nShmem3ConfVcCLP1ForABR.setStatus('current')
nShmem3ConfVcCLP01ForABR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 6, 2, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nShmem3ConfVcCLP01ForABR.setStatus('current')
nShmem3ConfVcCLP1ForUBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 6, 2, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nShmem3ConfVcCLP1ForUBR.setStatus('current')
nShmem3ConfVcCLP01ForUBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 6, 2, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nShmem3ConfVcCLP01ForUBR.setStatus('current')
portShmem3ConfTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 7, 1), )
if mibBuilder.loadTexts: portShmem3ConfTable.setStatus('current')
portShmem3ConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 7, 1, 1), ).setIndexNames((0, "Fore-Switch-MIB", "pShmem3ConfBoard"), (0, "Fore-Switch-MIB", "pShmem3ConfModule"), (0, "Fore-Switch-MIB", "pShmem3ConfPort"))
if mibBuilder.loadTexts: portShmem3ConfEntry.setStatus('current')
pShmem3ConfBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pShmem3ConfBoard.setStatus('current')
pShmem3ConfModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pShmem3ConfModule.setStatus('current')
pShmem3ConfPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pShmem3ConfPort.setStatus('current')
pShmem3QsizeforCBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 7, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pShmem3QsizeforCBR.setStatus('current')
pShmem3QsizeforVBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 7, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pShmem3QsizeforVBR.setStatus('current')
pShmem3QsizeforABR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 7, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pShmem3QsizeforABR.setStatus('current')
pShmem3QsizeforUBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 7, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pShmem3QsizeforUBR.setStatus('current')
pShmem3Clp01ThreshforCBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 7, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pShmem3Clp01ThreshforCBR.setStatus('current')
pShmem3Clp1ThreshforCBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 7, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pShmem3Clp1ThreshforCBR.setStatus('current')
pShmem3Clp01ThreshforVBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 7, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pShmem3Clp01ThreshforVBR.setStatus('current')
pShmem3Clp1ThreshforVBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 7, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pShmem3Clp1ThreshforVBR.setStatus('current')
pShmem3Clp01ThreshforABR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 7, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pShmem3Clp01ThreshforABR.setStatus('current')
pShmem3Clp1ThreshforABR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 7, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pShmem3Clp1ThreshforABR.setStatus('current')
pShmem3Clp01ThreshforUBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 7, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pShmem3Clp01ThreshforUBR.setStatus('current')
pShmem3Clp1ThreshforUBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 7, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pShmem3Clp1ThreshforUBR.setStatus('current')
pShmem3RateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 7, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pShmem3RateLimit.setStatus('current')
pShmem3ConfSVCSchedulingCBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 7, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("roundrobin", 2), ("smoothed", 3), ("guaranteed", 4))).clone('roundrobin')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pShmem3ConfSVCSchedulingCBR.setStatus('deprecated')
pShmem3ConfPVCSchedulingCBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 7, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("perupc", 1), ("roundrobin", 2), ("smoothed", 3), ("guaranteed", 4))).clone('roundrobin')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pShmem3ConfPVCSchedulingCBR.setStatus('deprecated')
pShmem3ConfSVCSchedulingVBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 7, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("roundrobin", 2), ("smoothed", 3), ("guaranteed", 4))).clone('roundrobin')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pShmem3ConfSVCSchedulingVBR.setStatus('deprecated')
pShmem3ConfPVCSchedulingVBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 7, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("perupc", 1), ("roundrobin", 2), ("smoothed", 3), ("guaranteed", 4))).clone('roundrobin')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pShmem3ConfPVCSchedulingVBR.setStatus('deprecated')
pShmem3ConfAltCLPConfigCBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 7, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allOn", 1), ("allOff", 2), ("svcOn", 3), ("svcOff", 4))).clone('allOff')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pShmem3ConfAltCLPConfigCBR.setStatus('current')
pShmem3ConfAltCLPConfigVBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 7, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allOn", 1), ("allOff", 2), ("svcOn", 3), ("svcOff", 4))).clone('allOff')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pShmem3ConfAltCLPConfigVBR.setStatus('current')
pShmem3ConfAltCLPConfigUBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 7, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allOn", 1), ("allOff", 2), ("svcOn", 3), ("svcOff", 4))).clone('allOff')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pShmem3ConfAltCLPConfigUBR.setStatus('current')
pShmem3AtmInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 7, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pShmem3AtmInterfaceIndex.setStatus('current')
portShmem3Table = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 7, 2), )
if mibBuilder.loadTexts: portShmem3Table.setStatus('current')
portShmem3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 7, 2, 1), ).setIndexNames((0, "Fore-Switch-MIB", "pShmem3Board"), (0, "Fore-Switch-MIB", "pShmem3Module"), (0, "Fore-Switch-MIB", "pShmem3Port"), (0, "Fore-Switch-MIB", "pShmem3Priority"))
if mibBuilder.loadTexts: portShmem3Entry.setStatus('current')
pShmem3Board = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pShmem3Board.setStatus('current')
pShmem3Module = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pShmem3Module.setStatus('current')
pShmem3Port = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pShmem3Port.setStatus('current')
pShmem3Priority = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("priorityABR", 1), ("priorityVBR", 2), ("priorityCBR", 3), ("priorityUBR", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pShmem3Priority.setStatus('current')
pShmem3CurrentQsize = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 7, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pShmem3CurrentQsize.setStatus('current')
pShmem3TxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 7, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pShmem3TxCells.setStatus('current')
pShmem3EPDLostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 7, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pShmem3EPDLostCells.setStatus('current')
pShmem3CLP01LostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 7, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pShmem3CLP01LostCells.setStatus('current')
pShmem3CLP1LostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 7, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pShmem3CLP1LostCells.setStatus('current')
pShmem3VcCLPLostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 7, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pShmem3VcCLPLostCells.setStatus('current')
pShmem3OverflowLostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 7, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pShmem3OverflowLostCells.setStatus('current')
pShmem3PPDLostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 7, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pShmem3PPDLostCells.setStatus('current')
channelShmem3Table = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 8, 1), )
if mibBuilder.loadTexts: channelShmem3Table.setStatus('current')
channelShmem3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 8, 1, 1), ).setIndexNames((0, "Fore-Switch-MIB", "vcShmem3OutputPort"), (0, "Fore-Switch-MIB", "vcShmem3OutputVPI"), (0, "Fore-Switch-MIB", "vcShmem3OutputVCI"))
if mibBuilder.loadTexts: channelShmem3Entry.setStatus('current')
vcShmem3OutputPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcShmem3OutputPort.setStatus('current')
vcShmem3OutputVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcShmem3OutputVPI.setStatus('current')
vcShmem3OutputVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 8, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcShmem3OutputVCI.setStatus('current')
vcShmem3IntentionalLostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 8, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcShmem3IntentionalLostCells.setStatus('current')
vcShmem3UnintentionalLostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 8, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcShmem3UnintentionalLostCells.setStatus('current')
vcShmem3CLP0TxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 8, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcShmem3CLP0TxCells.setStatus('current')
vcShmem3CLP1TxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 8, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcShmem3CLP1TxCells.setStatus('current')
vcShmem3EPDLostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 8, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcShmem3EPDLostCells.setStatus('current')
vcShmem3CLP1LostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 8, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcShmem3CLP1LostCells.setStatus('current')
vcShmem3CLP01LostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 8, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcShmem3CLP01LostCells.setStatus('current')
vcShmem3TransmittedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 8, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcShmem3TransmittedPackets.setStatus('current')
vcShmem3CurrentQsize = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 8, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcShmem3CurrentQsize.setStatus('current')
pathShmem3Table = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 8, 2), )
if mibBuilder.loadTexts: pathShmem3Table.setStatus('current')
pathShmem3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 8, 2, 1), ).setIndexNames((0, "Fore-Switch-MIB", "vpShmem3OutputPort"), (0, "Fore-Switch-MIB", "vpShmem3OutputVPI"))
if mibBuilder.loadTexts: pathShmem3Entry.setStatus('current')
vpShmem3OutputPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpShmem3OutputPort.setStatus('current')
vpShmem3OutputVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpShmem3OutputVPI.setStatus('current')
vpShmem3UnintentionalLostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 8, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpShmem3UnintentionalLostCells.setStatus('current')
vpShmem3CLP0TxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 8, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpShmem3CLP0TxCells.setStatus('current')
vpShmem3CLP1TxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 8, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpShmem3CLP1TxCells.setStatus('current')
vpShmem3CLP1LostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 8, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpShmem3CLP1LostCells.setStatus('current')
vpShmem3CLP01LostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 8, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpShmem3CLP01LostCells.setStatus('current')
vpShmem3TransmittedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 8, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpShmem3TransmittedPackets.setStatus('current')
vpShmem3CurrentQsize = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 8, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpShmem3CurrentQsize.setStatus('current')
netmodGenericShmemTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 9, 1), )
if mibBuilder.loadTexts: netmodGenericShmemTable.setStatus('current')
netmodGenericShmemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 9, 1, 1), ).setIndexNames((0, "Fore-Switch-MIB", "nGenericShmemBoard"), (0, "Fore-Switch-MIB", "nGenericShmemModule"), (0, "Fore-Switch-MIB", "nGenericShmemSubindex"))
if mibBuilder.loadTexts: netmodGenericShmemEntry.setStatus('current')
nGenericShmemBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nGenericShmemBoard.setStatus('current')
nGenericShmemModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nGenericShmemModule.setStatus('current')
nGenericShmemSubindex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nGenericShmemSubindex.setStatus('current')
nGenericShmemCurrentUcastConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nGenericShmemCurrentUcastConnections.setStatus('current')
nGenericShmemCurrentMcastConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 9, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nGenericShmemCurrentMcastConnections.setStatus('current')
nGenericShmemCurrentConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 9, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nGenericShmemCurrentConnections.setStatus('current')
nGenericShmemMaxUcastConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 9, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nGenericShmemMaxUcastConnections.setStatus('current')
nGenericShmemMaxMcastConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 9, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nGenericShmemMaxMcastConnections.setStatus('current')
nGenericShmemMaxConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 9, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nGenericShmemMaxConnections.setStatus('current')
netmodGenericShmemCustomBCSTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 9, 3), )
if mibBuilder.loadTexts: netmodGenericShmemCustomBCSTable.setStatus('current')
netmodGenericShmemCustomBCSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 9, 3, 1), ).setIndexNames((0, "Fore-Switch-MIB", "nGenericShmemCustomBCSBoard"), (0, "Fore-Switch-MIB", "nGenericShmemCustomBCSModule"), (0, "Fore-Switch-MIB", "nGenericShmemCustomBCSSubindex"), (0, "Fore-Switch-MIB", "nGenericShmemCustomBCSValue"))
if mibBuilder.loadTexts: netmodGenericShmemCustomBCSEntry.setStatus('current')
nGenericShmemCustomBCSBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 9, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: nGenericShmemCustomBCSBoard.setStatus('current')
nGenericShmemCustomBCSModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 9, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: nGenericShmemCustomBCSModule.setStatus('current')
nGenericShmemCustomBCSSubindex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 9, 3, 1, 3), Integer32())
if mibBuilder.loadTexts: nGenericShmemCustomBCSSubindex.setStatus('current')
nGenericShmemCustomBCSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 9, 3, 1, 4), Integer32())
if mibBuilder.loadTexts: nGenericShmemCustomBCSValue.setStatus('current')
nGenericShmemCustomBCSWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 9, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nGenericShmemCustomBCSWeight.setStatus('current')
nGenericShmemCustomBCSRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 9, 3, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nGenericShmemCustomBCSRowStatus.setStatus('current')
dualScpConfTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 6, 1, 1), )
if mibBuilder.loadTexts: dualScpConfTable.setStatus('current')
dualScpConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 6, 1, 1, 1), ).setIndexNames((0, "Fore-Switch-MIB", "boardIndex"))
if mibBuilder.loadTexts: dualScpConfEntry.setStatus('current')
dualScpSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 6, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("slotX", 1), ("slotY", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualScpSlot.setStatus('current')
dualScpState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 6, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("standalone", 1), ("dual", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualScpState.setStatus('current')
dualScpSyncState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 6, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualScpSyncState.setStatus('current')
dualScpPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 6, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("slotX", 1), ("slotY", 2))).clone('slotX')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dualScpPrimary.setStatus('current')
dualScpFailover = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 6, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dualScpFailover.setStatus('current')
dualScpManualSyncRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 6, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12))).clone(namedValues=NamedValues(("syncIdle", 1), ("syncFlash", 2), ("syncCdb", 3), ("syncPassword", 4), ("syncLecsConfig", 5), ("syncOS", 6), ("syncInit", 7), ("syncSecurid", 8), ("syncSecret", 9), ("syncLoader", 10), ("syncKrb5KeyTab", 12))).clone('syncIdle')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dualScpManualSyncRequest.setStatus('current')
dualScpCdbSyncMode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 6, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("automatic", 2))).clone('automatic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dualScpCdbSyncMode.setStatus('current')
dualScpManualSwitchOver = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 6, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dualScpManualSwitchOver.setStatus('current')
dualScpSwitchOverTime = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 6, 1, 1, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualScpSwitchOverTime.setStatus('current')
dualScpSwitchOverThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 6, 1, 1, 1, 10), Integer32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dualScpSwitchOverThreshold.setStatus('current')
dualScpSyncRequestList = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 6, 1, 1, 1, 11), IntegerBitString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualScpSyncRequestList.setStatus('current')
dualScpNumSyncRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 6, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualScpNumSyncRequests.setStatus('current')
dualScpNumSyncFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 6, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualScpNumSyncFailures.setStatus('current')
dualScpResetStandbyScp = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 6, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dualScpResetStandbyScp.setStatus('current')
dualScpAutoRemoveOldFiles = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 6, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dualScpAutoRemoveOldFiles.setStatus('current')
dualScpRedundancyState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 6, 1, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualScpRedundancyState.setStatus('current')
dualScpSVXCPStateSyncPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 6, 1, 1, 1, 17), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualScpSVXCPStateSyncPercent.setStatus('current')
dualScpSVXCPStateTransferFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 6, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("failed", 1), ("ok", 2))).clone('ok')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualScpSVXCPStateTransferFailed.setStatus('current')
dualScpSVXCPdroppedCallCount = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 6, 1, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dualScpSVXCPdroppedCallCount.setStatus('current')
genericPortGroupConfTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 9, 2), )
if mibBuilder.loadTexts: genericPortGroupConfTable.setStatus('current')
genericPortGroupConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 9, 2, 1), ).setIndexNames((0, "Fore-Switch-MIB", "genericPortGroupBoard"), (0, "Fore-Switch-MIB", "genericPortGroupIndex"), (0, "Fore-Switch-MIB", "genericPortGroupSubindex"), (0, "Fore-Switch-MIB", "genericPortGroupPrioIndex"))
if mibBuilder.loadTexts: genericPortGroupConfEntry.setStatus('current')
genericPortGroupBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericPortGroupBoard.setStatus('current')
genericPortGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericPortGroupIndex.setStatus('current')
genericPortGroupSubindex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 9, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericPortGroupSubindex.setStatus('current')
genericPortGroupPrioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 9, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericPortGroupPrioIndex.setStatus('current')
genericPortGroupAal5PacketDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 9, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericPortGroupAal5PacketDrop.setStatus('current')
genericPortGroupEfciOn = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 9, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericPortGroupEfciOn.setStatus('current')
genericPortGroupEfciOff = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 9, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericPortGroupEfciOff.setStatus('current')
genericPortGroupPrioName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 9, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericPortGroupPrioName.setStatus('current')
genericOutputPortConfTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 10, 1), )
if mibBuilder.loadTexts: genericOutputPortConfTable.setStatus('current')
genericOutputPortConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 10, 1, 1), ).setIndexNames((0, "Fore-Switch-MIB", "genericOutputPortConfBoard"), (0, "Fore-Switch-MIB", "genericOutputPortConfModule"), (0, "Fore-Switch-MIB", "genericOutputPortConfPort"), (0, "Fore-Switch-MIB", "genericOutputPortConfPrio"))
if mibBuilder.loadTexts: genericOutputPortConfEntry.setStatus('current')
genericOutputPortConfBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericOutputPortConfBoard.setStatus('current')
genericOutputPortConfModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 10, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericOutputPortConfModule.setStatus('current')
genericOutputPortConfPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 10, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericOutputPortConfPort.setStatus('current')
genericOutputPortConfPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 10, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericOutputPortConfPrio.setStatus('current')
genericOutputPortConfPrioDedicatedQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 10, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericOutputPortConfPrioDedicatedQSize.setStatus('current')
genericOutputPortConfPrioClp1Threshold = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 10, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericOutputPortConfPrioClp1Threshold.setStatus('current')
genericOutputPortConfPrioClp01Threshold = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 10, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericOutputPortConfPrioClp01Threshold.setStatus('current')
genericOutputPortConfPrioName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 10, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericOutputPortConfPrioName.setStatus('current')
genericOutputPortConfAtmif = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 10, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericOutputPortConfAtmif.setStatus('current')
genericOutputPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 10, 2), )
if mibBuilder.loadTexts: genericOutputPortStatsTable.setStatus('current')
genericOutputPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 10, 2, 1), ).setIndexNames((0, "Fore-Switch-MIB", "genericOutputPortStatsBoard"), (0, "Fore-Switch-MIB", "genericOutputPortStatsModule"), (0, "Fore-Switch-MIB", "genericOutputPortStatsPort"), (0, "Fore-Switch-MIB", "genericOutputPortStatsPrio"))
if mibBuilder.loadTexts: genericOutputPortStatsEntry.setStatus('current')
genericOutputPortStatsBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericOutputPortStatsBoard.setStatus('current')
genericOutputPortStatsModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 10, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericOutputPortStatsModule.setStatus('current')
genericOutputPortStatsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 10, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericOutputPortStatsPort.setStatus('current')
genericOutputPortStatsPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 10, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericOutputPortStatsPrio.setStatus('current')
genericOutputPortStatsPrioTransmittedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 10, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericOutputPortStatsPrioTransmittedCells.setStatus('current')
genericOutputPortStatsPrioClp1LostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 10, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericOutputPortStatsPrioClp1LostCells.setStatus('current')
genericOutputPortStatsPrioClp01LostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 10, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericOutputPortStatsPrioClp01LostCells.setStatus('current')
genericOutputPortStatsPrioName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 10, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericOutputPortStatsPrioName.setStatus('current')
genericOutputPortStatsAtmif = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 10, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericOutputPortStatsAtmif.setStatus('current')
genericOutputPortStatsPrioEpdPpdLostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 5, 10, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericOutputPortStatsPrioEpdPpdLostCells.setStatus('current')
hardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareVersion.setStatus('current')
softwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareVersion.setStatus('current')
maxPaths = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxPaths.setStatus('current')
maxChannels = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxChannels.setStatus('current')
atmAddress = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 5), SpansAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAddress.setStatus('current')
uptime = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uptime.setStatus('current')
switchCDV = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchCDV.setStatus('obsolete')
switchPolicingAction = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tag", 1), ("drop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchPolicingAction.setStatus('obsolete')
softwareVersionText = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareVersionText.setStatus('current')
switchType = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 17, 18, 19, 20, 22))).clone(namedValues=NamedValues(("asx100", 1), ("asx200", 2), ("asx200wg", 4), ("asx200bx", 5), ("asx200bxe", 6), ("cabletron9A000", 7), ("asx1000", 8), ("le155", 9), ("sfcs200wg", 10), ("sfcs200bx", 11), ("sfcs1000", 12), ("tnx210", 15), ("tnx1100", 16), ("asx1200", 17), ("asx4000", 18), ("le25", 19), ("esx3000", 20), ("asx150", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchType.setStatus('current')
switchReservedPMPMinVCI = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchReservedPMPMinVCI.setStatus('current')
switchReservedPMPMaxVCI = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchReservedPMPMaxVCI.setStatus('current')
switchTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchTimeZone.setStatus('current')
switchGMTime = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 15), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchGMTime.setStatus('current')
switchProtocolType = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tftp", 1), ("ftp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchProtocolType.setStatus('current')
switchCurrentUserid = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCurrentUserid.setStatus('current')
switchCurrentLoginFrom = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCurrentLoginFrom.setStatus('current')
switchPrimaryClock = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchPrimaryClock.setStatus('deprecated')
switchSecondaryClock = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchSecondaryClock.setStatus('deprecated')
switchClockOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("primaryClock", 1), ("secondaryClock", 2), ("crystalAClock", 3), ("crystalBClock", 4), ("crystalCClock", 5), ("crystalDClock", 6), ("tcmClock", 7), ("localCrystalClock", 8), ("primaryClockPartner", 9), ("secondaryClockPartner", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchClockOperStatus.setStatus('deprecated')
switchTimingMode = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("switchMode", 1), ("tcmMode", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchTimingMode.setStatus('current')
switchConnectionPreservation = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchConnectionPreservation.setStatus('current')
switchATMLayerOAM = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchATMLayerOAM.setStatus('current')
switchHttpServer = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchHttpServer.setStatus('current')
switchHttpHelpUrl = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchHttpHelpUrl.setStatus('current')
switchCtrlLinkid = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCtrlLinkid.setStatus('current')
switchClockCurrentStatus = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchClockCurrentStatus.setStatus('current')
softwareLicenseKey = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softwareLicenseKey.setStatus('current')
switchCounterResetTime = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 32), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCounterResetTime.setStatus('current')
switchCounterReset = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("resetRequest", 1), ("unresetRequest", 2), ("resetTrue", 3), ("resetFalse", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchCounterReset.setStatus('current')
switchPrimaryClockPort = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchPrimaryClockPort.setStatus('current')
switchSecondaryClockPort = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchSecondaryClockPort.setStatus('current')
switchPmpEnable = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchPmpEnable.setStatus('current')
switchCallPreservation = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchCallPreservation.setStatus('current')
switchCallPresOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCallPresOperStatus.setStatus('current')
switchDebounceTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 30), )
if mibBuilder.loadTexts: switchDebounceTable.setStatus('current')
switchDebounceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 30, 1), ).setIndexNames((0, "Fore-Switch-MIB", "switchDebounceIndex"))
if mibBuilder.loadTexts: switchDebounceEntry.setStatus('current')
switchDebounceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 30, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchDebounceIndex.setStatus('current')
switchDebounceName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 30, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchDebounceName.setStatus('current')
switchDebounceHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 30, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchDebounceHysteresis.setStatus('current')
mcastGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 27))
mcastSpaceTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 27, 1), )
if mibBuilder.loadTexts: mcastSpaceTable.setStatus('current')
mcastSpaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 27, 1, 1), ).setIndexNames((0, "Fore-Switch-MIB", "mcastSpaceIndex"))
if mibBuilder.loadTexts: mcastSpaceEntry.setStatus('current')
mcastSpaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 27, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: mcastSpaceIndex.setStatus('current')
mcastSpaceNumConn = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 27, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcastSpaceNumConn.setStatus('current')
mcastSpaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 27, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcastSpaceName.setStatus('current')
switchSbprServerAddressTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 34), )
if mibBuilder.loadTexts: switchSbprServerAddressTable.setStatus('current')
switchSbprServerAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 34, 1), ).setIndexNames((0, "Fore-Switch-MIB", "sbprServerAddressIndex"))
if mibBuilder.loadTexts: switchSbprServerAddressEntry.setStatus('current')
sbprServerAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 34, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbprServerAddressIndex.setStatus('current')
sbprServerAddressIndexName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 34, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbprServerAddressIndexName.setStatus('current')
sbprServerMaxHops = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 34, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbprServerMaxHops.setStatus('current')
sbprServerMinSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 34, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbprServerMinSeconds.setStatus('current')
sbprServerAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 34, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbprServerAddress1.setStatus('current')
sbprServerAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 34, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbprServerAddress2.setStatus('current')
sbprServerAddress3 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 34, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbprServerAddress3.setStatus('current')
sbprServerAddress4 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 34, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbprServerAddress4.setStatus('current')
sbprServerAddress5 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 34, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbprServerAddress5.setStatus('current')
sbprServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 34, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sbprServerRowStatus.setStatus('current')
serviceCategoryTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 37), )
if mibBuilder.loadTexts: serviceCategoryTable.setStatus('current')
serviceCategoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 37, 1), ).setIndexNames((0, "Fore-Switch-MIB", "serviceCategoryIndex"))
if mibBuilder.loadTexts: serviceCategoryEntry.setStatus('current')
serviceCategoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 37, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceCategoryIndex.setStatus('current')
serviceCategoryName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 1, 37, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceCategoryName.setStatus('current')
confTopoHelloInterval = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confTopoHelloInterval.setStatus('current')
confTopoNsapIndInterval = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confTopoNsapIndInterval.setStatus('current')
confTopoStaticUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 11, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confTopoStaticUpdateInterval.setStatus('current')
confTopoMaxHopCount = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 11, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confTopoMaxHopCount.setStatus('current')
confTopoACRPropMult = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 11, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confTopoACRPropMult.setStatus('current')
confTopoMinThresh = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 11, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confTopoMinThresh.setStatus('current')
confTopoMinVCAvail = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 11, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confTopoMinVCAvail.setStatus('current')
confTopoSpansAreaID = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 11, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confTopoSpansAreaID.setStatus('current')
confTopoSpansBorderSwitch = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 11, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confTopoSpansBorderSwitch.setStatus('current')
confTopoSwitchPrefix = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 11, 10), NsapPrefix()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confTopoSwitchPrefix.setStatus('current')
confTopoSwitchPrefixMask = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 11, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confTopoSwitchPrefixMask.setStatus('current')
confTopoPeerGroupMask = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 11, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confTopoPeerGroupMask.setStatus('current')
confTopoSpansPnniBorderSwitch = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 11, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confTopoSpansPnniBorderSwitch.setStatus('current')
confTopoPGSNReachCost = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 11, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confTopoPGSNReachCost.setStatus('current')
confTopoPGSNReachCostMethod = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 11, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("user", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confTopoPGSNReachCostMethod.setStatus('current')
confTopoFtPnniForeArea = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 11, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confTopoFtPnniForeArea.setStatus('deprecated')
confTopoFtPnniForeLevel = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 11, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confTopoFtPnniForeLevel.setStatus('deprecated')
confTopoLBUbrLoadBalance = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 11, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confTopoLBUbrLoadBalance.setStatus('current')
numberOfPorts = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfPorts.setStatus('current')
portTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2), )
if mibBuilder.loadTexts: portTable.setStatus('current')
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1), ).setIndexNames((0, "Fore-Switch-MIB", "portNumber"))
if mibBuilder.loadTexts: portEntry.setStatus('current')
portNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portNumber.setStatus('current')
portAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("down", 2), ("up", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portAdminStatus.setStatus('current')
portOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOperStatus.setStatus('current')
portTime = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTime.setStatus('current')
portRemoteAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 5), SpansAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portRemoteAtmAddress.setStatus('current')
portRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portRemoteIpAddress.setStatus('current')
portMaxPathsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMaxPathsIn.setStatus('current')
portNumPathsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portNumPathsIn.setStatus('current')
portMaxBandwidthIn = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMaxBandwidthIn.setStatus('current')
portAllocBandwidthIn = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portAllocBandwidthIn.setStatus('current')
portUsedBandwidthIn = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portUsedBandwidthIn.setStatus('deprecated')
portReceivedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portReceivedCells.setStatus('current')
portMaxPathsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMaxPathsOut.setStatus('current')
portNumPathsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portNumPathsOut.setStatus('current')
portMaxBandwidthOut = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMaxBandwidthOut.setStatus('current')
portAllocBandwidthOut = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portAllocBandwidthOut.setStatus('current')
portUsedBandwidthOut = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portUsedBandwidthOut.setStatus('deprecated')
portTransmittedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTransmittedCells.setStatus('current')
portHwBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHwBoard.setStatus('current')
portHwModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHwModule.setStatus('current')
portHwNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHwNumber.setStatus('deprecated')
portILMIRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 22), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portILMIRemoteIpAddress.setStatus('current')
portCDVT = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portCDVT.setStatus('current')
portInputPolicingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portInputPolicingStatus.setStatus('deprecated')
portVbrOverbooking = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVbrOverbooking.setStatus('deprecated')
portVbrBufferOverb = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVbrBufferOverb.setStatus('deprecated')
portManagementStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("managed", 1), ("un-managed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portManagementStatus.setStatus('current')
portAISRDIGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portAISRDIGeneration.setStatus('current')
portGCRAPolicingCBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("allOn", 1), ("allOff", 2), ("svcOn", 3), ("svcOff", 4), ("default", 5))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portGCRAPolicingCBR.setStatus('current')
portGCRAPolicingVBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("allOn", 1), ("allOff", 2), ("svcOn", 3), ("svcOff", 4), ("default", 5))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portGCRAPolicingVBR.setStatus('deprecated')
portAAL5PacketDiscardCBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allOn", 1), ("allOff", 2), ("svcOn", 3), ("svcOff", 4))).clone('svcOn')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portAAL5PacketDiscardCBR.setStatus('current')
portAAL5PacketDiscardVBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allOn", 1), ("allOff", 2), ("svcOn", 3), ("svcOff", 4))).clone('svcOn')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portAAL5PacketDiscardVBR.setStatus('deprecated')
portAAL5PacketDiscardUBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allOn", 1), ("allOff", 2), ("svcOn", 3), ("svcOff", 4))).clone('svcOn')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portAAL5PacketDiscardUBR.setStatus('current')
portInputCACErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInputCACErrors.setStatus('current')
portInputVPIErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInputVPIErrors.setStatus('current')
portInputVCIErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInputVCIErrors.setStatus('current')
portInputSetupErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInputSetupErrors.setStatus('current')
portOutputCACErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOutputCACErrors.setStatus('current')
portOutputVPIErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOutputVPIErrors.setStatus('current')
portOutputVCIErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOutputVCIErrors.setStatus('current')
portOutputSetupErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOutputSetupErrors.setStatus('current')
portPPPolicingCBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allOn", 1), ("allOff", 2), ("svcOn", 3), ("svcOff", 4))).clone('svcOn')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPPPolicingCBR.setStatus('current')
portPPPolicingVBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allOn", 1), ("allOff", 2), ("svcOn", 3), ("svcOff", 4))).clone('svcOn')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPPPolicingVBR.setStatus('deprecated')
portUBRTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allOn", 1), ("allOff", 2), ("svcOn", 3), ("svcOff", 4))).clone('svcOff')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portUBRTagging.setStatus('current')
portInputCdv = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 49), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portInputCdv.setStatus('current')
portInputMaxctd = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 50), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portInputMaxctd.setStatus('current')
portInputDelayMode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("systemDefault", 1), ("userSpecified", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portInputDelayMode.setStatus('current')
portOutputCdv = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 52), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portOutputCdv.setStatus('current')
portOutputMaxctd = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 53), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portOutputMaxctd.setStatus('current')
portOutputDelayMode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("systemDefault", 1), ("userSpecified", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portOutputDelayMode.setStatus('current')
portCACStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portCACStatus.setStatus('current')
portCounterResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 60), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCounterResetTime.setStatus('deprecated')
portCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("resetRequest", 1), ("resetTrue", 3), ("resetFalse", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portCounterReset.setStatus('deprecated')
portName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 62), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portName.setStatus('current')
portGCRAPolicingRTVBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("allOn", 1), ("allOff", 2), ("svcOn", 3), ("svcOff", 4), ("default", 5))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portGCRAPolicingRTVBR.setStatus('current')
portGCRAPolicingNRTVBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("allOn", 1), ("allOff", 2), ("svcOn", 3), ("svcOff", 4), ("default", 5))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portGCRAPolicingNRTVBR.setStatus('current')
portAAL5PacketDiscardRTVBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allOn", 1), ("allOff", 2), ("svcOn", 3), ("svcOff", 4))).clone('svcOn')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portAAL5PacketDiscardRTVBR.setStatus('current')
portAAL5PacketDiscardNRTVBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allOn", 1), ("allOff", 2), ("svcOn", 3), ("svcOff", 4))).clone('svcOn')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portAAL5PacketDiscardNRTVBR.setStatus('current')
portPPPolicingNRTVBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allOn", 1), ("allOff", 2), ("svcOn", 3), ("svcOff", 4))).clone('svcOn')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPPPolicingNRTVBR.setStatus('current')
portPPPolicingRTVBR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allOn", 1), ("allOff", 2), ("svcOn", 3), ("svcOff", 4))).clone('svcOn')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPPPolicingRTVBR.setStatus('current')
portNrtVbrOverbooking = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portNrtVbrOverbooking.setStatus('current')
portNrtVbrBufferOverb = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portNrtVbrBufferOverb.setStatus('current')
portRtVbrOverbooking = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portRtVbrOverbooking.setStatus('current')
portRtVbrBufferOverb = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portRtVbrBufferOverb.setStatus('current')
portPathOverbooking = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 2, 1, 74), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPathOverbooking.setStatus('current')
atmIfConnSchedTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 3), )
if mibBuilder.loadTexts: atmIfConnSchedTable.setStatus('current')
atmIfConnSchedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 3, 1), ).setIndexNames((0, "Fore-Switch-MIB", "atmIfConnSchedLink"), (0, "Fore-Switch-MIB", "atmIfConnSchedServCat"))
if mibBuilder.loadTexts: atmIfConnSchedEntry.setStatus('current')
atmIfConnSchedLink = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: atmIfConnSchedLink.setStatus('current')
atmIfConnSchedServCat = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: atmIfConnSchedServCat.setStatus('current')
atmIfConnSchedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 3, 1, 3), AtmConnSchedMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfConnSchedMode.setStatus('current')
atmIfConnSchedOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfConnSchedOverride.setStatus('current')
ifIndexMapTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 14, 1), )
if mibBuilder.loadTexts: ifIndexMapTable.setStatus('current')
ifIndexMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 14, 1, 1), ).setIndexNames((0, "Fore-Switch-MIB", "ifIndexMapIndex"))
if mibBuilder.loadTexts: ifIndexMapEntry.setStatus('current')
ifIndexMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifIndexMapIndex.setStatus('current')
ifIndexMapBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 14, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifIndexMapBoard.setStatus('current')
ifIndexMapNetmod = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 14, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifIndexMapNetmod.setStatus('current')
ifIndexMapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 14, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifIndexMapPort.setStatus('current')
cesExtTable = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 16, 1), TestAndIncr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesExtTable.setStatus('current')
cbrctConfTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 16, 2), )
if mibBuilder.loadTexts: cbrctConfTable.setStatus('current')
cbrctConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 16, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cbrctConfEntry.setStatus('current')
cbrctState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 16, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbrctState.setStatus('current')
cbrctIdleDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 16, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idlePattern", 1), ("cas", 2))).clone('idlePattern')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbrctIdleDetection.setStatus('current')
cbrctIdleMask = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 16, 2, 1, 3), Integer32().clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbrctIdleMask.setStatus('current')
cbrctNoOfIdlePatterns = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 16, 2, 1, 4), Integer32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbrctNoOfIdlePatterns.setStatus('current')
cbrctIdlePatterns = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 16, 2, 1, 5), Integer32().clone(32767)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbrctIdlePatterns.setStatus('current')
cbrctIdleIntPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 16, 2, 1, 6), TimeInterval().clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbrctIdleIntPeriod.setStatus('current')
cbrctActiveIntPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 16, 2, 1, 7), TimeInterval().clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbrctActiveIntPeriod.setStatus('current')
asxAtmIfTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 20, 1), )
if mibBuilder.loadTexts: asxAtmIfTable.setStatus('current')
asxAtmIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 20, 1, 1), ).setIndexNames((0, "Fore-Switch-MIB", "asxAtmIfName"))
if mibBuilder.loadTexts: asxAtmIfEntry.setStatus('current')
asxAtmIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 20, 1, 1, 1), DisplayString())
if mibBuilder.loadTexts: asxAtmIfName.setStatus('current')
asxAtmIfLinkid = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 20, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asxAtmIfLinkid.setStatus('current')
pathTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 1), )
if mibBuilder.loadTexts: pathTable.setStatus('current')
pathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 1, 1), ).setIndexNames((0, "Fore-Switch-MIB", "pathPort"), (0, "Fore-Switch-MIB", "pathVPI"))
if mibBuilder.loadTexts: pathEntry.setStatus('current')
pathPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathPort.setStatus('current')
pathVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathVPI.setStatus('current')
pathStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 1, 1, 3), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pathStatus.setStatus('current')
pathNumOutputs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathNumOutputs.setStatus('current')
pathMaxChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 1, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pathMaxChannels.setStatus('current')
pathNumChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathNumChannels.setStatus('current')
pathMaxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 1, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pathMaxBandwidth.setStatus('current')
pathAllocBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 1, 1, 8), Gauge32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pathAllocBandwidth.setStatus('current')
pathUsedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathUsedBandwidth.setStatus('deprecated')
pathCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathCells.setStatus('current')
pathUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 1, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathUptime.setStatus('current')
pathSigProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 1, 1, 12), AtmSigProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathSigProtocol.setStatus('current')
pathRejectedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathRejectedCells.setStatus('current')
pathMinVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 1, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pathMinVCI.setStatus('current')
pathMaxVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 1, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pathMaxVCI.setStatus('current')
pathCACErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathCACErrors.setStatus('current')
pathVCIErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathVCIErrors.setStatus('current')
pathSetupErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathSetupErrors.setStatus('current')
pathRouteTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 2), )
if mibBuilder.loadTexts: pathRouteTable.setStatus('current')
pathRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 2, 1), ).setIndexNames((0, "Fore-Switch-MIB", "pathrInputPort"), (0, "Fore-Switch-MIB", "pathrInputVPI"), (0, "Fore-Switch-MIB", "pathrOutputPort"), (0, "Fore-Switch-MIB", "pathrOutputVPI"))
if mibBuilder.loadTexts: pathRouteEntry.setStatus('current')
pathrInputPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathrInputPort.setStatus('current')
pathrInputVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathrInputVPI.setStatus('current')
pathrOutputPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathrOutputPort.setStatus('current')
pathrOutputVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathrOutputVPI.setStatus('current')
pathrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 2, 1, 5), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pathrStatus.setStatus('current')
pathrMaxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathrMaxBandwidth.setStatus('current')
pathrAllocBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 2, 1, 7), Gauge32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pathrAllocBandwidth.setStatus('current')
pathrCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathrCells.setStatus('current')
pathrUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 2, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathrUptime.setStatus('current')
pathrSigProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 2, 1, 10), AtmSigProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathrSigProtocol.setStatus('current')
pathrRejectedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathrRejectedCells.setStatus('current')
pathrLoopVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 2, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pathrLoopVPI.setStatus('current')
pathrUpcContract = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 2, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pathrUpcContract.setStatus('current')
pathrName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pathrName.setStatus('current')
pathrConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 2, 1, 15), ConnectionType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pathrConnectionType.setStatus('current')
pathrServCat = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pathrServCat.setStatus('current')
outputPathTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 3), )
if mibBuilder.loadTexts: outputPathTable.setStatus('current')
outputPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 3, 1), ).setIndexNames((0, "Fore-Switch-MIB", "opathPort"), (0, "Fore-Switch-MIB", "opathVPI"))
if mibBuilder.loadTexts: outputPathEntry.setStatus('current')
opathPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opathPort.setStatus('current')
opathVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opathVPI.setStatus('current')
opathStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 3, 1, 3), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opathStatus.setStatus('current')
opathMaxChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opathMaxChannels.setStatus('current')
opathNumChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opathNumChannels.setStatus('current')
opathMaxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 3, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opathMaxBandwidth.setStatus('current')
opathAllocBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 3, 1, 7), Gauge32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opathAllocBandwidth.setStatus('current')
opathUsedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opathUsedBandwidth.setStatus('deprecated')
opathCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opathCells.setStatus('current')
opathUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 3, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opathUptime.setStatus('current')
opathSigProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 3, 1, 11), AtmSigProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opathSigProtocol.setStatus('current')
opathRejectedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opathRejectedCells.setStatus('current')
opathTrafficShapeVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 3, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opathTrafficShapeVPI.setStatus('current')
opathVbrOverbooking = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 32767))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opathVbrOverbooking.setStatus('deprecated')
opathVbrBufferOverb = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 32767))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opathVbrBufferOverb.setStatus('deprecated')
opathMinVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 3, 1, 16), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opathMinVCI.setStatus('current')
opathMaxVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 3, 1, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opathMaxVCI.setStatus('current')
opathCACErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opathCACErrors.setStatus('current')
opathVCIErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opathVCIErrors.setStatus('current')
opathSetupErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opathSetupErrors.setStatus('current')
opathLoopVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 3, 1, 21), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opathLoopVPI.setStatus('current')
opathSchedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 3, 1, 22), AtmOrigPathSchedMode().clone('flat')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opathSchedMode.setStatus('current')
opathNrtVbrOverbooking = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 32767))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opathNrtVbrOverbooking.setStatus('current')
opathNrtVbrBufferOverb = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 3, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 32767))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opathNrtVbrBufferOverb.setStatus('current')
opathRtVbrOverbooking = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 3, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 32767))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opathRtVbrOverbooking.setStatus('current')
opathRtVbrBufferOverb = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 3, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 32767))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opathRtVbrBufferOverb.setStatus('current')
outputPathStatsTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 4), )
if mibBuilder.loadTexts: outputPathStatsTable.setStatus('current')
outputPathStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 4, 1), ).setIndexNames((0, "Fore-Switch-MIB", "opathStatsPort"), (0, "Fore-Switch-MIB", "opathStatsVPI"))
if mibBuilder.loadTexts: outputPathStatsEntry.setStatus('current')
opathStatsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opathStatsPort.setStatus('current')
opathStatsVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opathStatsVPI.setStatus('current')
opathStatsLostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opathStatsLostCells.setStatus('current')
opathStatsTransmittedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opathStatsTransmittedCells.setStatus('current')
opathStatsIntentionalLostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opathStatsIntentionalLostCells.setStatus('current')
opathStatsCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opathStatsCLP0Cells.setStatus('current')
opathStatsLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opathStatsLostPackets.setStatus('current')
opathStatsTransmittedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opathStatsTransmittedPackets.setStatus('current')
outputPathChannelSchedTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 5), )
if mibBuilder.loadTexts: outputPathChannelSchedTable.setStatus('current')
outputPathChannelSchedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 5, 1), ).setIndexNames((0, "Fore-Switch-MIB", "opathChannelSchedPort"), (0, "Fore-Switch-MIB", "opathChannelSchedVPI"), (0, "Fore-Switch-MIB", "opathChannelSchedServCat"))
if mibBuilder.loadTexts: outputPathChannelSchedEntry.setStatus('current')
opathChannelSchedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: opathChannelSchedPort.setStatus('current')
opathChannelSchedVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 5, 1, 2), Integer32())
if mibBuilder.loadTexts: opathChannelSchedVPI.setStatus('current')
opathChannelSchedServCat = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 5, 1, 3), Integer32())
if mibBuilder.loadTexts: opathChannelSchedServCat.setStatus('current')
opathChannelSchedSchedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 5, 1, 4), AtmConnSchedMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opathChannelSchedSchedMode.setStatus('current')
opathChannelSchedSchedOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 3, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opathChannelSchedSchedOverride.setStatus('current')
channelTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 1), )
if mibBuilder.loadTexts: channelTable.setStatus('current')
channelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 1, 1), ).setIndexNames((0, "Fore-Switch-MIB", "chanPort"), (0, "Fore-Switch-MIB", "chanVPI"), (0, "Fore-Switch-MIB", "chanVCI"))
if mibBuilder.loadTexts: channelEntry.setStatus('current')
chanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanPort.setStatus('current')
chanVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanVPI.setStatus('current')
chanVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanVCI.setStatus('current')
chanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 1, 1, 4), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chanStatus.setStatus('current')
chanNumOutputs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanNumOutputs.setStatus('current')
chanAllocBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 1, 1, 6), Gauge32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chanAllocBandwidth.setStatus('current')
chanUsedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanUsedBandwidth.setStatus('deprecated')
chanCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanCells.setStatus('current')
chanUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanUptime.setStatus('current')
chanSigProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 1, 1, 10), AtmSigProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanSigProtocol.setStatus('current')
chanRejectedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanRejectedCells.setStatus('current')
chanCDV = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 1, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chanCDV.setStatus('current')
chanPolicingAction = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tag", 1), ("drop", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chanPolicingAction.setStatus('current')
chanUpcContract = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 1, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chanUpcContract.setStatus('current')
chanServCat = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanServCat.setStatus('current')
chanQosPoliceScheme = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("cbr1", 1), ("cbr0", 2), ("cbr0tag", 3), ("vbr1", 4), ("vbr2", 5), ("vbr3", 6), ("abr1", 7), ("ubr1", 8), ("ubr2", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanQosPoliceScheme.setStatus('current')
chanQosPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanQosPCR.setStatus('current')
chanQosSCR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanQosSCR.setStatus('current')
chanQosMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanQosMBS.setStatus('current')
chanQosCDVT = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanQosCDVT.setStatus('current')
chanQosPoliceState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanQosPoliceState.setStatus('current')
chanQosIsAAL5 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanQosIsAAL5.setStatus('current')
chanQosPerPacketPolicing = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanQosPerPacketPolicing.setStatus('current')
channelRouteTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 2), )
if mibBuilder.loadTexts: channelRouteTable.setStatus('current')
channelRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 2, 1), ).setIndexNames((0, "Fore-Switch-MIB", "chanrInputPort"), (0, "Fore-Switch-MIB", "chanrInputVPI"), (0, "Fore-Switch-MIB", "chanrInputVCI"), (0, "Fore-Switch-MIB", "chanrOutputPort"), (0, "Fore-Switch-MIB", "chanrOutputVPI"), (0, "Fore-Switch-MIB", "chanrOutputVCI"))
if mibBuilder.loadTexts: channelRouteEntry.setStatus('current')
chanrInputPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanrInputPort.setStatus('current')
chanrInputVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanrInputVPI.setStatus('current')
chanrInputVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanrInputVCI.setStatus('current')
chanrOutputPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanrOutputPort.setStatus('current')
chanrOutputVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanrOutputVPI.setStatus('current')
chanrOutputVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanrOutputVCI.setStatus('current')
chanrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 2, 1, 7), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chanrStatus.setStatus('current')
chanrSigProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 2, 1, 8), AtmSigProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanrSigProtocol.setStatus('current')
chanrName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chanrName.setStatus('current')
chanrConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 2, 1, 10), ConnectionType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chanrConnectionType.setStatus('current')
reverseChannelRouteTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 3), )
if mibBuilder.loadTexts: reverseChannelRouteTable.setStatus('current')
reverseChannelRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 3, 1), ).setIndexNames((0, "Fore-Switch-MIB", "revChanrOutputPort"), (0, "Fore-Switch-MIB", "revChanrOutputVPI"), (0, "Fore-Switch-MIB", "revChanrOutputVCI"), (0, "Fore-Switch-MIB", "revChanrInputPort"), (0, "Fore-Switch-MIB", "revChanrInputVPI"), (0, "Fore-Switch-MIB", "revChanrInputVCI"))
if mibBuilder.loadTexts: reverseChannelRouteEntry.setStatus('current')
revChanrOutputPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: revChanrOutputPort.setStatus('current')
revChanrOutputVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: revChanrOutputVPI.setStatus('current')
revChanrOutputVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: revChanrOutputVCI.setStatus('current')
revChanrInputPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: revChanrInputPort.setStatus('current')
revChanrInputVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: revChanrInputVPI.setStatus('current')
revChanrInputVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: revChanrInputVCI.setStatus('current')
revChanrSigProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 3, 1, 7), AtmSigProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: revChanrSigProtocol.setStatus('current')
outputChannelStatsTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 4), )
if mibBuilder.loadTexts: outputChannelStatsTable.setStatus('current')
outputChannelStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 4, 1), ).setIndexNames((0, "Fore-Switch-MIB", "ochanStatsPort"), (0, "Fore-Switch-MIB", "ochanStatsVPI"), (0, "Fore-Switch-MIB", "ochanStatsVCI"))
if mibBuilder.loadTexts: outputChannelStatsEntry.setStatus('current')
ochanStatsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ochanStatsPort.setStatus('current')
ochanStatsVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ochanStatsVPI.setStatus('current')
ochanStatsVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ochanStatsVCI.setStatus('current')
ochanStatsLostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ochanStatsLostCells.setStatus('current')
ochanStatsTransmittedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ochanStatsTransmittedCells.setStatus('current')
ochanStatsIntentionalLostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ochanStatsIntentionalLostCells.setStatus('current')
ochanStatsCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ochanStatsCLP0Cells.setStatus('current')
ochanStatsLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ochanStatsLostPackets.setStatus('current')
ochanStatsTransmittedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 4, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ochanStatsTransmittedPackets.setStatus('current')
numberOfLinks = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfLinks.setStatus('current')
linkTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 5, 2), )
if mibBuilder.loadTexts: linkTable.setStatus('current')
linkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 5, 2, 1), ).setIndexNames((0, "Fore-Switch-MIB", "linkSrc"), (0, "Fore-Switch-MIB", "linkDest"))
if mibBuilder.loadTexts: linkEntry.setStatus('current')
linkSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 5, 2, 1, 1), SpansAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkSrc.setStatus('current')
linkDest = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 5, 2, 1, 2), SpansAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDest.setStatus('current')
linkCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCapacity.setStatus('current')
linkAge = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAge.setStatus('current')
sigPathTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 1), )
if mibBuilder.loadTexts: sigPathTable.setStatus('current')
sigPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 1, 1), ).setIndexNames((0, "Fore-Switch-MIB", "sigPathPort"), (0, "Fore-Switch-MIB", "sigPathVPI"))
if mibBuilder.loadTexts: sigPathEntry.setStatus('current')
sigPathPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigPathPort.setStatus('current')
sigPathVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigPathVPI.setStatus('current')
sigPathVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sigPathVCI.setStatus('current')
sigPathClsVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sigPathClsVCI.setStatus('current')
sigPathAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sigPathAdminStatus.setStatus('current')
sigPathOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigPathOperStatus.setStatus('current')
sigPathEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 1, 1, 7), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sigPathEntryStatus.setStatus('current')
sigPathAALType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("type34", 1), ("type5", 2), ("auto", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sigPathAALType.setStatus('current')
sigPathCDV = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 1, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sigPathCDV.setStatus('current')
sigPathPolicingAction = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tag", 1), ("drop", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sigPathPolicingAction.setStatus('current')
sigPathRemoteAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 1, 1, 11), SpansAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigPathRemoteAtmAddress.setStatus('current')
sigPathRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 1, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigPathRemoteIpAddress.setStatus('current')
sigPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uni", 1), ("nni", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigPathType.setStatus('current')
sigPathClsUpcContract = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 1, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sigPathClsUpcContract.setStatus('current')
sigPathSigReservedBW = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 1, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sigPathSigReservedBW.setStatus('current')
sigPathMinVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 1, 1, 16), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sigPathMinVCI.setStatus('current')
sigPathMaxVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 1, 1, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sigPathMaxVCI.setStatus('current')
sigPathOpenTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 1, 1, 18), Integer32().clone(300)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sigPathOpenTimeout.setStatus('current')
sigPathCloseTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 1, 1, 19), Integer32().clone(500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sigPathCloseTimeout.setStatus('current')
sigPathOutputSigService = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vbr", 1), ("ubr", 2), ("oam", 3), ("default", 4))).clone('vbr')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sigPathOutputSigService.setStatus('current')
sigPathAALOperType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("type34", 1), ("type5", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigPathAALOperType.setStatus('current')
sigPathStatsTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 2), )
if mibBuilder.loadTexts: sigPathStatsTable.setStatus('current')
sigPathStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 2, 1), ).setIndexNames((0, "Fore-Switch-MIB", "sigPathStatsPort"), (0, "Fore-Switch-MIB", "sigPathStatsVPI"))
if mibBuilder.loadTexts: sigPathStatsEntry.setStatus('current')
sigPathStatsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigPathStatsPort.setStatus('current')
sigPathStatsVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigPathStatsVPI.setStatus('current')
sigPathVCCs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigPathVCCs.setStatus('current')
sigPathRestarts = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigPathRestarts.setStatus('current')
sigPathCallsCompletions = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigPathCallsCompletions.setStatus('current')
sigPathCallsFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigPathCallsFailures.setStatus('current')
sigPathCallsRejections = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigPathCallsRejections.setStatus('current')
sigPathSpansTransmittedMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigPathSpansTransmittedMessages.setStatus('current')
sigPathSpansReceivedMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigPathSpansReceivedMessages.setStatus('current')
sigPathClsTransmittedMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigPathClsTransmittedMessages.setStatus('current')
sigPathClsReceivedMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sigPathClsReceivedMessages.setStatus('current')
spvcSrcNumberOfSPVCs = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spvcSrcNumberOfSPVCs.setStatus('current')
spvcSrcTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 4), )
if mibBuilder.loadTexts: spvcSrcTable.setStatus('current')
spvcSrcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 4, 1), ).setIndexNames((0, "Fore-Switch-MIB", "spvcSrcSpvcId"))
if mibBuilder.loadTexts: spvcSrcEntry.setStatus('current')
spvcSrcSpvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spvcSrcSpvcId.setStatus('current')
spvcSrcSwitchAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 4, 1, 2), SpansAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spvcSrcSwitchAddr.setStatus('current')
spvcSrcDestSpvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 4, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spvcSrcDestSpvcId.setStatus('current')
spvcSrcDestSwitchAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 4, 1, 4), SpansAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spvcSrcDestSwitchAddr.setStatus('current')
spvcSrcInPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 4, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spvcSrcInPort.setStatus('current')
spvcSrcInVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 4, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spvcSrcInVPI.setStatus('current')
spvcSrcInVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 4, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spvcSrcInVCI.setStatus('current')
spvcSrcAllocBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 4, 1, 8), Gauge32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spvcSrcAllocBandwidth.setStatus('current')
spvcSrcUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 4, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spvcSrcUpTime.setStatus('current')
spvcSrcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spvcSrcStatus.setStatus('current')
spvcSrcEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 4, 1, 11), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spvcSrcEntryStatus.setStatus('current')
spvcDestNumberOfSPVCs = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spvcDestNumberOfSPVCs.setStatus('current')
spvcDestTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 6), )
if mibBuilder.loadTexts: spvcDestTable.setStatus('current')
spvcDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 6, 1), ).setIndexNames((0, "Fore-Switch-MIB", "spvcDestSpvcId"))
if mibBuilder.loadTexts: spvcDestEntry.setStatus('current')
spvcDestSpvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spvcDestSpvcId.setStatus('current')
spvcDestSwitchAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 6, 1, 2), SpansAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spvcDestSwitchAddr.setStatus('current')
spvcDestSrcSpvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 6, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spvcDestSrcSpvcId.setStatus('current')
spvcDestSrcSwitchAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 6, 1, 4), SpansAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spvcDestSrcSwitchAddr.setStatus('current')
spvcDestOutPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 6, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spvcDestOutPort.setStatus('current')
spvcDestOutVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 6, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spvcDestOutVPI.setStatus('current')
spvcDestOutVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 6, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spvcDestOutVCI.setStatus('current')
spvcDestAllocBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 6, 1, 8), Gauge32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spvcDestAllocBandwidth.setStatus('current')
spvcDestUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 6, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spvcDestUpTime.setStatus('current')
spvcDestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spvcDestStatus.setStatus('current')
spvcDestEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 1, 6, 1, 11), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spvcDestEntryStatus.setStatus('current')
pnniSpvcSrcNumberOfSPVCs = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvcSrcNumberOfSPVCs.setStatus('current')
pnniSpvcSrcTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3), )
if mibBuilder.loadTexts: pnniSpvcSrcTable.setStatus('current')
pnniSpvcSrcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1), ).setIndexNames((0, "Fore-Switch-MIB", "pnniSpvcSrcIndex"))
if mibBuilder.loadTexts: pnniSpvcSrcEntry.setStatus('current')
pnniSpvcSrcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvcSrcIndex.setStatus('current')
pnniSpvcSrcCallingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvcSrcCallingPort.setStatus('current')
pnniSpvcSrcCallingVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvcSrcCallingVPI.setStatus('current')
pnniSpvcSrcCallingVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvcSrcCallingVCI.setStatus('current')
pnniSpvcSrcCalledAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 5), NsapAddr()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvcSrcCalledAtmAddr.setStatus('current')
pnniSpvcSrcCalledPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvcSrcCalledPort.setStatus('current')
pnniSpvcSrcCalledVPVCSel = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noPref", 1), ("require", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvcSrcCalledVPVCSel.setStatus('current')
pnniSpvcSrcCalledVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvcSrcCalledVPI.setStatus('current')
pnniSpvcSrcCalledVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvcSrcCalledVCI.setStatus('current')
pnniSpvcSrcCalledAssignedVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvcSrcCalledAssignedVPI.setStatus('current')
pnniSpvcSrcCalledAssignedVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvcSrcCalledAssignedVCI.setStatus('current')
pnniSpvcSrcFwdUpcKey = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvcSrcFwdUpcKey.setStatus('current')
pnniSpvcSrcBckUpcKey = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvcSrcBckUpcKey.setStatus('current')
pnniSpvcSrcBearerClass = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("classA", 1), ("classC", 2), ("classX", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvcSrcBearerClass.setStatus('current')
pnniSpvcSrcTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noIndication", 1), ("cbr", 2), ("vbr", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvcSrcTrafficType.setStatus('obsolete')
pnniSpvcSrcTimingReq = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noIndication", 1), ("end2endRequired", 2), ("end2endNotReqd", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvcSrcTimingReq.setStatus('obsolete')
pnniSpvcSrcSusceptClip = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvcSrcSusceptClip.setStatus('current')
pnniSpvcSrcFwdQoSClass = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("class0", 1), ("class1", 2), ("class2", 3), ("class3", 4), ("class4", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvcSrcFwdQoSClass.setStatus('current')
pnniSpvcSrcBckQoSClass = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("class0", 1), ("class1", 2), ("class2", 3), ("class3", 4), ("class4", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvcSrcBckQoSClass.setStatus('current')
pnniSpvcSrcTransitNetSel = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 20), TransitNetwork()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvcSrcTransitNetSel.setStatus('current')
pnniSpvcSrcLastFailCause = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvcSrcLastFailCause.setStatus('current')
pnniSpvcSrcRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvcSrcRetryCount.setStatus('current')
pnniSpvcSrcLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 23), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvcSrcLastChangeTime.setStatus('current')
pnniSpvcSrcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvcSrcStatus.setStatus('current')
pnniSpvcSrcName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvcSrcName.setStatus('current')
pnniSpvcSrcEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 26), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvcSrcEntryStatus.setStatus('current')
pnniSpvcSrcRouteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvcSrcRouteCost.setStatus('current')
pnniSpvcSrcDtlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 28), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvcSrcDtlIndex.setStatus('obsolete')
pnniSpvcSrcActiveDtlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvcSrcActiveDtlIndex.setStatus('current')
pnniSpvcSrcRerouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvcSrcRerouteStatus.setStatus('current')
pnniSpvcSrcCallingDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 31), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvcSrcCallingDomain.setStatus('current')
pnniSpvcSrcQosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 32), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvcSrcQosIndex.setStatus('current')
pnniSpvcSrcDtlIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 33), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvcSrcDtlIndex1.setStatus('obsolete')
pnniSpvcSrcDtlIndex2 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 34), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvcSrcDtlIndex2.setStatus('obsolete')
pnniSpvcSrcDtlIndex3 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 35), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvcSrcDtlIndex3.setStatus('obsolete')
pnniSpvcSrcDtlIndex4 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 36), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvcSrcDtlIndex4.setStatus('obsolete')
pnniSpvcSrcDtlWeight1 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 37), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvcSrcDtlWeight1.setStatus('obsolete')
pnniSpvcSrcDtlWeight2 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 38), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvcSrcDtlWeight2.setStatus('obsolete')
pnniSpvcSrcDtlWeight3 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 39), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvcSrcDtlWeight3.setStatus('obsolete')
pnniSpvcSrcDtlWeight4 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 40), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvcSrcDtlWeight4.setStatus('obsolete')
pnniSpvcSrcBackoffStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvcSrcBackoffStatus.setStatus('current')
pnniSpvcSrcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 42), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvcSrcPriority.setStatus('current')
pnniSpvcSrcLastLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 43), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvcSrcLastLocation.setStatus('current')
pnniSpvcSrcOldRouteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvcSrcOldRouteCost.setStatus('current')
pnniSpvcSrcDownReason = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("reroute", 1), ("failure", 2), ("deletion", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvcSrcDownReason.setStatus('current')
pnniSpvcSrcActiveDtlNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvcSrcActiveDtlNodeIndex.setStatus('current')
pnniSpvcSrcDtlTag = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 47), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvcSrcDtlTag.setStatus('current')
pnniSpvcSrcAutoDtlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvcSrcAutoDtlStatus.setStatus('current')
pnniSpvcSrcRGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvcSrcRGroupIndex.setStatus('current')
pnniSpvcSrcSecondaryVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 50), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvcSrcSecondaryVPI.setStatus('current')
pnniSpvcSrcSecondaryVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 3, 1, 51), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvcSrcSecondaryVCI.setStatus('current')
pnniSpvcDestNumberOfSPVCs = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvcDestNumberOfSPVCs.setStatus('current')
pnniSpvcDestTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 5), )
if mibBuilder.loadTexts: pnniSpvcDestTable.setStatus('current')
pnniSpvcDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 5, 1), ).setIndexNames((0, "Fore-Switch-MIB", "pnniSpvcDestIndex"))
if mibBuilder.loadTexts: pnniSpvcDestEntry.setStatus('current')
pnniSpvcDestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvcDestIndex.setStatus('current')
pnniSpvcDestCallingAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 5, 1, 2), NsapAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvcDestCallingAtmAddr.setStatus('current')
pnniSpvcDestCallingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvcDestCallingPort.setStatus('current')
pnniSpvcDestCallingVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvcDestCallingVPI.setStatus('current')
pnniSpvcDestCallingVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvcDestCallingVCI.setStatus('current')
pnniSpvcDestCalledAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 5, 1, 6), NsapAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvcDestCalledAtmAddr.setStatus('current')
pnniSpvcDestCalledPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvcDestCalledPort.setStatus('current')
pnniSpvcDestAssignedVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvcDestAssignedVPI.setStatus('current')
pnniSpvcDestAssignedVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvcDestAssignedVCI.setStatus('current')
pnniSpvcDestBearerClass = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("classA", 1), ("classC", 2), ("classX", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvcDestBearerClass.setStatus('current')
pnniSpvcDestTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noIndication", 1), ("cbr", 2), ("vbr", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvcDestTrafficType.setStatus('deprecated')
pnniSpvcDestTimingReq = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noIndication", 1), ("end2endRequired", 2), ("end2endNotReqd", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvcDestTimingReq.setStatus('deprecated')
pnniSpvcDestSusceptClip = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvcDestSusceptClip.setStatus('current')
pnniSpvcDestUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 5, 1, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvcDestUpTime.setStatus('current')
pnniSpvcDestFwdQoSClass = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("class0", 1), ("class1", 2), ("class2", 3), ("class3", 4), ("class4", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvcDestFwdQoSClass.setStatus('current')
pnniSpvcDestBckQoSClass = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("class0", 1), ("class1", 2), ("class2", 3), ("class3", 4), ("class4", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvcDestBckQoSClass.setStatus('current')
pnniSpvcDestTransitNetSel = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 5, 1, 17), TransitNetwork()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvcDestTransitNetSel.setStatus('current')
pnniSpvcDestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 5, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvcDestStatus.setStatus('current')
pnniSpvcDestRGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 5, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvcDestRGroupIndex.setStatus('current')
pnniSpvcParamGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 7))
pnniSpvcPaceInterval = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 7, 1), TimeInterval().clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniSpvcPaceInterval.setStatus('current')
pnniSpvcPaceNumSpvcs = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 7, 2), Integer32().clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniSpvcPaceNumSpvcs.setStatus('current')
pnniSpvcRerouteInterval = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 7, 3), TimeInterval().clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniSpvcRerouteInterval.setStatus('current')
pnniSpvcRerouteNumSpvcs = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 7, 4), Integer32().clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniSpvcRerouteNumSpvcs.setStatus('current')
pnniSpvcRerouteThreshold = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 7, 5), Integer32().clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniSpvcRerouteThreshold.setStatus('current')
pnniSpvcLowestPriority = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 7, 6), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniSpvcLowestPriority.setStatus('current')
pnniSpvcDefaultUbrBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 7, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniSpvcDefaultUbrBandwidth.setStatus('current')
pnniSpvcBackoffInterval = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 7, 9), TimeInterval().clone(60000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniSpvcBackoffInterval.setStatus('current')
pnniSpvcTrapMode = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 7, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("reroute", 1), ("failure", 2), ("all", 3), ("none", 4))).clone('reroute')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniSpvcTrapMode.setStatus('current')
pnniPmpSpvcPartyPaceNum = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 7, 10), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniPmpSpvcPartyPaceNum.setStatus('current')
pnniSpvpcParamGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 8))
pnniSpvpcPaceInterval = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 8, 1), TimeInterval().clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniSpvpcPaceInterval.setStatus('current')
pnniSpvpcPaceNumSpvpcs = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniSpvpcPaceNumSpvpcs.setStatus('current')
pnniSpvpcRerouteInterval = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 8, 3), TimeInterval().clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniSpvpcRerouteInterval.setStatus('current')
pnniSpvpcRerouteNumSpvpcs = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniSpvpcRerouteNumSpvpcs.setStatus('current')
pnniSpvpcRerouteThreshold = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 8, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(75)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniSpvpcRerouteThreshold.setStatus('current')
pnniSpvpcLowestPriority = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 8, 6), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniSpvpcLowestPriority.setStatus('current')
pnniSpvpcTrapMode = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("reroute", 1), ("failure", 2), ("all", 3), ("none", 4))).clone('reroute')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniSpvpcTrapMode.setStatus('current')
pnniSpvpcBackoffInterval = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 8, 8), TimeInterval().clone(60000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniSpvpcBackoffInterval.setStatus('current')
pnniSpvpcSrcTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 9), )
if mibBuilder.loadTexts: pnniSpvpcSrcTable.setStatus('current')
pnniSpvpcSrcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 9, 1), ).setIndexNames((0, "Fore-Switch-MIB", "pnniSpvpcSrcIndex"))
if mibBuilder.loadTexts: pnniSpvpcSrcEntry.setStatus('current')
pnniSpvpcSrcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: pnniSpvpcSrcIndex.setStatus('current')
pnniSpvpcSrcCallingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1025))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvpcSrcCallingPort.setStatus('current')
pnniSpvpcSrcCallingVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 9, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvpcSrcCallingVPI.setStatus('current')
pnniSpvpcSrcCalledAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 9, 1, 4), NsapAddr()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvpcSrcCalledAtmAddr.setStatus('current')
pnniSpvpcSrcCalledPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvpcSrcCalledPort.setStatus('current')
pnniSpvpcSrcCalledVPVCSel = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noPref", 1), ("require", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvpcSrcCalledVPVCSel.setStatus('current')
pnniSpvpcSrcCalledVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvpcSrcCalledVPI.setStatus('current')
pnniSpvpcSrcCalledAssignedVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvpcSrcCalledAssignedVPI.setStatus('current')
pnniSpvpcSrcFwdUpcKey = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvpcSrcFwdUpcKey.setStatus('current')
pnniSpvpcSrcBckUpcKey = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 9, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvpcSrcBckUpcKey.setStatus('current')
pnniSpvpcSrcSusceptClip = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 9, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvpcSrcSusceptClip.setStatus('current')
pnniSpvpcSrcFwdQoSClass = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 9, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("class0", 1), ("class1", 2), ("class2", 3), ("class3", 4), ("class4", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvpcSrcFwdQoSClass.setStatus('current')
pnniSpvpcSrcBckQoSClass = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 9, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("class0", 1), ("class1", 2), ("class2", 3), ("class3", 4), ("class4", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvpcSrcBckQoSClass.setStatus('current')
pnniSpvpcSrcLastFailCause = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 9, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvpcSrcLastFailCause.setStatus('current')
pnniSpvpcSrcRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 9, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvpcSrcRetryCount.setStatus('current')
pnniSpvpcSrcLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 9, 1, 16), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvpcSrcLastChangeTime.setStatus('current')
pnniSpvpcSrcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 9, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvpcSrcStatus.setStatus('current')
pnniSpvpcSrcName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 9, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvpcSrcName.setStatus('current')
pnniSpvpcSrcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 9, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvpcSrcRowStatus.setStatus('current')
pnniSpvpcSrcRouteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 9, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvpcSrcRouteCost.setStatus('current')
pnniSpvpcSrcRerouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 9, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvpcSrcRerouteStatus.setStatus('current')
pnniSpvpcSrcCallingDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 9, 1, 22), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvpcSrcCallingDomain.setStatus('current')
pnniSpvpcSrcQosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 9, 1, 23), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvpcSrcQosIndex.setStatus('current')
pnniSpvpcSrcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 9, 1, 24), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvpcSrcPriority.setStatus('current')
pnniSpvpcSrcLastLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 9, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvpcSrcLastLocation.setStatus('current')
pnniSpvpcSrcOldRouteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 9, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvpcSrcOldRouteCost.setStatus('current')
pnniSpvpcSrcDownReason = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 9, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("reroute", 1), ("failure", 2), ("deletion", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvpcSrcDownReason.setStatus('current')
pnniSpvpcSrcBackoffStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 9, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvpcSrcBackoffStatus.setStatus('current')
pnniSpvpcSrcActiveDtlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 9, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvpcSrcActiveDtlIndex.setStatus('current')
pnniSpvpcSrcActiveDtlNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 9, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvpcSrcActiveDtlNodeIndex.setStatus('current')
pnniSpvpcSrcDtlTag = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 9, 1, 31), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvpcSrcDtlTag.setStatus('current')
pnniSpvpcSrcAutoDtlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 9, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvpcSrcAutoDtlStatus.setStatus('current')
pnniSpvpcSrcRGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 9, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvpcSrcRGroupIndex.setStatus('current')
pnniSpvpcSrcSecondaryVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 9, 1, 34), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniSpvpcSrcSecondaryVPI.setStatus('current')
pnniSpvpcStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 10))
pnniSpvpcSrcNumberOfSPVPCs = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 10, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvpcSrcNumberOfSPVPCs.setStatus('current')
pnniSpvpcDestNumberOfSPVPCs = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 10, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvpcDestNumberOfSPVPCs.setStatus('current')
pnniSpvpcDestTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 11), )
if mibBuilder.loadTexts: pnniSpvpcDestTable.setStatus('current')
pnniSpvpcDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 11, 1), ).setIndexNames((0, "Fore-Switch-MIB", "pnniSpvpcDestIndex"))
if mibBuilder.loadTexts: pnniSpvpcDestEntry.setStatus('current')
pnniSpvpcDestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvpcDestIndex.setStatus('current')
pnniSpvpcDestCallingAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 11, 1, 2), NsapAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvpcDestCallingAtmAddr.setStatus('current')
pnniSpvpcDestCallingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1025))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvpcDestCallingPort.setStatus('current')
pnniSpvpcDestCallingVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvpcDestCallingVPI.setStatus('current')
pnniSpvpcDestCalledAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 11, 1, 5), NsapAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvpcDestCalledAtmAddr.setStatus('current')
pnniSpvpcDestCalledPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1025))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvpcDestCalledPort.setStatus('current')
pnniSpvpcDestAssignedVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 11, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvpcDestAssignedVPI.setStatus('current')
pnniSpvpcDestSusceptClip = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvpcDestSusceptClip.setStatus('current')
pnniSpvpcDestUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 11, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvpcDestUpTime.setStatus('current')
pnniSpvpcDestFwdQoSClass = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("class0", 1), ("class1", 2), ("class2", 3), ("class3", 4), ("class4", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvpcDestFwdQoSClass.setStatus('current')
pnniSpvpcDestBckQoSClass = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 11, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("class0", 1), ("class1", 2), ("class2", 3), ("class3", 4), ("class4", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvpcDestBckQoSClass.setStatus('current')
pnniSpvpcDestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvpcDestStatus.setStatus('current')
pnniSpvpcDestRGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 11, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvpcDestRGroupIndex.setStatus('current')
pnniPmpSpvccGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12))
pnniPmpSpvccSrcNextRootIndex = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 1), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniPmpSpvccSrcNextRootIndex.setStatus('current')
pnniPmpSpvccSrcNumberOfSpvccs = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPmpSpvccSrcNumberOfSpvccs.setStatus('current')
pnniPmpSpvccSrcRootTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 3), )
if mibBuilder.loadTexts: pnniPmpSpvccSrcRootTable.setStatus('current')
pnniPmpSpvccSrcRootEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 3, 1), ).setIndexNames((0, "Fore-Switch-MIB", "pnniPmpSpvccSrcRootIndex"))
if mibBuilder.loadTexts: pnniPmpSpvccSrcRootEntry.setStatus('current')
pnniPmpSpvccSrcRootIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: pnniPmpSpvccSrcRootIndex.setStatus('current')
pnniPmpSpvccSrcRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 3, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPmpSpvccSrcRootPort.setStatus('current')
pnniPmpSpvccSrcRootVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 3, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPmpSpvccSrcRootVPI.setStatus('current')
pnniPmpSpvccSrcRootVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPmpSpvccSrcRootVCI.setStatus('current')
pnniPmpSpvccSrcRootFwdUpcKey = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 3, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPmpSpvccSrcRootFwdUpcKey.setStatus('current')
pnniPmpSpvccSrcRootBearerClass = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("classA", 1), ("classC", 2), ("classX", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPmpSpvccSrcRootBearerClass.setStatus('current')
pnniPmpSpvccSrcRootSusceptClip = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPmpSpvccSrcRootSusceptClip.setStatus('current')
pnniPmpSpvccSrcRootFwdQoSClass = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("class0", 1), ("class1", 2), ("class2", 3), ("class3", 4), ("class4", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPmpSpvccSrcRootFwdQoSClass.setStatus('current')
pnniPmpSpvccSrcRootStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("wait", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPmpSpvccSrcRootStatus.setStatus('current')
pnniPmpSpvccSrcRootName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPmpSpvccSrcRootName.setStatus('current')
pnniPmpSpvccSrcRootPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 3, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPmpSpvccSrcRootPriority.setStatus('current')
pnniPmpSpvccSrcRootNumberOfParties = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPmpSpvccSrcRootNumberOfParties.setStatus('current')
pnniPmpSpvccSrcRootNextPartyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 3, 1, 13), TestAndIncr()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPmpSpvccSrcRootNextPartyIndex.setStatus('current')
pnniPmpSpvccSrcRootCallingDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 3, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPmpSpvccSrcRootCallingDomain.setStatus('current')
pnniPmpSpvccSrcRootRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 3, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPmpSpvccSrcRootRowStatus.setStatus('current')
pnniPmpSpvccSrcRootRGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPmpSpvccSrcRootRGroupIndex.setStatus('current')
pnniPmpSpvccSrcRootSecondaryVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 3, 1, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPmpSpvccSrcRootSecondaryVPI.setStatus('current')
pnniPmpSpvccSrcRootSecondaryVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 3, 1, 18), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPmpSpvccSrcRootSecondaryVCI.setStatus('current')
pnniPmpSpvccSrcPartyTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 4), )
if mibBuilder.loadTexts: pnniPmpSpvccSrcPartyTable.setStatus('current')
pnniPmpSpvccSrcPartyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 4, 1), ).setIndexNames((0, "Fore-Switch-MIB", "pnniPmpSpvccSrcRootIndex"), (0, "Fore-Switch-MIB", "pnniPmpSpvccSrcPartyIndex"))
if mibBuilder.loadTexts: pnniPmpSpvccSrcPartyEntry.setStatus('current')
pnniPmpSpvccSrcPartyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: pnniPmpSpvccSrcPartyIndex.setStatus('current')
pnniPmpSpvccSrcPartyAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 4, 1, 2), NsapAddr()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPmpSpvccSrcPartyAtmAddr.setStatus('current')
pnniPmpSpvccSrcPartyVPVCSel = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noPref", 1), ("require", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPmpSpvccSrcPartyVPVCSel.setStatus('current')
pnniPmpSpvccSrcPartyVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 4, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPmpSpvccSrcPartyVPI.setStatus('current')
pnniPmpSpvccSrcPartyVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 4, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPmpSpvccSrcPartyVCI.setStatus('current')
pnniPmpSpvccSrcPartyAssignedVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPmpSpvccSrcPartyAssignedVPI.setStatus('current')
pnniPmpSpvccSrcPartyAssignedVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPmpSpvccSrcPartyAssignedVCI.setStatus('current')
pnniPmpSpvccSrcPartyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("connecting", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPmpSpvccSrcPartyStatus.setStatus('current')
pnniPmpSpvccSrcPartyName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 4, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPmpSpvccSrcPartyName.setStatus('current')
pnniPmpSpvccSrcPartyLastFailCause = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 4, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPmpSpvccSrcPartyLastFailCause.setStatus('current')
pnniPmpSpvccSrcPartyRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPmpSpvccSrcPartyRetryCount.setStatus('current')
pnniPmpSpvccSrcPartyLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 4, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPmpSpvccSrcPartyLastChangeTime.setStatus('current')
pnniPmpSpvccSrcPartyFtDtlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 4, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPmpSpvccSrcPartyFtDtlIndex.setStatus('current')
pnniPmpSpvccSrcPartyRerouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rerouteNotRequested", 1), ("rerouteRequested", 2), ("rerouteCompleted", 3), ("rerouteNotApplicable", 4))).clone('rerouteNotRequested')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPmpSpvccSrcPartyRerouteStatus.setStatus('current')
pnniPmpSpvccSrcPartyQosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 4, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPmpSpvccSrcPartyQosIndex.setStatus('current')
pnniPmpSpvccSrcPartyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 4, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPmpSpvccSrcPartyRowStatus.setStatus('current')
pnniPmpSpvccSrcPartyLastLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 4, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPmpSpvccSrcPartyLastLocation.setStatus('current')
pnniPmpSpvccSrcPartyAutoDtlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPmpSpvccSrcPartyAutoDtlStatus.setStatus('current')
pnniPmpSpvccSrcPartyDownReason = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("reroute", 1), ("failure", 2), ("deletion", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPmpSpvccSrcPartyDownReason.setStatus('current')
pnniPmpSpvccSrcPartyRouteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 4, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPmpSpvccSrcPartyRouteCost.setStatus('current')
pnniPmpSpvccDestNumberOfSpvccs = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPmpSpvccDestNumberOfSpvccs.setStatus('current')
pnniPmpSpvccDestRootTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 6), )
if mibBuilder.loadTexts: pnniPmpSpvccDestRootTable.setStatus('current')
pnniPmpSpvccDestRootEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 6, 1), ).setIndexNames((0, "Fore-Switch-MIB", "pnniPmpSpvccDestRootIndex"))
if mibBuilder.loadTexts: pnniPmpSpvccDestRootEntry.setStatus('current')
pnniPmpSpvccDestRootIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPmpSpvccDestRootIndex.setStatus('current')
pnniPmpSpvccDestRootAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 6, 1, 2), NsapAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPmpSpvccDestRootAtmAddr.setStatus('current')
pnniPmpSpvccDestRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPmpSpvccDestRootPort.setStatus('current')
pnniPmpSpvccDestRootVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPmpSpvccDestRootVPI.setStatus('current')
pnniPmpSpvccDestRootVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPmpSpvccDestRootVCI.setStatus('current')
pnniPmpSpvccDestRootBearerClass = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("classA", 1), ("classC", 2), ("classX", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPmpSpvccDestRootBearerClass.setStatus('current')
pnniPmpSpvccDestRootSusceptClip = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPmpSpvccDestRootSusceptClip.setStatus('current')
pnniPmpSpvccDestRootFwdQoSClass = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("class0", 1), ("class1", 2), ("class2", 3), ("class3", 4), ("class4", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPmpSpvccDestRootFwdQoSClass.setStatus('current')
pnniPmpSpvccDestRootNumberOfParties = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPmpSpvccDestRootNumberOfParties.setStatus('current')
pnniPmpSpvccDestPartyTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 7), )
if mibBuilder.loadTexts: pnniPmpSpvccDestPartyTable.setStatus('current')
pnniPmpSpvccDestPartyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 7, 1), ).setIndexNames((0, "Fore-Switch-MIB", "pnniPmpSpvccDestRootIndex"), (0, "Fore-Switch-MIB", "pnniPmpSpvccDestPartyIndex"))
if mibBuilder.loadTexts: pnniPmpSpvccDestPartyEntry.setStatus('current')
pnniPmpSpvccDestPartyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPmpSpvccDestPartyIndex.setStatus('current')
pnniPmpSpvccDestPartyAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 7, 1, 2), NsapAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPmpSpvccDestPartyAtmAddr.setStatus('current')
pnniPmpSpvccDestPartyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPmpSpvccDestPartyPort.setStatus('current')
pnniPmpSpvccDestPartyAssignedVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPmpSpvccDestPartyAssignedVPI.setStatus('current')
pnniPmpSpvccDestPartyAssignedVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPmpSpvccDestPartyAssignedVCI.setStatus('current')
pnniPmpSpvccDestPartyUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 7, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPmpSpvccDestPartyUpTime.setStatus('current')
pnniPmpSpvccDestPartyTransitNetSel = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 7, 1, 7), TransitNetwork()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPmpSpvccDestPartyTransitNetSel.setStatus('current')
pnniPmpSpvccDestPartyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPmpSpvccDestPartyStatus.setStatus('current')
pnniPmpSpvccDestPartyRGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 12, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPmpSpvccDestPartyRGroupIndex.setStatus('current')
pnniSpvxcRGroupTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 14), )
if mibBuilder.loadTexts: pnniSpvxcRGroupTable.setStatus('current')
pnniSpvxcRGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 14, 1), ).setIndexNames((0, "Fore-Switch-MIB", "pnniSpvxcRGroupIndex"))
if mibBuilder.loadTexts: pnniSpvxcRGroupEntry.setStatus('current')
pnniSpvxcRGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: pnniSpvxcRGroupIndex.setStatus('current')
pnniSpvxcRGroupPrimaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 14, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniSpvxcRGroupPrimaryPort.setStatus('current')
pnniSpvxcRGroupSecondaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 14, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniSpvxcRGroupSecondaryPort.setStatus('current')
pnniSpvxcRGroupNsapAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 14, 1, 4), NsapAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvxcRGroupNsapAddr.setStatus('current')
pnniSpvxcRGroupSwitchoverCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("switch2primary", 1), ("switch2secondary", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniSpvxcRGroupSwitchoverCmd.setStatus('current')
pnniSpvxcRGroupActivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 14, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvxcRGroupActivePort.setStatus('current')
pnniSpvxcRGroupPacingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 14, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniSpvxcRGroupPacingNumber.setStatus('current')
pnniSpvxcRGroupPacingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 14, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniSpvxcRGroupPacingInterval.setStatus('current')
pnniSpvxcRGroupAutoPVCSwitchover = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 14, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniSpvxcRGroupAutoPVCSwitchover.setStatus('current')
pnniSpvxcRGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 14, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniSpvxcRGroupName.setStatus('current')
pnniSpvxcRGroupState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 14, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("operational", 1), ("switchoverInProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpvxcRGroupState.setStatus('current')
pnniSpvxcRGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 14, 1, 12), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniSpvxcRGroupRowStatus.setStatus('current')
q2931AdminTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1), )
if mibBuilder.loadTexts: q2931AdminTable.setStatus('current')
q2931AdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1), ).setIndexNames((0, "Fore-Switch-MIB", "q2931AdminPort"), (0, "Fore-Switch-MIB", "q2931AdminVPI"))
if mibBuilder.loadTexts: q2931AdminEntry.setStatus('current')
q2931AdminPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931AdminPort.setStatus('current')
q2931AdminVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931AdminVPI.setStatus('current')
q2931AdminVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931AdminVCI.setStatus('current')
q2931AdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931AdminStatus.setStatus('current')
q2931OperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931OperStatus.setStatus('current')
q2931SSCOPOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931SSCOPOperStatus.setStatus('current')
q2931ILMIAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931ILMIAdminStatus.setStatus('current')
q2931ILMIOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931ILMIOperStatus.setStatus('current')
q2931AdminAALType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("type34", 1), ("type5", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931AdminAALType.setStatus('current')
q2931AdminUNISide = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("user", 1), ("network", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931AdminUNISide.setStatus('current')
q2931AdminConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("publicUNI", 1), ("automode", 2), ("iisp", 3), ("ftPNNI", 4), ("privateNNI", 5), ("privateUNI", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931AdminConfigType.setStatus('current')
q2931AdminOperType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("publicUNI", 1), ("privateUNI", 2), ("iisp", 3), ("ftPNNI", 4), ("privateNNI", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931AdminOperType.setStatus('current')
q2931AdminEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 13), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931AdminEntryStatus.setStatus('current')
q2931AdminRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931AdminRemoteIpAddress.setStatus('current')
q2931SigReservedBW = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931SigReservedBW.setStatus('deprecated')
q2931ILMIReservedBW = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 16), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931ILMIReservedBW.setStatus('deprecated')
q2931ILMIAdminVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931ILMIAdminVCI.setStatus('current')
q2931AdminMinVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 18), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931AdminMinVCI.setStatus('current')
q2931AdminMaxVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 19), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931AdminMaxVCI.setStatus('current')
q2931MinVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931MinVCI.setStatus('current')
q2931MaxVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931MaxVCI.setStatus('current')
q2931UNIConfigVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("auto", 1), ("uni30", 2), ("uni31", 3), ("pnni10", 4), ("uni40", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931UNIConfigVersion.setStatus('current')
q2931UNIOperVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 0), ("uni30", 1), ("uni31", 2), ("pnni10", 3), ("uni40", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931UNIOperVersion.setStatus('current')
q2931ILMIRegistration = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("ignore", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931ILMIRegistration.setStatus('current')
q2931CallingPDefaultAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 25), NsapAddr()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931CallingPDefaultAddress.setStatus('current')
q2931AdminUseNativeE164 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931AdminUseNativeE164.setStatus('current')
q2931AdminNativeE164Address = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 27), E164Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931AdminNativeE164Address.setStatus('current')
q2931AdminE164AddressResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931AdminE164AddressResolution.setStatus('current')
q2931AdminFtPnniOrigCost = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931AdminFtPnniOrigCost.setStatus('deprecated')
q2931AdminFtPnniTermCost = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931AdminFtPnniTermCost.setStatus('deprecated')
q2931AdminAVPresentation = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 31), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931AdminAVPresentation.setStatus('deprecated')
q2931AdminSigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("vpAssoc", 1), ("nonAssoc", 2), ("auto", 3))).clone('auto')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931AdminSigMode.setStatus('current')
q2931AdminSigAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("allocVP", 1), ("allocLink", 2), ("auto", 3), ("allocVpBundle", 4), ("allocProxy", 5))).clone('auto')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931AdminSigAlloc.setStatus('current')
q2931PeerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931PeerPort.setStatus('current')
q2931InputSigContract = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 35), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931InputSigContract.setStatus('current')
q2931OutputSigService = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("vbr", 1), ("ubr", 2), ("unknown", 3))).clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931OutputSigService.setStatus('deprecated')
q2931SSCOPNoRespTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 37), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931SSCOPNoRespTimer.setStatus('current')
q2931AdminIncomingNSAPFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 46), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931AdminIncomingNSAPFilterIndex.setStatus('current')
q2931AdminOutgoingNSAPFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 47), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931AdminOutgoingNSAPFilterIndex.setStatus('current')
q2931AdminIEFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 48), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931AdminIEFilter.setStatus('current')
q2931SendCallProc = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931SendCallProc.setStatus('deprecated')
q2931VCIRangeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931VCIRangeStatus.setStatus('current')
q2931ClearOnCarrierLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noClear", 1), ("clearCalls", 2))).clone('noClear')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931ClearOnCarrierLoss.setStatus('obsolete')
q2931QosClassExpansionKey = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 54), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931QosClassExpansionKey.setStatus('current')
q2931AtmrConfDomainID = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 55), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931AtmrConfDomainID.setStatus('current')
q2931AtmrPnniNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931AtmrPnniNodeIndex.setStatus('current')
q2931AdminOperSigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vpAssoc", 1), ("nonAssoc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931AdminOperSigMode.setStatus('current')
q2931AdminOperSigAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("allocVP", 1), ("allocLink", 2), ("allocVpBundle", 4), ("allocProxy", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931AdminOperSigAlloc.setStatus('current')
q2931OutputSigUpc = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 60), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931OutputSigUpc.setStatus('current')
q2931AdminPlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("international", 2), ("national", 3), ("subscriber", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931AdminPlanType.setStatus('current')
q2931AdminMaxVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931AdminMaxVPI.setStatus('current')
q2931MaxSvccVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931MaxSvccVPI.setStatus('current')
q2931LastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 64), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931LastChangeTime.setStatus('current')
q2931MaxSvpcVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931MaxSvpcVPI.setStatus('current')
q2931VpCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undefined", 1), ("vpCapable", 2), ("notVpCapable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931VpCapability.setStatus('current')
q2931NNIProto = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("ftpnni", 2), ("forum-pnni", 3), ("iisp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931NNIProto.setStatus('current')
q2931AcceleratedClear = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931AcceleratedClear.setStatus('current')
q2931VpciGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99999))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931VpciGroupIndex.setStatus('current')
q2931ProxyDirGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 87), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99999))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931ProxyDirGroupIndex.setStatus('current')
q2931SupplementaryServicesStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("undefined", 3))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931SupplementaryServicesStatus.setStatus('current')
q2931CallingPAddressPresentation = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("undefined", 3))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931CallingPAddressPresentation.setStatus('current')
q2931CallingPAddressRestriction = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 73), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("undefined", 3))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931CallingPAddressRestriction.setStatus('current')
q2931ConnectedPAddressPresentation = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("undefined", 3))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931ConnectedPAddressPresentation.setStatus('current')
q2931ConnectedPAddressRestriction = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("undefined", 3))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931ConnectedPAddressRestriction.setStatus('current')
q2931ConnectedPDefaultAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 76), NsapAddr()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931ConnectedPDefaultAddress.setStatus('current')
q2931SubaddressingAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("undefined", 3))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931SubaddressingAdminStatus.setStatus('current')
q2931UserUserSignallingAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("undefined", 3))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931UserUserSignallingAdminStatus.setStatus('current')
q2931OutputIlmiUpc = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 79), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931OutputIlmiUpc.setStatus('current')
q2931OutputRccUpc = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 80), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931OutputRccUpc.setStatus('current')
q2931PnniRccVci = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 81), Integer32().clone(18)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931PnniRccVci.setStatus('current')
q2931AdminubrCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 82), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931AdminubrCalls.setStatus('current')
q2931AdmincbrCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 83), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931AdmincbrCalls.setStatus('current')
q2931AdminabrCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 84), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931AdminabrCalls.setStatus('current')
q2931AdminrtvbrCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 85), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931AdminrtvbrCalls.setStatus('current')
q2931AdminnrtvbrCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 1, 1, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931AdminnrtvbrCalls.setStatus('current')
q2931StatsTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 2), )
if mibBuilder.loadTexts: q2931StatsTable.setStatus('current')
q2931StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 2, 1), ).setIndexNames((0, "Fore-Switch-MIB", "q2931StatsPort"), (0, "Fore-Switch-MIB", "q2931StatsVPI"))
if mibBuilder.loadTexts: q2931StatsEntry.setStatus('current')
q2931StatsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931StatsPort.setStatus('current')
q2931StatsVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931StatsVPI.setStatus('current')
q2931VCCs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931VCCs.setStatus('current')
q2931Restarts = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931Restarts.setStatus('current')
q2931CallsCompletions = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931CallsCompletions.setStatus('current')
q2931CallsFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931CallsFailures.setStatus('current')
q2931CallsRejections = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931CallsRejections.setStatus('current')
q2931TransmittedMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931TransmittedMessages.setStatus('current')
q2931ReceivedMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931ReceivedMessages.setStatus('current')
q2931PublicGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 6))
q2931E164AddrResTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 6, 1), )
if mibBuilder.loadTexts: q2931E164AddrResTable.setStatus('current')
q2931E164AddrResEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 6, 1, 1), ).setIndexNames((0, "Fore-Switch-MIB", "q2931E164Port"), (0, "Fore-Switch-MIB", "q2931E164VPI"), (0, "Fore-Switch-MIB", "q2931E164Nsap"), (0, "Fore-Switch-MIB", "q2931E164NsapMask"))
if mibBuilder.loadTexts: q2931E164AddrResEntry.setStatus('current')
q2931E164Port = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931E164Port.setStatus('current')
q2931E164VPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931E164VPI.setStatus('current')
q2931E164Nsap = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 6, 1, 1, 3), NsapAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931E164Nsap.setStatus('current')
q2931E164NsapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931E164NsapMask.setStatus('current')
q2931E164Address = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 6, 1, 1, 5), E164Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931E164Address.setStatus('current')
q2931E164AddrResStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 6, 1, 1, 6), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: q2931E164AddrResStatus.setStatus('current')
q2931NSAPPingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 7))
q2931NPCallTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 7, 1), )
if mibBuilder.loadTexts: q2931NPCallTable.setStatus('current')
q2931NPCallEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 7, 1, 1), ).setIndexNames((0, "Fore-Switch-MIB", "q2931NPCallIndex"))
if mibBuilder.loadTexts: q2931NPCallEntry.setStatus('current')
q2931NPCallIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 7, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: q2931NPCallIndex.setStatus('current')
q2931NPCallDstNsap = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 7, 1, 1, 2), NsapAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: q2931NPCallDstNsap.setStatus('current')
q2931NPCallState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("down", 1), ("inprogress", 2), ("up", 3), ("err", 4), ("locpref", 5), ("lochost", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: q2931NPCallState.setStatus('current')
q2931NPCallClientType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noIndication", 1), ("lecs", 2), ("lec", 3), ("bus", 4), ("les", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: q2931NPCallClientType.setStatus('current')
q2931NPCallFwdUpcKey = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 7, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: q2931NPCallFwdUpcKey.setStatus('current')
q2931NPCallBckUpcKey = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 7, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: q2931NPCallBckUpcKey.setStatus('current')
q2931NPCallCallingDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 7, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: q2931NPCallCallingDomain.setStatus('current')
q2931NPCallQosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 7, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: q2931NPCallQosIndex.setStatus('current')
q2931NPCallQosClassFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("class0", 1), ("class1", 2), ("class2", 3), ("class3", 4), ("class4", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: q2931NPCallQosClassFwd.setStatus('current')
q2931NPCallQosClassBwd = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 7, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("class0", 1), ("class1", 2), ("class2", 3), ("class3", 4), ("class4", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: q2931NPCallQosClassBwd.setStatus('current')
q2931NPCallBearerClass = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("classA", 1), ("classC", 2), ("classX", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: q2931NPCallBearerClass.setStatus('current')
q2931NPCallVerbose = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: q2931NPCallVerbose.setStatus('current')
q2931NPCallStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 7, 1, 1, 14), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: q2931NPCallStatus.setStatus('current')
q2931NPPingState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 7, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("inprogress", 1), ("complete", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931NPPingState.setStatus('current')
q2931NPCallCauseCode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 7, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931NPCallCauseCode.setStatus('current')
q2931NPPingPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 7, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: q2931NPPingPktCount.setStatus('current')
q2931NPPingStatsPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 7, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931NPPingStatsPktsSent.setStatus('current')
q2931NPPingStatsPktsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 7, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931NPPingStatsPktsReceived.setStatus('current')
q2931NPPingStatsAverageDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 7, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931NPPingStatsAverageDelay.setStatus('current')
q2931NPMeasureRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 7, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: q2931NPMeasureRoundTripDelay.setStatus('current')
q2931NPPingStatsMaximumDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 7, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931NPPingStatsMaximumDelay.setStatus('current')
q2931NPPingStatsMinimumDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 7, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931NPPingStatsMinimumDelay.setStatus('current')
q2931NPCallNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 7, 2), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: q2931NPCallNextIndex.setStatus('current')
q2931AddressFilterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6))
q2931AFTemplateTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 1), )
if mibBuilder.loadTexts: q2931AFTemplateTable.setStatus('current')
q2931AFTemplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 1, 1), ).setIndexNames((0, "Fore-Switch-MIB", "q2931AFTemplateIndex"))
if mibBuilder.loadTexts: q2931AFTemplateEntry.setStatus('current')
q2931AFTemplateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: q2931AFTemplateIndex.setStatus('current')
q2931AFTemplateSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: q2931AFTemplateSrcPort.setStatus('current')
q2931AFTemplateSrcVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: q2931AFTemplateSrcVPI.setStatus('current')
q2931AFTemplateSrcNsap = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 1, 1, 4), NsapAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: q2931AFTemplateSrcNsap.setStatus('current')
q2931AFTemplateSrcNsapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: q2931AFTemplateSrcNsapMask.setStatus('current')
q2931AFTemplateDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: q2931AFTemplateDstPort.setStatus('current')
q2931AFTemplateDstVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: q2931AFTemplateDstVPI.setStatus('current')
q2931AFTemplateDstNsap = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 1, 1, 8), NsapAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: q2931AFTemplateDstNsap.setStatus('current')
q2931AFTemplateDstNsapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: q2931AFTemplateDstNsapMask.setStatus('current')
q2931AFTemplateAction = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accept", 1), ("reject", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: q2931AFTemplateAction.setStatus('current')
q2931AFTemplateName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: q2931AFTemplateName.setStatus('current')
q2931AFTemplateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 1, 1, 12), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: q2931AFTemplateStatus.setStatus('current')
q2931AFTemplateNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 1, 2), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: q2931AFTemplateNextIndex.setStatus('current')
q2931AFFilterTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 2), )
if mibBuilder.loadTexts: q2931AFFilterTable.setStatus('current')
q2931AFFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 2, 1), ).setIndexNames((0, "Fore-Switch-MIB", "q2931AFFilterIndex"))
if mibBuilder.loadTexts: q2931AFFilterEntry.setStatus('current')
q2931AFFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: q2931AFFilterIndex.setStatus('current')
q2931AFFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: q2931AFFilterName.setStatus('current')
q2931AFFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 2, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: q2931AFFilterStatus.setStatus('current')
q2931AFFilterNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 2, 2), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: q2931AFFilterNextIndex.setStatus('current')
q2931AFFilterTListTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 3), )
if mibBuilder.loadTexts: q2931AFFilterTListTable.setStatus('current')
q2931AFFilterTListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 3, 1), ).setIndexNames((0, "Fore-Switch-MIB", "q2931AFFilterIndex"), (0, "Fore-Switch-MIB", "q2931AFFilterTListIndex"))
if mibBuilder.loadTexts: q2931AFFilterTListEntry.setStatus('current')
q2931AFFilterTListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: q2931AFFilterTListIndex.setStatus('current')
q2931AFFilterTListTemplateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: q2931AFFilterTListTemplateIndex.setStatus('current')
q2931AFFilterTListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 3, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: q2931AFFilterTListStatus.setStatus('current')
q2931AFStatsTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 4), )
if mibBuilder.loadTexts: q2931AFStatsTable.setStatus('current')
q2931AFStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 4, 1), ).setIndexNames((0, "Fore-Switch-MIB", "q2931AdminPort"), (0, "Fore-Switch-MIB", "q2931AdminVPI"), (0, "Fore-Switch-MIB", "q2931AFDirection"))
if mibBuilder.loadTexts: q2931AFStatsEntry.setStatus('current')
q2931AFDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2))))
if mibBuilder.loadTexts: q2931AFDirection.setStatus('current')
q2931AFAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931AFAccepts.setStatus('current')
q2931AFRejectKnowns = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931AFRejectKnowns.setStatus('current')
q2931AFRejectUnknowns = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931AFRejectUnknowns.setStatus('current')
q2931AFLookupTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 5), )
if mibBuilder.loadTexts: q2931AFLookupTable.setStatus('current')
q2931AFLookupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 5, 1), ).setIndexNames((0, "Fore-Switch-MIB", "q2931AFLookupIndex"))
if mibBuilder.loadTexts: q2931AFLookupEntry.setStatus('current')
q2931AFLookupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: q2931AFLookupIndex.setStatus('current')
q2931AFLookupNSAPFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: q2931AFLookupNSAPFilterIndex.setStatus('current')
q2931AFLookupSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: q2931AFLookupSrcPort.setStatus('current')
q2931AFLookupSrcVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: q2931AFLookupSrcVPI.setStatus('current')
q2931AFLookupSrcNsap = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 5, 1, 5), NsapAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: q2931AFLookupSrcNsap.setStatus('current')
q2931AFLookupDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 5, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: q2931AFLookupDstPort.setStatus('current')
q2931AFLookupDstVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 5, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: q2931AFLookupDstVPI.setStatus('current')
q2931AFLookupDstNsap = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 5, 1, 8), NsapAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: q2931AFLookupDstNsap.setStatus('current')
q2931AFLookupResult = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accept", 1), ("reject", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931AFLookupResult.setStatus('current')
q2931AFLookupTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931AFLookupTemplate.setStatus('current')
q2931AFLookupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 5, 1, 11), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: q2931AFLookupStatus.setStatus('current')
q2931AFLastFailureGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 6))
q2931AFLastFailureSrcPort = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931AFLastFailureSrcPort.setStatus('current')
q2931AFLastFailureSrcVPI = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931AFLastFailureSrcVPI.setStatus('current')
q2931AFLastFailureSrcNsap = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 6, 3), NsapAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931AFLastFailureSrcNsap.setStatus('current')
q2931AFLastFailureDstPort = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931AFLastFailureDstPort.setStatus('current')
q2931AFLastFailureDstVPI = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931AFLastFailureDstVPI.setStatus('current')
q2931AFLastFailureDstNsap = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 6, 6), NsapAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931AFLastFailureDstNsap.setStatus('current')
q2931AFLastFailureTemplateIndex = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931AFLastFailureTemplateIndex.setStatus('current')
q2931AFLastFailureDirection = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 6, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: q2931AFLastFailureDirection.setStatus('current')
proxyDirMapEntryGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 15))
proxyDirMapEntryTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 15, 1), )
if mibBuilder.loadTexts: proxyDirMapEntryTable.setStatus('current')
proxyDirMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 15, 1, 1), ).setIndexNames((0, "Fore-Switch-MIB", "proxyDirMapIndex"))
if mibBuilder.loadTexts: proxyDirMapEntry.setStatus('current')
proxyDirMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99999)))
if mibBuilder.loadTexts: proxyDirMapIndex.setStatus('current')
proxyDirMapAESA = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 15, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyDirMapAESA.setStatus('current')
proxyDirMapGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 15, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyDirMapGroup.setStatus('current')
proxyDirMapVPCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 15, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyDirMapVPCI.setStatus('current')
proxyDirMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 15, 1, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyDirMapStatus.setStatus('current')
proxyDirMapVp = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 15, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proxyDirMapVp.setStatus('current')
proxyDirMapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 15, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: proxyDirMapPort.setStatus('current')
proxyDirGroupGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 16))
proxyDirGroupTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 16, 1), )
if mibBuilder.loadTexts: proxyDirGroupTable.setStatus('current')
proxyDirGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 16, 1, 1), ).setIndexNames((0, "Fore-Switch-MIB", "proxyDirGroupIndex"))
if mibBuilder.loadTexts: proxyDirGroupEntry.setStatus('current')
proxyDirGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99999)))
if mibBuilder.loadTexts: proxyDirGroupIndex.setStatus('current')
proxyDirGroupPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 16, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyDirGroupPrefix.setStatus('current')
proxyDirGroupVPCIGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 16, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyDirGroupVPCIGroup.setStatus('current')
proxyDirGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 16, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyDirGroupStatus.setStatus('current')
vpciMappingTableGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 13))
vmtVpciMapTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 13, 1), )
if mibBuilder.loadTexts: vmtVpciMapTable.setStatus('current')
vmtVpciMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 13, 1, 1), ).setIndexNames((0, "Fore-Switch-MIB", "vmtVpciMapIndex"))
if mibBuilder.loadTexts: vmtVpciMapEntry.setStatus('current')
vmtVpciMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99999)))
if mibBuilder.loadTexts: vmtVpciMapIndex.setStatus('current')
vmtVpciMapVPCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 13, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmtVpciMapVPCI.setStatus('current')
vmtVpciMapVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 13, 1, 1, 3), Integer32().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmtVpciMapVPI.setStatus('current')
vmtVpciMapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 13, 1, 1, 4), Integer32().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmtVpciMapPort.setStatus('current')
vmtVpciMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 13, 1, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmtVpciMapStatus.setStatus('current')
vmtVpciMapGroupTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 13, 2), )
if mibBuilder.loadTexts: vmtVpciMapGroupTable.setStatus('current')
vmtVpciMapGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 13, 2, 1), ).setIndexNames((0, "Fore-Switch-MIB", "vmtVpciMapGroupIndex"))
if mibBuilder.loadTexts: vmtVpciMapGroupEntry.setStatus('current')
vmtVpciMapGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 13, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99999)))
if mibBuilder.loadTexts: vmtVpciMapGroupIndex.setStatus('current')
vmtVpciMapGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 13, 2, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmtVpciMapGroupStatus.setStatus('current')
vmtVpciMapListTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 13, 3), )
if mibBuilder.loadTexts: vmtVpciMapListTable.setStatus('current')
vmtVpciMapListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 13, 3, 1), ).setIndexNames((0, "Fore-Switch-MIB", "vmtVpciMapGroupIndex"), (0, "Fore-Switch-MIB", "vmtVpciMapListIndex"))
if mibBuilder.loadTexts: vmtVpciMapListEntry.setStatus('current')
vmtVpciMapListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 13, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99999)))
if mibBuilder.loadTexts: vmtVpciMapListIndex.setStatus('current')
vmtVpciMapListMEIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 13, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmtVpciMapListMEIndex.setStatus('current')
vmtVpciMapListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 13, 3, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmtVpciMapListStatus.setStatus('current')
perCallDbgFilterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 8))
perCallDbgFilterTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 8, 1), )
if mibBuilder.loadTexts: perCallDbgFilterTable.setStatus('current')
perCallDbgFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 8, 1, 1), ).setIndexNames((0, "Fore-Switch-MIB", "perCallDbgFilterIndex"))
if mibBuilder.loadTexts: perCallDbgFilterEntry.setStatus('current')
perCallDbgFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 8, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: perCallDbgFilterIndex.setStatus('current')
perCallDbgFilterTemplateId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 8, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: perCallDbgFilterTemplateId.setStatus('current')
perCallDbgFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 8, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: perCallDbgFilterName.setStatus('current')
perCallDbgFilterFlavor = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 8, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: perCallDbgFilterFlavor.setStatus('current')
perCallDbgFilterMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 8, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perCallDbgFilterMatches.setStatus('current')
perCallDbgFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 8, 1, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: perCallDbgFilterRowStatus.setStatus('current')
perCallDbgTransFlag = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 6, 2, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: perCallDbgTransFlag.setStatus('current')
nsapNetworkPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 1), )
if mibBuilder.loadTexts: nsapNetworkPrefixTable.setStatus('current')
nsapNetworkPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 1, 1), ).setIndexNames((0, "Fore-Switch-MIB", "nsapNetworkPrefixPort"), (0, "Fore-Switch-MIB", "nsapNetworkPrefixVPI"), (0, "Fore-Switch-MIB", "nsapNetworkPrefixValue"))
if mibBuilder.loadTexts: nsapNetworkPrefixEntry.setStatus('current')
nsapNetworkPrefixPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsapNetworkPrefixPort.setStatus('current')
nsapNetworkPrefixVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsapNetworkPrefixVPI.setStatus('current')
nsapNetworkPrefixValue = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 1, 1, 3), NsapPrefix()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsapNetworkPrefixValue.setStatus('current')
nsapNetworkPrefixStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 1, 1, 4), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsapNetworkPrefixStatus.setStatus('current')
nsapTopologyTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 3), )
if mibBuilder.loadTexts: nsapTopologyTable.setStatus('current')
nsapTopologyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 3, 1), ).setIndexNames((0, "Fore-Switch-MIB", "nsapTopoBoard"), (0, "Fore-Switch-MIB", "nsapTopoLinkSrc"), (0, "Fore-Switch-MIB", "nsapTopoLinkSrcMask"), (0, "Fore-Switch-MIB", "nsapTopoLinkSrcPort"), (0, "Fore-Switch-MIB", "nsapTopoLinkSrcVpi"), (0, "Fore-Switch-MIB", "nsapTopoLinkDest"), (0, "Fore-Switch-MIB", "nsapTopoLinkDestMask"), (0, "Fore-Switch-MIB", "nsapTopoLinkDestPort"), (0, "Fore-Switch-MIB", "nsapTopoLinkDestVpi"))
if mibBuilder.loadTexts: nsapTopologyEntry.setStatus('current')
nsapTopoBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsapTopoBoard.setStatus('current')
nsapTopoLinkSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 3, 1, 2), NsapAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsapTopoLinkSrc.setStatus('current')
nsapTopoLinkSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsapTopoLinkSrcMask.setStatus('current')
nsapTopoLinkSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsapTopoLinkSrcPort.setStatus('current')
nsapTopoLinkSrcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsapTopoLinkSrcVpi.setStatus('current')
nsapTopoLinkDest = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 3, 1, 6), NsapAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsapTopoLinkDest.setStatus('current')
nsapTopoLinkDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsapTopoLinkDestMask.setStatus('current')
nsapTopoLinkDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsapTopoLinkDestPort.setStatus('current')
nsapTopoLinkDestVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsapTopoLinkDestVpi.setStatus('current')
nsapTopoLinkCost = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsapTopoLinkCost.setStatus('current')
nsapTopoLinkUbrVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 3, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsapTopoLinkUbrVCs.setStatus('deprecated')
nsapTopoLinkCbrCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsapTopoLinkCbrCapacity.setStatus('current')
nsapTopoLinkCbrFifo = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsapTopoLinkCbrFifo.setStatus('current')
nsapTopoLinkVbrCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsapTopoLinkVbrCapacity.setStatus('current')
nsapTopoLinkVbrFifo = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsapTopoLinkVbrFifo.setStatus('current')
nsapTopoLinkOrig = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("static-route", 1), ("spans-pnni", 2), ("ilmi-registered", 3), ("pnni", 4), ("external", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsapTopoLinkOrig.setStatus('current')
nsapTopoLinkCapabilitySet = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsapTopoLinkCapabilitySet.setStatus('current')
nsapTopoLinkFreshness = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsapTopoLinkFreshness.setStatus('current')
nsapTopoLinkUbrEstimatedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsapTopoLinkUbrEstimatedBandwidth.setStatus('current')
nsapStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 4), )
if mibBuilder.loadTexts: nsapStaticRouteTable.setStatus('current')
nsapStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 4, 1), ).setIndexNames((0, "Fore-Switch-MIB", "nsapStaticRouteAddress"), (0, "Fore-Switch-MIB", "nsapStaticRouteMask"), (0, "Fore-Switch-MIB", "nsapStaticRoutePort"), (0, "Fore-Switch-MIB", "nsapStaticRouteVPI"))
if mibBuilder.loadTexts: nsapStaticRouteEntry.setStatus('current')
nsapStaticRouteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 4, 1, 1), NsapAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsapStaticRouteAddress.setStatus('current')
nsapStaticRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsapStaticRouteMask.setStatus('current')
nsapStaticRoutePort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 4, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsapStaticRoutePort.setStatus('current')
nsapStaticRouteVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 4, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsapStaticRouteVPI.setStatus('current')
nsapStaticRouteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 4, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsapStaticRouteCost.setStatus('current')
nsapStaticRouteMaxCbrCap = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 4, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsapStaticRouteMaxCbrCap.setStatus('current')
nsapStaticRouteMaxVbrCap = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 4, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsapStaticRouteMaxVbrCap.setStatus('current')
nsapStaticRouteAbrSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsapStaticRouteAbrSupport.setStatus('current')
nsapStaticRouteEpdSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsapStaticRouteEpdSupport.setStatus('current')
nsapStaticRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 4, 1, 10), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nsapStaticRouteStatus.setStatus('current')
ftPnniDTLTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 5), )
if mibBuilder.loadTexts: ftPnniDTLTable.setStatus('deprecated')
ftPnniDTLEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 5, 1), ).setIndexNames((0, "Fore-Switch-MIB", "ftPnniDTLIndex"), (0, "Fore-Switch-MIB", "ftPnniDTLEntryIndex"))
if mibBuilder.loadTexts: ftPnniDTLEntry.setStatus('deprecated')
ftPnniDTLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftPnniDTLIndex.setStatus('deprecated')
ftPnniDTLEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftPnniDTLEntryIndex.setStatus('deprecated')
ftPnniDTLNodePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 5, 1, 3), NsapPrefix()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ftPnniDTLNodePrefix.setStatus('deprecated')
ftPnniDTLNodeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 104))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ftPnniDTLNodeMask.setStatus('deprecated')
ftPnniDTLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 5, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ftPnniDTLPort.setStatus('deprecated')
ftPnniDTLVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 5, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ftPnniDTLVPI.setStatus('deprecated')
ftPnniDTLStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 5, 1, 7), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ftPnniDTLStatus.setStatus('deprecated')
ftPnniSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 6), )
if mibBuilder.loadTexts: ftPnniSummaryTable.setStatus('deprecated')
ftPnniSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 6, 1), ).setIndexNames((0, "Fore-Switch-MIB", "ftPnniSummaryAddress"), (0, "Fore-Switch-MIB", "ftPnniSummaryPrefixLength"))
if mibBuilder.loadTexts: ftPnniSummaryEntry.setStatus('deprecated')
ftPnniSummaryAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftPnniSummaryAddress.setStatus('deprecated')
ftPnniSummaryPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftPnniSummaryPrefixLength.setStatus('deprecated')
ftPnniSummaryType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("exterior", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ftPnniSummaryType.setStatus('deprecated')
ftPnniSummarySuppress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ftPnniSummarySuppress.setStatus('deprecated')
ftPnniSummaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("advertising", 1), ("suppressing", 2), ("inactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftPnniSummaryState.setStatus('deprecated')
ftPnniSummaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 9, 6, 1, 6), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ftPnniSummaryStatus.setStatus('deprecated')
upcContractTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 10, 1), )
if mibBuilder.loadTexts: upcContractTable.setStatus('current')
upcContractEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 10, 1, 1), ).setIndexNames((0, "Fore-Switch-MIB", "upcContractKey"))
if mibBuilder.loadTexts: upcContractEntry.setStatus('current')
upcContractKey = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upcContractKey.setStatus('current')
upcContractEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 10, 1, 1, 2), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: upcContractEntryStatus.setStatus('current')
upcContractPCR01 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 10, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: upcContractPCR01.setStatus('deprecated')
upcContractSCR01 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 10, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: upcContractSCR01.setStatus('deprecated')
upcContractMBS01 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 10, 1, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: upcContractMBS01.setStatus('deprecated')
upcContractPCR0 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 10, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: upcContractPCR0.setStatus('deprecated')
upcContractSCR0 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 10, 1, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: upcContractSCR0.setStatus('deprecated')
upcContractMBS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 10, 1, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: upcContractMBS0.setStatus('deprecated')
upcContractCDVT = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 10, 1, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: upcContractCDVT.setStatus('current')
upcContractTagReq = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 10, 1, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: upcContractTagReq.setStatus('deprecated')
upcContractAal5Epd = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 10, 1, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: upcContractAal5Epd.setStatus('deprecated')
upcContractName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 10, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: upcContractName.setStatus('current')
upcContractDoGCRAPolicing = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 10, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: upcContractDoGCRAPolicing.setStatus('current')
upcContractIsAAL5 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 10, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: upcContractIsAAL5.setStatus('current')
upcContractDoPacketDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 10, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: upcContractDoPacketDiscard.setStatus('current')
upcContractDoPPPolicing = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 10, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: upcContractDoPPPolicing.setStatus('current')
upcContractDoUBRTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 10, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: upcContractDoUBRTagging.setStatus('deprecated')
upcContractSchedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 10, 1, 1, 18), AtmConnSchedMode().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: upcContractSchedMode.setStatus('current')
upcContractUseAltCLPThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 10, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: upcContractUseAltCLPThreshold.setStatus('current')
upcContractMCR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 10, 1, 1, 20), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: upcContractMCR.setStatus('current')
upcContractEstimatedUbrBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 10, 1, 1, 21), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: upcContractEstimatedUbrBandwidth.setStatus('current')
upcContractAAL5CountingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 10, 1, 1, 22), AAL5CountingMode().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: upcContractAAL5CountingMode.setStatus('current')
upcContractServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 10, 1, 1, 23), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: upcContractServiceCategory.setStatus('current')
upcContractPoliceScheme = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 10, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("cbr1", 1), ("cbr0", 2), ("cbr0tag", 3), ("vbr1", 4), ("vbr2", 5), ("vbr3", 6), ("abr1", 7), ("ubr1", 8), ("ubr2", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: upcContractPoliceScheme.setStatus('current')
upcContractPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 10, 1, 1, 25), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: upcContractPCR.setStatus('current')
upcContractSCR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 10, 1, 1, 26), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: upcContractSCR.setStatus('current')
upcContractMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 10, 1, 1, 27), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: upcContractMBS.setStatus('current')
upcContractServiceSubCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 10, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: upcContractServiceSubCategory.setStatus('current')
upcContractCongestionBasedPeakBw = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 10, 1, 1, 29), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: upcContractCongestionBasedPeakBw.setStatus('current')
upcContractBehaviorClassSelector = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 10, 1, 1, 30), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: upcContractBehaviorClassSelector.setStatus('current')
qosClassExpansionTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 17, 1), )
if mibBuilder.loadTexts: qosClassExpansionTable.setStatus('current')
qosClassExpansionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 17, 1, 1), ).setIndexNames((0, "Fore-Switch-MIB", "qosClassExpansionKey"), (0, "Fore-Switch-MIB", "qosClassValue"))
if mibBuilder.loadTexts: qosClassExpansionEntry.setStatus('current')
qosClassExpansionKey = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 17, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: qosClassExpansionKey.setStatus('current')
qosClassValue = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("class0", 1), ("class1", 2), ("class2", 3), ("class3", 4), ("class4", 5))))
if mibBuilder.loadTexts: qosClassValue.setStatus('current')
qosClassExpansionEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 17, 1, 1, 3), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosClassExpansionEntryStatus.setStatus('current')
qosClassFwdCtd = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 17, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215)).clone(16777215)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosClassFwdCtd.setStatus('current')
qosClassFwdCdv = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 17, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215)).clone(16777215)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosClassFwdCdv.setStatus('current')
qosClassBackCdv = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 17, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215)).clone(16777215)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosClassBackCdv.setStatus('current')
qosClassFwdClr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 17, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosClassFwdClr.setStatus('current')
qosClassBackClr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 17, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosClassBackClr.setStatus('current')
qosClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 17, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosClassName.setStatus('current')
pathExtQosMetricTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 18, 1), )
if mibBuilder.loadTexts: pathExtQosMetricTable.setStatus('current')
pathExtQosMetricEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 18, 1, 1), ).setIndexNames((0, "Fore-Switch-MIB", "pathExtQosMetricIndex"))
if mibBuilder.loadTexts: pathExtQosMetricEntry.setStatus('current')
pathExtQosMetricIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 18, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: pathExtQosMetricIndex.setStatus('current')
pathExtQosMetricMaxCtd = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 18, 1, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pathExtQosMetricMaxCtd.setStatus('current')
pathExtQosMetricMaxCdv = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 18, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pathExtQosMetricMaxCdv.setStatus('current')
pathExtQosMetricMaxClr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 18, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pathExtQosMetricMaxClr.setStatus('current')
pathExtQosMetricEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 18, 1, 1, 5), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pathExtQosMetricEntryStatus.setStatus('current')
pathExtTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 18, 2), )
if mibBuilder.loadTexts: pathExtTable.setStatus('current')
pathExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 18, 2, 1), ).setIndexNames((0, "Fore-Switch-MIB", "pathPort"), (0, "Fore-Switch-MIB", "pathVPI"))
if mibBuilder.loadTexts: pathExtEntry.setStatus('current')
pathExtCbrMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 18, 2, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pathExtCbrMetric.setStatus('current')
pathExtRtVbrMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 18, 2, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pathExtRtVbrMetric.setStatus('current')
pathExtNrtVbrMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 18, 2, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pathExtNrtVbrMetric.setStatus('current')
pathExtAbrMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 18, 2, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pathExtAbrMetric.setStatus('current')
pathExtUbrMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 18, 2, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pathExtUbrMetric.setStatus('current')
pathExtEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 18, 2, 1, 6), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pathExtEntryStatus.setStatus('current')
outputPathExtTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 18, 3), )
if mibBuilder.loadTexts: outputPathExtTable.setStatus('current')
outputPathExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 18, 3, 1), ).setIndexNames((0, "Fore-Switch-MIB", "opathPort"), (0, "Fore-Switch-MIB", "opathVPI"))
if mibBuilder.loadTexts: outputPathExtEntry.setStatus('current')
opathExtCbrMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 18, 3, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opathExtCbrMetric.setStatus('current')
opathExtRtVbrMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 18, 3, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opathExtRtVbrMetric.setStatus('current')
opathExtNrtVbrMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 18, 3, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opathExtNrtVbrMetric.setStatus('current')
opathExtAbrMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 18, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opathExtAbrMetric.setStatus('current')
opathExtUbrMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 18, 3, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opathExtUbrMetric.setStatus('current')
opathExtEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 18, 3, 1, 6), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: opathExtEntryStatus.setStatus('current')
vpGroupTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 18, 4), )
if mibBuilder.loadTexts: vpGroupTable.setStatus('current')
vpGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 18, 4, 1), ).setIndexNames((0, "Fore-Switch-MIB", "vpGroupIndex"), (0, "Fore-Switch-MIB", "vpGroupPort"), (0, "Fore-Switch-MIB", "vpGroupVPI"))
if mibBuilder.loadTexts: vpGroupEntry.setStatus('current')
vpGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 18, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpGroupIndex.setStatus('current')
vpGroupPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 18, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpGroupPort.setStatus('current')
vpGroupVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 18, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpGroupVPI.setStatus('current')
vpGroupVPCI = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 18, 4, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vpGroupVPCI.setStatus('current')
vpGroupEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 18, 4, 1, 5), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vpGroupEntryStatus.setStatus('current')
poolConfPPCalls = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 19, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poolConfPPCalls.setStatus('current')
poolConfPMPCalls = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 19, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poolConfPMPCalls.setStatus('current')
poolConfMaxPercentage = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 19, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poolConfMaxPercentage.setStatus('current')
swBoardTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 7, 1), )
if mibBuilder.loadTexts: swBoardTable.setStatus('current')
swBoardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 7, 1, 1), ).setIndexNames((0, "Fore-Switch-MIB", "swBoardIndex"))
if mibBuilder.loadTexts: swBoardEntry.setStatus('current')
swBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBoardIndex.setStatus('current')
swBoardMaxPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBoardMaxPaths.setStatus('current')
swBoardMaxChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBoardMaxChannels.setStatus('current')
swBoardAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 7, 1, 1, 4), SpansAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBoardAtmAddress.setStatus('current')
swBoardUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 7, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBoardUptime.setStatus('current')
swBoardCDV = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 7, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swBoardCDV.setStatus('deprecated')
swBoardPolicingAction = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tag", 1), ("drop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swBoardPolicingAction.setStatus('deprecated')
swBoardNsapPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 7, 1, 1, 8), NsapPrefix()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swBoardNsapPrefix.setStatus('current')
swBoardClockScalingFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 7, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swBoardClockScalingFactor.setStatus('current')
swBoardDebugMode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swBoardDebugMode.setStatus('current')
swBoardMulticastMode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 7, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("non-extended", 1), ("extended", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBoardMulticastMode.setStatus('current')
swBoardFingerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swBoardFingerMode.setStatus('current')
swBoardATMLayerOAM = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swBoardATMLayerOAM.setStatus('deprecated')
swBoardTopoTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 8, 1), )
if mibBuilder.loadTexts: swBoardTopoTable.setStatus('current')
swBoardTopoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 8, 1, 1), ).setIndexNames((0, "Fore-Switch-MIB", "swBoardTopoIndex"))
if mibBuilder.loadTexts: swBoardTopoEntry.setStatus('current')
swBoardTopoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBoardTopoIndex.setStatus('current')
swBoardTopoNumberOfLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBoardTopoNumberOfLinks.setStatus('current')
swBoardLinkTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 8, 2), )
if mibBuilder.loadTexts: swBoardLinkTable.setStatus('current')
swBoardLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 8, 2, 1), ).setIndexNames((0, "Fore-Switch-MIB", "swBoardLinkIndex"), (0, "Fore-Switch-MIB", "swBoardLinkSrc"), (0, "Fore-Switch-MIB", "swBoardLinkDest"))
if mibBuilder.loadTexts: swBoardLinkEntry.setStatus('current')
swBoardLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBoardLinkIndex.setStatus('current')
swBoardLinkSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 8, 2, 1, 2), SpansAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBoardLinkSrc.setStatus('current')
swBoardLinkDest = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 8, 2, 1, 3), SpansAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBoardLinkDest.setStatus('current')
swBoardLinkCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 8, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBoardLinkCapacity.setStatus('current')
swBoardLinkAge = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 8, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBoardLinkAge.setStatus('current')
oamGeneratingChannelTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 12, 1), )
if mibBuilder.loadTexts: oamGeneratingChannelTable.setStatus('current')
oamGeneratingChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 12, 1, 1), ).setIndexNames((0, "Fore-Switch-MIB", "chanPort"), (0, "Fore-Switch-MIB", "chanVPI"), (0, "Fore-Switch-MIB", "chanVCI"))
if mibBuilder.loadTexts: oamGeneratingChannelEntry.setStatus('current')
oamGeneratingChannelCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 12, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamGeneratingChannelCells.setStatus('current')
oamGeneratingOpathTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 12, 2), )
if mibBuilder.loadTexts: oamGeneratingOpathTable.setStatus('current')
oamGeneratingOpathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 12, 2, 1), ).setIndexNames((0, "Fore-Switch-MIB", "opathPort"), (0, "Fore-Switch-MIB", "opathVPI"))
if mibBuilder.loadTexts: oamGeneratingOpathEntry.setStatus('current')
oamGeneratingOpathCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 12, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamGeneratingOpathCells.setStatus('current')
oamGeneratingPathrTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 12, 3), )
if mibBuilder.loadTexts: oamGeneratingPathrTable.setStatus('current')
oamGeneratingPathrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 12, 3, 1), ).setIndexNames((0, "Fore-Switch-MIB", "pathrInputPort"), (0, "Fore-Switch-MIB", "pathrInputVPI"), (0, "Fore-Switch-MIB", "pathrOutputPort"), (0, "Fore-Switch-MIB", "pathrOutputVPI"))
if mibBuilder.loadTexts: oamGeneratingPathrEntry.setStatus('current')
oamGeneratingPathrCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 12, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamGeneratingPathrCells.setStatus('current')
oamReceivedPathTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 12, 4), )
if mibBuilder.loadTexts: oamReceivedPathTable.setStatus('current')
oamReceivedPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 12, 4, 1), ).setIndexNames((0, "Fore-Switch-MIB", "pathPort"), (0, "Fore-Switch-MIB", "pathVPI"))
if mibBuilder.loadTexts: oamReceivedPathEntry.setStatus('current')
oamReceivedPathAISCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 12, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamReceivedPathAISCells.setStatus('current')
oamReceivedPathRDICells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 12, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamReceivedPathRDICells.setStatus('current')
guardTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 13, 1), )
if mibBuilder.loadTexts: guardTable.setStatus('current')
guardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 13, 1, 1), ).setIndexNames((0, "Fore-Switch-MIB", "boardIndex"))
if mibBuilder.loadTexts: guardEntry.setStatus('current')
oamGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 13, 1, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oamGuard.setStatus('current')
trapNumberOfDest = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapNumberOfDest.setStatus('deprecated')
trapDestTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 2, 1, 2), )
if mibBuilder.loadTexts: trapDestTable.setStatus('deprecated')
trapDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 2, 1, 2, 1), ).setIndexNames((0, "Fore-Switch-MIB", "trapDest"))
if mibBuilder.loadTexts: trapDestEntry.setStatus('deprecated')
trapDest = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 2, 1, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapDest.setStatus('deprecated')
trapDestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 2, 1, 2, 1, 2), EntryStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapDestStatus.setStatus('deprecated')
snmpReconfigure = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpReconfigure.setStatus('deprecated')
snmpReadCommunity = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 2, 2, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpReadCommunity.setStatus('deprecated')
snmpWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 2, 2, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpWriteCommunity.setStatus('deprecated')
snmpWarmStart = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpWarmStart.setStatus('current')
snmpColdStart = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enableResetATMconf", 2), ("enableResetAllConf", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpColdStart.setStatus('current')
snmpRemoteSetsStatus = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpRemoteSetsStatus.setStatus('deprecated')
snmpThisAgentBoardNumber = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 2, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpThisAgentBoardNumber.setStatus('current')
snmpAgentTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 2, 5, 2), )
if mibBuilder.loadTexts: snmpAgentTable.setStatus('current')
snmpAgentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 2, 5, 2, 1), ).setIndexNames((0, "Fore-Switch-MIB", "snmpAgentBoardNumber"), (0, "Fore-Switch-MIB", "snmpAgentInterface"))
if mibBuilder.loadTexts: snmpAgentEntry.setStatus('current')
snmpAgentBoardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 2, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentBoardNumber.setStatus('current')
snmpAgentInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 2, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentInterface.setStatus('current')
snmpAgentAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 2, 5, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentAddress.setStatus('current')
asxSwLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 0)).setObjects(("Fore-Switch-MIB", "portNumber"), ("Fore-Switch-MIB", "portName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxSwLinkDown.setStatus('current')
asxSwLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1)).setObjects(("Fore-Switch-MIB", "portNumber"), ("Fore-Switch-MIB", "portName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxSwLinkUp.setStatus('current')
asxHostLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 2)).setObjects(("Fore-Switch-MIB", "portNumber"), ("Fore-Switch-MIB", "portName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxHostLinkDown.setStatus('current')
asxHostLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 3)).setObjects(("Fore-Switch-MIB", "portNumber"), ("Fore-Switch-MIB", "portName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxHostLinkUp.setStatus('current')
asxNetModuleDown = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 4)).setObjects(("Fore-Switch-MIB", "moduleBoard"), ("Fore-Switch-MIB", "moduleNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxNetModuleDown.setStatus('current')
asxNetModuleUp = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 5)).setObjects(("Fore-Switch-MIB", "moduleBoard"), ("Fore-Switch-MIB", "moduleNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxNetModuleUp.setStatus('current')
asxPsInputDown = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 6)).setObjects(("Fore-Switch-MIB", "envPowerSupplyIndex"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxPsInputDown.setStatus('current')
asxPsInputUp = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 7)).setObjects(("Fore-Switch-MIB", "envPowerSupplyIndex"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxPsInputUp.setStatus('current')
asxPsOutputDown = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 9)).setObjects(("Fore-Switch-MIB", "envPowerSupplyIndex"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxPsOutputDown.setStatus('current')
asxPsOutputUp = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 10)).setObjects(("Fore-Switch-MIB", "envPowerSupplyIndex"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxPsOutputUp.setStatus('current')
asxFanBankDown = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 22)).setObjects(("Fore-Switch-MIB", "envFanBankIndex"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxFanBankDown.setStatus('current')
asxFanBankUp = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 23)).setObjects(("Fore-Switch-MIB", "envFanBankIndex"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxFanBankUp.setStatus('current')
asxLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 28)).setObjects(("Fore-Switch-MIB", "portNumber"), ("Fore-Switch-MIB", "portName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxLinkDown.setStatus('current')
asxLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 29)).setObjects(("Fore-Switch-MIB", "portNumber"), ("Fore-Switch-MIB", "portName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxLinkUp.setStatus('current')
asxSpansDown = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 30)).setObjects(("Fore-Switch-MIB", "portName"), ("Fore-Switch-MIB", "sigPathPort"), ("Fore-Switch-MIB", "sigPathVPI"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxSpansDown.setStatus('current')
asxSpansUp = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 31)).setObjects(("Fore-Switch-MIB", "portName"), ("Fore-Switch-MIB", "sigPathPort"), ("Fore-Switch-MIB", "sigPathVPI"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxSpansUp.setStatus('current')
asxTempSensorOverTemp = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 32)).setObjects(("Fore-Switch-MIB", "envTempSensorIndex"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxTempSensorOverTemp.setStatus('current')
asxTempSensorRegularTemp = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 33)).setObjects(("Fore-Switch-MIB", "envTempSensorIndex"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxTempSensorRegularTemp.setStatus('current')
asxFabricTemperatureOverTemp = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 34)).setObjects(("Fore-Switch-MIB", "envFabricIndex"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxFabricTemperatureOverTemp.setStatus('current')
asxFabricTemperatureRegularTemp = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 35)).setObjects(("Fore-Switch-MIB", "envFabricIndex"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxFabricTemperatureRegularTemp.setStatus('current')
asxSonetLOSDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 36)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxSonetLOSDetected.setStatus('current')
asxSonetLOSCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 37)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxSonetLOSCleared.setStatus('current')
asxSonetPathLabelDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 38)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxSonetPathLabelDetected.setStatus('current')
asxSonetPathLabelCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 39)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxSonetPathLabelCleared.setStatus('current')
asxSonetLineAISDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 40)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxSonetLineAISDetected.setStatus('current')
asxSonetLineAISCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 41)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxSonetLineAISCleared.setStatus('current')
asxDS3PLCPYellowDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 46)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxDS3PLCPYellowDetected.setStatus('current')
asxDS3PLCPYellowCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 47)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxDS3PLCPYellowCleared.setStatus('current')
asxDS3PLCPLOFDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 48)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxDS3PLCPLOFDetected.setStatus('current')
asxDS3PLCPLOFCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 49)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxDS3PLCPLOFCleared.setStatus('current')
asxDS3LOFDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 50)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxDS3LOFDetected.setStatus('current')
asxDS3LOFCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 51)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxDS3LOFCleared.setStatus('current')
asxDS3AISDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 52)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxDS3AISDetected.setStatus('current')
asxDS3AISCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 53)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxDS3AISCleared.setStatus('current')
asxDS1PLCPYellowDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 60)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxDS1PLCPYellowDetected.setStatus('current')
asxDS1PLCPYellowCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 61)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxDS1PLCPYellowCleared.setStatus('current')
asxDS1PLCPLOFDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 62)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxDS1PLCPLOFDetected.setStatus('current')
asxDS1PLCPLOFCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 63)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxDS1PLCPLOFCleared.setStatus('current')
asxDS1YellowDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 64)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxDS1YellowDetected.setStatus('current')
asxDS1YellowCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 65)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxDS1YellowCleared.setStatus('current')
asxDS1AISDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 66)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxDS1AISDetected.setStatus('current')
asxDS1AISCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 67)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxDS1AISCleared.setStatus('current')
asxDS1LOSDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 68)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxDS1LOSDetected.setStatus('current')
asxDS1LOSCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 69)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxDS1LOSCleared.setStatus('current')
asxDS1LOFDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 70)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxDS1LOFDetected.setStatus('current')
asxDS1LOFCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 71)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxDS1LOFCleared.setStatus('current')
asxDS3FERFDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 74)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxDS3FERFDetected.setStatus('current')
asxDS3FERFCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 75)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxDS3FERFCleared.setStatus('current')
asxE3YellowDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 78)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxE3YellowDetected.setStatus('current')
asxE3YellowCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 79)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxE3YellowCleared.setStatus('current')
asxE3OOFDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 80)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxE3OOFDetected.setStatus('current')
asxE3OOFCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 81)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxE3OOFCleared.setStatus('current')
asxE3AtmLCDDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 82)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxE3AtmLCDDetected.setStatus('current')
asxE3AtmLCDCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 83)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxE3AtmLCDCleared.setStatus('current')
asxE3PLCPYellowDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 86)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxE3PLCPYellowDetected.setStatus('current')
asxE3PLCPYellowCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 87)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxE3PLCPYellowCleared.setStatus('current')
asxE1YellowDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 90)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxE1YellowDetected.setStatus('current')
asxE1YellowCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 91)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxE1YellowCleared.setStatus('current')
asxE1LOFDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 92)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxE1LOFDetected.setStatus('current')
asxE1LOFCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 93)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxE1LOFCleared.setStatus('current')
asxE1PLCPYellowDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 96)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxE1PLCPYellowDetected.setStatus('current')
asxE1PLCPYellowCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 97)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxE1PLCPYellowCleared.setStatus('current')
asxE1PLCPLOFDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 98)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxE1PLCPLOFDetected.setStatus('current')
asxE1PLCPLOFCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 99)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxE1PLCPLOFCleared.setStatus('current')
asxE1LOSDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 100)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxE1LOSDetected.setStatus('current')
asxE1LOSCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 101)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxE1LOSCleared.setStatus('current')
asxE1AISDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 102)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxE1AISDetected.setStatus('current')
asxE1AISCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 103)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxE1AISCleared.setStatus('current')
asxE3AISDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 104)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxE3AISDetected.setStatus('current')
asxE3AISCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 105)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxE3AISCleared.setStatus('current')
asxE3LOSDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 106)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxE3LOSDetected.setStatus('current')
asxE3LOSCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 107)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxE3LOSCleared.setStatus('current')
asxE3PLCPLOFDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 108)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxE3PLCPLOFDetected.setStatus('current')
asxE3PLCPLOFCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 109)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxE3PLCPLOFCleared.setStatus('current')
asxJ2YellowDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 112)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxJ2YellowDetected.setStatus('current')
asxJ2YellowCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 113)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxJ2YellowCleared.setStatus('current')
asxJ2AISDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 114)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxJ2AISDetected.setStatus('current')
asxJ2AISCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 115)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxJ2AISCleared.setStatus('current')
asxJ2LOSDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 116)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxJ2LOSDetected.setStatus('current')
asxJ2LOSCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 117)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxJ2LOSCleared.setStatus('current')
asxJ2LOFDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 118)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxJ2LOFDetected.setStatus('current')
asxJ2LOFCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 119)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxJ2LOFCleared.setStatus('current')
asxDS3LOSDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 120)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxDS3LOSDetected.setStatus('current')
asxDS3LOSCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 121)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxDS3LOSCleared.setStatus('current')
asxSonetLOFDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 130)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxSonetLOFDetected.setStatus('current')
asxSonetLOFCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 131)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxSonetLOFCleared.setStatus('current')
asxSonetLineRDIDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 132)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxSonetLineRDIDetected.setStatus('current')
asxSonetLineRDICleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 133)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxSonetLineRDICleared.setStatus('current')
asxSonetPathAISDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 134)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxSonetPathAISDetected.setStatus('current')
asxSonetPathAISCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 135)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxSonetPathAISCleared.setStatus('current')
asxSonetPathLOPDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 136)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxSonetPathLOPDetected.setStatus('current')
asxSonetPathLOPCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 137)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxSonetPathLOPCleared.setStatus('current')
asxSonetPathUNEQDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 138)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxSonetPathUNEQDetected.setStatus('current')
asxSonetPathUNEQCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 139)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxSonetPathUNEQCleared.setStatus('current')
asxSonetPathRDIDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 140)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxSonetPathRDIDetected.setStatus('current')
asxSonetPathRDICleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 141)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxSonetPathRDICleared.setStatus('current')
asxSonetAtmLCDDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 142)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxSonetAtmLCDDetected.setStatus('current')
asxSonetAtmLCDCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 143)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxSonetAtmLCDCleared.setStatus('current')
asxSonetAtmLineBIPDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 144)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxSonetAtmLineBIPDetected.setStatus('current')
asxSonetAtmLineBIPCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 145)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxSonetAtmLineBIPCleared.setStatus('current')
asxDS3IdleDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 160)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxDS3IdleDetected.setStatus('current')
asxDS3IdleCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 161)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxDS3IdleCleared.setStatus('current')
asxDS3AtmLCDDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 162)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxDS3AtmLCDDetected.setStatus('current')
asxDS3AtmLCDCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 163)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxDS3AtmLCDCleared.setStatus('current')
asxDS3PbitPerrDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 164)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxDS3PbitPerrDetected.setStatus('current')
asxDS3PbitPerrCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 165)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxDS3PbitPerrCleared.setStatus('current')
asxDS1PRBSDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 176)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxDS1PRBSDetected.setStatus('current')
asxDS1PRBSCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 177)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxDS1PRBSCleared.setStatus('current')
asxDS1AtmLCDDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 178)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxDS1AtmLCDDetected.setStatus('current')
asxDS1AtmLCDCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 179)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxDS1AtmLCDCleared.setStatus('current')
asxDS1CRCErrDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 180)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxDS1CRCErrDetected.setStatus('current')
asxDS1CRCErrCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 181)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxDS1CRCErrCleared.setStatus('current')
asxE3TrailChangeDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 192)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxE3TrailChangeDetected.setStatus('current')
asxE1AtmLCDDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 208)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxE1AtmLCDDetected.setStatus('current')
asxE1AtmLCDCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 209)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxE1AtmLCDCleared.setStatus('current')
asxJ2RLOCDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 224)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxJ2RLOCDetected.setStatus('current')
asxJ2RLOCCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 225)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxJ2RLOCCleared.setStatus('current')
asxJ2HBERDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 226)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxJ2HBERDetected.setStatus('current')
asxJ2HBERCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 227)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxJ2HBERCleared.setStatus('current')
asxJ2PAISDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 228)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxJ2PAISDetected.setStatus('current')
asxJ2PAISCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 229)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxJ2PAISCleared.setStatus('current')
asxJ2AtmLCDDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 230)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxJ2AtmLCDDetected.setStatus('current')
asxJ2AtmLCDCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 231)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxJ2AtmLCDCleared.setStatus('current')
asxJ2TLOCDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 232)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxJ2TLOCDetected.setStatus('current')
asxJ2TLOCCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 233)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxJ2TLOCCleared.setStatus('current')
asxTP25LOSDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 250)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxTP25LOSDetected.setStatus('current')
asxTP25LOSCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 251)).setObjects(("Fore-Switch-MIB", "hwPortName"), ("Fore-Switch-MIB", "hwPortBoard"), ("Fore-Switch-MIB", "hwPortModule"), ("Fore-Switch-MIB", "hwPortNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxTP25LOSCleared.setStatus('current')
asxOutputQueueCongested = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1024)).setObjects(("Fore-Switch-MIB", "portName"), ("Fore-Switch-MIB", "pshmemPriority"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxOutputQueueCongested.setStatus('current')
asxOutputQueueCellLoss = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1025)).setObjects(("Fore-Switch-MIB", "portName"), ("Fore-Switch-MIB", "pshmemPriority"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxOutputQueueCellLoss.setStatus('current')
asxExtendedModeViolation = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1026)).setObjects(("Fore-Switch-MIB", "moduleBoard"), ("Fore-Switch-MIB", "moduleNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxExtendedModeViolation.setStatus('current')
asxNonextendedModeWarning = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1027)).setObjects(("Fore-Switch-MIB", "moduleBoard"), ("Fore-Switch-MIB", "moduleNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxNonextendedModeWarning.setStatus('current')
crConfMemoryOflow = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1029)).setObjects(("Fore-Callrecord-MIB", "crMemoryAllocated"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: crConfMemoryOflow.setStatus('current')
crXfrPrimaryXfrFailed = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1030)).setObjects(("Fore-Callrecord-MIB", "crXfrIndex"), ("Fore-Callrecord-MIB", "crXfrPrimaryTrapStatus"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: crXfrPrimaryXfrFailed.setStatus('current')
crXfrSecondaryXfrFailed = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1031)).setObjects(("Fore-Callrecord-MIB", "crXfrIndex"), ("Fore-Callrecord-MIB", "crXfrSecondaryTrapStatus"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: crXfrSecondaryXfrFailed.setStatus('current')
crConfMemAllocFail = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1032)).setObjects(("Fore-Callrecord-MIB", "crMemoryAllocated"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: crConfMemAllocFail.setStatus('current')
crGeneralFailure = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1033)).setObjects(("Fore-Callrecord-MIB", "crXfrIndex"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: crGeneralFailure.setStatus('current')
asxDualScpSyncFailure = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1034)).setObjects(("Fore-Switch-MIB", "boardIndex"), ("Fore-Switch-MIB", "dualScpSyncState"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxDualScpSyncFailure.setStatus('current')
asxDualScpSwitchOver = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1035)).setObjects(("Fore-Switch-MIB", "boardIndex"), ("Fore-Switch-MIB", "dualScpSlot"), ("Fore-Switch-MIB", "dualScpSwitchOverTime"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxDualScpSwitchOver.setStatus('current')
asxDualScpHotSwap = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1036)).setObjects(("Fore-Switch-MIB", "boardIndex"), ("Fore-Switch-MIB", "dualScpSlot"), ("Fore-Switch-MIB", "dualScpState"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxDualScpHotSwap.setStatus('current')
asxVPAISDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1037)).setObjects(("Fore-Switch-MIB", "portName"), ("Fore-Switch-MIB", "pathPort"), ("Fore-Switch-MIB", "pathVPI"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxVPAISDetected.setStatus('current')
asxVPAISCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1038)).setObjects(("Fore-Switch-MIB", "portName"), ("Fore-Switch-MIB", "pathPort"), ("Fore-Switch-MIB", "pathVPI"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxVPAISCleared.setStatus('current')
asxVPRDIDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1039)).setObjects(("Fore-Switch-MIB", "portName"), ("Fore-Switch-MIB", "pathPort"), ("Fore-Switch-MIB", "pathVPI"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxVPRDIDetected.setStatus('current')
asxVPRDICleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1040)).setObjects(("Fore-Switch-MIB", "portName"), ("Fore-Switch-MIB", "pathPort"), ("Fore-Switch-MIB", "pathVPI"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxVPRDICleared.setStatus('current')
asxNonextendedModeViolation = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1041)).setObjects(("Fore-Switch-MIB", "moduleBoard"), ("Fore-Switch-MIB", "moduleNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxNonextendedModeViolation.setStatus('current')
asxUnsupportedNetworkModule = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1042)).setObjects(("Fore-Switch-MIB", "moduleBoard"), ("Fore-Switch-MIB", "moduleNumber"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxUnsupportedNetworkModule.setStatus('current')
asxDualScpRedundancy = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1043)).setObjects(("Fore-Switch-MIB", "boardIndex"), ("Fore-Switch-MIB", "dualScpSlot"), ("Fore-Switch-MIB", "dualScpRedundancyState"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxDualScpRedundancy.setStatus('current')
asxIpFilterViolation = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1049)).setObjects(("Fore-Adapter-MIB", "ipFilterStatsVPI"), ("Fore-Adapter-MIB", "ipFilterStatsVCI"), ("Fore-Adapter-MIB", "ipFilterStatsIfName"))
if mibBuilder.loadTexts: asxIpFilterViolation.setStatus('current')
q2931AFRejectKnown = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1053)).setObjects(("Fore-Switch-MIB", "portName"), ("Fore-Switch-MIB", "pathPort"), ("Fore-Switch-MIB", "pathVPI"), ("Fore-Switch-MIB", "portName"), ("Fore-Switch-MIB", "opathPort"), ("Fore-Switch-MIB", "opathVPI"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: q2931AFRejectKnown.setStatus('current')
q2931AFRejectUnknown = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1054)).setObjects(("Fore-Switch-MIB", "portName"), ("Fore-Switch-MIB", "pathPort"), ("Fore-Switch-MIB", "pathVPI"), ("Fore-Switch-MIB", "portName"), ("Fore-Switch-MIB", "opathPort"), ("Fore-Switch-MIB", "opathVPI"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: q2931AFRejectUnknown.setStatus('current')
q2931CreationFailure = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1061)).setObjects(("Fore-Switch-MIB", "portName"), ("Fore-Switch-MIB", "q2931AdminPort"), ("Fore-Switch-MIB", "q2931AdminVPI"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: q2931CreationFailure.setStatus('current')
asxPsCurrentDown = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1068)).setObjects(("Fore-Switch-MIB", "envPowerSupplyIndex"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxPsCurrentDown.setStatus('current')
asxPsCurrentUp = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1069)).setObjects(("Fore-Switch-MIB", "envPowerSupplyIndex"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxPsCurrentUp.setStatus('current')
asxPs5VoltDown = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1070)).setObjects(("Fore-Switch-MIB", "envPowerSupplyIndex"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxPs5VoltDown.setStatus('current')
asxPs5VoltUp = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1071)).setObjects(("Fore-Switch-MIB", "envPowerSupplyIndex"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxPs5VoltUp.setStatus('current')
asxSwitchLoginDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1072)).setObjects(("Fore-Switch-MIB", "switchCurrentUserid"), ("Fore-Switch-MIB", "switchCurrentLoginFrom"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxSwitchLoginDetected.setStatus('current')
asxSwitchLoginFailed = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1073)).setObjects(("Fore-Switch-MIB", "switchCurrentUserid"), ("Fore-Switch-MIB", "switchCurrentLoginFrom"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxSwitchLoginFailed.setStatus('current')
pnniTdbGuardbandResrvFail = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1074)).setObjects(("PNNI-MIB", "pnniNodeId"), ("HOST-RESOURCES-MIB", "hrSystemDate"), ("Fore-Switch-MIB", "numBytesFree"), ("Fore-Switch-MIB", "numBlocksFree"), ("Fore-Switch-MIB", "numBlocksAlloc"), ("Fore-Switch-MIB", "maxBlockSizeFree"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: pnniTdbGuardbandResrvFail.setStatus('current')
pnniTdbInconsistentState = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1075)).setObjects(("PNNI-MIB", "pnniNodeId"), ("HOST-RESOURCES-MIB", "hrSystemDate"), ("Fore-Switch-MIB", "numBytesFree"), ("Fore-Switch-MIB", "numBlocksFree"), ("Fore-Switch-MIB", "numBlocksAlloc"), ("Fore-Switch-MIB", "maxBlockSizeFree"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: pnniTdbInconsistentState.setStatus('current')
asxShmem2OutputQueueCongested = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1077)).setObjects(("Fore-Switch-MIB", "portName"), ("Fore-Switch-MIB", "pShmem2Priority"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxShmem2OutputQueueCongested.setStatus('current')
asxShmem2OutputQueueCellLoss = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1078)).setObjects(("Fore-Switch-MIB", "portName"), ("Fore-Switch-MIB", "pShmem2Priority"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxShmem2OutputQueueCellLoss.setStatus('current')
fabricLvl3Lookup = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1080)).setObjects(("Fore-Switch-MIB", "boardIndex"))
if mibBuilder.loadTexts: fabricLvl3Lookup.setStatus('current')
fabricCorrectedLookup = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1081)).setObjects(("Fore-Switch-MIB", "boardIndex"))
if mibBuilder.loadTexts: fabricCorrectedLookup.setStatus('current')
spvcRerouteInitiated = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1090)).setObjects(("Fore-Switch-MIB", "boardIndex"), ("Fore-Switch-MIB", "spvcSrcInPort"), ("Fore-Switch-MIB", "spvcSrcInVPI"), ("Fore-Switch-MIB", "spvcSrcInVCI"))
if mibBuilder.loadTexts: spvcRerouteInitiated.setStatus('current')
asxQ2931Down = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1091)).setObjects(("Fore-Switch-MIB", "portName"), ("Fore-Switch-MIB", "q2931AdminPort"), ("Fore-Switch-MIB", "q2931AdminVPI"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxQ2931Down.setStatus('current')
asxQ2931Up = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1092)).setObjects(("Fore-Switch-MIB", "portName"), ("Fore-Switch-MIB", "q2931AdminPort"), ("Fore-Switch-MIB", "q2931AdminVPI"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxQ2931Up.setStatus('current')
asxFabricDown = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1093)).setObjects(("Fore-Switch-MIB", "boardIndex"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxFabricDown.setStatus('current')
asxFabricUp = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1094)).setObjects(("Fore-Switch-MIB", "boardIndex"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxFabricUp.setStatus('current')
asxQ2931CallClearing = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 1095)).setObjects(("Fore-Switch-MIB", "portName"), ("Fore-Switch-MIB", "q2931AdminPort"), ("Fore-Switch-MIB", "q2931AdminVPI"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxQ2931CallClearing.setStatus('current')
pnniSpvccDown = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 2004)).setObjects(("Fore-Switch-MIB", "boardIndex"), ("Fore-Switch-MIB", "pnniSpvcSrcCallingPort"), ("Fore-Switch-MIB", "pnniSpvcSrcCallingVPI"), ("Fore-Switch-MIB", "pnniSpvcSrcCallingVCI"), ("Fore-Switch-MIB", "pnniSpvcSrcDownReason"), ("Fore-Switch-MIB", "pnniSpvcSrcName"), ("Fore-Switch-MIB", "pnniSpvcSrcLastFailCause"), ("Fore-Switch-MIB", "pnniSpvcSrcLastLocation"))
if mibBuilder.loadTexts: pnniSpvccDown.setStatus('current')
pnniSpvccUp = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 2005)).setObjects(("Fore-Switch-MIB", "boardIndex"), ("Fore-Switch-MIB", "pnniSpvcSrcCallingPort"), ("Fore-Switch-MIB", "pnniSpvcSrcCallingVPI"), ("Fore-Switch-MIB", "pnniSpvcSrcCallingVCI"), ("Fore-Switch-MIB", "pnniSpvcSrcOldRouteCost"), ("Fore-Switch-MIB", "pnniSpvcSrcName"), ("Fore-Switch-MIB", "pnniSpvcSrcRouteCost"))
if mibBuilder.loadTexts: pnniSpvccUp.setStatus('current')
pnniSpvccFail = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 2006)).setObjects(("Fore-Switch-MIB", "boardIndex"), ("Fore-Switch-MIB", "pnniSpvcSrcCallingPort"), ("Fore-Switch-MIB", "pnniSpvcSrcCallingVPI"), ("Fore-Switch-MIB", "pnniSpvcSrcCallingVCI"), ("Fore-Switch-MIB", "pnniSpvcSrcDownReason"), ("Fore-Switch-MIB", "pnniSpvcSrcName"), ("Fore-Switch-MIB", "pnniSpvcSrcLastFailCause"), ("Fore-Switch-MIB", "pnniSpvcSrcLastLocation"))
if mibBuilder.loadTexts: pnniSpvccFail.setStatus('current')
pnniSpvpcDown = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 2007)).setObjects(("Fore-Switch-MIB", "boardIndex"), ("Fore-Switch-MIB", "pnniSpvpcSrcCallingPort"), ("Fore-Switch-MIB", "pnniSpvpcSrcCallingVPI"), ("Fore-Switch-MIB", "pnniSpvpcSrcDownReason"), ("Fore-Switch-MIB", "pnniSpvpcSrcName"), ("Fore-Switch-MIB", "pnniSpvpcSrcLastFailCause"), ("Fore-Switch-MIB", "pnniSpvpcSrcLastLocation"))
if mibBuilder.loadTexts: pnniSpvpcDown.setStatus('current')
pnniSpvpcUp = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 2008)).setObjects(("Fore-Switch-MIB", "boardIndex"), ("Fore-Switch-MIB", "pnniSpvpcSrcCallingPort"), ("Fore-Switch-MIB", "pnniSpvpcSrcCallingVPI"), ("Fore-Switch-MIB", "pnniSpvpcSrcOldRouteCost"), ("Fore-Switch-MIB", "pnniSpvpcSrcName"), ("Fore-Switch-MIB", "pnniSpvpcSrcRouteCost"))
if mibBuilder.loadTexts: pnniSpvpcUp.setStatus('current')
pnniSpvpcFail = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 2009)).setObjects(("Fore-Switch-MIB", "boardIndex"), ("Fore-Switch-MIB", "pnniSpvpcSrcCallingPort"), ("Fore-Switch-MIB", "pnniSpvpcSrcCallingVPI"), ("Fore-Switch-MIB", "pnniSpvpcSrcDownReason"), ("Fore-Switch-MIB", "pnniSpvpcSrcName"), ("Fore-Switch-MIB", "pnniSpvpcSrcLastFailCause"), ("Fore-Switch-MIB", "pnniSpvpcSrcLastLocation"))
if mibBuilder.loadTexts: pnniSpvpcFail.setStatus('current')
asxPortCardDown = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 2010)).setObjects(("Fore-Switch-MIB", "portCardName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxPortCardDown.setStatus('current')
asxPortCardUp = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 2011)).setObjects(("Fore-Switch-MIB", "portCardName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxPortCardUp.setStatus('current')
asxServiceCategoryOutputQueueCongested = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 2013)).setObjects(("Fore-Switch-MIB", "portName"), ("Fore-Switch-MIB", "serviceCategoryName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxServiceCategoryOutputQueueCongested.setStatus('current')
asxServiceCategoryOutputQueueCellLoss = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 2014)).setObjects(("Fore-Switch-MIB", "portName"), ("Fore-Switch-MIB", "serviceCategoryName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxServiceCategoryOutputQueueCellLoss.setStatus('current')
pnniNormalToOverloadTransition = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 2015)).setObjects(("PNNI-MIB", "pnniNodeId"), ("HOST-RESOURCES-MIB", "hrSystemDate"), ("Fore-Switch-MIB", "numBytesFree"), ("Fore-Switch-MIB", "numBlocksFree"), ("Fore-Switch-MIB", "numBlocksAlloc"), ("Fore-Switch-MIB", "maxBlockSizeFree"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: pnniNormalToOverloadTransition.setStatus('current')
pnniOverloadToNormalTransition = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 2016)).setObjects(("PNNI-MIB", "pnniNodeId"), ("HOST-RESOURCES-MIB", "hrSystemDate"), ("Fore-Switch-MIB", "numBytesFree"), ("Fore-Switch-MIB", "numBlocksFree"), ("Fore-Switch-MIB", "numBlocksAlloc"), ("Fore-Switch-MIB", "maxBlockSizeFree"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: pnniOverloadToNormalTransition.setStatus('current')
syslogFacility = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 22, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("daemon", 0), ("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogFacility.setStatus('current')
syslogConsoleState = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 22, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogConsoleState.setStatus('current')
syslogDestinationTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 22, 3), )
if mibBuilder.loadTexts: syslogDestinationTable.setStatus('current')
syslogDestinationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 22, 3, 1), ).setIndexNames((0, "Fore-Switch-MIB", "syslogDestinationHost"))
if mibBuilder.loadTexts: syslogDestinationEntry.setStatus('current')
syslogDestinationHost = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 22, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: syslogDestinationHost.setStatus('current')
syslogDestinationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 1, 22, 3, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogDestinationStatus.setStatus('current')
pnniPmpRerouteInitiated = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 2020)).setObjects(("Fore-Switch-MIB", "pnniPmpSpvccSrcRootPort"), ("Fore-Switch-MIB", "pnniPmpSpvccSrcRootVPI"), ("Fore-Switch-MIB", "pnniPmpSpvccSrcRootVCI"))
if mibBuilder.loadTexts: pnniPmpRerouteInitiated.setStatus('current')
pnniPmpSpvcUp = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 2021)).setObjects(("Fore-Switch-MIB", "pnniPmpSpvccSrcRootPort"), ("Fore-Switch-MIB", "pnniPmpSpvccSrcRootVPI"), ("Fore-Switch-MIB", "pnniPmpSpvccSrcRootVCI"), ("Fore-Switch-MIB", "pnniPmpSpvccSrcPartyName"), ("Fore-Switch-MIB", "pnniPmpSpvccSrcPartyRouteCost"))
if mibBuilder.loadTexts: pnniPmpSpvcUp.setStatus('current')
pnniPmpSpvcDown = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 2022)).setObjects(("Fore-Switch-MIB", "pnniPmpSpvccSrcRootPort"), ("Fore-Switch-MIB", "pnniPmpSpvccSrcRootVPI"), ("Fore-Switch-MIB", "pnniPmpSpvccSrcRootVCI"), ("Fore-Switch-MIB", "pnniPmpSpvccSrcPartyDownReason"), ("Fore-Switch-MIB", "pnniPmpSpvccSrcPartyName"), ("Fore-Switch-MIB", "pnniPmpSpvccSrcPartyLastFailCause"), ("Fore-Switch-MIB", "pnniPmpSpvccSrcPartyLastLocation"))
if mibBuilder.loadTexts: pnniPmpSpvcDown.setStatus('current')
pnniPmpSpvcFail = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 2023)).setObjects(("Fore-Switch-MIB", "pnniPmpSpvccSrcRootPort"), ("Fore-Switch-MIB", "pnniPmpSpvccSrcRootVPI"), ("Fore-Switch-MIB", "pnniPmpSpvccSrcRootVCI"), ("Fore-Switch-MIB", "pnniPmpSpvccSrcPartyDownReason"), ("Fore-Switch-MIB", "pnniPmpSpvccSrcPartyName"), ("Fore-Switch-MIB", "pnniPmpSpvccSrcPartyLastFailCause"), ("Fore-Switch-MIB", "pnniPmpSpvccSrcPartyLastLocation"))
if mibBuilder.loadTexts: pnniPmpSpvcFail.setStatus('current')
pnniSpvxRGroupSwover = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 2024)).setObjects(("Fore-Switch-MIB", "pnniSpvxcRGroupSwitchoverCmd"), ("Fore-Switch-MIB", "pnniSpvxcRGroupActivePort"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: pnniSpvxRGroupSwover.setStatus('current')
asxSVXCPStateTransferFailed = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 2025)).setObjects(("Fore-Switch-MIB", "dualScpSlot"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxSVXCPStateTransferFailed.setStatus('current')
asxSVXCPStateTransferRestarted = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 2026)).setObjects(("Fore-Switch-MIB", "dualScpSlot"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxSVXCPStateTransferRestarted.setStatus('current')
asxSVXCPStateDroppedCall = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 0, 2027)).setObjects(("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: asxSVXCPStateDroppedCall.setStatus('current')
mibBuilder.exportSymbols("Fore-Switch-MIB", portShmem3ConfTable=portShmem3ConfTable, pathShmem3Entry=pathShmem3Entry, asxDS3PLCPYellowDetected=asxDS3PLCPYellowDetected, shmem2ConfName=shmem2ConfName, genericOutputPortConfPrioName=genericOutputPortConfPrioName, opathPort=opathPort, asxSonetLOSCleared=asxSonetLOSCleared, etherChipSet=etherChipSet, asxE3LOSDetected=asxE3LOSDetected, btmPerPriorityBoard=btmPerPriorityBoard, asxE1YellowCleared=asxE1YellowCleared, oamGeneratingChannelTable=oamGeneratingChannelTable, mbufsDrops=mbufsDrops, nShmem3ConfEfciOff=nShmem3ConfEfciOff, asxDS3PLCPLOFCleared=asxDS3PLCPLOFCleared, nShmem2ConfEfciOff=nShmem2ConfEfciOff, spvcRerouteInitiated=spvcRerouteInitiated, pathExtNrtVbrMetric=pathExtNrtVbrMetric, pnniSpvpcSrcCalledVPVCSel=pnniSpvpcSrcCalledVPVCSel, pnniPmpSpvccDestPartyTable=pnniPmpSpvccDestPartyTable, asxE3AtmLCDCleared=asxE3AtmLCDCleared, nShmem2ConfEfciOn=nShmem2ConfEfciOn, spvcSrcDestSwitchAddr=spvcSrcDestSwitchAddr, pnniSpvcSrcEntry=pnniSpvcSrcEntry, numberOfModules=numberOfModules, sigPathSigReservedBW=sigPathSigReservedBW, genericOutputPortConfTable=genericOutputPortConfTable, portOutputDelayMode=portOutputDelayMode, pathExtCbrMetric=pathExtCbrMetric, dualScpSVXCPdroppedCallCount=dualScpSVXCPdroppedCallCount, outputBufferTable=outputBufferTable, q2931AFTemplateEntry=q2931AFTemplateEntry, cbrctIdleMask=cbrctIdleMask, asxE3AISDetected=asxE3AISDetected, q2931AFLookupSrcVPI=q2931AFLookupSrcVPI, switchCounterResetTime=switchCounterResetTime, mbufsSoOptsAlloc=mbufsSoOptsAlloc, pnniSpvpcSrcRouteCost=pnniSpvpcSrcRouteCost, asxSVXCPStateTransferFailed=asxSVXCPStateTransferFailed, pnniSpvxcRGroupRowStatus=pnniSpvxcRGroupRowStatus, ppShmem2ClpThreshold=ppShmem2ClpThreshold, sigPathOperStatus=sigPathOperStatus, pShmem2ClpThreshforABR=pShmem2ClpThreshforABR, pnniSpvpcSrcQosIndex=pnniSpvpcSrcQosIndex, swBoardTable=swBoardTable, maxBlockSizeFree=maxBlockSizeFree, envCpuMACAddress=envCpuMACAddress, softwareVersion=softwareVersion, moduleNumber=moduleNumber, nShmem3ConfAltCLP01Threshold=nShmem3ConfAltCLP01Threshold, pnniSpvpcRerouteThreshold=pnniSpvpcRerouteThreshold, vpGroupVPI=vpGroupVPI, vpShmem2TotalLostCells=vpShmem2TotalLostCells, chanQosPerPacketPolicing=chanQosPerPacketPolicing, numberOfBoards=numberOfBoards, switchHttpServer=switchHttpServer, pnniPmpSpvccDestPartyStatus=pnniPmpSpvccDestPartyStatus, portTransmittedCells=portTransmittedCells, asxPsOutputDown=asxPsOutputDown, boardTrafficManagementPerPriorityEntry=boardTrafficManagementPerPriorityEntry, netmodTimingGroup=netmodTimingGroup, hwPortOperStatus=hwPortOperStatus, asxVPAISDetected=asxVPAISDetected, pathCACErrors=pathCACErrors, pShmem2Priority=pShmem2Priority, pnniSpvcDestTable=pnniSpvcDestTable, asxDS3LOFDetected=asxDS3LOFDetected, q2931SupplementaryServicesStatus=q2931SupplementaryServicesStatus, pnniSpvcSrcDtlWeight4=pnniSpvcSrcDtlWeight4, nsapStaticRouteEpdSupport=nsapStaticRouteEpdSupport, serviceCategoryName=serviceCategoryName, envPowerSupplyOutputState=envPowerSupplyOutputState, asxLinkUp=asxLinkUp, asxPortCardUp=asxPortCardUp, shmem3TableMemorySize=shmem3TableMemorySize, spvcDestEntryStatus=spvcDestEntryStatus, nShmem2Module=nShmem2Module, q2931E164Address=q2931E164Address, dualScpGroup=dualScpGroup, spvcDestTable=spvcDestTable, spvcDestNumberOfSPVCs=spvcDestNumberOfSPVCs, nShmem3ConfVcCLP1ForVBR=nShmem3ConfVcCLP1ForVBR, asxSonetPathLOPDetected=asxSonetPathLOPDetected, envMgmtBoardRevision=envMgmtBoardRevision, asxSonetLineRDIDetected=asxSonetLineRDIDetected, pShmem3QsizeforABR=pShmem3QsizeforABR, pShmem3TxCells=pShmem3TxCells, perCallDbgFilterFlavor=perCallDbgFilterFlavor, q2931AFLastFailureGroup=q2931AFLastFailureGroup, hdcompEntry=hdcompEntry, syslogDestinationTable=syslogDestinationTable, q2931AdminConfigType=q2931AdminConfigType, snmpConfGroup=snmpConfGroup, asxSonetLOFCleared=asxSonetLOFCleared, pnniPmpSpvccDestRootIndex=pnniPmpSpvccDestRootIndex, spvcSrcEntryStatus=spvcSrcEntryStatus, vpGroupEntryStatus=vpGroupEntryStatus, pnniSpvcDestIndex=pnniSpvcDestIndex, crConfMemoryOflow=crConfMemoryOflow, sigPathRemoteIpAddress=sigPathRemoteIpAddress, syslogGroup=syslogGroup, portNumPathsIn=portNumPathsIn, nShmem2TableMemorySize=nShmem2TableMemorySize, genericPortGroupEfciOff=genericPortGroupEfciOff, dualScpConfTable=dualScpConfTable, pnniSpvcSrcPriority=pnniSpvcSrcPriority, swBoardAtmAddress=swBoardAtmAddress, proxyDirGroupEntry=proxyDirGroupEntry, q2931AdminEntryStatus=q2931AdminEntryStatus, swBoardDebugMode=swBoardDebugMode, nsapNetworkPrefixTable=nsapNetworkPrefixTable, nsapTopoLinkSrcMask=nsapTopoLinkSrcMask, sigPathPolicingAction=sigPathPolicingAction, portOutputSetupErrors=portOutputSetupErrors, q2931PeerPort=q2931PeerPort, btPrimaryClockOperStatus=btPrimaryClockOperStatus, q2931PnniRccVci=q2931PnniRccVci, proxyDirMapIndex=proxyDirMapIndex, asxNetModuleDown=asxNetModuleDown, portCardIndex=portCardIndex, pathrCells=pathrCells, portEntry=portEntry, ifIndexMapNetmod=ifIndexMapNetmod, portInputPolicingStatus=portInputPolicingStatus, pnniSpvpcDestAssignedVPI=pnniSpvpcDestAssignedVPI, pnniPmpSpvccSrcPartyLastFailCause=pnniPmpSpvccSrcPartyLastFailCause, envFanBanksTable=envFanBanksTable, opathCACErrors=opathCACErrors, genericOutputPortStatsEntry=genericOutputPortStatsEntry, pshmemEfciOnABR=pshmemEfciOnABR, pShmem2ConfModule=pShmem2ConfModule, sigPathEntry=sigPathEntry, pnniSpvcSrcCalledAssignedVPI=pnniSpvcSrcCalledAssignedVPI, ppShmem2ConfBoard=ppShmem2ConfBoard, pnniPmpSpvccSrcRootRowStatus=pnniPmpSpvccSrcRootRowStatus, asxDS3AISCleared=asxDS3AISCleared, q2931AdminIncomingNSAPFilterIndex=q2931AdminIncomingNSAPFilterIndex, appModulePanicAction=appModulePanicAction, pnniSpvxcRGroupState=pnniSpvxcRGroupState, pnniSpvpcSrcPriority=pnniSpvpcSrcPriority, opathRejectedCells=opathRejectedCells, upcContractSchedMode=upcContractSchedMode, q2931SubaddressingAdminStatus=q2931SubaddressingAdminStatus, chanrInputVCI=chanrInputVCI, numberOfLinks=numberOfLinks, utilization=utilization, q2931E164AddrResEntry=q2931E164AddrResEntry, switchPolicingAction=switchPolicingAction, channelEntry=channelEntry, asxDS1PLCPLOFDetected=asxDS1PLCPLOFDetected, nsapStaticRouteAbrSupport=nsapStaticRouteAbrSupport, portTable=portTable, pnniSpvxcRGroupPacingNumber=pnniSpvxcRGroupPacingNumber, q2931AFLookupSrcPort=q2931AFLookupSrcPort, pnniSpvcSrcDtlIndex1=pnniSpvcSrcDtlIndex1, mbufsRtableAlloc=mbufsRtableAlloc, genericOutputPortStatsPrio=genericOutputPortStatsPrio, genericOutputPortStatsModule=genericOutputPortStatsModule, switchATMLayerOAM=switchATMLayerOAM, chanrOutputPort=chanrOutputPort, softwareVersionText=softwareVersionText, pnniSpvxcRGroupSecondaryPort=pnniSpvxcRGroupSecondaryPort, portGroup=portGroup, spvcDestUpTime=spvcDestUpTime, asxDS1LOFDetected=asxDS1LOFDetected, portShmem2ConfEntry=portShmem2ConfEntry, asxOutputQueueCellLoss=asxOutputQueueCellLoss, pnniSpvcSrcAutoDtlStatus=pnniSpvcSrcAutoDtlStatus, portShmem3Group=portShmem3Group, nshmemCurrentUcastConnections=nshmemCurrentUcastConnections, spvcDestAllocBandwidth=spvcDestAllocBandwidth, q2931NPCallState=q2931NPCallState, vcShmem3IntentionalLostCells=vcShmem3IntentionalLostCells, pnniNormalToOverloadTransition=pnniNormalToOverloadTransition, syncStatusMsgGroup=syncStatusMsgGroup, spvcSrcSwitchAddr=spvcSrcSwitchAddr, q2931AdminStatus=q2931AdminStatus, pnniSpvccUp=pnniSpvccUp, pnniSpvcSrcRerouteStatus=pnniSpvcSrcRerouteStatus, q2931StatsPort=q2931StatsPort, asxDS3AtmLCDDetected=asxDS3AtmLCDDetected, nsapTopoLinkSrcVpi=nsapTopoLinkSrcVpi, pnniPmpSpvccSrcPartyFtDtlIndex=pnniPmpSpvccSrcPartyFtDtlIndex, pnniPmpSpvccSrcPartyAssignedVCI=pnniPmpSpvccSrcPartyAssignedVCI, portCardHardwareConf=portCardHardwareConf, pnniSpvpcSrcDownReason=pnniSpvpcSrcDownReason, q2931E164NsapMask=q2931E164NsapMask, nsapStaticRouteAddress=nsapStaticRouteAddress, nsapTopoLinkUbrEstimatedBandwidth=nsapTopoLinkUbrEstimatedBandwidth, upcContractName=upcContractName, pnniOverloadToNormalTransition=pnniOverloadToNormalTransition, dualScpSVXCPStateSyncPercent=dualScpSVXCPStateSyncPercent, snmpWarmStart=snmpWarmStart, pShmem2QsizeforCBR=pShmem2QsizeforCBR, portShmem3ConfEntry=portShmem3ConfEntry, chanStatus=chanStatus, asxSonetPathUNEQCleared=asxSonetPathUNEQCleared, pathrAllocBandwidth=pathrAllocBandwidth, opathExtCbrMetric=opathExtCbrMetric, envTempSensorState=envTempSensorState, sbprServerAddress1=sbprServerAddress1, vcShmem3OutputVPI=vcShmem3OutputVPI, pnniTdbGuardbandResrvFail=pnniTdbGuardbandResrvFail, switchDebounceEntry=switchDebounceEntry, vmtVpciMapListStatus=vmtVpciMapListStatus, q2931AdminIEFilter=q2931AdminIEFilter, nsapStaticRouteCost=nsapStaticRouteCost, genericPortGroupEfciOn=genericPortGroupEfciOn, mbufsPcbAlloc=mbufsPcbAlloc, pnniSpvpcSrcAutoDtlStatus=pnniSpvpcSrcAutoDtlStatus, pshmemQsizeforVBR=pshmemQsizeforVBR, pnniSpvcSrcCallingVPI=pnniSpvcSrcCallingVPI, chanSigProtocol=chanSigProtocol, nsapNetworkPrefixStatus=nsapNetworkPrefixStatus, q2931OperStatus=q2931OperStatus, ftPnniDTLEntryIndex=ftPnniDTLEntryIndex, tempGroup=tempGroup, upcContractPCR0=upcContractPCR0, moduleEntry=moduleEntry, pnniSpvcDestTimingReq=pnniSpvcDestTimingReq, vcShmem2OutputVPI=vcShmem2OutputVPI, opathChannelSchedVPI=opathChannelSchedVPI, nshmemCurrentMcastConnections=nshmemCurrentMcastConnections, reverseChannelRouteTable=reverseChannelRouteTable, mcastSpaceNumConn=mcastSpaceNumConn, genericOutputPortConfPrioClp01Threshold=genericOutputPortConfPrioClp01Threshold, vpShmem3OutputVPI=vpShmem3OutputVPI, switchSecondaryClock=switchSecondaryClock, obufBoard=obufBoard, pnniPmpSpvccSrcPartyRerouteStatus=pnniPmpSpvccSrcPartyRerouteStatus, pnniPmpSpvccSrcPartyName=pnniPmpSpvccSrcPartyName, netmodShmem2Entry=netmodShmem2Entry, q2931AFLastFailureDirection=q2931AFLastFailureDirection, cbrctIdleIntPeriod=cbrctIdleIntPeriod, pnniPmpSpvccDestRootSusceptClip=pnniPmpSpvccDestRootSusceptClip, shmemConfTable=shmemConfTable, switchCallPresOperStatus=switchCallPresOperStatus, q2931ConnectedPAddressRestriction=q2931ConnectedPAddressRestriction, perCallDbgFilterGroup=perCallDbgFilterGroup, pnniSpvcSrcQosIndex=pnniSpvcSrcQosIndex, asxAtmIfTable=asxAtmIfTable, q2931AFLookupDstNsap=q2931AFLookupDstNsap, pnniSpvcDestCallingAtmAddr=pnniSpvcDestCallingAtmAddr, q2931AFLookupResult=q2931AFLookupResult, shmem3UcastConnections=shmem3UcastConnections, asxJ2LOFCleared=asxJ2LOFCleared, pathUsedBandwidth=pathUsedBandwidth, q2931E164VPI=q2931E164VPI, hwPortModel=hwPortModel, chanUpcContract=chanUpcContract, vpShmem3TransmittedPackets=vpShmem3TransmittedPackets, moduleHwMajorRev=moduleHwMajorRev, q2931NPCallQosIndex=q2931NPCallQosIndex, appModuleIndex=appModuleIndex)
mibBuilder.exportSymbols("Fore-Switch-MIB", q2931SSCOPOperStatus=q2931SSCOPOperStatus, pnniPmpSpvccDestPartyIndex=pnniPmpSpvccDestPartyIndex, oamGeneratingChannelCells=oamGeneratingChannelCells, pShmem2Port=pShmem2Port, vcShmem3TransmittedPackets=vcShmem3TransmittedPackets, portTime=portTime, chanrInputVPI=chanrInputVPI, chanCDV=chanCDV, procUtilMinLoadLastUpdate=procUtilMinLoadLastUpdate, hwPortLEDModel=hwPortLEDModel, hwPortNumber=hwPortNumber, moduleUptime=moduleUptime, mbufsHtableAlloc=mbufsHtableAlloc, q2931AFLastFailureTemplateIndex=q2931AFLastFailureTemplateIndex, q2931AFFilterTListStatus=q2931AFFilterTListStatus, mcastSpaceEntry=mcastSpaceEntry, confTopoMinThresh=confTopoMinThresh, vpGroupIndex=vpGroupIndex, asxE3TrailChangeDetected=asxE3TrailChangeDetected, envNumberOfCPUs=envNumberOfCPUs, confTopoStaticUpdateInterval=confTopoStaticUpdateInterval, hwPortOverflows=hwPortOverflows, crXfrPrimaryXfrFailed=crXfrPrimaryXfrFailed, q2931AdminFtPnniTermCost=q2931AdminFtPnniTermCost, switchCurrentLoginFrom=switchCurrentLoginFrom, shmem3ConfName=shmem3ConfName, portUBRTagging=portUBRTagging, genericOutputPortStatsAtmif=genericOutputPortStatsAtmif, asxE1LOFCleared=asxE1LOFCleared, linkCapacity=linkCapacity, pnniSpvcDestEntry=pnniSpvcDestEntry, switchDebounceName=switchDebounceName, pshmemClpThreshforABR=pshmemClpThreshforABR, q2931E164AddrResStatus=q2931E164AddrResStatus, chanVPI=chanVPI, q2931AdminNativeE164Address=q2931AdminNativeE164Address, dualScpResetStandbyScp=dualScpResetStandbyScp, portPPPolicingCBR=portPPPolicingCBR, asxNetModuleUp=asxNetModuleUp, pathExtQosMetricIndex=pathExtQosMetricIndex, vmtVpciMapListEntry=vmtVpciMapListEntry, sigPathVPI=sigPathVPI, netmodTimingEntry=netmodTimingEntry, numBytesFree=numBytesFree, maxChannels=maxChannels, opathRtVbrBufferOverb=opathRtVbrBufferOverb, dualScpState=dualScpState, sigPathVCCs=sigPathVCCs, mbufUtilGroup=mbufUtilGroup, pShmem3RateLimit=pShmem3RateLimit, envMgmtBoardType=envMgmtBoardType, q2931E164Port=q2931E164Port, nShmem2CurrentCellsBuffers=nShmem2CurrentCellsBuffers, sigPathTable=sigPathTable, pnniSpvcRerouteThreshold=pnniSpvcRerouteThreshold, q2931AdminMaxVPI=q2931AdminMaxVPI, snmpAgentEntry=snmpAgentEntry, sigPathVCI=sigPathVCI, portName=portName, ftPnniDTLStatus=ftPnniDTLStatus, opathVbrOverbooking=opathVbrOverbooking, asxSonetPathRDICleared=asxSonetPathRDICleared, asxOutputQueueCongested=asxOutputQueueCongested, nGenericShmemModule=nGenericShmemModule, linkEntry=linkEntry, asxDualScpRedundancy=asxDualScpRedundancy, shmem3ConfEntry=shmem3ConfEntry, pnniPmpSpvccDestRootPort=pnniPmpSpvccDestRootPort, q2931ClearOnCarrierLoss=q2931ClearOnCarrierLoss, pnniSpvcSrcName=pnniSpvcSrcName, pnniSpvpcDestCallingAtmAddr=pnniSpvpcDestCallingAtmAddr, vmtVpciMapListIndex=vmtVpciMapListIndex, nsapStaticRouteVPI=nsapStaticRouteVPI, envFanBankSerialNumber=envFanBankSerialNumber, nGenericShmemCurrentUcastConnections=nGenericShmemCurrentUcastConnections, asxJ2AtmLCDDetected=asxJ2AtmLCDDetected, swAlarmMinorRelayState=swAlarmMinorRelayState, pShmem2ConfPort=pShmem2ConfPort, moduleState=moduleState, vmtVpciMapGroupEntry=vmtVpciMapGroupEntry, q2931AFLookupTable=q2931AFLookupTable, pnniPmpSpvccDestRootTable=pnniPmpSpvccDestRootTable, procUtilLastUpdate=procUtilLastUpdate, swBoardNsapPrefix=swBoardNsapPrefix, vcShmem3OutputVCI=vcShmem3OutputVCI, genericPortGroupPrioIndex=genericPortGroupPrioIndex, pathVCIErrors=pathVCIErrors, portInputMaxctd=portInputMaxctd, q2931AFLastFailureSrcPort=q2931AFLastFailureSrcPort, q2931AdminAVPresentation=q2931AdminAVPresentation, portNrtVbrOverbooking=portNrtVbrOverbooking, pnniPmpSpvccSrcRootVCI=pnniPmpSpvccSrcRootVCI, swBoardLinkTable=swBoardLinkTable, asxSonetPathLabelDetected=asxSonetPathLabelDetected, opathChannelSchedSchedOverride=opathChannelSchedSchedOverride, asxPs5VoltDown=asxPs5VoltDown, asxSwitchLoginFailed=asxSwitchLoginFailed, pathShmem2Table=pathShmem2Table, pShmem3Board=pShmem3Board, swBoardFingerMode=swBoardFingerMode, confTopoFtPnniForeArea=confTopoFtPnniForeArea, pnniPmpSpvccSrcRootNumberOfParties=pnniPmpSpvccSrcRootNumberOfParties, pShmem3Port=pShmem3Port, dualScpConfEntry=dualScpConfEntry, ochanStatsLostPackets=ochanStatsLostPackets, fabricCorrectedLookup=fabricCorrectedLookup, q2931NPCallBckUpcKey=q2931NPCallBckUpcKey, asxAtmIfName=asxAtmIfName, hwPortEntry=hwPortEntry, netmodGenericShmemCustomBCSTable=netmodGenericShmemCustomBCSTable, dualScpManualSwitchOver=dualScpManualSwitchOver, revChanrSigProtocol=revChanrSigProtocol, dualScpNumSyncRequests=dualScpNumSyncRequests, pnniPmpSpvccDestRootVPI=pnniPmpSpvccDestRootVPI, chanQosIsAAL5=chanQosIsAAL5, hwPortIfIndex=hwPortIfIndex, spvcSrcSpvcId=spvcSrcSpvcId, mbufsFreeAlloc=mbufsFreeAlloc, asxShmem2OutputQueueCongested=asxShmem2OutputQueueCongested, pathEntry=pathEntry, asxServiceCategoryOutputQueueCongested=asxServiceCategoryOutputQueueCongested, sigPathClsReceivedMessages=sigPathClsReceivedMessages, pShmem2LostCells=pShmem2LostCells, opathStatsLostCells=opathStatsLostCells, pathSetupErrors=pathSetupErrors, nsapNetworkPrefixVPI=nsapNetworkPrefixVPI, q2931LayerGroup=q2931LayerGroup, crGeneralFailure=crGeneralFailure, nShmem2ConfSharedMemory=nShmem2ConfSharedMemory, nsapTopoBoard=nsapTopoBoard, asxJ2YellowCleared=asxJ2YellowCleared, envPowerSupplyCurrentState=envPowerSupplyCurrentState, pShmem3Clp01ThreshforUBR=pShmem3Clp01ThreshforUBR, oamReceivedPathAISCells=oamReceivedPathAISCells, pnniPmpSpvccSrcRootSecondaryVCI=pnniPmpSpvccSrcRootSecondaryVCI, asxServiceCategoryOutputQueueCellLoss=asxServiceCategoryOutputQueueCellLoss, asxLinkDown=asxLinkDown, upcContractMCR=upcContractMCR, moduleName=moduleName, shmem=shmem, q2931OutputRccUpc=q2931OutputRccUpc, asxE1PLCPYellowCleared=asxE1PLCPYellowCleared, envCPUsTable=envCPUsTable, envFabricEntry=envFabricEntry, procUtilsNumMallocPart=procUtilsNumMallocPart, envMaxNumberOfCPUs=envMaxNumberOfCPUs, serviceCategoryTable=serviceCategoryTable, ntExportClockOperStatus=ntExportClockOperStatus, q2931CallsRejections=q2931CallsRejections, confTopoFtPnniForeLevel=confTopoFtPnniForeLevel, envFabricAlarmResetTemperature=envFabricAlarmResetTemperature, asxE1PLCPLOFCleared=asxE1PLCPLOFCleared, q2931AFStatsTable=q2931AFStatsTable, q2931AFLookupIndex=q2931AFLookupIndex, proxyDirMapVPCI=proxyDirMapVPCI, portShmem3Table=portShmem3Table, cbrctConfEntry=cbrctConfEntry, pnniSpvpcSrcBckUpcKey=pnniSpvpcSrcBckUpcKey, envFanBankRevision=envFanBankRevision, pnniSpvcDestStatus=pnniSpvcDestStatus, nShmem3ConfVcCLP1ForABR=nShmem3ConfVcCLP1ForABR, fabricGroup=fabricGroup, q2931NPCallCallingDomain=q2931NPCallCallingDomain, portCardTable=portCardTable, hwPortRxSyncLED=hwPortRxSyncLED, confTopoPeerGroupMask=confTopoPeerGroupMask, pnniPmpSpvcFail=pnniPmpSpvcFail, pnniPmpSpvccSrcRootPort=pnniPmpSpvccSrcRootPort, ifIndexMapIndex=ifIndexMapIndex, sigPathStatsEntry=sigPathStatsEntry, q2931AFTemplateSrcNsapMask=q2931AFTemplateSrcNsapMask, chanQosMBS=chanQosMBS, q2931AFTemplateDstNsap=q2931AFTemplateDstNsap, portShmemConfEntry=portShmemConfEntry, swBoardTopoNumberOfLinks=swBoardTopoNumberOfLinks, nGenericShmemBoard=nGenericShmemBoard, asxDS3FERFDetected=asxDS3FERFDetected, portManagementStatus=portManagementStatus, dualScpSVXCPStateTransferFailed=dualScpSVXCPStateTransferFailed, hwPortAdminStatus=hwPortAdminStatus, pnniSpvcDestUpTime=pnniSpvcDestUpTime, q2931NPCallFwdUpcKey=q2931NPCallFwdUpcKey, vcShmem2TransmittedCells=vcShmem2TransmittedCells, pnniSpvcSrcRouteCost=pnniSpvcSrcRouteCost, ntSecondaryExportClock=ntSecondaryExportClock, pnniSpvcDestCallingPort=pnniSpvcDestCallingPort, channelGroup=channelGroup, confTopoSwitchPrefixMask=confTopoSwitchPrefixMask, pnniPmpSpvccDestRootEntry=pnniPmpSpvccDestRootEntry, pnniSpvcSrcBckQoSClass=pnniSpvcSrcBckQoSClass, pnniSpvxcRGroupPrimaryPort=pnniSpvxcRGroupPrimaryPort, shmem2CellsBuffers=shmem2CellsBuffers, pathExtGroup=pathExtGroup, oamReceivedPathEntry=oamReceivedPathEntry, confTopoHelloInterval=confTopoHelloInterval, envPowerSupplyType=envPowerSupplyType, asxHostLinkDown=asxHostLinkDown, nGenericShmemCustomBCSSubindex=nGenericShmemCustomBCSSubindex, pShmem3CLP1LostCells=pShmem3CLP1LostCells, q2931AFFilterIndex=q2931AFFilterIndex, btPrimaryClock=btPrimaryClock, asxJ2PAISCleared=asxJ2PAISCleared, q2931ILMIReservedBW=q2931ILMIReservedBW, pShmem3ConfAltCLPConfigVBR=pShmem3ConfAltCLPConfigVBR, snmpWriteCommunity=snmpWriteCommunity, asxSwLinkUp=asxSwLinkUp, portAAL5PacketDiscardUBR=portAAL5PacketDiscardUBR, mbufsHeaderAlloc=mbufsHeaderAlloc, nshmemCurrentVpiVciLists=nshmemCurrentVpiVciLists, pnniSpvpcSrcRGroupIndex=pnniSpvpcSrcRGroupIndex, q2931AFRejectUnknown=q2931AFRejectUnknown, q2931E164Nsap=q2931E164Nsap, proxyDirMapVp=proxyDirMapVp, q2931VpciGroupIndex=q2931VpciGroupIndex, obufOverflows=obufOverflows, oamGeneratingOpathCells=oamGeneratingOpathCells, pnniPmpSpvccSrcPartyLastLocation=pnniPmpSpvccSrcPartyLastLocation, pnniPmpSpvccDestPartyUpTime=pnniPmpSpvccDestPartyUpTime, q2931NNIProto=q2931NNIProto, vpGroupVPCI=vpGroupVPCI, nsapTopoLinkFreshness=nsapTopoLinkFreshness, hwPortTable=hwPortTable, asxSonetLineAISCleared=asxSonetLineAISCleared, boardEntry=boardEntry, mbufsWait=mbufsWait, nShmem3CurrentUcastConnections=nShmem3CurrentUcastConnections, asxE3PLCPLOFDetected=asxE3PLCPLOFDetected, switchGroup=switchGroup, nShmem3CurrentCellsBuffers=nShmem3CurrentCellsBuffers, sbprServerAddress2=sbprServerAddress2, pnniSpvcSrcLastFailCause=pnniSpvcSrcLastFailCause, pShmem3Clp01ThreshforVBR=pShmem3Clp01ThreshforVBR, switchPmpEnable=switchPmpEnable, nGenericShmemMaxUcastConnections=nGenericShmemMaxUcastConnections, vcShmem3CLP0TxCells=vcShmem3CLP0TxCells, q2931AFLookupDstVPI=q2931AFLookupDstVPI, confTopologyGroup=confTopologyGroup, portHwBoard=portHwBoard, boardStatsBoard=boardStatsBoard, swBoardLinkAge=swBoardLinkAge, q2931NPPingStatsMinimumDelay=q2931NPPingStatsMinimumDelay, upcContractTagReq=upcContractTagReq, asxPs5VoltUp=asxPs5VoltUp, upcContractPCR01=upcContractPCR01, AtmConnSchedMode=AtmConnSchedMode, shmemCellsBuffers=shmemCellsBuffers, spvcDestEntry=spvcDestEntry, ftPnniSummaryAddress=ftPnniSummaryAddress, asxE1AtmLCDCleared=asxE1AtmLCDCleared, asxFabricTemperatureRegularTemp=asxFabricTemperatureRegularTemp, q2931NPPingStatsPktsSent=q2931NPPingStatsPktsSent, qosClassBackClr=qosClassBackClr, q2931AdminubrCalls=q2931AdminubrCalls, hwPortTxLED=hwPortTxLED)
mibBuilder.exportSymbols("Fore-Switch-MIB", pathrLoopVPI=pathrLoopVPI, pathShmem2Entry=pathShmem2Entry, moduleTable=moduleTable, ochanStatsLostCells=ochanStatsLostCells, alarmGroup=alarmGroup, pnniSpvpcSrcEntry=pnniSpvpcSrcEntry, hardwareVersion=hardwareVersion, portAAL5PacketDiscardVBR=portAAL5PacketDiscardVBR, pShmem3Clp1ThreshforCBR=pShmem3Clp1ThreshforCBR, netmodStatus=netmodStatus, E164Address=E164Address, sbprServerAddress3=sbprServerAddress3, shmem3CellsBuffers=shmem3CellsBuffers, shmem3McastConnections=shmem3McastConnections, pnniSpvcSrcDtlIndex2=pnniSpvcSrcDtlIndex2, proxyDirGroupTable=proxyDirGroupTable, nshmemModule=nshmemModule, mbufsAtableAlloc=mbufsAtableAlloc, spvcSrcStatus=spvcSrcStatus, switchDebounceHysteresis=switchDebounceHysteresis, swBoardMaxPaths=swBoardMaxPaths, channelRouteEntry=channelRouteEntry, boardMcastSpaceIndex=boardMcastSpaceIndex, netmodAlarmsEntry=netmodAlarmsEntry, opathMaxVCI=opathMaxVCI, pathExtAbrMetric=pathExtAbrMetric, nShmem3ConfVcCLP01ForUBR=nShmem3ConfVcCLP01ForUBR, pnniSpvpcRerouteInterval=pnniSpvpcRerouteInterval, swAlarmRelayFunction=swAlarmRelayFunction, nGenericShmemCustomBCSWeight=nGenericShmemCustomBCSWeight, nshmemConfSharedMemory=nshmemConfSharedMemory, pnniSpvpcDestFwdQoSClass=pnniSpvpcDestFwdQoSClass, portCardUptime=portCardUptime, opathTrafficShapeVPI=opathTrafficShapeVPI, vpShmem3CLP1LostCells=vpShmem3CLP1LostCells, portPPPolicingRTVBR=portPPPolicingRTVBR, spvcSrcInVPI=spvcSrcInVPI, pathMinVCI=pathMinVCI, pnniSpvcRerouteInterval=pnniSpvcRerouteInterval, perCallDbgFilterMatches=perCallDbgFilterMatches, opathNrtVbrOverbooking=opathNrtVbrOverbooking, genericOutputPortConfBoard=genericOutputPortConfBoard, pnniPmpSpvccSrcRootSusceptClip=pnniPmpSpvccSrcRootSusceptClip, asxSwitchLoginDetected=asxSwitchLoginDetected, vcShmem3UnintentionalLostCells=vcShmem3UnintentionalLostCells, vcShmem2OutputVCI=vcShmem2OutputVCI, pnniSpvpcDestRGroupIndex=pnniSpvpcDestRGroupIndex, envPowerSupplyTable=envPowerSupplyTable, pnniSpvccDown=pnniSpvccDown, q2931StatsVPI=q2931StatsVPI, q2931NPCallNextIndex=q2931NPCallNextIndex, portShmem2Table=portShmem2Table, pnniSpvpcDestBckQoSClass=pnniSpvpcDestBckQoSClass, swAlarmCriticalRelayState=swAlarmCriticalRelayState, sigPathMinVCI=sigPathMinVCI, ppShmem2Qsize=ppShmem2Qsize, shmem3ConfIndex=shmem3ConfIndex, atmAddress=atmAddress, portNumber=portNumber, btmPerPriorityPriorityName=btmPerPriorityPriorityName, pathrUptime=pathrUptime, envCpuIDESize=envCpuIDESize, nsapTopoLinkVbrCapacity=nsapTopoLinkVbrCapacity, q2931ILMIAdminVCI=q2931ILMIAdminVCI, swBoardMaxChannels=swBoardMaxChannels, portShmem2Entry=portShmem2Entry, moduleBoard=moduleBoard, pnniSpvcDestCalledAtmAddr=pnniSpvcDestCalledAtmAddr, mbufsDataFreeAlloc=mbufsDataFreeAlloc, asxDS3IdleCleared=asxDS3IdleCleared, pShmem3PPDLostCells=pShmem3PPDLostCells, asxSonetLineRDICleared=asxSonetLineRDICleared, vcShmem3EPDLostCells=vcShmem3EPDLostCells, proxyDirGroupVPCIGroup=proxyDirGroupVPCIGroup, nShmem3ConfVcCLP01ForCBR=nShmem3ConfVcCLP01ForCBR, spvcSrcUpTime=spvcSrcUpTime, asxJ2TLOCCleared=asxJ2TLOCCleared, poolConfGroup=poolConfGroup, timing=timing, portRemoteAtmAddress=portRemoteAtmAddress, perCallDbgFilterRowStatus=perCallDbgFilterRowStatus, pnniPmpSpvccSrcPartyDownReason=pnniPmpSpvccSrcPartyDownReason, poolConfPMPCalls=poolConfPMPCalls, pathRouteEntry=pathRouteEntry, nShmem2CustomBCSBoard=nShmem2CustomBCSBoard, sigPathClsVCI=sigPathClsVCI, qosClassName=qosClassName, genericOutputPortStatsPrioClp1LostCells=genericOutputPortStatsPrioClp1LostCells, ochanStatsVPI=ochanStatsVPI, vmtVpciMapTable=vmtVpciMapTable, pShmem3ConfModule=pShmem3ConfModule, pnniSpvcSrcSecondaryVCI=pnniSpvcSrcSecondaryVCI, dualScpPrimary=dualScpPrimary, swAlarmTable=swAlarmTable, pnniSpvpcSrcFwdUpcKey=pnniSpvpcSrcFwdUpcKey, oamGuard=oamGuard, atmIfConnSchedLink=atmIfConnSchedLink, obufOperStatus=obufOperStatus, asxE3PLCPLOFCleared=asxE3PLCPLOFCleared, q2931AdminVCI=q2931AdminVCI, perCallDbgFilterTable=perCallDbgFilterTable, nsapTopoLinkSrcPort=nsapTopoLinkSrcPort, pnniSpvpcDestStatus=pnniSpvpcDestStatus, pnniSpvpcSrcLastLocation=pnniSpvpcSrcLastLocation, pnniPmpSpvccSrcRootRGroupIndex=pnniPmpSpvccSrcRootRGroupIndex, q2931AFLookupDstPort=q2931AFLookupDstPort, btBoard=btBoard, pnniSpvcSrcFwdQoSClass=pnniSpvcSrcFwdQoSClass, nShmem3Board=nShmem3Board, q2931OutputIlmiUpc=q2931OutputIlmiUpc, switchPrimaryClock=switchPrimaryClock, asxSonetAtmLineBIPDetected=asxSonetAtmLineBIPDetected, outputPathStatsEntry=outputPathStatsEntry, switchType=switchType, envFabricTemperature=envFabricTemperature, pshmemPort=pshmemPort, genericPortGroupIndex=genericPortGroupIndex, confTopoSpansAreaID=confTopoSpansAreaID, guardEntry=guardEntry, netmodName=netmodName, ftPnniSummaryStatus=ftPnniSummaryStatus, pathrUpcContract=pathrUpcContract, ppShmem2ConfModule=ppShmem2ConfModule, vmtVpciMapListTable=vmtVpciMapListTable, pathExtQosMetricMaxCdv=pathExtQosMetricMaxCdv, qosClassExpansionGroup=qosClassExpansionGroup, asxFabricUp=asxFabricUp, q2931Restarts=q2931Restarts, opathMaxBandwidth=opathMaxBandwidth, spvcDestSrcSwitchAddr=spvcDestSrcSwitchAddr, upcContractServiceSubCategory=upcContractServiceSubCategory, pnniSpvpcSrcCalledVPI=pnniSpvpcSrcCalledVPI, pnniSpvcSrcDtlWeight2=pnniSpvcSrcDtlWeight2, q2931AdminUNISide=q2931AdminUNISide, asxE1AISCleared=asxE1AISCleared, opathStatsTransmittedPackets=opathStatsTransmittedPackets, ifIndexMapPort=ifIndexMapPort, pnniSpvcSrcIndex=pnniSpvcSrcIndex, boardSerialNumber=boardSerialNumber, asxDualScpSyncFailure=asxDualScpSyncFailure, pShmem3CurrentQsize=pShmem3CurrentQsize, pnniSpvpcRerouteNumSpvpcs=pnniSpvpcRerouteNumSpvpcs, nsapTopoLinkDest=nsapTopoLinkDest, asxE3YellowDetected=asxE3YellowDetected, envFabricTable=envFabricTable, asxSonetAtmLineBIPCleared=asxSonetAtmLineBIPCleared, asxE1LOSDetected=asxE1LOSDetected, nGenericShmemSubindex=nGenericShmemSubindex, pnniSpvpcDestUpTime=pnniSpvpcDestUpTime, fabricLvl3Lookup=fabricLvl3Lookup, oamGeneratingOpathTable=oamGeneratingOpathTable, shmem3ConfTable=shmem3ConfTable, asxAtmIfLinkid=asxAtmIfLinkid, spvcSrcAllocBandwidth=spvcSrcAllocBandwidth, oamGeneratingPathrCells=oamGeneratingPathrCells, obufNumber=obufNumber, appModuleEntry=appModuleEntry, pnniPmpSpvccDestPartyAssignedVPI=pnniPmpSpvccDestPartyAssignedVPI, pshmemDedicatedQsize=pshmemDedicatedQsize, pnniPmpSpvccSrcPartyIndex=pnniPmpSpvccSrcPartyIndex, serviceCategoryIndex=serviceCategoryIndex, netmodShmem3Entry=netmodShmem3Entry, pnniSpvpcSrcName=pnniSpvpcSrcName, vmtVpciMapVPI=vmtVpciMapVPI, spansGroup=spansGroup, pnniPmpSpvcPartyPaceNum=pnniPmpSpvcPartyPaceNum, ftPnniSummarySuppress=ftPnniSummarySuppress, ftPnniDTLPort=ftPnniDTLPort, q2931AFTemplateAction=q2931AFTemplateAction, nShmem2CurrentMcastConnections=nShmem2CurrentMcastConnections, asxJ2HBERDetected=asxJ2HBERDetected, q2931NPCallIndex=q2931NPCallIndex, asxE3AtmLCDDetected=asxE3AtmLCDDetected, boardTimingEntry=boardTimingEntry, asxSonetPathRDIDetected=asxSonetPathRDIDetected, q2931AFLastFailureSrcVPI=q2931AFLastFailureSrcVPI, pathMaxVCI=pathMaxVCI, vpGroupEntry=vpGroupEntry, channelShmem2Table=channelShmem2Table, pnniPmpSpvccSrcRootBearerClass=pnniPmpSpvccSrcRootBearerClass, pathAllocBandwidth=pathAllocBandwidth, pShmem3Clp1ThreshforVBR=pShmem3Clp1ThreshforVBR, q2931NPCallTable=q2931NPCallTable, pnniSpvcSrcDtlIndex=pnniSpvcSrcDtlIndex, nShmem2NumPriorities=nShmem2NumPriorities, portPriorityShmem2ConfTable=portPriorityShmem2ConfTable, q2931StatsTable=q2931StatsTable, vcShmem2TotalLostCells=vcShmem2TotalLostCells, dualScpSwitchOverTime=dualScpSwitchOverTime, portGCRAPolicingNRTVBR=portGCRAPolicingNRTVBR, qosClassFwdCdv=qosClassFwdCdv, opathVCIErrors=opathVCIErrors, q2931NPCallClientType=q2931NPCallClientType, foreSwitchModule=foreSwitchModule, chanUptime=chanUptime, asxDS1LOSCleared=asxDS1LOSCleared, asxSonetLOSDetected=asxSonetLOSDetected, q2931AtmrPnniNodeIndex=q2931AtmrPnniNodeIndex, genericOutputPortStatsPrioEpdPpdLostCells=genericOutputPortStatsPrioEpdPpdLostCells, pnniSpvpcUp=pnniSpvpcUp, pShmem2QsizeforVBR=pShmem2QsizeforVBR, hwPortGlobalIndex=hwPortGlobalIndex, netmodShmem3Group=netmodShmem3Group, asxE3AISCleared=asxE3AISCleared, chanQosSCR=chanQosSCR, q2931NPCallDstNsap=q2931NPCallDstNsap, ntBoard=ntBoard, q2931OutputSigService=q2931OutputSigService, mbufsSocketAlloc=mbufsSocketAlloc, pnniSpvpcSrcIndex=pnniSpvpcSrcIndex, q2931AFTemplateSrcNsap=q2931AFTemplateSrcNsap, shmem3CellMemorySize=shmem3CellMemorySize, q2931AFFilterTListEntry=q2931AFFilterTListEntry, pShmemAtmInterfaceIndex=pShmemAtmInterfaceIndex, asxE1LOSCleared=asxE1LOSCleared, envMaxNumberOfPowerSupplies=envMaxNumberOfPowerSupplies, pnniTdbInconsistentState=pnniTdbInconsistentState, pShmem2ClpThreshforCBR=pShmem2ClpThreshforCBR, spvcDestSrcSpvcId=spvcDestSrcSpvcId, upcContractCDVT=upcContractCDVT, q2931AtmrConfDomainID=q2931AtmrConfDomainID, syslogDestinationStatus=syslogDestinationStatus, asxSonetPathUNEQDetected=asxSonetPathUNEQDetected, cbrctActiveIntPeriod=cbrctActiveIntPeriod, chanrName=chanrName, netmodShmemGroup=netmodShmemGroup, pathCells=pathCells, numberOfPorts=numberOfPorts, pshmemCurrentQsize=pshmemCurrentQsize, poolConfPPCalls=poolConfPPCalls, pnniPmpSpvccSrcRootVPI=pnniPmpSpvccSrcRootVPI, envPowerSupplyEntry=envPowerSupplyEntry, pnniSpvcDestBckQoSClass=pnniSpvcDestBckQoSClass, opathSigProtocol=opathSigProtocol, boardTrafficManagementPerPriorityTable=boardTrafficManagementPerPriorityTable, pathExtQosMetricMaxClr=pathExtQosMetricMaxClr, nShmem2CustomBCSWeight=nShmem2CustomBCSWeight, genericOutputPortConfPort=genericOutputPortConfPort, perCallDbgTransFlag=perCallDbgTransFlag, q2931AddressFilterGroup=q2931AddressFilterGroup, portOutputCACErrors=portOutputCACErrors, portVbrBufferOverb=portVbrBufferOverb, swAlarmRelayIndex=swAlarmRelayIndex, portShmem2Group=portShmem2Group, pnniSpvcDestSusceptClip=pnniSpvcDestSusceptClip, upcContractMBS=upcContractMBS, pnniSpvcSrcCallingPort=pnniSpvcSrcCallingPort, pnniPmpSpvccSrcPartyAtmAddr=pnniPmpSpvccSrcPartyAtmAddr, netmodShmem2CustomBCSEntry=netmodShmem2CustomBCSEntry, pnniSpvcSrcActiveDtlNodeIndex=pnniSpvcSrcActiveDtlNodeIndex, q2931NPPingStatsMaximumDelay=q2931NPPingStatsMaximumDelay, pnniSpvcParamGroup=pnniSpvcParamGroup, pshmemEfciOffABR=pshmemEfciOffABR, pnniPmpSpvcUp=pnniPmpSpvcUp)
mibBuilder.exportSymbols("Fore-Switch-MIB", envPowerSupplyInputState=envPowerSupplyInputState, sigPathOpenTimeout=sigPathOpenTimeout, q2931OutputSigUpc=q2931OutputSigUpc, sigPathRestarts=sigPathRestarts, hdcompVciLookupErrors=hdcompVciLookupErrors, boardStatsValue=boardStatsValue, nshmemCurrentCellsBuffers=nshmemCurrentCellsBuffers, pnniPmpSpvccSrcRootPriority=pnniPmpSpvccSrcRootPriority, asxDS3IdleDetected=asxDS3IdleDetected, pnniSpvcSrcDtlWeight3=pnniSpvcSrcDtlWeight3, swBoardTopoEntry=swBoardTopoEntry, ifIndexMapGroup=ifIndexMapGroup, netmodSlotPriority=netmodSlotPriority, confTopoMaxHopCount=confTopoMaxHopCount, shmem2UcastConnections=shmem2UcastConnections, pathrOutputVPI=pathrOutputVPI, upcContractKey=upcContractKey, asxSonetAtmLCDCleared=asxSonetAtmLCDCleared, cesExtTable=cesExtTable, pShmem3ConfSVCSchedulingVBR=pShmem3ConfSVCSchedulingVBR, revChanrOutputVPI=revChanrOutputVPI, outputChannelStatsTable=outputChannelStatsTable, switchConnectionPreservation=switchConnectionPreservation, snmpAgentInterface=snmpAgentInterface, q2931AdminPlanType=q2931AdminPlanType, portUsedBandwidthIn=portUsedBandwidthIn, swAlarmRelayOperMode=swAlarmRelayOperMode, nGenericShmemCustomBCSRowStatus=nGenericShmemCustomBCSRowStatus, pnniSpvcLowestPriority=pnniSpvcLowestPriority, pnniSpvpcDestNumberOfSPVPCs=pnniSpvpcDestNumberOfSPVPCs, snmpAgentTable=snmpAgentTable, nShmem3ConfAltCLP1Threshold=nShmem3ConfAltCLP1Threshold, confTopoLBUbrLoadBalance=confTopoLBUbrLoadBalance, envMgmtBoardSerialNumber=envMgmtBoardSerialNumber, pnniSpvcDestFwdQoSClass=pnniSpvcDestFwdQoSClass, netmodTimingTable=netmodTimingTable, portInputDelayMode=portInputDelayMode, moduleTestAdminStatus=moduleTestAdminStatus, sigPathMaxVCI=sigPathMaxVCI, asxJ2AISCleared=asxJ2AISCleared, opathExtAbrMetric=opathExtAbrMetric, nShmem3ConfVcCLP01ForVBR=nShmem3ConfVcCLP01ForVBR, dualScpSlot=dualScpSlot, pnniPmpSpvccSrcPartyAutoDtlStatus=pnniPmpSpvccSrcPartyAutoDtlStatus, portNrtVbrBufferOverb=portNrtVbrBufferOverb, trapDestEntry=trapDestEntry, envPowerSupplySerialNumber=envPowerSupplySerialNumber, netmodGenericShmemCustomBCSEntry=netmodGenericShmemCustomBCSEntry, nsapNetworkPrefixPort=nsapNetworkPrefixPort, appModuleSoftwareVersion=appModuleSoftwareVersion, snmpReconfigure=snmpReconfigure, q2931CallingPDefaultAddress=q2931CallingPDefaultAddress, PYSNMP_MODULE_ID=foreSwitchModule, portInputVCIErrors=portInputVCIErrors, dualScpSyncRequestList=dualScpSyncRequestList, sigPathEntryStatus=sigPathEntryStatus, pShmem3ConfPVCSchedulingVBR=pShmem3ConfPVCSchedulingVBR, chanVCI=chanVCI, cesExtGroup=cesExtGroup, asxHostLinkUp=asxHostLinkUp, pnniSpvcSrcCalledAtmAddr=pnniSpvcSrcCalledAtmAddr, pshmemClpThreshforVBR=pshmemClpThreshforVBR, envTempSensorsTable=envTempSensorsTable, chanUsedBandwidth=chanUsedBandwidth, cbrctIdleDetection=cbrctIdleDetection, q2931AFTemplateNextIndex=q2931AFTemplateNextIndex, swBoardMulticastMode=swBoardMulticastMode, netmodSlot=netmodSlot, nShmem3CurrentVpiVciLists=nShmem3CurrentVpiVciLists, portAllocBandwidthIn=portAllocBandwidthIn, portMaxBandwidthOut=portMaxBandwidthOut, envTempSensorIndex=envTempSensorIndex, nGenericShmemCustomBCSModule=nGenericShmemCustomBCSModule, nsapStaticRouteMaxCbrCap=nsapStaticRouteMaxCbrCap, upcContractEntry=upcContractEntry, asxNonextendedModeViolation=asxNonextendedModeViolation, nShmem2VBRPriority=nShmem2VBRPriority, pnniSpvxcRGroupPacingInterval=pnniSpvxcRGroupPacingInterval, mbufsCount=mbufsCount, pshmemConfPort=pshmemConfPort, outputPathStatsTable=outputPathStatsTable, swBoardTopoIndex=swBoardTopoIndex, asxE3OOFCleared=asxE3OOFCleared, hwPortName=hwPortName, q2931NPPingState=q2931NPPingState, procUtilHistoryReset=procUtilHistoryReset, pathUptime=pathUptime, ftPnniSummaryType=ftPnniSummaryType, shmem3VpiVciLists=shmem3VpiVciLists, q2931ILMIAdminStatus=q2931ILMIAdminStatus, pnniSpvcSrcTimingReq=pnniSpvcSrcTimingReq, netmodShmem2Table=netmodShmem2Table, nShmem2CustomBCSModule=nShmem2CustomBCSModule, upcContractMBS0=upcContractMBS0, pnniSpvcSrcCalledVPVCSel=pnniSpvcSrcCalledVPVCSel, asxDS3PLCPLOFDetected=asxDS3PLCPLOFDetected, poolConfMaxPercentage=poolConfMaxPercentage, pnniSpvpcSrcTable=pnniSpvpcSrcTable, ntPrimaryImportClock=ntPrimaryImportClock, pnniSpvcSrcStatus=pnniSpvcSrcStatus, pnniPmpSpvccSrcPartyVPVCSel=pnniPmpSpvccSrcPartyVPVCSel, hdcompTable=hdcompTable, nsapTopoLinkCbrFifo=nsapTopoLinkCbrFifo, upcContractServiceCategory=upcContractServiceCategory, q2931NPCallStatus=q2931NPCallStatus, pnniPmpSpvccDestRootBearerClass=pnniPmpSpvccDestRootBearerClass, shmem3Counters=shmem3Counters, pShmem3Priority=pShmem3Priority, pnniSpvpcSrcSecondaryVPI=pnniSpvpcSrcSecondaryVPI, q2931AFFilterStatus=q2931AFFilterStatus, nsapTopoLinkOrig=nsapTopoLinkOrig, q2931UserUserSignallingAdminStatus=q2931UserUserSignallingAdminStatus, revChanrInputPort=revChanrInputPort, asxDS1PRBSCleared=asxDS1PRBSCleared, portAllocBandwidthOut=portAllocBandwidthOut, nShmem2CustomBCSRowStatus=nShmem2CustomBCSRowStatus, envFabricTemperatureState=envFabricTemperatureState, asxTempSensorOverTemp=asxTempSensorOverTemp, upcContractBehaviorClassSelector=upcContractBehaviorClassSelector, genericOutputPortConfModule=genericOutputPortConfModule, vpciMappingTableGroup=vpciMappingTableGroup, asxSpansUp=asxSpansUp, asxPsCurrentDown=asxPsCurrentDown, genericPortGroupBoard=genericPortGroupBoard, chanCells=chanCells, q2931AcceleratedClear=q2931AcceleratedClear, upcContractEstimatedUbrBandwidth=upcContractEstimatedUbrBandwidth, portInputCACErrors=portInputCACErrors, hwPortCarrier=hwPortCarrier, confTopoPGSNReachCost=confTopoPGSNReachCost, swBoardLinkEntry=swBoardLinkEntry, swBoardLinkIndex=swBoardLinkIndex, asxDS1PLCPYellowDetected=asxDS1PLCPYellowDetected, portUsedBandwidthOut=portUsedBandwidthOut, pnniPmpSpvccSrcNextRootIndex=pnniPmpSpvccSrcNextRootIndex, mbufsIFaddrAlloc=mbufsIFaddrAlloc, q2931AdminAALType=q2931AdminAALType, boardTimingGroup=boardTimingGroup, asxJ2LOSCleared=asxJ2LOSCleared, pShmem3QsizeforVBR=pShmem3QsizeforVBR, portHwModule=portHwModule, shmemMemorySize=shmemMemorySize, swAlarmCriticalCategory=swAlarmCriticalCategory, snmpThisAgentBoardNumber=snmpThisAgentBoardNumber, pnniPmpRerouteInitiated=pnniPmpRerouteInitiated, proxyDirMapPort=proxyDirMapPort, asxFanBankUp=asxFanBankUp, q2931ILMIOperStatus=q2931ILMIOperStatus, genericOutputPortConfAtmif=genericOutputPortConfAtmif, perCallDbgFilterName=perCallDbgFilterName, nshmemConfRow=nshmemConfRow, asxE3OOFDetected=asxE3OOFDetected, q2931AdminVPI=q2931AdminVPI, pnniSpvcSrcTrafficType=pnniSpvcSrcTrafficType, maxPaths=maxPaths, q2931NPCallQosClassBwd=q2931NPCallQosClassBwd, ftPnniDTLNodeMask=ftPnniDTLNodeMask, pShmem2CurrentQsize=pShmem2CurrentQsize, pshmemQsizeforABR=pshmemQsizeforABR, pnniSpvpcPaceInterval=pnniSpvpcPaceInterval, pnniSpvpcPaceNumSpvpcs=pnniSpvpcPaceNumSpvpcs, genericPortGroupSubindex=genericPortGroupSubindex, qosClassFwdClr=qosClassFwdClr, pathPort=pathPort, pnniSpvcBackoffInterval=pnniSpvcBackoffInterval, reverseChannelRouteEntry=reverseChannelRouteEntry, fansGroup=fansGroup, genericPortGroupConfEntry=genericPortGroupConfEntry, ntImportClockOperStatus=ntImportClockOperStatus, nsapTopoLinkSrc=nsapTopoLinkSrc, netmodShmemTable=netmodShmemTable, nGenericShmemCustomBCSValue=nGenericShmemCustomBCSValue, upcContractSCR0=upcContractSCR0, pnniPmpSpvccDestRootFwdQoSClass=pnniPmpSpvccDestRootFwdQoSClass, cpuGroup=cpuGroup, dualScpNumSyncFailures=dualScpNumSyncFailures, envCpuSlot=envCpuSlot, procUtilMaxLoadLastUpdate=procUtilMaxLoadLastUpdate, genericOutputPortConfPrio=genericOutputPortConfPrio, vpShmem3CLP01LostCells=vpShmem3CLP01LostCells, pathrStatus=pathrStatus, sigPathClsTransmittedMessages=sigPathClsTransmittedMessages, pnniSpvxcRGroupNsapAddr=pnniSpvxcRGroupNsapAddr, asxShmem2OutputQueueCellLoss=asxShmem2OutputQueueCellLoss, asxDS1CRCErrDetected=asxDS1CRCErrDetected, portCounterResetTime=portCounterResetTime, opathExtUbrMetric=opathExtUbrMetric, switchReservedPMPMinVCI=switchReservedPMPMinVCI, nsapStaticRouteStatus=nsapStaticRouteStatus, q2931UNIOperVersion=q2931UNIOperVersion, hdcompAsicVersion=hdcompAsicVersion, appModuleName=appModuleName, swBoardLinkSrc=swBoardLinkSrc, q2931AFFilterTListTemplateIndex=q2931AFFilterTListTemplateIndex, pShmem3EPDLostCells=pShmem3EPDLostCells, chanPolicingAction=chanPolicingAction, nShmem3ConfVcCLP1ForCBR=nShmem3ConfVcCLP1ForCBR, swBoardClockScalingFactor=swBoardClockScalingFactor, linkDest=linkDest, portPPPolicingNRTVBR=portPPPolicingNRTVBR, pnniPmpSpvccSrcPartyVCI=pnniPmpSpvccSrcPartyVCI, asxJ2TLOCDetected=asxJ2TLOCDetected, nGenericShmemMaxConnections=nGenericShmemMaxConnections, nsapNetworkPrefixEntry=nsapNetworkPrefixEntry, asxSVXCPStateDroppedCall=asxSVXCPStateDroppedCall, pnniSpvcSrcCalledAssignedVCI=pnniSpvcSrcCalledAssignedVCI, pathrRejectedCells=pathrRejectedCells, pnniSpvpcSrcCalledAssignedVPI=pnniSpvpcSrcCalledAssignedVPI, ifIndexMapBoard=ifIndexMapBoard, ftPnniDTLEntry=ftPnniDTLEntry, q2931AFFilterTListTable=q2931AFFilterTListTable, pnniSpvxcRGroupSwitchoverCmd=pnniSpvxcRGroupSwitchoverCmd, q2931AdminTable=q2931AdminTable, pnniSpvcPaceInterval=pnniSpvcPaceInterval, mallocUtilEntry=mallocUtilEntry, pShmem3ConfSVCSchedulingCBR=pShmem3ConfSVCSchedulingCBR, atmIfConnSchedEntry=atmIfConnSchedEntry, asxQ2931Down=asxQ2931Down, asxE3PLCPYellowDetected=asxE3PLCPYellowDetected, pShmem3CLP01LostCells=pShmem3CLP01LostCells, ifIndexMapTable=ifIndexMapTable, envCpuRevLevel=envCpuRevLevel, confTopoSpansBorderSwitch=confTopoSpansBorderSwitch, shmem2NumPriorities=shmem2NumPriorities, pnniPmpSpvccSrcPartyRowStatus=pnniPmpSpvccSrcPartyRowStatus, pnniSpvpcStatsGroup=pnniSpvpcStatsGroup, etherChipSetDec=etherChipSetDec, chanrConnectionType=chanrConnectionType, q2931NPPingStatsAverageDelay=q2931NPPingStatsAverageDelay, pnniSpvpcSrcNumberOfSPVPCs=pnniSpvpcSrcNumberOfSPVPCs, q2931AFFilterName=q2931AFFilterName, oamGeneratingPathrTable=oamGeneratingPathrTable, moduleTestOperStatus=moduleTestOperStatus, sbprServerMinSeconds=sbprServerMinSeconds, sigPathType=sigPathType, pathTable=pathTable, spvcSrcInVCI=spvcSrcInVCI, q2931QosClassExpansionKey=q2931QosClassExpansionKey, envFabricIndex=envFabricIndex, nShmem3ConfAal5PacketDrop=nShmem3ConfAal5PacketDrop, pnniSpvcSrcDtlWeight1=pnniSpvcSrcDtlWeight1, pnniSpvpcParamGroup=pnniSpvpcParamGroup, vmtVpciMapGroupStatus=vmtVpciMapGroupStatus, upcContractDoGCRAPolicing=upcContractDoGCRAPolicing, vpShmem2TransmittedCells=vpShmem2TransmittedCells, pshmemModule=pshmemModule, boardTrafficManagementGroup=boardTrafficManagementGroup, portInputVPIErrors=portInputVPIErrors, opathExtRtVbrMetric=opathExtRtVbrMetric, pnniSpvcSrcCalledPort=pnniSpvcSrcCalledPort, asxDS3LOSCleared=asxDS3LOSCleared, pnniSpvcSrcDtlTag=pnniSpvcSrcDtlTag, pnniSpvcDestAssignedVPI=pnniSpvcDestAssignedVPI, mallocUtilTable=mallocUtilTable)
mibBuilder.exportSymbols("Fore-Switch-MIB", portAAL5PacketDiscardRTVBR=portAAL5PacketDiscardRTVBR, nsapStaticRouteMaxVbrCap=nsapStaticRouteMaxVbrCap, opathVPI=opathVPI, nGenericShmemCurrentConnections=nGenericShmemCurrentConnections, portCardGroup=portCardGroup, portCardSerialNumber=portCardSerialNumber, upcContractAal5Epd=upcContractAal5Epd, asxVPAISCleared=asxVPAISCleared, portShmem3Entry=portShmem3Entry, opathSchedMode=opathSchedMode, pnniPmpSpvccSrcPartyRouteCost=pnniPmpSpvccSrcPartyRouteCost, hwPortBoard=hwPortBoard, outputPathTable=outputPathTable, mbufsClFree=mbufsClFree, nGenericShmemMaxMcastConnections=nGenericShmemMaxMcastConnections, linkAge=linkAge, portOutputMaxctd=portOutputMaxctd, nShmem2ConfRow=nShmem2ConfRow, pnniSpvpcTrapMode=pnniSpvpcTrapMode, ochanStatsCLP0Cells=ochanStatsCLP0Cells, revChanrInputVPI=revChanrInputVPI, qosClassExpansionKey=qosClassExpansionKey, envFanBankType=envFanBankType, procUtilGroup=procUtilGroup, spvcSrcInPort=spvcSrcInPort, vcShmem3CLP1LostCells=vcShmem3CLP1LostCells, q2931AFTemplateSrcPort=q2931AFTemplateSrcPort, switchClockCurrentStatus=switchClockCurrentStatus, pnniSpvcSrcRetryCount=pnniSpvcSrcRetryCount, asxDS3LOSDetected=asxDS3LOSDetected, envCpuSerialNumber=envCpuSerialNumber, asxPsCurrentUp=asxPsCurrentUp, upcContractIsAAL5=upcContractIsAAL5, moduleTimingSupport=moduleTimingSupport, switchCallPreservation=switchCallPreservation, pnniSpvcDestTransitNetSel=pnniSpvcDestTransitNetSel, ntPrimaryRecoveredClock=ntPrimaryRecoveredClock, pnniPmpSpvccDestRootVCI=pnniPmpSpvccDestRootVCI, q2931AFTemplateName=q2931AFTemplateName, pShmem2IntentionalLostCells=pShmem2IntentionalLostCells, swBoardTopoTable=swBoardTopoTable, pnniPmpSpvccSrcPartyRetryCount=pnniPmpSpvccSrcPartyRetryCount, portOutputVCIErrors=portOutputVCIErrors, pShmem2Board=pShmem2Board, pathGroup=pathGroup, pShmem3Clp1ThreshforABR=pShmem3Clp1ThreshforABR, mbufsFtableAlloc=mbufsFtableAlloc, q2931AFRejectKnowns=q2931AFRejectKnowns, pathrInputPort=pathrInputPort, portRemoteIpAddress=portRemoteIpAddress, portCardAssemblyRevision=portCardAssemblyRevision, q2931AFStatsEntry=q2931AFStatsEntry, pnniSpvpcSrcCallingVPI=pnniSpvpcSrcCallingVPI, q2931E164AddrResTable=q2931E164AddrResTable, vpShmem3CurrentQsize=vpShmem3CurrentQsize, asxDS1AtmLCDDetected=asxDS1AtmLCDDetected, portRtVbrOverbooking=portRtVbrOverbooking, envTempSensorsEntry=envTempSensorsEntry, pnniPmpSpvccGroup=pnniPmpSpvccGroup, envPowerSupplyIndex=envPowerSupplyIndex, shmemVpiVciLists=shmemVpiVciLists, nShmem3CurrentMcastConnections=nShmem3CurrentMcastConnections, pshmemClpThreshold=pshmemClpThreshold, procUtilMaxLoad=procUtilMaxLoad, chanQosPCR=chanQosPCR, ftPnniDTLNodePrefix=ftPnniDTLNodePrefix, portCardType=portCardType, pathVPI=pathVPI, nShmem3ConfVcCLP1ForUBR=nShmem3ConfVcCLP1ForUBR, q2931AFTemplateSrcVPI=q2931AFTemplateSrcVPI, vmtVpciMapGroupTable=vmtVpciMapGroupTable, q2931InputSigContract=q2931InputSigContract, proxyDirMapEntry=proxyDirMapEntry, vmtVpciMapListMEIndex=vmtVpciMapListMEIndex, pShmem3QsizeforCBR=pShmem3QsizeforCBR, vpShmem3OutputPort=vpShmem3OutputPort, mbufsRightsAlloc=mbufsRightsAlloc, pathrOutputPort=pathrOutputPort, opathChannelSchedPort=opathChannelSchedPort, asxIpFilterViolation=asxIpFilterViolation, revChanrInputVCI=revChanrInputVCI, asxJ2HBERCleared=asxJ2HBERCleared, pShmem2ClpThreshold=pShmem2ClpThreshold, swAlarmEntry=swAlarmEntry, pnniSpvcSrcSusceptClip=pnniSpvcSrcSusceptClip, q2931ConnectedPAddressPresentation=q2931ConnectedPAddressPresentation, pnniSpvpcDestCallingVPI=pnniSpvpcDestCallingVPI, pathrConnectionType=pathrConnectionType, asxSonetPathAISCleared=asxSonetPathAISCleared, q2931AFFilterNextIndex=q2931AFFilterNextIndex, snmpColdStart=snmpColdStart, envCpuType=envCpuType, opathStatus=opathStatus, nsapTopoLinkDestVpi=nsapTopoLinkDestVpi, switchCurrentUserid=switchCurrentUserid, pnniSpvpcDestTable=pnniSpvpcDestTable, vmtVpciMapIndex=vmtVpciMapIndex, switchCDV=switchCDV, vpGroupTable=vpGroupTable, portGCRAPolicingCBR=portGCRAPolicingCBR, pnniPmpSpvccSrcRootName=pnniPmpSpvccSrcRootName, asxDS1AISCleared=asxDS1AISCleared, pnniSpvcDefaultUbrBandwidth=pnniSpvcDefaultUbrBandwidth, obufType=obufType, hwPortBufferSize=hwPortBufferSize, chanQosPoliceState=chanQosPoliceState, pathRejectedCells=pathRejectedCells, q2931AFLastFailureDstNsap=q2931AFLastFailureDstNsap, pnniSpvcSrcActiveDtlIndex=pnniSpvcSrcActiveDtlIndex, pnniSpvcSrcLastChangeTime=pnniSpvcSrcLastChangeTime, opathStatsCLP0Cells=opathStatsCLP0Cells, chanrSigProtocol=chanrSigProtocol, portOutputVPIErrors=portOutputVPIErrors, shmemUcastConnections=shmemUcastConnections, q2931VCCs=q2931VCCs, switchCtrlLinkid=switchCtrlLinkid, mcastSpaceTable=mcastSpaceTable, cbrctIdlePatterns=cbrctIdlePatterns, vcShmem2IntentionalLostCells=vcShmem2IntentionalLostCells, upcContractDoUBRTagging=upcContractDoUBRTagging, asxDualScpHotSwap=asxDualScpHotSwap, pnniSpvcSrcEntryStatus=pnniSpvcSrcEntryStatus, nGenericShmemCurrentMcastConnections=nGenericShmemCurrentMcastConnections, upcContractMBS01=upcContractMBS01, swBoardLinkCapacity=swBoardLinkCapacity, moduleTestStatusText=moduleTestStatusText, asxSonetPathLabelCleared=asxSonetPathLabelCleared, sigPathAdminStatus=sigPathAdminStatus, snmpAgentAddress=snmpAgentAddress, asxVPRDICleared=asxVPRDICleared, pnniPmpSpvccSrcPartyAssignedVPI=pnniPmpSpvccSrcPartyAssignedVPI, nShmem3ConfRow=nShmem3ConfRow, connShmem2Group=connShmem2Group, asxJ2RLOCCleared=asxJ2RLOCCleared, genericOutputPortStatsTable=genericOutputPortStatsTable, pShmem3VcCLPLostCells=pShmem3VcCLPLostCells, q2931VCIRangeStatus=q2931VCIRangeStatus, pathMaxBandwidth=pathMaxBandwidth, nShmem3TableMemorySize=nShmem3TableMemorySize, asxTempSensorRegularTemp=asxTempSensorRegularTemp, syslogFacility=syslogFacility, q2931ProxyDirGroupIndex=q2931ProxyDirGroupIndex, sigPathPort=sigPathPort, pnniSpvpcSrcBackoffStatus=pnniSpvpcSrcBackoffStatus, asxUnsupportedNetworkModule=asxUnsupportedNetworkModule, portVbrOverbooking=portVbrOverbooking, q2931AFDirection=q2931AFDirection, proxyDirMapStatus=proxyDirMapStatus, boardStatsName=boardStatsName, portHwNumber=portHwNumber, asxTP25LOSDetected=asxTP25LOSDetected, asxDS3PbitPerrDetected=asxDS3PbitPerrDetected, q2931AdminSigMode=q2931AdminSigMode, swBoardUptime=swBoardUptime, asxDS1PRBSDetected=asxDS1PRBSDetected, pnniSpvcDestCallingVCI=pnniSpvcDestCallingVCI, pnniSpvcSrcSecondaryVPI=pnniSpvcSrcSecondaryVPI, q2931AdminPort=q2931AdminPort, pnniSpvcSrcBackoffStatus=pnniSpvcSrcBackoffStatus, q2931AFFilterTable=q2931AFFilterTable, q2931AFRejectUnknowns=q2931AFRejectUnknowns, btSecondaryClock=btSecondaryClock, ntGlobalClock=ntGlobalClock, channelRouteTable=channelRouteTable, asxVPRDIDetected=asxVPRDIDetected, pathrName=pathrName, sbprServerAddressIndex=sbprServerAddressIndex, outputPathChannelSchedTable=outputPathChannelSchedTable, switchCounterReset=switchCounterReset, q2931StatsEntry=q2931StatsEntry, opathChannelSchedServCat=opathChannelSchedServCat, pathStatus=pathStatus, upcContractTable=upcContractTable, opathStatsLostPackets=opathStatsLostPackets, opathChannelSchedSchedMode=opathChannelSchedSchedMode, envPowerSupplyVersion=envPowerSupplyVersion, chanQosCDVT=chanQosCDVT, switchHttpHelpUrl=switchHttpHelpUrl, pathExtEntry=pathExtEntry, shmem2CellMemorySize=shmem2CellMemorySize, asxJ2PAISDetected=asxJ2PAISDetected, confTopoNsapIndInterval=confTopoNsapIndInterval, asxSwLinkDown=asxSwLinkDown, chanrInputPort=chanrInputPort, pathMaxChannels=pathMaxChannels, envCpuCLEI=envCpuCLEI, nshmemMemorySize=nshmemMemorySize, syslogDestinationHost=syslogDestinationHost, portCardName=portCardName, upcContractCongestionBasedPeakBw=upcContractCongestionBasedPeakBw, mbufsClusters=mbufsClusters, AAL5CountingMode=AAL5CountingMode, pnniSpvcSrcTransitNetSel=pnniSpvcSrcTransitNetSel, pshmemConfModule=pshmemConfModule, hwPortCounterReset=hwPortCounterReset, portPPPolicingVBR=portPPPolicingVBR, chanPort=chanPort, q2931Group=q2931Group, pShmem2QsizeforUBR=pShmem2QsizeforUBR, ftPnniDTLTable=ftPnniDTLTable, nsapTopoLinkCbrCapacity=nsapTopoLinkCbrCapacity, nShmem3ConfAal5PacketDropforUBR=nShmem3ConfAal5PacketDropforUBR, asxFabricTemperatureOverTemp=asxFabricTemperatureOverTemp, qosClassExpansionTable=qosClassExpansionTable, q2931AFLastFailureSrcNsap=q2931AFLastFailureSrcNsap, netmodShmemEntry=netmodShmemEntry, pnniPmpSpvccDestNumberOfSpvccs=pnniPmpSpvccDestNumberOfSpvccs, pnniPmpSpvccDestPartyAtmAddr=pnniPmpSpvccDestPartyAtmAddr, ftPnniSummaryPrefixLength=ftPnniSummaryPrefixLength, mgmtGroup=mgmtGroup, portCounterReset=portCounterReset, dualScpSyncState=dualScpSyncState, sigPathCloseTimeout=sigPathCloseTimeout, portPriorityShmem2ConfEntry=portPriorityShmem2ConfEntry, pnniSpvcSrcTable=pnniSpvcSrcTable, nsapTopologyTable=nsapTopologyTable, pnniSpvpcSrcCallingDomain=pnniSpvpcSrcCallingDomain, asxDS3AtmLCDCleared=asxDS3AtmLCDCleared, nShmem2ConfAal5PacketDrop=nShmem2ConfAal5PacketDrop, opathAllocBandwidth=opathAllocBandwidth, asxPsInputDown=asxPsInputDown, switchClockOperStatus=switchClockOperStatus, genericOutputPortConfEntry=genericOutputPortConfEntry, etherChipSetDec21440=etherChipSetDec21440, q2931AFAccepts=q2931AFAccepts, swBoardTopologyGroup=swBoardTopologyGroup, portShmemConfTable=portShmemConfTable, snmpAgentAddressGroup=snmpAgentAddressGroup, moduleCLEI=moduleCLEI, oamGroup=oamGroup, channelShmem3Table=channelShmem3Table, ftPnniDTLIndex=ftPnniDTLIndex, upcContractDoPPPolicing=upcContractDoPPPolicing, swBoardIndex=swBoardIndex, pShmem3ConfBoard=pShmem3ConfBoard, shmem2ConfIndex=shmem2ConfIndex, nShmem3Module=nShmem3Module, asxNonextendedModeWarning=asxNonextendedModeWarning, pathSigProtocol=pathSigProtocol, envFanBanksEntry=envFanBanksEntry, pnniSpvcSrcBearerClass=pnniSpvcSrcBearerClass, vcShmem3CLP1TxCells=vcShmem3CLP1TxCells, vcShmem3CurrentQsize=vcShmem3CurrentQsize, asxJ2LOSDetected=asxJ2LOSDetected, portILMIRemoteIpAddress=portILMIRemoteIpAddress, pnniPmpSpvccSrcRootCallingDomain=pnniPmpSpvccSrcRootCallingDomain, ntSecondaryImportClock=ntSecondaryImportClock, q2931AFTemplateDstPort=q2931AFTemplateDstPort, shmem2ConfEntry=shmem2ConfEntry, vpShmem2UnintentionalLostCells=vpShmem2UnintentionalLostCells, nShmem3ConfCountPackets=nShmem3ConfCountPackets, switchSbprServerAddressTable=switchSbprServerAddressTable, opathSetupErrors=opathSetupErrors, shmem2ConfTable=shmem2ConfTable)
mibBuilder.exportSymbols("Fore-Switch-MIB", pnniSpvpcLowestPriority=pnniSpvpcLowestPriority, appModuleTable=appModuleTable, ochanStatsPort=ochanStatsPort, shmemConfIndex=shmemConfIndex, appModuleOosLed=appModuleOosLed, pnniSpvcDestCalledPort=pnniSpvcDestCalledPort, mbufsZombieAlloc=mbufsZombieAlloc, portOutputCdv=portOutputCdv, ochanStatsIntentionalLostCells=ochanStatsIntentionalLostCells, moduleNumberOfPorts=moduleNumberOfPorts, btmPerPriorityFeature=btmPerPriorityFeature, qosClassExpansionEntry=qosClassExpansionEntry, genericOutputPortConfPrioClp1Threshold=genericOutputPortConfPrioClp1Threshold, pnniPmpSpvccDestPartyEntry=pnniPmpSpvccDestPartyEntry, moduleGroup=moduleGroup, nGenericShmemCustomBCSBoard=nGenericShmemCustomBCSBoard, q2931CallsFailures=q2931CallsFailures, pShmem2Module=pShmem2Module, switchPrimaryClockPort=switchPrimaryClockPort, ntPrimaryExportClock=ntPrimaryExportClock, spvcDestSwitchAddr=spvcDestSwitchAddr, crConfMemAllocFail=crConfMemAllocFail, pnniSpvpcSrcRowStatus=pnniSpvpcSrcRowStatus, q2931MinVCI=q2931MinVCI, sigPathStatsVPI=sigPathStatsVPI, genericOutputPortStatsPrioClp01LostCells=genericOutputPortStatsPrioClp01LostCells, envNumberOfPowerSupplies=envNumberOfPowerSupplies, topologyGroup=topologyGroup, asxDS3LOFCleared=asxDS3LOFCleared, boardTable=boardTable, vcShmem2UnintentionalLostCells=vcShmem2UnintentionalLostCells, obufPriorityName=obufPriorityName, chanrOutputVPI=chanrOutputVPI, ftPnniSummaryEntry=ftPnniSummaryEntry, q2931AFLookupStatus=q2931AFLookupStatus, dualScpAutoRemoveOldFiles=dualScpAutoRemoveOldFiles, nsapTopoLinkUbrVCs=nsapTopoLinkUbrVCs, pathExtEntryStatus=pathExtEntryStatus, portCardState=portCardState, spvcSrcDestSpvcId=spvcSrcDestSpvcId, opathStatsIntentionalLostCells=opathStatsIntentionalLostCells, spvcSrcNumberOfSPVCs=spvcSrcNumberOfSPVCs, nsapTopoLinkCapabilitySet=nsapTopoLinkCapabilitySet, nsapStaticRouteMask=nsapStaticRouteMask, envCPUState=envCPUState, qosClassFwdCtd=qosClassFwdCtd, switchTimingMode=switchTimingMode, pshmemTxCells=pshmemTxCells, boardStatsTable=boardStatsTable, boardVersion=boardVersion, sigPathRemoteAtmAddress=sigPathRemoteAtmAddress, q2931AFFilterTListIndex=q2931AFFilterTListIndex, pshmemQsizeforCBR=pshmemQsizeforCBR, nShmem2CurrentUcastConnections=nShmem2CurrentUcastConnections, channelTable=channelTable, atmIfConnSchedMode=atmIfConnSchedMode, shmemConfEntry=shmemConfEntry, asxDS1PLCPYellowCleared=asxDS1PLCPYellowCleared, swBoardLinkDest=swBoardLinkDest, vciLookupErrors=vciLookupErrors, pathExtQosMetricMaxCtd=pathExtQosMetricMaxCtd, pnniPmpSpvccDestRootNumberOfParties=pnniPmpSpvccDestRootNumberOfParties, opathStatsVPI=opathStatsVPI, sigPathOutputSigService=sigPathOutputSigService, moduleAttachState=moduleAttachState, asxSonetLineAISDetected=asxSonetLineAISDetected, pnniSpvcDestBearerClass=pnniSpvcDestBearerClass, pnniPmpSpvccDestRootAtmAddr=pnniPmpSpvccDestRootAtmAddr, opathExtNrtVbrMetric=opathExtNrtVbrMetric, qosClassValue=qosClassValue, q2931AFLookupNSAPFilterIndex=q2931AFLookupNSAPFilterIndex, q2931NPCallCauseCode=q2931NPCallCauseCode, oamGeneratingPathrEntry=oamGeneratingPathrEntry, genericPortGroupPrioName=genericPortGroupPrioName, netmodGenericShmemEntry=netmodGenericShmemEntry, q2931AFTemplateStatus=q2931AFTemplateStatus, ftPnniDTLVPI=ftPnniDTLVPI, q2931MaxVCI=q2931MaxVCI, vmtVpciMapGroupIndex=vmtVpciMapGroupIndex, confTopoACRPropMult=confTopoACRPropMult, pnniSpvcDestRGroupIndex=pnniSpvcDestRGroupIndex, q2931AdminOperType=q2931AdminOperType, pnniSpvcSrcDtlIndex4=pnniSpvcSrcDtlIndex4, nshmemAssertXACPT=nshmemAssertXACPT, envFabricAlarmTripTemperature=envFabricAlarmTripTemperature, spvcDestOutPort=spvcDestOutPort, asxE3YellowCleared=asxE3YellowCleared, envNumberOfFanBanks=envNumberOfFanBanks, opathCells=opathCells, pshmemConfBoard=pshmemConfBoard, sbprServerAddress5=sbprServerAddress5, opathVbrBufferOverb=opathVbrBufferOverb, q2931AdminMaxVCI=q2931AdminMaxVCI, swBoardPolicingAction=swBoardPolicingAction, atmIfConnSchedOverride=atmIfConnSchedOverride, envCPUsEntry=envCPUsEntry, procUtilValue=procUtilValue, netmodShmem2Group=netmodShmem2Group, pnniSpvcSrcOldRouteCost=pnniSpvcSrcOldRouteCost, hwPortQueueLength=hwPortQueueLength, pnniPmpSpvccDestPartyPort=pnniPmpSpvccDestPartyPort, asxDS3PLCPYellowCleared=asxDS3PLCPYellowCleared, q2931NPCallQosClassFwd=q2931NPCallQosClassFwd, asxJ2AISDetected=asxJ2AISDetected, pnniPmpSpvccDestPartyTransitNetSel=pnniPmpSpvccDestPartyTransitNetSel, shmem2Counters=shmem2Counters, vmtVpciMapPort=vmtVpciMapPort, ochanStatsVCI=ochanStatsVCI, obufBufferSize=obufBufferSize, cbrctState=cbrctState, pathrMaxBandwidth=pathrMaxBandwidth, numBytesAlloc=numBytesAlloc, outputPathExtTable=outputPathExtTable, dualScpCdbSyncMode=dualScpCdbSyncMode, spvcDestSpvcId=spvcDestSpvcId, pnniPmpSpvccSrcRootFwdUpcKey=pnniPmpSpvccSrcRootFwdUpcKey, appModuleApplicationType=appModuleApplicationType, asxE1PLCPLOFDetected=asxE1PLCPLOFDetected, vpiLookupErrors=vpiLookupErrors, shmemConfName=shmemConfName, pnniSpvpcSrcDtlTag=pnniSpvpcSrcDtlTag, opathNumChannels=opathNumChannels, vpShmem2OutputVPI=vpShmem2OutputVPI, pShmem3ConfAltCLPConfigCBR=pShmem3ConfAltCLPConfigCBR, pshmemMaxCDVforCBR=pshmemMaxCDVforCBR, genericOutputPortGroup=genericOutputPortGroup, pShmem2UnintentionalLostCells=pShmem2UnintentionalLostCells, q2931AdminUseNativeE164=q2931AdminUseNativeE164, asxSpansDown=asxSpansDown, syslogDestinationEntry=syslogDestinationEntry, asxE1AtmLCDDetected=asxE1AtmLCDDetected, mcastGroup=mcastGroup, hdcompVpiLookupErrors=hdcompVpiLookupErrors, hwPortVersion=hwPortVersion, pnniPmpSpvccSrcRootFwdQoSClass=pnniPmpSpvccSrcRootFwdQoSClass, pathExtQosMetricEntry=pathExtQosMetricEntry, upcContractSCR01=upcContractSCR01, asxE1AISDetected=asxE1AISDetected, q2931NSAPPingGroup=q2931NSAPPingGroup, vmtVpciMapStatus=vmtVpciMapStatus, switchTimeZone=switchTimeZone, swAlarmRelayTable=swAlarmRelayTable, q2931CreationFailure=q2931CreationFailure, pnniPmpSpvccSrcRootSecondaryVPI=pnniPmpSpvccSrcRootSecondaryVPI, vpShmem2IntentionalLostCells=vpShmem2IntentionalLostCells, sigPathClsUpcContract=sigPathClsUpcContract, envCpuBoard=envCpuBoard, asxE3LOSCleared=asxE3LOSCleared, hwPortErrors=hwPortErrors, envFanBankIndex=envFanBankIndex, pshmemMaxCDVforVBR=pshmemMaxCDVforVBR, nshmemConfAal5PacketDrop=nshmemConfAal5PacketDrop, asxDS1CRCErrCleared=asxDS1CRCErrCleared, asxSonetPathAISDetected=asxSonetPathAISDetected, uptime=uptime, sigPathAALOperType=sigPathAALOperType, vpShmem2OutputPort=vpShmem2OutputPort, pnniSpvcSrcDtlIndex3=pnniSpvcSrcDtlIndex3, sigPathCallsCompletions=sigPathCallsCompletions, chanNumOutputs=chanNumOutputs, q2931AFLastFailureDstPort=q2931AFLastFailureDstPort, pShmem3OverflowLostCells=pShmem3OverflowLostCells, chanServCat=chanServCat, nshmemBoard=nshmemBoard, pShmem2DedicatedQsize=pShmem2DedicatedQsize, asxDS1PLCPLOFCleared=asxDS1PLCPLOFCleared, outputBufferEntry=outputBufferEntry, asxDualScpSwitchOver=asxDualScpSwitchOver, portCACStatus=portCACStatus, softwareLicenseKey=softwareLicenseKey, moduleVersion=moduleVersion, mallocPartId=mallocPartId, pnniSpvccFail=pnniSpvccFail, portAAL5PacketDiscardNRTVBR=portAAL5PacketDiscardNRTVBR, asxSVXCPStateTransferRestarted=asxSVXCPStateTransferRestarted, trapConfGroup=trapConfGroup, pathrServCat=pathrServCat, pnniPmpSpvccSrcPartyEntry=pnniPmpSpvccSrcPartyEntry, netmodAlarmsTable=netmodAlarmsTable, portReceivedCells=portReceivedCells, pnniSpvpcSrcActiveDtlNodeIndex=pnniSpvpcSrcActiveDtlNodeIndex, pnniSpvcSrcCalledVCI=pnniSpvcSrcCalledVCI, outputChannelStatsEntry=outputChannelStatsEntry, q2931SSCOPNoRespTimer=q2931SSCOPNoRespTimer, pShmem3Clp1ThreshforUBR=pShmem3Clp1ThreshforUBR, q2931ConnectedPDefaultAddress=q2931ConnectedPDefaultAddress, q2931TransmittedMessages=q2931TransmittedMessages, appModuleOperState=appModuleOperState, channelShmem2Entry=channelShmem2Entry, asxFanBankDown=asxFanBankDown, moduleSerialNumber=moduleSerialNumber, shmem2TableMemorySize=shmem2TableMemorySize, guardGroup=guardGroup, procUtilMinLoad=procUtilMinLoad, proxyDirMapEntryTable=proxyDirMapEntryTable, mbufsDrain=mbufsDrain, pathExtQosMetricEntryStatus=pathExtQosMetricEntryStatus, pShmem3ConfPort=pShmem3ConfPort, asxDS1YellowCleared=asxDS1YellowCleared, q2931AdminE164AddressResolution=q2931AdminE164AddressResolution, pnniSpvpcSrcRerouteStatus=pnniSpvpcSrcRerouteStatus, nsapTopologyEntry=nsapTopologyEntry, pshmemClpThreshforCBR=pshmemClpThreshforCBR, pnniSpvcSrcFwdUpcKey=pnniSpvcSrcFwdUpcKey, pnniSpvpcSrcRetryCount=pnniSpvpcSrcRetryCount, portGCRAPolicingRTVBR=portGCRAPolicingRTVBR, chanrOutputVCI=chanrOutputVCI, trapDestStatus=trapDestStatus, q2931AdminFtPnniOrigCost=q2931AdminFtPnniOrigCost, pnniSpvcSrcDownReason=pnniSpvcSrcDownReason, pShmem2ConfBoard=pShmem2ConfBoard, opathMinVCI=opathMinVCI, envCpuPromRevision=envCpuPromRevision, proxyDirGroupPrefix=proxyDirGroupPrefix, envCpuProductPartNumber=envCpuProductPartNumber, q2931AdminSigAlloc=q2931AdminSigAlloc, ppShmem2ConfPriority=ppShmem2ConfPriority, boardModel=boardModel, genericOutputPortStatsPrioTransmittedCells=genericOutputPortStatsPrioTransmittedCells, ntModule=ntModule, outputPathExtEntry=outputPathExtEntry, pnniPmpSpvccSrcRootNextPartyIndex=pnniPmpSpvccSrcRootNextPartyIndex, hwPortSpeed=hwPortSpeed, pnniSpvpcDestCalledPort=pnniSpvpcDestCalledPort, pnniPmpSpvccSrcPartyStatus=pnniPmpSpvccSrcPartyStatus, perCallDbgFilterEntry=perCallDbgFilterEntry, ftPnniSummaryTable=ftPnniSummaryTable, pnniSpvcDestTrafficType=pnniSpvcDestTrafficType, q2931AdminOperSigAlloc=q2931AdminOperSigAlloc, boardGroup=boardGroup, vcShmem2OutputPort=vcShmem2OutputPort, procUtilsSystemPartitionID=procUtilsSystemPartitionID, q2931CallingPAddressRestriction=q2931CallingPAddressRestriction, confTopoMinVCAvail=confTopoMinVCAvail, nsapStaticRouteTable=nsapStaticRouteTable, vpShmem3CLP1TxCells=vpShmem3CLP1TxCells, pnniSpvpcSrcActiveDtlIndex=pnniSpvpcSrcActiveDtlIndex, pshmemBoard=pshmemBoard, moduleSpeed=moduleSpeed, envNumberOfTempSensors=envNumberOfTempSensors, pnniSpvcRerouteNumSpvcs=pnniSpvcRerouteNumSpvcs, swAlarmRelayState=swAlarmRelayState, connShmem3Group=connShmem3Group, btSecondaryClockOperStatus=btSecondaryClockOperStatus, trapDest=trapDest, switchProtocolType=switchProtocolType, pnniSpvxRGroupSwover=pnniSpvxRGroupSwover, asxPsOutputUp=asxPsOutputUp, q2931ReceivedMessages=q2931ReceivedMessages, proxyDirMapGroup=proxyDirMapGroup, q2931AFLookupSrcNsap=q2931AFLookupSrcNsap, asxE3PLCPYellowCleared=asxE3PLCPYellowCleared, portCardFlavor=portCardFlavor, asxQ2931Up=asxQ2931Up)
mibBuilder.exportSymbols("Fore-Switch-MIB", vpGroupPort=vpGroupPort, spvcDestStatus=spvcDestStatus, sbprServerRowStatus=sbprServerRowStatus, asxSonetLOFDetected=asxSonetLOFDetected, proxyDirGroupStatus=proxyDirGroupStatus, pathExtUbrMetric=pathExtUbrMetric, nShmem2CellMemorySize=nShmem2CellMemorySize, poolGroup=poolGroup, pnniSpvpcSrcSusceptClip=pnniSpvpcSrcSusceptClip, proxyDirGroupGroup=proxyDirGroupGroup, q2931AFTemplateDstNsapMask=q2931AFTemplateDstNsapMask, switchDebounceIndex=switchDebounceIndex, pnniPmpSpvccDestPartyAssignedVCI=pnniPmpSpvccDestPartyAssignedVCI, netmodGenericShmemGroup=netmodGenericShmemGroup, opathUptime=opathUptime, ochanStatsTransmittedCells=ochanStatsTransmittedCells, sbprServerAddressIndexName=sbprServerAddressIndexName, pnniSpvpcBackoffInterval=pnniSpvpcBackoffInterval, asxJ2AtmLCDCleared=asxJ2AtmLCDCleared, dualScpManualSyncRequest=dualScpManualSyncRequest, pathNumChannels=pathNumChannels, revChanrOutputVCI=revChanrOutputVCI, chanrStatus=chanrStatus, numBlocksAlloc=numBlocksAlloc, pnniSpvcDestAssignedVCI=pnniSpvcDestAssignedVCI, q2931LastChangeTime=q2931LastChangeTime, asxJ2LOFDetected=asxJ2LOFDetected, spvcSrcTable=spvcSrcTable, pShmem3Module=pShmem3Module, snmp=snmp, opathLoopVPI=opathLoopVPI, q2931PublicGroup=q2931PublicGroup, portAdminStatus=portAdminStatus, pathrSigProtocol=pathrSigProtocol, pShmem3ConfAltCLPConfigUBR=pShmem3ConfAltCLPConfigUBR, nshmemCurrentSharedMemory=nshmemCurrentSharedMemory, pnniSpvcSrcCalledVPI=pnniSpvcSrcCalledVPI, pathRouteTable=pathRouteTable, spvcDestOutVPI=spvcDestOutVPI, q2931NPPingPktCount=q2931NPPingPktCount, swAlarmReset=swAlarmReset, q2931AFLastFailureDstVPI=q2931AFLastFailureDstVPI, sigPathSpansTransmittedMessages=sigPathSpansTransmittedMessages, upcContractSCR=upcContractSCR, pnniSpvcSrcCallingVCI=pnniSpvcSrcCallingVCI, q2931SendCallProc=q2931SendCallProc, upcContractPoliceScheme=upcContractPoliceScheme, pnniSpvpcSrcBckQoSClass=pnniSpvpcSrcBckQoSClass, pshmemLostCells=pshmemLostCells, swAlarmACOState=swAlarmACOState, q2931SigReservedBW=q2931SigReservedBW, portCDVT=portCDVT, opathStatsPort=opathStatsPort, portAISRDIGeneration=portAISRDIGeneration, nShmem2CustomBCSValue=nShmem2CustomBCSValue, pShmem3AtmInterfaceIndex=pShmem3AtmInterfaceIndex, pnniPmpSpvccSrcRootTable=pnniPmpSpvccSrcRootTable, portRtVbrBufferOverb=portRtVbrBufferOverb, q2931AFLookupEntry=q2931AFLookupEntry, genericPortGroupConfTable=genericPortGroupConfTable, mbufsSpace=mbufsSpace, nsapStaticRouteEntry=nsapStaticRouteEntry, asxAtmIfGroup=asxAtmIfGroup, pathExtRtVbrMetric=pathExtRtVbrMetric, portInputCdv=portInputCdv, pathExtQosMetricTable=pathExtQosMetricTable, asxDS1LOFCleared=asxDS1LOFCleared, pnniPmpSpvccSrcRootEntry=pnniPmpSpvccSrcRootEntry, nShmem3ConfEfciOn=nShmem3ConfEfciOn, pnniPmpSpvccSrcPartyTable=pnniPmpSpvccSrcPartyTable, q2931NPMeasureRoundTripDelay=q2931NPMeasureRoundTripDelay, pnniSpvpcSrcCallingPort=pnniSpvpcSrcCallingPort, nsapTopoLinkDestPort=nsapTopoLinkDestPort, asxPsInputUp=asxPsInputUp, asxE1YellowDetected=asxE1YellowDetected, ppShmem2ConfPort=ppShmem2ConfPort, asxE1PLCPYellowDetected=asxE1PLCPYellowDetected, hdcompDescr=hdcompDescr, shmem2McastConnections=shmem2McastConnections, pShmem3ConfPVCSchedulingCBR=pShmem3ConfPVCSchedulingCBR, pnniSpvcPaceNumSpvcs=pnniSpvcPaceNumSpvcs, nsapTopoLinkCost=nsapTopoLinkCost, hdcompIndex=hdcompIndex, q2931VpCapability=q2931VpCapability, pathNumOutputs=pathNumOutputs, nsapTopoLinkVbrFifo=nsapTopoLinkVbrFifo, portNumPathsOut=portNumPathsOut, cbrctConfTable=cbrctConfTable, q2931AdminrtvbrCalls=q2931AdminrtvbrCalls, spvcSrcEntry=spvcSrcEntry, nShmem2ConfAal5PacketDropforUBR=nShmem2ConfAal5PacketDropforUBR, q2931AdmincbrCalls=q2931AdmincbrCalls, vcShmem3OutputPort=vcShmem3OutputPort, moduleProductNumber=moduleProductNumber, trapDestTable=trapDestTable, asxDS1LOSDetected=asxDS1LOSDetected, pnniPmpSpvccSrcPartyLastChangeTime=pnniPmpSpvccSrcPartyLastChangeTime, q2931AdminOutgoingNSAPFilterIndex=q2931AdminOutgoingNSAPFilterIndex, pnniPmpSpvccDestPartyRGroupIndex=pnniPmpSpvccDestPartyRGroupIndex, sigPathCallsFailures=sigPathCallsFailures, portMaxPathsOut=portMaxPathsOut, pShmem3QsizeforUBR=pShmem3QsizeforUBR, pnniSpvpcDestSusceptClip=pnniSpvpcDestSusceptClip, pnniSpvpcSrcCalledPort=pnniSpvpcSrcCalledPort, pnniSpvpcDown=pnniSpvpcDown, pnniSpvpcSrcCalledAtmAddr=pnniSpvpcSrcCalledAtmAddr, sigPathSpansReceivedMessages=sigPathSpansReceivedMessages, mcastSpaceIndex=mcastSpaceIndex, hwPortModule=hwPortModule, swAlarmRelayEntry=swAlarmRelayEntry, nShmem3CellMemorySize=nShmem3CellMemorySize, vcShmem3CLP01LostCells=vcShmem3CLP01LostCells, nsapTopoLinkDestMask=nsapTopoLinkDestMask, portAAL5PacketDiscardCBR=portAAL5PacketDiscardCBR, sigPathStatsPort=sigPathStatsPort, pnniSpvpcFail=pnniSpvpcFail, snmpAgentBoardNumber=snmpAgentBoardNumber, pnniSpvpcSrcFwdQoSClass=pnniSpvpcSrcFwdQoSClass, opathUsedBandwidth=opathUsedBandwidth, sigPathAALType=sigPathAALType, upcContractAAL5CountingMode=upcContractAAL5CountingMode, qosClassBackCdv=qosClassBackCdv, switchGMTime=switchGMTime, portShmemTable=portShmemTable, q2931AFTemplateIndex=q2931AFTemplateIndex, pnniPmpSpvcDown=pnniPmpSpvcDown, upcContractPCR=upcContractPCR, genericPortGroupAal5PacketDrop=genericPortGroupAal5PacketDrop, hwPortCounterResetTime=hwPortCounterResetTime, pathrInputVPI=pathrInputVPI, envCpuDRAMSize=envCpuDRAMSize, boardTimingTable=boardTimingTable, q2931NPPingStatsPktsReceived=q2931NPPingStatsPktsReceived, opathRtVbrOverbooking=opathRtVbrOverbooking, ochanStatsTransmittedPackets=ochanStatsTransmittedPackets, boardControlPort=boardControlPort, q2931AdminOperSigMode=q2931AdminOperSigMode, pnniSpvcSrcLastLocation=pnniSpvcSrcLastLocation, genericOutputPortStatsPort=genericOutputPortStatsPort, pnniSpvpcSrcOldRouteCost=pnniSpvpcSrcOldRouteCost, chanAllocBandwidth=chanAllocBandwidth, vpShmem3CLP0TxCells=vpShmem3CLP0TxCells, appModuleBootSoftwareVersion=appModuleBootSoftwareVersion, pnniSpvcSrcBckUpcKey=pnniSpvcSrcBckUpcKey, pnniPmpSpvccSrcPartyVPI=pnniPmpSpvccSrcPartyVPI, q2931MaxSvccVPI=q2931MaxSvccVPI, powerGroup=powerGroup, swBoardEntry=swBoardEntry, pnniSpvxcRGroupEntry=pnniSpvxcRGroupEntry, q2931AdminMinVCI=q2931AdminMinVCI, pShmem3Clp01ThreshforABR=pShmem3Clp01ThreshforABR, appModuleStatusText=appModuleStatusText, confTopoSwitchPrefix=confTopoSwitchPrefix, ifIndexMapEntry=ifIndexMapEntry, procUtilMonInterval=procUtilMonInterval, signalingGroup=signalingGroup, pShmem2AtmInterfaceIndex=pShmem2AtmInterfaceIndex, switchReservedPMPMaxVCI=switchReservedPMPMaxVCI, revChanrOutputPort=revChanrOutputPort, proxyDirGroupIndex=proxyDirGroupIndex, nsapNetworkPrefixValue=nsapNetworkPrefixValue, asxE1LOFDetected=asxE1LOFDetected, swAlarmMinorCategory=swAlarmMinorCategory, portShmemEntry=portShmemEntry, envPowerSupply5VoltState=envPowerSupply5VoltState, nShmem2CurrentSharedMemory=nShmem2CurrentSharedMemory, vpShmem3UnintentionalLostCells=vpShmem3UnintentionalLostCells, swAlarmStatus=swAlarmStatus, proxyDirMapEntryGroup=proxyDirMapEntryGroup, envFanBankState=envFanBankState, sbprServerMaxHops=sbprServerMaxHops, dualScpRedundancyState=dualScpRedundancyState, nsapStaticRoutePort=nsapStaticRoutePort, snmpReadCommunity=snmpReadCommunity, swAlarmMajorCategory=swAlarmMajorCategory, q2931ILMIRegistration=q2931ILMIRegistration, perCallDbgFilterIndex=perCallDbgFilterIndex, portInputSetupErrors=portInputSetupErrors, q2931UNIConfigVersion=q2931UNIConfigVersion, pShmem2ClpThreshforUBR=pShmem2ClpThreshforUBR, asxJ2RLOCDetected=asxJ2RLOCDetected, sigPathStatsTable=sigPathStatsTable, oamReceivedPathRDICells=oamReceivedPathRDICells, pnniSpvcDestNumberOfSPVCs=pnniSpvcDestNumberOfSPVCs, confTopoSpansPnniBorderSwitch=confTopoSpansPnniBorderSwitch, pShmem3Clp01ThreshforCBR=pShmem3Clp01ThreshforCBR, q2931AFLookupTemplate=q2931AFLookupTemplate, swBoardCDV=swBoardCDV, asxDS3PbitPerrCleared=asxDS3PbitPerrCleared, swAlarmType=swAlarmType, asxJ2YellowDetected=asxJ2YellowDetected, netmodGenericShmemTable=netmodGenericShmemTable, vmtVpciMapEntry=vmtVpciMapEntry, pnniSpvcSrcCallingDomain=pnniSpvcSrcCallingDomain, outputPathChannelSchedEntry=outputPathChannelSchedEntry, asxTP25LOSCleared=asxTP25LOSCleared, dualScpFailover=dualScpFailover, boardHDCOMPAsicVersion=boardHDCOMPAsicVersion, boardIndex=boardIndex, opathStatsTransmittedCells=opathStatsTransmittedCells, swBoardATMLayerOAM=swBoardATMLayerOAM, ftPnniSummaryState=ftPnniSummaryState, linkSrc=linkSrc, confTopoPGSNReachCostMethod=confTopoPGSNReachCostMethod, pnniPmpSpvccSrcRootIndex=pnniPmpSpvccSrcRootIndex, pnniSpvcSrcRGroupIndex=pnniSpvcSrcRGroupIndex, q2931CallingPAddressPresentation=q2931CallingPAddressPresentation, pnniSpvpcSrcLastChangeTime=pnniSpvpcSrcLastChangeTime, nShmem3ConfVcCLP01ForABR=nShmem3ConfVcCLP01ForABR, genericOutputPortStatsBoard=genericOutputPortStatsBoard, portGCRAPolicingVBR=portGCRAPolicingVBR, pnniSpvxcRGroupName=pnniSpvxcRGroupName, opathNrtVbrBufferOverb=opathNrtVbrBufferOverb, upcContractDoPacketDiscard=upcContractDoPacketDiscard, syslogConsoleState=syslogConsoleState, pnniSpvpcDestCalledAtmAddr=pnniSpvpcDestCalledAtmAddr, q2931MaxSvpcVPI=q2931MaxSvpcVPI, portShmem2ConfTable=portShmem2ConfTable, oamGeneratingChannelEntry=oamGeneratingChannelEntry, q2931AdminEntry=q2931AdminEntry, netmodShmem3Table=netmodShmem3Table, pathShmem3Table=pathShmem3Table, sigPathCallsRejections=sigPathCallsRejections, AtmOrigPathSchedMode=AtmOrigPathSchedMode, netmodShmem2CustomBCSTable=netmodShmem2CustomBCSTable, dualScp=dualScp, atmIfConnSchedTable=atmIfConnSchedTable, q2931NPCallBearerClass=q2931NPCallBearerClass, q2931NPCallVerbose=q2931NPCallVerbose, boardStatsEntry=boardStatsEntry, switchSecondaryClockPort=switchSecondaryClockPort, pshmemPriority=pshmemPriority, pnniSpvxcRGroupTable=pnniSpvxcRGroupTable, asxExtendedModeViolation=asxExtendedModeViolation, oamReceivedPathTable=oamReceivedPathTable, proxyDirMapAESA=proxyDirMapAESA, switchDebounceTable=switchDebounceTable, swAlarmMajorRelayState=swAlarmMajorRelayState, channelShmem3Entry=channelShmem3Entry, portOperStatus=portOperStatus, sbprServerAddress4=sbprServerAddress4, moduleHwMinorRev=moduleHwMinorRev, pnniSpvpcDestIndex=pnniSpvpcDestIndex, spvcDestOutVCI=spvcDestOutVCI, pnniSpvxcRGroupAutoPVCSwitchover=pnniSpvxcRGroupAutoPVCSwitchover, ntSecondaryRecoveredClock=ntSecondaryRecoveredClock, serviceCategoryEntry=serviceCategoryEntry, portCardEntry=portCardEntry, snmpRemoteSetsStatus=snmpRemoteSetsStatus, upcContractUseAltCLPThreshold=upcContractUseAltCLPThreshold, asxDS1AISDetected=asxDS1AISDetected, pnniSpvcDestCallingVPI=pnniSpvcDestCallingVPI, pnniSpvxcRGroupActivePort=pnniSpvxcRGroupActivePort, asxQ2931CallClearing=asxQ2931CallClearing)
mibBuilder.exportSymbols("Fore-Switch-MIB", oamGeneratingOpathEntry=oamGeneratingOpathEntry, pnniSpvcSrcNumberOfSPVCs=pnniSpvcSrcNumberOfSPVCs, pShmem2ClpThreshforVBR=pShmem2ClpThreshforVBR, chanRejectedCells=chanRejectedCells, pnniSpvpcDestEntry=pnniSpvpcDestEntry, q2931AFTemplateDstVPI=q2931AFTemplateDstVPI, obufName=obufName, q2931CallsCompletions=q2931CallsCompletions, linkTable=linkTable, numBlocksFree=numBlocksFree, pnniSpvpcSrcLastFailCause=pnniSpvpcSrcLastFailCause, pnniSpvxcRGroupIndex=pnniSpvxcRGroupIndex, envCpuFlashSize=envCpuFlashSize, q2931NPCallEntry=q2931NPCallEntry, qosClassExpansionEntryStatus=qosClassExpansionEntryStatus, nsapGroup=nsapGroup, opathMaxChannels=opathMaxChannels, asxDS3FERFCleared=asxDS3FERFCleared, asxSonetAtmLCDDetected=asxSonetAtmLCDDetected, pShmem2QsizeforABR=pShmem2QsizeforABR, asxDS1AtmLCDCleared=asxDS1AtmLCDCleared, genericOutputPortStatsPrioName=genericOutputPortStatsPrioName, guardTable=guardTable, portMaxBandwidthIn=portMaxBandwidthIn, upcContractGroup=upcContractGroup, q2931AdminRemoteIpAddress=q2931AdminRemoteIpAddress, vmtVpciMapVPCI=vmtVpciMapVPCI, dualScpSwitchOverThreshold=dualScpSwitchOverThreshold, shmemMcastConnections=shmemMcastConnections, mcastSpaceName=mcastSpaceName, cbrctNoOfIdlePatterns=cbrctNoOfIdlePatterns, pnniSpvpcSrcStatus=pnniSpvpcSrcStatus, genericOutputPortConfPrioDedicatedQSize=genericOutputPortConfPrioDedicatedQSize, environment=environment, upcContractEntryStatus=upcContractEntryStatus, chanQosPoliceScheme=chanQosPoliceScheme, pnniSpvcTrapMode=pnniSpvcTrapMode, asxPortCardDown=asxPortCardDown, obufQueueLength=obufQueueLength, trapNumberOfDest=trapNumberOfDest, pnniPmpSpvccSrcRootStatus=pnniPmpSpvccSrcRootStatus, crXfrSecondaryXfrFailed=crXfrSecondaryXfrFailed, atmIfConnSchedServCat=atmIfConnSchedServCat, sigPathCDV=sigPathCDV, asxFabricDown=asxFabricDown, nShmem3ConfSharedMemory=nShmem3ConfSharedMemory, portMaxPathsIn=portMaxPathsIn, q2931AdminabrCalls=q2931AdminabrCalls, btmPerPriorityPriority=btmPerPriorityPriority, q2931AFFilterEntry=q2931AFFilterEntry, q2931AFRejectKnown=q2931AFRejectKnown, nShmem2Board=nShmem2Board, pShmem2TxCells=pShmem2TxCells, perCallDbgFilterTemplateId=perCallDbgFilterTemplateId, portPathOverbooking=portPathOverbooking, opathExtEntryStatus=opathExtEntryStatus, btmPerPriorityValue=btmPerPriorityValue, pathExtTable=pathExtTable, q2931AdminnrtvbrCalls=q2931AdminnrtvbrCalls, asxSonetPathLOPCleared=asxSonetPathLOPCleared, mbufsSoNameAlloc=mbufsSoNameAlloc, envCpuBoardRevision=envCpuBoardRevision, outputPathEntry=outputPathEntry, asxAtmIfEntry=asxAtmIfEntry, pnniPmpSpvccSrcPartyQosIndex=pnniPmpSpvccSrcPartyQosIndex, pnniPmpSpvccSrcNumberOfSpvccs=pnniPmpSpvccSrcNumberOfSpvccs, hwPortTAXILoopback=hwPortTAXILoopback, hwPortRxLED=hwPortRxLED, pnniSpvpcDestCallingPort=pnniSpvpcDestCallingPort, swBoardGroup=swBoardGroup, ifIndexNameGroup=ifIndexNameGroup, asxDS1YellowDetected=asxDS1YellowDetected, boardStatsIndex=boardStatsIndex, switchSbprServerAddressEntry=switchSbprServerAddressEntry, q2931AFTemplateTable=q2931AFTemplateTable, asxDS3AISDetected=asxDS3AISDetected, portShmemGroup=portShmemGroup)
