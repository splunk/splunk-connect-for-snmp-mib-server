#
# PySNMP MIB module ATTO6500N-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ATTO6500N-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:15:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
MibIdentifier, Gauge32, iso, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter32, ObjectIdentity, Integer32, IpAddress, TimeTicks, NotificationType, ModuleIdentity, Counter64, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Gauge32", "iso", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter32", "ObjectIdentity", "Integer32", "IpAddress", "TimeTicks", "NotificationType", "ModuleIdentity", "Counter64", "Unsigned32")
TimeInterval, DateAndTime, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeInterval", "DateAndTime", "DisplayString", "TextualConvention")
bridge = ModuleIdentity((1, 3, 6, 1, 4, 1, 4547, 2, 3))
bridge.setRevisions(('2013-04-19 00:00', '2013-04-16 00:00',))
if mibBuilder.loadTexts: bridge.setLastUpdated('201304190000Z')
if mibBuilder.loadTexts: bridge.setOrganization('ATTO Technology, Inc.')
attotech = MibIdentifier((1, 3, 6, 1, 4, 1, 4547))
attoProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 4547, 1))
attoMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 4547, 2))
attoModules = MibIdentifier((1, 3, 6, 1, 4, 1, 4547, 3))
attoAgentCapability = MibIdentifier((1, 3, 6, 1, 4, 1, 4547, 4))
bridgeTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4547, 2, 3, 0))
bridgeIdentity = MibIdentifier((1, 3, 6, 1, 4, 1, 4547, 2, 3, 1))
bridgeChassis = MibIdentifier((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2))
bridgePorts = MibIdentifier((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3))
bridgeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 4547, 2, 3, 4))
bridgeTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 4547, 2, 3, 5))
bridgeMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4547, 2, 3, 6))
bridgeMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4547, 2, 3, 6, 1))
bridgeMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4547, 2, 3, 6, 2))
class DisplayWWN(TextualConvention, OctetString):
    status = 'current'
    displayHint = '1x '
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class QSFPTech(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 1, 2, 3))
    namedValues = NamedValues(("unknown", -1), ("optical", 1), ("activecopper", 2), ("passivecopper", 3))

class PHYStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 1, 2))
    namedValues = NamedValues(("unknown", -1), ("online", 1), ("offline", 2))

bridgeBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4547, 2, 3, 6, 1, 1)).setObjects(("ATTO6500N-MIB", "bridgeIdentityBasicGroup"), ("ATTO6500N-MIB", "bridgeChassisBasicGroup"), ("ATTO6500N-MIB", "bridgFcPortInfoBasicGroup"), ("ATTO6500N-MIB", "bridgeFcPortStatisicsBasicGroup"), ("ATTO6500N-MIB", "bridgeSasPortInfoBasicGroup"), ("ATTO6500N-MIB", "bridgeSasPortStatisicsBasicGroup"), ("ATTO6500N-MIB", "bridgeConfigBasicGroup"), ("ATTO6500N-MIB", "bridgeTrapInfoBasicGroup"), ("ATTO6500N-MIB", "bridgeTrapsBasicGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bridgeBasicCompliance = bridgeBasicCompliance.setStatus('current')
bridgeIdentityBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4547, 2, 3, 6, 2, 1)).setObjects(("ATTO6500N-MIB", "bridgeUniqueId"), ("ATTO6500N-MIB", "vendorID"), ("ATTO6500N-MIB", "modelName"), ("ATTO6500N-MIB", "primaryFirmwareRevision"), ("ATTO6500N-MIB", "primaryFirmwareBuildDate"), ("ATTO6500N-MIB", "hardwareVersion"), ("ATTO6500N-MIB", "secondaryFirmwareRevision"), ("ATTO6500N-MIB", "secondaryFirmwareBuildDate"), ("ATTO6500N-MIB", "serialNumber"), ("ATTO6500N-MIB", "bridgeName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bridgeIdentityBasicGroup = bridgeIdentityBasicGroup.setStatus('current')
bridgeChassisBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4547, 2, 3, 6, 2, 2)).setObjects(("ATTO6500N-MIB", "lastReboot"), ("ATTO6500N-MIB", "uptime"), ("ATTO6500N-MIB", "lastRebootReason"), ("ATTO6500N-MIB", "minimumOperatingTemp"), ("ATTO6500N-MIB", "maximumOperatingTemp"), ("ATTO6500N-MIB", "temperatureHighAlertSetting"), ("ATTO6500N-MIB", "temperatureLowAlertSetting"), ("ATTO6500N-MIB", "chassisTemperature"), ("ATTO6500N-MIB", "chassisTemperatureStatus"), ("ATTO6500N-MIB", "dramSingleBitErrorCount"), ("ATTO6500N-MIB", "chassisThroughputStatus"), ("ATTO6500N-MIB", "fcSFPVendor"), ("ATTO6500N-MIB", "fcSFPSerialNum"), ("ATTO6500N-MIB", "fcSFPPartNum"), ("ATTO6500N-MIB", "fcSFPDataRateCapability"), ("ATTO6500N-MIB", "sasQSFPVendor"), ("ATTO6500N-MIB", "sasQSFPSerialNum"), ("ATTO6500N-MIB", "sasQSFPType"), ("ATTO6500N-MIB", "sasQSFPPartNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bridgeChassisBasicGroup = bridgeChassisBasicGroup.setStatus('current')
bridgFcPortInfoBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4547, 2, 3, 6, 2, 3)).setObjects(("ATTO6500N-MIB", "fcPortPortNumber"), ("ATTO6500N-MIB", "fcPortOperationalState"), ("ATTO6500N-MIB", "fcPortAdminState"), ("ATTO6500N-MIB", "fcPortDataRateNegotiated"), ("ATTO6500N-MIB", "fcPortConnModeNegotiated"), ("ATTO6500N-MIB", "fcPortDataRateConfigured"), ("ATTO6500N-MIB", "fcPortConnModeConfigured"), ("ATTO6500N-MIB", "fcPortDataRateCapability"), ("ATTO6500N-MIB", "fcPortNodeName"), ("ATTO6500N-MIB", "fcPortPortName"), ("ATTO6500N-MIB", "fcPortPeerName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bridgFcPortInfoBasicGroup = bridgFcPortInfoBasicGroup.setStatus('current')
bridgeFcPortStatisicsBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4547, 2, 3, 6, 2, 4)).setObjects(("ATTO6500N-MIB", "fcStatsTxWords"), ("ATTO6500N-MIB", "fcStatsRxWords"), ("ATTO6500N-MIB", "fcStatsTimeSinceReset"), ("ATTO6500N-MIB", "fcStatsErrLinkFailure"), ("ATTO6500N-MIB", "fcStatsErrLossOfSync"), ("ATTO6500N-MIB", "fcStatsErrInvalidCRC"), ("ATTO6500N-MIB", "fcStatsErrInvalidTxWords"), ("ATTO6500N-MIB", "fcStatsErrLipCount"), ("ATTO6500N-MIB", "fcStatsErrNOSCount"), ("ATTO6500N-MIB", "fcStatsErrSignalLoss"), ("ATTO6500N-MIB", "fcStatsErrPrimitive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bridgeFcPortStatisicsBasicGroup = bridgeFcPortStatisicsBasicGroup.setStatus('current')
bridgeSasPortInfoBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4547, 2, 3, 6, 2, 5)).setObjects(("ATTO6500N-MIB", "sasPortPortNumber"), ("ATTO6500N-MIB", "sasPortOperationalState"), ("ATTO6500N-MIB", "sasPortPhy1State"), ("ATTO6500N-MIB", "sasPortPhy2State"), ("ATTO6500N-MIB", "sasPortPhy3State"), ("ATTO6500N-MIB", "sasPortPhy4State"), ("ATTO6500N-MIB", "sasPortAdminState"), ("ATTO6500N-MIB", "sasPortDataRateCapability"), ("ATTO6500N-MIB", "sasPortDataRateNegotiated"), ("ATTO6500N-MIB", "sasPortAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bridgeSasPortInfoBasicGroup = bridgeSasPortInfoBasicGroup.setStatus('current')
bridgeSasPortStatisicsBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4547, 2, 3, 6, 2, 6)).setObjects(("ATTO6500N-MIB", "sasPhyStatsTimeSinceReset"), ("ATTO6500N-MIB", "sasPhyStatsErrLinkChanged"), ("ATTO6500N-MIB", "sasPhyStatsErrInvalidCRC"), ("ATTO6500N-MIB", "sasPhyStatsErrPhyReset"), ("ATTO6500N-MIB", "sasPhyStatsErrLossOfSync"), ("ATTO6500N-MIB", "sasPhyStatsErrDisparityCount"), ("ATTO6500N-MIB", "sasPhyStatsErrInvalidDwords"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bridgeSasPortStatisicsBasicGroup = bridgeSasPortStatisicsBasicGroup.setStatus('current')
bridgeConfigBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4547, 2, 3, 6, 2, 7)).setObjects(("ATTO6500N-MIB", "trapsEnabled"), ("ATTO6500N-MIB", "snmpUpdatesEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bridgeConfigBasicGroup = bridgeConfigBasicGroup.setStatus('current')
bridgeTrapInfoBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4547, 2, 3, 6, 2, 8)).setObjects(("ATTO6500N-MIB", "trapMaxClients"), ("ATTO6500N-MIB", "trapClientIpAddress"), ("ATTO6500N-MIB", "trapClientPort"), ("ATTO6500N-MIB", "trapClientFilter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bridgeTrapInfoBasicGroup = bridgeTrapInfoBasicGroup.setStatus('current')
bridgeTrapsBasicGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 4547, 2, 3, 6, 2, 9)).setObjects(("ATTO6500N-MIB", "bridgeTemperatureWarning"), ("ATTO6500N-MIB", "fcPortTransition"), ("ATTO6500N-MIB", "sasPortTransition"), ("ATTO6500N-MIB", "bridgeThroughputWarning"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bridgeTrapsBasicGroup = bridgeTrapsBasicGroup.setStatus('current')
bridgeUniqueId = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 1, 1), DisplayWWN()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeUniqueId.setStatus('current')
vendorID = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vendorID.setStatus('current')
modelName = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modelName.setStatus('current')
primaryFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: primaryFirmwareRevision.setStatus('current')
primaryFirmwareBuildDate = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 1, 5), DateAndTime().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: primaryFirmwareBuildDate.setStatus('current')
hardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareVersion.setStatus('current')
secondaryFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: secondaryFirmwareRevision.setStatus('current')
secondaryFirmwareBuildDate = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 1, 8), DateAndTime().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: secondaryFirmwareBuildDate.setStatus('current')
serialNumber = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumber.setStatus('current')
bridgeName = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeName.setStatus('current')
lastReboot = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 1), DateAndTime().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastReboot.setStatus('current')
uptime = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 2), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uptime.setStatus('current')
lastRebootReason = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastRebootReason.setStatus('current')
minimumOperatingTemp = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minimumOperatingTemp.setStatus('current')
maximumOperatingTemp = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maximumOperatingTemp.setStatus('current')
temperatureHighAlertSetting = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureHighAlertSetting.setStatus('current')
temperatureLowAlertSetting = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureLowAlertSetting.setStatus('current')
chassisTemperature = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTemperature.setStatus('current')
chassisTemperatureStatus = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTemperatureStatus.setStatus('current')
dramSingleBitErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dramSingleBitErrorCount.setStatus('current')
chassisThroughputStatus = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisThroughputStatus.setStatus('current')
fcSFPInfoTable = MibTable((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 12), )
if mibBuilder.loadTexts: fcSFPInfoTable.setStatus('current')
sasQSFPInfoTable = MibTable((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 13), )
if mibBuilder.loadTexts: sasQSFPInfoTable.setStatus('current')
fcSFPInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 12, 1), ).setIndexNames((0, "ATTO6500N-MIB", "fcSFPIndex"))
if mibBuilder.loadTexts: fcSFPInfoEntry.setStatus('current')
fcSFPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: fcSFPIndex.setStatus('current')
fcSFPVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 12, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcSFPVendor.setStatus('current')
fcSFPSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 12, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcSFPSerialNum.setStatus('current')
fcSFPPartNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 12, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcSFPPartNum.setStatus('current')
fcSFPDataRateCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 8, 16))).clone(namedValues=NamedValues(("gb2", 2), ("gb4", 4), ("gb8", 8), ("gb16", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcSFPDataRateCapability.setStatus('current')
sasQSFPInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 13, 1), ).setIndexNames((0, "ATTO6500N-MIB", "sasQSFPIndex"))
if mibBuilder.loadTexts: sasQSFPInfoEntry.setStatus('current')
sasQSFPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: sasQSFPIndex.setStatus('current')
sasQSFPVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 13, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sasQSFPVendor.setStatus('current')
sasQSFPSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 13, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sasQSFPSerialNum.setStatus('current')
sasQSFPType = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 13, 1, 4), QSFPTech()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sasQSFPType.setStatus('current')
sasQSFPPartNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 2, 13, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sasQSFPPartNum.setStatus('current')
fcPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 1), )
if mibBuilder.loadTexts: fcPortInfoTable.setStatus('current')
fcPortStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 2), )
if mibBuilder.loadTexts: fcPortStatisticsTable.setStatus('current')
sasPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 3), )
if mibBuilder.loadTexts: sasPortInfoTable.setStatus('current')
sasPhyStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 4), )
if mibBuilder.loadTexts: sasPhyStatisticsTable.setStatus('current')
fcPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 1, 1), ).setIndexNames((0, "ATTO6500N-MIB", "fcPortIndex"))
if mibBuilder.loadTexts: fcPortInfoEntry.setStatus('current')
fcPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: fcPortIndex.setStatus('current')
fcPortPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPortPortNumber.setStatus('current')
fcPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("unknown", -1), ("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPortOperationalState.setStatus('current')
fcPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("unknown", -1), ("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPortAdminState.setStatus('current')
fcPortDataRateNegotiated = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 2, 4, 8))).clone(namedValues=NamedValues(("unknown", -1), ("gb2", 2), ("gb4", 4), ("gb8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPortDataRateNegotiated.setStatus('current')
fcPortConnModeNegotiated = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("unknown", -1), ("loop", 1), ("ptp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPortConnModeNegotiated.setStatus('current')
fcPortDataRateConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 2, 4, 8))).clone(namedValues=NamedValues(("auto", -1), ("gb2", 2), ("gb4", 4), ("gb8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPortDataRateConfigured.setStatus('current')
fcPortConnModeConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("loop", 1), ("ptp", 2), ("looppreferred", 3), ("ptppreferred", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPortConnModeConfigured.setStatus('current')
fcPortDataRateCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 8))).clone(namedValues=NamedValues(("gb2", 2), ("gb4", 4), ("gb8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPortDataRateCapability.setStatus('current')
fcPortNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 1, 1, 10), DisplayWWN()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPortNodeName.setStatus('current')
fcPortPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 1, 1, 11), DisplayWWN()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPortPortName.setStatus('current')
fcPortPeerName = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 1, 1, 12), DisplayWWN()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPortPeerName.setStatus('current')
fcPortStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 2, 1), ).setIndexNames((0, "ATTO6500N-MIB", "fcStatsIndex"))
if mibBuilder.loadTexts: fcPortStatisticsEntry.setStatus('current')
fcStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: fcStatsIndex.setStatus('current')
fcStatsTxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 2, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcStatsTxWords.setStatus('current')
fcStatsRxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 2, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcStatsRxWords.setStatus('current')
fcStatsTimeSinceReset = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 2, 1, 4), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcStatsTimeSinceReset.setStatus('current')
fcStatsErrLinkFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 2, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcStatsErrLinkFailure.setStatus('current')
fcStatsErrLossOfSync = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 2, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcStatsErrLossOfSync.setStatus('current')
fcStatsErrInvalidCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 2, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcStatsErrInvalidCRC.setStatus('current')
fcStatsErrInvalidTxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 2, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcStatsErrInvalidTxWords.setStatus('current')
fcStatsErrLipCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 2, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcStatsErrLipCount.setStatus('current')
fcStatsErrNOSCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 2, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcStatsErrNOSCount.setStatus('current')
fcStatsErrSignalLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 2, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcStatsErrSignalLoss.setStatus('current')
fcStatsErrPrimitive = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 2, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcStatsErrPrimitive.setStatus('current')
sasPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 3, 1), ).setIndexNames((0, "ATTO6500N-MIB", "sasPortIndex"))
if mibBuilder.loadTexts: sasPortInfoEntry.setStatus('current')
sasPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: sasPortIndex.setStatus('current')
sasPortPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sasPortPortNumber.setStatus('current')
sasPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", -1), ("online", 1), ("offline", 2), ("degraded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sasPortOperationalState.setStatus('current')
sasPortPhy1State = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 3, 1, 4), PHYStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sasPortPhy1State.setStatus('current')
sasPortPhy2State = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 3, 1, 5), PHYStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sasPortPhy2State.setStatus('current')
sasPortPhy3State = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 3, 1, 6), PHYStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sasPortPhy3State.setStatus('current')
sasPortPhy4State = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 3, 1, 7), PHYStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sasPortPhy4State.setStatus('current')
sasPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("unknown", -1), ("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sasPortAdminState.setStatus('current')
sasPortDataRateCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 6))).clone(namedValues=NamedValues(("gb1point5", 1), ("gb3", 3), ("gb6", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sasPortDataRateCapability.setStatus('current')
sasPortDataRateNegotiated = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 6))).clone(namedValues=NamedValues(("gb1point5", 1), ("gb3", 3), ("gb6", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sasPortDataRateNegotiated.setStatus('current')
sasPortAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 3, 1, 11), DisplayWWN()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sasPortAddress.setStatus('current')
sasPhyStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 4, 1), ).setIndexNames((0, "ATTO6500N-MIB", "sasPhyStatsIndex"))
if mibBuilder.loadTexts: sasPhyStatisticsEntry.setStatus('current')
sasPhyStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: sasPhyStatsIndex.setStatus('current')
sasPhyStatsTimeSinceReset = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 4, 1, 2), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sasPhyStatsTimeSinceReset.setStatus('current')
sasPhyStatsErrLinkChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 4, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sasPhyStatsErrLinkChanged.setStatus('current')
sasPhyStatsErrInvalidCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 4, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sasPhyStatsErrInvalidCRC.setStatus('current')
sasPhyStatsErrPhyReset = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 4, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sasPhyStatsErrPhyReset.setStatus('current')
sasPhyStatsErrLossOfSync = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 4, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sasPhyStatsErrLossOfSync.setStatus('current')
sasPhyStatsErrDisparityCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 4, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sasPhyStatsErrDisparityCount.setStatus('current')
sasPhyStatsErrInvalidDwords = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 3, 4, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sasPhyStatsErrInvalidDwords.setStatus('current')
trapsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapsEnabled.setStatus('current')
snmpUpdatesEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpUpdatesEnabled.setStatus('current')
trapMaxClients = MibScalar((1, 3, 6, 1, 4, 1, 4547, 2, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapMaxClients.setStatus('current')
trapClientTable = MibTable((1, 3, 6, 1, 4, 1, 4547, 2, 3, 5, 2), )
if mibBuilder.loadTexts: trapClientTable.setStatus('current')
trapClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4547, 2, 3, 5, 2, 1), ).setIndexNames((0, "ATTO6500N-MIB", "trapClientIndex"))
if mibBuilder.loadTexts: trapClientEntry.setStatus('current')
trapClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)))
if mibBuilder.loadTexts: trapClientIndex.setStatus('current')
trapClientIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 5, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapClientIpAddress.setStatus('current')
trapClientPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapClientPort.setStatus('current')
trapClientFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 4547, 2, 3, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("critical", 2), ("warning", 3), ("informational", 4), ("all", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapClientFilter.setStatus('current')
bridgeTemperatureWarning = NotificationType((1, 3, 6, 1, 4, 1, 4547, 2, 3, 0, 1)).setObjects(("ATTO6500N-MIB", "chassisTemperatureStatus"), ("ATTO6500N-MIB", "chassisTemperature"))
if mibBuilder.loadTexts: bridgeTemperatureWarning.setStatus('current')
fcPortTransition = NotificationType((1, 3, 6, 1, 4, 1, 4547, 2, 3, 0, 2)).setObjects(("ATTO6500N-MIB", "fcPortPortNumber"), ("ATTO6500N-MIB", "fcPortOperationalState"))
if mibBuilder.loadTexts: fcPortTransition.setStatus('current')
sasPortTransition = NotificationType((1, 3, 6, 1, 4, 1, 4547, 2, 3, 0, 3)).setObjects(("ATTO6500N-MIB", "sasPortPortNumber"), ("ATTO6500N-MIB", "sasPortOperationalState"))
if mibBuilder.loadTexts: sasPortTransition.setStatus('current')
bridgeThroughputWarning = NotificationType((1, 3, 6, 1, 4, 1, 4547, 2, 3, 0, 4)).setObjects(("ATTO6500N-MIB", "chassisThroughputStatus"))
if mibBuilder.loadTexts: bridgeThroughputWarning.setStatus('current')
mibBuilder.exportSymbols("ATTO6500N-MIB", bridgeTrapInfo=bridgeTrapInfo, sasPortOperationalState=sasPortOperationalState, sasPhyStatsErrLinkChanged=sasPhyStatsErrLinkChanged, sasPhyStatsErrDisparityCount=sasPhyStatsErrDisparityCount, sasQSFPPartNum=sasQSFPPartNum, bridge=bridge, sasQSFPSerialNum=sasQSFPSerialNum, fcStatsErrLipCount=fcStatsErrLipCount, fcStatsErrLinkFailure=fcStatsErrLinkFailure, bridgeIdentity=bridgeIdentity, sasPhyStatisticsTable=sasPhyStatisticsTable, trapClientPort=trapClientPort, DisplayWWN=DisplayWWN, fcPortPortName=fcPortPortName, hardwareVersion=hardwareVersion, sasPortAdminState=sasPortAdminState, sasPortAddress=sasPortAddress, bridgeUniqueId=bridgeUniqueId, lastRebootReason=lastRebootReason, sasPortInfoEntry=sasPortInfoEntry, fcPortStatisticsEntry=fcPortStatisticsEntry, sasPortPhy1State=sasPortPhy1State, fcPortInfoEntry=fcPortInfoEntry, fcSFPInfoTable=fcSFPInfoTable, fcPortOperationalState=fcPortOperationalState, fcStatsErrInvalidTxWords=fcStatsErrInvalidTxWords, bridgeTraps=bridgeTraps, attoMgmt=attoMgmt, fcStatsErrInvalidCRC=fcStatsErrInvalidCRC, lastReboot=lastReboot, fcStatsErrLossOfSync=fcStatsErrLossOfSync, fcPortStatisticsTable=fcPortStatisticsTable, uptime=uptime, maximumOperatingTemp=maximumOperatingTemp, fcPortPeerName=fcPortPeerName, bridgeFcPortStatisicsBasicGroup=bridgeFcPortStatisicsBasicGroup, bridgeSasPortInfoBasicGroup=bridgeSasPortInfoBasicGroup, snmpUpdatesEnabled=snmpUpdatesEnabled, QSFPTech=QSFPTech, trapMaxClients=trapMaxClients, fcStatsErrSignalLoss=fcStatsErrSignalLoss, fcSFPDataRateCapability=fcSFPDataRateCapability, temperatureHighAlertSetting=temperatureHighAlertSetting, attoModules=attoModules, temperatureLowAlertSetting=temperatureLowAlertSetting, bridgeIdentityBasicGroup=bridgeIdentityBasicGroup, sasQSFPIndex=sasQSFPIndex, bridgFcPortInfoBasicGroup=bridgFcPortInfoBasicGroup, sasQSFPVendor=sasQSFPVendor, sasPhyStatsIndex=sasPhyStatsIndex, sasPhyStatsTimeSinceReset=sasPhyStatsTimeSinceReset, attoAgentCapability=attoAgentCapability, fcPortNodeName=fcPortNodeName, fcStatsRxWords=fcStatsRxWords, sasPortIndex=sasPortIndex, secondaryFirmwareBuildDate=secondaryFirmwareBuildDate, serialNumber=serialNumber, trapClientTable=trapClientTable, fcStatsTxWords=fcStatsTxWords, fcSFPVendor=fcSFPVendor, PYSNMP_MODULE_ID=bridge, sasPhyStatsErrPhyReset=sasPhyStatsErrPhyReset, bridgeChassis=bridgeChassis, fcPortInfoTable=fcPortInfoTable, chassisTemperatureStatus=chassisTemperatureStatus, trapClientIndex=trapClientIndex, attotech=attotech, bridgeConfigBasicGroup=bridgeConfigBasicGroup, trapClientIpAddress=trapClientIpAddress, minimumOperatingTemp=minimumOperatingTemp, sasPortDataRateNegotiated=sasPortDataRateNegotiated, sasPortPortNumber=sasPortPortNumber, fcPortDataRateNegotiated=fcPortDataRateNegotiated, sasPhyStatsErrLossOfSync=sasPhyStatsErrLossOfSync, sasPortDataRateCapability=sasPortDataRateCapability, PHYStatus=PHYStatus, fcSFPPartNum=fcSFPPartNum, sasQSFPType=sasQSFPType, bridgeName=bridgeName, fcPortDataRateCapability=fcPortDataRateCapability, sasQSFPInfoTable=sasQSFPInfoTable, fcPortIndex=fcPortIndex, bridgeTemperatureWarning=bridgeTemperatureWarning, bridgePorts=bridgePorts, trapClientFilter=trapClientFilter, bridgeTrapsBasicGroup=bridgeTrapsBasicGroup, fcStatsIndex=fcStatsIndex, bridgeMIBGroups=bridgeMIBGroups, sasPortPhy2State=sasPortPhy2State, fcPortPortNumber=fcPortPortNumber, chassisThroughputStatus=chassisThroughputStatus, modelName=modelName, attoProducts=attoProducts, sasQSFPInfoEntry=sasQSFPInfoEntry, fcPortConnModeConfigured=fcPortConnModeConfigured, sasPortPhy3State=sasPortPhy3State, fcSFPIndex=fcSFPIndex, fcSFPInfoEntry=fcSFPInfoEntry, fcStatsErrNOSCount=fcStatsErrNOSCount, fcPortAdminState=fcPortAdminState, bridgeTrapInfoBasicGroup=bridgeTrapInfoBasicGroup, fcPortTransition=fcPortTransition, secondaryFirmwareRevision=secondaryFirmwareRevision, bridgeBasicCompliance=bridgeBasicCompliance, sasPhyStatsErrInvalidCRC=sasPhyStatsErrInvalidCRC, fcSFPSerialNum=fcSFPSerialNum, vendorID=vendorID, bridgeConfig=bridgeConfig, sasPhyStatisticsEntry=sasPhyStatisticsEntry, bridgeThroughputWarning=bridgeThroughputWarning, fcStatsErrPrimitive=fcStatsErrPrimitive, dramSingleBitErrorCount=dramSingleBitErrorCount, bridgeChassisBasicGroup=bridgeChassisBasicGroup, chassisTemperature=chassisTemperature, bridgeMIBCompliances=bridgeMIBCompliances, bridgeMIBConformance=bridgeMIBConformance, primaryFirmwareRevision=primaryFirmwareRevision, sasPortPhy4State=sasPortPhy4State, sasPhyStatsErrInvalidDwords=sasPhyStatsErrInvalidDwords, sasPortInfoTable=sasPortInfoTable, trapClientEntry=trapClientEntry, trapsEnabled=trapsEnabled, fcPortDataRateConfigured=fcPortDataRateConfigured, fcPortConnModeNegotiated=fcPortConnModeNegotiated, fcStatsTimeSinceReset=fcStatsTimeSinceReset, sasPortTransition=sasPortTransition, primaryFirmwareBuildDate=primaryFirmwareBuildDate, bridgeSasPortStatisicsBasicGroup=bridgeSasPortStatisicsBasicGroup)
