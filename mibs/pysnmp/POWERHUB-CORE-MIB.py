#
# PySNMP MIB module POWERHUB-CORE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/POWERHUB-CORE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:32:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
enterprises, MibIdentifier, TimeTicks, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, IpAddress, Bits, ModuleIdentity, Gauge32, Counter32, ObjectIdentity, Unsigned32, Counter64, NotificationType, iso = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "MibIdentifier", "TimeTicks", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "IpAddress", "Bits", "ModuleIdentity", "Gauge32", "Counter32", "ObjectIdentity", "Unsigned32", "Counter64", "NotificationType", "iso")
TextualConvention, DisplayString, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "PhysAddress")
fore = MibIdentifier((1, 3, 6, 1, 4, 1, 326))
systems = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2))
lsd = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 6))
lsdproducts = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 6, 1))
lsdcommon = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 6, 2))
powerhub4k6k7k = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1))
powerbits = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 2))
asn9000 = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 3))
alchassis = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1))
alsystem = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1))
albridge = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2))
almgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3))
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

alSlotTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 1), )
if mibBuilder.loadTexts: alSlotTable.setStatus('mandatory')
alSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 1, 1), ).setIndexNames((0, "POWERHUB-CORE-MIB", "alSlotNumber"))
if mibBuilder.loadTexts: alSlotEntry.setStatus('mandatory')
alSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotNumber.setStatus('mandatory')
alSlotCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30))).clone(namedValues=NamedValues(("ph7-universalethernet", 1), ("ph7-utp4x4", 2), ("ph7-utp4x6", 3), ("ph7-fddidualdas", 4), ("ph7-fddisingledas", 5), ("ph7-utp16x1", 6), ("ph7-utp13x1", 7), ("ph7-fddidualuniversal", 8), ("ph7-fddisingleuniversal", 9), ("ph7-fddiconcentrator", 10), ("ph7-cddiconcentrator", 11), ("ph4k6k-FL6x1", 12), ("ph4k6k-utp12x1", 13), ("ph4k6k-fddisingledas", 14), ("ph4k6k-ethernet100TX", 15), ("ph4k6k-ethernet100dualTX", 16), ("ph4k6k-ethernet100FXTX", 17), ("ph4k6k-ethernet100FXFX", 18), ("ph4k6k-ethernet100FX", 19), ("ph4k6k-ethernet24x1", 20), ("ph4k6k-ethernet12x1FL", 21), ("ph4k6k-ethernet6x1FL", 22), ("ph4-tenbt-utp", 23), ("ph7-powercell700", 24), ("ph7-6x1fastethernet", 25), ("ph7-10x1FL", 26), ("ph6-powercell600", 27), ("ph7-2x8fastethernet", 28), ("ph7-packetengine1", 29), ("ph7-packetengine2", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotCardType.setStatus('mandatory')
alSlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notequipped", 1), ("notpresent", 2), ("presentequipped", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotStatus.setStatus('mandatory')
alSlotModel = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotModel.setStatus('mandatory')
alSlotRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotRevision.setStatus('mandatory')
alSlotIssue = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotIssue.setStatus('mandatory')
alSlotDeviation = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotDeviation.setStatus('mandatory')
alSlotSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotSerialNumber.setStatus('mandatory')
alSlotPower5 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotPower5.setStatus('mandatory')
alSlotPower12 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotPower12.setStatus('mandatory')
alSlotPower33 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotPower33.setStatus('mandatory')
alSlotPowerOther = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotPowerOther.setStatus('mandatory')
alVportTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 2), )
if mibBuilder.loadTexts: alVportTable.setStatus('mandatory')
alVportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 2, 1), ).setIndexNames((0, "POWERHUB-CORE-MIB", "alVportNumber"))
if mibBuilder.loadTexts: alVportEntry.setStatus('mandatory')
alVportNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alVportNumber.setStatus('mandatory')
alVportSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alVportSlotNumber.setStatus('mandatory')
alVportPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alVportPortNumber.setStatus('mandatory')
alVportPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66))).clone(namedValues=NamedValues(("bnc", 1), ("fiber", 2), ("aui", 3), ("mauHdx", 4), ("mauFdx", 5), ("fb", 6), ("notstuffed", 7), ("fddiMMMM", 8), ("fddiMMSM", 9), ("fddiMMLC", 10), ("fddiMMUTP", 11), ("fddiMMEMPTY", 12), ("fddiSMMM", 13), ("fddiSMSM", 14), ("fddiSMLC", 15), ("fddiSMUTP", 16), ("fddiSMEMPTY", 17), ("fddiLCMM", 18), ("fddiLCSM", 19), ("fddiLCLC", 20), ("fddiLCUTP", 21), ("fddiLCEMPTY", 22), ("fddiUTPMM", 23), ("fddiUTPSM", 24), ("fddiUTPLC", 25), ("fddiUTPUTP", 26), ("fddiUTPEMPTY", 27), ("fddiEMPTYEMPTY", 28), ("fddiEMPTYMM", 29), ("fddiEMPTYSM", 30), ("fddiEMPTYLC", 31), ("fddiEMPTYUTP", 32), ("fx100base", 33), ("fasteth100fx", 34), ("fasteth100tx", 35), ("atm", 36), ("utp", 37), ("ds3-utp", 38), ("ds3-stp", 39), ("ds3-vmf", 40), ("ds3-lmf", 41), ("ds3-mf", 42), ("ds3-sf", 43), ("ds3-cx", 44), ("e3-utp", 45), ("e3-stp", 46), ("e3-vmf", 47), ("e3-lmf", 48), ("e3-mf", 49), ("e3-sf", 50), ("e3-cx", 51), ("oc3-utp", 52), ("oc3-stp", 53), ("oc3-vmf", 54), ("oc3-lmf", 55), ("oc3-mf", 56), ("oc3-sf", 57), ("oc3-cx", 58), ("oc12-utp", 59), ("oc12-stp", 60), ("oc12-vmf", 61), ("oc12-lmf", 62), ("oc12-mf", 63), ("oc12-sf", 64), ("oc12-cx", 65), ("fema-10-100", 66)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alVportPortType.setStatus('mandatory')
alVportStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bad", 1), ("removed", 2), ("good", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alVportStatus.setStatus('mandatory')
alVportControllerType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alVportControllerType.setStatus('mandatory')
alVportDataRateConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("speed10Mbps", 2), ("speed100Mbps", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alVportDataRateConfig.setStatus('mandatory')
alVportOperModeConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("normal", 2), ("halfDuplex", 3), ("fullDuplex", 4), ("loopback", 5), ("fullLoopback", 6), ("decLoopback", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alVportOperModeConfig.setStatus('mandatory')
alVportAutoNegotiateConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alVportAutoNegotiateConfig.setStatus('mandatory')
alVportDataRateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undetermined", 1), ("speed10Mbps", 2), ("speed100Mbps", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alVportDataRateStatus.setStatus('mandatory')
alVportOperModeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("undetermined", 1), ("halfDuplex", 2), ("fullDuplex", 3), ("loopback", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alVportOperModeStatus.setStatus('mandatory')
alSlotToVportTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 3), )
if mibBuilder.loadTexts: alSlotToVportTable.setStatus('mandatory')
alSlotVportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 3, 1), ).setIndexNames((0, "POWERHUB-CORE-MIB", "alSlotVportSlotNumber"), (0, "POWERHUB-CORE-MIB", "alSlotVportPortNumber"))
if mibBuilder.loadTexts: alSlotVportEntry.setStatus('mandatory')
alSlotVportSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotVportSlotNumber.setStatus('mandatory')
alSlotVportPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotVportPortNumber.setStatus('mandatory')
alSlotVportNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotVportNumber.setStatus('mandatory')
alSlotVportPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66))).clone(namedValues=NamedValues(("bnc", 1), ("fiber", 2), ("aui", 3), ("mauHdx", 4), ("mauFdx", 5), ("fb", 6), ("notstuffed", 7), ("fddiMMMM", 8), ("fddiMMSM", 9), ("fddiMMLC", 10), ("fddiMMUTP", 11), ("fddiMMEMPTY", 12), ("fddiSMMM", 13), ("fddiSMSM", 14), ("fddiSMLC", 15), ("fddiSMUTP", 16), ("fddiSMEMPTY", 17), ("fddiLCMM", 18), ("fddiLCSM", 19), ("fddiLCLC", 20), ("fddiLCUTP", 21), ("fddiLCEMPTY", 22), ("fddiUTPMM", 23), ("fddiUTPSM", 24), ("fddiUTPLC", 25), ("fddiUTPUTP", 26), ("fddiUTPEMPTY", 27), ("fddiEMPTYEMPTY", 28), ("fddiEMPTYMM", 29), ("fddiEMPTYSM", 30), ("fddiEMPTYLC", 31), ("fddiEMPTYUTP", 32), ("fx100base", 33), ("fasteth100fx", 34), ("fasteth100tx", 35), ("atm", 36), ("utp", 37), ("ds3-utp", 38), ("ds3-stp", 39), ("ds3-vmf", 40), ("ds3-lmf", 41), ("ds3-mf", 42), ("ds3-sf", 43), ("ds3-cx", 44), ("e3-utp", 45), ("e3-stp", 46), ("e3-vmf", 47), ("e3-lmf", 48), ("e3-mf", 49), ("e3-sf", 50), ("e3-cx", 51), ("oc3-utp", 52), ("oc3-stp", 53), ("oc3-vmf", 54), ("oc3-lmf", 55), ("oc3-mf", 56), ("oc3-sf", 57), ("oc3-cx", 58), ("oc12-utp", 59), ("oc12-stp", 60), ("oc12-vmf", 61), ("oc12-lmf", 62), ("oc12-mf", 63), ("oc12-sf", 64), ("oc12-cx", 65), ("fema-10-100", 66)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotVportPortType.setStatus('mandatory')
alSlotVportStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotVportStatus.setStatus('mandatory')
alSlotVportControllerType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotVportControllerType.setStatus('mandatory')
alSlotVportDataRateConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("speed10Mbps", 2), ("speed100Mbps", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alSlotVportDataRateConfig.setStatus('mandatory')
alSlotVportOperModeConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("normal", 2), ("halfDuplex", 3), ("fullDuplex", 4), ("loopback", 5), ("fullLoopback", 6), ("decLoopback", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alSlotVportOperModeConfig.setStatus('mandatory')
alSlotVportAutoNegotiateConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alSlotVportAutoNegotiateConfig.setStatus('mandatory')
alSlotVportDataRateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undetermined", 1), ("speed10Mbps", 2), ("speed100Mbps", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotVportDataRateStatus.setStatus('mandatory')
alSlotVportOperModeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("undetermined", 1), ("halfDuplex", 2), ("fullDuplex", 3), ("loopback", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotVportOperModeStatus.setStatus('mandatory')
alPSTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 4), )
if mibBuilder.loadTexts: alPSTable.setStatus('mandatory')
alPSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 4, 1), ).setIndexNames((0, "POWERHUB-CORE-MIB", "alPSNumber"))
if mibBuilder.loadTexts: alPSEntry.setStatus('mandatory')
alPSNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alPSNumber.setStatus('mandatory')
alPSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("powerGood", 1), ("powerPresentButBad", 2), ("powerNotPresent", 3), ("powerIntermittant", 4), ("powerUnknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alPSStatus.setStatus('mandatory')
alCpuSlot = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alCpuSlot.setStatus('mandatory')
alSlotChassis = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("slots5", 1), ("slots10", 2), ("slots15", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotChassis.setStatus('mandatory')
powerFailure = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1) + (0,1)).setObjects(("POWERHUB-CORE-MIB", "alPSNumber"))
boardFailure = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 6, 1, 1, 1) + (0,2)).setObjects(("POWERHUB-CORE-MIB", "alSlotNumber"))
alChassisType = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34))).clone(namedValues=NamedValues(("model3100", 1), ("model3200", 2), ("model3300", 3), ("model3500", 4), ("model3401", 5), ("model3402", 6), ("model3403", 7), ("model3404", 8), ("model3405", 9), ("model3406", 10), ("model3407", 11), ("model3410", 12), ("model3411", 13), ("model3412", 14), ("model3420", 15), ("model3421", 16), ("model3422", 17), ("model3423", 18), ("model3424", 19), ("model3425", 20), ("model5001", 21), ("model5002", 22), ("model5003", 23), ("model5004", 24), ("model5005", 25), ("model5006", 26), ("model7000", 30), ("model6000", 31), ("model4000", 32), ("model4100", 33), ("model8000", 34)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alChassisType.setStatus('mandatory')
alMcpuRtVer = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alMcpuRtVer.setStatus('mandatory')
alMcpuPromVer = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alMcpuPromVer.setStatus('mandatory')
alFcpuOneRtVer = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alFcpuOneRtVer.setStatus('mandatory')
alFcpuTwoRtVer = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alFcpuTwoRtVer.setStatus('mandatory')
alFcpuOnePromVer = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alFcpuOnePromVer.setStatus('mandatory')
alFcpuTwoPromVer = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alFcpuTwoPromVer.setStatus('mandatory')
alRcpuOneRtVer = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRcpuOneRtVer.setStatus('mandatory')
alRcpuTwoRtVer = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRcpuTwoRtVer.setStatus('mandatory')
alRcpuOnePromVer = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRcpuOnePromVer.setStatus('mandatory')
alRcpuTwoPromVer = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRcpuTwoPromVer.setStatus('mandatory')
alLastLoginFailureTimeDate = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alLastLoginFailureTimeDate.setStatus('mandatory')
alLastLoginFailureUserId = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alLastLoginFailureUserId.setStatus('mandatory')
alLastLoginFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalidLoginId", 1), ("passwordMismatch", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alLastLoginFailureReason.setStatus('mandatory')
alLastLoginSourceAddress = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alLastLoginSourceAddress.setStatus('mandatory')
alLoginFailure = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1) + (0,1)).setObjects(("POWERHUB-CORE-MIB", "alLastLoginFailureTimeDate"), ("POWERHUB-CORE-MIB", "alLastLoginFailureUserId"), ("POWERHUB-CORE-MIB", "alLastLoginFailureReason"), ("POWERHUB-CORE-MIB", "alLastLoginSourceAddress"))
alConsoleSyslogLevel = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("off", 1), ("logEmerg", 2), ("logAlert", 3), ("logCrit", 4), ("logErr", 5), ("logWarning", 6), ("logNotice", 7), ("logInfo", 8), ("logDebug", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alConsoleSyslogLevel.setStatus('mandatory')
alSnmpSyslogLevel = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("off", 1), ("logEmerg", 2), ("logAlert", 3), ("logCrit", 4), ("logErr", 5), ("logWarning", 6), ("logNotice", 7), ("logInfo", 8), ("logDebug", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alSnmpSyslogLevel.setStatus('mandatory')
alIlmiSyslogLevel = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("off", 1), ("logEmerg", 2), ("logAlert", 3), ("logCrit", 4), ("logErr", 5), ("logWarning", 6), ("logNotice", 7), ("logInfo", 8), ("logDebug", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alIlmiSyslogLevel.setStatus('mandatory')
alSyslogHostType = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSet", 1), ("local", 2), ("ip", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alSyslogHostType.setStatus('mandatory')
alSyslogHostIp = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alSyslogHostIp.setStatus('mandatory')
alSyslogHostIpFacility = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("daemon", 1), ("local0", 2), ("local1", 3), ("local2", 4), ("local3", 5), ("local4", 6), ("local5", 7), ("local6", 8), ("local7", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alSyslogHostIpFacility.setStatus('mandatory')
alBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 1), )
if mibBuilder.loadTexts: alBridgeTable.setStatus('mandatory')
alBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 1, 1), ).setIndexNames((0, "POWERHUB-CORE-MIB", "alBridgeEntryAddress"))
if mibBuilder.loadTexts: alBridgeEntry.setStatus('mandatory')
alBridgeEntryAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alBridgeEntryAddress.setStatus('mandatory')
alBridgeEntryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alBridgeEntryPort.setStatus('mandatory')
alBridgeEntryLink = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alBridgeEntryLink.setStatus('mandatory')
alBridgeEntryRule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alBridgeEntryRule.setStatus('mandatory')
alBridgeEntryFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alBridgeEntryFlags.setStatus('mandatory')
alBridgeTblClear = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alBridgeTblClear.setStatus('mandatory')
alBrFlushCache = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alBrFlushCache.setStatus('mandatory')
alPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 4), )
if mibBuilder.loadTexts: alPortStatsTable.setStatus('mandatory')
portStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 4, 1), ).setIndexNames((0, "POWERHUB-CORE-MIB", "portStatsPort"))
if mibBuilder.loadTexts: portStatsEntry.setStatus('mandatory')
portStatsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPort.setStatus('mandatory')
portStatsPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPktsIn.setStatus('mandatory')
portStatsPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPktsOut.setStatus('mandatory')
portStatsOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsOctetsIn.setStatus('mandatory')
portStatsOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsOctetsOut.setStatus('mandatory')
portStatsMulticastPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsMulticastPktsIn.setStatus('mandatory')
portStatsMulticastPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsMulticastPktsOut.setStatus('mandatory')
portStatsTableMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsTableMisses.setStatus('mandatory')
portStatsRcvBuffErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsRcvBuffErrs.setStatus('mandatory')
portStatsXmitBuffErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsXmitBuffErrs.setStatus('mandatory')
portStatsTotalCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsTotalCollisions.setStatus('mandatory')
portStatsRcvCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsRcvCollisions.setStatus('mandatory')
portStatsXmitCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsXmitCollisions.setStatus('mandatory')
portStatsXmitQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsXmitQLen.setStatus('mandatory')
portStatsPeakUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPeakUtilization.setStatus('mandatory')
portStatsCurrUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsCurrUtilization.setStatus('mandatory')
portStatsLossOfCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsLossOfCarrier.setStatus('mandatory')
portStatsExcessRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsExcessRetries.setStatus('mandatory')
alBridgeStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alBridgeStatsClear.setStatus('mandatory')
alBridgePPControl = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("clear", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alBridgePPControl.setStatus('mandatory')
alPortToPortTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 7), )
if mibBuilder.loadTexts: alPortToPortTable.setStatus('mandatory')
portToPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 7, 1), ).setIndexNames((0, "POWERHUB-CORE-MIB", "alPPSourcePort"), (0, "POWERHUB-CORE-MIB", "alPPDestinationPort"))
if mibBuilder.loadTexts: portToPortEntry.setStatus('mandatory')
alPPSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alPPSourcePort.setStatus('mandatory')
alPPDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alPPDestinationPort.setStatus('mandatory')
portToPortPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portToPortPackets.setStatus('mandatory')
portToPortOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portToPortOctets.setStatus('mandatory')
alPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 8), )
if mibBuilder.loadTexts: alPortConfigTable.setStatus('mandatory')
portConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 8, 1), ).setIndexNames((0, "POWERHUB-CORE-MIB", "portConfigPort"))
if mibBuilder.loadTexts: portConfigEntry.setStatus('mandatory')
portConfigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portConfigPort.setStatus('mandatory')
portConfigSrcRule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 8, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigSrcRule.setStatus('mandatory')
portConfigDstRule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 8, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigDstRule.setStatus('mandatory')
portConfigBlockLearnedEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigBlockLearnedEntries.setStatus('mandatory')
alBridgeIpBridging = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alBridgeIpBridging.setStatus('mandatory')
alBrTemplateTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 10), )
if mibBuilder.loadTexts: alBrTemplateTable.setStatus('mandatory')
brTemplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 10, 1), ).setIndexNames((0, "POWERHUB-CORE-MIB", "brTemplateNumber"))
if mibBuilder.loadTexts: brTemplateEntry.setStatus('mandatory')
brTemplateNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brTemplateNumber.setStatus('mandatory')
brTemplateOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 10, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brTemplateOffset.setStatus('mandatory')
brTemplateMask = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 10, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brTemplateMask.setStatus('mandatory')
brTemplateComparator = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 10, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brTemplateComparator.setStatus('mandatory')
brTemplateOption = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 10, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brTemplateOption.setStatus('mandatory')
alBrRuleTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 11), )
if mibBuilder.loadTexts: alBrRuleTable.setStatus('mandatory')
brRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 11, 1), ).setIndexNames((0, "POWERHUB-CORE-MIB", "brRuleNumber"))
if mibBuilder.loadTexts: brRuleEntry.setStatus('mandatory')
brRuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brRuleNumber.setStatus('mandatory')
brRuleStatement = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 11, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brRuleStatement.setStatus('mandatory')
alBrRuleToNodeTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 12), )
if mibBuilder.loadTexts: alBrRuleToNodeTable.setStatus('mandatory')
alBrRuleToNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 12, 1), ).setIndexNames((0, "POWERHUB-CORE-MIB", "brRuleToNodePort"))
if mibBuilder.loadTexts: alBrRuleToNodeEntry.setStatus('mandatory')
brRuleToNodePort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 12, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brRuleToNodePort.setStatus('mandatory')
brRuleToNodeMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 12, 1, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brRuleToNodeMacAddr.setStatus('mandatory')
brRuleToNodeRule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 12, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brRuleToNodeRule.setStatus('mandatory')
alBrGroupTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 13), )
if mibBuilder.loadTexts: alBrGroupTable.setStatus('mandatory')
alBrGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 13, 1), ).setIndexNames((0, "POWERHUB-CORE-MIB", "brGroupNumber"))
if mibBuilder.loadTexts: alBrGroupEntry.setStatus('mandatory')
brGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brGroupNumber.setStatus('mandatory')
brGroupPortsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 13, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brGroupPortsMask.setStatus('mandatory')
brGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 13, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brGroupName.setStatus('mandatory')
alBridgeSTPControl = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alBridgeSTPControl.setStatus('mandatory')
alPortStateTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 15), )
if mibBuilder.loadTexts: alPortStateTable.setStatus('mandatory')
portStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 15, 1), ).setIndexNames((0, "POWERHUB-CORE-MIB", "portStatePort"))
if mibBuilder.loadTexts: portStateEntry.setStatus('mandatory')
portStatePort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatePort.setStatus('mandatory')
portStateDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("good", 1), ("bad", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStateDiag.setStatus('mandatory')
portStateMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStateMgmt.setStatus('mandatory')
portStateStp = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 15, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStateStp.setStatus('mandatory')
portStatePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 2, 15, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatePortName.setStatus('mandatory')
alAutoPortStateTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 1), )
if mibBuilder.loadTexts: alAutoPortStateTable.setStatus('mandatory')
autoportStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 1, 1), ).setIndexNames((0, "POWERHUB-CORE-MIB", "autoPortStatePort"))
if mibBuilder.loadTexts: autoportStateEntry.setStatus('mandatory')
autoPortStatePort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoPortStatePort.setStatus('mandatory')
autoPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoPortState.setStatus('mandatory')
autoPortStateThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoPortStateThreshold.setStatus('mandatory')
alLinkStatsCollect = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alLinkStatsCollect.setStatus('mandatory')
alLinkStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alLinkStatsClear.setStatus('mandatory')
alLinkStatsTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 4), )
if mibBuilder.loadTexts: alLinkStatsTable.setStatus('mandatory')
linkStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 4, 1), ).setMaxAccess("readwrite").setIndexNames((0, "POWERHUB-CORE-MIB", "linkStatsPort"), (0, "POWERHUB-CORE-MIB", "linkStatsLink"))
if mibBuilder.loadTexts: linkStatsEntry.setStatus('mandatory')
linkStatsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsPort.setStatus('mandatory')
linkStatsLink = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsLink.setStatus('mandatory')
linkStatsPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsPktsIn.setStatus('mandatory')
linkStatsOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsOctetsIn.setStatus('mandatory')
linkStatsBMCastPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsBMCastPktsIn.setStatus('mandatory')
linkStatsGiantPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsGiantPkts.setStatus('mandatory')
linkStatsFrameErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsFrameErrs.setStatus('mandatory')
linkStatsFCSErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsFCSErrs.setStatus('mandatory')
linkStatsCodingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsCodingErrors.setStatus('mandatory')
linkStatsDataRateMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsDataRateMismatch.setStatus('mandatory')
linkStatsJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsJabbers.setStatus('mandatory')
linkStatsShortEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsShortEvents.setStatus('mandatory')
linkStatsRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsRunts.setStatus('mandatory')
linkStatsPortCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsPortCollision.setStatus('mandatory')
linkStatsLateCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsLateCollision.setStatus('mandatory')
linkStatsAutoPartition = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsAutoPartition.setStatus('mandatory')
linkStatsIsolates = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsIsolates.setStatus('mandatory')
linkStatsSaFieldChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsSaFieldChanges.setStatus('mandatory')
linkStatsLastSa = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 4, 1, 19), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsLastSa.setStatus('mandatory')
alLinkControlTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 5), )
if mibBuilder.loadTexts: alLinkControlTable.setStatus('mandatory')
linkControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 5, 1), ).setMaxAccess("readwrite").setIndexNames((0, "POWERHUB-CORE-MIB", "linkControlPort"), (0, "POWERHUB-CORE-MIB", "linkControlLink"))
if mibBuilder.loadTexts: linkControlEntry.setStatus('mandatory')
linkControlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkControlPort.setStatus('mandatory')
linkControlLink = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkControlLink.setStatus('mandatory')
linkControlEnlState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkControlEnlState.setStatus('mandatory')
linkControlLinkTest = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkControlLinkTest.setStatus('mandatory')
linkControlPartition = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkControlPartition.setStatus('mandatory')
linkControlPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkControlPolarity.setStatus('mandatory')
alPortLinkTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 6), )
if mibBuilder.loadTexts: alPortLinkTable.setStatus('mandatory')
portLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 6, 1), ).setIndexNames((0, "POWERHUB-CORE-MIB", "portLinkPort"))
if mibBuilder.loadTexts: portLinkEntry.setStatus('mandatory')
portLinkPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLinkPort.setStatus('mandatory')
portLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("aui", 1), ("bnc", 2), ("bnct", 3), ("utp", 4), ("fiber", 5), ("unknown", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLinkType.setStatus('mandatory')
alFiberStatsTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 7), )
if mibBuilder.loadTexts: alFiberStatsTable.setStatus('mandatory')
fiberStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 7, 1), ).setIndexNames((0, "POWERHUB-CORE-MIB", "fiberStatsPort"))
if mibBuilder.loadTexts: fiberStatsEntry.setStatus('mandatory')
fiberStatsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fiberStatsPort.setStatus('mandatory')
fiberAuiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fiberAuiStatus.setStatus('mandatory')
fiberSecurityViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("detect", 1), ("ignore", 2), ("clear", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fiberSecurityViolation.setStatus('mandatory')
alPortMonitorClose = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alPortMonitorClose.setStatus('mandatory')
alPortMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 9), )
if mibBuilder.loadTexts: alPortMonitorTable.setStatus('mandatory')
portMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 9, 1), ).setIndexNames((0, "POWERHUB-CORE-MIB", "portMonSrcPort"), (0, "POWERHUB-CORE-MIB", "portMonDstPort"))
if mibBuilder.loadTexts: portMonitorEntry.setStatus('mandatory')
portMonSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMonSrcPort.setStatus('mandatory')
portMonDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMonDstPort.setStatus('mandatory')
portMonTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("forwarded", 1), ("incoming", 2), ("forwardedandincoming", 3), ("generated", 4), ("forwardedandgenerated", 5), ("incomingandgenerated", 6), ("all", 7), ("stopmonitoring", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMonTrafficType.setStatus('mandatory')
alReboot = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 10), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: alReboot.setStatus('mandatory')
alPortMonitorViewTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 11), )
if mibBuilder.loadTexts: alPortMonitorViewTable.setStatus('mandatory')
portMonitorViewEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 11, 1), ).setIndexNames((0, "POWERHUB-CORE-MIB", "portMonViewSrcPort"), (0, "POWERHUB-CORE-MIB", "portMonViewDstPort"))
if mibBuilder.loadTexts: portMonitorViewEntry.setStatus('mandatory')
portMonViewSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMonViewSrcPort.setStatus('mandatory')
portMonViewDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMonViewDstPort.setStatus('mandatory')
portMonViewMonitorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 11, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMonViewMonitorPort.setStatus('mandatory')
alCfgLocalMediaScope = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("floppy", 1), ("flash", 2), ("floppyAndFlash", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alCfgLocalMediaScope.setStatus('mandatory')
alCfgMediaName = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("floppy", 1), ("flash", 2), ("tftpHost", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alCfgMediaName.setStatus('mandatory')
alCfgTftpHostAddr = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alCfgTftpHostAddr.setStatus('mandatory')
alCfgFileName = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alCfgFileName.setStatus('mandatory')
alCfgSaveOp = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 3, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alCfgSaveOp.setStatus('mandatory')
mibBuilder.exportSymbols("POWERHUB-CORE-MIB", linkControlPort=linkControlPort, alPortLinkTable=alPortLinkTable, alSlotPower5=alSlotPower5, alSlotVportDataRateStatus=alSlotVportDataRateStatus, alLoginFailure=alLoginFailure, portLinkType=portLinkType, alSyslogHostIp=alSyslogHostIp, alPortStateTable=alPortStateTable, linkControlPolarity=linkControlPolarity, autoportStateEntry=autoportStateEntry, portStatsMulticastPktsOut=portStatsMulticastPktsOut, fiberSecurityViolation=fiberSecurityViolation, lsdproducts=lsdproducts, alConsoleSyslogLevel=alConsoleSyslogLevel, alSlotVportAutoNegotiateConfig=alSlotVportAutoNegotiateConfig, alVportNumber=alVportNumber, portStatsExcessRetries=portStatsExcessRetries, alSlotStatus=alSlotStatus, brRuleEntry=brRuleEntry, portStatsOctetsOut=portStatsOctetsOut, alLastLoginFailureUserId=alLastLoginFailureUserId, linkControlEnlState=linkControlEnlState, brGroupName=brGroupName, alLastLoginFailureReason=alLastLoginFailureReason, alSlotRevision=alSlotRevision, portStatsRcvCollisions=portStatsRcvCollisions, autoPortStateThreshold=autoPortStateThreshold, alVportPortNumber=alVportPortNumber, alVportDataRateConfig=alVportDataRateConfig, alchassis=alchassis, portStatsPort=portStatsPort, alPortMonitorViewTable=alPortMonitorViewTable, portToPortOctets=portToPortOctets, linkStatsIsolates=linkStatsIsolates, alCfgMediaName=alCfgMediaName, linkStatsPortCollision=linkStatsPortCollision, lsd=lsd, portStatsCurrUtilization=portStatsCurrUtilization, linkStatsSaFieldChanges=linkStatsSaFieldChanges, brTemplateComparator=brTemplateComparator, linkStatsGiantPkts=linkStatsGiantPkts, brGroupPortsMask=brGroupPortsMask, portStatsRcvBuffErrs=portStatsRcvBuffErrs, powerbits=powerbits, portToPortPackets=portToPortPackets, alSlotNumber=alSlotNumber, portStateMgmt=portStateMgmt, alVportEntry=alVportEntry, alSlotVportControllerType=alSlotVportControllerType, linkStatsFrameErrs=linkStatsFrameErrs, alSlotVportStatus=alSlotVportStatus, alAutoPortStateTable=alAutoPortStateTable, linkStatsEntry=linkStatsEntry, alSlotSerialNumber=alSlotSerialNumber, alLinkStatsTable=alLinkStatsTable, brTemplateMask=brTemplateMask, linkControlLink=linkControlLink, alSyslogHostType=alSyslogHostType, alBrGroupTable=alBrGroupTable, alLinkStatsCollect=alLinkStatsCollect, alBrTemplateTable=alBrTemplateTable, alVportControllerType=alVportControllerType, portStatsLossOfCarrier=portStatsLossOfCarrier, alBridgeTable=alBridgeTable, brTemplateOffset=brTemplateOffset, alSlotVportEntry=alSlotVportEntry, alBrRuleToNodeTable=alBrRuleToNodeTable, powerhub4k6k7k=powerhub4k6k7k, brRuleToNodeMacAddr=brRuleToNodeMacAddr, alChassisType=alChassisType, alBrRuleTable=alBrRuleTable, portStateDiag=portStateDiag, portMonViewDstPort=portMonViewDstPort, portMonDstPort=portMonDstPort, portConfigBlockLearnedEntries=portConfigBlockLearnedEntries, alVportSlotNumber=alVportSlotNumber, alBridgeEntryLink=alBridgeEntryLink, alPortToPortTable=alPortToPortTable, powerFailure=powerFailure, portStatsXmitCollisions=portStatsXmitCollisions, portLinkEntry=portLinkEntry, almgmt=almgmt, portConfigEntry=portConfigEntry, alSlotVportDataRateConfig=alSlotVportDataRateConfig, fiberStatsPort=fiberStatsPort, linkStatsLateCollision=linkStatsLateCollision, systems=systems, alFcpuOneRtVer=alFcpuOneRtVer, portStatsOctetsIn=portStatsOctetsIn, alBridgeIpBridging=alBridgeIpBridging, alCfgLocalMediaScope=alCfgLocalMediaScope, linkStatsFCSErrs=linkStatsFCSErrs, MacAddress=MacAddress, boardFailure=boardFailure, portStatsPktsIn=portStatsPktsIn, alPortMonitorTable=alPortMonitorTable, alRcpuTwoRtVer=alRcpuTwoRtVer, alBridgeEntryAddress=alBridgeEntryAddress, alBrGroupEntry=alBrGroupEntry, alSnmpSyslogLevel=alSnmpSyslogLevel, alPortStatsTable=alPortStatsTable, autoPortStatePort=autoPortStatePort, alSlotEntry=alSlotEntry, alLinkControlTable=alLinkControlTable, portMonitorEntry=portMonitorEntry, alPPDestinationPort=alPPDestinationPort, portStatsPktsOut=portStatsPktsOut, portStatsEntry=portStatsEntry, alVportPortType=alVportPortType, linkStatsBMCastPktsIn=linkStatsBMCastPktsIn, portStatsTotalCollisions=portStatsTotalCollisions, alSlotChassis=alSlotChassis, portStatsXmitQLen=portStatsXmitQLen, portStatsTableMisses=portStatsTableMisses, alSlotCardType=alSlotCardType, alBridgeEntryPort=alBridgeEntryPort, albridge=albridge, portConfigPort=portConfigPort, asn9000=asn9000, brTemplateNumber=brTemplateNumber, linkStatsAutoPartition=linkStatsAutoPartition, alPortConfigTable=alPortConfigTable, linkStatsOctetsIn=linkStatsOctetsIn, alReboot=alReboot, brTemplateEntry=brTemplateEntry, portMonSrcPort=portMonSrcPort, alPPSourcePort=alPPSourcePort, alSlotTable=alSlotTable, portStateEntry=portStateEntry, portStateStp=portStateStp, linkControlEntry=linkControlEntry, alCpuSlot=alCpuSlot, alBridgePPControl=alBridgePPControl, alSlotVportSlotNumber=alSlotVportSlotNumber, fiberAuiStatus=fiberAuiStatus, alPSStatus=alPSStatus, alBridgeSTPControl=alBridgeSTPControl, linkStatsPort=linkStatsPort, alLastLoginSourceAddress=alLastLoginSourceAddress, brTemplateOption=brTemplateOption, alBridgeStatsClear=alBridgeStatsClear, portMonTrafficType=portMonTrafficType, linkStatsLastSa=linkStatsLastSa, alMcpuPromVer=alMcpuPromVer, alSlotVportPortType=alSlotVportPortType, linkStatsCodingErrors=linkStatsCodingErrors, alSlotPowerOther=alSlotPowerOther, alPSTable=alPSTable, portConfigSrcRule=portConfigSrcRule, portLinkPort=portLinkPort, alsystem=alsystem, alPSNumber=alPSNumber, linkStatsJabbers=linkStatsJabbers, alVportTable=alVportTable, alRcpuOnePromVer=alRcpuOnePromVer, brRuleStatement=brRuleStatement, alVportOperModeConfig=alVportOperModeConfig, alFcpuTwoRtVer=alFcpuTwoRtVer, linkControlLinkTest=linkControlLinkTest, brRuleNumber=brRuleNumber, alVportStatus=alVportStatus, linkStatsShortEvents=linkStatsShortEvents, alVportDataRateStatus=alVportDataRateStatus, alSlotToVportTable=alSlotToVportTable, fiberStatsEntry=fiberStatsEntry, portMonitorViewEntry=portMonitorViewEntry, portStatsXmitBuffErrs=portStatsXmitBuffErrs, alBridgeEntryRule=alBridgeEntryRule, alCfgSaveOp=alCfgSaveOp, alFiberStatsTable=alFiberStatsTable, alBrRuleToNodeEntry=alBrRuleToNodeEntry, portStatePortName=portStatePortName, brRuleToNodeRule=brRuleToNodeRule, alLinkStatsClear=alLinkStatsClear, linkStatsLink=linkStatsLink, alIlmiSyslogLevel=alIlmiSyslogLevel, alVportAutoNegotiateConfig=alVportAutoNegotiateConfig, brGroupNumber=brGroupNumber, alSlotVportOperModeConfig=alSlotVportOperModeConfig, alFcpuTwoPromVer=alFcpuTwoPromVer, alSlotVportOperModeStatus=alSlotVportOperModeStatus, alVportOperModeStatus=alVportOperModeStatus, alSlotVportPortNumber=alSlotVportPortNumber, alCfgTftpHostAddr=alCfgTftpHostAddr, alSyslogHostIpFacility=alSyslogHostIpFacility, alBridgeEntryFlags=alBridgeEntryFlags, linkStatsRunts=linkStatsRunts, alCfgFileName=alCfgFileName, brRuleToNodePort=brRuleToNodePort, portMonViewSrcPort=portMonViewSrcPort, alPortMonitorClose=alPortMonitorClose, portStatsPeakUtilization=portStatsPeakUtilization, portToPortEntry=portToPortEntry, autoPortState=autoPortState, portStatePort=portStatePort, alFcpuOnePromVer=alFcpuOnePromVer, alMcpuRtVer=alMcpuRtVer, fore=fore, alSlotVportNumber=alSlotVportNumber, alSlotIssue=alSlotIssue, alSlotPower33=alSlotPower33, alBridgeEntry=alBridgeEntry, alLastLoginFailureTimeDate=alLastLoginFailureTimeDate, portMonViewMonitorPort=portMonViewMonitorPort, linkControlPartition=linkControlPartition, alRcpuOneRtVer=alRcpuOneRtVer, alSlotModel=alSlotModel, alBridgeTblClear=alBridgeTblClear, portStatsMulticastPktsIn=portStatsMulticastPktsIn, linkStatsPktsIn=linkStatsPktsIn, alSlotDeviation=alSlotDeviation, portConfigDstRule=portConfigDstRule, alSlotPower12=alSlotPower12, lsdcommon=lsdcommon, alBrFlushCache=alBrFlushCache, linkStatsDataRateMismatch=linkStatsDataRateMismatch, alRcpuTwoPromVer=alRcpuTwoPromVer, alPSEntry=alPSEntry)
