#
# PySNMP MIB module CPQHOST-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CPQHOST-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:10:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, Counter32, ModuleIdentity, Gauge32, ObjectIdentity, NotificationType, TimeTicks, NotificationType, Integer32, Unsigned32, Bits, iso, Counter64, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "Counter32", "ModuleIdentity", "Gauge32", "ObjectIdentity", "NotificationType", "TimeTicks", "NotificationType", "Integer32", "Unsigned32", "Bits", "iso", "Counter64", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
compaq = MibIdentifier((1, 3, 6, 1, 4, 1, 232))
cpqHostOs = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 11))
cpqHoMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 11, 1))
cpqHoComponent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 11, 2))
cpqHoInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 11, 2, 1))
cpqHoInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 11, 2, 2))
cpqHoUtil = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 11, 2, 3))
cpqHoFileSys = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 11, 2, 4))
cpqHoIfPhysMap = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 11, 2, 5))
cpqHoSWRunning = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 11, 2, 6))
cpqHoSwVer = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 11, 2, 7))
cpqHoGeneric = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 11, 2, 8))
cpqHoSwPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 11, 2, 9))
cpqHoSystemStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 11, 2, 10))
cpqHoTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 11, 2, 11))
cpqHoClients = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 11, 2, 12))
cpqHoMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 11, 2, 13))
cpqHoFwVer = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 11, 2, 14))
cpqHoHWInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 11, 2, 15))
cpqPwrThreshold = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 11, 2, 16))
cpqHoOsCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 11, 2, 1, 4))
cpqHoMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoMibRevMajor.setStatus('mandatory')
cpqHoMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoMibRevMinor.setStatus('mandatory')
cpqHoMibCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoMibCondition.setStatus('mandatory')
cpqHoOsCommonPollFreq = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHoOsCommonPollFreq.setStatus('mandatory')
cpqHoOsCommonModuleTable = MibTable((1, 3, 6, 1, 4, 1, 232, 11, 2, 1, 4, 2), )
if mibBuilder.loadTexts: cpqHoOsCommonModuleTable.setStatus('deprecated')
cpqHoOsCommonModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 11, 2, 1, 4, 2, 1), ).setIndexNames((0, "CPQHOST-MIB", "cpqHoOsCommonModuleIndex"))
if mibBuilder.loadTexts: cpqHoOsCommonModuleEntry.setStatus('deprecated')
cpqHoOsCommonModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoOsCommonModuleIndex.setStatus('deprecated')
cpqHoOsCommonModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 1, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoOsCommonModuleName.setStatus('deprecated')
cpqHoOsCommonModuleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 1, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoOsCommonModuleVersion.setStatus('deprecated')
cpqHoOsCommonModuleDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 1, 4, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoOsCommonModuleDate.setStatus('deprecated')
cpqHoOsCommonModulePurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 1, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoOsCommonModulePurpose.setStatus('deprecated')
cpqHoName = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoName.setStatus('mandatory')
cpqHoVersion = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoVersion.setStatus('mandatory')
cpqHoDesc = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoDesc.setStatus('mandatory')
cpqHoOsType = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("other", 1), ("netware", 2), ("windowsnt", 3), ("sco-unix", 4), ("unixware", 5), ("os-2", 6), ("ms-dos", 7), ("dos-windows", 8), ("windows95", 9), ("windows98", 10), ("open-vms", 11), ("nsk", 12), ("windowsCE", 13), ("linux", 14), ("windows2000", 15), ("tru64UNIX", 16), ("windows2003", 17), ("windows2003-x64", 18), ("solaris", 19), ("windows2003-ia64", 20), ("windows2008", 21), ("windows2008-x64", 22), ("windows2008-ia64", 23)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoOsType.setStatus('mandatory')
cpqHoTelnet = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("available", 2), ("notavailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoTelnet.setStatus('mandatory')
cpqHoSystemRole = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHoSystemRole.setStatus('mandatory')
cpqHoSystemRoleDetail = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHoSystemRoleDetail.setStatus('mandatory')
cpqHoCrashDumpState = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("completememorydump", 1), ("kernelmemorydump", 2), ("smallmemorydump", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoCrashDumpState.setStatus('mandatory')
cpqHoCrashDumpCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoCrashDumpCondition.setStatus('mandatory')
cpqHoCrashDumpMonitoring = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHoCrashDumpMonitoring.setStatus('optional')
cpqHoMaxLogicalCPUSupported = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoMaxLogicalCPUSupported.setStatus('optional')
cpqHoCpuUtilTable = MibTable((1, 3, 6, 1, 4, 1, 232, 11, 2, 3, 1), )
if mibBuilder.loadTexts: cpqHoCpuUtilTable.setStatus('mandatory')
cpqHoCpuUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 11, 2, 3, 1, 1), ).setIndexNames((0, "CPQHOST-MIB", "cpqHoCpuUtilUnitIndex"))
if mibBuilder.loadTexts: cpqHoCpuUtilEntry.setStatus('mandatory')
cpqHoCpuUtilUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoCpuUtilUnitIndex.setStatus('mandatory')
cpqHoCpuUtilMin = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoCpuUtilMin.setStatus('mandatory')
cpqHoCpuUtilFiveMin = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoCpuUtilFiveMin.setStatus('mandatory')
cpqHoCpuUtilThirtyMin = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoCpuUtilThirtyMin.setStatus('mandatory')
cpqHoCpuUtilHour = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoCpuUtilHour.setStatus('mandatory')
cpqHoCpuUtilHwLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 3, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoCpuUtilHwLocation.setStatus('optional')
cpqHoFileSysTable = MibTable((1, 3, 6, 1, 4, 1, 232, 11, 2, 4, 1), )
if mibBuilder.loadTexts: cpqHoFileSysTable.setStatus('mandatory')
cpqHoFileSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 11, 2, 4, 1, 1), ).setIndexNames((0, "CPQHOST-MIB", "cpqHoFileSysIndex"))
if mibBuilder.loadTexts: cpqHoFileSysEntry.setStatus('mandatory')
cpqHoFileSysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoFileSysIndex.setStatus('mandatory')
cpqHoFileSysDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoFileSysDesc.setStatus('mandatory')
cpqHoFileSysSpaceTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoFileSysSpaceTotal.setStatus('mandatory')
cpqHoFileSysSpaceUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoFileSysSpaceUsed.setStatus('mandatory')
cpqHoFileSysPercentSpaceUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoFileSysPercentSpaceUsed.setStatus('mandatory')
cpqHoFileSysAllocUnitsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoFileSysAllocUnitsTotal.setStatus('mandatory')
cpqHoFileSysAllocUnitsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoFileSysAllocUnitsUsed.setStatus('mandatory')
cpqHoFileSysStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoFileSysStatus.setStatus('mandatory')
cpqHoFileSysCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoFileSysCondition.setStatus('mandatory')
cpqHoIfPhysMapTable = MibTable((1, 3, 6, 1, 4, 1, 232, 11, 2, 5, 1), )
if mibBuilder.loadTexts: cpqHoIfPhysMapTable.setStatus('deprecated')
cpqHoIfPhysMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 11, 2, 5, 1, 1), ).setIndexNames((0, "CPQHOST-MIB", "cpqHoIfPhysMapIndex"))
if mibBuilder.loadTexts: cpqHoIfPhysMapEntry.setStatus('deprecated')
cpqHoIfPhysMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoIfPhysMapIndex.setStatus('deprecated')
cpqHoIfPhysMapSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoIfPhysMapSlot.setStatus('deprecated')
cpqHoIfPhysMapIoBaseAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoIfPhysMapIoBaseAddr.setStatus('deprecated')
cpqHoIfPhysMapIrq = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoIfPhysMapIrq.setStatus('deprecated')
cpqHoIfPhysMapDma = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoIfPhysMapDma.setStatus('deprecated')
cpqHoIfPhysMapMemBaseAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoIfPhysMapMemBaseAddr.setStatus('deprecated')
cpqHoIfPhysMapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoIfPhysMapPort.setStatus('deprecated')
cpqHoIfPhysMapDuplexState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("half", 2), ("full", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoIfPhysMapDuplexState.setStatus('deprecated')
cpqHoIfPhysMapCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoIfPhysMapCondition.setStatus('deprecated')
cpqHoIfPhysMapOverallCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoIfPhysMapOverallCondition.setStatus('deprecated')
cpqHoSWRunningTable = MibTable((1, 3, 6, 1, 4, 1, 232, 11, 2, 6, 1), )
if mibBuilder.loadTexts: cpqHoSWRunningTable.setStatus('mandatory')
cpqHoSWRunningEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 11, 2, 6, 1, 1), ).setIndexNames((0, "CPQHOST-MIB", "cpqHoSWRunningIndex"))
if mibBuilder.loadTexts: cpqHoSWRunningEntry.setStatus('mandatory')
cpqHoSWRunningIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoSWRunningIndex.setStatus('mandatory')
cpqHoSWRunningName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoSWRunningName.setStatus('mandatory')
cpqHoSWRunningDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 6, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoSWRunningDesc.setStatus('mandatory')
cpqHoSWRunningVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 6, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoSWRunningVersion.setStatus('mandatory')
cpqHoSWRunningDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 6, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoSWRunningDate.setStatus('mandatory')
cpqHoSWRunningMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("start", 2), ("stop", 3), ("startAndStop", 4), ("count", 5), ("startAndCount", 6), ("countAndStop", 7), ("startCountAndStop", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoSWRunningMonitor.setStatus('mandatory')
cpqHoSWRunningState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("started", 2), ("stopped", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoSWRunningState.setStatus('mandatory')
cpqHoSWRunningCount = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoSWRunningCount.setStatus('optional')
cpqHoSWRunningCountMin = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHoSWRunningCountMin.setStatus('optional')
cpqHoSWRunningCountMax = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHoSWRunningCountMax.setStatus('optional')
cpqHoSWRunningEventTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 6, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoSWRunningEventTime.setStatus('optional')
cpqHoSWRunningStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("normal", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6), ("disabled", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoSWRunningStatus.setStatus('optional')
cpqHoSWRunningConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("starting", 2), ("initialized", 3), ("configured", 4), ("operational", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoSWRunningConfigStatus.setStatus('optional')
cpqHoSWRunningIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 6, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoSWRunningIdentifier.setStatus('optional')
cpqHoSWRunningRedundancyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 6, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("master", 2), ("backup", 3), ("slave", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoSWRunningRedundancyMode.setStatus('optional')
cpqHoSwRunningTrapDesc = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoSwRunningTrapDesc.setStatus('mandatory')
cpqHoSwVerNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoSwVerNextIndex.setStatus('mandatory')
cpqHoSwVerTable = MibTable((1, 3, 6, 1, 4, 1, 232, 11, 2, 7, 2), )
if mibBuilder.loadTexts: cpqHoSwVerTable.setStatus('mandatory')
cpqHoSwVerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 11, 2, 7, 2, 1), ).setIndexNames((0, "CPQHOST-MIB", "cpqHoSwVerIndex"))
if mibBuilder.loadTexts: cpqHoSwVerEntry.setStatus('mandatory')
cpqHoSwVerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoSwVerIndex.setStatus('mandatory')
cpqHoSwVerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("loaded", 2), ("notloaded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoSwVerStatus.setStatus('mandatory')
cpqHoSwVerType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("driver", 2), ("agent", 3), ("sysutil", 4), ("application", 5), ("keyfile", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHoSwVerType.setStatus('mandatory')
cpqHoSwVerName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 7, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHoSwVerName.setStatus('mandatory')
cpqHoSwVerDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 7, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHoSwVerDescription.setStatus('mandatory')
cpqHoSwVerDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 7, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoSwVerDate.setStatus('mandatory')
cpqHoSwVerLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 7, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHoSwVerLocation.setStatus('mandatory')
cpqHoSwVerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 7, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoSwVerVersion.setStatus('mandatory')
cpqHoSwVerVersionBinary = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 7, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoSwVerVersionBinary.setStatus('mandatory')
cpqHoSwVerAgentsVer = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 7, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoSwVerAgentsVer.setStatus('mandatory')
cpqHoGenericData = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 8, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHoGenericData.setStatus('mandatory')
cpqHoCriticalSoftwareUpdateData = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHoCriticalSoftwareUpdateData.setStatus('mandatory')
cpqHoSwPerfAppErrorDesc = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 9, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoSwPerfAppErrorDesc.setStatus('mandatory')
cpqHoMibStatusArray = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 10, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoMibStatusArray.setStatus('mandatory')
cpqHoConfigChangedDate = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 10, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoConfigChangedDate.setStatus('mandatory')
cpqHoGUID = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 10, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHoGUID.setStatus('mandatory')
cpqHoCodeServer = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 10, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoCodeServer.setStatus('mandatory')
cpqHoWebMgmtPort = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 10, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoWebMgmtPort.setStatus('mandatory')
cpqHoGUIDCanonical = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 10, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 36))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHoGUIDCanonical.setStatus('mandatory')
cpqHoTrapFlags = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoTrapFlags.setStatus('mandatory')
cpqHoClientLastModified = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 12, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoClientLastModified.setStatus('mandatory')
cpqHoClientDelete = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 12, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqHoClientDelete.setStatus('mandatory')
cpqHoClientTable = MibTable((1, 3, 6, 1, 4, 1, 232, 11, 2, 12, 3), )
if mibBuilder.loadTexts: cpqHoClientTable.setStatus('mandatory')
cpqHoClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 11, 2, 12, 3, 1), ).setIndexNames((0, "CPQHOST-MIB", "cpqHoClientIndex"))
if mibBuilder.loadTexts: cpqHoClientEntry.setStatus('mandatory')
cpqHoClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 12, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoClientIndex.setStatus('mandatory')
cpqHoClientName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 12, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoClientName.setStatus('mandatory')
cpqHoClientIpxAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 12, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoClientIpxAddress.setStatus('mandatory')
cpqHoClientIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 12, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoClientIpAddress.setStatus('mandatory')
cpqHoClientCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 12, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoClientCommunity.setStatus('mandatory')
cpqHoClientID = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 12, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoClientID.setStatus('mandatory')
cpqHoPhysicalMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoPhysicalMemorySize.setStatus('mandatory')
cpqHoPhysicalMemoryFree = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 13, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoPhysicalMemoryFree.setStatus('mandatory')
cpqHoPagingMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 13, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoPagingMemorySize.setStatus('mandatory')
cpqHoPagingMemoryFree = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 13, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoPagingMemoryFree.setStatus('mandatory')
cpqHoBootPagingFileSize = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 13, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoBootPagingFileSize.setStatus('mandatory')
cpqHoBootPagingFileMinimumSize = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 13, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoBootPagingFileMinimumSize.setStatus('mandatory')
cpqHoBootPagingFileVolumeFreeSpace = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 13, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoBootPagingFileVolumeFreeSpace.setStatus('optional')
cpqHoFwVerTable = MibTable((1, 3, 6, 1, 4, 1, 232, 11, 2, 14, 1), )
if mibBuilder.loadTexts: cpqHoFwVerTable.setStatus('mandatory')
cpqHoFwVerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 11, 2, 14, 1, 1), ).setIndexNames((0, "CPQHOST-MIB", "cpqHoFwVerIndex"))
if mibBuilder.loadTexts: cpqHoFwVerEntry.setStatus('mandatory')
cpqHoFwVerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoFwVerIndex.setStatus('mandatory')
cpqHoFwVerCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("storage", 2), ("nic", 3), ("rib", 4), ("system", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoFwVerCategory.setStatus('mandatory')
cpqHoFwVerDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("other", 1), ("internalArrayController", 2), ("fibreArrayController", 3), ("scsiController", 4), ("fibreChannelTapeController", 5), ("modularDataRouter", 6), ("ideCdRomDrive", 7), ("ideDiskDrive", 8), ("scsiCdRom-ScsiAttached", 9), ("scsiDiskDrive-ScsiAttached", 10), ("scsiTapeDrive-ScsiAttached", 11), ("scsiTapeLibrary-ScsiAttached", 12), ("scsiDiskDrive-ArrayAttached", 13), ("scsiTapeDrive-ArrayAttached", 14), ("scsiTapeLibrary-ArrayAttached", 15), ("scsiDiskDrive-FibreAttached", 16), ("scsiTapeDrive-FibreAttached", 17), ("scsiTapeLibrary-FibreAttached", 18), ("scsiEnclosureBackplaneRom-ScsiAttached", 19), ("scsiEnclosureBackplaneRom-ArrayAttached", 20), ("scsiEnclosureBackplaneRom-FibreAttached", 21), ("scsiEnclosureBackplaneRom-ra4x00", 22), ("systemRom", 23), ("networkInterfaceController", 24), ("remoteInsightBoard", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoFwVerDeviceType.setStatus('mandatory')
cpqHoFwVerDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 14, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoFwVerDisplayName.setStatus('mandatory')
cpqHoFwVerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 14, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoFwVerVersion.setStatus('mandatory')
cpqHoFwVerLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 14, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoFwVerLocation.setStatus('mandatory')
cpqHoFwVerXmlString = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 14, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoFwVerXmlString.setStatus('mandatory')
cpqHoFwVerKeyString = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 14, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoFwVerKeyString.setStatus('mandatory')
cpqHoFwVerUpdateMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 11, 2, 14, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("noUpdate", 2), ("softwareflash", 3), ("replacePhysicalRom", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoFwVerUpdateMethod.setStatus('mandatory')
cpqHoHWInfoPlatform = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("cellular", 2), ("foundation", 3), ("virtualMachine", 4), ("serverBlade", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqHoHWInfoPlatform.setStatus('optional')
cpqPwrWarnType = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 16, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqPwrWarnType.setStatus('mandatory')
cpqPwrWarnThreshold = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 16, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqPwrWarnThreshold.setStatus('mandatory')
cpqPwrWarnDuration = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 16, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqPwrWarnDuration.setStatus('mandatory')
cpqSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 16, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSerialNum.setStatus('mandatory')
cpqServerUUID = MibScalar((1, 3, 6, 1, 4, 1, 232, 11, 2, 16, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqServerUUID.setStatus('mandatory')
cpqHoGenericTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,11001)).setObjects(("CPQHOST-MIB", "cpqHoGenericData"))
cpqHoAppErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,11002)).setObjects(("CPQHOST-MIB", "cpqHoSwPerfAppErrorDesc"))
cpqHo2GenericTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,11003)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHOST-MIB", "cpqHoGenericData"))
cpqHo2AppErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,11004)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHOST-MIB", "cpqHoSwPerfAppErrorDesc"))
cpqHo2NicStatusOk = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,11005)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHOST-MIB", "cpqHoIfPhysMapSlot"))
cpqHo2NicStatusFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,11006)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHOST-MIB", "cpqHoIfPhysMapSlot"))
cpqHo2NicSwitchoverOccurred = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,11007)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHOST-MIB", "cpqHoIfPhysMapSlot"), ("CPQHOST-MIB", "cpqHoIfPhysMapSlot"))
cpqHo2NicStatusOk2 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,11008)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHOST-MIB", "cpqHoIfPhysMapSlot"), ("CPQHOST-MIB", "cpqHoIfPhysMapPort"))
cpqHo2NicStatusFailed2 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,11009)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHOST-MIB", "cpqHoIfPhysMapSlot"), ("CPQHOST-MIB", "cpqHoIfPhysMapPort"))
cpqHo2NicSwitchoverOccurred2 = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,11010)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHOST-MIB", "cpqHoIfPhysMapSlot"), ("CPQHOST-MIB", "cpqHoIfPhysMapPort"), ("CPQHOST-MIB", "cpqHoIfPhysMapSlot"), ("CPQHOST-MIB", "cpqHoIfPhysMapPort"))
cpqHoProcessEventTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,11011)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHOST-MIB", "cpqHoSwRunningTrapDesc"))
cpqHoProcessCountWarning = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,11012)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHOST-MIB", "cpqHoSWRunningName"), ("CPQHOST-MIB", "cpqHoSWRunningCount"), ("CPQHOST-MIB", "cpqHoSWRunningCountMin"), ("CPQHOST-MIB", "cpqHoSWRunningCountMax"), ("CPQHOST-MIB", "cpqHoSWRunningEventTime"))
cpqHoProcessCountNormal = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,11013)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHOST-MIB", "cpqHoSWRunningName"), ("CPQHOST-MIB", "cpqHoSWRunningCount"), ("CPQHOST-MIB", "cpqHoSWRunningCountMin"), ("CPQHOST-MIB", "cpqHoSWRunningCountMax"), ("CPQHOST-MIB", "cpqHoSWRunningEventTime"))
cpqHoCriticalSoftwareUpdateTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,11014)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHOST-MIB", "cpqHoCriticalSoftwareUpdateData"))
cpqHoCrashDumpNotEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,11015)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHOST-MIB", "cpqHoCrashDumpState"))
cpqHoBootPagingFileTooSmallTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,11016)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHOST-MIB", "cpqHoCrashDumpState"), ("CPQHOST-MIB", "cpqHoBootPagingFileSize"), ("CPQHOST-MIB", "cpqHoBootPagingFileMinimumSize"))
cpqHoSWRunningStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,11017)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHOST-MIB", "cpqHoSWRunningName"), ("CPQHOST-MIB", "cpqHoSWRunningDesc"), ("CPQHOST-MIB", "cpqHoSwRunningTrapDesc"), ("CPQHOST-MIB", "cpqHoSWRunningVersion"), ("CPQHOST-MIB", "cpqHoSWRunningStatus"), ("CPQHOST-MIB", "cpqHoSWRunningConfigStatus"), ("CPQHOST-MIB", "cpqHoSWRunningIdentifier"), ("CPQHOST-MIB", "cpqHoSWRunningRedundancyMode"))
cpqHo2PowerThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,11018)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHOST-MIB", "cpqPwrWarnType"), ("CPQHOST-MIB", "cpqPwrWarnThreshold"), ("CPQHOST-MIB", "cpqPwrWarnDuration"), ("CPQHOST-MIB", "cpqSerialNum"), ("CPQHOST-MIB", "cpqServerUUID"))
cpqHoBootPagingFileOrFreeSpaceTooSmallTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,11019)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQHOST-MIB", "cpqHoCrashDumpState"), ("CPQHOST-MIB", "cpqHoBootPagingFileSize"), ("CPQHOST-MIB", "cpqHoBootPagingFileVolumeFreeSpace"), ("CPQHOST-MIB", "cpqHoBootPagingFileMinimumSize"))
mibBuilder.exportSymbols("CPQHOST-MIB", cpqHoCrashDumpState=cpqHoCrashDumpState, cpqHoGeneric=cpqHoGeneric, cpqHoClientIndex=cpqHoClientIndex, cpqHoGenericTrap=cpqHoGenericTrap, cpqHoSWRunningCountMin=cpqHoSWRunningCountMin, cpqHostOs=cpqHostOs, cpqHo2NicSwitchoverOccurred2=cpqHo2NicSwitchoverOccurred2, cpqHoCpuUtilEntry=cpqHoCpuUtilEntry, cpqHoVersion=cpqHoVersion, cpqHoCpuUtilTable=cpqHoCpuUtilTable, cpqHoCriticalSoftwareUpdateTrap=cpqHoCriticalSoftwareUpdateTrap, cpqHoWebMgmtPort=cpqHoWebMgmtPort, cpqHoHWInfo=cpqHoHWInfo, cpqHoMaxLogicalCPUSupported=cpqHoMaxLogicalCPUSupported, cpqHoFwVerLocation=cpqHoFwVerLocation, cpqSerialNum=cpqSerialNum, cpqHoFileSysSpaceUsed=cpqHoFileSysSpaceUsed, cpqHoFwVerEntry=cpqHoFwVerEntry, cpqHoMibStatusArray=cpqHoMibStatusArray, cpqHoFwVerVersion=cpqHoFwVerVersion, cpqHoTrapInfo=cpqHoTrapInfo, cpqHoOsCommon=cpqHoOsCommon, cpqHoCpuUtilFiveMin=cpqHoCpuUtilFiveMin, cpqHoIfPhysMapIrq=cpqHoIfPhysMapIrq, cpqHoIfPhysMapCondition=cpqHoIfPhysMapCondition, cpqHoFileSysIndex=cpqHoFileSysIndex, cpqHoFileSysPercentSpaceUsed=cpqHoFileSysPercentSpaceUsed, cpqHoSWRunningTable=cpqHoSWRunningTable, cpqHoIfPhysMapIoBaseAddr=cpqHoIfPhysMapIoBaseAddr, cpqHoSwVerIndex=cpqHoSwVerIndex, cpqHoBootPagingFileSize=cpqHoBootPagingFileSize, cpqHoSwVerVersionBinary=cpqHoSwVerVersionBinary, cpqHoSwVerName=cpqHoSwVerName, cpqHoFileSysSpaceTotal=cpqHoFileSysSpaceTotal, cpqHoOsCommonModuleVersion=cpqHoOsCommonModuleVersion, cpqHoPhysicalMemoryFree=cpqHoPhysicalMemoryFree, cpqHoOsCommonPollFreq=cpqHoOsCommonPollFreq, cpqHoClients=cpqHoClients, cpqHoFwVerDisplayName=cpqHoFwVerDisplayName, cpqHoBootPagingFileOrFreeSpaceTooSmallTrap=cpqHoBootPagingFileOrFreeSpaceTooSmallTrap, cpqHoSwVer=cpqHoSwVer, cpqHoHWInfoPlatform=cpqHoHWInfoPlatform, cpqHoGUIDCanonical=cpqHoGUIDCanonical, cpqHoIfPhysMap=cpqHoIfPhysMap, cpqHoProcessCountNormal=cpqHoProcessCountNormal, cpqHoSWRunningCount=cpqHoSWRunningCount, cpqHoBootPagingFileMinimumSize=cpqHoBootPagingFileMinimumSize, cpqHoInterface=cpqHoInterface, cpqHoOsCommonModuleTable=cpqHoOsCommonModuleTable, cpqHoIfPhysMapOverallCondition=cpqHoIfPhysMapOverallCondition, cpqHoSWRunningDate=cpqHoSWRunningDate, cpqPwrWarnThreshold=cpqPwrWarnThreshold, cpqHoSwVerTable=cpqHoSwVerTable, cpqHoIfPhysMapPort=cpqHoIfPhysMapPort, cpqHoSWRunningEntry=cpqHoSWRunningEntry, cpqHoSystemStatus=cpqHoSystemStatus, cpqHo2NicStatusFailed2=cpqHo2NicStatusFailed2, cpqPwrWarnDuration=cpqPwrWarnDuration, cpqHoCrashDumpNotEnabledTrap=cpqHoCrashDumpNotEnabledTrap, cpqHoCpuUtilMin=cpqHoCpuUtilMin, cpqHoUtil=cpqHoUtil, cpqHoComponent=cpqHoComponent, cpqHoFwVerTable=cpqHoFwVerTable, cpqHo2GenericTrap=cpqHo2GenericTrap, cpqHoSWRunningConfigStatus=cpqHoSWRunningConfigStatus, cpqHoClientIpxAddress=cpqHoClientIpxAddress, cpqHoIfPhysMapDuplexState=cpqHoIfPhysMapDuplexState, cpqHoFileSysAllocUnitsTotal=cpqHoFileSysAllocUnitsTotal, cpqHoMibRevMajor=cpqHoMibRevMajor, cpqHoIfPhysMapEntry=cpqHoIfPhysMapEntry, cpqHoSWRunning=cpqHoSWRunning, cpqHoSWRunningEventTime=cpqHoSWRunningEventTime, cpqHo2PowerThresholdTrap=cpqHo2PowerThresholdTrap, cpqHoCriticalSoftwareUpdateData=cpqHoCriticalSoftwareUpdateData, cpqHoSWRunningIdentifier=cpqHoSWRunningIdentifier, cpqHoIfPhysMapIndex=cpqHoIfPhysMapIndex, cpqHoSwVerAgentsVer=cpqHoSwVerAgentsVer, cpqHoAppErrorTrap=cpqHoAppErrorTrap, cpqPwrWarnType=cpqPwrWarnType, cpqHoSwVerLocation=cpqHoSwVerLocation, cpqHoSwRunningTrapDesc=cpqHoSwRunningTrapDesc, cpqHoSwVerDescription=cpqHoSwVerDescription, cpqHoSWRunningVersion=cpqHoSWRunningVersion, cpqHoClientID=cpqHoClientID, cpqHoPhysicalMemorySize=cpqHoPhysicalMemorySize, cpqHoOsType=cpqHoOsType, cpqHoPagingMemoryFree=cpqHoPagingMemoryFree, cpqHoProcessEventTrap=cpqHoProcessEventTrap, cpqHoGUID=cpqHoGUID, cpqHoClientIpAddress=cpqHoClientIpAddress, cpqHoMibCondition=cpqHoMibCondition, cpqHoConfigChangedDate=cpqHoConfigChangedDate, cpqHoOsCommonModuleName=cpqHoOsCommonModuleName, cpqHoCrashDumpMonitoring=cpqHoCrashDumpMonitoring, cpqHoSwPerfAppErrorDesc=cpqHoSwPerfAppErrorDesc, cpqHo2AppErrorTrap=cpqHo2AppErrorTrap, cpqHoSwVerEntry=cpqHoSwVerEntry, cpqHoFileSysTable=cpqHoFileSysTable, cpqHoSwVerType=cpqHoSwVerType, cpqHoBootPagingFileVolumeFreeSpace=cpqHoBootPagingFileVolumeFreeSpace, cpqHoProcessCountWarning=cpqHoProcessCountWarning, cpqHoMibRev=cpqHoMibRev, cpqHoCrashDumpCondition=cpqHoCrashDumpCondition, cpqHoDesc=cpqHoDesc, cpqHoFwVerXmlString=cpqHoFwVerXmlString, cpqHoInfo=cpqHoInfo, cpqHoFileSysAllocUnitsUsed=cpqHoFileSysAllocUnitsUsed, cpqPwrThreshold=cpqPwrThreshold, cpqHoClientEntry=cpqHoClientEntry, cpqHoClientCommunity=cpqHoClientCommunity, cpqHoSWRunningIndex=cpqHoSWRunningIndex, cpqHoIfPhysMapDma=cpqHoIfPhysMapDma, cpqHoName=cpqHoName, cpqHoSWRunningMonitor=cpqHoSWRunningMonitor, cpqHo2NicStatusOk2=cpqHo2NicStatusOk2, cpqHoFileSysCondition=cpqHoFileSysCondition, cpqHoFwVerKeyString=cpqHoFwVerKeyString, cpqHoFwVerCategory=cpqHoFwVerCategory, cpqHoIfPhysMapTable=cpqHoIfPhysMapTable, cpqHoFileSysStatus=cpqHoFileSysStatus, cpqHo2NicStatusOk=cpqHo2NicStatusOk, cpqHoSwVerNextIndex=cpqHoSwVerNextIndex, cpqServerUUID=cpqServerUUID, cpqHoFileSysEntry=cpqHoFileSysEntry, cpqHoSystemRoleDetail=cpqHoSystemRoleDetail, cpqHoFwVerDeviceType=cpqHoFwVerDeviceType, cpqHoIfPhysMapSlot=cpqHoIfPhysMapSlot, cpqHoSWRunningStatusChangeTrap=cpqHoSWRunningStatusChangeTrap, compaq=compaq, cpqHoSWRunningStatus=cpqHoSWRunningStatus, cpqHoCpuUtilThirtyMin=cpqHoCpuUtilThirtyMin, cpqHoCodeServer=cpqHoCodeServer, cpqHoFileSys=cpqHoFileSys, cpqHoClientDelete=cpqHoClientDelete, cpqHoMemory=cpqHoMemory, cpqHoSWRunningState=cpqHoSWRunningState, cpqHoClientTable=cpqHoClientTable, cpqHoGenericData=cpqHoGenericData, cpqHoOsCommonModuleIndex=cpqHoOsCommonModuleIndex, cpqHoCpuUtilHour=cpqHoCpuUtilHour, cpqHoSystemRole=cpqHoSystemRole, cpqHoSwVerStatus=cpqHoSwVerStatus, cpqHoCpuUtilHwLocation=cpqHoCpuUtilHwLocation, cpqHoMibRevMinor=cpqHoMibRevMinor, cpqHoSwPerf=cpqHoSwPerf, cpqHoCpuUtilUnitIndex=cpqHoCpuUtilUnitIndex, cpqHoOsCommonModulePurpose=cpqHoOsCommonModulePurpose, cpqHoClientName=cpqHoClientName, cpqHoSWRunningCountMax=cpqHoSWRunningCountMax, cpqHoSWRunningRedundancyMode=cpqHoSWRunningRedundancyMode, cpqHoSWRunningDesc=cpqHoSWRunningDesc, cpqHoSwVerVersion=cpqHoSwVerVersion, cpqHoBootPagingFileTooSmallTrap=cpqHoBootPagingFileTooSmallTrap, cpqHoFileSysDesc=cpqHoFileSysDesc, cpqHoOsCommonModuleDate=cpqHoOsCommonModuleDate, cpqHoFwVer=cpqHoFwVer, cpqHoSwVerDate=cpqHoSwVerDate, cpqHo2NicStatusFailed=cpqHo2NicStatusFailed, cpqHoTrapFlags=cpqHoTrapFlags, cpqHoSWRunningName=cpqHoSWRunningName, cpqHoIfPhysMapMemBaseAddr=cpqHoIfPhysMapMemBaseAddr, cpqHoPagingMemorySize=cpqHoPagingMemorySize, cpqHo2NicSwitchoverOccurred=cpqHo2NicSwitchoverOccurred, cpqHoFwVerUpdateMethod=cpqHoFwVerUpdateMethod, cpqHoOsCommonModuleEntry=cpqHoOsCommonModuleEntry, cpqHoTelnet=cpqHoTelnet, cpqHoClientLastModified=cpqHoClientLastModified, cpqHoFwVerIndex=cpqHoFwVerIndex)
