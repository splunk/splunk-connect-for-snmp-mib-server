#
# PySNMP MIB module CAIUXOS (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CAIUXOS
# Produced by pysmi-0.3.4 at Mon Apr 29 17:29:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, enterprises, Unsigned32, ModuleIdentity, ObjectIdentity, Gauge32, NotificationType, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, MibIdentifier, IpAddress, NotificationType, iso, Bits, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "enterprises", "Unsigned32", "ModuleIdentity", "ObjectIdentity", "Gauge32", "NotificationType", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "MibIdentifier", "IpAddress", "NotificationType", "iso", "Bits", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cai = MibIdentifier((1, 3, 6, 1, 4, 1, 791))
caiSysMgr = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2))
agentWorks = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9))
unix = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4))
caiUxOs = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5))
uxsConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1))
uxsStatusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2))
uxsAvailableGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 3))
uxsPollGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4))
uxsConfigGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 1))
uxsConfigSysGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 2))
uxsConfigCPUGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 3))
uxsConfigLoadGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 4))
uxsConfigMemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 5))
uxsConfigSwapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 6))
uxsConfigFSysGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 7))
uxsConfigDiskGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 8))
uxsConfigFileGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 9))
uxsConfigProcGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10))
uxsConfigPrnGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 11))
uxsConfigNetGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 12))
uxsConfigIPCGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 13))
uxsStatusGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1))
uxsStatusCPUGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2))
uxsStatusLoadGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 3))
uxsStatusMemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 4))
uxsStatusSwapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5))
uxsStatusFSysGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6))
uxsStatusDiskGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 7))
uxsStatusFileGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8))
uxsStatusProcGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9))
uxsStatusPrnGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 10))
uxsStatusNetGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11))
uxsStatusIPCGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12))
uxsAvailFSysRefresh = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("refresh", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsAvailFSysRefresh.setStatus('mandatory')
uxsAvailFSysTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 3, 2), )
if mibBuilder.loadTexts: uxsAvailFSysTable.setStatus('mandatory')
uxsAvailDiskRefresh = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("refresh", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsAvailDiskRefresh.setStatus('mandatory')
uxsAvailDiskTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 3, 4), )
if mibBuilder.loadTexts: uxsAvailDiskTable.setStatus('mandatory')
uxsAvailPrnRefresh = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("refresh", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsAvailPrnRefresh.setStatus('mandatory')
uxsAvailPrnTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 3, 6), )
if mibBuilder.loadTexts: uxsAvailPrnTable.setStatus('mandatory')
uxsPollNetGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 1))
uxsPollIPCGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 2))
uxsConfigGeneralAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigGeneralAgentVersion.setStatus('mandatory')
uxsConfigGeneralColdStartTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigGeneralColdStartTime.setStatus('mandatory')
uxsConfigGeneralWarmStartTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigGeneralWarmStartTime.setStatus('mandatory')
uxsConfigGeneralCPUPollTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigGeneralCPUPollTime.setStatus('mandatory')
uxsConfigGeneralLoadPollTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigGeneralLoadPollTime.setStatus('mandatory')
uxsConfigGeneralMemPollTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigGeneralMemPollTime.setStatus('mandatory')
uxsConfigGeneralSwapPollTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigGeneralSwapPollTime.setStatus('mandatory')
uxsConfigGeneralFSysPollTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigGeneralFSysPollTime.setStatus('mandatory')
uxsConfigGeneralDiskPollTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigGeneralDiskPollTime.setStatus('mandatory')
uxsConfigGeneralFilePollTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigGeneralFilePollTime.setStatus('mandatory')
uxsConfigGeneralProcPollTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigGeneralProcPollTime.setStatus('mandatory')
uxsConfigGeneralPrnPollTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigGeneralPrnPollTime.setStatus('mandatory')
uxsConfigGeneralNetPollTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigGeneralNetPollTime.setStatus('mandatory')
uxsConfigGeneralIPCPollTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigGeneralIPCPollTime.setStatus('mandatory')
uxsConfigSysNodeName = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigSysNodeName.setStatus('mandatory')
uxsConfigSysSystemName = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigSysSystemName.setStatus('mandatory')
uxsConfigSysRelease = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigSysRelease.setStatus('mandatory')
uxsConfigSysVersion = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigSysVersion.setStatus('mandatory')
uxsConfigSysHardware = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigSysHardware.setStatus('mandatory')
uxsConfigSysBootTime = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigSysBootTime.setStatus('mandatory')
uxsConfigSysRunLevel = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigSysRunLevel.setStatus('mandatory')
uxsConfigCPUPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigCPUPollInterval.setStatus('mandatory')
uxsConfigCPUPollMethod = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("use-polling-period", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigCPUPollMethod.setStatus('mandatory')
uxsConfigCPULag = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigCPULag.setStatus('mandatory')
uxsConfigCPUWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigCPUWarn.setStatus('mandatory')
uxsConfigCPUCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 3, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigCPUCrit.setStatus('mandatory')
uxsConfigCPUMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigCPUMonitor.setStatus('mandatory')
uxsConfigCPULossAction = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("remove", 1), ("up", 2), ("down", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigCPULossAction.setStatus('mandatory')
uxsConfigLoadPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigLoadPollInterval.setStatus('mandatory')
uxsConfigLoadPollMethod = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("use-polling-period", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigLoadPollMethod.setStatus('mandatory')
uxsConfigMemPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigMemPollInterval.setStatus('mandatory')
uxsConfigMemPollMethod = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("use-polling-period", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigMemPollMethod.setStatus('mandatory')
uxsConfigSwapPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigSwapPollInterval.setStatus('mandatory')
uxsConfigSwapPollMethod = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("use-polling-period", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigSwapPollMethod.setStatus('mandatory')
uxsConfigSwapLag = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 6, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigSwapLag.setStatus('mandatory')
uxsConfigSwapWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 6, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigSwapWarn.setStatus('mandatory')
uxsConfigSwapCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 6, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigSwapCrit.setStatus('mandatory')
uxsConfigSwapMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigSwapMonitor.setStatus('mandatory')
uxsConfigSwapLossAction = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("remove", 1), ("up", 2), ("down", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigSwapLossAction.setStatus('mandatory')
uxsConfigFSysPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 7, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFSysPollInterval.setStatus('mandatory')
uxsConfigFSysPollMethod = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("use-polling-period", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFSysPollMethod.setStatus('mandatory')
uxsConfigFSysSpaceWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 7, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFSysSpaceWarn.setStatus('mandatory')
uxsConfigFSysSpaceCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 7, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFSysSpaceCrit.setStatus('mandatory')
uxsConfigFSysSpaceMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFSysSpaceMonitor.setStatus('mandatory')
uxsConfigFSysSpaceDWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 7, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFSysSpaceDWarn.setStatus('mandatory')
uxsConfigFSysSpaceDCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 7, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFSysSpaceDCrit.setStatus('mandatory')
uxsConfigFSysSpaceDMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 7, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFSysSpaceDMonitor.setStatus('mandatory')
uxsConfigFSysInodesWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 7, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFSysInodesWarn.setStatus('mandatory')
uxsConfigFSysInodesCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 7, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFSysInodesCrit.setStatus('mandatory')
uxsConfigFSysInodesMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 7, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFSysInodesMonitor.setStatus('mandatory')
uxsConfigFSysInodesDWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 7, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFSysInodesDWarn.setStatus('mandatory')
uxsConfigFSysInodesDCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 7, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFSysInodesDCrit.setStatus('mandatory')
uxsConfigFSysInodesDMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 7, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFSysInodesDMonitor.setStatus('mandatory')
uxsConfigFSysMountedMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 7, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("monitor", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFSysMountedMonitor.setStatus('mandatory')
uxsConfigFSysLossAction = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 7, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("remove", 1), ("up", 2), ("down", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFSysLossAction.setStatus('mandatory')
uxsConfigFSysNameAdd = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 7, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFSysNameAdd.setStatus('mandatory')
uxsConfigFSysNameRemove = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 7, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFSysNameRemove.setStatus('mandatory')
uxsConfigDiskPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 8, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigDiskPollInterval.setStatus('mandatory')
uxsConfigDiskPollMethod = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("use-polling-period", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigDiskPollMethod.setStatus('mandatory')
uxsConfigDiskTPutWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 8, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigDiskTPutWarn.setStatus('mandatory')
uxsConfigDiskTPutCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 8, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigDiskTPutCrit.setStatus('mandatory')
uxsConfigDiskTPutMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigDiskTPutMonitor.setStatus('mandatory')
uxsConfigDiskLossAction = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("remove", 1), ("up", 2), ("down", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigDiskLossAction.setStatus('mandatory')
uxsConfigDiskNameAdd = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 8, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigDiskNameAdd.setStatus('mandatory')
uxsConfigDiskNameRemove = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 8, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigDiskNameRemove.setStatus('mandatory')
uxsConfigFilePollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 9, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFilePollInterval.setStatus('mandatory')
uxsConfigFilePollMethod = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("use-polling-period", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFilePollMethod.setStatus('mandatory')
uxsConfigFileDesc = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 9, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFileDesc.setStatus('mandatory')
uxsConfigFileExist = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("should-exist", 1), ("should-not-exist", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFileExist.setStatus('mandatory')
uxsConfigFileExistMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("monitor", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFileExistMonitor.setStatus('mandatory')
uxsConfigFileModTimeMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("monitor", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFileModTimeMonitor.setStatus('mandatory')
uxsConfigFileSizeWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 9, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFileSizeWarn.setStatus('mandatory')
uxsConfigFileSizeCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 9, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFileSizeCrit.setStatus('mandatory')
uxsConfigFileSizeMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFileSizeMonitor.setStatus('mandatory')
uxsConfigFileSizeDWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 9, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFileSizeDWarn.setStatus('mandatory')
uxsConfigFileSizeDCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 9, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFileSizeDCrit.setStatus('mandatory')
uxsConfigFileSizeDMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 9, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFileSizeDMonitor.setStatus('mandatory')
uxsConfigFileNameAdd = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 9, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFileNameAdd.setStatus('mandatory')
uxsConfigFileNameRemove = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 9, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigFileNameRemove.setStatus('mandatory')
uxsConfigProcPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigProcPollInterval.setStatus('mandatory')
uxsConfigProcPollMethod = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("use-polling-period", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigProcPollMethod.setStatus('mandatory')
uxsConfigProcPath = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigProcPath.setStatus('mandatory')
uxsConfigProcArgs = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigProcArgs.setStatus('mandatory')
uxsConfigProcUsers = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigProcUsers.setStatus('mandatory')
uxsConfigProcInstMin = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigProcInstMin.setStatus('mandatory')
uxsConfigProcInstMax = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigProcInstMax.setStatus('mandatory')
uxsConfigProcInstMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("monitor", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigProcInstMonitor.setStatus('mandatory')
uxsConfigProcChldMin = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigProcChldMin.setStatus('mandatory')
uxsConfigProcChldMax = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigProcChldMax.setStatus('mandatory')
uxsConfigProcChldMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("monitor", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigProcChldMonitor.setStatus('mandatory')
uxsConfigProcSizeMin = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigProcSizeMin.setStatus('mandatory')
uxsConfigProcSizeMax = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigProcSizeMax.setStatus('mandatory')
uxsConfigProcSizeMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("monitor", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigProcSizeMonitor.setStatus('mandatory')
uxsConfigProcCPUWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigProcCPUWarn.setStatus('mandatory')
uxsConfigProcCPUCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigProcCPUCrit.setStatus('mandatory')
uxsConfigProcCPUMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigProcCPUMonitor.setStatus('mandatory')
uxsConfigProcNameAdd = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigProcNameAdd.setStatus('mandatory')
uxsConfigProcNameRemove = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigProcNameRemove.setStatus('mandatory')
uxsConfigProcNameSig = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigProcNameSig.setStatus('mandatory')
uxsConfigProcPathSig = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigProcPathSig.setStatus('mandatory')
uxsConfigProcArgsSig = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 10, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsConfigProcArgsSig.setStatus('mandatory')
uxsConfigPrnPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigPrnPollInterval.setStatus('mandatory')
uxsConfigPrnPollMethod = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("use-polling-period", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigPrnPollMethod.setStatus('mandatory')
uxsConfigPrnDesc = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 11, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigPrnDesc.setStatus('mandatory')
uxsConfigPrnItemsWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 11, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigPrnItemsWarn.setStatus('mandatory')
uxsConfigPrnItemsCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 11, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigPrnItemsCrit.setStatus('mandatory')
uxsConfigPrnItemsMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 11, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigPrnItemsMonitor.setStatus('mandatory')
uxsConfigPrnLossAction = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 11, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("remove", 1), ("up", 2), ("down", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigPrnLossAction.setStatus('mandatory')
uxsConfigPrnNameAdd = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 11, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigPrnNameAdd.setStatus('mandatory')
uxsConfigPrnNameRemove = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 11, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigPrnNameRemove.setStatus('mandatory')
uxsConfigNetPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 12, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigNetPollInterval.setStatus('mandatory')
uxsConfigNetPollMethod = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("use-polling-period", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigNetPollMethod.setStatus('mandatory')
uxsConfigNetIPktWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 12, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigNetIPktWarn.setStatus('mandatory')
uxsConfigNetIPktCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 12, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigNetIPktCrit.setStatus('mandatory')
uxsConfigNetIPktMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 12, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigNetIPktMonitor.setStatus('mandatory')
uxsConfigNetIErrWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 12, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigNetIErrWarn.setStatus('mandatory')
uxsConfigNetIErrCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 12, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigNetIErrCrit.setStatus('mandatory')
uxsConfigNetIErrMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 12, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigNetIErrMonitor.setStatus('mandatory')
uxsConfigNetOPktWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 12, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigNetOPktWarn.setStatus('mandatory')
uxsConfigNetOPktCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 12, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigNetOPktCrit.setStatus('mandatory')
uxsConfigNetOPktMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 12, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigNetOPktMonitor.setStatus('mandatory')
uxsConfigNetOErrWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 12, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigNetOErrWarn.setStatus('mandatory')
uxsConfigNetOErrCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 12, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigNetOErrCrit.setStatus('mandatory')
uxsConfigNetOErrMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 12, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigNetOErrMonitor.setStatus('mandatory')
uxsConfigNetCollWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 12, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigNetCollWarn.setStatus('mandatory')
uxsConfigNetCollCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 12, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigNetCollCrit.setStatus('mandatory')
uxsConfigNetCollMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 12, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigNetCollMonitor.setStatus('mandatory')
uxsConfigNetLossAction = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 12, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("remove", 1), ("up", 2), ("down", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigNetLossAction.setStatus('mandatory')
uxsConfigIPCPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 13, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigIPCPollInterval.setStatus('mandatory')
uxsConfigIPCPollMethod = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 13, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("use-polling-period", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigIPCPollMethod.setStatus('mandatory')
uxsConfigIPCMQBytesLag = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 13, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigIPCMQBytesLag.setStatus('mandatory')
uxsConfigIPCMQBytesWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 13, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigIPCMQBytesWarn.setStatus('mandatory')
uxsConfigIPCMQBytesCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 13, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigIPCMQBytesCrit.setStatus('mandatory')
uxsConfigIPCMQBytesMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 1, 13, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsConfigIPCMQBytesMonitor.setStatus('mandatory')
uxsStatusGeneralTotalCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralTotalCount.setStatus('mandatory')
uxsStatusGeneralTotalWarning = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralTotalWarning.setStatus('mandatory')
uxsStatusGeneralTotalCritical = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralTotalCritical.setStatus('mandatory')
uxsStatusGeneralCPUCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralCPUCount.setStatus('mandatory')
uxsStatusGeneralCPUWarning = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralCPUWarning.setStatus('mandatory')
uxsStatusGeneralCPUCritical = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralCPUCritical.setStatus('mandatory')
uxsStatusGeneralLoadCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralLoadCount.setStatus('mandatory')
uxsStatusGeneralLoadWarning = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralLoadWarning.setStatus('mandatory')
uxsStatusGeneralLoadCritical = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralLoadCritical.setStatus('mandatory')
uxsStatusGeneralMemCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralMemCount.setStatus('mandatory')
uxsStatusGeneralMemWarning = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralMemWarning.setStatus('mandatory')
uxsStatusGeneralMemCritical = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralMemCritical.setStatus('mandatory')
uxsStatusGeneralSwapCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralSwapCount.setStatus('mandatory')
uxsStatusGeneralSwapWarning = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralSwapWarning.setStatus('mandatory')
uxsStatusGeneralSwapCritical = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralSwapCritical.setStatus('mandatory')
uxsStatusGeneralFSysCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralFSysCount.setStatus('mandatory')
uxsStatusGeneralFSysWarning = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralFSysWarning.setStatus('mandatory')
uxsStatusGeneralFSysCritical = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralFSysCritical.setStatus('mandatory')
uxsStatusGeneralDiskCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralDiskCount.setStatus('mandatory')
uxsStatusGeneralDiskWarning = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralDiskWarning.setStatus('mandatory')
uxsStatusGeneralDiskCritical = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralDiskCritical.setStatus('mandatory')
uxsStatusGeneralFileCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralFileCount.setStatus('mandatory')
uxsStatusGeneralFileWarning = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralFileWarning.setStatus('mandatory')
uxsStatusGeneralFileCritical = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralFileCritical.setStatus('mandatory')
uxsStatusGeneralProcCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralProcCount.setStatus('mandatory')
uxsStatusGeneralProcWarning = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralProcWarning.setStatus('mandatory')
uxsStatusGeneralProcCritical = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralProcCritical.setStatus('mandatory')
uxsStatusGeneralPrnCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralPrnCount.setStatus('mandatory')
uxsStatusGeneralPrnWarning = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralPrnWarning.setStatus('mandatory')
uxsStatusGeneralPrnCritical = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralPrnCritical.setStatus('mandatory')
uxsStatusGeneralNetCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralNetCount.setStatus('mandatory')
uxsStatusGeneralNetWarning = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralNetWarning.setStatus('mandatory')
uxsStatusGeneralNetCritical = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralNetCritical.setStatus('mandatory')
uxsStatusGeneralIPCCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralIPCCount.setStatus('mandatory')
uxsStatusGeneralIPCWarning = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralIPCWarning.setStatus('mandatory')
uxsStatusGeneralIPCCritical = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusGeneralIPCCritical.setStatus('mandatory')
uxsStatusCPUTotalName = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusCPUTotalName.setStatus('mandatory')
uxsStatusCPUTotalUser = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusCPUTotalUser.setStatus('mandatory')
uxsStatusCPUTotalSys = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusCPUTotalSys.setStatus('mandatory')
uxsStatusCPUTotalIdle = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusCPUTotalIdle.setStatus('mandatory')
uxsStatusCPUTotalWIO = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusCPUTotalWIO.setStatus('mandatory')
uxsStatusCPUTotalUsedValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusCPUTotalUsedValue.setStatus('mandatory')
uxsStatusCPUTotalLagValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusCPUTotalLagValue.setStatus('mandatory')
uxsStatusCPUTotalLag = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusCPUTotalLag.setStatus('mandatory')
uxsStatusCPUTotalWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusCPUTotalWarn.setStatus('mandatory')
uxsStatusCPUTotalCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusCPUTotalCrit.setStatus('mandatory')
uxsStatusCPUTotalMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusCPUTotalMonitor.setStatus('mandatory')
uxsStatusCPUTotalStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusCPUTotalStatus.setStatus('mandatory')
uxsStatusCPUCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusCPUCount.setStatus('mandatory')
uxsStatusCPUTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 14), )
if mibBuilder.loadTexts: uxsStatusCPUTable.setStatus('mandatory')
uxsStatusCPUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 14, 1), ).setIndexNames((0, "CAIUXOS", "uxsStatusCPUName"))
if mibBuilder.loadTexts: uxsStatusCPUEntry.setStatus('mandatory')
uxsStatusCPUName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 14, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusCPUName.setStatus('mandatory')
uxsStatusCPUUser = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusCPUUser.setStatus('mandatory')
uxsStatusCPUSys = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 14, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusCPUSys.setStatus('mandatory')
uxsStatusCPUIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 14, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusCPUIdle.setStatus('mandatory')
uxsStatusCPUWIO = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 14, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusCPUWIO.setStatus('mandatory')
uxsStatusCPUAggStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4), ("down", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusCPUAggStatus.setStatus('mandatory')
uxsStatusCPUUsedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 14, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusCPUUsedValue.setStatus('mandatory')
uxsStatusCPULagValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 14, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusCPULagValue.setStatus('mandatory')
uxsStatusCPULag = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 14, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusCPULag.setStatus('mandatory')
uxsStatusCPUWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 14, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusCPUWarn.setStatus('mandatory')
uxsStatusCPUCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 14, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusCPUCrit.setStatus('mandatory')
uxsStatusCPUMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 14, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusCPUMonitor.setStatus('mandatory')
uxsStatusCPUStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 14, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusCPUStatus.setStatus('mandatory')
uxsStatusCPULossAction = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 14, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("remove", 1), ("up", 2), ("down", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusCPULossAction.setStatus('mandatory')
uxsStatusCPULossStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 2, 14, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusCPULossStatus.setStatus('mandatory')
uxsStatusLoad1MinValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusLoad1MinValue.setStatus('mandatory')
uxsStatusLoad1MinWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusLoad1MinWarn.setStatus('mandatory')
uxsStatusLoad1MinCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusLoad1MinCrit.setStatus('mandatory')
uxsStatusLoad1MinMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusLoad1MinMonitor.setStatus('mandatory')
uxsStatusLoad1MinStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusLoad1MinStatus.setStatus('mandatory')
uxsStatusLoad5MinValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusLoad5MinValue.setStatus('mandatory')
uxsStatusLoad5MinWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 3, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusLoad5MinWarn.setStatus('mandatory')
uxsStatusLoad5MinCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 3, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusLoad5MinCrit.setStatus('mandatory')
uxsStatusLoad5MinMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusLoad5MinMonitor.setStatus('mandatory')
uxsStatusLoad5MinStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusLoad5MinStatus.setStatus('mandatory')
uxsStatusLoad15MinValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 3, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusLoad15MinValue.setStatus('mandatory')
uxsStatusLoad15MinWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 3, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusLoad15MinWarn.setStatus('mandatory')
uxsStatusLoad15MinCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 3, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusLoad15MinCrit.setStatus('mandatory')
uxsStatusLoad15MinMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusLoad15MinMonitor.setStatus('mandatory')
uxsStatusLoad15MinStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusLoad15MinStatus.setStatus('mandatory')
uxsStatusMemTotal = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusMemTotal.setStatus('mandatory')
uxsStatusMemValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusMemValue.setStatus('mandatory')
uxsStatusMemLagValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusMemLagValue.setStatus('mandatory')
uxsStatusMemLag = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusMemLag.setStatus('mandatory')
uxsStatusMemWarnValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 4, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusMemWarnValue.setStatus('mandatory')
uxsStatusMemCritValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 4, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusMemCritValue.setStatus('mandatory')
uxsStatusMemWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 4, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusMemWarn.setStatus('mandatory')
uxsStatusMemCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 4, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusMemCrit.setStatus('mandatory')
uxsStatusMemMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusMemMonitor.setStatus('mandatory')
uxsStatusMemStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusMemStatus.setStatus('mandatory')
uxsStatusSwapTotalName = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusSwapTotalName.setStatus('mandatory')
uxsStatusSwapTotalAvailable = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusSwapTotalAvailable.setStatus('mandatory')
uxsStatusSwapTotalUsedValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusSwapTotalUsedValue.setStatus('mandatory')
uxsStatusSwapTotalLagValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusSwapTotalLagValue.setStatus('mandatory')
uxsStatusSwapTotalLag = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusSwapTotalLag.setStatus('mandatory')
uxsStatusSwapTotalWarnValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusSwapTotalWarnValue.setStatus('mandatory')
uxsStatusSwapTotalCritValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusSwapTotalCritValue.setStatus('mandatory')
uxsStatusSwapTotalWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusSwapTotalWarn.setStatus('mandatory')
uxsStatusSwapTotalCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusSwapTotalCrit.setStatus('mandatory')
uxsStatusSwapTotalMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusSwapTotalMonitor.setStatus('mandatory')
uxsStatusSwapTotalStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusSwapTotalStatus.setStatus('mandatory')
uxsStatusSwapCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusSwapCount.setStatus('mandatory')
uxsStatusSwapTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 13), )
if mibBuilder.loadTexts: uxsStatusSwapTable.setStatus('mandatory')
uxsStatusSwapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 13, 1), ).setIndexNames((0, "CAIUXOS", "uxsStatusSwapName"))
if mibBuilder.loadTexts: uxsStatusSwapEntry.setStatus('mandatory')
uxsStatusSwapName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 13, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusSwapName.setStatus('mandatory')
uxsStatusSwapAggStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4), ("down", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusSwapAggStatus.setStatus('mandatory')
uxsStatusSwapAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusSwapAvailable.setStatus('mandatory')
uxsStatusSwapUsedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 13, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusSwapUsedValue.setStatus('mandatory')
uxsStatusSwapLagValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusSwapLagValue.setStatus('mandatory')
uxsStatusSwapLag = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 13, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusSwapLag.setStatus('mandatory')
uxsStatusSwapWarnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 13, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusSwapWarnValue.setStatus('mandatory')
uxsStatusSwapCritValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 13, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusSwapCritValue.setStatus('mandatory')
uxsStatusSwapWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 13, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusSwapWarn.setStatus('mandatory')
uxsStatusSwapCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 13, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusSwapCrit.setStatus('mandatory')
uxsStatusSwapMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 13, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusSwapMonitor.setStatus('mandatory')
uxsStatusSwapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 13, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusSwapStatus.setStatus('mandatory')
uxsStatusSwapLossAction = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 13, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("remove", 1), ("up", 2), ("down", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusSwapLossAction.setStatus('mandatory')
uxsStatusSwapLossStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 5, 13, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusSwapLossStatus.setStatus('mandatory')
uxsStatusFSysCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysCount.setStatus('mandatory')
uxsStatusFSysTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2), )
if mibBuilder.loadTexts: uxsStatusFSysTable.setStatus('mandatory')
uxsStatusFSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1), ).setIndexNames((0, "CAIUXOS", "uxsStatusFSysName"))
if mibBuilder.loadTexts: uxsStatusFSysEntry.setStatus('mandatory')
uxsStatusFSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysName.setStatus('mandatory')
uxsStatusFSysRelatedTo = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysRelatedTo.setStatus('mandatory')
uxsStatusFSysType = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysType.setStatus('mandatory')
uxsStatusFSysStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4), ("down", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysStatus.setStatus('mandatory')
uxsStatusFSysSpaceTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysSpaceTotal.setStatus('mandatory')
uxsStatusFSysSpaceValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysSpaceValue.setStatus('mandatory')
uxsStatusFSysSpaceWarnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysSpaceWarnValue.setStatus('mandatory')
uxsStatusFSysSpaceCritValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysSpaceCritValue.setStatus('mandatory')
uxsStatusFSysSpaceWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFSysSpaceWarn.setStatus('mandatory')
uxsStatusFSysSpaceCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFSysSpaceCrit.setStatus('mandatory')
uxsStatusFSysSpaceMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFSysSpaceMonitor.setStatus('mandatory')
uxsStatusFSysSpaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysSpaceStatus.setStatus('mandatory')
uxsStatusFSysSpaceDValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysSpaceDValue.setStatus('mandatory')
uxsStatusFSysSpaceDWarnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysSpaceDWarnValue.setStatus('mandatory')
uxsStatusFSysSpaceDCritValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysSpaceDCritValue.setStatus('mandatory')
uxsStatusFSysSpaceDWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFSysSpaceDWarn.setStatus('mandatory')
uxsStatusFSysSpaceDCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFSysSpaceDCrit.setStatus('mandatory')
uxsStatusFSysSpaceDMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFSysSpaceDMonitor.setStatus('mandatory')
uxsStatusFSysSpaceDStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysSpaceDStatus.setStatus('mandatory')
uxsStatusFSysInodesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysInodesTotal.setStatus('mandatory')
uxsStatusFSysInodesValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysInodesValue.setStatus('mandatory')
uxsStatusFSysInodesWarnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysInodesWarnValue.setStatus('mandatory')
uxsStatusFSysInodesCritValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysInodesCritValue.setStatus('mandatory')
uxsStatusFSysInodesWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFSysInodesWarn.setStatus('mandatory')
uxsStatusFSysInodesCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFSysInodesCrit.setStatus('mandatory')
uxsStatusFSysInodesMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFSysInodesMonitor.setStatus('mandatory')
uxsStatusFSysInodesStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysInodesStatus.setStatus('mandatory')
uxsStatusFSysInodesDValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysInodesDValue.setStatus('mandatory')
uxsStatusFSysInodesDWarnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysInodesDWarnValue.setStatus('mandatory')
uxsStatusFSysInodesDCritValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysInodesDCritValue.setStatus('mandatory')
uxsStatusFSysInodesDWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 31), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFSysInodesDWarn.setStatus('mandatory')
uxsStatusFSysInodesDCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 32), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFSysInodesDCrit.setStatus('mandatory')
uxsStatusFSysInodesDMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFSysInodesDMonitor.setStatus('mandatory')
uxsStatusFSysInodesDStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysInodesDStatus.setStatus('mandatory')
uxsStatusFSysMountedMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("monitor", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFSysMountedMonitor.setStatus('mandatory')
uxsStatusFSysMountedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysMountedStatus.setStatus('mandatory')
uxsStatusFSysLossAction = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("remove", 1), ("up", 2), ("down", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFSysLossAction.setStatus('mandatory')
uxsStatusFSysLossStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFSysLossStatus.setStatus('mandatory')
uxsStatusFSysRemove = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 6, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFSysRemove.setStatus('mandatory')
uxsStatusDiskCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusDiskCount.setStatus('mandatory')
uxsStatusDiskTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 7, 2), )
if mibBuilder.loadTexts: uxsStatusDiskTable.setStatus('mandatory')
uxsStatusDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 7, 2, 1), ).setIndexNames((0, "CAIUXOS", "uxsStatusDiskName"))
if mibBuilder.loadTexts: uxsStatusDiskEntry.setStatus('mandatory')
uxsStatusDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 7, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusDiskName.setStatus('mandatory')
uxsStatusDiskAggStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4), ("down", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusDiskAggStatus.setStatus('mandatory')
uxsStatusDiskTPutValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusDiskTPutValue.setStatus('mandatory')
uxsStatusDiskTPutWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 7, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusDiskTPutWarn.setStatus('mandatory')
uxsStatusDiskTPutCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 7, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusDiskTPutCrit.setStatus('mandatory')
uxsStatusDiskTPutMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusDiskTPutMonitor.setStatus('mandatory')
uxsStatusDiskTPutStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusDiskTPutStatus.setStatus('mandatory')
uxsStatusDiskLossAction = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("remove", 1), ("up", 2), ("down", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusDiskLossAction.setStatus('mandatory')
uxsStatusDiskLossStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusDiskLossStatus.setStatus('mandatory')
uxsStatusDiskRemove = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusDiskRemove.setStatus('mandatory')
uxsStatusFileCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFileCount.setStatus('mandatory')
uxsStatusFileTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2), )
if mibBuilder.loadTexts: uxsStatusFileTable.setStatus('mandatory')
uxsStatusFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2, 1), ).setIndexNames((0, "CAIUXOS", "uxsStatusFileName"))
if mibBuilder.loadTexts: uxsStatusFileEntry.setStatus('mandatory')
uxsStatusFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFileName.setStatus('mandatory')
uxsStatusFileDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFileDesc.setStatus('mandatory')
uxsStatusFileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4), ("down", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFileStatus.setStatus('mandatory')
uxsStatusFileExist = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("should-exist", 1), ("should-not-exist", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFileExist.setStatus('mandatory')
uxsStatusFileExistMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("monitor", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFileExistMonitor.setStatus('mandatory')
uxsStatusFileExistStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFileExistStatus.setStatus('mandatory')
uxsStatusFileModTime = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFileModTime.setStatus('mandatory')
uxsStatusFileModTimeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFileModTimeValue.setStatus('mandatory')
uxsStatusFileModTimeMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("monitor", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFileModTimeMonitor.setStatus('mandatory')
uxsStatusFileModTimeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3), ("reset", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFileModTimeStatus.setStatus('mandatory')
uxsStatusFileSizeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFileSizeValue.setStatus('mandatory')
uxsStatusFileSizeWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFileSizeWarn.setStatus('mandatory')
uxsStatusFileSizeCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFileSizeCrit.setStatus('mandatory')
uxsStatusFileSizeMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFileSizeMonitor.setStatus('mandatory')
uxsStatusFileSizeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFileSizeStatus.setStatus('mandatory')
uxsStatusFileSizeDValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFileSizeDValue.setStatus('mandatory')
uxsStatusFileSizeDWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFileSizeDWarn.setStatus('mandatory')
uxsStatusFileSizeDCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFileSizeDCrit.setStatus('mandatory')
uxsStatusFileSizeDMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFileSizeDMonitor.setStatus('mandatory')
uxsStatusFileSizeDStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusFileSizeDStatus.setStatus('mandatory')
uxsStatusFileRemove = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 8, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusFileRemove.setStatus('mandatory')
uxsStatusProcCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusProcCount.setStatus('mandatory')
uxsStatusProcTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2), )
if mibBuilder.loadTexts: uxsStatusProcTable.setStatus('mandatory')
uxsStatusProcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1), ).setIndexNames((0, "CAIUXOS", "uxsStatusProcName"), (0, "CAIUXOS", "uxsStatusProcPath"), (0, "CAIUXOS", "uxsStatusProcArgs"), (0, "CAIUXOS", "uxsStatusProcUsers"))
if mibBuilder.loadTexts: uxsStatusProcEntry.setStatus('mandatory')
uxsStatusProcName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusProcName.setStatus('mandatory')
uxsStatusProcPath = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusProcPath.setStatus('mandatory')
uxsStatusProcArgs = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusProcArgs.setStatus('mandatory')
uxsStatusProcUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusProcUsers.setStatus('mandatory')
uxsStatusProcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4), ("down", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusProcStatus.setStatus('mandatory')
uxsStatusProcPIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusProcPIDs.setStatus('mandatory')
uxsStatusProcInstValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusProcInstValue.setStatus('mandatory')
uxsStatusProcInstMin = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusProcInstMin.setStatus('mandatory')
uxsStatusProcInstMax = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusProcInstMax.setStatus('mandatory')
uxsStatusProcInstMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("monitor", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusProcInstMonitor.setStatus('mandatory')
uxsStatusProcInstStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusProcInstStatus.setStatus('mandatory')
uxsStatusProcChldValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusProcChldValue.setStatus('mandatory')
uxsStatusProcChldMin = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusProcChldMin.setStatus('mandatory')
uxsStatusProcChldMax = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusProcChldMax.setStatus('mandatory')
uxsStatusProcChldMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("monitor", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusProcChldMonitor.setStatus('mandatory')
uxsStatusProcChldStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusProcChldStatus.setStatus('mandatory')
uxsStatusProcSizeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusProcSizeValue.setStatus('mandatory')
uxsStatusProcSizeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusProcSizeMin.setStatus('mandatory')
uxsStatusProcSizeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusProcSizeMax.setStatus('mandatory')
uxsStatusProcSizeMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("monitor", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusProcSizeMonitor.setStatus('mandatory')
uxsStatusProcSizeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusProcSizeStatus.setStatus('mandatory')
uxsStatusProcCPUValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusProcCPUValue.setStatus('mandatory')
uxsStatusProcCPUWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusProcCPUWarn.setStatus('mandatory')
uxsStatusProcCPUCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusProcCPUCrit.setStatus('mandatory')
uxsStatusProcCPUMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusProcCPUMonitor.setStatus('mandatory')
uxsStatusProcCPUStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusProcCPUStatus.setStatus('mandatory')
uxsStatusProcRemove = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 9, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusProcRemove.setStatus('mandatory')
uxsStatusPrnCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusPrnCount.setStatus('mandatory')
uxsStatusPrnTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 10, 2), )
if mibBuilder.loadTexts: uxsStatusPrnTable.setStatus('mandatory')
uxsStatusPrnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 10, 2, 1), ).setIndexNames((0, "CAIUXOS", "uxsStatusPrnName"))
if mibBuilder.loadTexts: uxsStatusPrnEntry.setStatus('mandatory')
uxsStatusPrnName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 10, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusPrnName.setStatus('mandatory')
uxsStatusPrnAggStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4), ("down", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusPrnAggStatus.setStatus('mandatory')
uxsStatusPrnDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 10, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusPrnDesc.setStatus('mandatory')
uxsStatusPrnItemsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 10, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusPrnItemsValue.setStatus('mandatory')
uxsStatusPrnItemsWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 10, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusPrnItemsWarn.setStatus('mandatory')
uxsStatusPrnItemsCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 10, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusPrnItemsCrit.setStatus('mandatory')
uxsStatusPrnItemsMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 10, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusPrnItemsMonitor.setStatus('mandatory')
uxsStatusPrnItemsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 10, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusPrnItemsStatus.setStatus('mandatory')
uxsStatusPrnLossAction = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 10, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("remove", 1), ("up", 2), ("down", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusPrnLossAction.setStatus('mandatory')
uxsStatusPrnLossStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 10, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusPrnLossStatus.setStatus('mandatory')
uxsStatusPrnRemove = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 10, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusPrnRemove.setStatus('mandatory')
uxsStatusNetTotalStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetTotalStatus.setStatus('mandatory')
uxsStatusNetTotalIPktValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetTotalIPktValue.setStatus('mandatory')
uxsStatusNetTotalIPktWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetTotalIPktWarn.setStatus('mandatory')
uxsStatusNetTotalIPktCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetTotalIPktCrit.setStatus('mandatory')
uxsStatusNetTotalIPktMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetTotalIPktMonitor.setStatus('mandatory')
uxsStatusNetTotalIPktStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetTotalIPktStatus.setStatus('mandatory')
uxsStatusNetTotalIErrValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetTotalIErrValue.setStatus('mandatory')
uxsStatusNetTotalIErrWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetTotalIErrWarn.setStatus('mandatory')
uxsStatusNetTotalIErrCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetTotalIErrCrit.setStatus('mandatory')
uxsStatusNetTotalIErrMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetTotalIErrMonitor.setStatus('mandatory')
uxsStatusNetTotalIErrStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetTotalIErrStatus.setStatus('mandatory')
uxsStatusNetTotalOPktValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetTotalOPktValue.setStatus('mandatory')
uxsStatusNetTotalOPktWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetTotalOPktWarn.setStatus('mandatory')
uxsStatusNetTotalOPktCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetTotalOPktCrit.setStatus('mandatory')
uxsStatusNetTotalOPktMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetTotalOPktMonitor.setStatus('mandatory')
uxsStatusNetTotalOPktStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetTotalOPktStatus.setStatus('mandatory')
uxsStatusNetTotalOErrValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetTotalOErrValue.setStatus('mandatory')
uxsStatusNetTotalOErrWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetTotalOErrWarn.setStatus('mandatory')
uxsStatusNetTotalOErrCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetTotalOErrCrit.setStatus('mandatory')
uxsStatusNetTotalOErrMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetTotalOErrMonitor.setStatus('mandatory')
uxsStatusNetTotalOErrStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetTotalOErrStatus.setStatus('mandatory')
uxsStatusNetTotalCollValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetTotalCollValue.setStatus('mandatory')
uxsStatusNetTotalCollWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetTotalCollWarn.setStatus('mandatory')
uxsStatusNetTotalCollCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetTotalCollCrit.setStatus('mandatory')
uxsStatusNetTotalCollMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetTotalCollMonitor.setStatus('mandatory')
uxsStatusNetTotalCollStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetTotalCollStatus.setStatus('mandatory')
uxsStatusNetCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetCount.setStatus('mandatory')
uxsStatusNetTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28), )
if mibBuilder.loadTexts: uxsStatusNetTable.setStatus('mandatory')
uxsStatusNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1), ).setIndexNames((0, "CAIUXOS", "uxsStatusNetName"))
if mibBuilder.loadTexts: uxsStatusNetEntry.setStatus('mandatory')
uxsStatusNetName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetName.setStatus('mandatory')
uxsStatusNetIP = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetIP.setStatus('mandatory')
uxsStatusNetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetStatus.setStatus('mandatory')
uxsStatusNetIPktValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetIPktValue.setStatus('mandatory')
uxsStatusNetIPktWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetIPktWarn.setStatus('mandatory')
uxsStatusNetIPktCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetIPktCrit.setStatus('mandatory')
uxsStatusNetIPktMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetIPktMonitor.setStatus('mandatory')
uxsStatusNetIPktStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetIPktStatus.setStatus('mandatory')
uxsStatusNetIErrValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetIErrValue.setStatus('mandatory')
uxsStatusNetIErrWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetIErrWarn.setStatus('mandatory')
uxsStatusNetIErrCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetIErrCrit.setStatus('mandatory')
uxsStatusNetIErrMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetIErrMonitor.setStatus('mandatory')
uxsStatusNetIErrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetIErrStatus.setStatus('mandatory')
uxsStatusNetOPktValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetOPktValue.setStatus('mandatory')
uxsStatusNetOPktWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetOPktWarn.setStatus('mandatory')
uxsStatusNetOPktCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetOPktCrit.setStatus('mandatory')
uxsStatusNetOPktMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetOPktMonitor.setStatus('mandatory')
uxsStatusNetOPktStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetOPktStatus.setStatus('mandatory')
uxsStatusNetOErrValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetOErrValue.setStatus('mandatory')
uxsStatusNetOErrWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetOErrWarn.setStatus('mandatory')
uxsStatusNetOErrCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetOErrCrit.setStatus('mandatory')
uxsStatusNetOErrMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetOErrMonitor.setStatus('mandatory')
uxsStatusNetOErrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetOErrStatus.setStatus('mandatory')
uxsStatusNetCollValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetCollValue.setStatus('mandatory')
uxsStatusNetCollWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetCollWarn.setStatus('mandatory')
uxsStatusNetCollCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetCollCrit.setStatus('mandatory')
uxsStatusNetCollMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetCollMonitor.setStatus('mandatory')
uxsStatusNetCollStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetCollStatus.setStatus('mandatory')
uxsStatusNetLossAction = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("remove", 1), ("up", 2), ("down", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusNetLossAction.setStatus('mandatory')
uxsStatusNetLossStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 11, 28, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusNetLossStatus.setStatus('mandatory')
uxsStatusIPCSHMIDSAvailable = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCSHMIDSAvailable.setStatus('mandatory')
uxsStatusIPCSHMIDSValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCSHMIDSValue.setStatus('mandatory')
uxsStatusIPCSHMIDSLagValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCSHMIDSLagValue.setStatus('mandatory')
uxsStatusIPCSHMIDSLag = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusIPCSHMIDSLag.setStatus('mandatory')
uxsStatusIPCSHMIDSWarnValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCSHMIDSWarnValue.setStatus('mandatory')
uxsStatusIPCSHMIDSCritValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCSHMIDSCritValue.setStatus('mandatory')
uxsStatusIPCSHMIDSWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusIPCSHMIDSWarn.setStatus('mandatory')
uxsStatusIPCSHMIDSCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusIPCSHMIDSCrit.setStatus('mandatory')
uxsStatusIPCSHMIDSMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusIPCSHMIDSMonitor.setStatus('mandatory')
uxsStatusIPCSHMIDSStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCSHMIDSStatus.setStatus('mandatory')
uxsStatusIPCSEMIDSAvailable = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCSEMIDSAvailable.setStatus('mandatory')
uxsStatusIPCSEMIDSValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCSEMIDSValue.setStatus('mandatory')
uxsStatusIPCSEMIDSLagValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCSEMIDSLagValue.setStatus('mandatory')
uxsStatusIPCSEMIDSLag = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusIPCSEMIDSLag.setStatus('mandatory')
uxsStatusIPCSEMIDSWarnValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCSEMIDSWarnValue.setStatus('mandatory')
uxsStatusIPCSEMIDSCritValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCSEMIDSCritValue.setStatus('mandatory')
uxsStatusIPCSEMIDSWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusIPCSEMIDSWarn.setStatus('mandatory')
uxsStatusIPCSEMIDSCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusIPCSEMIDSCrit.setStatus('mandatory')
uxsStatusIPCSEMIDSMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusIPCSEMIDSMonitor.setStatus('mandatory')
uxsStatusIPCSEMIDSStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCSEMIDSStatus.setStatus('mandatory')
uxsStatusIPCMQIDSAvailable = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCMQIDSAvailable.setStatus('mandatory')
uxsStatusIPCMQIDSValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCMQIDSValue.setStatus('mandatory')
uxsStatusIPCMQIDSLagValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCMQIDSLagValue.setStatus('mandatory')
uxsStatusIPCMQIDSLag = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusIPCMQIDSLag.setStatus('mandatory')
uxsStatusIPCMQIDSWarnValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCMQIDSWarnValue.setStatus('mandatory')
uxsStatusIPCMQIDSCritValue = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCMQIDSCritValue.setStatus('mandatory')
uxsStatusIPCMQIDSWarn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusIPCMQIDSWarn.setStatus('mandatory')
uxsStatusIPCMQIDSCrit = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusIPCMQIDSCrit.setStatus('mandatory')
uxsStatusIPCMQIDSMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusIPCMQIDSMonitor.setStatus('mandatory')
uxsStatusIPCMQIDSStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCMQIDSStatus.setStatus('mandatory')
uxsStatusIPCMQMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("monitor", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusIPCMQMonitor.setStatus('mandatory')
uxsStatusIPCMQCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCMQCount.setStatus('mandatory')
uxsStatusIPCMQTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 33), )
if mibBuilder.loadTexts: uxsStatusIPCMQTable.setStatus('mandatory')
uxsStatusIPCMQEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 33, 1), ).setIndexNames((0, "CAIUXOS", "uxsStatusIPCMQID"))
if mibBuilder.loadTexts: uxsStatusIPCMQEntry.setStatus('mandatory')
uxsStatusIPCMQID = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 33, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCMQID.setStatus('mandatory')
uxsStatusIPCMQKey = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 33, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCMQKey.setStatus('mandatory')
uxsStatusIPCMQMode = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 33, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCMQMode.setStatus('mandatory')
uxsStatusIPCMQOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 33, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCMQOwner.setStatus('mandatory')
uxsStatusIPCMQGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 33, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCMQGroup.setStatus('mandatory')
uxsStatusIPCMQBytesAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 33, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCMQBytesAvailable.setStatus('mandatory')
uxsStatusIPCMQBytesValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 33, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCMQBytesValue.setStatus('mandatory')
uxsStatusIPCMQBytesLagValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 33, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCMQBytesLagValue.setStatus('mandatory')
uxsStatusIPCMQBytesLag = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 33, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusIPCMQBytesLag.setStatus('mandatory')
uxsStatusIPCMQBytesWarnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 33, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCMQBytesWarnValue.setStatus('mandatory')
uxsStatusIPCMQBytesCritValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 33, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCMQBytesCritValue.setStatus('mandatory')
uxsStatusIPCMQBytesWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 33, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusIPCMQBytesWarn.setStatus('mandatory')
uxsStatusIPCMQBytesCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 33, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusIPCMQBytesCrit.setStatus('mandatory')
uxsStatusIPCMQBytesMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 33, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning-only", 2), ("critical-only", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsStatusIPCMQBytesMonitor.setStatus('mandatory')
uxsStatusIPCMQBytesStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 2, 12, 33, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsStatusIPCMQBytesStatus.setStatus('mandatory')
uxsAvailFSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 3, 2, 1), ).setIndexNames((0, "CAIUXOS", "uxsAvailFSysName"))
if mibBuilder.loadTexts: uxsAvailFSysEntry.setStatus('mandatory')
uxsAvailFSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 3, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsAvailFSysName.setStatus('mandatory')
uxsAvailFSysRelatedTo = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsAvailFSysRelatedTo.setStatus('mandatory')
uxsAvailFSysType = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsAvailFSysType.setStatus('mandatory')
uxsAvailDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 3, 4, 1), ).setIndexNames((0, "CAIUXOS", "uxsAvailDiskName"))
if mibBuilder.loadTexts: uxsAvailDiskEntry.setStatus('mandatory')
uxsAvailDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 3, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsAvailDiskName.setStatus('mandatory')
uxsAvailPrnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 3, 6, 1), ).setIndexNames((0, "CAIUXOS", "uxsAvailPrnName"))
if mibBuilder.loadTexts: uxsAvailPrnEntry.setStatus('mandatory')
uxsAvailPrnName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 3, 6, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsAvailPrnName.setStatus('mandatory')
uxsPollNetTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 1, 1), )
if mibBuilder.loadTexts: uxsPollNetTable.setStatus('mandatory')
uxsPollNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 1, 1, 1), ).setIndexNames((0, "CAIUXOS", "uxsPollNetName"))
if mibBuilder.loadTexts: uxsPollNetEntry.setStatus('mandatory')
uxsPollNetName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsPollNetName.setStatus('mandatory')
uxsPollNetIP = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsPollNetIP.setStatus('mandatory')
uxsPollNetIPktValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsPollNetIPktValue.setStatus('mandatory')
uxsPollNetIErrValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsPollNetIErrValue.setStatus('mandatory')
uxsPollNetOPktValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsPollNetOPktValue.setStatus('mandatory')
uxsPollNetOErrValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsPollNetOErrValue.setStatus('mandatory')
uxsPollNetCollValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsPollNetCollValue.setStatus('mandatory')
uxsPollIPCSHMMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("monitor", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsPollIPCSHMMonitor.setStatus('mandatory')
uxsPollIPCSHMCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsPollIPCSHMCount.setStatus('mandatory')
uxsPollIPCSHMTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 2, 3), )
if mibBuilder.loadTexts: uxsPollIPCSHMTable.setStatus('mandatory')
uxsPollIPCSEMMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("monitor", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uxsPollIPCSEMMonitor.setStatus('mandatory')
uxsPollIPCSEMCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsPollIPCSEMCount.setStatus('mandatory')
uxsPollIPCSEMTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 2, 6), )
if mibBuilder.loadTexts: uxsPollIPCSEMTable.setStatus('mandatory')
uxsPollIPCSHMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 2, 3, 1), ).setIndexNames((0, "CAIUXOS", "uxsPollIPCSHMID"))
if mibBuilder.loadTexts: uxsPollIPCSHMEntry.setStatus('mandatory')
uxsPollIPCSHMID = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 2, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsPollIPCSHMID.setStatus('mandatory')
uxsPollIPCSHMKey = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 2, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsPollIPCSHMKey.setStatus('mandatory')
uxsPollIPCSHMMode = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 2, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsPollIPCSHMMode.setStatus('mandatory')
uxsPollIPCSHMOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 2, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsPollIPCSHMOwner.setStatus('mandatory')
uxsPollIPCSHMGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 2, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsPollIPCSHMGroup.setStatus('mandatory')
uxsPollIPCSHMMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsPollIPCSHMMaxSize.setStatus('mandatory')
uxsPollIPCSHMAttached = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsPollIPCSHMAttached.setStatus('mandatory')
uxsPollIPCSEMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 2, 6, 1), ).setIndexNames((0, "CAIUXOS", "uxsPollIPCSEMID"))
if mibBuilder.loadTexts: uxsPollIPCSEMEntry.setStatus('mandatory')
uxsPollIPCSEMID = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 2, 6, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsPollIPCSEMID.setStatus('mandatory')
uxsPollIPCSEMKey = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 2, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsPollIPCSEMKey.setStatus('mandatory')
uxsPollIPCSEMMode = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 2, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsPollIPCSEMMode.setStatus('mandatory')
uxsPollIPCSEMOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 2, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsPollIPCSEMOwner.setStatus('mandatory')
uxsPollIPCSEMGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 2, 6, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsPollIPCSEMGroup.setStatus('mandatory')
uxsPollIPCSEMMaxNums = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5, 4, 2, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uxsPollIPCSEMMaxNums.setStatus('mandatory')
uxsCPUTotalUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,10000))
uxsCPUTotalOK = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,10001))
uxsCPUTotalWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,10002))
uxsCPUTotalCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,10003))
uxsCPUUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,10990))
uxsCPUOK = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,10991))
uxsCPUWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,10992))
uxsCPUCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,10993))
uxsCPUDown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,10995))
uxsCPUAdded = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,10996))
uxsCPUDeleted = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,10997))
uxsLoad1Unknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,11010))
uxsLoad1OK = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,11011))
uxsLoad1Warning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,11012))
uxsLoad1Critical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,11013))
uxsLoad5Unknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,11050))
uxsLoad5OK = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,11051))
uxsLoad5Warning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,11052))
uxsLoad5Critical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,11053))
uxsLoad15Unknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,11150))
uxsLoad15OK = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,11151))
uxsLoad15Warning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,11152))
uxsLoad15Critical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,11153))
uxsMemUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,12010))
uxsMemOK = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,12011))
uxsMemWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,12012))
uxsMemCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,12013))
uxsSwapTotalUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,13000))
uxsSwapTotalOK = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,13001))
uxsSwapTotalWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,13002))
uxsSwapTotalCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,13003))
uxsSwapUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,13990))
uxsSwapOK = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,13991))
uxsSwapWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,13992))
uxsSwapCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,13993))
uxsSwapDown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,13995))
uxsSwapAdded = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,13996))
uxsSwapDeleted = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,13997))
uxsFSysUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,14980))
uxsFSysOK = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,14981))
uxsFSysWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,14982))
uxsFSysCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,14983))
uxsFSysDown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,14985))
uxsFSysAdded = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,14986))
uxsFSysDeleted = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,14987))
uxsDiskUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,15980))
uxsDiskOK = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,15981))
uxsDiskWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,15982))
uxsDiskCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,15983))
uxsDiskDown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,15985))
uxsDiskAdded = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,15986))
uxsDiskDeleted = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,15987))
uxsProcUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,16980))
uxsProcOK = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,16981))
uxsProcWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,16982))
uxsProcCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,16983))
uxsProcDown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,16985))
uxsProcAdded = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,16986))
uxsProcDeleted = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,16987))
uxsFilesUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,17980))
uxsFilesOK = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,17981))
uxsFilesWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,17982))
uxsFilesCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,17983))
uxsFilesDown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,17985))
uxsFilesAdded = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,17986))
uxsFilesDeleted = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,17987))
uxsPrnUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,18980))
uxsPrnOK = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,18981))
uxsPrnWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,18982))
uxsPrnCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,18983))
uxsPrnDown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,18985))
uxsPrnAdded = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,18986))
uxsPrnDeleted = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,18987))
uxsNetTotalUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,19000))
uxsNetTotalOK = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,19001))
uxsNetTotalWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,19002))
uxsNetTotalCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,19003))
uxsNetUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,19990))
uxsNetOK = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,19991))
uxsNetWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,19992))
uxsNetCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,19993))
uxsNetDown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,19995))
uxsNetAdded = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,19996))
uxsNetDeleted = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,19997))
uxsIPCSHMUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,20010))
uxsIPCSHMOK = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,20011))
uxsIPCSHMWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,20012))
uxsIPCSHMCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,20013))
uxsIPCSEMUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,20020))
uxsIPCSEMOK = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,20021))
uxsIPCSEMWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,20022))
uxsIPCSEMCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,20023))
uxsIPCMQUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,20030))
uxsIPCMQOK = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,20031))
uxsIPCMQWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,20032))
uxsIPCMQCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,20033))
uxsIPCMQSUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,20980))
uxsIPCMQSOK = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,20981))
uxsIPCMQSWarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,20982))
uxsIPCMQSCritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,20983))
uxsIPCMQSDown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,20985))
uxsIPCMQSAdded = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,20986))
uxsIPCMQSDeleted = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 4, 5) + (0,20987))
mibBuilder.exportSymbols("CAIUXOS", uxsConfigFileSizeDCrit=uxsConfigFileSizeDCrit, uxsLoad5Unknown=uxsLoad5Unknown, uxsStatusFileModTimeStatus=uxsStatusFileModTimeStatus, uxsStatusFSysInodesCritValue=uxsStatusFSysInodesCritValue, uxsStatusCPULag=uxsStatusCPULag, uxsFSysCritical=uxsFSysCritical, uxsConfigSwapPollMethod=uxsConfigSwapPollMethod, uxsStatusNetCollValue=uxsStatusNetCollValue, uxsConfigProcCPUCrit=uxsConfigProcCPUCrit, uxsStatusNetTotalOErrStatus=uxsStatusNetTotalOErrStatus, uxsConfigIPCGroup=uxsConfigIPCGroup, uxsConfigDiskPollMethod=uxsConfigDiskPollMethod, uxsStatusSwapTotalCrit=uxsStatusSwapTotalCrit, uxsStatusIPCSHMIDSMonitor=uxsStatusIPCSHMIDSMonitor, uxsPollIPCSHMGroup=uxsPollIPCSHMGroup, uxsStatusGeneralFileCount=uxsStatusGeneralFileCount, uxsStatusNetCount=uxsStatusNetCount, uxsCPUDown=uxsCPUDown, uxsStatusSwapAvailable=uxsStatusSwapAvailable, uxsStatusIPCMQIDSWarnValue=uxsStatusIPCMQIDSWarnValue, uxsStatusFSysSpaceValue=uxsStatusFSysSpaceValue, uxsStatusFileTable=uxsStatusFileTable, uxsConfigFSysNameRemove=uxsConfigFSysNameRemove, uxsConfigCPULag=uxsConfigCPULag, uxsStatusProcCPUWarn=uxsStatusProcCPUWarn, uxsStatusDiskName=uxsStatusDiskName, uxsStatusIPCMQGroup=uxsStatusIPCMQGroup, uxsProcDeleted=uxsProcDeleted, uxsStatusGeneralTotalWarning=uxsStatusGeneralTotalWarning, uxsStatusCPUMonitor=uxsStatusCPUMonitor, uxsIPCMQSUnknown=uxsIPCMQSUnknown, uxsStatusNetLossAction=uxsStatusNetLossAction, uxsStatusGeneralIPCCritical=uxsStatusGeneralIPCCritical, uxsPrnOK=uxsPrnOK, uxsStatusFSysSpaceWarnValue=uxsStatusFSysSpaceWarnValue, uxsStatusIPCMQMonitor=uxsStatusIPCMQMonitor, uxsConfigFileNameRemove=uxsConfigFileNameRemove, uxsStatusIPCSHMIDSLagValue=uxsStatusIPCSHMIDSLagValue, uxsStatusMemTotal=uxsStatusMemTotal, uxsStatusCPUTotalUsedValue=uxsStatusCPUTotalUsedValue, uxsConfigFSysInodesCrit=uxsConfigFSysInodesCrit, uxsStatusProcInstMin=uxsStatusProcInstMin, uxsFSysWarning=uxsFSysWarning, uxsStatusGeneralPrnCount=uxsStatusGeneralPrnCount, uxsStatusIPCMQBytesValue=uxsStatusIPCMQBytesValue, uxsStatusNetTotalOPktMonitor=uxsStatusNetTotalOPktMonitor, uxsStatusCPUUser=uxsStatusCPUUser, uxsAvailPrnEntry=uxsAvailPrnEntry, uxsConfigProcSizeMax=uxsConfigProcSizeMax, uxsStatusDiskLossStatus=uxsStatusDiskLossStatus, uxsIPCMQSDown=uxsIPCMQSDown, uxsCPUUnknown=uxsCPUUnknown, uxsStatusIPCSEMIDSStatus=uxsStatusIPCSEMIDSStatus, uxsAvailDiskTable=uxsAvailDiskTable, uxsConfigDiskTPutCrit=uxsConfigDiskTPutCrit, uxsStatusProcStatus=uxsStatusProcStatus, uxsLoad15Unknown=uxsLoad15Unknown, uxsStatusIPCMQBytesWarnValue=uxsStatusIPCMQBytesWarnValue, uxsConfigProcPath=uxsConfigProcPath, uxsStatusNetOErrValue=uxsStatusNetOErrValue, uxsAvailFSysRelatedTo=uxsAvailFSysRelatedTo, caiSysMgr=caiSysMgr, uxsStatusFileName=uxsStatusFileName, uxsConfigFileSizeDWarn=uxsConfigFileSizeDWarn, uxsNetDeleted=uxsNetDeleted, uxsConfigGeneralProcPollTime=uxsConfigGeneralProcPollTime, uxsProcDown=uxsProcDown, uxsStatusNetTotalOPktCrit=uxsStatusNetTotalOPktCrit, uxsStatusIPCMQBytesCritValue=uxsStatusIPCMQBytesCritValue, uxsPollNetIP=uxsPollNetIP, uxsPollIPCSHMKey=uxsPollIPCSHMKey, uxsStatusGeneralSwapWarning=uxsStatusGeneralSwapWarning, uxsStatusSwapGroup=uxsStatusSwapGroup, uxsStatusProcChldMax=uxsStatusProcChldMax, uxsStatusGeneralIPCWarning=uxsStatusGeneralIPCWarning, uxsStatusFileSizeStatus=uxsStatusFileSizeStatus, uxsSwapTotalOK=uxsSwapTotalOK, uxsStatusIPCMQIDSCritValue=uxsStatusIPCMQIDSCritValue, uxsStatusFSysName=uxsStatusFSysName, uxsStatusFSysSpaceDCrit=uxsStatusFSysSpaceDCrit, uxsStatusCPUTotalWIO=uxsStatusCPUTotalWIO, uxsConfigFSysSpaceDCrit=uxsConfigFSysSpaceDCrit, uxsStatusPrnDesc=uxsStatusPrnDesc, uxsStatusCPULagValue=uxsStatusCPULagValue, uxsStatusDiskRemove=uxsStatusDiskRemove, uxsStatusCPUTotalUser=uxsStatusCPUTotalUser, uxsStatusFileSizeDValue=uxsStatusFileSizeDValue, uxsStatusProcRemove=uxsStatusProcRemove, uxsStatusNetTotalOPktStatus=uxsStatusNetTotalOPktStatus, uxsStatusIPCSHMIDSWarn=uxsStatusIPCSHMIDSWarn, uxsPollNetIErrValue=uxsPollNetIErrValue, uxsStatusFSysInodesWarn=uxsStatusFSysInodesWarn, uxsStatusFSysSpaceStatus=uxsStatusFSysSpaceStatus, uxsStatusLoad5MinCrit=uxsStatusLoad5MinCrit, uxsCPUWarning=uxsCPUWarning, uxsLoad1Unknown=uxsLoad1Unknown, uxsIPCSEMWarning=uxsIPCSEMWarning, uxsStatusFSysSpaceMonitor=uxsStatusFSysSpaceMonitor, uxsPollIPCSEMEntry=uxsPollIPCSEMEntry, uxsDiskCritical=uxsDiskCritical, uxsStatusGeneralGroup=uxsStatusGeneralGroup, uxsStatusFSysSpaceCritValue=uxsStatusFSysSpaceCritValue, uxsStatusProcChldMonitor=uxsStatusProcChldMonitor, uxsCPUOK=uxsCPUOK, uxsStatusMemCrit=uxsStatusMemCrit, cai=cai, uxsLoad15Warning=uxsLoad15Warning, uxsStatusSwapEntry=uxsStatusSwapEntry, uxsConfigPrnGroup=uxsConfigPrnGroup, uxsConfigPrnLossAction=uxsConfigPrnLossAction, uxsIPCMQOK=uxsIPCMQOK, uxsNetCritical=uxsNetCritical, uxsConfigProcNameRemove=uxsConfigProcNameRemove, uxsStatusIPCMQKey=uxsStatusIPCMQKey, uxsStatusCPULossAction=uxsStatusCPULossAction, uxsStatusCPUTotalWarn=uxsStatusCPUTotalWarn, uxsAvailableGroup=uxsAvailableGroup, uxsStatusSwapStatus=uxsStatusSwapStatus, uxsStatusIPCSEMIDSMonitor=uxsStatusIPCSEMIDSMonitor, uxsPollIPCSEMKey=uxsPollIPCSEMKey, uxsStatusNetTotalOErrWarn=uxsStatusNetTotalOErrWarn, uxsIPCSEMUnknown=uxsIPCSEMUnknown, uxsStatusProcGroup=uxsStatusProcGroup, uxsLoad15Critical=uxsLoad15Critical, uxsFSysOK=uxsFSysOK, uxsAvailDiskRefresh=uxsAvailDiskRefresh, uxsStatusIPCSHMIDSStatus=uxsStatusIPCSHMIDSStatus, uxsStatusGeneralNetCount=uxsStatusGeneralNetCount, uxsStatusGeneralIPCCount=uxsStatusGeneralIPCCount, uxsStatusFSysMountedMonitor=uxsStatusFSysMountedMonitor, uxsStatusNetOErrStatus=uxsStatusNetOErrStatus, uxsConfigProcPollInterval=uxsConfigProcPollInterval, uxsStatusFileModTimeMonitor=uxsStatusFileModTimeMonitor, uxsAvailFSysType=uxsAvailFSysType, uxsConfigFileSizeWarn=uxsConfigFileSizeWarn, uxsConfigSysHardware=uxsConfigSysHardware, uxsStatusLoad1MinWarn=uxsStatusLoad1MinWarn, uxsStatusIPCMQIDSLagValue=uxsStatusIPCMQIDSLagValue, uxsPrnWarning=uxsPrnWarning, uxsConfigNetOErrWarn=uxsConfigNetOErrWarn, unix=unix, uxsConfigFSysInodesDCrit=uxsConfigFSysInodesDCrit, uxsFilesOK=uxsFilesOK, uxsConfigMemPollInterval=uxsConfigMemPollInterval, uxsNetOK=uxsNetOK, uxsConfigNetIPktWarn=uxsConfigNetIPktWarn, uxsConfigNetOPktCrit=uxsConfigNetOPktCrit, uxsConfigPrnPollInterval=uxsConfigPrnPollInterval, uxsConfigFSysSpaceDWarn=uxsConfigFSysSpaceDWarn, uxsConfigProcChldMax=uxsConfigProcChldMax, uxsStatusCPUTable=uxsStatusCPUTable, uxsMemUnknown=uxsMemUnknown, uxsConfigGeneralIPCPollTime=uxsConfigGeneralIPCPollTime, uxsConfigDiskTPutWarn=uxsConfigDiskTPutWarn, uxsStatusIPCMQIDSCrit=uxsStatusIPCMQIDSCrit, uxsStatusProcInstMax=uxsStatusProcInstMax, uxsConfigProcArgsSig=uxsConfigProcArgsSig, uxsStatusFSysMountedStatus=uxsStatusFSysMountedStatus, uxsStatusPrnLossStatus=uxsStatusPrnLossStatus, uxsStatusSwapCount=uxsStatusSwapCount, uxsStatusMemValue=uxsStatusMemValue, uxsConfigGeneralCPUPollTime=uxsConfigGeneralCPUPollTime, uxsStatusFSysSpaceDMonitor=uxsStatusFSysSpaceDMonitor, uxsStatusNetOErrMonitor=uxsStatusNetOErrMonitor, uxsStatusSwapTotalWarn=uxsStatusSwapTotalWarn, uxsStatusSwapLossStatus=uxsStatusSwapLossStatus, uxsStatusDiskLossAction=uxsStatusDiskLossAction, uxsConfigProcPollMethod=uxsConfigProcPollMethod, uxsStatusCPUWIO=uxsStatusCPUWIO, uxsProcUnknown=uxsProcUnknown, uxsStatusNetLossStatus=uxsStatusNetLossStatus, uxsSwapUnknown=uxsSwapUnknown, uxsConfigSwapMonitor=uxsConfigSwapMonitor, uxsConfigFSysInodesDMonitor=uxsConfigFSysInodesDMonitor, uxsConfigFileModTimeMonitor=uxsConfigFileModTimeMonitor, uxsStatusFSysInodesDWarn=uxsStatusFSysInodesDWarn, uxsStatusFileDesc=uxsStatusFileDesc, uxsStatusNetIPktCrit=uxsStatusNetIPktCrit, uxsConfigFileSizeDMonitor=uxsConfigFileSizeDMonitor, uxsStatusProcSizeMonitor=uxsStatusProcSizeMonitor, uxsStatusIPCMQEntry=uxsStatusIPCMQEntry, uxsStatusSwapTable=uxsStatusSwapTable, uxsStatusDiskCount=uxsStatusDiskCount, uxsStatusLoad15MinStatus=uxsStatusLoad15MinStatus, uxsStatusFileSizeDCrit=uxsStatusFileSizeDCrit, uxsStatusIPCSEMIDSAvailable=uxsStatusIPCSEMIDSAvailable, uxsConfigSysSystemName=uxsConfigSysSystemName, uxsMemWarning=uxsMemWarning, uxsStatusPrnLossAction=uxsStatusPrnLossAction, uxsCPUTotalUnknown=uxsCPUTotalUnknown, uxsPollIPCSEMGroup=uxsPollIPCSEMGroup, uxsConfigFileExist=uxsConfigFileExist, uxsStatusSwapTotalMonitor=uxsStatusSwapTotalMonitor, uxsStatusFileSizeValue=uxsStatusFileSizeValue, uxsConfigGeneralColdStartTime=uxsConfigGeneralColdStartTime, uxsStatusMemWarn=uxsStatusMemWarn, uxsStatusProcInstValue=uxsStatusProcInstValue, uxsStatusFSysInodesDMonitor=uxsStatusFSysInodesDMonitor, uxsDiskUnknown=uxsDiskUnknown, uxsPollIPCSHMTable=uxsPollIPCSHMTable, uxsNetAdded=uxsNetAdded, uxsStatusNetTotalCollStatus=uxsStatusNetTotalCollStatus, uxsConfigProcSizeMonitor=uxsConfigProcSizeMonitor, uxsConfigFSysNameAdd=uxsConfigFSysNameAdd, uxsStatusNetTotalIErrCrit=uxsStatusNetTotalIErrCrit, uxsStatusPrnGroup=uxsStatusPrnGroup, uxsStatusCPUWarn=uxsStatusCPUWarn, uxsConfigProcArgs=uxsConfigProcArgs, uxsStatusPrnName=uxsStatusPrnName, uxsStatusDiskGroup=uxsStatusDiskGroup, uxsStatusIPCMQCount=uxsStatusIPCMQCount, uxsStatusProcCPUStatus=uxsStatusProcCPUStatus, uxsStatusFSysInodesCrit=uxsStatusFSysInodesCrit, uxsConfigGeneralAgentVersion=uxsConfigGeneralAgentVersion, uxsConfigNetOPktWarn=uxsConfigNetOPktWarn, uxsStatusFSysEntry=uxsStatusFSysEntry, uxsConfigPrnDesc=uxsConfigPrnDesc, uxsConfigProcCPUWarn=uxsConfigProcCPUWarn, uxsStatusSwapUsedValue=uxsStatusSwapUsedValue, uxsIPCMQWarning=uxsIPCMQWarning, uxsStatusNetTotalCollWarn=uxsStatusNetTotalCollWarn, uxsStatusNetOPktWarn=uxsStatusNetOPktWarn, uxsConfigFSysInodesDWarn=uxsConfigFSysInodesDWarn, uxsStatusSwapCrit=uxsStatusSwapCrit, uxsPrnAdded=uxsPrnAdded, uxsStatusSwapTotalLag=uxsStatusSwapTotalLag, uxsStatusProcUsers=uxsStatusProcUsers, uxsStatusFSysSpaceCrit=uxsStatusFSysSpaceCrit, uxsConfigLoadGroup=uxsConfigLoadGroup, uxsSwapTotalCritical=uxsSwapTotalCritical, uxsStatusIPCSHMIDSLag=uxsStatusIPCSHMIDSLag, uxsStatusIPCMQBytesLagValue=uxsStatusIPCMQBytesLagValue, agentWorks=agentWorks, uxsStatusProcSizeStatus=uxsStatusProcSizeStatus, uxsConfigPrnItemsWarn=uxsConfigPrnItemsWarn, uxsPollIPCSEMID=uxsPollIPCSEMID, uxsStatusFSysLossStatus=uxsStatusFSysLossStatus, uxsFilesWarning=uxsFilesWarning, uxsDiskOK=uxsDiskOK, uxsCPUDeleted=uxsCPUDeleted, uxsStatusProcSizeMax=uxsStatusProcSizeMax, uxsStatusLoad1MinValue=uxsStatusLoad1MinValue, uxsStatusNetTotalOErrValue=uxsStatusNetTotalOErrValue, uxsStatusNetOPktCrit=uxsStatusNetOPktCrit, uxsStatusFileModTime=uxsStatusFileModTime, uxsStatusCPUName=uxsStatusCPUName, uxsStatusFileSizeCrit=uxsStatusFileSizeCrit, uxsConfigFileExistMonitor=uxsConfigFileExistMonitor, uxsConfigFileSizeCrit=uxsConfigFileSizeCrit, uxsPollIPCSHMID=uxsPollIPCSHMID, uxsConfigProcInstMonitor=uxsConfigProcInstMonitor, uxsConfigFSysPollMethod=uxsConfigFSysPollMethod, uxsStatusCPUCount=uxsStatusCPUCount, uxsStatusLoad1MinMonitor=uxsStatusLoad1MinMonitor)
mibBuilder.exportSymbols("CAIUXOS", uxsStatusProcArgs=uxsStatusProcArgs, uxsConfigProcUsers=uxsConfigProcUsers, uxsStatusProcPath=uxsStatusProcPath, uxsStatusNetGroup=uxsStatusNetGroup, uxsConfigFSysMountedMonitor=uxsConfigFSysMountedMonitor, uxsPollNetGroup=uxsPollNetGroup, uxsStatusDiskTPutMonitor=uxsStatusDiskTPutMonitor, uxsStatusLoad15MinCrit=uxsStatusLoad15MinCrit, uxsStatusGeneralFileWarning=uxsStatusGeneralFileWarning, uxsConfigCPUPollMethod=uxsConfigCPUPollMethod, uxsStatusCPUIdle=uxsStatusCPUIdle, uxsStatusFSysInodesDStatus=uxsStatusFSysInodesDStatus, uxsStatusNetEntry=uxsStatusNetEntry, uxsStatusGeneralDiskCount=uxsStatusGeneralDiskCount, uxsStatusFSysInodesValue=uxsStatusFSysInodesValue, uxsConfigFSysSpaceCrit=uxsConfigFSysSpaceCrit, uxsStatusFileSizeWarn=uxsStatusFileSizeWarn, uxsConfigGeneralGroup=uxsConfigGeneralGroup, uxsAvailFSysEntry=uxsAvailFSysEntry, uxsStatusFileSizeDMonitor=uxsStatusFileSizeDMonitor, uxsIPCSHMOK=uxsIPCSHMOK, uxsStatusCPUTotalSys=uxsStatusCPUTotalSys, uxsConfigNetIErrCrit=uxsConfigNetIErrCrit, uxsConfigSwapCrit=uxsConfigSwapCrit, uxsStatusIPCSEMIDSWarn=uxsStatusIPCSEMIDSWarn, uxsPollNetOErrValue=uxsPollNetOErrValue, uxsStatusGeneralMemWarning=uxsStatusGeneralMemWarning, uxsStatusProcCount=uxsStatusProcCount, uxsStatusSwapMonitor=uxsStatusSwapMonitor, uxsStatusNetOErrCrit=uxsStatusNetOErrCrit, uxsStatusSwapTotalWarnValue=uxsStatusSwapTotalWarnValue, uxsStatusGeneralLoadCount=uxsStatusGeneralLoadCount, uxsConfigNetPollMethod=uxsConfigNetPollMethod, uxsFSysDown=uxsFSysDown, uxsConfigSysRelease=uxsConfigSysRelease, uxsStatusFSysInodesStatus=uxsStatusFSysInodesStatus, uxsConfigGeneralDiskPollTime=uxsConfigGeneralDiskPollTime, uxsCPUAdded=uxsCPUAdded, uxsPollIPCGroup=uxsPollIPCGroup, uxsStatusDiskAggStatus=uxsStatusDiskAggStatus, uxsStatusProcInstMonitor=uxsStatusProcInstMonitor, uxsStatusNetTotalIErrStatus=uxsStatusNetTotalIErrStatus, uxsConfigSysBootTime=uxsConfigSysBootTime, uxsConfigIPCMQBytesWarn=uxsConfigIPCMQBytesWarn, uxsCPUTotalWarning=uxsCPUTotalWarning, uxsStatusPrnAggStatus=uxsStatusPrnAggStatus, uxsStatusGeneralProcCount=uxsStatusGeneralProcCount, uxsConfigPrnItemsMonitor=uxsConfigPrnItemsMonitor, uxsConfigSwapPollInterval=uxsConfigSwapPollInterval, uxsIPCMQSOK=uxsIPCMQSOK, uxsConfigSysGroup=uxsConfigSysGroup, uxsLoad1Critical=uxsLoad1Critical, uxsStatusCPUCrit=uxsStatusCPUCrit, uxsStatusPrnItemsStatus=uxsStatusPrnItemsStatus, uxsStatusNetTotalCollCrit=uxsStatusNetTotalCollCrit, uxsConfigDiskLossAction=uxsConfigDiskLossAction, uxsStatusCPUUsedValue=uxsStatusCPUUsedValue, uxsConfigProcNameSig=uxsConfigProcNameSig, uxsStatusMemWarnValue=uxsStatusMemWarnValue, uxsStatusNetTable=uxsStatusNetTable, uxsFilesUnknown=uxsFilesUnknown, uxsStatusGeneralFileCritical=uxsStatusGeneralFileCritical, uxsStatusIPCMQIDSWarn=uxsStatusIPCMQIDSWarn, uxsConfigProcNameAdd=uxsConfigProcNameAdd, uxsConfigMemGroup=uxsConfigMemGroup, uxsStatusFSysSpaceDWarn=uxsStatusFSysSpaceDWarn, uxsStatusGeneralLoadCritical=uxsStatusGeneralLoadCritical, uxsNetTotalCritical=uxsNetTotalCritical, uxsStatusGeneralFSysCount=uxsStatusGeneralFSysCount, uxsStatusFSysTable=uxsStatusFSysTable, uxsStatusMemLagValue=uxsStatusMemLagValue, uxsFSysAdded=uxsFSysAdded, uxsPollNetName=uxsPollNetName, uxsStatusIPCSEMIDSCrit=uxsStatusIPCSEMIDSCrit, uxsStatusPrnEntry=uxsStatusPrnEntry, uxsIPCSHMCritical=uxsIPCSHMCritical, uxsStatusSwapCritValue=uxsStatusSwapCritValue, uxsStatusFileExistMonitor=uxsStatusFileExistMonitor, uxsStatusNetTotalOErrCrit=uxsStatusNetTotalOErrCrit, uxsStatusIPCMQIDSAvailable=uxsStatusIPCMQIDSAvailable, uxsFilesCritical=uxsFilesCritical, uxsConfigGeneralFilePollTime=uxsConfigGeneralFilePollTime, uxsIPCMQSDeleted=uxsIPCMQSDeleted, uxsPollIPCSEMMonitor=uxsPollIPCSEMMonitor, uxsStatusDiskTPutCrit=uxsStatusDiskTPutCrit, uxsStatusLoad5MinStatus=uxsStatusLoad5MinStatus, uxsStatusFileEntry=uxsStatusFileEntry, uxsStatusIPCSHMIDSCrit=uxsStatusIPCSHMIDSCrit, uxsStatusNetIErrMonitor=uxsStatusNetIErrMonitor, uxsStatusGeneralCPUWarning=uxsStatusGeneralCPUWarning, uxsStatusProcInstStatus=uxsStatusProcInstStatus, uxsStatusSwapTotalName=uxsStatusSwapTotalName, uxsStatusFileExist=uxsStatusFileExist, uxsStatusLoad1MinCrit=uxsStatusLoad1MinCrit, uxsStatusMemLag=uxsStatusMemLag, uxsPollNetOPktValue=uxsPollNetOPktValue, uxsStatusFSysLossAction=uxsStatusFSysLossAction, uxsStatusNetIPktValue=uxsStatusNetIPktValue, uxsStatusGeneralLoadWarning=uxsStatusGeneralLoadWarning, uxsStatusGeneralPrnWarning=uxsStatusGeneralPrnWarning, uxsStatusProcSizeValue=uxsStatusProcSizeValue, uxsConfigNetOErrMonitor=uxsConfigNetOErrMonitor, uxsConfigGroup=uxsConfigGroup, uxsStatusFSysStatus=uxsStatusFSysStatus, uxsIPCMQSCritical=uxsIPCMQSCritical, uxsStatusGeneralNetWarning=uxsStatusGeneralNetWarning, uxsStatusSwapTotalAvailable=uxsStatusSwapTotalAvailable, uxsStatusProcName=uxsStatusProcName, uxsPollIPCSEMOwner=uxsPollIPCSEMOwner, uxsDiskDown=uxsDiskDown, uxsConfigGeneralFSysPollTime=uxsConfigGeneralFSysPollTime, uxsConfigLoadPollInterval=uxsConfigLoadPollInterval, uxsStatusNetIErrCrit=uxsStatusNetIErrCrit, uxsStatusNetCollCrit=uxsStatusNetCollCrit, uxsStatusIPCMQIDSValue=uxsStatusIPCMQIDSValue, uxsPrnDown=uxsPrnDown, uxsConfigGeneralLoadPollTime=uxsConfigGeneralLoadPollTime, uxsPrnUnknown=uxsPrnUnknown, uxsConfigCPUCrit=uxsConfigCPUCrit, uxsConfigFSysLossAction=uxsConfigFSysLossAction, uxsStatusLoad15MinWarn=uxsStatusLoad15MinWarn, uxsStatusNetTotalOErrMonitor=uxsStatusNetTotalOErrMonitor, uxsConfigSwapLag=uxsConfigSwapLag, uxsConfigFSysPollInterval=uxsConfigFSysPollInterval, uxsStatusFSysGroup=uxsStatusFSysGroup, uxsStatusSwapTotalUsedValue=uxsStatusSwapTotalUsedValue, uxsIPCSHMWarning=uxsIPCSHMWarning, uxsConfigProcCPUMonitor=uxsConfigProcCPUMonitor, uxsConfigCPUMonitor=uxsConfigCPUMonitor, uxsStatusFileSizeDStatus=uxsStatusFileSizeDStatus, uxsStatusNetTotalIPktWarn=uxsStatusNetTotalIPktWarn, uxsStatusProcEntry=uxsStatusProcEntry, uxsConfigSwapGroup=uxsConfigSwapGroup, uxsStatusGeneralFSysWarning=uxsStatusGeneralFSysWarning, uxsStatusFSysInodesDWarnValue=uxsStatusFSysInodesDWarnValue, uxsStatusIPCGroup=uxsStatusIPCGroup, uxsStatusNetTotalIPktValue=uxsStatusNetTotalIPktValue, uxsStatusNetIPktStatus=uxsStatusNetIPktStatus, uxsStatusFSysSpaceDValue=uxsStatusFSysSpaceDValue, uxsConfigProcPathSig=uxsConfigProcPathSig, uxsPollIPCSEMTable=uxsPollIPCSEMTable, uxsStatusGeneralProcWarning=uxsStatusGeneralProcWarning, uxsStatusIPCMQBytesAvailable=uxsStatusIPCMQBytesAvailable, uxsStatusSwapLag=uxsStatusSwapLag, uxsConfigGeneralNetPollTime=uxsConfigGeneralNetPollTime, uxsStatusFSysInodesDValue=uxsStatusFSysInodesDValue, uxsStatusFileModTimeValue=uxsStatusFileModTimeValue, uxsPollIPCSEMMode=uxsPollIPCSEMMode, uxsStatusFSysSpaceDCritValue=uxsStatusFSysSpaceDCritValue, uxsStatusNetIPktMonitor=uxsStatusNetIPktMonitor, uxsStatusGeneralTotalCount=uxsStatusGeneralTotalCount, uxsStatusMemCritValue=uxsStatusMemCritValue, uxsStatusPrnItemsCrit=uxsStatusPrnItemsCrit, uxsStatusNetTotalIPktCrit=uxsStatusNetTotalIPktCrit, uxsProcAdded=uxsProcAdded, uxsStatusProcChldValue=uxsStatusProcChldValue, uxsStatusLoad5MinValue=uxsStatusLoad5MinValue, uxsStatusIPCMQMode=uxsStatusIPCMQMode, uxsStatusMemStatus=uxsStatusMemStatus, uxsConfigPrnNameRemove=uxsConfigPrnNameRemove, uxsPollIPCSHMMonitor=uxsPollIPCSHMMonitor, uxsPrnDeleted=uxsPrnDeleted, uxsStatusNetOPktStatus=uxsStatusNetOPktStatus, uxsFSysDeleted=uxsFSysDeleted, uxsConfigProcInstMin=uxsConfigProcInstMin, uxsIPCMQSAdded=uxsIPCMQSAdded, uxsConfigGeneralMemPollTime=uxsConfigGeneralMemPollTime, uxsFilesDeleted=uxsFilesDeleted, uxsConfigFileDesc=uxsConfigFileDesc, uxsAvailPrnName=uxsAvailPrnName, uxsStatusDiskTPutValue=uxsStatusDiskTPutValue, uxsStatusPrnItemsWarn=uxsStatusPrnItemsWarn, uxsPollIPCSHMCount=uxsPollIPCSHMCount, uxsStatusIPCMQIDSMonitor=uxsStatusIPCMQIDSMonitor, uxsStatusDiskTPutWarn=uxsStatusDiskTPutWarn, uxsStatusGeneralNetCritical=uxsStatusGeneralNetCritical, uxsStatusProcPIDs=uxsStatusProcPIDs, uxsStatusNetTotalIErrMonitor=uxsStatusNetTotalIErrMonitor, uxsConfigProcInstMax=uxsConfigProcInstMax, uxsLoad5OK=uxsLoad5OK, uxsConfigSwapWarn=uxsConfigSwapWarn, uxsMemOK=uxsMemOK, uxsConfigMemPollMethod=uxsConfigMemPollMethod, uxsStatusNetStatus=uxsStatusNetStatus, uxsConfigNetCollCrit=uxsConfigNetCollCrit, uxsDiskAdded=uxsDiskAdded, uxsConfigDiskTPutMonitor=uxsConfigDiskTPutMonitor, uxsConfigNetIErrMonitor=uxsConfigNetIErrMonitor, uxsStatusNetIErrValue=uxsStatusNetIErrValue, uxsStatusGeneralPrnCritical=uxsStatusGeneralPrnCritical, uxsStatusNetOErrWarn=uxsStatusNetOErrWarn, uxsPollNetIPktValue=uxsPollNetIPktValue, uxsStatusFileGroup=uxsStatusFileGroup, uxsStatusFSysInodesTotal=uxsStatusFSysInodesTotal, uxsStatusIPCSHMIDSCritValue=uxsStatusIPCSHMIDSCritValue, uxsLoad15OK=uxsLoad15OK, uxsConfigProcSizeMin=uxsConfigProcSizeMin, uxsStatusProcTable=uxsStatusProcTable, uxsPollIPCSHMMode=uxsPollIPCSHMMode, uxsSwapTotalUnknown=uxsSwapTotalUnknown, uxsConfigFileGroup=uxsConfigFileGroup, uxsAvailPrnTable=uxsAvailPrnTable, uxsConfigNetIPktCrit=uxsConfigNetIPktCrit, uxsStatusFSysSpaceWarn=uxsStatusFSysSpaceWarn, uxsConfigPrnNameAdd=uxsConfigPrnNameAdd, uxsAvailFSysTable=uxsAvailFSysTable, uxsConfigNetLossAction=uxsConfigNetLossAction, uxsStatusFileSizeDWarn=uxsStatusFileSizeDWarn, uxsStatusNetOPktValue=uxsStatusNetOPktValue, uxsStatusIPCMQBytesWarn=uxsStatusIPCMQBytesWarn, uxsStatusIPCMQID=uxsStatusIPCMQID, uxsConfigNetCollWarn=uxsConfigNetCollWarn, uxsConfigNetIErrWarn=uxsConfigNetIErrWarn, uxsStatusFSysSpaceDWarnValue=uxsStatusFSysSpaceDWarnValue, uxsConfigFSysSpaceDMonitor=uxsConfigFSysSpaceDMonitor, uxsStatusIPCMQBytesCrit=uxsStatusIPCMQBytesCrit, uxsStatusLoad15MinMonitor=uxsStatusLoad15MinMonitor, uxsConfigFSysSpaceMonitor=uxsConfigFSysSpaceMonitor, uxsConfigNetCollMonitor=uxsConfigNetCollMonitor, uxsConfigCPUWarn=uxsConfigCPUWarn, uxsConfigFilePollMethod=uxsConfigFilePollMethod, uxsStatusFileRemove=uxsStatusFileRemove, uxsStatusIPCSHMIDSWarnValue=uxsStatusIPCSHMIDSWarnValue, uxsStatusPrnItemsMonitor=uxsStatusPrnItemsMonitor, uxsStatusLoad1MinStatus=uxsStatusLoad1MinStatus, uxsStatusIPCMQTable=uxsStatusIPCMQTable, uxsConfigPrnPollMethod=uxsConfigPrnPollMethod, uxsStatusFileSizeMonitor=uxsStatusFileSizeMonitor, uxsStatusDiskTable=uxsStatusDiskTable, caiUxOs=caiUxOs, uxsConfigIPCMQBytesMonitor=uxsConfigIPCMQBytesMonitor, uxsPrnCritical=uxsPrnCritical, uxsIPCMQUnknown=uxsIPCMQUnknown, uxsConfigFilePollInterval=uxsConfigFilePollInterval, uxsStatusGroup=uxsStatusGroup, uxsConfigFSysSpaceWarn=uxsConfigFSysSpaceWarn, uxsConfigCPUGroup=uxsConfigCPUGroup, uxsStatusGeneralMemCount=uxsStatusGeneralMemCount, uxsStatusSwapLossAction=uxsStatusSwapLossAction, uxsStatusNetName=uxsStatusNetName, uxsStatusNetCollWarn=uxsStatusNetCollWarn, uxsPollIPCSEMCount=uxsPollIPCSEMCount, uxsStatusCPUTotalCrit=uxsStatusCPUTotalCrit, uxsCPUTotalCritical=uxsCPUTotalCritical, uxsStatusNetTotalCollMonitor=uxsStatusNetTotalCollMonitor, uxsStatusLoad5MinMonitor=uxsStatusLoad5MinMonitor, uxsStatusIPCSEMIDSValue=uxsStatusIPCSEMIDSValue, uxsStatusIPCMQBytesMonitor=uxsStatusIPCMQBytesMonitor, uxsConfigNetOErrCrit=uxsConfigNetOErrCrit, uxsStatusNetIErrWarn=uxsStatusNetIErrWarn, uxsConfigIPCPollInterval=uxsConfigIPCPollInterval, uxsConfigDiskNameRemove=uxsConfigDiskNameRemove, uxsConfigCPUPollInterval=uxsConfigCPUPollInterval, uxsLoad1OK=uxsLoad1OK)
mibBuilder.exportSymbols("CAIUXOS", uxsStatusGeneralCPUCritical=uxsStatusGeneralCPUCritical, uxsStatusSwapTotalCritValue=uxsStatusSwapTotalCritValue, uxsStatusFSysCount=uxsStatusFSysCount, uxsPollNetEntry=uxsPollNetEntry, uxsStatusNetIErrStatus=uxsStatusNetIErrStatus, uxsIPCSEMCritical=uxsIPCSEMCritical, uxsStatusFSysInodesWarnValue=uxsStatusFSysInodesWarnValue, uxsStatusLoadGroup=uxsStatusLoadGroup, uxsStatusSwapName=uxsStatusSwapName, uxsConfigProcChldMin=uxsConfigProcChldMin, uxsStatusGeneralProcCritical=uxsStatusGeneralProcCritical, uxsStatusCPUAggStatus=uxsStatusCPUAggStatus, uxsStatusIPCSEMIDSWarnValue=uxsStatusIPCSEMIDSWarnValue, uxsStatusIPCSEMIDSLag=uxsStatusIPCSEMIDSLag, uxsConfigNetOPktMonitor=uxsConfigNetOPktMonitor, uxsConfigFSysInodesWarn=uxsConfigFSysInodesWarn, uxsAvailFSysRefresh=uxsAvailFSysRefresh, uxsConfigNetGroup=uxsConfigNetGroup, uxsProcWarning=uxsProcWarning, uxsStatusProcCPUCrit=uxsStatusProcCPUCrit, uxsStatusIPCSHMIDSAvailable=uxsStatusIPCSHMIDSAvailable, uxsStatusLoad5MinWarn=uxsStatusLoad5MinWarn, uxsStatusNetCollStatus=uxsStatusNetCollStatus, uxsNetUnknown=uxsNetUnknown, uxsIPCMQCritical=uxsIPCMQCritical, uxsConfigProcChldMonitor=uxsConfigProcChldMonitor, uxsStatusCPUTotalLagValue=uxsStatusCPUTotalLagValue, uxsStatusNetTotalStatus=uxsStatusNetTotalStatus, uxsSwapDown=uxsSwapDown, uxsStatusGeneralSwapCount=uxsStatusGeneralSwapCount, uxsLoad5Critical=uxsLoad5Critical, uxsStatusIPCMQBytesStatus=uxsStatusIPCMQBytesStatus, uxsSwapDeleted=uxsSwapDeleted, uxsStatusSwapWarn=uxsStatusSwapWarn, uxsConfigFileSizeMonitor=uxsConfigFileSizeMonitor, uxsConfigPrnItemsCrit=uxsConfigPrnItemsCrit, uxsConfigNetIPktMonitor=uxsConfigNetIPktMonitor, uxsStatusGeneralDiskCritical=uxsStatusGeneralDiskCritical, uxsStatusFSysSpaceTotal=uxsStatusFSysSpaceTotal, uxsStatusPrnRemove=uxsStatusPrnRemove, uxsStatusNetTotalCollValue=uxsStatusNetTotalCollValue, uxsIPCSHMUnknown=uxsIPCSHMUnknown, uxsStatusFSysInodesDCrit=uxsStatusFSysInodesDCrit, uxsNetTotalWarning=uxsNetTotalWarning, uxsConfigFSysGroup=uxsConfigFSysGroup, uxsConfigFSysInodesMonitor=uxsConfigFSysInodesMonitor, uxsStatusFileExistStatus=uxsStatusFileExistStatus, uxsPollGroup=uxsPollGroup, uxsConfigDiskPollInterval=uxsConfigDiskPollInterval, uxsPollNetTable=uxsPollNetTable, uxsPollNetCollValue=uxsPollNetCollValue, uxsConfigSysNodeName=uxsConfigSysNodeName, uxsCPUCritical=uxsCPUCritical, uxsPollIPCSHMMaxSize=uxsPollIPCSHMMaxSize, uxsConfigDiskGroup=uxsConfigDiskGroup, uxsStatusSwapTotalLagValue=uxsStatusSwapTotalLagValue, uxsAvailDiskName=uxsAvailDiskName, uxsStatusGeneralMemCritical=uxsStatusGeneralMemCritical, uxsFilesAdded=uxsFilesAdded, uxsStatusProcCPUMonitor=uxsStatusProcCPUMonitor, uxsConfigGeneralPrnPollTime=uxsConfigGeneralPrnPollTime, uxsStatusSwapTotalStatus=uxsStatusSwapTotalStatus, uxsStatusNetIPktWarn=uxsStatusNetIPktWarn, uxsNetDown=uxsNetDown, uxsStatusGeneralCPUCount=uxsStatusGeneralCPUCount, uxsStatusProcSizeMin=uxsStatusProcSizeMin, uxsStatusPrnCount=uxsStatusPrnCount, uxsAvailDiskEntry=uxsAvailDiskEntry, uxsStatusGeneralTotalCritical=uxsStatusGeneralTotalCritical, uxsStatusNetTotalIErrWarn=uxsStatusNetTotalIErrWarn, uxsSwapTotalWarning=uxsSwapTotalWarning, uxsStatusSwapWarnValue=uxsStatusSwapWarnValue, uxsConfigSysRunLevel=uxsConfigSysRunLevel, uxsStatusFSysType=uxsStatusFSysType, uxsCPUTotalOK=uxsCPUTotalOK, uxsNetTotalUnknown=uxsNetTotalUnknown, uxsIPCMQSWarning=uxsIPCMQSWarning, uxsStatusFSysInodesDCritValue=uxsStatusFSysInodesDCritValue, uxsStatusCPUGroup=uxsStatusCPUGroup, uxsStatusDiskTPutStatus=uxsStatusDiskTPutStatus, uxsConfigCPULossAction=uxsConfigCPULossAction, uxsStatusFSysSpaceDStatus=uxsStatusFSysSpaceDStatus, uxsStatusCPUSys=uxsStatusCPUSys, uxsStatusNetCollMonitor=uxsStatusNetCollMonitor, uxsStatusFSysInodesMonitor=uxsStatusFSysInodesMonitor, uxsStatusGeneralSwapCritical=uxsStatusGeneralSwapCritical, uxsConfigNetPollInterval=uxsConfigNetPollInterval, uxsStatusCPULossStatus=uxsStatusCPULossStatus, uxsStatusNetTotalIPktMonitor=uxsStatusNetTotalIPktMonitor, uxsConfigLoadPollMethod=uxsConfigLoadPollMethod, uxsStatusNetOPktMonitor=uxsStatusNetOPktMonitor, uxsStatusSwapLagValue=uxsStatusSwapLagValue, uxsStatusNetTotalOPktWarn=uxsStatusNetTotalOPktWarn, uxsStatusDiskEntry=uxsStatusDiskEntry, uxsSwapAdded=uxsSwapAdded, uxsStatusNetTotalIPktStatus=uxsStatusNetTotalIPktStatus, uxsStatusIPCMQIDSStatus=uxsStatusIPCMQIDSStatus, uxsStatusIPCMQBytesLag=uxsStatusIPCMQBytesLag, uxsConfigIPCMQBytesLag=uxsConfigIPCMQBytesLag, uxsStatusIPCMQOwner=uxsStatusIPCMQOwner, uxsNetTotalOK=uxsNetTotalOK, uxsStatusIPCSEMIDSCritValue=uxsStatusIPCSEMIDSCritValue, uxsStatusCPUEntry=uxsStatusCPUEntry, uxsStatusCPUTotalMonitor=uxsStatusCPUTotalMonitor, uxsConfigSwapLossAction=uxsConfigSwapLossAction, uxsStatusNetIP=uxsStatusNetIP, uxsProcOK=uxsProcOK, uxsSwapOK=uxsSwapOK, uxsStatusCPUStatus=uxsStatusCPUStatus, uxsStatusNetTotalOPktValue=uxsStatusNetTotalOPktValue, uxsConfigFileNameAdd=uxsConfigFileNameAdd, uxsStatusIPCMQIDSLag=uxsStatusIPCMQIDSLag, uxsStatusFSysRemove=uxsStatusFSysRemove, uxsStatusLoad15MinValue=uxsStatusLoad15MinValue, uxsStatusCPUTotalLag=uxsStatusCPUTotalLag, uxsPollIPCSHMEntry=uxsPollIPCSHMEntry, uxsDiskWarning=uxsDiskWarning, uxsConfigGeneralWarmStartTime=uxsConfigGeneralWarmStartTime, uxsAvailFSysName=uxsAvailFSysName, uxsStatusPrnItemsValue=uxsStatusPrnItemsValue, uxsConfigSysVersion=uxsConfigSysVersion, uxsPollIPCSHMOwner=uxsPollIPCSHMOwner, uxsStatusPrnTable=uxsStatusPrnTable, uxsStatusCPUTotalName=uxsStatusCPUTotalName, uxsStatusIPCSEMIDSLagValue=uxsStatusIPCSEMIDSLagValue, uxsPollIPCSHMAttached=uxsPollIPCSHMAttached, uxsIPCSEMOK=uxsIPCSEMOK, uxsSwapCritical=uxsSwapCritical, uxsStatusMemGroup=uxsStatusMemGroup, uxsStatusProcChldStatus=uxsStatusProcChldStatus, uxsFSysUnknown=uxsFSysUnknown, uxsStatusFileCount=uxsStatusFileCount, uxsFilesDown=uxsFilesDown, uxsConfigIPCPollMethod=uxsConfigIPCPollMethod, uxsStatusNetTotalIErrValue=uxsStatusNetTotalIErrValue, uxsSwapWarning=uxsSwapWarning, uxsStatusFileStatus=uxsStatusFileStatus, uxsNetWarning=uxsNetWarning, uxsStatusGeneralFSysCritical=uxsStatusGeneralFSysCritical, uxsStatusMemMonitor=uxsStatusMemMonitor, uxsPollIPCSEMMaxNums=uxsPollIPCSEMMaxNums, uxsConfigGeneralSwapPollTime=uxsConfigGeneralSwapPollTime, uxsAvailPrnRefresh=uxsAvailPrnRefresh, uxsStatusIPCSHMIDSValue=uxsStatusIPCSHMIDSValue, uxsDiskDeleted=uxsDiskDeleted, uxsMemCritical=uxsMemCritical, uxsProcCritical=uxsProcCritical, uxsConfigIPCMQBytesCrit=uxsConfigIPCMQBytesCrit, uxsStatusProcChldMin=uxsStatusProcChldMin, uxsStatusSwapAggStatus=uxsStatusSwapAggStatus, uxsStatusFSysRelatedTo=uxsStatusFSysRelatedTo, uxsStatusCPUTotalIdle=uxsStatusCPUTotalIdle, uxsLoad5Warning=uxsLoad5Warning, uxsStatusCPUTotalStatus=uxsStatusCPUTotalStatus, uxsStatusGeneralDiskWarning=uxsStatusGeneralDiskWarning, uxsLoad1Warning=uxsLoad1Warning, uxsStatusProcCPUValue=uxsStatusProcCPUValue, uxsConfigProcGroup=uxsConfigProcGroup, uxsConfigDiskNameAdd=uxsConfigDiskNameAdd)
