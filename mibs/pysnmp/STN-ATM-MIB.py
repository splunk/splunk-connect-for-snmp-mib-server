#
# PySNMP MIB module STN-ATM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/STN-ATM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:03:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, TimeTicks, Counter32, ModuleIdentity, iso, NotificationType, IpAddress, MibIdentifier, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Unsigned32, Gauge32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "TimeTicks", "Counter32", "ModuleIdentity", "iso", "NotificationType", "IpAddress", "MibIdentifier", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Unsigned32", "Gauge32", "ObjectIdentity")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
stnSystems, stnNotification = mibBuilder.importSymbols("SPRING-TIDE-NETWORKS-SMI", "stnSystems", "stnNotification")
NSAPAddress, = mibBuilder.importSymbols("SPRING-TIDE-NETWORKS-TC", "NSAPAddress")
stnRouterIndex, = mibBuilder.importSymbols("STN-ROUTER-MIB", "stnRouterIndex")
stnAtm = ModuleIdentity((1, 3, 6, 1, 4, 1, 3551, 2, 6))
if mibBuilder.loadTexts: stnAtm.setLastUpdated('0002160000Z')
if mibBuilder.loadTexts: stnAtm.setOrganization('Spring Tide Networks, Inc.')
stnAtmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1))
stnAtmMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 2))
stnAtmLinks = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1))
stnAtmCrossConns = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 2))
stnAtmTrafficDescrs = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 3))
stnAtmPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4))
stnAtmTraces = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 5))
stnAtmQos = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 6))
stnAtmAddresses = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 7))
stnAtmThresholds = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 8))
stnAtmAcct = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 9))
stnVcLinks = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1))
stnVcCrossConns = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 2, 1))
stnVpCrossConns = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 2, 2))
stnAtmPortAttrs = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1))
stnAtmPortIlmi = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 2))
stnAtmPortSignaling = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3))
stnAtmPortTraffic = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 4))
stnTraceIps = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 5, 1))
stnTracePd = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 5, 2))
stnQosCLR = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 6, 1))
stnQosCDV = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 6, 2))
stnQosCTD = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 6, 3))
stnAtmPortSigs = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 1))
stnAtmPortSigDurations = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 2))
stnAtmPortSigRetries = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3))
class VcLinkOperStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("not-in-service", 2), ("not-ready", 3), ("create-and-go", 4), ("create-and-wait", 5), ("destroy", 6))

class VcCrossConnOperStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("not-in-service", 2), ("not-ready", 3), ("create-and-go", 4), ("create-and-wait", 5), ("destroy", 6))

class TrafficDescrOperStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("not-in-service", 2), ("not-ready", 3), ("create-and-go", 4), ("create-and-wait", 5), ("destroy", 6))

class AtmPortOperStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("active", 1), ("inactive", 2))

stnVcLinkTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1, 1), )
if mibBuilder.loadTexts: stnVcLinkTable.setStatus('current')
stnVcLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1, 1, 1), ).setIndexNames((0, "STN-ATM-MIB", "stnVcLinkIfIndex"), (0, "STN-ATM-MIB", "stnVcLinkVpi"), (0, "STN-ATM-MIB", "stnVcLinkVci"))
if mibBuilder.loadTexts: stnVcLinkEntry.setStatus('current')
stnVcLinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcLinkIfIndex.setStatus('current')
stnVcLinkVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcLinkVpi.setStatus('current')
stnVcLinkVci = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcLinkVci.setStatus('current')
stnVcLinkRcvTrafDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcLinkRcvTrafDescr.setStatus('current')
stnVcLinkXmtTrafDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcLinkXmtTrafDescr.setStatus('current')
stnVcLinkAalObjectsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcLinkAalObjectsValid.setStatus('current')
stnVcLinkAalType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("aal1", 1), ("aal3-4", 2), ("aal5", 3), ("other", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcLinkAalType.setStatus('current')
stnVcLinkAal5XmtSDUSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1, 1, 1, 8), Integer32().clone(4096)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcLinkAal5XmtSDUSize.setStatus('current')
stnVcLinkAal5RcvSDUSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1, 1, 1, 9), Integer32().clone(4096)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcLinkAal5RcvSDUSize.setStatus('current')
stnVcLinkAal5EncapsType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcLinkAal5EncapsType.setStatus('current')
stnVcLinkCastType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("p2mpRoot", 1), ("p2mpLeaf", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcLinkCastType.setStatus('current')
stnVcLinkConnKind = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pvc", 1), ("svc-incomming", 2), ("svc-outgoing", 3), ("spvc-initiator", 4), ("spvc-target", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcLinkConnKind.setStatus('current')
stnVcLinkAccEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1, 1, 1, 13), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcLinkAccEnabled.setStatus('current')
stnVcLinkOAMMgmtEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1, 1, 1, 14), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcLinkOAMMgmtEnabled.setStatus('current')
stnVcLinkOAMXmtFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1, 1, 1, 15), Integer32().clone(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcLinkOAMXmtFrequency.setStatus('current')
stnVcLinkOAMRetryUpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1, 1, 1, 16), Integer32().clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcLinkOAMRetryUpCount.setStatus('current')
stnVcLinkOAMRetryDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1, 1, 1, 17), Integer32().clone(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcLinkOAMRetryDownCount.setStatus('current')
stnVcLinkOAMRetryFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1, 1, 1, 18), Integer32().clone(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcLinkOAMRetryFrequency.setStatus('current')
stnVcLinkPppId = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcLinkPppId.setStatus('current')
stnVcLinkOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 1, 1, 1, 1, 20), VcLinkOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcLinkOperStatus.setStatus('current')
stnVcCrossConnTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 2, 1, 1), )
if mibBuilder.loadTexts: stnVcCrossConnTable.setStatus('current')
stnVcCrossConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 2, 1, 1, 1), ).setIndexNames((0, "STN-ATM-MIB", "stnVcCrossConnLowIfIndex"), (0, "STN-ATM-MIB", "stnVcCrossConnLowVpi"), (0, "STN-ATM-MIB", "stnVcCrossConnLowVci"), (0, "STN-ATM-MIB", "stnVcCrossConnHighIfIndex"), (0, "STN-ATM-MIB", "stnVcCrossConnHighVpi"), (0, "STN-ATM-MIB", "stnVcCrossConnHighVci"))
if mibBuilder.loadTexts: stnVcCrossConnEntry.setStatus('current')
stnVcCrossConnLowIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 2, 1, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcCrossConnLowIfIndex.setStatus('current')
stnVcCrossConnLowVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 2, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcCrossConnLowVpi.setStatus('current')
stnVcCrossConnLowVci = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 2, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcCrossConnLowVci.setStatus('current')
stnVcCrossConnHighIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 2, 1, 1, 1, 4), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcCrossConnHighIfIndex.setStatus('current')
stnVcCrossConnHighVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 2, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcCrossConnHighVpi.setStatus('current')
stnVcCrossConnHighVci = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 2, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcCrossConnHighVci.setStatus('current')
stnVcCrossConnLowAutoAssign = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 2, 1, 1, 1, 7), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcCrossConnLowAutoAssign.setStatus('current')
stnVcCrossConnHighAutoAssign = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 2, 1, 1, 1, 8), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcCrossConnHighAutoAssign.setStatus('current')
stnVcCrossConnOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 2, 1, 1, 1, 9), VcCrossConnOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnVcCrossConnOperStatus.setStatus('current')
stnTrafficDescrTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 3, 1), )
if mibBuilder.loadTexts: stnTrafficDescrTable.setStatus('current')
stnTrafficDescrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 3, 1, 1), ).setIndexNames((0, "STN-ATM-MIB", "stnTrafDescrIndex"))
if mibBuilder.loadTexts: stnTrafficDescrEntry.setStatus('current')
stnTrafDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTrafDescrIndex.setStatus('current')
stnTrafDescrName = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 3, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTrafDescrName.setStatus('current')
stnTrafDescrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("no-td", 1), ("no-clp-no-scr", 2), ("clp-no-tag-no-scr", 3), ("clp-tagging-no-scr", 4), ("no-clp-scr", 5), ("clp-no-tag-scr", 6), ("clp-tagging-scr", 7), ("clp-no-tag-mcr", 8), ("clp-trans-no-scr", 9), ("clp-trans-scr", 10), ("no-clp-tag-no-scr", 11))).clone('no-td')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTrafDescrType.setStatus('current')
stnTrafDescrParam1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTrafDescrParam1.setStatus('current')
stnTrafDescrParam2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTrafDescrParam2.setStatus('current')
stnTrafDescrParam3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTrafDescrParam3.setStatus('current')
stnTrafDescrParam4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTrafDescrParam4.setStatus('current')
stnTrafDescrParam5 = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTrafDescrParam5.setStatus('current')
stnTrafDescrQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("best-effort", 0), ("service-class-a", 1), ("service-class-b", 2), ("service-class-c", 3), ("service-class-d", 4))).clone('best-effort')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTrafDescrQosClass.setStatus('current')
stnTrafDescrServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("cbr", 2), ("rt-vbr", 3), ("nrt-vbr", 4), ("abr", 5), ("ubr", 6))).clone('ubr')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTrafDescrServiceCategory.setStatus('current')
stnTrafDescrFrameDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 3, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTrafDescrFrameDiscard.setStatus('current')
stnTrafDescrOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 3, 1, 1, 12), TrafficDescrOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTrafDescrOperStatus.setStatus('current')
stnTrafDescrCommittedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTrafDescrCommittedRate.setStatus('current')
stnTrafDescrMaximumRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 3, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTrafDescrMaximumRate.setStatus('current')
stnTraceIpsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 5, 1, 1), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTraceIpsEnabled.setStatus('current')
stnTraceIpsSize = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 5, 1, 2), Integer32().clone(1000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTraceIpsSize.setStatus('current')
stnTraceIpsFile = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTraceIpsFile.setStatus('current')
stnTracePdProblemEnabled = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 5, 2, 1), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTracePdProblemEnabled.setStatus('current')
stnTracePdExceptionEnabled = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 5, 2, 2), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTracePdExceptionEnabled.setStatus('current')
stnTracePdAuditEnabled = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 5, 2, 3), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTracePdAuditEnabled.setStatus('current')
stnTracePdDeveloperEnabled = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 5, 2, 4), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTracePdDeveloperEnabled.setStatus('current')
stnTracePdSize = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 5, 2, 5), Integer32().clone(25)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTracePdSize.setStatus('current')
stnTracePdFile = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 5, 2, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnTracePdFile.setStatus('current')
stnQosClass1CLR = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnQosClass1CLR.setStatus('current')
stnQosClass2CLR = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnQosClass2CLR.setStatus('current')
stnQosClass3CLR = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnQosClass3CLR.setStatus('current')
stnQosClass4CLR = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnQosClass4CLR.setStatus('current')
stnQosClass1CDV = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 6, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnQosClass1CDV.setStatus('current')
stnQosClass2CDV = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 6, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnQosClass2CDV.setStatus('current')
stnQosClass3CDV = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 6, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnQosClass3CDV.setStatus('current')
stnQosClass4CDV = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 6, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnQosClass4CDV.setStatus('current')
stnQosClass1MaxCTD = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 6, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnQosClass1MaxCTD.setStatus('current')
stnQosClass2MaxCTD = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 6, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnQosClass2MaxCTD.setStatus('current')
stnQosClass3MaxCTD = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 6, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnQosClass3MaxCTD.setStatus('current')
stnQosClass4MaxCTD = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 6, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnQosClass4MaxCTD.setStatus('current')
stnAtmPortAttrTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1), )
if mibBuilder.loadTexts: stnAtmPortAttrTable.setStatus('current')
stnAtmPortAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1), ).setIndexNames((0, "STN-ATM-MIB", "stnAtmPortIfIndex"))
if mibBuilder.loadTexts: stnAtmPortAttrEntry.setStatus('current')
stnAtmPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortIfIndex.setStatus('current')
stnAtmPortIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortIfType.setStatus('current')
stnAtmPortIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortIfState.setStatus('current')
stnAtmPortEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 4), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortEnabled.setStatus('current')
stnAtmPortMinVccVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortMinVccVpi.setStatus('current')
stnAtmPortMaxVccVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortMaxVccVpi.setStatus('current')
stnAtmPortMinVccVci = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 65554)).clone(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortMinVccVci.setStatus('current')
stnAtmPortMaxVccVci = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 65554)).clone(4095)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortMaxVccVci.setStatus('current')
stnAtmPortMinVpcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortMinVpcVpi.setStatus('current')
stnAtmPortMaxVpcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortMaxVpcVpi.setStatus('current')
stnAtmPortMaxActivePaths = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(127)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortMaxActivePaths.setStatus('current')
stnAtmPortMaxActiveChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65554)).clone(4095)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortMaxActiveChannels.setStatus('current')
stnAtmPortPVCAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 13), NSAPAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortPVCAddress.setStatus('current')
stnAtmPortSVCAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 14), NSAPAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSVCAddress.setStatus('current')
stnAtmPortSigVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigVpi.setStatus('current')
stnAtmPortSigVci = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 16), Integer32().clone(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigVci.setStatus('current')
stnAtmPortSigEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 17), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigEnabled.setStatus('current')
stnAtmPortIlmiVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortIlmiVpi.setStatus('current')
stnAtmPortIlmiVci = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 19), Integer32().clone(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortIlmiVci.setStatus('current')
stnAtmPortIlmiEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 20), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortIlmiEnabled.setStatus('current')
stnAtmPortOamManagementEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 21), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortOamManagementEnabled.setStatus('current')
stnAtmPortOamXmtFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortOamXmtFrequency.setStatus('current')
stnAtmPortOamRetryUpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortOamRetryUpCount.setStatus('current')
stnAtmPortOamRetryDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortOamRetryDownCount.setStatus('current')
stnAtmPortOamRetryFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortOamRetryFrequency.setStatus('current')
stnAtmPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 1, 1, 1, 26), AtmPortOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortOperStatus.setStatus('current')
stnAtmPortIlmiTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 2, 1), )
if mibBuilder.loadTexts: stnAtmPortIlmiTable.setStatus('current')
stnAtmPortIlmiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 2, 1, 1), ).setIndexNames((0, "STN-ATM-MIB", "stnAtmPortIlmiIfIndex"))
if mibBuilder.loadTexts: stnAtmPortIlmiEntry.setStatus('current')
stnAtmPortIlmiIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 2, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortIlmiIfIndex.setStatus('current')
stnAtmPortIlmiVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("uni-3-dot-0", 1), ("uni-3-dot-1", 2), ("uni-4-dot-0", 3), ("iisp-3-dot-1", 4))).clone('uni-3-dot-1')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortIlmiVersion.setStatus('current')
stnAtmPortIlmiNetworkOrientation = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("user", 1), ("network", 2))).clone('network')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortIlmiNetworkOrientation.setStatus('current')
stnAtmPortIlmiAutoNegotiate = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 2, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortIlmiAutoNegotiate.setStatus('current')
stnAtmPortIlmiPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 2, 1, 1, 5), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortIlmiPollInterval.setStatus('current')
stnAtmPortIlmiCheckConnectionInt = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 2, 1, 1, 6), Integer32().clone(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortIlmiCheckConnectionInt.setStatus('current')
stnAtmPortIlmiInactivityFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 2, 1, 1, 7), Integer32().clone(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortIlmiInactivityFactor.setStatus('current')
stnAtmPortIlmiLocalConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("public", 2), ("private", 3))).clone('private')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortIlmiLocalConn.setStatus('current')
stnAtmPortIlmiAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 2, 1, 1, 9), Bits().clone(namedValues=NamedValues(("std-ilmi", 0), ("addr-reg", 1), ("connect", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortIlmiAdminStatus.setStatus('current')
stnAtmPortIlmiEnterprise = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 2, 1, 1, 10), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortIlmiEnterprise.setStatus('current')
stnAtmPortIlmiLocalOid = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 2, 1, 1, 11), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortIlmiLocalOid.setStatus('current')
stnAtmPortIlmiNetPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 2, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 13))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortIlmiNetPrefix.setStatus('current')
stnAtmPortIlmiPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortIlmiPrefixLen.setStatus('current')
stnAtmPortSigTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 1, 1), )
if mibBuilder.loadTexts: stnAtmPortSigTable.setStatus('current')
stnAtmPortSigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 1, 1, 1), ).setIndexNames((0, "STN-ATM-MIB", "stnAtmPortSigIfIndex"))
if mibBuilder.loadTexts: stnAtmPortSigEntry.setStatus('current')
stnAtmPortSigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 1, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigIfIndex.setStatus('current')
stnAtmPortSigVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("uni-3-dot-0", 1), ("uni-3-dot-1", 2), ("iisp-3-dot-1", 3), ("pnni-1-dot-0", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigVersion.setStatus('current')
stnAtmPortSigNetworkOrientation = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("user", 1), ("network", 2))).clone('network')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigNetworkOrientation.setStatus('current')
stnAtmPortSigAssignVpiVci = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 1, 1, 1, 4), TruthValue().clone('true'))
if mibBuilder.loadTexts: stnAtmPortSigAssignVpiVci.setStatus('current')
stnAtmPortSigVpSigType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("associated-signaling", 1), ("explicit-vpci", 2))).clone('explicit-vpci')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigVpSigType.setStatus('current')
stnAtmPortSigParseMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("strict", 2))).clone('normal')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigParseMode.setStatus('current')
stnAtmPortSigPrefCarrierPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 1, 1, 1, 7), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigPrefCarrierPresent.setStatus('current')
stnAtmPortSigPrefCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 1, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigPrefCarrier.setStatus('current')
stnAtmPortSigDurationTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 2, 1), )
if mibBuilder.loadTexts: stnAtmPortSigDurationTable.setStatus('current')
stnAtmPortSigDurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 2, 1, 1), ).setIndexNames((0, "STN-ATM-MIB", "stnAtmPortSigDurIfIndex"))
if mibBuilder.loadTexts: stnAtmPortSigDurationEntry.setStatus('current')
stnAtmPortSigDurIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 2, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigDurIfIndex.setStatus('current')
stnAtmPortSigT301Duration = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 2, 1, 1, 2), Integer32().clone(180000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigT301Duration.setStatus('current')
stnAtmPortSigT303Duration = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 2, 1, 1, 3), Integer32().clone(4000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigT303Duration.setStatus('current')
stnAtmPortSigT306Duration = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 2, 1, 1, 4), Integer32().clone(30000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigT306Duration.setStatus('current')
stnAtmPortSigT308Duration = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 2, 1, 1, 5), Integer32().clone(30000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigT308Duration.setStatus('current')
stnAtmPortSigT309Duration = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 2, 1, 1, 6), Integer32().clone(10000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigT309Duration.setStatus('current')
stnAtmPortSigT310Duration = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 2, 1, 1, 7), Integer32().clone(10000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigT310Duration.setStatus('current')
stnAtmPortSigT313Duration = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 2, 1, 1, 8), Integer32().clone(30000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigT313Duration.setStatus('current')
stnAtmPortSigT316Duration = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 2, 1, 1, 9), Integer32().clone(120000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigT316Duration.setStatus('current')
stnAtmPortSigT317Duration = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 2, 1, 1, 10), Integer32().clone(60000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigT317Duration.setStatus('current')
stnAtmPortSigT322Duration = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 2, 1, 1, 11), Integer32().clone(4000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigT322Duration.setStatus('current')
stnAtmPortSigT331Duration = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 2, 1, 1, 12), Integer32().clone(60000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigT331Duration.setStatus('current')
stnAtmPortSigT333Duration = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 2, 1, 1, 13), Integer32().clone(10000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigT333Duration.setStatus('current')
stnAtmPortSigT397Duration = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 2, 1, 1, 14), Integer32().clone(180000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigT397Duration.setStatus('current')
stnAtmPortSigT398Duration = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 2, 1, 1, 15), Integer32().clone(4000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigT398Duration.setStatus('current')
stnAtmPortSigT399Duration = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 2, 1, 1, 16), Integer32().clone(14000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigT399Duration.setStatus('current')
stnAtmPortSigSaalRetryDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 2, 1, 1, 17), Integer32().clone(10000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigSaalRetryDuration.setStatus('current')
stnAtmPortSigRetryTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 1), )
if mibBuilder.loadTexts: stnAtmPortSigRetryTable.setStatus('current')
stnAtmPortSigRetryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 1, 1), ).setIndexNames((0, "STN-ATM-MIB", "stnAtmPortSigRetryIfIndex"))
if mibBuilder.loadTexts: stnAtmPortSigRetryEntry.setStatus('current')
stnAtmPortSigRetryIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigRetryIfIndex.setStatus('current')
stnAtmPortSigT303Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 1, 1, 2), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigT303Retries.setStatus('current')
stnAtmPortSigT308Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 1, 1, 3), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigT308Retries.setStatus('current')
stnAtmPortSigT316Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 1, 1, 4), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigT316Retries.setStatus('current')
stnAtmPortSigT322Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 1, 1, 5), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigT322Retries.setStatus('current')
stnAtmPortSigT331Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 1, 1, 6), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigT331Retries.setStatus('current')
stnAtmPortSigSSCSTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 2), )
if mibBuilder.loadTexts: stnAtmPortSigSSCSTable.setStatus('current')
stnAtmPortSigSSCSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 2, 1), ).setIndexNames((0, "STN-ATM-MIB", "stnAtmPortSigSSCSIfIndex"))
if mibBuilder.loadTexts: stnAtmPortSigSSCSEntry.setStatus('current')
stnAtmPortSigSSCSIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigSSCSIfIndex.setStatus('current')
stnAtmPortSigSSCSPollDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 2, 1, 2), Integer32().clone(750)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigSSCSPollDuration.setStatus('current')
stnAtmPortSigSSCSKeepAliveDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 2, 1, 3), Integer32().clone(2000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigSSCSKeepAliveDuration.setStatus('current')
stnAtmPortSigSSCSIdleDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 2, 1, 4), Integer32().clone(15000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigSSCSIdleDuration.setStatus('current')
stnAtmPortSigSSCSNoRspDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 2, 1, 5), Integer32().clone(7000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigSSCSNoRspDuration.setStatus('current')
stnAtmPortSigSSCSCcDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 2, 1, 6), Integer32().clone(1000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigSSCSCcDuration.setStatus('current')
stnAtmPortSigSSCSMaxRcvWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 2, 1, 7), Integer32().clone(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigSSCSMaxRcvWindowSize.setStatus('current')
stnAtmPortSigSSCSMaxCcRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 2, 1, 8), Integer32().clone(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigSSCSMaxCcRetries.setStatus('current')
stnAtmPortSigSSCSMaxSdBetwPolls = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 2, 1, 9), Integer32().clone(25)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigSSCSMaxSdBetwPolls.setStatus('current')
stnAtmPortSigSSCSMaxStatListElms = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 2, 1, 10), Integer32().clone(67)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigSSCSMaxStatListElms.setStatus('current')
stnAtmPortSigSSCSPollAfterRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 2, 1, 11), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigSSCSPollAfterRetrans.setStatus('current')
stnAtmPortSigSSCSRepeatUstat = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 2, 1, 12), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigSSCSRepeatUstat.setStatus('current')
stnAtmPortSigSSCSUstatRspToPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 3, 3, 2, 1, 13), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortSigSSCSUstatRspToPoll.setStatus('current')
stnAtmPortTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 4, 1), )
if mibBuilder.loadTexts: stnAtmPortTrafficTable.setStatus('current')
stnAtmPortTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 4, 1, 1), ).setIndexNames((0, "STN-ATM-MIB", "stnAtmPortTrafIndex"))
if mibBuilder.loadTexts: stnAtmPortTrafficEntry.setStatus('current')
stnAtmPortTrafIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 4, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortTrafIndex.setStatus('current')
stnAtmPortTrafTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 4, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortTrafTxCells.setStatus('current')
stnAtmPortTrafRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortTrafRxCells.setStatus('current')
stnAtmPortTrafTxParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortTrafTxParityErrors.setStatus('current')
stnAtmPortTrafRxHdrChkSumErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortTrafRxHdrChkSumErrors.setStatus('current')
stnAtmPortTrafPhyParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortTrafPhyParityErrors.setStatus('current')
stnAtmPortTrafCrc10Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 4, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmPortTrafCrc10Errors.setStatus('current')
stnAtmAddressTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 7, 1), )
if mibBuilder.loadTexts: stnAtmAddressTable.setStatus('current')
stnAtmAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 7, 1, 1), ).setIndexNames((0, "STN-ATM-MIB", "stnAtmAddrIfIndex"), (0, "STN-ATM-MIB", "stnAtmAddrAddress"))
if mibBuilder.loadTexts: stnAtmAddressEntry.setStatus('current')
stnAtmAddrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 7, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmAddrIfIndex.setStatus('current')
stnAtmAddrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 7, 1, 1, 2), NSAPAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmAddrAddress.setStatus('current')
stnAtmAddrAddressLen = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmAddrAddressLen.setStatus('current')
stnAtmThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 8, 1), )
if mibBuilder.loadTexts: stnAtmThresholdTable.setStatus('current')
stnAtmThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 8, 1, 1), ).setIndexNames((0, "STN-ATM-MIB", "stnAtmTholdTgrpId"), (0, "STN-ATM-MIB", "stnAtmTholdRegionId"))
if mibBuilder.loadTexts: stnAtmThresholdEntry.setStatus('current')
stnAtmTholdTgrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmTholdTgrpId.setStatus('current')
stnAtmTholdRegionId = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmTholdRegionId.setStatus('current')
stnAtmTholdCellLowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmTholdCellLowerLimit.setStatus('current')
stnAtmTholdCellUpperLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1023)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmTholdCellUpperLimit.setStatus('current')
stnAtmTholdCellQLimitMarking = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1023)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmTholdCellQLimitMarking.setStatus('current')
stnAtmTholdQLimitDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1023)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmTholdQLimitDiscard.setStatus('current')
stnAtmTholdQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1023)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmTholdQueueLimit.setStatus('current')
stnAtmAcctEnabled = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 9, 1), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmAcctEnabled.setStatus('current')
stnAtmAcctMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 9, 2), Integer32().clone(1024)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmAcctMaxSize.setStatus('current')
stnAtmAcctMaxFiles = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 9, 3), Integer32().clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmAcctMaxFiles.setStatus('current')
stnAtmAcctFilePath = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 9, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmAcctFilePath.setStatus('current')
stnAtmAcctFtpServer1 = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 9, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmAcctFtpServer1.setStatus('current')
stnAtmAcctFtpUserName1 = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 9, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmAcctFtpUserName1.setStatus('current')
stnAtmAcctFtpPassword1 = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 9, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: stnAtmAcctFtpPassword1.setStatus('current')
stnAtmAcctFtpServer2 = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 9, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmAcctFtpServer2.setStatus('current')
stnAtmAcctFtpUserName2 = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 9, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmAcctFtpUserName2.setStatus('current')
stnAtmAcctFtpPassword2 = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 9, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: stnAtmAcctFtpPassword2.setStatus('current')
stnAtmAcctFtpServer3 = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 9, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmAcctFtpServer3.setStatus('current')
stnAtmAcctFtpUserName3 = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 9, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmAcctFtpUserName3.setStatus('current')
stnAtmAcctFtpPassword3 = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 9, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: stnAtmAcctFtpPassword3.setStatus('current')
stnAtmAcctCurrentFtpServer = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 9, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmAcctCurrentFtpServer.setStatus('current')
stnAtmAcctPreviousFtpServer = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 6, 1, 9, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnAtmAcctPreviousFtpServer.setStatus('current')
stnCdrServerFailure = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 15)).setObjects(("STN-ATM-MIB", "stnAtmAcctCurrentFtpServer"), ("STN-ATM-MIB", "stnAtmAcctPreviousFtpServer"))
if mibBuilder.loadTexts: stnCdrServerFailure.setStatus('current')
stnCdrLogFailure = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 16)).setObjects(("STN-ATM-MIB", "stnAtmAcctFtpServer1"), ("STN-ATM-MIB", "stnAtmAcctFtpServer2"), ("STN-ATM-MIB", "stnAtmAcctFtpServer3"))
if mibBuilder.loadTexts: stnCdrLogFailure.setStatus('current')
stnConfigAuditPvcFailure = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 31)).setObjects(("STN-ATM-MIB", "stnVcLinkIfIndex"), ("STN-ATM-MIB", "stnVcLinkVpi"), ("STN-ATM-MIB", "stnVcLinkVci"), ("STN-ROUTER-MIB", "stnRouterIndex"))
if mibBuilder.loadTexts: stnConfigAuditPvcFailure.setStatus('current')
stnConfigAuditSpvcFailure = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 32)).setObjects(("STN-ATM-MIB", "stnVcLinkIfIndex"), ("STN-ATM-MIB", "stnVcLinkVpi"), ("STN-ATM-MIB", "stnVcLinkVci"), ("STN-ROUTER-MIB", "stnRouterIndex"))
if mibBuilder.loadTexts: stnConfigAuditSpvcFailure.setStatus('current')
mibBuilder.exportSymbols("STN-ATM-MIB", stnAtmThresholds=stnAtmThresholds, stnAtmPortSigs=stnAtmPortSigs, stnTrafDescrParam4=stnTrafDescrParam4, AtmPortOperStatus=AtmPortOperStatus, stnVcLinkOAMRetryUpCount=stnVcLinkOAMRetryUpCount, stnAtmPortSVCAddress=stnAtmPortSVCAddress, stnTracePdFile=stnTracePdFile, stnAtmPortSigRetryTable=stnAtmPortSigRetryTable, stnTraceIps=stnTraceIps, stnTracePdAuditEnabled=stnTracePdAuditEnabled, stnVcLinkOAMXmtFrequency=stnVcLinkOAMXmtFrequency, stnTrafDescrType=stnTrafDescrType, stnAtmPortIlmiAdminStatus=stnAtmPortIlmiAdminStatus, stnAtmPortSigSSCSIdleDuration=stnAtmPortSigSSCSIdleDuration, stnVcLinkAalType=stnVcLinkAalType, stnAtmAcctFtpPassword2=stnAtmAcctFtpPassword2, stnAtmAcctCurrentFtpServer=stnAtmAcctCurrentFtpServer, stnAtmAcctFtpPassword3=stnAtmAcctFtpPassword3, stnTrafDescrMaximumRate=stnTrafDescrMaximumRate, stnAtmPortTrafCrc10Errors=stnAtmPortTrafCrc10Errors, stnTracePdExceptionEnabled=stnTracePdExceptionEnabled, stnAtmTraces=stnAtmTraces, stnVcCrossConnTable=stnVcCrossConnTable, stnAtmPortSigDurations=stnAtmPortSigDurations, stnVcCrossConnHighVpi=stnVcCrossConnHighVpi, stnAtmPortEnabled=stnAtmPortEnabled, stnAtmPortMaxActivePaths=stnAtmPortMaxActivePaths, stnQosClass2MaxCTD=stnQosClass2MaxCTD, stnAtmPortSigSaalRetryDuration=stnAtmPortSigSaalRetryDuration, stnAtmPortSigSSCSIfIndex=stnAtmPortSigSSCSIfIndex, stnTracePd=stnTracePd, stnVcLinkConnKind=stnVcLinkConnKind, stnTrafDescrParam2=stnTrafDescrParam2, stnAtmPortSigDurIfIndex=stnAtmPortSigDurIfIndex, stnAtmPortSigT303Duration=stnAtmPortSigT303Duration, stnQosClass3MaxCTD=stnQosClass3MaxCTD, stnAtmPortMinVccVpi=stnAtmPortMinVccVpi, stnVcCrossConnLowAutoAssign=stnVcCrossConnLowAutoAssign, stnAtmTholdCellUpperLimit=stnAtmTholdCellUpperLimit, stnAtmPortSigT303Retries=stnAtmPortSigT303Retries, stnAtmPortSigSSCSNoRspDuration=stnAtmPortSigSSCSNoRspDuration, stnTracePdProblemEnabled=stnTracePdProblemEnabled, stnAtmPortOperStatus=stnAtmPortOperStatus, stnQosClass1MaxCTD=stnQosClass1MaxCTD, stnAtmPortSigT322Duration=stnAtmPortSigT322Duration, stnQosClass1CLR=stnQosClass1CLR, stnAtmPortSigRetryEntry=stnAtmPortSigRetryEntry, stnAtmPortSigT322Retries=stnAtmPortSigT322Retries, stnAtmPortSigIfIndex=stnAtmPortSigIfIndex, stnVcLinkVci=stnVcLinkVci, stnAtmCrossConns=stnAtmCrossConns, stnAtmPortTrafficTable=stnAtmPortTrafficTable, stnAtmPortTraffic=stnAtmPortTraffic, stnAtmPortTrafPhyParityErrors=stnAtmPortTrafPhyParityErrors, stnAtmPortMaxVccVci=stnAtmPortMaxVccVci, stnAtmPortOamRetryDownCount=stnAtmPortOamRetryDownCount, stnTrafDescrParam3=stnTrafDescrParam3, stnAtmPortIlmiTable=stnAtmPortIlmiTable, stnAtmPortIlmiEntry=stnAtmPortIlmiEntry, stnAtmPortSigPrefCarrier=stnAtmPortSigPrefCarrier, stnAtmAddrAddress=stnAtmAddrAddress, stnAtmPortSigSSCSMaxStatListElms=stnAtmPortSigSSCSMaxStatListElms, stnAtmTholdQueueLimit=stnAtmTholdQueueLimit, stnCdrLogFailure=stnCdrLogFailure, stnVcLinkTable=stnVcLinkTable, stnAtmPortSigSSCSEntry=stnAtmPortSigSSCSEntry, stnAtmPortSigT316Duration=stnAtmPortSigT316Duration, stnVcLinkAalObjectsValid=stnVcLinkAalObjectsValid, stnQosCLR=stnQosCLR, stnAtmObjects=stnAtmObjects, stnAtmPortTrafIndex=stnAtmPortTrafIndex, stnAtmAddrIfIndex=stnAtmAddrIfIndex, stnAtmAcctFtpUserName2=stnAtmAcctFtpUserName2, stnAtmPortMinVccVci=stnAtmPortMinVccVci, stnAtmPortIlmiIfIndex=stnAtmPortIlmiIfIndex, stnAtmPortSigSSCSKeepAliveDuration=stnAtmPortSigSSCSKeepAliveDuration, stnVcLinkPppId=stnVcLinkPppId, stnAtmPortIlmiLocalOid=stnAtmPortIlmiLocalOid, stnVcCrossConnLowIfIndex=stnVcCrossConnLowIfIndex, stnQosClass4MaxCTD=stnQosClass4MaxCTD, stnCdrServerFailure=stnCdrServerFailure, stnAtmTholdTgrpId=stnAtmTholdTgrpId, stnVcLinkAal5RcvSDUSize=stnVcLinkAal5RcvSDUSize, stnTrafDescrCommittedRate=stnTrafDescrCommittedRate, stnAtmPortIlmiPollInterval=stnAtmPortIlmiPollInterval, stnAtmTholdQLimitDiscard=stnAtmTholdQLimitDiscard, stnAtmPortIfIndex=stnAtmPortIfIndex, stnTrafDescrServiceCategory=stnTrafDescrServiceCategory, TrafficDescrOperStatus=TrafficDescrOperStatus, stnAtmAcct=stnAtmAcct, stnQosCDV=stnQosCDV, stnAtmPortSigSSCSPollDuration=stnAtmPortSigSSCSPollDuration, stnVcLinks=stnVcLinks, stnAtmPortIlmiAutoNegotiate=stnAtmPortIlmiAutoNegotiate, stnVcCrossConns=stnVcCrossConns, stnVcLinkVpi=stnVcLinkVpi, stnTrafDescrIndex=stnTrafDescrIndex, stnVcLinkXmtTrafDescr=stnVcLinkXmtTrafDescr, stnAtmPortMaxActiveChannels=stnAtmPortMaxActiveChannels, stnQosClass2CDV=stnQosClass2CDV, stnTrafDescrFrameDiscard=stnTrafDescrFrameDiscard, stnAtmPortSigAssignVpiVci=stnAtmPortSigAssignVpiVci, stnVcLinkAal5EncapsType=stnVcLinkAal5EncapsType, stnVcCrossConnHighAutoAssign=stnVcCrossConnHighAutoAssign, stnAtmPortSigDurationTable=stnAtmPortSigDurationTable, stnAtmPortSigT308Duration=stnAtmPortSigT308Duration, stnTraceIpsFile=stnTraceIpsFile, stnTrafDescrQosClass=stnTrafDescrQosClass, stnAtmAcctFilePath=stnAtmAcctFilePath, stnAtmPortTrafTxCells=stnAtmPortTrafTxCells, stnAtmPortSigT331Retries=stnAtmPortSigT331Retries, stnAtmPortSigSSCSMaxSdBetwPolls=stnAtmPortSigSSCSMaxSdBetwPolls, stnAtmPortSigEnabled=stnAtmPortSigEnabled, stnAtmAcctMaxSize=stnAtmAcctMaxSize, stnAtmPortAttrs=stnAtmPortAttrs, stnVcLinkOAMRetryDownCount=stnVcLinkOAMRetryDownCount, PYSNMP_MODULE_ID=stnAtm, stnAtmPortSigVersion=stnAtmPortSigVersion, stnAtmPorts=stnAtmPorts, stnAtmPortSigSSCSMaxCcRetries=stnAtmPortSigSSCSMaxCcRetries, stnVcCrossConnHighIfIndex=stnVcCrossConnHighIfIndex, stnVcLinkOAMMgmtEnabled=stnVcLinkOAMMgmtEnabled, stnAtmPortIlmiVci=stnAtmPortIlmiVci, stnAtmTholdRegionId=stnAtmTholdRegionId, stnAtmAddressEntry=stnAtmAddressEntry, stnAtm=stnAtm, stnAtmPortSigSSCSRepeatUstat=stnAtmPortSigSSCSRepeatUstat, stnTrafDescrParam1=stnTrafDescrParam1, stnTrafficDescrTable=stnTrafficDescrTable, stnAtmPortTrafRxCells=stnAtmPortTrafRxCells, stnAtmPortSigRetries=stnAtmPortSigRetries, stnAtmPortTrafRxHdrChkSumErrors=stnAtmPortTrafRxHdrChkSumErrors, VcLinkOperStatus=VcLinkOperStatus, stnAtmPortIlmiCheckConnectionInt=stnAtmPortIlmiCheckConnectionInt, stnAtmPortSigVpi=stnAtmPortSigVpi, stnAtmPortSigDurationEntry=stnAtmPortSigDurationEntry, stnAtmPortIlmiLocalConn=stnAtmPortIlmiLocalConn, stnAtmAcctFtpPassword1=stnAtmAcctFtpPassword1, stnAtmPortSigSSCSCcDuration=stnAtmPortSigSSCSCcDuration, stnAtmPortOamXmtFrequency=stnAtmPortOamXmtFrequency, stnAtmPortSigPrefCarrierPresent=stnAtmPortSigPrefCarrierPresent, stnAtmPortSigTable=stnAtmPortSigTable, stnAtmPortPVCAddress=stnAtmPortPVCAddress, stnAtmPortSigT398Duration=stnAtmPortSigT398Duration, stnTracePdDeveloperEnabled=stnTracePdDeveloperEnabled, stnAtmPortMaxVpcVpi=stnAtmPortMaxVpcVpi, stnQosClass4CLR=stnQosClass4CLR, stnAtmPortSigParseMode=stnAtmPortSigParseMode, stnAtmPortSigT316Retries=stnAtmPortSigT316Retries, stnAtmPortIlmiInactivityFactor=stnAtmPortIlmiInactivityFactor, stnAtmPortSigEntry=stnAtmPortSigEntry, stnAtmPortIlmiPrefixLen=stnAtmPortIlmiPrefixLen, stnAtmPortSigT306Duration=stnAtmPortSigT306Duration, stnAtmPortSigT308Retries=stnAtmPortSigT308Retries, stnVcLinkAccEnabled=stnVcLinkAccEnabled, stnTrafficDescrEntry=stnTrafficDescrEntry, stnAtmThresholdEntry=stnAtmThresholdEntry, stnVcLinkCastType=stnVcLinkCastType, stnAtmPortSigT317Duration=stnAtmPortSigT317Duration, stnAtmQos=stnAtmQos, stnVcLinkEntry=stnVcLinkEntry, stnQosClass1CDV=stnQosClass1CDV, stnVcCrossConnEntry=stnVcCrossConnEntry, stnAtmPortAttrEntry=stnAtmPortAttrEntry, stnAtmAcctMaxFiles=stnAtmAcctMaxFiles, stnConfigAuditPvcFailure=stnConfigAuditPvcFailure, stnTraceIpsEnabled=stnTraceIpsEnabled, stnAtmPortOamManagementEnabled=stnAtmPortOamManagementEnabled, stnVcLinkOAMRetryFrequency=stnVcLinkOAMRetryFrequency, stnAtmPortSigT301Duration=stnAtmPortSigT301Duration, stnAtmTholdCellQLimitMarking=stnAtmTholdCellQLimitMarking, stnAtmPortSigRetryIfIndex=stnAtmPortSigRetryIfIndex, stnAtmPortSigVci=stnAtmPortSigVci, stnAtmPortSigT309Duration=stnAtmPortSigT309Duration, stnQosClass3CDV=stnQosClass3CDV, stnAtmPortSigSSCSMaxRcvWindowSize=stnAtmPortSigSSCSMaxRcvWindowSize, stnAtmPortIlmi=stnAtmPortIlmi, stnVcLinkRcvTrafDescr=stnVcLinkRcvTrafDescr, stnTrafDescrParam5=stnTrafDescrParam5, stnAtmPortIlmiVpi=stnAtmPortIlmiVpi, stnAtmPortIfState=stnAtmPortIfState, stnAtmPortMinVpcVpi=stnAtmPortMinVpcVpi, stnVcCrossConnLowVci=stnVcCrossConnLowVci, stnAtmPortIlmiNetPrefix=stnAtmPortIlmiNetPrefix, stnAtmPortSigT331Duration=stnAtmPortSigT331Duration, stnAtmAcctFtpUserName3=stnAtmAcctFtpUserName3, stnAtmThresholdTable=stnAtmThresholdTable, stnVcCrossConnHighVci=stnVcCrossConnHighVci, stnAtmPortIfType=stnAtmPortIfType, stnAtmPortSigVpSigType=stnAtmPortSigVpSigType, stnAtmPortTrafficEntry=stnAtmPortTrafficEntry, stnAtmPortSigT399Duration=stnAtmPortSigT399Duration, stnQosClass3CLR=stnQosClass3CLR, stnAtmPortSigT310Duration=stnAtmPortSigT310Duration, stnAtmLinks=stnAtmLinks, stnConfigAuditSpvcFailure=stnConfigAuditSpvcFailure, stnTrafDescrName=stnTrafDescrName, VcCrossConnOperStatus=VcCrossConnOperStatus, stnAtmPortSignaling=stnAtmPortSignaling, stnAtmPortSigSSCSUstatRspToPoll=stnAtmPortSigSSCSUstatRspToPoll, stnAtmPortIlmiVersion=stnAtmPortIlmiVersion, stnAtmPortSigNetworkOrientation=stnAtmPortSigNetworkOrientation, stnAtmPortIlmiNetworkOrientation=stnAtmPortIlmiNetworkOrientation, stnAtmAddressTable=stnAtmAddressTable, stnVpCrossConns=stnVpCrossConns, stnAtmAddrAddressLen=stnAtmAddrAddressLen, stnAtmPortOamRetryFrequency=stnAtmPortOamRetryFrequency, stnVcLinkAal5XmtSDUSize=stnVcLinkAal5XmtSDUSize, stnAtmAcctFtpServer2=stnAtmAcctFtpServer2, stnVcLinkIfIndex=stnVcLinkIfIndex, stnAtmPortSigT397Duration=stnAtmPortSigT397Duration, stnQosClass4CDV=stnQosClass4CDV, stnQosCTD=stnQosCTD, stnAtmPortMaxVccVpi=stnAtmPortMaxVccVpi, stnTraceIpsSize=stnTraceIpsSize, stnVcCrossConnLowVpi=stnVcCrossConnLowVpi, stnAtmPortOamRetryUpCount=stnAtmPortOamRetryUpCount, stnAtmPortIlmiEnterprise=stnAtmPortIlmiEnterprise, stnAtmPortTrafTxParityErrors=stnAtmPortTrafTxParityErrors, stnAtmPortAttrTable=stnAtmPortAttrTable, stnAtmMibConformance=stnAtmMibConformance, stnAtmTrafficDescrs=stnAtmTrafficDescrs, stnAtmAcctPreviousFtpServer=stnAtmAcctPreviousFtpServer, stnAtmAcctFtpUserName1=stnAtmAcctFtpUserName1, stnAtmPortSigSSCSTable=stnAtmPortSigSSCSTable, stnAtmPortSigSSCSPollAfterRetrans=stnAtmPortSigSSCSPollAfterRetrans, stnAtmAcctFtpServer3=stnAtmAcctFtpServer3, stnAtmAcctEnabled=stnAtmAcctEnabled, stnAtmAcctFtpServer1=stnAtmAcctFtpServer1, stnAtmTholdCellLowerLimit=stnAtmTholdCellLowerLimit, stnVcCrossConnOperStatus=stnVcCrossConnOperStatus, stnAtmPortIlmiEnabled=stnAtmPortIlmiEnabled, stnTrafDescrOperStatus=stnTrafDescrOperStatus, stnTracePdSize=stnTracePdSize, stnAtmPortSigT313Duration=stnAtmPortSigT313Duration, stnAtmAddresses=stnAtmAddresses, stnAtmPortSigT333Duration=stnAtmPortSigT333Duration, stnQosClass2CLR=stnQosClass2CLR, stnVcLinkOperStatus=stnVcLinkOperStatus)
