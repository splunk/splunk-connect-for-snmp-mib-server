#
# PySNMP MIB module D3I-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/D3I-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:21:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, enterprises, Unsigned32, Bits, NotificationType, TimeTicks, ObjectIdentity, Gauge32, Counter32, MibIdentifier, Integer32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, experimental, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "enterprises", "Unsigned32", "Bits", "NotificationType", "TimeTicks", "ObjectIdentity", "Gauge32", "Counter32", "MibIdentifier", "Integer32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "experimental", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
usr = MibIdentifier((1, 3, 6, 1, 4, 1, 429))
nas = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1))
d3i = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 43))
d3iID = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 43, 1))
d3iIDTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 43, 1, 1), )
if mibBuilder.loadTexts: d3iIDTable.setStatus('mandatory')
d3iIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 43, 1, 1, 1), ).setIndexNames((0, "D3I-MIB", "d3iIDIndex"))
if mibBuilder.loadTexts: d3iIDEntry.setStatus('mandatory')
d3iIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 43, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: d3iIDIndex.setStatus('mandatory')
d3iIDNACHardwareSerNum = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 43, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: d3iIDNACHardwareSerNum.setStatus('mandatory')
d3iIDNICHardwareSerNum = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 43, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: d3iIDNICHardwareSerNum.setStatus('mandatory')
d3iIDNACHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 43, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: d3iIDNACHardwareRev.setStatus('mandatory')
d3iIDNICHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 43, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: d3iIDNICHardwareRev.setStatus('mandatory')
d3iIDBoardManagerSwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 43, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: d3iIDBoardManagerSwRev.setStatus('mandatory')
d3iIDBoardManagerDate = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 43, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: d3iIDBoardManagerDate.setStatus('mandatory')
d3iCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 43, 2))
d3iCfgTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 43, 2, 1), )
if mibBuilder.loadTexts: d3iCfgTable.setStatus('mandatory')
d3iCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 43, 2, 1, 1), ).setIndexNames((0, "D3I-MIB", "d3iCfgIndex"))
if mibBuilder.loadTexts: d3iCfgEntry.setStatus('mandatory')
d3iCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 43, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: d3iCfgIndex.setStatus('mandatory')
d3iCfgPrimaryTimeSource = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 43, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(128, 129, 130, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))).clone(namedValues=NamedValues(("spanBITS", 128), ("internal", 129), ("throughTDM", 130), ("span1", 1), ("span2", 2), ("span3", 3), ("span4", 4), ("span5", 5), ("span6", 6), ("span7", 7), ("span8", 8), ("span9", 9), ("span10", 10), ("span11", 11), ("span12", 12), ("span13", 13), ("span14", 14), ("span15", 15), ("span16", 16), ("span17", 17), ("span18", 18), ("span19", 19), ("span20", 20), ("span21", 21), ("span22", 22), ("span23", 23), ("span24", 24), ("span25", 25), ("span26", 26), ("span27", 27), ("span28", 28)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: d3iCfgPrimaryTimeSource.setStatus('mandatory')
d3iCfgSecondaryTimeSource = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 43, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(128, 129, 130, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))).clone(namedValues=NamedValues(("spanBITS", 128), ("internal", 129), ("throughTDM", 130), ("span1", 1), ("span2", 2), ("span3", 3), ("span4", 4), ("span5", 5), ("span6", 6), ("span7", 7), ("span8", 8), ("span9", 9), ("span10", 10), ("span11", 11), ("span12", 12), ("span13", 13), ("span14", 14), ("span15", 15), ("span16", 16), ("span17", 17), ("span18", 18), ("span19", 19), ("span20", 20), ("span21", 21), ("span22", 22), ("span23", 23), ("span24", 24), ("span25", 25), ("span26", 26), ("span27", 27), ("span28", 28)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: d3iCfgSecondaryTimeSource.setStatus('mandatory')
d3iCfgTimeSourceSwitchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 43, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: d3iCfgTimeSourceSwitchMode.setStatus('mandatory')
d3iCfgCLIPromptName = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 43, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: d3iCfgCLIPromptName.setStatus('mandatory')
d3iStat = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 43, 3))
d3iStatTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 43, 3, 1), )
if mibBuilder.loadTexts: d3iStatTable.setStatus('mandatory')
d3iStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 43, 3, 1, 1), ).setIndexNames((0, "D3I-MIB", "d3iStatIndex"))
if mibBuilder.loadTexts: d3iStatEntry.setStatus('mandatory')
d3iStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 43, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: d3iStatIndex.setStatus('mandatory')
d3iStatSigPBusTxPktOkCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 43, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: d3iStatSigPBusTxPktOkCnt.setStatus('mandatory')
d3iStatSigPBusTxPktFldCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 43, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: d3iStatSigPBusTxPktFldCnt.setStatus('mandatory')
d3iStatSigPBusRxPktOkCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 43, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: d3iStatSigPBusRxPktOkCnt.setStatus('mandatory')
d3iStatSigPBusRxPktRjtCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 43, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: d3iStatSigPBusRxPktRjtCnt.setStatus('mandatory')
d3iStatSigPBusConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 43, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("closed", 1), ("opening", 2), ("opened", 3), ("configuring", 4), ("ready", 5), ("closing", 6), ("loopback", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: d3iStatSigPBusConnState.setStatus('mandatory')
d3iStatEnfasLinkDownCause = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 43, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("discCmd", 2), ("nacRemoval", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: d3iStatEnfasLinkDownCause.setStatus('mandatory')
d3iStatPbClock = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 43, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notSupported", 1), ("clockMaster", 2), ("clockSlave", 3), ("noClockPresent", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: d3iStatPbClock.setStatus('mandatory')
d3iStatTdmClock = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 43, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notSupported", 1), ("clockMaster", 2), ("clockSlave", 3), ("noClockPresent", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: d3iStatTdmClock.setStatus('mandatory')
d3iCmd = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 43, 4))
d3iCmdTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 43, 4, 1), )
if mibBuilder.loadTexts: d3iCmdTable.setStatus('mandatory')
d3iCmdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 43, 4, 1, 1), ).setIndexNames((0, "D3I-MIB", "d3iCmdIndex"))
if mibBuilder.loadTexts: d3iCmdEntry.setStatus('mandatory')
d3iCmdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 43, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: d3iCmdIndex.setStatus('mandatory')
d3iCmdMgtStationId = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 43, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: d3iCmdMgtStationId.setStatus('mandatory')
d3iCmdReqId = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 43, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: d3iCmdReqId.setStatus('mandatory')
d3iCmdFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 43, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noCommand", 1), ("restoreCfgFromNvram", 2), ("softwareReset", 3), ("restoreDefaultUIPassword", 4), ("restoreCfgFromDefaults", 5), ("saveCfgtoNvram", 6), ("d3iNICReset", 7), ("d3iNICResetHold", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: d3iCmdFunction.setStatus('mandatory')
d3iCmdForce = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 43, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("force", 1), ("noForce", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: d3iCmdForce.setStatus('mandatory')
d3iCmdParam = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 43, 4, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: d3iCmdParam.setStatus('mandatory')
d3iCmdResult = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 43, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("success", 2), ("inProgress", 3), ("notSupported", 4), ("unAbleToRun", 5), ("aborted", 6), ("failed", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: d3iCmdResult.setStatus('mandatory')
d3iCmdCode = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 43, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(58, 73))).clone(namedValues=NamedValues(("userInterfaceActive", 58), ("pendingSoftwareDownload", 73)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: d3iCmdCode.setStatus('mandatory')
d3iTe = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 43, 5))
d3iTeTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 43, 5, 1), )
if mibBuilder.loadTexts: d3iTeTable.setStatus('mandatory')
d3iTeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 43, 5, 1, 1), ).setIndexNames((0, "D3I-MIB", "d3iTeIndex"))
if mibBuilder.loadTexts: d3iTeEntry.setStatus('mandatory')
d3iTeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 43, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: d3iTeIndex.setStatus('mandatory')
d3iTePbActive = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 43, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: d3iTePbActive.setStatus('mandatory')
d3iTePbLost = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 43, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: d3iTePbLost.setStatus('mandatory')
d3iTePbClockLossEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 43, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: d3iTePbClockLossEvent.setStatus('mandatory')
d3iTePbClockRestoreEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 43, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: d3iTePbClockRestoreEvent.setStatus('mandatory')
d3iTeTdmClockLost = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 43, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: d3iTeTdmClockLost.setStatus('mandatory')
d3iTeTdmClockRestored = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 43, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: d3iTeTdmClockRestored.setStatus('mandatory')
d3iTeEnfasLinkUp = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 43, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: d3iTeEnfasLinkUp.setStatus('mandatory')
d3iTeEnfasLinkDown = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 43, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: d3iTeEnfasLinkDown.setStatus('mandatory')
d3iTeSystemReset = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 43, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: d3iTeSystemReset.setStatus('mandatory')
mibBuilder.exportSymbols("D3I-MIB", d3iID=d3iID, d3iTeTable=d3iTeTable, d3iIDBoardManagerSwRev=d3iIDBoardManagerSwRev, d3iCmdTable=d3iCmdTable, d3iTeIndex=d3iTeIndex, d3iStatTable=d3iStatTable, d3iCfgCLIPromptName=d3iCfgCLIPromptName, d3iCfgSecondaryTimeSource=d3iCfgSecondaryTimeSource, d3iIDTable=d3iIDTable, d3iTeEnfasLinkDown=d3iTeEnfasLinkDown, d3iCmdMgtStationId=d3iCmdMgtStationId, d3iTePbClockLossEvent=d3iTePbClockLossEvent, d3iIDEntry=d3iIDEntry, d3iCmdForce=d3iCmdForce, d3iTeTdmClockLost=d3iTeTdmClockLost, d3iTeEntry=d3iTeEntry, d3iTePbActive=d3iTePbActive, d3iStatSigPBusTxPktOkCnt=d3iStatSigPBusTxPktOkCnt, d3iCfgIndex=d3iCfgIndex, d3iStatSigPBusTxPktFldCnt=d3iStatSigPBusTxPktFldCnt, d3iStatIndex=d3iStatIndex, d3iStatTdmClock=d3iStatTdmClock, nas=nas, d3iCfgTimeSourceSwitchMode=d3iCfgTimeSourceSwitchMode, d3iStatPbClock=d3iStatPbClock, d3iCmdIndex=d3iCmdIndex, d3iCfg=d3iCfg, d3iCmdResult=d3iCmdResult, d3iCmd=d3iCmd, d3iCmdParam=d3iCmdParam, d3iStatSigPBusRxPktOkCnt=d3iStatSigPBusRxPktOkCnt, d3iCfgEntry=d3iCfgEntry, d3iCmdFunction=d3iCmdFunction, d3iTeSystemReset=d3iTeSystemReset, d3iTePbLost=d3iTePbLost, d3iStatSigPBusConnState=d3iStatSigPBusConnState, d3iTe=d3iTe, d3iIDNACHardwareRev=d3iIDNACHardwareRev, d3iTeEnfasLinkUp=d3iTeEnfasLinkUp, d3iIDNICHardwareRev=d3iIDNICHardwareRev, d3iIDNICHardwareSerNum=d3iIDNICHardwareSerNum, d3iCfgTable=d3iCfgTable, d3iCmdEntry=d3iCmdEntry, usr=usr, d3iTeTdmClockRestored=d3iTeTdmClockRestored, d3iIDNACHardwareSerNum=d3iIDNACHardwareSerNum, d3iCmdReqId=d3iCmdReqId, d3iTePbClockRestoreEvent=d3iTePbClockRestoreEvent, d3iIDBoardManagerDate=d3iIDBoardManagerDate, d3i=d3i, d3iIDIndex=d3iIDIndex, d3iStat=d3iStat, d3iCfgPrimaryTimeSource=d3iCfgPrimaryTimeSource, d3iStatSigPBusRxPktRjtCnt=d3iStatSigPBusRxPktRjtCnt, d3iStatEntry=d3iStatEntry, d3iStatEnfasLinkDownCause=d3iStatEnfasLinkDownCause, d3iCmdCode=d3iCmdCode)
