#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-ApsMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-ApsMIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:19:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
Integer32, DisplayString, Counter32, StorageType, Unsigned32, RowStatus = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "Integer32", "DisplayString", "Counter32", "StorageType", "Unsigned32", "RowStatus")
NonReplicated, Link, PassportCounter64, Hex, FixedPoint1, AsciiString = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TextualConventionsMIB", "NonReplicated", "Link", "PassportCounter64", "Hex", "FixedPoint1", "AsciiString")
mscComponents, mscPassportMIBs = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscComponents", "mscPassportMIBs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Counter64, Integer32, ObjectIdentity, Bits, IpAddress, Counter32, TimeTicks, ModuleIdentity, MibIdentifier, iso, Gauge32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter64", "Integer32", "ObjectIdentity", "Bits", "IpAddress", "Counter32", "TimeTicks", "ModuleIdentity", "MibIdentifier", "iso", "Gauge32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
apsMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 136))
mscAps = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134))
mscApsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 1), )
if mibBuilder.loadTexts: mscApsRowStatusTable.setStatus('mandatory')
mscApsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-ApsMIB", "mscApsIndex"))
if mibBuilder.loadTexts: mscApsRowStatusEntry.setStatus('mandatory')
mscApsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscApsRowStatus.setStatus('mandatory')
mscApsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscApsComponentName.setStatus('mandatory')
mscApsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscApsStorageType.setStatus('mandatory')
mscApsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15999)))
if mibBuilder.loadTexts: mscApsIndex.setStatus('mandatory')
mscApsCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 10), )
if mibBuilder.loadTexts: mscApsCidDataTable.setStatus('mandatory')
mscApsCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-ApsMIB", "mscApsIndex"))
if mibBuilder.loadTexts: mscApsCidDataEntry.setStatus('mandatory')
mscApsCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscApsCustomerIdentifier.setStatus('mandatory')
mscApsProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 11), )
if mibBuilder.loadTexts: mscApsProvTable.setStatus('mandatory')
mscApsProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-ApsMIB", "mscApsIndex"))
if mibBuilder.loadTexts: mscApsProvEntry.setStatus('mandatory')
mscApsApplicationFramerName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 11, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscApsApplicationFramerName.setStatus('mandatory')
mscApsWorkingLine = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 11, 1, 2), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscApsWorkingLine.setStatus('mandatory')
mscApsProtectionLine = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 11, 1, 3), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscApsProtectionLine.setStatus('mandatory')
mscApsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5))).clone(namedValues=NamedValues(("unidirectional", 4), ("bidirectional", 5))).clone('unidirectional')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscApsMode.setStatus('mandatory')
mscApsRevertive = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscApsRevertive.setStatus('mandatory')
mscApsHoldOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 11, 1, 6), FixedPoint1().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscApsHoldOffTime.setStatus('mandatory')
mscApsWaitToRestorePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 12)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscApsWaitToRestorePeriod.setStatus('mandatory')
mscApsSignalDegradeRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 11, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-9, -5)).clone(-5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscApsSignalDegradeRatio.setStatus('mandatory')
mscApsStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 12), )
if mibBuilder.loadTexts: mscApsStateTable.setStatus('mandatory')
mscApsStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-ApsMIB", "mscApsIndex"))
if mibBuilder.loadTexts: mscApsStateEntry.setStatus('mandatory')
mscApsAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscApsAdminState.setStatus('mandatory')
mscApsOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscApsOperationalState.setStatus('mandatory')
mscApsUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscApsUsageState.setStatus('mandatory')
mscApsAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 12, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscApsAvailabilityStatus.setStatus('mandatory')
mscApsProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 12, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscApsProceduralStatus.setStatus('mandatory')
mscApsControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 12, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscApsControlStatus.setStatus('mandatory')
mscApsAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 12, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscApsAlarmStatus.setStatus('mandatory')
mscApsStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscApsStandbyStatus.setStatus('mandatory')
mscApsUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscApsUnknownStatus.setStatus('mandatory')
mscApsOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 13), )
if mibBuilder.loadTexts: mscApsOperTable.setStatus('mandatory')
mscApsOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-ApsMIB", "mscApsIndex"))
if mibBuilder.loadTexts: mscApsOperEntry.setStatus('mandatory')
mscApsNearEndRxActiveLine = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("protection", 0), ("working", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscApsNearEndRxActiveLine.setStatus('mandatory')
mscApsNearEndRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 6, 8, 10, 12, 14, 15))).clone(namedValues=NamedValues(("noRequest", 0), ("doNotRevert", 1), ("reverseRequest", 2), ("waitToRestore", 6), ("manualSwitch", 8), ("signalDegrade", 10), ("signalFail", 12), ("forcedSwitch", 14), ("lockoutOfProtection", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscApsNearEndRequest.setStatus('mandatory')
mscApsNearEndRequestChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("protection", 0), ("working", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscApsNearEndRequestChannel.setStatus('mandatory')
mscApsFarEndRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 6, 8, 10, 12, 14, 15))).clone(namedValues=NamedValues(("noRequest", 0), ("doNotRevert", 1), ("reverseRequest", 2), ("waitToRestore", 6), ("manualSwitch", 8), ("signalDegrade", 10), ("signalFail", 12), ("forcedSwitch", 14), ("lockoutOfProtection", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscApsFarEndRequest.setStatus('mandatory')
mscApsFarEndRequestChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("protection", 0), ("working", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscApsFarEndRequestChannel.setStatus('mandatory')
mscApsSdOnLines = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 13, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscApsSdOnLines.setStatus('mandatory')
mscApsSwitchovers = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscApsSwitchovers.setStatus('mandatory')
mscApsTimeUntilRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 13, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscApsTimeUntilRestore.setStatus('mandatory')
mscApsProtocolFailureAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscApsProtocolFailureAlarm.setStatus('mandatory')
mscApsModeMismatchAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 13, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscApsModeMismatchAlarm.setStatus('mandatory')
mscApsTest = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 2))
mscApsTestRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 2, 1), )
if mibBuilder.loadTexts: mscApsTestRowStatusTable.setStatus('mandatory')
mscApsTestRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-ApsMIB", "mscApsIndex"), (0, "Nortel-MsCarrier-MscPassport-ApsMIB", "mscApsTestIndex"))
if mibBuilder.loadTexts: mscApsTestRowStatusEntry.setStatus('mandatory')
mscApsTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscApsTestRowStatus.setStatus('mandatory')
mscApsTestComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscApsTestComponentName.setStatus('mandatory')
mscApsTestStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscApsTestStorageType.setStatus('mandatory')
mscApsTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscApsTestIndex.setStatus('mandatory')
mscApsTestStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 2, 10), )
if mibBuilder.loadTexts: mscApsTestStateTable.setStatus('mandatory')
mscApsTestStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-ApsMIB", "mscApsIndex"), (0, "Nortel-MsCarrier-MscPassport-ApsMIB", "mscApsTestIndex"))
if mibBuilder.loadTexts: mscApsTestStateEntry.setStatus('mandatory')
mscApsTestAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscApsTestAdminState.setStatus('mandatory')
mscApsTestOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscApsTestOperationalState.setStatus('mandatory')
mscApsTestUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscApsTestUsageState.setStatus('mandatory')
mscApsTestSetupTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 2, 11), )
if mibBuilder.loadTexts: mscApsTestSetupTable.setStatus('mandatory')
mscApsTestSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-ApsMIB", "mscApsIndex"), (0, "Nortel-MsCarrier-MscPassport-ApsMIB", "mscApsTestIndex"))
if mibBuilder.loadTexts: mscApsTestSetupEntry.setStatus('mandatory')
mscApsTestPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 2, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscApsTestPurpose.setStatus('mandatory')
mscApsTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("card", 0), ("manual", 1), ("localLoop", 2), ("remoteLoop", 3), ("externalLoop", 4), ("payloadLoop", 5), ("remoteLoopThisTrib", 6), ("v54RemoteLoop", 7), ("pn127RemoteLoop", 8))).clone('card')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscApsTestType.setStatus('mandatory')
mscApsTestFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 2, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscApsTestFrmSize.setStatus('mandatory')
mscApsTestFrmPatternType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ccitt32kBitPattern", 0), ("ccitt8MBitPattern", 1), ("customizedPattern", 2))).clone('ccitt32kBitPattern')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscApsTestFrmPatternType.setStatus('mandatory')
mscApsTestCustomizedPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 2, 11, 1, 5), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(1431655765)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscApsTestCustomizedPattern.setStatus('mandatory')
mscApsTestDataStartDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 2, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1814400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscApsTestDataStartDelay.setStatus('mandatory')
mscApsTestDisplayInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 2, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30240)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscApsTestDisplayInterval.setStatus('mandatory')
mscApsTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 2, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30240)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscApsTestDuration.setStatus('mandatory')
mscApsTestResultsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 2, 12), )
if mibBuilder.loadTexts: mscApsTestResultsTable.setStatus('mandatory')
mscApsTestResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 2, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-ApsMIB", "mscApsIndex"), (0, "Nortel-MsCarrier-MscPassport-ApsMIB", "mscApsTestIndex"))
if mibBuilder.loadTexts: mscApsTestResultsEntry.setStatus('mandatory')
mscApsTestElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 2, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscApsTestElapsedTime.setStatus('mandatory')
mscApsTestTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 2, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscApsTestTimeRemaining.setStatus('mandatory')
mscApsTestCauseOfTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("testTimeExpired", 0), ("stoppedByOperator", 1), ("unknown", 2), ("neverStarted", 3), ("testRunning", 4), ("hardwareReconfigured", 5), ("loopCodeSyncFailed", 6), ("patternSyncFailed", 7), ("patternSyncLost", 8))).clone('neverStarted')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscApsTestCauseOfTermination.setStatus('mandatory')
mscApsTestBitsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 2, 12, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscApsTestBitsTx.setStatus('mandatory')
mscApsTestBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 2, 12, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscApsTestBytesTx.setStatus('mandatory')
mscApsTestFrmTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 2, 12, 1, 6), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscApsTestFrmTx.setStatus('mandatory')
mscApsTestBitsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 2, 12, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscApsTestBitsRx.setStatus('mandatory')
mscApsTestBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 2, 12, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscApsTestBytesRx.setStatus('mandatory')
mscApsTestFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 2, 12, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscApsTestFrmRx.setStatus('mandatory')
mscApsTestErroredFrmRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 2, 12, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscApsTestErroredFrmRx.setStatus('mandatory')
mscApsTestBitErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 134, 2, 12, 1, 11), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscApsTestBitErrorRate.setStatus('mandatory')
apsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 136, 1))
apsGroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 136, 1, 1))
apsGroupCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 136, 1, 1, 3))
apsGroupCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 136, 1, 1, 3, 2))
apsCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 136, 3))
apsCapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 136, 3, 1))
apsCapabilitiesCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 136, 3, 1, 3))
apsCapabilitiesCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 136, 3, 1, 3, 2))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-ApsMIB", mscApsTestFrmRx=mscApsTestFrmRx, mscApsRowStatusEntry=mscApsRowStatusEntry, mscApsTestIndex=mscApsTestIndex, mscApsProtectionLine=mscApsProtectionLine, mscApsCidDataEntry=mscApsCidDataEntry, mscApsHoldOffTime=mscApsHoldOffTime, mscApsComponentName=mscApsComponentName, mscApsTestResultsEntry=mscApsTestResultsEntry, mscApsRowStatus=mscApsRowStatus, mscApsWaitToRestorePeriod=mscApsWaitToRestorePeriod, mscApsTestOperationalState=mscApsTestOperationalState, mscApsTestSetupEntry=mscApsTestSetupEntry, apsCapabilitiesCA02=apsCapabilitiesCA02, mscApsTestStorageType=mscApsTestStorageType, mscApsTestDisplayInterval=mscApsTestDisplayInterval, mscApsTestFrmSize=mscApsTestFrmSize, mscApsProceduralStatus=mscApsProceduralStatus, mscApsUnknownStatus=mscApsUnknownStatus, apsGroupCA02A=apsGroupCA02A, mscApsTestElapsedTime=mscApsTestElapsedTime, mscApsTestUsageState=mscApsTestUsageState, mscApsTestBytesRx=mscApsTestBytesRx, mscApsFarEndRequest=mscApsFarEndRequest, mscApsUsageState=mscApsUsageState, mscApsSwitchovers=mscApsSwitchovers, mscAps=mscAps, mscApsStandbyStatus=mscApsStandbyStatus, mscApsNearEndRxActiveLine=mscApsNearEndRxActiveLine, mscApsSignalDegradeRatio=mscApsSignalDegradeRatio, mscApsIndex=mscApsIndex, mscApsTestBitsRx=mscApsTestBitsRx, mscApsTestType=mscApsTestType, mscApsTestStateEntry=mscApsTestStateEntry, mscApsTestSetupTable=mscApsTestSetupTable, mscApsTestResultsTable=mscApsTestResultsTable, mscApsStateTable=mscApsStateTable, mscApsProvTable=mscApsProvTable, mscApsRowStatusTable=mscApsRowStatusTable, mscApsStateEntry=mscApsStateEntry, mscApsTestCauseOfTermination=mscApsTestCauseOfTermination, mscApsTestCustomizedPattern=mscApsTestCustomizedPattern, apsMIB=apsMIB, mscApsTestPurpose=mscApsTestPurpose, mscApsWorkingLine=mscApsWorkingLine, mscApsAdminState=mscApsAdminState, mscApsTestBitsTx=mscApsTestBitsTx, apsCapabilitiesCA02A=apsCapabilitiesCA02A, apsGroupCA=apsGroupCA, mscApsStorageType=mscApsStorageType, mscApsTestAdminState=mscApsTestAdminState, mscApsProvEntry=mscApsProvEntry, apsCapabilitiesCA=apsCapabilitiesCA, mscApsApplicationFramerName=mscApsApplicationFramerName, mscApsTestBitErrorRate=mscApsTestBitErrorRate, mscApsTestFrmPatternType=mscApsTestFrmPatternType, mscApsTestStateTable=mscApsTestStateTable, mscApsTestTimeRemaining=mscApsTestTimeRemaining, mscApsSdOnLines=mscApsSdOnLines, mscApsTestErroredFrmRx=mscApsTestErroredFrmRx, mscApsTestRowStatus=mscApsTestRowStatus, apsGroupCA02=apsGroupCA02, mscApsOperationalState=mscApsOperationalState, mscApsTest=mscApsTest, mscApsOperTable=mscApsOperTable, mscApsRevertive=mscApsRevertive, mscApsModeMismatchAlarm=mscApsModeMismatchAlarm, mscApsProtocolFailureAlarm=mscApsProtocolFailureAlarm, mscApsTestRowStatusEntry=mscApsTestRowStatusEntry, mscApsTestBytesTx=mscApsTestBytesTx, mscApsTestDataStartDelay=mscApsTestDataStartDelay, mscApsAvailabilityStatus=mscApsAvailabilityStatus, mscApsTestFrmTx=mscApsTestFrmTx, mscApsTimeUntilRestore=mscApsTimeUntilRestore, mscApsTestRowStatusTable=mscApsTestRowStatusTable, mscApsMode=mscApsMode, apsGroup=apsGroup, mscApsControlStatus=mscApsControlStatus, mscApsCustomerIdentifier=mscApsCustomerIdentifier, mscApsTestDuration=mscApsTestDuration, mscApsNearEndRequestChannel=mscApsNearEndRequestChannel, mscApsCidDataTable=mscApsCidDataTable, mscApsAlarmStatus=mscApsAlarmStatus, mscApsFarEndRequestChannel=mscApsFarEndRequestChannel, mscApsTestComponentName=mscApsTestComponentName, apsCapabilities=apsCapabilities, mscApsNearEndRequest=mscApsNearEndRequest, mscApsOperEntry=mscApsOperEntry)
