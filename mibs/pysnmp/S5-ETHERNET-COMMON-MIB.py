#
# PySNMP MIB module S5-ETHERNET-COMMON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/S5-ETHERNET-COMMON-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:51:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
s5EnCfg, s5EnStat = mibBuilder.importSymbols("S5-ETHERNET-MIB", "s5EnCfg", "s5EnStat")
AttId, TimeIntervalSec, SrcIndx = mibBuilder.importSymbols("S5-TCS-MIB", "AttId", "TimeIntervalSec", "SrcIndx")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Gauge32, IpAddress, Counter64, ModuleIdentity, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, iso, ObjectIdentity, Integer32, MibIdentifier, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Gauge32", "IpAddress", "Counter64", "ModuleIdentity", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "iso", "ObjectIdentity", "Integer32", "MibIdentifier", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
s5EthernetCommonMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 1, 0))
s5EthernetCommonMib.setRevisions(('2004-07-20 00:00',))
if mibBuilder.loadTexts: s5EthernetCommonMib.setLastUpdated('200407200000Z')
if mibBuilder.loadTexts: s5EthernetCommonMib.setOrganization('Nortel Networks')
s5EnPortTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 1, 1), )
if mibBuilder.loadTexts: s5EnPortTable.setStatus('current')
s5EnPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 1, 1, 1), ).setIndexNames((0, "S5-ETHERNET-COMMON-MIB", "s5EnPortBrdIndx"), (0, "S5-ETHERNET-COMMON-MIB", "s5EnPortIndx"))
if mibBuilder.loadTexts: s5EnPortEntry.setStatus('current')
s5EnPortBrdIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5EnPortBrdIndx.setStatus('current')
s5EnPortIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5EnPortIndx.setStatus('current')
s5EnPortPartStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("partition", 3), ("autoPartition", 4), ("timedPartition", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s5EnPortPartStatus.setStatus('current')
s5EnPortPartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 1, 1, 1, 4), TimeIntervalSec()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s5EnPortPartTime.setStatus('current')
s5EnPortLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5EnPortLinkStatus.setStatus('current')
s5EnPortJabberStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("jabbering", 2), ("ok", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5EnPortJabberStatus.setStatus('current')
s5EnPortExtTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 1, 3), )
if mibBuilder.loadTexts: s5EnPortExtTable.setStatus('current')
s5EnPortExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 1, 3, 1), ).setIndexNames((0, "S5-ETHERNET-COMMON-MIB", "s5EnPortExtBrdIndx"), (0, "S5-ETHERNET-COMMON-MIB", "s5EnPortExtIndx"))
if mibBuilder.loadTexts: s5EnPortExtEntry.setStatus('current')
s5EnPortExtBrdIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5EnPortExtBrdIndx.setStatus('current')
s5EnPortExtIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5EnPortExtIndx.setStatus('current')
s5EnPortExtHwCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 1, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5EnPortExtHwCapability.setStatus('current')
s5EnPortExtAutoNegAdv = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 1, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s5EnPortExtAutoNegAdv.setStatus('current')
s5EnPortExtAutoNegRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 1, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5EnPortExtAutoNegRcvd.setStatus('current')
s5EnPortExt10MbSegAttCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 1, 3, 1, 6), AttId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s5EnPortExt10MbSegAttCfg.setStatus('current')
s5EnPortExt100MbSegAttCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 1, 3, 1, 7), AttId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s5EnPortExt100MbSegAttCfg.setStatus('current')
s5EnPortExt10MbSegConnCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 1, 3, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5EnPortExt10MbSegConnCapability.setStatus('current')
s5EnPortExt100MbSegConnCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 1, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5EnPortExt100MbSegConnCapability.setStatus('current')
s5EnPortExtActiveSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("bps10M", 2), ("bps100M", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5EnPortExtActiveSpeed.setStatus('current')
s5EnPortExtCurDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("halfDuplex", 2), ("fullDuplex", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5EnPortExtCurDuplexMode.setStatus('current')
s5EnBStatTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 2, 1), )
if mibBuilder.loadTexts: s5EnBStatTable.setStatus('current')
s5EnBStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 2, 1, 1), ).setIndexNames((0, "S5-ETHERNET-COMMON-MIB", "s5EnBStatSrcIndx"))
if mibBuilder.loadTexts: s5EnBStatEntry.setStatus('current')
s5EnBStatSrcIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 2, 1, 1, 1), SrcIndx()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5EnBStatSrcIndx.setStatus('current')
s5EnBStatGoodOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5EnBStatGoodOctets.setStatus('current')
s5EnBStatGoodFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5EnBStatGoodFrms.setStatus('current')
s5EnBStatBcastFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5EnBStatBcastFrms.setStatus('current')
s5EnBStatMcastFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5EnBStatMcastFrms.setStatus('current')
s5EnBStatAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5EnBStatAlignErrors.setStatus('current')
s5EnBStatFcsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5EnBStatFcsErrors.setStatus('current')
s5EnBStatRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5EnBStatRunts.setStatus('current')
s5EnBStatTooLongFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5EnBStatTooLongFrms.setStatus('current')
s5EnBStatFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5EnBStatFragments.setStatus('current')
s5EnBStatVeryLongEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5EnBStatVeryLongEvents.setStatus('current')
s5EnBStatColls = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5EnBStatColls.setStatus('current')
s5EnBStatLateColls = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5EnBStatLateColls.setStatus('current')
s5EnBStatShortEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5EnBStatShortEvents.setStatus('current')
s5EnBStatRateMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5EnBStatRateMismatches.setStatus('current')
s5EnBStatBackOffFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5EnBStatBackOffFailures.setStatus('current')
s5EnBStatAutoPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5EnBStatAutoPartitions.setStatus('current')
s5EnBStatShortIPGs = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5EnBStatShortIPGs.setStatus('current')
s5EnBStatNullFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5EnBStatNullFrames.setStatus('current')
s5EnPStatTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 2, 2), )
if mibBuilder.loadTexts: s5EnPStatTable.setStatus('current')
s5EnPStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 2, 2, 1), ).setIndexNames((0, "S5-ETHERNET-COMMON-MIB", "s5EnPStatSrcIndx"))
if mibBuilder.loadTexts: s5EnPStatEntry.setStatus('current')
s5EnPStatSrcIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 2, 2, 1, 1), SrcIndx()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5EnPStatSrcIndx.setStatus('current')
s5EnPStatSourceAddrChngs = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5EnPStatSourceAddrChngs.setStatus('current')
s5EnPStatLinkStatusChngs = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5EnPStatLinkStatusChngs.setStatus('current')
s5EnPStatLastSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 2, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5EnPStatLastSourceAddr.setStatus('current')
s5EnSStatTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 2, 3), )
if mibBuilder.loadTexts: s5EnSStatTable.setStatus('current')
s5EnSStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 2, 3, 1), ).setIndexNames((0, "S5-ETHERNET-COMMON-MIB", "s5EnSStatSrcIndx"))
if mibBuilder.loadTexts: s5EnSStatEntry.setStatus('current')
s5EnSStatSrcIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 2, 3, 1, 1), SrcIndx()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5EnSStatSrcIndx.setStatus('current')
s5EnSStatSegColls = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5EnSStatSegColls.setStatus('current')
s5EnSStatSegRate = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("bps10m", 2), ("bps100m", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5EnSStatSegRate.setStatus('current')
mibBuilder.exportSymbols("S5-ETHERNET-COMMON-MIB", s5EnBStatMcastFrms=s5EnBStatMcastFrms, s5EnBStatRunts=s5EnBStatRunts, s5EnPortExt10MbSegAttCfg=s5EnPortExt10MbSegAttCfg, s5EnBStatSrcIndx=s5EnBStatSrcIndx, s5EnBStatLateColls=s5EnBStatLateColls, s5EnBStatShortIPGs=s5EnBStatShortIPGs, s5EnPortExtBrdIndx=s5EnPortExtBrdIndx, s5EthernetCommonMib=s5EthernetCommonMib, s5EnBStatGoodFrms=s5EnBStatGoodFrms, s5EnSStatTable=s5EnSStatTable, s5EnPortExtActiveSpeed=s5EnPortExtActiveSpeed, s5EnPStatLastSourceAddr=s5EnPStatLastSourceAddr, s5EnPortExtEntry=s5EnPortExtEntry, s5EnPortExtAutoNegAdv=s5EnPortExtAutoNegAdv, s5EnPortPartStatus=s5EnPortPartStatus, s5EnBStatBcastFrms=s5EnBStatBcastFrms, s5EnBStatFragments=s5EnBStatFragments, s5EnPortJabberStatus=s5EnPortJabberStatus, s5EnBStatBackOffFailures=s5EnBStatBackOffFailures, s5EnPortExtTable=s5EnPortExtTable, s5EnBStatColls=s5EnBStatColls, s5EnBStatAutoPartitions=s5EnBStatAutoPartitions, s5EnPortExt100MbSegConnCapability=s5EnPortExt100MbSegConnCapability, s5EnSStatSegColls=s5EnSStatSegColls, s5EnPStatSourceAddrChngs=s5EnPStatSourceAddrChngs, s5EnBStatShortEvents=s5EnBStatShortEvents, s5EnPortBrdIndx=s5EnPortBrdIndx, s5EnPortTable=s5EnPortTable, s5EnPortLinkStatus=s5EnPortLinkStatus, s5EnBStatAlignErrors=s5EnBStatAlignErrors, s5EnBStatTooLongFrms=s5EnBStatTooLongFrms, s5EnPStatEntry=s5EnPStatEntry, s5EnBStatFcsErrors=s5EnBStatFcsErrors, s5EnPortIndx=s5EnPortIndx, s5EnPortExt10MbSegConnCapability=s5EnPortExt10MbSegConnCapability, s5EnBStatRateMismatches=s5EnBStatRateMismatches, s5EnSStatSrcIndx=s5EnSStatSrcIndx, s5EnBStatGoodOctets=s5EnBStatGoodOctets, s5EnPortExtHwCapability=s5EnPortExtHwCapability, s5EnPortPartTime=s5EnPortPartTime, s5EnPStatSrcIndx=s5EnPStatSrcIndx, s5EnPortExt100MbSegAttCfg=s5EnPortExt100MbSegAttCfg, s5EnBStatTable=s5EnBStatTable, s5EnPortEntry=s5EnPortEntry, s5EnBStatVeryLongEvents=s5EnBStatVeryLongEvents, s5EnPStatTable=s5EnPStatTable, s5EnSStatEntry=s5EnSStatEntry, s5EnPStatLinkStatusChngs=s5EnPStatLinkStatusChngs, PYSNMP_MODULE_ID=s5EthernetCommonMib, s5EnPortExtCurDuplexMode=s5EnPortExtCurDuplexMode, s5EnSStatSegRate=s5EnSStatSegRate, s5EnPortExtIndx=s5EnPortExtIndx, s5EnBStatNullFrames=s5EnBStatNullFrames, s5EnBStatEntry=s5EnBStatEntry, s5EnPortExtAutoNegRcvd=s5EnPortExtAutoNegRcvd)
