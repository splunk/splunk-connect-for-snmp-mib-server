#
# PySNMP MIB module INXNTS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INXNTS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:44:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Unsigned32, ModuleIdentity, MibIdentifier, Bits, Counter64, TimeTicks, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Gauge32, Counter32, Integer32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Unsigned32", "ModuleIdentity", "MibIdentifier", "Bits", "Counter64", "TimeTicks", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Gauge32", "Counter32", "Integer32", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
internet = MibIdentifier((1, 3, 6, 1))
experimental = MibIdentifier((1, 3, 6, 1, 3))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
dot3 = MibIdentifier((1, 3, 6, 1, 3, 3))
interlan = MibIdentifier((1, 3, 6, 1, 4, 1, 28))
riTelnet = MibIdentifier((1, 3, 6, 1, 4, 1, 28, 3))
riTs = MibIdentifier((1, 3, 6, 1, 4, 1, 28, 4))
riBoot = MibIdentifier((1, 3, 6, 1, 4, 1, 28, 16))
riThresh = MibIdentifier((1, 3, 6, 1, 4, 1, 28, 17))
riSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 28, 18))
riTsRates = MibIdentifier((1, 3, 6, 1, 4, 1, 28, 22))
riInternext = MibIdentifier((1, 3, 6, 1, 4, 1, 28, 21))
riProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 28, 1))
riProdNts = MibIdentifier((1, 3, 6, 1, 4, 1, 28, 1, 2))
riProdLdc = MibIdentifier((1, 3, 6, 1, 4, 1, 28, 1, 3))
riLdcNts = MibIdentifier((1, 3, 6, 1, 4, 1, 28, 1, 3, 4))
dot3Table = MibTable((1, 3, 6, 1, 3, 3, 1), )
if mibBuilder.loadTexts: dot3Table.setStatus('mandatory')
dot3Entry = MibTableRow((1, 3, 6, 1, 3, 3, 1, 1), ).setIndexNames((0, "INXNTS-MIB", "dot3Index"))
if mibBuilder.loadTexts: dot3Entry.setStatus('mandatory')
dot3Index = MibTableColumn((1, 3, 6, 1, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3Index.setStatus('mandatory')
dot3InitializeMAC = MibTableColumn((1, 3, 6, 1, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("initialize", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3InitializeMAC.setStatus('mandatory')
dot3MACSubLayerStatus = MibTableColumn((1, 3, 6, 1, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3MACSubLayerStatus.setStatus('mandatory')
dot3MulticastReceiveEnabled = MibTableColumn((1, 3, 6, 1, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3MulticastReceiveEnabled.setStatus('mandatory')
dot3AlignmentErrors = MibTableColumn((1, 3, 6, 1, 3, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3AlignmentErrors.setStatus('mandatory')
dot3FCSErrors = MibTableColumn((1, 3, 6, 1, 3, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3FCSErrors.setStatus('mandatory')
dot3TxTable = MibTable((1, 3, 6, 1, 3, 3, 2), )
if mibBuilder.loadTexts: dot3TxTable.setStatus('mandatory')
dot3TxEntry = MibTableRow((1, 3, 6, 1, 3, 3, 2, 1), ).setIndexNames((0, "INXNTS-MIB", "dot3TxIndex"))
if mibBuilder.loadTexts: dot3TxEntry.setStatus('mandatory')
dot3TxIndex = MibTableColumn((1, 3, 6, 1, 3, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3TxIndex.setStatus('mandatory')
dot3TxSingleCollisionFrames = MibTableColumn((1, 3, 6, 1, 3, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3TxSingleCollisionFrames.setStatus('mandatory')
dot3TxMultipleCollisionFrames = MibTableColumn((1, 3, 6, 1, 3, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3TxMultipleCollisionFrames.setStatus('mandatory')
dot3TxSQETestErrors = MibTableColumn((1, 3, 6, 1, 3, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3TxSQETestErrors.setStatus('mandatory')
dot3XRxTable = MibTable((1, 3, 6, 1, 3, 3, 3), )
if mibBuilder.loadTexts: dot3XRxTable.setStatus('mandatory')
dot3XRxEntry = MibTableRow((1, 3, 6, 1, 3, 3, 3, 1), ).setIndexNames((0, "INXNTS-MIB", "dot3XRxIndex"))
if mibBuilder.loadTexts: dot3XRxEntry.setStatus('mandatory')
dot3XRxIndex = MibTableColumn((1, 3, 6, 1, 3, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3XRxIndex.setStatus('mandatory')
dot3XRxFrameTooLongs = MibTableColumn((1, 3, 6, 1, 3, 3, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3XRxFrameTooLongs.setStatus('mandatory')
dot3XRxInRangeLengthErrors = MibTableColumn((1, 3, 6, 1, 3, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3XRxInRangeLengthErrors.setStatus('mandatory')
dot3XRxOutOfRangeLengthFields = MibTableColumn((1, 3, 6, 1, 3, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3XRxOutOfRangeLengthFields.setStatus('mandatory')
dot3XRxInternalMACReceiveErrors = MibTableColumn((1, 3, 6, 1, 3, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3XRxInternalMACReceiveErrors.setStatus('mandatory')
dot3XRxAutoPartitionStatus = MibTableColumn((1, 3, 6, 1, 3, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("notpartitioned", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3XRxAutoPartitionStatus.setStatus('mandatory')
dot3XRxAutoPartitionLog = MibTableColumn((1, 3, 6, 1, 3, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3XRxAutoPartitionLog.setStatus('mandatory')
dot3XRxLastSourceAddress = MibTableColumn((1, 3, 6, 1, 3, 3, 3, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3XRxLastSourceAddress.setStatus('mandatory')
dot3XRxSourceAddressLog = MibTableColumn((1, 3, 6, 1, 3, 3, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3XRxSourceAddressLog.setStatus('mandatory')
dot3XTxTable = MibTable((1, 3, 6, 1, 3, 3, 4), )
if mibBuilder.loadTexts: dot3XTxTable.setStatus('mandatory')
dot3XTxEntry = MibTableRow((1, 3, 6, 1, 3, 3, 4, 1), ).setIndexNames((0, "INXNTS-MIB", "dot3XTxIndex"))
if mibBuilder.loadTexts: dot3XTxEntry.setStatus('mandatory')
dot3XTxIndex = MibTableColumn((1, 3, 6, 1, 3, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3XTxIndex.setStatus('mandatory')
dot3XTxEnabled = MibTableColumn((1, 3, 6, 1, 3, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3XTxEnabled.setStatus('mandatory')
dot3XTxDeferredTransmissions = MibTableColumn((1, 3, 6, 1, 3, 3, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3XTxDeferredTransmissions.setStatus('mandatory')
dot3XTxLateCollisions = MibTableColumn((1, 3, 6, 1, 3, 3, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3XTxLateCollisions.setStatus('mandatory')
dot3XTxExcessiveCollisions = MibTableColumn((1, 3, 6, 1, 3, 3, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3XTxExcessiveCollisions.setStatus('mandatory')
dot3XTxInternalMACTransmitErrors = MibTableColumn((1, 3, 6, 1, 3, 3, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3XTxInternalMACTransmitErrors.setStatus('mandatory')
dot3XTxCarrierSenseErrors = MibTableColumn((1, 3, 6, 1, 3, 3, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3XTxCarrierSenseErrors.setStatus('mandatory')
dot3XTxExcessiveDeferrals = MibTableColumn((1, 3, 6, 1, 3, 3, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3XTxExcessiveDeferrals.setStatus('mandatory')
dot3XTxTDR = MibTableColumn((1, 3, 6, 1, 3, 3, 4, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3XTxTDR.setStatus('mandatory')
dot3CollTable = MibTable((1, 3, 6, 1, 3, 3, 5), )
if mibBuilder.loadTexts: dot3CollTable.setStatus('mandatory')
dot3CollEntry = MibTableRow((1, 3, 6, 1, 3, 3, 5, 1), ).setIndexNames((0, "INXNTS-MIB", "dot3CollIndex"), (0, "INXNTS-MIB", "dot3CollCount"))
if mibBuilder.loadTexts: dot3CollEntry.setStatus('mandatory')
dot3CollIndex = MibTableColumn((1, 3, 6, 1, 3, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3CollIndex.setStatus('mandatory')
dot3CollCount = MibTableColumn((1, 3, 6, 1, 3, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3CollCount.setStatus('mandatory')
dot3CollFrequency = MibTableColumn((1, 3, 6, 1, 3, 3, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3CollFrequency.setStatus('mandatory')
riNumBoots = MibScalar((1, 3, 6, 1, 4, 1, 28, 16, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riNumBoots.setStatus('mandatory')
riBootServiceOffered = MibScalar((1, 3, 6, 1, 4, 1, 28, 16, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riBootServiceOffered.setStatus('mandatory')
riBootTable = MibTable((1, 3, 6, 1, 4, 1, 28, 16, 3), )
if mibBuilder.loadTexts: riBootTable.setStatus('mandatory')
riBootEntry = MibTableRow((1, 3, 6, 1, 4, 1, 28, 16, 3, 1), ).setIndexNames((0, "INXNTS-MIB", "riBootIndex"))
if mibBuilder.loadTexts: riBootEntry.setStatus('mandatory')
riBootIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 16, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riBootIndex.setStatus('mandatory')
riBootFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 16, 3, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riBootFileName.setStatus('mandatory')
riBootIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 16, 3, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riBootIPAddress.setStatus('mandatory')
riBootVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 16, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riBootVersion.setStatus('mandatory')
riBootGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 16, 3, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riBootGateway.setStatus('mandatory')
riSystemHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 28, 18, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riSystemHardwareRev.setStatus('mandatory')
riSystemFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 28, 18, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riSystemFirmwareRev.setStatus('mandatory')
riSystemSoftwareRev = MibScalar((1, 3, 6, 1, 4, 1, 28, 18, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riSystemSoftwareRev.setStatus('mandatory')
riSystemSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 28, 18, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riSystemSerialNumber.setStatus('mandatory')
riSystemReset = MibScalar((1, 3, 6, 1, 4, 1, 28, 18, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("notreset", 1), ("resetupdate", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riSystemReset.setStatus('mandatory')
riSystemTicksPerSecond = MibScalar((1, 3, 6, 1, 4, 1, 28, 18, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riSystemTicksPerSecond.setStatus('mandatory')
riSystemRateInterval = MibScalar((1, 3, 6, 1, 4, 1, 28, 18, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riSystemRateInterval.setStatus('mandatory')
riSystemNVRamWriteCount = MibScalar((1, 3, 6, 1, 4, 1, 28, 18, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riSystemNVRamWriteCount.setStatus('mandatory')
riTsPortCount = MibScalar((1, 3, 6, 1, 4, 1, 28, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riTsPortCount.setStatus('mandatory')
riTsSignOn = MibScalar((1, 3, 6, 1, 4, 1, 28, 4, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riTsSignOn.setStatus('mandatory')
riTsPrompt = MibScalar((1, 3, 6, 1, 4, 1, 28, 4, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riTsPrompt.setStatus('mandatory')
riTsAdminPW = MibScalar((1, 3, 6, 1, 4, 1, 28, 4, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riTsAdminPW.setStatus('mandatory')
riTsDomainName = MibScalar((1, 3, 6, 1, 4, 1, 28, 4, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riTsDomainName.setStatus('mandatory')
riTsUpTimeNodeName = MibScalar((1, 3, 6, 1, 4, 1, 28, 4, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riTsUpTimeNodeName.setStatus('mandatory')
riTsNumBuffers = MibScalar((1, 3, 6, 1, 4, 1, 28, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riTsNumBuffers.setStatus('mandatory')
riTsReadBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 28, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riTsReadBufferSize.setStatus('mandatory')
riTsWriteBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 28, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(48, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riTsWriteBufferSize.setStatus('mandatory')
riTsTcpWindowSize = MibScalar((1, 3, 6, 1, 4, 1, 28, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riTsTcpWindowSize.setStatus('mandatory')
riTsTcpMaxSeg = MibScalar((1, 3, 6, 1, 4, 1, 28, 4, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riTsTcpMaxSeg.setStatus('mandatory')
riTsBreakChar = MibScalar((1, 3, 6, 1, 4, 1, 28, 4, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riTsBreakChar.setStatus('mandatory')
riTsFarMemoryFree = MibScalar((1, 3, 6, 1, 4, 1, 28, 4, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riTsFarMemoryFree.setStatus('mandatory')
riTsFarMemoryLowest = MibScalar((1, 3, 6, 1, 4, 1, 28, 4, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riTsFarMemoryLowest.setStatus('mandatory')
riTsTcpAckTimer = MibScalar((1, 3, 6, 1, 4, 1, 28, 4, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riTsTcpAckTimer.setStatus('mandatory')
riTsPortTable = MibTable((1, 3, 6, 1, 4, 1, 28, 4, 28), )
if mibBuilder.loadTexts: riTsPortTable.setStatus('mandatory')
riTsPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 28, 4, 28, 1), ).setIndexNames((0, "INXNTS-MIB", "riTsPortIndex"))
if mibBuilder.loadTexts: riTsPortEntry.setStatus('mandatory')
riTsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 4, 28, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: riTsPortIndex.setStatus('mandatory')
riTsPortFirstType = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 4, 28, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 1))).clone(namedValues=NamedValues(("telnet", 4), ("dummy", 5), ("none", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: riTsPortFirstType.setStatus('mandatory')
riTsPortActiveType = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 4, 28, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 1))).clone(namedValues=NamedValues(("telnet", 4), ("dummy", 5), ("none", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: riTsPortActiveType.setStatus('mandatory')
riTsPortNumSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 4, 28, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riTsPortNumSessions.setStatus('mandatory')
riTsPortBaudIn = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 4, 28, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(110, 300, 600, 1200, 2400, 4800, 9600, 19200, 38400))).clone(namedValues=NamedValues(("br-110", 110), ("br-300", 300), ("br-600", 600), ("br-1200", 1200), ("br-2400", 2400), ("br-4800", 4800), ("br-9600", 9600), ("br-19200", 19200), ("br-38400", 38400)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riTsPortBaudIn.setStatus('mandatory')
riTsPortBaudOut = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 4, 28, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(110, 300, 600, 1200, 2400, 4800, 9600, 19200, 38400))).clone(namedValues=NamedValues(("br-110", 110), ("br-300", 300), ("br-600", 600), ("br-1200", 1200), ("br-2400", 2400), ("br-4800", 4800), ("br-9600", 9600), ("br-19200", 19200), ("br-38400", 38400)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riTsPortBaudOut.setStatus('mandatory')
riTsPortParity = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 4, 28, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riTsPortParity.setStatus('mandatory')
riTsPortDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 4, 28, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(7, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riTsPortDataBits.setStatus('mandatory')
riTsPortModemControl = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 4, 28, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("dce", 2), ("dte", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riTsPortModemControl.setStatus('mandatory')
riTsPortFlowControlIn = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 4, 28, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("xonxoff", 2), ("hardware", 3), ("handx", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riTsPortFlowControlIn.setStatus('mandatory')
riTsPortFlowControlOut = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 4, 28, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("xonxoff", 2), ("hardware", 3), ("handx", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riTsPortFlowControlOut.setStatus('mandatory')
riTsPortRing = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 4, 28, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riTsPortRing.setStatus('mandatory')
riTsPortPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 4, 28, 1, 18), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riTsPortPassword.setStatus('mandatory')
riTsPortAbortOut = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 4, 28, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riTsPortAbortOut.setStatus('mandatory')
riTsPortIntProc = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 4, 28, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riTsPortIntProc.setStatus('mandatory')
riTsPortInactiveTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 4, 28, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riTsPortInactiveTimeOut.setStatus('mandatory')
riTsPortInactiveTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 4, 28, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riTsPortInactiveTimer.setStatus('mandatory')
riTsPortMachineInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 4, 28, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riTsPortMachineInterface.setStatus('mandatory')
riTsPortFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 4, 28, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("slave", 1), ("terminal", 2), ("permckt", 3), ("both", 4), ("demandckt", 5), ("queue", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riTsPortFunction.setStatus('mandatory')
riTsPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 4, 28, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("disabled", 1), ("active", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riTsPortState.setStatus('mandatory')
riTsPortOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 4, 28, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riTsPortOctetsIn.setStatus('mandatory')
riTsPortOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 4, 28, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riTsPortOctetsOut.setStatus('mandatory')
riTsPortXONChar = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 4, 28, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riTsPortXONChar.setStatus('mandatory')
riTsPortXOFFChar = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 4, 28, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riTsPortXOFFChar.setStatus('mandatory')
riTsPortMaxSess = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 4, 28, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riTsPortMaxSess.setStatus('mandatory')
riTsPortServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 4, 28, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riTsPortServerPort.setStatus('mandatory')
riTsPortTCPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 4, 28, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rawsocket", 1), ("nvt7bit", 2), ("nvt8bit", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riTsPortTCPMode.setStatus('mandatory')
riTsPortDefXparent = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 4, 28, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riTsPortDefXparent.setStatus('mandatory')
riTsPortDefEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 4, 28, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riTsPortDefEcho.setStatus('mandatory')
riTsDomainServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 4, 29), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riTsDomainServerAddress.setStatus('mandatory')
tnCount = MibScalar((1, 3, 6, 1, 4, 1, 28, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnCount.setStatus('mandatory')
tnTable = MibTable((1, 3, 6, 1, 4, 1, 28, 3, 2), )
if mibBuilder.loadTexts: tnTable.setStatus('mandatory')
tnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 28, 3, 2, 1), ).setIndexNames((0, "INXNTS-MIB", "tnLocalIpAddress"), (0, "INXNTS-MIB", "tnLocalPort"), (0, "INXNTS-MIB", "tnRemoteIpAddress"), (0, "INXNTS-MIB", "tnRemotePort"))
if mibBuilder.loadTexts: tnEntry.setStatus('mandatory')
tnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnPort.setStatus('mandatory')
tnLocalIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 3, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnLocalIpAddress.setStatus('mandatory')
tnRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 3, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnRemoteIpAddress.setStatus('mandatory')
tnLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnLocalPort.setStatus('mandatory')
tnRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnRemotePort.setStatus('mandatory')
tnUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 3, 2, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnUpTime.setStatus('mandatory')
tnOptionsOn = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 3, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnOptionsOn.setStatus('mandatory')
tnState = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("serverActive", 1), ("client", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnState.setStatus('mandatory')
tnUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 3, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnUserId.setStatus('mandatory')
tnOctetsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnOctetsReceived.setStatus('mandatory')
tnOctetsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnOctetsSent.setStatus('mandatory')
tnNextType = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 3, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnNextType.setStatus('mandatory')
tnNextName = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 3, 2, 1, 13), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tnNextName.setStatus('mandatory')
riInxSlot = MibScalar((1, 3, 6, 1, 4, 1, 28, 21, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riInxSlot.setStatus('mandatory')
riInxBus = MibScalar((1, 3, 6, 1, 4, 1, 28, 21, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("bus-a", 2), ("bus-b", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: riInxBus.setStatus('mandatory')
riInxSlotConnectivityType = MibScalar((1, 3, 6, 1, 4, 1, 28, 21, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riInxSlotConnectivityType.setStatus('mandatory')
riInxSlotConnectivityRev = MibScalar((1, 3, 6, 1, 4, 1, 28, 21, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riInxSlotConnectivityRev.setStatus('mandatory')
riInxSlotConnectivitySerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 28, 21, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riInxSlotConnectivitySerialNumber.setStatus('mandatory')
riInxSlotConnectivityState = MibScalar((1, 3, 6, 1, 4, 1, 28, 21, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: riInxSlotConnectivityState.setStatus('mandatory')
riInxSlotConnectivityBus = MibScalar((1, 3, 6, 1, 4, 1, 28, 21, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3))).clone(namedValues=NamedValues(("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: riInxSlotConnectivityBus.setStatus('mandatory')
riInxSlotConnectivityMedia = MibScalar((1, 3, 6, 1, 4, 1, 28, 21, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3))).clone(namedValues=NamedValues(("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: riInxSlotConnectivityMedia.setStatus('mandatory')
riInxChassisType = MibScalar((1, 3, 6, 1, 4, 1, 28, 21, 10), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riInxChassisType.setStatus('mandatory')
riThCount = MibScalar((1, 3, 6, 1, 4, 1, 28, 17, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riThCount.setStatus('mandatory')
riThMaxCount = MibScalar((1, 3, 6, 1, 4, 1, 28, 17, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riThMaxCount.setStatus('mandatory')
riThUniqueIndex = MibScalar((1, 3, 6, 1, 4, 1, 28, 17, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riThUniqueIndex.setStatus('mandatory')
riThInterval = MibScalar((1, 3, 6, 1, 4, 1, 28, 17, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riThInterval.setStatus('mandatory')
riThTable = MibTable((1, 3, 6, 1, 4, 1, 28, 17, 5), )
if mibBuilder.loadTexts: riThTable.setStatus('mandatory')
riThEntry = MibTableRow((1, 3, 6, 1, 4, 1, 28, 17, 5, 1), ).setIndexNames((0, "INXNTS-MIB", "riThIndex"))
if mibBuilder.loadTexts: riThEntry.setStatus('mandatory')
riThIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 17, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riThIndex.setStatus('mandatory')
riThStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 17, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("delete", 1), ("unset", 2), ("armed", 3), ("safety", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riThStatus.setStatus('mandatory')
riThObject = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 17, 5, 1, 3), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riThObject.setStatus('mandatory')
riThThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 17, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riThThreshold.setStatus('mandatory')
riThHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 17, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riThHysteresis.setStatus('mandatory')
riThDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 17, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riThDirection.setStatus('mandatory')
riThTriggeredCount = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 17, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riThTriggeredCount.setStatus('mandatory')
riThCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 17, 5, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riThCommunity.setStatus('mandatory')
riThPhysDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 17, 5, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riThPhysDestination.setStatus('mandatory')
riThIPDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 28, 17, 5, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: riThIPDestination.setStatus('mandatory')
riRateTxSingleCollisionFrames = MibScalar((1, 3, 6, 1, 4, 1, 28, 22, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riRateTxSingleCollisionFrames.setStatus('mandatory')
riRateTxMultipleCollisionFrames = MibScalar((1, 3, 6, 1, 4, 1, 28, 22, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riRateTxMultipleCollisionFrames.setStatus('mandatory')
riRateTxDeferredTransmissions = MibScalar((1, 3, 6, 1, 4, 1, 28, 22, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riRateTxDeferredTransmissions.setStatus('mandatory')
riRateTxLateCollisions = MibScalar((1, 3, 6, 1, 4, 1, 28, 22, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riRateTxLateCollisions.setStatus('mandatory')
riRateTxInternalMACTransmitErrors = MibScalar((1, 3, 6, 1, 4, 1, 28, 22, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riRateTxInternalMACTransmitErrors.setStatus('mandatory')
riRateTxCarrierSenseErrors = MibScalar((1, 3, 6, 1, 4, 1, 28, 22, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riRateTxCarrierSenseErrors.setStatus('mandatory')
riRateTxExcessiveDeferrals = MibScalar((1, 3, 6, 1, 4, 1, 28, 22, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riRateTxExcessiveDeferrals.setStatus('mandatory')
riRateRxInternalMACReceiveErrors = MibScalar((1, 3, 6, 1, 4, 1, 28, 22, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riRateRxInternalMACReceiveErrors.setStatus('mandatory')
riRateRxFCSErrors = MibScalar((1, 3, 6, 1, 4, 1, 28, 22, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riRateRxFCSErrors.setStatus('mandatory')
riRateRxAlignmentErrors = MibScalar((1, 3, 6, 1, 4, 1, 28, 22, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riRateRxAlignmentErrors.setStatus('mandatory')
riRateRxInRangeLengthErrors = MibScalar((1, 3, 6, 1, 4, 1, 28, 22, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riRateRxInRangeLengthErrors.setStatus('mandatory')
riRateRxOutofRangeLengthFields = MibScalar((1, 3, 6, 1, 4, 1, 28, 22, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riRateRxOutofRangeLengthFields.setStatus('mandatory')
riRateRxFrameTooLongs = MibScalar((1, 3, 6, 1, 4, 1, 28, 22, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: riRateRxFrameTooLongs.setStatus('mandatory')
mibBuilder.exportSymbols("INXNTS-MIB", riSystemRateInterval=riSystemRateInterval, riRateTxLateCollisions=riRateTxLateCollisions, riNumBoots=riNumBoots, riTsPortIndex=riTsPortIndex, dot3XRxInternalMACReceiveErrors=dot3XRxInternalMACReceiveErrors, riTsPortFlowControlIn=riTsPortFlowControlIn, riTsDomainServerAddress=riTsDomainServerAddress, dot3FCSErrors=dot3FCSErrors, riBootVersion=riBootVersion, tnNextName=tnNextName, riTsSignOn=riTsSignOn, riTsPortInactiveTimer=riTsPortInactiveTimer, dot3CollFrequency=dot3CollFrequency, riTsFarMemoryFree=riTsFarMemoryFree, dot3XTxCarrierSenseErrors=dot3XTxCarrierSenseErrors, riTsPortModemControl=riTsPortModemControl, dot3XTxTable=dot3XTxTable, dot3XTxExcessiveDeferrals=dot3XTxExcessiveDeferrals, tnEntry=tnEntry, riTsPortDefEcho=riTsPortDefEcho, riSystemTicksPerSecond=riSystemTicksPerSecond, tnOptionsOn=tnOptionsOn, riThIndex=riThIndex, riTsPortActiveType=riTsPortActiveType, riSystem=riSystem, riThInterval=riThInterval, tnOctetsSent=tnOctetsSent, riInxSlotConnectivityRev=riInxSlotConnectivityRev, riRateRxInRangeLengthErrors=riRateRxInRangeLengthErrors, riTsPortNumSessions=riTsPortNumSessions, private=private, dot3XRxFrameTooLongs=dot3XRxFrameTooLongs, riTsTcpWindowSize=riTsTcpWindowSize, riTsPortParity=riTsPortParity, dot3XRxAutoPartitionLog=dot3XRxAutoPartitionLog, dot3CollTable=dot3CollTable, tnLocalIpAddress=tnLocalIpAddress, riRateRxFCSErrors=riRateRxFCSErrors, riThresh=riThresh, riThEntry=riThEntry, riThObject=riThObject, riTsPortDefXparent=riTsPortDefXparent, riInxBus=riInxBus, riLdcNts=riLdcNts, dot3XRxLastSourceAddress=dot3XRxLastSourceAddress, dot3XTxInternalMACTransmitErrors=dot3XTxInternalMACTransmitErrors, dot3XRxAutoPartitionStatus=dot3XRxAutoPartitionStatus, riRateRxFrameTooLongs=riRateRxFrameTooLongs, dot3XTxTDR=dot3XTxTDR, riBootIndex=riBootIndex, riTsPortXONChar=riTsPortXONChar, riInternext=riInternext, riThStatus=riThStatus, riRateTxInternalMACTransmitErrors=riRateTxInternalMACTransmitErrors, tnTable=tnTable, riBootEntry=riBootEntry, riThUniqueIndex=riThUniqueIndex, dot3MulticastReceiveEnabled=dot3MulticastReceiveEnabled, dot3TxSingleCollisionFrames=dot3TxSingleCollisionFrames, riThThreshold=riThThreshold, tnRemotePort=tnRemotePort, riProdLdc=riProdLdc, riBootTable=riBootTable, riSystemNVRamWriteCount=riSystemNVRamWriteCount, riTsDomainName=riTsDomainName, riTsNumBuffers=riTsNumBuffers, riRateRxAlignmentErrors=riRateRxAlignmentErrors, riThHysteresis=riThHysteresis, riThCount=riThCount, enterprises=enterprises, riBoot=riBoot, tnOctetsReceived=tnOctetsReceived, riSystemSerialNumber=riSystemSerialNumber, riTsPortBaudOut=riTsPortBaudOut, riSystemHardwareRev=riSystemHardwareRev, tnRemoteIpAddress=tnRemoteIpAddress, riThPhysDestination=riThPhysDestination, dot3TxIndex=dot3TxIndex, riTsPortEntry=riTsPortEntry, tnUserId=tnUserId, riTsPortOctetsIn=riTsPortOctetsIn, riRateTxDeferredTransmissions=riRateTxDeferredTransmissions, riTsUpTimeNodeName=riTsUpTimeNodeName, dot3Index=dot3Index, riTsTcpMaxSeg=riTsTcpMaxSeg, riTsPortTable=riTsPortTable, riTsPortFunction=riTsPortFunction, experimental=experimental, riThIPDestination=riThIPDestination, riTsPortTCPMode=riTsPortTCPMode, riTs=riTs, riProdNts=riProdNts, dot3XTxDeferredTransmissions=dot3XTxDeferredTransmissions, riThCommunity=riThCommunity, dot3InitializeMAC=dot3InitializeMAC, dot3AlignmentErrors=dot3AlignmentErrors, dot3=dot3, dot3CollCount=dot3CollCount, riTsPortServerPort=riTsPortServerPort, riTsPortInactiveTimeOut=riTsPortInactiveTimeOut, dot3MACSubLayerStatus=dot3MACSubLayerStatus, riRateRxInternalMACReceiveErrors=riRateRxInternalMACReceiveErrors, internet=internet, dot3CollEntry=dot3CollEntry, dot3XRxTable=dot3XRxTable, dot3XRxInRangeLengthErrors=dot3XRxInRangeLengthErrors, riTsWriteBufferSize=riTsWriteBufferSize, riRateTxExcessiveDeferrals=riRateTxExcessiveDeferrals, tnUpTime=tnUpTime, riSystemReset=riSystemReset, dot3Entry=dot3Entry, dot3TxSQETestErrors=dot3TxSQETestErrors, dot3XTxEntry=dot3XTxEntry, riTsPortOctetsOut=riTsPortOctetsOut, riInxChassisType=riInxChassisType, dot3XTxExcessiveCollisions=dot3XTxExcessiveCollisions, riThMaxCount=riThMaxCount, dot3TxTable=dot3TxTable, riBootServiceOffered=riBootServiceOffered, riTsPortState=riTsPortState, riTelnet=riTelnet, tnCount=tnCount, dot3XRxSourceAddressLog=dot3XRxSourceAddressLog, riInxSlotConnectivitySerialNumber=riInxSlotConnectivitySerialNumber, riRateTxCarrierSenseErrors=riRateTxCarrierSenseErrors, tnPort=tnPort, riThTriggeredCount=riThTriggeredCount, riTsPortBaudIn=riTsPortBaudIn, dot3Table=dot3Table, dot3TxEntry=dot3TxEntry, riInxSlot=riInxSlot, riBootFileName=riBootFileName, riSystemSoftwareRev=riSystemSoftwareRev, riTsReadBufferSize=riTsReadBufferSize, riTsPortMaxSess=riTsPortMaxSess, riTsTcpAckTimer=riTsTcpAckTimer, riRateTxMultipleCollisionFrames=riRateTxMultipleCollisionFrames, interlan=interlan, tnState=tnState, dot3XTxLateCollisions=dot3XTxLateCollisions, dot3XTxEnabled=dot3XTxEnabled, riBootGateway=riBootGateway, riTsPortCount=riTsPortCount, dot3XRxIndex=dot3XRxIndex, tnNextType=tnNextType, riTsPortPassword=riTsPortPassword, riInxSlotConnectivityState=riInxSlotConnectivityState, riTsPortRing=riTsPortRing, riBootIPAddress=riBootIPAddress, riRateTxSingleCollisionFrames=riRateTxSingleCollisionFrames, tnLocalPort=tnLocalPort, dot3XTxIndex=dot3XTxIndex, riRateRxOutofRangeLengthFields=riRateRxOutofRangeLengthFields, riInxSlotConnectivityMedia=riInxSlotConnectivityMedia, riTsBreakChar=riTsBreakChar, riThDirection=riThDirection, dot3TxMultipleCollisionFrames=dot3TxMultipleCollisionFrames, riTsPortAbortOut=riTsPortAbortOut, riTsPortFirstType=riTsPortFirstType, riTsRates=riTsRates, riTsPortMachineInterface=riTsPortMachineInterface, riTsPortXOFFChar=riTsPortXOFFChar, riInxSlotConnectivityType=riInxSlotConnectivityType, dot3XRxEntry=dot3XRxEntry, riTsPrompt=riTsPrompt, riTsPortIntProc=riTsPortIntProc, riTsAdminPW=riTsAdminPW, dot3CollIndex=dot3CollIndex, riTsFarMemoryLowest=riTsFarMemoryLowest, dot3XRxOutOfRangeLengthFields=dot3XRxOutOfRangeLengthFields, riTsPortDataBits=riTsPortDataBits, riProducts=riProducts, riTsPortFlowControlOut=riTsPortFlowControlOut, riThTable=riThTable, riInxSlotConnectivityBus=riInxSlotConnectivityBus, riSystemFirmwareRev=riSystemFirmwareRev)
