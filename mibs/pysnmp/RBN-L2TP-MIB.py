#
# PySNMP MIB module RBN-L2TP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RBN-L2TP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:44:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
rbnMgmt, = mibBuilder.importSymbols("RBN-SMI", "rbnMgmt")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
NotificationType, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Integer32, MibIdentifier, Counter32, Gauge32, IpAddress, Bits, ObjectIdentity, Unsigned32, TimeTicks, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Integer32", "MibIdentifier", "Counter32", "Gauge32", "IpAddress", "Bits", "ObjectIdentity", "Unsigned32", "TimeTicks", "ModuleIdentity")
DateAndTime, TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TruthValue", "DisplayString", "TextualConvention")
rbnL2tpMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2352, 2, 28))
rbnL2tpMib.setRevisions(('2009-04-20 00:00', '2005-02-28 00:00', '2004-02-04 00:00', '2003-04-25 00:00',))
if mibBuilder.loadTexts: rbnL2tpMib.setLastUpdated('200904200000Z')
if mibBuilder.loadTexts: rbnL2tpMib.setOrganization('Redback Networks, Inc.')
rbnL2tpMibNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 28, 0))
rbnL2tpMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1))
rbnL2tpMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 28, 2))
class AuthType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("other", 0), ("pap", 1), ("chap", 2), ("chapPap", 3))

class LacLnsType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("other", 1), ("lac", 2), ("lns", 3), ("lacLns", 4))

class TunStateType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("invalid", 0), ("deleted", 1), ("idle", 2), ("created", 3), ("waitAAA", 4), ("waitCtlReply", 5), ("waitCtlConn", 6), ("established", 7), ("waitRouteUp", 8))

class CtlErrType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 255))
    namedValues = NamedValues(("ctlrunt", 0), ("hdr2long", 1), ("dupSCCRQ", 2), ("duppkt", 3), ("droppkt", 4), ("badCmType", 5), ("avp2long", 6), ("avpUnknown", 7), ("typeNot1st", 8), ("mtype000", 9), ("cantUnhide", 10), ("avpLen", 11), ("missAvp", 12), ("invalidAvp", 13), ("avp2big", 14), ("badAvpLen", 15), ("rexmt", 16), ("scksnderr", 17), ("remWndoful", 18), ("maxRexmts", 19), ("sccrqColide", 20), ("badVers", 21), ("noChapRsp", 22), ("authFailed", 23), ("sesExists", 24), ("badcrpsesi", 25), ("cdnBadid", 26), ("iccnBadid", 27), ("dataRunt", 28), ("badSCCRQna", 29), ("badSCCRP", 30), ("dupIcrq", 31), ("badSCCCN", 32), ("badMsgType", 33), ("sccrqSteal", 34), ("remXmtState", 35), ("cdnThrottle", 36), ("none", 255))

class EthEncapType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("other", 0), ("ethPpoe", 1), ("ethMulti", 2), ("ethernet", 3))

class DNISType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("other", 0), ("dnis", 1), ("dnisonly", 2))

rbnL2tpPeerCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1), )
if mibBuilder.loadTexts: rbnL2tpPeerCfgTable.setStatus('current')
rbnL2tpPeerCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1), ).setIndexNames((1, "RBN-L2TP-MIB", "rbnL2tpMibPeerName"))
if mibBuilder.loadTexts: rbnL2tpPeerCfgEntry.setStatus('current')
rbnL2tpMibPeerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)))
if mibBuilder.loadTexts: rbnL2tpMibPeerName.setStatus('current')
rbnL2tpPCfgMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgMedia.setStatus('current')
rbnL2tpPCfgVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCfgVendor.setStatus('current')
rbnL2tpPCfgRev = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCfgRev.setStatus('current')
rbnL2tpPCfgHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCfgHostName.setStatus('current')
rbnL2tpPCfgRadius = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCfgRadius.setStatus('current')
rbnL2tpPCfgRemIPAddType = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCfgRemIPAddType.setStatus('current')
rbnL2tpPCfgRemIPAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 8), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgRemIPAdd.setStatus('current')
rbnL2tpPCfgStatic = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 9), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgStatic.setStatus('current')
rbnL2tpPCfgLocalIPAddType = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 10), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCfgLocalIPAddType.setStatus('current')
rbnL2tpPCfgLocalIPAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 11), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgLocalIPAdd.setStatus('current')
rbnL2tpPCfgMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 12), LacLnsType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgMode.setStatus('current')
rbnL2tpPCfgMaxTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 14), Gauge32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgMaxTunnels.setStatus('current')
rbnL2tpPCfgMaxSesPerTun = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 15), Gauge32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgMaxSesPerTun.setStatus('current')
rbnL2tpPCfgCtlRetranCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCfgCtlRetranCnt.setStatus('current')
rbnL2tpPCfgCtlRetranTO = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgCtlRetranTO.setStatus('current')
rbnL2tpPCfgSessAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 18), AuthType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgSessAuth.setStatus('current')
rbnL2tpPCfgCtlWin = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 19), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgCtlWin.setStatus('current')
rbnL2tpPCfgDNIS = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 20), DNISType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgDNIS.setStatus('current')
rbnL2tpPCfgPoliceRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 21), Unsigned32()).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgPoliceRate.setStatus('current')
rbnL2tpPCfgPoliceBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 22), Unsigned32()).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgPoliceBurst.setStatus('current')
rbnL2tpPCfgLimitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 23), Unsigned32()).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgLimitRate.setStatus('current')
rbnL2tpPCfgLimitBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 24), Unsigned32()).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgLimitBurst.setStatus('current')
rbnL2tpPCfgGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 25), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgGroup.setStatus('current')
rbnL2tpPCfgPref = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 26), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgPref.setStatus('current')
rbnL2tpPCfgPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 27), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgPasswd.setStatus('current')
rbnL2tpPCfgHelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgHelloTimer.setStatus('current')
rbnL2tpPCfgRecQue = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 29), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCfgRecQue.setStatus('current')
rbnL2tpPCfgSessContext = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 30), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgSessContext.setStatus('current')
rbnL2tpPCfgSessService = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 31), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgSessService.setStatus('current')
rbnL2tpPCfgEthEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 32), EthEncapType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgEthEncap.setStatus('current')
rbnL2tpPCfgEthSession = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 33), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnL2tpPCfgEthSession.setStatus('current')
rbnL2tpPCfgTunnelCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCfgTunnelCount.setStatus('current')
rbnL2tpPCfgTunCtlErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCfgTunCtlErrs.setStatus('current')
rbnL2tpPCfgSessionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCfgSessionCount.setStatus('current')
rbnL2tpTunnelCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 2), )
if mibBuilder.loadTexts: rbnL2tpTunnelCfgTable.setStatus('current')
rbnL2tpTunnelCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 2, 1), ).setIndexNames((0, "RBN-L2TP-MIB", "rbnL2tpMibTunnelID"))
if mibBuilder.loadTexts: rbnL2tpTunnelCfgEntry.setStatus('current')
rbnL2tpMibTunnelID = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: rbnL2tpMibTunnelID.setStatus('current')
rbnL2tpTCfgTunnelNm = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCfgTunnelNm.setStatus('current')
rbnL2tpTCfgPeerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCfgPeerName.setStatus('current')
rbnL2tpTCfgTunCtlErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCfgTunCtlErrs.setStatus('current')
rbnL2tpTCfgLastCtlErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 2, 1, 5), CtlErrType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCfgLastCtlErr.setStatus('current')
rbnL2tpTCfgLastCErrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 2, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCfgLastCErrTime.setStatus('current')
rbnL2tpTCfgTunDataErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCfgTunDataErrs.setStatus('current')
rbnL2tpTCfgLastDataErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCfgLastDataErr.setStatus('current')
rbnL2tpTCfgLastDErrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 2, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCfgLastDErrTime.setStatus('current')
rbnL2tpTCfgSessionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCfgSessionCount.setStatus('current')
rbnL2tpTCfgTotActSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCfgTotActSessions.setStatus('current')
rbnL2tpTCfgActSessCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCfgActSessCnt.setStatus('current')
rbnL2tpTCfgTotFailSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCfgTotFailSessions.setStatus('current')
rbnL2tpMibTunnelState = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 2, 1, 14), TunStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpMibTunnelState.setStatus('current')
rbnL2tpTCfgRemoteTunnelID = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 2, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCfgRemoteTunnelID.setStatus('current')
rbnL2tpTCfgTunnelContext = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 2, 1, 16), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCfgTunnelContext.setStatus('current')
rbnL2tpPeerCntTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 4), )
if mibBuilder.loadTexts: rbnL2tpPeerCntTable.setStatus('current')
rbnL2tpPeerCntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 4, 1), ).setIndexNames((1, "RBN-L2TP-MIB", "rbnL2tpMibPeerName"))
if mibBuilder.loadTexts: rbnL2tpPeerCntEntry.setStatus('current')
rbnL2tpPCDataPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 4, 1, 1), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCDataPktSent.setStatus('current')
rbnL2tpPCDataPktRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 4, 1, 2), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCDataPktRx.setStatus('current')
rbnL2tpPCDataByteSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 4, 1, 3), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCDataByteSent.setStatus('current')
rbnL2tpPCDataByteRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 4, 1, 4), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCDataByteRx.setStatus('current')
rbnL2tpPCCtlPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 4, 1, 5), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCCtlPktSent.setStatus('current')
rbnL2tpPCCtlPktRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 4, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCCtlPktRx.setStatus('current')
rbnL2tpPCCtlByteSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 4, 1, 7), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCCtlByteSent.setStatus('current')
rbnL2tpPCCtlByteRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 4, 1, 8), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCCtlByteRx.setStatus('current')
rbnL2tpPCPolicePktDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 4, 1, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCPolicePktDrop.setStatus('current')
rbnL2tpPCRatePktDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 4, 1, 10), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCRatePktDrop.setStatus('current')
rbnL2tpPCTxSCCRQCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCTxSCCRQCnt.setStatus('current')
rbnL2tpPCRxSCCRQCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCRxSCCRQCnt.setStatus('current')
rbnL2tpPCActTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 4, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCActTunnels.setStatus('current')
rbnL2tpPCTunnelCtlErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCTunnelCtlErr.setStatus('current')
rbnL2tpPCSessionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 4, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCSessionCount.setStatus('current')
rbnL2tpPCTunnelDataErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPCTunnelDataErr.setStatus('current')
rbnL2tpTunnelCntTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 5), )
if mibBuilder.loadTexts: rbnL2tpTunnelCntTable.setStatus('current')
rbnL2tpTunnelCntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 5, 1), ).setIndexNames((0, "RBN-L2TP-MIB", "rbnL2tpMibTunnelID"))
if mibBuilder.loadTexts: rbnL2tpTunnelCntEntry.setStatus('current')
rbnL2tpTCDataPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 5, 1, 1), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCDataPktSent.setStatus('current')
rbnL2tpTCDataPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 5, 1, 2), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCDataPktRcvd.setStatus('current')
rbnL2tpTCDataByteSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 5, 1, 3), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCDataByteSent.setStatus('current')
rbnL2tpTCDataByteRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 5, 1, 4), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCDataByteRcvd.setStatus('current')
rbnL2tpTCCntrlPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 5, 1, 5), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCCntrlPktSent.setStatus('current')
rbnL2tpTCCntrlPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 5, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCCntrlPktRcvd.setStatus('current')
rbnL2tpTCCntrlByteSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 5, 1, 7), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCCntrlByteSent.setStatus('current')
rbnL2tpTCCntrlByteRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 5, 1, 8), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCCntrlByteRcvd.setStatus('current')
rbnL2tpTCPolicePktDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 5, 1, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCPolicePktDrop.setStatus('current')
rbnL2tpTCRatePktDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 5, 1, 10), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCRatePktDrop.setStatus('current')
rbnL2tpTCCntrlErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 5, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCCntrlErr.setStatus('current')
rbnL2tpTCLastCtlErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 5, 1, 12), CtlErrType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCLastCtlErr.setStatus('current')
rbnL2tpTCLastCtlErrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 5, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCLastCtlErrTime.setStatus('current')
rbnL2tpTCMaxResendQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 5, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCMaxResendQ.setStatus('current')
rbnL2tpTCMaxUnsentQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 5, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCMaxUnsentQ.setStatus('current')
rbnL2tpTCCurResendQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 5, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCCurResendQ.setStatus('current')
rbnL2tpTCCurUnsentQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 5, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCCurUnsentQ.setStatus('current')
rbnL2tpTCCurWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 5, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpTCCurWindow.setStatus('current')
rbnL2tpSessionCntTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 6), )
if mibBuilder.loadTexts: rbnL2tpSessionCntTable.setStatus('current')
rbnL2tpSessionCntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 6, 1), ).setIndexNames((0, "RBN-L2TP-MIB", "rbnL2tpMibTunnelID"), (0, "RBN-L2TP-MIB", "rbnL2tpMibSessionID"))
if mibBuilder.loadTexts: rbnL2tpSessionCntEntry.setStatus('current')
rbnL2tpMibSessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: rbnL2tpMibSessionID.setStatus('current')
rbnL2tpSCPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpSCPktSent.setStatus('current')
rbnL2tpSCPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpSCPktRcvd.setStatus('current')
rbnL2tpSCByteSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpSCByteSent.setStatus('current')
rbnL2tpSCByteRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpSCByteRcvd.setStatus('current')
rbnL2tpSCMcastPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpSCMcastPktSent.setStatus('current')
rbnL2tpSCMcastPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 6, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpSCMcastPktRcvd.setStatus('current')
rbnL2tpSCMcastByteSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 6, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpSCMcastByteSent.setStatus('current')
rbnL2tpSCMcastByteRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 6, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpSCMcastByteRcvd.setStatus('current')
rbnL2tpPeerTunCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 8), )
if mibBuilder.loadTexts: rbnL2tpPeerTunCfgTable.setStatus('current')
rbnL2tpPeerTunCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 8, 1), ).setIndexNames((0, "RBN-L2TP-MIB", "rbnL2tpMibPeerName"), (0, "RBN-L2TP-MIB", "rbnL2tpMibTunnelID"))
if mibBuilder.loadTexts: rbnL2tpPeerTunCfgEntry.setStatus('current')
rbnL2tpPTCfgTunnelRemoteID = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPTCfgTunnelRemoteID.setStatus('current')
rbnL2tpPTCfgTunnelLocalNm = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 8, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPTCfgTunnelLocalNm.setStatus('current')
rbnL2tpPTCfgTunnelRemoteNm = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 8, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPTCfgTunnelRemoteNm.setStatus('current')
rbnL2tpPTCfgPeerLocalNm = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 8, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPTCfgPeerLocalNm.setStatus('current')
rbnL2tpPTCfgTunnelRemoteIPAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 8, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPTCfgTunnelRemoteIPAddrType.setStatus('current')
rbnL2tpPTCfgTunnelRemoteIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 8, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPTCfgTunnelRemoteIPAddr.setStatus('current')
rbnL2tpPTCfgTunnelState = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 8, 1, 7), TunStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPTCfgTunnelState.setStatus('current')
rbnL2tpPTCfgTunnelContext = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 8, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPTCfgTunnelContext.setStatus('current')
rbnL2tpPTCfgSessionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 8, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPTCfgSessionCount.setStatus('current')
rbnL2tpPTCfgActSessCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 8, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPTCfgActSessCnt.setStatus('current')
rbnL2tpPTCfgTotActSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 8, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPTCfgTotActSessions.setStatus('current')
rbnL2tpPTCfgTotFailSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 8, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnL2tpPTCfgTotFailSessions.setStatus('current')
rbnL2tpMibTrapObj = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 7))
rbnL2tpMibTunnelTrapContext = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 7, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rbnL2tpMibTunnelTrapContext.setStatus('deprecated')
rbnL2tpMibTunnelTrapState = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 7, 2), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rbnL2tpMibTunnelTrapState.setStatus('deprecated')
rbnL2tpMibDisableTrap = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 28, 1, 7, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbnL2tpMibDisableTrap.setStatus('current')
rbnL2tpMibTunnelStateChange = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 28, 0, 1)).setObjects(("RBN-L2TP-MIB", "rbnL2tpMibTunnelTrapContext"), ("RBN-L2TP-MIB", "rbnL2tpMibTunnelTrapState"))
if mibBuilder.loadTexts: rbnL2tpMibTunnelStateChange.setStatus('deprecated')
rbnL2tpMibTunnelStateChange2 = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 28, 0, 2)).setObjects(("RBN-L2TP-MIB", "rbnL2tpTCfgTunnelContext"), ("RBN-L2TP-MIB", "rbnL2tpMibTunnelState"), ("RBN-L2TP-MIB", "rbnL2tpTCfgRemoteTunnelID"))
if mibBuilder.loadTexts: rbnL2tpMibTunnelStateChange2.setStatus('current')
rbnL2tpMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 28, 2, 1))
rbnL2tpMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 28, 2, 2))
rbnL2tpMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 28, 2, 2, 1)).setObjects(("RBN-L2TP-MIB", "rbnL2tpMibPeerCfgGroup"), ("RBN-L2TP-MIB", "rbnL2tpMibTunnelCfgGroup"), ("RBN-L2TP-MIB", "rbnL2tpMibPeerCntGroup"), ("RBN-L2TP-MIB", "rbnL2tpMibTunnelCntGroup"), ("RBN-L2TP-MIB", "rbnL2tpMibSessionCntGroup"), ("RBN-L2TP-MIB", "rbnL2tpMibGroup"), ("RBN-L2TP-MIB", "rbnL2tpMibNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnL2tpMibCompliance = rbnL2tpMibCompliance.setStatus('deprecated')
rbnL2tpMibCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 28, 2, 2, 2)).setObjects(("RBN-L2TP-MIB", "rbnL2tpMibPeerCfgGroup"), ("RBN-L2TP-MIB", "rbnL2tpMibTunnelCfgGroup"), ("RBN-L2TP-MIB", "rbnL2tpMibPeerCntGroup"), ("RBN-L2TP-MIB", "rbnL2tpMibTunnelCntGroup"), ("RBN-L2TP-MIB", "rbnL2tpMibSessionCntGroup"), ("RBN-L2TP-MIB", "rbnL2tpMibGroup2"), ("RBN-L2TP-MIB", "rbnL2tpMibNotificationGroup2"), ("RBN-L2TP-MIB", "rbnL2tpMibPeerTunCfgGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnL2tpMibCompliance2 = rbnL2tpMibCompliance2.setStatus('current')
rbnL2tpMibPeerCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 28, 2, 1, 1)).setObjects(("RBN-L2TP-MIB", "rbnL2tpPCfgMedia"), ("RBN-L2TP-MIB", "rbnL2tpPCfgVendor"), ("RBN-L2TP-MIB", "rbnL2tpPCfgRev"), ("RBN-L2TP-MIB", "rbnL2tpPCfgHostName"), ("RBN-L2TP-MIB", "rbnL2tpPCfgRadius"), ("RBN-L2TP-MIB", "rbnL2tpPCfgRemIPAddType"), ("RBN-L2TP-MIB", "rbnL2tpPCfgRemIPAdd"), ("RBN-L2TP-MIB", "rbnL2tpPCfgStatic"), ("RBN-L2TP-MIB", "rbnL2tpPCfgLocalIPAddType"), ("RBN-L2TP-MIB", "rbnL2tpPCfgLocalIPAdd"), ("RBN-L2TP-MIB", "rbnL2tpPCfgMode"), ("RBN-L2TP-MIB", "rbnL2tpPCfgMaxTunnels"), ("RBN-L2TP-MIB", "rbnL2tpPCfgMaxSesPerTun"), ("RBN-L2TP-MIB", "rbnL2tpPCfgCtlRetranCnt"), ("RBN-L2TP-MIB", "rbnL2tpPCfgCtlRetranTO"), ("RBN-L2TP-MIB", "rbnL2tpPCfgSessAuth"), ("RBN-L2TP-MIB", "rbnL2tpPCfgCtlWin"), ("RBN-L2TP-MIB", "rbnL2tpPCfgDNIS"), ("RBN-L2TP-MIB", "rbnL2tpPCfgPoliceRate"), ("RBN-L2TP-MIB", "rbnL2tpPCfgPoliceBurst"), ("RBN-L2TP-MIB", "rbnL2tpPCfgLimitRate"), ("RBN-L2TP-MIB", "rbnL2tpPCfgLimitBurst"), ("RBN-L2TP-MIB", "rbnL2tpPCfgGroup"), ("RBN-L2TP-MIB", "rbnL2tpPCfgPref"), ("RBN-L2TP-MIB", "rbnL2tpPCfgPasswd"), ("RBN-L2TP-MIB", "rbnL2tpPCfgHelloTimer"), ("RBN-L2TP-MIB", "rbnL2tpPCfgRecQue"), ("RBN-L2TP-MIB", "rbnL2tpPCfgSessContext"), ("RBN-L2TP-MIB", "rbnL2tpPCfgSessService"), ("RBN-L2TP-MIB", "rbnL2tpPCfgEthEncap"), ("RBN-L2TP-MIB", "rbnL2tpPCfgEthSession"), ("RBN-L2TP-MIB", "rbnL2tpPCfgTunnelCount"), ("RBN-L2TP-MIB", "rbnL2tpPCfgTunCtlErrs"), ("RBN-L2TP-MIB", "rbnL2tpPCfgSessionCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnL2tpMibPeerCfgGroup = rbnL2tpMibPeerCfgGroup.setStatus('current')
rbnL2tpMibTunnelCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 28, 2, 1, 2)).setObjects(("RBN-L2TP-MIB", "rbnL2tpTCfgTunnelNm"), ("RBN-L2TP-MIB", "rbnL2tpTCfgPeerName"), ("RBN-L2TP-MIB", "rbnL2tpTCfgTunCtlErrs"), ("RBN-L2TP-MIB", "rbnL2tpTCfgLastCtlErr"), ("RBN-L2TP-MIB", "rbnL2tpTCfgLastCErrTime"), ("RBN-L2TP-MIB", "rbnL2tpTCfgTunDataErrs"), ("RBN-L2TP-MIB", "rbnL2tpTCfgLastDataErr"), ("RBN-L2TP-MIB", "rbnL2tpTCfgLastDErrTime"), ("RBN-L2TP-MIB", "rbnL2tpTCfgSessionCount"), ("RBN-L2TP-MIB", "rbnL2tpTCfgTotActSessions"), ("RBN-L2TP-MIB", "rbnL2tpTCfgActSessCnt"), ("RBN-L2TP-MIB", "rbnL2tpTCfgTotFailSessions"), ("RBN-L2TP-MIB", "rbnL2tpMibTunnelState"), ("RBN-L2TP-MIB", "rbnL2tpTCfgRemoteTunnelID"), ("RBN-L2TP-MIB", "rbnL2tpTCfgTunnelContext"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnL2tpMibTunnelCfgGroup = rbnL2tpMibTunnelCfgGroup.setStatus('current')
rbnL2tpMibPeerCntGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 28, 2, 1, 3)).setObjects(("RBN-L2TP-MIB", "rbnL2tpPCDataPktSent"), ("RBN-L2TP-MIB", "rbnL2tpPCDataPktRx"), ("RBN-L2TP-MIB", "rbnL2tpPCDataByteSent"), ("RBN-L2TP-MIB", "rbnL2tpPCDataByteRx"), ("RBN-L2TP-MIB", "rbnL2tpPCCtlPktSent"), ("RBN-L2TP-MIB", "rbnL2tpPCCtlPktRx"), ("RBN-L2TP-MIB", "rbnL2tpPCCtlByteSent"), ("RBN-L2TP-MIB", "rbnL2tpPCCtlByteRx"), ("RBN-L2TP-MIB", "rbnL2tpPCPolicePktDrop"), ("RBN-L2TP-MIB", "rbnL2tpPCRatePktDrop"), ("RBN-L2TP-MIB", "rbnL2tpPCTxSCCRQCnt"), ("RBN-L2TP-MIB", "rbnL2tpPCRxSCCRQCnt"), ("RBN-L2TP-MIB", "rbnL2tpPCActTunnels"), ("RBN-L2TP-MIB", "rbnL2tpPCTunnelCtlErr"), ("RBN-L2TP-MIB", "rbnL2tpPCSessionCount"), ("RBN-L2TP-MIB", "rbnL2tpPCTunnelDataErr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnL2tpMibPeerCntGroup = rbnL2tpMibPeerCntGroup.setStatus('current')
rbnL2tpMibTunnelCntGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 28, 2, 1, 4)).setObjects(("RBN-L2TP-MIB", "rbnL2tpTCDataPktSent"), ("RBN-L2TP-MIB", "rbnL2tpTCDataPktRcvd"), ("RBN-L2TP-MIB", "rbnL2tpTCDataByteSent"), ("RBN-L2TP-MIB", "rbnL2tpTCDataByteRcvd"), ("RBN-L2TP-MIB", "rbnL2tpTCCntrlPktSent"), ("RBN-L2TP-MIB", "rbnL2tpTCCntrlPktRcvd"), ("RBN-L2TP-MIB", "rbnL2tpTCCntrlByteSent"), ("RBN-L2TP-MIB", "rbnL2tpTCCntrlByteRcvd"), ("RBN-L2TP-MIB", "rbnL2tpTCPolicePktDrop"), ("RBN-L2TP-MIB", "rbnL2tpTCRatePktDrop"), ("RBN-L2TP-MIB", "rbnL2tpTCCntrlErr"), ("RBN-L2TP-MIB", "rbnL2tpTCLastCtlErr"), ("RBN-L2TP-MIB", "rbnL2tpTCLastCtlErrTime"), ("RBN-L2TP-MIB", "rbnL2tpTCMaxResendQ"), ("RBN-L2TP-MIB", "rbnL2tpTCMaxUnsentQ"), ("RBN-L2TP-MIB", "rbnL2tpTCCurResendQ"), ("RBN-L2TP-MIB", "rbnL2tpTCCurUnsentQ"), ("RBN-L2TP-MIB", "rbnL2tpTCCurWindow"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnL2tpMibTunnelCntGroup = rbnL2tpMibTunnelCntGroup.setStatus('current')
rbnL2tpMibSessionCntGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 28, 2, 1, 5)).setObjects(("RBN-L2TP-MIB", "rbnL2tpSCPktSent"), ("RBN-L2TP-MIB", "rbnL2tpSCPktRcvd"), ("RBN-L2TP-MIB", "rbnL2tpSCByteSent"), ("RBN-L2TP-MIB", "rbnL2tpSCByteRcvd"), ("RBN-L2TP-MIB", "rbnL2tpSCMcastPktSent"), ("RBN-L2TP-MIB", "rbnL2tpSCMcastPktRcvd"), ("RBN-L2TP-MIB", "rbnL2tpSCMcastByteSent"), ("RBN-L2TP-MIB", "rbnL2tpSCMcastByteRcvd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnL2tpMibSessionCntGroup = rbnL2tpMibSessionCntGroup.setStatus('current')
rbnL2tpMibGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 28, 2, 1, 7)).setObjects(("RBN-L2TP-MIB", "rbnL2tpMibTunnelTrapContext"), ("RBN-L2TP-MIB", "rbnL2tpMibTunnelTrapState"), ("RBN-L2TP-MIB", "rbnL2tpMibDisableTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnL2tpMibGroup = rbnL2tpMibGroup.setStatus('deprecated')
rbnL2tpMibNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2352, 2, 28, 2, 1, 8)).setObjects(("RBN-L2TP-MIB", "rbnL2tpMibTunnelStateChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnL2tpMibNotificationGroup = rbnL2tpMibNotificationGroup.setStatus('deprecated')
rbnL2tpMibGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 28, 2, 1, 9)).setObjects(("RBN-L2TP-MIB", "rbnL2tpMibDisableTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnL2tpMibGroup2 = rbnL2tpMibGroup2.setStatus('current')
rbnL2tpMibNotificationGroup2 = NotificationGroup((1, 3, 6, 1, 4, 1, 2352, 2, 28, 2, 1, 10)).setObjects(("RBN-L2TP-MIB", "rbnL2tpMibTunnelStateChange2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnL2tpMibNotificationGroup2 = rbnL2tpMibNotificationGroup2.setStatus('current')
rbnL2tpMibPeerTunCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 28, 2, 1, 11)).setObjects(("RBN-L2TP-MIB", "rbnL2tpPTCfgTunnelRemoteID"), ("RBN-L2TP-MIB", "rbnL2tpPTCfgTunnelLocalNm"), ("RBN-L2TP-MIB", "rbnL2tpPTCfgTunnelRemoteNm"), ("RBN-L2TP-MIB", "rbnL2tpPTCfgPeerLocalNm"), ("RBN-L2TP-MIB", "rbnL2tpPTCfgTunnelRemoteIPAddrType"), ("RBN-L2TP-MIB", "rbnL2tpPTCfgTunnelRemoteIPAddr"), ("RBN-L2TP-MIB", "rbnL2tpPTCfgTunnelState"), ("RBN-L2TP-MIB", "rbnL2tpPTCfgTunnelContext"), ("RBN-L2TP-MIB", "rbnL2tpPTCfgSessionCount"), ("RBN-L2TP-MIB", "rbnL2tpPTCfgTotActSessions"), ("RBN-L2TP-MIB", "rbnL2tpPTCfgActSessCnt"), ("RBN-L2TP-MIB", "rbnL2tpPTCfgTotFailSessions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnL2tpMibPeerTunCfgGroup = rbnL2tpMibPeerTunCfgGroup.setStatus('current')
mibBuilder.exportSymbols("RBN-L2TP-MIB", rbnL2tpSessionCntTable=rbnL2tpSessionCntTable, rbnL2tpTCfgActSessCnt=rbnL2tpTCfgActSessCnt, rbnL2tpPCfgRadius=rbnL2tpPCfgRadius, TunStateType=TunStateType, rbnL2tpPCfgRemIPAdd=rbnL2tpPCfgRemIPAdd, rbnL2tpMibPeerCntGroup=rbnL2tpMibPeerCntGroup, LacLnsType=LacLnsType, rbnL2tpPCfgLocalIPAdd=rbnL2tpPCfgLocalIPAdd, rbnL2tpPCfgEthEncap=rbnL2tpPCfgEthEncap, rbnL2tpPCfgRecQue=rbnL2tpPCfgRecQue, rbnL2tpSCMcastByteRcvd=rbnL2tpSCMcastByteRcvd, rbnL2tpMibPeerTunCfgGroup=rbnL2tpMibPeerTunCfgGroup, rbnL2tpPCTunnelDataErr=rbnL2tpPCTunnelDataErr, rbnL2tpPCfgMaxSesPerTun=rbnL2tpPCfgMaxSesPerTun, rbnL2tpSCByteSent=rbnL2tpSCByteSent, rbnL2tpPCfgCtlWin=rbnL2tpPCfgCtlWin, rbnL2tpTCfgLastDataErr=rbnL2tpTCfgLastDataErr, rbnL2tpPCActTunnels=rbnL2tpPCActTunnels, rbnL2tpMibNotificationGroup2=rbnL2tpMibNotificationGroup2, rbnL2tpPCfgCtlRetranCnt=rbnL2tpPCfgCtlRetranCnt, rbnL2tpTCfgLastDErrTime=rbnL2tpTCfgLastDErrTime, rbnL2tpPCfgHostName=rbnL2tpPCfgHostName, rbnL2tpMibTunnelStateChange2=rbnL2tpMibTunnelStateChange2, rbnL2tpPCfgDNIS=rbnL2tpPCfgDNIS, rbnL2tpMibCompliance=rbnL2tpMibCompliance, rbnL2tpTunnelCfgEntry=rbnL2tpTunnelCfgEntry, rbnL2tpPCPolicePktDrop=rbnL2tpPCPolicePktDrop, rbnL2tpTunnelCntTable=rbnL2tpTunnelCntTable, rbnL2tpPTCfgTunnelLocalNm=rbnL2tpPTCfgTunnelLocalNm, rbnL2tpPCCtlByteSent=rbnL2tpPCCtlByteSent, rbnL2tpTCfgTunDataErrs=rbnL2tpTCfgTunDataErrs, rbnL2tpPCfgPoliceRate=rbnL2tpPCfgPoliceRate, rbnL2tpPCfgRev=rbnL2tpPCfgRev, rbnL2tpSCByteRcvd=rbnL2tpSCByteRcvd, rbnL2tpTCCntrlByteSent=rbnL2tpTCCntrlByteSent, rbnL2tpPCfgGroup=rbnL2tpPCfgGroup, rbnL2tpSCMcastPktRcvd=rbnL2tpSCMcastPktRcvd, rbnL2tpTCDataByteSent=rbnL2tpTCDataByteSent, rbnL2tpTCfgRemoteTunnelID=rbnL2tpTCfgRemoteTunnelID, rbnL2tpTCCurResendQ=rbnL2tpTCCurResendQ, rbnL2tpPCfgSessService=rbnL2tpPCfgSessService, rbnL2tpMibTunnelID=rbnL2tpMibTunnelID, rbnL2tpPCfgPoliceBurst=rbnL2tpPCfgPoliceBurst, rbnL2tpMibTunnelStateChange=rbnL2tpMibTunnelStateChange, rbnL2tpPCfgSessionCount=rbnL2tpPCfgSessionCount, CtlErrType=CtlErrType, rbnL2tpTCLastCtlErr=rbnL2tpTCLastCtlErr, rbnL2tpTCMaxResendQ=rbnL2tpTCMaxResendQ, rbnL2tpSCPktRcvd=rbnL2tpSCPktRcvd, rbnL2tpMibTunnelState=rbnL2tpMibTunnelState, rbnL2tpPCSessionCount=rbnL2tpPCSessionCount, rbnL2tpTCCntrlPktRcvd=rbnL2tpTCCntrlPktRcvd, rbnL2tpPCDataByteSent=rbnL2tpPCDataByteSent, rbnL2tpTCPolicePktDrop=rbnL2tpTCPolicePktDrop, rbnL2tpPCfgMode=rbnL2tpPCfgMode, rbnL2tpPCfgTunnelCount=rbnL2tpPCfgTunnelCount, rbnL2tpMibGroup2=rbnL2tpMibGroup2, rbnL2tpTCfgSessionCount=rbnL2tpTCfgSessionCount, rbnL2tpMibSessionCntGroup=rbnL2tpMibSessionCntGroup, rbnL2tpPCDataByteRx=rbnL2tpPCDataByteRx, rbnL2tpMibGroups=rbnL2tpMibGroups, rbnL2tpMibNotifications=rbnL2tpMibNotifications, EthEncapType=EthEncapType, rbnL2tpPCfgLimitRate=rbnL2tpPCfgLimitRate, rbnL2tpMibTunnelTrapContext=rbnL2tpMibTunnelTrapContext, rbnL2tpMibPeerCfgGroup=rbnL2tpMibPeerCfgGroup, rbnL2tpPCRxSCCRQCnt=rbnL2tpPCRxSCCRQCnt, rbnL2tpPeerTunCfgTable=rbnL2tpPeerTunCfgTable, rbnL2tpTCfgLastCErrTime=rbnL2tpTCfgLastCErrTime, rbnL2tpMibPeerName=rbnL2tpMibPeerName, rbnL2tpPTCfgTotFailSessions=rbnL2tpPTCfgTotFailSessions, rbnL2tpPCCtlPktSent=rbnL2tpPCCtlPktSent, rbnL2tpMibConformance=rbnL2tpMibConformance, rbnL2tpMibTunnelTrapState=rbnL2tpMibTunnelTrapState, rbnL2tpPCfgMedia=rbnL2tpPCfgMedia, rbnL2tpTCfgTunnelNm=rbnL2tpTCfgTunnelNm, rbnL2tpTCCntrlByteRcvd=rbnL2tpTCCntrlByteRcvd, rbnL2tpPCfgTunCtlErrs=rbnL2tpPCfgTunCtlErrs, rbnL2tpPTCfgTotActSessions=rbnL2tpPTCfgTotActSessions, rbnL2tpPCDataPktSent=rbnL2tpPCDataPktSent, rbnL2tpPeerCfgTable=rbnL2tpPeerCfgTable, rbnL2tpMibDisableTrap=rbnL2tpMibDisableTrap, rbnL2tpSessionCntEntry=rbnL2tpSessionCntEntry, rbnL2tpSCMcastByteSent=rbnL2tpSCMcastByteSent, rbnL2tpPTCfgPeerLocalNm=rbnL2tpPTCfgPeerLocalNm, rbnL2tpPCfgSessAuth=rbnL2tpPCfgSessAuth, rbnL2tpPCTxSCCRQCnt=rbnL2tpPCTxSCCRQCnt, PYSNMP_MODULE_ID=rbnL2tpMib, rbnL2tpSCPktSent=rbnL2tpSCPktSent, rbnL2tpPCCtlByteRx=rbnL2tpPCCtlByteRx, rbnL2tpTCfgPeerName=rbnL2tpTCfgPeerName, rbnL2tpPTCfgTunnelRemoteNm=rbnL2tpPTCfgTunnelRemoteNm, rbnL2tpMibObjects=rbnL2tpMibObjects, rbnL2tpPTCfgTunnelState=rbnL2tpPTCfgTunnelState, rbnL2tpPCfgPasswd=rbnL2tpPCfgPasswd, rbnL2tpPCRatePktDrop=rbnL2tpPCRatePktDrop, rbnL2tpPCfgSessContext=rbnL2tpPCfgSessContext, rbnL2tpPeerCntEntry=rbnL2tpPeerCntEntry, rbnL2tpMibTunnelCntGroup=rbnL2tpMibTunnelCntGroup, rbnL2tpMibCompliances=rbnL2tpMibCompliances, rbnL2tpMibSessionID=rbnL2tpMibSessionID, rbnL2tpPCfgRemIPAddType=rbnL2tpPCfgRemIPAddType, rbnL2tpTCfgTotFailSessions=rbnL2tpTCfgTotFailSessions, rbnL2tpPCTunnelCtlErr=rbnL2tpPCTunnelCtlErr, rbnL2tpTCLastCtlErrTime=rbnL2tpTCLastCtlErrTime, rbnL2tpTCCntrlPktSent=rbnL2tpTCCntrlPktSent, rbnL2tpPCfgEthSession=rbnL2tpPCfgEthSession, rbnL2tpTunnelCfgTable=rbnL2tpTunnelCfgTable, rbnL2tpPTCfgTunnelRemoteIPAddr=rbnL2tpPTCfgTunnelRemoteIPAddr, rbnL2tpMibTunnelCfgGroup=rbnL2tpMibTunnelCfgGroup, rbnL2tpMibTrapObj=rbnL2tpMibTrapObj, rbnL2tpMibCompliance2=rbnL2tpMibCompliance2, rbnL2tpPCfgCtlRetranTO=rbnL2tpPCfgCtlRetranTO, rbnL2tpMibNotificationGroup=rbnL2tpMibNotificationGroup, rbnL2tpPCfgLocalIPAddType=rbnL2tpPCfgLocalIPAddType, rbnL2tpPCfgLimitBurst=rbnL2tpPCfgLimitBurst, rbnL2tpPeerCntTable=rbnL2tpPeerCntTable, rbnL2tpTCfgLastCtlErr=rbnL2tpTCfgLastCtlErr, rbnL2tpTCCurWindow=rbnL2tpTCCurWindow, rbnL2tpSCMcastPktSent=rbnL2tpSCMcastPktSent, rbnL2tpPTCfgTunnelRemoteID=rbnL2tpPTCfgTunnelRemoteID, rbnL2tpTCfgTunnelContext=rbnL2tpTCfgTunnelContext, rbnL2tpTCMaxUnsentQ=rbnL2tpTCMaxUnsentQ, rbnL2tpTCDataByteRcvd=rbnL2tpTCDataByteRcvd, rbnL2tpPTCfgTunnelRemoteIPAddrType=rbnL2tpPTCfgTunnelRemoteIPAddrType, rbnL2tpPCfgStatic=rbnL2tpPCfgStatic, rbnL2tpTCCurUnsentQ=rbnL2tpTCCurUnsentQ, rbnL2tpMibGroup=rbnL2tpMibGroup, rbnL2tpPeerCfgEntry=rbnL2tpPeerCfgEntry, rbnL2tpTCfgTotActSessions=rbnL2tpTCfgTotActSessions, rbnL2tpTCDataPktRcvd=rbnL2tpTCDataPktRcvd, rbnL2tpPCfgHelloTimer=rbnL2tpPCfgHelloTimer, rbnL2tpPTCfgSessionCount=rbnL2tpPTCfgSessionCount, rbnL2tpPTCfgActSessCnt=rbnL2tpPTCfgActSessCnt, rbnL2tpPCDataPktRx=rbnL2tpPCDataPktRx, rbnL2tpPCfgPref=rbnL2tpPCfgPref, DNISType=DNISType, rbnL2tpTunnelCntEntry=rbnL2tpTunnelCntEntry, rbnL2tpPTCfgTunnelContext=rbnL2tpPTCfgTunnelContext, rbnL2tpPCfgVendor=rbnL2tpPCfgVendor, rbnL2tpMib=rbnL2tpMib, rbnL2tpTCfgTunCtlErrs=rbnL2tpTCfgTunCtlErrs, rbnL2tpTCRatePktDrop=rbnL2tpTCRatePktDrop, rbnL2tpPCCtlPktRx=rbnL2tpPCCtlPktRx, rbnL2tpTCDataPktSent=rbnL2tpTCDataPktSent, rbnL2tpTCCntrlErr=rbnL2tpTCCntrlErr, rbnL2tpPCfgMaxTunnels=rbnL2tpPCfgMaxTunnels, rbnL2tpPeerTunCfgEntry=rbnL2tpPeerTunCfgEntry, AuthType=AuthType)
