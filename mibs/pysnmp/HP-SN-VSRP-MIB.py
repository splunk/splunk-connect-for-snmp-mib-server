#
# PySNMP MIB module HP-SN-VSRP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-SN-MIBS
# Produced by pysmi-0.3.4 at Mon Apr 29 19:23:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
snVsrp, = mibBuilder.importSymbols("HP-SN-SWITCH-GROUP-MIB", "snVsrp")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Integer32, Counter32, Counter64, iso, Bits, NotificationType, TimeTicks, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ObjectIdentity, MibIdentifier, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Integer32", "Counter32", "Counter64", "iso", "Bits", "NotificationType", "TimeTicks", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ObjectIdentity", "MibIdentifier", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

snVsrpGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 1))
snVsrpIfIntf = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 2))
snVsrpVirRtr = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 3))
snVsrpGroupOperModeVsrp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpGroupOperModeVsrp.setStatus('mandatory')
snVsrpIfStateChangeTrap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpIfStateChangeTrap.setStatus('mandatory')
snVsrpIfMaxNumVridPerIntf = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpIfMaxNumVridPerIntf.setStatus('mandatory')
snVsrpIfMaxNumVridPerSystem = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpIfMaxNumVridPerSystem.setStatus('mandatory')
snVsrpClearVrrpStat = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpClearVrrpStat.setStatus('mandatory')
snVsrpIfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 2, 1), )
if mibBuilder.loadTexts: snVsrpIfTable.setStatus('mandatory')
snVsrpIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 2, 1, 1), ).setIndexNames((0, "HP-SN-VSRP-MIB", "snVsrpIfVlanId"))
if mibBuilder.loadTexts: snVsrpIfEntry.setStatus('mandatory')
snVsrpIfVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpIfVlanId.setStatus('mandatory')
snVsrpIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noAuth", 0), ("simpleTextPasswd", 1), ("ipAuthHeader", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpIfAuthType.setStatus('mandatory')
snVsrpIfAuthPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpIfAuthPassword.setStatus('mandatory')
snVsrpVirRtrTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 3, 1), )
if mibBuilder.loadTexts: snVsrpVirRtrTable.setStatus('mandatory')
snVsrpVirRtrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 3, 1, 1), ).setIndexNames((0, "HP-SN-VSRP-MIB", "snVsrpVirRtrVlanId"), (0, "HP-SN-VSRP-MIB", "snVsrpVirRtrId"))
if mibBuilder.loadTexts: snVsrpVirRtrEntry.setStatus('mandatory')
snVsrpVirRtrVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrVlanId.setStatus('mandatory')
snVsrpVirRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrId.setStatus('mandatory')
snVsrpVirRtrOwnership = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("incomplete", 0), ("owner", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrOwnership.setStatus('mandatory')
snVsrpVirRtrCfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrCfgPriority.setStatus('mandatory')
snVsrpVirRtrTrackPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrTrackPriority.setStatus('mandatory')
snVsrpVirRtrCurrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrCurrPriority.setStatus('mandatory')
snVsrpVirRtrHelloInt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 84)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrHelloInt.setStatus('mandatory')
snVsrpVirRtrDeadInt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 84)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrDeadInt.setStatus('mandatory')
snVsrpVirRtrPreemptMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrPreemptMode.setStatus('mandatory')
snVsrpVirRtrState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("init", 0), ("master", 1), ("backup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrState.setStatus('mandatory')
snVsrpVirRtrIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 3, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrIpAddrMask.setStatus('mandatory')
snVsrpVirRtrActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrActivate.setStatus('mandatory')
snVsrpVirRtrTrackPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 3, 1, 1, 13), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrTrackPortList.setStatus('mandatory')
snVsrpVirRtrAdvertiseBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrAdvertiseBackup.setStatus('mandatory')
snVsrpVirRtrHoldDownInt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 84)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrHoldDownInt.setStatus('mandatory')
snVsrpVirRtrInitTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrInitTtl.setStatus('mandatory')
snVsrpVirRtrIncPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 3, 1, 1, 17), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrIncPortList.setStatus('mandatory')
snVsrpVirRtrSave = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrSave.setStatus('mandatory')
snVsrpVirRtrBackupInt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrBackupInt.setStatus('mandatory')
snVsrpVirRtrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snVsrpVirRtrRowStatus.setStatus('mandatory')
snVsrpVirRtrRxArpPktDropCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 3, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrRxArpPktDropCnts.setStatus('mandatory')
snVsrpVirRtrRxIpPktDropCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 3, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrRxIpPktDropCnts.setStatus('mandatory')
snVsrpVirRtrRxPortMismatchCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 3, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrRxPortMismatchCnts.setStatus('mandatory')
snVsrpVirRtrRxNumOfIpMismatchCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 3, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrRxNumOfIpMismatchCnts.setStatus('mandatory')
snVsrpVirRtrRxIpMismatchCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrRxIpMismatchCnts.setStatus('mandatory')
snVsrpVirRtrRxHelloIntMismatchCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 3, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrRxHelloIntMismatchCnts.setStatus('mandatory')
snVsrpVirRtrRxPriorityZeroFromMasterCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 3, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrRxPriorityZeroFromMasterCnts.setStatus('mandatory')
snVsrpVirRtrRxHigherPriorityCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 3, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrRxHigherPriorityCnts.setStatus('mandatory')
snVsrpVirRtrTransToMasterStateCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 3, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrTransToMasterStateCnts.setStatus('mandatory')
snVsrpVirRtrTransToBackupStateCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 3, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrTransToBackupStateCnts.setStatus('mandatory')
snVsrpVirRtrCurrDeadInt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 3, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrCurrDeadInt.setStatus('mandatory')
snVsrpVirRtrCurHelloInt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 3, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 84))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrCurHelloInt.setStatus('mandatory')
snVsrpVirRtrCurHoldDownInt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 3, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 84))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrCurHoldDownInt.setStatus('mandatory')
snVsrpVirRtrCurInitTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 3, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrCurInitTtl.setStatus('mandatory')
snVsrpVirRtrHelloMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 3, 1, 1, 35), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrHelloMacAddress.setStatus('mandatory')
snVsrpVirRtrMasterIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 21, 3, 1, 1, 36), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVsrpVirRtrMasterIpAddr.setStatus('mandatory')
mibBuilder.exportSymbols("HP-SN-VSRP-MIB", snVsrpVirRtrTable=snVsrpVirRtrTable, snVsrpVirRtrEntry=snVsrpVirRtrEntry, snVsrpIfMaxNumVridPerIntf=snVsrpIfMaxNumVridPerIntf, snVsrpVirRtrVlanId=snVsrpVirRtrVlanId, snVsrpVirRtrCurrPriority=snVsrpVirRtrCurrPriority, snVsrpVirRtrTrackPriority=snVsrpVirRtrTrackPriority, snVsrpVirRtrPreemptMode=snVsrpVirRtrPreemptMode, snVsrpVirRtrId=snVsrpVirRtrId, snVsrpVirRtrBackupInt=snVsrpVirRtrBackupInt, snVsrpVirRtrRxNumOfIpMismatchCnts=snVsrpVirRtrRxNumOfIpMismatchCnts, snVsrpVirRtrRxPriorityZeroFromMasterCnts=snVsrpVirRtrRxPriorityZeroFromMasterCnts, snVsrpVirRtrDeadInt=snVsrpVirRtrDeadInt, snVsrpVirRtrRxHelloIntMismatchCnts=snVsrpVirRtrRxHelloIntMismatchCnts, snVsrpIfAuthPassword=snVsrpIfAuthPassword, snVsrpVirRtrSave=snVsrpVirRtrSave, snVsrpGlobal=snVsrpGlobal, snVsrpVirRtrRxIpPktDropCnts=snVsrpVirRtrRxIpPktDropCnts, snVsrpVirRtrTransToMasterStateCnts=snVsrpVirRtrTransToMasterStateCnts, snVsrpVirRtrTransToBackupStateCnts=snVsrpVirRtrTransToBackupStateCnts, snVsrpVirRtrIncPortList=snVsrpVirRtrIncPortList, snVsrpGroupOperModeVsrp=snVsrpGroupOperModeVsrp, snVsrpVirRtrMasterIpAddr=snVsrpVirRtrMasterIpAddr, snVsrpVirRtrHoldDownInt=snVsrpVirRtrHoldDownInt, snVsrpVirRtrCfgPriority=snVsrpVirRtrCfgPriority, snVsrpVirRtrRxArpPktDropCnts=snVsrpVirRtrRxArpPktDropCnts, snVsrpVirRtrAdvertiseBackup=snVsrpVirRtrAdvertiseBackup, snVsrpIfVlanId=snVsrpIfVlanId, snVsrpVirRtrRxHigherPriorityCnts=snVsrpVirRtrRxHigherPriorityCnts, snVsrpVirRtrHelloInt=snVsrpVirRtrHelloInt, MacAddress=MacAddress, snVsrpVirRtrState=snVsrpVirRtrState, snVsrpIfIntf=snVsrpIfIntf, snVsrpIfStateChangeTrap=snVsrpIfStateChangeTrap, snVsrpVirRtrTrackPortList=snVsrpVirRtrTrackPortList, snVsrpVirRtrCurHelloInt=snVsrpVirRtrCurHelloInt, snVsrpVirRtrInitTtl=snVsrpVirRtrInitTtl, snVsrpVirRtrCurInitTtl=snVsrpVirRtrCurInitTtl, snVsrpVirRtrOwnership=snVsrpVirRtrOwnership, snVsrpVirRtr=snVsrpVirRtr, snVsrpIfAuthType=snVsrpIfAuthType, snVsrpVirRtrRxPortMismatchCnts=snVsrpVirRtrRxPortMismatchCnts, snVsrpIfMaxNumVridPerSystem=snVsrpIfMaxNumVridPerSystem, snVsrpVirRtrCurHoldDownInt=snVsrpVirRtrCurHoldDownInt, snVsrpVirRtrHelloMacAddress=snVsrpVirRtrHelloMacAddress, snVsrpIfEntry=snVsrpIfEntry, snVsrpVirRtrRxIpMismatchCnts=snVsrpVirRtrRxIpMismatchCnts, snVsrpVirRtrCurrDeadInt=snVsrpVirRtrCurrDeadInt, snVsrpVirRtrIpAddrMask=snVsrpVirRtrIpAddrMask, snVsrpClearVrrpStat=snVsrpClearVrrpStat, snVsrpVirRtrActivate=snVsrpVirRtrActivate, snVsrpVirRtrRowStatus=snVsrpVirRtrRowStatus, snVsrpIfTable=snVsrpIfTable)
