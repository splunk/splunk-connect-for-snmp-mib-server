#
# PySNMP MIB module CISCO-CDMA-AHDLC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CDMA-AHDLC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:35:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
EntPhysicalIndexOrZero, = mibBuilder.importSymbols("CISCO-TC", "EntPhysicalIndexOrZero")
ZeroBasedCounter32, = mibBuilder.importSymbols("RMON2-MIB", "ZeroBasedCounter32")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
NotificationType, Counter64, IpAddress, Unsigned32, iso, ObjectIdentity, Counter32, Bits, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Gauge32, Integer32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter64", "IpAddress", "Unsigned32", "iso", "ObjectIdentity", "Counter32", "Bits", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Gauge32", "Integer32", "ModuleIdentity")
TruthValue, DisplayString, TextualConvention, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention", "TimeStamp")
cCdmaAhdlcMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 997))
cCdmaAhdlcMIB.setRevisions(('2005-11-14 00:00', '2002-01-04 00:00',))
if mibBuilder.loadTexts: cCdmaAhdlcMIB.setLastUpdated('200511140000Z')
if mibBuilder.loadTexts: cCdmaAhdlcMIB.setOrganization('Cisco Systems, Inc.')
cCdmaAhdlcMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 997, 1))
cCdmaAhdlcEngineInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1))
cCdmaAhdlcMIBNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 997, 0))
cCdmaAhdlcEngineTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 1), )
if mibBuilder.loadTexts: cCdmaAhdlcEngineTable.setStatus('current')
cCdmaAhdlcEngineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcEngineIndex"))
if mibBuilder.loadTexts: cCdmaAhdlcEngineEntry.setStatus('current')
cCdmaAhdlcEngineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cCdmaAhdlcEngineIndex.setStatus('current')
cCdmaAhdlcEngineName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcEngineName.setStatus('current')
cCdmaAhdlcEngineType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("software", 1), ("hardware", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcEngineType.setStatus('current')
cCdmaAhdlcEngineChannelsInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcEngineChannelsInUse.setStatus('current')
cCdmaAhdlcEngineMaxChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcEngineMaxChannels.setStatus('current')
cCdmaAhdlcEngineConfMaxChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cCdmaAhdlcEngineConfMaxChannels.setStatus('current')
cCdmaAhdlcEngineOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcEngineOperState.setStatus('current')
cCdmaAhdlcEngineAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cCdmaAhdlcEngineAdminState.setStatus('current')
cCdmaAhdlcEngineDownNotifEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 1, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cCdmaAhdlcEngineDownNotifEnabled.setStatus('current')
cCdmaAhdlcPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 1, 1, 10), EntPhysicalIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcPhysicalIndex.setStatus('current')
cCdmaAhdlcPerfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 2), )
if mibBuilder.loadTexts: cCdmaAhdlcPerfTable.setStatus('current')
cCdmaAhdlcPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 2, 1), )
cCdmaAhdlcEngineEntry.registerAugmentions(("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcPerfEntry"))
cCdmaAhdlcPerfEntry.setIndexNames(*cCdmaAhdlcEngineEntry.getIndexNames())
if mibBuilder.loadTexts: cCdmaAhdlcPerfEntry.setStatus('current')
cCdmaAhdlcOutgoingOctetsToEncode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 2, 1, 1), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcOutgoingOctetsToEncode.setStatus('current')
cCdmaAhdlcOutgoingOctetsEncoded = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 2, 1, 2), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcOutgoingOctetsEncoded.setStatus('current')
cCdmaAhdlcOutgoingPktsToEncode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 2, 1, 3), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcOutgoingPktsToEncode.setStatus('current')
cCdmaAhdlcOutgoingPktsEncoded = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 2, 1, 4), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcOutgoingPktsEncoded.setStatus('current')
cCdmaAhdlcIncomingOctetsToDecode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 2, 1, 5), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcIncomingOctetsToDecode.setStatus('current')
cCdmaAhdlcIncomingOctetsDecoded = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 2, 1, 6), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcIncomingOctetsDecoded.setStatus('current')
cCdmaAhdlcIncomingPktsToDecode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 2, 1, 7), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcIncomingPktsToDecode.setStatus('current')
cCdmaAhdlcIncomingPktsDecoded = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 2, 1, 8), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcIncomingPktsDecoded.setStatus('current')
cCdmaAhdlcDropPktsDec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 2, 1, 9), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcDropPktsDec.setStatus('current')
cCdmaAhdlcDropPktsEnc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 2, 1, 10), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcDropPktsEnc.setStatus('current')
cCdmaAhdlcCRCDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 2, 1, 11), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcCRCDropPkts.setStatus('current')
cCdmaAhdlcMemDropPktsDec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 2, 1, 12), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcMemDropPktsDec.setStatus('current')
cCdmaAhdlcMemDropPktsEnc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 2, 1, 13), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcMemDropPktsEnc.setStatus('current')
cCdmaAhdlcOverflowDropPktsDec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 2, 1, 14), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcOverflowDropPktsDec.setStatus('current')
cCdmaAhdlcOverflowDropPktsEnc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 2, 1, 15), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcOverflowDropPktsEnc.setStatus('current')
cCdmaAhdlcInvSizeDropPktsDec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 2, 1, 16), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcInvSizeDropPktsDec.setStatus('current')
cCdmaAhdlcInvSizeDropPktsEnc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 2, 1, 17), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcInvSizeDropPktsEnc.setStatus('current')
cCdmaAhdlcDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 997, 1, 1, 2, 1, 18), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cCdmaAhdlcDiscontinuityTime.setStatus('current')
cCdmaAhdlcEngineDownNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 997, 0, 1)).setObjects(("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcEngineOperState"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcEngineAdminState"))
if mibBuilder.loadTexts: cCdmaAhdlcEngineDownNotif.setStatus('current')
cCdmaAhdlcMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 997, 3))
cCdmaAhdlcMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 997, 3, 1))
cCdmaAhdlcMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 997, 3, 2))
cCdmaAhdlcMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 997, 3, 1, 1)).setObjects(("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcGroup"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaAhdlcMIBCompliance = cCdmaAhdlcMIBCompliance.setStatus('current')
cCdmaAhdlcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 997, 3, 2, 1)).setObjects(("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcEngineName"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcEngineType"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcEngineMaxChannels"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcEngineConfMaxChannels"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcEngineChannelsInUse"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcEngineOperState"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcEngineAdminState"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcEngineDownNotifEnabled"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcPhysicalIndex"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcOutgoingOctetsToEncode"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcOutgoingOctetsEncoded"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcOutgoingPktsToEncode"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcOutgoingPktsEncoded"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcIncomingOctetsToDecode"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcIncomingOctetsDecoded"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcIncomingPktsToDecode"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcIncomingPktsDecoded"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcDropPktsDec"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcDropPktsEnc"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcCRCDropPkts"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcMemDropPktsDec"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcMemDropPktsEnc"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcOverflowDropPktsDec"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcOverflowDropPktsEnc"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcInvSizeDropPktsDec"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcInvSizeDropPktsEnc"), ("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcDiscontinuityTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaAhdlcGroup = cCdmaAhdlcGroup.setStatus('current')
cCdmaAhdlcNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 997, 3, 2, 2)).setObjects(("CISCO-CDMA-AHDLC-MIB", "cCdmaAhdlcEngineDownNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cCdmaAhdlcNotifGroup = cCdmaAhdlcNotifGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-CDMA-AHDLC-MIB", cCdmaAhdlcEngineTable=cCdmaAhdlcEngineTable, cCdmaAhdlcEngineMaxChannels=cCdmaAhdlcEngineMaxChannels, cCdmaAhdlcEngineIndex=cCdmaAhdlcEngineIndex, cCdmaAhdlcOutgoingPktsToEncode=cCdmaAhdlcOutgoingPktsToEncode, cCdmaAhdlcOverflowDropPktsEnc=cCdmaAhdlcOverflowDropPktsEnc, cCdmaAhdlcIncomingPktsToDecode=cCdmaAhdlcIncomingPktsToDecode, cCdmaAhdlcOutgoingOctetsEncoded=cCdmaAhdlcOutgoingOctetsEncoded, cCdmaAhdlcMemDropPktsDec=cCdmaAhdlcMemDropPktsDec, cCdmaAhdlcMIBNotif=cCdmaAhdlcMIBNotif, cCdmaAhdlcEngineConfMaxChannels=cCdmaAhdlcEngineConfMaxChannels, cCdmaAhdlcEngineOperState=cCdmaAhdlcEngineOperState, cCdmaAhdlcMIB=cCdmaAhdlcMIB, cCdmaAhdlcIncomingPktsDecoded=cCdmaAhdlcIncomingPktsDecoded, cCdmaAhdlcDiscontinuityTime=cCdmaAhdlcDiscontinuityTime, cCdmaAhdlcOutgoingOctetsToEncode=cCdmaAhdlcOutgoingOctetsToEncode, cCdmaAhdlcDropPktsDec=cCdmaAhdlcDropPktsDec, cCdmaAhdlcIncomingOctetsDecoded=cCdmaAhdlcIncomingOctetsDecoded, cCdmaAhdlcInvSizeDropPktsEnc=cCdmaAhdlcInvSizeDropPktsEnc, cCdmaAhdlcPerfTable=cCdmaAhdlcPerfTable, cCdmaAhdlcOutgoingPktsEncoded=cCdmaAhdlcOutgoingPktsEncoded, cCdmaAhdlcMIBConformance=cCdmaAhdlcMIBConformance, cCdmaAhdlcEngineDownNotifEnabled=cCdmaAhdlcEngineDownNotifEnabled, cCdmaAhdlcGroup=cCdmaAhdlcGroup, cCdmaAhdlcPerfEntry=cCdmaAhdlcPerfEntry, cCdmaAhdlcEngineDownNotif=cCdmaAhdlcEngineDownNotif, cCdmaAhdlcMIBObjects=cCdmaAhdlcMIBObjects, cCdmaAhdlcInvSizeDropPktsDec=cCdmaAhdlcInvSizeDropPktsDec, cCdmaAhdlcMIBCompliances=cCdmaAhdlcMIBCompliances, cCdmaAhdlcEngineEntry=cCdmaAhdlcEngineEntry, cCdmaAhdlcMIBCompliance=cCdmaAhdlcMIBCompliance, cCdmaAhdlcEngineName=cCdmaAhdlcEngineName, cCdmaAhdlcDropPktsEnc=cCdmaAhdlcDropPktsEnc, cCdmaAhdlcEngineType=cCdmaAhdlcEngineType, cCdmaAhdlcMIBGroups=cCdmaAhdlcMIBGroups, cCdmaAhdlcCRCDropPkts=cCdmaAhdlcCRCDropPkts, cCdmaAhdlcEngineAdminState=cCdmaAhdlcEngineAdminState, cCdmaAhdlcMemDropPktsEnc=cCdmaAhdlcMemDropPktsEnc, cCdmaAhdlcPhysicalIndex=cCdmaAhdlcPhysicalIndex, cCdmaAhdlcOverflowDropPktsDec=cCdmaAhdlcOverflowDropPktsDec, cCdmaAhdlcEngineInfo=cCdmaAhdlcEngineInfo, cCdmaAhdlcIncomingOctetsToDecode=cCdmaAhdlcIncomingOctetsToDecode, cCdmaAhdlcEngineChannelsInUse=cCdmaAhdlcEngineChannelsInUse, cCdmaAhdlcNotifGroup=cCdmaAhdlcNotifGroup, PYSNMP_MODULE_ID=cCdmaAhdlcMIB)
