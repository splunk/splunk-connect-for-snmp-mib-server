#
# PySNMP MIB module ADIC-MANAGEMENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ADIC-MANAGEMENT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 16:58:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
AdicEnable, trapSequenceNumber, trapIntendedUsage, AdicOnlineStatus, AdicInterfaceType, AdicDateAndTime, AdicMibVersion, hardware, trapSeverity, AdicAgentStatus, componentId, RowStatus, AdicDoorStatus, trapSummaryText, AdicComponentType, AdicREDIdentifier = mibBuilder.importSymbols("ADIC-INTELLIGENT-STORAGE-MIB", "AdicEnable", "trapSequenceNumber", "trapIntendedUsage", "AdicOnlineStatus", "AdicInterfaceType", "AdicDateAndTime", "AdicMibVersion", "hardware", "trapSeverity", "AdicAgentStatus", "componentId", "RowStatus", "AdicDoorStatus", "trapSummaryText", "AdicComponentType", "AdicREDIdentifier")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, MibIdentifier, Integer32, Gauge32, NotificationType, ObjectIdentity, IpAddress, Counter32, Counter64, NotificationType, Bits, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "MibIdentifier", "Integer32", "Gauge32", "NotificationType", "ObjectIdentity", "IpAddress", "Counter32", "Counter64", "NotificationType", "Bits", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
management = MibIdentifier((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20))
globalStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 10))
globalEthernetManager = MibIdentifier((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 15))
systemManager = MibIdentifier((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 20))
persistentData = MibIdentifier((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 30))
security = MibIdentifier((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 40))
licensing = MibIdentifier((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 50))
eventManager = MibIdentifier((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 70))
physicalLibrary = MibIdentifier((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80))
logicalLibrary = MibIdentifier((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90))
ras = MibIdentifier((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100))
class Boolean(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("true", 1), ("false", 2))

class AdicEthernetSpeed(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("baseT10", 1), ("baseT100", 2))

class AdicBarCode(DisplayString):
    pass

class AdicSegmentType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("gripper", 1), ("storage", 2), ("ie", 3), ("drive", 4))

class AdicInstallStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("ok", 1), ("inProgress", 2), ("failed", 3), ("updateAborted", 4))

class AdicFcPortType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("auto", 1), ("nPort", 2), ("nlPort", 3))

class AdicFcPortSpeed(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 1000, 2000))
    namedValues = NamedValues(("auto", 1), ("megabits1000", 1000), ("megabits2000", 2000))

class AdicStatusGroup(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 99))
    namedValues = NamedValues(("connectivity", 1), ("control", 2), ("cooling", 3), ("drivesAndMedia", 4), ("power", 5), ("robotics", 6), ("all", 99))

class AdicStatusGroupState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("good", 1), ("failed", 2), ("degraded", 3), ("warning", 4), ("informational", 5), ("unknown", 6), ("invalid", 7))

class AdicRasTicketState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 99))
    namedValues = NamedValues(("new", 1), ("open", 2), ("suspended", 3), ("closed", 4), ("verified", 5), ("all", 99))

class AdicFruSerialNumber(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 40)

class AdicRasTicketSeverity(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("high", 1), ("medium", 2), ("low", 3))

globalStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 10, 10), )
if mibBuilder.loadTexts: globalStatusTable.setStatus('mandatory')
globalStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 10, 10, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"))
if mibBuilder.loadTexts: globalStatusEntry.setStatus('mandatory')
role = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 10, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("master", 1), ("slave", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: role.setStatus('mandatory')
status = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 10, 10, 1, 2), AdicAgentStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: status.setStatus('mandatory')
systemDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 10, 10, 1, 3), AdicDateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemDateAndTime.setStatus('mandatory')
networkTimeServer1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 10, 10, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkTimeServer1.setStatus('mandatory')
networkTimeProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 10, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ntp", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkTimeProtocol.setStatus('mandatory')
networkTimeEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 10, 10, 1, 6), AdicEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkTimeEnable.setStatus('mandatory')
managementMibVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 10, 10, 1, 7), AdicMibVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementMibVersion.setStatus('mandatory')
enableDaylightSavingsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 10, 10, 1, 8), AdicEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableDaylightSavingsTime.setStatus('mandatory')
networkTimeServer2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 10, 10, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkTimeServer2.setStatus('mandatory')
globalEthernetTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 15, 10), )
if mibBuilder.loadTexts: globalEthernetTable.setStatus('mandatory')
globalEthernetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 15, 10, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"))
if mibBuilder.loadTexts: globalEthernetEntry.setStatus('mandatory')
mcbHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 15, 10, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcbHostName.setStatus('mandatory')
ipAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 15, 10, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAddress.setStatus('mandatory')
dhcpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 15, 10, 1, 3), AdicEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpStatus.setStatus('mandatory')
ipAddressSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 15, 10, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAddressSubnetMask.setStatus('mandatory')
speedAutoNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 15, 10, 1, 5), AdicEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: speedAutoNegotiation.setStatus('mandatory')
preferredSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 15, 10, 1, 6), AdicEthernetSpeed()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: preferredSpeed.setStatus('mandatory')
actualSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 15, 10, 1, 7), AdicEthernetSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actualSpeed.setStatus('mandatory')
ethernetDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 15, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("half", 1), ("full", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetDuplex.setStatus('mandatory')
systemManagerTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 20, 10), )
if mibBuilder.loadTexts: systemManagerTable.setStatus('mandatory')
systemManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 20, 10, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-MANAGEMENT-MIB", "softwareComponentIndex"))
if mibBuilder.loadTexts: systemManagerEntry.setStatus('mandatory')
softwareComponentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 20, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareComponentIndex.setStatus('mandatory')
processRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 20, 10, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: processRowStatus.setStatus('mandatory')
processPhysicalMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 20, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processPhysicalMemory.setStatus('mandatory')
processResidentMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 20, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processResidentMemory.setStatus('mandatory')
softwareInstallationTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 20, 20), )
if mibBuilder.loadTexts: softwareInstallationTable.setStatus('mandatory')
softwareInstallationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 20, 20, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"))
if mibBuilder.loadTexts: softwareInstallationEntry.setStatus('mandatory')
installPackageName = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 20, 20, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: installPackageName.setStatus('mandatory')
installProcessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 20, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("inProgress", 2), ("failed", 3), ("updateAborted", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: installProcessStatus.setStatus('mandatory')
installCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 20, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("download", 1), ("install", 2), ("abort", 3), ("timeEstimate", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: installCommand.setStatus('mandatory')
installStatusText = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 20, 20, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: installStatusText.setStatus('mandatory')
currentFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 20, 20, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentFirmwareVersion.setStatus('mandatory')
previousFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 20, 20, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: previousFirmwareVersion.setStatus('mandatory')
downloadedFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 20, 20, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: downloadedFirmwareVersion.setStatus('mandatory')
componentsInBundle = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 20, 20, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentsInBundle.setStatus('mandatory')
mcbInstallStatusText = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 20, 20, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcbInstallStatusText.setStatus('mandatory')
cmbInstallStatusText = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 20, 20, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmbInstallStatusText.setStatus('mandatory')
rcuInstallStatusText = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 20, 20, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcuInstallStatusText.setStatus('mandatory')
fcbInstallStatusText = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 20, 20, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcbInstallStatusText.setStatus('mandatory')
amcInstallStatusText = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 20, 20, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: amcInstallStatusText.setStatus('mandatory')
mcbInstallProcessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 20, 20, 1, 14), AdicInstallStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcbInstallProcessStatus.setStatus('mandatory')
cmbInstallProcessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 20, 20, 1, 15), AdicInstallStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmbInstallProcessStatus.setStatus('mandatory')
rcuInstallProcessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 20, 20, 1, 16), AdicInstallStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcuInstallProcessStatus.setStatus('mandatory')
fcbInstallProcessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 20, 20, 1, 17), AdicInstallStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcbInstallProcessStatus.setStatus('mandatory')
amcInstallProcessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 20, 20, 1, 18), AdicInstallStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amcInstallProcessStatus.setStatus('mandatory')
persistentDataTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 30, 10), )
if mibBuilder.loadTexts: persistentDataTable.setStatus('mandatory')
persistentDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 30, 10, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"))
if mibBuilder.loadTexts: persistentDataEntry.setStatus('mandatory')
capacity = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 30, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: capacity.setStatus('mandatory')
freeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 30, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: freeSpace.setStatus('mandatory')
userTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 40, 20), )
if mibBuilder.loadTexts: userTable.setStatus('obsolete')
userEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 40, 20, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-MANAGEMENT-MIB", "userName"))
if mibBuilder.loadTexts: userEntry.setStatus('obsolete')
userName = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 40, 20, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userName.setStatus('obsolete')
userRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 40, 20, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userRowStatus.setStatus('obsolete')
userGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 40, 20, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userGroup.setStatus('obsolete')
userPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 40, 20, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userPassword.setStatus('obsolete')
userLibAccessList = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 40, 20, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userLibAccessList.setStatus('obsolete')
licenseKeyTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 50, 10), )
if mibBuilder.loadTexts: licenseKeyTable.setStatus('mandatory')
licenseKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 50, 10, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-MANAGEMENT-MIB", "licenseKeyIndex"))
if mibBuilder.loadTexts: licenseKeyEntry.setStatus('mandatory')
licenseKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 50, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseKeyIndex.setStatus('mandatory')
licenseKeyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 50, 10, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: licenseKeyRowStatus.setStatus('mandatory')
key = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 50, 10, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: key.setStatus('mandatory')
licenseKeyDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 50, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permanent", 1), ("transient", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseKeyDuration.setStatus('mandatory')
licenseKeyExpirationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 50, 10, 1, 5), AdicDateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseKeyExpirationDate.setStatus('mandatory')
licenseKeyAppliedDate = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 50, 10, 1, 6), AdicDateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseKeyAppliedDate.setStatus('mandatory')
licenseFeatureTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 50, 20), )
if mibBuilder.loadTexts: licenseFeatureTable.setStatus('mandatory')
licenseFeatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 50, 20, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-MANAGEMENT-MIB", "licenseKeyIndex"), (0, "ADIC-MANAGEMENT-MIB", "licenseFeatureIndex"))
if mibBuilder.loadTexts: licenseFeatureEntry.setStatus('mandatory')
licenseFeatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 50, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseFeatureIndex.setStatus('mandatory')
featureName = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 50, 20, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: featureName.setStatus('mandatory')
licenseFeatureQuantity = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 50, 20, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseFeatureQuantity.setStatus('mandatory')
licensableFeatureTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 50, 30), )
if mibBuilder.loadTexts: licensableFeatureTable.setStatus('mandatory')
licensableFeatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 50, 30, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-MANAGEMENT-MIB", "licenseFeatureIndex"))
if mibBuilder.loadTexts: licensableFeatureEntry.setStatus('mandatory')
licensableFeatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 50, 30, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensableFeatureName.setStatus('mandatory')
totalQuantityLicensed = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 50, 30, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalQuantityLicensed.setStatus('mandatory')
registrationTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 70, 10), )
if mibBuilder.loadTexts: registrationTable.setStatus('mandatory')
registrationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 70, 10, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-MANAGEMENT-MIB", "hostIpAddress"), (0, "ADIC-MANAGEMENT-MIB", "udpPort"))
if mibBuilder.loadTexts: registrationEntry.setStatus('mandatory')
hostIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 70, 10, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostIpAddress.setStatus('mandatory')
udpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 70, 10, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: udpPort.setStatus('mandatory')
registrationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 70, 10, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: registrationRowStatus.setStatus('mandatory')
logTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 70, 20), )
if mibBuilder.loadTexts: logTable.setStatus('optional')
logEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 70, 20, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-MANAGEMENT-MIB", "logName"))
if mibBuilder.loadTexts: logEntry.setStatus('optional')
logName = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 70, 20, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logName.setStatus('optional')
logSnapshotTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 70, 30), )
if mibBuilder.loadTexts: logSnapshotTable.setStatus('optional')
logSnapshotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 70, 30, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"))
if mibBuilder.loadTexts: logSnapshotEntry.setStatus('optional')
logSnapshotCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 70, 30, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("retrieveLogs", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logSnapshotCommand.setStatus('optional')
phGeneralInfoTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 10), )
if mibBuilder.loadTexts: phGeneralInfoTable.setStatus('mandatory')
phGeneralInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 10, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"))
if mibBuilder.loadTexts: phGeneralInfoEntry.setStatus('mandatory')
numElementDomains = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numElementDomains.setStatus('mandatory')
numPhSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numPhSlots.setStatus('mandatory')
numPhIESlots = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numPhIESlots.setStatus('mandatory')
numPhDrives = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numPhDrives.setStatus('mandatory')
onlineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 10, 1, 5), AdicOnlineStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onlineStatus.setStatus('mandatory')
readiness = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("notReady", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: readiness.setStatus('mandatory')
autoInventoryMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 10, 1, 7), AdicEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoInventoryMode.setStatus('mandatory')
autoCalibrateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 10, 1, 8), AdicEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoCalibrateMode.setStatus('mandatory')
autoConfigureMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 10, 1, 9), AdicEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoConfigureMode.setStatus('mandatory')
numPhAisles = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 10, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numPhAisles.setStatus('mandatory')
operatingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("delay", 2), ("unload", 3), ("delayAndUnload", 4), ("noUnload", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: operatingMode.setStatus('mandatory')
numStorageCartridges = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 10, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numStorageCartridges.setStatus('mandatory')
numCleaningCartridges = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 10, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numCleaningCartridges.setStatus('mandatory')
physLibraryManagerLun = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 10, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physLibraryManagerLun.setStatus('mandatory')
physLibraryAutoCleaning = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 10, 1, 15), AdicEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physLibraryAutoCleaning.setStatus('mandatory')
physLibraryDoorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 10, 1, 16), AdicDoorStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physLibraryDoorStatus.setStatus('mandatory')
numPhFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 10, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numPhFrames.setStatus('mandatory')
totalRawCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 10, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalRawCapacity.setStatus('mandatory')
totalFreeCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 10, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalFreeCapacity.setStatus('mandatory')
totalUsedCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 10, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalUsedCapacity.setStatus('mandatory')
logicalSNAdressingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 10, 1, 21), AdicEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logicalSNAdressingMode.setStatus('mandatory')
mediaDomainTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 20), )
if mibBuilder.loadTexts: mediaDomainTable.setStatus('mandatory')
mediaDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 20, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-MANAGEMENT-MIB", "mediaDomainIndex"))
if mibBuilder.loadTexts: mediaDomainEntry.setStatus('mandatory')
mediaDomainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaDomainIndex.setStatus('mandatory')
mediaDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 20, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaDomainName.setStatus('mandatory')
numStorageElements = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 20, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numStorageElements.setStatus('mandatory')
numIeElements = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 20, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numIeElements.setStatus('mandatory')
numCleaningSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 20, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: numCleaningSlots.setStatus('mandatory')
mediaTypeTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 30), )
if mibBuilder.loadTexts: mediaTypeTable.setStatus('mandatory')
mediaTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 30, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-MANAGEMENT-MIB", "mediaDomainIndex"), (0, "ADIC-MANAGEMENT-MIB", "mediaTypeIndex"))
if mibBuilder.loadTexts: mediaTypeEntry.setStatus('mandatory')
mediaTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 30, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaTypeIndex.setStatus('mandatory')
mediaTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 30, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaTypeName.setStatus('mandatory')
numDriveElements = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 30, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numDriveElements.setStatus('mandatory')
phFrameTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 41), )
if mibBuilder.loadTexts: phFrameTable.setStatus('optional')
phFrameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 41, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentAisle"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentFrame"))
if mibBuilder.loadTexts: phFrameEntry.setStatus('optional')
phFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 41, 1, 1), AdicComponentType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phFrameType.setStatus('optional')
phFrameSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 41, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phFrameSerialNumber.setStatus('optional')
phFrameNumRacks = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 41, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phFrameNumRacks.setStatus('optional')
phSegmentTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 55), )
if mibBuilder.loadTexts: phSegmentTable.setStatus('mandatory')
phSegmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 55, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentType"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentAisle"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentFrame"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentRack"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentSection"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentCol"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentStartingRow"))
if mibBuilder.loadTexts: phSegmentEntry.setStatus('mandatory')
phSegmentAisle = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 55, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phSegmentAisle.setStatus('mandatory')
phSegmentFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 55, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phSegmentFrame.setStatus('mandatory')
phSegmentRack = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 55, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phSegmentRack.setStatus('mandatory')
phSegmentSection = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 55, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phSegmentSection.setStatus('mandatory')
phSegmentCol = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 55, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phSegmentCol.setStatus('mandatory')
phSegmentStartingRow = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 55, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phSegmentStartingRow.setStatus('mandatory')
phSegmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 55, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phSegmentSize.setStatus('mandatory')
phSegmentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 55, 1, 8), AdicSegmentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phSegmentType.setStatus('mandatory')
phSegmentMediaDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 55, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phSegmentMediaDomain.setStatus('mandatory')
phSegmentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 55, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("installed", 1), ("notInstalled", 2), ("reservedForCleaning", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phSegmentStatus.setStatus('mandatory')
phSegmentCodStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 55, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("noCod", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phSegmentCodStatus.setStatus('mandatory')
phSegStartingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 55, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phSegStartingAddress.setStatus('mandatory')
phStorageSegTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 60), )
if mibBuilder.loadTexts: phStorageSegTable.setStatus('mandatory')
phStorageSegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 60, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-MANAGEMENT-MIB", "mediaDomainIndex"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentAisle"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentFrame"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentRack"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentSection"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentCol"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentStartingRow"))
if mibBuilder.loadTexts: phStorageSegEntry.setStatus('mandatory')
phStorageSegSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 60, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phStorageSegSize.setStatus('mandatory')
phIeSegTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 70), )
if mibBuilder.loadTexts: phIeSegTable.setStatus('optional')
phIeSegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 70, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-MANAGEMENT-MIB", "mediaDomainIndex"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentAisle"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentFrame"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentRack"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentSection"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentCol"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentStartingRow"))
if mibBuilder.loadTexts: phIeSegEntry.setStatus('optional')
phIeSegSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 70, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phIeSegSize.setStatus('optional')
phIeSegReserve = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 70, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reserve", 1), ("release", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phIeSegReserve.setStatus('optional')
phIeSegReservedBy = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 70, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phIeSegReservedBy.setStatus('optional')
phIeSegOnlineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 70, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phIeSegOnlineStatus.setStatus('optional')
phIeSegCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 70, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("import", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phIeSegCommand.setStatus('optional')
phIeStationTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 75), )
if mibBuilder.loadTexts: phIeStationTable.setStatus('mandatory')
phIeStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 75, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentAisle"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentFrame"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentRack"), (0, "ADIC-MANAGEMENT-MIB", "phIeStationNumber"))
if mibBuilder.loadTexts: phIeStationEntry.setStatus('mandatory')
phIeStationNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 75, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phIeStationNumber.setStatus('mandatory')
phIeStationDoorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 75, 1, 2), AdicDoorStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phIeStationDoorStatus.setStatus('mandatory')
phIeStationREDId = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 75, 1, 3), AdicREDIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phIeStationREDId.setStatus('mandatory')
phDriveSegTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 80), )
if mibBuilder.loadTexts: phDriveSegTable.setStatus('mandatory')
phDriveSegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 80, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-MANAGEMENT-MIB", "mediaDomainIndex"), (0, "ADIC-MANAGEMENT-MIB", "mediaTypeIndex"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentAisle"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentFrame"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentRack"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentSection"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentCol"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentStartingRow"))
if mibBuilder.loadTexts: phDriveSegEntry.setStatus('mandatory')
phDriveSegSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 80, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phDriveSegSize.setStatus('mandatory')
phDriveSegMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 80, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phDriveSegMediaType.setStatus('mandatory')
phDriveSegInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 80, 1, 3), AdicInterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phDriveSegInterfaceType.setStatus('mandatory')
phCleaningSegTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 85), )
if mibBuilder.loadTexts: phCleaningSegTable.setStatus('optional')
phCleaningSegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 85, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-MANAGEMENT-MIB", "mediaDomainIndex"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentAisle"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentFrame"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentRack"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentSection"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentCol"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentStartingRow"))
if mibBuilder.loadTexts: phCleaningSegEntry.setStatus('optional')
phCleaningSegSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 85, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phCleaningSegSize.setStatus('optional')
phCleaningSegRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 85, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phCleaningSegRowStatus.setStatus('optional')
phStorageSlotTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 90), )
if mibBuilder.loadTexts: phStorageSlotTable.setStatus('optional')
phStorageSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 90, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-MANAGEMENT-MIB", "mediaDomainIndex"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentAisle"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentFrame"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentRack"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentSection"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentCol"), (0, "ADIC-MANAGEMENT-MIB", "phStorageRow"))
if mibBuilder.loadTexts: phStorageSlotEntry.setStatus('optional')
phStorageRow = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 90, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phStorageRow.setStatus('optional')
phStorageElementAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 90, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phStorageElementAddr.setStatus('optional')
phIeSlotTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 100), )
if mibBuilder.loadTexts: phIeSlotTable.setStatus('optional')
phIeSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 100, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-MANAGEMENT-MIB", "mediaDomainIndex"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentAisle"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentFrame"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentRack"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentSection"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentCol"), (0, "ADIC-MANAGEMENT-MIB", "phIeRow"))
if mibBuilder.loadTexts: phIeSlotEntry.setStatus('optional')
phIeRow = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 100, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phIeRow.setStatus('optional')
phIeElementAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 100, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phIeElementAddr.setStatus('optional')
phIeMediaPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 100, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phIeMediaPresent.setStatus('optional')
phIeMediaId = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 100, 1, 4), AdicBarCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phIeMediaId.setStatus('optional')
phDriveTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 110), )
if mibBuilder.loadTexts: phDriveTable.setStatus('mandatory')
phDriveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 110, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-MANAGEMENT-MIB", "mediaDomainIndex"), (0, "ADIC-MANAGEMENT-MIB", "mediaTypeIndex"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentAisle"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentFrame"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentRack"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentSection"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentCol"), (0, "ADIC-MANAGEMENT-MIB", "phDriveRow"))
if mibBuilder.loadTexts: phDriveEntry.setStatus('mandatory')
phDriveRow = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 110, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phDriveRow.setStatus('mandatory')
phDriveElementAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 110, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phDriveElementAddr.setStatus('mandatory')
phDriveScsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 110, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phDriveScsiId.setStatus('mandatory')
phDriveScsiLun = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 110, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phDriveScsiLun.setStatus('mandatory')
phDriveWwn = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 110, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phDriveWwn.setStatus('mandatory')
phDriveVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 110, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phDriveVendor.setStatus('mandatory')
phDriveProduct = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 110, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phDriveProduct.setStatus('mandatory')
phDriveSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 110, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phDriveSerialNumber.setStatus('mandatory')
phDriveNeedsCleaning = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 110, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("immediate", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phDriveNeedsCleaning.setStatus('mandatory')
phDriveAutoCleaning = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 110, 1, 10), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phDriveAutoCleaning.setStatus('mandatory')
phDriveInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 110, 1, 11), AdicInterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phDriveInterfaceType.setStatus('mandatory')
phDriveFcLoopId = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 110, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phDriveFcLoopId.setStatus('mandatory')
phDriveFcLoopIdMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 110, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("soft", 1), ("hard", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phDriveFcLoopIdMode.setStatus('mandatory')
phDriveFcHardId = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 110, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phDriveFcHardId.setStatus('mandatory')
phDriveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 110, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("loading", 1), ("loaded", 2), ("unloading", 3), ("empty", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phDriveStatus.setStatus('mandatory')
phDriveCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 110, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("online", 1), ("offline", 2), ("reset", 3), ("powerOn", 4), ("powerOff", 5), ("powerCycle", 6), ("driveBrickUpdate", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phDriveCommand.setStatus('mandatory')
phDriveFcPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 110, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phDriveFcPortId.setStatus('mandatory')
phDriveCompressionOn = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 110, 1, 18), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phDriveCompressionOn.setStatus('mandatory')
phDriveWriteProtected = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 110, 1, 19), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phDriveWriteProtected.setStatus('mandatory')
phDriveNumLoads = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 110, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phDriveNumLoads.setStatus('mandatory')
phDriveNumCleans = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 110, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phDriveNumCleans.setStatus('mandatory')
phDrivePowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 110, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("poweredOn", 1), ("poweredOff", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phDrivePowerStatus.setStatus('mandatory')
phDriveReadErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 110, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phDriveReadErrors.setStatus('mandatory')
phDriveWriteErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 110, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phDriveWriteErrors.setStatus('mandatory')
phDriveMbytesRead = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 110, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phDriveMbytesRead.setStatus('mandatory')
phDriveMbytesWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 110, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phDriveMbytesWritten.setStatus('mandatory')
phDriveFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 110, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phDriveFirmwareVersion.setStatus('mandatory')
phDriveREDId = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 110, 1, 28), AdicREDIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phDriveREDId.setStatus('mandatory')
phDriveOnlineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 110, 1, 29), AdicOnlineStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phDriveOnlineStatus.setStatus('mandatory')
phDriveErrorCodeBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 110, 1, 30), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: phDriveErrorCodeBytes.setStatus('mandatory')
phDriveRasStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 110, 1, 31), AdicStatusGroupState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phDriveRasStatus.setStatus('mandatory')
phDriveWwPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 110, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phDriveWwPortName.setStatus('mandatory')
phDriveStatHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 112), )
if mibBuilder.loadTexts: phDriveStatHistoryTable.setStatus('mandatory')
phDriveStatHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 112, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-MANAGEMENT-MIB", "mediaDomainIndex"), (0, "ADIC-MANAGEMENT-MIB", "mediaTypeIndex"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentAisle"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentFrame"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentRack"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentSection"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentCol"), (0, "ADIC-MANAGEMENT-MIB", "phDriveRow"), (0, "ADIC-MANAGEMENT-MIB", "phHourIndex"))
if mibBuilder.loadTexts: phDriveStatHistoryEntry.setStatus('mandatory')
phHourIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 112, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phHourIndex.setStatus('mandatory')
phHourlyMBytesRead = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 112, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phHourlyMBytesRead.setStatus('mandatory')
phHourlyMBytesWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 112, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phHourlyMBytesWritten.setStatus('mandatory')
phHourlyMounts = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 112, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phHourlyMounts.setStatus('mandatory')
phDrivePorts = MibIdentifier((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 116))
fcDrivePortTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 116, 10), )
if mibBuilder.loadTexts: fcDrivePortTable.setStatus('mandatory')
fcDrivePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 116, 10, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-MANAGEMENT-MIB", "mediaDomainIndex"), (0, "ADIC-MANAGEMENT-MIB", "mediaTypeIndex"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentAisle"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentFrame"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentRack"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentSection"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentCol"), (0, "ADIC-MANAGEMENT-MIB", "phDriveRow"))
if mibBuilder.loadTexts: fcDrivePortEntry.setStatus('mandatory')
fcPortPreferredSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 116, 10, 1, 1), AdicFcPortSpeed()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcPortPreferredSpeed.setStatus('mandatory')
fcPortNegotiatedSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 116, 10, 1, 2), AdicFcPortSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPortNegotiatedSpeed.setStatus('mandatory')
fcPortPreferredType = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 116, 10, 1, 3), AdicFcPortType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcPortPreferredType.setStatus('mandatory')
fcPortNegotiatedType = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 116, 10, 1, 4), AdicFcPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPortNegotiatedType.setStatus('mandatory')
fcPortTypeQualifier = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 116, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("public", 1), ("private", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPortTypeQualifier.setStatus('mandatory')
phMediaTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 120), )
if mibBuilder.loadTexts: phMediaTable.setStatus('mandatory')
phMediaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 120, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-MANAGEMENT-MIB", "phMediaBarCode"))
if mibBuilder.loadTexts: phMediaEntry.setStatus('mandatory')
phMediaBarCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 120, 1, 1), AdicBarCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phMediaBarCode.setStatus('mandatory')
phMediaDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 120, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phMediaDomain.setStatus('mandatory')
phMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 120, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phMediaType.setStatus('mandatory')
phMediaElementAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 120, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phMediaElementAddress.setStatus('mandatory')
phMediaMounts = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 120, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phMediaMounts.setStatus('mandatory')
phMediaReadErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 120, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phMediaReadErrors.setStatus('mandatory')
phMediaWriteErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 120, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phMediaWriteErrors.setStatus('mandatory')
phMediaCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 120, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phMediaCapacity.setStatus('mandatory')
phMediaFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 120, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phMediaFreeSpace.setStatus('mandatory')
phMediaExported = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 120, 1, 10), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phMediaExported.setStatus('mandatory')
phMediaImportTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 120, 1, 11), AdicDateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phMediaImportTimestamp.setStatus('mandatory')
phMediaExportTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 120, 1, 12), AdicDateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phMediaExportTimestamp.setStatus('mandatory')
phTransportTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 130), )
if mibBuilder.loadTexts: phTransportTable.setStatus('optional')
phTransportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 130, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-MANAGEMENT-MIB", "phTransportElementAddress"))
if mibBuilder.loadTexts: phTransportEntry.setStatus('optional')
phTransportElementAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 130, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phTransportElementAddress.setStatus('optional')
phTransportNumRecoveredGets = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 130, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phTransportNumRecoveredGets.setStatus('optional')
phTransportNumRecoveredPuts = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 130, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phTransportNumRecoveredPuts.setStatus('optional')
phTransportNumRecoveredScans = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 130, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phTransportNumRecoveredScans.setStatus('optional')
phTransportNumPuts = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 130, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phTransportNumPuts.setStatus('optional')
phTransportREDId = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 130, 1, 6), AdicREDIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phTransportREDId.setStatus('optional')
phTransportDomainTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 132), )
if mibBuilder.loadTexts: phTransportDomainTable.setStatus('optional')
phTransportDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 132, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-MANAGEMENT-MIB", "phTransportElementAddress"), (0, "ADIC-MANAGEMENT-MIB", "phTransportDomainIndex"))
if mibBuilder.loadTexts: phTransportDomainEntry.setStatus('optional')
phTransportDomainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 132, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phTransportDomainIndex.setStatus('optional')
phCleaningMediaTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 140), )
if mibBuilder.loadTexts: phCleaningMediaTable.setStatus('optional')
phCleaningMediaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 140, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-MANAGEMENT-MIB", "mediaDomainIndex"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentAisle"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentFrame"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentRack"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentSection"), (0, "ADIC-MANAGEMENT-MIB", "phSegmentCol"), (0, "ADIC-MANAGEMENT-MIB", "phCleaningMediaRow"))
if mibBuilder.loadTexts: phCleaningMediaEntry.setStatus('optional')
phCleaningMediaRow = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 140, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phCleaningMediaRow.setStatus('optional')
phCleaningMediaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 140, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allocated", 1), ("unallocated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phCleaningMediaStatus.setStatus('optional')
phCleaningMediaTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 140, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phCleaningMediaTypeIndex.setStatus('optional')
phCleaningMediaVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 140, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phCleaningMediaVendorId.setStatus('optional')
phCleaningMediaBarcode = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 140, 1, 5), AdicBarCode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phCleaningMediaBarcode.setStatus('optional')
phCleaningMediaUseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 140, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phCleaningMediaUseCount.setStatus('optional')
phCleaningMediaMaxUses = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 140, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phCleaningMediaMaxUses.setStatus('optional')
phCleaningMediaImportTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 80, 140, 1, 8), AdicDateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phCleaningMediaImportTimestamp.setStatus('optional')
loGeneralInfoTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 10), )
if mibBuilder.loadTexts: loGeneralInfoTable.setStatus('mandatory')
loGeneralInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 10, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"))
if mibBuilder.loadTexts: loGeneralInfoEntry.setStatus('mandatory')
maxLogicalLibraries = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxLogicalLibraries.setStatus('mandatory')
numLogicalLibraries = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numLogicalLibraries.setStatus('mandatory')
masterOnlineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: masterOnlineStatus.setStatus('mandatory')
numVendorIds = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numVendorIds.setStatus('mandatory')
autoPartitionTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 12), )
if mibBuilder.loadTexts: autoPartitionTable.setStatus('mandatory')
autoPartitionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 12, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-MANAGEMENT-MIB", "mediaDomainIndex"), (0, "ADIC-MANAGEMENT-MIB", "mediaTypeIndex"), (0, "ADIC-MANAGEMENT-MIB", "phDriveInterfaceType"))
if mibBuilder.loadTexts: autoPartitionEntry.setStatus('mandatory')
numAutoPartition = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 12, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: numAutoPartition.setStatus('mandatory')
autoPartitionCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("autoPartition", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoPartitionCommand.setStatus('mandatory')
vendorIdTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 15), )
if mibBuilder.loadTexts: vendorIdTable.setStatus('mandatory')
vendorIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 15, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-MANAGEMENT-MIB", "vendorIdIndex"))
if mibBuilder.loadTexts: vendorIdEntry.setStatus('mandatory')
vendorIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vendorIdIndex.setStatus('mandatory')
vendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 15, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vendorName.setStatus('mandatory')
numProductIds = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 15, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numProductIds.setStatus('mandatory')
productIdTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 17), )
if mibBuilder.loadTexts: productIdTable.setStatus('mandatory')
productIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 17, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-MANAGEMENT-MIB", "vendorIdIndex"), (0, "ADIC-MANAGEMENT-MIB", "productIdIndex"))
if mibBuilder.loadTexts: productIdEntry.setStatus('mandatory')
productIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productIdIndex.setStatus('mandatory')
productIdName = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 17, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: productIdName.setStatus('mandatory')
productDrivesMin = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 17, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: productDrivesMin.setStatus('mandatory')
productDrivesMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 17, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: productDrivesMax.setStatus('mandatory')
productSlotsMin = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 17, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: productSlotsMin.setStatus('mandatory')
productSlotsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 17, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: productSlotsMax.setStatus('mandatory')
productIeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 17, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: productIeMin.setStatus('mandatory')
productIeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 17, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: productIeMax.setStatus('mandatory')
logicalLibraryTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 20), )
if mibBuilder.loadTexts: logicalLibraryTable.setStatus('mandatory')
logicalLibraryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 20, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-MANAGEMENT-MIB", "logicalLibraryIndex"))
if mibBuilder.loadTexts: logicalLibraryEntry.setStatus('mandatory')
logicalLibraryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalLibraryIndex.setStatus('mandatory')
command = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("createSimple", 1), ("createExpert", 2), ("modify", 3), ("delete", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: command.setStatus('mandatory')
name = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 20, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: name.setStatus('mandatory')
assignedLun = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 20, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: assignedLun.setStatus('mandatory')
vendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 20, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vendorId.setStatus('mandatory')
productId = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 20, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: productId.setStatus('mandatory')
mediaDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 20, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mediaDomain.setStatus('mandatory')
mediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 20, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mediaType.setStatus('mandatory')
numSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 20, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: numSlots.setStatus('mandatory')
numIE = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 20, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: numIE.setStatus('mandatory')
numDrives = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 20, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: numDrives.setStatus('mandatory')
loStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 20, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loStatus.setStatus('mandatory')
automaticCleaning = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 20, 1, 13), AdicEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: automaticCleaning.setStatus('mandatory')
mediaTypeChecking = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 20, 1, 14), AdicEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mediaTypeChecking.setStatus('mandatory')
serialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 20, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumber.setStatus('mandatory')
loInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 20, 1, 16), AdicInterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loInterfaceType.setStatus('mandatory')
loNumLibraries = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 20, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loNumLibraries.setStatus('obsolete')
loLtoTapeTags = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 20, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("prefix", 1), ("suffix", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loLtoTapeTags.setStatus('mandatory')
loMediaTypeCheckingPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 20, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loMediaTypeCheckingPolicy.setStatus('mandatory')
loSegmentTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 25), )
if mibBuilder.loadTexts: loSegmentTable.setStatus('mandatory')
loSegmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 25, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentType"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentAisle"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentFrame"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentRack"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentSection"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentCol"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentStartingRow"))
if mibBuilder.loadTexts: loSegmentEntry.setStatus('mandatory')
loSegmentAisle = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 25, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loSegmentAisle.setStatus('mandatory')
loSegmentFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 25, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loSegmentFrame.setStatus('mandatory')
loSegmentRack = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 25, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loSegmentRack.setStatus('mandatory')
loSegmentSection = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 25, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loSegmentSection.setStatus('mandatory')
loSegmentCol = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 25, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loSegmentCol.setStatus('mandatory')
loSegmentStartingRow = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 25, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loSegmentStartingRow.setStatus('mandatory')
loSegmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 25, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loSegmentSize.setStatus('mandatory')
loSegmentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 25, 1, 8), AdicSegmentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loSegmentType.setStatus('mandatory')
loSegmentMediaDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 25, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loSegmentMediaDomain.setStatus('mandatory')
loSegmentBelongsTo = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 25, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loSegmentBelongsTo.setStatus('mandatory')
loSegmentCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 25, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("allocate", 1), ("free", 2), ("reserveForCleaning", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loSegmentCommand.setStatus('mandatory')
loSegmentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 25, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allocated", 1), ("unallocated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loSegmentStatus.setStatus('mandatory')
loSegmentStartingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 25, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loSegmentStartingAddress.setStatus('mandatory')
loSegmentBelongsToTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 27), )
if mibBuilder.loadTexts: loSegmentBelongsToTable.setStatus('mandatory')
loSegmentBelongsToEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 27, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentType"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentAisle"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentFrame"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentRack"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentSection"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentCol"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentStartingRow"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentAssignedTo"))
if mibBuilder.loadTexts: loSegmentBelongsToEntry.setStatus('mandatory')
loSegmentAssignedTo = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 27, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loSegmentAssignedTo.setStatus('mandatory')
loStorageSegTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 30), )
if mibBuilder.loadTexts: loStorageSegTable.setStatus('mandatory')
loStorageSegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 30, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-MANAGEMENT-MIB", "logicalLibraryIndex"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentAisle"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentFrame"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentRack"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentSection"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentCol"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentStartingRow"))
if mibBuilder.loadTexts: loStorageSegEntry.setStatus('mandatory')
loStorageSegSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 30, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loStorageSegSize.setStatus('mandatory')
loStorageSegStartingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 30, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loStorageSegStartingAddress.setStatus('mandatory')
loIeSegTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 40), )
if mibBuilder.loadTexts: loIeSegTable.setStatus('mandatory')
loIeSegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 40, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-MANAGEMENT-MIB", "logicalLibraryIndex"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentAisle"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentFrame"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentRack"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentSection"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentCol"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentStartingRow"))
if mibBuilder.loadTexts: loIeSegEntry.setStatus('mandatory')
loIeSegSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 40, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loIeSegSize.setStatus('mandatory')
loIeSegReserve = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 40, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reserve", 1), ("release", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loIeSegReserve.setStatus('mandatory')
loIeSegReservedBy = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 40, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loIeSegReservedBy.setStatus('mandatory')
loIeSegStartingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 40, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loIeSegStartingAddress.setStatus('mandatory')
loDriveSegTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 50), )
if mibBuilder.loadTexts: loDriveSegTable.setStatus('mandatory')
loDriveSegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 50, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-MANAGEMENT-MIB", "logicalLibraryIndex"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentAisle"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentFrame"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentRack"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentSection"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentCol"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentStartingRow"))
if mibBuilder.loadTexts: loDriveSegEntry.setStatus('mandatory')
loDriveSegSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 50, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loDriveSegSize.setStatus('mandatory')
loDriveSegStartingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 50, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loDriveSegStartingAddress.setStatus('mandatory')
loDriveSegMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 50, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loDriveSegMediaType.setStatus('mandatory')
loDriveSegInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 50, 1, 4), AdicInterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loDriveSegInterfaceType.setStatus('mandatory')
loStorageSlotTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 60), )
if mibBuilder.loadTexts: loStorageSlotTable.setStatus('mandatory')
loStorageSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 60, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-MANAGEMENT-MIB", "logicalLibraryIndex"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentAisle"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentFrame"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentRack"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentSection"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentCol"), (0, "ADIC-MANAGEMENT-MIB", "loStorageRow"))
if mibBuilder.loadTexts: loStorageSlotEntry.setStatus('mandatory')
loStorageRow = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 60, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loStorageRow.setStatus('mandatory')
loIeSlotTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 70), )
if mibBuilder.loadTexts: loIeSlotTable.setStatus('mandatory')
loIeSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 70, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-MANAGEMENT-MIB", "logicalLibraryIndex"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentAisle"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentFrame"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentRack"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentSection"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentCol"), (0, "ADIC-MANAGEMENT-MIB", "loIeRow"))
if mibBuilder.loadTexts: loIeSlotEntry.setStatus('mandatory')
loIeRow = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 70, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loIeRow.setStatus('mandatory')
loDriveTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 80), )
if mibBuilder.loadTexts: loDriveTable.setStatus('mandatory')
loDriveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 80, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-MANAGEMENT-MIB", "logicalLibraryIndex"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentAisle"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentFrame"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentRack"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentSection"), (0, "ADIC-MANAGEMENT-MIB", "loSegmentCol"), (0, "ADIC-MANAGEMENT-MIB", "loDriveRow"))
if mibBuilder.loadTexts: loDriveEntry.setStatus('mandatory')
loDriveRow = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 80, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loDriveRow.setStatus('mandatory')
loStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 90), )
if mibBuilder.loadTexts: loStatisticsTable.setStatus('optional')
loStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 90, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-MANAGEMENT-MIB", "logicalLibraryIndex"))
if mibBuilder.loadTexts: loStatisticsEntry.setStatus('optional')
loNumRecoveredGets = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 90, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loNumRecoveredGets.setStatus('optional')
loNumRecoveredPuts = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 90, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loNumRecoveredPuts.setStatus('optional')
loNumRecoveredScans = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 90, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loNumRecoveredScans.setStatus('optional')
loStatsNumPuts = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 90, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loStatsNumPuts.setStatus('optional')
loStatsNumPutRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 90, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loStatsNumPutRetries.setStatus('optional')
loStatsNumGetRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 90, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loStatsNumGetRetries.setStatus('optional')
loStatsNumScanRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 90, 90, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loStatsNumScanRetries.setStatus('optional')
rasSystemStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 10), )
if mibBuilder.loadTexts: rasSystemStatusTable.setStatus('mandatory')
rasSystemStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 10, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-MANAGEMENT-MIB", "rasStatusGroupIndex"))
if mibBuilder.loadTexts: rasSystemStatusEntry.setStatus('mandatory')
rasStatusGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 10, 1, 1), AdicStatusGroup()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasStatusGroupIndex.setStatus('mandatory')
rasStatusGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 10, 1, 2), AdicStatusGroupState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasStatusGroupStatus.setStatus('mandatory')
rasStatusGroupPreviousStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 10, 1, 3), AdicStatusGroupState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasStatusGroupPreviousStatus.setStatus('mandatory')
rasStatusGroupTextSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 10, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasStatusGroupTextSummary.setStatus('mandatory')
rasStatusGroupTotalTickets = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasStatusGroupTotalTickets.setStatus('mandatory')
rasStatusGroupOpenTickets = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasStatusGroupOpenTickets.setStatus('mandatory')
rasStatusGroupActionsPending = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasStatusGroupActionsPending.setStatus('mandatory')
rasStatusGroupLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 10, 1, 8), AdicDateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasStatusGroupLastChange.setStatus('mandatory')
rasTicketTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 20), )
if mibBuilder.loadTexts: rasTicketTable.setStatus('mandatory')
rasTicketEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 20, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-MANAGEMENT-MIB", "rasTicketId"))
if mibBuilder.loadTexts: rasTicketEntry.setStatus('mandatory')
rasTicketId = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 20, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasTicketId.setStatus('mandatory')
rasTicketRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 20, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rasTicketRowStatus.setStatus('mandatory')
rasTicketState = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 20, 1, 3), AdicRasTicketState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rasTicketState.setStatus('mandatory')
rasTicketQualifier = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("resolved", 2), ("cannotDuplicate", 3), ("asDesigned", 4), ("manualOverride", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rasTicketQualifier.setStatus('mandatory')
rasTicketPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 20, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rasTicketPriority.setStatus('mandatory')
rasTicketDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 20, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rasTicketDescription.setStatus('mandatory')
rasTicketStatusGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 20, 1, 7), AdicStatusGroup()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasTicketStatusGroup.setStatus('mandatory')
rasTicketGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 20, 1, 8), AdicStatusGroupState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasTicketGroupStatus.setStatus('mandatory')
rasTicketClosedBy = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 20, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rasTicketClosedBy.setStatus('mandatory')
rasTicketVerifiedBy = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 20, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rasTicketVerifiedBy.setStatus('mandatory')
rasTicketComments = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 20, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rasTicketComments.setStatus('mandatory')
rasTicketSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 20, 1, 12), AdicFruSerialNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasTicketSerialNumber.setStatus('mandatory')
rasTicketTimeOpened = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 20, 1, 13), AdicDateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasTicketTimeOpened.setStatus('mandatory')
rasTicketTimeClosed = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 20, 1, 14), AdicDateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasTicketTimeClosed.setStatus('mandatory')
rasTicketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 20, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasTicketCount.setStatus('mandatory')
rasTicketKeyReport = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 20, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasTicketKeyReport.setStatus('mandatory')
rasReportTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 30), )
if mibBuilder.loadTexts: rasReportTable.setStatus('mandatory')
rasReportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 30, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-MANAGEMENT-MIB", "rasTicketId"), (0, "ADIC-MANAGEMENT-MIB", "rasReportId"))
if mibBuilder.loadTexts: rasReportEntry.setStatus('mandatory')
rasReportId = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 30, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasReportId.setStatus('mandatory')
rasReportRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 30, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rasReportRowStatus.setStatus('mandatory')
rasReportTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 30, 1, 3), AdicDateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasReportTimestamp.setStatus('mandatory')
rasReportStatusGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 30, 1, 4), AdicStatusGroup()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rasReportStatusGroup.setStatus('mandatory')
rasReportOrcData = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 30, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rasReportOrcData.setStatus('mandatory')
rasReportGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 30, 1, 6), AdicStatusGroupState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rasReportGroupStatus.setStatus('mandatory')
rasReportDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 30, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rasReportDescription.setStatus('mandatory')
rasReportOrcDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 30, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasReportOrcDescription.setStatus('mandatory')
rasReportRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 30, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasReportRepeatCounter.setStatus('mandatory')
rasReportSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 30, 1, 10), AdicFruSerialNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasReportSerialNumber.setStatus('mandatory')
rasReportHeadReport = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 30, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasReportHeadReport.setStatus('mandatory')
rasFruStatTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 50), )
if mibBuilder.loadTexts: rasFruStatTable.setStatus('mandatory')
rasFruStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 50, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), (0, "ADIC-MANAGEMENT-MIB", "rasFruStatIndex"))
if mibBuilder.loadTexts: rasFruStatEntry.setStatus('mandatory')
rasFruStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 50, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasFruStatIndex.setStatus('mandatory')
rasFruInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 50, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasFruInstanceId.setStatus('mandatory')
rasFruStatStatusGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 50, 1, 3), AdicStatusGroup()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasFruStatStatusGroup.setStatus('mandatory')
rasFruStatFruCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 50, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("firmware", 1), ("pcba", 2), ("fan", 3), ("accessor", 4), ("picker", 5), ("power", 6), ("cable", 7), ("mailbox", 8), ("drive", 9), ("media", 10), ("label", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasFruStatFruCategory.setStatus('mandatory')
rasFruStatFruId = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 50, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasFruStatFruId.setStatus('mandatory')
rasFruStatFirstReportTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 50, 1, 6), AdicDateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasFruStatFirstReportTime.setStatus('mandatory')
rasFruStatLastReportTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 50, 1, 7), AdicDateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasFruStatLastReportTime.setStatus('mandatory')
rasFruStatTotalTickets = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 50, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasFruStatTotalTickets.setStatus('mandatory')
rasFruStatOpenTickets = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 50, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasFruStatOpenTickets.setStatus('mandatory')
rasFruStatSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 50, 1, 10), AdicFruSerialNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasFruStatSerialNumber.setStatus('mandatory')
rasFruStatState = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 50, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("current", 1), ("old", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rasFruStatState.setStatus('mandatory')
rasTicketFilterTable = MibTable((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 60), )
if mibBuilder.loadTexts: rasTicketFilterTable.setStatus('mandatory')
rasTicketFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 60, 1), ).setIndexNames((0, "ADIC-INTELLIGENT-STORAGE-MIB", "componentId"))
if mibBuilder.loadTexts: rasTicketFilterEntry.setStatus('mandatory')
rasTicketFilterStatusGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 60, 1, 1), AdicStatusGroup()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rasTicketFilterStatusGroup.setStatus('mandatory')
rasTicketFilterState = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 60, 1, 2), AdicRasTicketState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rasTicketFilterState.setStatus('mandatory')
rasTicketFilterSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20, 100, 60, 1, 3), AdicRasTicketSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rasTicketFilterSeverity.setStatus('mandatory')
physLibraryActivity = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20) + (0,100)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSequenceNumber"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSeverity"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSummaryText"))
physLibraryOnlineStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20) + (0,101)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSequenceNumber"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSeverity"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSummaryText"), ("ADIC-MANAGEMENT-MIB", "onlineStatus"))
physLibraryDoorStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20) + (0,102)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSequenceNumber"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSeverity"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSummaryText"), ("ADIC-MANAGEMENT-MIB", "physLibraryDoorStatus"))
ieStationDoorStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20) + (0,103)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSequenceNumber"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSeverity"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSummaryText"), ("ADIC-MANAGEMENT-MIB", "phSegmentAisle"), ("ADIC-MANAGEMENT-MIB", "phSegmentFrame"), ("ADIC-MANAGEMENT-MIB", "phSegmentRack"), ("ADIC-MANAGEMENT-MIB", "phIeStationNumber"), ("ADIC-MANAGEMENT-MIB", "phIeStationDoorStatus"))
moveMediaComplete = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20) + (0,104)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSequenceNumber"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSeverity"), ("ADIC-MANAGEMENT-MIB", "phStorageElementAddr"), ("ADIC-MANAGEMENT-MIB", "phStorageElementAddr"))
tapeDriveAdded = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20) + (0,105)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSequenceNumber"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSeverity"), ("ADIC-MANAGEMENT-MIB", "phDriveRow"))
tapeDriveRemoved = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20) + (0,106)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSequenceNumber"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSeverity"), ("ADIC-MANAGEMENT-MIB", "phDriveRow"))
mediaMounted = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20) + (0,107)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSequenceNumber"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSeverity"), ("ADIC-MANAGEMENT-MIB", "phDriveRow"))
mediaDismounted = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20) + (0,108)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSequenceNumber"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSeverity"), ("ADIC-MANAGEMENT-MIB", "phDriveRow"), ("ADIC-MANAGEMENT-MIB", "phDriveMbytesRead"), ("ADIC-MANAGEMENT-MIB", "phDriveMbytesWritten"))
ieStationInventoryPerformed = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20) + (0,109)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSequenceNumber"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSeverity"), ("ADIC-MANAGEMENT-MIB", "phIeElementAddr"), ("ADIC-MANAGEMENT-MIB", "phIeElementAddr"))
rcuReady = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20) + (0,110)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSequenceNumber"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSeverity"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSummaryText"), ("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"))
rcuNotReady = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20) + (0,111)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSequenceNumber"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSeverity"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSummaryText"), ("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"))
driveActivityUpdate = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20) + (0,112)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSequenceNumber"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSeverity"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSummaryText"), ("ADIC-MANAGEMENT-MIB", "phHourlyMBytesRead"), ("ADIC-MANAGEMENT-MIB", "phHourlyMBytesWritten"), ("ADIC-MANAGEMENT-MIB", "phHourlyMounts"))
driveBrickFwUpdateSuccess = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20) + (0,113)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSequenceNumber"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSeverity"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSummaryText"), ("ADIC-MANAGEMENT-MIB", "phDriveSerialNumber"), ("ADIC-MANAGEMENT-MIB", "phDriveFirmwareVersion"))
driveBrickFwUpdateFailure = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20) + (0,114)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSequenceNumber"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSeverity"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSummaryText"), ("ADIC-MANAGEMENT-MIB", "phDriveSerialNumber"), ("ADIC-MANAGEMENT-MIB", "phDriveFirmwareVersion"))
physLibraryConfigurationChange = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20) + (0,115)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSequenceNumber"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSeverity"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSummaryText"))
physLibraryRESChange = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20) + (0,116)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSequenceNumber"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSeverity"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSummaryText"), ("ADIC-MANAGEMENT-MIB", "phStorageElementAddr"), ("ADIC-MANAGEMENT-MIB", "phStorageElementAddr"))
driveBrickFwUpdateStart = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20) + (0,117)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSequenceNumber"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSeverity"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSummaryText"), ("ADIC-MANAGEMENT-MIB", "phDriveSerialNumber"))
logicalLibraryActivity = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20) + (0,200)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSequenceNumber"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSeverity"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSummaryText"), ("ADIC-MANAGEMENT-MIB", "logicalLibraryIndex"))
logicalLibraryCreated = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20) + (0,201)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSequenceNumber"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSeverity"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSummaryText"), ("ADIC-MANAGEMENT-MIB", "logicalLibraryIndex"))
logicalLibraryModified = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20) + (0,202)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSequenceNumber"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSeverity"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSummaryText"), ("ADIC-MANAGEMENT-MIB", "logicalLibraryIndex"))
logicalLibraryDeleted = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20) + (0,203)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSequenceNumber"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSeverity"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSummaryText"), ("ADIC-MANAGEMENT-MIB", "logicalLibraryIndex"))
logicalLibraryOnlineStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20) + (0,204)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSequenceNumber"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSeverity"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSummaryText"), ("ADIC-MANAGEMENT-MIB", "logicalLibraryIndex"), ("ADIC-MANAGEMENT-MIB", "loStatus"))
connectivityGroupStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20) + (0,400)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSequenceNumber"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSeverity"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSummaryText"), ("ADIC-MANAGEMENT-MIB", "rasStatusGroupIndex"), ("ADIC-MANAGEMENT-MIB", "rasStatusGroupStatus"), ("ADIC-MANAGEMENT-MIB", "rasTicketId"), ("ADIC-MANAGEMENT-MIB", "rasReportId"))
controlGroupStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20) + (0,401)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSequenceNumber"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSeverity"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSummaryText"), ("ADIC-MANAGEMENT-MIB", "rasStatusGroupIndex"), ("ADIC-MANAGEMENT-MIB", "rasStatusGroupStatus"), ("ADIC-MANAGEMENT-MIB", "rasTicketId"), ("ADIC-MANAGEMENT-MIB", "rasReportId"))
coolingGroupStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20) + (0,402)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSequenceNumber"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSeverity"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSummaryText"), ("ADIC-MANAGEMENT-MIB", "rasStatusGroupIndex"), ("ADIC-MANAGEMENT-MIB", "rasStatusGroupStatus"), ("ADIC-MANAGEMENT-MIB", "rasTicketId"), ("ADIC-MANAGEMENT-MIB", "rasReportId"))
drivesAndMediaGroupStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20) + (0,403)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSequenceNumber"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSeverity"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSummaryText"), ("ADIC-MANAGEMENT-MIB", "rasStatusGroupIndex"), ("ADIC-MANAGEMENT-MIB", "rasStatusGroupStatus"), ("ADIC-MANAGEMENT-MIB", "rasTicketId"), ("ADIC-MANAGEMENT-MIB", "rasReportId"))
powerGroupStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20) + (0,404)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSequenceNumber"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSeverity"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSummaryText"), ("ADIC-MANAGEMENT-MIB", "rasStatusGroupIndex"), ("ADIC-MANAGEMENT-MIB", "rasStatusGroupStatus"), ("ADIC-MANAGEMENT-MIB", "rasTicketId"), ("ADIC-MANAGEMENT-MIB", "rasReportId"))
roboticsGroupStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20) + (0,405)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSequenceNumber"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSeverity"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSummaryText"), ("ADIC-MANAGEMENT-MIB", "rasStatusGroupIndex"), ("ADIC-MANAGEMENT-MIB", "rasStatusGroupStatus"), ("ADIC-MANAGEMENT-MIB", "rasTicketId"), ("ADIC-MANAGEMENT-MIB", "rasReportId"))
rasEventNotification = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20) + (0,406)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSequenceNumber"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSeverity"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSummaryText"), ("ADIC-MANAGEMENT-MIB", "rasStatusGroupIndex"), ("ADIC-MANAGEMENT-MIB", "rasStatusGroupStatus"), ("ADIC-MANAGEMENT-MIB", "rasTicketId"), ("ADIC-MANAGEMENT-MIB", "rasReportId"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapIntendedUsage"))
logRetrievalComplete = NotificationType((1, 3, 6, 1, 4, 1, 3764, 1, 1, 200, 20) + (0,500)).setObjects(("ADIC-INTELLIGENT-STORAGE-MIB", "componentId"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSequenceNumber"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSeverity"), ("ADIC-INTELLIGENT-STORAGE-MIB", "trapSummaryText"))
mibBuilder.exportSymbols("ADIC-MANAGEMENT-MIB", userPassword=userPassword, AdicStatusGroupState=AdicStatusGroupState, globalEthernetEntry=globalEthernetEntry, softwareInstallationTable=softwareInstallationTable, rasTicketState=rasTicketState, phDriveFirmwareVersion=phDriveFirmwareVersion, loSegmentBelongsTo=loSegmentBelongsTo, logSnapshotEntry=logSnapshotEntry, persistentData=persistentData, phStorageSegTable=phStorageSegTable, userTable=userTable, numVendorIds=numVendorIds, systemManagerTable=systemManagerTable, AdicFcPortSpeed=AdicFcPortSpeed, ieStationDoorStatusChange=ieStationDoorStatusChange, phIeRow=phIeRow, rasFruInstanceId=rasFruInstanceId, rasTicketId=rasTicketId, userName=userName, logicalLibraryModified=logicalLibraryModified, productDrivesMax=productDrivesMax, rasReportOrcDescription=rasReportOrcDescription, phHourIndex=phHourIndex, rasTicketVerifiedBy=rasTicketVerifiedBy, logEntry=logEntry, key=key, phFrameTable=phFrameTable, rasTicketFilterStatusGroup=rasTicketFilterStatusGroup, phTransportNumRecoveredPuts=phTransportNumRecoveredPuts, rasSystemStatusTable=rasSystemStatusTable, phTransportDomainIndex=phTransportDomainIndex, rasStatusGroupOpenTickets=rasStatusGroupOpenTickets, rasReportId=rasReportId, networkTimeServer1=networkTimeServer1, phIeSegReserve=phIeSegReserve, readiness=readiness, phDriveFcHardId=phDriveFcHardId, phStorageSegSize=phStorageSegSize, autoConfigureMode=autoConfigureMode, phSegmentMediaDomain=phSegmentMediaDomain, fcPortPreferredSpeed=fcPortPreferredSpeed, productIdIndex=productIdIndex, licenseFeatureTable=licenseFeatureTable, registrationEntry=registrationEntry, rasSystemStatusEntry=rasSystemStatusEntry, autoPartitionEntry=autoPartitionEntry, phDriveOnlineStatus=phDriveOnlineStatus, phTransportREDId=phTransportREDId, ipAddressSubnetMask=ipAddressSubnetMask, ras=ras, componentsInBundle=componentsInBundle, globalStatusEntry=globalStatusEntry, amcInstallStatusText=amcInstallStatusText, phDrivePowerStatus=phDrivePowerStatus, numPhDrives=numPhDrives, powerGroupStatusChange=powerGroupStatusChange, rasTicketSerialNumber=rasTicketSerialNumber, rasTicketFilterState=rasTicketFilterState, mediaDomainIndex=mediaDomainIndex, loStatsNumGetRetries=loStatsNumGetRetries, loStorageSlotEntry=loStorageSlotEntry, command=command, phMediaReadErrors=phMediaReadErrors, installProcessStatus=installProcessStatus, tapeDriveAdded=tapeDriveAdded, status=status, phDriveCommand=phDriveCommand, mediaTypeEntry=mediaTypeEntry, productDrivesMin=productDrivesMin, rasTicketDescription=rasTicketDescription, driveBrickFwUpdateStart=driveBrickFwUpdateStart, totalRawCapacity=totalRawCapacity, phDriveNumLoads=phDriveNumLoads, rasFruStatSerialNumber=rasFruStatSerialNumber, mcbInstallStatusText=mcbInstallStatusText, phCleaningSegRowStatus=phCleaningSegRowStatus, loStorageSegStartingAddress=loStorageSegStartingAddress, loIeSegReservedBy=loIeSegReservedBy, rasFruStatTotalTickets=rasFruStatTotalTickets, physLibraryManagerLun=physLibraryManagerLun, hostIpAddress=hostIpAddress, phFrameSerialNumber=phFrameSerialNumber, rasTicketFilterEntry=rasTicketFilterEntry, networkTimeProtocol=networkTimeProtocol, rasReportTable=rasReportTable, currentFirmwareVersion=currentFirmwareVersion, phCleaningMediaStatus=phCleaningMediaStatus, phDriveWwn=phDriveWwn, loStorageSegTable=loStorageSegTable, physLibraryActivity=physLibraryActivity, phDriveMbytesWritten=phDriveMbytesWritten, phDriveAutoCleaning=phDriveAutoCleaning, rasTicketPriority=rasTicketPriority, mediaMounted=mediaMounted, processResidentMemory=processResidentMemory, phDriveWriteErrors=phDriveWriteErrors, rasStatusGroupActionsPending=rasStatusGroupActionsPending, role=role, loNumLibraries=loNumLibraries, logSnapshotTable=logSnapshotTable, phDriveTable=phDriveTable, mcbHostName=mcbHostName, phTransportDomainTable=phTransportDomainTable, loNumRecoveredPuts=loNumRecoveredPuts, processPhysicalMemory=processPhysicalMemory, logicalLibraryEntry=logicalLibraryEntry, licensableFeatureTable=licensableFeatureTable, phDriveProduct=phDriveProduct, driveActivityUpdate=driveActivityUpdate, AdicRasTicketState=AdicRasTicketState, phDriveNeedsCleaning=phDriveNeedsCleaning, phMediaTable=phMediaTable, phMediaWriteErrors=phMediaWriteErrors, numPhAisles=numPhAisles, mediaDomainTable=mediaDomainTable, loDriveTable=loDriveTable, productIeMax=productIeMax, registrationTable=registrationTable, licenseKeyIndex=licenseKeyIndex, licenseFeatureIndex=licenseFeatureIndex, phSegmentSection=phSegmentSection, phMediaFreeSpace=phMediaFreeSpace, connectivityGroupStatusChange=connectivityGroupStatusChange, phFrameNumRacks=phFrameNumRacks, AdicBarCode=AdicBarCode, ethernetDuplex=ethernetDuplex, rasFruStatStatusGroup=rasFruStatStatusGroup, phDriveReadErrors=phDriveReadErrors, phTransportElementAddress=phTransportElementAddress, globalEthernetTable=globalEthernetTable, mediaDomain=mediaDomain, phDriveSegSize=phDriveSegSize, fcDrivePortTable=fcDrivePortTable, phDriveCompressionOn=phDriveCompressionOn, rasTicketComments=rasTicketComments, phCleaningMediaRow=phCleaningMediaRow, loSegmentStartingRow=loSegmentStartingRow, phMediaMounts=phMediaMounts, loGeneralInfoEntry=loGeneralInfoEntry, loSegmentEntry=loSegmentEntry, roboticsGroupStatusChange=roboticsGroupStatusChange, loStatisticsEntry=loStatisticsEntry, physLibraryAutoCleaning=physLibraryAutoCleaning, phDriveSegMediaType=phDriveSegMediaType, logicalLibraryIndex=logicalLibraryIndex, licenseKeyTable=licenseKeyTable, loDriveSegTable=loDriveSegTable, rcuInstallStatusText=rcuInstallStatusText, phCleaningMediaImportTimestamp=phCleaningMediaImportTimestamp, name=name, mediaTypeIndex=mediaTypeIndex, rasFruStatTable=rasFruStatTable, phSegmentSize=phSegmentSize, globalEthernetManager=globalEthernetManager, fcDrivePortEntry=fcDrivePortEntry, numPhSlots=numPhSlots, phDriveREDId=phDriveREDId, phMediaDomain=phMediaDomain, loIeSegSize=loIeSegSize, systemManager=systemManager, globalStatusTable=globalStatusTable, licensing=licensing, phIeStationNumber=phIeStationNumber, phCleaningMediaMaxUses=phCleaningMediaMaxUses, systemDateAndTime=systemDateAndTime, loSegmentAssignedTo=loSegmentAssignedTo, fcPortTypeQualifier=fcPortTypeQualifier, loNumRecoveredScans=loNumRecoveredScans, phGeneralInfoTable=phGeneralInfoTable, userGroup=userGroup, productIeMin=productIeMin, AdicFruSerialNumber=AdicFruSerialNumber, rasStatusGroupIndex=rasStatusGroupIndex, phMediaElementAddress=phMediaElementAddress, licenseKeyDuration=licenseKeyDuration, persistentDataTable=persistentDataTable, rasTicketStatusGroup=rasTicketStatusGroup, phTransportNumRecoveredGets=phTransportNumRecoveredGets, loSegmentStartingAddress=loSegmentStartingAddress, AdicRasTicketSeverity=AdicRasTicketSeverity, Boolean=Boolean, licensableFeatureEntry=licensableFeatureEntry, numDriveElements=numDriveElements, phSegmentTable=phSegmentTable, rasReportRowStatus=rasReportRowStatus, rasFruStatOpenTickets=rasFruStatOpenTickets, phIeSegEntry=phIeSegEntry, phStorageSlotEntry=phStorageSlotEntry, loGeneralInfoTable=loGeneralInfoTable, logSnapshotCommand=logSnapshotCommand, rasTicketKeyReport=rasTicketKeyReport, rasFruStatFirstReportTime=rasFruStatFirstReportTime, actualSpeed=actualSpeed, maxLogicalLibraries=maxLogicalLibraries, amcInstallProcessStatus=amcInstallProcessStatus, logName=logName, networkTimeServer2=networkTimeServer2, cmbInstallProcessStatus=cmbInstallProcessStatus, productIdTable=productIdTable, persistentDataEntry=persistentDataEntry, productSlotsMin=productSlotsMin, phDriveVendor=phDriveVendor, eventManager=eventManager, loStatsNumPutRetries=loStatsNumPutRetries, autoPartitionCommand=autoPartitionCommand, phCleaningMediaBarcode=phCleaningMediaBarcode, rasFruStatFruCategory=rasFruStatFruCategory, phHourlyMBytesWritten=phHourlyMBytesWritten, phDrivePorts=phDrivePorts, phIeSlotEntry=phIeSlotEntry, logicalLibraryCreated=logicalLibraryCreated, mcbInstallProcessStatus=mcbInstallProcessStatus, rasTicketQualifier=rasTicketQualifier, userEntry=userEntry, licenseFeatureQuantity=licenseFeatureQuantity, rasEventNotification=rasEventNotification, licenseKeyEntry=licenseKeyEntry, logicalLibrary=logicalLibrary, rasFruStatEntry=rasFruStatEntry, phDriveNumCleans=phDriveNumCleans, fcPortNegotiatedType=fcPortNegotiatedType, phSegmentCol=phSegmentCol, softwareInstallationEntry=softwareInstallationEntry, phIeStationREDId=phIeStationREDId, vendorName=vendorName, loSegmentMediaDomain=loSegmentMediaDomain, phFrameType=phFrameType, autoInventoryMode=autoInventoryMode, mediaTypeName=mediaTypeName, rasTicketClosedBy=rasTicketClosedBy, loDriveSegInterfaceType=loDriveSegInterfaceType, management=management, phMediaBarCode=phMediaBarCode, mediaTypeChecking=mediaTypeChecking, totalFreeCapacity=totalFreeCapacity, userRowStatus=userRowStatus, ieStationInventoryPerformed=ieStationInventoryPerformed, softwareComponentIndex=softwareComponentIndex, phIeSlotTable=phIeSlotTable, physLibraryDoorStatus=physLibraryDoorStatus, phDriveEntry=phDriveEntry, loIeSegStartingAddress=loIeSegStartingAddress, phTransportNumPuts=phTransportNumPuts, AdicFcPortType=AdicFcPortType, rcuReady=rcuReady, rasTicketTimeOpened=rasTicketTimeOpened, phDriveScsiId=phDriveScsiId, phSegmentRack=phSegmentRack, loSegmentFrame=loSegmentFrame, phTransportNumRecoveredScans=phTransportNumRecoveredScans, vendorIdEntry=vendorIdEntry, phIeSegReservedBy=phIeSegReservedBy, phIeStationTable=phIeStationTable, productIdEntry=productIdEntry)
mibBuilder.exportSymbols("ADIC-MANAGEMENT-MIB", logicalLibraryTable=logicalLibraryTable, phIeStationEntry=phIeStationEntry, rasReportDescription=rasReportDescription, rasReportStatusGroup=rasReportStatusGroup, phCleaningMediaTypeIndex=phCleaningMediaTypeIndex, phMediaExported=phMediaExported, loIeSlotTable=loIeSlotTable, loDriveSegSize=loDriveSegSize, rasTicketTimeClosed=rasTicketTimeClosed, fcPortPreferredType=fcPortPreferredType, tapeDriveRemoved=tapeDriveRemoved, loIeSegTable=loIeSegTable, phTransportTable=phTransportTable, previousFirmwareVersion=previousFirmwareVersion, serialNumber=serialNumber, physLibraryOnlineStatusChange=physLibraryOnlineStatusChange, rasReportOrcData=rasReportOrcData, loSegmentBelongsToTable=loSegmentBelongsToTable, udpPort=udpPort, licenseKeyAppliedDate=licenseKeyAppliedDate, phIeSegTable=phIeSegTable, rasStatusGroupTextSummary=rasStatusGroupTextSummary, registrationRowStatus=registrationRowStatus, processRowStatus=processRowStatus, autoPartitionTable=autoPartitionTable, phIeSegSize=phIeSegSize, freeSpace=freeSpace, phStorageRow=phStorageRow, autoCalibrateMode=autoCalibrateMode, phCleaningSegEntry=phCleaningSegEntry, logicalSNAdressingMode=logicalSNAdressingMode, phSegmentCodStatus=phSegmentCodStatus, rasTicketEntry=rasTicketEntry, numCleaningCartridges=numCleaningCartridges, phDriveStatHistoryEntry=phDriveStatHistoryEntry, phIeSegOnlineStatus=phIeSegOnlineStatus, loLtoTapeTags=loLtoTapeTags, rasReportTimestamp=rasReportTimestamp, phHourlyMBytesRead=phHourlyMBytesRead, loStatisticsTable=loStatisticsTable, masterOnlineStatus=masterOnlineStatus, mediaDismounted=mediaDismounted, moveMediaComplete=moveMediaComplete, rasStatusGroupPreviousStatus=rasStatusGroupPreviousStatus, loDriveSegMediaType=loDriveSegMediaType, logicalLibraryDeleted=logicalLibraryDeleted, phSegmentStartingRow=phSegmentStartingRow, physicalLibrary=physicalLibrary, phDriveRow=phDriveRow, loDriveSegEntry=loDriveSegEntry, licenseKeyExpirationDate=licenseKeyExpirationDate, phSegmentStatus=phSegmentStatus, phDriveMbytesRead=phDriveMbytesRead, rcuInstallProcessStatus=rcuInstallProcessStatus, phCleaningMediaUseCount=phCleaningMediaUseCount, automaticCleaning=automaticCleaning, loSegmentTable=loSegmentTable, loStatus=loStatus, phMediaType=phMediaType, loIeSegReserve=loIeSegReserve, phSegmentEntry=phSegmentEntry, phCleaningMediaEntry=phCleaningMediaEntry, numStorageCartridges=numStorageCartridges, loIeSlotEntry=loIeSlotEntry, loSegmentSize=loSegmentSize, rasStatusGroupLastChange=rasStatusGroupLastChange, loSegmentStatus=loSegmentStatus, phTransportDomainEntry=phTransportDomainEntry, phSegmentType=phSegmentType, rasFruStatState=rasFruStatState, phStorageSlotTable=phStorageSlotTable, productId=productId, physLibraryDoorStatusChange=physLibraryDoorStatusChange, systemManagerEntry=systemManagerEntry, featureName=featureName, loDriveEntry=loDriveEntry, phDriveFcPortId=phDriveFcPortId, mediaDomainEntry=mediaDomainEntry, loStatsNumScanRetries=loStatsNumScanRetries, logTable=logTable, AdicSegmentType=AdicSegmentType, mediaDomainName=mediaDomainName, loSegmentCol=loSegmentCol, managementMibVersion=managementMibVersion, onlineStatus=onlineStatus, rcuNotReady=rcuNotReady, drivesAndMediaGroupStatusChange=drivesAndMediaGroupStatusChange, loStorageRow=loStorageRow, loStorageSegSize=loStorageSegSize, logRetrievalComplete=logRetrievalComplete, phMediaCapacity=phMediaCapacity, loSegmentBelongsToEntry=loSegmentBelongsToEntry, phSegStartingAddress=phSegStartingAddress, vendorIdIndex=vendorIdIndex, loMediaTypeCheckingPolicy=loMediaTypeCheckingPolicy, phFrameEntry=phFrameEntry, phDriveSerialNumber=phDriveSerialNumber, rasTicketFilterTable=rasTicketFilterTable, licenseKeyRowStatus=licenseKeyRowStatus, phDriveSegTable=phDriveSegTable, mediaTypeTable=mediaTypeTable, loSegmentCommand=loSegmentCommand, productSlotsMax=productSlotsMax, fcPortNegotiatedSpeed=fcPortNegotiatedSpeed, dhcpStatus=dhcpStatus, loDriveSegStartingAddress=loDriveSegStartingAddress, speedAutoNegotiation=speedAutoNegotiation, installStatusText=installStatusText, phIeMediaPresent=phIeMediaPresent, numCleaningSlots=numCleaningSlots, phDriveWwPortName=phDriveWwPortName, phIeSegCommand=phIeSegCommand, rasFruStatLastReportTime=rasFruStatLastReportTime, phDriveScsiLun=phDriveScsiLun, fcbInstallStatusText=fcbInstallStatusText, downloadedFirmwareVersion=downloadedFirmwareVersion, loSegmentSection=loSegmentSection, physLibraryConfigurationChange=physLibraryConfigurationChange, numDrives=numDrives, phMediaImportTimestamp=phMediaImportTimestamp, rasStatusGroupStatus=rasStatusGroupStatus, globalStatus=globalStatus, userLibAccessList=userLibAccessList, ipAddress=ipAddress, AdicInstallStatus=AdicInstallStatus, numIeElements=numIeElements, rasReportGroupStatus=rasReportGroupStatus, installCommand=installCommand, driveBrickFwUpdateSuccess=driveBrickFwUpdateSuccess, preferredSpeed=preferredSpeed, rasTicketTable=rasTicketTable, rasFruStatIndex=rasFruStatIndex, numStorageElements=numStorageElements, phDriveErrorCodeBytes=phDriveErrorCodeBytes, numLogicalLibraries=numLogicalLibraries, enableDaylightSavingsTime=enableDaylightSavingsTime, physLibraryRESChange=physLibraryRESChange, vendorIdTable=vendorIdTable, phCleaningSegTable=phCleaningSegTable, loIeSegEntry=loIeSegEntry, phCleaningMediaTable=phCleaningMediaTable, AdicStatusGroup=AdicStatusGroup, phDriveStatus=phDriveStatus, phStorageElementAddr=phStorageElementAddr, rasTicketCount=rasTicketCount, loSegmentAisle=loSegmentAisle, numElementDomains=numElementDomains, loIeRow=loIeRow, phDriveInterfaceType=phDriveInterfaceType, rasReportEntry=rasReportEntry, licenseFeatureEntry=licenseFeatureEntry, phMediaEntry=phMediaEntry, numPhFrames=numPhFrames, mediaType=mediaType, phGeneralInfoEntry=phGeneralInfoEntry, fcbInstallProcessStatus=fcbInstallProcessStatus, licensableFeatureName=licensableFeatureName, rasFruStatFruId=rasFruStatFruId, phDriveStatHistoryTable=phDriveStatHistoryTable, phStorageSegEntry=phStorageSegEntry, cmbInstallStatusText=cmbInstallStatusText, phCleaningSegSize=phCleaningSegSize, phDriveFcLoopIdMode=phDriveFcLoopIdMode, networkTimeEnable=networkTimeEnable, rasReportRepeatCounter=rasReportRepeatCounter, numPhIESlots=numPhIESlots, rasTicketRowStatus=rasTicketRowStatus, phDriveFcLoopId=phDriveFcLoopId, numSlots=numSlots, controlGroupStatusChange=controlGroupStatusChange, totalUsedCapacity=totalUsedCapacity, phTransportEntry=phTransportEntry, vendorId=vendorId, numAutoPartition=numAutoPartition, phDriveSegEntry=phDriveSegEntry, loSegmentType=loSegmentType, phHourlyMounts=phHourlyMounts, security=security, loStorageSlotTable=loStorageSlotTable, phDriveWriteProtected=phDriveWriteProtected, loSegmentRack=loSegmentRack, phSegmentFrame=phSegmentFrame, assignedLun=assignedLun, operatingMode=operatingMode, logicalLibraryOnlineStatusChange=logicalLibraryOnlineStatusChange, phMediaExportTimestamp=phMediaExportTimestamp, phIeStationDoorStatus=phIeStationDoorStatus, loDriveRow=loDriveRow, phIeMediaId=phIeMediaId, rasStatusGroupTotalTickets=rasStatusGroupTotalTickets, installPackageName=installPackageName, numIE=numIE, rasReportHeadReport=rasReportHeadReport, logicalLibraryActivity=logicalLibraryActivity, rasTicketGroupStatus=rasTicketGroupStatus, loStorageSegEntry=loStorageSegEntry, phCleaningMediaVendorId=phCleaningMediaVendorId, loStatsNumPuts=loStatsNumPuts, rasTicketFilterSeverity=rasTicketFilterSeverity, numProductIds=numProductIds, loNumRecoveredGets=loNumRecoveredGets, phSegmentAisle=phSegmentAisle, phDriveElementAddr=phDriveElementAddr, phDriveSegInterfaceType=phDriveSegInterfaceType, phDriveRasStatus=phDriveRasStatus, rasReportSerialNumber=rasReportSerialNumber, phIeElementAddr=phIeElementAddr, productIdName=productIdName, loInterfaceType=loInterfaceType, coolingGroupStatusChange=coolingGroupStatusChange, totalQuantityLicensed=totalQuantityLicensed, driveBrickFwUpdateFailure=driveBrickFwUpdateFailure, capacity=capacity, AdicEthernetSpeed=AdicEthernetSpeed)
