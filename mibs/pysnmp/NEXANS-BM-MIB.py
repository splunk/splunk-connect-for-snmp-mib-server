#
# PySNMP MIB module NEXANS-BM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NEXANS-BM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:11:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
nexansANS, = mibBuilder.importSymbols("NEXANS-MIB", "nexansANS")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Unsigned32, NotificationType, iso, Bits, TimeTicks, Gauge32, ObjectIdentity, Counter64, MibIdentifier, ModuleIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Unsigned32", "NotificationType", "iso", "Bits", "TimeTicks", "Gauge32", "ObjectIdentity", "Counter64", "MibIdentifier", "ModuleIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32")
TextualConvention, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "MacAddress")
bmSwitchMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 266, 20))
bmSwitchMIB.setRevisions(('2014-01-29 00:00',))
if mibBuilder.loadTexts: bmSwitchMIB.setLastUpdated('201401290000Z')
if mibBuilder.loadTexts: bmSwitchMIB.setOrganization('Nexans Advanced Networking Solutions')
bmTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 266, 20, 0))
bmSwitchInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 266, 20, 1))
bmSwitchAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 266, 20, 2))
bmSwitchPort = MibIdentifier((1, 3, 6, 1, 4, 1, 266, 20, 3))
bmSwitchVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 266, 20, 4))
bmSwitchSfp = MibIdentifier((1, 3, 6, 1, 4, 1, 266, 20, 5))
infoDescr = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoDescr.setStatus('current')
infoType = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoType.setStatus('current')
infoProductNo = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoProductNo.setStatus('current')
infoSerie = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSerie.setStatus('current')
infoSeriesNo = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSeriesNo.setStatus('current')
infoManufactureDate = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoManufactureDate.setStatus('current')
infoSwitchHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSwitchHardwareVersion.setStatus('current')
infoMgmtHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoMgmtHardwareVersion.setStatus('current')
infoMgmtFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoMgmtFirmwareVersion.setStatus('current')
infoNoOfPorts = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoNoOfPorts.setStatus('current')
infoNoOfReboots = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoNoOfReboots.setStatus('current')
infoTemperature = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoTemperature.setStatus('current')
infoTemperatureMaxAllowed = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoTemperatureMaxAllowed.setStatus('current')
infoPowerVoltage2500 = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoPowerVoltage2500.setStatus('current')
infoPowerVoltage3300 = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoPowerVoltage3300.setStatus('current')
infoUnauthIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 1, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoUnauthIpAddr.setStatus('current')
infoSecurityFailMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoSecurityFailMacAddr.setStatus('current')
infoNewMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoNewMacAddr.setStatus('current')
infoPoeInputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoPoeInputVoltage.setStatus('current')
infoPoeInputPower = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoPoeInputPower.setStatus('current')
infoAlarmStateM1 = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("notSupported", 1), ("alarmOff", 2), ("alarmOn", 3), ("alarmOnLinkDown", 4), ("alarmOnForced", 5), ("alarmOffForced", 6), ("alarmOnPowerSupplyS1", 7), ("alarmOnPowerSupplyS2", 8), ("alarmOnPowerSupplyS1orS2", 9), ("alarmOnFunctionInputShorted", 10), ("alarmOnFunctionInputOpen", 11), ("alarmOnRemoteFunctionInput", 12), ("alarmOnRemoteAlarmDestTable", 13), ("alarmOnLocalAlarmDestTable", 14), ("alarmContactForcedShorted", 15), ("alarmContactForcedOpen", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoAlarmStateM1.setStatus('current')
infoAlarmStateM2 = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("notSupported", 1), ("alarmOff", 2), ("alarmOn", 3), ("alarmOnLinkDown", 4), ("alarmOnForced", 5), ("alarmOffForced", 6), ("alarmOnPowerSupplyS1", 7), ("alarmOnPowerSupplyS2", 8), ("alarmOnPowerSupplyS1orS2", 9), ("alarmOnFunctionInputShorted", 10), ("alarmOnFunctionInputOpen", 11), ("alarmOnRemoteFunctionInput", 12), ("alarmOnRemoteAlarmDestTable", 13), ("alarmOnLocalAlarmDestTable", 14), ("alarmContactForcedShorted", 15), ("alarmContactForcedOpen", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoAlarmStateM2.setStatus('current')
infoLastTftpMessage = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: infoLastTftpMessage.setStatus('current')
infoLastSfpEventMessage = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: infoLastSfpEventMessage.setStatus('current')
infoLastInternalMgmtWarning = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: infoLastInternalMgmtWarning.setStatus('current')
infoFunctionInputStateF1 = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("functionInputShorted", 2), ("functionInputOpen", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoFunctionInputStateF1.setStatus('current')
infoTotalConfigChanges = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoTotalConfigChanges.setStatus('current')
adminReset = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("resetIdle", 1), ("resetCounters", 2), ("rebootSwitch", 3), ("rebootToFactoryDefaults", 4), ("renewIpAndVlanParameter", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminReset.setStatus('current')
adminAgentDhcp = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminAgentDhcp.setStatus('current')
adminAgentIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminAgentIpAddress.setStatus('current')
adminAgentPhysAddress = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 2, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminAgentPhysAddress.setStatus('current')
adminAgentDefRouterIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 2, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminAgentDefRouterIpAddress.setStatus('current')
adminAgentNetmask = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 2, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminAgentNetmask.setStatus('current')
adminAgentDhcpServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 2, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminAgentDhcpServerIpAddress.setStatus('current')
adminAgentVlanId = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminAgentVlanId.setStatus('current')
adminAgentPrioValue = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminAgentPrioValue.setStatus('current')
adminAddrAgingTimeMinutes = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 68)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminAddrAgingTimeMinutes.setStatus('current')
adminSwitchPortMirror = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminSwitchPortMirror.setStatus('current')
adminMgmtAccessList = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("enableForNexManAccess", 2), ("enableForAllAccess", 3), ("enableForSnmpAccess", 4))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminMgmtAccessList.setStatus('current')
adminSwitchPoEPowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 2, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminSwitchPoEPowerLimit.setStatus('current')
adminSwitchVlanTableMode = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("staticMode", 1), ("dynamicMode", 2), ("staticModeVlans64", 3), ("staticModePortBased", 4))).clone('staticMode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminSwitchVlanTableMode.setStatus('current')
adminUnsecureVlanId = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminUnsecureVlanId.setStatus('current')
adminDot1xAuthFailureVlanId = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminDot1xAuthFailureVlanId.setStatus('current')
adminTftpAccess = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tftpAccessDisable", 1), ("tftpAccessReadOnly", 2), ("tftpAccessReadWrite", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminTftpAccess.setStatus('current')
adminSnmpMacTableMode = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("listAllPorts", 1), ("listUserPortsOnly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminSnmpMacTableMode.setStatus('current')
adminAlarmM1 = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("notSupported", 1), ("alarmLinkDown", 2), ("alarmOnForced", 3), ("alarmOffForced", 4), ("alarmPowerSupply1Failure", 5), ("alarmPowerSupply2Failure", 6), ("alarmPowerSupply1or2Failure", 7), ("alarmLocalFunctionInputShorted", 8), ("alarmLocalFunctionInputOpen", 9), ("alarmRemoteFunctionInput", 10), ("alarmRemoteAlarmDestination", 11), ("alarmLocalAlarmDestination", 12), ("alarmForceContactShorted", 13), ("alarmForceContactOpen", 14), ("alarmForceContactOpenShorted", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminAlarmM1.setStatus('current')
adminAlarmM2 = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("notSupported", 1), ("alarmLinkDown", 2), ("alarmOnForced", 3), ("alarmOffForced", 4), ("alarmPowerSupply1Failure", 5), ("alarmPowerSupply2Failure", 6), ("alarmPowerSupply1or2Failure", 7), ("alarmLocalFunctionInputShorted", 8), ("alarmLocalFunctionInputOpen", 9), ("alarmRemoteFunctionInput", 10), ("alarmRemoteAlarmDestination", 11), ("alarmLocalAlarmDestination", 12), ("alarmForceContactShorted", 13), ("alarmForceContactOpen", 14), ("alarmForceContactOpenShorted", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminAlarmM2.setStatus('current')
adminMemoryCardMode = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notSupported", 1), ("mcEnabled", 2), ("mcDisabled", 3), ("mcPermanentDisabled", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminMemoryCardMode.setStatus('current')
adminAlarmNameM1 = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 2, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('not defined')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminAlarmNameM1.setStatus('current')
adminAlarmNameM2 = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 2, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('not defined')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminAlarmNameM2.setStatus('current')
adminFunctionInputNameF1 = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 2, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('not defined')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminFunctionInputNameF1.setStatus('current')
adminLedGlobalMode = MibScalar((1, 3, 6, 1, 4, 1, 266, 20, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ledGlobalModeNotSupported", 1), ("ledGlobalModeStandard", 2), ("ledGlobalModeAllOff", 3), ("ledGlobalModeAllOn", 4), ("ledGlobalModeMgmtOnly", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminLedGlobalMode.setStatus('current')
bmSwitchPortTable = MibTable((1, 3, 6, 1, 4, 1, 266, 20, 3, 1), )
if mibBuilder.loadTexts: bmSwitchPortTable.setStatus('current')
bmSwitchPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 266, 20, 3, 1, 1), ).setIndexNames((0, "NEXANS-BM-MIB", "portIndex"))
if mibBuilder.loadTexts: bmSwitchPortEntry.setStatus('current')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIndex.setStatus('current')
portDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portDescr.setStatus('current')
portName = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portName.setStatus('current')
portAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("allwaysEnable", 1), ("enable", 2), ("adminDisable", 3), ("securityDisable", 4), ("loopDisable", 5), ("bpduDisable", 6), ("udldDisable", 7), ("linkFlapDisable", 8), ("errorCountDisable", 9), ("sfpErrorDisable", 10), ("redundanyLoopDisable", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portAdminState.setStatus('current')
portSpeedDuplexSetup = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("autoneg", 1), ("fix10Hdx", 2), ("fix10Fdx", 3), ("fix100Hdx", 4), ("fix100Fdx", 5), ("fix1000Hdx", 7), ("fix1000Fdx", 8), ("eco", 9), ("ecoOverTemp", 10), ("ecoPowerSave", 11), ("fix1000fdxNoAutoneg", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSpeedDuplexSetup.setStatus('current')
portLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("down", 1), ("up10Hdx", 2), ("up10Fdx", 3), ("up100Hdx", 4), ("up100Fdx", 5), ("up1000Hdx", 6), ("up1000Fdx", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLinkState.setStatus('current')
portErrorCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portErrorCounter.setStatus('current')
portRemoteFault = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portRemoteFault.setStatus('current')
portDefaultVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDefaultVlanId.setStatus('current')
portTrunkingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dot1qTagging", 1), ("disable", 2), ("enableWithoutTagging", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTrunkingMode.setStatus('current')
portDot1qDefaultPrioValue = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDot1qDefaultPrioValue.setStatus('current')
portDefaultPrioQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portDefaultPrioQueue.setStatus('current')
portLEDGreen = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notSupported", 1), ("showLinkState", 2), ("blink", 3), ("allwaysOff", 4), ("allwaysOn", 5), ("showLinkSpeedDuplex", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLEDGreen.setStatus('current')
portLEDYellow = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notSupported", 1), ("showDuplexState", 2), ("blink", 3), ("allwaysOff", 4), ("allwaysOn", 5), ("showPoeEnabled", 6), ("showSpeed", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLEDYellow.setStatus('current')
portBandwidthLimitRxd = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("notSupported", 1), ("disable", 2), ("limit128k", 3), ("limit256k", 4), ("limit512k", 5), ("limit1M", 6), ("limit2M", 7), ("limit4M", 8), ("limit8M", 9), ("limit16M", 10), ("limit32M", 11), ("limit64M", 12), ("limit128M", 13), ("limit256M", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBandwidthLimitRxd.setStatus('current')
portBandwidthLimitTxd = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("notSupported", 1), ("disable", 2), ("limit128k", 3), ("limit256k", 4), ("limit512k", 5), ("limit1M", 6), ("limit2M", 7), ("limit4M", 8), ("limit8M", 9), ("limit16M", 10), ("limit32M", 11), ("limit64M", 12), ("limit128M", 13), ("limit256M", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBandwidthLimitTxd.setStatus('current')
portSecurityAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("notSupported", 1), ("disable", 2), ("manualSettingMacAddr", 3), ("autoAllowOneMacAddr", 4), ("autoAllowTwoMacAddr", 5), ("autoAllowThreeMacAddr", 6), ("radiusAllowOneMacAddr", 7), ("radiusAllowTwoMacAddr", 8), ("radiusAllowThreeMacAddr", 9), ("renew", 10), ("ieee802AllowOneMacAddr", 11), ("vendorSettingMacAddr", 12), ("ieee802AllowMultiMacAddr", 13), ("ieee802OrRadiusOneMac", 14), ("ieee802AndRadiusTwoMac", 15), ("learnOneMacAddr", 16), ("learnTwoMacAddr", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecurityAdminState.setStatus('current')
portSecurityMacAddr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 3, 1, 1, 18), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecurityMacAddr1.setStatus('current')
portSecurityMacAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 3, 1, 1, 19), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecurityMacAddr2.setStatus('current')
portSecurityMacAddr3 = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 3, 1, 1, 20), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecurityMacAddr3.setStatus('current')
portPoeAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notSupported", 1), ("off", 2), ("forcedOn", 3), ("autoOn", 4), ("overloadFail", 5), ("reset", 6), ("afHighPower", 7), ("atHighPower", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPoeAdminState.setStatus('current')
portPoeVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 3, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPoeVoltage.setStatus('current')
portPoeCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 3, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPoeCurrent.setStatus('current')
portPoePower = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 3, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPoePower.setStatus('current')
portSecurityForwardingState = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 3, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("notSupported", 1), ("portAdminDisabled", 2), ("waitingForLink", 3), ("unsecureVLAN", 4), ("portAuthenticated", 5), ("portSecurityDisabled", 6), ("portLoopDisabled", 7), ("authFailureVLAN", 8), ("securityWarning", 9), ("authenticatingClients", 10), ("waitingForMacAddress", 11), ("allRadiusServersDown", 12), ("portBpduDisabled", 13), ("portUdldDisabled", 14), ("portLinkFlapDisabled", 15), ("portErrorCountDisabled", 16), ("portSfpErrorDisabled", 17), ("portRedundanyLoopDisable", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecurityForwardingState.setStatus('current')
portPoePowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 3, 1, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPoePowerLimit.setStatus('current')
portLimiterPacketType = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 3, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notSupported", 1), ("limitAllPackets", 2), ("limitLoopBcastPackets", 3), ("limitAllPacketsBurstsAllowed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLimiterPacketType.setStatus('current')
portAcApSetup = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 3, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notSupported", 1), ("allwaysEnable", 2), ("enable", 3), ("disable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portAcApSetup.setStatus('current')
portLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 3, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("user", 1), ("userWithLoopProtection", 2), ("upDownlink", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLinkType.setStatus('current')
portVoiceVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 3, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVoiceVlanId.setStatus('current')
portPrioDot1p = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 3, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("prioDot1pDisabled", 1), ("prioDot1pEnabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPrioDot1p.setStatus('current')
portPrioIp = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 3, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("prioIpDisabled", 1), ("prioIpEnabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPrioIp.setStatus('current')
bmSwitchVlanTable = MibTable((1, 3, 6, 1, 4, 1, 266, 20, 4, 1), )
if mibBuilder.loadTexts: bmSwitchVlanTable.setStatus('current')
bmSwitchVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 266, 20, 4, 1, 1), ).setIndexNames((0, "NEXANS-BM-MIB", "vlanIndex"))
if mibBuilder.loadTexts: bmSwitchVlanEntry.setStatus('current')
vlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanIndex.setStatus('current')
vlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanId.setStatus('current')
vlanDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanDescr.setStatus('current')
bmSwitchSfpTable = MibTable((1, 3, 6, 1, 4, 1, 266, 20, 5, 1), )
if mibBuilder.loadTexts: bmSwitchSfpTable.setStatus('current')
bmSwitchSfpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 266, 20, 5, 1, 1), ).setIndexNames((0, "NEXANS-BM-MIB", "sfpPortIndex"))
if mibBuilder.loadTexts: bmSwitchSfpEntry.setStatus('current')
sfpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpPortIndex.setStatus('current')
sfpState = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notSupported", 1), ("noSfpInserted", 2), ("validSfpNoDiagnostic", 3), ("validSfpWithDiagnostic", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpState.setStatus('current')
sfpInfoVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpInfoVendorName.setStatus('current')
sfpInfoPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 5, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpInfoPartNumber.setStatus('current')
sfpInfoRevisionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 5, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpInfoRevisionNumber.setStatus('current')
sfpInfoSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 5, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpInfoSerialNumber.setStatus('current')
sfpInfoDateCode = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 5, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpInfoDateCode.setStatus('current')
sfpInfoBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 5, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpInfoBitRate.setStatus('current')
sfpInfoWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 5, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpInfoWavelength.setStatus('current')
sfpInfoLength9um = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 5, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpInfoLength9um.setStatus('current')
sfpInfoLength50um = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 5, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpInfoLength50um.setStatus('current')
sfpInfoLength62um = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 5, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpInfoLength62um.setStatus('current')
sfpInfoConnectorDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 5, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpInfoConnectorDescr.setStatus('current')
sfpDiagTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 5, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagTemperature.setStatus('current')
sfpDiagSupplyVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 5, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagSupplyVoltage.setStatus('current')
sfpDiagTxBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 5, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagTxBiasCurrent.setStatus('current')
sfpDiagTxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 5, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagTxOutputPower.setStatus('current')
sfpDiagTxOutputPowerDbm = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 5, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagTxOutputPowerDbm.setStatus('current')
sfpDiagRxIntputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 5, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagRxIntputPower.setStatus('current')
sfpDiagRxInputPowerDbm = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 5, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagRxInputPowerDbm.setStatus('current')
sfpAlarmTxBiasCurrentUpperLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 5, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpAlarmTxBiasCurrentUpperLimit.setStatus('current')
sfpAlarmTxOutputPowerLowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 5, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpAlarmTxOutputPowerLowerLimit.setStatus('current')
sfpAlarmRxInputPowerLowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 266, 20, 5, 1, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpAlarmRxInputPowerLowerLimit.setStatus('current')
switchTemperatureFailure = NotificationType((1, 3, 6, 1, 4, 1, 266, 20, 0, 1)).setObjects(("NEXANS-BM-MIB", "infoTemperature"))
if mibBuilder.loadTexts: switchTemperatureFailure.setStatus('current')
portLinkChange = NotificationType((1, 3, 6, 1, 4, 1, 266, 20, 0, 2)).setObjects(("NEXANS-BM-MIB", "portIndex"), ("NEXANS-BM-MIB", "portDescr"), ("NEXANS-BM-MIB", "portName"), ("NEXANS-BM-MIB", "portLinkState"))
if mibBuilder.loadTexts: portLinkChange.setStatus('current')
portNewMacAddress = NotificationType((1, 3, 6, 1, 4, 1, 266, 20, 0, 3)).setObjects(("NEXANS-BM-MIB", "portIndex"), ("NEXANS-BM-MIB", "portDescr"), ("NEXANS-BM-MIB", "portName"), ("NEXANS-BM-MIB", "infoNewMacAddr"))
if mibBuilder.loadTexts: portNewMacAddress.setStatus('current')
portSecurityFailure = NotificationType((1, 3, 6, 1, 4, 1, 266, 20, 0, 4)).setObjects(("NEXANS-BM-MIB", "portIndex"), ("NEXANS-BM-MIB", "portDescr"), ("NEXANS-BM-MIB", "portName"), ("NEXANS-BM-MIB", "infoSecurityFailMacAddr"))
if mibBuilder.loadTexts: portSecurityFailure.setStatus('current')
portErrorCountFailure = NotificationType((1, 3, 6, 1, 4, 1, 266, 20, 0, 5)).setObjects(("NEXANS-BM-MIB", "portIndex"), ("NEXANS-BM-MIB", "portDescr"), ("NEXANS-BM-MIB", "portName"), ("NEXANS-BM-MIB", "portErrorCounter"))
if mibBuilder.loadTexts: portErrorCountFailure.setStatus('current')
switchMgmtAuthFailure = NotificationType((1, 3, 6, 1, 4, 1, 266, 20, 0, 6)).setObjects(("NEXANS-BM-MIB", "infoUnauthIpAddr"))
if mibBuilder.loadTexts: switchMgmtAuthFailure.setStatus('current')
radiusMgmtAuthReject = NotificationType((1, 3, 6, 1, 4, 1, 266, 20, 0, 7)).setObjects(("NEXANS-BM-MIB", "infoUnauthIpAddr"))
if mibBuilder.loadTexts: radiusMgmtAuthReject.setStatus('current')
radiusPortSecurityReject = NotificationType((1, 3, 6, 1, 4, 1, 266, 20, 0, 8)).setObjects(("NEXANS-BM-MIB", "portIndex"), ("NEXANS-BM-MIB", "portDescr"), ("NEXANS-BM-MIB", "portName"), ("NEXANS-BM-MIB", "infoSecurityFailMacAddr"))
if mibBuilder.loadTexts: radiusPortSecurityReject.setStatus('current')
portLoopBcastFailure = NotificationType((1, 3, 6, 1, 4, 1, 266, 20, 0, 9)).setObjects(("NEXANS-BM-MIB", "portIndex"), ("NEXANS-BM-MIB", "portDescr"), ("NEXANS-BM-MIB", "portName"))
if mibBuilder.loadTexts: portLoopBcastFailure.setStatus('current')
switchPoeVoltageFailure = NotificationType((1, 3, 6, 1, 4, 1, 266, 20, 0, 10)).setObjects(("NEXANS-BM-MIB", "infoPoeInputVoltage"))
if mibBuilder.loadTexts: switchPoeVoltageFailure.setStatus('current')
switchPoeOverloadFailure = NotificationType((1, 3, 6, 1, 4, 1, 266, 20, 0, 11)).setObjects(("NEXANS-BM-MIB", "infoPoeInputPower"))
if mibBuilder.loadTexts: switchPoeOverloadFailure.setStatus('current')
portPoeOverloadFailure = NotificationType((1, 3, 6, 1, 4, 1, 266, 20, 0, 12)).setObjects(("NEXANS-BM-MIB", "portIndex"), ("NEXANS-BM-MIB", "portDescr"), ("NEXANS-BM-MIB", "portName"), ("NEXANS-BM-MIB", "portPoePower"))
if mibBuilder.loadTexts: portPoeOverloadFailure.setStatus('current')
portActiveLoopDetectionFailure = NotificationType((1, 3, 6, 1, 4, 1, 266, 20, 0, 13)).setObjects(("NEXANS-BM-MIB", "portIndex"), ("NEXANS-BM-MIB", "portDescr"), ("NEXANS-BM-MIB", "portName"))
if mibBuilder.loadTexts: portActiveLoopDetectionFailure.setStatus('current')
switchIndustrialAlarmM1 = NotificationType((1, 3, 6, 1, 4, 1, 266, 20, 0, 14)).setObjects(("NEXANS-BM-MIB", "infoAlarmStateM1"), ("NEXANS-BM-MIB", "adminAlarmNameM1"))
if mibBuilder.loadTexts: switchIndustrialAlarmM1.setStatus('current')
switchIndustrialAlarmM2 = NotificationType((1, 3, 6, 1, 4, 1, 266, 20, 0, 15)).setObjects(("NEXANS-BM-MIB", "infoAlarmStateM2"), ("NEXANS-BM-MIB", "adminAlarmNameM2"))
if mibBuilder.loadTexts: switchIndustrialAlarmM2.setStatus('current')
switchInternalVoltageFailure = NotificationType((1, 3, 6, 1, 4, 1, 266, 20, 0, 16)).setObjects(("NEXANS-BM-MIB", "infoPowerVoltage2500"), ("NEXANS-BM-MIB", "infoPowerVoltage3300"))
if mibBuilder.loadTexts: switchInternalVoltageFailure.setStatus('current')
tftpMessage = NotificationType((1, 3, 6, 1, 4, 1, 266, 20, 0, 17)).setObjects(("NEXANS-BM-MIB", "infoLastTftpMessage"))
if mibBuilder.loadTexts: tftpMessage.setStatus('current')
sfpEvent = NotificationType((1, 3, 6, 1, 4, 1, 266, 20, 0, 18)).setObjects(("NEXANS-BM-MIB", "portIndex"), ("NEXANS-BM-MIB", "portDescr"), ("NEXANS-BM-MIB", "portName"), ("NEXANS-BM-MIB", "infoLastSfpEventMessage"))
if mibBuilder.loadTexts: sfpEvent.setStatus('current')
clientRemoved = NotificationType((1, 3, 6, 1, 4, 1, 266, 20, 0, 19)).setObjects(("NEXANS-BM-MIB", "portIndex"), ("NEXANS-BM-MIB", "portDescr"), ("NEXANS-BM-MIB", "portName"))
if mibBuilder.loadTexts: clientRemoved.setStatus('current')
internalMgmtWarning = NotificationType((1, 3, 6, 1, 4, 1, 266, 20, 0, 20)).setObjects(("NEXANS-BM-MIB", "infoLastInternalMgmtWarning"))
if mibBuilder.loadTexts: internalMgmtWarning.setStatus('current')
switchFunctionInputAlarm = NotificationType((1, 3, 6, 1, 4, 1, 266, 20, 0, 21)).setObjects(("NEXANS-BM-MIB", "infoFunctionInputStateF1"), ("NEXANS-BM-MIB", "adminFunctionInputNameF1"))
if mibBuilder.loadTexts: switchFunctionInputAlarm.setStatus('current')
switchConfigurationChanged = NotificationType((1, 3, 6, 1, 4, 1, 266, 20, 0, 22)).setObjects(("NEXANS-BM-MIB", "infoTotalConfigChanges"))
if mibBuilder.loadTexts: switchConfigurationChanged.setStatus('current')
portErrorDisabled = NotificationType((1, 3, 6, 1, 4, 1, 266, 20, 0, 23)).setObjects(("NEXANS-BM-MIB", "portIndex"), ("NEXANS-BM-MIB", "portDescr"), ("NEXANS-BM-MIB", "portName"), ("NEXANS-BM-MIB", "portAdminState"))
if mibBuilder.loadTexts: portErrorDisabled.setStatus('current')
mibBuilder.exportSymbols("NEXANS-BM-MIB", sfpInfoDateCode=sfpInfoDateCode, switchPoeOverloadFailure=switchPoeOverloadFailure, portVoiceVlanId=portVoiceVlanId, infoAlarmStateM1=infoAlarmStateM1, sfpInfoLength62um=sfpInfoLength62um, sfpAlarmRxInputPowerLowerLimit=sfpAlarmRxInputPowerLowerLimit, infoNewMacAddr=infoNewMacAddr, bmSwitchSfpTable=bmSwitchSfpTable, infoTemperatureMaxAllowed=infoTemperatureMaxAllowed, sfpInfoPartNumber=sfpInfoPartNumber, adminAgentDhcpServerIpAddress=adminAgentDhcpServerIpAddress, infoPoeInputPower=infoPoeInputPower, portDot1qDefaultPrioValue=portDot1qDefaultPrioValue, sfpState=sfpState, portLinkChange=portLinkChange, portDescr=portDescr, portDefaultPrioQueue=portDefaultPrioQueue, switchInternalVoltageFailure=switchInternalVoltageFailure, adminAlarmM1=adminAlarmM1, bmSwitchInfo=bmSwitchInfo, adminAgentIpAddress=adminAgentIpAddress, adminTftpAccess=adminTftpAccess, portRemoteFault=portRemoteFault, infoNoOfPorts=infoNoOfPorts, portPoeVoltage=portPoeVoltage, infoAlarmStateM2=infoAlarmStateM2, adminAgentDhcp=adminAgentDhcp, infoProductNo=infoProductNo, portLinkType=portLinkType, bmSwitchPort=bmSwitchPort, bmSwitchVlanTable=bmSwitchVlanTable, adminAlarmM2=adminAlarmM2, sfpPortIndex=sfpPortIndex, portErrorDisabled=portErrorDisabled, portBandwidthLimitRxd=portBandwidthLimitRxd, infoMgmtFirmwareVersion=infoMgmtFirmwareVersion, infoSwitchHardwareVersion=infoSwitchHardwareVersion, portPoeCurrent=portPoeCurrent, sfpAlarmTxBiasCurrentUpperLimit=sfpAlarmTxBiasCurrentUpperLimit, adminFunctionInputNameF1=adminFunctionInputNameF1, portPrioIp=portPrioIp, infoDescr=infoDescr, sfpDiagTemperature=sfpDiagTemperature, infoType=infoType, bmSwitchAdmin=bmSwitchAdmin, sfpDiagRxInputPowerDbm=sfpDiagRxInputPowerDbm, portActiveLoopDetectionFailure=portActiveLoopDetectionFailure, switchConfigurationChanged=switchConfigurationChanged, portTrunkingMode=portTrunkingMode, vlanId=vlanId, bmSwitchSfpEntry=bmSwitchSfpEntry, infoPowerVoltage2500=infoPowerVoltage2500, portSecurityFailure=portSecurityFailure, sfpEvent=sfpEvent, sfpInfoWavelength=sfpInfoWavelength, portAdminState=portAdminState, portNewMacAddress=portNewMacAddress, sfpInfoLength9um=sfpInfoLength9um, portPrioDot1p=portPrioDot1p, adminAddrAgingTimeMinutes=adminAddrAgingTimeMinutes, sfpInfoSerialNumber=sfpInfoSerialNumber, bmSwitchVlan=bmSwitchVlan, infoPoeInputVoltage=infoPoeInputVoltage, portLEDGreen=portLEDGreen, portLinkState=portLinkState, portSecurityForwardingState=portSecurityForwardingState, switchIndustrialAlarmM1=switchIndustrialAlarmM1, infoFunctionInputStateF1=infoFunctionInputStateF1, switchTemperatureFailure=switchTemperatureFailure, portPoePower=portPoePower, adminMemoryCardMode=adminMemoryCardMode, portPoeAdminState=portPoeAdminState, adminAlarmNameM2=adminAlarmNameM2, sfpDiagTxBiasCurrent=sfpDiagTxBiasCurrent, adminSwitchPoEPowerLimit=adminSwitchPoEPowerLimit, portName=portName, adminAgentVlanId=adminAgentVlanId, infoTotalConfigChanges=infoTotalConfigChanges, portSecurityMacAddr1=portSecurityMacAddr1, adminSwitchVlanTableMode=adminSwitchVlanTableMode, adminSwitchPortMirror=adminSwitchPortMirror, sfpDiagTxOutputPower=sfpDiagTxOutputPower, sfpInfoRevisionNumber=sfpInfoRevisionNumber, sfpAlarmTxOutputPowerLowerLimit=sfpAlarmTxOutputPowerLowerLimit, portSecurityMacAddr3=portSecurityMacAddr3, adminDot1xAuthFailureVlanId=adminDot1xAuthFailureVlanId, bmSwitchPortEntry=bmSwitchPortEntry, infoManufactureDate=infoManufactureDate, infoSecurityFailMacAddr=infoSecurityFailMacAddr, adminAgentPhysAddress=adminAgentPhysAddress, infoTemperature=infoTemperature, sfpInfoBitRate=sfpInfoBitRate, adminAgentNetmask=adminAgentNetmask, portSpeedDuplexSetup=portSpeedDuplexSetup, infoLastTftpMessage=infoLastTftpMessage, bmSwitchPortTable=bmSwitchPortTable, bmSwitchSfp=bmSwitchSfp, sfpInfoLength50um=sfpInfoLength50um, portIndex=portIndex, portSecurityMacAddr2=portSecurityMacAddr2, sfpDiagTxOutputPowerDbm=sfpDiagTxOutputPowerDbm, adminMgmtAccessList=adminMgmtAccessList, infoLastInternalMgmtWarning=infoLastInternalMgmtWarning, switchIndustrialAlarmM2=switchIndustrialAlarmM2, portErrorCountFailure=portErrorCountFailure, infoUnauthIpAddr=infoUnauthIpAddr, infoPowerVoltage3300=infoPowerVoltage3300, portLimiterPacketType=portLimiterPacketType, adminAgentPrioValue=adminAgentPrioValue, portAcApSetup=portAcApSetup, bmTraps=bmTraps, portBandwidthLimitTxd=portBandwidthLimitTxd, vlanDescr=vlanDescr, clientRemoved=clientRemoved, vlanIndex=vlanIndex, portPoePowerLimit=portPoePowerLimit, bmSwitchMIB=bmSwitchMIB, sfpDiagRxIntputPower=sfpDiagRxIntputPower, adminLedGlobalMode=adminLedGlobalMode, infoSeriesNo=infoSeriesNo, tftpMessage=tftpMessage, radiusMgmtAuthReject=radiusMgmtAuthReject, portErrorCounter=portErrorCounter, infoSerie=infoSerie, infoLastSfpEventMessage=infoLastSfpEventMessage, bmSwitchVlanEntry=bmSwitchVlanEntry, portLEDYellow=portLEDYellow, adminAlarmNameM1=adminAlarmNameM1, radiusPortSecurityReject=radiusPortSecurityReject, adminAgentDefRouterIpAddress=adminAgentDefRouterIpAddress, sfpInfoVendorName=sfpInfoVendorName, internalMgmtWarning=internalMgmtWarning, PYSNMP_MODULE_ID=bmSwitchMIB, switchFunctionInputAlarm=switchFunctionInputAlarm, sfpDiagSupplyVoltage=sfpDiagSupplyVoltage, switchPoeVoltageFailure=switchPoeVoltageFailure, infoNoOfReboots=infoNoOfReboots, infoMgmtHardwareVersion=infoMgmtHardwareVersion, portLoopBcastFailure=portLoopBcastFailure, portDefaultVlanId=portDefaultVlanId, adminReset=adminReset, adminSnmpMacTableMode=adminSnmpMacTableMode, portSecurityAdminState=portSecurityAdminState, adminUnsecureVlanId=adminUnsecureVlanId, sfpInfoConnectorDescr=sfpInfoConnectorDescr, portPoeOverloadFailure=portPoeOverloadFailure, switchMgmtAuthFailure=switchMgmtAuthFailure)
