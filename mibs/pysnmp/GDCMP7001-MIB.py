#
# PySNMP MIB module GDCMP7001-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GDCMP7001-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:05:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
SCinstance, = mibBuilder.importSymbols("GDCMACRO-MIB", "SCinstance")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Unsigned32, ObjectIdentity, IpAddress, TimeTicks, ModuleIdentity, Gauge32, NotificationType, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, iso, MibIdentifier, enterprises, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Unsigned32", "ObjectIdentity", "IpAddress", "TimeTicks", "ModuleIdentity", "Gauge32", "NotificationType", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "iso", "MibIdentifier", "enterprises", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
gdc = MibIdentifier((1, 3, 6, 1, 4, 1, 498))
dsx1 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6))
mp7001System = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 10))
mp7001Version = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 10, 1))
mp7001Maintenance = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 10, 2))
mp7001Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 10, 3))
mp7001Diagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 10, 4))
mp7001Performance = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 10, 5))
mp7001AlarmConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 10, 6))
mp7001SysConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 10, 7))
mp7001MIBversion = MibScalar((1, 3, 6, 1, 4, 1, 498, 6, 10, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001MIBversion.setStatus('mandatory')
mp7001VersionTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 10, 1, 2), )
if mibBuilder.loadTexts: mp7001VersionTable.setStatus('mandatory')
mp7001VersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 10, 1, 2, 1), ).setIndexNames((0, "GDCMP7001-MIB", "mp7001VersionIndex"))
if mibBuilder.loadTexts: mp7001VersionEntry.setStatus('mandatory')
mp7001VersionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 1, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001VersionIndex.setStatus('mandatory')
mp7001FirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001FirmwareRev.setStatus('mandatory')
mp7001CardType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001CardType.setStatus('mandatory')
mp7001BootRev = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001BootRev.setStatus('mandatory')
mp7001MaintenanceTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 10, 2, 1), )
if mibBuilder.loadTexts: mp7001MaintenanceTable.setStatus('mandatory')
mp7001MaintenanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 10, 2, 1, 1), ).setIndexNames((0, "GDCMP7001-MIB", "mp7001MaintenanceLineIndex"))
if mibBuilder.loadTexts: mp7001MaintenanceEntry.setStatus('mandatory')
mp7001MaintenanceLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 2, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001MaintenanceLineIndex.setStatus('mandatory')
mp7001SoftReset = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7001SoftReset.setStatus('mandatory')
mp7001SysUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001SysUpTime.setStatus('mandatory')
mp7001DefaultInit = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("factoryDefault", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7001DefaultInit.setStatus('mandatory')
mp7001ResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7001ResetStats.setStatus('mandatory')
mp7001LedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 2, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001LedStatus.setStatus('mandatory')
mp7001T1CircuitName = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7001T1CircuitName.setStatus('mandatory')
mp7001SetRealTime = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7001SetRealTime.setStatus('mandatory')
mp7001AlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 2, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001AlarmStatus.setStatus('mandatory')
mp7001SystemTimingGenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("clk8khz", 2), ("clk4mhz", 3), ("clk8khzand4mhz", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001SystemTimingGenStatus.setStatus('mandatory')
mp7001StatLastInitialized = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001StatLastInitialized.setStatus('mandatory')
mp7001ValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001ValidIntervals.setStatus('mandatory')
mp7001ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 10, 3, 1), )
if mibBuilder.loadTexts: mp7001ConfigTable.setStatus('mandatory')
mp7001ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 10, 3, 1, 1), ).setIndexNames((0, "GDCMP7001-MIB", "mp7001ConfigIndex"))
if mibBuilder.loadTexts: mp7001ConfigEntry.setStatus('mandatory')
mp7001ConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 3, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001ConfigIndex.setStatus('mandatory')
mp7001NetworkInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ds1", 1), ("dsx1", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7001NetworkInterfaceType.setStatus('mandatory')
mp7001TransmitClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("system", 1), ("recovered", 2), ("internal", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7001TransmitClockSource.setStatus('mandatory')
mp7001FallbackClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("system", 1), ("recovered", 2), ("internal", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7001FallbackClockSource.setStatus('mandatory')
mp7001PreEqualization = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("feet130", 2), ("feet260", 3), ("feet390", 4), ("feet530", 5), ("feet655", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7001PreEqualization.setStatus('mandatory')
mp7001Framing = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eSF", 1), ("d4", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7001Framing.setStatus('mandatory')
mp7001LineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("b8zs", 1), ("ami", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7001LineCoding.setStatus('mandatory')
mp7001LineBuildout = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dB0", 1), ("dB75", 2), ("dB15", 3), ("dB22", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7001LineBuildout.setStatus('mandatory')
mp7001FDLMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("aNSIT1403", 2), ("tR54016", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7001FDLMode.setStatus('mandatory')
mp7001FramingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7001FramingMode.setStatus('mandatory')
mp7001Loopback = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inhibitloop", 1), ("payloadloop", 2), ("lineloop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7001Loopback.setStatus('mandatory')
mp7001AISLoopdown = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7001AISLoopdown.setStatus('mandatory')
mp7001SignalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("robbedbit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7001SignalMode.setStatus('mandatory')
mp7001LineBuildoutCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7001LineBuildoutCtrl.setStatus('mandatory')
mp7001SysTimingTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 10, 7, 1), )
if mibBuilder.loadTexts: mp7001SysTimingTable.setStatus('mandatory')
mp7001SysTimingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 10, 7, 1, 1), ).setIndexNames((0, "GDCMP7001-MIB", "mp7001SysTimingIndex"))
if mibBuilder.loadTexts: mp7001SysTimingEntry.setStatus('mandatory')
mp7001SysTimingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 7, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001SysTimingIndex.setStatus('mandatory')
mp7001SysTimingGen = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("primary", 2), ("secondary", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7001SysTimingGen.setStatus('mandatory')
mp7001DCCConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 10, 3, 2), )
if mibBuilder.loadTexts: mp7001DCCConfigurationTable.setStatus('mandatory')
mp7001DCCConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 10, 3, 2, 1), ).setIndexNames((0, "GDCMP7001-MIB", "mp7001DCCConfigurationIndex"))
if mibBuilder.loadTexts: mp7001DCCConfigurationEntry.setStatus('mandatory')
mp7001DCCConfigurationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 3, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001DCCConfigurationIndex.setStatus('mandatory')
mp7001TimeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7001TimeSlot.setStatus('mandatory')
mp7001Bandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("kbps8", 1), ("kbps56", 2), ("kbps64", 3), ("notAssigned", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7001Bandwidth.setStatus('mandatory')
mp7001HighwayAssignTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 10, 7, 2), )
if mibBuilder.loadTexts: mp7001HighwayAssignTable.setStatus('mandatory')
mp7001HighwayAssignEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 10, 7, 2, 1), ).setIndexNames((0, "GDCMP7001-MIB", "mp7001HighwayAssignIndex"))
if mibBuilder.loadTexts: mp7001HighwayAssignEntry.setStatus('mandatory')
mp7001HighwayAssignIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 7, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001HighwayAssignIndex.setStatus('mandatory')
mp7001StartTimeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7001StartTimeSlot.setStatus('mandatory')
mp7001NumberOfTimeSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7001NumberOfTimeSlots.setStatus('mandatory')
mp7001BundleDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notAssigned", 1), ("highway1", 2), ("highway2", 3), ("highway3", 4), ("highway4", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7001BundleDestination.setStatus('mandatory')
mp7001ExecuteAssign = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7001ExecuteAssign.setStatus('mandatory')
mp7001DiagTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 10, 4, 1), )
if mibBuilder.loadTexts: mp7001DiagTable.setStatus('mandatory')
mp7001DiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 10, 4, 1, 1), ).setIndexNames((0, "GDCMP7001-MIB", "mp7001DiagIndex"))
if mibBuilder.loadTexts: mp7001DiagEntry.setStatus('mandatory')
mp7001DiagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 4, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001DiagIndex.setStatus('mandatory')
mp7001TestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("noCode", 1), ("pat511", 2), ("pat2047", 3), ("patQRSS", 4), ("pat3in24", 5), ("inbandCode", 6), ("resetInband", 7), ("ntwkInterfaceCode", 8), ("resetNtwkInterface", 9), ("ds0Delay", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7001TestPattern.setStatus('mandatory')
mp7001DiagConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noLoop", 1), ("lineLoopback", 2), ("payloadLoopback", 3), ("dsoLoopback", 4), ("cascadeLoopback", 5), ("localTest", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7001DiagConfig.setStatus('mandatory')
mp7001TestLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("noLimit", 1), ("testTime1Min", 2), ("testTime2Mins", 3), ("testTime3Mins", 4), ("testTime4Mins", 5), ("testTime5Mins", 6), ("testTime6Mins", 7), ("testTime7Mins", 8), ("testTime8Mins", 9), ("testTime9Mins", 10), ("testTime10Mins", 11), ("testTime15Mins", 12), ("testTime20Mins", 13), ("testTime25Mins", 14), ("testTime30Mins", 15), ("testTime30Secs", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7001TestLimit.setStatus('mandatory')
mp7001TestExecutionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("notInTest", 1), ("testInProgress", 2), ("testCompleted", 4), ("testCompletedNotInTest", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001TestExecutionStatus.setStatus('mandatory')
mp7001TestExceptions = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001TestExceptions.setStatus('mandatory')
mp7001TestResults = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048576))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001TestResults.setStatus('mandatory')
mp7001ResetTestResults = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("reset", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001ResetTestResults.setStatus('mandatory')
mp7001DS0Diag = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7001DS0Diag.setStatus('mandatory')
mp7001Alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 10, 8))
mp7001NoResponseAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 10, 8, 1))
mp7001DiagRxErrAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 10, 8, 2))
mp7001PowerUpAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 10, 8, 3))
mp7001NvRamCorrupt = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 10, 8, 4))
mp7001UnitFailure = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 10, 8, 5))
mp7001LossOfSignal = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 10, 8, 6))
mp7001LossOfFrame = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 10, 8, 7))
mp7001Ais = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 10, 8, 8))
mp7001YELLOW = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 10, 8, 9))
mp7001BipolarViolation = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 10, 8, 10))
mp7001CRC = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 10, 8, 11))
mp7001UnSigState = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 10, 8, 12))
mp7001TimingLoss = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 10, 8, 13))
mp7001ES = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 10, 8, 14))
mp7001BES = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 10, 8, 15))
mp7001SES = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 10, 8, 16))
mp7001UAS = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 10, 8, 17))
mp7001ControlSlips = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 10, 8, 18))
mp7001UnsolicitedTest = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 10, 8, 19))
mp7001NearEndAlarmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 10, 6, 1), )
if mibBuilder.loadTexts: mp7001NearEndAlarmConfigTable.setStatus('mandatory')
mp7001NearEndAlarmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 10, 6, 1, 1), ).setIndexNames((0, "GDCMP7001-MIB", "mp7001NearEndAlarmConfigIndex"), (0, "GDCMP7001-MIB", "mp7001NearEndAlarmConfigIdentifier"))
if mibBuilder.loadTexts: mp7001NearEndAlarmConfigEntry.setStatus('mandatory')
mp7001NearEndAlarmConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 6, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001NearEndAlarmConfigIndex.setStatus('mandatory')
mp7001NearEndAlarmConfigIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 6, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001NearEndAlarmConfigIdentifier.setStatus('mandatory')
mp7001NearEndAlarmCountWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("disabled", 1), ("last1sec", 2), ("last10sec", 3), ("last30sec", 4), ("last1min", 5), ("last15min", 6), ("last1hr", 7), ("last24hr", 8), ("infinite", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7001NearEndAlarmCountWindow.setStatus('mandatory')
mp7001NearEndAlarmCountThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("thresGT1", 1), ("thresGT3", 2), ("thresGT10", 3), ("thresGT100", 4), ("thresGT1000", 5), ("thresGT10000", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7001NearEndAlarmCountThreshold.setStatus('mandatory')
mp7001LocalAlarmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 10, 6, 2), )
if mibBuilder.loadTexts: mp7001LocalAlarmConfigTable.setStatus('mandatory')
mp7001LocalAlarmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 10, 6, 2, 1), ).setIndexNames((0, "GDCMP7001-MIB", "mp7001LocalAlarmConfigIndex"))
if mibBuilder.loadTexts: mp7001LocalAlarmConfigEntry.setStatus('mandatory')
mp7001LocalAlarmConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 6, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001LocalAlarmConfigIndex.setStatus('mandatory')
mp7001LOSLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7001LOSLocal.setStatus('mandatory')
mp7001LOFLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7001LOFLocal.setStatus('mandatory')
mp7001AISLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7001AISLocal.setStatus('mandatory')
mp7001RxYELLOWLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7001RxYELLOWLocal.setStatus('mandatory')
mp7001BPVLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7001BPVLocal.setStatus('mandatory')
mp7001CRCLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7001CRCLocal.setStatus('mandatory')
mp7001UnSigStateLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7001UnSigStateLocal.setStatus('mandatory')
mp7001TiminglossLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7001TiminglossLocal.setStatus('mandatory')
mp7001ESLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7001ESLocal.setStatus('mandatory')
mp7001BESLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 6, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7001BESLocal.setStatus('mandatory')
mp7001SESLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7001SESLocal.setStatus('mandatory')
mp7001UASLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 6, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7001UASLocal.setStatus('mandatory')
mp7001InboundANSIperfTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 10, 5, 1), )
if mibBuilder.loadTexts: mp7001InboundANSIperfTable.setStatus('mandatory')
mp7001InboundANSIperfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 10, 5, 1, 1), ).setIndexNames((0, "GDCMP7001-MIB", "mp7001InboundANSIperfIndex"), (0, "GDCMP7001-MIB", "mp7001InboundANSIseconds"))
if mibBuilder.loadTexts: mp7001InboundANSIperfEntry.setStatus('mandatory')
mp7001InboundANSIperfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 5, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001InboundANSIperfIndex.setStatus('mandatory')
mp7001InboundANSIseconds = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001InboundANSIseconds.setStatus('mandatory')
mp7001InboundANSICRCerrorEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64))).clone(namedValues=NamedValues(("noErrors", 1), ("errors1", 2), ("errors2to5", 4), ("errors6to10", 8), ("errors11to100", 16), ("errors101to320", 32), ("errors321orMore", 64)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001InboundANSICRCerrorEvents.setStatus('mandatory')
mp7001InboundANSIsevereErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noEventsDetected", 1), ("eventsDetected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001InboundANSIsevereErrors.setStatus('mandatory')
mp7001InboundANSIframeErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noEventsDetected", 1), ("eventsDetected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001InboundANSIframeErrors.setStatus('mandatory')
mp7001InboundANSIcodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noEventsDetected", 1), ("eventsDetected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001InboundANSIcodeViolations.setStatus('mandatory')
mp7001InboundANSIcontrolledSlips = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noEventsDetected", 1), ("eventsDetected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001InboundANSIcontrolledSlips.setStatus('mandatory')
mp7001InboundANSIactivePayloadLoops = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noEventsDetected", 1), ("eventsDetected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001InboundANSIactivePayloadLoops.setStatus('mandatory')
mp7001OutboundANSIperfTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 10, 5, 2), )
if mibBuilder.loadTexts: mp7001OutboundANSIperfTable.setStatus('mandatory')
mp7001OutboundANSIperfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 10, 5, 2, 1), ).setIndexNames((0, "GDCMP7001-MIB", "mp7001OutboundANSIperfIndex"), (0, "GDCMP7001-MIB", "mp7001OutboundANSIseconds"))
if mibBuilder.loadTexts: mp7001OutboundANSIperfEntry.setStatus('mandatory')
mp7001OutboundANSIperfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 5, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001OutboundANSIperfIndex.setStatus('mandatory')
mp7001OutboundANSIseconds = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001OutboundANSIseconds.setStatus('mandatory')
mp7001OutboundANSICRCerrorEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64))).clone(namedValues=NamedValues(("noErrors", 1), ("errors1", 2), ("errors2to5", 4), ("errors6to10", 8), ("errors11to100", 16), ("errors101to320", 32), ("errors321orMore", 64)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001OutboundANSICRCerrorEvents.setStatus('mandatory')
mp7001OutboundANSIsevereErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noEventsDetected", 1), ("eventsDetected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001OutboundANSIsevereErrors.setStatus('mandatory')
mp7001OutboundANSIframeErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noEventsDetected", 1), ("eventsDetected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001OutboundANSIframeErrors.setStatus('mandatory')
mp7001OutboundANSIcodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noEventsDetected", 1), ("eventsDetected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001OutboundANSIcodeViolations.setStatus('mandatory')
mp7001OutboundANSIcontrolledSlips = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noEventsDetected", 1), ("eventsDetected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001OutboundANSIcontrolledSlips.setStatus('mandatory')
mp7001OutboundANSIactivePayloadLoops = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noEventsDetected", 1), ("eventsDetected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001OutboundANSIactivePayloadLoops.setStatus('mandatory')
mp7001CurrentTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 10, 5, 3), )
if mibBuilder.loadTexts: mp7001CurrentTable.setStatus('mandatory')
mp7001CurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 10, 5, 3, 1), ).setIndexNames((0, "GDCMP7001-MIB", "mp7001CurrentIndex"))
if mibBuilder.loadTexts: mp7001CurrentEntry.setStatus('mandatory')
mp7001CurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 5, 3, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001CurrentIndex.setStatus('mandatory')
mp7001CurrentStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 5, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001CurrentStat.setStatus('mandatory')
mp7001IntervalTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 10, 5, 4), )
if mibBuilder.loadTexts: mp7001IntervalTable.setStatus('mandatory')
mp7001IntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 10, 5, 4, 1), ).setIndexNames((0, "GDCMP7001-MIB", "mp7001IntervalIndex"), (0, "GDCMP7001-MIB", "mp7001IntervalNumber"))
if mibBuilder.loadTexts: mp7001IntervalEntry.setStatus('mandatory')
mp7001IntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 5, 4, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001IntervalIndex.setStatus('mandatory')
mp7001IntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001IntervalNumber.setStatus('mandatory')
mp7001IntervalStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 5, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001IntervalStat.setStatus('mandatory')
mp7001TotalTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 10, 5, 5), )
if mibBuilder.loadTexts: mp7001TotalTable.setStatus('mandatory')
mp7001TotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 10, 5, 5, 1), ).setIndexNames((0, "GDCMP7001-MIB", "mp7001TotalIndex"))
if mibBuilder.loadTexts: mp7001TotalEntry.setStatus('mandatory')
mp7001TotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 5, 5, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001TotalIndex.setStatus('mandatory')
mp7001TotalStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 10, 5, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7001TotalStat.setStatus('mandatory')
mibBuilder.exportSymbols("GDCMP7001-MIB", mp7001AlarmStatus=mp7001AlarmStatus, mp7001TestExceptions=mp7001TestExceptions, mp7001SysUpTime=mp7001SysUpTime, mp7001IntervalTable=mp7001IntervalTable, mp7001ESLocal=mp7001ESLocal, mp7001InboundANSIsevereErrors=mp7001InboundANSIsevereErrors, mp7001ResetStats=mp7001ResetStats, mp7001BundleDestination=mp7001BundleDestination, mp7001DiagEntry=mp7001DiagEntry, mp7001CurrentIndex=mp7001CurrentIndex, mp7001MIBversion=mp7001MIBversion, mp7001MaintenanceEntry=mp7001MaintenanceEntry, mp7001IntervalNumber=mp7001IntervalNumber, mp7001OutboundANSIperfTable=mp7001OutboundANSIperfTable, mp7001NearEndAlarmConfigEntry=mp7001NearEndAlarmConfigEntry, mp7001SysTimingIndex=mp7001SysTimingIndex, mp7001MaintenanceLineIndex=mp7001MaintenanceLineIndex, mp7001SystemTimingGenStatus=mp7001SystemTimingGenStatus, mp7001SysTimingGen=mp7001SysTimingGen, mp7001UnSigState=mp7001UnSigState, mp7001Bandwidth=mp7001Bandwidth, mp7001OutboundANSIactivePayloadLoops=mp7001OutboundANSIactivePayloadLoops, mp7001HighwayAssignTable=mp7001HighwayAssignTable, mp7001NearEndAlarmConfigIdentifier=mp7001NearEndAlarmConfigIdentifier, mp7001NearEndAlarmCountWindow=mp7001NearEndAlarmCountWindow, mp7001SetRealTime=mp7001SetRealTime, mp7001NvRamCorrupt=mp7001NvRamCorrupt, mp7001AlarmConfig=mp7001AlarmConfig, mp7001ConfigTable=mp7001ConfigTable, mp7001FDLMode=mp7001FDLMode, mp7001TestExecutionStatus=mp7001TestExecutionStatus, mp7001InboundANSIperfEntry=mp7001InboundANSIperfEntry, mp7001LocalAlarmConfigTable=mp7001LocalAlarmConfigTable, mp7001LossOfFrame=mp7001LossOfFrame, mp7001SysTimingEntry=mp7001SysTimingEntry, mp7001OutboundANSIperfIndex=mp7001OutboundANSIperfIndex, mp7001InboundANSIseconds=mp7001InboundANSIseconds, mp7001Alarms=mp7001Alarms, mp7001DCCConfigurationEntry=mp7001DCCConfigurationEntry, mp7001BESLocal=mp7001BESLocal, mp7001CurrentStat=mp7001CurrentStat, mp7001Diagnostics=mp7001Diagnostics, mp7001BES=mp7001BES, mp7001DiagTable=mp7001DiagTable, mp7001InboundANSIperfIndex=mp7001InboundANSIperfIndex, mp7001FramingMode=mp7001FramingMode, mp7001Framing=mp7001Framing, mp7001MaintenanceTable=mp7001MaintenanceTable, mp7001BipolarViolation=mp7001BipolarViolation, mp7001OutboundANSIframeErrors=mp7001OutboundANSIframeErrors, mp7001BootRev=mp7001BootRev, mp7001LocalAlarmConfigEntry=mp7001LocalAlarmConfigEntry, mp7001TestLimit=mp7001TestLimit, mp7001OutboundANSICRCerrorEvents=mp7001OutboundANSICRCerrorEvents, mp7001NumberOfTimeSlots=mp7001NumberOfTimeSlots, mp7001UnitFailure=mp7001UnitFailure, mp7001LOFLocal=mp7001LOFLocal, mp7001SysTimingTable=mp7001SysTimingTable, mp7001System=mp7001System, mp7001Performance=mp7001Performance, mp7001TestResults=mp7001TestResults, mp7001OutboundANSIperfEntry=mp7001OutboundANSIperfEntry, mp7001PreEqualization=mp7001PreEqualization, mp7001UAS=mp7001UAS, mp7001DiagConfig=mp7001DiagConfig, mp7001NearEndAlarmConfigIndex=mp7001NearEndAlarmConfigIndex, mp7001IntervalStat=mp7001IntervalStat, mp7001CardType=mp7001CardType, mp7001VersionIndex=mp7001VersionIndex, mp7001ResetTestResults=mp7001ResetTestResults, mp7001NearEndAlarmCountThreshold=mp7001NearEndAlarmCountThreshold, mp7001FirmwareRev=mp7001FirmwareRev, dsx1=dsx1, mp7001TimeSlot=mp7001TimeSlot, mp7001UnsolicitedTest=mp7001UnsolicitedTest, mp7001UASLocal=mp7001UASLocal, mp7001TimingLoss=mp7001TimingLoss, mp7001VersionEntry=mp7001VersionEntry, mp7001SES=mp7001SES, mp7001Loopback=mp7001Loopback, mp7001LOSLocal=mp7001LOSLocal, mp7001TransmitClockSource=mp7001TransmitClockSource, mp7001InboundANSIframeErrors=mp7001InboundANSIframeErrors, mp7001DCCConfigurationTable=mp7001DCCConfigurationTable, mp7001IntervalIndex=mp7001IntervalIndex, mp7001FallbackClockSource=mp7001FallbackClockSource, mp7001InboundANSIactivePayloadLoops=mp7001InboundANSIactivePayloadLoops, mp7001HighwayAssignIndex=mp7001HighwayAssignIndex, mp7001UnSigStateLocal=mp7001UnSigStateLocal, mp7001OutboundANSIcodeViolations=mp7001OutboundANSIcodeViolations, mp7001YELLOW=mp7001YELLOW, mp7001DiagRxErrAlm=mp7001DiagRxErrAlm, mp7001LocalAlarmConfigIndex=mp7001LocalAlarmConfigIndex, gdc=gdc, mp7001IntervalEntry=mp7001IntervalEntry, mp7001ControlSlips=mp7001ControlSlips, mp7001ConfigIndex=mp7001ConfigIndex, mp7001InboundANSIcodeViolations=mp7001InboundANSIcodeViolations, mp7001OutboundANSIseconds=mp7001OutboundANSIseconds, mp7001DefaultInit=mp7001DefaultInit, mp7001TotalTable=mp7001TotalTable, mp7001InboundANSICRCerrorEvents=mp7001InboundANSICRCerrorEvents, mp7001Ais=mp7001Ais, mp7001StartTimeSlot=mp7001StartTimeSlot, mp7001LineBuildout=mp7001LineBuildout, mp7001VersionTable=mp7001VersionTable, mp7001DCCConfigurationIndex=mp7001DCCConfigurationIndex, mp7001SoftReset=mp7001SoftReset, mp7001SignalMode=mp7001SignalMode, mp7001CurrentEntry=mp7001CurrentEntry, mp7001NetworkInterfaceType=mp7001NetworkInterfaceType, mp7001CRC=mp7001CRC, mp7001LedStatus=mp7001LedStatus, mp7001AISLocal=mp7001AISLocal, mp7001NearEndAlarmConfigTable=mp7001NearEndAlarmConfigTable, mp7001BPVLocal=mp7001BPVLocal, mp7001LineBuildoutCtrl=mp7001LineBuildoutCtrl, mp7001Version=mp7001Version, mp7001TiminglossLocal=mp7001TiminglossLocal, mp7001TestPattern=mp7001TestPattern, mp7001ConfigEntry=mp7001ConfigEntry, mp7001DS0Diag=mp7001DS0Diag, mp7001OutboundANSIcontrolledSlips=mp7001OutboundANSIcontrolledSlips, mp7001ES=mp7001ES, mp7001CRCLocal=mp7001CRCLocal, mp7001SESLocal=mp7001SESLocal, mp7001InboundANSIcontrolledSlips=mp7001InboundANSIcontrolledSlips, mp7001T1CircuitName=mp7001T1CircuitName, mp7001ExecuteAssign=mp7001ExecuteAssign, mp7001DiagIndex=mp7001DiagIndex, mp7001TotalEntry=mp7001TotalEntry, mp7001TotalStat=mp7001TotalStat, mp7001LineCoding=mp7001LineCoding, mp7001PowerUpAlm=mp7001PowerUpAlm, mp7001Maintenance=mp7001Maintenance, mp7001AISLoopdown=mp7001AISLoopdown, mp7001OutboundANSIsevereErrors=mp7001OutboundANSIsevereErrors, mp7001TotalIndex=mp7001TotalIndex, mp7001SysConfig=mp7001SysConfig, mp7001CurrentTable=mp7001CurrentTable, mp7001InboundANSIperfTable=mp7001InboundANSIperfTable, mp7001StatLastInitialized=mp7001StatLastInitialized, mp7001Configuration=mp7001Configuration, mp7001NoResponseAlm=mp7001NoResponseAlm, mp7001ValidIntervals=mp7001ValidIntervals, mp7001LossOfSignal=mp7001LossOfSignal, mp7001RxYELLOWLocal=mp7001RxYELLOWLocal, mp7001HighwayAssignEntry=mp7001HighwayAssignEntry)
