#
# PySNMP MIB module NMS-LOG-SERVER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NMS-LOG-SERVER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:12:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
nmslocal, = mibBuilder.importSymbols("NMS-SMI", "nmslocal")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter64, Unsigned32, MibIdentifier, ModuleIdentity, Gauge32, ObjectIdentity, Bits, TimeTicks, Counter32, Integer32, NotificationType, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter64", "Unsigned32", "MibIdentifier", "ModuleIdentity", "Gauge32", "ObjectIdentity", "Bits", "TimeTicks", "Counter32", "Integer32", "NotificationType", "iso")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
logServer = MibIdentifier((1, 3, 6, 1, 4, 1, 11606, 10, 2, 235))
logServerTable = MibTable((1, 3, 6, 1, 4, 1, 11606, 10, 2, 235, 1), )
if mibBuilder.loadTexts: logServerTable.setStatus('mandatory')
logServerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11606, 10, 2, 235, 1, 1), ).setIndexNames((0, "NMS-LOG-SERVER-MIB", "logServerLevel"), (0, "NMS-LOG-SERVER-MIB", "logServerAddr"))
if mibBuilder.loadTexts: logServerTableEntry.setStatus('mandatory')
logServerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 235, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("emerg", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logServerLevel.setStatus('mandatory')
logServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 235, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logServerAddr.setStatus('mandatory')
logServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 235, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: logServerRowStatus.setStatus('mandatory')
logServerOff = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 2, 235, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logServerOff.setStatus('mandatory')
logTrapTable = MibTable((1, 3, 6, 1, 4, 1, 11606, 10, 2, 235, 3), )
if mibBuilder.loadTexts: logTrapTable.setStatus('mandatory')
logTrapTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11606, 10, 2, 235, 3, 1), ).setIndexNames((0, "NMS-LOG-SERVER-MIB", "logTrapLevel"), (0, "NMS-LOG-SERVER-MIB", "logTrapAddr"))
if mibBuilder.loadTexts: logTrapTableEntry.setStatus('mandatory')
logTrapAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 235, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logTrapAddr.setStatus('mandatory')
logTrapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 235, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: logTrapRowStatus.setStatus('mandatory')
logTrapRfcVer = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 235, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("RFC3164", 0), ("RFC5424", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logTrapRfcVer.setStatus('mandatory')
logTrap = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 2, 235, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("emerg", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logTrap.setStatus('mandatory')
mibBuilder.exportSymbols("NMS-LOG-SERVER-MIB", logTrapTable=logTrapTable, logServerTable=logServerTable, logServerRowStatus=logServerRowStatus, logServer=logServer, logServerAddr=logServerAddr, logServerLevel=logServerLevel, logTrapRfcVer=logTrapRfcVer, logTrapAddr=logTrapAddr, logTrap=logTrap, logTrapTableEntry=logTrapTableEntry, logTrapRowStatus=logTrapRowStatus, logServerTableEntry=logServerTableEntry, logServerOff=logServerOff)
