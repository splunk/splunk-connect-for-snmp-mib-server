#
# PySNMP MIB module TPT-TPA-HARDWARE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TPT-TPA-HARDWARE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:19:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, ModuleIdentity, Gauge32, iso, Counter64, TimeTicks, ObjectIdentity, NotificationType, MibIdentifier, Bits, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "ModuleIdentity", "Gauge32", "iso", "Counter64", "TimeTicks", "ObjectIdentity", "NotificationType", "MibIdentifier", "Bits", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
tpt_tpa_eventsV2, tpt_tpa_objs, tpt_tpa_unkparams = mibBuilder.importSymbols("TPT-TPAMIBS-MIB", "tpt-tpa-eventsV2", "tpt-tpa-objs", "tpt-tpa-unkparams")
tpt_tpa_hardware_objs = ModuleIdentity((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3)).setLabel("tpt-tpa-hardware-objs")
tpt_tpa_hardware_objs.setRevisions(('2016-05-25 18:54',))
if mibBuilder.loadTexts: tpt_tpa_hardware_objs.setLastUpdated('201605251854Z')
if mibBuilder.loadTexts: tpt_tpa_hardware_objs.setOrganization('Trend Micro, Inc.')
class ManagedElementType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))
    namedValues = NamedValues(("unequip", 0), ("chassis", 1), ("backplane", 2), ("controller", 3), ("network-interface", 4), ("network-interface-bcomm", 5), ("network-processor", 6), ("feature-card", 7), ("gige-port", 8), ("ten-base-t-port", 9), ("hundred-base-t-port", 10), ("sonet-atm-port", 11), ("sonet-pos-port", 12), ("sonet-pos-srp-port", 13), ("sdh-atm-port", 14), ("sdh-pos-port", 15), ("sdh-pos-srp-port", 16), ("power-supply", 17), ("power-supply-sub-unit", 18), ("fan-controller", 19), ("fan-sub-unit", 20), ("power-entry-module", 21), ("vnam-port", 22), ("ten-gige-port", 23), ("forty-gige-port", 24))

class ConfigRedundancy(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("unconfigured", 0), ("simplex", 1), ("duplex", 2), ("loadshare", 3), ("autonomous", 4))

class HardwareState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("oos", 0), ("initialize", 1), ("act", 2), ("stby", 3), ("dgn", 4), ("lpbk", 5), ("act-faf", 6), ("stby-faf", 7), ("act-dgrd", 8), ("stby-dgrd", 9))

class HardwareStateQual(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29))
    namedValues = NamedValues(("port-clear", 0), ("degraded", 1), ("port-los", 2), ("port-lof", 3), ("port-oof", 4), ("port-lop", 5), ("port-signal-degrade", 6), ("port-signal-failure", 7), ("port-ais-p", 8), ("port-ais-l", 9), ("port-rdi", 10), ("port-forced", 11), ("port-lockout", 12), ("yellow-alarm", 13), ("red-alarm", 14), ("parity-err", 15), ("crc-err", 16), ("unequipped-slot", 17), ("blade-pull", 18), ("blade-insert", 19), ("blade-slot-mismatch", 20), ("init-failure", 21), ("parent-oos", 22), ("removed", 23), ("no-info", 24), ("over-temp-alarm", 25), ("under-temp-alarm", 26), ("port-ool", 27), ("port-ool-clear", 28), ("inhibit", 29))

class ExtendedSlot(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
    namedValues = NamedValues(("slot1", 1), ("slot2", 2), ("slot3", 3), ("slot4", 4), ("slot5", 5), ("slot6", 6), ("slot7", 7), ("slot8", 8), ("shelf", 9), ("pem", 10), ("power-supply", 11), ("fan", 12), ("slot11", 13), ("slot12", 14), ("slot13", 15), ("slot14", 16))

class LineType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 21, 22, 23))
    namedValues = NamedValues(("undefined", 0), ("copper", 21), ("optical", 22), ("copper-sfp", 23))

class DuplexState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("unknown", 0), ("half", 1), ("full", 2))

class SfpQualifier(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29))
    namedValues = NamedValues(("sfp-not-applicable", 0), ("sfp-10g-base-er", 1), ("sfp-10g-base-lrm", 2), ("sfp-10g-base-lr", 3), ("sfp-10g-base-sr", 4), ("sfp-base-px", 5), ("sfp-base-bx10", 6), ("sfp-100base-fx", 7), ("sfp-100base-lx-lx10", 8), ("sfp-1000base-t", 9), ("sfp-1000base-cx", 10), ("sfp-1000base-lx", 11), ("sfp-1000base-sx", 12), ("sfp-850-nm-vcsel", 13), ("sfp-1310-nm-vcsel", 14), ("sfp-1550-nm-vcsel", 15), ("sfp-1310-nm-fp", 16), ("sfp-1310-nm-dfb", 17), ("sfp-1550-nm-dfb", 18), ("sfp-1310-nm-eml", 19), ("sfp-1550-nm-eml", 20), ("sfp-copper-or-others", 21), ("sfp-1490-nm-dfb", 22), ("sfp-copper-cable-unequalized", 23), ("sfp-absent", 24), ("sfp-plus-absent", 25), ("qsfp-plus-absent", 26), ("sfp-xfp-absent", 27), ("sfp-10g-dac", 28), ("sfp-10g-dao", 29))

hw_slotTable = MibTable((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 1), ).setLabel("hw-slotTable")
if mibBuilder.loadTexts: hw_slotTable.setStatus('current')
hw_slotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 1, 1), ).setLabel("hw-slotEntry").setIndexNames((0, "TPT-TPA-HARDWARE-MIB", "slotNumber"), (0, "TPT-TPA-HARDWARE-MIB", "slotPort"))
if mibBuilder.loadTexts: hw_slotEntry.setStatus('current')
slotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotNumber.setStatus('current')
slotPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotPort.setStatus('current')
slotType = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 1, 1, 3), ManagedElementType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotType.setStatus('current')
slotCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 1, 1, 4), ConfigRedundancy()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotCfgType.setStatus('current')
slotRunState = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 1, 1, 5), HardwareState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotRunState.setStatus('current')
slotQualifier1 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 1, 1, 6), HardwareStateQual()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotQualifier1.setStatus('current')
slotQualifier2 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 1, 1, 7), HardwareStateQual()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotQualifier2.setStatus('current')
slotQualifier3 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 1, 1, 8), HardwareStateQual()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotQualifier3.setStatus('current')
slotQualifier4 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 1, 1, 9), HardwareStateQual()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotQualifier4.setStatus('current')
slotStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotStartTime.setStatus('current')
slotVendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotVendorID.setStatus('current')
slotDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotDeviceID.setStatus('current')
slotProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotProductID.setStatus('current')
slotFPGAVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotFPGAVersion.setStatus('current')
slotInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 1, 1, 15), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotInterface.setStatus('current')
slotLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 1, 1, 16), LineType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotLineType.setStatus('current')
slotDuplexState = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 1, 1, 17), DuplexState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotDuplexState.setStatus('current')
slotPhysical = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 1, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotPhysical.setStatus('current')
slotSfpQualifier1 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 1, 1, 19), SfpQualifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotSfpQualifier1.setStatus('current')
slotSfpQualifier2 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 1, 1, 20), SfpQualifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotSfpQualifier2.setStatus('current')
hw_chasTable = MibTable((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 2), ).setLabel("hw-chasTable")
if mibBuilder.loadTexts: hw_chasTable.setStatus('current')
hw_chasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 2, 1), ).setLabel("hw-chasEntry").setIndexNames((0, "TPT-TPA-HARDWARE-MIB", "chasNumber"))
if mibBuilder.loadTexts: hw_chasEntry.setStatus('current')
chasNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasNumber.setStatus('current')
chasType = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 2, 1, 3), ManagedElementType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasType.setStatus('current')
chasCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 2, 1, 4), ConfigRedundancy()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasCfgType.setStatus('current')
chasRunState = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 2, 1, 5), HardwareState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasRunState.setStatus('current')
chasQualifier1 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 2, 1, 6), HardwareStateQual()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasQualifier1.setStatus('current')
chasQualifier2 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 2, 1, 7), HardwareStateQual()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasQualifier2.setStatus('current')
chasQualifier3 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 2, 1, 8), HardwareStateQual()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasQualifier3.setStatus('current')
chasQualifier4 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 2, 1, 9), HardwareStateQual()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasQualifier4.setStatus('current')
chasStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasStartTime.setStatus('current')
chasVendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasVendorID.setStatus('current')
chasDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasDeviceID.setStatus('current')
chasProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasProductID.setStatus('current')
chasFPGAVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 2, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasFPGAVersion.setStatus('current')
hw_fanTable = MibTable((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 3), ).setLabel("hw-fanTable")
if mibBuilder.loadTexts: hw_fanTable.setStatus('current')
hw_fanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 3, 1), ).setLabel("hw-fanEntry").setIndexNames((0, "TPT-TPA-HARDWARE-MIB", "fanSubunit"))
if mibBuilder.loadTexts: hw_fanEntry.setStatus('current')
fanSubunit = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanSubunit.setStatus('current')
fanType = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 3, 1, 3), ManagedElementType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanType.setStatus('current')
fanCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 3, 1, 4), ConfigRedundancy()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanCfgType.setStatus('current')
fanRunState = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 3, 1, 5), HardwareState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanRunState.setStatus('current')
fanQualifier1 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 3, 1, 6), HardwareStateQual()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanQualifier1.setStatus('current')
fanQualifier2 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 3, 1, 7), HardwareStateQual()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanQualifier2.setStatus('current')
fanQualifier3 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 3, 1, 8), HardwareStateQual()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanQualifier3.setStatus('current')
fanQualifier4 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 3, 1, 9), HardwareStateQual()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanQualifier4.setStatus('current')
fanStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanStartTime.setStatus('current')
fanVendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanVendorID.setStatus('current')
fanDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 3, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanDeviceID.setStatus('current')
fanProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 3, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanProductID.setStatus('current')
fanFPGAVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 3, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFPGAVersion.setStatus('current')
hw_psTable = MibTable((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 4), ).setLabel("hw-psTable")
if mibBuilder.loadTexts: hw_psTable.setStatus('current')
hw_psEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 4, 1), ).setLabel("hw-psEntry").setIndexNames((0, "TPT-TPA-HARDWARE-MIB", "psSubunit"))
if mibBuilder.loadTexts: hw_psEntry.setStatus('current')
psSubunit = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSubunit.setStatus('current')
psType = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 4, 1, 3), ManagedElementType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psType.setStatus('current')
psCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 4, 1, 4), ConfigRedundancy()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psCfgType.setStatus('current')
psRunState = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 4, 1, 5), HardwareState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psRunState.setStatus('current')
psQualifier1 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 4, 1, 6), HardwareStateQual()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psQualifier1.setStatus('current')
psQualifier2 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 4, 1, 7), HardwareStateQual()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psQualifier2.setStatus('current')
psQualifier3 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 4, 1, 8), HardwareStateQual()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psQualifier3.setStatus('current')
psQualifier4 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 4, 1, 9), HardwareStateQual()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psQualifier4.setStatus('current')
psStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psStartTime.setStatus('current')
psVendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psVendorID.setStatus('current')
psDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 4, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psDeviceID.setStatus('current')
psProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 4, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psProductID.setStatus('current')
psFPGAVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 4, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psFPGAVersion.setStatus('current')
hw_pemTable = MibTable((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 5), ).setLabel("hw-pemTable")
if mibBuilder.loadTexts: hw_pemTable.setStatus('current')
hw_pemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 5, 1), ).setLabel("hw-pemEntry").setIndexNames((0, "TPT-TPA-HARDWARE-MIB", "pemSubunit"))
if mibBuilder.loadTexts: hw_pemEntry.setStatus('current')
pemSubunit = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pemSubunit.setStatus('current')
pemType = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 5, 1, 3), ManagedElementType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pemType.setStatus('current')
pemCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 5, 1, 4), ConfigRedundancy()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pemCfgType.setStatus('current')
pemRunState = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 5, 1, 5), HardwareState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pemRunState.setStatus('current')
pemQualifier1 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 5, 1, 6), HardwareStateQual()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pemQualifier1.setStatus('current')
pemQualifier2 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 5, 1, 7), HardwareStateQual()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pemQualifier2.setStatus('current')
pemQualifier3 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 5, 1, 8), HardwareStateQual()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pemQualifier3.setStatus('current')
pemQualifier4 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 5, 1, 9), HardwareStateQual()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pemQualifier4.setStatus('current')
pemStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 5, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pemStartTime.setStatus('current')
pemVendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 5, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pemVendorID.setStatus('current')
pemDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 5, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pemDeviceID.setStatus('current')
pemProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 5, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pemProductID.setStatus('current')
pemFPGAVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 5, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pemFPGAVersion.setStatus('current')
hw_numSlots = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 6), Unsigned32()).setLabel("hw-numSlots").setMaxAccess("readonly")
if mibBuilder.loadTexts: hw_numSlots.setStatus('current')
hw_numFans = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 7), Unsigned32()).setLabel("hw-numFans").setMaxAccess("readonly")
if mibBuilder.loadTexts: hw_numFans.setStatus('current')
hw_numPowerSupplies = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 8), Unsigned32()).setLabel("hw-numPowerSupplies").setMaxAccess("readonly")
if mibBuilder.loadTexts: hw_numPowerSupplies.setStatus('current')
hw_numPEMs = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 9), Unsigned32()).setLabel("hw-numPEMs").setMaxAccess("readonly")
if mibBuilder.loadTexts: hw_numPEMs.setStatus('current')
hw_certificateNumber = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setLabel("hw-certificateNumber").setMaxAccess("readonly")
if mibBuilder.loadTexts: hw_certificateNumber.setStatus('current')
hw_serialNumber = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 3, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setLabel("hw-serialNumber").setMaxAccess("readonly")
if mibBuilder.loadTexts: hw_serialNumber.setStatus('current')
tptHardwareNotifyDeviceID = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptHardwareNotifyDeviceID.setStatus('current')
tptHardwareNotifySlot = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 3, 1, 2), ExtendedSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptHardwareNotifySlot.setStatus('current')
tptHardwareNotifyPort = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptHardwareNotifyPort.setStatus('current')
tptHardwareNotifyMeType = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 3, 1, 4), ManagedElementType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptHardwareNotifyMeType.setStatus('current')
tptHardwareNotifyCfgType = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 3, 1, 5), ConfigRedundancy()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptHardwareNotifyCfgType.setStatus('current')
tptHardwareNotifyHlState = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 3, 1, 6), HardwareState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptHardwareNotifyHlState.setStatus('current')
tptHardwareNotifyHlStateQual = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 3, 1, 7), HardwareStateQual()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptHardwareNotifyHlStateQual.setStatus('current')
tptHardwareNotify = NotificationType((1, 3, 6, 1, 4, 1, 10734, 3, 3, 3, 0, 7)).setObjects(("TPT-TPA-HARDWARE-MIB", "tptHardwareNotifyDeviceID"), ("TPT-TPA-HARDWARE-MIB", "tptHardwareNotifySlot"), ("TPT-TPA-HARDWARE-MIB", "tptHardwareNotifyPort"), ("TPT-TPA-HARDWARE-MIB", "tptHardwareNotifyMeType"), ("TPT-TPA-HARDWARE-MIB", "tptHardwareNotifyCfgType"), ("TPT-TPA-HARDWARE-MIB", "tptHardwareNotifyHlState"), ("TPT-TPA-HARDWARE-MIB", "tptHardwareNotifyHlStateQual"))
if mibBuilder.loadTexts: tptHardwareNotify.setStatus('current')
mibBuilder.exportSymbols("TPT-TPA-HARDWARE-MIB", hw_numPEMs=hw_numPEMs, fanSubunit=fanSubunit, DuplexState=DuplexState, fanRunState=fanRunState, psQualifier2=psQualifier2, pemVendorID=pemVendorID, ConfigRedundancy=ConfigRedundancy, slotLineType=slotLineType, slotVendorID=slotVendorID, tptHardwareNotifyHlState=tptHardwareNotifyHlState, fanProductID=fanProductID, slotSfpQualifier1=slotSfpQualifier1, pemQualifier1=pemQualifier1, pemRunState=pemRunState, pemQualifier4=pemQualifier4, psStartTime=psStartTime, pemProductID=pemProductID, pemStartTime=pemStartTime, chasQualifier3=chasQualifier3, chasProductID=chasProductID, hw_numPowerSupplies=hw_numPowerSupplies, hw_pemTable=hw_pemTable, slotSfpQualifier2=slotSfpQualifier2, chasStartTime=chasStartTime, psDeviceID=psDeviceID, fanQualifier1=fanQualifier1, psQualifier3=psQualifier3, slotQualifier2=slotQualifier2, tptHardwareNotifyHlStateQual=tptHardwareNotifyHlStateQual, chasCfgType=chasCfgType, hw_psEntry=hw_psEntry, SfpQualifier=SfpQualifier, slotStartTime=slotStartTime, fanType=fanType, slotPhysical=slotPhysical, PYSNMP_MODULE_ID=tpt_tpa_hardware_objs, ManagedElementType=ManagedElementType, slotDuplexState=slotDuplexState, slotFPGAVersion=slotFPGAVersion, pemType=pemType, chasQualifier1=chasQualifier1, HardwareState=HardwareState, tptHardwareNotifyMeType=tptHardwareNotifyMeType, slotQualifier4=slotQualifier4, chasVendorID=chasVendorID, slotQualifier3=slotQualifier3, pemQualifier2=pemQualifier2, LineType=LineType, hw_serialNumber=hw_serialNumber, pemDeviceID=pemDeviceID, slotProductID=slotProductID, slotNumber=slotNumber, fanQualifier4=fanQualifier4, hw_slotEntry=hw_slotEntry, psQualifier1=psQualifier1, slotRunState=slotRunState, pemCfgType=pemCfgType, hw_numSlots=hw_numSlots, psFPGAVersion=psFPGAVersion, tptHardwareNotifyPort=tptHardwareNotifyPort, tptHardwareNotify=tptHardwareNotify, slotQualifier1=slotQualifier1, hw_fanEntry=hw_fanEntry, hw_numFans=hw_numFans, ExtendedSlot=ExtendedSlot, pemFPGAVersion=pemFPGAVersion, hw_psTable=hw_psTable, fanStartTime=fanStartTime, chasFPGAVersion=chasFPGAVersion, chasNumber=chasNumber, chasDeviceID=chasDeviceID, fanQualifier2=fanQualifier2, psCfgType=psCfgType, hw_chasEntry=hw_chasEntry, slotInterface=slotInterface, fanDeviceID=fanDeviceID, tptHardwareNotifyCfgType=tptHardwareNotifyCfgType, pemSubunit=pemSubunit, fanVendorID=fanVendorID, hw_pemEntry=hw_pemEntry, chasRunState=chasRunState, psVendorID=psVendorID, psRunState=psRunState, fanQualifier3=fanQualifier3, chasQualifier2=chasQualifier2, fanCfgType=fanCfgType, hw_certificateNumber=hw_certificateNumber, chasType=chasType, fanFPGAVersion=fanFPGAVersion, pemQualifier3=pemQualifier3, tptHardwareNotifySlot=tptHardwareNotifySlot, hw_slotTable=hw_slotTable, hw_chasTable=hw_chasTable, psProductID=psProductID, tpt_tpa_hardware_objs=tpt_tpa_hardware_objs, slotDeviceID=slotDeviceID, slotType=slotType, slotPort=slotPort, hw_fanTable=hw_fanTable, psQualifier4=psQualifier4, chasQualifier4=chasQualifier4, slotCfgType=slotCfgType, psSubunit=psSubunit, HardwareStateQual=HardwareStateQual, psType=psType, tptHardwareNotifyDeviceID=tptHardwareNotifyDeviceID)
