#
# PySNMP MIB module Motorola-Cpe-PRIVATE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Motorola-Cpe-PRIVATE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:07:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ifOperStatus, ifIndex, ifAdminStatus = mibBuilder.importSymbols("IF-MIB", "ifOperStatus", "ifIndex", "ifAdminStatus")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ModuleIdentity, TimeTicks, MibIdentifier, iso, Integer32, IpAddress, Bits, ObjectIdentity, enterprises, NotificationType, Counter32, Counter64, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ModuleIdentity", "TimeTicks", "MibIdentifier", "iso", "Integer32", "IpAddress", "Bits", "ObjectIdentity", "enterprises", "NotificationType", "Counter32", "Counter64", "Gauge32")
TextualConvention, RowStatus, DisplayString, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString", "DateAndTime")
gemtekDevCpe = ModuleIdentity((1, 3, 6, 1, 4, 1, 10529, 300))
if mibBuilder.loadTexts: gemtekDevCpe.setLastUpdated('201006291431Z')
if mibBuilder.loadTexts: gemtekDevCpe.setOrganization('Cambium Networks')
gemtek = MibIdentifier((1, 3, 6, 1, 4, 1, 10529))
gemtekDevCpeStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 1))
gemtekDevCpeControl = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 2))
gemtekDevCpeTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 3))
gemtekDevCpeDate = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 4))
gemtekDevCpeAccountManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 5))
gemtekDevCpeScanner = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 6))
gemtekDevCpeAuthentication = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 7))
gemtekDevCpeNetworkMode = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 8))
gemtekDevCpeFirewall = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 9))
gemtekDevCpeServiceFlow = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 11))
gemtekDevCpeSyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 12))
gemtekDevCpeMaxTxPower = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 13))
gemtekDevCpePullFtpUpgrade = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 21))
gemtekDevCpePushFtpUpgrade = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 22))
gemtekDevCpeTftpUpgrade = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 69))
wirelessStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 1, 1))
networkStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 1, 2))
deviceStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 1, 3))
rebootWithResponse = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0, 255))).clone(namedValues=NamedValues(("rebootRequired", 1), ("rebootNotRequired", 0), ("reboot", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rebootWithResponse.setStatus('current')
isRebootRequired = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("rebootRequired", 1), ("rebootNotRequired", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isRebootRequired.setStatus('current')
autoSaveConfig = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("autoSaveEnabled", 1), ("autoSaveDisabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSaveConfig.setStatus('current')
autoSavePeriod = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 2, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSavePeriod.setStatus('obsolete')
startStopWimax = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("start", 1), ("stop", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startStopWimax.setStatus('current')
snmpBuzzerConfig = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("snmpBuzzerDisabled", 0), ("snmpBuzzerEnabled", 1), ("snmpBuzzerDemo", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpBuzzerConfig.setStatus('current')
snmpBuzzerDisableDelay = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 2, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpBuzzerDisableDelay.setStatus('current')
gemtekDevCpeSnmpReadCommunity = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 2, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeSnmpReadCommunity.setStatus('current')
gemtekDevCpeSnmpSetCommunity = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 2, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeSnmpSetCommunity.setStatus('current')
gemtekDevCpeRestFactoryDefault = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeRestFactoryDefault.setStatus('current')
gemtekDevCpeAutoFirmwareRollback = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("levelOne", 1), ("levelTwo", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeAutoFirmwareRollback.setStatus('current')
gemtekDevCpeFirmwareValidationTime = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 2, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeFirmwareValidationTime.setStatus('current')
gemtekDevCpeFirmwareValidationCount = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 2, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeFirmwareValidationCount.setStatus('current')
gemtekDevCpeSnmpAccessFromLan = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeSnmpAccessFromLan.setStatus('current')
gemtekDevCpeDynamicMaxTxPowerBpsk = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 2, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeDynamicMaxTxPowerBpsk.setStatus('current')
gemtekDevCpeDynamicMaxTxPowerQpsk = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 2, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeDynamicMaxTxPowerQpsk.setStatus('current')
gemtekDevCpeDynamicMaxTxPowerQam16 = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 2, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeDynamicMaxTxPowerQam16.setStatus('current')
gemtekDevCpeDynamicMaxTxPowerQam64 = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 2, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeDynamicMaxTxPowerQam64.setStatus('current')
gemtekDevCpeSnmpAccessDomain = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 2, 19))
gemtekDevCpeSnmpAccessDomainEnable = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 2, 19, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeSnmpAccessDomainEnable.setStatus('current')
gemtekDevCpeSnmpAccessDomainIp = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 2, 19, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeSnmpAccessDomainIp.setStatus('current')
gemtekDevCpeSnmpAccessDomainNetmask = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 2, 19, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeSnmpAccessDomainNetmask.setStatus('current')
gemtekDevCpeTrapServer = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 3, 1))
gemtekDevCpeTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 3, 2))
gemtekDevCpeSystemDate = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 4, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeSystemDate.setStatus('current')
gemtekDevCpeNtpServerEnable = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeNtpServerEnable.setStatus('current')
gemtekDevCpeNtpServer = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 4, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeNtpServer.setStatus('current')
gemtekDevCpeNtpServerFromDHCP = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeNtpServerFromDHCP.setStatus('current')
gemtekDevCpeTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeTimeZone.setStatus('current')
gemtekDevCpeDaylightSaving = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeDaylightSaving.setStatus('current')
administratorUsername = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 5, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: administratorUsername.setStatus('current')
administratorPassword = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 5, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: administratorPassword.setStatus('current')
administratorEnable = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: administratorEnable.setStatus('current')
operatorUsername = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 5, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: operatorUsername.setStatus('current')
operatorPassword = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 5, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: operatorPassword.setStatus('current')
operatorEnable = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: operatorEnable.setStatus('current')
adminUsername = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 5, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminUsername.setStatus('current')
adminPassword = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 5, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminPassword.setStatus('current')
adminEnable = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminEnable.setStatus('current')
gemtekDevCpeChannelBandwidthRang = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("threeToFive", 0), ("sixToTen", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeChannelBandwidthRang.setStatus('deprecated')
gemtekDevCpeChannelApplyLoadOrSave = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("load", 0), ("save", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeChannelApplyLoadOrSave.setStatus('current')
gemtekDevCpeChannelTable = MibTable((1, 3, 6, 1, 4, 1, 10529, 300, 6, 3), )
if mibBuilder.loadTexts: gemtekDevCpeChannelTable.setStatus('current')
gemtekDevCpeFrequencyRangeSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 6, 4))
gemtekDevCpeAPPreferredList = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 6, 5))
gemtekDevCpeLockFrequencyRangeMin = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 6, 4, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeLockFrequencyRangeMin.setStatus('current')
gemtekDevCpeLockFrequencyRangeMax = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 6, 4, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeLockFrequencyRangeMax.setStatus('current')
gemtekDevCpeLockFrequencyRange = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 6, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unlock", 0), ("lock", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeLockFrequencyRange.setStatus('current')
gemtekDevCpeModelFrequencyRangeMin = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 6, 4, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeModelFrequencyRangeMin.setStatus('current')
gemtekDevCpeModelFrequencyRangeMax = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 6, 4, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeModelFrequencyRangeMax.setStatus('current')
gemtekDevCpeAPPreferredSelectionEnable = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 6, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeAPPreferredSelectionEnable.setStatus('current')
gemtekDevCpeAPPreferredBsIdListLocked = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 6, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeAPPreferredBsIdListLocked.setStatus('current')
gemtekDevCpeAPPreferredPriorityOneBsId = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 6, 5, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeAPPreferredPriorityOneBsId.setStatus('current')
gemtekDevCpeAPPreferredPriorityTwoBsId = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 6, 5, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeAPPreferredPriorityTwoBsId.setStatus('current')
gemtekDevCpeAPPreferredPriorityThreeBsId = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 6, 5, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeAPPreferredPriorityThreeBsId.setStatus('current')
gemtekDevCpeAPPreferredPriorityFourBsId = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 6, 5, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeAPPreferredPriorityFourBsId.setStatus('current')
gemtekDevCpeChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10529, 300, 6, 3, 1), ).setIndexNames((0, "Motorola-Cpe-PRIVATE-MIB", "gemtekDevCpeChannelIndex"))
if mibBuilder.loadTexts: gemtekDevCpeChannelEntry.setStatus('current')
gemtekDevCpeChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeChannelIndex.setStatus('current')
gemtekDevCpeChannelActive = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeChannelActive.setStatus('current')
gemtekDevCpeChannelFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 6, 3, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeChannelFrequency.setStatus('current')
gemtekDevCpeChannelBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 6, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeChannelBandwidth.setStatus('current')
gemtekDevCpeChannelRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 6, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeChannelRssi.setStatus('current')
gemtekDevCpeChannelCinr = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 6, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeChannelCinr.setStatus('current')
gemtekDevCpeChannelEntryEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 6, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeChannelEntryEnable.setStatus('current')
gemtekDevCpeChannelRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 6, 3, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeChannelRowstatus.setStatus('current')
gemtekDevCpeChannelBsId = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 6, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeChannelBsId.setStatus('current')
gemtekDevCpeChannelPreambelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 6, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeChannelPreambelIndex.setStatus('current')
gemtekDevCpeAuthenticationSelectionPhase1 = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("eapTtls", 1), ("eapTls", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeAuthenticationSelectionPhase1.setStatus('current')
eapIdentityType = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noIdentity", 0), ("manaulIdentity", 1), ("randomIdentity", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eapIdentityType.setStatus('current')
eapIdentityUseRealm = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eapIdentityUseRealm.setStatus('current')
eapIdentityString = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 7, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eapIdentityString.setStatus('current')
eapRealmString = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 7, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eapRealmString.setStatus('current')
eapValidateTheDateDurationOfCaCertificate = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eapValidateTheDateDurationOfCaCertificate.setStatus('current')
eapValidateTheServerCertificate = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eapValidateTheServerCertificate.setStatus('current')
gemtekDevCpeAuthenticationEAPTLS = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 7, 8))
gemtekDevCpeAuthenticationEAPTTLS = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 7, 9))
gemtekDevCpeCertificationFileManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10))
gemtekDevCpeCertificateUpload = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 1))
gemtekDevCpeCACertificateFileName = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeCACertificateFileName.setStatus('current')
gemtekDevCpeCACertificateFileUpload = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("upload", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeCACertificateFileUpload.setStatus('current')
gemtekDevCpeUserCertificateFileName = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeUserCertificateFileName.setStatus('current')
gemtekDevCpeUserCertificateFileUpload = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("upload", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeUserCertificateFileUpload.setStatus('current')
gemtekDevCpeCACertificateFileDelete = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fileOne", 1), ("fileTwo", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeCACertificateFileDelete.setStatus('current')
gemtekDevCpeUserCertificateFileDelete = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fileOne", 1), ("fileTwo", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeUserCertificateFileDelete.setStatus('current')
gemtekDevCpeCACertificateFileTable = MibTable((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 4), )
if mibBuilder.loadTexts: gemtekDevCpeCACertificateFileTable.setStatus('current')
gemtekDevCpeCACertificateFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 4, 1), ).setIndexNames((0, "Motorola-Cpe-PRIVATE-MIB", "gemtekDevCpeCACertificateIndex"))
if mibBuilder.loadTexts: gemtekDevCpeCACertificateFileEntry.setStatus('current')
gemtekDevCpeCACertificateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeCACertificateIndex.setStatus('current')
gemtekDevCpeCACertificateSize = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeCACertificateSize.setStatus('current')
gemtekDevCpeCACertificateIssuer = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeCACertificateIssuer.setStatus('current')
gemtekDevCpeCAValidityDateBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeCAValidityDateBegin.setStatus('current')
gemtekDevCpeCAValidityDateEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeCAValidityDateEnd.setStatus('current')
gemtekDevCpeCACertificateSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeCACertificateSubject.setStatus('current')
gemtekDevCpeUserCertificateFileTable = MibTable((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 5), )
if mibBuilder.loadTexts: gemtekDevCpeUserCertificateFileTable.setStatus('current')
gemtekDevCpeUserCertificateFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 5, 1), ).setIndexNames((0, "Motorola-Cpe-PRIVATE-MIB", "gemtekDevCpeUserCertificateIndex"))
if mibBuilder.loadTexts: gemtekDevCpeUserCertificateFileEntry.setStatus('current')
gemtekDevCpeUserCertificateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeUserCertificateIndex.setStatus('current')
gemtekDevCpeUserCertificateSize = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeUserCertificateSize.setStatus('current')
gemtekDevCpeUserCertificateIssuer = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeUserCertificateIssuer.setStatus('current')
gemtekDevCpeUserValidityDateBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeUserValidityDateBegin.setStatus('current')
gemtekDevCpeUserValidityDateEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeUserValidityDateEnd.setStatus('current')
gemtekDevCpeUserCertificateSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 7, 10, 5, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeUserCertificateSubject.setStatus('current')
gemtekDevCpeNetoworkOperatingMode = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nat", 0), ("bridge", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeNetoworkOperatingMode.setStatus('current')
gemtekDevCpeBridgeMode = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2))
gemtekDevCpeNatMode = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3))
gemtekDevCpeAllowWebAccessingFromWan = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeAllowWebAccessingFromWan.setStatus('current')
gemtekDevCpeAllowTelnetAccessingFromWan = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeAllowTelnetAccessingFromWan.setStatus('current')
gemtekDevCpeDmzEnable = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeDmzEnable.setStatus('current')
gemtekDevCpeDmzIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 9, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeDmzIpAddress.setStatus('current')
gemtekDevCpeRedirectIcmpToTheDmzHostEnable = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeRedirectIcmpToTheDmzHostEnable.setStatus('current')
gemtekDevCpeFirewallEnable = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeFirewallEnable.setStatus('current')
gemtekDevCpeFirewallTable = MibTable((1, 3, 6, 1, 4, 1, 10529, 300, 9, 7), )
if mibBuilder.loadTexts: gemtekDevCpeFirewallTable.setStatus('current')
gemtekDevCpeFirewallEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10529, 300, 9, 7, 1), ).setIndexNames((0, "Motorola-Cpe-PRIVATE-MIB", "gemtekDevCpeFirewallIndex"))
if mibBuilder.loadTexts: gemtekDevCpeFirewallEntry.setStatus('current')
gemtekDevCpeFirewallIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 9, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeFirewallIndex.setStatus('current')
gemtekDevCpeFirewallName = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 9, 7, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeFirewallName.setStatus('current')
gemtekDevCpeFirewallAction = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 9, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deny", 0), ("allow", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeFirewallAction.setStatus('current')
gemtekDevCpeFirewallInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 9, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ethernet", 0), ("wimax", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeFirewallInterface.setStatus('current')
gemtekDevCpeFirewallProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 9, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 6, 17))).clone(namedValues=NamedValues(("any", 0), ("icmp", 1), ("tcp", 6), ("udp", 17)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeFirewallProtocol.setStatus('current')
gemtekDevCpeFirewallPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 9, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("hi", 1), ("two", 2), ("three", 3), ("four", 4), ("five", 5), ("six", 6), ("seven", 7), ("eight", 8), ("nine", 9), ("lo", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeFirewallPriority.setStatus('current')
gemtekDevCpeFirewallEntryEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 9, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeFirewallEntryEnable.setStatus('current')
gemtekDevCpeFirewallSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 9, 7, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeFirewallSrcMac.setStatus('current')
gemtekDevCpeFirewallDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 9, 7, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeFirewallDstMac.setStatus('current')
gemtekDevCpeFirewallSrcIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 9, 7, 1, 10), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeFirewallSrcIpAddress.setStatus('current')
gemtekDevCpeFirewallDstIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 9, 7, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeFirewallDstIpAddress.setStatus('current')
gemtekDevCpeFirewallSrcPortRangeBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 9, 7, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeFirewallSrcPortRangeBegin.setStatus('current')
gemtekDevCpeFirewallSrcPortRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 9, 7, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeFirewallSrcPortRangeEnd.setStatus('current')
gemtekDevCpeFirewallDstPortRangeBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 9, 7, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeFirewallDstPortRangeBegin.setStatus('current')
gemtekDevCpeFirewallDstPortRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 9, 7, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeFirewallDstPortRangeEnd.setStatus('current')
gemtekDevCpeFirewallRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 9, 7, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeFirewallRowstatus.setStatus('current')
gemtekDevCpeTelnetEnable = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 9, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeTelnetEnable.setStatus('current')
gemtekDevCpeFirewallEtherTypeFilterOneEnable = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeFirewallEtherTypeFilterOneEnable.setStatus('current')
gemtekDevCpeFirewallEtherTypeFilterOneTypeDeny = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 9, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeFirewallEtherTypeFilterOneTypeDeny.setStatus('current')
gemtekDevCpeFirewallEtherTypeFilterTwoEnable = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 9, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeFirewallEtherTypeFilterTwoEnable.setStatus('current')
gemtekDevCpeFirewallEtherTypeFilterTwoTypeDeny = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 9, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeFirewallEtherTypeFilterTwoTypeDeny.setStatus('current')
gemtekDevCpeFirewallEtherTypeFilterThreeEnable = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 9, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeFirewallEtherTypeFilterThreeEnable.setStatus('current')
gemtekDevCpeFirewallEtherTypeFilterThreeTypeDeny = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 9, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeFirewallEtherTypeFilterThreeTypeDeny.setStatus('current')
gemtekDevCpeFirewallEtherTypeFilterFourEnable = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 9, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeFirewallEtherTypeFilterFourEnable.setStatus('current')
gemtekDevCpeFirewallEtherTypeFilterFourTypeDeny = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 9, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeFirewallEtherTypeFilterFourTypeDeny.setStatus('current')
gemtekDevCpeFirewallEtherTypeFilterFiveEnable = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 9, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeFirewallEtherTypeFilterFiveEnable.setStatus('current')
gemtekDevCpeFirewallEtherTypeFilterFiveTypeDeny = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 9, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeFirewallEtherTypeFilterFiveTypeDeny.setStatus('current')
gemtekDevCpeFirewallPPPoEEnable = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 9, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeFirewallPPPoEEnable.setStatus('current')
gemtekDevCpeServiceFlowTable = MibTable((1, 3, 6, 1, 4, 1, 10529, 300, 11, 1), )
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowTable.setStatus('current')
gemtekDevCpeServiceFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10529, 300, 11, 1, 1), ).setIndexNames((0, "Motorola-Cpe-PRIVATE-MIB", "gemtekDevCpeServiceFlowIndex"))
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowEntry.setStatus('current')
gemtekDevCpeServiceFlowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowIndex.setStatus('current')
gemtekDevCpeServiceFlowSFID = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 11, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowSFID.setStatus('current')
gemtekDevCpeServiceFlowCID = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 11, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowCID.setStatus('current')
gemtekDevCpeServiceFlowBCID = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 11, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowBCID.setStatus('current')
gemtekDevCpeServiceFlowType = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("basic", 0), ("primary", 1), ("secondary", 2), ("data", 3), ("multicast", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowType.setStatus('current')
gemtekDevCpeServiceFlowState = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("provisioned", 0), ("admitted", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowState.setStatus('current')
gemtekDevCpeServiceFlowDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("uplink", 1), ("downlink", 2), ("bidirectional", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowDirection.setStatus('current')
gemtekDevCpeServiceFlowEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 11, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowEnable.setStatus('current')
gemtekDevCpeServiceFlowScheduling = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 11, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("bestEffort", 2), ("nrtps", 3), ("rtps", 4), ("ertps", 5), ("ugs", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowScheduling.setStatus('current')
gemtekDevCpeServiceFlowMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 11, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowMaxRate.setStatus('current')
gemtekDevCpeServiceFlowARQ = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 11, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowARQ.setStatus('current')
gemtekDevCpeServiceFlowHARQ = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 11, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowHARQ.setStatus('current')
gemtekDevCpeServiceFlowRules = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 11, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeServiceFlowRules.setStatus('current')
gemtekDevCpePullFtpServerIP = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 21, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpePullFtpServerIP.setStatus('current')
gemtekDevCpePullFtpServerUserName = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 21, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpePullFtpServerUserName.setStatus('current')
gemtekDevCpePullFtpServerPassword = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 21, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpePullFtpServerPassword.setStatus('current')
gemtekDevCpePullFtpFilePath = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 21, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpePullFtpFilePath.setStatus('current')
gemtekDevCpePullFtpFileName = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 21, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpePullFtpFileName.setStatus('current')
gemtekDevCpePullFtpUpgradeCmd = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 21, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("downloadAndUpgrade", 1), ("rollback", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpePullFtpUpgradeCmd.setStatus('current')
gemtekDevCpePullFtpUpgradeAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 21, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("ready", 0), ("downloading", 1), ("installing", 2), ("error", 3), ("success", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpePullFtpUpgradeAdminStatus.setStatus('current')
gemtekDevCpeCurrentSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 22, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeCurrentSwVersion.setStatus('current')
gemtekDevCpePreviousSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 22, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpePreviousSwVersion.setStatus('current')
gemtekDevCpeDownloadSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 22, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeDownloadSwVersion.setStatus('current')
gemtekDevCpePushFtpUpgradeCmd = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 22, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("default", 0), ("download", 1), ("upgrade", 2), ("rollback", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpePushFtpUpgradeCmd.setStatus('current')
gemtekDevCpePushFtpUpgradeAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 22, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ready", 0), ("installing", 1), ("error", 2), ("success", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpePushFtpUpgradeAdminStatus.setStatus('current')
gemtekDevCpeWimaxRssi = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeWimaxRssi.setStatus('current')
gemtekDevCpeWimaxCinr = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeWimaxCinr.setStatus('current')
gemtekDevCpeWimaxTxPower = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeWimaxTxPower.setStatus('current')
gemtekDevCpeWimaxMaxTxPower = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeWimaxMaxTxPower.setStatus('current')
gemtekDevCpeWimaxUpLinkModulation = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeWimaxUpLinkModulation.setStatus('current')
gemtekDevCpeWimaxDownLinkModulation = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeWimaxDownLinkModulation.setStatus('current')
gemtekDevCpeWimaxBsid = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeWimaxBsid.setStatus('current')
gemtekDevCpeWimaxFrequency = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeWimaxFrequency.setStatus('current')
gemtekDevCpeWimaxUpLinkDataRate = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeWimaxUpLinkDataRate.setStatus('current')
gemtekDevCpeWimaxDownLinkDataRate = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeWimaxDownLinkDataRate.setStatus('current')
gemtekDevCpeWimaxTotalUpLinkDataByte = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeWimaxTotalUpLinkDataByte.setStatus('current')
gemtekDevCpeWimaxTotalDownLinkDataByte = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeWimaxTotalDownLinkDataByte.setStatus('current')
gemtekDevCpeWimaxCpeState = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeWimaxCpeState.setStatus('current')
gemtekDevCpeWimaxCinrReuse1 = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeWimaxCinrReuse1.setStatus('current')
gemtekDevCpeWimaxCinrReuse3 = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeWimaxCinrReuse3.setStatus('current')
gemtekDevCpeWimaxBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeWimaxBandwidth.setStatus('current')
gemtekDevCpeWimaxZoneCinrChannelZero = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeWimaxZoneCinrChannelZero.setStatus('current')
gemtekDevCpeWimaxMimoMode = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("siso", 0), ("mimoMatrixA", 1), ("mimoMatrixB", 2), ("disconnect", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeWimaxMimoMode.setStatus('current')
gemtekDevCpeLanMacAddresss = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeLanMacAddresss.setStatus('current')
gemtekDevCpeLanTotalDownLinkDataByte = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 2, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeLanTotalDownLinkDataByte.setStatus('current')
gemtekDevCpeLanTotalUpLinkDataByte = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 2, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeLanTotalUpLinkDataByte.setStatus('current')
gemtekDevCpeLanTotalDownLinkDataPackets = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 2, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeLanTotalDownLinkDataPackets.setStatus('current')
gemtekDevCpeLanTotalUpLinkDataPackets = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 2, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeLanTotalUpLinkDataPackets.setStatus('current')
gemtekDevCpeWanMacAddresss = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 2, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeWanMacAddresss.setStatus('current')
gemtekDevCpeWanTotalDownLinkDataPackets = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 2, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeWanTotalDownLinkDataPackets.setStatus('current')
gemtekDevCpeWanTotalUpLinkDataPackets = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 2, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeWanTotalUpLinkDataPackets.setStatus('current')
gemtekDevCpeHardwareModel = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeHardwareModel.setStatus('current')
gemtekDevCpeFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 3, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeFirmwareVersion.setStatus('current')
gemtekDevCpeFirmwareCreationDate = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 3, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeFirmwareCreationDate.setStatus('current')
gemtekDevCpeFrequencyRange = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 3, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeFrequencyRange.setStatus('current')
gemtekDevCpeSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeSerialNumber.setStatus('current')
gemtekDevCpeLatitude = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 3, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeLatitude.setStatus('current')
gemtekDevCpeLongitude = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 3, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeLongitude.setStatus('current')
gemtekDevCpeHeight = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 3, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeHeight.setStatus('current')
gemtekDevCpeMibsVersion = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 3, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeMibsVersion.setStatus('current')
gemtekDevCpeBootromVersion = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 3, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeBootromVersion.setStatus('current')
gemtekDevCpeBootromCreationDate = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 3, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeBootromCreationDate.setStatus('current')
gemtekDevCpeProductVersion = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 1, 3, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeProductVersion.setStatus('current')
trapServerEnable = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapServerEnable.setStatus('current')
trapServerIp = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapServerIp.setStatus('current')
trapServerPort = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapServerPort.setStatus('current')
trapServerCommunity = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapServerCommunity.setStatus('current')
coldStart = NotificationType((1, 3, 6, 1, 4, 1, 10529, 300, 3, 2, 1))
if mibBuilder.loadTexts: coldStart.setStatus('current')
warmStart = NotificationType((1, 3, 6, 1, 4, 1, 10529, 300, 3, 2, 2))
if mibBuilder.loadTexts: warmStart.setStatus('current')
fatalErrorRestart = NotificationType((1, 3, 6, 1, 4, 1, 10529, 300, 3, 2, 3))
if mibBuilder.loadTexts: fatalErrorRestart.setStatus('current')
linkUp = NotificationType((1, 3, 6, 1, 4, 1, 10529, 300, 3, 2, 4)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifAdminStatus"), ("IF-MIB", "ifOperStatus"))
if mibBuilder.loadTexts: linkUp.setStatus('current')
notTheHightestPriorityAP = NotificationType((1, 3, 6, 1, 4, 1, 10529, 300, 3, 2, 5))
if mibBuilder.loadTexts: notTheHightestPriorityAP.setStatus('current')
eapTlsPrivateKeyPassword = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 7, 8, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eapTlsPrivateKeyPassword.setStatus('current')
eapTtlsPhase2 = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 7, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pap", 1), ("chap", 2), ("mschap", 3), ("mschapV2", 4), ("md5", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eapTtlsPhase2.setStatus('current')
eapTtlsUsername = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 7, 9, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eapTtlsUsername.setStatus('current')
eapTtlsPassword = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 7, 9, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eapTtlsPassword.setStatus('current')
eapTtlsUseDeviceCertificate = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 7, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eapTtlsUseDeviceCertificate.setStatus('current')
eapTtlsPrivateKeyPassword = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 7, 9, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eapTtlsPrivateKeyPassword.setStatus('current')
gemtekDevCpeBridgeIpType = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("static", 0), ("dhcp", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeBridgeIpType.setStatus('current')
gemtekDevCpeBridgeIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeBridgeIpAddress.setStatus('current')
gemtekDevCpeBridgeNetmask = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeBridgeNetmask.setStatus('current')
gemtekDevCpeBridgeGateway = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeBridgeGateway.setStatus('current')
gemtekDevCpeBridgeDhcpLeaseTime = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeBridgeDhcpLeaseTime.setStatus('current')
gemtekDevCpeBridgeDhcpRenewalTime = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeBridgeDhcpRenewalTime.setStatus('current')
gemtekDevCpeBridgeDhcpRebindTime = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeBridgeDhcpRebindTime.setStatus('current')
gemtekDevCpeMVLAN = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8))
gemtekDevCpeMgmtVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 1))
gemtekDevCpeDataVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 2))
gemtekDevCpeVlanMembershipTable = MibTable((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 3), )
if mibBuilder.loadTexts: gemtekDevCpeVlanMembershipTable.setStatus('current')
gemtekDevCpeVlanMembershipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 3, 1), ).setIndexNames((0, "Motorola-Cpe-PRIVATE-MIB", "gemtekDevCpeVlanMembershipIndex"))
if mibBuilder.loadTexts: gemtekDevCpeVlanMembershipEntry.setStatus('current')
gemtekDevCpeDscpToVp = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 4))
gemtekDevCpePktCounter = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 5))
gemtekDevCpeMgmtVlanEnalbe = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeMgmtVlanEnalbe.setStatus('current')
gemtekDevCpeMgmtVlanVid = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeMgmtVlanVid.setStatus('current')
gemtekDevCpeMgmtVlanVp = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeMgmtVlanVp.setStatus('current')
gemtekDevCpeDataVlanEnalbe = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeDataVlanEnalbe.setStatus('current')
gemtekDevCpeDataVlanVid = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 2, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeDataVlanVid.setStatus('current')
gemtekDevCpeAllowPacketType = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("all", 0), ("taggedOnly", 1), ("untaggedOnly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeAllowPacketType.setStatus('current')
gemtekDevCpeVlanMembershipIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeVlanMembershipIndex.setStatus('current')
gemtekDevCpeVlanMembershipVidBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 3, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeVlanMembershipVidBegin.setStatus('current')
gemtekDevCpeVlanMembershipVidEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 3, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeVlanMembershipVidEnd.setStatus('current')
gemtekDevCpeVlanMembershipVidRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeVlanMembershipVidRowstatus.setStatus('current')
gemtekDevCpeDscpToVpMapping = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 4, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeDscpToVpMapping.setStatus('current')
gemtekDevCpeTaggedPkts = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 5, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeTaggedPkts.setStatus('current')
gemtekDevCpeTaggedPktsReset = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeTaggedPktsReset.setStatus('current')
gemtekDevCpeUntaggedPkts = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 5, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeUntaggedPkts.setStatus('current')
gemtekDevCpeUntaggedPktsReset = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeUntaggedPktsReset.setStatus('current')
gemtekDevCpeNonmemberPkts = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 5, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeNonmemberPkts.setStatus('current')
gemtekDevCpeNonmemberPktsReset = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 2, 8, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeNonmemberPktsReset.setStatus('current')
gemtekDevCpeNatWanIpType = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("static", 0), ("dhcp", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeNatWanIpType.setStatus('current')
gemtekDevCpeNatWanIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeNatWanIpAddress.setStatus('current')
gemtekDevCpeNatWanNetmask = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeNatWanNetmask.setStatus('current')
gemtekDevCpeNatWanGateway = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeNatWanGateway.setStatus('current')
gemtekDevCpeNatWanDhcpLeaseTime = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeNatWanDhcpLeaseTime.setStatus('current')
gemtekDevCpeNatWanDhcpRenewalTime = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeNatWanDhcpRenewalTime.setStatus('current')
gemtekDevCpeNatWanDhcpRebindTime = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeNatWanDhcpRebindTime.setStatus('current')
gemtekDevCpeNatLanIpType = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("static", 0), ("dhcp", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeNatLanIpType.setStatus('current')
gemtekDevCpeNatLanIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeNatLanIpAddress.setStatus('current')
gemtekDevCpeNatLanNetmask = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeNatLanNetmask.setStatus('current')
gemtekDevCpeNatMtu = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeNatMtu.setStatus('current')
gemtekDevCpeDhcpServer = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 9))
gemtekDevCpePortForwarding = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 10))
gemtekDevCpePortTrigger = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 11))
gemtekDevCpeDhcpClientList = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 12))
gemtekDevCpeDscpConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 13))
gemtekDevCpeNatModeVLAN = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 17))
gemtekDevCpeNatModeMgmtVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 17, 1))
gemtekDevCpeNatModeDataVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 17, 2))
gemtekDevCpeNatModeMgmtVlanEnalbe = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeNatModeMgmtVlanEnalbe.setStatus('current')
gemtekDevCpeNatModeMgmtVlanVid = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 17, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeNatModeMgmtVlanVid.setStatus('current')
gemtekDevCpeNatModeMgmtVlanVp = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 17, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeNatModeMgmtVlanVp.setStatus('current')
gemtekDevCpeNatModeDataVlanEnalbe = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 17, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeNatModeDataVlanEnalbe.setStatus('current')
gemtekDevCpeNatModeDataVlanVid = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 17, 2, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeNatModeDataVlanVid.setStatus('current')
gemtekDevCpeNatModeDataVlanVp = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 17, 2, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeNatModeDataVlanVp.setStatus('current')
gemtekDevCpeDhcpServerEnable = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerEnable.setStatus('current')
gemtekDevCpeDhcpServerStartIp = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 9, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerStartIp.setStatus('current')
gemtekDevCpeDhcpServerEndIp = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 9, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerEndIp.setStatus('current')
gemtekDevCpeDhcpServerPrimaryDnsIp = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 9, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerPrimaryDnsIp.setStatus('current')
gemtekDevCpeDhcpServerPrimaryDnsFromIsp = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerPrimaryDnsFromIsp.setStatus('current')
gemtekDevCpeDhcpServerSecondDnsIp = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 9, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerSecondDnsIp.setStatus('current')
gemtekDevCpeDhcpServerSecondDnsFromIsp = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 9, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerSecondDnsFromIsp.setStatus('current')
gemtekDevCpeDhcpServerTertiaryDnsIp = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 9, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerTertiaryDnsIp.setStatus('current')
gemtekDevCpeDhcpServerTertiaryDnsFromIsp = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerTertiaryDnsFromIsp.setStatus('current')
gemtekDevCpeDhcpServerDomainName = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 9, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerDomainName.setStatus('current')
gemtekDevCpeDhcpServerMaxLeaseTime = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 9, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerMaxLeaseTime.setStatus('current')
gemtekDevCpeDhcpServerPermanentHostTable = MibTable((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 9, 12), )
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerPermanentHostTable.setStatus('current')
gemtekDevCpeDhcpServerPermanentHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 9, 12, 1), ).setIndexNames((0, "Motorola-Cpe-PRIVATE-MIB", "gemtekDevCpeDhcpServerPermanentHostIndex"))
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerPermanentHostEntry.setStatus('current')
gemtekDevCpeDhcpServerPermanentHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 9, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerPermanentHostIndex.setStatus('current')
gemtekDevCpeDhcpServerPermanentHostMac = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 9, 12, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerPermanentHostMac.setStatus('current')
gemtekDevCpeDhcpServerPermanentHostIp = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 9, 12, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerPermanentHostIp.setStatus('current')
gemtekDevCpeDhcpServerPermanentHostEntryEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 9, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerPermanentHostEntryEnable.setStatus('current')
gemtekDevCpeDhcpServerPermanentRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 9, 12, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeDhcpServerPermanentRowstatus.setStatus('current')
gemtekDevCpePortForwardingTable = MibTable((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 10, 1), )
if mibBuilder.loadTexts: gemtekDevCpePortForwardingTable.setStatus('current')
gemtekDevCpePortForwardingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 10, 1, 1), ).setIndexNames((0, "Motorola-Cpe-PRIVATE-MIB", "gemtekDevCpePortForwardingIndex"))
if mibBuilder.loadTexts: gemtekDevCpePortForwardingEntry.setStatus('current')
gemtekDevCpePortForwardingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpePortForwardingIndex.setStatus('current')
gemtekDevCpePortForwardingWanPortBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 10, 1, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpePortForwardingWanPortBegin.setStatus('current')
gemtekDevCpePortForwardingWanPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 10, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpePortForwardingWanPortEnd.setStatus('current')
gemtekDevCpePortForwardingLanIp = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 10, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpePortForwardingLanIp.setStatus('current')
gemtekDevCpePortForwardingLanPortBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 10, 1, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpePortForwardingLanPortBegin.setStatus('current')
gemtekDevCpePortForwardingLanPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 10, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpePortForwardingLanPortEnd.setStatus('current')
gemtekDevCpePortForwardingProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("tcp", 0), ("udp", 1), ("tcpAndUdp", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpePortForwardingProtocol.setStatus('current')
gemtekDevCpePortForwardingEntryEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpePortForwardingEntryEnable.setStatus('current')
gemtekDevCpePortForwardingRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 10, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpePortForwardingRowstatus.setStatus('current')
gemtekDevCpePortTriggerTable = MibTable((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 11, 1), )
if mibBuilder.loadTexts: gemtekDevCpePortTriggerTable.setStatus('current')
gemtekDevCpePortTriggerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 11, 1, 1), ).setIndexNames((0, "Motorola-Cpe-PRIVATE-MIB", "gemtekDevCpePortTriggerIndex"))
if mibBuilder.loadTexts: gemtekDevCpePortTriggerEntry.setStatus('current')
gemtekDevCpePortTriggerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpePortTriggerIndex.setStatus('current')
gemtekDevCpePortTriggerName = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 11, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpePortTriggerName.setStatus('current')
gemtekDevCpePortTriggerTriggerPortBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 11, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpePortTriggerTriggerPortBegin.setStatus('current')
gemtekDevCpePortTriggerTriggerPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 11, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpePortTriggerTriggerPortEnd.setStatus('current')
gemtekDevCpePortTriggerForwardingPortBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 11, 1, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpePortTriggerForwardingPortBegin.setStatus('current')
gemtekDevCpePortTriggerForwardingPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 11, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpePortTriggerForwardingPortEnd.setStatus('current')
gemtekDevCpePortTriggerProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tcp", 0), ("udp", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpePortTriggerProtocol.setStatus('current')
gemtekDevCpePortTriggerEntryEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 11, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpePortTriggerEntryEnable.setStatus('current')
gemtekDevCpePortTriggerRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 11, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpePortTriggerRowstatus.setStatus('current')
gemtekDevCpeDhcpClentListTable = MibTable((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 12, 1), )
if mibBuilder.loadTexts: gemtekDevCpeDhcpClentListTable.setStatus('current')
gemtekDevCpeDhcpClentListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 12, 1, 1), ).setIndexNames((0, "Motorola-Cpe-PRIVATE-MIB", "gemtekDevCpeDhcpClentListIndex"))
if mibBuilder.loadTexts: gemtekDevCpeDhcpClentListEntry.setStatus('current')
gemtekDevCpeDhcpClentListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeDhcpClentListIndex.setStatus('current')
gemtekDevCpeDhcpClentListIp = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 12, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeDhcpClentListIp.setStatus('current')
gemtekDevCpeDhcpClentListMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 12, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeDhcpClentListMacAddress.setStatus('current')
gemtekDevCpeDhcpClentListExpireTime = MibTableColumn((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 12, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeDhcpClentListExpireTime.setStatus('current')
gemtekDevCpeTftpServerIP = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 69, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeTftpServerIP.setStatus('current')
gemtekDevCpeTftpFileName = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 69, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeTftpFileName.setStatus('current')
gemtekDevCpeTftpUpgradeCmd = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 69, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("downloadAndUpgrade", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeTftpUpgradeCmd.setStatus('current')
gemtekDevCpeTftpUpgradeAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 69, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("ready", 0), ("downloading", 1), ("installing", 2), ("error", 3), ("success", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gemtekDevCpeTftpUpgradeAdminStatus.setStatus('current')
gemtekDevCpeMgmtDscpId = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 13, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeMgmtDscpId.setStatus('current')
gemtekDevCpeDropDataPacket = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 8, 3, 13, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeDropDataPacket.setStatus('current')
gemtekDevCpeSyslogEnable = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeSyslogEnable.setStatus('current')
gemtekDevCpeSyslogServerIp = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 12, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeSyslogServerIp.setStatus('current')
gemtekDevCpeSyslogServerPort = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 12, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gemtekDevCpeSyslogServerPort.setStatus('current')
gemtekDevCpeMaxTxPowerModeSelection = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("rf", 0), ("eirp", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeMaxTxPowerModeSelection.setStatus('obsolete')
gemtekDevCpeMaxTxPowerRfMode = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 13, 2))
gemtekDevCpeMaxTxPowerEirpMode = MibIdentifier((1, 3, 6, 1, 4, 1, 10529, 300, 13, 3))
gemtekDevCpeRfModeBPSK = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 13, 2, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeRfModeBPSK.setStatus('obsolete')
gemtekDevCpeRfModeQPSK = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 13, 2, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeRfModeQPSK.setStatus('obsolete')
gemtekDevCpeRfModeQAM16 = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 13, 2, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeRfModeQAM16.setStatus('obsolete')
gemtekDevCpeRfModeQAM64 = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 13, 2, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeRfModeQAM64.setStatus('obsolete')
gemtekDevCpeEirpModeAntennaGain = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 13, 3, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeEirpModeAntennaGain.setStatus('obsolete')
gemtekDevCpeEirpModeBPSK = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 13, 3, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeEirpModeBPSK.setStatus('obsolete')
gemtekDevCpeEirpModeQPSK = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 13, 3, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeEirpModeQPSK.setStatus('obsolete')
gemtekDevCpeEirpModeQAM16 = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 13, 3, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeEirpModeQAM16.setStatus('obsolete')
gemtekDevCpeEirpModeQAM64 = MibScalar((1, 3, 6, 1, 4, 1, 10529, 300, 13, 3, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gemtekDevCpeEirpModeQAM64.setStatus('obsolete')
mibBuilder.exportSymbols("Motorola-Cpe-PRIVATE-MIB", gemtekDevCpePortForwardingEntryEnable=gemtekDevCpePortForwardingEntryEnable, gemtekDevCpeNatMode=gemtekDevCpeNatMode, gemtekDevCpeAPPreferredList=gemtekDevCpeAPPreferredList, gemtekDevCpeTelnetEnable=gemtekDevCpeTelnetEnable, gemtekDevCpeWimaxUpLinkModulation=gemtekDevCpeWimaxUpLinkModulation, gemtekDevCpeStatus=gemtekDevCpeStatus, gemtekDevCpeFirewallEtherTypeFilterFiveTypeDeny=gemtekDevCpeFirewallEtherTypeFilterFiveTypeDeny, gemtekDevCpeServiceFlowEnable=gemtekDevCpeServiceFlowEnable, gemtekDevCpeCACertificateFileEntry=gemtekDevCpeCACertificateFileEntry, gemtekDevCpeTftpUpgrade=gemtekDevCpeTftpUpgrade, gemtekDevCpeTftpFileName=gemtekDevCpeTftpFileName, gemtekDevCpeFirmwareValidationTime=gemtekDevCpeFirmwareValidationTime, gemtekDevCpeChannelBandwidthRang=gemtekDevCpeChannelBandwidthRang, gemtekDevCpeLockFrequencyRange=gemtekDevCpeLockFrequencyRange, gemtekDevCpeFirewallSrcIpAddress=gemtekDevCpeFirewallSrcIpAddress, gemtekDevCpeNatModeMgmtVlanEnalbe=gemtekDevCpeNatModeMgmtVlanEnalbe, gemtekDevCpeEirpModeQPSK=gemtekDevCpeEirpModeQPSK, gemtekDevCpeFirewallSrcPortRangeBegin=gemtekDevCpeFirewallSrcPortRangeBegin, gemtekDevCpeFirewallIndex=gemtekDevCpeFirewallIndex, gemtekDevCpeSnmpAccessDomain=gemtekDevCpeSnmpAccessDomain, gemtekDevCpeFirmwareCreationDate=gemtekDevCpeFirmwareCreationDate, gemtekDevCpeModelFrequencyRangeMax=gemtekDevCpeModelFrequencyRangeMax, eapTlsPrivateKeyPassword=eapTlsPrivateKeyPassword, gemtekDevCpeServiceFlow=gemtekDevCpeServiceFlow, gemtekDevCpeBridgeDhcpRebindTime=gemtekDevCpeBridgeDhcpRebindTime, gemtekDevCpeMgmtDscpId=gemtekDevCpeMgmtDscpId, gemtekDevCpeLanTotalUpLinkDataByte=gemtekDevCpeLanTotalUpLinkDataByte, gemtekDevCpeBridgeIpAddress=gemtekDevCpeBridgeIpAddress, gemtekDevCpe=gemtekDevCpe, gemtekDevCpeAPPreferredSelectionEnable=gemtekDevCpeAPPreferredSelectionEnable, gemtekDevCpeMgmtVlanEnalbe=gemtekDevCpeMgmtVlanEnalbe, gemtekDevCpeFirmwareValidationCount=gemtekDevCpeFirmwareValidationCount, gemtekDevCpeChannelRssi=gemtekDevCpeChannelRssi, gemtekDevCpeDhcpServerTertiaryDnsIp=gemtekDevCpeDhcpServerTertiaryDnsIp, gemtekDevCpeNatWanIpAddress=gemtekDevCpeNatWanIpAddress, networkStatus=networkStatus, gemtekDevCpePortTriggerProtocol=gemtekDevCpePortTriggerProtocol, gemtekDevCpePushFtpUpgradeCmd=gemtekDevCpePushFtpUpgradeCmd, gemtekDevCpeFirewallSrcPortRangeEnd=gemtekDevCpeFirewallSrcPortRangeEnd, gemtekDevCpePortForwardingLanPortBegin=gemtekDevCpePortForwardingLanPortBegin, gemtekDevCpePullFtpUpgradeAdminStatus=gemtekDevCpePullFtpUpgradeAdminStatus, gemtekDevCpeRfModeBPSK=gemtekDevCpeRfModeBPSK, gemtekDevCpeAllowPacketType=gemtekDevCpeAllowPacketType, gemtekDevCpeFirewallEtherTypeFilterFiveEnable=gemtekDevCpeFirewallEtherTypeFilterFiveEnable, gemtekDevCpeWimaxUpLinkDataRate=gemtekDevCpeWimaxUpLinkDataRate, gemtekDevCpeLatitude=gemtekDevCpeLatitude, gemtekDevCpeVlanMembershipVidBegin=gemtekDevCpeVlanMembershipVidBegin, gemtekDevCpePullFtpServerPassword=gemtekDevCpePullFtpServerPassword, gemtekDevCpeFirewallDstMac=gemtekDevCpeFirewallDstMac, gemtekDevCpeNatModeMgmtVlanVid=gemtekDevCpeNatModeMgmtVlanVid, gemtekDevCpeChannelBsId=gemtekDevCpeChannelBsId, eapValidateTheServerCertificate=eapValidateTheServerCertificate, gemtekDevCpeServiceFlowTable=gemtekDevCpeServiceFlowTable, coldStart=coldStart, notTheHightestPriorityAP=notTheHightestPriorityAP, operatorUsername=operatorUsername, gemtekDevCpeCACertificateFileTable=gemtekDevCpeCACertificateFileTable, gemtekDevCpeDhcpServerPermanentHostEntry=gemtekDevCpeDhcpServerPermanentHostEntry, gemtekDevCpeEirpModeAntennaGain=gemtekDevCpeEirpModeAntennaGain, gemtekDevCpeBridgeIpType=gemtekDevCpeBridgeIpType, gemtekDevCpeBridgeNetmask=gemtekDevCpeBridgeNetmask, gemtekDevCpeNatWanDhcpRenewalTime=gemtekDevCpeNatWanDhcpRenewalTime, gemtekDevCpeCACertificateSubject=gemtekDevCpeCACertificateSubject, gemtekDevCpeDscpToVp=gemtekDevCpeDscpToVp, gemtekDevCpeAPPreferredBsIdListLocked=gemtekDevCpeAPPreferredBsIdListLocked, gemtekDevCpeDataVlan=gemtekDevCpeDataVlan, gemtekDevCpeChannelRowstatus=gemtekDevCpeChannelRowstatus, gemtekDevCpeAuthenticationSelectionPhase1=gemtekDevCpeAuthenticationSelectionPhase1, gemtekDevCpeCACertificateFileName=gemtekDevCpeCACertificateFileName, gemtekDevCpeDmzIpAddress=gemtekDevCpeDmzIpAddress, gemtekDevCpeNatModeDataVlanVp=gemtekDevCpeNatModeDataVlanVp, gemtekDevCpePortForwardingTable=gemtekDevCpePortForwardingTable, gemtekDevCpeRfModeQPSK=gemtekDevCpeRfModeQPSK, eapIdentityUseRealm=eapIdentityUseRealm, gemtekDevCpeEirpModeQAM16=gemtekDevCpeEirpModeQAM16, gemtekDevCpeCACertificateIndex=gemtekDevCpeCACertificateIndex, gemtekDevCpeCAValidityDateEnd=gemtekDevCpeCAValidityDateEnd, gemtekDevCpeWimaxTotalDownLinkDataByte=gemtekDevCpeWimaxTotalDownLinkDataByte, gemtekDevCpeBridgeDhcpRenewalTime=gemtekDevCpeBridgeDhcpRenewalTime, gemtekDevCpePortForwardingLanPortEnd=gemtekDevCpePortForwardingLanPortEnd, gemtekDevCpeWanTotalUpLinkDataPackets=gemtekDevCpeWanTotalUpLinkDataPackets, gemtekDevCpeCAValidityDateBegin=gemtekDevCpeCAValidityDateBegin, gemtekDevCpeDhcpClientList=gemtekDevCpeDhcpClientList, gemtekDevCpeCACertificateIssuer=gemtekDevCpeCACertificateIssuer, gemtekDevCpeDhcpClentListIndex=gemtekDevCpeDhcpClentListIndex, gemtekDevCpeAuthenticationEAPTTLS=gemtekDevCpeAuthenticationEAPTTLS, gemtekDevCpeSnmpAccessFromLan=gemtekDevCpeSnmpAccessFromLan, gemtekDevCpeLanMacAddresss=gemtekDevCpeLanMacAddresss, gemtekDevCpeScanner=gemtekDevCpeScanner, wirelessStatus=wirelessStatus, gemtekDevCpeVlanMembershipVidEnd=gemtekDevCpeVlanMembershipVidEnd, eapIdentityType=eapIdentityType, adminPassword=adminPassword, eapTtlsUseDeviceCertificate=eapTtlsUseDeviceCertificate, isRebootRequired=isRebootRequired, gemtekDevCpePortForwardingProtocol=gemtekDevCpePortForwardingProtocol, deviceStatus=deviceStatus, gemtekDevCpePortForwardingRowstatus=gemtekDevCpePortForwardingRowstatus, gemtekDevCpeFirewallEtherTypeFilterThreeTypeDeny=gemtekDevCpeFirewallEtherTypeFilterThreeTypeDeny, gemtekDevCpeChannelBandwidth=gemtekDevCpeChannelBandwidth, gemtekDevCpeFirewallEtherTypeFilterOneTypeDeny=gemtekDevCpeFirewallEtherTypeFilterOneTypeDeny, gemtekDevCpeServiceFlowBCID=gemtekDevCpeServiceFlowBCID, adminUsername=adminUsername, gemtekDevCpeLanTotalDownLinkDataByte=gemtekDevCpeLanTotalDownLinkDataByte, gemtekDevCpeDmzEnable=gemtekDevCpeDmzEnable, gemtekDevCpeDate=gemtekDevCpeDate, gemtekDevCpePortTrigger=gemtekDevCpePortTrigger, gemtekDevCpeRedirectIcmpToTheDmzHostEnable=gemtekDevCpeRedirectIcmpToTheDmzHostEnable, gemtekDevCpePortTriggerForwardingPortEnd=gemtekDevCpePortTriggerForwardingPortEnd, gemtekDevCpeWimaxMimoMode=gemtekDevCpeWimaxMimoMode, gemtekDevCpeFirewallRowstatus=gemtekDevCpeFirewallRowstatus, gemtekDevCpeRfModeQAM16=gemtekDevCpeRfModeQAM16, eapValidateTheDateDurationOfCaCertificate=eapValidateTheDateDurationOfCaCertificate, gemtekDevCpeEirpModeQAM64=gemtekDevCpeEirpModeQAM64, gemtekDevCpeFirewallPriority=gemtekDevCpeFirewallPriority, gemtekDevCpeFirewallDstPortRangeBegin=gemtekDevCpeFirewallDstPortRangeBegin, gemtekDevCpeMaxTxPowerModeSelection=gemtekDevCpeMaxTxPowerModeSelection, administratorPassword=administratorPassword, gemtekDevCpeDhcpServerPermanentHostIp=gemtekDevCpeDhcpServerPermanentHostIp, gemtekDevCpeTaggedPkts=gemtekDevCpeTaggedPkts, gemtekDevCpeAccountManagement=gemtekDevCpeAccountManagement, gemtekDevCpeMgmtVlanVid=gemtekDevCpeMgmtVlanVid, snmpBuzzerDisableDelay=snmpBuzzerDisableDelay, gemtekDevCpeVlanMembershipVidRowstatus=gemtekDevCpeVlanMembershipVidRowstatus, gemtekDevCpeTrapPrefix=gemtekDevCpeTrapPrefix, administratorEnable=administratorEnable, gemtekDevCpePortTriggerTriggerPortEnd=gemtekDevCpePortTriggerTriggerPortEnd, gemtekDevCpeAutoFirmwareRollback=gemtekDevCpeAutoFirmwareRollback, gemtekDevCpeDhcpServerPrimaryDnsFromIsp=gemtekDevCpeDhcpServerPrimaryDnsFromIsp, gemtekDevCpeBridgeGateway=gemtekDevCpeBridgeGateway, gemtekDevCpeServiceFlowState=gemtekDevCpeServiceFlowState, gemtekDevCpeAPPreferredPriorityOneBsId=gemtekDevCpeAPPreferredPriorityOneBsId, gemtekDevCpeDhcpServerEnable=gemtekDevCpeDhcpServerEnable, gemtekDevCpeDhcpServerMaxLeaseTime=gemtekDevCpeDhcpServerMaxLeaseTime, eapTtlsPassword=eapTtlsPassword, gemtekDevCpeDhcpServerTertiaryDnsFromIsp=gemtekDevCpeDhcpServerTertiaryDnsFromIsp, gemtekDevCpeDhcpServerPrimaryDnsIp=gemtekDevCpeDhcpServerPrimaryDnsIp, gemtekDevCpeChannelIndex=gemtekDevCpeChannelIndex, eapTtlsPhase2=eapTtlsPhase2, administratorUsername=administratorUsername, gemtekDevCpeChannelCinr=gemtekDevCpeChannelCinr, gemtekDevCpeNatLanIpAddress=gemtekDevCpeNatLanIpAddress, gemtekDevCpeNonmemberPkts=gemtekDevCpeNonmemberPkts, gemtekDevCpeSystemDate=gemtekDevCpeSystemDate, gemtekDevCpeServiceFlowHARQ=gemtekDevCpeServiceFlowHARQ, gemtekDevCpeSyslog=gemtekDevCpeSyslog, gemtekDevCpeAPPreferredPriorityFourBsId=gemtekDevCpeAPPreferredPriorityFourBsId, gemtekDevCpeCurrentSwVersion=gemtekDevCpeCurrentSwVersion, gemtekDevCpeWimaxBandwidth=gemtekDevCpeWimaxBandwidth, gemtekDevCpePortTriggerRowstatus=gemtekDevCpePortTriggerRowstatus, gemtekDevCpeUntaggedPktsReset=gemtekDevCpeUntaggedPktsReset, operatorPassword=operatorPassword, gemtekDevCpeFirewallEtherTypeFilterFourTypeDeny=gemtekDevCpeFirewallEtherTypeFilterFourTypeDeny, gemtekDevCpeUserCertificateSize=gemtekDevCpeUserCertificateSize, gemtekDevCpePullFtpFileName=gemtekDevCpePullFtpFileName, gemtekDevCpeAllowTelnetAccessingFromWan=gemtekDevCpeAllowTelnetAccessingFromWan, gemtekDevCpeFirewallEntry=gemtekDevCpeFirewallEntry, gemtekDevCpeBridgeMode=gemtekDevCpeBridgeMode, rebootWithResponse=rebootWithResponse, gemtekDevCpeNtpServerFromDHCP=gemtekDevCpeNtpServerFromDHCP, gemtekDevCpeUserValidityDateEnd=gemtekDevCpeUserValidityDateEnd, gemtekDevCpeWimaxDownLinkDataRate=gemtekDevCpeWimaxDownLinkDataRate, gemtekDevCpeLongitude=gemtekDevCpeLongitude, gemtekDevCpePortTriggerIndex=gemtekDevCpePortTriggerIndex, gemtekDevCpeServiceFlowSFID=gemtekDevCpeServiceFlowSFID, gemtekDevCpeDhcpClentListTable=gemtekDevCpeDhcpClentListTable, gemtekDevCpeSnmpSetCommunity=gemtekDevCpeSnmpSetCommunity, gemtekDevCpeWimaxCinrReuse1=gemtekDevCpeWimaxCinrReuse1, gemtekDevCpeSnmpAccessDomainEnable=gemtekDevCpeSnmpAccessDomainEnable, gemtekDevCpeLanTotalDownLinkDataPackets=gemtekDevCpeLanTotalDownLinkDataPackets, gemtekDevCpeWimaxCpeState=gemtekDevCpeWimaxCpeState, gemtekDevCpeServiceFlowMaxRate=gemtekDevCpeServiceFlowMaxRate, gemtekDevCpeServiceFlowEntry=gemtekDevCpeServiceFlowEntry, snmpBuzzerConfig=snmpBuzzerConfig, gemtekDevCpeTimeZone=gemtekDevCpeTimeZone, gemtekDevCpeMaxTxPower=gemtekDevCpeMaxTxPower, trapServerCommunity=trapServerCommunity, gemtekDevCpeSnmpReadCommunity=gemtekDevCpeSnmpReadCommunity, gemtekDevCpeDhcpServerPermanentRowstatus=gemtekDevCpeDhcpServerPermanentRowstatus, gemtekDevCpeCACertificateSize=gemtekDevCpeCACertificateSize, gemtekDevCpeSyslogServerIp=gemtekDevCpeSyslogServerIp, gemtekDevCpeNatModeMgmtVlan=gemtekDevCpeNatModeMgmtVlan, gemtekDevCpeTrapServer=gemtekDevCpeTrapServer, gemtekDevCpeNetoworkOperatingMode=gemtekDevCpeNetoworkOperatingMode, gemtekDevCpePullFtpServerIP=gemtekDevCpePullFtpServerIP, gemtekDevCpePushFtpUpgrade=gemtekDevCpePushFtpUpgrade, gemtekDevCpePullFtpFilePath=gemtekDevCpePullFtpFilePath, gemtekDevCpeMibsVersion=gemtekDevCpeMibsVersion, gemtekDevCpeRfModeQAM64=gemtekDevCpeRfModeQAM64, gemtekDevCpeDhcpServerSecondDnsIp=gemtekDevCpeDhcpServerSecondDnsIp, gemtekDevCpeTftpUpgradeCmd=gemtekDevCpeTftpUpgradeCmd, gemtekDevCpeNtpServerEnable=gemtekDevCpeNtpServerEnable, gemtekDevCpeBootromCreationDate=gemtekDevCpeBootromCreationDate, gemtekDevCpePullFtpUpgradeCmd=gemtekDevCpePullFtpUpgradeCmd, gemtekDevCpeWimaxCinrReuse3=gemtekDevCpeWimaxCinrReuse3, gemtekDevCpeFirewallProtocol=gemtekDevCpeFirewallProtocol, gemtekDevCpePortForwardingLanIp=gemtekDevCpePortForwardingLanIp, fatalErrorRestart=fatalErrorRestart, gemtekDevCpeCACertificateFileUpload=gemtekDevCpeCACertificateFileUpload, gemtekDevCpePortForwarding=gemtekDevCpePortForwarding, gemtekDevCpeAPPreferredPriorityThreeBsId=gemtekDevCpeAPPreferredPriorityThreeBsId, gemtekDevCpeDhcpServerPermanentHostEntryEnable=gemtekDevCpeDhcpServerPermanentHostEntryEnable, gemtekDevCpeDropDataPacket=gemtekDevCpeDropDataPacket, gemtekDevCpeServiceFlowScheduling=gemtekDevCpeServiceFlowScheduling, gemtekDevCpeChannelTable=gemtekDevCpeChannelTable, gemtekDevCpeFirewallEtherTypeFilterTwoEnable=gemtekDevCpeFirewallEtherTypeFilterTwoEnable, gemtekDevCpeNtpServer=gemtekDevCpeNtpServer, gemtekDevCpeFrequencyRangeSetting=gemtekDevCpeFrequencyRangeSetting, gemtekDevCpeFirewallTable=gemtekDevCpeFirewallTable, warmStart=warmStart, autoSavePeriod=autoSavePeriod, operatorEnable=operatorEnable, gemtekDevCpeFirewallEtherTypeFilterThreeEnable=gemtekDevCpeFirewallEtherTypeFilterThreeEnable, gemtekDevCpeDhcpServerPermanentHostIndex=gemtekDevCpeDhcpServerPermanentHostIndex, gemtekDevCpePullFtpServerUserName=gemtekDevCpePullFtpServerUserName, gemtekDevCpePushFtpUpgradeAdminStatus=gemtekDevCpePushFtpUpgradeAdminStatus, gemtekDevCpeMgmtVlan=gemtekDevCpeMgmtVlan, gemtekDevCpeSnmpAccessDomainIp=gemtekDevCpeSnmpAccessDomainIp, gemtekDevCpeDynamicMaxTxPowerBpsk=gemtekDevCpeDynamicMaxTxPowerBpsk, gemtekDevCpeFirewallDstPortRangeEnd=gemtekDevCpeFirewallDstPortRangeEnd, gemtekDevCpePortTriggerTable=gemtekDevCpePortTriggerTable, startStopWimax=startStopWimax, gemtekDevCpeAPPreferredPriorityTwoBsId=gemtekDevCpeAPPreferredPriorityTwoBsId, gemtekDevCpeWimaxZoneCinrChannelZero=gemtekDevCpeWimaxZoneCinrChannelZero, gemtekDevCpeDataVlanEnalbe=gemtekDevCpeDataVlanEnalbe, gemtekDevCpeUserCertificateFileName=gemtekDevCpeUserCertificateFileName, gemtekDevCpeChannelFrequency=gemtekDevCpeChannelFrequency, gemtekDevCpeDaylightSaving=gemtekDevCpeDaylightSaving, gemtekDevCpeHeight=gemtekDevCpeHeight, gemtekDevCpePortForwardingWanPortBegin=gemtekDevCpePortForwardingWanPortBegin, gemtekDevCpeFirewallPPPoEEnable=gemtekDevCpeFirewallPPPoEEnable, gemtekDevCpePortTriggerEntry=gemtekDevCpePortTriggerEntry, gemtekDevCpeWimaxRssi=gemtekDevCpeWimaxRssi, gemtekDevCpeUserCertificateFileDelete=gemtekDevCpeUserCertificateFileDelete, gemtekDevCpeFirmwareVersion=gemtekDevCpeFirmwareVersion, gemtekDevCpeRestFactoryDefault=gemtekDevCpeRestFactoryDefault, eapTtlsUsername=eapTtlsUsername, adminEnable=adminEnable, gemtekDevCpeServiceFlowIndex=gemtekDevCpeServiceFlowIndex, gemtekDevCpeLanTotalUpLinkDataPackets=gemtekDevCpeLanTotalUpLinkDataPackets, gemtekDevCpeAllowWebAccessingFromWan=gemtekDevCpeAllowWebAccessingFromWan, gemtekDevCpeDhcpClentListEntry=gemtekDevCpeDhcpClentListEntry, gemtekDevCpePortForwardingIndex=gemtekDevCpePortForwardingIndex, linkUp=linkUp, gemtekDevCpeFirewall=gemtekDevCpeFirewall, gemtekDevCpeMaxTxPowerRfMode=gemtekDevCpeMaxTxPowerRfMode, gemtekDevCpeCertificateUpload=gemtekDevCpeCertificateUpload, gemtekDevCpeUserCertificateFileUpload=gemtekDevCpeUserCertificateFileUpload, gemtekDevCpeNatLanNetmask=gemtekDevCpeNatLanNetmask, gemtekDevCpeNonmemberPktsReset=gemtekDevCpeNonmemberPktsReset, gemtekDevCpeDhcpServerEndIp=gemtekDevCpeDhcpServerEndIp, gemtekDevCpeWimaxDownLinkModulation=gemtekDevCpeWimaxDownLinkModulation, gemtekDevCpePullFtpUpgrade=gemtekDevCpePullFtpUpgrade, gemtekDevCpeUserCertificateFileEntry=gemtekDevCpeUserCertificateFileEntry)
mibBuilder.exportSymbols("Motorola-Cpe-PRIVATE-MIB", gemtekDevCpeChannelApplyLoadOrSave=gemtekDevCpeChannelApplyLoadOrSave, gemtekDevCpeNatWanDhcpRebindTime=gemtekDevCpeNatWanDhcpRebindTime, gemtekDevCpeChannelActive=gemtekDevCpeChannelActive, gemtekDevCpeServiceFlowRules=gemtekDevCpeServiceFlowRules, gemtekDevCpeProductVersion=gemtekDevCpeProductVersion, gemtekDevCpeUserCertificateSubject=gemtekDevCpeUserCertificateSubject, gemtekDevCpeDhcpServerPermanentHostTable=gemtekDevCpeDhcpServerPermanentHostTable, gemtekDevCpeDhcpServerSecondDnsFromIsp=gemtekDevCpeDhcpServerSecondDnsFromIsp, gemtekDevCpeDhcpServerPermanentHostMac=gemtekDevCpeDhcpServerPermanentHostMac, gemtekDevCpeVlanMembershipIndex=gemtekDevCpeVlanMembershipIndex, gemtekDevCpeFirewallEtherTypeFilterFourEnable=gemtekDevCpeFirewallEtherTypeFilterFourEnable, gemtekDevCpeWimaxTxPower=gemtekDevCpeWimaxTxPower, gemtekDevCpeWimaxBsid=gemtekDevCpeWimaxBsid, gemtekDevCpeFirewallEntryEnable=gemtekDevCpeFirewallEntryEnable, gemtekDevCpePortTriggerName=gemtekDevCpePortTriggerName, gemtekDevCpeServiceFlowDirection=gemtekDevCpeServiceFlowDirection, gemtekDevCpeNatModeVLAN=gemtekDevCpeNatModeVLAN, gemtekDevCpeDynamicMaxTxPowerQpsk=gemtekDevCpeDynamicMaxTxPowerQpsk, gemtekDevCpeDhcpClentListMacAddress=gemtekDevCpeDhcpClentListMacAddress, gemtekDevCpeSyslogServerPort=gemtekDevCpeSyslogServerPort, eapTtlsPrivateKeyPassword=eapTtlsPrivateKeyPassword, gemtekDevCpeDscpToVpMapping=gemtekDevCpeDscpToVpMapping, gemtekDevCpeServiceFlowARQ=gemtekDevCpeServiceFlowARQ, gemtekDevCpeMgmtVlanVp=gemtekDevCpeMgmtVlanVp, gemtekDevCpeWanTotalDownLinkDataPackets=gemtekDevCpeWanTotalDownLinkDataPackets, gemtekDevCpeWanMacAddresss=gemtekDevCpeWanMacAddresss, gemtekDevCpeUserCertificateIndex=gemtekDevCpeUserCertificateIndex, gemtekDevCpeVlanMembershipTable=gemtekDevCpeVlanMembershipTable, gemtekDevCpeServiceFlowType=gemtekDevCpeServiceFlowType, gemtekDevCpeMVLAN=gemtekDevCpeMVLAN, gemtekDevCpeChannelEntryEnable=gemtekDevCpeChannelEntryEnable, gemtekDevCpeEirpModeBPSK=gemtekDevCpeEirpModeBPSK, gemtekDevCpeCertificationFileManagement=gemtekDevCpeCertificationFileManagement, gemtekDevCpeNetworkMode=gemtekDevCpeNetworkMode, gemtekDevCpeDhcpClentListExpireTime=gemtekDevCpeDhcpClentListExpireTime, gemtekDevCpeNatModeDataVlanVid=gemtekDevCpeNatModeDataVlanVid, gemtekDevCpePortTriggerEntryEnable=gemtekDevCpePortTriggerEntryEnable, gemtekDevCpeChannelEntry=gemtekDevCpeChannelEntry, gemtekDevCpePktCounter=gemtekDevCpePktCounter, gemtekDevCpeFirewallEnable=gemtekDevCpeFirewallEnable, gemtekDevCpeSnmpAccessDomainNetmask=gemtekDevCpeSnmpAccessDomainNetmask, gemtekDevCpeFirewallEtherTypeFilterTwoTypeDeny=gemtekDevCpeFirewallEtherTypeFilterTwoTypeDeny, PYSNMP_MODULE_ID=gemtekDevCpe, gemtekDevCpeLockFrequencyRangeMax=gemtekDevCpeLockFrequencyRangeMax, gemtekDevCpeDynamicMaxTxPowerQam16=gemtekDevCpeDynamicMaxTxPowerQam16, gemtek=gemtek, gemtekDevCpeTaggedPktsReset=gemtekDevCpeTaggedPktsReset, eapIdentityString=eapIdentityString, gemtekDevCpeDhcpServerStartIp=gemtekDevCpeDhcpServerStartIp, gemtekDevCpeLockFrequencyRangeMin=gemtekDevCpeLockFrequencyRangeMin, gemtekDevCpeChannelPreambelIndex=gemtekDevCpeChannelPreambelIndex, gemtekDevCpeAuthentication=gemtekDevCpeAuthentication, gemtekDevCpeBootromVersion=gemtekDevCpeBootromVersion, gemtekDevCpeNatModeDataVlanEnalbe=gemtekDevCpeNatModeDataVlanEnalbe, gemtekDevCpeNatLanIpType=gemtekDevCpeNatLanIpType, gemtekDevCpeNatWanNetmask=gemtekDevCpeNatWanNetmask, gemtekDevCpeDataVlanVid=gemtekDevCpeDataVlanVid, gemtekDevCpeFirewallName=gemtekDevCpeFirewallName, trapServerEnable=trapServerEnable, gemtekDevCpeDownloadSwVersion=gemtekDevCpeDownloadSwVersion, gemtekDevCpeMaxTxPowerEirpMode=gemtekDevCpeMaxTxPowerEirpMode, gemtekDevCpeFirewallDstIpAddress=gemtekDevCpeFirewallDstIpAddress, gemtekDevCpeVlanMembershipEntry=gemtekDevCpeVlanMembershipEntry, gemtekDevCpePortTriggerTriggerPortBegin=gemtekDevCpePortTriggerTriggerPortBegin, gemtekDevCpeTrap=gemtekDevCpeTrap, gemtekDevCpeTftpUpgradeAdminStatus=gemtekDevCpeTftpUpgradeAdminStatus, trapServerIp=trapServerIp, gemtekDevCpeTftpServerIP=gemtekDevCpeTftpServerIP, gemtekDevCpeDhcpClentListIp=gemtekDevCpeDhcpClentListIp, gemtekDevCpeNatWanIpType=gemtekDevCpeNatWanIpType, gemtekDevCpeFrequencyRange=gemtekDevCpeFrequencyRange, gemtekDevCpeDynamicMaxTxPowerQam64=gemtekDevCpeDynamicMaxTxPowerQam64, gemtekDevCpeDhcpServerDomainName=gemtekDevCpeDhcpServerDomainName, gemtekDevCpePortForwardingWanPortEnd=gemtekDevCpePortForwardingWanPortEnd, gemtekDevCpeAuthenticationEAPTLS=gemtekDevCpeAuthenticationEAPTLS, gemtekDevCpeNatModeMgmtVlanVp=gemtekDevCpeNatModeMgmtVlanVp, gemtekDevCpeServiceFlowCID=gemtekDevCpeServiceFlowCID, gemtekDevCpeFirewallSrcMac=gemtekDevCpeFirewallSrcMac, gemtekDevCpeDscpConfiguration=gemtekDevCpeDscpConfiguration, gemtekDevCpeBridgeDhcpLeaseTime=gemtekDevCpeBridgeDhcpLeaseTime, gemtekDevCpeWimaxTotalUpLinkDataByte=gemtekDevCpeWimaxTotalUpLinkDataByte, trapServerPort=trapServerPort, gemtekDevCpeFirewallInterface=gemtekDevCpeFirewallInterface, gemtekDevCpeModelFrequencyRangeMin=gemtekDevCpeModelFrequencyRangeMin, gemtekDevCpeNatMtu=gemtekDevCpeNatMtu, gemtekDevCpePreviousSwVersion=gemtekDevCpePreviousSwVersion, gemtekDevCpeNatModeDataVlan=gemtekDevCpeNatModeDataVlan, gemtekDevCpeDhcpServer=gemtekDevCpeDhcpServer, gemtekDevCpePortTriggerForwardingPortBegin=gemtekDevCpePortTriggerForwardingPortBegin, gemtekDevCpeUntaggedPkts=gemtekDevCpeUntaggedPkts, gemtekDevCpeNatWanDhcpLeaseTime=gemtekDevCpeNatWanDhcpLeaseTime, gemtekDevCpeFirewallAction=gemtekDevCpeFirewallAction, gemtekDevCpeNatWanGateway=gemtekDevCpeNatWanGateway, gemtekDevCpeFirewallEtherTypeFilterOneEnable=gemtekDevCpeFirewallEtherTypeFilterOneEnable, gemtekDevCpeWimaxMaxTxPower=gemtekDevCpeWimaxMaxTxPower, eapRealmString=eapRealmString, gemtekDevCpeUserCertificateIssuer=gemtekDevCpeUserCertificateIssuer, gemtekDevCpeSerialNumber=gemtekDevCpeSerialNumber, gemtekDevCpeWimaxCinr=gemtekDevCpeWimaxCinr, gemtekDevCpeCACertificateFileDelete=gemtekDevCpeCACertificateFileDelete, gemtekDevCpeUserValidityDateBegin=gemtekDevCpeUserValidityDateBegin, gemtekDevCpeUserCertificateFileTable=gemtekDevCpeUserCertificateFileTable, gemtekDevCpeControl=gemtekDevCpeControl, gemtekDevCpeWimaxFrequency=gemtekDevCpeWimaxFrequency, gemtekDevCpeHardwareModel=gemtekDevCpeHardwareModel, gemtekDevCpeSyslogEnable=gemtekDevCpeSyslogEnable, gemtekDevCpePortForwardingEntry=gemtekDevCpePortForwardingEntry, autoSaveConfig=autoSaveConfig)
