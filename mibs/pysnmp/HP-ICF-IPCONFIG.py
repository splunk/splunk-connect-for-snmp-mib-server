#
# PySNMP MIB module HP-ICF-IPCONFIG (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-IPCONFIG
# Produced by pysmi-0.3.4 at Mon Apr 29 19:21:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
hpicfCommon, = mibBuilder.importSymbols("HP-ICF-OID", "hpicfCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddressPrefixLength, InetPortNumber, InetAddress, InetAddressIPv4, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressPrefixLength", "InetPortNumber", "InetAddress", "InetAddressIPv4", "InetAddressType")
ipv6InterfaceEntry, IpAddressOriginTC, IpAddressStatusTC, ipNetToPhysicalEntry, ipv4InterfaceEntry = mibBuilder.importSymbols("IP-MIB", "ipv6InterfaceEntry", "IpAddressOriginTC", "IpAddressStatusTC", "ipNetToPhysicalEntry", "ipv4InterfaceEntry")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Bits, Integer32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Gauge32, ModuleIdentity, Counter32, MibIdentifier, NotificationType, TimeTicks, IpAddress, ObjectIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Gauge32", "ModuleIdentity", "Counter32", "MibIdentifier", "NotificationType", "TimeTicks", "IpAddress", "ObjectIdentity", "Counter64")
TruthValue, RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "TextualConvention", "DisplayString")
tunnelInetConfigEntry, = mibBuilder.importSymbols("TUNNEL-MIB", "tunnelInetConfigEntry")
hpicfIpConfig = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10))
hpicfIpConfig.setRevisions(('2017-06-07 21:40', '2016-08-04 21:40', '2010-06-10 21:40', '2009-10-02 00:00', '2009-09-10 00:00', '2009-09-04 00:00', '2009-07-21 00:00', '2008-12-09 00:00', '2008-10-01 00:00', '2007-06-06 00:00', '2007-05-30 00:00', '2007-02-02 00:00', '2006-12-03 00:00', '2006-07-07 00:00', '2005-08-08 16:00',))
if mibBuilder.loadTexts: hpicfIpConfig.setLastUpdated('201706072140Z')
if mibBuilder.loadTexts: hpicfIpConfig.setOrganization('HP Networking')
hpicfIpConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 1))
hpicfIpAddressObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 1, 1))
hpicfIpv4InterfaceObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 1, 2))
hpicfIpClientTrackerObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 1, 3))
hpicfIpv6ConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 3))
hpicfIpv6GlobalConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 3, 1))
hpicfIpv6NDObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 3, 1, 1))
hpicfIpv6IcmpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 3, 1, 2))
hpicfIpv6InterfaceObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 3, 2))
hpicfIpAddressTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 1, 1, 1), )
if mibBuilder.loadTexts: hpicfIpAddressTable.setStatus('current')
hpicfIpAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HP-ICF-IPCONFIG", "hpicfIpAddressAddrType"), (0, "HP-ICF-IPCONFIG", "hpicfIpAddressAddr"))
if mibBuilder.loadTexts: hpicfIpAddressEntry.setStatus('current')
hpicfIpAddressAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 1, 1, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hpicfIpAddressAddrType.setStatus('current')
hpicfIpAddressAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 1, 1, 1, 1, 2), InetAddress())
if mibBuilder.loadTexts: hpicfIpAddressAddr.setStatus('current')
hpicfIpAddressPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 1, 1, 1, 1, 3), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpAddressPrefixLength.setStatus('current')
hpicfIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unicast", 1), ("anycast", 2))).clone('unicast')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpAddressType.setStatus('current')
hpicfIpAddressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 1, 1, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpAddressRowStatus.setStatus('current')
hpicfIpAddressExtendedType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("eui64", 1), ("linkLocal", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpAddressExtendedType.setStatus('current')
hpicfSwitchIpAddressTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 1, 1, 2), )
if mibBuilder.loadTexts: hpicfSwitchIpAddressTable.setStatus('current')
hpicfSwitchIpAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HP-ICF-IPCONFIG", "hpicfSwitchIpAddressAddrType"), (0, "HP-ICF-IPCONFIG", "hpicfSwitchIpAddressAddr"))
if mibBuilder.loadTexts: hpicfSwitchIpAddressEntry.setStatus('current')
hpicfSwitchIpAddressAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 1, 1, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hpicfSwitchIpAddressAddrType.setStatus('current')
hpicfSwitchIpAddressAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 1, 1, 2, 1, 2), InetAddress())
if mibBuilder.loadTexts: hpicfSwitchIpAddressAddr.setStatus('current')
hpicfSwitchIpAddressPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 1, 1, 2, 1, 3), InetAddressPrefixLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfSwitchIpAddressPrefixLength.setStatus('current')
hpicfSwitchIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unicast", 1), ("anycast", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfSwitchIpAddressType.setStatus('current')
hpicfSwitchIpAddressOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 1, 1, 2, 1, 5), IpAddressOriginTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfSwitchIpAddressOrigin.setStatus('current')
hpicfSwitchIpAddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 1, 1, 2, 1, 6), IpAddressStatusTC().clone('preferred')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfSwitchIpAddressStatus.setStatus('current')
hpicfSwitchIpAddressPreferredLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 1, 1, 2, 1, 7), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfSwitchIpAddressPreferredLifetime.setStatus('current')
hpicfSwitchIpAddressValidLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 1, 1, 2, 1, 8), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfSwitchIpAddressValidLifetime.setStatus('current')
hpicfSwitchIpAddressExtendedType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("eui64", 1), ("linkLocal", 2))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfSwitchIpAddressExtendedType.setStatus('current')
hpicfIpNetToPhysicalTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 1, 1, 3), )
if mibBuilder.loadTexts: hpicfIpNetToPhysicalTable.setStatus('current')
hpicfIpNetToPhysicalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 1, 1, 3, 1), )
ipNetToPhysicalEntry.registerAugmentions(("HP-ICF-IPCONFIG", "hpicfIpNetToPhysicalEntry"))
hpicfIpNetToPhysicalEntry.setIndexNames(*ipNetToPhysicalEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfIpNetToPhysicalEntry.setStatus('current')
hpicfIpNetToPhysicalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfIpNetToPhysicalPort.setStatus('current')
hpicfIpNetToPhysicalTableClear = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("ipv4", 2), ("ipv6", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpNetToPhysicalTableClear.setStatus('current')
hpicfIpv4InterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 1, 2, 1), )
if mibBuilder.loadTexts: hpicfIpv4InterfaceTable.setStatus('current')
hpicfIpv4InterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 1, 2, 1, 1), )
ipv4InterfaceEntry.registerAugmentions(("HP-ICF-IPCONFIG", "hpicfIpv4InterfaceEntry"))
hpicfIpv4InterfaceEntry.setIndexNames(*ipv4InterfaceEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfIpv4InterfaceEntry.setStatus('current')
hpicfIpv4InterfaceDhcpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("full", 1), ("off", 2), ("inform", 3))).clone('full')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpv4InterfaceDhcpEnable.setStatus('current')
hpicfIpv4InterfaceForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpv4InterfaceForwarding.setStatus('current')
hpicfIpv4InterfaceProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpv4InterfaceProxyArp.setStatus('current')
hpicfIpv4InterfaceLocalProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpv4InterfaceLocalProxyArp.setStatus('current')
hpicfIpv4InterfaceBootpGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 1, 2, 1, 1, 5), InetAddressIPv4()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpv4InterfaceBootpGateway.setStatus('current')
hpicfIpv4InterfaceDirectedBcastFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("default", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpv4InterfaceDirectedBcastFwd.setStatus('current')
hpicfIpClientTrackerEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 1, 3, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpClientTrackerEnable.setStatus('current')
hpicfIpClientTrackerTrusted = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 1, 3, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpClientTrackerTrusted.setStatus('current')
hpicfIpClientTrackerUntrusted = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 1, 3, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpClientTrackerUntrusted.setStatus('current')
hpicfIpv6NDDadAttempts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 3, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpv6NDDadAttempts.setStatus('current')
hpicfIpv6IcmpErrorInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 3, 1, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpv6IcmpErrorInterval.setStatus('current')
hpicfIpv6IcmpBucketsize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 3, 1, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpv6IcmpBucketsize.setStatus('current')
hpicfIpv6InterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 3, 2, 1), )
if mibBuilder.loadTexts: hpicfIpv6InterfaceTable.setStatus('current')
hpicfIpv6InterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 3, 2, 1, 1), )
ipv6InterfaceEntry.registerAugmentions(("HP-ICF-IPCONFIG", "hpicfIpv6InterfaceEntry"))
hpicfIpv6InterfaceEntry.setIndexNames(*ipv6InterfaceEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfIpv6InterfaceEntry.setStatus('current')
hpicfIpv6InterfaceDhcpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("dhcpFull", 1), ("dhcpInform", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpv6InterfaceDhcpMode.setStatus('current')
hpicfIpv6InterfaceManual = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpv6InterfaceManual.setStatus('current')
hpicfIpv6InterfaceAutoConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpv6InterfaceAutoConfig.setStatus('current')
hpicfIpv6InterfaceDhcpRapidCommit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpv6InterfaceDhcpRapidCommit.setStatus('current')
hpicfIpv6InterfaceDhcpRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpv6InterfaceDhcpRelay.setStatus('current')
hpicfIpv6InterfaceCfgEnableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 3, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpv6InterfaceCfgEnableStatus.setStatus('current')
hpicfIpv6InterfaceDadAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 3, 2, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpv6InterfaceDadAttempts.setStatus('current')
hpicfIpv6InterfaceDadAttemptsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 3, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("global", 1), ("perInterface", 2))).clone('global')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpv6InterfaceDadAttemptsMode.setStatus('current')
hpicfIpv6InterfaceReachableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 3, 2, 1, 1, 9), Unsigned32()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpv6InterfaceReachableTime.setStatus('current')
hpicfIpv6InterfaceRetransmitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 3, 2, 1, 1, 10), Unsigned32()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfIpv6InterfaceRetransmitTime.setStatus('current')
hpicfUdpTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 1, 2, 3), )
if mibBuilder.loadTexts: hpicfUdpTunnelTable.setStatus('current')
hpicfUdpTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 1, 2, 3, 1), )
tunnelInetConfigEntry.registerAugmentions(("HP-ICF-IPCONFIG", "hpicfUdpTunnelEntry"))
hpicfUdpTunnelEntry.setIndexNames(*tunnelInetConfigEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfUdpTunnelEntry.setStatus('current')
hpicfUdpTunnelSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 1, 2, 3, 1, 1), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfUdpTunnelSrcPort.setStatus('current')
hpicfUdpTunnelMirrorSessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfUdpTunnelMirrorSessionID.setStatus('current')
hpicfUdpTunnelMirrorTruncate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUdpTunnelMirrorTruncate.setStatus('current')
hpicfIpConfigConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 2))
hpicfIpConfigCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 2, 1))
hpicfIpConfigGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 2, 2))
hpicfIpConfigCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 2, 1, 1)).setObjects(("HP-ICF-IPCONFIG", "hpicfIpAddressTableGroup"), ("HP-ICF-IPCONFIG", "hpicfIpv4InterfaceTableGroup"), ("HP-ICF-IPCONFIG", "hpicfSwitchIpAddressTableGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpConfigCompliance = hpicfIpConfigCompliance.setStatus('deprecated')
hpicfIpConfigCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 2, 1, 2)).setObjects(("HP-ICF-IPCONFIG", "hpicfIpAddressTableGroup"), ("HP-ICF-IPCONFIG", "hpicfIpv4InterfaceTableGroup"), ("HP-ICF-IPCONFIG", "hpicfSwitchIpAddressTableGroup"), ("HP-ICF-IPCONFIG", "hpicfUdpTunnelTableGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpConfigCompliance2 = hpicfIpConfigCompliance2.setStatus('current')
hpicfIpConfigCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 2, 1, 4)).setObjects(("HP-ICF-IPCONFIG", "hpicfIpAddressTableGroup"), ("HP-ICF-IPCONFIG", "hpicfIpv4InterfaceTableGroup2"), ("HP-ICF-IPCONFIG", "hpicfSwitchIpAddressTableGroup"), ("HP-ICF-IPCONFIG", "hpicfIpv6InterfaceTableGroup"), ("HP-ICF-IPCONFIG", "hpicfUdpTunnelTableGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpConfigCompliance4 = hpicfIpConfigCompliance4.setStatus('current')
hpicfIpConfigCompliance5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 2, 1, 5)).setObjects(("HP-ICF-IPCONFIG", "hpicfIpv6DadAttemptsGroup"), ("HP-ICF-IPCONFIG", "hpicfIpv6NDGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpConfigCompliance5 = hpicfIpConfigCompliance5.setStatus('current')
hpicfIpConfigCompliance6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 2, 1, 6)).setObjects(("HP-ICF-IPCONFIG", "hpicfIpv6IcmpGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpConfigCompliance6 = hpicfIpConfigCompliance6.setStatus('current')
hpicfIpConfigCompliance7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 2, 1, 7)).setObjects(("HP-ICF-IPCONFIG", "hpicfIpNetToPhysicalTableGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpConfigCompliance7 = hpicfIpConfigCompliance7.setStatus('current')
hpicfIpConfigCompliance8 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 2, 1, 8)).setObjects(("HP-ICF-IPCONFIG", "hpicfUdpTunnelMirrorGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpConfigCompliance8 = hpicfIpConfigCompliance8.setStatus('current')
hpicfIpConfigCompliance9 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 2, 1, 9)).setObjects(("HP-ICF-IPCONFIG", "hpicfIpAddressTableGroup"), ("HP-ICF-IPCONFIG", "hpicfIpv4InterfaceTableGroup3"), ("HP-ICF-IPCONFIG", "hpicfSwitchIpAddressTableGroup"), ("HP-ICF-IPCONFIG", "hpicfIpv6InterfaceTableGroup"), ("HP-ICF-IPCONFIG", "hpicfUdpTunnelTableGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpConfigCompliance9 = hpicfIpConfigCompliance9.setStatus('current')
hpicfIpConfigCompliance10 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 2, 1, 10)).setObjects(("HP-ICF-IPCONFIG", "hpicfIpClientTrackerGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpConfigCompliance10 = hpicfIpConfigCompliance10.setStatus('deprecated')
hpicfIpConfigCompliance11 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 2, 1, 11)).setObjects(("HP-ICF-IPCONFIG", "hpicfIpClientTrackerGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpConfigCompliance11 = hpicfIpConfigCompliance11.setStatus('current')
hpicfIpAddressTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 2, 2, 1)).setObjects(("HP-ICF-IPCONFIG", "hpicfIpAddressPrefixLength"), ("HP-ICF-IPCONFIG", "hpicfIpAddressType"), ("HP-ICF-IPCONFIG", "hpicfIpAddressRowStatus"), ("HP-ICF-IPCONFIG", "hpicfIpAddressExtendedType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpAddressTableGroup = hpicfIpAddressTableGroup.setStatus('current')
hpicfSwitchIpAddressTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 2, 2, 2)).setObjects(("HP-ICF-IPCONFIG", "hpicfSwitchIpAddressPrefixLength"), ("HP-ICF-IPCONFIG", "hpicfSwitchIpAddressType"), ("HP-ICF-IPCONFIG", "hpicfSwitchIpAddressOrigin"), ("HP-ICF-IPCONFIG", "hpicfSwitchIpAddressStatus"), ("HP-ICF-IPCONFIG", "hpicfSwitchIpAddressPreferredLifetime"), ("HP-ICF-IPCONFIG", "hpicfSwitchIpAddressValidLifetime"), ("HP-ICF-IPCONFIG", "hpicfSwitchIpAddressExtendedType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfSwitchIpAddressTableGroup = hpicfSwitchIpAddressTableGroup.setStatus('current')
hpicfIpv4InterfaceTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 2, 2, 3)).setObjects(("HP-ICF-IPCONFIG", "hpicfIpv4InterfaceDhcpEnable"), ("HP-ICF-IPCONFIG", "hpicfIpv4InterfaceForwarding"), ("HP-ICF-IPCONFIG", "hpicfIpv4InterfaceProxyArp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpv4InterfaceTableGroup = hpicfIpv4InterfaceTableGroup.setStatus('deprecated')
hpicfUdpTunnelTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 2, 2, 4)).setObjects(("HP-ICF-IPCONFIG", "hpicfUdpTunnelSrcPort"), ("HP-ICF-IPCONFIG", "hpicfUdpTunnelMirrorSessionID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUdpTunnelTableGroup = hpicfUdpTunnelTableGroup.setStatus('current')
hpicfIpv6InterfaceTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 2, 2, 5)).setObjects(("HP-ICF-IPCONFIG", "hpicfIpv6InterfaceDhcpMode"), ("HP-ICF-IPCONFIG", "hpicfIpv6InterfaceManual"), ("HP-ICF-IPCONFIG", "hpicfIpv6InterfaceAutoConfig"), ("HP-ICF-IPCONFIG", "hpicfIpv6InterfaceDhcpRapidCommit"), ("HP-ICF-IPCONFIG", "hpicfIpv6InterfaceDhcpRelay"), ("HP-ICF-IPCONFIG", "hpicfIpv6InterfaceCfgEnableStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpv6InterfaceTableGroup = hpicfIpv6InterfaceTableGroup.setStatus('current')
hpicfIpv4InterfaceTableGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 2, 2, 6)).setObjects(("HP-ICF-IPCONFIG", "hpicfIpv4InterfaceDhcpEnable"), ("HP-ICF-IPCONFIG", "hpicfIpv4InterfaceForwarding"), ("HP-ICF-IPCONFIG", "hpicfIpv4InterfaceProxyArp"), ("HP-ICF-IPCONFIG", "hpicfIpv4InterfaceLocalProxyArp"), ("HP-ICF-IPCONFIG", "hpicfIpv4InterfaceBootpGateway"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpv4InterfaceTableGroup2 = hpicfIpv4InterfaceTableGroup2.setStatus('current')
hpicfIpv6DadAttemptsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 2, 2, 7)).setObjects(("HP-ICF-IPCONFIG", "hpicfIpv6NDDadAttempts"), ("HP-ICF-IPCONFIG", "hpicfIpv6InterfaceDadAttempts"), ("HP-ICF-IPCONFIG", "hpicfIpv6InterfaceDadAttemptsMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpv6DadAttemptsGroup = hpicfIpv6DadAttemptsGroup.setStatus('current')
hpicfIpv6IcmpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 2, 2, 8)).setObjects(("HP-ICF-IPCONFIG", "hpicfIpv6IcmpErrorInterval"), ("HP-ICF-IPCONFIG", "hpicfIpv6IcmpBucketsize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpv6IcmpGroup = hpicfIpv6IcmpGroup.setStatus('current')
hpicfIpNetToPhysicalTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 2, 2, 9)).setObjects(("HP-ICF-IPCONFIG", "hpicfIpNetToPhysicalPort"), ("HP-ICF-IPCONFIG", "hpicfIpNetToPhysicalTableClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpNetToPhysicalTableGroup = hpicfIpNetToPhysicalTableGroup.setStatus('current')
hpicfUdpTunnelMirrorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 2, 2, 10)).setObjects(("HP-ICF-IPCONFIG", "hpicfUdpTunnelMirrorTruncate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUdpTunnelMirrorGroup = hpicfUdpTunnelMirrorGroup.setStatus('current')
hpicfIpv6NDGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 2, 2, 11)).setObjects(("HP-ICF-IPCONFIG", "hpicfIpv6InterfaceReachableTime"), ("HP-ICF-IPCONFIG", "hpicfIpv6InterfaceRetransmitTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpv6NDGroup = hpicfIpv6NDGroup.setStatus('current')
hpicfIpv4InterfaceTableGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 2, 2, 12)).setObjects(("HP-ICF-IPCONFIG", "hpicfIpv4InterfaceDhcpEnable"), ("HP-ICF-IPCONFIG", "hpicfIpv4InterfaceForwarding"), ("HP-ICF-IPCONFIG", "hpicfIpv4InterfaceProxyArp"), ("HP-ICF-IPCONFIG", "hpicfIpv4InterfaceLocalProxyArp"), ("HP-ICF-IPCONFIG", "hpicfIpv4InterfaceBootpGateway"), ("HP-ICF-IPCONFIG", "hpicfIpv4InterfaceDirectedBcastFwd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpv4InterfaceTableGroup3 = hpicfIpv4InterfaceTableGroup3.setStatus('current')
hpicfIpClientTrackerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 2, 2, 13)).setObjects(("HP-ICF-IPCONFIG", "hpicfIpClientTrackerEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpClientTrackerGroup = hpicfIpClientTrackerGroup.setStatus('deprecated')
hpicfIpClientTrackerGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 10, 2, 2, 14)).setObjects(("HP-ICF-IPCONFIG", "hpicfIpClientTrackerEnable"), ("HP-ICF-IPCONFIG", "hpicfIpClientTrackerTrusted"), ("HP-ICF-IPCONFIG", "hpicfIpClientTrackerUntrusted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfIpClientTrackerGroup2 = hpicfIpClientTrackerGroup2.setStatus('current')
mibBuilder.exportSymbols("HP-ICF-IPCONFIG", hpicfIpv4InterfaceEntry=hpicfIpv4InterfaceEntry, hpicfSwitchIpAddressPrefixLength=hpicfSwitchIpAddressPrefixLength, hpicfIpConfigCompliance5=hpicfIpConfigCompliance5, hpicfIpConfigCompliance2=hpicfIpConfigCompliance2, hpicfIpAddressAddr=hpicfIpAddressAddr, hpicfSwitchIpAddressType=hpicfSwitchIpAddressType, hpicfIpv4InterfaceLocalProxyArp=hpicfIpv4InterfaceLocalProxyArp, hpicfIpAddressTable=hpicfIpAddressTable, hpicfIpv6InterfaceTable=hpicfIpv6InterfaceTable, hpicfIpClientTrackerTrusted=hpicfIpClientTrackerTrusted, hpicfIpConfigConformance=hpicfIpConfigConformance, hpicfIpConfigCompliance8=hpicfIpConfigCompliance8, hpicfIpv6InterfaceEntry=hpicfIpv6InterfaceEntry, hpicfSwitchIpAddressTable=hpicfSwitchIpAddressTable, hpicfIpConfigCompliances=hpicfIpConfigCompliances, hpicfIpv6InterfaceRetransmitTime=hpicfIpv6InterfaceRetransmitTime, hpicfIpAddressObjects=hpicfIpAddressObjects, hpicfUdpTunnelSrcPort=hpicfUdpTunnelSrcPort, hpicfIpConfig=hpicfIpConfig, hpicfIpv6NDObjects=hpicfIpv6NDObjects, hpicfIpv4InterfaceTableGroup=hpicfIpv4InterfaceTableGroup, hpicfIpConfigCompliance10=hpicfIpConfigCompliance10, hpicfSwitchIpAddressValidLifetime=hpicfSwitchIpAddressValidLifetime, hpicfIpv4InterfaceTableGroup2=hpicfIpv4InterfaceTableGroup2, hpicfUdpTunnelMirrorGroup=hpicfUdpTunnelMirrorGroup, hpicfIpAddressType=hpicfIpAddressType, hpicfIpNetToPhysicalTable=hpicfIpNetToPhysicalTable, hpicfIpConfigCompliance11=hpicfIpConfigCompliance11, hpicfIpAddressExtendedType=hpicfIpAddressExtendedType, hpicfIpv6IcmpErrorInterval=hpicfIpv6IcmpErrorInterval, hpicfIpv6IcmpGroup=hpicfIpv6IcmpGroup, hpicfIpv4InterfaceBootpGateway=hpicfIpv4InterfaceBootpGateway, hpicfIpv6ConfigObjects=hpicfIpv6ConfigObjects, hpicfUdpTunnelTable=hpicfUdpTunnelTable, hpicfIpv4InterfaceProxyArp=hpicfIpv4InterfaceProxyArp, hpicfIpClientTrackerGroup2=hpicfIpClientTrackerGroup2, hpicfIpv6IcmpObjects=hpicfIpv6IcmpObjects, hpicfIpv6InterfaceTableGroup=hpicfIpv6InterfaceTableGroup, hpicfIpNetToPhysicalTableGroup=hpicfIpNetToPhysicalTableGroup, hpicfIpv4InterfaceObjects=hpicfIpv4InterfaceObjects, hpicfIpClientTrackerObjects=hpicfIpClientTrackerObjects, hpicfIpConfigCompliance7=hpicfIpConfigCompliance7, hpicfSwitchIpAddressPreferredLifetime=hpicfSwitchIpAddressPreferredLifetime, hpicfIpConfigCompliance=hpicfIpConfigCompliance, hpicfIpv6InterfaceDadAttemptsMode=hpicfIpv6InterfaceDadAttemptsMode, hpicfIpv6InterfaceReachableTime=hpicfIpv6InterfaceReachableTime, hpicfIpConfigGroups=hpicfIpConfigGroups, hpicfIpNetToPhysicalPort=hpicfIpNetToPhysicalPort, hpicfIpAddressTableGroup=hpicfIpAddressTableGroup, hpicfIpAddressRowStatus=hpicfIpAddressRowStatus, hpicfIpv6NDGroup=hpicfIpv6NDGroup, hpicfIpNetToPhysicalTableClear=hpicfIpNetToPhysicalTableClear, hpicfSwitchIpAddressEntry=hpicfSwitchIpAddressEntry, hpicfSwitchIpAddressExtendedType=hpicfSwitchIpAddressExtendedType, hpicfIpConfigCompliance9=hpicfIpConfigCompliance9, hpicfIpConfigCompliance6=hpicfIpConfigCompliance6, hpicfIpv6InterfaceManual=hpicfIpv6InterfaceManual, hpicfIpv6GlobalConfigObjects=hpicfIpv6GlobalConfigObjects, hpicfSwitchIpAddressOrigin=hpicfSwitchIpAddressOrigin, hpicfIpClientTrackerEnable=hpicfIpClientTrackerEnable, hpicfIpv6InterfaceDhcpRapidCommit=hpicfIpv6InterfaceDhcpRapidCommit, hpicfIpv4InterfaceForwarding=hpicfIpv4InterfaceForwarding, PYSNMP_MODULE_ID=hpicfIpConfig, hpicfIpConfigObjects=hpicfIpConfigObjects, hpicfIpv6InterfaceDhcpRelay=hpicfIpv6InterfaceDhcpRelay, hpicfIpv6DadAttemptsGroup=hpicfIpv6DadAttemptsGroup, hpicfIpNetToPhysicalEntry=hpicfIpNetToPhysicalEntry, hpicfUdpTunnelEntry=hpicfUdpTunnelEntry, hpicfUdpTunnelMirrorSessionID=hpicfUdpTunnelMirrorSessionID, hpicfIpv6IcmpBucketsize=hpicfIpv6IcmpBucketsize, hpicfIpv4InterfaceTableGroup3=hpicfIpv4InterfaceTableGroup3, hpicfIpv4InterfaceTable=hpicfIpv4InterfaceTable, hpicfIpClientTrackerGroup=hpicfIpClientTrackerGroup, hpicfIpAddressEntry=hpicfIpAddressEntry, hpicfIpv6InterfaceDadAttempts=hpicfIpv6InterfaceDadAttempts, hpicfUdpTunnelTableGroup=hpicfUdpTunnelTableGroup, hpicfIpv6InterfaceCfgEnableStatus=hpicfIpv6InterfaceCfgEnableStatus, hpicfSwitchIpAddressStatus=hpicfSwitchIpAddressStatus, hpicfIpv6InterfaceAutoConfig=hpicfIpv6InterfaceAutoConfig, hpicfIpAddressPrefixLength=hpicfIpAddressPrefixLength, hpicfIpv6InterfaceDhcpMode=hpicfIpv6InterfaceDhcpMode, hpicfSwitchIpAddressTableGroup=hpicfSwitchIpAddressTableGroup, hpicfIpAddressAddrType=hpicfIpAddressAddrType, hpicfIpv6InterfaceObjects=hpicfIpv6InterfaceObjects, hpicfIpv4InterfaceDhcpEnable=hpicfIpv4InterfaceDhcpEnable, hpicfIpClientTrackerUntrusted=hpicfIpClientTrackerUntrusted, hpicfIpv4InterfaceDirectedBcastFwd=hpicfIpv4InterfaceDirectedBcastFwd, hpicfUdpTunnelMirrorTruncate=hpicfUdpTunnelMirrorTruncate, hpicfIpConfigCompliance4=hpicfIpConfigCompliance4, hpicfSwitchIpAddressAddr=hpicfSwitchIpAddressAddr, hpicfIpv6NDDadAttempts=hpicfIpv6NDDadAttempts, hpicfSwitchIpAddressAddrType=hpicfSwitchIpAddressAddrType)
