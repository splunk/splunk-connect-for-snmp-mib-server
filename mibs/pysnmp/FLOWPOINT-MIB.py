#
# PySNMP MIB module FLOWPOINT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FLOWPOINT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:00:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, enterprises, Gauge32, MibIdentifier, NotificationType, Counter64, Unsigned32, iso, TimeTicks, Integer32, Bits, IpAddress, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "enterprises", "Gauge32", "MibIdentifier", "NotificationType", "Counter64", "Unsigned32", "iso", "TimeTicks", "Integer32", "Bits", "IpAddress", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
flowpoint = MibIdentifier((1, 3, 6, 1, 4, 1, 1548))
fpdod = MibIdentifier((1, 3, 6, 1, 4, 1, 1548, 1))
fpether = MibIdentifier((1, 3, 6, 1, 4, 1, 1548, 2))
fpisdn = MibIdentifier((1, 3, 6, 1, 4, 1, 1548, 3))
fpsys = MibIdentifier((1, 3, 6, 1, 4, 1, 1548, 4))
fplogin = MibIdentifier((1, 3, 6, 1, 4, 1, 1548, 5))
fpWan = MibIdentifier((1, 3, 6, 1, 4, 1, 1548, 6))
fppots = MibIdentifier((1, 3, 6, 1, 4, 1, 1548, 7))
fpdownload = MibIdentifier((1, 3, 6, 1, 4, 1, 1548, 8))
fpiptranslate = MibIdentifier((1, 3, 6, 1, 4, 1, 1548, 9))
fpdhcp = MibIdentifier((1, 3, 6, 1, 4, 1, 1548, 10))
fpdir = MibIdentifier((1, 3, 6, 1, 4, 1, 1548, 11))
fpatm = MibIdentifier((1, 3, 6, 1, 4, 1, 1548, 12))
fpfr = MibIdentifier((1, 3, 6, 1, 4, 1, 1548, 13))
class IpxNetAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class ConnectionType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("async", 1), ("isdn", 2), ("fr", 3), ("dds", 4), ("x25", 5))

class AuthenProtoType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("pap", 2), ("chap", 3))

class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

class DhcpOptionType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("none", 1), ("byte", 2), ("word", 3), ("long", 4), ("longint", 5), ("binary", 6), ("ipaddress", 7), ("string", 8))

dodTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 1, 1), )
if mibBuilder.loadTexts: dodTable.setStatus('mandatory')
dodEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "dodDestinationName"))
if mibBuilder.loadTexts: dodEntry.setStatus('mandatory')
dodTableID = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodTableID.setStatus('obsolete')
dodDestinationName = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodDestinationName.setStatus('mandatory')
dodPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodPassword.setStatus('mandatory')
dodAuthenProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 4), AuthenProtoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodAuthenProtocol.setStatus('mandatory')
dodMaxLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodMaxLinks.setStatus('mandatory')
dodBWThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodBWThreshold.setStatus('mandatory')
dodPreferType = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 7), ConnectionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodPreferType.setStatus('mandatory')
dodTearDownTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodTearDownTimer.setStatus('mandatory')
dodSourceIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodSourceIPAddress.setStatus('mandatory')
dodRemoteIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodRemoteIPAddress.setStatus('mandatory')
dodSourceIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodSourceIPMask.setStatus('mandatory')
dodRemoteIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodRemoteIPMask.setStatus('mandatory')
dodIPXNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 13), IpxNetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIPXNetAddress.setStatus('mandatory')
dodIPFilters = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodIPFilters.setStatus('mandatory')
dodIPXFilters = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodIPXFilters.setStatus('mandatory')
dodRemoteIPNets = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodRemoteIPNets.setStatus('mandatory')
dodRemoteIPXNets = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodRemoteIPXNets.setStatus('mandatory')
dodRemoteIPXSAPs = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodRemoteIPXSAPs.setStatus('mandatory')
dodRemoteMacState = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodRemoteMacState.setStatus('mandatory')
dodRemoteMacs = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodRemoteMacs.setStatus('mandatory')
dodLastActivityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodLastActivityTime.setStatus('mandatory')
dodTableOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("remove", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dodTableOperation.setStatus('mandatory')
dodMinLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodMinLinks.setStatus('mandatory')
dodBODType = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("both", 1), ("output", 2), ("input", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodBODType.setStatus('mandatory')
dodIpOptRecvRIP = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIpOptRecvRIP.setStatus('mandatory')
dodIpOptSendRIP = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIpOptSendRIP.setStatus('mandatory')
dodIpOptRecvRIPDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIpOptRecvRIPDefault.setStatus('mandatory')
dodIpOptSendRIPDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIpOptSendRIPDefault.setStatus('mandatory')
dodIpOptKeepPrivate = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIpOptKeepPrivate.setStatus('mandatory')
dodBrOptUseStp = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodBrOptUseStp.setStatus('mandatory')
dodPPPOptUseLCPEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodPPPOptUseLCPEcho.setStatus('mandatory')
dodEntryIsDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodEntryIsDisabled.setStatus('mandatory')
dodCallbackOption = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("callback-only", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodCallbackOption.setStatus('mandatory')
dodSendDataAsVoice = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodSendDataAsVoice.setStatus('mandatory')
dodIPXNetStrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIPXNetStrAddress.setStatus('mandatory')
dodOurSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dodOurSystemName.setStatus('mandatory')
dodOurPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodOurPassword.setStatus('mandatory')
dodPPPCallbackOption = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("authentication", 2), ("dial-string", 3), ("location-string", 4), ("e164-string", 5), ("name-string", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodPPPCallbackOption.setStatus('mandatory')
dodPPPCallbackInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodPPPCallbackInfo.setStatus('mandatory')
dodDontAuthenticate = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodDontAuthenticate.setStatus('mandatory')
dodIPAddressTranslation = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIPAddressTranslation.setStatus('mandatory')
dodIpOptRecvRIP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIpOptRecvRIP1.setStatus('mandatory')
dodIpOptSendRIP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIpOptSendRIP1.setStatus('mandatory')
dodIpOptRecvRIP2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIpOptRecvRIP2.setStatus('mandatory')
dodIpOptSendRIP2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIpOptSendRIP2.setStatus('mandatory')
dodProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("protocolppp", 1), ("protocol1483pppllc", 2), ("protocol1483snap", 3), ("protocol1483snapmer", 4), ("protocol1483snapfr", 5), ("protocolrawip", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodProtocol.setStatus('mandatory')
dodCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodCompression.setStatus('mandatory')
dodPasswordSpecified = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodPasswordSpecified.setStatus('mandatory')
dodOurPasswordSpecified = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodOurPasswordSpecified.setStatus('mandatory')
dodBlockNetBIOS = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodBlockNetBIOS.setStatus('mandatory')
dodMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 51), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodMtu.setStatus('mandatory')
dodIpSlaveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIpSlaveMode.setStatus('mandatory')
dodReacquireIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodReacquireIpAddr.setStatus('mandatory')
dodIpxOptRIPSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 1, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIpxOptRIPSAP.setStatus('mandatory')
dodCallIDTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 1, 2), )
if mibBuilder.loadTexts: dodCallIDTable.setStatus('mandatory')
dodCallIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 1, 2, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "dodDestinationName"), (0, "FLOWPOINT-MIB", "dodCallIDType"))
if mibBuilder.loadTexts: dodCallIDEntry.setStatus('mandatory')
dodCallIDType = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 2, 1, 1), ConnectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodCallIDType.setStatus('mandatory')
dodCallIDPhones = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodCallIDPhones.setStatus('mandatory')
dodPhoneTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 1, 3), )
if mibBuilder.loadTexts: dodPhoneTable.setStatus('mandatory')
dodPhoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 1, 3, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "dodDestinationName"), (0, "FLOWPOINT-MIB", "dodCallIDType"), (0, "FLOWPOINT-MIB", "dodPhoneIndex"))
if mibBuilder.loadTexts: dodPhoneEntry.setStatus('mandatory')
dodPhoneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodPhoneIndex.setStatus('mandatory')
dodPhoneSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodPhoneSpeed.setStatus('mandatory')
dodPhoneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodPhoneNumber.setStatus('mandatory')
dodRemoteMacTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 1, 4), )
if mibBuilder.loadTexts: dodRemoteMacTable.setStatus('mandatory')
dodRemoteMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 1, 4, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "dodDestinationName"), (0, "FLOWPOINT-MIB", "dodRemoteMacAddress"))
if mibBuilder.loadTexts: dodRemoteMacEntry.setStatus('mandatory')
dodRemoteMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodRemoteMacIndex.setStatus('obsolete')
dodRemoteMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 4, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodRemoteMacAddress.setStatus('mandatory')
dodRemoteMacOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("remove", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dodRemoteMacOperation.setStatus('mandatory')
dodRemoteIPNetTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 1, 5), )
if mibBuilder.loadTexts: dodRemoteIPNetTable.setStatus('mandatory')
dodRemoteIPNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 1, 5, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "dodDestinationName"), (0, "FLOWPOINT-MIB", "dodRemoteIPNetAddress"))
if mibBuilder.loadTexts: dodRemoteIPNetEntry.setStatus('mandatory')
dodRemoteIPNetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodRemoteIPNetIndex.setStatus('obsolete')
dodRemoteIPNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodRemoteIPNetAddress.setStatus('mandatory')
dodRemoteIPNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 5, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodRemoteIPNetMask.setStatus('mandatory')
dodRemoteIPNetHops = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodRemoteIPNetHops.setStatus('mandatory')
dodRemoteIPNetOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("remove", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dodRemoteIPNetOperation.setStatus('mandatory')
dodRemoteIPNetGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 5, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodRemoteIPNetGateway.setStatus('mandatory')
dodRemoteIPXNetTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 1, 6), )
if mibBuilder.loadTexts: dodRemoteIPXNetTable.setStatus('mandatory')
dodRemoteIPXNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 1, 6, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "dodDestinationName"), (0, "FLOWPOINT-MIB", "dodRemoteIPXNetAddress"))
if mibBuilder.loadTexts: dodRemoteIPXNetEntry.setStatus('mandatory')
dodRemoteIPXNetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodRemoteIPXNetIndex.setStatus('obsolete')
dodRemoteIPXNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 6, 1, 2), IpxNetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodRemoteIPXNetAddress.setStatus('mandatory')
dodRemoteIPXNetMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodRemoteIPXNetMetric.setStatus('mandatory')
dodRemoteIPXNetTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodRemoteIPXNetTicks.setStatus('mandatory')
dodRemoteIPXNetOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("remove", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dodRemoteIPXNetOperation.setStatus('mandatory')
dodRemoteIPXNetStrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodRemoteIPXNetStrAddress.setStatus('mandatory')
dodRemoteIPXSAPTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 1, 7), )
if mibBuilder.loadTexts: dodRemoteIPXSAPTable.setStatus('mandatory')
dodRemoteIPXSAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 1, 7, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "dodDestinationName"), (0, "FLOWPOINT-MIB", "dodRemoteIPXSAPNetAddress"), (0, "FLOWPOINT-MIB", "dodRemoteIPXSAPNodeAddress"), (0, "FLOWPOINT-MIB", "dodRemoteIPXSAPSocket"))
if mibBuilder.loadTexts: dodRemoteIPXSAPEntry.setStatus('mandatory')
dodRemoteIPXSAPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodRemoteIPXSAPIndex.setStatus('obsolete')
dodRemoteIPXSAPName = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodRemoteIPXSAPName.setStatus('mandatory')
dodRemoteIPXSAPNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 7, 1, 3), IpxNetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodRemoteIPXSAPNetAddress.setStatus('mandatory')
dodRemoteIPXSAPNodeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 7, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodRemoteIPXSAPNodeAddress.setStatus('mandatory')
dodRemoteIPXSAPSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 7, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodRemoteIPXSAPSocket.setStatus('mandatory')
dodRemoteIPXSAPType = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 7, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodRemoteIPXSAPType.setStatus('mandatory')
dodRemoteIPXSAPHops = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodRemoteIPXSAPHops.setStatus('mandatory')
dodRemoteIPXSAPOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("remove", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dodRemoteIPXSAPOperation.setStatus('mandatory')
dodRemoteIPXSAPStrNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 7, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodRemoteIPXSAPStrNetAddress.setStatus('mandatory')
dodRemoteIPXSAPStrSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 7, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodRemoteIPXSAPStrSocket.setStatus('mandatory')
dodRemoteIPXSAPStrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 7, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodRemoteIPXSAPStrType.setStatus('mandatory')
dodIPFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 1, 8), )
if mibBuilder.loadTexts: dodIPFilterTable.setStatus('mandatory')
dodIPFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 1, 8, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "dodDestinationName"), (0, "FLOWPOINT-MIB", "dodIPFilterIndex"))
if mibBuilder.loadTexts: dodIPFilterEntry.setStatus('mandatory')
dodIPFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodIPFilterIndex.setStatus('mandatory')
dodIPFilterDstNetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 8, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIPFilterDstNetAddr.setStatus('mandatory')
dodIPFilterSrcNetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 8, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIPFilterSrcNetAddr.setStatus('mandatory')
dodIPFilterAllow = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIPFilterAllow.setStatus('mandatory')
dodIPXFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 1, 9), )
if mibBuilder.loadTexts: dodIPXFilterTable.setStatus('mandatory')
dodIPXFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 1, 9, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "dodDestinationName"), (0, "FLOWPOINT-MIB", "dodIPXFilterIndex"))
if mibBuilder.loadTexts: dodIPXFilterEntry.setStatus('mandatory')
dodIPXFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodIPXFilterIndex.setStatus('mandatory')
dodIPXFilterDstNetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 9, 1, 2), IpxNetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIPXFilterDstNetAddr.setStatus('mandatory')
dodIPXFilterDstNodeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 9, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIPXFilterDstNodeAddr.setStatus('mandatory')
dodIPXFilterDstSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 9, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIPXFilterDstSocket.setStatus('mandatory')
dodIPXFilterSrcNetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 9, 1, 5), IpxNetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIPXFilterSrcNetAddr.setStatus('mandatory')
dodIPXFilterSrcNodeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 9, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIPXFilterSrcNodeAddr.setStatus('mandatory')
dodIPXFilterSrcSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 9, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIPXFilterSrcSocket.setStatus('mandatory')
dodIPXFilterAllow = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIPXFilterAllow.setStatus('mandatory')
dodOperation = MibScalar((1, 3, 6, 1, 4, 1, 1548, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("save", 1), ("load", 2), ("erase", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dodOperation.setStatus('mandatory')
dodRemoteMacDefault = MibScalar((1, 3, 6, 1, 4, 1, 1548, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodRemoteMacDefault.setStatus('mandatory')
dodCallerTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 1, 12), )
if mibBuilder.loadTexts: dodCallerTable.setStatus('mandatory')
dodCallerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 1, 12, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "dodDestinationName"), (0, "FLOWPOINT-MIB", "dodCallIDType"), (0, "FLOWPOINT-MIB", "dodCallerNumber"))
if mibBuilder.loadTexts: dodCallerEntry.setStatus('mandatory')
dodCallerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 12, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodCallerNumber.setStatus('mandatory')
dodCallerOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("remove", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dodCallerOperation.setStatus('mandatory')
dodIPTranslationServerTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 1, 13), )
if mibBuilder.loadTexts: dodIPTranslationServerTable.setStatus('mandatory')
dodIPTranslationServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 1, 13, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "dodDestinationName"), (0, "FLOWPOINT-MIB", "dodIPTranslationServerIPAddress"), (0, "FLOWPOINT-MIB", "dodIPTranslationProtocol"), (0, "FLOWPOINT-MIB", "dodIPFirstTranslationPort"))
if mibBuilder.loadTexts: dodIPTranslationServerEntry.setStatus('mandatory')
dodIPTranslationServerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 13, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodIPTranslationServerIPAddress.setStatus('mandatory')
dodIPTranslationProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 13, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodIPTranslationProtocol.setStatus('mandatory')
dodIPFirstTranslationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 13, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodIPFirstTranslationPort.setStatus('mandatory')
dodIPLastTranslationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 13, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodIPLastTranslationPort.setStatus('mandatory')
dodIPFirstPrivatePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 13, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodIPFirstPrivatePort.setStatus('mandatory')
dodIPTranslationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 13, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodIPTranslationStatus.setStatus('mandatory')
dodNatHostMappingTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 1, 14), )
if mibBuilder.loadTexts: dodNatHostMappingTable.setStatus('mandatory')
dodNatHostMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 1, 14, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "dodDestinationName"), (0, "FLOWPOINT-MIB", "dodFirstPrivateIPAddress"), (0, "FLOWPOINT-MIB", "dodLastPrivateIPAddress"), (0, "FLOWPOINT-MIB", "dodFirstPublicIPAddress"))
if mibBuilder.loadTexts: dodNatHostMappingEntry.setStatus('mandatory')
dodFirstPrivateIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 14, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodFirstPrivateIPAddress.setStatus('mandatory')
dodLastPrivateIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 14, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodLastPrivateIPAddress.setStatus('mandatory')
dodFirstPublicIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 14, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dodFirstPublicIPAddress.setStatus('mandatory')
dodNatHostMappingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 1, 14, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dodNatHostMappingStatus.setStatus('mandatory')
fpEtherTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 2, 1), )
if mibBuilder.loadTexts: fpEtherTable.setStatus('mandatory')
fpEtherEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 2, 1, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "fpPortNum"))
if mibBuilder.loadTexts: fpEtherEntry.setStatus('mandatory')
fpPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpPortNum.setStatus('mandatory')
fpBridgeState = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpBridgeState.setStatus('mandatory')
fpIpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpIpState.setStatus('mandatory')
fpIpxState = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpIpxState.setStatus('mandatory')
fpIpNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpIpNetAddress.setStatus('mandatory')
fpIpNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpIpNetMask.setStatus('mandatory')
fpIpxNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 1, 1, 7), IpxNetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpIpxNetAddress.setStatus('mandatory')
fpIpxFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("frame-8022", 1), ("frame-8023", 2), ("frame-dix", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpIpxFrameType.setStatus('mandatory')
fpEtherIpOptRecvRIP = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpEtherIpOptRecvRIP.setStatus('mandatory')
fpEtherIpOptSendRIP = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpEtherIpOptSendRIP.setStatus('mandatory')
fpEtherIpOptRecvRIPDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpEtherIpOptRecvRIPDefault.setStatus('mandatory')
fpEtherIpOptSendRIPDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpEtherIpOptSendRIPDefault.setStatus('mandatory')
fpIpxStrNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpIpxStrNetAddress.setStatus('mandatory')
fpIpDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 1, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpIpDefaultGateway.setStatus('mandatory')
fpEtherIpOptRecvRIP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpEtherIpOptRecvRIP1.setStatus('mandatory')
fpEtherIpOptSendRIP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpEtherIpOptSendRIP1.setStatus('mandatory')
fpEtherIpOptRecvRIP2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpEtherIpOptRecvRIP2.setStatus('mandatory')
fpEtherIpOptSendRIP2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpEtherIpOptSendRIP2.setStatus('mandatory')
fpIpRIPMulticastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 1, 1, 19), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpIpRIPMulticastAddress.setStatus('mandatory')
fpNATState = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpNATState.setStatus('mandatory')
fpMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpMtu.setStatus('mandatory')
fpEtherOperation = MibScalar((1, 3, 6, 1, 4, 1, 1548, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("save", 1), ("load", 2), ("erase", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: fpEtherOperation.setStatus('mandatory')
etherNatHostMappingTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 2, 3), )
if mibBuilder.loadTexts: etherNatHostMappingTable.setStatus('mandatory')
etherNatHostMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 2, 3, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "fpPortNum"), (0, "FLOWPOINT-MIB", "etherFirstPrivateIPAddress"), (0, "FLOWPOINT-MIB", "etherLastPrivateIPAddress"), (0, "FLOWPOINT-MIB", "etherFirstPublicIPAddress"))
if mibBuilder.loadTexts: etherNatHostMappingEntry.setStatus('mandatory')
etherFirstPrivateIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherFirstPrivateIPAddress.setStatus('mandatory')
etherLastPrivateIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherLastPrivateIPAddress.setStatus('mandatory')
etherFirstPublicIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherFirstPublicIPAddress.setStatus('mandatory')
etherNatHostMappingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 3, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etherNatHostMappingStatus.setStatus('mandatory')
etherIPTranslationServerTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 2, 4), )
if mibBuilder.loadTexts: etherIPTranslationServerTable.setStatus('mandatory')
etherIPTranslationServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 2, 4, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "fpPortNum"), (0, "FLOWPOINT-MIB", "etherIPTranslationServerIPAddress"), (0, "FLOWPOINT-MIB", "etherIPTranslationProtocol"), (0, "FLOWPOINT-MIB", "etherIPFirstTranslationPort"))
if mibBuilder.loadTexts: etherIPTranslationServerEntry.setStatus('mandatory')
etherIPTranslationServerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherIPTranslationServerIPAddress.setStatus('mandatory')
etherIPTranslationProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherIPTranslationProtocol.setStatus('mandatory')
etherIPFirstTranslationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherIPFirstTranslationPort.setStatus('mandatory')
etherIPLastTranslationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherIPLastTranslationPort.setStatus('mandatory')
etherIPFirstPrivatePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherIPFirstPrivatePort.setStatus('mandatory')
etherIPTranslationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 2, 4, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etherIPTranslationStatus.setStatus('mandatory')
fpIsdnCh1Spid = MibScalar((1, 3, 6, 1, 4, 1, 1548, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpIsdnCh1Spid.setStatus('mandatory')
fpIsdnCh2Spid = MibScalar((1, 3, 6, 1, 4, 1, 1548, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpIsdnCh2Spid.setStatus('mandatory')
fpIsdnCh1DirectoryNum = MibScalar((1, 3, 6, 1, 4, 1, 1548, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpIsdnCh1DirectoryNum.setStatus('mandatory')
fpIsdnCh2DirectoryNum = MibScalar((1, 3, 6, 1, 4, 1, 1548, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpIsdnCh2DirectoryNum.setStatus('mandatory')
fpIsdnSwitchType = MibScalar((1, 3, 6, 1, 4, 1, 1548, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 7, 8, 9, 10, 12, 14))).clone(namedValues=NamedValues(("att5ess", 2), ("dms100", 5), ("kdd", 7), ("net3", 8), ("net3swiss", 9), ("ni1", 10), ("ntt", 12), ("auto", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpIsdnSwitchType.setStatus('mandatory')
fpIsdnOperation = MibScalar((1, 3, 6, 1, 4, 1, 1548, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("save", 1), ("load", 2), ("erase", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: fpIsdnOperation.setStatus('mandatory')
fpIsdnCh1Status = MibScalar((1, 3, 6, 1, 4, 1, 1548, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("idle", 1), ("opening", 2), ("connected", 3), ("closing", 4), ("alerting", 5), ("dialing", 6), ("out-of-service", 7), ("in-use-by-pots", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpIsdnCh1Status.setStatus('mandatory')
fpIsdnCh2Status = MibScalar((1, 3, 6, 1, 4, 1, 1548, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("idle", 1), ("opening", 2), ("connected", 3), ("closing", 4), ("alerting", 5), ("dialing", 6), ("out-of-service", 7), ("in-use-by-pots", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpIsdnCh2Status.setStatus('mandatory')
fpIsdnCh1ClearCode = MibScalar((1, 3, 6, 1, 4, 1, 1548, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpIsdnCh1ClearCode.setStatus('mandatory')
fpIsdnCh2ClearCode = MibScalar((1, 3, 6, 1, 4, 1, 1548, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpIsdnCh2ClearCode.setStatus('mandatory')
fpIsdnCh1ClearReason = MibScalar((1, 3, 6, 1, 4, 1, 1548, 3, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpIsdnCh1ClearReason.setStatus('mandatory')
fpIsdnCh2ClearReason = MibScalar((1, 3, 6, 1, 4, 1, 1548, 3, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpIsdnCh2ClearReason.setStatus('mandatory')
fpIsdnSpeed = MibScalar((1, 3, 6, 1, 4, 1, 1548, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("speed-56k", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpIsdnSpeed.setStatus('mandatory')
fpIsdnDataCallsIn = MibScalar((1, 3, 6, 1, 4, 1, 1548, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpIsdnDataCallsIn.setStatus('mandatory')
fpIsdnDataCallsOut = MibScalar((1, 3, 6, 1, 4, 1, 1548, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpIsdnDataCallsOut.setStatus('mandatory')
fpIsdnLineStatus = MibScalar((1, 3, 6, 1, 4, 1, 1548, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("activated", 1), ("deactivated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpIsdnLineStatus.setStatus('mandatory')
fpIsdnStatus = MibScalar((1, 3, 6, 1, 4, 1, 1548, 3, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("inService", 1), ("notOperational", 2), ("startAutoSpid", 3), ("stopAutoSpid", 4), ("autoSpidActive", 5), ("validatingSpids", 6), ("qualifyingSpids", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpIsdnStatus.setStatus('mandatory')
fpIsdnAutoSpidCounter = MibScalar((1, 3, 6, 1, 4, 1, 1548, 3, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpIsdnAutoSpidCounter.setStatus('mandatory')
fpIsdnSwitchTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 3, 19), )
if mibBuilder.loadTexts: fpIsdnSwitchTable.setStatus('mandatory')
fpIsdnSwitchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 3, 19, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "fpIsdnSwitchTypeIndex"))
if mibBuilder.loadTexts: fpIsdnSwitchEntry.setStatus('mandatory')
fpIsdnSwitchTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 3, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpIsdnSwitchTypeIndex.setStatus('mandatory')
fpSysName = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpSysName.setStatus('mandatory')
fpSysMessage = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpSysMessage.setStatus('mandatory')
fpSysPassword = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpSysPassword.setStatus('mandatory')
fpSysAuthen = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 4), AuthenProtoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpSysAuthen.setStatus('mandatory')
fpSysOperation = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("save", 1), ("load", 2), ("erase", 3), ("reboot", 4), ("set-clock", 5), ("reboot-like-factory", 6), ("reboot-like-new", 7)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: fpSysOperation.setStatus('mandatory')
fpSysSoftwareVer = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpSysSoftwareVer.setStatus('mandatory')
fpSysHardwareVer = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpSysHardwareVer.setStatus('mandatory')
fpLoginPassword = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpLoginPassword.setStatus('mandatory')
fpWriteTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpWriteTimeout.setStatus('mandatory')
fpWriteTimer = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpWriteTimer.setStatus('mandatory')
fpCommunityName = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpCommunityName.setStatus('mandatory')
fpInternetFireWall = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpInternetFireWall.setStatus('mandatory')
fpSysLogout = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 13), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: fpSysLogout.setStatus('mandatory')
fpIpxSupported = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpIpxSupported.setStatus('mandatory')
fpSysCallerIdTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 4, 15), )
if mibBuilder.loadTexts: fpSysCallerIdTable.setStatus('mandatory')
fpSysCallerIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 4, 15, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "dodCallIDType"))
if mibBuilder.loadTexts: fpSysCallerIdEntry.setStatus('mandatory')
fpCallerIdEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 4, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpCallerIdEnabled.setStatus('mandatory')
fpMIBCompatibility = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("old", 1), ("new", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpMIBCompatibility.setStatus('mandatory')
fpPOTSInstalled = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpPOTSInstalled.setStatus('mandatory')
fpSysLastLogEvent = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpSysLastLogEvent.setStatus('mandatory')
fpSysSingleUser = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 19), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpSysSingleUser.setStatus('mandatory')
fpSysYear = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 20), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: fpSysYear.setStatus('mandatory')
fpSysMonth = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: fpSysMonth.setStatus('mandatory')
fpSysDay = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: fpSysDay.setStatus('mandatory')
fpSysHour = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: fpSysHour.setStatus('mandatory')
fpSysMinute = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: fpSysMinute.setStatus('mandatory')
fpSysSecond = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: fpSysSecond.setStatus('mandatory')
fpSysDefaultSingleUser = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 26), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpSysDefaultSingleUser.setStatus('mandatory')
fpSysBootpRelay = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 27), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpSysBootpRelay.setStatus('mandatory')
fpSysKernelRevision = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpSysKernelRevision.setStatus('mandatory')
fpSysTelnetPort = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpSysTelnetPort.setStatus('mandatory')
fpSysSNMPPort = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpSysSNMPPort.setStatus('mandatory')
fpWAN2WANForwarding = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpWAN2WANForwarding.setStatus('mandatory')
fpUdpRelayTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 4, 32), )
if mibBuilder.loadTexts: fpUdpRelayTable.setStatus('mandatory')
fpUdpRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 4, 32, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "fpUdpRelayFirstPort"), (0, "FLOWPOINT-MIB", "fpUdpRelayLastPort"), (0, "FLOWPOINT-MIB", "fpUdpRelayIPAddress"))
if mibBuilder.loadTexts: fpUdpRelayEntry.setStatus('mandatory')
fpUdpRelayFirstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 4, 32, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpUdpRelayFirstPort.setStatus('mandatory')
fpUdpRelayLastPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 4, 32, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpUdpRelayLastPort.setStatus('mandatory')
fpUdpRelayIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 4, 32, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpUdpRelayIPAddress.setStatus('mandatory')
fpUdpRelayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 4, 32, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpUdpRelayStatus.setStatus('mandatory')
fpOneWANConnection = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpOneWANConnection.setStatus('mandatory')
fpSysHTTPPort = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpSysHTTPPort.setStatus('mandatory')
fpDirectedBroadcasts = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpDirectedBroadcasts.setStatus('mandatory')
fpBlockNetBIOSDefault = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpBlockNetBIOSDefault.setStatus('mandatory')
fpSysFlashAvailable = MibScalar((1, 3, 6, 1, 4, 1, 1548, 4, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpSysFlashAvailable.setStatus('mandatory')
fpVoiceTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 4, 38), )
if mibBuilder.loadTexts: fpVoiceTable.setStatus('mandatory')
fpVoiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 4, 38, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "fpVoiceIndex"))
if mibBuilder.loadTexts: fpVoiceEntry.setStatus('mandatory')
fpVoiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 4, 38, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpVoiceIndex.setStatus('mandatory')
fpVoicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 4, 38, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpVoicePort.setStatus('mandatory')
fpEchoTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 4, 39), )
if mibBuilder.loadTexts: fpEchoTable.setStatus('deprecated')
fpEchoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 4, 39, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "fpEchoIndex"))
if mibBuilder.loadTexts: fpEchoEntry.setStatus('deprecated')
fpEchoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 4, 39, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpEchoIndex.setStatus('deprecated')
fpEchoPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 4, 39, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpEchoPort.setStatus('deprecated')
fpOptionTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 4, 40), )
if mibBuilder.loadTexts: fpOptionTable.setStatus('mandatory')
fpOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 4, 40, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "fpOptionIndex"))
if mibBuilder.loadTexts: fpOptionEntry.setStatus('mandatory')
fpOptionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 4, 40, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpOptionIndex.setStatus('mandatory')
fpOptionString = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 4, 40, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpOptionString.setStatus('mandatory')
fpOptionAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 4, 40, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpOptionAvailable.setStatus('mandatory')
fpLoginTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 5, 1), )
if mibBuilder.loadTexts: fpLoginTable.setStatus('mandatory')
fpLoginEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 5, 1, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "fpLoginPassword"))
if mibBuilder.loadTexts: fpLoginEntry.setStatus('mandatory')
fpLoginAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("success", 1), ("failure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpLoginAction.setStatus('mandatory')
fpWanTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 6, 1), )
if mibBuilder.loadTexts: fpWanTable.setStatus('mandatory')
fpWanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 6, 1, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "fpWanIndex"))
if mibBuilder.loadTexts: fpWanEntry.setStatus('mandatory')
fpWanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpWanIndex.setStatus('mandatory')
fpWanInstantOutUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpWanInstantOutUtil.setStatus('mandatory')
fpWanInstantInUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpWanInstantInUtil.setStatus('mandatory')
fpWanAvgOutUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpWanAvgOutUtil.setStatus('mandatory')
fpWanAvgInUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpWanAvgInUtil.setStatus('mandatory')
fpWanRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 6, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpWanRemoteName.setStatus('mandatory')
fpWanRemoteTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 6, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpWanRemoteTime.setStatus('mandatory')
fpWanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 6, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpWanIfIndex.setStatus('mandatory')
fpWanOutSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 6, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpWanOutSpeed.setStatus('mandatory')
fpWanInSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 6, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpWanInSpeed.setStatus('mandatory')
potsOperation = MibScalar((1, 3, 6, 1, 4, 1, 1548, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("save", 1), ("load", 2), ("erase", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: potsOperation.setStatus('mandatory')
potsTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 7, 2), )
if mibBuilder.loadTexts: potsTable.setStatus('mandatory')
potsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 7, 2, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "potsIndex"))
if mibBuilder.loadTexts: potsEntry.setStatus('mandatory')
potsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: potsIndex.setStatus('mandatory')
potsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: potsEnabled.setStatus('mandatory')
potsOpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("both", 1), ("answer", 2), ("dial", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: potsOpMode.setStatus('mandatory')
potsPreemptMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("both", 1), ("in", 2), ("out", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: potsPreemptMode.setStatus('mandatory')
potsAutoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("both", 1), ("in", 2), ("out", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: potsAutoMode.setStatus('mandatory')
potsPhoneCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: potsPhoneCnt.setStatus('mandatory')
potsLocalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 7, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: potsLocalNumber.setStatus('mandatory')
potsRemoteNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 7, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: potsRemoteNumber.setStatus('mandatory')
potsState = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("other", 1), ("not-available", 2), ("idle", 3), ("wait-dialtone", 4), ("ringing", 5), ("dialing", 6), ("proceeding", 7), ("connected-incoming", 8), ("connected-outgoing", 9), ("disconnected", 10), ("entering-ip-addr", 11), ("held-call", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: potsState.setStatus('mandatory')
potsIsdnChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: potsIsdnChannel.setStatus('mandatory')
potsWanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 7, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: potsWanIndex.setStatus('mandatory')
potsPhoneTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 7, 3), )
if mibBuilder.loadTexts: potsPhoneTable.setStatus('mandatory')
potsPhoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 7, 3, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "potsIndex"), (0, "FLOWPOINT-MIB", "potsPhoneNumber"))
if mibBuilder.loadTexts: potsPhoneEntry.setStatus('mandatory')
potsPhoneNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 7, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: potsPhoneNumber.setStatus('mandatory')
potsPhoneOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 7, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("remove", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: potsPhoneOperation.setStatus('mandatory')
fpDLForceOnBoot = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpDLForceOnBoot.setStatus('mandatory')
fpDLCommitRAMToFlash = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDLCommitRAMToFlash.setStatus('obsolete')
fpDLInitiateColdBoot = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpDLInitiateColdBoot.setStatus('mandatory')
fpDLTFTPRequestHost = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpDLTFTPRequestHost.setStatus('mandatory')
fpDLTFTPRequest = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDLTFTPRequest.setStatus('mandatory')
fpDLLastImageFilename = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDLLastImageFilename.setStatus('mandatory')
fpDLLastServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDLLastServerIPAddress.setStatus('mandatory')
fpDLFlashSize = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDLFlashSize.setStatus('mandatory')
fpDLFlashCount = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDLFlashCount.setStatus('mandatory')
fpDLFirmwareBase = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDLFirmwareBase.setStatus('mandatory')
fpDLFirmwareTop = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDLFirmwareTop.setStatus('mandatory')
fpDLFirmwareStart = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDLFirmwareStart.setStatus('mandatory')
fpDLBootRev = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(9, 9)).setFixedLength(9)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDLBootRev.setStatus('mandatory')
fpDLForceBootp = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpDLForceBootp.setStatus('mandatory')
fpDLServerName = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpDLServerName.setStatus('mandatory')
fpDLOnLineDownLoad = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normalOperation", 1), ("forceDownLoad", 2), ("forceDownLoadReset", 3), ("forceUpLoad", 4), ("forceRemove", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpDLOnLineDownLoad.setStatus('mandatory')
fpDLOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("normalOperation", 3), ("downLoadActive", 4), ("downLoadCompleteError", 5), ("upLoadActive", 6), ("upLoadCompleteError", 7), ("removeActive", 8), ("removeCompleteError", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDLOperStatus.setStatus('mandatory')
fpDLNetAddress = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 18), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpDLNetAddress.setStatus('mandatory')
fpDLFileName = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpDLFileName.setStatus('mandatory')
fpDLErrorString = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDLErrorString.setStatus('mandatory')
fpDLTftpServerGatewayIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 21), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpDLTftpServerGatewayIPAddress.setStatus('mandatory')
fpDLBlockCount = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDLBlockCount.setStatus('mandatory')
fpDLBootPartitionStatus = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("good", 1), ("bad", 2), ("inProgress", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDLBootPartitionStatus.setStatus('mandatory')
fpDLLocalFileName = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fpDLLocalFileName.setStatus('mandatory')
fpDLBootVersion = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDLBootVersion.setStatus('mandatory')
fpDLBootReason = MibScalar((1, 3, 6, 1, 4, 1, 1548, 8, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("power-up", 2), ("reset-switch", 3), ("software-reboot", 4), ("double-bus-fault", 5), ("hardware-watchdog", 6), ("loss-of-clock", 7), ("suicide", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDLBootReason.setStatus('mandatory')
sysIPTranslationServerTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 9, 1), )
if mibBuilder.loadTexts: sysIPTranslationServerTable.setStatus('mandatory')
sysIPTranslationServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 9, 1, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "sysIPTranslationServerIPAddress"), (0, "FLOWPOINT-MIB", "sysIPTranslationProtocol"), (0, "FLOWPOINT-MIB", "sysIPFirstTranslationPort"))
if mibBuilder.loadTexts: sysIPTranslationServerEntry.setStatus('mandatory')
sysIPTranslationServerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 9, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIPTranslationServerIPAddress.setStatus('mandatory')
sysIPTranslationProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 9, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIPTranslationProtocol.setStatus('mandatory')
sysIPFirstTranslationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 9, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIPFirstTranslationPort.setStatus('mandatory')
sysIPLastTranslationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 9, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIPLastTranslationPort.setStatus('mandatory')
sysIPFirstPrivatePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 9, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIPFirstPrivatePort.setStatus('mandatory')
sysIPTranslationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 9, 1, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIPTranslationStatus.setStatus('mandatory')
sysNatHostMappingTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 9, 2), )
if mibBuilder.loadTexts: sysNatHostMappingTable.setStatus('mandatory')
sysNatHostMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 9, 2, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "sysFirstPrivateIPAddress"), (0, "FLOWPOINT-MIB", "sysLastPrivateIPAddress"), (0, "FLOWPOINT-MIB", "sysFirstPublicIPAddress"))
if mibBuilder.loadTexts: sysNatHostMappingEntry.setStatus('mandatory')
sysFirstPrivateIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 9, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFirstPrivateIPAddress.setStatus('mandatory')
sysLastPrivateIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 9, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLastPrivateIPAddress.setStatus('mandatory')
sysFirstPublicIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 9, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFirstPublicIPAddress.setStatus('mandatory')
sysNatHostMappingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 9, 2, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysNatHostMappingStatus.setStatus('mandatory')
dhcpOperation = MibScalar((1, 3, 6, 1, 4, 1, 1548, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("save", 1), ("load", 2), ("erase", 3), ("dhcpenable", 4), ("dhcpdisable", 5)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dhcpOperation.setStatus('mandatory')
dhcpGlobalTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 1548, 10, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpGlobalTftpServer.setStatus('mandatory')
dhcpGlobalTftpFile = MibScalar((1, 3, 6, 1, 4, 1, 1548, 10, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpGlobalTftpFile.setStatus('mandatory')
dhcpGlobalLeaseTime = MibScalar((1, 3, 6, 1, 4, 1, 1548, 10, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpGlobalLeaseTime.setStatus('mandatory')
dhcpCodeTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 10, 5), )
if mibBuilder.loadTexts: dhcpCodeTable.setStatus('mandatory')
dhcpCodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 10, 5, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "dhcpOptionCode"))
if mibBuilder.loadTexts: dhcpCodeEntry.setStatus('mandatory')
dhcpOptionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpOptionCode.setStatus('mandatory')
dhcpMinCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpMinCount.setStatus('mandatory')
dhcpMaxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpMaxCount.setStatus('mandatory')
dhcpOptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 5, 1, 4), DhcpOptionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpOptionType.setStatus('mandatory')
dhcpOptionCodeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 5, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpOptionCodeStatus.setStatus('mandatory')
dhcpGlobalValueTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 10, 6), )
if mibBuilder.loadTexts: dhcpGlobalValueTable.setStatus('mandatory')
dhcpGlobalValueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 10, 6, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "dhcpGlobalValueCode"))
if mibBuilder.loadTexts: dhcpGlobalValueEntry.setStatus('mandatory')
dhcpGlobalValueCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpGlobalValueCode.setStatus('mandatory')
dhcpGlobalValueType = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 6, 1, 2), DhcpOptionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpGlobalValueType.setStatus('mandatory')
dhcpGlobalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpGlobalValue.setStatus('mandatory')
dhcpGlobalValueStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 6, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpGlobalValueStatus.setStatus('mandatory')
dhcpSubnetTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 10, 7), )
if mibBuilder.loadTexts: dhcpSubnetTable.setStatus('mandatory')
dhcpSubnetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 10, 7, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "dhcpSubnetAddress"))
if mibBuilder.loadTexts: dhcpSubnetEntry.setStatus('mandatory')
dhcpSubnetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 7, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSubnetAddress.setStatus('mandatory')
dhcpSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 7, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSubnetMask.setStatus('mandatory')
dhcpSubnetFirstIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 7, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSubnetFirstIpAddress.setStatus('mandatory')
dhcpSubnetLastIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 7, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSubnetLastIpAddress.setStatus('mandatory')
dhcpSubnetTftpServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 7, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSubnetTftpServer.setStatus('mandatory')
dhcpSubnetTftpFile = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 7, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSubnetTftpFile.setStatus('mandatory')
dhcpSubnetBootp = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("disallow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSubnetBootp.setStatus('mandatory')
dhcpSubnetLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 7, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSubnetLeaseTime.setStatus('mandatory')
dhcpSubnetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 7, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSubnetStatus.setStatus('mandatory')
dhcpSubnetConflictActions = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("docontinue", 1), ("dostop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSubnetConflictActions.setStatus('mandatory')
dhcpSubnetValueTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 10, 8), )
if mibBuilder.loadTexts: dhcpSubnetValueTable.setStatus('mandatory')
dhcpSubnetValueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 10, 8, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "dhcpSubnetAddress"), (0, "FLOWPOINT-MIB", "dhcpSubnetValueCode"))
if mibBuilder.loadTexts: dhcpSubnetValueEntry.setStatus('mandatory')
dhcpSubnetValueCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSubnetValueCode.setStatus('mandatory')
dhcpSubnetValueType = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 8, 1, 2), DhcpOptionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSubnetValueType.setStatus('mandatory')
dhcpSubnetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 8, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSubnetValue.setStatus('mandatory')
dhcpSubnetValueStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 8, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSubnetValueStatus.setStatus('mandatory')
dhcpClientTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 10, 9), )
if mibBuilder.loadTexts: dhcpClientTable.setStatus('mandatory')
dhcpClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 10, 9, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "dhcpClientAddress"))
if mibBuilder.loadTexts: dhcpClientEntry.setStatus('mandatory')
dhcpClientAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 9, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpClientAddress.setStatus('mandatory')
dhcpClientTftpServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 9, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientTftpServer.setStatus('mandatory')
dhcpClientTftpFile = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientTftpFile.setStatus('mandatory')
dhcpClientBootp = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("disallow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientBootp.setStatus('mandatory')
dhcpClientLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 9, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientLeaseTime.setStatus('mandatory')
dhcpClientExpireTimeYear = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 9, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientExpireTimeYear.setStatus('mandatory')
dhcpClientExpireTimeMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientExpireTimeMonth.setStatus('mandatory')
dhcpClientExpireTimeDay = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientExpireTimeDay.setStatus('mandatory')
dhcpClientExpireTimeHour = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientExpireTimeHour.setStatus('mandatory')
dhcpClientExpireTimeMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 9, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientExpireTimeMinute.setStatus('mandatory')
dhcpClientExpireTimeSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 9, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientExpireTimeSecond.setStatus('mandatory')
dhcpClientStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 9, 1, 12), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientStatus.setStatus('mandatory')
dhcpClientValueTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 10, 10), )
if mibBuilder.loadTexts: dhcpClientValueTable.setStatus('mandatory')
dhcpClientValueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 10, 10, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "dhcpClientAddress"), (0, "FLOWPOINT-MIB", "dhcpClientValueCode"))
if mibBuilder.loadTexts: dhcpClientValueEntry.setStatus('mandatory')
dhcpClientValueCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpClientValueCode.setStatus('mandatory')
dhcpClientValueType = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 10, 1, 2), DhcpOptionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpClientValueType.setStatus('mandatory')
dhcpClientValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 10, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientValue.setStatus('mandatory')
dhcpClientValueStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 10, 10, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpClientValueStatus.setStatus('mandatory')
fpDirTable = MibTable((1, 3, 6, 1, 4, 1, 1548, 11, 1), )
if mibBuilder.loadTexts: fpDirTable.setStatus('mandatory')
fpDirEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1548, 11, 1, 1), ).setIndexNames((0, "FLOWPOINT-MIB", "fpDirIndex"))
if mibBuilder.loadTexts: fpDirEntry.setStatus('mandatory')
fpDirIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDirIndex.setStatus('mandatory')
fpDirName = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 11, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDirName.setStatus('mandatory')
fpDirSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1548, 11, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDirSize.setStatus('mandatory')
atmOperation = MibScalar((1, 3, 6, 1, 4, 1, 1548, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("save", 1), ("load", 2), ("erase", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: atmOperation.setStatus('mandatory')
frOperation = MibScalar((1, 3, 6, 1, 4, 1, 1548, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("save", 1), ("load", 2), ("erase", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: frOperation.setStatus('mandatory')
mibBuilder.exportSymbols("FLOWPOINT-MIB", dodDestinationName=dodDestinationName, dhcpSubnetLastIpAddress=dhcpSubnetLastIpAddress, dodIPXFilterAllow=dodIPXFilterAllow, dodIPFilterDstNetAddr=dodIPFilterDstNetAddr, fpDLOnLineDownLoad=fpDLOnLineDownLoad, fpNATState=fpNATState, etherFirstPublicIPAddress=etherFirstPublicIPAddress, dodCallIDPhones=dodCallIDPhones, dodIpOptSendRIP2=dodIpOptSendRIP2, dodRemoteIPXSAPSocket=dodRemoteIPXSAPSocket, dhcpSubnetValueTable=dhcpSubnetValueTable, dodRemoteIPXSAPNetAddress=dodRemoteIPXSAPNetAddress, etherIPLastTranslationPort=etherIPLastTranslationPort, fpDLTftpServerGatewayIPAddress=fpDLTftpServerGatewayIPAddress, fpWriteTimeout=fpWriteTimeout, dhcpSubnetEntry=dhcpSubnetEntry, frOperation=frOperation, dhcpMinCount=dhcpMinCount, dodRemoteIPXSAPIndex=dodRemoteIPXSAPIndex, dodOperation=dodOperation, fpLoginTable=fpLoginTable, dodSourceIPMask=dodSourceIPMask, dodIPTranslationStatus=dodIPTranslationStatus, fpdownload=fpdownload, dhcpGlobalValueStatus=dhcpGlobalValueStatus, fpIpxStrNetAddress=fpIpxStrNetAddress, fpCommunityName=fpCommunityName, fpSysSoftwareVer=fpSysSoftwareVer, fpSysLastLogEvent=fpSysLastLogEvent, dodDontAuthenticate=dodDontAuthenticate, etherIPTranslationStatus=etherIPTranslationStatus, fpSysOperation=fpSysOperation, dhcpGlobalValueType=dhcpGlobalValueType, fpVoiceEntry=fpVoiceEntry, dodIpOptSendRIPDefault=dodIpOptSendRIPDefault, fpsys=fpsys, fpEtherIpOptRecvRIP1=fpEtherIpOptRecvRIP1, dodRemoteIPXNetStrAddress=dodRemoteIPXNetStrAddress, fpVoiceTable=fpVoiceTable, dhcpClientEntry=dhcpClientEntry, dodRemoteIPNetAddress=dodRemoteIPNetAddress, fpSysHardwareVer=fpSysHardwareVer, dodRemoteIPAddress=dodRemoteIPAddress, AuthenProtoType=AuthenProtoType, dodRemoteIPNetGateway=dodRemoteIPNetGateway, dodRemoteIPXSAPType=dodRemoteIPXSAPType, dodPhoneTable=dodPhoneTable, dodIPXFilterSrcSocket=dodIPXFilterSrcSocket, fpSysSingleUser=fpSysSingleUser, dhcpMaxCount=dhcpMaxCount, dhcpSubnetStatus=dhcpSubnetStatus, dodRemoteIPXNetIndex=dodRemoteIPXNetIndex, dodRemoteMacDefault=dodRemoteMacDefault, dodBrOptUseStp=dodBrOptUseStp, potsWanIndex=potsWanIndex, fpEtherIpOptSendRIPDefault=fpEtherIpOptSendRIPDefault, dodIPFirstTranslationPort=dodIPFirstTranslationPort, dodPPPCallbackInfo=dodPPPCallbackInfo, fpSysSecond=fpSysSecond, potsPhoneCnt=potsPhoneCnt, dodMaxLinks=dodMaxLinks, dodBWThreshold=dodBWThreshold, dhcpClientValueCode=dhcpClientValueCode, dodLastPrivateIPAddress=dodLastPrivateIPAddress, flowpoint=flowpoint, dhcpClientExpireTimeMinute=dhcpClientExpireTimeMinute, dodIpOptKeepPrivate=dodIpOptKeepPrivate, fpIpxSupported=fpIpxSupported, fpIsdnCh2ClearCode=fpIsdnCh2ClearCode, etherNatHostMappingTable=etherNatHostMappingTable, fpVoicePort=fpVoicePort, sysIPTranslationServerTable=sysIPTranslationServerTable, fpMtu=fpMtu, dhcpGlobalValueTable=dhcpGlobalValueTable, fpSysPassword=fpSysPassword, dhcpClientAddress=dhcpClientAddress, potsPhoneEntry=potsPhoneEntry, dodIPXFilterSrcNetAddr=dodIPXFilterSrcNetAddr, potsEnabled=potsEnabled, dodIPFilterAllow=dodIPFilterAllow, dodIPXFilterSrcNodeAddr=dodIPXFilterSrcNodeAddr, dodIPFilterIndex=dodIPFilterIndex, sysNatHostMappingStatus=sysNatHostMappingStatus, fpEchoPort=fpEchoPort, dodRemoteIPXSAPName=dodRemoteIPXSAPName, fpWanAvgInUtil=fpWanAvgInUtil, fpWanRemoteTime=fpWanRemoteTime, dodRemoteIPNetEntry=dodRemoteIPNetEntry, fpether=fpether, potsEntry=potsEntry, potsPhoneNumber=potsPhoneNumber, potsOpMode=potsOpMode, fpIsdnLineStatus=fpIsdnLineStatus, dodCallerEntry=dodCallerEntry, fpdir=fpdir, dodTable=dodTable, etherNatHostMappingEntry=etherNatHostMappingEntry, fpDLTFTPRequest=fpDLTFTPRequest, dodRemoteIPNetOperation=dodRemoteIPNetOperation, etherLastPrivateIPAddress=etherLastPrivateIPAddress, fpLoginEntry=fpLoginEntry, dhcpClientValueTable=dhcpClientValueTable, dhcpClientExpireTimeHour=dhcpClientExpireTimeHour, fpatm=fpatm, fpWanInstantInUtil=fpWanInstantInUtil, dodPPPOptUseLCPEcho=dodPPPOptUseLCPEcho, dodIPXFilterTable=dodIPXFilterTable, fpIsdnSwitchType=fpIsdnSwitchType, dodRemoteIPXNets=dodRemoteIPXNets, fpEchoIndex=fpEchoIndex, dodIPXFilterEntry=dodIPXFilterEntry, dodIPTranslationProtocol=dodIPTranslationProtocol, sysNatHostMappingTable=sysNatHostMappingTable, dhcpSubnetConflictActions=dhcpSubnetConflictActions, dhcpSubnetAddress=dhcpSubnetAddress, fpOneWANConnection=fpOneWANConnection, fpUdpRelayStatus=fpUdpRelayStatus, fpIpxNetAddress=fpIpxNetAddress, dodCallbackOption=dodCallbackOption, dodIpSlaveMode=dodIpSlaveMode, dodCallIDTable=dodCallIDTable, fpDLFirmwareBase=fpDLFirmwareBase, dhcpSubnetValueCode=dhcpSubnetValueCode, dodTearDownTimer=dodTearDownTimer, dodPPPCallbackOption=dodPPPCallbackOption, fpEtherIpOptSendRIP2=fpEtherIpOptSendRIP2, sysIPTranslationStatus=sysIPTranslationStatus, fpOptionTable=fpOptionTable, dodRemoteIPXSAPHops=dodRemoteIPXSAPHops, dodEntryIsDisabled=dodEntryIsDisabled, potsIndex=potsIndex, dodRemoteMacOperation=dodRemoteMacOperation, fpIsdnCh2DirectoryNum=fpIsdnCh2DirectoryNum, sysIPLastTranslationPort=sysIPLastTranslationPort, fpOptionAvailable=fpOptionAvailable, dodRemoteIPXNetTable=dodRemoteIPXNetTable, dhcpSubnetBootp=dhcpSubnetBootp, dhcpClientTable=dhcpClientTable, fpSysCallerIdTable=fpSysCallerIdTable, fpSysLogout=fpSysLogout, dodRemoteMacs=dodRemoteMacs, dodTableOperation=dodTableOperation, fpDLLastImageFilename=fpDLLastImageFilename, dhcpOptionType=dhcpOptionType, dodRemoteMacState=dodRemoteMacState, dhcpSubnetFirstIpAddress=dhcpSubnetFirstIpAddress, potsTable=potsTable, dodIPFilterSrcNetAddr=dodIPFilterSrcNetAddr, fpWanTable=fpWanTable, fpiptranslate=fpiptranslate, fpEchoTable=fpEchoTable, potsPhoneTable=potsPhoneTable, dodIpOptRecvRIP1=dodIpOptRecvRIP1, fpDLForceOnBoot=fpDLForceOnBoot, dodBlockNetBIOS=dodBlockNetBIOS, dhcpSubnetValue=dhcpSubnetValue, fpIpxState=fpIpxState, fpDLLocalFileName=fpDLLocalFileName, fpDLErrorString=fpDLErrorString, fpSysMonth=fpSysMonth, dhcpSubnetValueStatus=dhcpSubnetValueStatus, dodCallerTable=dodCallerTable, dodBODType=dodBODType, fpDLOperStatus=fpDLOperStatus, fppots=fppots, dhcpClientValueEntry=dhcpClientValueEntry, fpMIBCompatibility=fpMIBCompatibility, dodIPFilterTable=dodIPFilterTable, dodRemoteMacAddress=dodRemoteMacAddress, fpIpRIPMulticastAddress=fpIpRIPMulticastAddress, sysIPFirstTranslationPort=sysIPFirstTranslationPort, potsState=potsState, dodRemoteIPNetMask=dodRemoteIPNetMask, fpIpxFrameType=fpIpxFrameType, dhcpClientLeaseTime=dhcpClientLeaseTime, dhcpOptionCode=dhcpOptionCode, fpWanRemoteName=fpWanRemoteName, fpDLInitiateColdBoot=fpDLInitiateColdBoot, dodSourceIPAddress=dodSourceIPAddress, fpSysHour=fpSysHour, dhcpSubnetTftpFile=dhcpSubnetTftpFile, fpDLBootRev=fpDLBootRev, dodSendDataAsVoice=dodSendDataAsVoice, dodIpOptSendRIP1=dodIpOptSendRIP1, fpDLBootVersion=fpDLBootVersion, fpIsdnOperation=fpIsdnOperation, fpIsdnCh1ClearReason=fpIsdnCh1ClearReason, fpWanIndex=fpWanIndex, fpDLFirmwareStart=fpDLFirmwareStart, dodEntry=dodEntry, RowStatus=RowStatus, fpDirIndex=fpDirIndex, fpDirectedBroadcasts=fpDirectedBroadcasts, fpEtherIpOptRecvRIP=fpEtherIpOptRecvRIP, dhcpClientStatus=dhcpClientStatus, fpSysMessage=fpSysMessage, fpDirEntry=fpDirEntry, dodOurPasswordSpecified=dodOurPasswordSpecified, dodRemoteIPXSAPOperation=dodRemoteIPXSAPOperation, dodRemoteIPXSAPEntry=dodRemoteIPXSAPEntry, fpEtherIpOptRecvRIP2=fpEtherIpOptRecvRIP2, fpPortNum=fpPortNum, etherIPTranslationServerEntry=etherIPTranslationServerEntry, dhcpClientTftpServer=dhcpClientTftpServer, potsOperation=potsOperation, dodRemoteIPXSAPTable=dodRemoteIPXSAPTable, etherIPTranslationServerIPAddress=etherIPTranslationServerIPAddress, fpSysBootpRelay=fpSysBootpRelay, fpEtherIpOptSendRIP=fpEtherIpOptSendRIP, dodIPXFilterDstNodeAddr=dodIPXFilterDstNodeAddr, dodPhoneSpeed=dodPhoneSpeed, fpDLLastServerIPAddress=fpDLLastServerIPAddress, dodRemoteIPXNetEntry=dodRemoteIPXNetEntry, dodPhoneNumber=dodPhoneNumber, fpPOTSInstalled=fpPOTSInstalled, dodRemoteMacTable=dodRemoteMacTable, dodOurSystemName=dodOurSystemName, fpWan=fpWan, fpfr=fpfr, dodRemoteIPNetIndex=dodRemoteIPNetIndex, fpEtherIpOptSendRIP1=fpEtherIpOptSendRIP1, fpEtherTable=fpEtherTable, fpUdpRelayLastPort=fpUdpRelayLastPort, dodPhoneEntry=dodPhoneEntry, dodNatHostMappingStatus=dodNatHostMappingStatus, dhcpClientValue=dhcpClientValue, fpIsdnCh2Spid=fpIsdnCh2Spid, dhcpGlobalTftpServer=dhcpGlobalTftpServer, dodIPXNetStrAddress=dodIPXNetStrAddress, etherIPFirstTranslationPort=etherIPFirstTranslationPort, fpUdpRelayTable=fpUdpRelayTable, potsLocalNumber=potsLocalNumber, dodIPXNetAddress=dodIPXNetAddress, dodNatHostMappingEntry=dodNatHostMappingEntry, dodCallerOperation=dodCallerOperation, dodIpOptSendRIP=dodIpOptSendRIP, fpIsdnCh1DirectoryNum=fpIsdnCh1DirectoryNum, fpDirSize=fpDirSize, dodIPTranslationServerTable=dodIPTranslationServerTable, dodOurPassword=dodOurPassword, sysIPFirstPrivatePort=sysIPFirstPrivatePort, dhcpClientValueStatus=dhcpClientValueStatus, dodIpOptRecvRIPDefault=dodIpOptRecvRIPDefault, fpIsdnAutoSpidCounter=fpIsdnAutoSpidCounter, dhcpClientExpireTimeYear=dhcpClientExpireTimeYear, dodIPXFilterDstNetAddr=dodIPXFilterDstNetAddr, fpIpDefaultGateway=fpIpDefaultGateway, sysIPTranslationServerEntry=sysIPTranslationServerEntry, dodRemoteIPXSAPNodeAddress=dodRemoteIPXSAPNodeAddress, fpWAN2WANForwarding=fpWAN2WANForwarding, dhcpCodeTable=dhcpCodeTable, sysNatHostMappingEntry=sysNatHostMappingEntry, dodMtu=dodMtu, fpVoiceIndex=fpVoiceIndex)
mibBuilder.exportSymbols("FLOWPOINT-MIB", potsIsdnChannel=potsIsdnChannel, dodCallIDType=dodCallIDType, potsPhoneOperation=potsPhoneOperation, fpDLNetAddress=fpDLNetAddress, fpIsdnCh1Status=fpIsdnCh1Status, fpSysCallerIdEntry=fpSysCallerIdEntry, fpUdpRelayIPAddress=fpUdpRelayIPAddress, dodIPFilters=dodIPFilters, dodRemoteIPXSAPs=dodRemoteIPXSAPs, dodPasswordSpecified=dodPasswordSpecified, dodRemoteIPMask=dodRemoteIPMask, dhcpSubnetValueType=dhcpSubnetValueType, sysFirstPrivateIPAddress=sysFirstPrivateIPAddress, dodIPXFilters=dodIPXFilters, dodCallerNumber=dodCallerNumber, fpUdpRelayFirstPort=fpUdpRelayFirstPort, dodFirstPrivateIPAddress=dodFirstPrivateIPAddress, dodNatHostMappingTable=dodNatHostMappingTable, fpBridgeState=fpBridgeState, fpdhcp=fpdhcp, fpDLFirmwareTop=fpDLFirmwareTop, fpCallerIdEnabled=fpCallerIdEnabled, dodIPTranslationServerEntry=dodIPTranslationServerEntry, IpxNetAddress=IpxNetAddress, fpIsdnStatus=fpIsdnStatus, etherFirstPrivateIPAddress=etherFirstPrivateIPAddress, dodRemoteIPXSAPStrSocket=dodRemoteIPXSAPStrSocket, dodRemoteMacIndex=dodRemoteMacIndex, fpIsdnDataCallsOut=fpIsdnDataCallsOut, dhcpGlobalValueCode=dhcpGlobalValueCode, MacAddress=MacAddress, potsRemoteNumber=potsRemoteNumber, dodIPXFilterDstSocket=dodIPXFilterDstSocket, dodIPFirstPrivatePort=dodIPFirstPrivatePort, dodReacquireIpAddr=dodReacquireIpAddr, dodRemoteIPNetHops=dodRemoteIPNetHops, fpSysHTTPPort=fpSysHTTPPort, fplogin=fplogin, dodRemoteIPXNetAddress=dodRemoteIPXNetAddress, dodAuthenProtocol=dodAuthenProtocol, dodIpOptRecvRIP=dodIpOptRecvRIP, dhcpSubnetMask=dhcpSubnetMask, fpIsdnDataCallsIn=fpIsdnDataCallsIn, dodCompression=dodCompression, sysIPTranslationServerIPAddress=sysIPTranslationServerIPAddress, etherIPTranslationProtocol=etherIPTranslationProtocol, fpSysKernelRevision=fpSysKernelRevision, fpDirName=fpDirName, dodTableID=dodTableID, dodMinLinks=dodMinLinks, dhcpClientValueType=dhcpClientValueType, dodRemoteIPNetTable=dodRemoteIPNetTable, dodRemoteIPNets=dodRemoteIPNets, fpDLTFTPRequestHost=fpDLTFTPRequestHost, dodRemoteIPXNetOperation=dodRemoteIPXNetOperation, dodRemoteIPXSAPStrType=dodRemoteIPXSAPStrType, fpIsdnCh1ClearCode=fpIsdnCh1ClearCode, fpIpState=fpIpState, fpDirTable=fpDirTable, fpDLBootPartitionStatus=fpDLBootPartitionStatus, potsPreemptMode=potsPreemptMode, fpIsdnCh1Spid=fpIsdnCh1Spid, dhcpOperation=dhcpOperation, potsAutoMode=potsAutoMode, fpIsdnSpeed=fpIsdnSpeed, dhcpGlobalValue=dhcpGlobalValue, dhcpSubnetValueEntry=dhcpSubnetValueEntry, dhcpClientBootp=dhcpClientBootp, fpEtherEntry=fpEtherEntry, fpDLServerName=fpDLServerName, dodIPTranslationServerIPAddress=dodIPTranslationServerIPAddress, fpIsdnSwitchEntry=fpIsdnSwitchEntry, dhcpClientExpireTimeSecond=dhcpClientExpireTimeSecond, dodRemoteIPXNetMetric=dodRemoteIPXNetMetric, fpWanEntry=fpWanEntry, fpDLBootReason=fpDLBootReason, fpisdn=fpisdn, fpSysSNMPPort=fpSysSNMPPort, fpdod=fpdod, fpSysMinute=fpSysMinute, dodIPXFilterIndex=dodIPXFilterIndex, etherNatHostMappingStatus=etherNatHostMappingStatus, fpLoginAction=fpLoginAction, fpWanAvgOutUtil=fpWanAvgOutUtil, dodProtocol=dodProtocol, dodIPLastTranslationPort=dodIPLastTranslationPort, dodPhoneIndex=dodPhoneIndex, fpOptionString=fpOptionString, sysIPTranslationProtocol=sysIPTranslationProtocol, fpOptionEntry=fpOptionEntry, ConnectionType=ConnectionType, fpSysDefaultSingleUser=fpSysDefaultSingleUser, fpSysFlashAvailable=fpSysFlashAvailable, dhcpClientExpireTimeDay=dhcpClientExpireTimeDay, fpWriteTimer=fpWriteTimer, dodRemoteMacEntry=dodRemoteMacEntry, fpIpNetAddress=fpIpNetAddress, fpEtherIpOptRecvRIPDefault=fpEtherIpOptRecvRIPDefault, fpDLFileName=fpDLFileName, dhcpCodeEntry=dhcpCodeEntry, atmOperation=atmOperation, fpIpNetMask=fpIpNetMask, fpIsdnCh2ClearReason=fpIsdnCh2ClearReason, fpWanInstantOutUtil=fpWanInstantOutUtil, dhcpGlobalTftpFile=dhcpGlobalTftpFile, dodIpxOptRIPSAP=dodIpxOptRIPSAP, fpDLFlashSize=fpDLFlashSize, fpWanOutSpeed=fpWanOutSpeed, dhcpOptionCodeStatus=dhcpOptionCodeStatus, fpBlockNetBIOSDefault=fpBlockNetBIOSDefault, dodIpOptRecvRIP2=dodIpOptRecvRIP2, fpLoginPassword=fpLoginPassword, fpEchoEntry=fpEchoEntry, sysLastPrivateIPAddress=sysLastPrivateIPAddress, fpIsdnCh2Status=fpIsdnCh2Status, dhcpSubnetTable=dhcpSubnetTable, dhcpGlobalLeaseTime=dhcpGlobalLeaseTime, dodFirstPublicIPAddress=dodFirstPublicIPAddress, dhcpClientTftpFile=dhcpClientTftpFile, dhcpSubnetLeaseTime=dhcpSubnetLeaseTime, fpDLForceBootp=fpDLForceBootp, etherIPFirstPrivatePort=etherIPFirstPrivatePort, etherIPTranslationServerTable=etherIPTranslationServerTable, dodRemoteIPXSAPStrNetAddress=dodRemoteIPXSAPStrNetAddress, DhcpOptionType=DhcpOptionType, fpWanIfIndex=fpWanIfIndex, dhcpClientExpireTimeMonth=dhcpClientExpireTimeMonth, fpEtherOperation=fpEtherOperation, fpIsdnSwitchTypeIndex=fpIsdnSwitchTypeIndex, fpIsdnSwitchTable=fpIsdnSwitchTable, fpSysDay=fpSysDay, dodCallIDEntry=dodCallIDEntry, fpOptionIndex=fpOptionIndex, dhcpSubnetTftpServer=dhcpSubnetTftpServer, fpDLCommitRAMToFlash=fpDLCommitRAMToFlash, fpUdpRelayEntry=fpUdpRelayEntry, sysFirstPublicIPAddress=sysFirstPublicIPAddress, dodLastActivityTime=dodLastActivityTime, dodPreferType=dodPreferType, dhcpGlobalValueEntry=dhcpGlobalValueEntry, fpSysTelnetPort=fpSysTelnetPort, fpWanInSpeed=fpWanInSpeed, fpDLBlockCount=fpDLBlockCount, dodRemoteIPXNetTicks=dodRemoteIPXNetTicks, dodIPAddressTranslation=dodIPAddressTranslation, fpDLFlashCount=fpDLFlashCount, dodIPFilterEntry=dodIPFilterEntry, fpSysYear=fpSysYear, fpInternetFireWall=fpInternetFireWall, fpSysName=fpSysName, fpSysAuthen=fpSysAuthen, dodPassword=dodPassword)
