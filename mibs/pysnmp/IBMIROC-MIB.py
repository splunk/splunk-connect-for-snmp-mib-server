#
# PySNMP MIB module IBMIROC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IBMIROC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:40:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
proResMemHeapNeverAlloc, proElsSubSysEventMsg, proResMemHeapTotal = mibBuilder.importSymbols("PROTEON-MIB", "proResMemHeapNeverAlloc", "proElsSubSysEventMsg", "proResMemHeapTotal")
frCircuitDlci, frCircuitIfIndex = mibBuilder.importSymbols("RFC1315-MIB", "frCircuitDlci", "frCircuitIfIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, ModuleIdentity, enterprises, NotificationType, Counter64, ObjectIdentity, Unsigned32, Bits, MibIdentifier, Gauge32, IpAddress, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, iso, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ModuleIdentity", "enterprises", "NotificationType", "Counter64", "ObjectIdentity", "Unsigned32", "Bits", "MibIdentifier", "Gauge32", "IpAddress", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "iso", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2))
ibmProd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6))
ibmIROC = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119))
class MacAddressNCIROC(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

ibmIROCadmin = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 1))
ibmIROCsystem = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 2))
ibmIROChardware = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 3))
ibmIROCrouting = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4))
ibmIROCswitching = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 5))
ibmIROCtraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 6))
ibmIROCconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 7))
ibmIROCadminproducts = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 1, 1))
ibmIROCadminOID = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 1, 2))
ibmIROCadminDebug = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 1, 3))
ibmIROCadminSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 1, 4))
ibmIROCsystemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 2, 1))
ibmIROCcfgInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 2, 2))
ibmIROCdumpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 2, 4))
ibmIROChardwareInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 3, 1))
ibmIROCroutingppp = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2))
ibmIROCroutingdlsw = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3))
ibmIROCroutingfr = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4))
ibmIROCroutingRlan = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 5))
ibmIROCroutingDialOut = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 6))
ibmIROCroutingl2tp = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 7))
ibmCacheServer = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 8))
ibmIROCroutingIpSec = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 9))
ibmIROCswhw = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 10))
ibmWanRestoralRerouteMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 11))
ibmBANMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 12))
ibmIROCrmon = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 13))
ibmIROCescon = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 14))
ibmIROCVPNpolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 15))
ibmIROCroutingvoice = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 16))
ibmIROCroutinginterface = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 17))
ibmIROCroutingtn3270e = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 18))
ibmIROCroutingtcpip = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 20))
ibmIROCconfigAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 7, 2))
ibmIROCconfigWrite = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noaction", 1), ("write", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmIROCconfigWrite.setStatus('mandatory')
ibmIROCAgentDebug = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 1, 3, 1))
agentMemUse = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 1, 3, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMemUse.setStatus('mandatory')
ibmIROCSnmpAuthFail = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 1, 4, 1))
authTrapSourceIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 1, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authTrapSourceIPAddr.setStatus('mandatory')
ibmSysDumpTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 2, 4, 1), )
if mibBuilder.loadTexts: ibmSysDumpTable.setStatus('mandatory')
ibmSysDumpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 2, 4, 1, 1), ).setIndexNames((0, "IBMIROC-MIB", "ibmSysDumpIndex"))
if mibBuilder.loadTexts: ibmSysDumpEntry.setStatus('mandatory')
ibmSysDumpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSysDumpIndex.setStatus('mandatory')
ibmSysDumpFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 2, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSysDumpFileName.setStatus('mandatory')
ibmSysDumpFileDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 2, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSysDumpFileDate.setStatus('mandatory')
ibmSysDumpBuild = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 2, 4, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSysDumpBuild.setStatus('mandatory')
ibmSysDumpBuilder = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 2, 4, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSysDumpBuilder.setStatus('mandatory')
ibmSysDumpBuildName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 2, 4, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSysDumpBuildName.setStatus('mandatory')
ibmSysDumpRetainName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 2, 4, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSysDumpRetainName.setStatus('mandatory')
ibmSysDumpProductNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 2, 4, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSysDumpProductNumber.setStatus('mandatory')
ibmSysDumpBuildDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 2, 4, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSysDumpBuildDate.setStatus('mandatory')
ibmSysDumpFatalMsg1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 2, 4, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSysDumpFatalMsg1.setStatus('mandatory')
ibmSysDumpFatalMsg2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 2, 4, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSysDumpFatalMsg2.setStatus('mandatory')
ibmSysDumpFatalMsg3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 2, 4, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSysDumpFatalMsg3.setStatus('mandatory')
ibmSysDumpFatalMsg4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 2, 4, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSysDumpFatalMsg4.setStatus('mandatory')
ibmSysDumpFatalMsg5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 2, 4, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSysDumpFatalMsg5.setStatus('mandatory')
ibmSysDumpRemoteIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 2, 4, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSysDumpRemoteIPAddr.setStatus('mandatory')
ibmSysDumpRemotePath = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 2, 4, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmSysDumpRemotePath.setStatus('mandatory')
platformType = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42))).clone(namedValues=NamedValues(("plat-other", 1), ("plat-mss-8210", 2), ("plat-mss-blade", 3), ("plat-mss-client", 4), ("plat-2216-400", 5), ("plat-2210-1s4", 6), ("plat-2210-1s8", 7), ("plat-2210-1u4", 8), ("plat-2210-1u8", 9), ("plat-2210-24e", 10), ("plat-2210-24m", 11), ("plat-2210-24t", 12), ("plat-2210-14t", 13), ("plat-2210-125", 14), ("plat-2210-127", 15), ("plat-2210-121", 16), ("plat-2210-12t", 17), ("plat-2210-126", 18), ("plat-2210-128", 19), ("plat-2210-122", 20), ("plat-2210-12e", 21), ("plat-2220-200", 22), ("plat-3746-MAE", 23), ("plat-mss-domain-client", 24), ("plat-mss-8210V2", 25), ("plat-mss-bladeV2", 26), ("plat-netu-xx1", 27), ("plat-2212-10F", 28), ("plat-2212-10H", 29), ("plat-2212-40F", 30), ("plat-2212-40H", 31), ("plat-8371", 32), ("plat-8375", 33), ("plat-2212-15F", 34), ("plat-2212-15H", 35), ("plat-2212-45F", 36), ("plat-2212-45H", 37), ("plat-reserved1", 38), ("plat-reserved2", 39), ("plat-8275-RR", 40), ("plat-8371-8260B", 41), ("plat-reserved", 42)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformType.setStatus('mandatory')
platformDRAMSize = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformDRAMSize.setStatus('mandatory')
platformFLASHSize = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformFLASHSize.setStatus('mandatory')
platformNVRAMSize = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformNVRAMSize.setStatus('mandatory')
platformFeatureSlot = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("none", 1), ("isdn-BRI-ST", 2), ("isdn-PRI-E1-120", 3), ("isdn-PRI-E1-75", 4), ("isdn-PRI-T1J1", 5), ("atm-155", 6), ("atm-25", 7), ("serial-wan-4port", 8), ("serial-wan-8port", 9), ("modem-4port", 10), ("modem-8port", 11), ("isdn-BRI-4port-ST", 12), ("isdn-BRI-4port-U", 13), ("isdn-voice-ST-FXO", 14), ("isdn-voice-ST-FXS", 15), ("isdn-voice-ST-EM", 16), ("isdn-voice-U-FXO", 17), ("isdn-voice-U-FXS", 18), ("isdn-voice-U-EM", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: platformFeatureSlot.setStatus('mandatory')
pppProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 1), )
if mibBuilder.loadTexts: pppProtocolTable.setStatus('mandatory')
pppProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 1, 1), ).setIndexNames((0, "IBMIROC-MIB", "pppProtocolIfIndex"), (0, "IBMIROC-MIB", "pppProtocolId"))
if mibBuilder.loadTexts: pppProtocolEntry.setStatus('mandatory')
pppProtocolIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppProtocolIfIndex.setStatus('mandatory')
pppProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("ip", 1), ("decnet", 2), ("ipx", 3), ("bridge", 4), ("appletalk", 5), ("osi", 6), ("appnhpr", 7), ("appnisr", 8), ("vines", 9), ("compression", 10), ("netbios", 11), ("netbios-forw", 12), ("bandwidth-allocation", 13), ("encryption", 14), ("ipv6", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppProtocolId.setStatus('mandatory')
pppProtocolRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppProtocolRegistered.setStatus('mandatory')
pppProtocolState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("closed", 1), ("listen", 2), ("requestSent", 3), ("ackReceived", 4), ("ackSent", 5), ("opened", 6), ("termSent", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppProtocolState.setStatus('mandatory')
pppProtocolPreviousState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("closed", 1), ("listen", 2), ("requestSent", 3), ("ackReceived", 4), ("ackSent", 5), ("opened", 6), ("termSent", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppProtocolPreviousState.setStatus('mandatory')
pppProtocolLastTimeChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppProtocolLastTimeChange.setStatus('mandatory')
pppProtocolCtlInRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppProtocolCtlInRejects.setStatus('mandatory')
pppProtocolCtlInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppProtocolCtlInOctets.setStatus('mandatory')
pppProtocolCtlInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppProtocolCtlInPkts.setStatus('mandatory')
pppProtocolCtlOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppProtocolCtlOutOctets.setStatus('mandatory')
pppProtocolCtlOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppProtocolCtlOutPkts.setStatus('mandatory')
pppProtocolDataInRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppProtocolDataInRejects.setStatus('mandatory')
pppProtocolDataInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppProtocolDataInOctets.setStatus('mandatory')
pppProtocolDataInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppProtocolDataInPkts.setStatus('mandatory')
pppProtocolDataOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppProtocolDataOutOctets.setStatus('mandatory')
pppProtocolDataOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppProtocolDataOutPkts.setStatus('mandatory')
pppLinkErrTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 2), )
if mibBuilder.loadTexts: pppLinkErrTable.setStatus('mandatory')
pppLinkErrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 2, 1), ).setIndexNames((0, "IBMIROC-MIB", "pppLinkErrIfIndex"))
if mibBuilder.loadTexts: pppLinkErrEntry.setStatus('mandatory')
pppLinkErrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkErrIfIndex.setStatus('mandatory')
pppLinkErrBadAddrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkErrBadAddrs.setStatus('mandatory')
pppLinkErrLastBadAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkErrLastBadAddr.setStatus('mandatory')
pppLinkErrBadCtrls = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkErrBadCtrls.setStatus('mandatory')
pppLinkErrLastBadCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkErrLastBadCtrl.setStatus('mandatory')
pppLinkErrUnkProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkErrUnkProtos.setStatus('mandatory')
pppLinkErrLastUnkProto = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkErrLastUnkProto.setStatus('mandatory')
pppLinkErrInvProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkErrInvProtos.setStatus('mandatory')
pppLinkErrLastInvProto = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkErrLastInvProto.setStatus('mandatory')
pppLinkErrConfigTOs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkErrConfigTOs.setStatus('mandatory')
pppLinkErrTermTOs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkErrTermTOs.setStatus('mandatory')
pppLCProtoTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3), )
if mibBuilder.loadTexts: pppLCProtoTable.setStatus('mandatory')
pppLCProtoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1), ).setIndexNames((0, "IBMIROC-MIB", "pppLCProtoIfIndex"))
if mibBuilder.loadTexts: pppLCProtoEntry.setStatus('mandatory')
pppLCProtoIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoIfIndex.setStatus('mandatory')
pppLCProtoState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("closed", 1), ("listen", 2), ("requestSent", 3), ("ackReceived", 4), ("ackSent", 5), ("opened", 6), ("termSent", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoState.setStatus('mandatory')
pppLCProtoPreviousState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("closed", 1), ("listen", 2), ("requestSent", 3), ("ackReceived", 4), ("ackSent", 5), ("opened", 6), ("termSent", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoPreviousState.setStatus('mandatory')
pppLCProtoLastTimeChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoLastTimeChange.setStatus('mandatory')
pppLCProtoOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoOutPackets.setStatus('mandatory')
pppLCProtoOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoOutOctets.setStatus('mandatory')
pppLCProtoOutCRs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoOutCRs.setStatus('mandatory')
pppLCProtoOutCAs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoOutCAs.setStatus('mandatory')
pppLCProtoOutCNs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoOutCNs.setStatus('mandatory')
pppLCProtoOutCRejs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoOutCRejs.setStatus('mandatory')
pppLCProtoOutTRs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoOutTRs.setStatus('mandatory')
pppLCProtoOutTAs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoOutTAs.setStatus('mandatory')
pppLCProtoOutCodeRejs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoOutCodeRejs.setStatus('mandatory')
pppLCProtoOutEchoReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoOutEchoReqs.setStatus('mandatory')
pppLCProtoOutEchoReps = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoOutEchoReps.setStatus('mandatory')
pppLCProtoOutDiscReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoOutDiscReqs.setStatus('mandatory')
pppLCProtoOutResetReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoOutResetReqs.setStatus('mandatory')
pppLCProtoOutResetAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoOutResetAcks.setStatus('mandatory')
pppLCProtoOutIdents = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoOutIdents.setStatus('mandatory')
pppLCProtoOutTimeRemains = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoOutTimeRemains.setStatus('mandatory')
pppLCProtoInRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoInRejects.setStatus('mandatory')
pppLCProtoInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoInPackets.setStatus('mandatory')
pppLCProtoInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoInOctets.setStatus('mandatory')
pppLCProtoInCRs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoInCRs.setStatus('mandatory')
pppLCProtoInCAs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoInCAs.setStatus('mandatory')
pppLCProtoInCNs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoInCNs.setStatus('mandatory')
pppLCProtoInCRejs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoInCRejs.setStatus('mandatory')
pppLCProtoInTRs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoInTRs.setStatus('mandatory')
pppLCProtoInTAs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoInTAs.setStatus('mandatory')
pppLCProtoInCodeRejs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoInCodeRejs.setStatus('mandatory')
pppLCProtoInEchoReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoInEchoReqs.setStatus('mandatory')
pppLCProtoInEchoReps = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoInEchoReps.setStatus('mandatory')
pppLCProtoInDiscReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoInDiscReqs.setStatus('mandatory')
pppLCProtoInResetReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoInResetReqs.setStatus('mandatory')
pppLCProtoInResetAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoInResetAcks.setStatus('mandatory')
pppLCProtoInIdents = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoInIdents.setStatus('mandatory')
pppLCProtoInTimeRemains = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 3, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLCProtoInTimeRemains.setStatus('mandatory')
pppPAPTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 4), )
if mibBuilder.loadTexts: pppPAPTable.setStatus('mandatory')
pppPAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 4, 1), ).setIndexNames((0, "IBMIROC-MIB", "pppPAPIfIndex"))
if mibBuilder.loadTexts: pppPAPEntry.setStatus('mandatory')
pppPAPIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppPAPIfIndex.setStatus('mandatory')
pppPAPInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppPAPInPackets.setStatus('mandatory')
pppPAPInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppPAPInOctets.setStatus('mandatory')
pppPAPInRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppPAPInRequests.setStatus('mandatory')
pppPAPInAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppPAPInAcks.setStatus('mandatory')
pppPAPInNacks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppPAPInNacks.setStatus('mandatory')
pppPAPOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppPAPOutPackets.setStatus('mandatory')
pppPAPOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppPAPOutOctets.setStatus('mandatory')
pppPAPOutRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppPAPOutRequests.setStatus('mandatory')
pppPAPOutAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppPAPOutAcks.setStatus('mandatory')
pppPAPOutNacks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppPAPOutNacks.setStatus('mandatory')
pppCHAPTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 5), )
if mibBuilder.loadTexts: pppCHAPTable.setStatus('mandatory')
pppCHAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 5, 1), ).setIndexNames((0, "IBMIROC-MIB", "pppCHAPIfIndex"))
if mibBuilder.loadTexts: pppCHAPEntry.setStatus('mandatory')
pppCHAPIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCHAPIfIndex.setStatus('mandatory')
pppCHAPInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCHAPInPackets.setStatus('mandatory')
pppCHAPInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCHAPInOctets.setStatus('mandatory')
pppCHAPInChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCHAPInChallenges.setStatus('mandatory')
pppCHAPInResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCHAPInResponses.setStatus('mandatory')
pppCHAPInSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCHAPInSuccesses.setStatus('mandatory')
pppCHAPInFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCHAPInFailures.setStatus('mandatory')
pppCHAPOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCHAPOutPackets.setStatus('mandatory')
pppCHAPOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCHAPOutOctets.setStatus('mandatory')
pppCHAPOutChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCHAPOutChallenges.setStatus('mandatory')
pppCHAPOutResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCHAPOutResponses.setStatus('mandatory')
pppCHAPOutSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCHAPOutSuccesses.setStatus('mandatory')
pppCHAPOutFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCHAPOutFailures.setStatus('mandatory')
pppSPAPTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6), )
if mibBuilder.loadTexts: pppSPAPTable.setStatus('mandatory')
pppSPAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6, 1), ).setIndexNames((0, "IBMIROC-MIB", "pppSPAPIfIndex"))
if mibBuilder.loadTexts: pppSPAPEntry.setStatus('mandatory')
pppSPAPIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSPAPIfIndex.setStatus('mandatory')
pppSPAPInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSPAPInPackets.setStatus('mandatory')
pppSPAPInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSPAPInOctets.setStatus('mandatory')
pppSPAPInRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSPAPInRequests.setStatus('mandatory')
pppSPAPInAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSPAPInAcks.setStatus('mandatory')
pppSPAPInNacks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSPAPInNacks.setStatus('mandatory')
pppSPAPInDialbacks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSPAPInDialbacks.setStatus('mandatory')
pppSPAPInPleaseAuthenticates = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSPAPInPleaseAuthenticates.setStatus('mandatory')
pppSPAPInChangePasswords = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSPAPInChangePasswords.setStatus('mandatory')
pppSPAPInAlerts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSPAPInAlerts.setStatus('mandatory')
pppSPAPInAlertAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSPAPInAlertAcks.setStatus('mandatory')
pppSPAPOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSPAPOutPackets.setStatus('mandatory')
pppSPAPOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSPAPOutOctets.setStatus('mandatory')
pppSPAPOutRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSPAPOutRequests.setStatus('mandatory')
pppSPAPOutAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSPAPOutAcks.setStatus('mandatory')
pppSPAPOutNacks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSPAPOutNacks.setStatus('mandatory')
pppSPAPOutDialbacks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSPAPOutDialbacks.setStatus('mandatory')
pppSPAPOutPleaseAuthenticates = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSPAPOutPleaseAuthenticates.setStatus('mandatory')
pppSPAPOutChangePasswords = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSPAPOutChangePasswords.setStatus('mandatory')
pppSPAPOutAlerts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSPAPOutAlerts.setStatus('mandatory')
pppSPAPOutAlertAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSPAPOutAlertAcks.setStatus('mandatory')
pppBAPTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7), )
if mibBuilder.loadTexts: pppBAPTable.setStatus('mandatory')
pppBAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1), ).setIndexNames((0, "IBMIROC-MIB", "pppBAPIfIndex"))
if mibBuilder.loadTexts: pppBAPEntry.setStatus('mandatory')
pppBAPIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPIfIndex.setStatus('mandatory')
pppBAPInCallReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPInCallReqs.setStatus('mandatory')
pppBAPInCallAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPInCallAcks.setStatus('mandatory')
pppBAPInCallNaks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPInCallNaks.setStatus('mandatory')
pppBAPInCallRejs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPInCallRejs.setStatus('mandatory')
pppBAPInCallBackReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPInCallBackReqs.setStatus('mandatory')
pppBAPInCallBackAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPInCallBackAcks.setStatus('mandatory')
pppBAPInCallBackNaks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPInCallBackNaks.setStatus('mandatory')
pppBAPInCallBackRejs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPInCallBackRejs.setStatus('mandatory')
pppBAPInDropReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPInDropReqs.setStatus('mandatory')
pppBAPInDropAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPInDropAcks.setStatus('mandatory')
pppBAPInDropNaks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPInDropNaks.setStatus('mandatory')
pppBAPInDropRejs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPInDropRejs.setStatus('mandatory')
pppBAPInStatSuccs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPInStatSuccs.setStatus('mandatory')
pppBAPInStatFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPInStatFails.setStatus('mandatory')
pppBAPOutCallReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPOutCallReqs.setStatus('mandatory')
pppBAPOutCallAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPOutCallAcks.setStatus('mandatory')
pppBAPOutCallNaks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPOutCallNaks.setStatus('mandatory')
pppBAPOutCallRejs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPOutCallRejs.setStatus('mandatory')
pppBAPOutCallBackReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPOutCallBackReqs.setStatus('mandatory')
pppBAPOutCallBackAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPOutCallBackAcks.setStatus('mandatory')
pppBAPOutCallBackNaks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPOutCallBackNaks.setStatus('mandatory')
pppBAPOutCallBackRejs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPOutCallBackRejs.setStatus('mandatory')
pppBAPOutDropReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPOutDropReqs.setStatus('mandatory')
pppBAPOutDropAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPOutDropAcks.setStatus('mandatory')
pppBAPOutDropNaks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPOutDropNaks.setStatus('mandatory')
pppBAPOutDropRejs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPOutDropRejs.setStatus('mandatory')
pppBAPOutStatSuccs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPOutStatSuccs.setStatus('mandatory')
pppBAPOutStatFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 7, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppBAPOutStatFails.setStatus('mandatory')
pppCPTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 8), )
if mibBuilder.loadTexts: pppCPTable.setStatus('mandatory')
pppCPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 8, 1), ).setIndexNames((0, "IBMIROC-MIB", "pppCPIfIndex"))
if mibBuilder.loadTexts: pppCPEntry.setStatus('mandatory')
pppCPIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCPIfIndex.setStatus('mandatory')
pppCPInCompressedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCPInCompressedOctets.setStatus('mandatory')
pppCPInInCompressablePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCPInInCompressablePkts.setStatus('mandatory')
pppCPInDestroyeds = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCPInDestroyeds.setStatus('mandatory')
pppCPInCopies = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCPInCopies.setStatus('mandatory')
pppCPOutCompressedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCPOutCompressedOctets.setStatus('mandatory')
pppCPOutInCompressablePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCPOutInCompressablePkts.setStatus('mandatory')
pppCPOutDestroyeds = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCPOutDestroyeds.setStatus('mandatory')
pppCPOutCopies = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCPOutCopies.setStatus('mandatory')
pppCCPInResetReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 8, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCCPInResetReqs.setStatus('mandatory')
pppCCPInResetAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 8, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCCPInResetAcks.setStatus('mandatory')
pppCCPInDictResets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 8, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCCPInDictResets.setStatus('mandatory')
pppCCPOutResetReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 8, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCCPOutResetReqs.setStatus('mandatory')
pppCCPOutResetAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 8, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCCPOutResetAcks.setStatus('mandatory')
pppCCPOutDictResets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 8, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCCPOutDictResets.setStatus('mandatory')
pppCCPPacketDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 8, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCCPPacketDiscards.setStatus('mandatory')
pppCCPOctetDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 8, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCCPOctetDiscards.setStatus('mandatory')
pppEPTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 9), )
if mibBuilder.loadTexts: pppEPTable.setStatus('mandatory')
pppEPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 9, 1), ).setIndexNames((0, "IBMIROC-MIB", "pppEPIfIndex"))
if mibBuilder.loadTexts: pppEPEntry.setStatus('mandatory')
pppEPIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppEPIfIndex.setStatus('mandatory')
pppEPInEncryptedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 9, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppEPInEncryptedOctets.setStatus('mandatory')
pppEPInDestroyeds = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppEPInDestroyeds.setStatus('mandatory')
pppEPInCopies = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppEPInCopies.setStatus('mandatory')
pppEPOutEncryptedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppEPOutEncryptedOctets.setStatus('mandatory')
pppEPOutDestroyeds = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppEPOutDestroyeds.setStatus('mandatory')
pppEPOutCopies = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppEPOutCopies.setStatus('mandatory')
pppECPInResetReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppECPInResetReqs.setStatus('mandatory')
pppECPInResetAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 9, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppECPInResetAcks.setStatus('mandatory')
pppECPInDictResets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 9, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppECPInDictResets.setStatus('mandatory')
pppECPOutResetReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 9, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppECPOutResetReqs.setStatus('mandatory')
pppECPOutResetAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 9, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppECPOutResetAcks.setStatus('mandatory')
pppECPOutDictResets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 9, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppECPOutDictResets.setStatus('mandatory')
pppECPPacketDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 9, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppECPPacketDiscards.setStatus('mandatory')
pppECPOctetDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 9, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppECPOctetDiscards.setStatus('mandatory')
pppMSCHAPTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10), )
if mibBuilder.loadTexts: pppMSCHAPTable.setStatus('mandatory')
pppMSCHAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1), ).setIndexNames((0, "IBMIROC-MIB", "pppMSCHAPIfIndex"))
if mibBuilder.loadTexts: pppMSCHAPEntry.setStatus('mandatory')
pppMSCHAPIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPIfIndex.setStatus('mandatory')
pppMSCHAPInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPInPackets.setStatus('mandatory')
pppMSCHAPInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPInOctets.setStatus('mandatory')
pppMSCHAPInChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPInChallenges.setStatus('mandatory')
pppMSCHAPInResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPInResponses.setStatus('mandatory')
pppMSCHAPInSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPInSuccesses.setStatus('mandatory')
pppMSCHAPInFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPInFailures.setStatus('mandatory')
pppMSCHAPInChangePasswords = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPInChangePasswords.setStatus('mandatory')
pppMSCHAPInRestrictedHoursFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPInRestrictedHoursFailures.setStatus('mandatory')
pppMSCHAPInAccountDisabledFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPInAccountDisabledFailures.setStatus('mandatory')
pppMSCHAPInPasswordExpiredFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPInPasswordExpiredFailures.setStatus('mandatory')
pppMSCHAPInNoPermissionFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPInNoPermissionFailures.setStatus('mandatory')
pppMSCHAPInAuthenticationFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPInAuthenticationFailures.setStatus('mandatory')
pppMSCHAPInChangePasswordFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPInChangePasswordFailures.setStatus('mandatory')
pppMSCHAPOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPOutPackets.setStatus('mandatory')
pppMSCHAPOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPOutOctets.setStatus('mandatory')
pppMSCHAPOutChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPOutChallenges.setStatus('mandatory')
pppMSCHAPOutResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPOutResponses.setStatus('mandatory')
pppMSCHAPOutSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPOutSuccesses.setStatus('mandatory')
pppMSCHAPOutFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPOutFailures.setStatus('mandatory')
pppMSCHAPOutChangePasswords = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPOutChangePasswords.setStatus('mandatory')
pppMSCHAPOutRestrictedHoursFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPOutRestrictedHoursFailures.setStatus('mandatory')
pppMSCHAPOutAccountDisabledFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPOutAccountDisabledFailures.setStatus('mandatory')
pppMSCHAPOutPasswordExpiredFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPOutPasswordExpiredFailures.setStatus('mandatory')
pppMSCHAPOutNoPermissionFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPOutNoPermissionFailures.setStatus('mandatory')
pppMSCHAPOutAuthenticationFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPOutAuthenticationFailures.setStatus('mandatory')
pppMSCHAPOutChangePasswordFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 10, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMSCHAPOutChangePasswordFailures.setStatus('mandatory')
pppCBCPTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 11), )
if mibBuilder.loadTexts: pppCBCPTable.setStatus('mandatory')
pppCBCPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 11, 1), ).setIndexNames((0, "IBMIROC-MIB", "pppCBCPIfIndex"))
if mibBuilder.loadTexts: pppCBCPEntry.setStatus('mandatory')
pppCBCPIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCBCPIfIndex.setStatus('mandatory')
pppCBCPInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCBCPInPackets.setStatus('mandatory')
pppCBCPInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCBCPInOctets.setStatus('mandatory')
pppCBCPOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCBCPOutPackets.setStatus('mandatory')
pppCBCPOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCBCPOutOctets.setStatus('mandatory')
pppCBCPAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCBCPAttempts.setStatus('mandatory')
pppCBCPSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppCBCPSuccess.setStatus('mandatory')
pppEAPTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 12), )
if mibBuilder.loadTexts: pppEAPTable.setStatus('mandatory')
pppEAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 12, 1), ).setIndexNames((0, "IBMIROC-MIB", "pppEAPIfIndex"))
if mibBuilder.loadTexts: pppEAPEntry.setStatus('mandatory')
pppEAPIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppEAPIfIndex.setStatus('mandatory')
pppEAPInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppEAPInPackets.setStatus('mandatory')
pppEAPInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppEAPInOctets.setStatus('mandatory')
pppEAPInRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppEAPInRequests.setStatus('mandatory')
pppEAPInAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppEAPInAcks.setStatus('mandatory')
pppEAPInNaks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 12, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppEAPInNaks.setStatus('mandatory')
pppEAPOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 12, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppEAPOutPackets.setStatus('mandatory')
pppEAPOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppEAPOutOctets.setStatus('mandatory')
pppEAPOutRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 12, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppEAPOutRequests.setStatus('mandatory')
pppEAPOutAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 12, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppEAPOutAcks.setStatus('mandatory')
pppEAPOutNaks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 12, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppEAPOutNaks.setStatus('mandatory')
pppMPPETable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 13), )
if mibBuilder.loadTexts: pppMPPETable.setStatus('mandatory')
pppMPPEEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 13, 1), ).setIndexNames((0, "IBMIROC-MIB", "pppMPPEIfIndex"))
if mibBuilder.loadTexts: pppMPPEEntry.setStatus('mandatory')
pppMPPEIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMPPEIfIndex.setStatus('mandatory')
pppMPPEInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMPPEInPackets.setStatus('mandatory')
pppMPPEInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMPPEInOctets.setStatus('mandatory')
pppMPPEInDestroyed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMPPEInDestroyed.setStatus('mandatory')
pppMPPEOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMPPEOutPackets.setStatus('mandatory')
pppMPPEOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMPPEOutOctets.setStatus('mandatory')
pppMPPEOutDestroyed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 2, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppMPPEOutDestroyed.setStatus('mandatory')
ibmdlswTConnGroupOperTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 1), )
if mibBuilder.loadTexts: ibmdlswTConnGroupOperTable.setStatus('mandatory')
ibmdlswTConnGroupOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 1, 1), ).setIndexNames((0, "IBMIROC-MIB", "ibmdlswTConnGroupOperIndex"))
if mibBuilder.loadTexts: ibmdlswTConnGroupOperEntry.setStatus('mandatory')
ibmdlswTConnGroupOperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswTConnGroupOperIndex.setStatus('mandatory')
ibmdlswTConnGroupOperRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("peer", 1), ("client", 2), ("server", 3), ("readonly", 4), ("writeonly", 5), ("readwrite", 6), ("other", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswTConnGroupOperRole.setStatus('mandatory')
ibmdlswTConnGroupOperJoinTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswTConnGroupOperJoinTime.setStatus('mandatory')
ibmdlswTConnGroupOperConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswTConnGroupOperConfigIndex.setStatus('mandatory')
ibmdlswTConnGroupOperInDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswTConnGroupOperInDataPkts.setStatus('mandatory')
ibmdlswTConnGroupOperOutDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswTConnGroupOperOutDataPkts.setStatus('mandatory')
ibmdlswTConnGroupOperInDataOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswTConnGroupOperInDataOctets.setStatus('mandatory')
ibmdlswTConnGroupOperOutDataOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswTConnGroupOperOutDataOctets.setStatus('mandatory')
ibmdlswTConnGroupOperInCntlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswTConnGroupOperInCntlPkts.setStatus('mandatory')
ibmdlswTConnGroupOperOutCntlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswTConnGroupOperOutCntlPkts.setStatus('mandatory')
ibmdlswTConnGroupOperCURexSents = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswTConnGroupOperCURexSents.setStatus('mandatory')
ibmdlswTConnGroupOperICRexRcvds = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswTConnGroupOperICRexRcvds.setStatus('mandatory')
ibmdlswTConnGroupOperCURexRcvds = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswTConnGroupOperCURexRcvds.setStatus('mandatory')
ibmdlswTConnGroupOperICRexSents = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswTConnGroupOperICRexSents.setStatus('mandatory')
ibmdlswTConnGroupOperNQexSents = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswTConnGroupOperNQexSents.setStatus('mandatory')
ibmdlswTConnGroupOperNRexRcvds = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswTConnGroupOperNRexRcvds.setStatus('mandatory')
ibmdlswTConnGroupOperNQexRcvds = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswTConnGroupOperNQexRcvds.setStatus('mandatory')
ibmdlswTConnGroupOperNRexSents = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswTConnGroupOperNRexSents.setStatus('mandatory')
ibmdlswQllcLsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 2), )
if mibBuilder.loadTexts: ibmdlswQllcLsTable.setStatus('mandatory')
ibmdlswQllcLsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 2, 1), ).setIndexNames((0, "IBMIROC-MIB", "ibmdlswQllcLsIfIndex"), (0, "IBMIROC-MIB", "ibmdlswQllcLsQdomain"), (0, "IBMIROC-MIB", "ibmdlswQllcLsQaddress"))
if mibBuilder.loadTexts: ibmdlswQllcLsEntry.setStatus('mandatory')
ibmdlswQllcLsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswQllcLsIfIndex.setStatus('mandatory')
ibmdlswQllcLsQdomain = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pvc", 1), ("svc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswQllcLsQdomain.setStatus('mandatory')
ibmdlswQllcLsQaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmdlswQllcLsQaddress.setStatus('mandatory')
ibmdlswQllcLsChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswQllcLsChannel.setStatus('mandatory')
ibmdlswQllcLsLocalMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 2, 1, 5), MacAddressNCIROC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswQllcLsLocalMac.setStatus('mandatory')
ibmdlswQllcLsLocalSap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswQllcLsLocalSap.setStatus('mandatory')
ibmdlswQllcLsRemoteMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 2, 1, 7), MacAddressNCIROC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswQllcLsRemoteMac.setStatus('mandatory')
ibmdlswQllcLsRemoteSap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 2, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswQllcLsRemoteSap.setStatus('mandatory')
ibmdlswQllcLsPuType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6))).clone(namedValues=NamedValues(("type1", 1), ("type2", 2), ("type4", 4), ("type5", 5), ("other", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswQllcLsPuType.setStatus('mandatory')
ibmdlswQllcLsBlkNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswQllcLsBlkNum.setStatus('mandatory')
ibmdlswQllcLsIdNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 3, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmdlswQllcLsIdNum.setStatus('mandatory')
frCLLMStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 1), )
if mibBuilder.loadTexts: frCLLMStatsTable.setStatus('mandatory')
frCLLMStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 1, 1), ).setIndexNames((0, "IBMIROC-MIB", "frCLLMStatsIfIndex"), (0, "IBMIROC-MIB", "frCLLMStatsDlci"))
if mibBuilder.loadTexts: frCLLMStatsEntry.setStatus('mandatory')
frCLLMStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCLLMStatsIfIndex.setStatus('mandatory')
frCLLMStatsDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCLLMStatsDlci.setStatus('mandatory')
frCLLMStatsRcvds = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCLLMStatsRcvds.setStatus('mandatory')
frCLLMCauseTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 2), )
if mibBuilder.loadTexts: frCLLMCauseTable.setStatus('mandatory')
frCLLMCauseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 2, 1), ).setIndexNames((0, "IBMIROC-MIB", "frCLLMCauseIfIndex"))
if mibBuilder.loadTexts: frCLLMCauseEntry.setStatus('mandatory')
frCLLMCauseIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCLLMCauseIfIndex.setStatus('mandatory')
frCLLMCauseCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCLLMCauseCode.setStatus('mandatory')
frSimpleObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 3))
frCLLMDlciList = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCLLMDlciList.setStatus('mandatory')
frTrapStateFECN = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frTrapStateFECN.setStatus('mandatory')
frTrapStateBECN = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frTrapStateBECN.setStatus('mandatory')
frTrapStateCLLM = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frTrapStateCLLM.setStatus('mandatory')
ibmIROCfrBRS = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 4))
ibmIROCfrcircuit = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 4, 5))
tcpiprouteTabSize = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 20, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpiprouteTabSize.setStatus('mandatory')
tcpiprouteTabUsed = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 20, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpiprouteTabUsed.setStatus('mandatory')
tcpiprouteCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 20, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpiprouteCacheSize.setStatus('mandatory')
tcpiprouteCacheUsed = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 20, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpiprouteCacheUsed.setStatus('mandatory')
tcpiprouteOverFlow = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 20, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpiprouteOverFlow.setStatus('mandatory')
tcpiprouteNoReach = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 20, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpiprouteNoReach.setStatus('mandatory')
tcpiprouteBadSubnet = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 20, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpiprouteBadSubnet.setStatus('mandatory')
tcpiprouteBadNet = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 20, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpiprouteBadNet.setStatus('mandatory')
tcpiprouteUnhBcast = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 20, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpiprouteUnhBcast.setStatus('mandatory')
tcpiprouteUnhMcast = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 20, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpiprouteUnhMcast.setStatus('mandatory')
tcpiprouteUnhDirBcast = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 20, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpiprouteUnhDirBcast.setStatus('mandatory')
tcpiprouteUnhLLbcast = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 20, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpiprouteUnhLLbcast.setStatus('mandatory')
tcpiprouteDiscFilt = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 20, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpiprouteDiscFilt.setStatus('mandatory')
tcpiprouteMultRcvd = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 20, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpiprouteMultRcvd.setStatus('mandatory')
tcpCurrConnections = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 20, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpCurrConnections.setStatus('mandatory')
tcpMaxConnections = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 20, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpMaxConnections.setStatus('mandatory')
serverCurrConnections = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 20, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCurrConnections.setStatus('mandatory')
serverMaxConnections = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 20, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverMaxConnections.setStatus('mandatory')
ibmIROCtrapsfr = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 6, 1))
frrcvdFECN = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 119, 6, 1) + (0,1)).setObjects(("RFC1315-MIB", "frCircuitIfIndex"), ("RFC1315-MIB", "frCircuitDlci"))
frrcvdBECN = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 119, 6, 1) + (0,2)).setObjects(("RFC1315-MIB", "frCircuitIfIndex"), ("RFC1315-MIB", "frCircuitDlci"))
frrcvdCLLM = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 119, 6, 1) + (0,3)).setObjects(("IBMIROC-MIB", "frCLLMCauseIfIndex"), ("IBMIROC-MIB", "frCLLMCauseCode"), ("IBMIROC-MIB", "frCLLMDlciList"))
ibmIROCtrapssys = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 6, 2))
mosMemLow = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 119, 6, 2) + (0,1)).setObjects(("PROTEON-MIB", "proResMemHeapTotal"), ("PROTEON-MIB", "proResMemHeapNeverAlloc"))
ibmIROCtrapsels = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 6, 3))
elsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 119, 6, 3) + (0,2)).setObjects(("PROTEON-MIB", "proElsSubSysEventMsg"))
mibBuilder.exportSymbols("IBMIROC-MIB", pppLCProtoInResetAcks=pppLCProtoInResetAcks, ibmProd=ibmProd, ibmIROCswhw=ibmIROCswhw, pppCBCPInOctets=pppCBCPInOctets, pppECPOutResetAcks=pppECPOutResetAcks, ibmIROCroutingIpSec=ibmIROCroutingIpSec, pppPAPOutNacks=pppPAPOutNacks, pppBAPEntry=pppBAPEntry, tcpiprouteCacheUsed=tcpiprouteCacheUsed, pppCBCPTable=pppCBCPTable, pppCCPPacketDiscards=pppCCPPacketDiscards, ibmIROCroutingtn3270e=ibmIROCroutingtn3270e, ibmIROCfrBRS=ibmIROCfrBRS, ibmdlswQllcLsBlkNum=ibmdlswQllcLsBlkNum, pppEAPEntry=pppEAPEntry, frCLLMStatsRcvds=frCLLMStatsRcvds, pppProtocolDataOutOctets=pppProtocolDataOutOctets, pppEPTable=pppEPTable, pppMSCHAPInAccountDisabledFailures=pppMSCHAPInAccountDisabledFailures, pppBAPOutCallReqs=pppBAPOutCallReqs, ibmIROCAgentDebug=ibmIROCAgentDebug, ibmSysDumpBuilder=ibmSysDumpBuilder, ibmdlswQllcLsQdomain=ibmdlswQllcLsQdomain, pppMSCHAPInNoPermissionFailures=pppMSCHAPInNoPermissionFailures, pppBAPOutDropRejs=pppBAPOutDropRejs, frCLLMCauseIfIndex=frCLLMCauseIfIndex, pppECPInDictResets=pppECPInDictResets, pppProtocolDataInRejects=pppProtocolDataInRejects, pppProtocolCtlOutPkts=pppProtocolCtlOutPkts, ibmCacheServer=ibmCacheServer, pppLCProtoIfIndex=pppLCProtoIfIndex, ibmSysDumpFatalMsg5=ibmSysDumpFatalMsg5, pppLCProtoInResetReqs=pppLCProtoInResetReqs, ibmdlswQllcLsRemoteMac=ibmdlswQllcLsRemoteMac, ibmIROCadminSnmp=ibmIROCadminSnmp, tcpiprouteMultRcvd=tcpiprouteMultRcvd, pppLCProtoOutCAs=pppLCProtoOutCAs, pppProtocolDataOutPkts=pppProtocolDataOutPkts, pppMSCHAPInSuccesses=pppMSCHAPInSuccesses, ibmdlswQllcLsPuType=ibmdlswQllcLsPuType, ibmIROCswitching=ibmIROCswitching, ibmdlswTConnGroupOperOutDataOctets=ibmdlswTConnGroupOperOutDataOctets, ibmSysDumpFatalMsg3=ibmSysDumpFatalMsg3, pppPAPInOctets=pppPAPInOctets, pppCHAPInOctets=pppCHAPInOctets, pppSPAPTable=pppSPAPTable, ibmdlswTConnGroupOperIndex=ibmdlswTConnGroupOperIndex, ibmSysDumpEntry=ibmSysDumpEntry, ibmdlswQllcLsLocalMac=ibmdlswQllcLsLocalMac, ibmdlswTConnGroupOperInDataPkts=ibmdlswTConnGroupOperInDataPkts, pppPAPOutOctets=pppPAPOutOctets, ibmSysDumpRemotePath=ibmSysDumpRemotePath, pppLCProtoOutCRejs=pppLCProtoOutCRejs, agentMemUse=agentMemUse, ibmIROCadmin=ibmIROCadmin, pppBAPInStatSuccs=pppBAPInStatSuccs, ibmIROCtraps=ibmIROCtraps, pppLCProtoOutResetReqs=pppLCProtoOutResetReqs, pppMSCHAPTable=pppMSCHAPTable, ibmIROCdumpInfo=ibmIROCdumpInfo, ibmdlswQllcLsEntry=ibmdlswQllcLsEntry, pppLCProtoInEchoReps=pppLCProtoInEchoReps, ibmdlswTConnGroupOperICRexSents=ibmdlswTConnGroupOperICRexSents, ibmIROCescon=ibmIROCescon, ibmSysDumpFatalMsg4=ibmSysDumpFatalMsg4, tcpiprouteDiscFilt=tcpiprouteDiscFilt, pppBAPInCallRejs=pppBAPInCallRejs, pppMSCHAPOutChangePasswords=pppMSCHAPOutChangePasswords, platformFeatureSlot=platformFeatureSlot, pppMSCHAPOutFailures=pppMSCHAPOutFailures, pppMSCHAPOutAccountDisabledFailures=pppMSCHAPOutAccountDisabledFailures, pppLCProtoInOctets=pppLCProtoInOctets, pppBAPInCallBackAcks=pppBAPInCallBackAcks, platformFLASHSize=platformFLASHSize, pppSPAPInRequests=pppSPAPInRequests, pppPAPIfIndex=pppPAPIfIndex, ibmIROCtrapsfr=ibmIROCtrapsfr, tcpiprouteTabUsed=tcpiprouteTabUsed, pppEPOutDestroyeds=pppEPOutDestroyeds, pppSPAPOutDialbacks=pppSPAPOutDialbacks, authTrapSourceIPAddr=authTrapSourceIPAddr, pppSPAPOutChangePasswords=pppSPAPOutChangePasswords, ibmIROCconfigWrite=ibmIROCconfigWrite, pppCHAPOutSuccesses=pppCHAPOutSuccesses, pppMPPEInOctets=pppMPPEInOctets, pppBAPOutCallBackNaks=pppBAPOutCallBackNaks, ibmSysDumpIndex=ibmSysDumpIndex, pppBAPOutCallNaks=pppBAPOutCallNaks, tcpiprouteUnhBcast=tcpiprouteUnhBcast, pppBAPInCallBackNaks=pppBAPInCallBackNaks, pppLCProtoState=pppLCProtoState, pppCCPOutResetReqs=pppCCPOutResetReqs, pppLCProtoEntry=pppLCProtoEntry, ibmIROCtrapssys=ibmIROCtrapssys, ibmdlswTConnGroupOperEntry=ibmdlswTConnGroupOperEntry, ibmIROCadminOID=ibmIROCadminOID, pppLinkErrConfigTOs=pppLinkErrConfigTOs, ibmdlswTConnGroupOperRole=ibmdlswTConnGroupOperRole, pppLCProtoTable=pppLCProtoTable, pppLCProtoPreviousState=pppLCProtoPreviousState, ibmWanRestoralRerouteMIB=ibmWanRestoralRerouteMIB, frCLLMCauseCode=frCLLMCauseCode, pppLCProtoOutCRs=pppLCProtoOutCRs, pppMPPEIfIndex=pppMPPEIfIndex, pppEAPOutNaks=pppEAPOutNaks, pppLCProtoOutTRs=pppLCProtoOutTRs, pppBAPOutCallAcks=pppBAPOutCallAcks, pppLCProtoOutResetAcks=pppLCProtoOutResetAcks, pppLCProtoInTimeRemains=pppLCProtoInTimeRemains, frrcvdCLLM=frrcvdCLLM, pppCCPOutDictResets=pppCCPOutDictResets, pppBAPIfIndex=pppBAPIfIndex, pppECPPacketDiscards=pppECPPacketDiscards, pppProtocolTable=pppProtocolTable, pppSPAPIfIndex=pppSPAPIfIndex, pppSPAPEntry=pppSPAPEntry, pppProtocolPreviousState=pppProtocolPreviousState, pppMPPEInPackets=pppMPPEInPackets, pppLCProtoInTRs=pppLCProtoInTRs, ibmIROCroutingdlsw=ibmIROCroutingdlsw, pppMPPEInDestroyed=pppMPPEInDestroyed, pppEPOutEncryptedOctets=pppEPOutEncryptedOctets, pppCPInInCompressablePkts=pppCPInInCompressablePkts, pppMPPEOutPackets=pppMPPEOutPackets, serverMaxConnections=serverMaxConnections, pppCPIfIndex=pppCPIfIndex, pppMSCHAPOutOctets=pppMSCHAPOutOctets, pppSPAPInDialbacks=pppSPAPInDialbacks, pppProtocolDataInPkts=pppProtocolDataInPkts, frCLLMCauseTable=frCLLMCauseTable, pppCPInCopies=pppCPInCopies, pppCBCPOutOctets=pppCBCPOutOctets, pppSPAPInAlertAcks=pppSPAPInAlertAcks, pppBAPOutCallBackReqs=pppBAPOutCallBackReqs, platformType=platformType, pppLinkErrInvProtos=pppLinkErrInvProtos, pppCBCPEntry=pppCBCPEntry, pppEPOutCopies=pppEPOutCopies, pppMSCHAPOutPackets=pppMSCHAPOutPackets, ibmSysDumpBuildDate=ibmSysDumpBuildDate, tcpiprouteBadSubnet=tcpiprouteBadSubnet, pppMSCHAPOutSuccesses=pppMSCHAPOutSuccesses, pppSPAPInOctets=pppSPAPInOctets, pppBAPOutDropReqs=pppBAPOutDropReqs, pppEAPOutPackets=pppEAPOutPackets, ibmIROCtrapsels=ibmIROCtrapsels, pppCPOutCompressedOctets=pppCPOutCompressedOctets, MacAddressNCIROC=MacAddressNCIROC, tcpiprouteBadNet=tcpiprouteBadNet, pppLCProtoLastTimeChange=pppLCProtoLastTimeChange, pppBAPOutStatSuccs=pppBAPOutStatSuccs, pppLinkErrIfIndex=pppLinkErrIfIndex, ibmIROCroutingRlan=ibmIROCroutingRlan, ibmIROCroutingvoice=ibmIROCroutingvoice, pppProtocolCtlInOctets=pppProtocolCtlInOctets, pppCHAPOutOctets=pppCHAPOutOctets, pppProtocolState=pppProtocolState, ibmdlswTConnGroupOperOutDataPkts=ibmdlswTConnGroupOperOutDataPkts, pppLCProtoOutIdents=pppLCProtoOutIdents, pppBAPInDropNaks=pppBAPInDropNaks, pppBAPOutCallBackRejs=pppBAPOutCallBackRejs, pppCHAPOutFailures=pppCHAPOutFailures, pppMSCHAPIfIndex=pppMSCHAPIfIndex, ibmIROCroutingfr=ibmIROCroutingfr, frCLLMStatsDlci=frCLLMStatsDlci, pppCBCPIfIndex=pppCBCPIfIndex, pppCCPOutResetAcks=pppCCPOutResetAcks, frCLLMDlciList=frCLLMDlciList, platformNVRAMSize=platformNVRAMSize, pppECPOutDictResets=pppECPOutDictResets, ibmdlswQllcLsTable=ibmdlswQllcLsTable, ibmIROCroutingppp=ibmIROCroutingppp, pppLCProtoInCAs=pppLCProtoInCAs, pppLinkErrTable=pppLinkErrTable, pppBAPInCallReqs=pppBAPInCallReqs, pppBAPInDropRejs=pppBAPInDropRejs, pppSPAPInPackets=pppSPAPInPackets, pppEAPOutAcks=pppEAPOutAcks, pppPAPInPackets=pppPAPInPackets, ibmSysDumpProductNumber=ibmSysDumpProductNumber, pppMSCHAPOutChallenges=pppMSCHAPOutChallenges, pppBAPInCallNaks=pppBAPInCallNaks, pppProtocolRegistered=pppProtocolRegistered, ibmIROCroutinginterface=ibmIROCroutinginterface, pppEAPInPackets=pppEAPInPackets, frCLLMStatsTable=frCLLMStatsTable, pppPAPInAcks=pppPAPInAcks, pppLCProtoInIdents=pppLCProtoInIdents, pppCPOutCopies=pppCPOutCopies, pppSPAPInNacks=pppSPAPInNacks, pppSPAPInAlerts=pppSPAPInAlerts, pppECPInResetReqs=pppECPInResetReqs, pppLCProtoInCodeRejs=pppLCProtoInCodeRejs, ibmSysDumpFatalMsg2=ibmSysDumpFatalMsg2, tcpCurrConnections=tcpCurrConnections, ibmdlswQllcLsChannel=ibmdlswQllcLsChannel, pppCBCPSuccess=pppCBCPSuccess, ibmdlswTConnGroupOperTable=ibmdlswTConnGroupOperTable, ibmSysDumpFatalMsg1=ibmSysDumpFatalMsg1, pppSPAPOutAlertAcks=pppSPAPOutAlertAcks, ibm=ibm, pppCPOutDestroyeds=pppCPOutDestroyeds, pppProtocolCtlInRejects=pppProtocolCtlInRejects, pppProtocolDataInOctets=pppProtocolDataInOctets, pppEPInDestroyeds=pppEPInDestroyeds, pppEAPOutRequests=pppEAPOutRequests, platformDRAMSize=platformDRAMSize, pppMSCHAPInAuthenticationFailures=pppMSCHAPInAuthenticationFailures, ibmdlswTConnGroupOperInDataOctets=ibmdlswTConnGroupOperInDataOctets, pppMSCHAPOutPasswordExpiredFailures=pppMSCHAPOutPasswordExpiredFailures, elsTrap=elsTrap, ibmdlswTConnGroupOperJoinTime=ibmdlswTConnGroupOperJoinTime, pppCHAPInResponses=pppCHAPInResponses, tcpiprouteOverFlow=tcpiprouteOverFlow, pppBAPTable=pppBAPTable, ibmIROCrmon=ibmIROCrmon, ibmdlswQllcLsLocalSap=ibmdlswQllcLsLocalSap, ibmdlswTConnGroupOperNQexRcvds=ibmdlswTConnGroupOperNQexRcvds, pppLinkErrBadAddrs=pppLinkErrBadAddrs, pppLCProtoOutOctets=pppLCProtoOutOctets, pppCHAPInPackets=pppCHAPInPackets, ibmSysDumpBuild=ibmSysDumpBuild, pppPAPOutPackets=pppPAPOutPackets, pppMSCHAPEntry=pppMSCHAPEntry, ibmIROCfrcircuit=ibmIROCfrcircuit, pppLCProtoInDiscReqs=pppLCProtoInDiscReqs, pppSPAPInChangePasswords=pppSPAPInChangePasswords, pppCHAPInFailures=pppCHAPInFailures, pppBAPInCallBackReqs=pppBAPInCallBackReqs, ibmdlswQllcLsIfIndex=ibmdlswQllcLsIfIndex, pppEAPInNaks=pppEAPInNaks, pppEPInCopies=pppEPInCopies, ibmIROC=ibmIROC, ibmdlswTConnGroupOperInCntlPkts=ibmdlswTConnGroupOperInCntlPkts, pppBAPInDropAcks=pppBAPInDropAcks, pppPAPInRequests=pppPAPInRequests, pppCPTable=pppCPTable, ibmIROChardware=ibmIROChardware, ibmSysDumpFileName=ibmSysDumpFileName, pppBAPOutStatFails=pppBAPOutStatFails, ibmIROCrouting=ibmIROCrouting, pppLCProtoInCRejs=pppLCProtoInCRejs, pppBAPInStatFails=pppBAPInStatFails, ibmIROCconfig=ibmIROCconfig, pppCPInCompressedOctets=pppCPInCompressedOctets, pppMSCHAPInChallenges=pppMSCHAPInChallenges, pppSPAPOutNacks=pppSPAPOutNacks, pppBAPOutCallBackAcks=pppBAPOutCallBackAcks, pppCHAPOutResponses=pppCHAPOutResponses, pppEAPInRequests=pppEAPInRequests, pppCCPOctetDiscards=pppCCPOctetDiscards, pppLinkErrLastInvProto=pppLinkErrLastInvProto, pppMSCHAPInPasswordExpiredFailures=pppMSCHAPInPasswordExpiredFailures, frTrapStateFECN=frTrapStateFECN)
mibBuilder.exportSymbols("IBMIROC-MIB", ibmIROCSnmpAuthFail=ibmIROCSnmpAuthFail, tcpiprouteUnhLLbcast=tcpiprouteUnhLLbcast, pppCBCPInPackets=pppCBCPInPackets, ibmIROCadminDebug=ibmIROCadminDebug, ibmdlswQllcLsIdNum=ibmdlswQllcLsIdNum, pppMSCHAPOutNoPermissionFailures=pppMSCHAPOutNoPermissionFailures, ibmIROChardwareInfo=ibmIROChardwareInfo, pppMPPETable=pppMPPETable, pppBAPOutDropNaks=pppBAPOutDropNaks, pppMSCHAPInPackets=pppMSCHAPInPackets, pppMSCHAPInRestrictedHoursFailures=pppMSCHAPInRestrictedHoursFailures, ibmIROCsystemInfo=ibmIROCsystemInfo, pppCCPInDictResets=pppCCPInDictResets, mosMemLow=mosMemLow, pppMSCHAPInChangePasswords=pppMSCHAPInChangePasswords, pppMSCHAPOutResponses=pppMSCHAPOutResponses, ibmdlswTConnGroupOperCURexSents=ibmdlswTConnGroupOperCURexSents, pppLinkErrLastBadAddr=pppLinkErrLastBadAddr, tcpMaxConnections=tcpMaxConnections, pppEPIfIndex=pppEPIfIndex, ibmSysDumpRemoteIPAddr=ibmSysDumpRemoteIPAddr, tcpiprouteTabSize=tcpiprouteTabSize, pppProtocolEntry=pppProtocolEntry, pppLCProtoOutTAs=pppLCProtoOutTAs, pppSPAPOutAlerts=pppSPAPOutAlerts, ibmIROCadminproducts=ibmIROCadminproducts, ibmdlswQllcLsQaddress=ibmdlswQllcLsQaddress, ibmSysDumpTable=ibmSysDumpTable, pppProtocolLastTimeChange=pppProtocolLastTimeChange, frCLLMStatsEntry=frCLLMStatsEntry, pppCBCPAttempts=pppCBCPAttempts, pppPAPInNacks=pppPAPInNacks, pppMSCHAPInOctets=pppMSCHAPInOctets, pppLinkErrLastBadCtrl=pppLinkErrLastBadCtrl, pppProtocolIfIndex=pppProtocolIfIndex, pppEAPInOctets=pppEAPInOctets, pppECPOctetDiscards=pppECPOctetDiscards, pppSPAPOutOctets=pppSPAPOutOctets, tcpiprouteCacheSize=tcpiprouteCacheSize, tcpiprouteUnhDirBcast=tcpiprouteUnhDirBcast, pppLCProtoOutEchoReqs=pppLCProtoOutEchoReqs, pppSPAPInAcks=pppSPAPInAcks, frCLLMStatsIfIndex=frCLLMStatsIfIndex, pppSPAPOutAcks=pppSPAPOutAcks, pppLinkErrEntry=pppLinkErrEntry, ibmIROCconfigAuth=ibmIROCconfigAuth, pppProtocolId=pppProtocolId, pppCCPInResetAcks=pppCCPInResetAcks, pppMSCHAPInChangePasswordFailures=pppMSCHAPInChangePasswordFailures, pppLCProtoOutPackets=pppLCProtoOutPackets, pppPAPEntry=pppPAPEntry, pppLCProtoOutDiscReqs=pppLCProtoOutDiscReqs, pppCHAPInChallenges=pppCHAPInChallenges, pppProtocolCtlOutOctets=pppProtocolCtlOutOctets, pppSPAPOutRequests=pppSPAPOutRequests, pppSPAPInPleaseAuthenticates=pppSPAPInPleaseAuthenticates, pppLCProtoOutCodeRejs=pppLCProtoOutCodeRejs, pppEAPInAcks=pppEAPInAcks, pppLCProtoOutCNs=pppLCProtoOutCNs, pppLinkErrUnkProtos=pppLinkErrUnkProtos, pppEAPOutOctets=pppEAPOutOctets, tcpiprouteUnhMcast=tcpiprouteUnhMcast, ibmdlswTConnGroupOperOutCntlPkts=ibmdlswTConnGroupOperOutCntlPkts, frrcvdBECN=frrcvdBECN, pppLCProtoInTAs=pppLCProtoInTAs, ibmdlswTConnGroupOperNQexSents=ibmdlswTConnGroupOperNQexSents, pppCHAPInSuccesses=pppCHAPInSuccesses, frCLLMCauseEntry=frCLLMCauseEntry, pppCPInDestroyeds=pppCPInDestroyeds, pppLinkErrTermTOs=pppLinkErrTermTOs, pppCPEntry=pppCPEntry, ibmIROCcfgInfo=ibmIROCcfgInfo, ibmSysDumpRetainName=ibmSysDumpRetainName, ibmIROCsystem=ibmIROCsystem, ibmIROCVPNpolicy=ibmIROCVPNpolicy, pppCHAPTable=pppCHAPTable, pppEAPIfIndex=pppEAPIfIndex, pppPAPOutAcks=pppPAPOutAcks, pppMSCHAPInFailures=pppMSCHAPInFailures, pppEAPTable=pppEAPTable, frTrapStateBECN=frTrapStateBECN, frrcvdFECN=frrcvdFECN, pppMSCHAPInResponses=pppMSCHAPInResponses, pppLCProtoOutEchoReps=pppLCProtoOutEchoReps, pppCHAPOutPackets=pppCHAPOutPackets, pppMSCHAPOutAuthenticationFailures=pppMSCHAPOutAuthenticationFailures, ibmIROCroutingDialOut=ibmIROCroutingDialOut, ibmIROCroutingtcpip=ibmIROCroutingtcpip, pppEPEntry=pppEPEntry, ibmdlswTConnGroupOperNRexSents=ibmdlswTConnGroupOperNRexSents, tcpiprouteNoReach=tcpiprouteNoReach, pppCHAPIfIndex=pppCHAPIfIndex, ibmdlswTConnGroupOperConfigIndex=ibmdlswTConnGroupOperConfigIndex, pppCHAPEntry=pppCHAPEntry, serverCurrConnections=serverCurrConnections, pppSPAPOutPleaseAuthenticates=pppSPAPOutPleaseAuthenticates, pppBAPOutDropAcks=pppBAPOutDropAcks, pppBAPInCallAcks=pppBAPInCallAcks, pppCCPInResetReqs=pppCCPInResetReqs, pppLCProtoOutTimeRemains=pppLCProtoOutTimeRemains, frTrapStateCLLM=frTrapStateCLLM, pppLCProtoInEchoReqs=pppLCProtoInEchoReqs, pppSPAPOutPackets=pppSPAPOutPackets, ibmSysDumpFileDate=ibmSysDumpFileDate, pppLinkErrLastUnkProto=pppLinkErrLastUnkProto, pppLinkErrBadCtrls=pppLinkErrBadCtrls, ibmBANMIB=ibmBANMIB, pppBAPInDropReqs=pppBAPInDropReqs, pppLCProtoInCNs=pppLCProtoInCNs, ibmIROCroutingl2tp=ibmIROCroutingl2tp, pppBAPInCallBackRejs=pppBAPInCallBackRejs, pppProtocolCtlInPkts=pppProtocolCtlInPkts, pppEPInEncryptedOctets=pppEPInEncryptedOctets, ibmdlswTConnGroupOperNRexRcvds=ibmdlswTConnGroupOperNRexRcvds, pppMPPEEntry=pppMPPEEntry, pppMSCHAPOutRestrictedHoursFailures=pppMSCHAPOutRestrictedHoursFailures, pppMPPEOutDestroyed=pppMPPEOutDestroyed, frSimpleObjs=frSimpleObjs, pppLCProtoInPackets=pppLCProtoInPackets, pppLCProtoInRejects=pppLCProtoInRejects, ibmdlswTConnGroupOperCURexRcvds=ibmdlswTConnGroupOperCURexRcvds, ibmdlswQllcLsRemoteSap=ibmdlswQllcLsRemoteSap, pppBAPOutCallRejs=pppBAPOutCallRejs, pppCPOutInCompressablePkts=pppCPOutInCompressablePkts, pppLCProtoInCRs=pppLCProtoInCRs, pppECPOutResetReqs=pppECPOutResetReqs, pppCHAPOutChallenges=pppCHAPOutChallenges, pppMSCHAPOutChangePasswordFailures=pppMSCHAPOutChangePasswordFailures, ibmSysDumpBuildName=ibmSysDumpBuildName, pppPAPTable=pppPAPTable, ibmdlswTConnGroupOperICRexRcvds=ibmdlswTConnGroupOperICRexRcvds, pppMPPEOutOctets=pppMPPEOutOctets, pppCBCPOutPackets=pppCBCPOutPackets, pppPAPOutRequests=pppPAPOutRequests, pppECPInResetAcks=pppECPInResetAcks)
