#
# PySNMP MIB module INTEL-TUNNEL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTEL-TUNNEL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:43:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
mib2ext, = mibBuilder.importSymbols("INTEL-GEN-MIB", "mib2ext")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, Bits, ObjectIdentity, Counter64, Counter32, MibIdentifier, TimeTicks, Unsigned32, Integer32, iso, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Bits", "ObjectIdentity", "Counter64", "Counter32", "MibIdentifier", "TimeTicks", "Unsigned32", "Integer32", "iso", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
tunnel = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 26))
tunnelInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 26, 1))
tunnelInfoTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 26, 1, 1), )
if mibBuilder.loadTexts: tunnelInfoTable.setStatus('mandatory')
tunnelInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 26, 1, 1, 1), ).setIndexNames((0, "INTEL-TUNNEL-MIB", "tunnelInfoIfIndex"))
if mibBuilder.loadTexts: tunnelInfoEntry.setStatus('mandatory')
tunnelInfoIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 26, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelInfoIfIndex.setStatus('mandatory')
tunnelInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 26, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("void", 1), ("create", 2), ("closed", 3), ("open", 4), ("closing", 5), ("call", 6), ("destroy", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelInfoState.setStatus('mandatory')
tunnelInfoDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 26, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("client", 1), ("server", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelInfoDirection.setStatus('mandatory')
tunnelInfoLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 26, 1, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelInfoLocalAddress.setStatus('mandatory')
tunnelInfoRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 26, 1, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelInfoRemoteAddress.setStatus('mandatory')
tunnelInfoLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 26, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelInfoLocalPort.setStatus('mandatory')
tunnelInfoRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 26, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelInfoRemotePort.setStatus('mandatory')
tunnelInfoReceiveQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 26, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelInfoReceiveQueueSize.setStatus('mandatory')
tunnelInfoTransmitQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 26, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tunnelInfoTransmitQueueSize.setStatus('mandatory')
mibBuilder.exportSymbols("INTEL-TUNNEL-MIB", tunnelInfoEntry=tunnelInfoEntry, tunnelInfoLocalPort=tunnelInfoLocalPort, tunnelInfo=tunnelInfo, tunnel=tunnel, tunnelInfoLocalAddress=tunnelInfoLocalAddress, tunnelInfoDirection=tunnelInfoDirection, tunnelInfoIfIndex=tunnelInfoIfIndex, tunnelInfoRemotePort=tunnelInfoRemotePort, tunnelInfoRemoteAddress=tunnelInfoRemoteAddress, tunnelInfoState=tunnelInfoState, tunnelInfoReceiveQueueSize=tunnelInfoReceiveQueueSize, tunnelInfoTable=tunnelInfoTable, tunnelInfoTransmitQueueSize=tunnelInfoTransmitQueueSize)
