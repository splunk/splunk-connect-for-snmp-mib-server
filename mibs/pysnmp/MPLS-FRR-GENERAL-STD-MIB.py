#
# PySNMP MIB module MPLS-FRR-GENERAL-STD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MPLS-FRR-GENERAL-STD-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:03:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
ifCounterDiscontinuityGroup, InterfaceIndexOrZero, ifGeneralInformationGroup = mibBuilder.importSymbols("IF-MIB", "ifCounterDiscontinuityGroup", "InterfaceIndexOrZero", "ifGeneralInformationGroup")
MplsTunnelAffinity, MplsBitRate, MplsTunnelIndex, MplsTunnelInstanceIndex = mibBuilder.importSymbols("MPLS-TC-STD-MIB", "MplsTunnelAffinity", "MplsBitRate", "MplsTunnelIndex", "MplsTunnelInstanceIndex")
mplsTunnelScalarGroup, mplsTunnelARHopIndex, mplsTunnelGroup, mplsTunnelARHopListIndex = mibBuilder.importSymbols("MPLS-TE-STD-MIB", "mplsTunnelScalarGroup", "mplsTunnelARHopIndex", "mplsTunnelGroup", "mplsTunnelARHopListIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Unsigned32, Gauge32, NotificationType, ObjectIdentity, iso, TimeTicks, Bits, MibIdentifier, mib_2, Integer32, Counter64, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Gauge32", "NotificationType", "ObjectIdentity", "iso", "TimeTicks", "Bits", "MibIdentifier", "mib-2", "Integer32", "Counter64", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter32")
DisplayString, TextualConvention, RowStatus, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus", "StorageType")
mplsFrrGeneralMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 202))
mplsFrrGeneralMIB.setRevisions(('2011-11-03 00:00',))
if mibBuilder.loadTexts: mplsFrrGeneralMIB.setLastUpdated('201111030000Z')
if mibBuilder.loadTexts: mplsFrrGeneralMIB.setOrganization('Multiprotocol Label Switching (MPLS) Working Group')
mplsFrrGeneralObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 202, 1))
mplsFrrGeneralConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 202, 2))
mplsFrrGeneralProtectionMethod = MibScalar((1, 3, 6, 1, 2, 1, 202, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("oneToOneBackup", 2), ("facilityBackup", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mplsFrrGeneralProtectionMethod.setStatus('current')
mplsFrrGeneralIngressTunnelInstances = MibScalar((1, 3, 6, 1, 2, 1, 202, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsFrrGeneralIngressTunnelInstances.setStatus('current')
mplsFrrGeneralConstraintsTable = MibTable((1, 3, 6, 1, 2, 1, 202, 1, 3), )
if mibBuilder.loadTexts: mplsFrrGeneralConstraintsTable.setStatus('current')
mplsFrrGeneralConstraintsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 202, 1, 3, 1), ).setIndexNames((0, "MPLS-FRR-GENERAL-STD-MIB", "mplsFrrGeneralConstraintsIfIndexOrZero"), (0, "MPLS-FRR-GENERAL-STD-MIB", "mplsFrrGeneralConstraintsTunnelIndex"), (0, "MPLS-FRR-GENERAL-STD-MIB", "mplsFrrGeneralConstraintsTunnelInstance"))
if mibBuilder.loadTexts: mplsFrrGeneralConstraintsEntry.setStatus('current')
mplsFrrGeneralConstraintsIfIndexOrZero = MibTableColumn((1, 3, 6, 1, 2, 1, 202, 1, 3, 1, 1), InterfaceIndexOrZero())
if mibBuilder.loadTexts: mplsFrrGeneralConstraintsIfIndexOrZero.setStatus('current')
mplsFrrGeneralConstraintsTunnelIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 202, 1, 3, 1, 2), MplsTunnelIndex())
if mibBuilder.loadTexts: mplsFrrGeneralConstraintsTunnelIndex.setStatus('current')
mplsFrrGeneralConstraintsTunnelInstance = MibTableColumn((1, 3, 6, 1, 2, 1, 202, 1, 3, 1, 3), MplsTunnelInstanceIndex())
if mibBuilder.loadTexts: mplsFrrGeneralConstraintsTunnelInstance.setStatus('current')
mplsFrrGeneralConstraintsProtectionType = MibTableColumn((1, 3, 6, 1, 2, 1, 202, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkProtection", 1), ("nodeProtection", 2))).clone('nodeProtection')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsFrrGeneralConstraintsProtectionType.setStatus('current')
mplsFrrGeneralConstraintsSetupPrio = MibTableColumn((1, 3, 6, 1, 2, 1, 202, 1, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsFrrGeneralConstraintsSetupPrio.setStatus('current')
mplsFrrGeneralConstraintsHoldingPrio = MibTableColumn((1, 3, 6, 1, 2, 1, 202, 1, 3, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsFrrGeneralConstraintsHoldingPrio.setStatus('current')
mplsFrrGeneralConstraintsInclAnyAffinity = MibTableColumn((1, 3, 6, 1, 2, 1, 202, 1, 3, 1, 7), MplsTunnelAffinity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsFrrGeneralConstraintsInclAnyAffinity.setStatus('current')
mplsFrrGeneralConstraintsInclAllAffinity = MibTableColumn((1, 3, 6, 1, 2, 1, 202, 1, 3, 1, 8), MplsTunnelAffinity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsFrrGeneralConstraintsInclAllAffinity.setStatus('current')
mplsFrrGeneralConstraintsExclAnyAffinity = MibTableColumn((1, 3, 6, 1, 2, 1, 202, 1, 3, 1, 9), MplsTunnelAffinity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsFrrGeneralConstraintsExclAnyAffinity.setStatus('current')
mplsFrrGeneralConstraintsHopLimit = MibTableColumn((1, 3, 6, 1, 2, 1, 202, 1, 3, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(32)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsFrrGeneralConstraintsHopLimit.setStatus('current')
mplsFrrGeneralConstraintsBandwidth = MibTableColumn((1, 3, 6, 1, 2, 1, 202, 1, 3, 1, 11), MplsBitRate()).setUnits('kilobits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsFrrGeneralConstraintsBandwidth.setStatus('current')
mplsFrrGeneralConstraintsStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 202, 1, 3, 1, 12), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsFrrGeneralConstraintsStorageType.setStatus('current')
mplsFrrGeneralConstraintsRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 202, 1, 3, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsFrrGeneralConstraintsRowStatus.setStatus('current')
mplsFrrGeneralTunnelARHopTable = MibTable((1, 3, 6, 1, 2, 1, 202, 1, 4), )
if mibBuilder.loadTexts: mplsFrrGeneralTunnelARHopTable.setStatus('current')
mplsFrrGeneralTunnelARHopEntry = MibTableRow((1, 3, 6, 1, 2, 1, 202, 1, 4, 1), ).setIndexNames((0, "MPLS-TE-STD-MIB", "mplsTunnelARHopListIndex"), (0, "MPLS-TE-STD-MIB", "mplsTunnelARHopIndex"))
if mibBuilder.loadTexts: mplsFrrGeneralTunnelARHopEntry.setStatus('current')
mplsFrrGeneralTunnelARHopSessionAttributeFlags = MibTableColumn((1, 3, 6, 1, 2, 1, 202, 1, 4, 1, 1), Bits().clone(namedValues=NamedValues(("arHopSessionAttrFlagsUnsupported", 0), ("localProtectionDesired", 1), ("labelRecordingDesired", 2), ("sestyleDesired", 3), ("bandwidthProtectionDesired", 4), ("nodeProtectionDesired", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsFrrGeneralTunnelARHopSessionAttributeFlags.setStatus('current')
mplsFrrGeneralTunnelARHopRROSubObjectFlags = MibTableColumn((1, 3, 6, 1, 2, 1, 202, 1, 4, 1, 2), Bits().clone(namedValues=NamedValues(("arHopRROSubObjectFlagsUnsupported", 0), ("localProtectionAvailable", 1), ("localProtectionInUse", 2), ("bandwidthProtection", 3), ("nodeProtection", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsFrrGeneralTunnelARHopRROSubObjectFlags.setStatus('current')
mplsFrrGeneralCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 202, 2, 1))
mplsFrrGeneralGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 202, 2, 2))
mplsFrrGeneralModuleFullCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 202, 2, 1, 1)).setObjects(("IF-MIB", "ifGeneralInformationGroup"), ("IF-MIB", "ifCounterDiscontinuityGroup"), ("MPLS-TE-STD-MIB", "mplsTunnelGroup"), ("MPLS-TE-STD-MIB", "mplsTunnelScalarGroup"), ("MPLS-FRR-GENERAL-STD-MIB", "mplsFrrGeneralScalarGroup"), ("MPLS-FRR-GENERAL-STD-MIB", "mplsFrrGeneralTunnelARHopGroup"), ("MPLS-FRR-GENERAL-STD-MIB", "mplsFrrGeneralConstraintsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsFrrGeneralModuleFullCompliance = mplsFrrGeneralModuleFullCompliance.setStatus('current')
mplsFrrGeneralModuleReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 202, 2, 1, 2)).setObjects(("MPLS-FRR-GENERAL-STD-MIB", "mplsFrrGeneralScalarGroup"), ("MPLS-FRR-GENERAL-STD-MIB", "mplsFrrGeneralTunnelARHopGroup"), ("MPLS-FRR-GENERAL-STD-MIB", "mplsFrrGeneralConstraintsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsFrrGeneralModuleReadOnlyCompliance = mplsFrrGeneralModuleReadOnlyCompliance.setStatus('current')
mplsFrrGeneralScalarGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 202, 2, 2, 1)).setObjects(("MPLS-FRR-GENERAL-STD-MIB", "mplsFrrGeneralIngressTunnelInstances"), ("MPLS-FRR-GENERAL-STD-MIB", "mplsFrrGeneralProtectionMethod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsFrrGeneralScalarGroup = mplsFrrGeneralScalarGroup.setStatus('current')
mplsFrrGeneralConstraintsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 202, 2, 2, 2)).setObjects(("MPLS-FRR-GENERAL-STD-MIB", "mplsFrrGeneralConstraintsProtectionType"), ("MPLS-FRR-GENERAL-STD-MIB", "mplsFrrGeneralConstraintsSetupPrio"), ("MPLS-FRR-GENERAL-STD-MIB", "mplsFrrGeneralConstraintsHoldingPrio"), ("MPLS-FRR-GENERAL-STD-MIB", "mplsFrrGeneralConstraintsInclAnyAffinity"), ("MPLS-FRR-GENERAL-STD-MIB", "mplsFrrGeneralConstraintsInclAllAffinity"), ("MPLS-FRR-GENERAL-STD-MIB", "mplsFrrGeneralConstraintsExclAnyAffinity"), ("MPLS-FRR-GENERAL-STD-MIB", "mplsFrrGeneralConstraintsHopLimit"), ("MPLS-FRR-GENERAL-STD-MIB", "mplsFrrGeneralConstraintsBandwidth"), ("MPLS-FRR-GENERAL-STD-MIB", "mplsFrrGeneralConstraintsStorageType"), ("MPLS-FRR-GENERAL-STD-MIB", "mplsFrrGeneralConstraintsRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsFrrGeneralConstraintsGroup = mplsFrrGeneralConstraintsGroup.setStatus('current')
mplsFrrGeneralTunnelARHopGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 202, 2, 2, 3)).setObjects(("MPLS-FRR-GENERAL-STD-MIB", "mplsFrrGeneralTunnelARHopSessionAttributeFlags"), ("MPLS-FRR-GENERAL-STD-MIB", "mplsFrrGeneralTunnelARHopRROSubObjectFlags"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsFrrGeneralTunnelARHopGroup = mplsFrrGeneralTunnelARHopGroup.setStatus('current')
mibBuilder.exportSymbols("MPLS-FRR-GENERAL-STD-MIB", mplsFrrGeneralIngressTunnelInstances=mplsFrrGeneralIngressTunnelInstances, mplsFrrGeneralConformance=mplsFrrGeneralConformance, mplsFrrGeneralTunnelARHopSessionAttributeFlags=mplsFrrGeneralTunnelARHopSessionAttributeFlags, mplsFrrGeneralConstraintsGroup=mplsFrrGeneralConstraintsGroup, mplsFrrGeneralModuleReadOnlyCompliance=mplsFrrGeneralModuleReadOnlyCompliance, mplsFrrGeneralScalarGroup=mplsFrrGeneralScalarGroup, mplsFrrGeneralConstraintsInclAllAffinity=mplsFrrGeneralConstraintsInclAllAffinity, mplsFrrGeneralProtectionMethod=mplsFrrGeneralProtectionMethod, mplsFrrGeneralConstraintsHopLimit=mplsFrrGeneralConstraintsHopLimit, mplsFrrGeneralConstraintsHoldingPrio=mplsFrrGeneralConstraintsHoldingPrio, mplsFrrGeneralGroups=mplsFrrGeneralGroups, mplsFrrGeneralConstraintsRowStatus=mplsFrrGeneralConstraintsRowStatus, mplsFrrGeneralConstraintsEntry=mplsFrrGeneralConstraintsEntry, mplsFrrGeneralConstraintsStorageType=mplsFrrGeneralConstraintsStorageType, mplsFrrGeneralConstraintsTunnelInstance=mplsFrrGeneralConstraintsTunnelInstance, PYSNMP_MODULE_ID=mplsFrrGeneralMIB, mplsFrrGeneralConstraintsTable=mplsFrrGeneralConstraintsTable, mplsFrrGeneralMIB=mplsFrrGeneralMIB, mplsFrrGeneralTunnelARHopTable=mplsFrrGeneralTunnelARHopTable, mplsFrrGeneralConstraintsInclAnyAffinity=mplsFrrGeneralConstraintsInclAnyAffinity, mplsFrrGeneralConstraintsProtectionType=mplsFrrGeneralConstraintsProtectionType, mplsFrrGeneralTunnelARHopEntry=mplsFrrGeneralTunnelARHopEntry, mplsFrrGeneralTunnelARHopGroup=mplsFrrGeneralTunnelARHopGroup, mplsFrrGeneralObjects=mplsFrrGeneralObjects, mplsFrrGeneralConstraintsExclAnyAffinity=mplsFrrGeneralConstraintsExclAnyAffinity, mplsFrrGeneralTunnelARHopRROSubObjectFlags=mplsFrrGeneralTunnelARHopRROSubObjectFlags, mplsFrrGeneralConstraintsIfIndexOrZero=mplsFrrGeneralConstraintsIfIndexOrZero, mplsFrrGeneralConstraintsSetupPrio=mplsFrrGeneralConstraintsSetupPrio, mplsFrrGeneralConstraintsTunnelIndex=mplsFrrGeneralConstraintsTunnelIndex, mplsFrrGeneralCompliances=mplsFrrGeneralCompliances, mplsFrrGeneralModuleFullCompliance=mplsFrrGeneralModuleFullCompliance, mplsFrrGeneralConstraintsBandwidth=mplsFrrGeneralConstraintsBandwidth)
