#
# PySNMP MIB module A3COM-SWITCHING-SYSTEMS-FDDI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-SWITCHING-SYSTEMS-FDDI-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 16:53:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
fddimibPORTLerCutoff, fddimibMACAvailablePaths, fddimibSMTStationId, fddimibPORTLerAlarm, fddimibMACFrameCts, fddimibMACUpstreamNbr, fddimibMACSMTAddress, fddimibMACOldUpstreamNbr, fddimibPORTAvailablePaths, fddimibMACOldDownstreamNbr, fddimibPORTCurrentPath, fddimibPORTMyType, fddimibMACRequestedPaths, fddimibPORTLemRejectCts, fddimibPORTRequestedPaths, FddiSMTStationIdType, fddimibMACFrameErrorFlag, fddimibPORTConnectState, fddimibMACFrameErrorRatio, fddimibPORTNeighborType, fddimibMACDownstreamNbr, fddimibMACLostCts, fddimibMACNotCopiedRatio, fddimibMACUnaDaFlag, fddimibSMTPeerWrapFlag, fddimibPORTLerEstimate, fddimibMACErrorCts, FddiTimeNano, fddimibPORTLemCts, fddimibPORTLerFlag, fddimibMACCurrentPath, fddimibMACNotCopiedFlag, fddimibSMTCFState, fddimibMACNotCopiedCts, fddimibPORTPCWithhold, fddimibMACCopiedCts, fddimibMACDaFlag = mibBuilder.importSymbols("FDDI-SMT73-MIB", "fddimibPORTLerCutoff", "fddimibMACAvailablePaths", "fddimibSMTStationId", "fddimibPORTLerAlarm", "fddimibMACFrameCts", "fddimibMACUpstreamNbr", "fddimibMACSMTAddress", "fddimibMACOldUpstreamNbr", "fddimibPORTAvailablePaths", "fddimibMACOldDownstreamNbr", "fddimibPORTCurrentPath", "fddimibPORTMyType", "fddimibMACRequestedPaths", "fddimibPORTLemRejectCts", "fddimibPORTRequestedPaths", "FddiSMTStationIdType", "fddimibMACFrameErrorFlag", "fddimibPORTConnectState", "fddimibMACFrameErrorRatio", "fddimibPORTNeighborType", "fddimibMACDownstreamNbr", "fddimibMACLostCts", "fddimibMACNotCopiedRatio", "fddimibMACUnaDaFlag", "fddimibSMTPeerWrapFlag", "fddimibPORTLerEstimate", "fddimibMACErrorCts", "FddiTimeNano", "fddimibPORTLemCts", "fddimibPORTLerFlag", "fddimibMACCurrentPath", "fddimibMACNotCopiedFlag", "fddimibSMTCFState", "fddimibMACNotCopiedCts", "fddimibPORTPCWithhold", "fddimibMACCopiedCts", "fddimibMACDaFlag")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Counter64, MibIdentifier, Gauge32, iso, IpAddress, ModuleIdentity, enterprises, Integer32, Unsigned32, NotificationType, ObjectIdentity, Bits, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter64", "MibIdentifier", "Gauge32", "iso", "IpAddress", "ModuleIdentity", "enterprises", "Integer32", "Unsigned32", "NotificationType", "ObjectIdentity", "Bits", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
a3Com = MibIdentifier((1, 3, 6, 1, 4, 1, 43))
switchingSystemsMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29))
a3ComSwitchingSystemsFddiMib = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 10))
a3ComFddiSMT = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 10, 1))
a3ComFddiMAC = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 10, 2))
a3ComFddiPATH = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 10, 3))
a3ComFddiPORT = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 10, 4))
a3ComFddiSMTTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 10, 1, 1), )
if mibBuilder.loadTexts: a3ComFddiSMTTable.setStatus('mandatory')
a3ComFddiSMTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 10, 1, 1, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-FDDI-MIB", "a3ComFddiSMTIndex"))
if mibBuilder.loadTexts: a3ComFddiSMTEntry.setStatus('mandatory')
a3ComFddiSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 10, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComFddiSMTIndex.setStatus('mandatory')
a3ComFddiSMTManufacturerOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 10, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComFddiSMTManufacturerOUI.setStatus('mandatory')
a3ComFddiSMTManufacturerData = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 10, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(29, 29)).setFixedLength(29)).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComFddiSMTManufacturerData.setStatus('mandatory')
a3ComFddiSMTHoldState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 10, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("not-implemented", 1), ("not-holding", 2), ("holding-prm", 3), ("holding-sec", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComFddiSMTHoldState.setStatus('mandatory')
a3ComFddiSMTSetCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 10, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComFddiSMTSetCount.setStatus('mandatory')
a3ComFddiSMTLastSetStationId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 10, 1, 1, 1, 6), FddiSMTStationIdType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComFddiSMTLastSetStationId.setStatus('mandatory')
a3ComFddiMACBridgeFunctionTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 10, 2, 1), )
if mibBuilder.loadTexts: a3ComFddiMACBridgeFunctionTable.setStatus('mandatory')
a3ComFddiMACBridgeFunctionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 10, 2, 1, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-FDDI-MIB", "a3ComFddiMACBridgeFunctionSMTIndex"), (0, "A3COM-SWITCHING-SYSTEMS-FDDI-MIB", "a3ComFddiMACBridgeFunctionMACIndex"))
if mibBuilder.loadTexts: a3ComFddiMACBridgeFunctionEntry.setStatus('mandatory')
a3ComFddiMACBridgeFunctionSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 10, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComFddiMACBridgeFunctionSMTIndex.setStatus('mandatory')
a3ComFddiMACBridgeFunctionMACIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 10, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComFddiMACBridgeFunctionMACIndex.setStatus('mandatory')
a3ComFddiMACBridgeFunctions = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 10, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComFddiMACBridgeFunctions.setStatus('mandatory')
a3ComFddiMACTPriTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 10, 2, 2), )
if mibBuilder.loadTexts: a3ComFddiMACTPriTable.setStatus('mandatory')
a3ComFddiMACTPriEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 10, 2, 2, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-FDDI-MIB", "a3ComFddiMACTPriSMTIndex"), (0, "A3COM-SWITCHING-SYSTEMS-FDDI-MIB", "a3ComFddiMACTPriMACIndex"))
if mibBuilder.loadTexts: a3ComFddiMACTPriEntry.setStatus('mandatory')
a3ComFddiMACTPriSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 10, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComFddiMACTPriSMTIndex.setStatus('mandatory')
a3ComFddiMACTPriMACIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 10, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComFddiMACTPriMACIndex.setStatus('mandatory')
a3ComFddiMACTPri0 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 10, 2, 2, 1, 3), FddiTimeNano()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComFddiMACTPri0.setStatus('mandatory')
a3ComFddiMACTPri1 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 10, 2, 2, 1, 4), FddiTimeNano()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComFddiMACTPri1.setStatus('mandatory')
a3ComFddiMACTPri2 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 10, 2, 2, 1, 5), FddiTimeNano()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComFddiMACTPri2.setStatus('mandatory')
a3ComFddiMACTPri3 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 10, 2, 2, 1, 6), FddiTimeNano()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComFddiMACTPri3.setStatus('mandatory')
a3ComFddiMACTPri4 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 10, 2, 2, 1, 7), FddiTimeNano()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComFddiMACTPri4.setStatus('mandatory')
a3ComFddiMACTPri5 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 10, 2, 2, 1, 8), FddiTimeNano()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComFddiMACTPri5.setStatus('mandatory')
a3ComFddiMACTPri6 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 10, 2, 2, 1, 9), FddiTimeNano()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComFddiMACTPri6.setStatus('mandatory')
a3ComFddiPATHRingTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 10, 3, 1), )
if mibBuilder.loadTexts: a3ComFddiPATHRingTable.setStatus('mandatory')
a3ComFddiPATHRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 10, 3, 1, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-FDDI-MIB", "a3ComFddiPATHRingSMTIndex"), (0, "A3COM-SWITCHING-SYSTEMS-FDDI-MIB", "a3ComFddiPATHRingPATHIndex"))
if mibBuilder.loadTexts: a3ComFddiPATHRingEntry.setStatus('mandatory')
a3ComFddiPATHRingSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 10, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComFddiPATHRingSMTIndex.setStatus('mandatory')
a3ComFddiPATHRingPATHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 10, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComFddiPATHRingPATHIndex.setStatus('mandatory')
a3ComFddiPATHRingLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 10, 3, 1, 1, 3), FddiTimeNano()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComFddiPATHRingLatency.setStatus('mandatory')
a3ComFddiPATHTraceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 10, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComFddiPATHTraceStatus.setStatus('mandatory')
a3ComFddiPATHT_Rmode = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 10, 3, 1, 1, 5), FddiTimeNano()).setLabel("a3ComFddiPATHT-Rmode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComFddiPATHT_Rmode.setStatus('mandatory')
a3ComFddiPATHSbaTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 10, 3, 2), )
if mibBuilder.loadTexts: a3ComFddiPATHSbaTable.setStatus('mandatory')
a3ComFddiPATHSbaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 10, 3, 2, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-FDDI-MIB", "a3ComFddiPATHSbaSMTIndex"), (0, "A3COM-SWITCHING-SYSTEMS-FDDI-MIB", "a3ComFddiPATHSbaPATHIndex"))
if mibBuilder.loadTexts: a3ComFddiPATHSbaEntry.setStatus('mandatory')
a3ComFddiPATHSbaSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 10, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComFddiPATHSbaSMTIndex.setStatus('mandatory')
a3ComFddiPATHSbaPATHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 10, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComFddiPATHSbaPATHIndex.setStatus('mandatory')
a3ComFddiPATHSbaPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 10, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1562))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComFddiPATHSbaPayload.setStatus('mandatory')
a3ComFddiPATHSbaOverhead = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 10, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComFddiPATHSbaOverhead.setStatus('mandatory')
a3ComFddiPATHSbaAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 10, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12500000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComFddiPATHSbaAvailable.setStatus('mandatory')
a3ComFddiPORTTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 10, 4, 1), )
if mibBuilder.loadTexts: a3ComFddiPORTTable.setStatus('mandatory')
a3ComFddiPORTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 10, 4, 1, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-FDDI-MIB", "a3ComFddiPORTSMTIndex"), (0, "A3COM-SWITCHING-SYSTEMS-FDDI-MIB", "a3ComFddiPORTIndex"))
if mibBuilder.loadTexts: a3ComFddiPORTEntry.setStatus('mandatory')
a3ComFddiPORTSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 10, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComFddiPORTSMTIndex.setStatus('mandatory')
a3ComFddiPORTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 10, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComFddiPORTIndex.setStatus('mandatory')
a3ComFddiPORTMACLoopTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 10, 4, 1, 1, 3), FddiTimeNano()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComFddiPORTMACLoopTime.setStatus('mandatory')
a3ComFddiPORTEBErrorCt = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 10, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComFddiPORTEBErrorCt.setStatus('mandatory')
a3ComFddiPORTLSTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 10, 4, 2), )
if mibBuilder.loadTexts: a3ComFddiPORTLSTable.setStatus('mandatory')
a3ComFddiPORTLSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 10, 4, 2, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-FDDI-MIB", "a3ComFddiPORTLSSMTIndex"), (0, "A3COM-SWITCHING-SYSTEMS-FDDI-MIB", "a3ComFddiPORTLSPORTIndex"))
if mibBuilder.loadTexts: a3ComFddiPORTLSEntry.setStatus('mandatory')
a3ComFddiPORTLSSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 10, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComFddiPORTLSSMTIndex.setStatus('mandatory')
a3ComFddiPORTLSPORTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 10, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComFddiPORTLSPORTIndex.setStatus('mandatory')
a3ComFddiPORTMaintLS = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 10, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("quiet", 1), ("idle", 2), ("master", 3), ("halt", 4), ("receive-active", 5), ("receive-unknown", 6), ("receive-noise", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComFddiPORTMaintLS.setStatus('mandatory')
a3ComFddiPORTPCLS = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 10, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("quiet", 1), ("idle", 2), ("master", 3), ("halt", 4), ("receive-active", 5), ("receive-unknown", 6), ("receive-noise", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComFddiPORTPCLS.setStatus('mandatory')
a3ComFddiSMTHoldCondition = NotificationType((1, 3, 6, 1, 4, 1, 43, 29, 10) + (0,1)).setObjects(("FDDI-SMT73-MIB", "fddimibSMTStationId"), ("A3COM-SWITCHING-SYSTEMS-FDDI-MIB", "a3ComFddiSMTHoldState"))
a3ComFddiSMTPeerWrapCondition = NotificationType((1, 3, 6, 1, 4, 1, 43, 29, 10) + (0,2)).setObjects(("FDDI-SMT73-MIB", "fddimibSMTStationId"), ("FDDI-SMT73-MIB", "fddimibSMTCFState"), ("FDDI-SMT73-MIB", "fddimibSMTPeerWrapFlag"))
a3ComFddiMACDuplicateAddressCondition = NotificationType((1, 3, 6, 1, 4, 1, 43, 29, 10) + (0,3)).setObjects(("FDDI-SMT73-MIB", "fddimibSMTStationId"), ("FDDI-SMT73-MIB", "fddimibMACSMTAddress"), ("FDDI-SMT73-MIB", "fddimibMACUpstreamNbr"), ("FDDI-SMT73-MIB", "fddimibMACDaFlag"), ("FDDI-SMT73-MIB", "fddimibMACUnaDaFlag"))
a3ComFddiMACFrameErrorCondition = NotificationType((1, 3, 6, 1, 4, 1, 43, 29, 10) + (0,4)).setObjects(("FDDI-SMT73-MIB", "fddimibSMTStationId"), ("FDDI-SMT73-MIB", "fddimibMACFrameErrorFlag"), ("FDDI-SMT73-MIB", "fddimibMACFrameCts"), ("FDDI-SMT73-MIB", "fddimibMACErrorCts"), ("FDDI-SMT73-MIB", "fddimibMACLostCts"), ("FDDI-SMT73-MIB", "fddimibMACFrameErrorRatio"))
a3ComFddiMACNotCopiedCondition = NotificationType((1, 3, 6, 1, 4, 1, 43, 29, 10) + (0,5)).setObjects(("FDDI-SMT73-MIB", "fddimibSMTStationId"), ("FDDI-SMT73-MIB", "fddimibMACNotCopiedCts"), ("FDDI-SMT73-MIB", "fddimibMACCopiedCts"), ("FDDI-SMT73-MIB", "fddimibMACNotCopiedRatio"), ("FDDI-SMT73-MIB", "fddimibMACNotCopiedFlag"))
a3ComFddiMACNeighborChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 43, 29, 10) + (0,6)).setObjects(("FDDI-SMT73-MIB", "fddimibSMTStationId"), ("FDDI-SMT73-MIB", "fddimibMACUpstreamNbr"), ("FDDI-SMT73-MIB", "fddimibMACOldUpstreamNbr"), ("FDDI-SMT73-MIB", "fddimibMACDownstreamNbr"), ("FDDI-SMT73-MIB", "fddimibMACOldDownstreamNbr"), ("FDDI-SMT73-MIB", "fddimibMACCurrentPath"), ("FDDI-SMT73-MIB", "fddimibMACSMTAddress"))
a3ComFddiMACPathChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 43, 29, 10) + (0,7)).setObjects(("FDDI-SMT73-MIB", "fddimibSMTStationId"), ("FDDI-SMT73-MIB", "fddimibMACAvailablePaths"), ("FDDI-SMT73-MIB", "fddimibMACCurrentPath"), ("FDDI-SMT73-MIB", "fddimibMACRequestedPaths"))
a3ComFddiPORTLerCondition = NotificationType((1, 3, 6, 1, 4, 1, 43, 29, 10) + (0,8)).setObjects(("FDDI-SMT73-MIB", "fddimibSMTStationId"), ("FDDI-SMT73-MIB", "fddimibPORTLerCutoff"), ("FDDI-SMT73-MIB", "fddimibPORTLerAlarm"), ("FDDI-SMT73-MIB", "fddimibPORTLerEstimate"), ("FDDI-SMT73-MIB", "fddimibPORTLemRejectCts"), ("FDDI-SMT73-MIB", "fddimibPORTLemCts"), ("FDDI-SMT73-MIB", "fddimibPORTLerFlag"))
a3ComFddiPORTUndesiredConnAttemptEvent = NotificationType((1, 3, 6, 1, 4, 1, 43, 29, 10) + (0,9)).setObjects(("FDDI-SMT73-MIB", "fddimibSMTStationId"), ("FDDI-SMT73-MIB", "fddimibPORTMyType"), ("FDDI-SMT73-MIB", "fddimibPORTConnectState"), ("FDDI-SMT73-MIB", "fddimibPORTNeighborType"), ("FDDI-SMT73-MIB", "fddimibPORTPCWithhold"))
a3ComFddiPORTEBErrorCondition = NotificationType((1, 3, 6, 1, 4, 1, 43, 29, 10) + (0,10)).setObjects(("FDDI-SMT73-MIB", "fddimibSMTStationId"), ("A3COM-SWITCHING-SYSTEMS-FDDI-MIB", "a3ComFddiPORTEBErrorCt"))
a3ComFddiPORTPathChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 43, 29, 10) + (0,11)).setObjects(("FDDI-SMT73-MIB", "fddimibSMTStationId"), ("FDDI-SMT73-MIB", "fddimibPORTAvailablePaths"), ("FDDI-SMT73-MIB", "fddimibPORTCurrentPath"), ("FDDI-SMT73-MIB", "fddimibPORTRequestedPaths"), ("FDDI-SMT73-MIB", "fddimibPORTMyType"), ("FDDI-SMT73-MIB", "fddimibPORTNeighborType"))
mibBuilder.exportSymbols("A3COM-SWITCHING-SYSTEMS-FDDI-MIB", a3ComFddiPATHRingTable=a3ComFddiPATHRingTable, a3ComFddiSMT=a3ComFddiSMT, a3ComFddiMACTPri0=a3ComFddiMACTPri0, a3ComFddiPORTMaintLS=a3ComFddiPORTMaintLS, a3ComFddiMACBridgeFunctionMACIndex=a3ComFddiMACBridgeFunctionMACIndex, a3ComFddiSMTHoldState=a3ComFddiSMTHoldState, a3ComFddiMACBridgeFunctionEntry=a3ComFddiMACBridgeFunctionEntry, a3ComFddiMACTPriSMTIndex=a3ComFddiMACTPriSMTIndex, a3ComFddiPORTPCLS=a3ComFddiPORTPCLS, a3ComFddiMACDuplicateAddressCondition=a3ComFddiMACDuplicateAddressCondition, a3ComFddiPATHSbaEntry=a3ComFddiPATHSbaEntry, a3ComFddiMACTPri5=a3ComFddiMACTPri5, a3ComFddiPORTMACLoopTime=a3ComFddiPORTMACLoopTime, a3ComFddiPORTUndesiredConnAttemptEvent=a3ComFddiPORTUndesiredConnAttemptEvent, a3ComFddiSMTEntry=a3ComFddiSMTEntry, a3ComFddiMACTPri3=a3ComFddiMACTPri3, a3ComFddiPATHSbaSMTIndex=a3ComFddiPATHSbaSMTIndex, a3ComFddiMACTPriTable=a3ComFddiMACTPriTable, a3ComFddiMACBridgeFunctionSMTIndex=a3ComFddiMACBridgeFunctionSMTIndex, a3ComFddiMACTPri6=a3ComFddiMACTPri6, a3ComFddiPATHT_Rmode=a3ComFddiPATHT_Rmode, a3ComFddiSMTTable=a3ComFddiSMTTable, a3ComFddiPORTLSTable=a3ComFddiPORTLSTable, a3ComFddiPATH=a3ComFddiPATH, a3ComFddiMACPathChangeEvent=a3ComFddiMACPathChangeEvent, a3ComFddiMACTPriEntry=a3ComFddiMACTPriEntry, a3ComFddiMAC=a3ComFddiMAC, a3ComFddiMACTPri2=a3ComFddiMACTPri2, a3ComFddiSMTManufacturerData=a3ComFddiSMTManufacturerData, a3ComFddiSMTIndex=a3ComFddiSMTIndex, a3ComFddiMACTPriMACIndex=a3ComFddiMACTPriMACIndex, a3ComFddiMACNeighborChangeEvent=a3ComFddiMACNeighborChangeEvent, a3ComFddiPATHRingPATHIndex=a3ComFddiPATHRingPATHIndex, a3ComFddiPATHSbaOverhead=a3ComFddiPATHSbaOverhead, a3ComFddiPATHRingEntry=a3ComFddiPATHRingEntry, a3ComFddiMACFrameErrorCondition=a3ComFddiMACFrameErrorCondition, a3ComFddiPORTTable=a3ComFddiPORTTable, a3ComFddiPORTEBErrorCt=a3ComFddiPORTEBErrorCt, a3ComFddiPORTEBErrorCondition=a3ComFddiPORTEBErrorCondition, a3ComFddiPORTPathChangeEvent=a3ComFddiPORTPathChangeEvent, a3ComSwitchingSystemsFddiMib=a3ComSwitchingSystemsFddiMib, a3Com=a3Com, a3ComFddiPORTLerCondition=a3ComFddiPORTLerCondition, a3ComFddiPORTLSPORTIndex=a3ComFddiPORTLSPORTIndex, a3ComFddiSMTPeerWrapCondition=a3ComFddiSMTPeerWrapCondition, a3ComFddiMACBridgeFunctionTable=a3ComFddiMACBridgeFunctionTable, a3ComFddiSMTSetCount=a3ComFddiSMTSetCount, a3ComFddiPATHTraceStatus=a3ComFddiPATHTraceStatus, a3ComFddiSMTHoldCondition=a3ComFddiSMTHoldCondition, a3ComFddiPORTSMTIndex=a3ComFddiPORTSMTIndex, a3ComFddiMACBridgeFunctions=a3ComFddiMACBridgeFunctions, a3ComFddiPORTEntry=a3ComFddiPORTEntry, a3ComFddiPORTLSEntry=a3ComFddiPORTLSEntry, a3ComFddiMACTPri4=a3ComFddiMACTPri4, a3ComFddiPORT=a3ComFddiPORT, switchingSystemsMibs=switchingSystemsMibs, a3ComFddiSMTManufacturerOUI=a3ComFddiSMTManufacturerOUI, a3ComFddiPATHSbaPATHIndex=a3ComFddiPATHSbaPATHIndex, a3ComFddiPORTIndex=a3ComFddiPORTIndex, a3ComFddiMACTPri1=a3ComFddiMACTPri1, a3ComFddiPATHRingLatency=a3ComFddiPATHRingLatency, a3ComFddiPATHSbaTable=a3ComFddiPATHSbaTable, a3ComFddiPORTLSSMTIndex=a3ComFddiPORTLSSMTIndex, a3ComFddiSMTLastSetStationId=a3ComFddiSMTLastSetStationId, a3ComFddiPATHRingSMTIndex=a3ComFddiPATHRingSMTIndex, a3ComFddiPATHSbaPayload=a3ComFddiPATHSbaPayload, a3ComFddiMACNotCopiedCondition=a3ComFddiMACNotCopiedCondition, a3ComFddiPATHSbaAvailable=a3ComFddiPATHSbaAvailable)
