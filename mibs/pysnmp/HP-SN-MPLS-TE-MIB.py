#
# PySNMP MIB module HP-SN-MPLS-TE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-SN-MIBS
# Produced by pysmi-0.3.4 at Mon Apr 29 19:23:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
mplsMIB, MplsLsrIdentifier, MplsTunnelAffinity, MplsTunnelInstanceIndex, MplsPathIndexOrZero, MplsPathIndex, MplsBurstSize, MplsLSPID, MplsBitRate, MplsTunnelIndex = mibBuilder.importSymbols("HP-SN-MPLS-TC-MIB", "mplsMIB", "MplsLsrIdentifier", "MplsTunnelAffinity", "MplsTunnelInstanceIndex", "MplsPathIndexOrZero", "MplsPathIndex", "MplsBurstSize", "MplsLSPID", "MplsBitRate", "MplsTunnelIndex")
snMpls, = mibBuilder.importSymbols("HP-SN-ROOT-MIB", "snMpls")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetAddressIPv4, InetAddressIPv6 = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressIPv4", "InetAddressIPv6")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
IpAddress, Integer32, Counter32, Counter64, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, TimeTicks, iso, Bits, Gauge32, ObjectIdentity, MibIdentifier, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Integer32", "Counter32", "Counter64", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "TimeTicks", "iso", "Bits", "Gauge32", "ObjectIdentity", "MibIdentifier", "ModuleIdentity")
RowPointer, TimeStamp, TruthValue, TextualConvention, RowStatus, StorageType, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowPointer", "TimeStamp", "TruthValue", "TextualConvention", "RowStatus", "StorageType", "DisplayString")
mplsTeMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3))
mplsTeMIB.setRevisions(('2002-01-04 12:00',))
if mibBuilder.loadTexts: mplsTeMIB.setLastUpdated('200201041200Z')
if mibBuilder.loadTexts: mplsTeMIB.setOrganization('Multiprotocol Label Switching (MPLS) Working Group')
mplsTeScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 1))
mplsTeObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2))
mplsTeNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 3))
mplsTeNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 3, 0))
mplsTeConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 4))
mplsTunnelConfigured = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelConfigured.setStatus('current')
mplsTunnelActive = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelActive.setStatus('current')
mplsTunnelTEDistProto = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 1, 3), Bits().clone(namedValues=NamedValues(("other", 0), ("ospf", 1), ("isis", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelTEDistProto.setStatus('current')
mplsTunnelMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelMaxHops.setStatus('current')
mplsTunnelIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelIndexNext.setStatus('current')
mplsTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 2), )
if mibBuilder.loadTexts: mplsTunnelTable.setStatus('current')
mplsTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 2, 1), ).setIndexNames((0, "HP-SN-MPLS-TE-MIB", "mplsTunnelIndex"), (0, "HP-SN-MPLS-TE-MIB", "mplsTunnelInstance"), (0, "HP-SN-MPLS-TE-MIB", "mplsTunnelIngressLSRId"), (0, "HP-SN-MPLS-TE-MIB", "mplsTunnelEgressLSRId"))
if mibBuilder.loadTexts: mplsTunnelEntry.setStatus('current')
mplsTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 2, 1, 1), MplsTunnelIndex())
if mibBuilder.loadTexts: mplsTunnelIndex.setStatus('current')
mplsTunnelInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 2, 1, 2), MplsTunnelInstanceIndex())
if mibBuilder.loadTexts: mplsTunnelInstance.setStatus('current')
mplsTunnelIngressLSRId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 2, 1, 3), MplsLsrIdentifier())
if mibBuilder.loadTexts: mplsTunnelIngressLSRId.setStatus('current')
mplsTunnelEgressLSRId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 2, 1, 4), MplsLsrIdentifier())
if mibBuilder.loadTexts: mplsTunnelEgressLSRId.setStatus('current')
mplsTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 2, 1, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelName.setStatus('current')
mplsTunnelDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 2, 1, 6), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelDescr.setStatus('current')
mplsTunnelIsIf = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 2, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelIsIf.setStatus('current')
mplsTunnelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 2, 1, 8), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelIfIndex.setStatus('current')
mplsTunnelXCPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 2, 1, 9), RowPointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelXCPointer.setStatus('current')
mplsTunnelSignallingProto = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("rsvp", 2), ("crldp", 3), ("other", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelSignallingProto.setStatus('current')
mplsTunnelSetupPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelSetupPrio.setStatus('current')
mplsTunnelHoldingPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHoldingPrio.setStatus('current')
mplsTunnelSessionAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 2, 1, 13), Bits().clone(namedValues=NamedValues(("fastReroute", 0), ("mergingPermitted", 1), ("isPersistent", 2), ("isPinned", 3), ("recordRoute", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelSessionAttributes.setStatus('current')
mplsTunnelOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("admin", 1), ("rsvp", 2), ("crldp", 3), ("policyAgent", 4), ("other", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelOwner.setStatus('current')
mplsTunnelLocalProtectInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 2, 1, 15), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelLocalProtectInUse.setStatus('current')
mplsTunnelResourcePointer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 2, 1, 16), RowPointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelResourcePointer.setStatus('current')
mplsTunnelInstancePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 2, 1, 17), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelInstancePriority.setStatus('current')
mplsTunnelHopTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 2, 1, 18), MplsPathIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopTableIndex.setStatus('current')
mplsTunnelARHopTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 2, 1, 19), MplsPathIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelARHopTableIndex.setStatus('current')
mplsTunnelCHopTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 2, 1, 20), MplsPathIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCHopTableIndex.setStatus('current')
mplsTunnelPrimaryInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 2, 1, 21), MplsTunnelInstanceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelPrimaryInstance.setStatus('current')
mplsTunnelPrimaryTimeUp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 2, 1, 22), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelPrimaryTimeUp.setStatus('current')
mplsTunnelPathChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelPathChanges.setStatus('current')
mplsTunnelLastPathChange = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 2, 1, 24), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelLastPathChange.setStatus('current')
mplsTunnelCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 2, 1, 25), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCreationTime.setStatus('current')
mplsTunnelStateTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelStateTransitions.setStatus('current')
mplsTunnelIncludeAnyAffinity = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 2, 1, 27), MplsTunnelAffinity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelIncludeAnyAffinity.setStatus('current')
mplsTunnelIncludeAllAffinity = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 2, 1, 28), MplsTunnelAffinity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelIncludeAllAffinity.setStatus('current')
mplsTunnelExcludeAllAffinity = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 2, 1, 29), MplsTunnelAffinity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelExcludeAllAffinity.setStatus('current')
mplsTunnelPathInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 2, 1, 30), MplsPathIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelPathInUse.setStatus('current')
mplsTunnelRole = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("head", 1), ("transit", 2), ("tail", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelRole.setStatus('current')
mplsTunnelTotalUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 2, 1, 32), TimeTicks()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelTotalUpTime.setStatus('current')
mplsTunnelInstanceUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 2, 1, 33), TimeTicks()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelInstanceUpTime.setStatus('current')
mplsTunnelAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelAdminStatus.setStatus('current')
mplsTunnelOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5), ("notPresent", 6), ("lowerLayerDown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelOperStatus.setStatus('current')
mplsTunnelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 2, 1, 36), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelRowStatus.setStatus('current')
mplsTunnelStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 2, 1, 37), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelStorageType.setStatus('current')
mplsTunnelHopListIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelHopListIndexNext.setStatus('current')
mplsTunnelHopTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 4), )
if mibBuilder.loadTexts: mplsTunnelHopTable.setStatus('current')
mplsTunnelHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 4, 1), ).setIndexNames((0, "HP-SN-MPLS-TE-MIB", "mplsTunnelHopListIndex"), (0, "HP-SN-MPLS-TE-MIB", "mplsTunnelHopPathOptionIndex"), (0, "HP-SN-MPLS-TE-MIB", "mplsTunnelHopIndex"))
if mibBuilder.loadTexts: mplsTunnelHopEntry.setStatus('current')
mplsTunnelHopListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 4, 1, 1), MplsPathIndex())
if mibBuilder.loadTexts: mplsTunnelHopListIndex.setStatus('current')
mplsTunnelHopPathOptionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 4, 1, 2), MplsPathIndex())
if mibBuilder.loadTexts: mplsTunnelHopPathOptionIndex.setStatus('current')
mplsTunnelHopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 4, 1, 3), MplsPathIndex())
if mibBuilder.loadTexts: mplsTunnelHopIndex.setStatus('current')
mplsTunnelHopAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ipV4", 1), ("ipV6", 2), ("asNumber", 3), ("lspid", 4))).clone('ipV4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopAddrType.setStatus('current')
mplsTunnelHopIpv4Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 4, 1, 5), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopIpv4Addr.setStatus('current')
mplsTunnelHopIpv4PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 4, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopIpv4PrefixLen.setStatus('current')
mplsTunnelHopIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 4, 1, 7), InetAddressIPv6()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopIpv6Addr.setStatus('current')
mplsTunnelHopIpv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 4, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopIpv6PrefixLen.setStatus('current')
mplsTunnelHopAsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 4, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopAsNumber.setStatus('current')
mplsTunnelHopLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 4, 1, 10), MplsLSPID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopLspId.setStatus('current')
mplsTunnelHopType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strict", 1), ("loose", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopType.setStatus('current')
mplsTunnelHopIncludeExclude = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("include", 1), ("exclude", 2))).clone('include')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopIncludeExclude.setStatus('current')
mplsTunnelHopPathOptionName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 4, 1, 13), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopPathOptionName.setStatus('current')
mplsTunnelHopEntryPathComp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("explicit", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopEntryPathComp.setStatus('current')
mplsTunnelHopRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 4, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopRowStatus.setStatus('current')
mplsTunnelHopStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 4, 1, 16), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopStorageType.setStatus('current')
mplsTunnelResourceIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelResourceIndexNext.setStatus('current')
mplsTunnelResourceTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 6), )
if mibBuilder.loadTexts: mplsTunnelResourceTable.setStatus('current')
mplsTunnelResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 6, 1), ).setIndexNames((0, "HP-SN-MPLS-TE-MIB", "mplsTunnelResourceIndex"))
if mibBuilder.loadTexts: mplsTunnelResourceEntry.setStatus('current')
mplsTunnelResourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: mplsTunnelResourceIndex.setStatus('current')
mplsTunnelResourceMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 6, 1, 2), MplsBitRate()).setUnits('bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelResourceMaxRate.setStatus('current')
mplsTunnelResourceMeanRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 6, 1, 3), MplsBitRate()).setUnits('bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelResourceMeanRate.setStatus('current')
mplsTunnelResourceMaxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 6, 1, 4), MplsBurstSize()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelResourceMaxBurstSize.setStatus('current')
mplsTunnelResourceMeanBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 6, 1, 5), MplsBurstSize()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelResourceMeanBurstSize.setStatus('current')
mplsTunnelResourceExcessBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 6, 1, 6), MplsBurstSize()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelResourceExcessBurstSize.setStatus('current')
mplsTunnelResourceFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unspecified", 1), ("frequent", 2), ("veryFrequent", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelResourceFrequency.setStatus('current')
mplsTunnelResourceWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 6, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelResourceWeight.setStatus('current')
mplsTunnelResourceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 6, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelResourceRowStatus.setStatus('current')
mplsTunnelResourceStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 6, 1, 10), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelResourceStorageType.setStatus('current')
mplsTunnelARHopTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 7), )
if mibBuilder.loadTexts: mplsTunnelARHopTable.setStatus('current')
mplsTunnelARHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 7, 1), ).setIndexNames((0, "HP-SN-MPLS-TE-MIB", "mplsTunnelARHopListIndex"), (0, "HP-SN-MPLS-TE-MIB", "mplsTunnelARHopIndex"))
if mibBuilder.loadTexts: mplsTunnelARHopEntry.setStatus('current')
mplsTunnelARHopListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 7, 1, 1), MplsPathIndex())
if mibBuilder.loadTexts: mplsTunnelARHopListIndex.setStatus('current')
mplsTunnelARHopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 7, 1, 2), MplsPathIndex())
if mibBuilder.loadTexts: mplsTunnelARHopIndex.setStatus('current')
mplsTunnelARHopAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ipV4", 1), ("ipV6", 2), ("asNumber", 3), ("lspId", 4))).clone('ipV4')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelARHopAddrType.setStatus('current')
mplsTunnelARHopIpv4Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 7, 1, 4), InetAddressIPv4()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelARHopIpv4Addr.setStatus('current')
mplsTunnelARHopIpv4PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 7, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelARHopIpv4PrefixLen.setStatus('current')
mplsTunnelARHopIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 7, 1, 6), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelARHopIpv6Addr.setStatus('current')
mplsTunnelARHopIpv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 7, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelARHopIpv6PrefixLen.setStatus('current')
mplsTunnelARHopAsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 7, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelARHopAsNumber.setStatus('current')
mplsTunnelARHopLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 7, 1, 9), MplsLSPID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelARHopLspId.setStatus('current')
mplsTunnelCHopTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 8), )
if mibBuilder.loadTexts: mplsTunnelCHopTable.setStatus('current')
mplsTunnelCHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 8, 1), ).setIndexNames((0, "HP-SN-MPLS-TE-MIB", "mplsTunnelCHopListIndex"), (0, "HP-SN-MPLS-TE-MIB", "mplsTunnelCHopIndex"))
if mibBuilder.loadTexts: mplsTunnelCHopEntry.setStatus('current')
mplsTunnelCHopListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 8, 1, 1), MplsPathIndex())
if mibBuilder.loadTexts: mplsTunnelCHopListIndex.setStatus('current')
mplsTunnelCHopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 8, 1, 2), MplsPathIndex())
if mibBuilder.loadTexts: mplsTunnelCHopIndex.setStatus('current')
mplsTunnelCHopAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ipV4", 1), ("ipV6", 2), ("asNumber", 3), ("lspId", 4))).clone('ipV4')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCHopAddrType.setStatus('current')
mplsTunnelCHopIpv4Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 8, 1, 4), InetAddressIPv4()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCHopIpv4Addr.setStatus('current')
mplsTunnelCHopIpv4PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 8, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCHopIpv4PrefixLen.setStatus('current')
mplsTunnelCHopIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 8, 1, 6), InetAddressIPv6()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCHopIpv6Addr.setStatus('current')
mplsTunnelCHopIpv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 8, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCHopIpv6PrefixLen.setStatus('current')
mplsTunnelCHopAsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 8, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCHopAsNumber.setStatus('current')
mplsTunnelCHopLspId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 8, 1, 9), MplsLSPID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCHopLspId.setStatus('current')
mplsTunnelCHopType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strict", 1), ("loose", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCHopType.setStatus('current')
mplsTunnelPerfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 9), )
if mibBuilder.loadTexts: mplsTunnelPerfTable.setStatus('current')
mplsTunnelPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 9, 1), )
mplsTunnelEntry.registerAugmentions(("HP-SN-MPLS-TE-MIB", "mplsTunnelPerfEntry"))
mplsTunnelPerfEntry.setIndexNames(*mplsTunnelEntry.getIndexNames())
if mibBuilder.loadTexts: mplsTunnelPerfEntry.setStatus('current')
mplsTunnelPerfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 9, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelPerfPackets.setStatus('current')
mplsTunnelPerfHCPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 9, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelPerfHCPackets.setStatus('current')
mplsTunnelPerfErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelPerfErrors.setStatus('current')
mplsTunnelPerfBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelPerfBytes.setStatus('current')
mplsTunnelPerfHCBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 9, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelPerfHCBytes.setStatus('current')
mplsTunnelCRLDPResTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 10), )
if mibBuilder.loadTexts: mplsTunnelCRLDPResTable.setStatus('current')
mplsTunnelCRLDPResEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 10, 1), ).setIndexNames((0, "HP-SN-MPLS-TE-MIB", "mplsTunnelResourceIndex"))
if mibBuilder.loadTexts: mplsTunnelCRLDPResEntry.setStatus('current')
mplsTunnelCRLDPResMeanBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 10, 1, 2), MplsBurstSize()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelCRLDPResMeanBurstSize.setStatus('current')
mplsTunnelCRLDPResExcessBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 10, 1, 3), MplsBurstSize()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelCRLDPResExcessBurstSize.setStatus('current')
mplsTunnelCRLDPResFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unspecified", 1), ("frequent", 2), ("veryFrequent", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelCRLDPResFrequency.setStatus('current')
mplsTunnelCRLDPResWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelCRLDPResWeight.setStatus('current')
mplsTunnelCRLDPResFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelCRLDPResFlags.setStatus('current')
mplsTunnelCRLDPResRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 10, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelCRLDPResRowStatus.setStatus('current')
mplsTunnelCRLDPResStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 10, 1, 8), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelCRLDPResStorageType.setStatus('current')
mplsTunnelTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 2, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mplsTunnelTrapEnable.setStatus('current')
mplsTunnelUp = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 3, 0, 1)).setObjects(("HP-SN-MPLS-TE-MIB", "mplsTunnelAdminStatus"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelOperStatus"))
if mibBuilder.loadTexts: mplsTunnelUp.setStatus('current')
mplsTunnelDown = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 3, 0, 2)).setObjects(("HP-SN-MPLS-TE-MIB", "mplsTunnelAdminStatus"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelOperStatus"))
if mibBuilder.loadTexts: mplsTunnelDown.setStatus('current')
mplsTunnelRerouted = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 3, 0, 3)).setObjects(("HP-SN-MPLS-TE-MIB", "mplsTunnelAdminStatus"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelOperStatus"))
if mibBuilder.loadTexts: mplsTunnelRerouted.setStatus('current')
mplsTunnelReoptimized = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 3, 0, 4)).setObjects(("HP-SN-MPLS-TE-MIB", "mplsTunnelAdminStatus"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelOperStatus"))
if mibBuilder.loadTexts: mplsTunnelReoptimized.setStatus('current')
mplsTeGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 4, 1))
mplsTeCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 4, 2))
mplsTeModuleCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 4, 2, 1)).setObjects(("HP-SN-MPLS-TE-MIB", "mplsTunnelGroup"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelScalarGroup"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelManualGroup"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelSignaledGroup"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelIsNotIntfcGroup"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelIsIntfcGroup"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelOptionalGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTeModuleCompliance = mplsTeModuleCompliance.setStatus('current')
mplsTunnelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 4, 1, 1)).setObjects(("HP-SN-MPLS-TE-MIB", "mplsTunnelIndexNext"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelName"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelDescr"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelOwner"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelXCPointer"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelIfIndex"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelHopTableIndex"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelARHopTableIndex"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelCHopTableIndex"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelAdminStatus"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelOperStatus"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelRowStatus"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelTrapEnable"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelStorageType"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelConfigured"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelActive"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelPrimaryInstance"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelPrimaryTimeUp"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelPathChanges"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelLastPathChange"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelCreationTime"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelStateTransitions"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelIncludeAnyAffinity"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelIncludeAllAffinity"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelExcludeAllAffinity"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelPerfPackets"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelPerfHCPackets"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelPerfErrors"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelPerfBytes"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelPerfHCBytes"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelResourcePointer"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelInstancePriority"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelPathInUse"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelRole"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelTotalUpTime"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelInstanceUpTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTunnelGroup = mplsTunnelGroup.setStatus('current')
mplsTunnelManualGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 4, 1, 2)).setObjects(("HP-SN-MPLS-TE-MIB", "mplsTunnelSignallingProto"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTunnelManualGroup = mplsTunnelManualGroup.setStatus('current')
mplsTunnelSignaledGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 4, 1, 3)).setObjects(("HP-SN-MPLS-TE-MIB", "mplsTunnelSetupPrio"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelHoldingPrio"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelSignallingProto"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelLocalProtectInUse"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelSessionAttributes"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelHopListIndexNext"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelHopAddrType"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelHopIpv4Addr"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelHopIpv4PrefixLen"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelHopIpv6Addr"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelHopIpv6PrefixLen"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelHopAsNumber"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelHopLspId"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelHopType"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelHopIncludeExclude"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelHopPathOptionName"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelHopEntryPathComp"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelHopRowStatus"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelHopStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTunnelSignaledGroup = mplsTunnelSignaledGroup.setStatus('current')
mplsTunnelScalarGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 4, 1, 4)).setObjects(("HP-SN-MPLS-TE-MIB", "mplsTunnelConfigured"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelActive"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelTEDistProto"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelMaxHops"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTunnelScalarGroup = mplsTunnelScalarGroup.setStatus('current')
mplsTunnelIsIntfcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 4, 1, 5)).setObjects(("HP-SN-MPLS-TE-MIB", "mplsTunnelIsIf"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTunnelIsIntfcGroup = mplsTunnelIsIntfcGroup.setStatus('current')
mplsTunnelIsNotIntfcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 4, 1, 6)).setObjects(("HP-SN-MPLS-TE-MIB", "mplsTunnelIsIf"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTunnelIsNotIntfcGroup = mplsTunnelIsNotIntfcGroup.setStatus('current')
mplsTunnelOptionalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 4, 1, 7)).setObjects(("HP-SN-MPLS-TE-MIB", "mplsTunnelResourceIndexNext"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelResourceMaxRate"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelResourceMeanRate"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelResourceMaxBurstSize"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelResourceMeanBurstSize"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelResourceExcessBurstSize"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelResourceFrequency"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelResourceWeight"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelResourceRowStatus"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelResourceStorageType"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelARHopAddrType"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelARHopIpv4Addr"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelARHopIpv4PrefixLen"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelARHopIpv6Addr"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelARHopIpv6PrefixLen"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelARHopAsNumber"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelARHopLspId"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelCHopAddrType"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelCHopIpv4Addr"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelCHopIpv4PrefixLen"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelCHopIpv6Addr"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelCHopIpv6PrefixLen"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelCHopAsNumber"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelCHopLspId"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelCHopType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTunnelOptionalGroup = mplsTunnelOptionalGroup.setStatus('current')
mplsTunnelCRLDPResOptionalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 4, 1, 8)).setObjects(("HP-SN-MPLS-TE-MIB", "mplsTunnelCRLDPResMeanBurstSize"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelCRLDPResExcessBurstSize"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelCRLDPResFrequency"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelCRLDPResWeight"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelCRLDPResFlags"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelCRLDPResRowStatus"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelCRLDPResStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTunnelCRLDPResOptionalGroup = mplsTunnelCRLDPResOptionalGroup.setStatus('current')
mplsTeNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 2, 15, 15, 3, 4, 1, 9)).setObjects(("HP-SN-MPLS-TE-MIB", "mplsTunnelUp"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelDown"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelRerouted"), ("HP-SN-MPLS-TE-MIB", "mplsTunnelReoptimized"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTeNotificationGroup = mplsTeNotificationGroup.setStatus('current')
mibBuilder.exportSymbols("HP-SN-MPLS-TE-MIB", mplsTunnelARHopListIndex=mplsTunnelARHopListIndex, mplsTunnelConfigured=mplsTunnelConfigured, mplsTunnelUp=mplsTunnelUp, mplsTunnelMaxHops=mplsTunnelMaxHops, mplsTunnelHopTable=mplsTunnelHopTable, mplsTunnelARHopAddrType=mplsTunnelARHopAddrType, mplsTunnelResourceRowStatus=mplsTunnelResourceRowStatus, mplsTunnelHopIpv4Addr=mplsTunnelHopIpv4Addr, mplsTunnelIncludeAnyAffinity=mplsTunnelIncludeAnyAffinity, mplsTunnelHopRowStatus=mplsTunnelHopRowStatus, mplsTeNotifyPrefix=mplsTeNotifyPrefix, mplsTunnelOperStatus=mplsTunnelOperStatus, mplsTunnelIndex=mplsTunnelIndex, mplsTunnelCHopAsNumber=mplsTunnelCHopAsNumber, mplsTunnelCRLDPResOptionalGroup=mplsTunnelCRLDPResOptionalGroup, mplsTunnelExcludeAllAffinity=mplsTunnelExcludeAllAffinity, mplsTunnelCHopType=mplsTunnelCHopType, mplsTunnelARHopIpv4Addr=mplsTunnelARHopIpv4Addr, mplsTunnelHopPathOptionName=mplsTunnelHopPathOptionName, mplsTunnelPrimaryTimeUp=mplsTunnelPrimaryTimeUp, mplsTunnelStorageType=mplsTunnelStorageType, mplsTunnelARHopIpv6Addr=mplsTunnelARHopIpv6Addr, mplsTeModuleCompliance=mplsTeModuleCompliance, mplsTunnelOptionalGroup=mplsTunnelOptionalGroup, mplsTunnelCRLDPResEntry=mplsTunnelCRLDPResEntry, mplsTunnelARHopIpv6PrefixLen=mplsTunnelARHopIpv6PrefixLen, mplsTunnelIncludeAllAffinity=mplsTunnelIncludeAllAffinity, mplsTunnelResourceEntry=mplsTunnelResourceEntry, mplsTunnelResourceIndex=mplsTunnelResourceIndex, PYSNMP_MODULE_ID=mplsTeMIB, mplsTunnelEntry=mplsTunnelEntry, mplsTeMIB=mplsTeMIB, mplsTunnelSetupPrio=mplsTunnelSetupPrio, mplsTunnelHopIpv4PrefixLen=mplsTunnelHopIpv4PrefixLen, mplsTunnelPerfEntry=mplsTunnelPerfEntry, mplsTunnelResourceExcessBurstSize=mplsTunnelResourceExcessBurstSize, mplsTunnelStateTransitions=mplsTunnelStateTransitions, mplsTunnelCHopIpv6PrefixLen=mplsTunnelCHopIpv6PrefixLen, mplsTunnelHopListIndexNext=mplsTunnelHopListIndexNext, mplsTunnelCreationTime=mplsTunnelCreationTime, mplsTunnelPathInUse=mplsTunnelPathInUse, mplsTunnelHopIpv6Addr=mplsTunnelHopIpv6Addr, mplsTunnelTEDistProto=mplsTunnelTEDistProto, mplsTunnelHopStorageType=mplsTunnelHopStorageType, mplsTunnelResourceIndexNext=mplsTunnelResourceIndexNext, mplsTunnelIsIf=mplsTunnelIsIf, mplsTunnelManualGroup=mplsTunnelManualGroup, mplsTunnelPerfTable=mplsTunnelPerfTable, mplsTunnelGroup=mplsTunnelGroup, mplsTeGroups=mplsTeGroups, mplsTunnelRowStatus=mplsTunnelRowStatus, mplsTunnelResourceMeanRate=mplsTunnelResourceMeanRate, mplsTunnelCHopIpv4Addr=mplsTunnelCHopIpv4Addr, mplsTeConformance=mplsTeConformance, mplsTunnelResourcePointer=mplsTunnelResourcePointer, mplsTunnelActive=mplsTunnelActive, mplsTunnelIfIndex=mplsTunnelIfIndex, mplsTunnelARHopIndex=mplsTunnelARHopIndex, mplsTunnelIngressLSRId=mplsTunnelIngressLSRId, mplsTunnelHopIncludeExclude=mplsTunnelHopIncludeExclude, mplsTunnelPathChanges=mplsTunnelPathChanges, mplsTunnelCHopTableIndex=mplsTunnelCHopTableIndex, mplsTunnelARHopIpv4PrefixLen=mplsTunnelARHopIpv4PrefixLen, mplsTunnelTrapEnable=mplsTunnelTrapEnable, mplsTunnelCHopAddrType=mplsTunnelCHopAddrType, mplsTunnelDown=mplsTunnelDown, mplsTeObjects=mplsTeObjects, mplsTunnelHopTableIndex=mplsTunnelHopTableIndex, mplsTunnelPerfErrors=mplsTunnelPerfErrors, mplsTunnelInstance=mplsTunnelInstance, mplsTunnelPerfHCPackets=mplsTunnelPerfHCPackets, mplsTunnelPerfPackets=mplsTunnelPerfPackets, mplsTunnelTable=mplsTunnelTable, mplsTunnelCRLDPResFrequency=mplsTunnelCRLDPResFrequency, mplsTunnelHopPathOptionIndex=mplsTunnelHopPathOptionIndex, mplsTunnelIsIntfcGroup=mplsTunnelIsIntfcGroup, mplsTunnelCRLDPResStorageType=mplsTunnelCRLDPResStorageType, mplsTunnelOwner=mplsTunnelOwner, mplsTunnelReoptimized=mplsTunnelReoptimized, mplsTunnelHopIndex=mplsTunnelHopIndex, mplsTunnelHopListIndex=mplsTunnelHopListIndex, mplsTunnelTotalUpTime=mplsTunnelTotalUpTime, mplsTunnelResourceWeight=mplsTunnelResourceWeight, mplsTunnelCRLDPResWeight=mplsTunnelCRLDPResWeight, mplsTunnelCRLDPResFlags=mplsTunnelCRLDPResFlags, mplsTunnelPerfBytes=mplsTunnelPerfBytes, mplsTunnelHoldingPrio=mplsTunnelHoldingPrio, mplsTunnelIsNotIntfcGroup=mplsTunnelIsNotIntfcGroup, mplsTunnelPerfHCBytes=mplsTunnelPerfHCBytes, mplsTunnelCHopIndex=mplsTunnelCHopIndex, mplsTunnelARHopEntry=mplsTunnelARHopEntry, mplsTeScalars=mplsTeScalars, mplsTunnelResourceStorageType=mplsTunnelResourceStorageType, mplsTeCompliances=mplsTeCompliances, mplsTunnelAdminStatus=mplsTunnelAdminStatus, mplsTunnelARHopLspId=mplsTunnelARHopLspId, mplsTunnelCHopEntry=mplsTunnelCHopEntry, mplsTeNotifications=mplsTeNotifications, mplsTunnelCHopTable=mplsTunnelCHopTable, mplsTunnelCHopIpv6Addr=mplsTunnelCHopIpv6Addr, mplsTunnelLastPathChange=mplsTunnelLastPathChange, mplsTunnelHopAddrType=mplsTunnelHopAddrType, mplsTunnelARHopTable=mplsTunnelARHopTable, mplsTunnelHopEntryPathComp=mplsTunnelHopEntryPathComp, mplsTunnelResourceMeanBurstSize=mplsTunnelResourceMeanBurstSize, mplsTunnelEgressLSRId=mplsTunnelEgressLSRId, mplsTunnelResourceMaxRate=mplsTunnelResourceMaxRate, mplsTunnelCRLDPResTable=mplsTunnelCRLDPResTable, mplsTunnelXCPointer=mplsTunnelXCPointer, mplsTunnelSignaledGroup=mplsTunnelSignaledGroup, mplsTunnelCHopLspId=mplsTunnelCHopLspId, mplsTunnelDescr=mplsTunnelDescr, mplsTunnelCRLDPResExcessBurstSize=mplsTunnelCRLDPResExcessBurstSize, mplsTunnelHopEntry=mplsTunnelHopEntry, mplsTunnelResourceTable=mplsTunnelResourceTable, mplsTunnelPrimaryInstance=mplsTunnelPrimaryInstance, mplsTunnelHopType=mplsTunnelHopType, mplsTunnelCHopListIndex=mplsTunnelCHopListIndex, mplsTunnelLocalProtectInUse=mplsTunnelLocalProtectInUse, mplsTunnelResourceFrequency=mplsTunnelResourceFrequency, mplsTunnelIndexNext=mplsTunnelIndexNext, mplsTunnelSignallingProto=mplsTunnelSignallingProto, mplsTunnelHopIpv6PrefixLen=mplsTunnelHopIpv6PrefixLen, mplsTunnelCHopIpv4PrefixLen=mplsTunnelCHopIpv4PrefixLen, mplsTunnelName=mplsTunnelName, mplsTunnelSessionAttributes=mplsTunnelSessionAttributes, mplsTunnelHopLspId=mplsTunnelHopLspId, mplsTunnelInstanceUpTime=mplsTunnelInstanceUpTime, mplsTeNotificationGroup=mplsTeNotificationGroup, mplsTunnelARHopAsNumber=mplsTunnelARHopAsNumber, mplsTunnelARHopTableIndex=mplsTunnelARHopTableIndex, mplsTunnelInstancePriority=mplsTunnelInstancePriority, mplsTunnelHopAsNumber=mplsTunnelHopAsNumber, mplsTunnelRerouted=mplsTunnelRerouted, mplsTunnelResourceMaxBurstSize=mplsTunnelResourceMaxBurstSize, mplsTunnelScalarGroup=mplsTunnelScalarGroup, mplsTunnelCRLDPResMeanBurstSize=mplsTunnelCRLDPResMeanBurstSize, mplsTunnelRole=mplsTunnelRole, mplsTunnelCRLDPResRowStatus=mplsTunnelCRLDPResRowStatus)
