#
# PySNMP MIB module COSINE-ORION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/COSINE-ORION-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:11:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
csOrionMIB, csModules = mibBuilder.importSymbols("COSINE-GLOBAL-REG", "csOrionMIB", "csModules")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, ObjectIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, iso, Counter64, NotificationType, ModuleIdentity, Integer32, Gauge32, MibIdentifier, IpAddress, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ObjectIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "iso", "Counter64", "NotificationType", "ModuleIdentity", "Integer32", "Gauge32", "MibIdentifier", "IpAddress", "Unsigned32")
TestAndIncr, MacAddress, TimeStamp, DisplayString, TruthValue, StorageType, PhysAddress, RowStatus, TextualConvention, TimeInterval = mibBuilder.importSymbols("SNMPv2-TC", "TestAndIncr", "MacAddress", "TimeStamp", "DisplayString", "TruthValue", "StorageType", "PhysAddress", "RowStatus", "TextualConvention", "TimeInterval")
cosineOrionMod = ModuleIdentity((1, 3, 6, 1, 4, 1, 3085, 1, 1, 2))
if mibBuilder.loadTexts: cosineOrionMod.setLastUpdated('0107121701Z')
if mibBuilder.loadTexts: cosineOrionMod.setOrganization('CoSine Communications, Inc.')
class LongDisplayString(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 1024)

class OperStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("operationallyDown", 1), ("initializing", 2), ("operationallyUp", 3), ("faultRecovery", 4), ("testing", 5), ("unknown", 6))

class OperState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("off", 1), ("on", 2))

class PerfCurrentCount(TextualConvention, Gauge32):
    status = 'current'

class PerfIntervalCount(TextualConvention, Gauge32):
    status = 'current'

class PerfTotalCount(TextualConvention, Gauge32):
    status = 'current'

class OrionIfIndex(TextualConvention, Integer32):
    status = 'current'

class AtmVcIdentifier(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class AtmVpIdentifier(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 4095)

class AtmServiceCategory(TextualConvention, Integer32):
    reference = 'ATM Forum Traffic Management Specification, Version 4.0, af-tm-0056.000, June 1996.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("other", 1), ("cbr", 2), ("rtVbr", 3), ("nrtVbr", 4), ("abr", 5), ("ubr", 6))

class SPPBaudRate(TextualConvention, Integer32):
    reference = 'None'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))
    namedValues = NamedValues(("baud50", 1), ("baud75", 2), ("baud110", 3), ("baud134Dot5", 4), ("baud150", 5), ("baud300", 6), ("baud600", 7), ("baud1200", 8), ("baud1800", 9), ("baud2000", 10), ("baud2400", 11), ("baud3600", 12), ("baud3800", 13), ("baud7200", 14), ("baud9600", 15), ("baud19200", 16), ("baud38400", 17), ("baud56000", 18), ("baud128000", 19))

class SPPLoopbackStatus(TextualConvention, Integer32):
    reference = 'None'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("noLoop", 1), ("ccmLoop", 2), ("spLoop", 3))

class SPPModemStatus(TextualConvention, Integer32):
    reference = 'None'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("modemConnected", 1), ("modemNotConnected", 2))

class SPPRedundantStatus(TextualConvention, Integer32):
    reference = 'None'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("master", 1), ("standby", 2))

class EvLogLevel(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 100, 200, 300, 400, 500))
    namedValues = NamedValues(("none", 0), ("critical", 100), ("major", 200), ("minor", 300), ("informational", 400), ("debug", 500))

class EvLogArea(TextualConvention, Integer32):
    status = 'current'

class MplsLabel(TextualConvention, Integer32):
    reference = '1. MPLS Label Stack Encoding, Rosen et al, draft- ietf-mpls-label-encaps-04.txt, April 1999. 2. Use of Label Switching on Frame Relay Networks, Conta et al, draft-ietf-mpls-fr-03.txt, Nov. 1998.'
    status = 'current'

class MplsLsrIdentifier(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class MplsLdpIdentifier(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class MplsLdpLabelTypes(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("generic", 1), ("atm", 2), ("frameRelay", 3))

class MplsLdpGenAddr(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 64)

class MplsAtmVcIdentifier(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(32, 65535)

class InterfaceIndexOrZero(TextualConvention, Integer32):
    reference = 'RFC 2933: Internet Group Management Protocol MIB'
    status = 'current'

class PwVcIndex(TextualConvention, Unsigned32):
    status = 'current'

class PwVcInstance(TextualConvention, Unsigned32):
    status = 'current'

class PwVcID(TextualConvention, Unsigned32):
    status = 'current'

class PwGroupID(TextualConvention, Unsigned32):
    status = 'current'

class SnmpAdminString(TextualConvention, OctetString):
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class IKERadiusAcctUserType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("xauthUserId", 1), ("subjectAltName", 2), ("distinguishedName", 3), ("assignedIPAddress", 4))

csOrionEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1))
csOrionSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2))
csOrionGeneralSys = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 1))
csOrionBoot = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 2))
csOrionLogin = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3))
csOrionModem = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 4))
csOrionConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 5))
csOrionConfigSave = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 5, 1))
csOrionConfigLoad = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 5, 2))
csOrionFileSys = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 6))
csOrionChassisInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 7))
csOrionPortInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3))
csOrionEthInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1))
csOrionDs3Info = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2))
csOrionOc3Info = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3))
csOrionFrInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4))
csAtmInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5))
csPOSInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 6))
csOrionVPNInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4))
csOrionBladeInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5))
csOrionServiceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6))
csOrionAccessListInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1))
csOrionFWInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2))
csOrionPktFilterInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3))
csOrionNatInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4))
csOrionEncryptInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5))
csOrionQueueInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 6))
csOrionPppInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7))
csOrionPptpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 8))
csOrionRadiusInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 9))
csOrionDNSInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 10))
csOrionCiscoHdlcInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 11))
csOrionFRoIPInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12))
csOrionL2tpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13))
csOrionQosInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14))
csOrionDHCPInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15))
csOrionDHCPRelayInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1))
csOrionMlpppInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16))
csOrionPppoeInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17))
csOrionServiceSelectionInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18))
csOrionNBNSInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 19))
csOrionSpfInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 20))
csOrionAAAServiceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21))
csOrionMeter = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22))
csOrionHWControlInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7))
csOrionPowerSupplyControlInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 3))
csOrionStatusPanelControlInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 6))
csOrionTemperatureAirFlowCardInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 7))
csOrionBackplaneInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 8))
csOrionSnmpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9))
csOrionGenSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 1))
csOrionTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 2))
csOrionAcctInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 10))
csOrionStaticConn = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 10, 1))
csOrionDynamicConn = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 10, 2))
csTelnetSvrInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 11))
csOrionSyslogd = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 12))
csOrionHWNotifyInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 13))
csOrionStatusPanelInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 14))
csOrionSystemIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemIpAddress.setStatus('current')
csOrionSystemNetMask = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemNetMask.setStatus('current')
csOrionSystemGatewayAddress = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemGatewayAddress.setStatus('current')
csOrionSystemFwVer = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionSystemFwVer.setStatus('current')
csOrionSystemMajorVer = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionSystemMajorVer.setStatus('current')
csOrionSystemNumberOfBlades = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionSystemNumberOfBlades.setStatus('current')
csOrionSystemTempStatus = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("hot", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionSystemTempStatus.setStatus('current')
csOrionSystemReset = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemReset.setStatus('current')
csOrionSystemTime = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemTime.setStatus('current')
csOrionSystemVersionNum = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionSystemVersionNum.setStatus('current')
csOrionSystemShutdown = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("shutdown", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemShutdown.setStatus('current')
csOrionSystemControlBladeFailOver = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("failover", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemControlBladeFailOver.setStatus('current')
csOrionSystemCLIRadiusAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("radius", 1), ("localDatabase", 2))).clone('localDatabase')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemCLIRadiusAuthentication.setStatus('obsolete')
csOrionSystemBootTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 2, 1), )
if mibBuilder.loadTexts: csOrionSystemBootTable.setStatus('current')
csOrionSystemBootEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 2, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionSystemBootIndex"))
if mibBuilder.loadTexts: csOrionSystemBootEntry.setStatus('current')
csOrionSystemBootIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csOrionSystemBootIndex.setStatus('current')
csOrionSystemBootImageName1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemBootImageName1.setStatus('current')
csOrionSystemBootImageName2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemBootImageName2.setStatus('current')
csOrionSystemBootImageName3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemBootImageName3.setStatus('current')
csOrionSystemBootImageName4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemBootImageName4.setStatus('current')
csOrionSystemBootImageName5 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemBootImageName5.setStatus('current')
csOrionSystemBootImageName6 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemBootImageName6.setStatus('current')
csOrionSystemBootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemBootPort.setStatus('current')
csOrionSystemBootServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 2, 1, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemBootServerAddress.setStatus('current')
csOrionSystemBootLocalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 2, 1, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemBootLocalIpAddr.setStatus('current')
csOrionSystemBootLocalIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 2, 1, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemBootLocalIpMask.setStatus('current')
csOrionSystemBootDefGw = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 2, 1, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemBootDefGw.setStatus('current')
csOrionSystemBootConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 2, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemBootConfig.setStatus('current')
csOrionSystemBootSaveImage = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemBootSaveImage.setStatus('current')
csOrionSystemBootUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 2, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemBootUserName.setStatus('current')
csOrionSystemBootUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 2, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemBootUserPassword.setStatus('current')
csOrionSystemBootInternalNwAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 2, 1, 1, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemBootInternalNwAddr.setStatus('current')
csOrionSystemBootConcurrentDownloads = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 2, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemBootConcurrentDownloads.setStatus('current')
csOrionSystemLoginUserTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 1), )
if mibBuilder.loadTexts: csOrionSystemLoginUserTable.setStatus('current')
csOrionSystemLoginUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionSystemLoginUserName"))
if mibBuilder.loadTexts: csOrionSystemLoginUserEntry.setStatus('current')
csOrionSystemLoginUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80)))
if mibBuilder.loadTexts: csOrionSystemLoginUserName.setStatus('current')
csOrionSystemLoginUserDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionSystemLoginUserDesc.setStatus('current')
csOrionSystemLoginUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionSystemLoginUserPassword.setStatus('current')
csOrionSystemLoginUserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionSystemLoginUserRowStatus.setStatus('current')
csOrionSystemLoginUserOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 1, 1, 5), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionSystemLoginUserOperStatus.setStatus('current')
csOrionSystemLoginRoleTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 2), )
if mibBuilder.loadTexts: csOrionSystemLoginRoleTable.setStatus('current')
csOrionSystemLoginRoleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionSystemLoginRoleName"))
if mibBuilder.loadTexts: csOrionSystemLoginRoleEntry.setStatus('current')
csOrionSystemLoginRoleName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80)))
if mibBuilder.loadTexts: csOrionSystemLoginRoleName.setStatus('current')
csOrionSystemLoginRoleDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionSystemLoginRoleDesc.setStatus('current')
csOrionSystemLoginRoleAccessRights = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 65535)).clone(hexValue="0000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionSystemLoginRoleAccessRights.setStatus('current')
csOrionSystemLoginRoleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionSystemLoginRoleRowStatus.setStatus('current')
csOrionSystemLoginDomainTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 3), )
if mibBuilder.loadTexts: csOrionSystemLoginDomainTable.setStatus('current')
csOrionSystemLoginDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionSystemLoginDomainName"))
if mibBuilder.loadTexts: csOrionSystemLoginDomainEntry.setStatus('current')
csOrionSystemLoginDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80)))
if mibBuilder.loadTexts: csOrionSystemLoginDomainName.setStatus('current')
csOrionSystemLoginDomainDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionSystemLoginDomainDesc.setStatus('current')
csOrionSystemLoginDomainVRList = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 3, 1, 3), LongDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 500))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionSystemLoginDomainVRList.setStatus('current')
csOrionSystemLoginDomainInterfaceList = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 3, 1, 4), LongDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 500))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionSystemLoginDomainInterfaceList.setStatus('current')
csOrionSystemLoginDomainRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionSystemLoginDomainRowStatus.setStatus('current')
csOrionSystemLoginPermTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 4), )
if mibBuilder.loadTexts: csOrionSystemLoginPermTable.setStatus('current')
csOrionSystemLoginPermEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionSystemLoginUserName"), (0, "COSINE-ORION-MIB", "csOrionSystemLoginRoleName"), (0, "COSINE-ORION-MIB", "csOrionSystemLoginDomainName"))
if mibBuilder.loadTexts: csOrionSystemLoginPermEntry.setStatus('current')
csOrionSystemLoginPermRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 4, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionSystemLoginPermRowStatus.setStatus('current')
csOrionSystemLoginServer = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("remote", 1), ("localDatabase", 2))).clone('localDatabase')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemLoginServer.setStatus('current')
csOrionSystemLoginServerListName = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemLoginServerListName.setStatus('current')
csOrionModemControl = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionModemControl.setStatus('current')
csOrionModemBaud = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionModemBaud.setStatus('current')
csOrionModemFlowCtl = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hardware", 1), ("software", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionModemFlowCtl.setStatus('current')
csOrionModemConnectWait = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionModemConnectWait.setStatus('current')
csOrionConfigSaveFileName = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionConfigSaveFileName.setStatus('current')
csOrionConfigSaveStart = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("save", 1), ("none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionConfigSaveStart.setStatus('current')
csOrionConfigSaveStatus = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("saveInProgress", 2), ("saveSuccess", 3), ("saveFailed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionConfigSaveStatus.setStatus('current')
csOrionConfigLoadOutputEnable = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionConfigLoadOutputEnable.setStatus('current')
csOrionFileSysReqTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 6, 1), )
if mibBuilder.loadTexts: csOrionFileSysReqTable.setStatus('current')
csOrionFileSysReqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 6, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionFileSysReqIndex"))
if mibBuilder.loadTexts: csOrionFileSysReqEntry.setStatus('current')
csOrionFileSysReqIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csOrionFileSysReqIndex.setStatus('current')
csOrionFileSysReqType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("dir", 2), ("delete", 3), ("copy", 4), ("rename", 5), ("load", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFileSysReqType.setStatus('current')
csOrionFileSysReqSrcFile = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 6, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFileSysReqSrcFile.setStatus('current')
csOrionFileSysReqDestFile = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 6, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFileSysReqDestFile.setStatus('current')
csOrionFileSysReqStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("opInProgress", 2), ("opSuccess", 3), ("opFailed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFileSysReqStatus.setStatus('current')
csOrionFileSysReqRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 6, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFileSysReqRowStatus.setStatus('current')
csOrionFileSysResultTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 6, 2), )
if mibBuilder.loadTexts: csOrionFileSysResultTable.setStatus('current')
csOrionFileSysResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 6, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionFileSysResultIndex"), (0, "COSINE-ORION-MIB", "csOrionFileSysResultFilename"))
if mibBuilder.loadTexts: csOrionFileSysResultEntry.setStatus('current')
csOrionFileSysResultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csOrionFileSysResultIndex.setStatus('current')
csOrionFileSysResultFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 6, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)))
if mibBuilder.loadTexts: csOrionFileSysResultFilename.setStatus('current')
csOrionFileSysResultFilesize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFileSysResultFilesize.setStatus('current')
csOrionChassisMidplaneID = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 7, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionChassisMidplaneID.setStatus('current')
csOrionChassisType = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ipsx3500", 1), ("ipsx9000", 2), ("ipsx9500", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionChassisType.setStatus('current')
csOrionChassisPacketRingStatus = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noProtection", 1), ("onProtection", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionChassisPacketRingStatus.setStatus('current')
csOrionChassisPacketRingPrimToProtEndpoint = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionChassisPacketRingPrimToProtEndpoint.setStatus('current')
csOrionChassisPacketRingProtToPrimEndpoint = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 7, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionChassisPacketRingProtToPrimEndpoint.setStatus('current')
csOrionChassisPacketRingPrimaryCRC = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionChassisPacketRingPrimaryCRC.setStatus('current')
csOrionChassisPacketRingProtectionCRC = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionChassisPacketRingProtectionCRC.setStatus('current')
csEthTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 1), )
if mibBuilder.loadTexts: csEthTable.setStatus('current')
csEthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csEthSlotIndex"), (0, "COSINE-ORION-MIB", "csEthModuleIndex"), (0, "COSINE-ORION-MIB", "csEthPortIndex"))
if mibBuilder.loadTexts: csEthEntry.setStatus('current')
csEthSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csEthSlotIndex.setStatus('current')
csEthModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csEthModuleIndex.setStatus('current')
csEthPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csEthPortIndex.setStatus('current')
csEthEncapType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("eth", 1), ("ieee", 2), ("snap", 3))).clone('eth')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csEthEncapType.setStatus('current')
csEthAutoneg = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csEthAutoneg.setStatus('current')
csEthDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("half", 1), ("full", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csEthDuplex.setStatus('current')
csEthSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mbps10", 1), ("mbps100", 2), ("mbps1000", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csEthSpeed.setStatus('current')
csEthLinkTestInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csEthLinkTestInterval.setStatus('current')
csEthAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csEthAdminStatus.setStatus('current')
csEthOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 1, 1, 10), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthOperStatus.setStatus('current')
csEthPppoeService = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csEthPppoeService.setStatus('current')
csEthSubIfTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 2), )
if mibBuilder.loadTexts: csEthSubIfTable.setStatus('current')
csEthSubIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csEthSlotIndex"), (0, "COSINE-ORION-MIB", "csEthModuleIndex"), (0, "COSINE-ORION-MIB", "csEthPortIndex"), (0, "COSINE-ORION-MIB", "csEthSubIfChannelIndex"), (0, "COSINE-ORION-MIB", "csEthSubIfIndex"))
if mibBuilder.loadTexts: csEthSubIfEntry.setStatus('current')
csEthSubIfChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)))
if mibBuilder.loadTexts: csEthSubIfChannelIndex.setStatus('current')
csEthSubIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512)))
if mibBuilder.loadTexts: csEthSubIfIndex.setStatus('current')
csEthSubIfVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csEthSubIfVlanId.setStatus('current')
csEthSubIfUserPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csEthSubIfUserPriority.setStatus('current')
csEthSubIfVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csEthSubIfVlanName.setStatus('current')
csEthSubIfAdmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csEthSubIfAdmStatus.setStatus('current')
csEthSubIfOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 2, 1, 7), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthSubIfOpStatus.setStatus('current')
csEthSubIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csEthSubIfRowStatus.setStatus('current')
csEthSubifPppoeService = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csEthSubifPppoeService.setStatus('current')
csDs3ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1), )
if mibBuilder.loadTexts: csDs3ConfigTable.setStatus('current')
csDs3ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csDs3ConfigSlotIndex"), (0, "COSINE-ORION-MIB", "csDs3ConfigModuleIndex"), (0, "COSINE-ORION-MIB", "csDs3ConfigPortIndex"))
if mibBuilder.loadTexts: csDs3ConfigEntry.setStatus('current')
csDs3ConfigSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csDs3ConfigSlotIndex.setStatus('current')
csDs3ConfigModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csDs3ConfigModuleIndex.setStatus('current')
csDs3ConfigPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csDs3ConfigPortIndex.setStatus('current')
csDs3ConfigCableLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 450)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3ConfigCableLength.setStatus('current')
csDs3ConfigFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("cbit", 1), ("m23", 2), ("auto", 3), ("e3Framed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3ConfigFraming.setStatus('current')
csDs3ConfigMdlPath = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3ConfigMdlPath.setStatus('current')
csDs3ConfigMdlIdleSig = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3ConfigMdlIdleSig.setStatus('current')
csDs3ConfigMdlTestSig = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3ConfigMdlTestSig.setStatus('current')
csDs3ConfigMdlEic = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3ConfigMdlEic.setStatus('current')
csDs3ConfigMdlLic = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3ConfigMdlLic.setStatus('current')
csDs3ConfigMdlFic = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3ConfigMdlFic.setStatus('current')
csDs3ConfigMdlUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3ConfigMdlUnit.setStatus('current')
csDs3ConfigMdlPfi = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3ConfigMdlPfi.setStatus('current')
csDs3ConfigMdlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3ConfigMdlPort.setStatus('current')
csDs3ConfigMdlGenerator = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3ConfigMdlGenerator.setStatus('current')
csDs3ConfigTestT1Id = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3ConfigTestT1Id.setStatus('current')
csDs3ConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3ConfigAdminStatus.setStatus('current')
csDs3ConfigOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 18), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3ConfigOperStatus.setStatus('current')
csDs3ConfigClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("line", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3ConfigClockSource.setStatus('current')
csDs3ConfigDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ds3", 1), ("e3", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3ConfigDeviceType.setStatus('current')
csDs3ConfigSendCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ds3SendNoCode", 1), ("ds3SendLineCode", 2), ("ds3SendPayloadCode", 3), ("ds3SendResetCode", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3ConfigSendCode.setStatus('current')
csDs3ConfigLoopbackType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noLoop", 1), ("payloadLoop", 2), ("lineLoop", 3), ("otherLoop", 4), ("inwardLoop", 5), ("dualLoop", 6))).clone('noLoop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3ConfigLoopbackType.setStatus('current')
csDs3ConfigLoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3ConfigLoopbackStatus.setStatus('current')
csDs3ConfigLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3ConfigLineStatus.setStatus('current')
csDs3ConfigTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3ConfigTimeElapsed.setStatus('current')
csDs3ConfigValidInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3ConfigValidInterval.setStatus('current')
csDs3ConfigInvalidInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3ConfigInvalidInterval.setStatus('current')
csDs3ConfigLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ds3Other", 1), ("ds3B3ZS", 2), ("e3HDB3", 3), ("e3NRZ", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3ConfigLineCoding.setStatus('current')
csDs3ConfigNationalBit = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3ConfigNationalBit.setStatus('current')
csDs3Ds1ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 2), )
if mibBuilder.loadTexts: csDs3Ds1ConfigTable.setStatus('current')
csDs3Ds1ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csDs3ConfigSlotIndex"), (0, "COSINE-ORION-MIB", "csDs3ConfigModuleIndex"), (0, "COSINE-ORION-MIB", "csDs3ConfigPortIndex"), (0, "COSINE-ORION-MIB", "csDs3Ds1Id"))
if mibBuilder.loadTexts: csDs3Ds1ConfigEntry.setStatus('current')
csDs3Ds1Id = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28)))
if mibBuilder.loadTexts: csDs3Ds1Id.setStatus('current')
csDs3Ds1Framing = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("esf", 1), ("sf", 2), ("e1CrcMultiframe", 3), ("e1CrcMultiframeFebe", 4), ("e1FrameAlignSignal", 5), ("e1UnFramed", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3Ds1Framing.setStatus('current')
csDs3Ds1YellowAlarmDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3Ds1YellowAlarmDetect.setStatus('current')
csDs3Ds1YellowAlarmGen = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3Ds1YellowAlarmGen.setStatus('current')
csDs3Ds1LineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ami", 1), ("b8zs", 2))).clone('b8zs')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3Ds1LineCode.setStatus('current')
csDs3Ds1InvertData = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3Ds1InvertData.setStatus('current')
csDs3Ds1ClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("line", 2))).clone('internal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3Ds1ClockSource.setStatus('current')
csDs3Ds1Fdl = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3Ds1Fdl.setStatus('current')
csDs3Ds1OperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 2, 1, 9), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1OperStatus.setStatus('current')
csDs3Ds1SendCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ds1SendNoCode", 1), ("ds1SendLineCode", 2), ("ds1SendPayloadCode", 3), ("ds1SendResetCode", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3Ds1SendCode.setStatus('current')
csDs3Ds1LoopbackType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noLoop", 1), ("payloadLoop", 2), ("lineLoop", 3), ("otherLoop", 4), ("inwardLoop", 5), ("dualLoop", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3Ds1LoopbackType.setStatus('current')
csDs3Ds1LoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1LoopbackStatus.setStatus('current')
csDs3Ds1LineConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3Ds1LineConfig.setStatus('current')
csDs3Ds1LineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1LineStatus.setStatus('current')
csDs3E1IntBits = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3E1IntBits.setStatus('current')
csDs3E1NatBits = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3E1NatBits.setStatus('current')
csChDs3Table = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 3), )
if mibBuilder.loadTexts: csChDs3Table.setStatus('current')
csChDs3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csChDs3SlotIndex"), (0, "COSINE-ORION-MIB", "csChDs3ModuleIndex"), (0, "COSINE-ORION-MIB", "csChDs3PortIndex"), (0, "COSINE-ORION-MIB", "csChDs3ChNumber"))
if mibBuilder.loadTexts: csChDs3Entry.setStatus('current')
csChDs3SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 126)))
if mibBuilder.loadTexts: csChDs3SlotIndex.setStatus('current')
csChDs3ModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 126)))
if mibBuilder.loadTexts: csChDs3ModuleIndex.setStatus('current')
csChDs3PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 126)))
if mibBuilder.loadTexts: csChDs3PortIndex.setStatus('current')
csChDs3ChNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)))
if mibBuilder.loadTexts: csChDs3ChNumber.setStatus('current')
csChDs3T1Number = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csChDs3T1Number.setStatus('current')
csChDs3TimeSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csChDs3TimeSlots.setStatus('current')
csChDs3Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("kbps64", 1), ("kbps56", 2))).clone('kbps64')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csChDs3Speed.setStatus('current')
csChDs3Encap = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("ppp", 1), ("frameRelay", 2), ("ciscoHdlc", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csChDs3Encap.setStatus('current')
csChDs3RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 3, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csChDs3RowStatus.setStatus('current')
csChDs3OperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 3, 1, 10), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csChDs3OperStatus.setStatus('current')
csEthStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3), )
if mibBuilder.loadTexts: csEthStatsTable.setStatus('current')
csEthStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csEthSlotIndex"), (0, "COSINE-ORION-MIB", "csEthModuleIndex"), (0, "COSINE-ORION-MIB", "csEthPortIndex"))
if mibBuilder.loadTexts: csEthStatsEntry.setStatus('current')
csEthStatsTxDeferPktsOk = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsTxDeferPktsOk.setStatus('current')
csEthStatsTxColCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsTxColCounts.setStatus('current')
csEthStatsTxScolPktsOk = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsTxScolPktsOk.setStatus('current')
csEthStatsTxMulticCollisionPktsOK = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsTxMulticCollisionPktsOK.setStatus('current')
csEthStatsTx16CollisionCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsTx16CollisionCounts.setStatus('current')
csEthStatsTxLateCollisionCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsTxLateCollisionCounts.setStatus('current')
csEthStatsTx64Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsTx64Pkts.setStatus('current')
csEthStatsTx65To127Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsTx65To127Pkts.setStatus('current')
csEthStatsTx128To255Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsTx128To255Pkts.setStatus('current')
csEthStatsTx256To511Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsTx256To511Pkts.setStatus('current')
csEthStatsTx512To1023Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsTx512To1023Pkts.setStatus('current')
csEthStatsTx1024To1518Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsTx1024To1518Pkts.setStatus('current')
csEthStatsTx1519Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsTx1519Pkts.setStatus('current')
csEthStatsTxPausePktsOk = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsTxPausePktsOk.setStatus('current')
csEthStatsTxErrCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsTxErrCounts.setStatus('current')
csEthStatsTxOctetsBad = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsTxOctetsBad.setStatus('current')
csEthStatsRxRuntCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsRxRuntCounts.setStatus('current')
csEthStatsRxOvfCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsRxOvfCounts.setStatus('current')
csEthStatsRxShortPktsOk = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsRxShortPktsOk.setStatus('current')
csEthStatsRxNormCrcCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsRxNormCrcCounts.setStatus('current')
csEthStatsRxNormAliCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsRxNormAliCounts.setStatus('current')
csEthStatsRxLongPktsCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsRxLongPktsCounts.setStatus('current')
csEthStatsRxLongCrcCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsRxLongCrcCounts.setStatus('current')
csEthStatsRx64Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsRx64Pkts.setStatus('current')
csEthStatsRx65To127Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsRx65To127Pkts.setStatus('current')
csEthStatsRx128To255Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsRx128To255Pkts.setStatus('current')
csEthStatsRx256To511Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsRx256To511Pkts.setStatus('current')
csEthStatsRx512To1023Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsRx512To1023Pkts.setStatus('current')
csEthStatsRx1024To1518Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsRx1024To1518Pkts.setStatus('current')
csEthStatsRx1519Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsRx1519Pkts.setStatus('current')
csEthStatsRxPausePktsOk = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsRxPausePktsOk.setStatus('current')
csEthStatsRxFalsCrcCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsRxFalsCrcCounts.setStatus('current')
csEthStatsRxOctsBad = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsRxOctsBad.setStatus('current')
csEthStatsRxSysErrCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsRxSysErrCounts.setStatus('current')
csEthStatsTx1024Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsTx1024Pkts.setStatus('current')
csEthStatsRx1024Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsRx1024Pkts.setStatus('current')
csDs3StatCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 4), )
if mibBuilder.loadTexts: csDs3StatCurrentTable.setStatus('current')
csDs3StatCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csDs3ConfigSlotIndex"), (0, "COSINE-ORION-MIB", "csDs3ConfigModuleIndex"), (0, "COSINE-ORION-MIB", "csDs3ConfigPortIndex"))
if mibBuilder.loadTexts: csDs3StatCurrentEntry.setStatus('current')
csDs3StatCurrentPESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 4, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatCurrentPESs.setStatus('current')
csDs3StatCurrentPSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 4, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatCurrentPSESs.setStatus('current')
csDs3StatCurrentSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 4, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatCurrentSEFSs.setStatus('current')
csDs3StatCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 4, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatCurrentUASs.setStatus('current')
csDs3StatCurrentLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 4, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatCurrentLCVs.setStatus('current')
csDs3StatCurrentPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 4, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatCurrentPCVs.setStatus('current')
csDs3StatCurrentLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 4, 1, 7), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatCurrentLESs.setStatus('current')
csDs3StatCurrentCCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 4, 1, 8), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatCurrentCCVs.setStatus('current')
csDs3StatCurrentCESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 4, 1, 9), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatCurrentCESs.setStatus('current')
csDs3StatCurrentCSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 4, 1, 10), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatCurrentCSESs.setStatus('current')
csDs3StatCurrentLSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 4, 1, 11), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatCurrentLSESs.setStatus('current')
csDs3StatIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 5), )
if mibBuilder.loadTexts: csDs3StatIntervalTable.setStatus('current')
csDs3StatIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 5, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csDs3ConfigSlotIndex"), (0, "COSINE-ORION-MIB", "csDs3ConfigModuleIndex"), (0, "COSINE-ORION-MIB", "csDs3ConfigPortIndex"), (0, "COSINE-ORION-MIB", "csDs3StatIntervalNumber"))
if mibBuilder.loadTexts: csDs3StatIntervalEntry.setStatus('current')
csDs3StatIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: csDs3StatIntervalNumber.setStatus('current')
csDs3StatIntervalPESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 5, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatIntervalPESs.setStatus('current')
csDs3StatIntervalPSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 5, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatIntervalPSESs.setStatus('current')
csDs3StatIntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 5, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatIntervalSEFSs.setStatus('current')
csDs3StatIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 5, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatIntervalUASs.setStatus('current')
csDs3StatIntervalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 5, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatIntervalLCVs.setStatus('current')
csDs3StatIntervalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 5, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatIntervalPCVs.setStatus('current')
csDs3StatIntervalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 5, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatIntervalLESs.setStatus('current')
csDs3StatIntervalCCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 5, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatIntervalCCVs.setStatus('current')
csDs3StatIntervalCESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 5, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatIntervalCESs.setStatus('current')
csDs3StatIntervalCSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 5, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatIntervalCSESs.setStatus('current')
csDs3StatIntervalLSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 5, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatIntervalLSESs.setStatus('current')
csDs3StatIntervalValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 5, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatIntervalValidData.setStatus('current')
csDs3StatTotalTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 6), )
if mibBuilder.loadTexts: csDs3StatTotalTable.setStatus('current')
csDs3StatTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 6, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csDs3ConfigSlotIndex"), (0, "COSINE-ORION-MIB", "csDs3ConfigModuleIndex"), (0, "COSINE-ORION-MIB", "csDs3ConfigPortIndex"))
if mibBuilder.loadTexts: csDs3StatTotalEntry.setStatus('current')
csDs3StatTotalPESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 6, 1, 1), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatTotalPESs.setStatus('current')
csDs3StatTotalPSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 6, 1, 2), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatTotalPSESs.setStatus('current')
csDs3StatTotalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 6, 1, 3), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatTotalSEFSs.setStatus('current')
csDs3StatTotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 6, 1, 4), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatTotalUASs.setStatus('current')
csDs3StatTotalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 6, 1, 5), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatTotalLCVs.setStatus('current')
csDs3StatTotalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 6, 1, 6), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatTotalPCVs.setStatus('current')
csDs3StatTotalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 6, 1, 7), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatTotalLESs.setStatus('current')
csDs3StatTotalCCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 6, 1, 8), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatTotalCCVs.setStatus('current')
csDs3StatTotalCESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 6, 1, 9), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatTotalCESs.setStatus('current')
csDs3StatTotalCSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 6, 1, 10), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatTotalCSESs.setStatus('current')
csDs3StatTotalLSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 6, 1, 11), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatTotalLSESs.setStatus('current')
csDs3Ds1CurrentTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 7), )
if mibBuilder.loadTexts: csDs3Ds1CurrentTable.setStatus('current')
csDs3Ds1CurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 7, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csDs3ConfigSlotIndex"), (0, "COSINE-ORION-MIB", "csDs3ConfigModuleIndex"), (0, "COSINE-ORION-MIB", "csDs3ConfigPortIndex"), (0, "COSINE-ORION-MIB", "csDs3Ds1Id"))
if mibBuilder.loadTexts: csDs3Ds1CurrentEntry.setStatus('current')
csDs3Ds1CurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 7, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1CurrentESs.setStatus('current')
csDs3Ds1CurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 7, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1CurrentSESs.setStatus('current')
csDs3Ds1CurrentSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 7, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1CurrentSEFSs.setStatus('current')
csDs3Ds1CurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 7, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1CurrentUASs.setStatus('current')
csDs3Ds1CurrentCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 7, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1CurrentCSSs.setStatus('current')
csDs3Ds1CurrentPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 7, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1CurrentPCVs.setStatus('current')
csDs3Ds1CurrentLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 7, 1, 7), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1CurrentLESs.setStatus('current')
csDs3Ds1CurrentBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 7, 1, 8), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1CurrentBESs.setStatus('current')
csDs3Ds1CurrentDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 7, 1, 9), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1CurrentDMs.setStatus('current')
csDs3Ds1CurrentLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 7, 1, 10), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1CurrentLCVs.setStatus('current')
csDs3Ds1IntervalTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 8), )
if mibBuilder.loadTexts: csDs3Ds1IntervalTable.setStatus('current')
csDs3Ds1IntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 8, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csDs3ConfigSlotIndex"), (0, "COSINE-ORION-MIB", "csDs3ConfigModuleIndex"), (0, "COSINE-ORION-MIB", "csDs3ConfigPortIndex"), (0, "COSINE-ORION-MIB", "csDs3Ds1Id"), (0, "COSINE-ORION-MIB", "csDs3Ds1IntervalNumber"))
if mibBuilder.loadTexts: csDs3Ds1IntervalEntry.setStatus('current')
csDs3Ds1IntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: csDs3Ds1IntervalNumber.setStatus('current')
csDs3Ds1IntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 8, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1IntervalESs.setStatus('current')
csDs3Ds1IntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 8, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1IntervalSESs.setStatus('current')
csDs3Ds1IntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 8, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1IntervalSEFSs.setStatus('current')
csDs3Ds1IntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 8, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1IntervalUASs.setStatus('current')
csDs3Ds1IntervalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 8, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1IntervalCSSs.setStatus('current')
csDs3Ds1IntervalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 8, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1IntervalPCVs.setStatus('current')
csDs3Ds1IntervalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 8, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1IntervalLESs.setStatus('current')
csDs3Ds1IntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 8, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1IntervalBESs.setStatus('current')
csDs3Ds1IntervalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 8, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1IntervalDMs.setStatus('current')
csDs3Ds1IntervalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 8, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1IntervalLCVs.setStatus('current')
csDs3Ds1IntervalValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 8, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1IntervalValidData.setStatus('current')
csDs3Ds1TotalTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 9), )
if mibBuilder.loadTexts: csDs3Ds1TotalTable.setStatus('current')
csDs3Ds1TotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 9, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csDs3ConfigSlotIndex"), (0, "COSINE-ORION-MIB", "csDs3ConfigModuleIndex"), (0, "COSINE-ORION-MIB", "csDs3ConfigPortIndex"), (0, "COSINE-ORION-MIB", "csDs3Ds1Id"))
if mibBuilder.loadTexts: csDs3Ds1TotalEntry.setStatus('current')
csDs3Ds1TotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 9, 1, 1), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1TotalESs.setStatus('current')
csDs3Ds1TotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 9, 1, 2), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1TotalSESs.setStatus('current')
csDs3Ds1TotalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 9, 1, 3), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1TotalSEFSs.setStatus('current')
csDs3Ds1TotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 9, 1, 4), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1TotalUASs.setStatus('current')
csDs3Ds1TotalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 9, 1, 5), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1TotalCSSs.setStatus('current')
csDs3Ds1TotalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 9, 1, 6), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1TotalPCVs.setStatus('current')
csDs3Ds1TotalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 9, 1, 7), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1TotalLESs.setStatus('current')
csDs3Ds1TotalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 9, 1, 8), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1TotalBESs.setStatus('current')
csDs3Ds1TotalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 9, 1, 9), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1TotalDMs.setStatus('current')
csDs3Ds1TotalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 9, 1, 10), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1TotalLCVs.setStatus('current')
csUnchanDs3ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10), )
if mibBuilder.loadTexts: csUnchanDs3ConfigTable.setStatus('current')
csUnchanDs3ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csUnchanDs3ConfigSlotIndex"), (0, "COSINE-ORION-MIB", "csUnchanDs3ConfigModuleIndex"), (0, "COSINE-ORION-MIB", "csUnchanDs3ConfigPortIndex"))
if mibBuilder.loadTexts: csUnchanDs3ConfigEntry.setStatus('current')
csUnchanDs3ConfigSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csUnchanDs3ConfigSlotIndex.setStatus('current')
csUnchanDs3ConfigModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csUnchanDs3ConfigModuleIndex.setStatus('current')
csUnchanDs3ConfigPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csUnchanDs3ConfigPortIndex.setStatus('current')
csUnchanDs3ConfigCableLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 450)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csUnchanDs3ConfigCableLength.setStatus('current')
csUnchanDs3ConfigFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("cbit", 1), ("m23", 2), ("auto", 3), ("e3Framed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csUnchanDs3ConfigFraming.setStatus('current')
csUnchanDs3ConfigMdlPath = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csUnchanDs3ConfigMdlPath.setStatus('current')
csUnchanDs3ConfigMdlIdleSig = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csUnchanDs3ConfigMdlIdleSig.setStatus('current')
csUnchanDs3ConfigMdlTestSig = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csUnchanDs3ConfigMdlTestSig.setStatus('current')
csUnchanDs3ConfigMdlEic = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csUnchanDs3ConfigMdlEic.setStatus('current')
csUnchanDs3ConfigMdlLic = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csUnchanDs3ConfigMdlLic.setStatus('current')
csUnchanDs3ConfigMdlFic = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csUnchanDs3ConfigMdlFic.setStatus('current')
csUnchanDs3ConfigMdlUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csUnchanDs3ConfigMdlUnit.setStatus('current')
csUnchanDs3ConfigMdlPfi = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csUnchanDs3ConfigMdlPfi.setStatus('current')
csUnchanDs3ConfigMdlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csUnchanDs3ConfigMdlPort.setStatus('current')
csUnchanDs3ConfigMdlGenerator = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csUnchanDs3ConfigMdlGenerator.setStatus('current')
csUnchanDs3ConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csUnchanDs3ConfigAdminStatus.setStatus('current')
csUnchanDs3ConfigOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 17), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csUnchanDs3ConfigOperStatus.setStatus('current')
csUnchanDs3ConfigClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("line", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csUnchanDs3ConfigClockSource.setStatus('current')
csUnchanDs3ConfigEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("ppp", 1), ("frameRelay", 2), ("ciscoHdlc", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csUnchanDs3ConfigEncap.setStatus('current')
csUnchanDs3ConfigSendCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ds3SendNoCode", 1), ("ds3SendLineCode", 2), ("ds3SendResetCode", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csUnchanDs3ConfigSendCode.setStatus('current')
csUnchanDs3ConfigLoopbackType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noLoop", 1), ("lineLoop", 2), ("otherLoop", 3), ("inwardLoop", 4), ("dualLoop", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csUnchanDs3ConfigLoopbackType.setStatus('current')
csUnchanDs3ConfigLoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csUnchanDs3ConfigLoopbackStatus.setStatus('current')
csUnchanDs3ConfigLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csUnchanDs3ConfigLineStatus.setStatus('current')
csUnchanDs3ConfigTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csUnchanDs3ConfigTimeElapsed.setStatus('current')
csUnchanDs3ConfigValidInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csUnchanDs3ConfigValidInterval.setStatus('current')
csUnchanDs3ConfigInvalidInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csUnchanDs3ConfigInvalidInterval.setStatus('current')
csUnchanDs3ConfigDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ds3", 1), ("e3", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csUnchanDs3ConfigDeviceType.setStatus('current')
csOrionOc3Config = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1))
csOrionOc3Section = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2))
csOrionOc3Line = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3))
csOrionOc3FarEndLine = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 4))
csOrionOc3Path = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5))
csOrionOc3FarEndPath = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 6))
csOrionOc3PosStats = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 7))
csOrionOc3AtmStats = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 8))
csOc3ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1), )
if mibBuilder.loadTexts: csOc3ConfigTable.setStatus('current')
csOc3ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOc3SlotIndex"), (0, "COSINE-ORION-MIB", "csOc3ModuleIndex"), (0, "COSINE-ORION-MIB", "csOc3PortIndex"))
if mibBuilder.loadTexts: csOc3ConfigEntry.setStatus('current')
csOc3SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csOc3SlotIndex.setStatus('current')
csOc3ModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csOc3ModuleIndex.setStatus('current')
csOc3PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csOc3PortIndex.setStatus('current')
csOc3ClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("line", 2))).clone('internal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOc3ClockSource.setStatus('current')
csOc3CrcType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crc16", 1), ("crc32", 2))).clone('crc16')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOc3CrcType.setStatus('current')
csOc3SectionJ0 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hex01", 1), ("hexCC", 2))).clone('hexCC')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOc3SectionJ0.setStatus('current')
csOc3LineS1S0 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oc3c", 1), ("au4", 2))).clone('oc3c')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOc3LineS1S0.setStatus('current')
csOc3PathC2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pos", 1), ("atm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathC2.setStatus('current')
csOc3PathJ1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOc3PathJ1.setStatus('current')
csOc3FarEndJ1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOc3FarEndJ1.setStatus('current')
csOc3Scramble = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOc3Scramble.setStatus('current')
csOc3NearEndPerfMonControl = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOc3NearEndPerfMonControl.setStatus('current')
csOc3FarEndPerfMonControl = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOc3FarEndPerfMonControl.setStatus('current')
csOc3ApsControl = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOc3ApsControl.setStatus('current')
csOc3ApsForce = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("forceToSwitch", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOc3ApsForce.setStatus('current')
csOc3ApsActivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("portOne", 1), ("portTwo", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3ApsActivePort.setStatus('current')
csOc3AlarmControl = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOc3AlarmControl.setStatus('current')
csOc3Loopback = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noLoop", 1), ("facilityLoop", 2), ("terminalLoop", 3))).clone('noLoop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOc3Loopback.setStatus('current')
csOc3AdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOc3AdminStatus.setStatus('current')
csOc3OperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 20), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3OperStatus.setStatus('current')
csOc3TimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3TimeElapsed.setStatus('current')
csOc3ValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3ValidIntervals.setStatus('current')
csOc3InvalidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3InvalidIntervals.setStatus('current')
csOc3PosEncapType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("ppp", 1), ("frameRelay", 2), ("ciscoHdlc", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOc3PosEncapType.setStatus('current')
csOc3PosEmptyCellType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unassigned", 1), ("idle", 2))).clone('unassigned')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOc3PosEmptyCellType.setStatus('deprecated')
csOc3PosMaxPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOc3PosMaxPacketSize.setStatus('current')
csOc3PosOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 27), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PosOperStatus.setStatus('deprecated')
csOc3MediumLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ocNOther", 1), ("ocNShortSingleMode", 2), ("ocNLongSingleMode", 3), ("ocNMultiMode", 4), ("ocNCoax", 5), ("ocNUTP", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3MediumLineType.setStatus('current')
csOc3ReceivedPathJ1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3ReceivedPathJ1.setStatus('current')
csOcNSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mbps155", 1), ("mbps622", 2))).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOcNSpeed.setStatus('current')
csOc3SectionCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 1), )
if mibBuilder.loadTexts: csOc3SectionCurrentTable.setStatus('current')
csOc3SectionCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOc3SlotIndex"), (0, "COSINE-ORION-MIB", "csOc3ModuleIndex"), (0, "COSINE-ORION-MIB", "csOc3PortIndex"))
if mibBuilder.loadTexts: csOc3SectionCurrentEntry.setStatus('current')
csOc3SectionCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3SectionCurrentStatus.setStatus('current')
csOc3SectionCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 1, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3SectionCurrentESs.setStatus('current')
csOc3SectionCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 1, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3SectionCurrentSESs.setStatus('current')
csOc3SectionCurrentSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 1, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3SectionCurrentSEFSs.setStatus('current')
csOc3SectionCurrentCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 1, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3SectionCurrentCVs.setStatus('current')
csOc3SectionIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 2), )
if mibBuilder.loadTexts: csOc3SectionIntervalTable.setStatus('current')
csOc3SectionIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOc3SlotIndex"), (0, "COSINE-ORION-MIB", "csOc3ModuleIndex"), (0, "COSINE-ORION-MIB", "csOc3PortIndex"), (0, "COSINE-ORION-MIB", "csOc3SectionIntervalNumber"))
if mibBuilder.loadTexts: csOc3SectionIntervalEntry.setStatus('current')
csOc3SectionIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: csOc3SectionIntervalNumber.setStatus('current')
csOc3SectionIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 2, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3SectionIntervalESs.setStatus('current')
csOc3SectionIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 2, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3SectionIntervalSESs.setStatus('current')
csOc3SectionIntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 2, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3SectionIntervalSEFSs.setStatus('current')
csOc3SectionIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 2, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3SectionIntervalCVs.setStatus('current')
csOc3SectionIntervalValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3SectionIntervalValidData.setStatus('current')
csOc3SectionDayTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 3), )
if mibBuilder.loadTexts: csOc3SectionDayTable.setStatus('current')
csOc3SectionDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOc3SlotIndex"), (0, "COSINE-ORION-MIB", "csOc3ModuleIndex"), (0, "COSINE-ORION-MIB", "csOc3PortIndex"))
if mibBuilder.loadTexts: csOc3SectionDayEntry.setStatus('current')
csOc3SectionDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 3, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3SectionDayESs.setStatus('current')
csOc3SectionDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 3, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3SectionDaySESs.setStatus('current')
csOc3SectionDaySEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 3, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3SectionDaySEFSs.setStatus('current')
csOc3SectionDayCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 3, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3SectionDayCVs.setStatus('current')
csOc3SectionPrevDayTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 4), )
if mibBuilder.loadTexts: csOc3SectionPrevDayTable.setStatus('current')
csOc3SectionPrevDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOc3SlotIndex"), (0, "COSINE-ORION-MIB", "csOc3ModuleIndex"), (0, "COSINE-ORION-MIB", "csOc3PortIndex"))
if mibBuilder.loadTexts: csOc3SectionPrevDayEntry.setStatus('current')
csOc3SectionPrevDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 4, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3SectionPrevDayESs.setStatus('current')
csOc3SectionPrevDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 4, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3SectionPrevDaySESs.setStatus('current')
csOc3SectionPrevDaySEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 4, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3SectionPrevDaySEFSs.setStatus('current')
csOc3SectionPrevDayCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 4, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3SectionPrevDayCVs.setStatus('current')
csOc3LineCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 1), )
if mibBuilder.loadTexts: csOc3LineCurrentTable.setStatus('current')
csOc3LineCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOc3SlotIndex"), (0, "COSINE-ORION-MIB", "csOc3ModuleIndex"), (0, "COSINE-ORION-MIB", "csOc3PortIndex"))
if mibBuilder.loadTexts: csOc3LineCurrentEntry.setStatus('current')
csOc3LineCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3LineCurrentStatus.setStatus('current')
csOc3LineCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 1, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3LineCurrentESs.setStatus('current')
csOc3LineCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 1, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3LineCurrentSESs.setStatus('current')
csOc3LineCurrentCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 1, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3LineCurrentCVs.setStatus('current')
csOc3LineCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 1, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3LineCurrentUASs.setStatus('current')
csOc3LineCurrentFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 1, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3LineCurrentFCs.setStatus('current')
csOc3LineIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 2), )
if mibBuilder.loadTexts: csOc3LineIntervalTable.setStatus('current')
csOc3LineIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOc3SlotIndex"), (0, "COSINE-ORION-MIB", "csOc3ModuleIndex"), (0, "COSINE-ORION-MIB", "csOc3PortIndex"), (0, "COSINE-ORION-MIB", "csOc3LineIntervalNumber"))
if mibBuilder.loadTexts: csOc3LineIntervalEntry.setStatus('current')
csOc3LineIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: csOc3LineIntervalNumber.setStatus('current')
csOc3LineIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 2, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3LineIntervalESs.setStatus('current')
csOc3LineIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 2, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3LineIntervalSESs.setStatus('current')
csOc3LineIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 2, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3LineIntervalCVs.setStatus('current')
csOc3LineIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 2, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3LineIntervalUASs.setStatus('current')
csOc3LineIntervalValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3LineIntervalValidData.setStatus('current')
csOc3LineIntervalFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 2, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3LineIntervalFCs.setStatus('current')
csOc3LineDayTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 3), )
if mibBuilder.loadTexts: csOc3LineDayTable.setStatus('current')
csOc3LineDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOc3SlotIndex"), (0, "COSINE-ORION-MIB", "csOc3ModuleIndex"), (0, "COSINE-ORION-MIB", "csOc3PortIndex"))
if mibBuilder.loadTexts: csOc3LineDayEntry.setStatus('current')
csOc3LineDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 3, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3LineDayESs.setStatus('current')
csOc3LineDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 3, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3LineDaySESs.setStatus('current')
csOc3LineDayCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 3, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3LineDayCVs.setStatus('current')
csOc3LineDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 3, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3LineDayUASs.setStatus('current')
csOc3LineDayFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 3, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3LineDayFCs.setStatus('current')
csOc3LinePrevDayTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 4), )
if mibBuilder.loadTexts: csOc3LinePrevDayTable.setStatus('current')
csOc3LinePrevDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOc3SlotIndex"), (0, "COSINE-ORION-MIB", "csOc3ModuleIndex"), (0, "COSINE-ORION-MIB", "csOc3PortIndex"))
if mibBuilder.loadTexts: csOc3LinePrevDayEntry.setStatus('current')
csOc3LinePrevDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 4, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3LinePrevDayESs.setStatus('current')
csOc3LinePrevDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 4, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3LinePrevDaySESs.setStatus('current')
csOc3LinePrevDayCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 4, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3LinePrevDayCVs.setStatus('current')
csOc3LinePrevDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 4, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3LinePrevDayUASs.setStatus('current')
csOc3LinePrevDayFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 4, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3LinePrevDayFCs.setStatus('current')
csOc3PathCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 1), )
if mibBuilder.loadTexts: csOc3PathCurrentTable.setStatus('current')
csOc3PathCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOc3SlotIndex"), (0, "COSINE-ORION-MIB", "csOc3ModuleIndex"), (0, "COSINE-ORION-MIB", "csOc3PortIndex"))
if mibBuilder.loadTexts: csOc3PathCurrentEntry.setStatus('current')
csOc3PathCurrentWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sts1", 1), ("sts3cSTM1", 2), ("sts12cSTM4", 3), ("sts24c", 4), ("sts48cSTM16", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathCurrentWidth.setStatus('current')
csOc3PathCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathCurrentStatus.setStatus('current')
csOc3PathCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 1, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathCurrentESs.setStatus('current')
csOc3PathCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 1, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathCurrentSESs.setStatus('current')
csOc3PathCurrentCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 1, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathCurrentCVs.setStatus('current')
csOc3PathCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 1, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathCurrentUASs.setStatus('current')
csOc3PathCurrentFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 1, 1, 7), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathCurrentFCs.setStatus('current')
csOc3PathIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 2), )
if mibBuilder.loadTexts: csOc3PathIntervalTable.setStatus('current')
csOc3PathIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOc3SlotIndex"), (0, "COSINE-ORION-MIB", "csOc3ModuleIndex"), (0, "COSINE-ORION-MIB", "csOc3PortIndex"), (0, "COSINE-ORION-MIB", "csOc3PathIntervalNumber"))
if mibBuilder.loadTexts: csOc3PathIntervalEntry.setStatus('current')
csOc3PathIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: csOc3PathIntervalNumber.setStatus('current')
csOc3PathIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 2, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathIntervalESs.setStatus('current')
csOc3PathIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 2, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathIntervalSESs.setStatus('current')
csOc3PathIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 2, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathIntervalCVs.setStatus('current')
csOc3PathIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 2, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathIntervalUASs.setStatus('current')
csOc3PathIntervalValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathIntervalValidData.setStatus('current')
csOc3PathIntervalFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 2, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathIntervalFCs.setStatus('current')
csOc3PathDayTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 3), )
if mibBuilder.loadTexts: csOc3PathDayTable.setStatus('current')
csOc3PathDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOc3SlotIndex"), (0, "COSINE-ORION-MIB", "csOc3ModuleIndex"), (0, "COSINE-ORION-MIB", "csOc3PortIndex"))
if mibBuilder.loadTexts: csOc3PathDayEntry.setStatus('current')
csOc3PathDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 3, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathDayESs.setStatus('current')
csOc3PathDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 3, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathDaySESs.setStatus('current')
csOc3PathDayCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 3, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathDayCVs.setStatus('current')
csOc3PathDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 3, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathDayUASs.setStatus('current')
csOc3PathDayFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 3, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathDayFCs.setStatus('current')
csOc3PathPrevDayTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 4), )
if mibBuilder.loadTexts: csOc3PathPrevDayTable.setStatus('current')
csOc3PathPrevDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOc3SlotIndex"), (0, "COSINE-ORION-MIB", "csOc3ModuleIndex"), (0, "COSINE-ORION-MIB", "csOc3PortIndex"))
if mibBuilder.loadTexts: csOc3PathPrevDayEntry.setStatus('current')
csOc3PathPrevDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 4, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathPrevDayESs.setStatus('current')
csOc3PathPrevDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 4, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathPrevDaySESs.setStatus('current')
csOc3PathPrevDayCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 4, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathPrevDayCVs.setStatus('current')
csOc3PathPrevDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 4, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathPrevDayUASs.setStatus('current')
csOc3PathPrevDayFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 4, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathPrevDayFCs.setStatus('current')
csOc3PosStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 7, 1), )
if mibBuilder.loadTexts: csOc3PosStatsTable.setStatus('current')
csOc3PosStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 7, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOc3SlotIndex"), (0, "COSINE-ORION-MIB", "csOc3ModuleIndex"), (0, "COSINE-ORION-MIB", "csOc3PortIndex"))
if mibBuilder.loadTexts: csOc3PosStatsEntry.setStatus('current')
csOc3PosRcvBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 7, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PosRcvBytes.setStatus('current')
csOc3PosRcvFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 7, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PosRcvFrames.setStatus('current')
csOc3PosRcvAbortedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 7, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PosRcvAbortedFrames.setStatus('current')
csOc3PosRcvFrameFCSError = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 7, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PosRcvFrameFCSError.setStatus('current')
csOc3PosRcvFrameMinPacketError = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 7, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PosRcvFrameMinPacketError.setStatus('current')
csOc3PosRcvFrameMaxPacketError = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 7, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PosRcvFrameMaxPacketError.setStatus('current')
csOc3PosSentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 7, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PosSentBytes.setStatus('current')
csOc3PosSentFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 7, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PosSentFrames.setStatus('current')
csOc3PosSentFrameUserAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 7, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PosSentFrameUserAborted.setStatus('current')
csOc3PosSentFrameUnderrunAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 7, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PosSentFrameUnderrunAborted.setStatus('current')
csOrionOc3PosStatsEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionOc3PosStatsEnd.setStatus('current')
csOc3AtmCurrentStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 8, 1), )
if mibBuilder.loadTexts: csOc3AtmCurrentStatsTable.setStatus('current')
csOc3AtmCurrentStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 8, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOc3SlotIndex"), (0, "COSINE-ORION-MIB", "csOc3ModuleIndex"), (0, "COSINE-ORION-MIB", "csOc3PortIndex"))
if mibBuilder.loadTexts: csOc3AtmCurrentStatsEntry.setStatus('current')
csOc3AtmCurrentTransmittedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 8, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3AtmCurrentTransmittedCells.setStatus('current')
csOc3AtmCurrentRecievedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 8, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3AtmCurrentRecievedCells.setStatus('current')
csOc3AtmCurrentIdleCells = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 8, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3AtmCurrentIdleCells.setStatus('current')
csOc3AtmCurrentCorrectedHEC = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 8, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3AtmCurrentCorrectedHEC.setStatus('current')
csOc3AtmCurrentUnCorrectedHEC = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 8, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3AtmCurrentUnCorrectedHEC.setStatus('current')
csOc3AtmCurrentStatsTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3AtmCurrentStatsTableEnd.setStatus('current')
csOc3AtmIntervalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 8, 3), )
if mibBuilder.loadTexts: csOc3AtmIntervalStatsTable.setStatus('current')
csOc3AtmIntervalStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 8, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOc3SlotIndex"), (0, "COSINE-ORION-MIB", "csOc3ModuleIndex"), (0, "COSINE-ORION-MIB", "csOc3PortIndex"), (0, "COSINE-ORION-MIB", "csOc3AtmIntervalNumber"))
if mibBuilder.loadTexts: csOc3AtmIntervalStatsEntry.setStatus('current')
csOc3AtmIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: csOc3AtmIntervalNumber.setStatus('current')
csOc3AtmIntervalTransmittedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 8, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3AtmIntervalTransmittedCells.setStatus('current')
csOc3AtmIntervalRecievedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 8, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3AtmIntervalRecievedCells.setStatus('current')
csOc3AtmIntervalIdleCells = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 8, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3AtmIntervalIdleCells.setStatus('current')
csOc3AtmIntervalCorrectedHEC = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 8, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3AtmIntervalCorrectedHEC.setStatus('current')
csOc3AtmIntervalUnCorrectedHEC = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 8, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3AtmIntervalUnCorrectedHEC.setStatus('current')
csOc3AtmIntervalValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 8, 3, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3AtmIntervalValidData.setStatus('current')
csOc3AtmIntervalStatsTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3AtmIntervalStatsTableEnd.setStatus('current')
class DLCI(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 8388607)

csFrDlcmiTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1), )
if mibBuilder.loadTexts: csFrDlcmiTable.setStatus('current')
csFrDlcmiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csFrDlcmiSlot"), (0, "COSINE-ORION-MIB", "csFrDlcmiModule"), (0, "COSINE-ORION-MIB", "csFrDlcmiPort"), (0, "COSINE-ORION-MIB", "csFrDlcmiChannel"))
if mibBuilder.loadTexts: csFrDlcmiEntry.setStatus('current')
csFrDlcmiSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csFrDlcmiSlot.setStatus('current')
csFrDlcmiModule = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csFrDlcmiModule.setStatus('current')
csFrDlcmiPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csFrDlcmiPort.setStatus('current')
csFrDlcmiChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: csFrDlcmiChannel.setStatus('current')
csFrDlcmiState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noLmiConfigured", 1), ("lmiRev1", 2), ("ansiT1617D", 3), ("ansiT1617B", 4), ("itut933A", 5), ("ansiT1617D1994", 6), ("cisco", 7))).clone('ansiT1617D')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csFrDlcmiState.setStatus('current')
csFrDlcmiAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("q921", 1), ("q922March90", 2), ("q922November90", 3), ("q922", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrDlcmiAddress.setStatus('current')
csFrDlcmiAddressLen = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("twoOctets", 2), ("threeOctets", 3), ("fourOctets", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrDlcmiAddressLen.setStatus('current')
csFrDlcmiPollingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: csFrDlcmiPollingInterval.setStatus('current')
csFrDlcmiFullEnquiryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csFrDlcmiFullEnquiryInterval.setStatus('current')
csFrDlcmiErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csFrDlcmiErrorThreshold.setStatus('current')
csFrDlcmiMonitoredEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csFrDlcmiMonitoredEvents.setStatus('current')
csFrDlcmiMaxSupportedVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 12), DLCI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrDlcmiMaxSupportedVCs.setStatus('current')
csFrDlcmiMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonBroadcast", 1), ("broadcast", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrDlcmiMulticast.setStatus('obsolete')
csFrDlcmiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("running", 1), ("fault", 2), ("initializing", 3), ("up", 4), ("down", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrDlcmiStatus.setStatus('current')
csFrDlcmiIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dce", 1), ("dte", 2))).clone('dte')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csFrDlcmiIfType.setStatus('current')
csFrDlcmiBECNFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csFrDlcmiBECNFlowControl.setStatus('current')
csFrDlcmiInjectionManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forced", 1), ("buffered", 2), ("standard", 3))).clone('forced')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csFrDlcmiInjectionManagement.setStatus('current')
csFrDlcmiName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csFrDlcmiName.setStatus('current')
csFrDlcmiLmiDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 19), DLCI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csFrDlcmiLmiDlci.setStatus('current')
csFrDlcmiDceN392 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csFrDlcmiDceN392.setStatus('current')
csFrDlcmiDceN393 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csFrDlcmiDceN393.setStatus('current')
csFrDlcmiDceT392 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csFrDlcmiDceT392.setStatus('current')
csFrDlcmiAsyncEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csFrDlcmiAsyncEnabled.setStatus('current')
csFrCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2), )
if mibBuilder.loadTexts: csFrCircuitTable.setStatus('current')
csFrCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csFrDlcmiSlot"), (0, "COSINE-ORION-MIB", "csFrDlcmiModule"), (0, "COSINE-ORION-MIB", "csFrDlcmiPort"), (0, "COSINE-ORION-MIB", "csFrDlcmiChannel"), (0, "COSINE-ORION-MIB", "csFrCircuitSubIf"))
if mibBuilder.loadTexts: csFrCircuitEntry.setStatus('current')
csFrCircuitSubIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 65535)))
if mibBuilder.loadTexts: csFrCircuitSubIf.setStatus('current')
csFrCircuitDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 2), DLCI()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csFrCircuitDlci.setStatus('current')
csFrCircuitState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("active", 2), ("inactive", 3))).clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csFrCircuitState.setStatus('obsolete')
csFrCircuitReceivedFECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrCircuitReceivedFECNs.setStatus('current')
csFrCircuitReceivedBECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrCircuitReceivedBECNs.setStatus('current')
csFrCircuitSentFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrCircuitSentFrames.setStatus('current')
csFrCircuitSentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrCircuitSentOctets.setStatus('current')
csFrCircuitReceivedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrCircuitReceivedFrames.setStatus('current')
csFrCircuitReceivedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrCircuitReceivedOctets.setStatus('current')
csFrCircuitCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrCircuitCreationTime.setStatus('current')
csFrCircuitLastTimeChange = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrCircuitLastTimeChange.setStatus('current')
csFrCircuitCommittedBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csFrCircuitCommittedBurst.setStatus('current')
csFrCircuitExcessBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(1024)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csFrCircuitExcessBurst.setStatus('current')
csFrCircuitThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csFrCircuitThroughput.setStatus('current')
csFrCircuitMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unicast", 1), ("oneWay", 2), ("twoWay", 3), ("nWay", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrCircuitMulticast.setStatus('obsolete')
csFrCircuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrCircuitType.setStatus('obsolete')
csFrCircuitDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrCircuitDiscards.setStatus('current')
csFrCircuitReceivedDEs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrCircuitReceivedDEs.setStatus('current')
csFrCircuitSentDEs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrCircuitSentDEs.setStatus('current')
csFrCircuitRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 20), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csFrCircuitRemoteIpAddress.setStatus('obsolete')
csFrCircuitRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 21), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csFrCircuitRowStatus.setStatus('current')
csFrCircuitOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 22), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrCircuitOperStatus.setStatus('current')
csFrCircitFwdDlciType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("frDlci", 1), ("froipDlci", 2))).clone('frDlci')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csFrCircitFwdDlciType.setStatus('current')
csFrCircuitFwdLink = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16).clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csFrCircuitFwdLink.setStatus('current')
csFrCircuitRatePolice = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csFrCircuitRatePolice.setStatus('current')
csFrCircuitUpperProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ip", 2), ("ppp", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csFrCircuitUpperProtocol.setStatus('current')
csFrErrTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 3), )
if mibBuilder.loadTexts: csFrErrTable.setStatus('current')
csFrErrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csFrDlcmiSlot"), (0, "COSINE-ORION-MIB", "csFrDlcmiModule"), (0, "COSINE-ORION-MIB", "csFrDlcmiPort"), (0, "COSINE-ORION-MIB", "csFrDlcmiChannel"))
if mibBuilder.loadTexts: csFrErrEntry.setStatus('current')
csFrErrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unknownError", 1), ("receiveShort", 2), ("receiveLong", 3), ("illegalAddress", 4), ("unknownAddress", 5), ("dlcmiProtoErr", 6), ("dlcmiUnknownIE", 7), ("dlcmiSequenceErr", 8), ("dlcmiUnknownRpt", 9), ("noErrorSinceReset", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrErrType.setStatus('current')
csFrErrData = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrErrData.setStatus('current')
csFrErrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 3, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrErrTime.setStatus('current')
csFrErrFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrErrFaults.setStatus('current')
csFrErrFaultTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 3, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrErrFaultTime.setStatus('current')
csFrDlcmiStatTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 4), )
if mibBuilder.loadTexts: csFrDlcmiStatTable.setStatus('current')
csFrDlcmiStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csFrDlcmiSlot"), (0, "COSINE-ORION-MIB", "csFrDlcmiModule"), (0, "COSINE-ORION-MIB", "csFrDlcmiPort"), (0, "COSINE-ORION-MIB", "csFrDlcmiChannel"))
if mibBuilder.loadTexts: csFrDlcmiStatEntry.setStatus('current')
csFrDlcmiStatStatusEnquiries = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrDlcmiStatStatusEnquiries.setStatus('current')
csFrDlcmiStatFullStatusEnquiries = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrDlcmiStatFullStatusEnquiries.setStatus('current')
csFrDlcmiStatStatusResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrDlcmiStatStatusResponses.setStatus('current')
csFrDlcmiStatFullStatusResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrDlcmiStatFullStatusResponses.setStatus('current')
csFrDlcmiStatAsyncUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrDlcmiStatAsyncUpdates.setStatus('current')
csFrDlcmiStatUnknownMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrDlcmiStatUnknownMessages.setStatus('current')
csFrDlcmiStatLostSequences = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrDlcmiStatLostSequences.setStatus('current')
csFrDlcmiStatMissingResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrDlcmiStatMissingResponses.setStatus('current')
csFrDlcmiStatLocalSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrDlcmiStatLocalSequenceNumber.setStatus('current')
csFrDlcmiStatNetSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrDlcmiStatNetSequenceNumber.setStatus('current')
csAtmInterfaceConfTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1), )
if mibBuilder.loadTexts: csAtmInterfaceConfTable.setStatus('current')
csAtmInterfaceConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csAtmInterfaceConfSlotIndex"), (0, "COSINE-ORION-MIB", "csAtmInterfaceConfModuleIndex"), (0, "COSINE-ORION-MIB", "csAtmInterfaceConfPortIndex"))
if mibBuilder.loadTexts: csAtmInterfaceConfEntry.setStatus('current')
csAtmInterfaceConfSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: csAtmInterfaceConfSlotIndex.setStatus('current')
csAtmInterfaceConfModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: csAtmInterfaceConfModuleIndex.setStatus('current')
csAtmInterfaceConfPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: csAtmInterfaceConfPortIndex.setStatus('current')
csAtmInterfaceConfMaxVpcs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmInterfaceConfMaxVpcs.setStatus('current')
csAtmInterfaceConfMaxVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536)).clone(16384)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmInterfaceConfMaxVccs.setStatus('current')
csAtmInterfaceConfVpcs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfVpcs.setStatus('current')
csAtmInterfaceConfVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfVccs.setStatus('current')
csAtmInterfaceConfMaxActiveVpiBits = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmInterfaceConfMaxActiveVpiBits.setStatus('current')
csAtmInterfaceConfCurrentMaxVpiBits = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfCurrentMaxVpiBits.setStatus('current')
csAtmInterfaceConfMaxActiveVciBits = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(14)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmInterfaceConfMaxActiveVciBits.setStatus('current')
csAtmInterfaceConfCurrentMaxVciBits = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfCurrentMaxVciBits.setStatus('current')
csAtmInterfaceConfIlmiVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 12), AtmVpIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmInterfaceConfIlmiVpi.setStatus('current')
csAtmInterfaceConfIlmiVci = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 13), AtmVcIdentifier().clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmInterfaceConfIlmiVci.setStatus('current')
csAtmInterfaceConfMyIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmInterfaceConfMyIfName.setStatus('current')
csAtmInterfaceConfMyNeighbourIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 15), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmInterfaceConfMyNeighbourIpAddress.setStatus('current')
csAtmInterfaceConfMyNeighbourIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmInterfaceConfMyNeighbourIfName.setStatus('current')
csAtmInterfaceConfIlmiVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unsupported", 1), ("version4point0", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfIlmiVersion.setStatus('current')
csAtmInterfaceConfUniType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("public", 1), ("private", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfUniType.setStatus('current')
csAtmInterfaceConfUniVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("version2point0", 1), ("version3point0", 2), ("version3point1", 3), ("version4point0", 4), ("unsupported", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfUniVersion.setStatus('current')
csAtmInterfaceConfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmInterfaceConfAdminStatus.setStatus('current')
csAtmInterfaceConfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 21), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfOperStatus.setStatus('current')
csAtmInterfaceConfIlmiControl = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmInterfaceConfIlmiControl.setStatus('current')
csAtmInterfaceConfIlmiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfIlmiStatus.setStatus('current')
csAtmInterfaceConfEvLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 24), EvLogLevel().clone('major')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmInterfaceConfEvLogLevel.setStatus('current')
csAtmInterfaceConfEvLogArea = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 25), EvLogArea().clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmInterfaceConfEvLogArea.setStatus('current')
csAtmConnTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2), )
if mibBuilder.loadTexts: csAtmConnTable.setStatus('current')
csAtmConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csAtmInterfaceConfSlotIndex"), (0, "COSINE-ORION-MIB", "csAtmInterfaceConfModuleIndex"), (0, "COSINE-ORION-MIB", "csAtmInterfaceConfPortIndex"), (0, "COSINE-ORION-MIB", "csAtmConnChannelIndex"), (0, "COSINE-ORION-MIB", "csAtmConnSubIfIndex"))
if mibBuilder.loadTexts: csAtmConnEntry.setStatus('current')
csAtmConnChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)))
if mibBuilder.loadTexts: csAtmConnChannelIndex.setStatus('current')
csAtmConnSubIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csAtmConnSubIfIndex.setStatus('current')
csAtmConnVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 3), AtmVpIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnVpi.setStatus('current')
csAtmConnVci = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 4), AtmVcIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnVci.setStatus('current')
csAtmConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 5), AtmServiceCategory().clone('ubr')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnType.setStatus('current')
csAtmConnPvcType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pvpc", 1), ("pvcc", 2))).clone('pvcc')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnPvcType.setStatus('current')
csAtmConnPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(175)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnPCR.setStatus('current')
csAtmConnSCR = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(175)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnSCR.setStatus('current')
csAtmConnMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(175)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnMBS.setStatus('current')
csAtmConnICR = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(175)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnICR.setStatus('current')
csAtmConnMCR = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(175)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnMCR.setStatus('current')
csAtmConnOamLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnOamLoopback.setStatus('current')
csAtmConnOamContinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnOamContinuity.setStatus('current')
csAtmConnAal5CpcsTransmitSduSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1744)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnAal5CpcsTransmitSduSize.setStatus('current')
csAtmConnAal5CpcsReceiveSduSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1744)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnAal5CpcsReceiveSduSize.setStatus('current')
csAtmConnEncapType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("llcRoutedEncapsulation", 2), ("vcMultiplexRoutedProtocol", 3), ("llcBridgedEncapsulation", 4), ("vcMultiplexedBridged802dot3", 5))).clone('llcRoutedEncapsulation')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnEncapType.setStatus('current')
csAtmConnKind = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pvc", 1), ("svc", 2), ("spvc", 3))).clone('pvc')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnKind.setStatus('current')
csAtmConnAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnAdminStatus.setStatus('current')
csAtmConnOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 19), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnOperStatus.setStatus('current')
csAtmConnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnRowStatus.setStatus('current')
csAtmConnUpperProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("ip", 2), ("ppp", 3), ("pppoe", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnUpperProtocol.setStatus('current')
csAtmConnArpAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 60)).clone(15)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnArpAgingTime.setStatus('current')
csAtmConnArpCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 64)).clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnArpCacheSize.setStatus('current')
csAtmConnEthernetMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 24), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnEthernetMacAddress.setStatus('current')
csAtmConnEvLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 25), EvLogLevel().clone('major')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmConnEvLogLevel.setStatus('current')
csAtmConnEvLogArea = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 26), EvLogArea().clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmConnEvLogArea.setStatus('current')
csAtmConnInArpAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 60)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmConnInArpAgingTime.setStatus('current')
csAtmConnInArpManageVc = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmConnInArpManageVc.setStatus('current')
csAtmConnInArpManageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnInArpManageStatus.setStatus('current')
csAtmConnInArpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmConnInArpAdminStatus.setStatus('current')
csAtmConnOamLoopbackRetryPvcUpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmConnOamLoopbackRetryPvcUpCount.setStatus('current')
csAtmConnOamLoopbackRetryPvcUpRetryDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmConnOamLoopbackRetryPvcUpRetryDelay.setStatus('current')
csAtmConnOamLoopbackRetryPvcUpAge = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 1440)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmConnOamLoopbackRetryPvcUpAge.setStatus('current')
csAtmConnOamLoopbackRetryPvcDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmConnOamLoopbackRetryPvcDownCount.setStatus('current')
csAtmConnOamLoopbackRetryPvcDownRetryDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmConnOamLoopbackRetryPvcDownRetryDelay.setStatus('current')
csAtmConnOamLoopbackRetryPvcDownAge = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 1440)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmConnOamLoopbackRetryPvcDownAge.setStatus('current')
csAtmConnOamLoopbackManageVc = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmConnOamLoopbackManageVc.setStatus('current')
csAtmConnOamLoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnOamLoopbackStatus.setStatus('current')
csAtmConnDynamicArpCacheTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 3), )
if mibBuilder.loadTexts: csAtmConnDynamicArpCacheTable.setStatus('current')
csAtmConnDynamicArpCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csAtmInterfaceConfSlotIndex"), (0, "COSINE-ORION-MIB", "csAtmInterfaceConfModuleIndex"), (0, "COSINE-ORION-MIB", "csAtmInterfaceConfPortIndex"), (0, "COSINE-ORION-MIB", "csAtmConnChannelIndex"), (0, "COSINE-ORION-MIB", "csAtmConnSubIfIndex"), (0, "COSINE-ORION-MIB", "csAtmConnDynamicArpCacheIpAddress"))
if mibBuilder.loadTexts: csAtmConnDynamicArpCacheEntry.setStatus('current')
csAtmConnDynamicArpCacheIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: csAtmConnDynamicArpCacheIpAddress.setStatus('current')
csAtmConnDynamicArpCacheMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnDynamicArpCacheMacAddress.setStatus('current')
csAtmConnDynamicArpCacheRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 3, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmConnDynamicArpCacheRowStatus.setStatus('current')
csAtmConnStaticArpCacheTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 4), )
if mibBuilder.loadTexts: csAtmConnStaticArpCacheTable.setStatus('current')
csAtmConnStaticArpCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csAtmInterfaceConfSlotIndex"), (0, "COSINE-ORION-MIB", "csAtmInterfaceConfModuleIndex"), (0, "COSINE-ORION-MIB", "csAtmInterfaceConfPortIndex"), (0, "COSINE-ORION-MIB", "csAtmConnChannelIndex"), (0, "COSINE-ORION-MIB", "csAtmConnSubIfIndex"), (0, "COSINE-ORION-MIB", "csAtmConnStaticArpCacheIpAddress"))
if mibBuilder.loadTexts: csAtmConnStaticArpCacheEntry.setStatus('current')
csAtmConnStaticArpCacheIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 4, 1, 1), IpAddress())
if mibBuilder.loadTexts: csAtmConnStaticArpCacheIpAddress.setStatus('current')
csAtmConnStaticArpCacheMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 4, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnStaticArpCacheMacAddress.setStatus('current')
csAtmConnStaticArpCacheRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnStaticArpCacheRowStatus.setStatus('current')
csAtmConnIpAddressTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 5), )
if mibBuilder.loadTexts: csAtmConnIpAddressTable.setStatus('current')
csAtmConnIpAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 5, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csAtmInterfaceConfSlotIndex"), (0, "COSINE-ORION-MIB", "csAtmInterfaceConfModuleIndex"), (0, "COSINE-ORION-MIB", "csAtmInterfaceConfPortIndex"), (0, "COSINE-ORION-MIB", "csAtmConnChannelIndex"), (0, "COSINE-ORION-MIB", "csAtmConnSubIfIndex"), (0, "COSINE-ORION-MIB", "csAtmConnIpAddressIpAddress"))
if mibBuilder.loadTexts: csAtmConnIpAddressEntry.setStatus('current')
csAtmConnIpAddressIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 5, 1, 1), IpAddress())
if mibBuilder.loadTexts: csAtmConnIpAddressIpAddress.setStatus('current')
csAtmConnIpAddressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnIpAddressRowStatus.setStatus('current')
csAtmConnIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nonProxyIp", 1), ("proxyIp", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnIpAddressType.setStatus('current')
csAtmConnIpAddressTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnIpAddressTableEnd.setStatus('current')
csAtmInterfaceConfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7), )
if mibBuilder.loadTexts: csAtmInterfaceConfStatsTable.setStatus('current')
csAtmInterfaceConfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csAtmInterfaceConfSlotIndex"), (0, "COSINE-ORION-MIB", "csAtmInterfaceConfModuleIndex"), (0, "COSINE-ORION-MIB", "csAtmInterfaceConfPortIndex"))
if mibBuilder.loadTexts: csAtmInterfaceConfStatsEntry.setStatus('current')
csAtmInterfaceConfTransmittedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfTransmittedPackets.setStatus('current')
csAtmInterfaceConfTransmittedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfTransmittedBytes.setStatus('current')
csAtmInterfaceConfTransmitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfTransmitErrors.setStatus('current')
csAtmInterfaceConfTransmitOperationallyDown = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfTransmitOperationallyDown.setStatus('current')
csAtmInterfaceConfTransmitQueueFull = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfTransmitQueueFull.setStatus('current')
csAtmInterfaceConfTransmitBadLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfTransmitBadLength.setStatus('current')
csAtmInterfaceConfTransmitIncomplete = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfTransmitIncomplete.setStatus('current')
csAtmInterfaceConfTransmitVcNotOpened = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfTransmitVcNotOpened.setStatus('current')
csAtmInterfaceConfReceivedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedPackets.setStatus('current')
csAtmInterfaceConfReceivedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedBytes.setStatus('current')
csAtmInterfaceConfReceivedEncapsulationErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedEncapsulationErrors.setStatus('current')
csAtmInterfaceConfReceivedUnknownProtocolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedUnknownProtocolErrors.setStatus('current')
csAtmInterfaceConfReceivedGenericErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedGenericErrors.setStatus('current')
csAtmInterfaceConfReceivedOperationallyDown = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedOperationallyDown.setStatus('current')
csAtmInterfaceConfReceivedDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedDroppedPkts.setStatus('current')
csAtmInterfaceConfReceivedBufferAllocationFail = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedBufferAllocationFail.setStatus('current')
csAtmInterfaceConfReceivedBadVc = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedBadVc.setStatus('current')
csAtmInterfaceConfReceivedBadAalType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedBadAalType.setStatus('current')
csAtmInterfaceConfReceivedBadAalLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedBadAalLength.setStatus('current')
csAtmInterfaceConfReceivedCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedCRCErrors.setStatus('current')
csAtmInterfaceConfReceivedDroppedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedDroppedCells.setStatus('current')
csAtmInterfaceConfReceivedInvalidVpiVciCells = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedInvalidVpiVciCells.setStatus('current')
csAtmInterfaceConfTransmittedOamLoopBackRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfTransmittedOamLoopBackRequests.setStatus('current')
csAtmInterfaceConfReceivedOamLoopBackResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedOamLoopBackResponses.setStatus('current')
csAtmInterfaceConfRespondedOAMLoopBackRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfRespondedOAMLoopBackRequests.setStatus('current')
csAtmInterfaceConfOamLoopBackTransmitFail = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfOamLoopBackTransmitFail.setStatus('current')
csAtmInterfaceConfTransmitCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfTransmitCollisions.setStatus('current')
csAtmInterfaceConfTransmittedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfTransmittedCells.setStatus('current')
csAtmInterfaceReceivedBadAAL5HdrTrailers = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceReceivedBadAAL5HdrTrailers.setStatus('current')
csAtmInterfaceReceivedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceReceivedCells.setStatus('current')
csAtmInterfaceConfStatsTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfStatsTableEnd.setStatus('current')
csAtmConnStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9), )
if mibBuilder.loadTexts: csAtmConnStatsTable.setStatus('current')
csAtmConnStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csAtmInterfaceConfSlotIndex"), (0, "COSINE-ORION-MIB", "csAtmInterfaceConfModuleIndex"), (0, "COSINE-ORION-MIB", "csAtmInterfaceConfPortIndex"), (0, "COSINE-ORION-MIB", "csAtmConnChannelIndex"), (0, "COSINE-ORION-MIB", "csAtmConnSubIfIndex"))
if mibBuilder.loadTexts: csAtmConnStatsEntry.setStatus('current')
csAtmConnTransmittedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnTransmittedPackets.setStatus('current')
csAtmConnTransmittedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnTransmittedBytes.setStatus('current')
csAtmConnTransmitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnTransmitErrors.setStatus('current')
csAtmConnTransmitOperationallyDown = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnTransmitOperationallyDown.setStatus('current')
csAtmConnTransmitQueueFull = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnTransmitQueueFull.setStatus('current')
csAtmConnTransmitBadLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnTransmitBadLength.setStatus('current')
csAtmConnReceivedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnReceivedPackets.setStatus('current')
csAtmConnReceivedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnReceivedBytes.setStatus('current')
csAtmConnReceivedEncapsulationErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnReceivedEncapsulationErrors.setStatus('current')
csAtmConnReceivedUnknownProtocolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnReceivedUnknownProtocolErrors.setStatus('current')
csAtmConnReceivedGenericErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnReceivedGenericErrors.setStatus('current')
csAtmConnReceivedOperationallyDown = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnReceivedOperationallyDown.setStatus('current')
csAtmConnReceivedDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnReceivedDroppedPkts.setStatus('current')
csAtmConnReceivedBufferAllocationFail = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnReceivedBufferAllocationFail.setStatus('current')
csAtmConnReceivedBadAalType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnReceivedBadAalType.setStatus('current')
csAtmConnReceivedBadAalLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnReceivedBadAalLength.setStatus('current')
csAtmConnReceivedCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnReceivedCRCErrors.setStatus('current')
csAtmConnTransmittedOamLoopBackRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnTransmittedOamLoopBackRequests.setStatus('current')
csAtmConnReceivedOamLoopBackResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnReceivedOamLoopBackResponses.setStatus('current')
csAtmConnRespondedOAMLoopBackRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnRespondedOAMLoopBackRequests.setStatus('current')
csAtmConnOamLoopBackTransmitFail = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnOamLoopBackTransmitFail.setStatus('current')
csAtmConnTransmittedArpRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnTransmittedArpRequests.setStatus('current')
csAtmConnTransmittedArpResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnTransmittedArpResponses.setStatus('current')
csAtmConnReceivedArpRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnReceivedArpRequests.setStatus('current')
csAtmConnReceivedArpResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnReceivedArpResponses.setStatus('current')
csAtmConnUnRespondedArpRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnUnRespondedArpRequests.setStatus('current')
csAtmConnArpErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnArpErrors.setStatus('current')
csAtmConnTransmittedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnTransmittedCells.setStatus('current')
csAtmConnTransmitDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnTransmitDroppedPkts.setStatus('current')
csAtmConnReceivedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnReceivedCells.setStatus('current')
csAtmConnStatsTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnStatsTableEnd.setStatus('current')
csAtmConnInArpStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 11), )
if mibBuilder.loadTexts: csAtmConnInArpStatisticsTable.setStatus('current')
csAtmConnInArpStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 11, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csAtmInterfaceConfSlotIndex"), (0, "COSINE-ORION-MIB", "csAtmInterfaceConfModuleIndex"), (0, "COSINE-ORION-MIB", "csAtmInterfaceConfPortIndex"), (0, "COSINE-ORION-MIB", "csAtmConnChannelIndex"), (0, "COSINE-ORION-MIB", "csAtmConnSubIfIndex"))
if mibBuilder.loadTexts: csAtmConnInArpStatisticsEntry.setStatus('current')
csAtmConnInArpInReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 11, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnInArpInReqs.setStatus('current')
csAtmConnInArpOutReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 11, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnInArpOutReqs.setStatus('current')
csAtmConnInArpInReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 11, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnInArpInReplies.setStatus('current')
csAtmConnInArpOutReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 11, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnInArpOutReplies.setStatus('current')
csAtmConnInArpInvalidInReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 11, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnInArpInvalidInReqs.setStatus('current')
csAtmConnInArpInvalidOutReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 11, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnInArpInvalidOutReqs.setStatus('current')
csAtmConnInArpGenericErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 11, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnInArpGenericErrors.setStatus('current')
csAtmConnInArpStatisticsTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnInArpStatisticsTableEnd.setStatus('current')
csPosInterfaceConfTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 6, 1), )
if mibBuilder.loadTexts: csPosInterfaceConfTable.setStatus('deprecated')
csPosInterfaceConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 6, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csPosInterfaceConfSlotIndex"), (0, "COSINE-ORION-MIB", "csPosInterfaceConfModuleIndex"), (0, "COSINE-ORION-MIB", "csPosInterfaceConfPortIndex"))
if mibBuilder.loadTexts: csPosInterfaceConfEntry.setStatus('deprecated')
csPosInterfaceConfSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: csPosInterfaceConfSlotIndex.setStatus('deprecated')
csPosInterfaceConfModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: csPosInterfaceConfModuleIndex.setStatus('deprecated')
csPosInterfaceConfPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: csPosInterfaceConfPortIndex.setStatus('deprecated')
csPosEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("hdlc", 2), ("ppp", 3), ("frameRelay", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csPosEncapsulation.setStatus('deprecated')
csPosAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csPosAdminStatus.setStatus('current')
csPosOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 6, 1, 1, 6), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPosOperStatus.setStatus('deprecated')
csOrionVPNGeneralInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 1))
csOrionVPNVRouterInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2))
csOrionVPNNotifyInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 3))
csOrionVPNServerInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 4))
csOrionVPNTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 1, 1), )
if mibBuilder.loadTexts: csOrionVPNTable.setStatus('current')
csOrionVPNEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 1, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"))
if mibBuilder.loadTexts: csOrionVPNEntry.setStatus('current')
csOrionGlobalVPNIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionGlobalVPNIndex.setStatus('current')
csOrionVPNName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 1, 1, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNName.setStatus('current')
csOrionVPNRadiusSvrList = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 1, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNRadiusSvrList.setStatus('obsolete')
csOrionVPNDNSSvrList = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 1, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNDNSSvrList.setStatus('obsolete')
csOrionVPNRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 1, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNRowStatus.setStatus('current')
csOrionVPNOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 1, 1, 1, 6), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNOperStatus.setStatus('current')
csOrionVrGeneralInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1))
csRtgPolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2))
csOrionPing = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3))
csOrionPingCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 1))
csOrionPingResults = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 2))
csOrionTraceRoute = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 4))
csOrionVIfInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2))
csOrionIp = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3))
csOrionOspf = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4))
csOspfConf = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1))
csOspfTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 2))
csOrionRip = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5))
csRipStats = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 1))
csRipConf = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2))
csOrionTcp = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6))
csOrionUdp = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 7))
csOrionBgp = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8))
csBgpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 1))
csBgpConf = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2))
csBgpGen = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1))
csBgpNbr = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2))
csBgpPol = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 3))
csBgpConfed = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 4))
csBgpNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 5))
csBgpNbrGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6))
csOrionIsis = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9))
csIsisSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1))
csIsisCirc = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2))
csIsisISAdj = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3))
csIsisReachAdddr = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 4))
csIsisIPReachAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 5))
csOrionMpls = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10))
csTeRsvpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1))
csTeMplsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2))
csTeLdpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3))
csOrionPPVpn = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11))
csOrionPPVpnObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11, 1))
csOrionPbf = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 12))
csOrionIgmp = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13))
csIgmpMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1))
csOrionPWE3 = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14))
csOrionPWE3Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1))
csOrionVPNVRouterTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 1), )
if mibBuilder.loadTexts: csOrionVPNVRouterTable.setStatus('current')
csOrionVPNVRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionVPNVRouterEntry.setStatus('current')
csOrionVPNVRouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterIndex.setStatus('current')
csOrionVPNVRouterName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 1, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterName.setStatus('current')
csOrionVPNVRouterIpForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forwarding", 1), ("not-forwarding", 2))).clone('forwarding')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterIpForwarding.setStatus('current')
csOrionVPNVRouterIpDefaultTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterIpDefaultTTL.setStatus('current')
csOrionVPNVRouterIpReasmTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterIpReasmTimeout.setStatus('current')
csOrionVPNVRouterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterRowStatus.setStatus('current')
csOrionVPNVRouterOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 1, 1, 9), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterOperStatus.setStatus('current')
csOrionVPNVRouterLocations = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterLocations.setStatus('current')
csOrionVPNVRouterType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("customerVr", 1), ("controlVr", 2), ("serviceProviderVr", 3))).clone('customerVr')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterType.setStatus('current')
csOrionVPNVRouterIpDecTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterIpDecTtl.setStatus('current')
csOrionVPNVRouterIpDsByte = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256)).clone(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterIpDsByte.setStatus('current')
csOrionVPNVRouterOperLocations = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterOperLocations.setStatus('current')
csOrionVPNVRouterDenyPktFilterEvlogStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterDenyPktFilterEvlogStatus.setStatus('current')
csOrionVPNVRouterBackupPEs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVPNVRouterBackupPEs.setStatus('current')
csOrionVPNVRouterFailOver = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 1, 1, 17), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVPNVRouterFailOver.setStatus('current')
csOrionVPNVRouterAbortFailOver = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 1, 1, 18), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVPNVRouterAbortFailOver.setStatus('current')
csOrionVPNVRouterFailbackToPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 1, 1, 19), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVPNVRouterFailbackToPrimary.setStatus('current')
csOrionVPNVRouterCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterCreationTime.setStatus('current')
csOrionVPNVRouterUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterUpTime.setStatus('current')
csImpPolTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 1), )
if mibBuilder.loadTexts: csImpPolTable.setStatus('current')
csImpPolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csImpPolId"))
if mibBuilder.loadTexts: csImpPolEntry.setStatus('current')
csImpPolId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csImpPolId.setStatus('current')
csImpPolGenAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csImpPolGenAclId.setStatus('current')
csImpPolPeerAS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csImpPolPeerAS.setStatus('current')
csImpPolHomeAS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csImpPolHomeAS.setStatus('current')
csImpPolOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("igp", 2), ("egp", 3), ("any", 4))).clone('any')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csImpPolOrigin.setStatus('current')
csImpPolAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csImpPolAction.setStatus('current')
csImpPolPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csImpPolPreference.setStatus('current')
csImpPolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csImpPolRowStatus.setStatus('current')
csImpPolBgpCommunity1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 1, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csImpPolBgpCommunity1.setStatus('current')
csExpPolTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 2), )
if mibBuilder.loadTexts: csExpPolTable.setStatus('current')
csExpPolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csExpPolId"))
if mibBuilder.loadTexts: csExpPolEntry.setStatus('current')
csExpPolId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csExpPolId.setStatus('current')
csExpPolGenAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpPolGenAclId.setStatus('current')
csExpPolPeerAS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpPolPeerAS.setStatus('current')
csExpPolProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("all", 1), ("local", 2), ("bgp", 3), ("rip", 4), ("ospf", 5), ("static", 6), ("i-bgp", 7), ("ospf-ext", 8), ("isis", 9), ("aggregate", 10), ("dial-ppp", 11), ("dial-ipsec", 12))).clone('all')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpPolProtocol.setStatus('current')
csExpPolEgpAS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpPolEgpAS.setStatus('obsolete')
csExpPolBgpAS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpPolBgpAS.setStatus('current')
csExpPolExtRteTag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 2, 1, 7), Integer32().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpPolExtRteTag.setStatus('current')
csExpPolRipIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 2, 1, 8), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpPolRipIp.setStatus('current')
csExpPolRipNbrIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 2, 1, 9), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpPolRipNbrIp.setStatus('current')
csExpPolAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("export", 1), ("block", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpPolAction.setStatus('current')
csExpPolMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpPolMetric.setStatus('current')
csExpPolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 2, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpPolRowStatus.setStatus('current')
csExpPolBgpCommunity1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 2, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpPolBgpCommunity1.setStatus('current')
csExpPolBgpCommunity2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 2, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpPolBgpCommunity2.setStatus('current')
csExpPolRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("any", 0), ("isislevel1", 1), ("isislevel2", 2), ("isislevel12", 3), ("ospfinternal", 4), ("ospfexternal", 5), ("ospfexternal1", 6), ("ospfexternal2", 7))).clone('any')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpPolRouteType.setStatus('current')
csExpPolMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("any", 0), ("ospftype1", 1), ("ospftype2", 2), ("isisinternal", 3), ("isisexternal", 4))).clone('any')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpPolMetricType.setStatus('current')
csExpPolLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("any", 0), ("isislevel1", 1), ("isislevel2", 2), ("isislevel12", 3), ("ospfstubarea", 4), ("ospfbackbone", 5))).clone('any')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpPolLevel.setStatus('current')
csExpPolTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csExpPolTableEnd.setStatus('current')
csRtPolicyTermTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4), )
if mibBuilder.loadTexts: csRtPolicyTermTable.setStatus('current')
csRtPolicyTermEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csRtPolicyName"), (0, "COSINE-ORION-MIB", "csRtPolicyTermName"))
if mibBuilder.loadTexts: csRtPolicyTermEntry.setStatus('current')
csRtPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: csRtPolicyName.setStatus('current')
csRtPolicyTermName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: csRtPolicyTermName.setStatus('current')
csRtPolicyTermSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermSeqNum.setStatus('current')
csRtPolicyTermFromBgpASPathName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermFromBgpASPathName.setStatus('current')
csRtPolicyTermFromVpnRouteTargetNamesListFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 5), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRtPolicyTermFromVpnRouteTargetNamesListFlag.setStatus('current')
csRtPolicyTermFromVpnSoo = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermFromVpnSoo.setStatus('current')
csRtPolicyTermFromVpnRd = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermFromVpnRd.setStatus('current')
csRtPolicyTermFromBgpCommNamesListFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 8), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRtPolicyTermFromBgpCommNamesListFlag.setStatus('current')
csRtPolicyTermFromBgpLocalPref = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermFromBgpLocalPref.setStatus('current')
csRtPolicyTermFromBgpOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("incomplete", 1), ("igp", 2), ("egp", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermFromBgpOrigin.setStatus('current')
csRtPolicyTermFromIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 11), Integer32().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermFromIntfIndex.setStatus('current')
csRtPolicyTermFromIntfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 12), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermFromIntfAddr.setStatus('current')
csRtPolicyTermFromIsisLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("level1", 1), ("level2", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermFromIsisLevel.setStatus('current')
csRtPolicyTermFromIsisMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("internal", 3), ("external", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermFromIsisMetricType.setStatus('current')
csRtPolicyTermFromMetric1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermFromMetric1.setStatus('current')
csRtPolicyTermFromMetric2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermFromMetric2.setStatus('current')
csRtPolicyTermFromNbrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 17), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermFromNbrAddr.setStatus('current')
csRtPolicyTermFromNbrGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermFromNbrGroupName.setStatus('current')
csRtPolicyTermFromNextHopAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 19), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermFromNextHopAddrIndex.setStatus('current')
csRtPolicyTermFromOspfArea = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 20), IpAddress().clone(hexValue="ffffffff")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermFromOspfArea.setStatus('current')
csRtPolicyTermFromOspfAreaType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 8, 16, 32))).clone(namedValues=NamedValues(("none", 0), ("nssa", 4), ("backbone", 8), ("normal", 16), ("stub", 32))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermFromOspfAreaType.setStatus('current')
csRtPolicyTermFromOspfMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("type1", 1), ("type2", 2), ("internal", 3), ("external", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermFromOspfMetricType.setStatus('current')
csRtPolicyTermFromOspfTag1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 23), Integer32().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermFromOspfTag1.setStatus('current')
csRtPolicyTermFromOspfTag2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 24), Integer32().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermFromOspfTag2.setStatus('current')
csRtPolicyTermFromPolicyNamesListFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 25), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRtPolicyTermFromPolicyNamesListFlag.setStatus('current')
csRtPolicyTermFromPreference1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermFromPreference1.setStatus('current')
csRtPolicyTermFromPreference2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermFromPreference2.setStatus('current')
csRtPolicyTermFromPrefixNamesListFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 28), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRtPolicyTermFromPrefixNamesListFlag.setStatus('current')
csRtPolicyTermFromRouteFilterFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 29), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRtPolicyTermFromRouteFilterFlag.setStatus('current')
csRtPolicyTermFromProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 30), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermFromProtocol.setStatus('current')
csRtPolicyTermToIsisLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("level1", 1), ("level2", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermToIsisLevel.setStatus('current')
csRtPolicyTermToOspfAreaType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 8))).clone(namedValues=NamedValues(("none", 0), ("nssa", 4), ("backbone", 8))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermToOspfAreaType.setStatus('current')
csRtPolicyTermToNbrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 33), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermToNbrAddr.setStatus('current')
csRtPolicyTermToNbrGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermToNbrGroupName.setStatus('current')
csRtPolicyTermActionFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 35), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRtPolicyTermActionFlag.setStatus('current')
csRtPolicyTermActionBgpASPathName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionBgpASPathName.setStatus('current')
csRtPolicyTermActionBgpASPathOp = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4))).clone(namedValues=NamedValues(("none", 0), ("prepend", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionBgpASPathOp.setStatus('current')
csRtPolicyTermActionVpnRouteTargetNamesListFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 38), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRtPolicyTermActionVpnRouteTargetNamesListFlag.setStatus('current')
csRtPolicyTermActionVpnRouteTargetOp = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("set", 1), ("add", 2), ("subtract", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionVpnRouteTargetOp.setStatus('current')
csRtPolicyTermActionVpnSooOp = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("set", 1), ("delete", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionVpnSooOp.setStatus('current')
csRtPolicyTermActionVpnSoo = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionVpnSoo.setStatus('current')
csRtPolicyTermActionVpnRd = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionVpnRd.setStatus('current')
csRtPolicyTermActionBgpCommNamesListFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 43), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRtPolicyTermActionBgpCommNamesListFlag.setStatus('current')
csRtPolicyTermActionBgpCommOp = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("set", 1), ("add", 2), ("subtract", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionBgpCommOp.setStatus('current')
csRtPolicyTermActionBgpLocalPref = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionBgpLocalPref.setStatus('current')
csRtPolicyTermActionBgpLocalPrefOp = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("set", 1), ("add", 2), ("subtract", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionBgpLocalPrefOp.setStatus('current')
csRtPolicyTermActionBgpOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("incomplete", 1), ("igp", 2), ("egp", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionBgpOrigin.setStatus('current')
csRtPolicyTermActionBgpMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3))).clone(namedValues=NamedValues(("none", 0), ("internal", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionBgpMetricType.setStatus('current')
csRtPolicyTermActionMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionMetric.setStatus('current')
csRtPolicyTermActionMetricOp = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("set", 1), ("add", 2), ("subtract", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionMetricOp.setStatus('current')
csRtPolicyTermActionMetric2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionMetric2.setStatus('current')
csRtPolicyTermActionMetric2Op = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("set", 1), ("add", 2), ("subtract", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionMetric2Op.setStatus('current')
csRtPolicyTermActionIsisMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("internal", 3), ("external", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionIsisMetricType.setStatus('current')
csRtPolicyTermActionNextHopAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("nh-self", 1), ("nh-address", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionNextHopAddrType.setStatus('current')
csRtPolicyTermActionNextHopAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 55), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionNextHopAddr.setStatus('current')
csRtPolicyTermActionOspfMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("type1", 1), ("type2", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionOspfMetricType.setStatus('current')
csRtPolicyTermActionOspfTag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 57), Integer32().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionOspfTag.setStatus('current')
csRtPolicyTermActionOspfTagOp = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("set", 1), ("add", 2), ("subtract", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionOspfTagOp.setStatus('current')
csRtPolicyTermActionOspfTag2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 59), Integer32().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionOspfTag2.setStatus('current')
csRtPolicyTermActionOspfTag2Op = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("set", 1), ("add", 2), ("subtract", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionOspfTag2Op.setStatus('current')
csRtPolicyTermActionPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionPreference.setStatus('current')
csRtPolicyTermActionPreferenceOp = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("set", 1), ("add", 2), ("subtract", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionPreferenceOp.setStatus('current')
csRtPolicyTermActionPreference2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionPreference2.setStatus('current')
csRtPolicyTermActionPreference2Op = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("set", 1), ("add", 2), ("subtract", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionPreference2Op.setStatus('current')
csRtPolicyTermActionFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("accept", 1), ("reject", 2), ("nextPolicy", 3), ("nextTerm", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionFlow.setStatus('current')
csRtPolicyTermActionLogFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 66), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionLogFlag.setStatus('current')
csRtPolicyTermRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 67), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermRowStatus.setStatus('current')
csRtPolicyTermTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRtPolicyTermTableEnd.setStatus('current')
csPolicyRouteFilterTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 6), )
if mibBuilder.loadTexts: csPolicyRouteFilterTable.setStatus('current')
csPolicyRouteFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 6, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csRtPolicyName"), (0, "COSINE-ORION-MIB", "csRtPolicyTermName"), (0, "COSINE-ORION-MIB", "csPolicyRouteFilterPrefix"), (0, "COSINE-ORION-MIB", "csPolicyRouteFilterPrefixLen"), (0, "COSINE-ORION-MIB", "csPolicyRouteFilterMatchType"), (0, "COSINE-ORION-MIB", "csPolicyRouteFilterPrefix2"), (0, "COSINE-ORION-MIB", "csPolicyRouteFilterPrefixLen2"))
if mibBuilder.loadTexts: csPolicyRouteFilterEntry.setStatus('current')
csPolicyRouteFilterPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: csPolicyRouteFilterPrefix.setStatus('current')
csPolicyRouteFilterPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)))
if mibBuilder.loadTexts: csPolicyRouteFilterPrefixLen.setStatus('current')
csPolicyRouteFilterMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("exact", 1), ("longer", 2), ("orlonger", 3), ("upto", 4), ("through", 5))).clone('exact'))
if mibBuilder.loadTexts: csPolicyRouteFilterMatchType.setStatus('current')
csPolicyRouteFilterPrefix2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 6, 1, 4), IpAddress())
if mibBuilder.loadTexts: csPolicyRouteFilterPrefix2.setStatus('current')
csPolicyRouteFilterPrefixLen2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: csPolicyRouteFilterPrefixLen2.setStatus('current')
csPolicyRouteFilterSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 6, 1, 6), Integer32().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPolicyRouteFilterSeqNum.setStatus('current')
csRtPolicyRouteFilterActionFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("accept", 1), ("reject", 2), ("nextPolicy", 3), ("nextTerm", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyRouteFilterActionFlow.setStatus('current')
csRtPolicyRouteFilterActionLogFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 6, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyRouteFilterActionLogFlag.setStatus('current')
csPolicyRouteFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 6, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPolicyRouteFilterRowStatus.setStatus('current')
csPolicyRouteFilterTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPolicyRouteFilterTableEnd.setStatus('current')
csRtPolicyPrefixListTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 8), )
if mibBuilder.loadTexts: csRtPolicyPrefixListTable.setStatus('current')
csRtPolicyPrefixListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 8, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csRtPolicyPrefixListName"), (0, "COSINE-ORION-MIB", "csRtPolicyPrefixListPrefix"), (0, "COSINE-ORION-MIB", "csRtPolicyPrefixListPrefixLen"), (0, "COSINE-ORION-MIB", "csRtPolicyPrefixListMatchType"), (0, "COSINE-ORION-MIB", "csRtPolicyPrefixListPrefix2"), (0, "COSINE-ORION-MIB", "csRtPolicyPrefixListPrefixLen2"))
if mibBuilder.loadTexts: csRtPolicyPrefixListEntry.setStatus('current')
csRtPolicyPrefixListName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 8, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: csRtPolicyPrefixListName.setStatus('current')
csRtPolicyPrefixListPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 8, 1, 2), IpAddress())
if mibBuilder.loadTexts: csRtPolicyPrefixListPrefix.setStatus('current')
csRtPolicyPrefixListPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)))
if mibBuilder.loadTexts: csRtPolicyPrefixListPrefixLen.setStatus('current')
csRtPolicyPrefixListMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("exact", 1), ("longer", 2), ("orlonger", 3), ("upto", 4), ("through", 5))).clone('exact'))
if mibBuilder.loadTexts: csRtPolicyPrefixListMatchType.setStatus('current')
csRtPolicyPrefixListPrefix2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 8, 1, 5), IpAddress())
if mibBuilder.loadTexts: csRtPolicyPrefixListPrefix2.setStatus('current')
csRtPolicyPrefixListPrefixLen2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: csRtPolicyPrefixListPrefixLen2.setStatus('current')
csRtPolicyPrefixListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 8, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyPrefixListRowStatus.setStatus('current')
csRtPolicyPrefixListTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRtPolicyPrefixListTableEnd.setStatus('current')
csRtPolicyStrTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 10), )
if mibBuilder.loadTexts: csRtPolicyStrTable.setStatus('current')
csRtPolicyStrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 10, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csRtPolicyStrType"), (0, "COSINE-ORION-MIB", "csRtPolicyStrName"))
if mibBuilder.loadTexts: csRtPolicyStrEntry.setStatus('current')
csRtPolicyStrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("asPath", 1), ("bgpCommunity", 2), ("termFromCommunityNamesList", 3), ("termFromPolicyNamesList", 4), ("termFromPrefixNamesList", 5), ("termActionCommunityNamesList", 6), ("rtFilterActionCommunityNamesList", 7), ("vpnAccessCustomerList", 8), ("bgpExtCommunity", 9), ("termFromExtCommunityNamesList", 10), ("termActionExtCommunityNamesList", 11))))
if mibBuilder.loadTexts: csRtPolicyStrType.setStatus('current')
csRtPolicyStrName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 65)))
if mibBuilder.loadTexts: csRtPolicyStrName.setStatus('current')
csRtPolicyStrData = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyStrData.setStatus('current')
csRtPolicyStrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 10, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyStrRowStatus.setStatus('current')
csRtPolicyStrTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRtPolicyStrTableEnd.setStatus('current')
csRtPolicyUserTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 12), )
if mibBuilder.loadTexts: csRtPolicyUserTable.setStatus('current')
csRtPolicyUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 12, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csRtPolicyUserType"), (0, "COSINE-ORION-MIB", "csRtPolicyUserIndexValue"), (0, "COSINE-ORION-MIB", "csRtPolicyUserPolicyType"))
if mibBuilder.loadTexts: csRtPolicyUserEntry.setStatus('current')
csRtPolicyUserType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("rip", 2), ("ospf", 3), ("isis", 4), ("bgpPeer", 5), ("bgpGroup", 6), ("vpnVrf", 7), ("vpnVrm", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyUserType.setStatus('current')
csRtPolicyUserIndexValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 12, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0'))
if mibBuilder.loadTexts: csRtPolicyUserIndexValue.setStatus('current')
csRtPolicyUserPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("import", 2), ("export", 3), ("vpnAccess", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyUserPolicyType.setStatus('current')
csRtPolicyUserPolicyString = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 12, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyUserPolicyString.setStatus('current')
csRtPolicyUserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 12, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyUserRowStatus.setStatus('current')
csRtgPolicyEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRtgPolicyEnd.setStatus('current')
csOrionPingCtlTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 1, 1), )
if mibBuilder.loadTexts: csOrionPingCtlTable.setStatus('current')
csOrionPingCtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 1, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionPingCtlTestName"))
if mibBuilder.loadTexts: csOrionPingCtlEntry.setStatus('current')
csOrionPingCtlTestName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)))
if mibBuilder.loadTexts: csOrionPingCtlTestName.setStatus('current')
csOrionPingCtlTargetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 1, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionPingCtlTargetAddress.setStatus('current')
csOrionPingCtlTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionPingCtlTimeOut.setStatus('current')
csOrionPingCtlProbeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionPingCtlProbeCount.setStatus('current')
csOrionPingCtlAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionPingCtlAdminStatus.setStatus('current')
csOrionPingCtlFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionPingCtlFrequency.setStatus('current')
csOrionPingCtlTrapFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionPingCtlTrapFilter.setStatus('current')
csOrionPingCtlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 1, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionPingCtlRowStatus.setStatus('current')
csOrionPingCtlSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 1, 1, 1, 9), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionPingCtlSourceAddress.setStatus('current')
csOrionPingCtlLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 1, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1600)).clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionPingCtlLength.setStatus('current')
csOrionPingCtlTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 1, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionPingCtlTtl.setStatus('current')
csOrionPingResultsTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 2, 2), )
if mibBuilder.loadTexts: csOrionPingResultsTable.setStatus('current')
csOrionPingResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 2, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionPingCtlTestName"))
if mibBuilder.loadTexts: csOrionPingResultsEntry.setStatus('current')
csOrionPingResultsIpTargetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 2, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionPingResultsIpTargetAddress.setStatus('current')
csOrionPingResultsMinRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 2, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionPingResultsMinRtt.setStatus('current')
csOrionPingResultsMaxRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionPingResultsMaxRtt.setStatus('current')
csOrionPingResultsAverageRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionPingResultsAverageRtt.setStatus('current')
csOrionPingResultsProbeResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionPingResultsProbeResponses.setStatus('current')
csOrionPingResultsSentProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionPingResultsSentProbes.setStatus('current')
csOrionPingResultsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionPingResultsErrors.setStatus('current')
csOrionPingResultsTimeOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionPingResultsTimeOuts.setStatus('current')
csOrionPingResultsLates = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionPingResultsLates.setStatus('current')
csOrionPingResultsUnreachables = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionPingResultsUnreachables.setStatus('current')
csOrionPingResultsCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("successful", 1), ("failed", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionPingResultsCurrentStatus.setStatus('current')
csOrionPingEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionPingEnd.setStatus('current')
csOrionTraceRouteReqTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 4, 1), )
if mibBuilder.loadTexts: csOrionTraceRouteReqTable.setStatus('current')
csOrionTraceRouteReqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 4, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionTraceRouteReqIndex"))
if mibBuilder.loadTexts: csOrionTraceRouteReqEntry.setStatus('current')
csOrionTraceRouteReqIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csOrionTraceRouteReqIndex.setStatus('current')
csOrionTraceRouteReqDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 4, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionTraceRouteReqDestAddr.setStatus('current')
csOrionTraceRouteReqHops = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionTraceRouteReqHops.setStatus('current')
csOrionTraceRouteReqSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 4, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionTraceRouteReqSrcAddr.setStatus('current')
csOrionTraceRouteReqStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("opInProgress", 2), ("opSuccess", 3), ("opFailed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionTraceRouteReqStatus.setStatus('current')
csOrionTraceRouteReqRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 4, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionTraceRouteReqRowStatus.setStatus('current')
csOrionTraceRouteResultTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 4, 2), )
if mibBuilder.loadTexts: csOrionTraceRouteResultTable.setStatus('current')
csOrionTraceRouteResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 4, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionTraceRouteResultIndex"), (0, "COSINE-ORION-MIB", "csOrionTraceRouteResultHopNum"))
if mibBuilder.loadTexts: csOrionTraceRouteResultEntry.setStatus('current')
csOrionTraceRouteResultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csOrionTraceRouteResultIndex.setStatus('current')
csOrionTraceRouteResultHopNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionTraceRouteResultHopNum.setStatus('current')
csOrionTraceRouteResultRtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionTraceRouteResultRtt1.setStatus('current')
csOrionTraceRouteResultRtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionTraceRouteResultRtt2.setStatus('current')
csOrionTraceRouteResultRtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionTraceRouteResultRtt3.setStatus('current')
csOrionTraceRouteResultHopAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 4, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionTraceRouteResultHopAddr.setStatus('current')
csOrionTraceRouteResultMplsLabelStackInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 4, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionTraceRouteResultMplsLabelStackInfo.setStatus('current')
csOrionTraceRouteEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionTraceRouteEnd.setStatus('current')
csOrionVIfaceTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 1), )
if mibBuilder.loadTexts: csOrionVIfaceTable.setStatus('current')
csOrionVIfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"))
if mibBuilder.loadTexts: csOrionVIfaceEntry.setStatus('current')
csOrionVIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVIfIndex.setStatus('current')
csOrionVIfRemoteEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)).clone('DISCONNECTED')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVIfRemoteEnd.setStatus('current')
csOrionVIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 1, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVIfIpAddress.setStatus('current')
csOrionVIfIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 1, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVIfIpMask.setStatus('current')
csOrionVIfBcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVIfBcastAddr.setStatus('current')
csOrionVIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 4470)).clone(1500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVIfMtu.setStatus('current')
csOrionVIfFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("frameRelay", 1), ("ppp", 2), ("ipSec", 3), ("ethernet", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVIfFrameType.setStatus('current')
csOrionVIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("public", 1), ("private", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVIfType.setStatus('current')
csOrionVIfSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 1, 1, 11), Gauge32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVIfSpeed.setStatus('current')
csOrionVIfLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 1, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVIfLastChange.setStatus('current')
csOrionVIfCryptoMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVIfCryptoMapName.setStatus('current')
csOrionVIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 1, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVIfRowStatus.setStatus('current')
csOrionVIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 1, 1, 15), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVIfOperStatus.setStatus('current')
csOrionVIfRateLimitNumBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 1, 1, 16), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVIfRateLimitNumBytes.setStatus('obsolete')
csOrionVIfRateLimitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVIfRateLimitInterval.setStatus('obsolete')
csOrionVIfRateLimitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 1, 1, 18), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVIfRateLimitRate.setStatus('current')
csOrionVIfRateLimitBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 1, 1, 19), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVIfRateLimitBurstSize.setStatus('current')
csOrionVIfRemIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 1, 1, 20), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVIfRemIpAddress.setStatus('current')
csOrionVIfRemIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("configured", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVIfRemIpAddressType.setStatus('current')
csOrionVIfMtuOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVIfMtuOperational.setStatus('current')
csOrionViStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 2), )
if mibBuilder.loadTexts: csOrionViStatsTable.setStatus('current')
csOrionViStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"))
if mibBuilder.loadTexts: csOrionViStatsEntry.setStatus('current')
csOrionViStatsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionViStatsInOctets.setStatus('current')
csOrionViStatsInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionViStatsInUcastPkts.setStatus('current')
csOrionViStatsInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionViStatsInNUcastPkts.setStatus('current')
csOrionViStatsInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionViStatsInDiscards.setStatus('current')
csOrionViStatsInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionViStatsInErrors.setStatus('current')
csOrionViStatsInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionViStatsInUnknownProtos.setStatus('current')
csOrionViStatsOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionViStatsOutOctets.setStatus('current')
csOrionViStatsOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionViStatsOutUcastPkts.setStatus('current')
csOrionViStatsOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionViStatsOutNUcastPkts.setStatus('current')
csOrionViStatsOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionViStatsOutDiscards.setStatus('current')
csOrionViStatsOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionViStatsOutErrors.setStatus('current')
csOrionViStatsRateLimitTxBytesSubmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionViStatsRateLimitTxBytesSubmitted.setStatus('current')
csOrionViStatsRateLimitTxPktsSubmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionViStatsRateLimitTxPktsSubmitted.setStatus('current')
csOrionViStatsRateLimitTxBytesDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionViStatsRateLimitTxBytesDropped.setStatus('current')
csOrionViStatsRateLimitTxPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionViStatsRateLimitTxPktsDropped.setStatus('current')
csOrionViStatsRateLimitRxBytesSubmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionViStatsRateLimitRxBytesSubmitted.setStatus('current')
csOrionViStatsRateLimitRxPktsSubmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionViStatsRateLimitRxPktsSubmitted.setStatus('current')
csOrionViStatsRateLimitRxBytesDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionViStatsRateLimitRxBytesDropped.setStatus('current')
csOrionViStatsRateLimitRxPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionViStatsRateLimitRxPktsDropped.setStatus('current')
csOrionViStatsRateLimitTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 2, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionViStatsRateLimitTimeElapsed.setStatus('current')
csOrionGreConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 3), )
if mibBuilder.loadTexts: csOrionGreConfigTable.setStatus('current')
csOrionGreConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"))
if mibBuilder.loadTexts: csOrionGreConfigEntry.setStatus('current')
csOrionGreKeyEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionGreKeyEnable.setStatus('current')
csOrionGreKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionGreKey.setStatus('current')
csOrionGreSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionGreSequence.setStatus('current')
csOrionGreCheckSum = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionGreCheckSum.setStatus('current')
csOrionGreAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionGreAdminStatus.setStatus('current')
csOrionGreStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 4), )
if mibBuilder.loadTexts: csOrionGreStatsTable.setStatus('current')
csOrionGreStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"))
if mibBuilder.loadTexts: csOrionGreStatsEntry.setStatus('current')
csOrionGreStatsKeyErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionGreStatsKeyErrors.setStatus('current')
csOrionGreStatsSequenceErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionGreStatsSequenceErrors.setStatus('current')
csOrionGreStatsUnknownProto = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionGreStatsUnknownProto.setStatus('current')
csOrionGreStatsHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionGreStatsHeaderErrors.setStatus('current')
csOrionVPNVRouterIpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 1), )
if mibBuilder.loadTexts: csOrionVPNVRouterIpStatsTable.setStatus('current')
csOrionVPNVRouterIpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionVPNVRouterIpStatsEntry.setStatus('current')
csOrionVPNVRouterIpInReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterIpInReceives.setStatus('current')
csOrionVPNVRouterIpInHdrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterIpInHdrErrors.setStatus('current')
csOrionVPNVRouterIpInAddrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterIpInAddrErrors.setStatus('current')
csOrionVPNVRouterIpForwDatagrams = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterIpForwDatagrams.setStatus('current')
csOrionVPNVRouterIpInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterIpInUnknownProtos.setStatus('current')
csOrionVPNVRouterIpInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterIpInDiscards.setStatus('current')
csOrionVPNVRouterIpInDelivers = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterIpInDelivers.setStatus('current')
csOrionVPNVRouterIpOutRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterIpOutRequests.setStatus('current')
csOrionVPNVRouterIpOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterIpOutDiscards.setStatus('current')
csOrionVPNVRouterIpOutNoRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterIpOutNoRoutes.setStatus('current')
csOrionVPNVRouterIpReasmReqds = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterIpReasmReqds.setStatus('current')
csOrionVPNVRouterIpReasmOKs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterIpReasmOKs.setStatus('current')
csOrionVPNVRouterIpReasmFails = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterIpReasmFails.setStatus('current')
csOrionVPNVRouterIpFragOKs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterIpFragOKs.setStatus('current')
csOrionVPNVRouterIpFragFails = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterIpFragFails.setStatus('current')
csOrionVPNVRouterIpFragCreates = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterIpFragCreates.setStatus('current')
csOrionVPNVRouterIpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 2), )
if mibBuilder.loadTexts: csOrionVPNVRouterIpAddrTable.setStatus('current')
csOrionVPNVRouterIpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIpAdEntAddr"))
if mibBuilder.loadTexts: csOrionVPNVRouterIpAddrEntry.setStatus('current')
csOrionVPNVRouterIpAdEntAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: csOrionVPNVRouterIpAdEntAddr.setStatus('current')
csOrionVPNVRouterIpAdEntIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterIpAdEntIfIndex.setStatus('current')
csOrionVPNVRouterIpAdEntNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 2, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterIpAdEntNetMask.setStatus('current')
csOrionVPNVRouterIpAdEntBcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 2, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterIpAdEntBcastAddr.setStatus('current')
csOrionVPNVRouterIpAdEntReasmMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterIpAdEntReasmMaxSize.setStatus('current')
csOrionVPNVRouterIpAdEntRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterIpAdEntRowStatus.setStatus('current')
csOrionVPNVRouterIpAdEntOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 2, 1, 7), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterIpAdEntOperStatus.setStatus('current')
csOrionVPNVRouterIpRouteTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 3), )
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteTable.setStatus('current')
csOrionVPNVRouterIpRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIpRouteDest"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIpRouteMask"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIpRouteTos"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIpRouteNextHop"))
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteEntry.setStatus('current')
csOrionVPNVRouterIpRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteDest.setStatus('current')
csOrionVPNVRouterIpRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 3, 1, 2), IpAddress())
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteMask.setStatus('current')
csOrionVPNVRouterIpRouteTos = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 3, 1, 3), Integer32())
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteTos.setStatus('current')
csOrionVPNVRouterIpRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 3, 1, 4), IpAddress())
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteNextHop.setStatus('current')
csOrionVPNVRouterIpRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 3, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteIfIndex.setStatus('current')
csOrionVPNVRouterIpRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("reject", 2), ("local", 3), ("remote", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteType.setStatus('current')
csOrionVPNVRouterIpRouteProto = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("netmgmt", 3), ("icmp", 4), ("egp", 5), ("ggp", 6), ("hello", 7), ("rip", 8), ("isIs", 9), ("esIs", 10), ("ciscoIgrp", 11), ("bbnSpfIgp", 12), ("ospf", 13), ("bgp", 14), ("idpr", 15), ("ciscoEigrp", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteProto.setStatus('current')
csOrionVPNVRouterIpRouteAge = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteAge.setStatus('current')
csOrionVPNVRouterIpRouteInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 3, 1, 9), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteInfo.setStatus('current')
csOrionVPNVRouterIpRouteNextHopAS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 3, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteNextHopAS.setStatus('current')
csOrionVPNVRouterIpRouteMetric1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 3, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteMetric1.setStatus('current')
csOrionVPNVRouterIpRouteMetric2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 3, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteMetric2.setStatus('current')
csOrionVPNVRouterIpRouteMetric3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 3, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteMetric3.setStatus('current')
csOrionVPNVRouterIpRouteMetric4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 3, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteMetric4.setStatus('current')
csOrionVPNVRouterIpRouteMetric5 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 3, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteMetric5.setStatus('current')
csOrionVPNVRouterIpRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 3, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteRowStatus.setStatus('current')
csOrionVPNVRouterIpRouteOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 3, 1, 17), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteOperStatus.setStatus('current')
csOrionVPNVRouterIpNetToMediaTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 4), )
if mibBuilder.loadTexts: csOrionVPNVRouterIpNetToMediaTable.setStatus('current')
csOrionVPNVRouterIpNetToMediaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIpNetToMediaIfIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIpNetToMediaNetAddress"))
if mibBuilder.loadTexts: csOrionVPNVRouterIpNetToMediaEntry.setStatus('current')
csOrionVPNVRouterIpNetToMediaIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: csOrionVPNVRouterIpNetToMediaIfIndex.setStatus('current')
csOrionVPNVRouterIpNetToMediaPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 4, 1, 2), PhysAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterIpNetToMediaPhysAddress.setStatus('current')
csOrionVPNVRouterIpNetToMediaNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 4, 1, 3), IpAddress())
if mibBuilder.loadTexts: csOrionVPNVRouterIpNetToMediaNetAddress.setStatus('current')
csOrionVPNVRouterIpNetToMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("dynamic", 3), ("static", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterIpNetToMediaType.setStatus('current')
csOrionIpLocalAddrPoolTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 5), )
if mibBuilder.loadTexts: csOrionIpLocalAddrPoolTable.setStatus('current')
csOrionIpLocalAddrPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 5, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionIpLocalAddrPoolName"))
if mibBuilder.loadTexts: csOrionIpLocalAddrPoolEntry.setStatus('current')
csOrionIpLocalAddrPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80)))
if mibBuilder.loadTexts: csOrionIpLocalAddrPoolName.setStatus('current')
csOrionIpLocalAddrPoolStartRange = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 5, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIpLocalAddrPoolStartRange.setStatus('current')
csOrionIpLocalAddrPoolEndRange = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 5, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIpLocalAddrPoolEndRange.setStatus('current')
csOrionIpLocalAddrPoolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIpLocalAddrPoolRowStatus.setStatus('current')
csOrionIpEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpEnd.setStatus('current')
csOrionVPNVRouterManagedIpRouteTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6), )
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteTable.setStatus('current')
csOrionVPNVRouterManagedIpRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterManagedIpRouteOwner"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterManagedIpRouteDest"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterManagedIpRouteMask"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterManagedIpRouteTos"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterManagedIpRouteNextHop"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterManagedIpRouteIfIndex"))
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteEntry.setStatus('current')
csOrionVPNVRouterManagedIpRouteOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("static", 2), ("aggregate", 3), ("generated", 4), ("rib", 5), ("fib", 6), ("dial-ppp", 7), ("dial-ipsec", 8))))
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteOwner.setStatus('current')
csOrionVPNVRouterManagedIpRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 2), IpAddress())
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteDest.setStatus('current')
csOrionVPNVRouterManagedIpRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 3), IpAddress())
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteMask.setStatus('current')
csOrionVPNVRouterManagedIpRouteTos = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 4), Integer32())
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteTos.setStatus('current')
csOrionVPNVRouterManagedIpRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 5), IpAddress())
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteNextHop.setStatus('current')
csOrionVPNVRouterManagedIpRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 6), Integer32())
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteIfIndex.setStatus('current')
csOrionVPNVRouterManagedIpRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 1001, 1002))).clone(namedValues=NamedValues(("other", 1), ("reject", 2), ("local", 3), ("remote", 4), ("discard", 1001), ("receive", 1002)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteType.setStatus('current')
csOrionVPNVRouterManagedIpRouteProto = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("other", 1), ("netmgmt", 3), ("local", 2), ("icmp", 4), ("egp", 5), ("ggp", 6), ("hello", 7), ("rip", 8), ("isIs", 9), ("esIs", 10), ("ciscoIgrp", 11), ("bbnSpfIgp", 12), ("ospf", 13), ("bgp", 14), ("idpr", 15), ("ciscoEigrp", 16), ("dial-ppp", 17), ("dial-ipsec", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteProto.setStatus('current')
csOrionVPNVRouterManagedIpRouteAge = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteAge.setStatus('current')
csOrionVPNVRouterManagedIpRouteInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 10), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteInfo.setStatus('current')
csOrionVPNVRouterManagedIpRouteNextHopAS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteNextHopAS.setStatus('current')
csOrionVPNVRouterManagedIpRouteMetric1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteMetric1.setStatus('current')
csOrionVPNVRouterManagedIpRouteMetric2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteMetric2.setStatus('current')
csOrionVPNVRouterManagedIpRouteMetric3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteMetric3.setStatus('current')
csOrionVPNVRouterManagedIpRouteMetric4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteMetric4.setStatus('current')
csOrionVPNVRouterManagedIpRouteMetric5 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 16), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteMetric5.setStatus('current')
csOrionVPNVRouterManagedIpRoutePreference1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRoutePreference1.setStatus('current')
csOrionVPNVRouterManagedIpRoutePreference2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 18), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRoutePreference2.setStatus('current')
csOrionVPNVRouterManagedIpRouteColor1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 19), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteColor1.setStatus('current')
csOrionVPNVRouterManagedIpRouteColor2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 20), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteColor2.setStatus('current')
csOrionVPNVRouterManagedIpRouteActiveOption = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unspecified", 1), ("active", 2), ("passive", 3))).clone('unspecified')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteActiveOption.setStatus('current')
csOrionVPNVRouterManagedIpRouteInstallOption = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unspecified", 1), ("install", 2), ("no-install", 3))).clone('unspecified')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteInstallOption.setStatus('current')
csOrionVPNVRouterManagedIpRouteAdvertiseOption = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unspecified", 1), ("readvertise", 2), ("no-readvertise", 3))).clone('unspecified')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteAdvertiseOption.setStatus('current')
csOrionVPNVRouterManagedIpRouteRetainOption = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unspecified", 1), ("retain", 2), ("no-retain", 3))).clone('unspecified')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteRetainOption.setStatus('current')
csOrionVPNVRouterManagedIpRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 25), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteRowStatus.setStatus('current')
csOrionVPNVRouterManagedIpRouteOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 26), OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteOperState.setStatus('current')
class AreaID(TextualConvention, IpAddress):
    status = 'current'

class RouterID(TextualConvention, IpAddress):
    status = 'current'

class Metric(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class BigMetric(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 16777215)

class Status(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class PositiveInteger(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class HelloRange(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 65535)

class UpToMaxAge(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 3600)

class InterfaceIndex(TextualConvention, Integer32):
    status = 'current'

class DesignatedRouterPriority(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class TOSType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 30)

csOspfGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 1), )
if mibBuilder.loadTexts: csOspfGeneralTable.setStatus('current')
csOspfGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOspfGeneralEntry.setStatus('current')
csOspfRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 1, 1, 1), RouterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfRouterId.setStatus('current')
csOspfAdminStat = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 1, 1, 2), Status()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfAdminStat.setStatus('current')
csOspfVersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("version2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfVersionNumber.setStatus('current')
csOspfAreaBdrRtrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfAreaBdrRtrStatus.setStatus('current')
csOspfASBdrRtrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 1, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfASBdrRtrStatus.setStatus('current')
csOspfExternLsaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfExternLsaCount.setStatus('current')
csOspfExternLsaCksumSum = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfExternLsaCksumSum.setStatus('current')
csOspfTOSSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 1, 1, 8), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfTOSSupport.setStatus('current')
csOspfOriginateNewLsas = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfOriginateNewLsas.setStatus('current')
csOspfRxNewLsas = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfRxNewLsas.setStatus('current')
csOspfExtLsdbLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfExtLsdbLimit.setStatus('current')
csOspfMulticastExtensions = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 1, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfMulticastExtensions.setStatus('current')
csOspfExitOverflowInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 1, 1, 13), PositiveInteger()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfExitOverflowInterval.setStatus('current')
csOspfDemandExtensions = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 1, 1, 14), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfDemandExtensions.setStatus('current')
csOspfGeneralEntryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 1, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfGeneralEntryRowStatus.setStatus('current')
csOspfSpfDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfSpfDelay.setStatus('current')
csOspfSpfHold = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfSpfHold.setStatus('current')
csOspfRefBw = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfRefBw.setStatus('current')
csOspfPrefInt = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfPrefInt.setStatus('current')
csOspfPrefExt = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfPrefExt.setStatus('current')
csOspfAreaTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 2), )
if mibBuilder.loadTexts: csOspfAreaTable.setStatus('current')
csOspfAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOspfAreaId"))
if mibBuilder.loadTexts: csOspfAreaEntry.setStatus('current')
csOspfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 2, 1, 1), AreaID())
if mibBuilder.loadTexts: csOspfAreaId.setStatus('current')
csOspfAreaName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfAreaName.setStatus('current')
csOspfImportAsExtern = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("importExternal", 1), ("importNoExternal", 2), ("importNssa", 3))).clone('importExternal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfImportAsExtern.setStatus('current')
csOspfSpfRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfSpfRuns.setStatus('current')
csOspfAreaBdrRtrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfAreaBdrRtrCount.setStatus('current')
csOspfAsBdrRtrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfAsBdrRtrCount.setStatus('current')
csOspfAreaLsaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfAreaLsaCount.setStatus('current')
csOspfAreaLsaCksumSum = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfAreaLsaCksumSum.setStatus('current')
csOspfAreaSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAreaSummary", 1), ("sendAreaSummary", 2))).clone('noAreaSummary')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfAreaSummary.setStatus('current')
csOspfAreaAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("simplePassword", 1), ("md5", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfAreaAuthType.setStatus('current')
csOspfAreaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 2, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfAreaRowStatus.setStatus('current')
csOspfAreaOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 2, 1, 12), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfAreaOperStatus.setStatus('current')
csOspfStubAreaTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 3), )
if mibBuilder.loadTexts: csOspfStubAreaTable.setStatus('current')
csOspfStubAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOspfStubAreaId"), (0, "COSINE-ORION-MIB", "csOspfStubTOS"))
if mibBuilder.loadTexts: csOspfStubAreaEntry.setStatus('current')
csOspfStubAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 3, 1, 1), AreaID())
if mibBuilder.loadTexts: csOspfStubAreaId.setStatus('current')
csOspfStubTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 3, 1, 2), TOSType())
if mibBuilder.loadTexts: csOspfStubTOS.setStatus('current')
csOspfStubMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 3, 1, 3), BigMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfStubMetric.setStatus('current')
csOspfStubStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfStubStatus.setStatus('current')
csOspfStubMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ospfMetric", 1), ("comparableCost", 2), ("nonComparable", 3))).clone('ospfMetric')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfStubMetricType.setStatus('current')
csOspfLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 4), )
if mibBuilder.loadTexts: csOspfLsdbTable.setStatus('current')
csOspfLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOspfLsdbAreaId"), (0, "COSINE-ORION-MIB", "csOspfLsdbType"), (0, "COSINE-ORION-MIB", "csOspfLsdbLsid"), (0, "COSINE-ORION-MIB", "csOspfLsdbRouterId"))
if mibBuilder.loadTexts: csOspfLsdbEntry.setStatus('current')
csOspfLsdbAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 4, 1, 1), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfLsdbAreaId.setStatus('current')
csOspfLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("routerLink", 1), ("networkLink", 2), ("summaryLink", 3), ("asSummaryLink", 4), ("asExternalLink", 5), ("multicastLink", 6), ("nssaExternalLink", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfLsdbType.setStatus('current')
csOspfLsdbLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfLsdbLsid.setStatus('current')
csOspfLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 4, 1, 4), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfLsdbRouterId.setStatus('current')
csOspfLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfLsdbSequence.setStatus('current')
csOspfLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfLsdbAge.setStatus('current')
csOspfLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfLsdbChecksum.setStatus('current')
csOspfLsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 4, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfLsdbAdvertisement.setStatus('current')
csOspfHostTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 5), )
if mibBuilder.loadTexts: csOspfHostTable.setStatus('current')
csOspfHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 5, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOspfHostIpAddress"), (0, "COSINE-ORION-MIB", "csOspfHostTOS"))
if mibBuilder.loadTexts: csOspfHostEntry.setStatus('current')
csOspfHostIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 5, 1, 1), IpAddress())
if mibBuilder.loadTexts: csOspfHostIpAddress.setStatus('current')
csOspfHostTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 5, 1, 2), TOSType())
if mibBuilder.loadTexts: csOspfHostTOS.setStatus('current')
csOspfHostMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 5, 1, 3), Metric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfHostMetric.setStatus('current')
csOspfHostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfHostStatus.setStatus('current')
csOspfHostAreaID = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 5, 1, 5), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfHostAreaID.setStatus('current')
csOspfIfTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6), )
if mibBuilder.loadTexts: csOspfIfTable.setStatus('current')
csOspfIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOspfIfIpAddress"), (0, "COSINE-ORION-MIB", "csOspfAddressLessIf"))
if mibBuilder.loadTexts: csOspfIfEntry.setStatus('current')
csOspfIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfIfIpAddress.setStatus('current')
csOspfAddressLessIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfAddressLessIf.setStatus('current')
csOspfIfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 3), AreaID().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfIfAreaId.setStatus('current')
csOspfIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6))).clone(namedValues=NamedValues(("broadcast", 1), ("nbma", 2), ("pointToPoint", 3), ("pointToMultipoint", 5), ("loopback", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfIfType.setStatus('current')
csOspfIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 5), Status().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfIfAdminStatus.setStatus('current')
csOspfIfRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 6), DesignatedRouterPriority().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfIfRtrPriority.setStatus('current')
csOspfIfTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 7), UpToMaxAge().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfIfTransitDelay.setStatus('current')
csOspfIfRetransInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 8), UpToMaxAge().clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfIfRetransInterval.setStatus('current')
csOspfIfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 9), HelloRange().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfIfHelloInterval.setStatus('current')
csOspfIfRtrDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 10), PositiveInteger().clone(40)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfIfRtrDeadInterval.setStatus('current')
csOspfIfPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 11), PositiveInteger().clone(120)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfIfPollInterval.setStatus('current')
csOspfIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("down", 1), ("loopback", 2), ("waiting", 3), ("pointToPoint", 4), ("designatedRouter", 5), ("backupDesignatedRouter", 6), ("otherDesignatedRouter", 7))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfIfState.setStatus('current')
csOspfIfDesignatedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 13), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfIfDesignatedRouter.setStatus('current')
csOspfIfBackupDesignatedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 14), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfIfBackupDesignatedRouter.setStatus('current')
csOspfIfEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfIfEvents.setStatus('current')
csOspfIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("simplePassword", 1), ("md5", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfIfAuthType.setStatus('current')
csOspfIfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)).clone(hexValue="0000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfIfAuthKey.setStatus('current')
csOspfIfMulticastForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("blocked", 1), ("multicast", 2), ("unicast", 3))).clone('blocked')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfIfMulticastForwarding.setStatus('current')
csOspfIfDemand = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 19), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfIfDemand.setStatus('current')
csOspfIfMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 20), Metric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfIfMetric.setStatus('current')
csOspfIfAdvertiseSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfIfAdvertiseSubnet.setStatus('current')
csOspfIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 22), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfIfStatus.setStatus('current')
csOspfIfPassive = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 23), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfIfPassive.setStatus('current')
csOspfIfMd5Table = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 15), )
if mibBuilder.loadTexts: csOspfIfMd5Table.setStatus('current')
csOspfIfMd5Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 15, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOspfIfIpAddress"), (0, "COSINE-ORION-MIB", "csOspfAddressLessIf"), (0, "COSINE-ORION-MIB", "csOspfIfMd5MessageDigestKeyId"))
if mibBuilder.loadTexts: csOspfIfMd5Entry.setStatus('current')
csOspfIfMd5MessageDigestKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 15, 1, 1), Integer32())
if mibBuilder.loadTexts: csOspfIfMd5MessageDigestKeyId.setStatus('current')
csOspfIfMd5Key = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 15, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)).clone(hexValue="0000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfIfMd5Key.setStatus('current')
csOspfIfMd5RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 15, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfIfMd5RowStatus.setStatus('current')
csOspfIfMetricTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 7), )
if mibBuilder.loadTexts: csOspfIfMetricTable.setStatus('current')
csOspfIfMetricEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 7, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOspfIfMetricIpAddress"), (0, "COSINE-ORION-MIB", "csOspfIfMetricAddressLessIf"), (0, "COSINE-ORION-MIB", "csOspfIfMetricTOS"))
if mibBuilder.loadTexts: csOspfIfMetricEntry.setStatus('current')
csOspfIfMetricIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 7, 1, 1), IpAddress())
if mibBuilder.loadTexts: csOspfIfMetricIpAddress.setStatus('current')
csOspfIfMetricAddressLessIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 7, 1, 2), Integer32())
if mibBuilder.loadTexts: csOspfIfMetricAddressLessIf.setStatus('current')
csOspfIfMetricTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 7, 1, 3), TOSType())
if mibBuilder.loadTexts: csOspfIfMetricTOS.setStatus('current')
csOspfIfMetricValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 7, 1, 4), Metric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfIfMetricValue.setStatus('current')
csOspfIfMetricStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 7, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfIfMetricStatus.setStatus('current')
csOspfVirtIfTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 8), )
if mibBuilder.loadTexts: csOspfVirtIfTable.setStatus('current')
csOspfVirtIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 8, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOspfVirtIfAreaId"), (0, "COSINE-ORION-MIB", "csOspfVirtIfNeighbor"))
if mibBuilder.loadTexts: csOspfVirtIfEntry.setStatus('current')
csOspfVirtIfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 8, 1, 1), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfVirtIfAreaId.setStatus('current')
csOspfVirtIfNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 8, 1, 2), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfVirtIfNeighbor.setStatus('current')
csOspfVirtIfTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 8, 1, 3), UpToMaxAge().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfVirtIfTransitDelay.setStatus('current')
csOspfVirtIfRetransInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 8, 1, 4), UpToMaxAge().clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfVirtIfRetransInterval.setStatus('current')
csOspfVirtIfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 8, 1, 5), HelloRange().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfVirtIfHelloInterval.setStatus('current')
csOspfVirtIfRtrDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 8, 1, 6), PositiveInteger().clone(60)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfVirtIfRtrDeadInterval.setStatus('current')
csOspfVirtIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("down", 1), ("pointToPoint", 4))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfVirtIfState.setStatus('current')
csOspfVirtIfEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfVirtIfEvents.setStatus('current')
csOspfVirtIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfVirtIfAuthType.setStatus('current')
csOspfVirtIfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 8, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)).clone(hexValue="0000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfVirtIfAuthKey.setStatus('current')
csOspfVirtIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 8, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfVirtIfStatus.setStatus('current')
csOspfNbrTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 9), )
if mibBuilder.loadTexts: csOspfNbrTable.setStatus('current')
csOspfNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 9, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOspfNbrIpAddr"), (0, "COSINE-ORION-MIB", "csOspfNbrAddressLessIndex"))
if mibBuilder.loadTexts: csOspfNbrEntry.setStatus('current')
csOspfNbrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 9, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfNbrIpAddr.setStatus('current')
csOspfNbrAddressLessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 9, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfNbrAddressLessIndex.setStatus('current')
csOspfNbrRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 9, 1, 3), RouterID().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfNbrRtrId.setStatus('current')
csOspfNbrOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfNbrOptions.setStatus('current')
csOspfNbrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 9, 1, 5), DesignatedRouterPriority().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfNbrPriority.setStatus('current')
csOspfNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("down", 1), ("attempt", 2), ("init", 3), ("twoWay", 4), ("exchangeStart", 5), ("exchange", 6), ("loading", 7), ("full", 8))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfNbrState.setStatus('current')
csOspfNbrEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfNbrEvents.setStatus('current')
csOspfNbrLsRetransQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 9, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfNbrLsRetransQLen.setStatus('current')
csOspfNbmaNbrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 9, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfNbmaNbrStatus.setStatus('current')
csOspfNbmaNbrPermanence = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("permanent", 2))).clone('permanent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfNbmaNbrPermanence.setStatus('current')
csOspfNbrHelloSuppressed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 9, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfNbrHelloSuppressed.setStatus('current')
csOspfVirtNbrTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 10), )
if mibBuilder.loadTexts: csOspfVirtNbrTable.setStatus('current')
csOspfVirtNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 10, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOspfVirtNbrArea"), (0, "COSINE-ORION-MIB", "csOspfVirtNbrRtrId"))
if mibBuilder.loadTexts: csOspfVirtNbrEntry.setStatus('current')
csOspfVirtNbrArea = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 10, 1, 1), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfVirtNbrArea.setStatus('current')
csOspfVirtNbrRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 10, 1, 2), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfVirtNbrRtrId.setStatus('current')
csOspfVirtNbrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 10, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfVirtNbrIpAddr.setStatus('current')
csOspfVirtNbrOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfVirtNbrOptions.setStatus('current')
csOspfVirtNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("down", 1), ("attempt", 2), ("init", 3), ("twoWay", 4), ("exchangeStart", 5), ("exchange", 6), ("loading", 7), ("full", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfVirtNbrState.setStatus('current')
csOspfVirtNbrEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfVirtNbrEvents.setStatus('current')
csOspfVirtNbrLsRetransQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 10, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfVirtNbrLsRetransQLen.setStatus('current')
csOspfVirtNbrHelloSuppressed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 10, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfVirtNbrHelloSuppressed.setStatus('current')
csOspfExtLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 11), )
if mibBuilder.loadTexts: csOspfExtLsdbTable.setStatus('current')
csOspfExtLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 11, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOspfExtLsdbType"), (0, "COSINE-ORION-MIB", "csOspfExtLsdbLsid"), (0, "COSINE-ORION-MIB", "csOspfExtLsdbRouterId"))
if mibBuilder.loadTexts: csOspfExtLsdbEntry.setStatus('current')
csOspfExtLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5))).clone(namedValues=NamedValues(("asExternalLink", 5))))
if mibBuilder.loadTexts: csOspfExtLsdbType.setStatus('current')
csOspfExtLsdbLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 11, 1, 2), IpAddress())
if mibBuilder.loadTexts: csOspfExtLsdbLsid.setStatus('current')
csOspfExtLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 11, 1, 3), RouterID())
if mibBuilder.loadTexts: csOspfExtLsdbRouterId.setStatus('current')
csOspfExtLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfExtLsdbSequence.setStatus('current')
csOspfExtLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfExtLsdbAge.setStatus('current')
csOspfExtLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfExtLsdbChecksum.setStatus('current')
csOspfExtLsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 11, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(36, 36)).setFixedLength(36)).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfExtLsdbAdvertisement.setStatus('current')
csOspfAreaAggregateTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 12), )
if mibBuilder.loadTexts: csOspfAreaAggregateTable.setStatus('current')
csOspfAreaAggregateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 12, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOspfAreaAggregateAreaID"), (0, "COSINE-ORION-MIB", "csOspfAreaAggregateLsdbType"), (0, "COSINE-ORION-MIB", "csOspfAreaAggregateNet"), (0, "COSINE-ORION-MIB", "csOspfAreaAggregateMask"))
if mibBuilder.loadTexts: csOspfAreaAggregateEntry.setStatus('current')
csOspfAreaAggregateAreaID = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 12, 1, 1), AreaID())
if mibBuilder.loadTexts: csOspfAreaAggregateAreaID.setStatus('current')
csOspfAreaAggregateLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 7))).clone(namedValues=NamedValues(("summaryLink", 3), ("nssaExternalLink", 7))))
if mibBuilder.loadTexts: csOspfAreaAggregateLsdbType.setStatus('current')
csOspfAreaAggregateNet = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 12, 1, 3), IpAddress())
if mibBuilder.loadTexts: csOspfAreaAggregateNet.setStatus('current')
csOspfAreaAggregateMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 12, 1, 4), IpAddress())
if mibBuilder.loadTexts: csOspfAreaAggregateMask.setStatus('current')
csOspfAreaAggregateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 12, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfAreaAggregateStatus.setStatus('current')
csOspfAreaAggregateEffect = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("advertiseMatching", 1), ("doNotAdvertiseMatching", 2))).clone('advertiseMatching')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfAreaAggregateEffect.setStatus('current')
csOspfImpPolTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 13), )
if mibBuilder.loadTexts: csOspfImpPolTable.setStatus('current')
csOspfImpPolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 13, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOspfImpPolId"))
if mibBuilder.loadTexts: csOspfImpPolEntry.setStatus('current')
csOspfImpPolId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 13, 1, 1), Integer32())
if mibBuilder.loadTexts: csOspfImpPolId.setStatus('current')
csOspfImpPolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 13, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfImpPolStatus.setStatus('current')
csOspfExpPolTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 14), )
if mibBuilder.loadTexts: csOspfExpPolTable.setStatus('current')
csOspfExpPolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 14, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOspfExpPolId"))
if mibBuilder.loadTexts: csOspfExpPolEntry.setStatus('current')
csOspfExpPolId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 14, 1, 1), Integer32())
if mibBuilder.loadTexts: csOspfExpPolId.setStatus('current')
csOspfExpPolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 14, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfExpPolStatus.setStatus('current')
csOspfTrapControl = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 2, 1))
csOspfSetTrap = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOspfSetTrap.setStatus('current')
csOspfConfigErrorType = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("badVersion", 1), ("areaMismatch", 2), ("unknownNbmaNbr", 3), ("unknownVirtualNbr", 4), ("authTypeMismatch", 5), ("authFailure", 6), ("netMaskMismatch", 7), ("helloIntervalMismatch", 8), ("deadIntervalMismatch", 9), ("optionMismatch", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfConfigErrorType.setStatus('current')
csOspfPacketType = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("hello", 1), ("dbDescript", 2), ("lsReq", 3), ("lsUpdate", 4), ("lsAck", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfPacketType.setStatus('current')
csOspfPacketSrc = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfPacketSrc.setStatus('current')
csOrionOspfEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionOspfEnd.setStatus('current')
csRipGlobalStatTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 1, 1), )
if mibBuilder.loadTexts: csRipGlobalStatTable.setStatus('current')
csRipGlobalStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 1, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csRipGlobalStatEntry.setStatus('current')
csRipGlobalRouteChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRipGlobalRouteChanges.setStatus('current')
csRipGlobalQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRipGlobalQueries.setStatus('current')
csRipIfStatTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 1, 2), )
if mibBuilder.loadTexts: csRipIfStatTable.setStatus('current')
csRipIfStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 1, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"))
if mibBuilder.loadTexts: csRipIfStatEntry.setStatus('current')
csRipIfStatRcvBadPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRipIfStatRcvBadPackets.setStatus('current')
csRipIfStatRcvBadRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRipIfStatRcvBadRoutes.setStatus('current')
csRipIfStatSentUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRipIfStatSentUpdates.setStatus('current')
csRipIfStatTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRipIfStatTableEnd.setStatus('current')
csRipGlobalConfTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 1), )
if mibBuilder.loadTexts: csRipGlobalConfTable.setStatus('current')
csRipGlobalConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csRipGlobalConfEntry.setStatus('current')
csRipGlobalConfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipGlobalConfStatus.setStatus('current')
csRipGlobalConfAgeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipGlobalConfAgeTime.setStatus('current')
csRipGlobalConfPerUpdateInt = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipGlobalConfPerUpdateInt.setStatus('current')
csRipGlobalConfJitterUpdateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipGlobalConfJitterUpdateStatus.setStatus('current')
csRipGlobalConfRfc1058CalcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipGlobalConfRfc1058CalcStatus.setStatus('current')
csRipGlobalConfReqOnStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipGlobalConfReqOnStartup.setStatus('current')
csRipGlobalConfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipGlobalConfRowStatus.setStatus('current')
csRipGlobalConfLogAreaFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipGlobalConfLogAreaFlag.setStatus('current')
csRipGlobalConfLogLevelFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 1, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipGlobalConfLogLevelFlag.setStatus('current')
csRipIfConfTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 2), )
if mibBuilder.loadTexts: csRipIfConfTable.setStatus('current')
csRipIfConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"))
if mibBuilder.loadTexts: csRipIfConfEntry.setStatus('current')
csRipIfConfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipIfConfStatus.setStatus('current')
csRipIfConfSend = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipIfConfSend.setStatus('current')
csRipIfConfReceiveV1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipIfConfReceiveV1.setStatus('current')
csRipIfConfReceiveV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipIfConfReceiveV2.setStatus('current')
csRipIfConfSendDefRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipIfConfSendDefRoute.setStatus('current')
csRipIfConfRcvDefRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipIfConfRcvDefRoute.setStatus('current')
csRipIfConfSplitHorizon = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipIfConfSplitHorizon.setStatus('current')
csRipIfConfPoisonReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipIfConfPoisonReverse.setStatus('current')
csRipIfConfFlashUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipIfConfFlashUpdate.setStatus('current')
csRipIfConfRipV1Compatibility = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipIfConfRipV1Compatibility.setStatus('current')
csRipIfConfAuthPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 2, 1, 11), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipIfConfAuthPassword.setStatus('current')
csRipIfConfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 2, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipIfConfRowStatus.setStatus('current')
csRipImpPolTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 3), )
if mibBuilder.loadTexts: csRipImpPolTable.setStatus('current')
csRipImpPolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csRipImpPolId"))
if mibBuilder.loadTexts: csRipImpPolEntry.setStatus('current')
csRipImpPolId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csRipImpPolId.setStatus('current')
csRipImpPolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipImpPolStatus.setStatus('current')
csRipExpPolTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 4), )
if mibBuilder.loadTexts: csRipExpPolTable.setStatus('current')
csRipExpPolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csRipExpPolId"))
if mibBuilder.loadTexts: csRipExpPolEntry.setStatus('current')
csRipExpPolId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csRipExpPolId.setStatus('current')
csRipExpPolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipExpPolStatus.setStatus('current')
csOrionRipEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionRipEnd.setStatus('current')
csOrionVPNVRouterTcpTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 1), )
if mibBuilder.loadTexts: csOrionVPNVRouterTcpTable.setStatus('current')
csOrionVPNVRouterTcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionVPNVRouterTcpEntry.setStatus('current')
csOrionVPNVRouterTcpRtoAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("constant", 2), ("rsre", 3), ("vanj", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterTcpRtoAlgorithm.setStatus('current')
csOrionVPNVRouterTcpRtoMin = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterTcpRtoMin.setStatus('current')
csOrionVPNVRouterTcpRtoMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterTcpRtoMax.setStatus('current')
csOrionVPNVRouterTcpMaxConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterTcpMaxConn.setStatus('current')
csOrionVPNVRouterTcpActiveOpens = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterTcpActiveOpens.setStatus('current')
csOrionVPNVRouterTcpPassiveOpens = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterTcpPassiveOpens.setStatus('current')
csOrionVPNVRouterTcpAttemptFails = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterTcpAttemptFails.setStatus('current')
csOrionVPNVRouterTcpEstabResets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterTcpEstabResets.setStatus('current')
csOrionVPNVRouterTcpCurrEstab = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterTcpCurrEstab.setStatus('current')
csOrionVPNVRouterTcpInSegs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterTcpInSegs.setStatus('current')
csOrionVPNVRouterTcpOutSegs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterTcpOutSegs.setStatus('current')
csOrionVPNVRouterTcpRetransSegs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterTcpRetransSegs.setStatus('current')
csOrionVPNVRouterTcpInErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterTcpInErrs.setStatus('current')
csOrionVPNVRouterTcpOutRsts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterTcpOutRsts.setStatus('current')
csOrionVPNVRouterTcpConnTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 2), )
if mibBuilder.loadTexts: csOrionVPNVRouterTcpConnTable.setStatus('current')
csOrionVPNVRouterTcpConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterTcpConnLocalAddress"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterTcpConnLocalPort"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterTcpConnRemAddress"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterTcpConnRemPort"))
if mibBuilder.loadTexts: csOrionVPNVRouterTcpConnEntry.setStatus('current')
csOrionVPNVRouterTcpConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("closed", 1), ("listen", 2), ("synSent", 3), ("synReceived", 4), ("established", 5), ("finWait1", 6), ("finWait2", 7), ("closeWait", 8), ("lastAck", 9), ("closing", 10), ("timeWait", 11), ("deleteTCB", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVPNVRouterTcpConnState.setStatus('current')
csOrionVPNVRouterTcpConnLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterTcpConnLocalAddress.setStatus('current')
csOrionVPNVRouterTcpConnLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterTcpConnLocalPort.setStatus('current')
csOrionVPNVRouterTcpConnRemAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterTcpConnRemAddress.setStatus('current')
csOrionVPNVRouterTcpConnRemPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterTcpConnRemPort.setStatus('current')
csOrionTcpEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionTcpEnd.setStatus('current')
csOrionVPNVRouterUdpTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 7, 1), )
if mibBuilder.loadTexts: csOrionVPNVRouterUdpTable.setStatus('current')
csOrionVPNVRouterUdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 7, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionVPNVRouterUdpEntry.setStatus('current')
csOrionVPNVRouterUdpInDatagrams = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 7, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterUdpInDatagrams.setStatus('current')
csOrionVPNVRouterUdpNoPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 7, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterUdpNoPorts.setStatus('current')
csOrionVPNVRouterUdpInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 7, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterUdpInErrors.setStatus('current')
csOrionVPNVRouterUdpOutDatagrams = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 7, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterUdpOutDatagrams.setStatus('current')
csOrionVPNVRouterUdpListenerTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 7, 2), )
if mibBuilder.loadTexts: csOrionVPNVRouterUdpListenerTable.setStatus('current')
csOrionVPNVRouterUdpListenerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 7, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterUdpListenerLocalAddress"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterUdpListenerLocalPort"))
if mibBuilder.loadTexts: csOrionVPNVRouterUdpListenerEntry.setStatus('current')
csOrionVPNVRouterUdpListenerLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 7, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterUdpListenerLocalAddress.setStatus('current')
csOrionVPNVRouterUdpListenerLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterUdpListenerLocalPort.setStatus('current')
csOrionUdpEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionUdpEnd.setStatus('current')
csBgpGenTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1), )
if mibBuilder.loadTexts: csBgpGenTable.setStatus('current')
csBgpGenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csBgpGenEntry.setStatus('current')
csBgpGenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpGenStatus.setStatus('current')
csBgpGenLocalAS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpGenLocalAS.setStatus('current')
csBgpGenClearConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpGenClearConn.setStatus('current')
csBgpGenDefaultMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpGenDefaultMetric.setStatus('current')
csBgpGenDefaultLocalPref = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpGenDefaultLocalPref.setStatus('current')
csBgpGenConfedId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 65535), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpGenConfedId.setStatus('current')
csBgpGenDampEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpGenDampEnable.setStatus('current')
csBgpGenDampHalfLife = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1, 8), Integer32().clone(900)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpGenDampHalfLife.setStatus('current')
csBgpGenDampReuse = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1, 9), Integer32().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpGenDampReuse.setStatus('current')
csBgpGenDampSuppress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1, 10), Integer32().clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpGenDampSuppress.setStatus('current')
csBgpGenDampMaxSuppress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1, 11), Integer32().clone(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpGenDampMaxSuppress.setStatus('current')
csBgpGenRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpGenRowStatus.setStatus('current')
csBgpGenLogAreaFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1, 13), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpGenLogAreaFlag.setStatus('current')
csBgpGenLogLevelFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1, 14), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpGenLogLevelFlag.setStatus('current')
csBgpGenClearConnFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("nbr", 2), ("nbrGroup", 3), ("all", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpGenClearConnFlag.setStatus('current')
csBgpGenClearNbrGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpGenClearNbrGroupName.setStatus('current')
csBgpGenHoldTimeConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 0), ValueRangeConstraint(20, 65534), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpGenHoldTimeConfigured.setStatus('current')
csBgpGenKeepAliveConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 0), ValueRangeConstraint(7, 65534), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpGenKeepAliveConfigured.setStatus('current')
csBgpGenVpnLogAreaFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1, 19), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpGenVpnLogAreaFlag.setStatus('current')
csBgpGenMaxPfx = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1, 20), Integer32().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpGenMaxPfx.setStatus('current')
csBgpGenMaxPfxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 100), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpGenMaxPfxThreshold.setStatus('current')
csBgpGenMaxPfxType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 2, 3))).clone(namedValues=NamedValues(("notconfigured", -1), ("warning-only", 2), ("warning-and-discard", 3))).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpGenMaxPfxType.setStatus('current')
csBgpGenTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csBgpGenTableEnd.setStatus('current')
csBgpNbrTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1), )
if mibBuilder.loadTexts: csBgpNbrTable.setStatus('current')
csBgpNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csBgpNbrAddr"))
if mibBuilder.loadTexts: csBgpNbrEntry.setStatus('current')
csBgpNbrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: csBgpNbrAddr.setStatus('current')
csBgpNbrId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csBgpNbrId.setStatus('current')
csBgpNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("idle", 1), ("connect", 2), ("active", 3), ("opensent", 4), ("openconfirm", 5), ("established", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csBgpNbrState.setStatus('current')
csBgpNbrAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stop", 1), ("start", 2))).clone('start')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrAdminStatus.setStatus('current')
csBgpNbrRemoteAS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrRemoteAS.setStatus('current')
csBgpNbrMd5Password = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrMd5Password.setStatus('current')
csBgpNbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrRowStatus.setStatus('current')
csBgpNbrGroupNm = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupNm.setStatus('current')
csBgpNbrHoldTimeConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 0), ValueRangeConstraint(20, 65534), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrHoldTimeConfigured.setStatus('current')
csBgpNbrLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 10), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrLocalAddr.setStatus('current')
csBgpNbrNextHopSelf = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("notconfigured", -1), ("enable", 1), ("disable", 2))).clone('notconfigured')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrNextHopSelf.setStatus('current')
csBgpNbrMhopGw = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 12), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrMhopGw.setStatus('current')
csBgpNbrPassive = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrPassive.setStatus('current')
csBgpNbrMhopTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 255), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrMhopTTL.setStatus('current')
csBgpNbrIpv4AdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrIpv4AdminStatus.setStatus('current')
csBgpNbrVpnIpv4AdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrVpnIpv4AdminStatus.setStatus('current')
csBgpNbrKeepAliveConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 0), ValueRangeConstraint(7, 65534), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrKeepAliveConfigured.setStatus('current')
csBgpNbrRemovePrivateAs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("notconfigured", -1), ("enable", 1), ("disable", 2))).clone('notconfigured')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrRemovePrivateAs.setStatus('current')
csBgpNbrLogAreaFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 19), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrLogAreaFlag.setStatus('current')
csBgpNbrMaxPfx = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrMaxPfx.setStatus('current')
csBgpNbrVpnLogAreaFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 21), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrVpnLogAreaFlag.setStatus('current')
csBgpNbrMaxPfxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 100), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrMaxPfxThreshold.setStatus('current')
csBgpNbrMaxPfxType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2, 3))).clone(namedValues=NamedValues(("notconfigured", -1), ("shutdown", 1), ("warning-only", 2), ("warning-and-discard", 3))).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrMaxPfxType.setStatus('current')
csBgpNbrImpPolTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 2), )
if mibBuilder.loadTexts: csBgpNbrImpPolTable.setStatus('current')
csBgpNbrImpPolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csBgpNbrAddr"), (0, "COSINE-ORION-MIB", "csBgpNbrImpPolId"))
if mibBuilder.loadTexts: csBgpNbrImpPolEntry.setStatus('current')
csBgpNbrImpPolId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csBgpNbrImpPolId.setStatus('current')
csBgpNbrImpPolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrImpPolRowStatus.setStatus('current')
csBgpNbrExpPolTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 3), )
if mibBuilder.loadTexts: csBgpNbrExpPolTable.setStatus('current')
csBgpNbrExpPolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csBgpNbrAddr"), (0, "COSINE-ORION-MIB", "csBgpNbrExpPolId"))
if mibBuilder.loadTexts: csBgpNbrExpPolEntry.setStatus('current')
csBgpNbrExpPolId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csBgpNbrExpPolId.setStatus('current')
csBgpNbrExpPolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrExpPolRowStatus.setStatus('current')
csBgpConfedASTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 4, 1), )
if mibBuilder.loadTexts: csBgpConfedASTable.setStatus('current')
csBgpConfedASEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 4, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csBgpConfedAS"))
if mibBuilder.loadTexts: csBgpConfedASEntry.setStatus('current')
csBgpConfedAS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csBgpConfedAS.setStatus('current')
csBgpConfedASRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 4, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpConfedASRowStatus.setStatus('current')
csBgpConfedASTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csBgpConfedASTableEnd.setStatus('current')
csBgpNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 5, 1), )
if mibBuilder.loadTexts: csBgpNetworkTable.setStatus('current')
csBgpNetworkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 5, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csBgpNetworkAddr"), (0, "COSINE-ORION-MIB", "csBgpNetworkMask"))
if mibBuilder.loadTexts: csBgpNetworkEntry.setStatus('current')
csBgpNetworkAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 5, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: csBgpNetworkAddr.setStatus('current')
csBgpNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 5, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: csBgpNetworkMask.setStatus('current')
csBgpNetworkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 5, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNetworkRowStatus.setStatus('current')
csBgpNetworkTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csBgpNetworkTableEnd.setStatus('current')
csBgpNbrGroupTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1), )
if mibBuilder.loadTexts: csBgpNbrGroupTable.setStatus('current')
csBgpNbrGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csBgpNbrGroupName"))
if mibBuilder.loadTexts: csBgpNbrGroupEntry.setStatus('current')
csBgpNbrGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: csBgpNbrGroupName.setStatus('current')
csBgpNbrGroupAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stop", 1), ("start", 2))).clone('start')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupAdminStatus.setStatus('current')
csBgpNbrGroupRemoteAS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupRemoteAS.setStatus('current')
csBgpNbrGroupMd5Password = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupMd5Password.setStatus('current')
csBgpNbrGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupRowStatus.setStatus('current')
csBgpNbrGroupHoldTimeConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 0), ValueRangeConstraint(20, 65535), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupHoldTimeConfigured.setStatus('current')
csBgpNbrGroupLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupLocalAddr.setStatus('current')
csBgpNbrGroupNextHopSelf = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("notconfigured", -1), ("enable", 1), ("disable", 2))).clone('notconfigured')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupNextHopSelf.setStatus('current')
csBgpNbrGroupMhopGw = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupMhopGw.setStatus('current')
csBgpNbrGroupMhopTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 255), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupMhopTTL.setStatus('current')
csBgpNbrGroupIpv4AdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupIpv4AdminStatus.setStatus('current')
csBgpNbrGroupVpnIpv4AdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupVpnIpv4AdminStatus.setStatus('current')
csBgpNbrGroupVpnIpv4AllowRfc2547Customers = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("all", 2), ("other", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupVpnIpv4AllowRfc2547Customers.setStatus('current')
csBgpNbrGroupVpnIpv4AllowVrmodelCustomers = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("all", 2), ("other", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupVpnIpv4AllowVrmodelCustomers.setStatus('current')
csBgpNbrGroupKeepAliveConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 0), ValueRangeConstraint(7, 65535), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupKeepAliveConfigured.setStatus('current')
csBgpNbrGroupRemovePrivateAs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("notconfigured", -1), ("enable", 1), ("disable", 2))).clone('notconfigured')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupRemovePrivateAs.setStatus('current')
csBgpNbrGroupLogAreaFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1, 1, 17), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupLogAreaFlag.setStatus('current')
csBgpNbrGroupMaxPfx = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupMaxPfx.setStatus('current')
csBgpNbrGroupVpnLogAreaFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1, 1, 19), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupVpnLogAreaFlag.setStatus('current')
csBgpNbrGroupMaxPfxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 100), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupMaxPfxThreshold.setStatus('current')
csBgpNbrGroupMaxPfxType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2, 3))).clone(namedValues=NamedValues(("notconfigured", -1), ("shutdown", 1), ("warning-only", 2), ("warning-and-discard", 3))).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupMaxPfxType.setStatus('current')
csBgpNbrGroupImpPolTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 2), )
if mibBuilder.loadTexts: csBgpNbrGroupImpPolTable.setStatus('current')
csBgpNbrGroupImpPolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csBgpNbrGroupName"), (0, "COSINE-ORION-MIB", "csBgpNbrGroupImpPolId"))
if mibBuilder.loadTexts: csBgpNbrGroupImpPolEntry.setStatus('current')
csBgpNbrGroupImpPolId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csBgpNbrGroupImpPolId.setStatus('current')
csBgpNbrGroupImpPolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupImpPolRowStatus.setStatus('current')
csBgpNbrGroupExpPolTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 3), )
if mibBuilder.loadTexts: csBgpNbrGroupExpPolTable.setStatus('current')
csBgpNbrGroupExpPolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csBgpNbrGroupName"), (0, "COSINE-ORION-MIB", "csBgpNbrGroupExpPolId"))
if mibBuilder.loadTexts: csBgpNbrGroupExpPolEntry.setStatus('current')
csBgpNbrGroupExpPolId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csBgpNbrGroupExpPolId.setStatus('current')
csBgpNbrGroupExpPolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupExpPolRowStatus.setStatus('current')
csOrionBgpEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBgpEnd.setStatus('current')
class OSINSAddress(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 20)

class SNPAAddress(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 20)

class NSAPPrefix(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 21)

class SNPAPrefix(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 21)

class SystemID(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 8)

class LSPBuffSize(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(512, 1492)

class LevelState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("off", 1), ("on", 2), ("waiting", 3))

class SupportedProtocol(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(129, 204, 205))
    namedValues = NamedValues(("iso8473", 129), ("ip", 204), ("ipV6", 205))

class DefaultMetric(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 63)

class OtherMetric(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 63)

class MetricType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("internal", 1), ("external", 2))

class CircuitID(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 9)

class ISPriority(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 127)

class TOS(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("default", 1), ("delay", 2), ("expense", 3), ("error", 4))

class PathCost(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 1023)

csIsisSysTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1), )
if mibBuilder.loadTexts: csIsisSysTable.setStatus('current')
csIsisSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csIsisSysInstance"))
if mibBuilder.loadTexts: csIsisSysEntry.setStatus('current')
csIsisSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: csIsisSysInstance.setStatus('current')
csIsisSysVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisSysVersion.setStatus('current')
csIsisSysType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("level1IS", 1), ("level2IS", 2), ("level1l2IS", 3))).clone('level1l2IS')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysType.setStatus('current')
csIsisSysID = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 4), SystemID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysID.setStatus('current')
csIsisSysMaxPathSplits = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysMaxPathSplits.setStatus('current')
csIsisSysMaxLSPGenInt = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(900)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysMaxLSPGenInt.setStatus('current')
csIsisSysMaxLSPLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysMaxLSPLifetime.setStatus('current')
csIsisSysOrigL1LSPBuffSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 8), LSPBuffSize().clone(1492)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysOrigL1LSPBuffSize.setStatus('current')
csIsisSysMaxAreaAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysMaxAreaAddresses.setStatus('current')
csIsisSysMinL1LSPGenInt = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysMinL1LSPGenInt.setStatus('current')
csIsisSysMinL2LSPGenInt = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysMinL2LSPGenInt.setStatus('current')
csIsisSysPollESHelloRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysPollESHelloRate.setStatus('current')
csIsisSysWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysWaitTime.setStatus('current')
csIsisSysOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 14), OperState().clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysOperState.setStatus('current')
csIsisSysL1State = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 15), LevelState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisSysL1State.setStatus('current')
csIsisSysCorrLSPs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisSysCorrLSPs.setStatus('current')
csIsisSysLSPL1DbaseOloads = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisSysLSPL1DbaseOloads.setStatus('current')
csIsisSysManAddrDropFromAreas = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisSysManAddrDropFromAreas.setStatus('current')
csIsisSysAttmptToExMaxSeqNums = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisSysAttmptToExMaxSeqNums.setStatus('current')
csIsisSysSeqNumSkips = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisSysSeqNumSkips.setStatus('current')
csIsisSysOwnLSPPurges = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisSysOwnLSPPurges.setStatus('current')
csIsisSysIDFieldLenMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisSysIDFieldLenMismatches.setStatus('current')
csIsisSysMaxAreaAddrMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisSysMaxAreaAddrMismatches.setStatus('current')
csIsisSysOrigL2LSPBuffSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 24), LSPBuffSize().clone(1492)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysOrigL2LSPBuffSize.setStatus('current')
csIsisSysL2State = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 25), LevelState().clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisSysL2State.setStatus('current')
csIsisSysLSPL2DbaseOloads = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisSysLSPL2DbaseOloads.setStatus('current')
csIsisSysAuthAreaType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("plaintext", 2), ("md5", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysAuthAreaType.setStatus('current')
csIsisSysAuthAreaTransPwd = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysAuthAreaTransPwd.setStatus('current')
csIsisSysAuthDomainType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("plaintext", 2), ("md5", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysAuthDomainType.setStatus('current')
csIsisSysAuthDomainTransPwd = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 30), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysAuthDomainTransPwd.setStatus('current')
csIsisSysAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisSysAuthFails.setStatus('current')
csIsisSysLSPIgnoreErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 32), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysLSPIgnoreErrors.setStatus('current')
csIsisSysLogAdjacencyChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 33), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysLogAdjacencyChanges.setStatus('current')
csIsisSysPartChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisSysPartChanges.setStatus('current')
csIsisSysMaxAreaCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 35), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysMaxAreaCheck.setStatus('current')
csIsisSysNextCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 36), TestAndIncr()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysNextCircIndex.setStatus('current')
csIsisSysExistState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 37), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysExistState.setStatus('current')
csIsisSysAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysAdminStatus.setStatus('current')
csIsisSysSPFL1Int = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysSPFL1Int.setStatus('current')
csIsisSysSPFL2Int = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysSPFL2Int.setStatus('current')
csIsisSysSPFStartInt = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysSPFStartInt.setStatus('current')
csIsisSysDefInfoOrig = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 42), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysDefInfoOrig.setStatus('current')
csIsisSysL2TO1Leak = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 43), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysL2TO1Leak.setStatus('current')
csIsisSysLogAreaFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 44), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysLogAreaFlag.setStatus('current')
csIsisSysLogLevelFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 45), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysLogLevelFlag.setStatus('current')
csIsisManAreaAddrTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 2), )
if mibBuilder.loadTexts: csIsisManAreaAddrTable.setStatus('current')
csIsisManAreaAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csIsisManAreaAddrSysInstance"), (0, "COSINE-ORION-MIB", "csIsisManAreaAddr"))
if mibBuilder.loadTexts: csIsisManAreaAddrEntry.setStatus('current')
csIsisManAreaAddrSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: csIsisManAreaAddrSysInstance.setStatus('current')
csIsisManAreaAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 2, 1, 2), OSINSAddress())
if mibBuilder.loadTexts: csIsisManAreaAddr.setStatus('current')
csIsisManAreaAddrExistState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 2, 1, 3), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisManAreaAddrExistState.setStatus('current')
csIsisAreaAddrTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 3), )
if mibBuilder.loadTexts: csIsisAreaAddrTable.setStatus('current')
csIsisAreaAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csIsisAreaAddrSysInstance"), (0, "COSINE-ORION-MIB", "csIsisAreaAddr"))
if mibBuilder.loadTexts: csIsisAreaAddrEntry.setStatus('current')
csIsisAreaAddrSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: csIsisAreaAddrSysInstance.setStatus('current')
csIsisAreaAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 3, 1, 2), OSINSAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisAreaAddr.setStatus('current')
csIsisSysProtSuppTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 4), )
if mibBuilder.loadTexts: csIsisSysProtSuppTable.setStatus('current')
csIsisSysProtSuppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csIsisSysProtSuppSysInstance"), (0, "COSINE-ORION-MIB", "csIsisSysProtSuppProtocol"))
if mibBuilder.loadTexts: csIsisSysProtSuppEntry.setStatus('current')
csIsisSysProtSuppSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: csIsisSysProtSuppSysInstance.setStatus('current')
csIsisSysProtSuppProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 4, 1, 2), SupportedProtocol())
if mibBuilder.loadTexts: csIsisSysProtSuppProtocol.setStatus('current')
csIsisSysProtSuppExistState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 4, 1, 3), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysProtSuppExistState.setStatus('current')
csIsisL2SummAddrTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 5), )
if mibBuilder.loadTexts: csIsisL2SummAddrTable.setStatus('current')
csIsisL2SummAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 5, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csIsisL2SummAddrSysInstance"), (0, "COSINE-ORION-MIB", "csIsisL2SummAddress"), (0, "COSINE-ORION-MIB", "csIsisL2SummAddrMask"))
if mibBuilder.loadTexts: csIsisL2SummAddrEntry.setStatus('current')
csIsisL2SummAddrSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: csIsisL2SummAddrSysInstance.setStatus('current')
csIsisL2SummAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 5, 1, 2), IpAddress())
if mibBuilder.loadTexts: csIsisL2SummAddress.setStatus('current')
csIsisL2SummAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 5, 1, 3), IpAddress())
if mibBuilder.loadTexts: csIsisL2SummAddrMask.setStatus('current')
csIsisL2SummAddrExistState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 5, 1, 4), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisL2SummAddrExistState.setStatus('current')
csIsisL2SummAddrOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 5, 1, 5), OperState().clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisL2SummAddrOperState.setStatus('current')
csIsisL2SummAddrDefaultMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 5, 1, 6), DefaultMetric().clone(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisL2SummAddrDefaultMetric.setStatus('current')
csIsisL2SummAddrDelayMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 5, 1, 7), OtherMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisL2SummAddrDelayMetric.setStatus('current')
csIsisL2SummAddrExpenseMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 5, 1, 8), OtherMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisL2SummAddrExpenseMetric.setStatus('current')
csIsisL2SummAddrErrorMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 5, 1, 9), OtherMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisL2SummAddrErrorMetric.setStatus('current')
csIsisExpPolTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 6), )
if mibBuilder.loadTexts: csIsisExpPolTable.setStatus('current')
csIsisExpPolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 6, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csIsisExpPolId"))
if mibBuilder.loadTexts: csIsisExpPolEntry.setStatus('current')
csIsisExpPolId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: csIsisExpPolId.setStatus('current')
csIsisExpPolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisExpPolStatus.setStatus('current')
csIsisExpPolTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisExpPolTableEnd.setStatus('current')
csIsisCircTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1), )
if mibBuilder.loadTexts: csIsisCircTable.setStatus('current')
csIsisCircEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csIsisCircSysInstance"), (0, "COSINE-ORION-MIB", "csIsisCircIndex"))
if mibBuilder.loadTexts: csIsisCircEntry.setStatus('current')
csIsisCircSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: csIsisCircSysInstance.setStatus('current')
csIsisCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: csIsisCircIndex.setStatus('current')
csIsisCircIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisCircIfIndex.setStatus('current')
csIsisCircIfSubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisCircIfSubIndex.setStatus('current')
csIsisCircLocalID = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisCircLocalID.setStatus('current')
csIsisCircOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 6), OperState().clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircOperState.setStatus('current')
csIsisCircExistState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 7), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircExistState.setStatus('current')
csIsisCircType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("broadcast", 1), ("ptToPt", 2), ("staticIn", 3), ("staticOut", 4), ("dA", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircType.setStatus('current')
csIsisCircL1DefaultMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 9), DefaultMetric().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL1DefaultMetric.setStatus('current')
csIsisCircL1DelayMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 10), OtherMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL1DelayMetric.setStatus('current')
csIsisCircL1ExpenseMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 11), OtherMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL1ExpenseMetric.setStatus('current')
csIsisCircL1ErrorMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 12), OtherMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL1ErrorMetric.setStatus('current')
csIsisCircExtDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 13), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircExtDomain.setStatus('current')
csIsisCircAdjChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisCircAdjChanges.setStatus('current')
csIsisCircInitFails = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisCircInitFails.setStatus('current')
csIsisCircRejAdjs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisCircRejAdjs.setStatus('current')
csIsisCircOutCtrlPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisCircOutCtrlPDUs.setStatus('current')
csIsisCircInCtrlPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisCircInCtrlPDUs.setStatus('current')
csIsisCircIDFieldLenMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisCircIDFieldLenMismatches.setStatus('current')
csIsisCircL2DefaultMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 20), DefaultMetric().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL2DefaultMetric.setStatus('current')
csIsisCircL2DelayMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 21), OtherMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL2DelayMetric.setStatus('current')
csIsisCircL2ExpenseMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 22), OtherMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL2ExpenseMetric.setStatus('current')
csIsisCircL2ErrorMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 23), OtherMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL2ErrorMetric.setStatus('current')
csIsisCircManL2Only = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 24), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircManL2Only.setStatus('current')
csIsisCircL1ISPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 25), ISPriority().clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL1ISPriority.setStatus('current')
csIsisCircL1CircID = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 26), CircuitID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisCircL1CircID.setStatus('current')
csIsisCircL1DesIS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 27), SystemID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisCircL1DesIS.setStatus('current')
csIsisCircLANL1DesISChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisCircLANL1DesISChanges.setStatus('current')
csIsisCircL2ISPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 29), ISPriority().clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL2ISPriority.setStatus('current')
csIsisCircL2CircID = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 30), CircuitID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisCircL2CircID.setStatus('current')
csIsisCircL2DesIS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 31), SystemID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisCircL2DesIS.setStatus('current')
csIsisCircLANL2DesISChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisCircLANL2DesISChanges.setStatus('current')
csIsisCircMCAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("group", 1), ("functional", 2))).clone('group')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircMCAddr.setStatus('current')
csIsisCircPtToPtCircID = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 34), CircuitID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisCircPtToPtCircID.setStatus('current')
csIsisCircL1HelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 600000)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL1HelloTimer.setStatus('current')
csIsisCircL2HelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 600000)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL2HelloTimer.setStatus('current')
csIsisCircL1HelloMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 100)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL1HelloMultiplier.setStatus('current')
csIsisCircL2HelloMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 100)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL2HelloMultiplier.setStatus('current')
csIsisCircDRL1HelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 120000)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircDRL1HelloTimer.setStatus('current')
csIsisCircDRL2HelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 120000)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircDRL2HelloTimer.setStatus('current')
csIsisCircMinBroadLSPTransInt = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(33)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircMinBroadLSPTransInt.setStatus('current')
csIsisCircL1MinLSPTransInt = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL1MinLSPTransInt.setStatus('current')
csIsisCircL2MinLSPTransInt = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL2MinLSPTransInt.setStatus('current')
csIsisCircL1CSNPInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL1CSNPInterval.setStatus('current')
csIsisCircL2CSNPInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL2CSNPInterval.setStatus('current')
csIsisCircL1PartSNPInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL1PartSNPInterval.setStatus('current')
csIsisCircL2PartSNPInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL2PartSNPInterval.setStatus('current')
csIsisCircLSPThrottle = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(33)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircLSPThrottle.setStatus('current')
csIsisCircPassiveCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 49), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircPassiveCircuit.setStatus('current')
csIsisCircMeshGroupEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("blocked", 2), ("set", 3))).clone('inactive')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircMeshGroupEnabled.setStatus('current')
csIsisCircMeshGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000000000)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircMeshGroup.setStatus('current')
csIsisCircL1AuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("plaintext", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL1AuthType.setStatus('current')
csIsisCircL1Password = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 53), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL1Password.setStatus('current')
csIsisCircL2AuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("plaintext", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL2AuthType.setStatus('current')
csIsisCircL2Password = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 55), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL2Password.setStatus('current')
csIsisCircSmallHellos = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 56), OperState().clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircSmallHellos.setStatus('current')
csIsisManAdjNeighNSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 57), OSINSAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisManAdjNeighNSAP.setStatus('current')
csIsisManAdjNeighSNPA = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 58), SNPAAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisManAdjNeighSNPA.setStatus('current')
csIsisCircIPEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 59), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircIPEncaps.setStatus('current')
csIsisCircUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisCircUpTime.setStatus('current')
csIsisCircIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 61), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircIpAddress.setStatus('current')
csIsisCircLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("level-1", 1), ("level-2", 2), ("level-1-2", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircLevel.setStatus('current')
csIsisCircTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisCircTableEnd.setStatus('current')
csIsisISAdjTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 1), )
if mibBuilder.loadTexts: csIsisISAdjTable.setStatus('current')
csIsisISAdjEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csIsisISAdjSysInstance"), (0, "COSINE-ORION-MIB", "csIsisISAdjCircIndex"), (0, "COSINE-ORION-MIB", "csIsisISAdjIndex"))
if mibBuilder.loadTexts: csIsisISAdjEntry.setStatus('current')
csIsisISAdjSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: csIsisISAdjSysInstance.setStatus('current')
csIsisISAdjCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: csIsisISAdjCircIndex.setStatus('current')
csIsisISAdjIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 1, 1, 3), Integer32())
if mibBuilder.loadTexts: csIsisISAdjIndex.setStatus('current')
csIsisISAdjState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("initializing", 1), ("up", 2), ("failed", 3), ("down", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisISAdjState.setStatus('current')
csIsisISAdjNeighSNPAAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 1, 1, 5), SNPAAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisISAdjNeighSNPAAddress.setStatus('current')
csIsisISAdjNeighSysType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("intermediateSystem", 3), ("l1IntermediateSystem", 4), ("l2IntermediateSystem", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisISAdjNeighSysType.setStatus('current')
csIsisISAdjNeighSysID = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisISAdjNeighSysID.setStatus('current')
csIsisISAdjUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 1), ("level1", 2), ("level2", 3), ("level1and2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisISAdjUsage.setStatus('current')
csIsisISAdjHoldTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisISAdjHoldTimer.setStatus('current')
csIsisISAdjNeighPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 1, 1, 10), ISPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisISAdjNeighPriority.setStatus('current')
csIsisISAdjUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisISAdjUpTime.setStatus('current')
csIsisISAdjAreaAddrTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 2), )
if mibBuilder.loadTexts: csIsisISAdjAreaAddrTable.setStatus('current')
csIsisISAdjAreaAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csIsisISAdjAreaAddrSysInstance"), (0, "COSINE-ORION-MIB", "csIsisISAdjAreaAddrCircIndex"), (0, "COSINE-ORION-MIB", "csIsisISAdjAreaAddrAdjIndex"), (0, "COSINE-ORION-MIB", "csIsisISAdjAreaAddress"))
if mibBuilder.loadTexts: csIsisISAdjAreaAddrEntry.setStatus('current')
csIsisISAdjAreaAddrSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: csIsisISAdjAreaAddrSysInstance.setStatus('current')
csIsisISAdjAreaAddrCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: csIsisISAdjAreaAddrCircIndex.setStatus('current')
csIsisISAdjAreaAddrAdjIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 2, 1, 3), Integer32())
if mibBuilder.loadTexts: csIsisISAdjAreaAddrAdjIndex.setStatus('current')
csIsisISAdjAreaAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 2, 1, 4), OSINSAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisISAdjAreaAddress.setStatus('current')
csIsisISAdjIPAddrTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 3), )
if mibBuilder.loadTexts: csIsisISAdjIPAddrTable.setStatus('current')
csIsisISAdjIPAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csIsisISAdjIPAddrSysInstance"), (0, "COSINE-ORION-MIB", "csIsisISAdjIPAddrCircIndex"), (0, "COSINE-ORION-MIB", "csIsisISAdjIPAddrAdjIndex"))
if mibBuilder.loadTexts: csIsisISAdjIPAddrEntry.setStatus('current')
csIsisISAdjIPAddrSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: csIsisISAdjIPAddrSysInstance.setStatus('current')
csIsisISAdjIPAddrCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: csIsisISAdjIPAddrCircIndex.setStatus('current')
csIsisISAdjIPAddrAdjIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 3, 1, 3), Integer32())
if mibBuilder.loadTexts: csIsisISAdjIPAddrAdjIndex.setStatus('current')
csIsisISAdjIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisISAdjIPAddress.setStatus('current')
csIsisISAdjProtSuppTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 4), )
if mibBuilder.loadTexts: csIsisISAdjProtSuppTable.setStatus('current')
csIsisISAdjProtSuppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csIsisISAdjProtSuppSysInstance"), (0, "COSINE-ORION-MIB", "csIsisISAdjProtSuppCircIndex"), (0, "COSINE-ORION-MIB", "csIsisISAdjProtSuppAdjIndex"), (0, "COSINE-ORION-MIB", "csIsisISAdjProtSuppProtocol"))
if mibBuilder.loadTexts: csIsisISAdjProtSuppEntry.setStatus('current')
csIsisISAdjProtSuppSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: csIsisISAdjProtSuppSysInstance.setStatus('current')
csIsisISAdjProtSuppCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 4, 1, 2), Integer32())
if mibBuilder.loadTexts: csIsisISAdjProtSuppCircIndex.setStatus('current')
csIsisISAdjProtSuppAdjIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 4, 1, 3), Integer32())
if mibBuilder.loadTexts: csIsisISAdjProtSuppAdjIndex.setStatus('current')
csIsisISAdjProtSuppProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 4, 1, 4), SupportedProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisISAdjProtSuppProtocol.setStatus('current')
csIsisISAdjProtSuppTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisISAdjProtSuppTableEnd.setStatus('current')
csIsisIPRATable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 5, 1), )
if mibBuilder.loadTexts: csIsisIPRATable.setStatus('current')
csIsisIPRAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 5, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csIsisIPRASysInstance"), (0, "COSINE-ORION-MIB", "csIsisIPRACircIndex"), (0, "COSINE-ORION-MIB", "csIsisIPRAType"), (0, "COSINE-ORION-MIB", "csIsisIPRAIndex"))
if mibBuilder.loadTexts: csIsisIPRAEntry.setStatus('current')
csIsisIPRASysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 5, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: csIsisIPRASysInstance.setStatus('current')
csIsisIPRACircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 5, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: csIsisIPRACircIndex.setStatus('current')
csIsisIPRAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 5, 1, 1, 3), Integer32())
if mibBuilder.loadTexts: csIsisIPRAIndex.setStatus('current')
csIsisIPRAType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("automatic", 2))))
if mibBuilder.loadTexts: csIsisIPRAType.setStatus('current')
csIsisIPRADest = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 5, 1, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisIPRADest.setStatus('current')
csIsisIPRAMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 5, 1, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisIPRAMask.setStatus('current')
csIsisIPRAExistState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 5, 1, 1, 7), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisIPRAExistState.setStatus('current')
csIsisIPRAOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 5, 1, 1, 8), OperState().clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisIPRAOperState.setStatus('current')
csIsisIPRADefMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 5, 1, 1, 9), DefaultMetric().clone(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisIPRADefMetric.setStatus('current')
csIsisIPRADelMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 5, 1, 1, 10), OtherMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisIPRADelMetric.setStatus('current')
csIsisIPRAExpMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 5, 1, 1, 11), OtherMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisIPRAExpMetric.setStatus('current')
csIsisIPRAErrMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 5, 1, 1, 12), OtherMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisIPRAErrMetric.setStatus('current')
csIsisIPRADefMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 5, 1, 1, 13), MetricType().clone('internal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisIPRADefMetricType.setStatus('current')
csIsisIPRADelMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 5, 1, 1, 14), MetricType().clone('internal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisIPRADelMetricType.setStatus('current')
csIsisIPRAExpMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 5, 1, 1, 15), MetricType().clone('internal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisIPRAExpMetricType.setStatus('current')
csIsisIPRAErrMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 5, 1, 1, 16), MetricType().clone('internal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisIPRAErrMetricType.setStatus('current')
csIsisIPRASNPAAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 5, 1, 1, 17), SNPAAddress().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisIPRASNPAAddress.setStatus('current')
csOrionIsisEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIsisEnd.setStatus('current')
csRsvpSessionTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 1), )
if mibBuilder.loadTexts: csRsvpSessionTable.setStatus('current')
csRsvpSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csRsvpSessionTunnelEndpoint"), (0, "COSINE-ORION-MIB", "csRsvpSessionTunnelID"))
if mibBuilder.loadTexts: csRsvpSessionEntry.setStatus('current')
csRsvpSessionTunnelEndpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: csRsvpSessionTunnelEndpoint.setStatus('current')
csRsvpSessionTunnelID = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: csRsvpSessionTunnelID.setStatus('current')
csRsvpSessionExtendedTunnelID = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 1, 1, 3), Unsigned32())
if mibBuilder.loadTexts: csRsvpSessionExtendedTunnelID.setStatus('current')
csRsvpSessionUpPsbs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpSessionUpPsbs.setStatus('current')
csRsvpSessionDownPsbs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpSessionDownPsbs.setStatus('current')
csRsvpSessionUpRsbs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpSessionUpRsbs.setStatus('current')
csRsvpSessionDownRsbs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpSessionDownRsbs.setStatus('current')
csRsvpIfTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2), )
if mibBuilder.loadTexts: csRsvpIfTable.setStatus('current')
csRsvpIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"))
if mibBuilder.loadTexts: csRsvpIfEntry.setStatus('current')
csRsvpIfMaxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRsvpIfMaxBandwidth.setStatus('current')
csRsvpIfMaxFlowBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRsvpIfMaxFlowBandwidth.setStatus('current')
csRsvpIfUdpNbrs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfUdpNbrs.setStatus('current')
csRsvpIfIpNbrs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfIpNbrs.setStatus('current')
csRsvpIfNbrs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfNbrs.setStatus('current')
csRsvpIfEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 6), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRsvpIfEnabled.setStatus('current')
csRsvpIfUdpRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRsvpIfUdpRequired.setStatus('current')
csRsvpIfRefreshBlockadeMultiple = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRsvpIfRefreshBlockadeMultiple.setStatus('current')
csRsvpIfRefreshMultiple = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRsvpIfRefreshMultiple.setStatus('current')
csRsvpIfTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRsvpIfTTL.setStatus('current')
csRsvpIfRefreshInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 11), TimeInterval().clone(3000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRsvpIfRefreshInterval.setStatus('current')
csRsvpIfRouteDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 12), TimeInterval().clone(200)).setUnits('hundredths of a second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRsvpIfRouteDelay.setStatus('current')
csRsvpIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRsvpIfStatus.setStatus('current')
csRsvpIfPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfPktsIn.setStatus('current')
csRsvpIfPathIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfPathIn.setStatus('current')
csRsvpIfResvIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfResvIn.setStatus('current')
csRsvpIfPathTearIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfPathTearIn.setStatus('current')
csRsvpIfPathErrIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfPathErrIn.setStatus('current')
csRsvpIfResvTearIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfResvTearIn.setStatus('current')
csRsvpIfResvErrIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfResvErrIn.setStatus('current')
csRsvpIfResvConfIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfResvConfIn.setStatus('current')
csRsvpIfPathOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfPathOut.setStatus('current')
csRsvpIfResvOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfResvOut.setStatus('current')
csRsvpIfPathTearOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfPathTearOut.setStatus('current')
csRsvpIfPathErrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfPathErrOut.setStatus('current')
csRsvpIfResvTearOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfResvTearOut.setStatus('current')
csRsvpIfResvErrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfResvErrOut.setStatus('current')
csRsvpIfResvConfOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfResvConfOut.setStatus('current')
csRsvpIfBadPathIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfBadPathIn.setStatus('current')
csRsvpIfBadResvIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfBadResvIn.setStatus('current')
csRsvpIfBadPathTearIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfBadPathTearIn.setStatus('current')
csRsvpIfBadPathErrIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfBadPathErrIn.setStatus('current')
csRsvpIfBadResvTearIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfBadResvTearIn.setStatus('current')
csRsvpIfBadResvErrIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfBadResvErrIn.setStatus('current')
csRsvpIfBadResvConfIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfBadResvConfIn.setStatus('current')
csRsvpIfBadOtherIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfBadOtherIn.setStatus('current')
csRsvpIfUpPsbsCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfUpPsbsCreated.setStatus('current')
csRsvpIfDownPsbsCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfDownPsbsCreated.setStatus('current')
csRsvpIfUpRsbsCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfUpRsbsCreated.setStatus('current')
csRsvpIfDownRsbsCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfDownRsbsCreated.setStatus('current')
csRsvpIfIngressLspsCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfIngressLspsCreated.setStatus('current')
csRsvpIfEgressLspsCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfEgressLspsCreated.setStatus('current')
csRsvpIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 43), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRsvpIfIpAddress.setStatus('current')
csRsvpIfRRCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRsvpIfRRCapable.setStatus('current')
csRsvpIfAckDesired = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRsvpIfAckDesired.setStatus('current')
csRsvpIfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRsvpIfHelloInterval.setStatus('current')
csRsvpVrConfTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 3), )
if mibBuilder.loadTexts: csRsvpVrConfTable.setStatus('current')
csRsvpVrConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csRsvpVrConfEntry.setStatus('current')
csRsvpVrAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRsvpVrAdminStatus.setStatus('current')
csRsvpVrEventLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 3, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRsvpVrEventLogLevel.setStatus('current')
csRsvpVrEventLogArea = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 3, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRsvpVrEventLogArea.setStatus('current')
csRsvpVrConfOpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRsvpVrConfOpCode.setStatus('current')
csRsvpVrConfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRsvpVrConfRowStatus.setStatus('current')
csRsvpVrConfTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpVrConfTableEnd.setStatus('current')
csRsvpIfQueueTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 5), )
if mibBuilder.loadTexts: csRsvpIfQueueTable.setStatus('current')
csRsvpIfQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 5, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"), (0, "COSINE-ORION-MIB", "csRsvpIfQueueID"))
if mibBuilder.loadTexts: csRsvpIfQueueEntry.setStatus('current')
csRsvpIfQueueID = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ef", 1), ("af1", 2), ("af2", 3), ("af3", 4), ("af4", 5), ("be", 6), ("none", 7), ("ef-low", 8), ("ef-high", 9))))
if mibBuilder.loadTexts: csRsvpIfQueueID.setStatus('current')
csRsvpIfQueueBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 10000000)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRsvpIfQueueBandwidth.setStatus('current')
csRsvpIfQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRsvpIfQueueRowStatus.setStatus('current')
csRsvpIfQueueOperBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfQueueOperBandwidth.setStatus('current')
csRsvpIfQueueTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfQueueTableEnd.setStatus('current')
csMplsLspTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1), )
if mibBuilder.loadTexts: csMplsLspTable.setStatus('current')
csMplsLspEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csMplsLspID"), (0, "COSINE-ORION-MIB", "csMplsLspName"), (0, "COSINE-ORION-MIB", "csMplsLspPreference"))
if mibBuilder.loadTexts: csMplsLspEntry.setStatus('current')
csMplsLspID = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csMplsLspID.setStatus('current')
csMplsLspName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: csMplsLspName.setStatus('current')
csMplsLspState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsLspState.setStatus('current')
csMplsLspOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csMplsLspOctets.setStatus('current')
csMplsLspPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csMplsLspPackets.setStatus('current')
csMplsLspAge = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 6), TimeStamp()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsLspAge.setStatus('current')
csMplsLspTimeUp = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 7), TimeStamp()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsLspTimeUp.setStatus('current')
csMplsLspPrimaryTimeUp = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 8), TimeStamp()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsLspPrimaryTimeUp.setStatus('current')
csMplsLspTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csMplsLspTransitions.setStatus('current')
csMplsLspLastTransition = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 10), TimeStamp()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsLspLastTransition.setStatus('current')
csMplsLspPathChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csMplsLspPathChanges.setStatus('current')
csMplsLspLastPathChange = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 12), TimeStamp()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsLspLastPathChange.setStatus('current')
csMplsLspConfiguredPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsLspConfiguredPaths.setStatus('current')
csMplsLspStandbyPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsLspStandbyPaths.setStatus('current')
csMplsLspOperationalPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsLspOperationalPaths.setStatus('current')
csMplsLspFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 16), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsLspFrom.setStatus('current')
csMplsLspTo = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 17), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsLspTo.setStatus('current')
csMplsPathName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathName.setStatus('current')
csMplsPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("primary", 2), ("standby", 3), ("secondary", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathType.setStatus('current')
csMplsPathBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 20), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathBandwidth.setStatus('current')
csMplsPathCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathCOS.setStatus('current')
csMplsPathInclude = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 22), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathInclude.setStatus('current')
csMplsPathExclude = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 23), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathExclude.setStatus('current')
csMplsPathSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathSetupPriority.setStatus('current')
csMplsPathHoldPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathHoldPriority.setStatus('current')
csMplsPathRecordRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathRecordRoute.setStatus('current')
csMplsPathDynamic = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathDynamic.setStatus('current')
csMplsPathIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathIdentifier.setStatus('current')
csMplsPathBgpAutoRouteAnnounce = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathBgpAutoRouteAnnounce.setStatus('current')
csMplsPathMetricMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("other", 0), ("absolute", 1), ("relative", 2))).clone('relative')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathMetricMode.setStatus('current')
csMplsPathMetricValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 31), Integer32().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathMetricValue.setStatus('current')
csMplsPathAffinity = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 32), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathAffinity.setStatus('current')
csMplsPathAffinityMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 33), Integer32().clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathAffinityMask.setStatus('current')
csMplsLspPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(65535))
if mibBuilder.loadTexts: csMplsLspPreference.setStatus('current')
csMplsLspRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 35), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsLspRowStatus.setStatus('current')
csMplsPathIsisAutoRouteAnnounce = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathIsisAutoRouteAnnounce.setStatus('current')
csMplsPathOspfAutoRouteAnnounce = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathOspfAutoRouteAnnounce.setStatus('current')
csMplsVrPathRecordRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 38), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csMplsVrPathRecordRoute.setStatus('current')
csMplsLspOperationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("operationallyDown", 1), ("initializing", 2), ("operationallyUp", 3), ("faultRecovery", 4), ("testing", 5), ("unknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csMplsLspOperationStatus.setStatus('current')
csMplsPathExpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathExpValue.setStatus('current')
csMplsPathCosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ef", 1), ("af1", 2), ("af2", 3), ("af3", 4), ("af4", 5), ("be", 6), ("none", 7), ("ef-low", 8), ("ef-high", 9))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathCosValue.setStatus('current')
csMplsPathDropPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("red", 1), ("yellow", 2), ("green", 3), ("none", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathDropPrecedence.setStatus('current')
csMplsPathHotStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathHotStandby.setStatus('current')
csMplsPathVpnAutoRouteAnnounce = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathVpnAutoRouteAnnounce.setStatus('current')
csMplsPathPwe3AutoRouteAnnounce = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathPwe3AutoRouteAnnounce.setStatus('current')
csMplsInterfaceConfTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 2), )
if mibBuilder.loadTexts: csMplsInterfaceConfTable.setStatus('current')
csMplsInterfaceConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"))
if mibBuilder.loadTexts: csMplsInterfaceConfEntry.setStatus('current')
csMplsInterfaceUseInterfaceLabels = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 2, 1, 1), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsInterfaceUseInterfaceLabels.setStatus('current')
csMplsInterfaceLabelRange = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("generic", 0), ("atm-range", 1), ("fr-range-dlci10", 2), ("fr-range-dlci17", 3), ("fr-range-dlci23", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsInterfaceLabelRange.setStatus('current')
csMplsInterfaceLabelMinIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 2, 1, 3), MplsLabel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsInterfaceLabelMinIn.setStatus('current')
csMplsInterfaceLabelMaxIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 2, 1, 4), MplsLabel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsInterfaceLabelMaxIn.setStatus('current')
csMplsInterfaceLabelMinOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 2, 1, 5), MplsLabel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsInterfaceLabelMinOut.setStatus('current')
csMplsInterfaceLabelMaxOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 2, 1, 6), MplsLabel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsInterfaceLabelMaxOut.setStatus('current')
csMplsInterfaceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsInterfaceAdminStatus.setStatus('current')
csMplsInterfaceOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csMplsInterfaceOperStatus.setStatus('current')
csMplsInterfaceAdminWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 2, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsInterfaceAdminWeight.setStatus('current')
csMplsInterfaceAttribFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 2, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsInterfaceAttribFlags.setStatus('current')
csMplsInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 2, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsInterfaceRowStatus.setStatus('current')
csMplsVrConfTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 3), )
if mibBuilder.loadTexts: csMplsVrConfTable.setStatus('current')
csMplsVrConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csMplsVrConfEntry.setStatus('current')
csMplsVrAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsVrAdminStatus.setStatus('current')
csMplsVrEventLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 3, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsVrEventLogLevel.setStatus('current')
csMplsVrEventLogArea = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 3, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsVrEventLogArea.setStatus('current')
csMplsVrConfOpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsVrConfOpCode.setStatus('current')
csMplsVrConfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsVrConfRowStatus.setStatus('current')
csMplsExtensionsTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 4), )
if mibBuilder.loadTexts: csMplsExtensionsTable.setStatus('current')
csMplsExtensionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csMplsExtensionsEntry.setStatus('current')
csMplsMetricStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("wide", 1), ("narrow", 2), ("transition", 3))).clone('narrow')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsMetricStyle.setStatus('current')
csMplsExtensionsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsExtensionsRowStatus.setStatus('current')
csMplsOspfOpaqueAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsOspfOpaqueAdminStatus.setStatus('current')
csMplsVrPathConfTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 5), )
if mibBuilder.loadTexts: csMplsVrPathConfTable.setStatus('current')
csMplsVrPathConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 5, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csMplsVrPathName"))
if mibBuilder.loadTexts: csMplsVrPathConfEntry.setStatus('current')
csMplsVrPathName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)))
if mibBuilder.loadTexts: csMplsVrPathName.setStatus('current')
csMplsVrPathExplicitRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsVrPathExplicitRoute.setStatus('current')
csMplsVrPathIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsVrPathIdentifier.setStatus('current')
csMplsVrPathConfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsVrPathConfRowStatus.setStatus('current')
csMplsIsisExtensionsTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 6), )
if mibBuilder.loadTexts: csMplsIsisExtensionsTable.setStatus('current')
csMplsIsisExtensionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 6, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csMplsTrafficEnggLevel"))
if mibBuilder.loadTexts: csMplsIsisExtensionsEntry.setStatus('current')
csMplsTrafficEnggLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("level-1", 1), ("level-2", 2))).clone('level-1'))
if mibBuilder.loadTexts: csMplsTrafficEnggLevel.setStatus('current')
csMplsTrafficEnggAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsTrafficEnggAdminStatus.setStatus('current')
csMplsIsisExtensionsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsIsisExtensionsRowStatus.setStatus('current')
csMplsOspfExtensionsTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 7), )
if mibBuilder.loadTexts: csMplsOspfExtensionsTable.setStatus('current')
csMplsOspfExtensionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 7, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csMplsOspfAreaId"))
if mibBuilder.loadTexts: csMplsOspfExtensionsEntry.setStatus('current')
csMplsOspfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 7, 1, 1), AreaID())
if mibBuilder.loadTexts: csMplsOspfAreaId.setStatus('current')
csMplsOspfAreaAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsOspfAreaAdminStatus.setStatus('current')
csMplsOspfExtensionsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 7, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsOspfExtensionsRowStatus.setStatus('current')
csMplsOspfExtensionsTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csMplsOspfExtensionsTableEnd.setStatus('current')
csLdpVrConfTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 1), )
if mibBuilder.loadTexts: csLdpVrConfTable.setStatus('current')
csLdpVrConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csLdpVrConfEntry.setStatus('current')
csLdpVrConfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpVrConfRowStatus.setStatus('current')
csLdpVrAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpVrAdminStatus.setStatus('current')
csLdpVrEventLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("critical", 1), ("debug", 2), ("inform", 3), ("major", 4), ("minor", 5))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpVrEventLogLevel.setStatus('current')
csLdpVrEventLogArea = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 1, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpVrEventLogArea.setStatus('current')
csLdpVrEventLogAreaMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 1, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpVrEventLogAreaMask.setStatus('current')
csLdpVrRoutePreference = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(9)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpVrRoutePreference.setStatus('current')
csLdpVrAutorouteAnnounce = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('on')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpVrAutorouteAnnounce.setStatus('current')
csLdpVrVpnAutorouteAnnounce = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('on')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpVrVpnAutorouteAnnounce.setStatus('current')
csLdpVrPwe3AutorouteAnnounce = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('on')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpVrPwe3AutorouteAnnounce.setStatus('current')
csLdpVrAcceptTargetedHellos = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("reject", 0), ("accept", 1))).clone('reject')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpVrAcceptTargetedHellos.setStatus('obsolete')
csLdpVrConfTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csLdpVrConfTableEnd.setStatus('current')
csLdpEntityTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 3), )
if mibBuilder.loadTexts: csLdpEntityTable.setStatus('current')
csLdpEntityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csLdpEntityEntry.setStatus('current')
csLdpEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: csLdpEntityIndex.setStatus('current')
csLdpEntityRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpEntityRowStatus.setStatus('current')
csLdpEntityAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpEntityAdminStatus.setStatus('current')
csLdpEntityHelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpEntityHelloTimer.setStatus('current')
csLdpEntityHelloHoldTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(15)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpEntityHelloHoldTimer.setStatus('current')
csLdpEntityKeepAliveTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpEntityKeepAliveTimer.setStatus('current')
csLdpEntityKeepAliveHoldTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpEntityKeepAliveHoldTimer.setStatus('current')
csLdpEntityTransportAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 3, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpEntityTransportAddr.setStatus('current')
csLdpTargetTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 4), )
if mibBuilder.loadTexts: csLdpTargetTable.setStatus('obsolete')
csLdpTargetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csLdpTargetPeerIpAddr"))
if mibBuilder.loadTexts: csLdpTargetEntry.setStatus('obsolete')
csLdpTargetPeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 4, 1, 1), IpAddress())
if mibBuilder.loadTexts: csLdpTargetPeerIpAddr.setStatus('obsolete')
csLdpTargetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpTargetRowStatus.setStatus('obsolete')
csLdpTargetAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpTargetAdminStatus.setStatus('obsolete')
csLdpTargetHelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpTargetHelloTimer.setStatus('obsolete')
csLdpTargetHelloHoldTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(45)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpTargetHelloHoldTimer.setStatus('obsolete')
csLdpTargetKeepAliveTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpTargetKeepAliveTimer.setStatus('obsolete')
csLdpTargetKeepAliveHoldTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpTargetKeepAliveHoldTimer.setStatus('obsolete')
csLdpTargetActive = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 4, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpTargetActive.setStatus('obsolete')
csOrionMplsEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionMplsEnd.setStatus('current')
csVpnVrfTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11, 1, 1), )
if mibBuilder.loadTexts: csVpnVrfTable.setStatus('current')
csVpnVrfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11, 1, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csVpnVrfName"))
if mibBuilder.loadTexts: csVpnVrfEntry.setStatus('current')
csVpnVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csVpnVrfName.setStatus('current')
csVpnVrfDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csVpnVrfDescription.setStatus('current')
csVpnVrfProviderName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csVpnVrfProviderName.setStatus('current')
csVpnVrfRouteDistinguisher = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csVpnVrfRouteDistinguisher.setStatus('current')
csVpnVrfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csVpnVrfAdminStatus.setStatus('current')
csVpnVrfLogAreaFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csVpnVrfLogAreaFlag.setStatus('current')
csVpnVrfLogLevelFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("critical", 1), ("error", 2), ("warning", 3), ("information", 4), ("detail", 5), ("debug", 6))).clone('critical')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csVpnVrfLogLevelFlag.setStatus('current')
csVpnVrfPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csVpnVrfPreference.setStatus('current')
csVpnVrfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11, 1, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csVpnVrfRowStatus.setStatus('current')
csVpnVrfSiteOfOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11, 1, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csVpnVrfSiteOfOrigin.setStatus('current')
csVpnVrfAllowASIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csVpnVrfAllowASIn.setStatus('current')
csVpnVrfASOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11, 1, 1, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csVpnVrfASOverride.setStatus('current')
csVpnVrfMaxRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11, 1, 1, 1, 13), Integer32().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csVpnVrfMaxRoutes.setStatus('current')
csVpnVrfMaxRoutesExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("discard", 0), ("warning-message", 1))).clone('discard')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csVpnVrfMaxRoutesExceedAction.setStatus('current')
csVpnVrfRouteTargetTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11, 1, 2), )
if mibBuilder.loadTexts: csVpnVrfRouteTargetTable.setStatus('current')
csVpnVrfRouteTargetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11, 1, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csVpnVrfName"), (0, "COSINE-ORION-MIB", "csVpnVrfRouteTargetType"), (0, "COSINE-ORION-MIB", "csVpnVrfRouteTargetValue"))
if mibBuilder.loadTexts: csVpnVrfRouteTargetEntry.setStatus('current')
csVpnVrfRouteTargetType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("import", 1), ("export", 2))))
if mibBuilder.loadTexts: csVpnVrfRouteTargetType.setStatus('current')
csVpnVrfRouteTargetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8)))
if mibBuilder.loadTexts: csVpnVrfRouteTargetValue.setStatus('current')
csVpnVrfRouteTargetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csVpnVrfRouteTargetRowStatus.setStatus('current')
csOrionViPbfFilterTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 12, 1), )
if mibBuilder.loadTexts: csOrionViPbfFilterTable.setStatus('current')
csOrionViPbfFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 12, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"), (0, "COSINE-ORION-MIB", "csOrionViPbfFilterIndex"))
if mibBuilder.loadTexts: csOrionViPbfFilterEntry.setStatus('current')
csOrionViPbfFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csOrionViPbfFilterIndex.setStatus('current')
csOrionViPbfFilterAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionViPbfFilterAclId.setStatus('current')
csOrionViPbfFilterEgressViId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 12, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionViPbfFilterEgressViId.setStatus('current')
csOrionViPbfFilterNextHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 12, 1, 1, 4), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionViPbfFilterNextHopIpAddr.setStatus('current')
csOrionViPbfFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("discard", 2))).clone('permit')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionViPbfFilterAction.setStatus('current')
csOrionViPbfFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 12, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionViPbfFilterRowStatus.setStatus('current')
csOrionViPbfFilterCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 12, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionViPbfFilterCounter.setStatus('current')
csIgmpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 1), )
if mibBuilder.loadTexts: csIgmpInterfaceTable.setStatus('current')
csIgmpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csIgmpInterfaceIfIndex"))
if mibBuilder.loadTexts: csIgmpInterfaceEntry.setStatus('current')
csIgmpInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: csIgmpInterfaceIfIndex.setStatus('current')
csIgmpInterfaceQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 1, 1, 2), Unsigned32().clone(125)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIgmpInterfaceQueryInterval.setStatus('current')
csIgmpInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIgmpInterfaceStatus.setStatus('current')
csIgmpInterfaceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 1, 1, 4), Unsigned32().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIgmpInterfaceVersion.setStatus('current')
csIgmpInterfaceQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIgmpInterfaceQuerier.setStatus('current')
csIgmpInterfaceQueryMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(100)).setUnits('tenths of seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIgmpInterfaceQueryMaxResponseTime.setStatus('current')
csIgmpInterfaceQuerierUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIgmpInterfaceQuerierUpTime.setStatus('current')
csIgmpInterfaceQuerierExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 1, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIgmpInterfaceQuerierExpiryTime.setStatus('current')
csIgmpInterfaceVersion1QuerierTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIgmpInterfaceVersion1QuerierTimer.setStatus('current')
csIgmpInterfaceWrongVersionQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIgmpInterfaceWrongVersionQueries.setStatus('current')
csIgmpInterfaceJoins = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIgmpInterfaceJoins.setStatus('current')
csIgmpInterfaceProxyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 1, 1, 12), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIgmpInterfaceProxyIfIndex.setStatus('current')
csIgmpInterfaceGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIgmpInterfaceGroups.setStatus('current')
csIgmpInterfaceRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIgmpInterfaceRobustness.setStatus('current')
csIgmpInterfaceLastMembQueryIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(10)).setUnits('tenths of seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIgmpInterfaceLastMembQueryIntvl.setStatus('current')
csIgmpInterfaceMulticastTTLThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIgmpInterfaceMulticastTTLThreshold.setStatus('current')
csIgmpInterfaceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIgmpInterfaceAdminStatus.setStatus('current')
csIgmpCacheTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 2), )
if mibBuilder.loadTexts: csIgmpCacheTable.setStatus('current')
csIgmpCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csIgmpCacheAddress"), (0, "COSINE-ORION-MIB", "csIgmpCacheIfIndex"))
if mibBuilder.loadTexts: csIgmpCacheEntry.setStatus('current')
csIgmpCacheAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: csIgmpCacheAddress.setStatus('current')
csIgmpCacheIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 2, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: csIgmpCacheIfIndex.setStatus('current')
csIgmpCacheSelf = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 2, 1, 3), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIgmpCacheSelf.setStatus('current')
csIgmpCacheLastReporter = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIgmpCacheLastReporter.setStatus('current')
csIgmpCacheUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 2, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIgmpCacheUpTime.setStatus('current')
csIgmpCacheExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 2, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIgmpCacheExpiryTime.setStatus('current')
csIgmpCacheStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIgmpCacheStatus.setStatus('current')
csIgmpCacheVersion1HostTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 2, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIgmpCacheVersion1HostTimer.setStatus('current')
csIgmpStaticGroupTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 3), )
if mibBuilder.loadTexts: csIgmpStaticGroupTable.setStatus('current')
csIgmpStaticGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csIgmpStaticGroupIfIndex"), (0, "COSINE-ORION-MIB", "csIgmpStaticGroupAddress"))
if mibBuilder.loadTexts: csIgmpStaticGroupEntry.setStatus('current')
csIgmpStaticGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: csIgmpStaticGroupIfIndex.setStatus('current')
csIgmpStaticGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 3, 1, 2), IpAddress())
if mibBuilder.loadTexts: csIgmpStaticGroupAddress.setStatus('current')
csIgmpStaticGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIgmpStaticGroupStatus.setStatus('current')
csIgmpAccessGroupTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 4), )
if mibBuilder.loadTexts: csIgmpAccessGroupTable.setStatus('current')
csIgmpAccessGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csIgmpAccessGroupIfIndex"), (0, "COSINE-ORION-MIB", "csIgmpAccessGroupAddress"))
if mibBuilder.loadTexts: csIgmpAccessGroupEntry.setStatus('current')
csIgmpAccessGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: csIgmpAccessGroupIfIndex.setStatus('current')
csIgmpAccessGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 4, 1, 2), IpAddress())
if mibBuilder.loadTexts: csIgmpAccessGroupAddress.setStatus('current')
csIgmpAccessGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIgmpAccessGroupStatus.setStatus('current')
csIgmpGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 5), )
if mibBuilder.loadTexts: csIgmpGeneralTable.setStatus('current')
csIgmpGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 5, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csIgmpGeneralEntry.setStatus('current')
csIgmpGeneralEntryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 5, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIgmpGeneralEntryRowStatus.setStatus('current')
csPwVcTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1), )
if mibBuilder.loadTexts: csPwVcTable.setStatus('current')
csPwVcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csPwVcEntry.setStatus('current')
csPwVcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 1), PwVcIndex())
if mibBuilder.loadTexts: csPwVcIndex.setStatus('current')
csPwVcID = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 2), PwVcID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcID.setStatus('current')
csPwVcOutboundGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 3), PwGroupID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPwVcOutboundGroupID.setStatus('current')
csPwVcInboundGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 4), PwGroupID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcInboundGroupID.setStatus('current')
csPwVcInboundMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcInboundMTU.setStatus('current')
csPwVcPeerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ipV4", 1), ("ipV6", 2), ("notApplicable", 3))).clone('ipV4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcPeerAddrType.setStatus('current')
csPwVcPeerIpv4Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcPeerIpv4Addr.setStatus('current')
csPwVcPeerIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcPeerIpv6Addr.setStatus('current')
csPwVcOutboundVcLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcOutboundVcLabel.setStatus('current')
csPwVcInboundVcLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 10), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcInboundVcLabel.setStatus('current')
csPwVcInboundMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("liberal", 1), ("conservative", 2))).clone('liberal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcInboundMode.setStatus('current')
csPwVcName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 12), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcName.setStatus('current')
csPwVcDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 13), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcDescr.setStatus('current')
csPwVcCreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 14), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPwVcCreateTime.setStatus('current')
csPwVcUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPwVcUpTime.setStatus('current')
csPwVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("frameRelay", 1), ("atmAal5Vcc", 2), ("atmTransparent", 3), ("ethernetVLAN", 4), ("ethernet", 5), ("hdlcCisco", 6), ("ppp", 7), ("cem", 8), ("atmVccCell", 9), ("atmVpcCell", 10), ("transparentLanService", 11), ("unspecified", 12))).clone('unspecified')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcType.setStatus('current')
csPwVcOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("signaling", 2), ("other", 3))).clone('signaling')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcOwner.setStatus('current')
csPwVcPsnType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("mpls", 1), ("l2tp", 2), ("ip", 3), ("mplsOverIp", 4), ("gre", 5), ("other", 6))).clone('mpls')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcPsnType.setStatus('current')
csPwVcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 19), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcPriority.setStatus('current')
csPwVcAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcAdminStatus.setStatus('current')
csPwVcOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5), ("notPresent", 6), ("lowerLayerDown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPwVcOperStatus.setStatus('current')
csPwVcInboundOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5), ("notPresent", 6), ("lowerLayerDown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPwVcInboundOperStatus.setStatus('current')
csPwVcOutboundOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5), ("notPresent", 6), ("lowerLayerDown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPwVcOutboundOperStatus.setStatus('current')
csPwVcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 24), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcRowStatus.setStatus('current')
csPwVcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 25), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcStorageType.setStatus('current')
csPwVcCeIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)).clone('DISCONNECTED')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcCeIntf.setStatus('current')
csPwVcForwardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 26))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcForwardSlot.setStatus('current')
csPwVcForwardPE = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcForwardPE.setStatus('current')
csPwVcCtrlWord = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 29), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcCtrlWord.setStatus('current')
csPwVcSeqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 30), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcSeqNumber.setStatus('current')
csPwVcTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("testNotInProgress", 1), ("testResultUnknown", 2), ("testFailed", 3), ("testSucceded", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcTestResult.setStatus('current')
csPwVcVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcVlanId.setStatus('current')
csPwVcCustomerId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 33), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcCustomerId.setStatus('current')
csPwVcCustomerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 34), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcCustomerName.setStatus('current')
csPwe3ConfTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 2), )
if mibBuilder.loadTexts: csPwe3ConfTable.setStatus('current')
csPwe3ConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csPwe3ConfEntry.setStatus('current')
csPwe3EventLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("critical", 1), ("error", 2), ("warning", 3), ("information", 4), ("debug", 5))).clone('critical')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwe3EventLogLevel.setStatus('current')
csPwe3EventLogArea = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 2, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwe3EventLogArea.setStatus('current')
csPwe3ConfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwe3ConfRowStatus.setStatus('current')
csOrionChangeTableOID = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 3, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionChangeTableOID.setStatus('current')
csOrionChangeSource = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cli", 1), ("httpd", 2), ("snmp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionChangeSource.setStatus('current')
csOrionChangeSourceUserName = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionChangeSourceUserName.setStatus('current')
csOrionLogLinkSlotIndex = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionLogLinkSlotIndex.setStatus('current')
csOrionLogLinkPortIndex = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionLogLinkPortIndex.setStatus('current')
csOrionLogLinkChannelIndex = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionLogLinkChannelIndex.setStatus('current')
csOrionLogLinkSubIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionLogLinkSubIfIndex.setStatus('current')
csOrionNumConfigChanges = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionNumConfigChanges.setStatus('current')
csOrionConfigChangeType = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("delete", 1), ("addModify", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionConfigChangeType.setStatus('current')
csOrionPortIndex = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionPortIndex.setStatus('current')
csOrionRestoreBladeStatus = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fail", 1), ("success", 2), ("coldStart", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionRestoreBladeStatus.setStatus('current')
csOrionRestoreSlotIndex = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 3, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionRestoreSlotIndex.setStatus('current')
csOrionRestoreNumVRs = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 3, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionRestoreNumVRs.setStatus('current')
csOrionAlarmType = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("farEndReceiveFailure", 0), ("lossOfSignal", 1), ("lossOfFrame", 2), ("lossOfClock", 3), ("alarmIndicationSignal", 4), ("portIdleAlarm", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionAlarmType.setStatus('current')
csOrionOc3AlarmType = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("lossOfClock", 1), ("farEndProtectLineFail", 2), ("nearEndProtectLineFail", 3), ("protectSwtichByteFail", 4), ("channelMismatchFail", 5), ("apsModeMismatch", 6), ("remoteDefectIndicatorLine", 7), ("noId", 8), ("lossOfSignal", 9), ("lossOfFrame", 10), ("alarmIndicatSignalLine", 11), ("alarmIndicatSignalPath", 12), ("lossOfPointer", 13), ("signalLabelMismatch", 14), ("j1PTMismatch", 15), ("lossOfCellDeliniation", 16), ("remoteDefectIndicatorPath", 17), ("numOfAlarmCountDummy", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionOc3AlarmType.setStatus('current')
csOrionAlarmAffectType = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notServiceAffect", 1), ("serviceAffect", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionAlarmAffectType.setStatus('current')
csOrionAlarmSeverityType = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 3, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("minor", 1), ("major", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionAlarmSeverityType.setStatus('current')
csOrionLogLinkModuleIndex = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 3, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionLogLinkModuleIndex.setStatus('current')
csOrionModuleIndex = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 3, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionModuleIndex.setStatus('current')
csRadiusServer = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 4, 1))
csDnsServer = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 4, 2))
csOrionBladeTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1), )
if mibBuilder.loadTexts: csOrionBladeTable.setStatus('current')
csOrionBladeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionBladeSlotLocation"))
if mibBuilder.loadTexts: csOrionBladeEntry.setStatus('current')
csOrionBladeSlotLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeSlotLocation.setStatus('current')
csOrionBladeDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeDescr.setStatus('current')
csOrionBladeType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("process", 1), ("control", 2), ("ethernet", 3), ("ds3Unchannelized", 4), ("ds3channelized", 5), ("oc3Atm", 6), ("oc3Pos", 7), ("e3Unchannelized", 8), ("e3channelized", 9), ("gige", 10), ("oc12atm", 11), ("oc12pos", 12), ("quad-oc3-atm", 13), ("ipsg", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeType.setStatus('current')
csOrionBladeState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("notPresent", 1), ("inactive", 2), ("active", 3), ("softwareLoading", 4), ("operational", 5), ("nonOperational", 6), ("failedWithBackup", 7), ("failedWithOutBackup", 8), ("backup", 9), ("standby", 10), ("reboot", 11), ("disabled", 12), ("master", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeState.setStatus('current')
csOrionBladeEnginesNumb = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeEnginesNumb.setStatus('obsolete')
csOrionBladePortNumb = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladePortNumb.setStatus('current')
csOrionBladeSerialNumb = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeSerialNumb.setStatus('obsolete')
csOrionBladeHwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeHwVer.setStatus('obsolete')
csOrionBladeSwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeSwVer.setStatus('obsolete')
csOrionBladeReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionBladeReset.setStatus('current')
csOrionBladeConfigAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeConfigAttributes.setStatus('deprecated')
csOrionBladeOperAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeOperAttributes.setStatus('deprecated')
csOrionBladeModelNumb = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeModelNumb.setStatus('current')
csOrionBladeCLEICode = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeCLEICode.setStatus('current')
csOrionBladeFPGAVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeFPGAVersion.setStatus('current')
csOrionBladePort1MacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 16), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladePort1MacAddr.setStatus('current')
csOrionBladePort2MacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 17), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladePort2MacAddr.setStatus('current')
csOrionBladePort3MacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 18), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladePort3MacAddr.setStatus('current')
csOrionBladePort4MacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 19), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladePort4MacAddr.setStatus('current')
csOrionBladeIPSXLoaderProduct = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeIPSXLoaderProduct.setStatus('current')
csOrionBladeIPSXLoaderVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeIPSXLoaderVersion.setStatus('obsolete')
csOrionBladeIPSXLoaderDate = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeIPSXLoaderDate.setStatus('obsolete')
csOrionBladeIPSXLoaderTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeIPSXLoaderTime.setStatus('obsolete')
csOrionBladeTemperatureSensor1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeTemperatureSensor1.setStatus('current')
csOrionBladeTemperatureSensor2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeTemperatureSensor2.setStatus('current')
csOrionBladeTemperatureSensor3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeTemperatureSensor3.setStatus('current')
csOrionBladeTemperatureSensor4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeTemperatureSensor4.setStatus('current')
csOrionBladeShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("shutdown", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionBladeShutdown.setStatus('current')
csOrionBladeNumSharcCrypto = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeNumSharcCrypto.setStatus('current')
csOrionBladeSharcCryptoModuleId1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeSharcCryptoModuleId1.setStatus('current')
csOrionBladeSharcCryptoModuleId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeSharcCryptoModuleId2.setStatus('current')
csOrionBladeSharcCryptoType1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 8))).clone(namedValues=NamedValues(("none", 0), ("sharcCrypto", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeSharcCryptoType1.setStatus('current')
csOrionBladeSharcCryptoType2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 8))).clone(namedValues=NamedValues(("none", 0), ("sharcCrypto", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeSharcCryptoType2.setStatus('current')
csOrionBladeSharcCryptoSerial1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeSharcCryptoSerial1.setStatus('current')
csOrionBladeSharcCryptoSerial2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeSharcCryptoSerial2.setStatus('current')
csOrionBladeSharcCryptoAssembly1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeSharcCryptoAssembly1.setStatus('current')
csOrionBladeSharcCryptoAssembly2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeSharcCryptoAssembly2.setStatus('current')
csOrionEngineTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2), )
if mibBuilder.loadTexts: csOrionEngineTable.setStatus('current')
csOrionEngineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionBladeSlotLocation"), (0, "COSINE-ORION-MIB", "csOrionEngineIndex"))
if mibBuilder.loadTexts: csOrionEngineEntry.setStatus('current')
csOrionEngineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: csOrionEngineIndex.setStatus('current')
csOrionEngineMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineMemorySize.setStatus('obsolete')
csOrionEngineMemoryUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineMemoryUtil.setStatus('current')
csOrionEngineType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42))).clone(namedValues=NamedValues(("mainCpu", 1), ("cpu", 2), ("search", 3), ("encryption", 4), ("dualCpus", 5), ("singleCpu", 6), ("cpuHwFwdEng", 7), ("baseBlade", 8), ("evalBaseBlade", 9), ("switchFabric", 10), ("sharcCpu", 11), ("sharcCrypto", 12), ("gigeInterface", 13), ("oc12PosMm", 14), ("oc12PosSm", 15), ("oc12AtmMm", 16), ("oc12AtmSm", 17), ("quadOc3PosMm", 18), ("quadOc3PosSm", 19), ("quadOc3AtmMm", 20), ("quadOc3AtmSm", 21), ("triPortDs3U", 22), ("triPortE3U", 23), ("triPortDs3C", 24), ("dualOc3Ch", 25), ("dualGige", 26), ("eightPortOc3AtmMm", 27), ("eightPortOc3AtmSm", 28), ("dualPortOc12AtmMm", 29), ("dualPortOc12AtmSm", 30), ("dualPortOc12PosMm", 31), ("dualPortOc12PosSm", 32), ("sharcBoot", 33), ("osLoader", 34), ("sharcControl", 35), ("sharcCpuSingle", 36), ("sharcCpuFwd", 37), ("midPlane", 38), ("quadOc3ChMm", 39), ("quadOc3ChSm", 40), ("dualPortOc12ChMm", 41), ("dualPortOc12ChSm", 42)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineType.setStatus('current')
csOrionEngineDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineDescr.setStatus('obsolete')
csOrionEngineUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineUtilization.setStatus('current')
csOrionEngineTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-67, 257))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineTemperature.setStatus('obsolete')
csOrionEngineState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("notPresent", 1), ("inactive", 2), ("active", 3), ("softwareLoading", 4), ("operational", 5), ("nonOperational", 6), ("failedWithBackup", 7), ("failedWithOutBackup", 8), ("backup", 9), ("standby", 10), ("reboot", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineState.setStatus('current')
csOrionEngineConfigAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineConfigAttributes.setStatus('deprecated')
csOrionEngineOperAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineOperAttributes.setStatus('deprecated')
csOrionEngineLoaderProduct = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineLoaderProduct.setStatus('current')
csOrionEngineLoaderVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineLoaderVersion.setStatus('current')
csOrionEngineLoaderDate = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineLoaderDate.setStatus('current')
csOrionEngineLoaderTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineLoaderTime.setStatus('current')
csOrionEngineApplicationProduct = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineApplicationProduct.setStatus('current')
csOrionEngineApplicationVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineApplicationVersion.setStatus('current')
csOrionEngineApplicationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineApplicationDate.setStatus('current')
csOrionEngineApplicationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineApplicationTime.setStatus('current')
csOrionEngineSerialNumb = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineSerialNumb.setStatus('current')
csOrionEngineAssemblyNumb = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineAssemblyNumb.setStatus('current')
csOrionEngineCpuType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("mips-rm5270", 1), ("mips-rm5271", 2), ("mips-rm7000", 3), ("mips-unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineCpuType.setStatus('current')
csOrionEngineCpuVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineCpuVersion.setStatus('current')
csOrionEngineDataCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 24), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineDataCacheSize.setStatus('current')
csOrionEngineInstructionCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 25), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineInstructionCacheSize.setStatus('current')
csOrionEngineSecondaryCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 26), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineSecondaryCacheSize.setStatus('current')
csOrionEngineLevel3CacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 27), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineLevel3CacheSize.setStatus('current')
csOrionEngineMemoryAllocs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineMemoryAllocs.setStatus('current')
csOrionEngineMemoryAllocFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineMemoryAllocFailures.setStatus('current')
csOrionEngineMemoryFrees = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineMemoryFrees.setStatus('current')
csOrionEngineMemoryBadFrees = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineMemoryBadFrees.setStatus('current')
csOrionEngineMemoryBytesAllocs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 32), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineMemoryBytesAllocs.setStatus('current')
csOrionEngineMemoryBytesFreed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 33), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineMemoryBytesFreed.setStatus('current')
csOrionEngineFreeMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 34), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineFreeMemory.setStatus('current')
csOrionEngineLargestFreeMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 35), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineLargestFreeMemory.setStatus('current')
csOrionEngineFreeMemoryMedium = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 36), Gauge32()).setUnits('100 kbyte').setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineFreeMemoryMedium.setStatus('current')
csOrionEngineFreeMemoryLong = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 37), Gauge32()).setUnits('100 kbyte').setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineFreeMemoryLong.setStatus('current')
csOrionEngineUtilizationMedium = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineUtilizationMedium.setStatus('current')
csOrionEngineUtilizationLong = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineUtilizationLong.setStatus('current')
csOrionEngineForwardingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionEngineForwardingMode.setStatus('current')
csOrionEngineOsVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineOsVersion.setStatus('current')
csOrionServiceQueueInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3))
csOrionQueueGroupTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 1), )
if mibBuilder.loadTexts: csOrionQueueGroupTable.setStatus('current')
csOrionQueueGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionBladeSlotLocation"), (0, "COSINE-ORION-MIB", "csOrionQueueGroupType"), (0, "COSINE-ORION-MIB", "csOrionQueueGroupId"), (0, "COSINE-ORION-MIB", "csOrionQueueGroupPriorityIndex"))
if mibBuilder.loadTexts: csOrionQueueGroupEntry.setStatus('current')
csOrionQueueGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("systemQueue", 1), ("portQueue", 2))))
if mibBuilder.loadTexts: csOrionQueueGroupType.setStatus('current')
csOrionQueueGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: csOrionQueueGroupId.setStatus('current')
csOrionQueueGroupPriorityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: csOrionQueueGroupPriorityIndex.setStatus('current')
csOrionQueueGroupSubGroupAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionQueueGroupSubGroupAllocation.setStatus('current')
csOrionQueueGroupOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 1, 1, 5), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionQueueGroupOperStatus.setStatus('current')
csOrionQueueGroupTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionQueueGroupTableEnd.setStatus('current')
csOrionQueueTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 3), )
if mibBuilder.loadTexts: csOrionQueueTable.setStatus('current')
csOrionQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionBladeSlotLocation"), (0, "COSINE-ORION-MIB", "csOrionQueueGroupType"), (0, "COSINE-ORION-MIB", "csOrionQueueGroupId"), (0, "COSINE-ORION-MIB", "csOrionQueueGroupPriorityIndex"), (0, "COSINE-ORION-MIB", "csOrionQueueId"))
if mibBuilder.loadTexts: csOrionQueueEntry.setStatus('current')
csOrionQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: csOrionQueueId.setStatus('current')
csOrionQueueClassOfService = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("control", 1), ("efGuaranteed", 2), ("ef", 3), ("af1", 4), ("af2", 5), ("af3", 6), ("af4", 7), ("be", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionQueueClassOfService.setStatus('current')
csOrionQueueWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionQueueWeight.setStatus('current')
csOrionQueueMinThresholdForRed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionQueueMinThresholdForRed.setStatus('current')
csOrionQueueMinThresholdForYellow = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionQueueMinThresholdForYellow.setStatus('current')
csOrionQueueMinThresholdForGreen = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionQueueMinThresholdForGreen.setStatus('current')
csOrionQueueMaxRandomForRed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionQueueMaxRandomForRed.setStatus('current')
csOrionQueueMaxRandomForYellow = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionQueueMaxRandomForYellow.setStatus('current')
csOrionQueueMaxRandomForGreen = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionQueueMaxRandomForGreen.setStatus('current')
csOrionQueueMaxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionQueueMaxThreshold.setStatus('current')
csOrionQueueTotalByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionQueueTotalByteCount.setStatus('current')
csOrionQueuePacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionQueuePacketCount.setStatus('current')
csOrionQueueAverageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionQueueAverageSize.setStatus('current')
csOrionBladeInfoEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeInfoEnd.setStatus('current')
csOrionAccessListTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 1), )
if mibBuilder.loadTexts: csOrionAccessListTable.setStatus('current')
csOrionAccessListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"), (0, "COSINE-ORION-MIB", "csOrionAccessListId"))
if mibBuilder.loadTexts: csOrionAccessListEntry.setStatus('current')
csOrionAccessListId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csOrionAccessListId.setStatus('current')
csOrionAccessListStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionAccessListStartAddress.setStatus('current')
csOrionAccessListEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 1, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionAccessListEndAddress.setStatus('current')
csOrionAccessListPoolId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionAccessListPoolId.setStatus('current')
csOrionAccessListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionAccessListStatus.setStatus('current')
csOrionGenAclTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 2), )
if mibBuilder.loadTexts: csOrionGenAclTable.setStatus('current')
csOrionGenAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionGenAclId"))
if mibBuilder.loadTexts: csOrionGenAclEntry.setStatus('current')
csOrionGenAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csOrionGenAclId.setStatus('current')
csOrionGenAclSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 2, 1, 2), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionGenAclSrcAddress.setStatus('current')
csOrionGenAclSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 2, 1, 3), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionGenAclSrcMask.setStatus('current')
csOrionGenAclDstAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 2, 1, 4), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionGenAclDstAddress.setStatus('current')
csOrionGenAclDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 2, 1, 5), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionGenAclDstMask.setStatus('current')
csOrionGenAclProt = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 2, 1, 6), Integer32().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionGenAclProt.setStatus('current')
csOrionGenAclTos = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionGenAclTos.setStatus('current')
csOrionGenAclStartSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 2, 1, 8), Integer32().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionGenAclStartSrcPort.setStatus('current')
csOrionGenAclEndSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 2, 1, 9), Integer32().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionGenAclEndSrcPort.setStatus('current')
csOrionGenAclStartDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 2, 1, 10), Integer32().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionGenAclStartDstPort.setStatus('current')
csOrionGenAclEndDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 2, 1, 11), Integer32().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionGenAclEndDstPort.setStatus('current')
csOrionGenAclStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 2, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionGenAclStatus.setStatus('current')
csOrionGenAclSrcAddressList = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionGenAclSrcAddressList.setStatus('current')
csOrionGenAclDstAddressList = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionGenAclDstAddressList.setStatus('current')
csOrionGenAclSrcPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 2, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionGenAclSrcPortList.setStatus('current')
csOrionGenAclDstPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 2, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionGenAclDstPortList.setStatus('current')
csOrionGenAclTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionGenAclTableEnd.setStatus('current')
csOrionAddressListTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 4), )
if mibBuilder.loadTexts: csOrionAddressListTable.setStatus('current')
csOrionAddressListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionAddressListName"), (0, "COSINE-ORION-MIB", "csOrionAddressListIpAddress"), (0, "COSINE-ORION-MIB", "csOrionAddressListMask"))
if mibBuilder.loadTexts: csOrionAddressListEntry.setStatus('current')
csOrionAddressListName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80)))
if mibBuilder.loadTexts: csOrionAddressListName.setStatus('current')
csOrionAddressListIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 4, 1, 2), IpAddress())
if mibBuilder.loadTexts: csOrionAddressListIpAddress.setStatus('current')
csOrionAddressListMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 4, 1, 3), IpAddress())
if mibBuilder.loadTexts: csOrionAddressListMask.setStatus('current')
csOrionAddressListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionAddressListRowStatus.setStatus('current')
csOrionAddressListTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionAddressListTableEnd.setStatus('current')
csOrionNumericListTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 6), )
if mibBuilder.loadTexts: csOrionNumericListTable.setStatus('current')
csOrionNumericListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 6, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionNumericListType"), (0, "COSINE-ORION-MIB", "csOrionNumericListName"), (0, "COSINE-ORION-MIB", "csOrionNumericListValue"), (0, "COSINE-ORION-MIB", "csOrionNumericListUpperLimit"))
if mibBuilder.loadTexts: csOrionNumericListEntry.setStatus('current')
csOrionNumericListType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("port", 1))).clone('port'))
if mibBuilder.loadTexts: csOrionNumericListType.setStatus('current')
csOrionNumericListName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80)))
if mibBuilder.loadTexts: csOrionNumericListName.setStatus('current')
csOrionNumericListValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: csOrionNumericListValue.setStatus('current')
csOrionNumericListUpperLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: csOrionNumericListUpperLimit.setStatus('current')
csOrionNumericListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionNumericListRowStatus.setStatus('current')
csOrionAccessListInfoEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionAccessListInfoEnd.setStatus('current')
csOrionFwConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1))
csOrionFwGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1))
csOrionFwProxyConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2))
csOrionFwGenProxyConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1))
csOrionFwFtpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2))
csOrionFwHttpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3))
csOrionFwSmtpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4))
csOrionFwTelnetConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 5))
csOrionFwPop3Config = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 6))
csOrionFwPlugConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 7))
csOrionFwNntpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 8))
csOrionFwLdapConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 9))
csOrionFwLnotesConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 10))
csOrionFwAolConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 11))
csOrionFwCompuServeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 12))
csOrionFwNetMeetingConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 13))
csOrionFwMsSqlConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 14))
csOrionFwRshConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 15))
csOrionFwInsideIfTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 1), )
if mibBuilder.loadTexts: csOrionFwInsideIfTable.setStatus('deprecated')
csOrionFwInsideIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwInsideIfIf"), (0, "COSINE-ORION-MIB", "csOrionFwInsideIfAddr"))
if mibBuilder.loadTexts: csOrionFwInsideIfEntry.setStatus('deprecated')
csOrionFwInsideIfIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: csOrionFwInsideIfIf.setStatus('deprecated')
csOrionFwInsideIfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: csOrionFwInsideIfAddr.setStatus('deprecated')
csOrionFwInsideIfMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 1, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwInsideIfMask.setStatus('deprecated')
csOrionFwInsideIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwInsideIfRowStatus.setStatus('deprecated')
csOrionFwDmzIfTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 2), )
if mibBuilder.loadTexts: csOrionFwDmzIfTable.setStatus('deprecated')
csOrionFwDmzIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwDmzIf"), (0, "COSINE-ORION-MIB", "csOrionFwDmzIfAddr"))
if mibBuilder.loadTexts: csOrionFwDmzIfEntry.setStatus('deprecated')
csOrionFwDmzIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: csOrionFwDmzIf.setStatus('deprecated')
csOrionFwDmzIfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: csOrionFwDmzIfAddr.setStatus('deprecated')
csOrionFwDmzIfMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 2, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwDmzIfMask.setStatus('deprecated')
csOrionFwDmzIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwDmzIfRowStatus.setStatus('deprecated')
csOrionFwNwGroupTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 3), )
if mibBuilder.loadTexts: csOrionFwNwGroupTable.setStatus('deprecated')
csOrionFwNwGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwNwGroupName"), (0, "COSINE-ORION-MIB", "csOrionFwNwGroupAddr"))
if mibBuilder.loadTexts: csOrionFwNwGroupEntry.setStatus('deprecated')
csOrionFwNwGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: csOrionFwNwGroupName.setStatus('deprecated')
csOrionFwNwGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 3, 1, 2), IpAddress())
if mibBuilder.loadTexts: csOrionFwNwGroupAddr.setStatus('deprecated')
csOrionFwNwGroupMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 3, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwNwGroupMask.setStatus('deprecated')
csOrionFwNwGroupInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inside", 1), ("outside", 2), ("serviceNet", 3), ("any", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwNwGroupInterface.setStatus('deprecated')
csOrionFwNwGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwNwGroupRowStatus.setStatus('deprecated')
csOrionFwEvLogTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 4), )
if mibBuilder.loadTexts: csOrionFwEvLogTable.setStatus('current')
csOrionFwEvLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionFwEvLogEntry.setStatus('current')
csOrionFwEvLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 4, 1, 1), EvLogLevel().clone('major')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwEvLogLevel.setStatus('current')
csOrionFwGenCfgTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 5), )
if mibBuilder.loadTexts: csOrionFwGenCfgTable.setStatus('current')
csOrionFwGenCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 5, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionFwGenCfgEntry.setStatus('current')
csOrionFwAccCfgFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("insync", 1), ("outofsync", 2), ("readytosync", 3))).clone('insync')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwAccCfgFlag.setStatus('current')
csOrionFwGenProxyTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 1), )
if mibBuilder.loadTexts: csOrionFwGenProxyTable.setStatus('current')
csOrionFwGenProxyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwGenProxyId"))
if mibBuilder.loadTexts: csOrionFwGenProxyEntry.setStatus('current')
csOrionFwGenProxyId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("ftp", 1), ("http", 2), ("telnet", 3), ("smtp", 4), ("pop3", 5), ("plug", 6), ("nntp", 7), ("ldap", 8), ("lnotes", 9), ("rsh", 10), ("aol", 11), ("cs", 12), ("netm", 13), ("mssql", 14))))
if mibBuilder.loadTexts: csOrionFwGenProxyId.setStatus('current')
csOrionFwGenProxyChildLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwGenProxyChildLimit.setStatus('current')
csOrionFwGenProxyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwGenProxyStatus.setStatus('current')
csOrionFwGenProxyActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFwGenProxyActiveSessions.setStatus('current')
csOrionFwDestTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 2), )
if mibBuilder.loadTexts: csOrionFwDestTable.setStatus('deprecated')
csOrionFwDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwDestProxy"), (0, "COSINE-ORION-MIB", "csOrionFwDestIndex"))
if mibBuilder.loadTexts: csOrionFwDestEntry.setStatus('deprecated')
csOrionFwDestProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("ftp", 1), ("http", 2), ("telnet", 3), ("smtp", 4), ("pop3", 5), ("plug", 6), ("nntp", 7), ("ldap", 8), ("lnotes", 9), ("mssql", 10), ("aol", 11), ("cs", 12), ("netm", 13))))
if mibBuilder.loadTexts: csOrionFwDestProxy.setStatus('deprecated')
csOrionFwDestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csOrionFwDestIndex.setStatus('deprecated')
csOrionFwDestAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('permit')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwDestAccess.setStatus('deprecated')
csOrionFwDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 2, 1, 4), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwDestAddr.setStatus('deprecated')
csOrionFwDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 2, 1, 5), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwDestMask.setStatus('deprecated')
csOrionFwDestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwDestRowStatus.setStatus('deprecated')
csOrionFwHostTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 3), )
if mibBuilder.loadTexts: csOrionFwHostTable.setStatus('deprecated')
csOrionFwHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwHostProxy"), (0, "COSINE-ORION-MIB", "csOrionFwHostIndex"))
if mibBuilder.loadTexts: csOrionFwHostEntry.setStatus('deprecated')
csOrionFwHostProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("ftp", 1), ("http", 2), ("telnet", 3), ("smtp", 4), ("pop3", 5), ("plug", 6), ("nntp", 7), ("ldap", 8), ("lnotes", 9), ("mssql", 10), ("aol", 11), ("cs", 12), ("netm", 13))))
if mibBuilder.loadTexts: csOrionFwHostProxy.setStatus('deprecated')
csOrionFwHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csOrionFwHostIndex.setStatus('deprecated')
csOrionFwHostAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('permit')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHostAccess.setStatus('deprecated')
csOrionFwHostAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 3, 1, 4), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHostAddr.setStatus('deprecated')
csOrionFwHostMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 3, 1, 5), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHostMask.setStatus('deprecated')
csOrionFwHostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHostRowStatus.setStatus('deprecated')
csOrionFwAccessTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 4), )
if mibBuilder.loadTexts: csOrionFwAccessTable.setStatus('current')
csOrionFwAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwAccessPriority"))
if mibBuilder.loadTexts: csOrionFwAccessEntry.setStatus('current')
csOrionFwAccessPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csOrionFwAccessPriority.setStatus('current')
csOrionFwAccessSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 4, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwAccessSourceAddr.setStatus('current')
csOrionFwAccessSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 4, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwAccessSourceMask.setStatus('current')
csOrionFwAccessDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 4, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwAccessDestAddr.setStatus('current')
csOrionFwAccessDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 4, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwAccessDestMask.setStatus('current')
csOrionFwAccessAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('deny')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwAccessAction.setStatus('current')
csOrionFwAccessPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwAccessPortNumber.setStatus('current')
csOrionFwAccessPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwAccessPolicy.setStatus('current')
csOrionFwAccessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 4, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwAccessRowStatus.setStatus('current')
csOrionFwAccessSourceAddrList = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 4, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwAccessSourceAddrList.setStatus('current')
csOrionFwAccessDestAddrList = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 4, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwAccessDestAddrList.setStatus('current')
csOrionFwAccessDestPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 4, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwAccessDestPortList.setStatus('current')
csOrionFwProxyDaemonTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 5), )
if mibBuilder.loadTexts: csOrionFwProxyDaemonTable.setStatus('current')
csOrionFwProxyDaemonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 5, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwProxyDaemonPortNumber"))
if mibBuilder.loadTexts: csOrionFwProxyDaemonEntry.setStatus('current')
csOrionFwProxyDaemonPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csOrionFwProxyDaemonPortNumber.setStatus('current')
csOrionFwProxyDaemonProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("ftp", 1), ("http", 2), ("telnet", 3), ("smtp", 4), ("pop3", 5), ("plug", 6), ("nntp", 7), ("ldap", 8), ("lnotes", 9), ("rsh", 10), ("aol", 11), ("cs", 12), ("netm", 13), ("mssql", 14)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwProxyDaemonProtocol.setStatus('current')
csOrionFwProxyDaemonRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwProxyDaemonRowStatus.setStatus('current')
csOrionFwGenProxyConfigEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFwGenProxyConfigEnd.setStatus('current')
csOrionFwFtpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 1), )
if mibBuilder.loadTexts: csOrionFwFtpConfigTable.setStatus('deprecated')
csOrionFwFtpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionFwFtpConfigEntry.setStatus('deprecated')
csOrionFwFtpLog = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwFtpLog.setStatus('deprecated')
csOrionFwFtpFunctionIds = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwFtpFunctionIds.setStatus('deprecated')
csOrionFwFtpPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 2), )
if mibBuilder.loadTexts: csOrionFwFtpPolicyTable.setStatus('current')
csOrionFwFtpPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwFtpPolicyName"))
if mibBuilder.loadTexts: csOrionFwFtpPolicyEntry.setStatus('current')
csOrionFwFtpPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionFwFtpPolicyName.setStatus('current')
csOrionFwFtpPolicyAuthenticate = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwFtpPolicyAuthenticate.setStatus('current')
csOrionFwFtpPolicyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(7200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwFtpPolicyTimeout.setStatus('current')
csOrionFwFtpPolicyHandoffAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwFtpPolicyHandoffAddr.setStatus('current')
csOrionFwFtpPolicyLog = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5).clone(hexValue="0000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwFtpPolicyLog.setStatus('current')
csOrionFwFtpPolicyFunctionIds = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5).clone(hexValue="7FFFFFFFFF")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwFtpPolicyFunctionIds.setStatus('current')
csOrionFwFtpPolicyDynamicPacketFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwFtpPolicyDynamicPacketFilter.setStatus('current')
csOrionFwFtpPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwFtpPolicyRowStatus.setStatus('current')
csOrionFwFtpAuthTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 3), )
if mibBuilder.loadTexts: csOrionFwFtpAuthTable.setStatus('current')
csOrionFwFtpAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionFwFtpAuthEntry.setStatus('current')
csOrionFwFtpAuthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwFtpAuthStatus.setStatus('current')
csOrionFwFtpAuthServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("local", 2), ("radius", 3), ("ldap", 4))).clone('radius')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwFtpAuthServiceType.setStatus('current')
csOrionFwFtpAuthMechanism = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("chap", 2), ("pap", 3), ("password", 4))).clone('pap')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwFtpAuthMechanism.setStatus('current')
csOrionFwFtpAuthServers = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwFtpAuthServers.setStatus('current')
csOrionFwFtpAuthNonTransparentAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwFtpAuthNonTransparentAuth.setStatus('current')
csOrionFwFtpAuthPasswdTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(300)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwFtpAuthPasswdTimeout.setStatus('current')
csOrionFwFtpAuthPerUserAuthFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwFtpAuthPerUserAuthFilter.setStatus('current')
csOrionFwFtpConfigEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFwFtpConfigEnd.setStatus('current')
csOrionFwHttpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 1), )
if mibBuilder.loadTexts: csOrionFwHttpConfigTable.setStatus('deprecated')
csOrionFwHttpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionFwHttpConfigEntry.setStatus('deprecated')
csOrionFwHttpLog = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 1, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwHttpLog.setStatus('deprecated')
csOrionFwHttpOurname = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwHttpOurname.setStatus('deprecated')
csOrionFwHttpFeatureIds = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwHttpFeatureIds.setStatus('deprecated')
csOrionFwHttpFunctionIds = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 1, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwHttpFunctionIds.setStatus('deprecated')
csOrionFwHttpHeaderIds = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 1, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwHttpHeaderIds.setStatus('deprecated')
csOrionFwHttpPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 2), )
if mibBuilder.loadTexts: csOrionFwHttpPolicyTable.setStatus('current')
csOrionFwHttpPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwHttpPolicyName"))
if mibBuilder.loadTexts: csOrionFwHttpPolicyEntry.setStatus('current')
csOrionFwHttpPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionFwHttpPolicyName.setStatus('current')
csOrionFwHttpPolicyAuthenticate = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHttpPolicyAuthenticate.setStatus('current')
csOrionFwHttpPolicyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHttpPolicyTimeout.setStatus('current')
csOrionFwHttpPolicyHandoffAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHttpPolicyHandoffAddr.setStatus('current')
csOrionFwHttpPolicyOurname = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHttpPolicyOurname.setStatus('current')
csOrionFwHttpPolicyLog = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2).clone(hexValue="0000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHttpPolicyLog.setStatus('current')
csOrionFwHttpPolicyFunctionIds = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2).clone(hexValue="0FFF")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHttpPolicyFunctionIds.setStatus('current')
csOrionFwHttpPolicyFeatures = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="FF")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHttpPolicyFeatures.setStatus('current')
csOrionFwHttpPolicyHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3).clone(hexValue="1FFFFF")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHttpPolicyHeader.setStatus('current')
csOrionFwHttpPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 2, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHttpPolicyRowStatus.setStatus('current')
csOrionFwHttpPortTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 3), )
if mibBuilder.loadTexts: csOrionFwHttpPortTable.setStatus('current')
csOrionFwHttpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwHttpPortPolicyName"))
if mibBuilder.loadTexts: csOrionFwHttpPortEntry.setStatus('current')
csOrionFwHttpPortPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionFwHttpPortPolicyName.setStatus('current')
csOrionFwHttpPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHttpPortNumber.setStatus('current')
csOrionFwHttpPortAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('deny')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHttpPortAccess.setStatus('current')
csOrionFwHttpPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHttpPortRowStatus.setStatus('current')
csOrionFwHttpAuthTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 4), )
if mibBuilder.loadTexts: csOrionFwHttpAuthTable.setStatus('current')
csOrionFwHttpAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionFwHttpAuthEntry.setStatus('current')
csOrionFwHttpAuthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHttpAuthStatus.setStatus('current')
csOrionFwHttpAuthServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("local", 2), ("radius", 3), ("ldap", 4))).clone('radius')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHttpAuthServiceType.setStatus('current')
csOrionFwHttpAuthMechanism = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("chap", 2), ("pap", 3), ("password", 4))).clone('pap')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHttpAuthMechanism.setStatus('current')
csOrionFwHttpAuthServers = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHttpAuthServers.setStatus('current')
csOrionFwHttpAuthNonTransparentAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHttpAuthNonTransparentAuth.setStatus('current')
csOrionFwHttpAuthPasswdTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(300)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHttpAuthPasswdTimeout.setStatus('current')
csOrionFwHttpAuthPerUserAuthFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHttpAuthPerUserAuthFilter.setStatus('current')
csOrionFwHttpConfigEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFwHttpConfigEnd.setStatus('current')
csOrionFwSmtpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 1), )
if mibBuilder.loadTexts: csOrionFwSmtpConfigTable.setStatus('deprecated')
csOrionFwSmtpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionFwSmtpConfigEntry.setStatus('deprecated')
csOrionFwSmtpBadAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 1, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwSmtpBadAdmin.setStatus('deprecated')
csOrionFwSmtpBadDir = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwSmtpBadDir.setStatus('deprecated')
csOrionFwSmtpMaxChildren = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwSmtpMaxChildren.setStatus('deprecated')
csOrionFwSmtpWakeup = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwSmtpWakeup.setStatus('deprecated')
csOrionFwSmtpInternalMailHub = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwSmtpInternalMailHub.setStatus('deprecated')
csOrionFwSmtpLocalDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwSmtpLocalDomain.setStatus('deprecated')
csOrionFwSmtpLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("normal", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwSmtpLogging.setStatus('deprecated')
csOrionFwSmtpLogRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("reject", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwSmtpLogRelay.setStatus('deprecated')
csOrionFwSmtpLogSpam = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("reject", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwSmtpLogSpam.setStatus('deprecated')
csOrionFwSmtpMaxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwSmtpMaxBytes.setStatus('deprecated')
csOrionFwSmtpMaxRecip = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwSmtpMaxRecip.setStatus('deprecated')
csOrionFwSmtpSpamReply = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 1, 1, 12), Integer32().clone(554)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwSmtpSpamReply.setStatus('deprecated')
csOrionFwSmtpRelayReply = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 1, 1, 13), Integer32().clone(550)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwSmtpRelayReply.setStatus('deprecated')
csOrionFwSmtpPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 2), )
if mibBuilder.loadTexts: csOrionFwSmtpPolicyTable.setStatus('current')
csOrionFwSmtpPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwSmtpPolicyName"))
if mibBuilder.loadTexts: csOrionFwSmtpPolicyEntry.setStatus('current')
csOrionFwSmtpPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionFwSmtpPolicyName.setStatus('current')
csOrionFwSmtpPolicyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(120)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwSmtpPolicyTimeout.setStatus('current')
csOrionFwSmtpPolicyInternalMailHub = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwSmtpPolicyInternalMailHub.setStatus('current')
csOrionFwSmtpPolicyBadEmailAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwSmtpPolicyBadEmailAdmin.setStatus('current')
csOrionFwSmtpPolicyLocalDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwSmtpPolicyLocalDomain.setStatus('current')
csOrionFwSmtpPolicyMaxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwSmtpPolicyMaxBytes.setStatus('current')
csOrionFwSmtpPolicyMaxRecipients = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwSmtpPolicyMaxRecipients.setStatus('current')
csOrionFwSmtpPolicyLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("normal", 2))).clone('normal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwSmtpPolicyLogging.setStatus('current')
csOrionFwSmtpPolicyLogRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("reject", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwSmtpPolicyLogRelay.setStatus('current')
csOrionFwSmtpPolicyRelayReply = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(250, 550))).clone(namedValues=NamedValues(("ok", 250), ("unavail", 550))).clone('ok')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwSmtpPolicyRelayReply.setStatus('current')
csOrionFwSmtpPolicyLogSpam = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("reject", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwSmtpPolicyLogSpam.setStatus('current')
csOrionFwSmtpPolicySpamReply = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(250, 554))).clone(namedValues=NamedValues(("ok", 250), ("failed", 554))).clone('ok')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwSmtpPolicySpamReply.setStatus('current')
csOrionFwSmtpPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 2, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwSmtpPolicyRowStatus.setStatus('current')
csOrionFwSmtpPolicyMimeCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwSmtpPolicyMimeCheck.setStatus('current')
csOrionFwSmtpRelayTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 3), )
if mibBuilder.loadTexts: csOrionFwSmtpRelayTable.setStatus('current')
csOrionFwSmtpRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwSmtpRelayPolicyName"), (0, "COSINE-ORION-MIB", "csOrionFwSmtpRelaySource"))
if mibBuilder.loadTexts: csOrionFwSmtpRelayEntry.setStatus('current')
csOrionFwSmtpRelayPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionFwSmtpRelayPolicyName.setStatus('current')
csOrionFwSmtpRelaySource = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128)))
if mibBuilder.loadTexts: csOrionFwSmtpRelaySource.setStatus('current')
csOrionFwSmtpRelayAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('deny')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwSmtpRelayAccess.setStatus('current')
csOrionFwSmtpRelayRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwSmtpRelayRowStatus.setStatus('current')
csOrionFwSmtpSpamTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 4), )
if mibBuilder.loadTexts: csOrionFwSmtpSpamTable.setStatus('current')
csOrionFwSmtpSpamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwSmtpSpamPolicyName"), (0, "COSINE-ORION-MIB", "csOrionFwSmtpSpamSource"))
if mibBuilder.loadTexts: csOrionFwSmtpSpamEntry.setStatus('current')
csOrionFwSmtpSpamPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionFwSmtpSpamPolicyName.setStatus('current')
csOrionFwSmtpSpamSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128)))
if mibBuilder.loadTexts: csOrionFwSmtpSpamSource.setStatus('current')
csOrionFwSmtpSpamAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('deny')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwSmtpSpamAccess.setStatus('current')
csOrionFwSmtpSpamRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwSmtpSpamRowStatus.setStatus('current')
csOrionFwSmtpConfigEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFwSmtpConfigEnd.setStatus('current')
csOrionFwTelnetPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 5, 1), )
if mibBuilder.loadTexts: csOrionFwTelnetPolicyTable.setStatus('current')
csOrionFwTelnetPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 5, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwTelnetPolicyName"))
if mibBuilder.loadTexts: csOrionFwTelnetPolicyEntry.setStatus('current')
csOrionFwTelnetPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 5, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionFwTelnetPolicyName.setStatus('current')
csOrionFwTelnetPolicyAuthenticate = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwTelnetPolicyAuthenticate.setStatus('current')
csOrionFwTelnetPolicyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(7200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwTelnetPolicyTimeout.setStatus('current')
csOrionFwTelnetPolicyPasswordChange = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allowed", 1), ("notAllowed", 2))).clone('notAllowed')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwTelnetPolicyPasswordChange.setStatus('current')
csOrionFwTelnetPolicyPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 5, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('telnet>')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwTelnetPolicyPrompt.setStatus('current')
csOrionFwTelnetPolicyXGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allowed", 1), ("notAllowed", 2))).clone('notAllowed')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwTelnetPolicyXGateway.setStatus('current')
csOrionFwTelnetPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 5, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwTelnetPolicyRowStatus.setStatus('current')
csOrionFwTelnetAuthTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 5, 2), )
if mibBuilder.loadTexts: csOrionFwTelnetAuthTable.setStatus('current')
csOrionFwTelnetAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 5, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionFwTelnetAuthEntry.setStatus('current')
csOrionFwTelnetAuthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwTelnetAuthStatus.setStatus('current')
csOrionFwTelnetAuthServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("local", 2), ("radius", 3), ("ldap", 4))).clone('radius')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwTelnetAuthServiceType.setStatus('current')
csOrionFwTelnetAuthMechanism = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("chap", 2), ("pap", 3), ("password", 4))).clone('pap')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwTelnetAuthMechanism.setStatus('current')
csOrionFwTelnetAuthServers = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 5, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwTelnetAuthServers.setStatus('current')
csOrionFwTelnetAuthNonTransparentAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwTelnetAuthNonTransparentAuth.setStatus('current')
csOrionFwTelnetAuthPasswdTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(300)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwTelnetAuthPasswdTimeout.setStatus('current')
csOrionFwTelnetAuthPerUserAuthFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 5, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwTelnetAuthPerUserAuthFilter.setStatus('current')
csOrionFwTelnetConfigEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFwTelnetConfigEnd.setStatus('current')
csOrionFwPop3PolicyTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 6, 1), )
if mibBuilder.loadTexts: csOrionFwPop3PolicyTable.setStatus('current')
csOrionFwPop3PolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 6, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwPop3PolicyName"))
if mibBuilder.loadTexts: csOrionFwPop3PolicyEntry.setStatus('current')
csOrionFwPop3PolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 6, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionFwPop3PolicyName.setStatus('current')
csOrionFwPop3PolicyAuthenticate = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwPop3PolicyAuthenticate.setStatus('current')
csOrionFwPop3PolicyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(7200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwPop3PolicyTimeout.setStatus('current')
csOrionFwPop3PolicyPopServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 6, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwPop3PolicyPopServer.setStatus('current')
csOrionFwPop3PolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 6, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwPop3PolicyRowStatus.setStatus('current')
csOrionFwPop3ConfigEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFwPop3ConfigEnd.setStatus('current')
csOrionFwPlugPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 7, 1), )
if mibBuilder.loadTexts: csOrionFwPlugPolicyTable.setStatus('current')
csOrionFwPlugPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 7, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwPlugPolicyName"))
if mibBuilder.loadTexts: csOrionFwPlugPolicyEntry.setStatus('current')
csOrionFwPlugPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 7, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionFwPlugPolicyName.setStatus('current')
csOrionFwPlugPolicyAuthenticate = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwPlugPolicyAuthenticate.setStatus('deprecated')
csOrionFwPlugPolicyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(7200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwPlugPolicyTimeout.setStatus('current')
csOrionFwPlugPolicyRemoteServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 7, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwPlugPolicyRemoteServer.setStatus('current')
csOrionFwPlugPolicyRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwPlugPolicyRemotePort.setStatus('current')
csOrionFwPlugPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 7, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwPlugPolicyRowStatus.setStatus('current')
csOrionFwPlugConfigEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFwPlugConfigEnd.setStatus('current')
csOrionFwNntpPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 8, 1), )
if mibBuilder.loadTexts: csOrionFwNntpPolicyTable.setStatus('current')
csOrionFwNntpPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 8, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwNntpPolicyName"))
if mibBuilder.loadTexts: csOrionFwNntpPolicyEntry.setStatus('current')
csOrionFwNntpPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 8, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionFwNntpPolicyName.setStatus('current')
csOrionFwNntpPolicyAuthenticate = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwNntpPolicyAuthenticate.setStatus('deprecated')
csOrionFwNntpPolicyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(7200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwNntpPolicyTimeout.setStatus('current')
csOrionFwNntpPolicyRemoteServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 8, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwNntpPolicyRemoteServer.setStatus('current')
csOrionFwNntpPolicyRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwNntpPolicyRemotePort.setStatus('current')
csOrionFwNntpPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 8, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwNntpPolicyRowStatus.setStatus('current')
csOrionFwNntpConfigEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFwNntpConfigEnd.setStatus('current')
csOrionFwLdapPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 9, 1), )
if mibBuilder.loadTexts: csOrionFwLdapPolicyTable.setStatus('current')
csOrionFwLdapPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 9, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwLdapPolicyName"))
if mibBuilder.loadTexts: csOrionFwLdapPolicyEntry.setStatus('current')
csOrionFwLdapPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 9, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionFwLdapPolicyName.setStatus('current')
csOrionFwLdapPolicyAuthenticate = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwLdapPolicyAuthenticate.setStatus('deprecated')
csOrionFwLdapPolicyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(7200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwLdapPolicyTimeout.setStatus('current')
csOrionFwLdapPolicyRemoteServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 9, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwLdapPolicyRemoteServer.setStatus('current')
csOrionFwLdapPolicyRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwLdapPolicyRemotePort.setStatus('current')
csOrionFwLdapPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 9, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwLdapPolicyRowStatus.setStatus('current')
csOrionFwLdapConfigEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFwLdapConfigEnd.setStatus('current')
csOrionFwLnotesPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 10, 1), )
if mibBuilder.loadTexts: csOrionFwLnotesPolicyTable.setStatus('current')
csOrionFwLnotesPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 10, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwLnotesPolicyName"))
if mibBuilder.loadTexts: csOrionFwLnotesPolicyEntry.setStatus('current')
csOrionFwLnotesPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 10, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionFwLnotesPolicyName.setStatus('current')
csOrionFwLnotesPolicyAuthenticate = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwLnotesPolicyAuthenticate.setStatus('deprecated')
csOrionFwLnotesPolicyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(7200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwLnotesPolicyTimeout.setStatus('current')
csOrionFwLnotesPolicyRemoteServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 10, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwLnotesPolicyRemoteServer.setStatus('current')
csOrionFwLnotesPolicyRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwLnotesPolicyRemotePort.setStatus('current')
csOrionFwLnotesPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 10, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwLnotesPolicyRowStatus.setStatus('current')
csOrionFwLnotesConfigEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFwLnotesConfigEnd.setStatus('current')
csOrionFwAolPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 11, 1), )
if mibBuilder.loadTexts: csOrionFwAolPolicyTable.setStatus('current')
csOrionFwAolPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 11, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwAolPolicyName"))
if mibBuilder.loadTexts: csOrionFwAolPolicyEntry.setStatus('current')
csOrionFwAolPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 11, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionFwAolPolicyName.setStatus('current')
csOrionFwAolPolicyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(7200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwAolPolicyTimeout.setStatus('current')
csOrionFwAolPolicyRemoteServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 11, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwAolPolicyRemoteServer.setStatus('current')
csOrionFwAolPolicyRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwAolPolicyRemotePort.setStatus('current')
csOrionFwAolPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 11, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwAolPolicyRowStatus.setStatus('current')
csOrionFwAolConfigEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFwAolConfigEnd.setStatus('current')
csOrionFwCompuServePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 12, 1), )
if mibBuilder.loadTexts: csOrionFwCompuServePolicyTable.setStatus('current')
csOrionFwCompuServePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 12, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwCompuServePolicyName"))
if mibBuilder.loadTexts: csOrionFwCompuServePolicyEntry.setStatus('current')
csOrionFwCompuServePolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 12, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionFwCompuServePolicyName.setStatus('current')
csOrionFwCompuServePolicyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(7200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwCompuServePolicyTimeout.setStatus('current')
csOrionFwCompuServePolicyRemoteServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 12, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwCompuServePolicyRemoteServer.setStatus('current')
csOrionFwCompuServePolicyRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwCompuServePolicyRemotePort.setStatus('current')
csOrionFwCompuServePolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 12, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwCompuServePolicyRowStatus.setStatus('current')
csOrionFwCompuServeConfigEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 12, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFwCompuServeConfigEnd.setStatus('current')
csOrionFwNetMeetingPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 13, 1), )
if mibBuilder.loadTexts: csOrionFwNetMeetingPolicyTable.setStatus('current')
csOrionFwNetMeetingPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 13, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwNetMeetingPolicyName"))
if mibBuilder.loadTexts: csOrionFwNetMeetingPolicyEntry.setStatus('current')
csOrionFwNetMeetingPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 13, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionFwNetMeetingPolicyName.setStatus('current')
csOrionFwNetMeetingPolicyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(7200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwNetMeetingPolicyTimeout.setStatus('current')
csOrionFwNetMeetingPolicyRemoteServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 13, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwNetMeetingPolicyRemoteServer.setStatus('current')
csOrionFwNetMeetingPolicyRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwNetMeetingPolicyRemotePort.setStatus('current')
csOrionFwNetMeetingPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 13, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwNetMeetingPolicyRowStatus.setStatus('current')
csOrionFwNetMeetingConfigEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 13, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFwNetMeetingConfigEnd.setStatus('current')
csOrionFwMsSqlPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 14, 1), )
if mibBuilder.loadTexts: csOrionFwMsSqlPolicyTable.setStatus('current')
csOrionFwMsSqlPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 14, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwMsSqlPolicyName"))
if mibBuilder.loadTexts: csOrionFwMsSqlPolicyEntry.setStatus('current')
csOrionFwMsSqlPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 14, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionFwMsSqlPolicyName.setStatus('current')
csOrionFwMsSqlPolicyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(7200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwMsSqlPolicyTimeout.setStatus('current')
csOrionFwMsSqlPolicyRemoteServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 14, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwMsSqlPolicyRemoteServer.setStatus('current')
csOrionFwMsSqlPolicyRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwMsSqlPolicyRemotePort.setStatus('current')
csOrionFwMsSqlPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 14, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwMsSqlPolicyRowStatus.setStatus('current')
csOrionFwMsSqlConfigEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 14, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFwMsSqlConfigEnd.setStatus('current')
csOrionFwRshPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 15, 1), )
if mibBuilder.loadTexts: csOrionFwRshPolicyTable.setStatus('current')
csOrionFwRshPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 15, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwRshPolicyName"))
if mibBuilder.loadTexts: csOrionFwRshPolicyEntry.setStatus('current')
csOrionFwRshPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 15, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionFwRshPolicyName.setStatus('current')
csOrionFwRshPolicyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(7200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwRshPolicyTimeout.setStatus('current')
csOrionFwRshPolicyRemoteServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 15, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwRshPolicyRemoteServer.setStatus('current')
csOrionFwRshPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 15, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwRshPolicyRowStatus.setStatus('current')
csOrionFWInfoEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFWInfoEnd.setStatus('current')
csOrionVrPktFilterTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 1), )
if mibBuilder.loadTexts: csOrionVrPktFilterTable.setStatus('current')
csOrionVrPktFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVrPktFilterIndex"))
if mibBuilder.loadTexts: csOrionVrPktFilterEntry.setStatus('current')
csOrionVrPktFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csOrionVrPktFilterIndex.setStatus('current')
csOrionVrPktFilterAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrPktFilterAclId.setStatus('current')
csOrionVrPktFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2), ("firewall", 3), ("spf", 4), ("spfRev", 5), ("spfHW", 6), ("spfHWRev", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrPktFilterAction.setStatus('current')
csOrionVrPktFilterDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrPktFilterDirection.setStatus('current')
csOrionVrPktFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrPktFilterRowStatus.setStatus('current')
csOrionVrPktFilterTcpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dontCare", 1), ("setup", 2), ("established", 3))).clone('dontCare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrPktFilterTcpStatus.setStatus('current')
csOrionVrPktFilterHitCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVrPktFilterHitCounter.setStatus('current')
csOrionVrPktFilterCounterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrPktFilterCounterStatus.setStatus('current')
csOrionVrPktFilterEvlogStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrPktFilterEvlogStatus.setStatus('current')
csOrionViPktFilterTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 2), )
if mibBuilder.loadTexts: csOrionViPktFilterTable.setStatus('current')
csOrionViPktFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"), (0, "COSINE-ORION-MIB", "csOrionViPktFilterIndex"))
if mibBuilder.loadTexts: csOrionViPktFilterEntry.setStatus('current')
csOrionViPktFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csOrionViPktFilterIndex.setStatus('current')
csOrionViPktFilterAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionViPktFilterAclId.setStatus('current')
csOrionViPktFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2), ("firewall", 3), ("spf", 4), ("spfRev", 5), ("spfHW", 6), ("spfHWRev", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionViPktFilterAction.setStatus('current')
csOrionViPktFilterDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionViPktFilterDirection.setStatus('current')
csOrionViPktFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionViPktFilterRowStatus.setStatus('current')
csOrionViPktFilterTcpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dontCare", 1), ("setup", 2), ("established", 3))).clone('dontCare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionViPktFilterTcpStatus.setStatus('current')
csOrionViPktFilterHitCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionViPktFilterHitCounter.setStatus('current')
csOrionViPktFilterCounterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionViPktFilterCounterStatus.setStatus('current')
csOrionViPktFilterEvlogStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionViPktFilterEvlogStatus.setStatus('current')
csOrionPktFilterInfoEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionPktFilterInfoEnd.setStatus('current')
csOrionNatPoolTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 1), )
if mibBuilder.loadTexts: csOrionNatPoolTable.setStatus('current')
csOrionNatPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionNatPoolId"))
if mibBuilder.loadTexts: csOrionNatPoolEntry.setStatus('current')
csOrionNatPoolId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csOrionNatPoolId.setStatus('current')
csOrionNatPoolStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionNatPoolStartAddress.setStatus('current')
csOrionNatPoolEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 1, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionNatPoolEndAddress.setStatus('current')
csOrionNatPoolStartPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionNatPoolStartPort.setStatus('current')
csOrionNatPoolEndPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionNatPoolEndPort.setStatus('current')
csOrionNatPoolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionNatPoolStatus.setStatus('current')
csOrionNatTranslationTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 2), )
if mibBuilder.loadTexts: csOrionNatTranslationTable.setStatus('current')
csOrionNatTranslationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionNatInsideLocalAddr"), (0, "COSINE-ORION-MIB", "csOrionNatInsideLocalPort"), (0, "COSINE-ORION-MIB", "csOrionNatOutsideGlobalAddr"), (0, "COSINE-ORION-MIB", "csOrionNatOutsideGlobalPort"), (0, "COSINE-ORION-MIB", "csOrionNatProtocol"))
if mibBuilder.loadTexts: csOrionNatTranslationEntry.setStatus('current')
csOrionNatInsideLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: csOrionNatInsideLocalAddr.setStatus('current')
csOrionNatInsideLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: csOrionNatInsideLocalPort.setStatus('current')
csOrionNatOutsideGlobalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 2, 1, 3), IpAddress())
if mibBuilder.loadTexts: csOrionNatOutsideGlobalAddr.setStatus('current')
csOrionNatOutsideGlobalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 2, 1, 4), Integer32())
if mibBuilder.loadTexts: csOrionNatOutsideGlobalPort.setStatus('current')
csOrionNatProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 2, 1, 5), Integer32())
if mibBuilder.loadTexts: csOrionNatProtocol.setStatus('current')
csOrionNatInsideGlobalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionNatInsideGlobalAddr.setStatus('current')
csOrionNatInsideGlobalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionNatInsideGlobalPort.setStatus('current')
csOrionNatStaticTranslationTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 3), )
if mibBuilder.loadTexts: csOrionNatStaticTranslationTable.setStatus('current')
csOrionNatStaticTranslationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionNatStaticInsideLocalAddress"))
if mibBuilder.loadTexts: csOrionNatStaticTranslationEntry.setStatus('current')
csOrionNatStaticInsideLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: csOrionNatStaticInsideLocalAddress.setStatus('current')
csOrionNatStaticInsideGlobalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionNatStaticInsideGlobalAddress.setStatus('current')
csOrionNatStaticTranslationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionNatStaticTranslationStatus.setStatus('current')
csOrionNatStaticNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 3, 1, 4), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionNatStaticNetmask.setStatus('current')
csOrionNatStaticTranslationType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("src", 1), ("dst", 2))).clone('src')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionNatStaticTranslationType.setStatus('current')
csOrionNatStaticVITranslationTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 4), )
if mibBuilder.loadTexts: csOrionNatStaticVITranslationTable.setStatus('current')
csOrionNatStaticVITranslationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionNatStaticIfIndex"), (0, "COSINE-ORION-MIB", "csOrionNatStaticVIInsideLocalAddress"))
if mibBuilder.loadTexts: csOrionNatStaticVITranslationEntry.setStatus('current')
csOrionNatStaticIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: csOrionNatStaticIfIndex.setStatus('current')
csOrionNatStaticVIInsideLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 4, 1, 2), IpAddress())
if mibBuilder.loadTexts: csOrionNatStaticVIInsideLocalAddress.setStatus('current')
csOrionNatStaticVIInsideGlobalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 4, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionNatStaticVIInsideGlobalAddress.setStatus('current')
csOrionNatStaticVINetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 4, 1, 4), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionNatStaticVINetmask.setStatus('current')
csOrionNatStaticVITranslationType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("src", 1), ("dst", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionNatStaticVITranslationType.setStatus('current')
csOrionNatStaticVITranslationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 4, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionNatStaticVITranslationStatus.setStatus('current')
csOrionNatInfoEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionNatInfoEnd.setStatus('current')
csOrionNatGeneralParamTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 6), )
if mibBuilder.loadTexts: csOrionNatGeneralParamTable.setStatus('current')
csOrionNatGeneralParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 6, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionNatGeneralParamEntry.setStatus('current')
csOrionNatGenTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 525600)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionNatGenTimeout.setStatus('current')
csOrionNatTcpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 525600)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionNatTcpTimeout.setStatus('current')
csOrionNatUdpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 525600)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionNatUdpTimeout.setStatus('current')
csOrionNatIcmpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 525600)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionNatIcmpTimeout.setStatus('current')
csOrionNatClearTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("clear", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionNatClearTrans.setStatus('current')
csOrionNatGeneralParamTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionNatGeneralParamTableEnd.setStatus('current')
csOrionIpSecTransformTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 1), )
if mibBuilder.loadTexts: csOrionIpSecTransformTable.setStatus('current')
csOrionIpSecTransformEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionIpSecTransformName"))
if mibBuilder.loadTexts: csOrionIpSecTransformEntry.setStatus('current')
csOrionIpSecTransformName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)))
if mibBuilder.loadTexts: csOrionIpSecTransformName.setStatus('current')
csOrionIpSecTransform1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIpSecTransform1.setStatus('current')
csOrionIpSecTransform2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIpSecTransform2.setStatus('current')
csOrionIpSecTransform3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIpSecTransform3.setStatus('current')
csOrionIpSecTransformInitVector = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 8))).clone(namedValues=NamedValues(("four", 4), ("eight", 8))).clone('eight')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIpSecTransformInitVector.setStatus('current')
csOrionIpSecTransformMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tunnel", 1), ("transport", 2))).clone('tunnel')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIpSecTransformMode.setStatus('current')
csOrionIpSecTransformStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIpSecTransformStatus.setStatus('current')
csOrionDynamicCryptoMapTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 2), )
if mibBuilder.loadTexts: csOrionDynamicCryptoMapTable.setStatus('current')
csOrionDynamicCryptoMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionDynamicCryptoMapName"), (0, "COSINE-ORION-MIB", "csOrionDynamicCryptoMapNumber"))
if mibBuilder.loadTexts: csOrionDynamicCryptoMapEntry.setStatus('current')
csOrionDynamicCryptoMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)))
if mibBuilder.loadTexts: csOrionDynamicCryptoMapName.setStatus('current')
csOrionDynamicCryptoMapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: csOrionDynamicCryptoMapNumber.setStatus('current')
csOrionDynamicCryptoMapMatchAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionDynamicCryptoMapMatchAddress.setStatus('current')
csOrionDynamicCryptoMapPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 2, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionDynamicCryptoMapPeer.setStatus('current')
csOrionDynamicCryptoMapTransformSet1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionDynamicCryptoMapTransformSet1.setStatus('current')
csOrionDynamicCryptoMapTransformSet2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionDynamicCryptoMapTransformSet2.setStatus('current')
csOrionDynamicCryptoMapTransformSet3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionDynamicCryptoMapTransformSet3.setStatus('current')
csOrionDynamicCryptoMapTransformSet4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionDynamicCryptoMapTransformSet4.setStatus('current')
csOrionDynamicCryptoMapTransformSet5 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionDynamicCryptoMapTransformSet5.setStatus('current')
csOrionDynamicCryptoMapTransformSet6 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionDynamicCryptoMapTransformSet6.setStatus('current')
csOrionDynamicCryptoMapSessionKeyLifetimeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 2, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionDynamicCryptoMapSessionKeyLifetimeSec.setStatus('current')
csOrionDynamicCryptoMapSessionKeyLifetimeBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 2, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionDynamicCryptoMapSessionKeyLifetimeBytes.setStatus('current')
csOrionDynamicCryptoMapPfs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("group1", 1), ("group2", 2), ("none", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionDynamicCryptoMapPfs.setStatus('current')
csOrionDynamicCryptoMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 2, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionDynamicCryptoMapStatus.setStatus('current')
csOrionManualCryptoMapTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 3), )
if mibBuilder.loadTexts: csOrionManualCryptoMapTable.setStatus('current')
csOrionManualCryptoMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionManualCryptoMapName"), (0, "COSINE-ORION-MIB", "csOrionManualCryptoMapNumber"))
if mibBuilder.loadTexts: csOrionManualCryptoMapEntry.setStatus('current')
csOrionManualCryptoMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)))
if mibBuilder.loadTexts: csOrionManualCryptoMapName.setStatus('current')
csOrionManualCryptoMapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)))
if mibBuilder.loadTexts: csOrionManualCryptoMapNumber.setStatus('current')
csOrionManualCryptoMapMatchAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 3, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionManualCryptoMapMatchAddress.setStatus('current')
csOrionManualCryptoMapTransformSet = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionManualCryptoMapTransformSet.setStatus('current')
csOrionManualCryptoMapInboundAHKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionManualCryptoMapInboundAHKey.setStatus('current')
csOrionManualCryptoMapInboundAHSPI = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 3, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionManualCryptoMapInboundAHSPI.setStatus('current')
csOrionManualCryptoMapOutboundAHKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 3, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionManualCryptoMapOutboundAHKey.setStatus('current')
csOrionManualCryptoMapOutboundAHSPI = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 3, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionManualCryptoMapOutboundAHSPI.setStatus('current')
csOrionManualCryptoMapInboundESPKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionManualCryptoMapInboundESPKey.setStatus('current')
csOrionManualCryptoMapInboundESPSPI = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 3, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionManualCryptoMapInboundESPSPI.setStatus('current')
csOrionManualCryptoMapInboundESPAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 3, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionManualCryptoMapInboundESPAuthKey.setStatus('current')
csOrionManualCryptoMapOutboundESPKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 3, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionManualCryptoMapOutboundESPKey.setStatus('current')
csOrionManualCryptoMapOutboundESPSPI = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 3, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionManualCryptoMapOutboundESPSPI.setStatus('current')
csOrionManualCryptoMapOutboundESPAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 3, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionManualCryptoMapOutboundESPAuthKey.setStatus('current')
csOrionManualCryptoMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 3, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionManualCryptoMapStatus.setStatus('current')
csOrionIKECryptoMapTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4), )
if mibBuilder.loadTexts: csOrionIKECryptoMapTable.setStatus('current')
csOrionIKECryptoMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionIKECryptoMapName"), (0, "COSINE-ORION-MIB", "csOrionIKECryptoMapNumber"))
if mibBuilder.loadTexts: csOrionIKECryptoMapEntry.setStatus('current')
csOrionIKECryptoMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)))
if mibBuilder.loadTexts: csOrionIKECryptoMapName.setStatus('current')
csOrionIKECryptoMapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)))
if mibBuilder.loadTexts: csOrionIKECryptoMapNumber.setStatus('current')
csOrionIKECryptoMapFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapFlag.setStatus('current')
csOrionIKECryptoMapMatchAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapMatchAddress.setStatus('current')
csOrionIKECryptoMapPfsGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5))).clone(namedValues=NamedValues(("group1", 1), ("group2", 2), ("group5", 5))).clone('group1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapPfsGroup.setStatus('current')
csOrionIKECryptoMapKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapKey.setStatus('current')
csOrionIKECryptoMapTransformSet1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapTransformSet1.setStatus('current')
csOrionIKECryptoMapTransformSet2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapTransformSet2.setStatus('current')
csOrionIKECryptoMapTransformSet3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapTransformSet3.setStatus('current')
csOrionIKECryptoMapTransformSet4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapTransformSet4.setStatus('current')
csOrionIKECryptoMapTransformSet5 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapTransformSet5.setStatus('current')
csOrionIKECryptoMapTransformSet6 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapTransformSet6.setStatus('current')
csOrionIKECryptoMapPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapPolicy.setStatus('current')
csOrionIKECryptoMapLocalIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 14), LongDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapLocalIdentity.setStatus('current')
csOrionIKECryptoMapSaLifetimeSoftSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapSaLifetimeSoftSec.setStatus('deprecated')
csOrionIKECryptoMapSaLifetimeSoftKbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapSaLifetimeSoftKbytes.setStatus('current')
csOrionIKECryptoMapSaLifetimeHardSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 2147483647), )).clone(28800)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapSaLifetimeHardSec.setStatus('current')
csOrionIKECryptoMapSaLifetimeHardKbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(256, 2147483647), )).clone(4096)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapSaLifetimeHardKbytes.setStatus('current')
csOrionIKECryptoMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapStatus.setStatus('current')
csOrionIKECryptoMapType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isakmp", 1), ("isakmpDialup", 2))).clone('isakmp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapType.setStatus('current')
csOrionIKECryptoMapIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 2147483647), )).clone(1800)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapIdleTimeout.setStatus('current')
csOrionIKECryptoMapLocalIdentityType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("ipv4", 1), ("distinguishedName", 2), ("fqdn", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapLocalIdentityType.setStatus('current')
csOrionIKECryptoMapRemoteIdentity1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 23), LongDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapRemoteIdentity1.setStatus('current')
csOrionIKECryptoMapRemoteIdentity2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 24), LongDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapRemoteIdentity2.setStatus('current')
csOrionIKECryptoMapRemoteIdentity3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 25), LongDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapRemoteIdentity3.setStatus('current')
csOrionIKECryptoMapRemoteIdentity4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 26), LongDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapRemoteIdentity4.setStatus('current')
csOrionIKECryptoMapRemoteIdentity5 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 27), LongDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapRemoteIdentity5.setStatus('current')
csOrionIKECryptoMapRemoteIdentityType1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("ipv4", 1), ("distinguishedName", 2), ("fqdn", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapRemoteIdentityType1.setStatus('current')
csOrionIKECryptoMapRemoteIdentityType2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("ipv4", 1), ("distinguishedName", 2), ("fqdn", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapRemoteIdentityType2.setStatus('current')
csOrionIKECryptoMapRemoteIdentityType3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("ipv4", 1), ("distinguishedName", 2), ("fqdn", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapRemoteIdentityType3.setStatus('current')
csOrionIKECryptoMapRemoteIdentityType4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("ipv4", 1), ("distinguishedName", 2), ("fqdn", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapRemoteIdentityType4.setStatus('current')
csOrionIKECryptoMapRemoteIdentityType5 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("ipv4", 1), ("distinguishedName", 2), ("fqdn", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapRemoteIdentityType5.setStatus('current')
csOrionIKECryptoMapAddressPool = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80)).clone('NONE')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapAddressPool.setStatus('current')
csOrionIKECryptoMapDynamicRouteAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 34), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapDynamicRouteAdd.setStatus('current')
csOrionIKEPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 5), )
if mibBuilder.loadTexts: csOrionIKEPolicyTable.setStatus('current')
csOrionIKEPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 5, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionIKEPolicyName"), (0, "COSINE-ORION-MIB", "csOrionIKEPolicyPriority"))
if mibBuilder.loadTexts: csOrionIKEPolicyEntry.setStatus('current')
csOrionIKEPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)))
if mibBuilder.loadTexts: csOrionIKEPolicyName.setStatus('current')
csOrionIKEPolicyPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)))
if mibBuilder.loadTexts: csOrionIKEPolicyPriority.setStatus('current')
csOrionIKEPolicyHash = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hmacMd5", 1), ("hmacSha", 2))).clone('hmacSha')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKEPolicyHash.setStatus('current')
csOrionIKEPolicyEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("desCbc", 1), ("tripleDesCbc", 2))).clone('tripleDesCbc')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKEPolicyEncryption.setStatus('current')
csOrionIKEPolicySaLifetimeSoftSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKEPolicySaLifetimeSoftSec.setStatus('deprecated')
csOrionIKEPolicySaLifetimeSoftKbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKEPolicySaLifetimeSoftKbytes.setStatus('deprecated')
csOrionIKEPolicySaLifetimeHardSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 2147483647), )).clone(10800)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKEPolicySaLifetimeHardSec.setStatus('current')
csOrionIKEPolicySaLifetimeHardKbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(256, 2147483647), )).clone(4096)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKEPolicySaLifetimeHardKbytes.setStatus('current')
csOrionIKEPolicyAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 65001, 65005))).clone(namedValues=NamedValues(("preShare", 1), ("dssSig", 2), ("rsaSig", 3), ("methRsaEnc", 4), ("methRsaEncRev", 5), ("xauthInitPreShared", 65001), ("xauthInitRsa", 65005))).clone('rsaSig')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKEPolicyAuthentication.setStatus('current')
csOrionIKEPolicyPfsGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5))).clone(namedValues=NamedValues(("group1", 1), ("group2", 2), ("group5", 5))).clone('group1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKEPolicyPfsGroup.setStatus('current')
csOrionIKEPolicyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 5, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKEPolicyStatus.setStatus('current')
csOrionIKEPolicyAuthorizationTypeFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 5, 1, 12), Integer32().clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKEPolicyAuthorizationTypeFlag.setStatus('current')
csOrionIKECertTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 6), )
if mibBuilder.loadTexts: csOrionIKECertTable.setStatus('current')
csOrionIKECertEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 6, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionIKECertName"), (0, "COSINE-ORION-MIB", "csOrionIKECertMapName"))
if mibBuilder.loadTexts: csOrionIKECertEntry.setStatus('current')
csOrionIKECertName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)))
if mibBuilder.loadTexts: csOrionIKECertName.setStatus('current')
csOrionIKECertMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)))
if mibBuilder.loadTexts: csOrionIKECertMapName.setStatus('current')
csOrionIKECertFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 6, 1, 3), Integer32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECertFlag.setStatus('current')
csOrionIKECertCertificate = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1500))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECertCertificate.setStatus('current')
csOrionIKECertPrivateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1500))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECertPrivateKey.setStatus('current')
csOrionIKECertStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 6, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECertStatus.setStatus('current')
csOrionIKESvrParamTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7), )
if mibBuilder.loadTexts: csOrionIKESvrParamTable.setStatus('current')
csOrionIKESvrParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionIKESvrParamMapName"))
if mibBuilder.loadTexts: csOrionIKESvrParamEntry.setStatus('current')
csOrionIKESvrParamMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)))
if mibBuilder.loadTexts: csOrionIKESvrParamMapName.setStatus('current')
csOrionIKESvrParamFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKESvrParamFlag.setStatus('current')
csOrionIKESvrParamIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKESvrParamIpAddress.setStatus('current')
csOrionIKESvrParamPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1, 4), Integer32().clone(500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKESvrParamPort.setStatus('current')
csOrionIKESvrParamRetryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1, 5), Integer32().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKESvrParamRetryLimit.setStatus('current')
csOrionIKESvrParamRetryTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1, 6), Integer32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKESvrParamRetryTimer.setStatus('current')
csOrionIKESvrParamRetryTimerMicroSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1, 7), Integer32().clone(200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKESvrParamRetryTimerMicroSec.setStatus('current')
csOrionIKESvrParamRetryTimerMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1, 8), Integer32().clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKESvrParamRetryTimerMaximum.setStatus('current')
csOrionIKESvrParamExpireTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1, 9), Integer32().clone(300)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKESvrParamExpireTimer.setStatus('current')
csOrionIKESvrParamSecretRecreate = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1, 10), Integer32().clone(14400)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKESvrParamSecretRecreate.setStatus('current')
csOrionIKESvrParamSPISize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1, 11), Integer32().clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKESvrParamSPISize.setStatus('current')
csOrionIKESvrParamMaxKeyLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1, 12), Integer32().clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKESvrParamMaxKeyLength.setStatus('current')
csOrionIKESvrParamMaxSACount = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1, 13), Integer32().clone(512)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKESvrParamMaxSACount.setStatus('current')
csOrionIKESvrParamLocalSecretSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1, 14), Integer32().clone(32)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKESvrParamLocalSecretSize.setStatus('current')
csOrionIKESvrParamTokenHashType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("md5", 1), ("sha", 2))).clone('md5')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKESvrParamTokenHashType.setStatus('current')
csOrionIKESvrParamRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKESvrParamRowStatus.setStatus('current')
csOrionIKESvrParamAuthenticationList = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKESvrParamAuthenticationList.setStatus('current')
csOrionIKESvrParamAuthorizationList = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKESvrParamAuthorizationList.setStatus('current')
csOrionIKESvrParamAccountingList = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKESvrParamAccountingList.setStatus('current')
csOrionIKESvrParamRadiusAcctUserTypePriority1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1, 20), IKERadiusAcctUserType().clone('xauthUserId')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKESvrParamRadiusAcctUserTypePriority1.setStatus('current')
csOrionIKESvrParamRadiusAcctUserTypePriority2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1, 21), IKERadiusAcctUserType().clone('subjectAltName')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKESvrParamRadiusAcctUserTypePriority2.setStatus('current')
csOrionIKESvrParamRadiusAcctUserTypePriority3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1, 22), IKERadiusAcctUserType().clone('distinguishedName')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKESvrParamRadiusAcctUserTypePriority3.setStatus('current')
csOrionIpSecEvLogTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 8), )
if mibBuilder.loadTexts: csOrionIpSecEvLogTable.setStatus('obsolete')
csOrionIpSecEvLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 8, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionIpSecEvLogEntry.setStatus('obsolete')
csOrionIpSecEvLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 8, 1, 1), EvLogLevel().clone('major')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionIpSecEvLogLevel.setStatus('obsolete')
csOrionIpSecEvLogArea = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 8, 1, 2), EvLogArea().clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionIpSecEvLogArea.setStatus('obsolete')
csOrionIpSecStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9), )
if mibBuilder.loadTexts: csOrionIpSecStatsTable.setStatus('current')
csOrionIpSecStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"))
if mibBuilder.loadTexts: csOrionIpSecStatsEntry.setStatus('current')
csOrionIpSecStatsRcvAhPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsRcvAhPktsDropped.setStatus('current')
csOrionIpSecStatsRcvAhPktsBadAh = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsRcvAhPktsBadAh.setStatus('current')
csOrionIpSecStatsRcvAhPktsBadSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsRcvAhPktsBadSpi.setStatus('current')
csOrionIpSecStatsRcvEspPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsRcvEspPktsDropped.setStatus('current')
csOrionIpSecStatsRcvEspPktsBadEsp = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsRcvEspPktsBadEsp.setStatus('current')
csOrionIpSecStatsRcvPktsOk = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsRcvPktsOk.setStatus('current')
csOrionIpSecStatsTxPktsDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsTxPktsDenied.setStatus('current')
csOrionIpSecStatsEspTotalInboundSAs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsEspTotalInboundSAs.setStatus('current')
csOrionIpSecStatsEspTotalInboundSAsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsEspTotalInboundSAsFailed.setStatus('current')
csOrionIpSecStatsEspCurrentInboundSAs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsEspCurrentInboundSAs.setStatus('current')
csOrionIpSecStatsEspTotalOutboundSAs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsEspTotalOutboundSAs.setStatus('current')
csOrionIpSecStatsEspTotalOutboundSAsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsEspTotalOutboundSAsFailed.setStatus('current')
csOrionIpSecStatsEspCurrentOutboundSAs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsEspCurrentOutboundSAs.setStatus('current')
csOrionIpSecStatsAhTotalInboundSAs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsAhTotalInboundSAs.setStatus('current')
csOrionIpSecStatsAhTotalInboundSAsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsAhTotalInboundSAsFailed.setStatus('current')
csOrionIpSecStatsAhCurrentInboundSAs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsAhCurrentInboundSAs.setStatus('current')
csOrionIpSecStatsAhTotalOutboundSAs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsAhTotalOutboundSAs.setStatus('current')
csOrionIpSecStatsAhTotalOutboundSAsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsAhTotalOutboundSAsFailed.setStatus('current')
csOrionIpSecStatsAhCurrentOutboundSAs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsAhCurrentOutboundSAs.setStatus('current')
csOrionIpSecStatsEspCryptoCepEstablishOk = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsEspCryptoCepEstablishOk.setStatus('current')
csOrionIpSecStatsEspCryptoCepEstablishFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsEspCryptoCepEstablishFailed.setStatus('current')
csOrionIpSecStatsAhCryptoCepEstablishOk = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsAhCryptoCepEstablishOk.setStatus('current')
csOrionIpSecStatsAhCryptoCepEstablishFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsAhCryptoCepEstablishFailed.setStatus('current')
csOrionIpSecStatsEspEncryptPktsOk = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsEspEncryptPktsOk.setStatus('current')
csOrionIpSecStatsEspDecryptPktsOk = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsEspDecryptPktsOk.setStatus('current')
csOrionIpSecStatsAhEncryptPktsOk = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsAhEncryptPktsOk.setStatus('current')
csOrionIpSecStatsAhDecryptPktsOk = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsAhDecryptPktsOk.setStatus('current')
csOrionIpSecStatsEspEncryptPktsBad = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsEspEncryptPktsBad.setStatus('current')
csOrionIpSecStatsEspDecryptPktsBad = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsEspDecryptPktsBad.setStatus('current')
csOrionIpSecStatsAhEncryptPktsBad = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsAhEncryptPktsBad.setStatus('current')
csOrionIpSecStatsAhDecryptPktsBad = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsAhDecryptPktsBad.setStatus('current')
csOrionIKEStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 10), )
if mibBuilder.loadTexts: csOrionIKEStatsTable.setStatus('current')
csOrionIKEStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 10, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"))
if mibBuilder.loadTexts: csOrionIKEStatsEntry.setStatus('current')
csOrionIKEStatsPhase1Negotiations = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 10, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStatsPhase1Negotiations.setStatus('current')
csOrionIKEStatsPhase1NegotiationsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStatsPhase1NegotiationsFailed.setStatus('current')
csOrionIKEStatsPhase1InPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStatsPhase1InPkts.setStatus('current')
csOrionIKEStatsPhase1InPktsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStatsPhase1InPktsRejected.setStatus('current')
csOrionIKEStatsPhase1OutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStatsPhase1OutPkts.setStatus('current')
csOrionIKEStatsPhase2Negotiations = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStatsPhase2Negotiations.setStatus('current')
csOrionIKEStatsPhase2NegotiationsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStatsPhase2NegotiationsFailed.setStatus('current')
csOrionIKEStatsPhase2InPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStatsPhase2InPkts.setStatus('current')
csOrionIKEStatsPhase2InPktsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 10, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStatsPhase2InPktsRejected.setStatus('current')
csOrionIKEStatsPhase2OutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 10, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStatsPhase2OutPkts.setStatus('current')
csOrionIKEStateTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 11), )
if mibBuilder.loadTexts: csOrionIKEStateTable.setStatus('current')
csOrionIKEStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 11, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"), (0, "COSINE-ORION-MIB", "csOrionIKEStateSAIndex"))
if mibBuilder.loadTexts: csOrionIKEStateEntry.setStatus('current')
csOrionIKEStateSAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16960)).clone(512))
if mibBuilder.loadTexts: csOrionIKEStateSAIndex.setStatus('current')
csOrionIKEStateLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 11, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStateLocalAddress.setStatus('current')
csOrionIKEStateRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 11, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStateRemoteAddress.setStatus('current')
csOrionIKEStateInitRespondFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("initiator", 1), ("responder", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStateInitRespondFlag.setStatus('current')
csOrionIKEStateAuthenticationType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 65001, 65002, 65003, 65004, 65005, 65006, 65007, 65008, 65009, 65010))).clone(namedValues=NamedValues(("pre-shared-key", 1), ("dss-signatures", 2), ("rsa-signatures", 3), ("rsa-encryption", 4), ("rsa-encryption-revised", 5), ("gss-api", 6), ("xauth-init-pre-shared", 65001), ("xauth-resp-pre-shared", 65002), ("xauth-init-dss", 65003), ("xauth-resp-dss", 65004), ("xauth-init-rsa", 65005), ("xauth-resp-rsa", 65006), ("xauth-init-rsa-encryption", 65007), ("xauth-resp-rsa-encryption", 65008), ("xauth-init-rsa-revised-encryption", 65009), ("xauth-resp-rsa-revised-encryption", 65010)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStateAuthenticationType.setStatus('current')
csOrionIKEStateCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 11, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStateCreationTime.setStatus('current')
csOrionIKEStateExpirationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 11, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStateExpirationTime.setStatus('current')
csOrionIKEStateNegotiations = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStateNegotiations.setStatus('current')
csOrionIKEStateLastUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 11, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStateLastUsed.setStatus('current')
csOrionIKEStateBytesTransferred = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStateBytesTransferred.setStatus('current')
csOrionIKEStateCryptoAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 11, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStateCryptoAlgorithm.setStatus('current')
csOrionIKEStateHashAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 11, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStateHashAlgorithm.setStatus('current')
csOrionIKEStatePrfAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 11, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStatePrfAlgorithm.setStatus('current')
csOrionIKEStateRetryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 11, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStateRetryLimit.setStatus('current')
csOrionIKEStateRetryTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 11, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStateRetryTimer.setStatus('current')
csOrionIKEStateRetryTimerMicroSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 11, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStateRetryTimerMicroSec.setStatus('current')
csOrionIKEStateMaxRetryDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 11, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStateMaxRetryDuration.setStatus('current')
csOrionIKEStateMaxRetryDurationMicroSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 11, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStateMaxRetryDurationMicroSec.setStatus('current')
csOrionIKEDialupConnTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 12), )
if mibBuilder.loadTexts: csOrionIKEDialupConnTable.setStatus('current')
csOrionIKEDialupConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 12, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"), (0, "COSINE-ORION-MIB", "csOrionIKEDialupConnIndex"))
if mibBuilder.loadTexts: csOrionIKEDialupConnEntry.setStatus('current')
csOrionIKEDialupConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4000)))
if mibBuilder.loadTexts: csOrionIKEDialupConnIndex.setStatus('current')
csOrionIKEDialupConnRemIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 12, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEDialupConnRemIpAddress.setStatus('current')
csOrionIKEDialupConnUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 12, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEDialupConnUserId.setStatus('current')
csOrionIKEDialupConnDistinguishName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 12, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEDialupConnDistinguishName.setStatus('current')
csOrionIKEDialupConnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6))).clone(namedValues=NamedValues(("active", 1), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionIKEDialupConnRowStatus.setStatus('current')
csOrionIpSecStateTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 13), )
if mibBuilder.loadTexts: csOrionIpSecStateTable.setStatus('current')
csOrionIpSecStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 13, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"), (0, "COSINE-ORION-MIB", "csOrionIpSecStateSAIndex"))
if mibBuilder.loadTexts: csOrionIpSecStateEntry.setStatus('current')
csOrionIpSecStateSAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16960)).clone(512))
if mibBuilder.loadTexts: csOrionIpSecStateSAIndex.setStatus('current')
csOrionIpSecStateSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 13, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStateSpi.setStatus('current')
csOrionIpSecStateSAFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStateSAFlag.setStatus('current')
csOrionIpSecStateProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("none", 1), ("any", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStateProtocol.setStatus('current')
csOrionIpSecStatePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatePort.setStatus('current')
csOrionIpSecStateCreatorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("ike", 2), ("dial-in", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStateCreatorType.setStatus('current')
csOrionIpSecStateRemoteGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 13, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStateRemoteGateway.setStatus('current')
csOrionIpSecStateLocalGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 13, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStateLocalGateway.setStatus('current')
csOrionIpSecStateRemoteEndPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 13, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStateRemoteEndPoint.setStatus('current')
csOrionIpSecStateLocalEndPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 13, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStateLocalEndPoint.setStatus('current')
csOrionIpSecStateAlgorithmType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 13, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("ah-rfc1828", 1), ("ah-hmac-rfc1828", 2), ("ah-md5-hmac", 3), ("ah-sha-hmac", 4), ("esp-des-rfc1829", 5), ("esp-3des-rfc1829", 6), ("esp-des", 7), ("esp-3des", 8), ("esp-md5-hmac", 10), ("esp-sha-hmac", 11), ("esp3-md5-hmac", 12), ("esp3-sha-hmac", 13), ("other", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStateAlgorithmType.setStatus('current')
csOrionIpSecStateSAType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 13, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("esp", 1), ("ah", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStateSAType.setStatus('current')
csOrionIpSecStateExpire = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 13, 1, 13), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStateExpire.setStatus('current')
csOrionIpSecStateLastUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 13, 1, 14), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStateLastUsed.setStatus('current')
csOrionIpSecStateDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 13, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipsec-sa-send", 1), ("ipsec-sa-rcv", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStateDirection.setStatus('current')
csOrionIpSecStateEncryptionAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 13, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStateEncryptionAlgorithm.setStatus('current')
csOrionIpSecStateHashAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 13, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStateHashAlgorithm.setStatus('current')
csOrionIpSecEventLogTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 14), )
if mibBuilder.loadTexts: csOrionIpSecEventLogTable.setStatus('current')
csOrionIpSecEventLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 14, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"))
if mibBuilder.loadTexts: csOrionIpSecEventLogEntry.setStatus('current')
csOrionIpSecEventLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 14, 1, 1), EvLogLevel().clone('major')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionIpSecEventLogLevel.setStatus('current')
csOrionIpSecEventLogArea = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 14, 1, 2), EvLogArea().clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionIpSecEventLogArea.setStatus('current')
csOrionEncryptInfoEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEncryptInfoEnd.setStatus('current')
csOrionVrNbnsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 19, 1), )
if mibBuilder.loadTexts: csOrionVrNbnsConfigTable.setStatus('current')
csOrionVrNbnsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 19, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionVrNbnsConfigEntry.setStatus('current')
csOrionVrPrimaryNbnsServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 19, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrPrimaryNbnsServer.setStatus('current')
csOrionVrSecondaryNbnsServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 19, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrSecondaryNbnsServer.setStatus('current')
csOrionNBNSInfoEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 19, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionNBNSInfoEnd.setStatus('current')
csOrionAAAServerConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 1), )
if mibBuilder.loadTexts: csOrionAAAServerConfigTable.setStatus('current')
csOrionAAAServerConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionAAAServerType"), (0, "COSINE-ORION-MIB", "csOrionAAAServerName"))
if mibBuilder.loadTexts: csOrionAAAServerConfigEntry.setStatus('current')
csOrionAAAServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ldap", 1), ("radius", 2))))
if mibBuilder.loadTexts: csOrionAAAServerType.setStatus('current')
csOrionAAAServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80)))
if mibBuilder.loadTexts: csOrionAAAServerName.setStatus('current')
csOrionAAAServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 1, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionAAAServerIpAddress.setStatus('current')
csOrionAAAServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionAAAServerPort.setStatus('current')
csOrionAAAServerRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionAAAServerRetransmit.setStatus('current')
csOrionAAAServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)).clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionAAAServerTimeout.setStatus('current')
csOrionAAAServerRadiusKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionAAAServerRadiusKey.setStatus('current')
csOrionAAAServerLdapUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionAAAServerLdapUsername.setStatus('current')
csOrionAAAServerLdapPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionAAAServerLdapPassword.setStatus('current')
csOrionAAAServerLdapSearchBase = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionAAAServerLdapSearchBase.setStatus('current')
csOrionAAAServerLdapSearchFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionAAAServerLdapSearchFilter.setStatus('current')
csOrionAAAServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("destroy", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionAAAServerRowStatus.setStatus('current')
csOrionAAAServerConfigTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionAAAServerConfigTableEnd.setStatus('current')
csOrionAAAServerListConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 3), )
if mibBuilder.loadTexts: csOrionAAAServerListConfigTable.setStatus('current')
csOrionAAAServerListConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionAAAServerListType"), (0, "COSINE-ORION-MIB", "csOrionAAAServerListName"), (0, "COSINE-ORION-MIB", "csOrionAAAServerListPriority"))
if mibBuilder.loadTexts: csOrionAAAServerListConfigEntry.setStatus('current')
csOrionAAAServerListType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("authentication", 1), ("authorization", 2), ("accounting", 4))))
if mibBuilder.loadTexts: csOrionAAAServerListType.setStatus('current')
csOrionAAAServerListName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80)))
if mibBuilder.loadTexts: csOrionAAAServerListName.setStatus('current')
csOrionAAAServerListPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: csOrionAAAServerListPriority.setStatus('current')
csOrionAAAServerListSvrName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionAAAServerListSvrName.setStatus('current')
csOrionAAAServerListSvrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2, 3))).clone(namedValues=NamedValues(("undefined", -1), ("ldap", 1), ("radius", 2), ("local", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionAAAServerListSvrType.setStatus('current')
csOrionAAAServerListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("destroy", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionAAAServerListRowStatus.setStatus('current')
csOrionAAAServerListConfigTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionAAAServerListConfigTableEnd.setStatus('current')
csOrionAAAServerListAdminTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 5), )
if mibBuilder.loadTexts: csOrionAAAServerListAdminTable.setStatus('current')
csOrionAAAServerListAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 5, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionAAAServerListType"), (0, "COSINE-ORION-MIB", "csOrionAAAServerListName"))
if mibBuilder.loadTexts: csOrionAAAServerListAdminEntry.setStatus('current')
csOrionAAAServerListAdminRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6))).clone(namedValues=NamedValues(("active", 1), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionAAAServerListAdminRowStatus.setStatus('current')
csOrionAAAServiceInfoEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionAAAServiceInfoEnd.setStatus('current')
csOrionVrSpfConfTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 20, 1), )
if mibBuilder.loadTexts: csOrionVrSpfConfTable.setStatus('current')
csOrionVrSpfConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 20, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionVrSpfConfEntry.setStatus('current')
csOrionVrSpfConnTblSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 20, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000)).clone(100000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrSpfConnTblSize.setStatus('current')
csOrionVrSpfTcpInitTblSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 20, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrSpfTcpInitTblSize.setStatus('current')
csOrionVrSpfUdpInitTblSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 20, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrSpfUdpInitTblSize.setStatus('current')
csOrionVrSpfTcpSeqCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 20, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrSpfTcpSeqCheck.setStatus('current')
csOrionVrSpfTcpInitTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 20, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrSpfTcpInitTimeout.setStatus('current')
csOrionVrSpfTcpIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 20, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 64800)).clone(420)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrSpfTcpIdleTimeout.setStatus('current')
csOrionVrSpfTcpCloseTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 20, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrSpfTcpCloseTimeout.setStatus('current')
csOrionVrSpfUdpIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 20, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrSpfUdpIdleTimeout.setStatus('current')
csOrionVrSpfIcmpIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 20, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrSpfIcmpIdleTimeout.setStatus('current')
csOrionVrSpfTcpCurrentConnTableEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 20, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrSpfTcpCurrentConnTableEntries.setStatus('current')
csOrionVrSpfUdpCurrentConnTableEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 20, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 214748364))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrSpfUdpCurrentConnTableEntries.setStatus('current')
csOrionVrSpfIcmpCurrentConnTableEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 20, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 214748364))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrSpfIcmpCurrentConnTableEntries.setStatus('current')
csOrionVrSpfTcpTotalConnTableEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 20, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 214748364))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrSpfTcpTotalConnTableEntries.setStatus('current')
csOrionVrSpfUdpTotalConnTableEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 20, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 214748364))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrSpfUdpTotalConnTableEntries.setStatus('current')
csOrionVrSpfIcmpTotalConnTableEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 20, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 214748364))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrSpfIcmpTotalConnTableEntries.setStatus('current')
csOrionVrSpfTcpSynTableEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 20, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrSpfTcpSynTableEntries.setStatus('current')
csOrionVrSpfUdpUnmatchedTableEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 20, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrSpfUdpUnmatchedTableEntries.setStatus('current')
csOrionVrSpfCleanTablesFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 20, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrSpfCleanTablesFlag.setStatus('current')
csOrionSpfInfoEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 20, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionSpfInfoEnd.setStatus('current')
csOrionVncQueueTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 6, 1), )
if mibBuilder.loadTexts: csOrionVncQueueTable.setStatus('current')
csOrionVncQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 6, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"), (0, "COSINE-ORION-MIB", "csOrionVncQueueId"), (0, "COSINE-ORION-MIB", "csOrionVncQueueAclId"))
if mibBuilder.loadTexts: csOrionVncQueueEntry.setStatus('current')
csOrionVncQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 6, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: csOrionVncQueueId.setStatus('current')
csOrionVncQueueAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 6, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: csOrionVncQueueAclId.setStatus('current')
csOrionVncQueueMinBw = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 6, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVncQueueMinBw.setStatus('current')
csOrionVncQueueMaxBw = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 6, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVncQueueMaxBw.setStatus('current')
csOrionVncQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 6, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVncQueueRowStatus.setStatus('current')
csOrionPppConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 1), )
if mibBuilder.loadTexts: csOrionPppConfigTable.setStatus('current')
csOrionPppConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionPppConfigEntry.setStatus('current')
csOrionPppConfigHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionPppConfigHostname.setStatus('current')
csOrionPppIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 2), )
if mibBuilder.loadTexts: csOrionPppIfConfigTable.setStatus('current')
csOrionPppIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionPppIfSlotIndex"), (0, "COSINE-ORION-MIB", "csOrionPppIfModuleIndex"), (0, "COSINE-ORION-MIB", "csOrionPppIfPortIndex"), (0, "COSINE-ORION-MIB", "csOrionPppIfChIndex"), (0, "COSINE-ORION-MIB", "csOrionPppIfSubIfIndex"))
if mibBuilder.loadTexts: csOrionPppIfConfigEntry.setStatus('current')
csOrionPppIfSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionPppIfSlotIndex.setStatus('current')
csOrionPppIfModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionPppIfModuleIndex.setStatus('current')
csOrionPppIfPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionPppIfPortIndex.setStatus('current')
csOrionPppIfChIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)))
if mibBuilder.loadTexts: csOrionPppIfChIndex.setStatus('current')
csOrionPppIfSubIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: csOrionPppIfSubIfIndex.setStatus('current')
csOrionPppIfConfigAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("pap", 2), ("chapmd5", 3), ("mschapv1Server", 4), ("mschapv2Server", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionPppIfConfigAuth.setStatus('current')
csOrionPppIfEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("weak", 2), ("strong", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionPppIfEncryption.setStatus('obsolete')
csOrionPppIfEncryptionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stateful", 1), ("stateless", 2))).clone('stateful')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionPppIfEncryptionMode.setStatus('obsolete')
csOrionPppIfRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionPppIfRetransmit.setStatus('obsolete')
csOrionPppIfConfigReqRtx = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionPppIfConfigReqRtx.setStatus('current')
csOrionPppIfTerminateReqRtx = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionPppIfTerminateReqRtx.setStatus('current')
csOrionPppIfTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionPppIfTimeout.setStatus('current')
csOrionPppIfReauth = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionPppIfReauth.setStatus('current')
csOrionPppIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionPppIfAdminStatus.setStatus('current')
csOrionPppIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 2, 1, 15), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionPppIfOperStatus.setStatus('current')
csOrionPppIfEvLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 2, 1, 16), EvLogLevel().clone('major')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionPppIfEvLogLevel.setStatus('current')
csOrionPppIfEvLogArea = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 2, 1, 17), EvLogArea().clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionPppIfEvLogArea.setStatus('current')
csOrionPppIfEchoTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionPppIfEchoTimeout.setStatus('current')
csOrionPppRemoteUserTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 3), )
if mibBuilder.loadTexts: csOrionPppRemoteUserTable.setStatus('current')
csOrionPppRemoteUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionPppRemoteUserName"))
if mibBuilder.loadTexts: csOrionPppRemoteUserEntry.setStatus('current')
csOrionPppRemoteUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)))
if mibBuilder.loadTexts: csOrionPppRemoteUserName.setStatus('current')
csOrionPppRemoteUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionPppRemoteUserPassword.setStatus('current')
csOrionPppRemoteUserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionPppRemoteUserRowStatus.setStatus('current')
csOrionPppRemoteUserConnProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionPppRemoteUserConnProfile.setStatus('current')
csOrionPppInfoEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionPppInfoEnd.setStatus('current')
csOrionPptpConfTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 8, 1), )
if mibBuilder.loadTexts: csOrionPptpConfTable.setStatus('current')
csOrionPptpConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 8, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionPptpConfEntry.setStatus('current')
csOrionPptpConfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionPptpConfStatus.setStatus('current')
csOrionPptpConfMaxConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionPptpConfMaxConn.setStatus('current')
csOrionPptpConfIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionPptpConfIdleTimeout.setStatus('current')
csOrionPptpConfPPPKeepAliveInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionPptpConfPPPKeepAliveInterval.setStatus('current')
csOrionPptpConfEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("weak", 2), ("strong", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionPptpConfEncryption.setStatus('current')
csOrionPptpConfAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("pap", 2), ("chapmd5", 3), ("mschapv1Server", 4), ("mschapv2Server", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionPptpConfAuthentication.setStatus('current')
csOrionPptpConfIpPool = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 8, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionPptpConfIpPool.setStatus('current')
csOrionPptpConnTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 8, 2), )
if mibBuilder.loadTexts: csOrionPptpConnTable.setStatus('current')
csOrionPptpConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 8, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionPptpConnFarIpAddr"), (0, "COSINE-ORION-MIB", "csOrionPptpConnLocalIpAddr"))
if mibBuilder.loadTexts: csOrionPptpConnEntry.setStatus('current')
csOrionPptpConnFarIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 8, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: csOrionPptpConnFarIpAddr.setStatus('current')
csOrionPptpConnLocalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 8, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: csOrionPptpConnLocalIpAddr.setStatus('current')
csOrionPptpConnAge = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionPptpConnAge.setStatus('current')
csOrionPptpConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionPptpConnStatus.setStatus('current')
csOrionPptpConnFarUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 8, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionPptpConnFarUsername.setStatus('current')
csOrionPptpInfoEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionPptpInfoEnd.setStatus('current')
csOrionVrRadiusConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 9, 1), )
if mibBuilder.loadTexts: csOrionVrRadiusConfigTable.setStatus('obsolete')
csOrionVrRadiusConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 9, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionVrRadiusConfigEntry.setStatus('obsolete')
csOrionVrRadiusRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrRadiusRetransmit.setStatus('obsolete')
csOrionVrRadiusTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrRadiusTimeout.setStatus('obsolete')
csOrionVrRadiusSvrTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 9, 2), )
if mibBuilder.loadTexts: csOrionVrRadiusSvrTable.setStatus('obsolete')
csOrionVrRadiusSvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 9, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVrRadiusSvrPriority"))
if mibBuilder.loadTexts: csOrionVrRadiusSvrEntry.setStatus('obsolete')
csOrionVrRadiusSvrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: csOrionVrRadiusSvrPriority.setStatus('obsolete')
csOrionVrRadiusSvrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 9, 2, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrRadiusSvrAddress.setStatus('obsolete')
csOrionVrRadiusSvrKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 9, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrRadiusSvrKey.setStatus('obsolete')
csOrionVrRadiusSvrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 9, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrRadiusSvrRowStatus.setStatus('obsolete')
csOrionVrRadiusSvrOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 9, 2, 1, 5), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVrRadiusSvrOperStatus.setStatus('obsolete')
csOrionVrRadiusSvrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 9, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1812)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrRadiusSvrPort.setStatus('obsolete')
csOrionVrRadiusAcctSvrTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 9, 3), )
if mibBuilder.loadTexts: csOrionVrRadiusAcctSvrTable.setStatus('obsolete')
csOrionVrRadiusAcctSvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 9, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVrRadiusAcctSvrPriority"))
if mibBuilder.loadTexts: csOrionVrRadiusAcctSvrEntry.setStatus('obsolete')
csOrionVrRadiusAcctSvrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: csOrionVrRadiusAcctSvrPriority.setStatus('obsolete')
csOrionVrRadiusAcctSvrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 9, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrRadiusAcctSvrAddress.setStatus('obsolete')
csOrionVrRadiusAcctSvrKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 9, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrRadiusAcctSvrKey.setStatus('obsolete')
csOrionVrRadiusAcctSvrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 9, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrRadiusAcctSvrRowStatus.setStatus('obsolete')
csOrionVrRadiusAcctSvrOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 9, 3, 1, 5), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVrRadiusAcctSvrOperStatus.setStatus('obsolete')
csOrionVrRadiusAcctSvrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 9, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1813)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrRadiusAcctSvrPort.setStatus('obsolete')
csOrionRadiusInfoEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 9, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionRadiusInfoEnd.setStatus('current')
csOrionVrDhcpRelayConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 1), )
if mibBuilder.loadTexts: csOrionVrDhcpRelayConfigTable.setStatus('current')
csOrionVrDhcpRelayConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionVrDhcpRelayConfigEntry.setStatus('current')
csOrionVrDhcpRelayMaxHops = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrDhcpRelayMaxHops.setStatus('current')
csOrionVrDhcpRelaySecsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 360)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrDhcpRelaySecsThreshold.setStatus('current')
csOrionVrDhcpRelayOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 1, 1, 3), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVrDhcpRelayOperStatus.setStatus('current')
csOrionVrDhcpRelayAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrDhcpRelayAdminStatus.setStatus('current')
csOrionVrDhcpRelayServerTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 2), )
if mibBuilder.loadTexts: csOrionVrDhcpRelayServerTable.setStatus('current')
csOrionVrDhcpRelayServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVrDhcpRelayServerAddress"))
if mibBuilder.loadTexts: csOrionVrDhcpRelayServerEntry.setStatus('current')
csOrionVrDhcpRelayServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 2, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrDhcpRelayServerAddress.setStatus('current')
csOrionVrDhcpRelayServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrDhcpRelayServerName.setStatus('current')
csOrionVrDhcpRelayServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrDhcpRelayServerRowStatus.setStatus('current')
csOrionDhcpRelayStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 3), )
if mibBuilder.loadTexts: csOrionDhcpRelayStatsTable.setStatus('current')
csOrionDhcpRelayStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionDhcpRelayStatsEntry.setStatus('current')
csOrionDhcpRelayInReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionDhcpRelayInReqs.setStatus('current')
csOrionDhcpRelayInDiscs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionDhcpRelayInDiscs.setStatus('current')
csOrionDhcpRelayInRels = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionDhcpRelayInRels.setStatus('current')
csOrionDhcpRelayInDecs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionDhcpRelayInDecs.setStatus('current')
csOrionDhcpRelayInAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionDhcpRelayInAcks.setStatus('current')
csOrionDhcpRelayInNaks = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionDhcpRelayInNaks.setStatus('current')
csOrionDhcpRelayInOffers = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionDhcpRelayInOffers.setStatus('current')
csOrionDhcpRelayOutReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionDhcpRelayOutReqs.setStatus('current')
csOrionDhcpRelayOutDiscs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionDhcpRelayOutDiscs.setStatus('current')
csOrionDhcpRelayOutRels = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionDhcpRelayOutRels.setStatus('current')
csOrionDhcpRelayOutDecs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionDhcpRelayOutDecs.setStatus('current')
csOrionDhcpRelayOutAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionDhcpRelayOutAcks.setStatus('current')
csOrionDhcpRelayOutNaks = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionDhcpRelayOutNaks.setStatus('current')
csOrionDhcpRelayOutOffers = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionDhcpRelayOutOffers.setStatus('current')
csOrionDHCPInfoEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionDHCPInfoEnd.setStatus('current')
csOrionVrDnsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 10, 1), )
if mibBuilder.loadTexts: csOrionVrDnsConfigTable.setStatus('current')
csOrionVrDnsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 10, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionVrDnsConfigEntry.setStatus('current')
csOrionVrPrimaryDnsServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 10, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrPrimaryDnsServer.setStatus('current')
csOrionVrSecondaryDnsServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 10, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrSecondaryDnsServer.setStatus('current')
csOrionDNSInfoEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionDNSInfoEnd.setStatus('current')
csOrionVrIfManagerTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 1), )
if mibBuilder.loadTexts: csOrionVrIfManagerTable.setStatus('current')
csOrionVrIfManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVrIfManagerSlotIndex"), (0, "COSINE-ORION-MIB", "csOrionVrIfManagerModuleIndex"), (0, "COSINE-ORION-MIB", "csOrionVrIfManagerPortIndex"), (0, "COSINE-ORION-MIB", "csOrionVrIfManagerChannelIndex"), (0, "COSINE-ORION-MIB", "csOrionVrIfManagerSubifIndex"))
if mibBuilder.loadTexts: csOrionVrIfManagerEntry.setStatus('current')
csOrionVrIfManagerSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csOrionVrIfManagerSlotIndex.setStatus('current')
csOrionVrIfManagerModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csOrionVrIfManagerModuleIndex.setStatus('current')
csOrionVrIfManagerPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csOrionVrIfManagerPortIndex.setStatus('current')
csOrionVrIfManagerChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: csOrionVrIfManagerChannelIndex.setStatus('current')
csOrionVrIfManagerSubifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: csOrionVrIfManagerSubifIndex.setStatus('current')
csOrionVrIfManagerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrIfManagerRowStatus.setStatus('current')
csOrionConnectionProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 2), )
if mibBuilder.loadTexts: csOrionConnectionProfileTable.setStatus('current')
csOrionConnectionProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionConnectionProfileName"))
if mibBuilder.loadTexts: csOrionConnectionProfileEntry.setStatus('current')
csOrionConnectionProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 2, 1, 1), LongDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)))
if mibBuilder.loadTexts: csOrionConnectionProfileName.setStatus('current')
csOrionConnectionProfileVpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionConnectionProfileVpnId.setStatus('current')
csOrionConnectionProfileVrId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 2, 1, 3), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionConnectionProfileVrId.setStatus('current')
csOrionConnectionProfileAddrPoolname = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 2, 1, 4), LongDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionConnectionProfileAddrPoolname.setStatus('current')
csOrionConnectionProfileLnsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 2, 1, 5), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionConnectionProfileLnsAddress.setStatus('current')
csOrionConnectionProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionConnectionProfileRowStatus.setStatus('current')
csOrionServiceTemplateTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 3), )
if mibBuilder.loadTexts: csOrionServiceTemplateTable.setStatus('current')
csOrionServiceTemplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 3, 2), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionServiceTemplateName"))
if mibBuilder.loadTexts: csOrionServiceTemplateEntry.setStatus('current')
csOrionServiceTemplateName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 3, 2, 1), LongDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)))
if mibBuilder.loadTexts: csOrionServiceTemplateName.setStatus('current')
csOrionServiceTemplateRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 3, 2, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionServiceTemplateRowStatus.setStatus('current')
csOrionServiceTemplateConnProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 4), )
if mibBuilder.loadTexts: csOrionServiceTemplateConnProfileTable.setStatus('current')
csOrionServiceTemplateConnProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 4, 2), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionServiceTemplateName"), (0, "COSINE-ORION-MIB", "csOrionServiceTemplateConnProfileName"))
if mibBuilder.loadTexts: csOrionServiceTemplateConnProfileEntry.setStatus('current')
csOrionServiceTemplateConnProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 4, 2, 1), LongDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)))
if mibBuilder.loadTexts: csOrionServiceTemplateConnProfileName.setStatus('current')
csOrionServiceTemplateConnProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 4, 2, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionServiceTemplateConnProfileRowStatus.setStatus('current')
csOrionServiceSelectionInfoEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionServiceSelectionInfoEnd.setStatus('current')
csOrionCiscoHdlcConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 11, 1), )
if mibBuilder.loadTexts: csOrionCiscoHdlcConfigTable.setStatus('current')
csOrionCiscoHdlcConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 11, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionCiscoHdlcSlotIndex"), (0, "COSINE-ORION-MIB", "csOrionCiscoHdlcModuleIndex"), (0, "COSINE-ORION-MIB", "csOrionCiscoHdlcPortIndex"), (0, "COSINE-ORION-MIB", "csOrionCiscoHdlcChIndex"))
if mibBuilder.loadTexts: csOrionCiscoHdlcConfigEntry.setStatus('current')
csOrionCiscoHdlcSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionCiscoHdlcSlotIndex.setStatus('current')
csOrionCiscoHdlcModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionCiscoHdlcModuleIndex.setStatus('current')
csOrionCiscoHdlcPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionCiscoHdlcPortIndex.setStatus('current')
csOrionCiscoHdlcChIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)))
if mibBuilder.loadTexts: csOrionCiscoHdlcChIndex.setStatus('current')
csOrionCiscoHdlcSlarpKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionCiscoHdlcSlarpKeepAlive.setStatus('current')
csOrionCiscoHdlcOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 11, 1, 1, 6), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionCiscoHdlcOperStatus.setStatus('current')
csOrionCiscoHdlcAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionCiscoHdlcAdminStatus.setStatus('current')
csOrionCiscoHdlcInfoEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionCiscoHdlcInfoEnd.setStatus('current')
csOrionFRoIPConfTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 1), )
if mibBuilder.loadTexts: csOrionFRoIPConfTable.setStatus('current')
csOrionFRoIPConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionFRoIPConfEntry.setStatus('current')
csOrionFRoIPVIfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFRoIPVIfaceId.setStatus('current')
csOrionFRoIPConfMaxPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(24)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFRoIPConfMaxPeer.setStatus('current')
csOrionFRoIPConfDefaultWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256)).clone(24)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFRoIPConfDefaultWindowSize.setStatus('current')
csOrionFRoIPConfDefaultWindowTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 25000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFRoIPConfDefaultWindowTimeout.setStatus('current')
csOrionFRoIPConfDefaultServiceSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFRoIPConfDefaultServiceSlot.setStatus('current')
csOrionFRoIPConfNumActiveTransports = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFRoIPConfNumActiveTransports.setStatus('current')
csOrionFRoIPAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFRoIPAdminStatus.setStatus('current')
csOrionFRoIPOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 1, 1, 8), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFRoIPOperStatus.setStatus('current')
csOrionFRoIPTransportTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 2), )
if mibBuilder.loadTexts: csOrionFRoIPTransportTable.setStatus('current')
csOrionFRoIPTransportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFRoIPTransportPeer"))
if mibBuilder.loadTexts: csOrionFRoIPTransportEntry.setStatus('current')
csOrionFRoIPTransportPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: csOrionFRoIPTransportPeer.setStatus('current')
csOrionFRoIPTransportMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFRoIPTransportMode.setStatus('current')
csOrionFRoIPTransportWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256)).clone(24)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFRoIPTransportWindowSize.setStatus('current')
csOrionFRoIPTransportWindowTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 25000)).clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFRoIPTransportWindowTimeout.setStatus('current')
csOrionFRoIPTransportKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 30)).clone(15)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFRoIPTransportKeepAlive.setStatus('current')
csOrionFRoIPTransportEventWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFRoIPTransportEventWindowSize.setStatus('current')
csOrionFRoIPTransportPermittedBadEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFRoIPTransportPermittedBadEvents.setStatus('current')
csOrionFRoIPTransportDefaultSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFRoIPTransportDefaultSlot.setStatus('current')
csOrionFRoIPTransportOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFRoIPTransportOutPkts.setStatus('current')
csOrionFRoIPTransportInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFRoIPTransportInPkts.setStatus('current')
csOrionFRoIPTransportOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFRoIPTransportOutBytes.setStatus('current')
csOrionFRoIPTransportInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFRoIPTransportInBytes.setStatus('current')
csOrionFRoIPTransportRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 2, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFRoIPTransportRowStatus.setStatus('current')
csOrionFRoIPTransportAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFRoIPTransportAdminStatus.setStatus('current')
csOrionFRoIPTransportOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 2, 1, 15), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFRoIPTransportOperStatus.setStatus('current')
csFRoIPCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3), )
if mibBuilder.loadTexts: csFRoIPCircuitTable.setStatus('current')
csFRoIPCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFRoIPTransportPeer"), (0, "COSINE-ORION-MIB", "csFRoIPCircuitDlci"))
if mibBuilder.loadTexts: csFRoIPCircuitEntry.setStatus('current')
csFRoIPCircuitDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3, 1, 1), DLCI())
if mibBuilder.loadTexts: csFRoIPCircuitDlci.setStatus('current')
csFRoIPCircuitState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("active", 2), ("inactive", 3))).clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csFRoIPCircuitState.setStatus('current')
csFRoIPCircuitReceivedFECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFRoIPCircuitReceivedFECNs.setStatus('current')
csFRoIPCircuitReceivedBECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFRoIPCircuitReceivedBECNs.setStatus('current')
csFRoIPCircuitSentFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFRoIPCircuitSentFrames.setStatus('current')
csFRoIPCircuitSentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFRoIPCircuitSentOctets.setStatus('current')
csFRoIPCircuitReceivedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFRoIPCircuitReceivedFrames.setStatus('current')
csFRoIPCircuitReceivedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFRoIPCircuitReceivedOctets.setStatus('current')
csFRoIPCircuitCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFRoIPCircuitCreationTime.setStatus('current')
csFRoIPCircuitLastTimeChange = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFRoIPCircuitLastTimeChange.setStatus('current')
csFRoIPCircuitCommittedBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csFRoIPCircuitCommittedBurst.setStatus('current')
csFRoIPCircuitExcessBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csFRoIPCircuitExcessBurst.setStatus('current')
csFRoIPCircuitThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csFRoIPCircuitThroughput.setStatus('current')
csFRoIPCircuitMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unicast", 1), ("oneWay", 2), ("twoWay", 3), ("nWay", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFRoIPCircuitMulticast.setStatus('current')
csFRoIPCircuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFRoIPCircuitType.setStatus('current')
csFRoIPCircuitDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFRoIPCircuitDiscards.setStatus('current')
csFRoIPCircuitReceivedDEs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFRoIPCircuitReceivedDEs.setStatus('current')
csFRoIPCircuitSentDEs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFRoIPCircuitSentDEs.setStatus('current')
csFRoIPCircuitRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csFRoIPCircuitRowStatus.setStatus('current')
csFRoIPCircuitOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3, 1, 20), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFRoIPCircuitOperStatus.setStatus('current')
csFRoIPCircuitFwdLink = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16).clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csFRoIPCircuitFwdLink.setStatus('current')
csFRoIPCircuitTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFRoIPCircuitTableEnd.setStatus('current')
csOrionL2tpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 1), )
if mibBuilder.loadTexts: csOrionL2tpConfigTable.setStatus('current')
csOrionL2tpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionL2tpConfigEntry.setStatus('current')
csOrionL2tpConfigServiceIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64000)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionL2tpConfigServiceIf.setStatus('current')
csOrionL2tpConfigMaxTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionL2tpConfigMaxTunnels.setStatus('current')
csOrionL2tpConfigMaxSessionsPerTunnel = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionL2tpConfigMaxSessionsPerTunnel.setStatus('current')
csOrionL2tpConfigTunnelAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionL2tpConfigTunnelAuthentication.setStatus('current')
csOrionL2tpConfigTunnelHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionL2tpConfigTunnelHelloInterval.setStatus('current')
csOrionL2tpConfigTunnelMaxRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 10)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionL2tpConfigTunnelMaxRetransmissions.setStatus('current')
csOrionL2tpConfigTunnelMaxRetransmissionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 30)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionL2tpConfigTunnelMaxRetransmissionTimeout.setStatus('current')
csOrionL2tpConfigTunnelRWS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionL2tpConfigTunnelRWS.setStatus('current')
csOrionL2tpConfigTunnelEmptyTunnelTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionL2tpConfigTunnelEmptyTunnelTimeout.setStatus('current')
csOrionL2tpConfigSessionFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionL2tpConfigSessionFlowControl.setStatus('current')
csOrionL2tpConfigSessionRWS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionL2tpConfigSessionRWS.setStatus('current')
csOrionL2tpConfigSessionTxQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionL2tpConfigSessionTxQueueSize.setStatus('current')
csOrionL2tpConfigSessionPacketSequencing = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionL2tpConfigSessionPacketSequencing.setStatus('current')
csOrionL2tpConfigPppConfigReqRetransmission = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionL2tpConfigPppConfigReqRetransmission.setStatus('current')
csOrionL2tpConfigPppRestartTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionL2tpConfigPppRestartTimeout.setStatus('current')
csOrionL2tpConfigPppTermReqRetransmission = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionL2tpConfigPppTermReqRetransmission.setStatus('current')
csOrionL2tpConfigPppAuthProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("pap", 2), ("chapmd5", 3), ("mschapv1Server", 4), ("mschapv2Server", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionL2tpConfigPppAuthProtocol.setStatus('current')
csOrionL2tpConfigPppReauthPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionL2tpConfigPppReauthPeriod.setStatus('current')
csOrionL2tpConfigPppEchoTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionL2tpConfigPppEchoTimeout.setStatus('current')
csOrionL2tpConfigPppIpPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionL2tpConfigPppIpPoolName.setStatus('current')
csOrionL2tpTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 2), )
if mibBuilder.loadTexts: csOrionL2tpTunnelTable.setStatus('current')
csOrionL2tpTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionL2tpTunnelLocalId"))
if mibBuilder.loadTexts: csOrionL2tpTunnelEntry.setStatus('current')
csOrionL2tpTunnelLocalId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csOrionL2tpTunnelLocalId.setStatus('current')
csOrionL2tpTunnelMaxSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpTunnelMaxSessions.setStatus('current')
csOrionL2tpTunnelAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpTunnelAuthentication.setStatus('current')
csOrionL2tpTunnelHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpTunnelHelloInterval.setStatus('current')
csOrionL2tpTunnelMaxRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpTunnelMaxRetransmissions.setStatus('current')
csOrionL2tpTunnelMaxRetransmissionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpTunnelMaxRetransmissionTimeout.setStatus('current')
csOrionL2tpTunnelRWS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpTunnelRWS.setStatus('current')
csOrionL2tpTunnelEmptyTunnelTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpTunnelEmptyTunnelTimeout.setStatus('current')
csOrionL2tpTunnelUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpTunnelUpTime.setStatus('current')
csOrionL2tpTunnelRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 2, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpTunnelRemoteIpAddress.setStatus('current')
csOrionL2tpTunnelRemoteTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpTunnelRemoteTunnelId.setStatus('current')
csOrionL2tpTunnelRemoteUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpTunnelRemoteUdpPort.setStatus('current')
csOrionL2tpTunnelRemoteRWS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpTunnelRemoteRWS.setStatus('current')
csOrionL2tpTunnelRemoteHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpTunnelRemoteHostname.setStatus('current')
csOrionL2tpTunnelActiveSessionsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpTunnelActiveSessionsCount.setStatus('current')
csOrionL2tpTunnelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 2, 1, 16), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionL2tpTunnelStatus.setStatus('current')
csOrionL2tpSessionTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 3), )
if mibBuilder.loadTexts: csOrionL2tpSessionTable.setStatus('current')
csOrionL2tpSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionL2tpTunnelLocalId"), (0, "COSINE-ORION-MIB", "csOrionL2tpSessionLocalId"))
if mibBuilder.loadTexts: csOrionL2tpSessionEntry.setStatus('current')
csOrionL2tpSessionLocalId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csOrionL2tpSessionLocalId.setStatus('current')
csOrionL2tpSessionFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpSessionFlowControl.setStatus('current')
csOrionL2tpSessionRWS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpSessionRWS.setStatus('current')
csOrionL2tpSessionTxQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpSessionTxQueueSize.setStatus('current')
csOrionL2tpSessionPacketSequencing = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpSessionPacketSequencing.setStatus('current')
csOrionL2tpSessionUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpSessionUpTime.setStatus('current')
csOrionL2tpSessionRemoteCallId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpSessionRemoteCallId.setStatus('current')
csOrionL2tpSessionRemoteFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpSessionRemoteFlowControl.setStatus('current')
csOrionL2tpSessionRemoteRWS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpSessionRemoteRWS.setStatus('current')
csOrionL2tpSessionUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpSessionUsername.setStatus('current')
csOrionL2tpSessionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 3, 1, 11), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionL2tpSessionRowStatus.setStatus('current')
csOrionL2tpSessionLocalIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 3, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpSessionLocalIpAddress.setStatus('current')
csOrionL2tpSessionRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 3, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpSessionRemoteIpAddress.setStatus('current')
csOrionL2tpSessionCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("lacIncoming", 1), ("lnsIncoming", 2), ("lacOutgoing", 3), ("lnsOutgoing", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpSessionCallType.setStatus('current')
csOrionL2tpSessionState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sessionIdle", 1), ("sessionConnecting", 2), ("sessionEstablished", 3), ("sessionDisconnecting", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpSessionState.setStatus('current')
csOrionLnsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 4), )
if mibBuilder.loadTexts: csOrionLnsConfigTable.setStatus('current')
csOrionLnsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionLnsConfigEntry.setStatus('current')
csOrionLnsConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("drain", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionLnsConfigAdminStatus.setStatus('current')
csOrionLacConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 5), )
if mibBuilder.loadTexts: csOrionLacConfigTable.setStatus('current')
csOrionLacConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 5, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionLacConfigEntry.setStatus('current')
csOrionLacConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("drain", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionLacConfigAdminStatus.setStatus('current')
csOrionTunnelSwitchTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 6), )
if mibBuilder.loadTexts: csOrionTunnelSwitchTable.setStatus('current')
csOrionTunnelSwitchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 6, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionTunnelSwitchClientName"))
if mibBuilder.loadTexts: csOrionTunnelSwitchEntry.setStatus('current')
csOrionTunnelSwitchClientName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 80)))
if mibBuilder.loadTexts: csOrionTunnelSwitchClientName.setStatus('current')
csOrionTunnelSwitchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("passThrough", 1), ("authenticate", 2))).clone('passThrough')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionTunnelSwitchMode.setStatus('current')
csOrionTunnelSwitchRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionTunnelSwitchRowStatus.setStatus('current')
csOrionTunnelSwitchTargetTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 7), )
if mibBuilder.loadTexts: csOrionTunnelSwitchTargetTable.setStatus('current')
csOrionTunnelSwitchTargetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 7, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionTunnelSwitchClientName"), (0, "COSINE-ORION-MIB", "csOrionTunnelSwitchTargetIpAddress"))
if mibBuilder.loadTexts: csOrionTunnelSwitchTargetEntry.setStatus('current')
csOrionTunnelSwitchTargetIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 7, 1, 1), IpAddress())
if mibBuilder.loadTexts: csOrionTunnelSwitchTargetIpAddress.setStatus('current')
csOrionTunnelSwitchTargetPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionTunnelSwitchTargetPriority.setStatus('current')
csOrionTunnelSwitchTargetMaxSession = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionTunnelSwitchTargetMaxSession.setStatus('current')
csOrionTunnelSwitchTargetSessionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionTunnelSwitchTargetSessionCount.setStatus('current')
csOrionTunnelSwitchTargetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 7, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionTunnelSwitchTargetRowStatus.setStatus('current')
csOrionL2tpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 8), )
if mibBuilder.loadTexts: csOrionL2tpStatsTable.setStatus('current')
csOrionL2tpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 8, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionL2tpStatsEntry.setStatus('current')
csOrionL2tpStatsTotalTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpStatsTotalTunnels.setStatus('current')
csOrionL2tpStatsFailedTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpStatsFailedTunnels.setStatus('current')
csOrionL2tpStatsFailedAuthentications = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpStatsFailedAuthentications.setStatus('current')
csOrionL2tpStatsActiveTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 8, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpStatsActiveTunnels.setStatus('current')
csOrionL2tpStatsTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpStatsTotalSessions.setStatus('current')
csOrionL2tpStatsFailedSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpStatsFailedSessions.setStatus('current')
csOrionL2tpStatsActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 8, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpStatsActiveSessions.setStatus('current')
csOrionL2tpStatsDrainingTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpStatsDrainingTunnels.setStatus('current')
csOrionL2tpStatsControlRecvOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpStatsControlRecvOctets.setStatus('current')
csOrionL2tpStatsControlRecvPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 8, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpStatsControlRecvPackets.setStatus('current')
csOrionL2tpStatsControlSendOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 8, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpStatsControlSendOctets.setStatus('current')
csOrionL2tpStatsControlSendPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 8, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpStatsControlSendPackets.setStatus('current')
csOrionL2tpStatsPayloadRecvOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 8, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpStatsPayloadRecvOctets.setStatus('current')
csOrionL2tpStatsPayloadRecvPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 8, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpStatsPayloadRecvPackets.setStatus('current')
csOrionL2tpStatsPayloadRecvDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 8, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpStatsPayloadRecvDiscards.setStatus('current')
csOrionL2tpStatsPayloadSendOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 8, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpStatsPayloadSendOctets.setStatus('current')
csOrionL2tpStatsPayloadSendPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 8, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpStatsPayloadSendPackets.setStatus('current')
csOrionL2tpTunnelStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 9), )
if mibBuilder.loadTexts: csOrionL2tpTunnelStatsTable.setStatus('current')
csOrionL2tpTunnelStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 9, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionL2tpTunnelLocalId"))
if mibBuilder.loadTexts: csOrionL2tpTunnelStatsEntry.setStatus('current')
csOrionL2tpTunnelStatsState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tunnelIdle", 1), ("tunnelConnecting", 2), ("tunnelEstablished", 3), ("tunnelDisconnecting", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpTunnelStatsState.setStatus('current')
csOrionL2tpTunnelStatsTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 9, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpTunnelStatsTotalSessions.setStatus('current')
csOrionL2tpTunnelStatsFailedSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpTunnelStatsFailedSessions.setStatus('current')
csOrionL2tpTunnelStatsActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 9, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpTunnelStatsActiveSessions.setStatus('current')
csOrionL2tpInfoEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpInfoEnd.setStatus('current')
csOrionDsByteFilterInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 1))
csOrionExpFilterInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 2))
csOrionVrDsByteFilterTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 1, 1), )
if mibBuilder.loadTexts: csOrionVrDsByteFilterTable.setStatus('current')
csOrionVrDsByteFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 1, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVrDsByteFilterIndex"))
if mibBuilder.loadTexts: csOrionVrDsByteFilterEntry.setStatus('current')
csOrionVrDsByteFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csOrionVrDsByteFilterIndex.setStatus('current')
csOrionVrDsByteFilterAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrDsByteFilterAclId.setStatus('current')
csOrionVrDsByteFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ignore", 1), ("setValue", 2))).clone('setValue')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrDsByteFilterAction.setStatus('current')
csOrionVrDsByteFilterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256)).clone(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrDsByteFilterValue.setStatus('current')
csOrionVrDsByteFilterDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrDsByteFilterDirection.setStatus('current')
csOrionVrDsByteFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 1, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrDsByteFilterRowStatus.setStatus('current')
csOrionViDsByteFilterTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 1, 2), )
if mibBuilder.loadTexts: csOrionViDsByteFilterTable.setStatus('current')
csOrionViDsByteFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 1, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"), (0, "COSINE-ORION-MIB", "csOrionViDsByteFilterIndex"))
if mibBuilder.loadTexts: csOrionViDsByteFilterEntry.setStatus('current')
csOrionViDsByteFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csOrionViDsByteFilterIndex.setStatus('current')
csOrionViDsByteFilterAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionViDsByteFilterAclId.setStatus('current')
csOrionViDsByteFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ignore", 1), ("setValue", 2))).clone('setValue')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionViDsByteFilterAction.setStatus('current')
csOrionViDsByteFilterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256)).clone(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionViDsByteFilterValue.setStatus('current')
csOrionViDsByteFilterDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionViDsByteFilterDirection.setStatus('current')
csOrionViDsByteFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 1, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionViDsByteFilterRowStatus.setStatus('current')
csOrionDsByteFilterInfoEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionDsByteFilterInfoEnd.setStatus('current')
csExpFilterTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 2, 1), )
if mibBuilder.loadTexts: csExpFilterTable.setStatus('current')
csExpFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 2, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csExpFilterDirection"), (0, "COSINE-ORION-MIB", "csExpFilterMatchingExp"))
if mibBuilder.loadTexts: csExpFilterEntry.setStatus('current')
csExpFilterDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2))))
if mibBuilder.loadTexts: csExpFilterDirection.setStatus('current')
csExpFilterMatchingExp = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: csExpFilterMatchingExp.setStatus('current')
csExpFilterExpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpFilterExpValue.setStatus('current')
csExpFilterServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ef", 1), ("af1", 2), ("af2", 3), ("af3", 4), ("af4", 5), ("be", 6), ("none", 7), ("ef-low", 8), ("ef-high", 9))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpFilterServiceCategory.setStatus('current')
csExpFilterColorMeteringMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aware", 1), ("blind", 2))).clone('blind')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpFilterColorMeteringMode.setStatus('current')
csExpFilterDropPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("red", 1), ("yellow", 2), ("green", 3), ("none", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpFilterDropPrecedence.setStatus('current')
csExpFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 2, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpFilterRowStatus.setStatus('current')
csExpFilterTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csExpFilterTableEnd.setStatus('current')
csExpFilterIfTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 2, 3), )
if mibBuilder.loadTexts: csExpFilterIfTable.setStatus('current')
csExpFilterIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 2, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"), (0, "COSINE-ORION-MIB", "csExpFilterIfDirection"), (0, "COSINE-ORION-MIB", "csExpFilterIfMatchingExp"))
if mibBuilder.loadTexts: csExpFilterIfEntry.setStatus('current')
csExpFilterIfDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2))))
if mibBuilder.loadTexts: csExpFilterIfDirection.setStatus('current')
csExpFilterIfMatchingExp = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: csExpFilterIfMatchingExp.setStatus('current')
csExpFilterIfExpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpFilterIfExpValue.setStatus('current')
csExpFilterIfServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ef", 1), ("af1", 2), ("af2", 3), ("af3", 4), ("af4", 5), ("be", 6), ("none", 7), ("ef-low", 8), ("ef-high", 9))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpFilterIfServiceCategory.setStatus('current')
csExpFilterIfColorMeteringMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aware", 1), ("blind", 2))).clone('blind')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpFilterIfColorMeteringMode.setStatus('current')
csExpFilterIfDropPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("red", 1), ("yellow", 2), ("green", 3), ("none", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpFilterIfDropPrecedence.setStatus('current')
csExpFilterIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 2, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpFilterIfRowStatus.setStatus('current')
csOrionQosInfoEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionQosInfoEnd.setStatus('current')
csOrionQoSMeterProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 1), )
if mibBuilder.loadTexts: csOrionQoSMeterProfileTable.setStatus('current')
csOrionQoSMeterProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionBladeSlotLocation"), (0, "COSINE-ORION-MIB", "csOrionQoSMeterProfileName"))
if mibBuilder.loadTexts: csOrionQoSMeterProfileEntry.setStatus('current')
csOrionQoSMeterProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 1, 1, 1), DisplayString())
if mibBuilder.loadTexts: csOrionQoSMeterProfileName.setStatus('current')
csOrionQoSMeterProfileCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionQoSMeterProfileCBS.setStatus('current')
csOrionQoSMeterProfilePBS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionQoSMeterProfilePBS.setStatus('current')
csOrionQoSMeterProfileCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionQoSMeterProfileCIR.setStatus('current')
csOrionQoSMeterProfileMIR = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionQoSMeterProfileMIR.setStatus('current')
csOrionQoSMeterProfileDropPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("red", 2), ("redYellow", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionQoSMeterProfileDropPrecedence.setStatus('current')
csOrionQoSMeterProfileColorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("colorBlind", 1), ("colorAware", 2))).clone('colorBlind')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionQoSMeterProfileColorMode.setStatus('current')
csOrionQoSMeterProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionQoSMeterProfileStatus.setStatus('current')
csOrionQoSMeterTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 2), )
if mibBuilder.loadTexts: csOrionQoSMeterTable.setStatus('current')
csOrionQoSMeterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionBladeSlotLocation"), (0, "COSINE-ORION-MIB", "csOrionEngineIndex"), (0, "COSINE-ORION-MIB", "csOrionQoSMeterName"))
if mibBuilder.loadTexts: csOrionQoSMeterEntry.setStatus('current')
csOrionQoSMeterName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 2, 1, 1), DisplayString())
if mibBuilder.loadTexts: csOrionQoSMeterName.setStatus('current')
csOrionQoSMeterProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 2, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionQoSMeterProfile.setStatus('current')
csOrionQoSMeterTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionQoSMeterTotalPackets.setStatus('current')
csOrionQoSMeterRedByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionQoSMeterRedByteCount.setStatus('current')
csOrionQoSMeterYellowByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionQoSMeterYellowByteCount.setStatus('current')
csOrionQoSMeterGreenByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionQoSMeterGreenByteCount.setStatus('current')
csOrionQoSMeterAclList = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionQoSMeterAclList.setStatus('current')
csOrionQoSMeterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionQoSMeterStatus.setStatus('current')
csOrionVrQoSFilterTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 3), )
if mibBuilder.loadTexts: csOrionVrQoSFilterTable.setStatus('current')
csOrionVrQoSFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVrQoSFilterIndex"), (0, "COSINE-ORION-MIB", "csOrionVrQoSFilterAclId"))
if mibBuilder.loadTexts: csOrionVrQoSFilterEntry.setStatus('current')
csOrionVrQoSFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csOrionVrQoSFilterIndex.setStatus('current')
csOrionVrQoSFilterAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csOrionVrQoSFilterAclId.setStatus('current')
csOrionVrQoSFilterMeterName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 3, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrQoSFilterMeterName.setStatus('current')
csOrionVrQoSFilterServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ef-guaranteed", 1), ("ef", 2), ("af1", 3), ("af2", 4), ("af3", 5), ("af4", 6), ("be", 7))).clone('be')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrQoSFilterServiceCategory.setStatus('current')
csOrionVrQoSFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrQoSFilterStatus.setStatus('current')
csOrionViQoSFilterTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 4), )
if mibBuilder.loadTexts: csOrionViQoSFilterTable.setStatus('current')
csOrionViQoSFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"), (0, "COSINE-ORION-MIB", "csOrionViQoSFilterIndex"), (0, "COSINE-ORION-MIB", "csOrionViQoSFilterAclId"))
if mibBuilder.loadTexts: csOrionViQoSFilterEntry.setStatus('current')
csOrionViQoSFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csOrionViQoSFilterIndex.setStatus('current')
csOrionViQoSFilterAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csOrionViQoSFilterAclId.setStatus('current')
csOrionViQoSFilterMeterName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 4, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionViQoSFilterMeterName.setStatus('current')
csOrionViQoSFilterServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ef-guaranteed", 1), ("ef", 2), ("af1", 3), ("af2", 4), ("af3", 5), ("af4", 6), ("be", 7))).clone('be')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionViQoSFilterServiceCategory.setStatus('current')
csOrionViQoSFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionViQoSFilterStatus.setStatus('current')
csOrionMeterEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionMeterEnd.setStatus('current')
csPppoeAcConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1))
csPppoeSession = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 2))
csPppoeStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 3))
csPppoeAcIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1, 1), )
if mibBuilder.loadTexts: csPppoeAcIfConfigTable.setStatus('current')
csPppoeAcIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csPppoeAcIfSlotIndex"), (0, "COSINE-ORION-MIB", "csPppoeAcIfModuleIndex"), (0, "COSINE-ORION-MIB", "csPppoeAcIfPortIndex"), (0, "COSINE-ORION-MIB", "csPppoeAcIfChannelIndex"), (0, "COSINE-ORION-MIB", "csPppoeAcIfSubIfIndex"))
if mibBuilder.loadTexts: csPppoeAcIfConfigEntry.setStatus('current')
csPppoeAcIfSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csPppoeAcIfSlotIndex.setStatus('current')
csPppoeAcIfModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csPppoeAcIfModuleIndex.setStatus('current')
csPppoeAcIfPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csPppoeAcIfPortIndex.setStatus('current')
csPppoeAcIfChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: csPppoeAcIfChannelIndex.setStatus('current')
csPppoeAcIfSubIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: csPppoeAcIfSubIfIndex.setStatus('current')
csPppoeAcIfConfigMaxSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64000)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csPppoeAcIfConfigMaxSessions.setStatus('current')
csPppoeAcIfConfigMaxSessionsPerHost = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csPppoeAcIfConfigMaxSessionsPerHost.setStatus('current')
csPppoeAcIfConfigTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeAcIfConfigTotalSessions.setStatus('current')
csPppoeAcIfConfigTotalActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeAcIfConfigTotalActiveSessions.setStatus('current')
csPppoeAcIfConfigPortEthernetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeAcIfConfigPortEthernetAddress.setStatus('current')
csPppoeAcIfConfigVolunteerServiceAdvertising = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csPppoeAcIfConfigVolunteerServiceAdvertising.setStatus('current')
csPppoeAcIfConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csPppoeAcIfConfigName.setStatus('current')
csPppoeAcIfConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csPppoeAcIfConfigAdminStatus.setStatus('current')
csPppoeAcIfConfigOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1, 1, 1, 14), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeAcIfConfigOperStatus.setStatus('current')
csPppoeAcIfConfigServiceTemplateProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1, 1, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csPppoeAcIfConfigServiceTemplateProfile.setStatus('current')
csPppoeConfigPppIfAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("pap", 2), ("chapmd5", 3), ("mschapv1Server", 4), ("mschapv2Server", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csPppoeConfigPppIfAuth.setStatus('current')
csPppoeConfigPppIfEchoTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csPppoeConfigPppIfEchoTimeout.setStatus('current')
csPppoeAcIfConfigEvLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1, 1, 1, 18), EvLogLevel().clone('major')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csPppoeAcIfConfigEvLogLevel.setStatus('current')
csPppoeAcIfConfigEvLogArea = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1, 1, 1, 19), EvLogArea().clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csPppoeAcIfConfigEvLogArea.setStatus('current')
csPppoeAcIfConfigTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeAcIfConfigTableEnd.setStatus('current')
csPppoeSessionTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 2, 1), )
if mibBuilder.loadTexts: csPppoeSessionTable.setStatus('current')
csPppoeSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 2, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csPppoeAcIfSlotIndex"), (0, "COSINE-ORION-MIB", "csPppoeAcIfModuleIndex"), (0, "COSINE-ORION-MIB", "csPppoeAcIfPortIndex"), (0, "COSINE-ORION-MIB", "csPppoeAcIfChannelIndex"), (0, "COSINE-ORION-MIB", "csPppoeAcIfSubIfIndex"), (0, "COSINE-ORION-MIB", "csPppoeSessionId"))
if mibBuilder.loadTexts: csPppoeSessionEntry.setStatus('current')
csPppoeSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 2, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: csPppoeSessionId.setStatus('current')
csPppoeSessionUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeSessionUserName.setStatus('current')
csPppoeSessionOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 2, 1, 1, 3), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeSessionOperStatus.setStatus('current')
csPppoeSessionPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeSessionPeerAddress.setStatus('current')
csPppoeSessionServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeSessionServiceName.setStatus('current')
csPppoeSessionDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeSessionDuration.setStatus('current')
csPppoeSessionIPPoolNameInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeSessionIPPoolNameInUse.setStatus('current')
csPppoeSessionServiceVPN = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeSessionServiceVPN.setStatus('current')
csPppoeSessionServiceVR = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 2, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeSessionServiceVR.setStatus('current')
csPppoeSessionReceivedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 2, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeSessionReceivedPkts.setStatus('current')
csPppoeSessionReceivedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 2, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeSessionReceivedOctets.setStatus('current')
csPppoeSessionTranmittedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 2, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeSessionTranmittedPkts.setStatus('current')
csPppoeSessionTransmittedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 2, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeSessionTransmittedOctets.setStatus('current')
csPppoeSessionReceiveOperDown = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 2, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeSessionReceiveOperDown.setStatus('current')
csPppoeSessionTransmitOperDown = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 2, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeSessionTransmitOperDown.setStatus('current')
csPppoeSessionReceivedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 2, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeSessionReceivedErrors.setStatus('current')
csPppoeSessionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 2, 1, 1, 17), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPppoeSessionRowStatus.setStatus('current')
csPppoeSessionTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeSessionTableEnd.setStatus('current')
csPppoeAcIfStatTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 3, 1), )
if mibBuilder.loadTexts: csPppoeAcIfStatTable.setStatus('current')
csPppoeAcIfStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 3, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csPppoeAcIfSlotIndex"), (0, "COSINE-ORION-MIB", "csPppoeAcIfModuleIndex"), (0, "COSINE-ORION-MIB", "csPppoeAcIfPortIndex"), (0, "COSINE-ORION-MIB", "csPppoeAcIfChannelIndex"), (0, "COSINE-ORION-MIB", "csPppoeAcIfSubIfIndex"))
if mibBuilder.loadTexts: csPppoeAcIfStatEntry.setStatus('current')
csPppoeAcIfStatPADIReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 3, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeAcIfStatPADIReceive.setStatus('current')
csPppoeAcIfStatPADIReject = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 3, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeAcIfStatPADIReject.setStatus('current')
csPppoeAcIfStatPADRReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 3, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeAcIfStatPADRReceive.setStatus('current')
csPppoeAcIfStatPADRReject = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 3, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeAcIfStatPADRReject.setStatus('current')
csPppoeAcIfStatPADOTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 3, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeAcIfStatPADOTransmit.setStatus('current')
csPppoeAcIfStatPADSTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 3, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeAcIfStatPADSTransmit.setStatus('current')
csPppoeAcIfStatPADTReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 3, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeAcIfStatPADTReceive.setStatus('current')
csPppoeAcIfStatPADTTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 3, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeAcIfStatPADTTransmit.setStatus('current')
csPppoeAcIfStatGenericErrorReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 3, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeAcIfStatGenericErrorReceive.setStatus('current')
csPppoeAcIfStatGenericErrorTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 3, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeAcIfStatGenericErrorTransmit.setStatus('current')
csPppoeAcIfStatMalformedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 3, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeAcIfStatMalformedPkts.setStatus('current')
csPppoeAcIfStatServiceNameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 3, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeAcIfStatServiceNameErrors.setStatus('current')
csPppoeAcIfStatACSystemErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 3, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeAcIfStatACSystemErrors.setStatus('current')
csPppoeAcIfStatPppAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 3, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeAcIfStatPppAuthFails.setStatus('current')
csPppoeAcIfStatAccessVRFails = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 3, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeAcIfStatAccessVRFails.setStatus('current')
csOrionPpoeInfoEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionPpoeInfoEnd.setStatus('current')
csOrionMlpppBundleTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 1), )
if mibBuilder.loadTexts: csOrionMlpppBundleTable.setStatus('current')
csOrionMlpppBundleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionMlpppBundleSlot"), (0, "COSINE-ORION-MIB", "csOrionMlpppBundleIndex"))
if mibBuilder.loadTexts: csOrionMlpppBundleEntry.setStatus('current')
csOrionMlpppBundleSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26)))
if mibBuilder.loadTexts: csOrionMlpppBundleSlot.setStatus('current')
csOrionMlpppBundleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csOrionMlpppBundleIndex.setStatus('current')
csOrionMlpppBundleMaxLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionMlpppBundleMaxLinks.setStatus('current')
csOrionMlpppBundleQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionMlpppBundleQueueSize.setStatus('current')
csOrionMlpppBundleFragmentsPerPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionMlpppBundleFragmentsPerPacket.setStatus('current')
csOrionMlpppBundleReorderTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 10000)).clone(3000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionMlpppBundleReorderTimeout.setStatus('current')
csOrionMlpppBundleTxMRRU = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionMlpppBundleTxMRRU.setStatus('current')
csOrionMlpppBundleRxMRRU = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionMlpppBundleRxMRRU.setStatus('current')
csOrionMlpppBundleEventLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 0), ("veryLow", 1), ("low", 2), ("medium", 3), ("high", 4), ("veryHigh", 5))).clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionMlpppBundleEventLogLevel.setStatus('current')
csOrionMlpppBundleAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionMlpppBundleAdminStatus.setStatus('current')
csOrionMlpppBundleOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 1, 1, 11), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionMlpppBundleOperStatus.setStatus('current')
csOrionMlpppBundleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionMlpppBundleRowStatus.setStatus('current')
csOrionMlpppBundleActiveLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionMlpppBundleActiveLinks.setStatus('current')
csOrionMlpppBundlePacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionMlpppBundlePacketsSent.setStatus('current')
csOrionMlpppBundlePacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionMlpppBundlePacketsReceived.setStatus('current')
csOrionMlpppBundleBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionMlpppBundleBytesSent.setStatus('current')
csOrionMlpppBundleBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionMlpppBundleBytesReceived.setStatus('current')
csOrionMlpppBundleSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionMlpppBundleSiteName.setStatus('current')
csOrionMlpppLinkTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 2), )
if mibBuilder.loadTexts: csOrionMlpppLinkTable.setStatus('current')
csOrionMlpppLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionMlpppBundleSlot"), (0, "COSINE-ORION-MIB", "csOrionMlpppBundleIndex"), (0, "COSINE-ORION-MIB", "csOrionMlpppLinkSlotIndex"), (0, "COSINE-ORION-MIB", "csOrionMlpppLinkPortIndex"), (0, "COSINE-ORION-MIB", "csOrionMlpppLinkChannelIndex"), (0, "COSINE-ORION-MIB", "csOrionMlpppLinkSubIfIndex"))
if mibBuilder.loadTexts: csOrionMlpppLinkEntry.setStatus('current')
csOrionMlpppLinkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26)))
if mibBuilder.loadTexts: csOrionMlpppLinkSlotIndex.setStatus('current')
csOrionMlpppLinkPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: csOrionMlpppLinkPortIndex.setStatus('current')
csOrionMlpppLinkChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512)))
if mibBuilder.loadTexts: csOrionMlpppLinkChannelIndex.setStatus('current')
csOrionMlpppLinkSubIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512)))
if mibBuilder.loadTexts: csOrionMlpppLinkSubIfIndex.setStatus('current')
csOrionMlpppLinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionMlpppLinkRowStatus.setStatus('current')
csOrionMlpppInfoEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionMlpppInfoEnd.setStatus('current')
csOrionPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 1), )
if mibBuilder.loadTexts: csOrionPowerSupplyTable.setStatus('current')
csOrionPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionPowerSupplyIndex"))
if mibBuilder.loadTexts: csOrionPowerSupplyEntry.setStatus('current')
csOrionPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionPowerSupplyIndex.setStatus('current')
csOrionPowerSupplyInputPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("not-ok", 2))))
if mibBuilder.loadTexts: csOrionPowerSupplyInputPowerState.setStatus('current')
csOrionPowerSupplyOutputPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("not-ok", 2))))
if mibBuilder.loadTexts: csOrionPowerSupplyOutputPowerState.setStatus('current')
csOrionFanTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 2), )
if mibBuilder.loadTexts: csOrionFanTable.setStatus('current')
csOrionFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionFanTray"), (0, "COSINE-ORION-MIB", "csOrionFanIndex"))
if mibBuilder.loadTexts: csOrionFanEntry.setStatus('current')
csOrionFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFanIndex.setStatus('current')
csOrionFanState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("not-ok", 2))))
if mibBuilder.loadTexts: csOrionFanState.setStatus('current')
csOrionFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFanSpeed.setStatus('current')
csOrionPowerSupplyHWRevision = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3)))
if mibBuilder.loadTexts: csOrionPowerSupplyHWRevision.setStatus('current')
csOrionPowerSupplyFWMajorRevision = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3)))
if mibBuilder.loadTexts: csOrionPowerSupplyFWMajorRevision.setStatus('current')
csOrionPowerSupplyFWMinorRevision = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3)))
if mibBuilder.loadTexts: csOrionPowerSupplyFWMinorRevision.setStatus('current')
csOrionPowerSupplyFWRelease = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3)))
if mibBuilder.loadTexts: csOrionPowerSupplyFWRelease.setStatus('current')
csOrionPowerSupplyFWReleaseDate = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8)))
if mibBuilder.loadTexts: csOrionPowerSupplyFWReleaseDate.setStatus('current')
csOrionPowerSupplyEventTrapGeneration = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionPowerSupplyEventTrapGeneration.setStatus('current')
csOrionFanTrayControlTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 5), )
if mibBuilder.loadTexts: csOrionFanTrayControlTable.setStatus('current')
csOrionFanTrayControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 5, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionFanTray"))
if mibBuilder.loadTexts: csOrionFanTrayControlEntry.setStatus('current')
csOrionFanTray = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lowerOrFront", 1), ("upperOrRear", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFanTray.setStatus('current')
csOrionFanTrayHWRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFanTrayHWRevision.setStatus('current')
csOrionFanTrayFWMajorRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFanTrayFWMajorRevision.setStatus('current')
csOrionFanTrayFWMinorRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFanTrayFWMinorRevision.setStatus('current')
csOrionFanTrayFWRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFanTrayFWRelease.setStatus('current')
csOrionFanTrayFWReleaseDate = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFanTrayFWReleaseDate.setStatus('current')
csOrionFanTrayEventTrapGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFanTrayEventTrapGeneration.setStatus('current')
csOrionFanTempSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 4), )
if mibBuilder.loadTexts: csOrionFanTempSensorTable.setStatus('current')
csOrionFanTempSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionFanTray"), (0, "COSINE-ORION-MIB", "csOrionFanIndex"))
if mibBuilder.loadTexts: csOrionFanTempSensorEntry.setStatus('current')
csOrionFanTempSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("not-ok", 2))))
if mibBuilder.loadTexts: csOrionFanTempSensorState.setStatus('current')
csOrionFanTempSensorTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-67, 257)))
if mibBuilder.loadTexts: csOrionFanTempSensorTemperature.setStatus('current')
csOrionTempAirFlowCardTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 7, 1), )
if mibBuilder.loadTexts: csOrionTempAirFlowCardTable.setStatus('current')
csOrionTempAirFlowCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 7, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionAirFlowCardIndex"))
if mibBuilder.loadTexts: csOrionTempAirFlowCardEntry.setStatus('current')
csOrionAirFlowCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("front", 1), ("rear", 2))))
if mibBuilder.loadTexts: csOrionAirFlowCardIndex.setStatus('current')
csOrionAirFlowCardHWRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 7, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionAirFlowCardHWRevision.setStatus('current')
csOrionAirFlowCardFWMajorRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 7, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionAirFlowCardFWMajorRevision.setStatus('current')
csOrionAirFlowCardFWMinorRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 7, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionAirFlowCardFWMinorRevision.setStatus('current')
csOrionAirFlowCardFWRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 7, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionAirFlowCardFWRelease.setStatus('current')
csOrionAirFlowCardFWReleaseDate = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 7, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionAirFlowCardFWReleaseDate.setStatus('current')
csOrionAirFlowCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-67, 257))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionAirFlowCardTemperature.setStatus('current')
csOrionAirFlowCardTempState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("not-ok", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionAirFlowCardTempState.setStatus('current')
csOrionAirFlowCardEventTrapGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionAirFlowCardEventTrapGeneration.setStatus('current')
csOrionStatusPanelHWRevision = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3)))
if mibBuilder.loadTexts: csOrionStatusPanelHWRevision.setStatus('current')
csOrionStatusPanelFWMajorRevision = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3)))
if mibBuilder.loadTexts: csOrionStatusPanelFWMajorRevision.setStatus('current')
csOrionStatusPanelFWMinorRevision = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 6, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3)))
if mibBuilder.loadTexts: csOrionStatusPanelFWMinorRevision.setStatus('current')
csOrionStatusPanelFWRelease = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 6, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3)))
if mibBuilder.loadTexts: csOrionStatusPanelFWRelease.setStatus('current')
csOrionStatusPanelFWReleaseDate = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 6, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8)))
if mibBuilder.loadTexts: csOrionStatusPanelFWReleaseDate.setStatus('current')
csOrionBackplaneUtilization = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 8, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBackplaneUtilization.setStatus('current')
csOrionSnmpGenTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 1, 1), )
if mibBuilder.loadTexts: csOrionSnmpGenTable.setStatus('current')
csOrionSnmpGenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 1, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionSnmpGenEntry.setStatus('current')
csOrionSnmpGenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSnmpGenStatus.setStatus('current')
csOrionSnmpCommTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 1, 2), )
if mibBuilder.loadTexts: csOrionSnmpCommTable.setStatus('current')
csOrionSnmpCommEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 1, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionSnmpCommString"), (0, "COSINE-ORION-MIB", "csOrionSnmpCommAddr"))
if mibBuilder.loadTexts: csOrionSnmpCommEntry.setStatus('current')
csOrionSnmpCommString = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80)))
if mibBuilder.loadTexts: csOrionSnmpCommString.setStatus('current')
csOrionSnmpCommAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 1, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: csOrionSnmpCommAddr.setStatus('current')
csOrionSnmpCommPriv = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2))).clone('readOnly')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionSnmpCommPriv.setStatus('current')
csOrionSnmpCommRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 1, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionSnmpCommRowStatus.setStatus('current')
csOrionSnmpAgentErrorTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 1, 3), )
if mibBuilder.loadTexts: csOrionSnmpAgentErrorTable.setStatus('current')
csOrionSnmpAgentErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 1, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionSnmpAgentErrorNmsIpAddress"), (0, "COSINE-ORION-MIB", "csOrionSnmpAgentErrorNmsPort"), (0, "COSINE-ORION-MIB", "csOrionSnmpAgentErrorNmsRequestId"))
if mibBuilder.loadTexts: csOrionSnmpAgentErrorEntry.setStatus('current')
csOrionSnmpAgentErrorNmsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 1, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionSnmpAgentErrorNmsIpAddress.setStatus('current')
csOrionSnmpAgentErrorNmsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionSnmpAgentErrorNmsPort.setStatus('current')
csOrionSnmpAgentErrorNmsRequestId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionSnmpAgentErrorNmsRequestId.setStatus('current')
csOrionSnmpAgentErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionSnmpAgentErrorCode.setStatus('current')
csOrionSnmpAgentErrorMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionSnmpAgentErrorMsg.setStatus('current')
csOrionSnmpTrapTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 2, 1), )
if mibBuilder.loadTexts: csOrionSnmpTrapTable.setStatus('current')
csOrionSnmpTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 2, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionSnmpTrapEntry.setStatus('current')
csOrionSnmpTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSnmpTrapStatus.setStatus('current')
csOrionTrapReceiverTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 2, 2), )
if mibBuilder.loadTexts: csOrionTrapReceiverTable.setStatus('current')
csOrionTrapReceiverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 2, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionTrapReceiverComm"), (0, "COSINE-ORION-MIB", "csOrionTrapReceiverAddr"))
if mibBuilder.loadTexts: csOrionTrapReceiverEntry.setStatus('current')
csOrionTrapReceiverComm = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 2, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: csOrionTrapReceiverComm.setStatus('current')
csOrionTrapReceiverAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 2, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: csOrionTrapReceiverAddr.setStatus('current')
csOrionTrapReceiverRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 2, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionTrapReceiverRowStatus.setStatus('current')
csOrionTrapReceiverPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 2, 2, 1, 4), Integer32().clone(162)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionTrapReceiverPort.setStatus('current')
csOrionTrapReceiverTrapType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1Trap", 1), ("v2Inform", 2), ("v1TrapAndv2Inform", 3))).clone('v2Inform')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionTrapReceiverTrapType.setStatus('current')
csOrionVpnAcctTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 10, 1, 1), )
if mibBuilder.loadTexts: csOrionVpnAcctTable.setStatus('current')
csOrionVpnAcctEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 10, 1, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"))
if mibBuilder.loadTexts: csOrionVpnAcctEntry.setStatus('current')
csOrionVpnAcctCompStats = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 10, 1, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVpnAcctCompStats.setStatus('current')
csOrionVrAcctTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 10, 1, 2), )
if mibBuilder.loadTexts: csOrionVrAcctTable.setStatus('current')
csOrionVrAcctEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 10, 1, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionVrAcctEntry.setStatus('current')
csOrionVrAcctCompStats = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 10, 1, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVrAcctCompStats.setStatus('current')
csDot1dBaseBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 5), )
if mibBuilder.loadTexts: csDot1dBaseBridgeTable.setStatus('current')
csDot1dBaseBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 5, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"))
if mibBuilder.loadTexts: csDot1dBaseBridgeEntry.setStatus('current')
csDot1dBaseBridgeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 5, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDot1dBaseBridgeAddress.setStatus('current')
csDot1dBaseNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDot1dBaseNumPorts.setStatus('current')
csDot1dTpLearnedEntryDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDot1dTpLearnedEntryDiscards.setStatus('current')
csDot1dTpAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDot1dTpAgingTime.setStatus('current')
csDot1dBaseBridgeEntryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csDot1dBaseBridgeEntryRowStatus.setStatus('current')
csDot1dTpFdbTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 6), )
if mibBuilder.loadTexts: csDot1dTpFdbTable.setStatus('current')
csDot1dTpFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 6, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"))
if mibBuilder.loadTexts: csDot1dTpFdbEntry.setStatus('current')
csDot1dTpFdbAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 6, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDot1dTpFdbAddress.setStatus('current')
csDot1dTpFdbPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDot1dTpFdbPort.setStatus('current')
csDot1dTpFdbSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDot1dTpFdbSubPort.setStatus('current')
csDot1dTpFdbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("learned", 3), ("self", 4), ("mgmt", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDot1dTpFdbStatus.setStatus('current')
csDot1dPortTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 7), )
if mibBuilder.loadTexts: csDot1dPortTable.setStatus('current')
csDot1dPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 7, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"), (0, "COSINE-ORION-MIB", "csDot1dPortIndex"))
if mibBuilder.loadTexts: csDot1dPortEntry.setStatus('current')
csDot1dPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csDot1dPortIndex.setStatus('current')
csDot1dPortRemoteEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csDot1dPortRemoteEnd.setStatus('current')
csDot1dPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("li", 1), ("pw", 2), ("tls", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csDot1dPortType.setStatus('current')
csDot1dPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDot1dPortStatus.setStatus('current')
csDot1dPortEntryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 7, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csDot1dPortEntryRowStatus.setStatus('current')
csOrionRadiusAcctFlush = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 10, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("flush", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionRadiusAcctFlush.setStatus('current')
csOrionRadiusAcctTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 10, 2, 2), )
if mibBuilder.loadTexts: csOrionRadiusAcctTable.setStatus('current')
csOrionRadiusAcctEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 10, 2, 2, 3), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionRadiusAcctIndex"))
if mibBuilder.loadTexts: csOrionRadiusAcctEntry.setStatus('current')
csOrionRadiusAcctIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 10, 2, 2, 3, 1), Integer32())
if mibBuilder.loadTexts: csOrionRadiusAcctIndex.setStatus('current')
csOrionRadiusAcctTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 10, 2, 2, 3, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionRadiusAcctTimestamp.setStatus('current')
csOrionRadiusAcctVpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 10, 2, 2, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionRadiusAcctVpnId.setStatus('current')
csOrionRadiusAcctVrId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 10, 2, 2, 3, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionRadiusAcctVrId.setStatus('current')
csOrionRadiusAcctInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 10, 2, 2, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionRadiusAcctInfo.setStatus('current')
csTelnetSvrConfTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 11, 1), )
if mibBuilder.loadTexts: csTelnetSvrConfTable.setStatus('current')
csTelnetSvrConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 11, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csTelnetSvrConfEntry.setStatus('current')
csTelnetSvrConfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csTelnetSvrConfAdminStatus.setStatus('current')
csTelnetSvrConfTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csTelnetSvrConfTimeout.setStatus('current')
csTelnetSvrConfNumOfSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csTelnetSvrConfNumOfSessions.setStatus('current')
csTelnetConnTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 11, 2), )
if mibBuilder.loadTexts: csTelnetConnTable.setStatus('current')
csTelnetConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 11, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csTelnetConnId"))
if mibBuilder.loadTexts: csTelnetConnEntry.setStatus('current')
csTelnetConnId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: csTelnetConnId.setStatus('current')
csTelnetConnIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 11, 2, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csTelnetConnIpAddr.setStatus('current')
csTelnetConnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 11, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csTelnetConnPort.setStatus('current')
csTelnetConnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 11, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csTelnetConnRowStatus.setStatus('current')
csOrionSyslogdTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 12, 1), )
if mibBuilder.loadTexts: csOrionSyslogdTable.setStatus('current')
csOrionSyslogdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 12, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionSyslogdEntry.setStatus('current')
csOrionSyslogdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSyslogdStatus.setStatus('current')
csOrionSyslogdReceiverAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 12, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSyslogdReceiverAddr.setStatus('current')
csOrionSyslogdFacility1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSyslogdFacility1.setStatus('current')
csOrionSyslogdFacility2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSyslogdFacility2.setStatus('current')
csOrionSyslogdFacility3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSyslogdFacility3.setStatus('current')
csOrionSyslogdFacility4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 12, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSyslogdFacility4.setStatus('current')
csOrionSyslogdFacility5 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 12, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSyslogdFacility5.setStatus('current')
csOrionSyslogdFacility6 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 12, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSyslogdFacility6.setStatus('current')
csOrionSyslogdFacility7 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 12, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSyslogdFacility7.setStatus('current')
csOrionSyslogdFacility8 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 12, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSyslogdFacility8.setStatus('current')
csOrionSyslogdLevel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 12, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSyslogdLevel1.setStatus('current')
csOrionSyslogdLevel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 12, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSyslogdLevel2.setStatus('current')
csOrionSyslogdLevel3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 12, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSyslogdLevel3.setStatus('current')
csOrionSyslogdLevel4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 12, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSyslogdLevel4.setStatus('current')
csOrionSyslogdLevel5 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 12, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSyslogdLevel5.setStatus('current')
csOrionSyslogdFacility9 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 12, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSyslogdFacility9.setStatus('current')
csOrionSyslogdFacility10 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 12, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSyslogdFacility10.setStatus('current')
csOrionSyslogdFacility11 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 12, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSyslogdFacility11.setStatus('current')
csOrionSyslogdFacility12 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 12, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSyslogdFacility12.setStatus('current')
csOrionFanEvent = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("speedRisingAboveLowerCriticalThreshold", 1), ("speedFallingBelowLowerCriticalThreshold", 2), ("speedRisingAboveUpperCriticalThreshold", 3), ("speedFallingBelowUpperCriticalThreshold", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csOrionFanEvent.setStatus('current')
csOrionTemperatureEvent = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 13, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("tempRisingAboveUpperCriticalThreshold", 1), ("tempFallingBelowUpperCriticalThreshold", 2), ("tempRisingAboveUpperNonRecoverableThreshold", 3), ("tempFallingBelowUpperNonRecoverableThreshold", 4), ("tempExceedsMaxValue", 5), ("tempEnteringNormalRange", 6)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csOrionTemperatureEvent.setStatus('current')
csOrionPowerSupplyEvent = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 13, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("supplyModuleInserted", 1), ("supplyModuleRemoved", 2), ("inputVoltageRisingAboveLowerCriticalThreshold", 3), ("inputVoltageFallingBelowLowerCriticalThreshold", 4), ("outputVoltageRisingAboveLowerCriticalThreshold", 5), ("outputVoltageFallingBelowLowerCriticalThreshold", 6), ("outputCurrentRisingAboveUpperCriticalThreshold", 7), ("outputCurrentFallingBelowUpperCriticalThreshold", 8), ("auxVoltageRisingAboveLowerCriticalThreshold", 9), ("auxVoltageFallingBelowLowerCriticalThreshold", 10), ("temperatureExceedsMaxValue", 11), ("temperatureEnteringNormalRange", 12), ("currentShareRisingAboveLowerCriticalThreshold", 13), ("currentShareFallingBelowLowerCriticalThreshold", 14)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csOrionPowerSupplyEvent.setStatus('current')
csOrionFanSpeedThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 13, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csOrionFanSpeedThreshold.setStatus('current')
csOrionTemperatureSensorIndex = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 13, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csOrionTemperatureSensorIndex.setStatus('current')
csOrionTemperature = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 13, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csOrionTemperature.setStatus('current')
csOrionTemperatureThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 13, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csOrionTemperatureThreshold.setStatus('current')
csOrionPacketRingPrimToProtCurrentEndpointSlot = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 13, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csOrionPacketRingPrimToProtCurrentEndpointSlot.setStatus('current')
csOrionPacketRingPrimToProtPreviousEndpointSlot = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 13, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csOrionPacketRingPrimToProtPreviousEndpointSlot.setStatus('current')
csOrionPacketRingProtToPrimCurrentEndpointSlot = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 13, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csOrionPacketRingProtToPrimCurrentEndpointSlot.setStatus('current')
csOrionPacketRingProtToPrimPreviousEndpointSlot = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 13, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csOrionPacketRingProtToPrimPreviousEndpointSlot.setStatus('current')
csOrionTempAirFlowCard = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 13, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("front", 1), ("rear", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csOrionTempAirFlowCard.setStatus('current')
csOrionI2CDeviceId = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 13, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("statusPanel", 1), ("fanTray3500", 2), ("frontFanTray9500", 3), ("rearFanTray9500", 4), ("tempAirFlowCard3500", 5), ("frontTempAirFlowCard9500", 6), ("rearTempAirFlowCard9500", 7), ("powerSupplyMonitor", 8)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csOrionI2CDeviceId.setStatus('current')
csOrionI2CDevicePresent = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 13, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("devicePresent", 1), ("deviceNotPresent", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csOrionI2CDevicePresent.setStatus('current')
csOrionPowerSupplyMonitorEvent = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 13, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("redundancyRegained", 1), ("redundancyLost", 2), ("auxVoltageRisingAboveLowerCriticalThreshold", 3), ("auxVoltageFallingBelowLowerCriticalThreshold", 4), ("outputVoltageRisingAboveLowerCriticalThreshold", 5), ("outputVoltageFallingBelowLowerCriticalThreshold", 6)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csOrionPowerSupplyMonitorEvent.setStatus('current')
csOrionTrapPowerSupplyIndex = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 13, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csOrionTrapPowerSupplyIndex.setStatus('current')
cbrFileType = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 13, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bootcfg", 1), ("config", 2), ("password", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cbrFileType.setStatus('current')
cbrFileName = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 13, 18), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cbrFileName.setStatus('current')
cbrFileErrorType = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 13, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-6, -5, -4, -3, -2, -1, 1, 2, 3))).clone(namedValues=NamedValues(("cantOpenConfig", -6), ("cantSaveConfig", -5), ("cantChangeDirConfig", -4), ("cantWritePassword", -3), ("cantOpenPassword", -2), ("cantChangeDirPassword", -1), ("savedBootcfg", 1), ("savedConfig", 2), ("savedPassword", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cbrFileErrorType.setStatus('current')
cbrFileErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 13, 20), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cbrFileErrorCode.setStatus('current')
csOrionBgpMaxPfxLimitEvent = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 13, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("maxPrefixLimitReached", 1), ("exceedsMaxPrefix", 2), ("exceedsMaxPrefixLimit", 3), ("exceedsMaxPrefixLimitDiscardRoutes", 4), ("maxPrefixLimitThresholdReached", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csOrionBgpMaxPfxLimitEvent.setStatus('current')
csOrionStatusPanelPortTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 14, 1), )
if mibBuilder.loadTexts: csOrionStatusPanelPortTable.setStatus('current')
csOrionStatusPanelPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 14, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionStatusPanelPortIndex"))
if mibBuilder.loadTexts: csOrionStatusPanelPortEntry.setStatus('current')
csOrionStatusPanelPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: csOrionStatusPanelPortIndex.setStatus('current')
csOrionStatusPanelPortBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 14, 1, 1, 2), SPPBaudRate().clone('baud9600')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionStatusPanelPortBaudRate.setStatus('current')
csOrionStatusPanelPortLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 14, 1, 1, 3), SPPLoopbackStatus().clone('noLoop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionStatusPanelPortLoopback.setStatus('current')
csOrionStatusPanelPortModemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 14, 1, 1, 4), SPPModemStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionStatusPanelPortModemStatus.setStatus('current')
csOrionStatusPanelPortRedundantStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 14, 1, 1, 5), SPPRedundantStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionStatusPanelPortRedundantStatus.setStatus('current')
csOrionEventsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1))
csOrionBladeRemoved = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 1)).setObjects(("COSINE-ORION-MIB", "csOrionBladeSlotLocation"))
if mibBuilder.loadTexts: csOrionBladeRemoved.setStatus('current')
csOrionBladeInserted = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 2)).setObjects(("COSINE-ORION-MIB", "csOrionBladeSlotLocation"), ("COSINE-ORION-MIB", "csOrionBladeDescr"))
if mibBuilder.loadTexts: csOrionBladeInserted.setStatus('current')
csOrionBladeStateChange = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 3)).setObjects(("COSINE-ORION-MIB", "csOrionBladeSlotLocation"), ("COSINE-ORION-MIB", "csOrionBladeDescr"), ("COSINE-ORION-MIB", "csOrionBladeState"))
if mibBuilder.loadTexts: csOrionBladeStateChange.setStatus('current')
csOrionFanStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 4)).setObjects(("COSINE-ORION-MIB", "csOrionFanTray"), ("COSINE-ORION-MIB", "csOrionFanIndex"), ("COSINE-ORION-MIB", "csOrionFanEvent"), ("COSINE-ORION-MIB", "csOrionFanSpeed"), ("COSINE-ORION-MIB", "csOrionFanSpeedThreshold"))
if mibBuilder.loadTexts: csOrionFanStatusChange.setStatus('current')
csOrionConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 5)).setObjects(("COSINE-ORION-MIB", "csOrionChangeSourceUserName"), ("COSINE-ORION-MIB", "csOrionChangeTableOID"), ("COSINE-ORION-MIB", "csOrionChangeSource"), ("COSINE-ORION-MIB", "csOrionConfigChangeType"), ("COSINE-ORION-MIB", "csOrionNumConfigChanges"))
if mibBuilder.loadTexts: csOrionConfigChange.setStatus('current')
csOrionTempStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 6)).setObjects(("COSINE-ORION-MIB", "csOrionFanTray"), ("COSINE-ORION-MIB", "csOrionTemperatureSensorIndex"), ("COSINE-ORION-MIB", "csOrionTemperatureEvent"), ("COSINE-ORION-MIB", "csOrionTemperature"), ("COSINE-ORION-MIB", "csOrionTemperatureThreshold"))
if mibBuilder.loadTexts: csOrionTempStatusChange.setStatus('current')
csOrionPowerSupplyStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 7)).setObjects(("COSINE-ORION-MIB", "csOrionPowerSupplyIndex"), ("COSINE-ORION-MIB", "csOrionPowerSupplyEvent"))
if mibBuilder.loadTexts: csOrionPowerSupplyStatusChange.setStatus('current')
csOrionLogLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 8)).setObjects(("COSINE-ORION-MIB", "csOrionLogLinkSlotIndex"), ("COSINE-ORION-MIB", "csOrionLogLinkModuleIndex"), ("COSINE-ORION-MIB", "csOrionLogLinkPortIndex"), ("COSINE-ORION-MIB", "csOrionLogLinkChannelIndex"), ("COSINE-ORION-MIB", "csOrionLogLinkSubIfIndex"))
if mibBuilder.loadTexts: csOrionLogLinkDown.setStatus('current')
csOrionLogLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 9)).setObjects(("COSINE-ORION-MIB", "csOrionLogLinkSlotIndex"), ("COSINE-ORION-MIB", "csOrionLogLinkModuleIndex"), ("COSINE-ORION-MIB", "csOrionLogLinkPortIndex"), ("COSINE-ORION-MIB", "csOrionLogLinkChannelIndex"), ("COSINE-ORION-MIB", "csOrionLogLinkSubIfIndex"))
if mibBuilder.loadTexts: csOrionLogLinkUp.setStatus('current')
csOrionVIfDown = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 10)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), ("COSINE-ORION-MIB", "csOrionVIfIndex"), ("COSINE-ORION-MIB", "csOrionVIfRowStatus"), ("COSINE-ORION-MIB", "csOrionVIfOperStatus"))
if mibBuilder.loadTexts: csOrionVIfDown.setStatus('current')
csOrionVIfUp = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 11)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), ("COSINE-ORION-MIB", "csOrionVIfIndex"), ("COSINE-ORION-MIB", "csOrionVIfRowStatus"), ("COSINE-ORION-MIB", "csOrionVIfOperStatus"))
if mibBuilder.loadTexts: csOrionVIfUp.setStatus('current')
csOrionOspfIfStateChange = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 12)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), ("COSINE-ORION-MIB", "csOspfRouterId"), ("COSINE-ORION-MIB", "csOspfIfIpAddress"), ("COSINE-ORION-MIB", "csOspfAddressLessIf"), ("COSINE-ORION-MIB", "csOspfIfState"))
if mibBuilder.loadTexts: csOrionOspfIfStateChange.setStatus('current')
csOrionOspfVirtIfStateChange = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 13)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), ("COSINE-ORION-MIB", "csOspfRouterId"), ("COSINE-ORION-MIB", "csOspfVirtIfAreaId"), ("COSINE-ORION-MIB", "csOspfVirtIfNeighbor"), ("COSINE-ORION-MIB", "csOspfVirtIfState"))
if mibBuilder.loadTexts: csOrionOspfVirtIfStateChange.setStatus('current')
csOrionOspfNbrStateChange = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 14)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), ("COSINE-ORION-MIB", "csOspfRouterId"), ("COSINE-ORION-MIB", "csOspfNbrIpAddr"), ("COSINE-ORION-MIB", "csOspfNbrAddressLessIndex"), ("COSINE-ORION-MIB", "csOspfNbrRtrId"), ("COSINE-ORION-MIB", "csOspfNbrState"))
if mibBuilder.loadTexts: csOrionOspfNbrStateChange.setStatus('current')
csOrionOspfVirtNbrStateChange = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 15)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), ("COSINE-ORION-MIB", "csOspfRouterId"), ("COSINE-ORION-MIB", "csOspfVirtNbrArea"), ("COSINE-ORION-MIB", "csOspfVirtNbrRtrId"), ("COSINE-ORION-MIB", "csOspfVirtNbrState"))
if mibBuilder.loadTexts: csOrionOspfVirtNbrStateChange.setStatus('current')
csOrionOspfIfConfigError = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 16)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), ("COSINE-ORION-MIB", "csOspfRouterId"), ("COSINE-ORION-MIB", "csOspfIfIpAddress"), ("COSINE-ORION-MIB", "csOspfAddressLessIf"), ("COSINE-ORION-MIB", "csOspfPacketSrc"), ("COSINE-ORION-MIB", "csOspfConfigErrorType"), ("COSINE-ORION-MIB", "csOspfPacketType"))
if mibBuilder.loadTexts: csOrionOspfIfConfigError.setStatus('current')
csOrionOspfVirtIfConfigError = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 17)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), ("COSINE-ORION-MIB", "csOspfRouterId"), ("COSINE-ORION-MIB", "csOspfVirtIfAreaId"), ("COSINE-ORION-MIB", "csOspfVirtIfNeighbor"), ("COSINE-ORION-MIB", "csOspfConfigErrorType"), ("COSINE-ORION-MIB", "csOspfPacketType"))
if mibBuilder.loadTexts: csOrionOspfVirtIfConfigError.setStatus('current')
csOrionOspfIfAuthFailure = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 18)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), ("COSINE-ORION-MIB", "csOspfRouterId"), ("COSINE-ORION-MIB", "csOspfIfIpAddress"), ("COSINE-ORION-MIB", "csOspfAddressLessIf"), ("COSINE-ORION-MIB", "csOspfPacketSrc"), ("COSINE-ORION-MIB", "csOspfConfigErrorType"), ("COSINE-ORION-MIB", "csOspfPacketType"))
if mibBuilder.loadTexts: csOrionOspfIfAuthFailure.setStatus('current')
csOrionOspfVirtIfAuthFailure = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 19)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), ("COSINE-ORION-MIB", "csOspfRouterId"), ("COSINE-ORION-MIB", "csOspfVirtIfAreaId"), ("COSINE-ORION-MIB", "csOspfVirtIfNeighbor"), ("COSINE-ORION-MIB", "csOspfConfigErrorType"), ("COSINE-ORION-MIB", "csOspfPacketType"))
if mibBuilder.loadTexts: csOrionOspfVirtIfAuthFailure.setStatus('current')
csOrionOspfIfRxBadPacket = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 20)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), ("COSINE-ORION-MIB", "csOspfRouterId"), ("COSINE-ORION-MIB", "csOspfIfIpAddress"), ("COSINE-ORION-MIB", "csOspfAddressLessIf"), ("COSINE-ORION-MIB", "csOspfPacketSrc"), ("COSINE-ORION-MIB", "csOspfPacketType"))
if mibBuilder.loadTexts: csOrionOspfIfRxBadPacket.setStatus('current')
csOrionOspfVirtIfRxBadPacket = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 21)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), ("COSINE-ORION-MIB", "csOspfRouterId"), ("COSINE-ORION-MIB", "csOspfVirtIfAreaId"), ("COSINE-ORION-MIB", "csOspfVirtIfNeighbor"), ("COSINE-ORION-MIB", "csOspfPacketType"))
if mibBuilder.loadTexts: csOrionOspfVirtIfRxBadPacket.setStatus('current')
csOrionOspfTxRetransmit = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 22)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), ("COSINE-ORION-MIB", "csOspfRouterId"), ("COSINE-ORION-MIB", "csOspfIfIpAddress"), ("COSINE-ORION-MIB", "csOspfAddressLessIf"), ("COSINE-ORION-MIB", "csOspfNbrRtrId"), ("COSINE-ORION-MIB", "csOspfPacketType"), ("COSINE-ORION-MIB", "csOspfLsdbType"), ("COSINE-ORION-MIB", "csOspfLsdbLsid"), ("COSINE-ORION-MIB", "csOspfLsdbRouterId"))
if mibBuilder.loadTexts: csOrionOspfTxRetransmit.setStatus('current')
csOrionOspfVirtIfTxRetransmit = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 23)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), ("COSINE-ORION-MIB", "csOspfRouterId"), ("COSINE-ORION-MIB", "csOspfVirtIfAreaId"), ("COSINE-ORION-MIB", "csOspfVirtIfNeighbor"), ("COSINE-ORION-MIB", "csOspfPacketType"), ("COSINE-ORION-MIB", "csOspfLsdbType"), ("COSINE-ORION-MIB", "csOspfLsdbLsid"), ("COSINE-ORION-MIB", "csOspfLsdbRouterId"))
if mibBuilder.loadTexts: csOrionOspfVirtIfTxRetransmit.setStatus('current')
csOrionOspfOriginateLsa = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 24)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), ("COSINE-ORION-MIB", "csOspfRouterId"), ("COSINE-ORION-MIB", "csOspfLsdbAreaId"), ("COSINE-ORION-MIB", "csOspfLsdbType"), ("COSINE-ORION-MIB", "csOspfLsdbLsid"), ("COSINE-ORION-MIB", "csOspfLsdbRouterId"))
if mibBuilder.loadTexts: csOrionOspfOriginateLsa.setStatus('current')
csOrionOspfMaxAgeLsa = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 25)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), ("COSINE-ORION-MIB", "csOspfRouterId"), ("COSINE-ORION-MIB", "csOspfLsdbAreaId"), ("COSINE-ORION-MIB", "csOspfLsdbType"), ("COSINE-ORION-MIB", "csOspfLsdbLsid"), ("COSINE-ORION-MIB", "csOspfLsdbRouterId"))
if mibBuilder.loadTexts: csOrionOspfMaxAgeLsa.setStatus('current')
csOrionOspfLsdbOverflow = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 26)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), ("COSINE-ORION-MIB", "csOspfRouterId"), ("COSINE-ORION-MIB", "csOspfExtLsdbLimit"))
if mibBuilder.loadTexts: csOrionOspfLsdbOverflow.setStatus('current')
csOrionOspfLsdbApproachingOverflow = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 27)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), ("COSINE-ORION-MIB", "csOspfRouterId"), ("COSINE-ORION-MIB", "csOspfExtLsdbLimit"))
if mibBuilder.loadTexts: csOrionOspfLsdbApproachingOverflow.setStatus('current')
csOrionCustomerVrUp = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 28)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionCustomerVrUp.setStatus('current')
csOrionCustomerVrDown = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 29)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionCustomerVrDown.setStatus('current')
csOrionServiceProviderVrUp = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 30)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionServiceProviderVrUp.setStatus('current')
csOrionServiceProviderVrDown = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 31)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionServiceProviderVrDown.setStatus('current')
csOrionControlVrUp = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 32)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionControlVrUp.setStatus('current')
csOrionControlVrDown = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 33)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionControlVrDown.setStatus('current')
csOrionServiceProviderVIfUp = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 34)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), ("COSINE-ORION-MIB", "csOrionVIfIndex"))
if mibBuilder.loadTexts: csOrionServiceProviderVIfUp.setStatus('current')
csOrionServiceProviderVIfDown = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 35)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), ("COSINE-ORION-MIB", "csOrionVIfIndex"))
if mibBuilder.loadTexts: csOrionServiceProviderVIfDown.setStatus('current')
csOrionLossOfSignal = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 36)).setObjects(("COSINE-ORION-MIB", "csOrionBladeSlotLocation"), ("COSINE-ORION-MIB", "csOrionModuleIndex"), ("COSINE-ORION-MIB", "csOrionPortIndex"), ("COSINE-ORION-MIB", "csOrionBladeType"))
if mibBuilder.loadTexts: csOrionLossOfSignal.setStatus('current')
csOrionLossOfFrame = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 37)).setObjects(("COSINE-ORION-MIB", "csOrionBladeSlotLocation"), ("COSINE-ORION-MIB", "csOrionModuleIndex"), ("COSINE-ORION-MIB", "csOrionPortIndex"), ("COSINE-ORION-MIB", "csOrionBladeType"))
if mibBuilder.loadTexts: csOrionLossOfFrame.setStatus('current')
csOrionDs3AlarmIndication = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 38)).setObjects(("COSINE-ORION-MIB", "csOrionBladeSlotLocation"), ("COSINE-ORION-MIB", "csOrionModuleIndex"), ("COSINE-ORION-MIB", "csOrionPortIndex"), ("COSINE-ORION-MIB", "csOrionBladeType"))
if mibBuilder.loadTexts: csOrionDs3AlarmIndication.setStatus('current')
csOrionLossOfClock = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 39)).setObjects(("COSINE-ORION-MIB", "csOrionBladeSlotLocation"), ("COSINE-ORION-MIB", "csOrionModuleIndex"), ("COSINE-ORION-MIB", "csOrionPortIndex"), ("COSINE-ORION-MIB", "csOrionBladeType"))
if mibBuilder.loadTexts: csOrionLossOfClock.setStatus('current')
csOrionBladeRestore = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 40)).setObjects(("COSINE-ORION-MIB", "csOrionRestoreBladeStatus"), ("COSINE-ORION-MIB", "csOrionRestoreSlotIndex"), ("COSINE-ORION-MIB", "csOrionRestoreNumVRs"))
if mibBuilder.loadTexts: csOrionBladeRestore.setStatus('current')
csOrionDs3PortIdle = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 41)).setObjects(("COSINE-ORION-MIB", "csOrionBladeSlotLocation"), ("COSINE-ORION-MIB", "csOrionModuleIndex"), ("COSINE-ORION-MIB", "csOrionPortIndex"), ("COSINE-ORION-MIB", "csOrionBladeType"))
if mibBuilder.loadTexts: csOrionDs3PortIdle.setStatus('current')
csOrionAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 42)).setObjects(("COSINE-ORION-MIB", "csOrionBladeSlotLocation"), ("COSINE-ORION-MIB", "csOrionModuleIndex"), ("COSINE-ORION-MIB", "csOrionPortIndex"), ("COSINE-ORION-MIB", "csOrionBladeType"), ("COSINE-ORION-MIB", "csOrionAlarmType"))
if mibBuilder.loadTexts: csOrionAlarmClear.setStatus('current')
csOrionOc3Alarm = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 43)).setObjects(("COSINE-ORION-MIB", "csOrionBladeSlotLocation"), ("COSINE-ORION-MIB", "csOrionModuleIndex"), ("COSINE-ORION-MIB", "csOrionPortIndex"), ("COSINE-ORION-MIB", "csOrionOc3AlarmType"), ("COSINE-ORION-MIB", "csOrionAlarmAffectType"), ("COSINE-ORION-MIB", "csOrionAlarmSeverityType"))
if mibBuilder.loadTexts: csOrionOc3Alarm.setStatus('current')
csOrionOc3AlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 44)).setObjects(("COSINE-ORION-MIB", "csOrionBladeSlotLocation"), ("COSINE-ORION-MIB", "csOrionModuleIndex"), ("COSINE-ORION-MIB", "csOrionPortIndex"), ("COSINE-ORION-MIB", "csOrionOc3AlarmType"), ("COSINE-ORION-MIB", "csOrionAlarmAffectType"), ("COSINE-ORION-MIB", "csOrionAlarmSeverityType"))
if mibBuilder.loadTexts: csOrionOc3AlarmClear.setStatus('current')
csOrionPacketRingStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 45)).setObjects(("COSINE-ORION-MIB", "csOrionPacketRingPrimToProtCurrentEndpointSlot"), ("COSINE-ORION-MIB", "csOrionPacketRingPrimToProtPreviousEndpointSlot"), ("COSINE-ORION-MIB", "csOrionPacketRingProtToPrimCurrentEndpointSlot"), ("COSINE-ORION-MIB", "csOrionPacketRingProtToPrimPreviousEndpointSlot"))
if mibBuilder.loadTexts: csOrionPacketRingStatusChange.setStatus('current')
csOrionInletAirTempStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 46)).setObjects(("COSINE-ORION-MIB", "csOrionTempAirFlowCard"), ("COSINE-ORION-MIB", "csOrionTemperatureSensorIndex"), ("COSINE-ORION-MIB", "csOrionTemperatureEvent"), ("COSINE-ORION-MIB", "csOrionTemperature"), ("COSINE-ORION-MIB", "csOrionTemperatureThreshold"))
if mibBuilder.loadTexts: csOrionInletAirTempStatusChange.setStatus('current')
csOrionDevicePresent = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 47)).setObjects(("COSINE-ORION-MIB", "csOrionI2CDeviceId"), ("COSINE-ORION-MIB", "csOrionI2CDevicePresent"))
if mibBuilder.loadTexts: csOrionDevicePresent.setStatus('current')
csOrionPowerSupplyMonitorStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 48)).setObjects(("COSINE-ORION-MIB", "csOrionPowerSupplyMonitorEvent"))
if mibBuilder.loadTexts: csOrionPowerSupplyMonitorStatusChange.setStatus('current')
csOrionFarEndReceiveFailure = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 49)).setObjects(("COSINE-ORION-MIB", "csOrionPortIndex"), ("COSINE-ORION-MIB", "csOrionBladeType"))
if mibBuilder.loadTexts: csOrionFarEndReceiveFailure.setStatus('current')
csOrionCBRFileError = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 50)).setObjects(("COSINE-ORION-MIB", "cbrFileType"), ("COSINE-ORION-MIB", "cbrFileName"), ("COSINE-ORION-MIB", "cbrFileErrorType"), ("COSINE-ORION-MIB", "cbrFileErrorCode"))
if mibBuilder.loadTexts: csOrionCBRFileError.setStatus('current')
csOrionBgpMaxPfxLimit = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 51)).setObjects(("COSINE-ORION-MIB", "csBgpGenMaxPfx"), ("COSINE-ORION-MIB", "csOrionAlarmAffectType"), ("COSINE-ORION-MIB", "csOrionAlarmSeverityType"), ("COSINE-ORION-MIB", "csOrionBgpMaxPfxLimitEvent"))
if mibBuilder.loadTexts: csOrionBgpMaxPfxLimit.setStatus('current')
csOrionBgpNbrMaxPfxLimit = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 52)).setObjects(("COSINE-ORION-MIB", "csBgpNbrRemoteAS"), ("COSINE-ORION-MIB", "csBgpNbrMaxPfx"), ("COSINE-ORION-MIB", "csOrionAlarmAffectType"), ("COSINE-ORION-MIB", "csOrionAlarmSeverityType"), ("COSINE-ORION-MIB", "csOrionBgpMaxPfxLimitEvent"))
if mibBuilder.loadTexts: csOrionBgpNbrMaxPfxLimit.setStatus('current')
mibBuilder.exportSymbols("COSINE-ORION-MIB", csOrionL2tpTunnelEmptyTunnelTimeout=csOrionL2tpTunnelEmptyTunnelTimeout, csOrionIpSecEventLogTable=csOrionIpSecEventLogTable, csPppoeAcIfSlotIndex=csPppoeAcIfSlotIndex, csOrionVrRadiusSvrAddress=csOrionVrRadiusSvrAddress, csMplsInterfaceRowStatus=csMplsInterfaceRowStatus, csOrionPptpConfEncryption=csOrionPptpConfEncryption, csOrionFwSmtpRelayRowStatus=csOrionFwSmtpRelayRowStatus, csAtmConnIpAddressTableEnd=csAtmConnIpAddressTableEnd, csOc3AtmIntervalNumber=csOc3AtmIntervalNumber, csOrionViPktFilterRowStatus=csOrionViPktFilterRowStatus, csMplsInterfaceAttribFlags=csMplsInterfaceAttribFlags, csOrionPowerSupplyFWReleaseDate=csOrionPowerSupplyFWReleaseDate, csOrionPppRemoteUserName=csOrionPppRemoteUserName, csOrionIKECryptoMapStatus=csOrionIKECryptoMapStatus, csOrionFwHttpConfigEnd=csOrionFwHttpConfigEnd, csDot1dTpFdbEntry=csDot1dTpFdbEntry, csOc3LineDaySESs=csOc3LineDaySESs, InterfaceIndex=InterfaceIndex, csOrionVrDhcpRelayOperStatus=csOrionVrDhcpRelayOperStatus, csOrionVPNVRouterIpAdEntIfIndex=csOrionVPNVRouterIpAdEntIfIndex, csOrionIpSecStatsRcvAhPktsBadAh=csOrionIpSecStatsRcvAhPktsBadAh, csIsisCircL1ISPriority=csIsisCircL1ISPriority, csOc3LineDayTable=csOc3LineDayTable, csOspfStubTOS=csOspfStubTOS, csIgmpInterfaceAdminStatus=csIgmpInterfaceAdminStatus, csOrionQueueTable=csOrionQueueTable, csOrionIKEDialupConnTable=csOrionIKEDialupConnTable, csOrionSystemLoginDomainDesc=csOrionSystemLoginDomainDesc, csIsisISAdjIPAddress=csIsisISAdjIPAddress, csOc3PathDayTable=csOc3PathDayTable, csOrionFwLnotesPolicyRowStatus=csOrionFwLnotesPolicyRowStatus, csOrionViPktFilterEntry=csOrionViPktFilterEntry, csMplsInterfaceLabelRange=csMplsInterfaceLabelRange, csRtPolicyTermFromBgpOrigin=csRtPolicyTermFromBgpOrigin, csRtPolicyTermFromOspfMetricType=csRtPolicyTermFromOspfMetricType, csOrionMlpppBundleSlot=csOrionMlpppBundleSlot, csDot1dTpAgingTime=csDot1dTpAgingTime, csOspfVirtIfState=csOspfVirtIfState, csOrionVPNVRouterEntry=csOrionVPNVRouterEntry, csPwVcCustomerId=csPwVcCustomerId, csVpnVrfRouteTargetType=csVpnVrfRouteTargetType, csOspfAreaAggregateEntry=csOspfAreaAggregateEntry, csDs3ConfigSendCode=csDs3ConfigSendCode, csOrionL2tpConfigTable=csOrionL2tpConfigTable, csOrionEngineMemoryBytesAllocs=csOrionEngineMemoryBytesAllocs, csOrionManualCryptoMapInboundESPKey=csOrionManualCryptoMapInboundESPKey, csEthStatsRx512To1023Pkts=csEthStatsRx512To1023Pkts, csOc3AtmCurrentRecievedCells=csOc3AtmCurrentRecievedCells, csOrionVPNVRouterTcpEstabResets=csOrionVPNVRouterTcpEstabResets, csOrionSystemLoginUserTable=csOrionSystemLoginUserTable, csRtPolicyPrefixListTableEnd=csRtPolicyPrefixListTableEnd, csOspfAdminStat=csOspfAdminStat, csEthPortIndex=csEthPortIndex, csOrionMlpppBundleActiveLinks=csOrionMlpppBundleActiveLinks, csOrionVrIfManagerChannelIndex=csOrionVrIfManagerChannelIndex, csAtmInterfaceConfRespondedOAMLoopBackRequests=csAtmInterfaceConfRespondedOAMLoopBackRequests, csMplsInterfaceLabelMaxIn=csMplsInterfaceLabelMaxIn, csOrionDynamicCryptoMapTransformSet6=csOrionDynamicCryptoMapTransformSet6, csOrionAAAServerListType=csOrionAAAServerListType, csOrionSystemLoginRoleName=csOrionSystemLoginRoleName, csOrionIpSecStateSAIndex=csOrionIpSecStateSAIndex, csIgmpInterfaceQuerierUpTime=csIgmpInterfaceQuerierUpTime, csOrionSystemVersionNum=csOrionSystemVersionNum, csOrionGenAclEntry=csOrionGenAclEntry, csOrionFwMsSqlPolicyRowStatus=csOrionFwMsSqlPolicyRowStatus, csOrionVPNVRouterIpNetToMediaEntry=csOrionVPNVRouterIpNetToMediaEntry, csFrCircuitCreationTime=csFrCircuitCreationTime, csOrionSystemLoginDomainName=csOrionSystemLoginDomainName, csLdpVrAdminStatus=csLdpVrAdminStatus, csOrionPptpConfStatus=csOrionPptpConfStatus, csOrionPptpConfIpPool=csOrionPptpConfIpPool, csOrionOspfEnd=csOrionOspfEnd, csOspfMulticastExtensions=csOspfMulticastExtensions, csRsvpIfBadOtherIn=csRsvpIfBadOtherIn, csOrionGenAclSrcPortList=csOrionGenAclSrcPortList, csOrionStatusPanelInfo=csOrionStatusPanelInfo, csOspfTrap=csOspfTrap, csOrionPing=csOrionPing, csIsisIPRAErrMetricType=csIsisIPRAErrMetricType, csOrionVrIfManagerEntry=csOrionVrIfManagerEntry, csOrionFanTrayFWReleaseDate=csOrionFanTrayFWReleaseDate, csOrionSyslogdFacility6=csOrionSyslogdFacility6, csOrionSyslogdLevel4=csOrionSyslogdLevel4, csOrionPowerSupplyHWRevision=csOrionPowerSupplyHWRevision, csAtmInterfaceConfReceivedBytes=csAtmInterfaceConfReceivedBytes, csOspfAreaName=csOspfAreaName, csOrionFwDmzIfAddr=csOrionFwDmzIfAddr, csFrDlcmiEntry=csFrDlcmiEntry, csOrionHWNotifyInfo=csOrionHWNotifyInfo, csOrionNatStaticInsideLocalAddress=csOrionNatStaticInsideLocalAddress, csOspfAreaTable=csOspfAreaTable, csOrionFwFtpPolicyLog=csOrionFwFtpPolicyLog, csRsvpIfQueueBandwidth=csRsvpIfQueueBandwidth, csOrionPingResultsEntry=csOrionPingResultsEntry, csOrionVrSpfUdpCurrentConnTableEntries=csOrionVrSpfUdpCurrentConnTableEntries, csOc3PathDayUASs=csOc3PathDayUASs, csMplsPathHotStandby=csMplsPathHotStandby, csOspfAreaId=csOspfAreaId, csOrionIKECryptoMapRemoteIdentity5=csOrionIKECryptoMapRemoteIdentity5, csDs3StatTotalCSESs=csDs3StatTotalCSESs, csRtPolicyTermToNbrGroupName=csRtPolicyTermToNbrGroupName, csOrionSnmpAgentErrorNmsIpAddress=csOrionSnmpAgentErrorNmsIpAddress, csFrDlcmiTable=csFrDlcmiTable, csOc3PosSentFrameUserAborted=csOc3PosSentFrameUserAborted, csOrionViPktFilterHitCounter=csOrionViPktFilterHitCounter, csOrionFwHostProxy=csOrionFwHostProxy, csOrionManualCryptoMapOutboundAHKey=csOrionManualCryptoMapOutboundAHKey, csOspfIfAuthType=csOspfIfAuthType, csOrionQoSMeterProfileMIR=csOrionQoSMeterProfileMIR, csDs3Ds1SendCode=csDs3Ds1SendCode, csIsisCircUpTime=csIsisCircUpTime, csOrionFwPlugPolicyTable=csOrionFwPlugPolicyTable, csOrionGenAclEndSrcPort=csOrionGenAclEndSrcPort, csRtPolicyTermFromOspfArea=csRtPolicyTermFromOspfArea, csRsvpIfResvErrIn=csRsvpIfResvErrIn, csOrionManualCryptoMapOutboundESPKey=csOrionManualCryptoMapOutboundESPKey, csDs3ConfigMdlIdleSig=csDs3ConfigMdlIdleSig, csOrionIpSecStateProtocol=csOrionIpSecStateProtocol, csOrionFwNetMeetingConfig=csOrionFwNetMeetingConfig, csOrionFwTelnetAuthTable=csOrionFwTelnetAuthTable, csMplsLspFrom=csMplsLspFrom, csAtmInterfaceConfOperStatus=csAtmInterfaceConfOperStatus, csBgpNbr=csBgpNbr, csOrionNatClearTrans=csOrionNatClearTrans, csDs3ConfigNationalBit=csDs3ConfigNationalBit, csOspfLsdbAdvertisement=csOspfLsdbAdvertisement, csOrionL2tpConfigSessionPacketSequencing=csOrionL2tpConfigSessionPacketSequencing, csOrionTunnelSwitchEntry=csOrionTunnelSwitchEntry, csPppoeAcIfStatPADOTransmit=csPppoeAcIfStatPADOTransmit, csOspfImpPolId=csOspfImpPolId, csOrionDNSInfoEnd=csOrionDNSInfoEnd, csIsisCircL2AuthType=csIsisCircL2AuthType, csDs3Ds1CurrentSESs=csDs3Ds1CurrentSESs, csRsvpSessionEntry=csRsvpSessionEntry, csIsisL2SummAddrOperState=csIsisL2SummAddrOperState, csMplsLspPathChanges=csMplsLspPathChanges, csOrionSystemLoginRoleDesc=csOrionSystemLoginRoleDesc, csOc3SectionPrevDayTable=csOc3SectionPrevDayTable, csOrionBladeModelNumb=csOrionBladeModelNumb, csOrionIpSecStatsRcvAhPktsBadSpi=csOrionIpSecStatsRcvAhPktsBadSpi, csOrionVrQoSFilterMeterName=csOrionVrQoSFilterMeterName, csEthStatsRxSysErrCounts=csEthStatsRxSysErrCounts, csRsvpIfResvErrOut=csRsvpIfResvErrOut, csOrionEngineApplicationVersion=csOrionEngineApplicationVersion, csOrionFwNwGroupEntry=csOrionFwNwGroupEntry, csOrionPowerSupplyEntry=csOrionPowerSupplyEntry, csOrionVPNVRouterManagedIpRouteInfo=csOrionVPNVRouterManagedIpRouteInfo, csOrionTempAirFlowCardTable=csOrionTempAirFlowCardTable, csOrionVPNVRouterManagedIpRouteNextHop=csOrionVPNVRouterManagedIpRouteNextHop, csOrionGenAclSrcAddress=csOrionGenAclSrcAddress, csOrionFwHostEntry=csOrionFwHostEntry, SnmpAdminString=SnmpAdminString, csOrionIpSecStatsEspTotalInboundSAs=csOrionIpSecStatsEspTotalInboundSAs, csOrionFwLdapPolicyTable=csOrionFwLdapPolicyTable, csRtPolicyTermFromMetric1=csRtPolicyTermFromMetric1, csOrionBladeSharcCryptoModuleId1=csOrionBladeSharcCryptoModuleId1, csEthSubIfChannelIndex=csEthSubIfChannelIndex, csOrionViStatsInUcastPkts=csOrionViStatsInUcastPkts, csIsisCircL2ExpenseMetric=csIsisCircL2ExpenseMetric, csAtmInterfaceConfStatsTable=csAtmInterfaceConfStatsTable, csOrionPptpConnEntry=csOrionPptpConnEntry, csOspfIfRtrPriority=csOspfIfRtrPriority, csOspfVirtIfHelloInterval=csOspfVirtIfHelloInterval, csOrionQueueTotalByteCount=csOrionQueueTotalByteCount, csMplsExtensionsTable=csMplsExtensionsTable, csOrionFanTempSensorState=csOrionFanTempSensorState, csOrionFwSmtpPolicyLogSpam=csOrionFwSmtpPolicyLogSpam, csOrionVPNVRouterManagedIpRouteMetric1=csOrionVPNVRouterManagedIpRouteMetric1, csOrionPppRemoteUserTable=csOrionPppRemoteUserTable, csOspfIfAreaId=csOspfIfAreaId, csRipStats=csRipStats, csRipIfConfTable=csRipIfConfTable, csAtmConnOamLoopbackRetryPvcUpAge=csAtmConnOamLoopbackRetryPvcUpAge, csOrionQueueGroupTable=csOrionQueueGroupTable, csRtPolicyRouteFilterActionFlow=csRtPolicyRouteFilterActionFlow, csIsisSysOrigL2LSPBuffSize=csIsisSysOrigL2LSPBuffSize, csRtPolicyTermActionPreference2Op=csRtPolicyTermActionPreference2Op, csOrionEngineMemoryBadFrees=csOrionEngineMemoryBadFrees, csChDs3TimeSlots=csChDs3TimeSlots, csPppoeConfigPppIfAuth=csPppoeConfigPppIfAuth, csOrionNatOutsideGlobalAddr=csOrionNatOutsideGlobalAddr, csOrionBladeTemperatureSensor4=csOrionBladeTemperatureSensor4, csOrionPowerSupplyStatusChange=csOrionPowerSupplyStatusChange, csOrionVPNVRouterTcpConnRemPort=csOrionVPNVRouterTcpConnRemPort, csIgmpStaticGroupAddress=csIgmpStaticGroupAddress, csPolicyRouteFilterRowStatus=csPolicyRouteFilterRowStatus, csOrionVIfMtuOperational=csOrionVIfMtuOperational, csPwVcOwner=csPwVcOwner, csIsisCircL1CSNPInterval=csIsisCircL1CSNPInterval, csOrionFwSmtpLogging=csOrionFwSmtpLogging, csOrionIKESvrParamExpireTimer=csOrionIKESvrParamExpireTimer, csOrionSyslogdFacility4=csOrionSyslogdFacility4, csOrionPppoeInfo=csOrionPppoeInfo, csFrCircuitDlci=csFrCircuitDlci, csOc3PathIntervalValidData=csOc3PathIntervalValidData, csMplsOspfExtensionsRowStatus=csMplsOspfExtensionsRowStatus, csOspfLsdbRouterId=csOspfLsdbRouterId, csOrionFwHttpPolicyName=csOrionFwHttpPolicyName, csOrionFwTelnetAuthPasswdTimeout=csOrionFwTelnetAuthPasswdTimeout, csDs3StatCurrentLCVs=csDs3StatCurrentLCVs, csOrionTraceRouteReqEntry=csOrionTraceRouteReqEntry, csIsisSysProtSuppExistState=csIsisSysProtSuppExistState, csOrionVPNVRouterDenyPktFilterEvlogStatus=csOrionVPNVRouterDenyPktFilterEvlogStatus, csOrionAlarmType=csOrionAlarmType, csOc3LineCurrentStatus=csOc3LineCurrentStatus, csOrionAccessListId=csOrionAccessListId, csExpPolRowStatus=csExpPolRowStatus, csBgpNetworkTableEnd=csBgpNetworkTableEnd, csOspfVirtIfEntry=csOspfVirtIfEntry, csPppoeAcIfStatGenericErrorTransmit=csPppoeAcIfStatGenericErrorTransmit, csOrionDynamicCryptoMapTransformSet5=csOrionDynamicCryptoMapTransformSet5, csBgpGenStatus=csBgpGenStatus, csOrionVPNVRouterIpRouteProto=csOrionVPNVRouterIpRouteProto, csOrionVPNVRouterIpNetToMediaPhysAddress=csOrionVPNVRouterIpNetToMediaPhysAddress, csOrionQoSMeterProfileDropPrecedence=csOrionQoSMeterProfileDropPrecedence, csRtPolicyTermActionIsisMetricType=csRtPolicyTermActionIsisMetricType, csOrionVPNVRouterIpForwDatagrams=csOrionVPNVRouterIpForwDatagrams, csOrionOc3FarEndPath=csOrionOc3FarEndPath, csIsisISAdjNeighPriority=csIsisISAdjNeighPriority, csOrionIKEDialupConnEntry=csOrionIKEDialupConnEntry, csDs3Ds1LineCode=csDs3Ds1LineCode, csOrionSystemBootSaveImage=csOrionSystemBootSaveImage, csOc3PathPrevDaySESs=csOc3PathPrevDaySESs, csOrionVrIfManagerRowStatus=csOrionVrIfManagerRowStatus, csOrionBoot=csOrionBoot, csFrDlcmiStatAsyncUpdates=csFrDlcmiStatAsyncUpdates, csRipImpPolTable=csRipImpPolTable, csOrionFwSmtpBadAdmin=csOrionFwSmtpBadAdmin, csEthSubIfAdmStatus=csEthSubIfAdmStatus, csOspfExtLsdbEntry=csOspfExtLsdbEntry, csOrionGreStatsKeyErrors=csOrionGreStatsKeyErrors, csOrionMlpppBundleOperStatus=csOrionMlpppBundleOperStatus, csFrCircuitCommittedBurst=csFrCircuitCommittedBurst, csRtPolicyTermFromPreference1=csRtPolicyTermFromPreference1, csPosOperStatus=csPosOperStatus, csIsisISAdjProtSuppCircIndex=csIsisISAdjProtSuppCircIndex, csExpFilterIfServiceCategory=csExpFilterIfServiceCategory, csDs3StatCurrentCSESs=csDs3StatCurrentCSESs, csIsisSysProtSuppProtocol=csIsisSysProtSuppProtocol, csIsisL2SummAddrTable=csIsisL2SummAddrTable, csIsisL2SummAddrDefaultMetric=csIsisL2SummAddrDefaultMetric, csOspfImpPolTable=csOspfImpPolTable, csPppoeSessionPeerAddress=csPppoeSessionPeerAddress, csOrionFwTelnetPolicyName=csOrionFwTelnetPolicyName, csOrionTunnelSwitchClientName=csOrionTunnelSwitchClientName, csOrionIKEStatePrfAlgorithm=csOrionIKEStatePrfAlgorithm, csOrionDhcpRelayInRels=csOrionDhcpRelayInRels, csExpFilterRowStatus=csExpFilterRowStatus, csOrionFwLdapPolicyAuthenticate=csOrionFwLdapPolicyAuthenticate, csOrionIKEPolicyStatus=csOrionIKEPolicyStatus, csRtPolicyPrefixListPrefixLen2=csRtPolicyPrefixListPrefixLen2, csOc3InvalidIntervals=csOc3InvalidIntervals, csAtmConnInArpAdminStatus=csAtmConnInArpAdminStatus, csOrionRadiusAcctTimestamp=csOrionRadiusAcctTimestamp)
mibBuilder.exportSymbols("COSINE-ORION-MIB", csPwVcInboundOperStatus=csPwVcInboundOperStatus, csOrionPacketRingProtToPrimCurrentEndpointSlot=csOrionPacketRingProtToPrimCurrentEndpointSlot, csOrionBladePort2MacAddr=csOrionBladePort2MacAddr, csPppoeSessionServiceVR=csPppoeSessionServiceVR, csAtmConnPCR=csAtmConnPCR, csOrionNatPoolStatus=csOrionNatPoolStatus, csDs3Ds1IntervalSEFSs=csDs3Ds1IntervalSEFSs, csOspfHostStatus=csOspfHostStatus, csIgmpInterfaceLastMembQueryIntvl=csIgmpInterfaceLastMembQueryIntvl, csOrionFanSpeedThreshold=csOrionFanSpeedThreshold, csAtmInterfaceReceivedCells=csAtmInterfaceReceivedCells, csPppoeSessionEntry=csPppoeSessionEntry, csRtPolicyTermRowStatus=csRtPolicyTermRowStatus, SystemID=SystemID, csOrionVPNVRouterManagedIpRouteOwner=csOrionVPNVRouterManagedIpRouteOwner, csFRoIPCircuitThroughput=csFRoIPCircuitThroughput, csOrionBgpNbrMaxPfxLimit=csOrionBgpNbrMaxPfxLimit, csIsisCircMCAddr=csIsisCircMCAddr, csOrionSystemNetMask=csOrionSystemNetMask, csBgpNbrMhopTTL=csBgpNbrMhopTTL, csIsisIPRAExpMetricType=csIsisIPRAExpMetricType, csPwVcInboundMode=csPwVcInboundMode, csPppoeConfigPppIfEchoTimeout=csPppoeConfigPppIfEchoTimeout, csOrionNatInfo=csOrionNatInfo, csOrionRadiusAcctInfo=csOrionRadiusAcctInfo, csOrionSystemLoginPermRowStatus=csOrionSystemLoginPermRowStatus, csFrDlcmiState=csFrDlcmiState, csOrionUdpEnd=csOrionUdpEnd, csOrionVrPktFilterAction=csOrionVrPktFilterAction, csOrionIpSecStateAlgorithmType=csOrionIpSecStateAlgorithmType, csOrionVPNVRouterManagedIpRouteAdvertiseOption=csOrionVPNVRouterManagedIpRouteAdvertiseOption, csOspfAreaBdrRtrCount=csOspfAreaBdrRtrCount, csDs3Ds1IntervalPCVs=csDs3Ds1IntervalPCVs, csDot1dPortType=csDot1dPortType, csOrionViPktFilterTable=csOrionViPktFilterTable, csLdpVrConfTableEnd=csLdpVrConfTableEnd, csOrionIpSecEvLogArea=csOrionIpSecEvLogArea, cbrFileName=cbrFileName, csOrionCiscoHdlcOperStatus=csOrionCiscoHdlcOperStatus, csExpFilterIfEntry=csExpFilterIfEntry, csRsvpIfBadPathErrIn=csRsvpIfBadPathErrIn, csIsisSysExistState=csIsisSysExistState, csOspfNbrIpAddr=csOspfNbrIpAddr, csIsisCircDRL2HelloTimer=csIsisCircDRL2HelloTimer, csOrionFwRshPolicyEntry=csOrionFwRshPolicyEntry, csExpFilterExpValue=csExpFilterExpValue, csRsvpIfTTL=csRsvpIfTTL, csIsisSystem=csIsisSystem, csMplsLspEntry=csMplsLspEntry, csOrionPppIfEvLogLevel=csOrionPppIfEvLogLevel, csRsvpIfPathTearIn=csRsvpIfPathTearIn, csOc3Loopback=csOc3Loopback, csIgmpCacheAddress=csIgmpCacheAddress, csImpPolRowStatus=csImpPolRowStatus, csOrionVIfSpeed=csOrionVIfSpeed, csEthStatsRxShortPktsOk=csEthStatsRxShortPktsOk, csRtPolicyTermActionMetricOp=csRtPolicyTermActionMetricOp, csAtmInterfaceConfMyIfName=csAtmInterfaceConfMyIfName, csOrionViStatsRateLimitTxBytesDropped=csOrionViStatsRateLimitTxBytesDropped, csOrionVrQoSFilterServiceCategory=csOrionVrQoSFilterServiceCategory, csOrionNBNSInfo=csOrionNBNSInfo, csAtmConnMCR=csAtmConnMCR, csPwVcTestResult=csPwVcTestResult, csIsisSysEntry=csIsisSysEntry, csOrionPingCtlTimeOut=csOrionPingCtlTimeOut, csOrionViStatsInDiscards=csOrionViStatsInDiscards, csOrionFwFtpConfig=csOrionFwFtpConfig, csOrionVrPktFilterHitCounter=csOrionVrPktFilterHitCounter, csFrCircuitReceivedBECNs=csFrCircuitReceivedBECNs, csOrionFRoIPTransportMode=csOrionFRoIPTransportMode, csOspfNbmaNbrStatus=csOspfNbmaNbrStatus, csIsisIPRACircIndex=csIsisIPRACircIndex, csOrionIKECryptoMapSaLifetimeSoftKbytes=csOrionIKECryptoMapSaLifetimeSoftKbytes, csOspfVirtNbrOptions=csOspfVirtNbrOptions, csDs3Ds1CurrentESs=csDs3Ds1CurrentESs, csOrionFwHostMask=csOrionFwHostMask, csRadiusServer=csRadiusServer, csOrionModemBaud=csOrionModemBaud, csIsisCircInCtrlPDUs=csIsisCircInCtrlPDUs, csAtmConnReceivedBadAalType=csAtmConnReceivedBadAalType, csIsisSysType=csIsisSysType, csPwVcOperStatus=csPwVcOperStatus, csOrionIKEStatsPhase1InPkts=csOrionIKEStatsPhase1InPkts, csOrionVrSpfTcpSeqCheck=csOrionVrSpfTcpSeqCheck, csOrionVrSpfConfEntry=csOrionVrSpfConfEntry, csLdpVrEventLogLevel=csLdpVrEventLogLevel, csDs3ConfigTable=csDs3ConfigTable, csRsvpIfResvTearOut=csRsvpIfResvTearOut, csOrionEvents=csOrionEvents, csBgpNbrKeepAliveConfigured=csBgpNbrKeepAliveConfigured, csIsisSysProtSuppEntry=csIsisSysProtSuppEntry, csOrionSystemBootUserName=csOrionSystemBootUserName, csIgmpCacheExpiryTime=csIgmpCacheExpiryTime, csPwVcOutboundGroupID=csPwVcOutboundGroupID, csOc3LineDayUASs=csOc3LineDayUASs, csBgpNetworkEntry=csBgpNetworkEntry, csDs3Ds1ClockSource=csDs3Ds1ClockSource, csIsisISAdjAreaAddrCircIndex=csIsisISAdjAreaAddrCircIndex, csDs3Ds1CurrentLCVs=csDs3Ds1CurrentLCVs, csRtPolicyPrefixListPrefix=csRtPolicyPrefixListPrefix, csOrionFwHttpPolicyFeatures=csOrionFwHttpPolicyFeatures, PerfTotalCount=PerfTotalCount, csOrionViStatsRateLimitRxPktsDropped=csOrionViStatsRateLimitRxPktsDropped, csOrionIKEStateHashAlgorithm=csOrionIKEStateHashAlgorithm, csOrionFwHostRowStatus=csOrionFwHostRowStatus, csOrionManualCryptoMapOutboundESPSPI=csOrionManualCryptoMapOutboundESPSPI, csFRoIPCircuitSentOctets=csFRoIPCircuitSentOctets, csVpnVrfMaxRoutes=csVpnVrfMaxRoutes, csOrionVPNVRouterUdpEntry=csOrionVPNVRouterUdpEntry, csOrionEthInfo=csOrionEthInfo, csOrionAddressListEntry=csOrionAddressListEntry, csOrionPppIfEchoTimeout=csOrionPppIfEchoTimeout, csOrionOspfLsdbApproachingOverflow=csOrionOspfLsdbApproachingOverflow, csOrionVrSpfTcpIdleTimeout=csOrionVrSpfTcpIdleTimeout, csOrionFwFtpPolicyTable=csOrionFwFtpPolicyTable, csOspfAreaAggregateEffect=csOspfAreaAggregateEffect, csOrionFwFtpPolicyTimeout=csOrionFwFtpPolicyTimeout, csOrionFanTempSensorEntry=csOrionFanTempSensorEntry, csIsisReachAdddr=csIsisReachAdddr, csRsvpIfResvOut=csRsvpIfResvOut, csOrionIpSecStateLastUsed=csOrionIpSecStateLastUsed, csOrionTemperatureEvent=csOrionTemperatureEvent, csOrionFwHttpPolicyAuthenticate=csOrionFwHttpPolicyAuthenticate, csRtPolicyStrName=csRtPolicyStrName, csOc3SectionIntervalValidData=csOc3SectionIntervalValidData, csOrionAccessListStartAddress=csOrionAccessListStartAddress, csOrionFwSmtpWakeup=csOrionFwSmtpWakeup, csOrionIKEStateRetryLimit=csOrionIKEStateRetryLimit, csOrionAAAServiceInfoEnd=csOrionAAAServiceInfoEnd, csDot1dPortIndex=csDot1dPortIndex, csOrionLossOfClock=csOrionLossOfClock, csOrionFwGenProxyChildLimit=csOrionFwGenProxyChildLimit, csOrionIpSecStateLocalEndPoint=csOrionIpSecStateLocalEndPoint, csAtmInterfaceConfIlmiVci=csAtmInterfaceConfIlmiVci, csVpnVrfProviderName=csVpnVrfProviderName, csOrionPppRemoteUserConnProfile=csOrionPppRemoteUserConnProfile, csOrionAirFlowCardIndex=csOrionAirFlowCardIndex, csAtmInterfaceConfIlmiStatus=csAtmInterfaceConfIlmiStatus, csBgpNbrIpv4AdminStatus=csBgpNbrIpv4AdminStatus, csOrionQueueId=csOrionQueueId, csOrionFwFtpPolicyAuthenticate=csOrionFwFtpPolicyAuthenticate, csOrionAAAServerListRowStatus=csOrionAAAServerListRowStatus, csOrionIKEStateInitRespondFlag=csOrionIKEStateInitRespondFlag, csOrionBackplaneUtilization=csOrionBackplaneUtilization, csExpPolMetricType=csExpPolMetricType, csBgpGenMaxPfxThreshold=csBgpGenMaxPfxThreshold, csOrionAddressListMask=csOrionAddressListMask, PwVcInstance=PwVcInstance, csIgmpStaticGroupTable=csIgmpStaticGroupTable, csOrionNatInsideGlobalAddr=csOrionNatInsideGlobalAddr, csOrionPingResultsTable=csOrionPingResultsTable, csOspfLsdbSequence=csOspfLsdbSequence, csIgmpInterfaceVersion1QuerierTimer=csIgmpInterfaceVersion1QuerierTimer, csOc3SlotIndex=csOc3SlotIndex, csOrionVrQoSFilterIndex=csOrionVrQoSFilterIndex, csOrionViDsByteFilterEntry=csOrionViDsByteFilterEntry, csRipGlobalQueries=csRipGlobalQueries, csOrionFwSmtpRelayEntry=csOrionFwSmtpRelayEntry, csBgpNbrGroupEntry=csBgpNbrGroupEntry, csPppoeSessionTableEnd=csPppoeSessionTableEnd, csIgmpCacheVersion1HostTimer=csIgmpCacheVersion1HostTimer, csOrionVrQoSFilterTable=csOrionVrQoSFilterTable, csAtmConnOamLoopBackTransmitFail=csAtmConnOamLoopBackTransmitFail, csOrionFileSys=csOrionFileSys, csOc3PathPrevDayUASs=csOc3PathPrevDayUASs, csIsisSysCorrLSPs=csIsisSysCorrLSPs, csOrionIKEPolicySaLifetimeHardSec=csOrionIKEPolicySaLifetimeHardSec, csIgmpGeneralEntry=csIgmpGeneralEntry, csRipGlobalConfReqOnStartup=csRipGlobalConfReqOnStartup, csOrionL2tpConfigPppConfigReqRetransmission=csOrionL2tpConfigPppConfigReqRetransmission, csOrionIpEnd=csOrionIpEnd, csOspfIfMd5Table=csOspfIfMd5Table, csOrionNatGeneralParamTableEnd=csOrionNatGeneralParamTableEnd, csIsisSysDefInfoOrig=csIsisSysDefInfoOrig, csOc3AtmIntervalCorrectedHEC=csOc3AtmIntervalCorrectedHEC, csBgpConfedASEntry=csBgpConfedASEntry, csFRoIPCircuitTableEnd=csFRoIPCircuitTableEnd, csOrionFwSmtpPolicyMimeCheck=csOrionFwSmtpPolicyMimeCheck, PwVcIndex=PwVcIndex, csBgpNbrGroupExpPolTable=csBgpNbrGroupExpPolTable, csOrionVrDnsConfigTable=csOrionVrDnsConfigTable, csOrionFRoIPTransportOutBytes=csOrionFRoIPTransportOutBytes, csOrionVncQueueMinBw=csOrionVncQueueMinBw, csOrionL2tpStatsPayloadSendPackets=csOrionL2tpStatsPayloadSendPackets, csOc3PathCurrentUASs=csOc3PathCurrentUASs, csOrionIsis=csOrionIsis, csOrionBladeTemperatureSensor1=csOrionBladeTemperatureSensor1, csLdpTargetRowStatus=csLdpTargetRowStatus, csIsisL2SummAddrExistState=csIsisL2SummAddrExistState, csLdpEntityHelloTimer=csLdpEntityHelloTimer, csOrionIpSecStatsTxPktsDenied=csOrionIpSecStatsTxPktsDenied, TOS=TOS, csOrionVIfIpAddress=csOrionVIfIpAddress, csOrionFRoIPTransportPermittedBadEvents=csOrionFRoIPTransportPermittedBadEvents, csOrionIsisEnd=csOrionIsisEnd, csOrionVPNVRouterUdpOutDatagrams=csOrionVPNVRouterUdpOutDatagrams, csOrionL2tpSessionRemoteCallId=csOrionL2tpSessionRemoteCallId, csAtmInterfaceConfTransmitVcNotOpened=csAtmInterfaceConfTransmitVcNotOpened, csEthStatsRx64Pkts=csEthStatsRx64Pkts, csAtmConnArpCacheSize=csAtmConnArpCacheSize, csBgpGenClearConnFlag=csBgpGenClearConnFlag, csOrionNatStaticVITranslationType=csOrionNatStaticVITranslationType, csOspfVirtNbrIpAddr=csOspfVirtNbrIpAddr, csAtmConnIpAddressEntry=csAtmConnIpAddressEntry, csOrionFwFtpLog=csOrionFwFtpLog, csOrionAccessListPoolId=csOrionAccessListPoolId, csOrionFwDestRowStatus=csOrionFwDestRowStatus, csOrionIpSecStateRemoteGateway=csOrionIpSecStateRemoteGateway, csOc3SectionCurrentStatus=csOc3SectionCurrentStatus, csOrionFwHttpConfig=csOrionFwHttpConfig, csOc3SectionCurrentTable=csOc3SectionCurrentTable, csOrionVPNVRouterUpTime=csOrionVPNVRouterUpTime, csOrionVrSpfTcpCurrentConnTableEntries=csOrionVrSpfTcpCurrentConnTableEntries, csOrionViStatsEntry=csOrionViStatsEntry, csOrionSystemTime=csOrionSystemTime, csOrionL2tpConfigSessionTxQueueSize=csOrionL2tpConfigSessionTxQueueSize, csOrionSystemControlBladeFailOver=csOrionSystemControlBladeFailOver, csOrionLacConfigTable=csOrionLacConfigTable, csMplsLspName=csMplsLspName, csTelnetSvrConfEntry=csTelnetSvrConfEntry, csOrionOspfTxRetransmit=csOrionOspfTxRetransmit, csAtmInterfaceConfTransmitQueueFull=csAtmInterfaceConfTransmitQueueFull, csIsisCircAdjChanges=csIsisCircAdjChanges, csOrionAlarmAffectType=csOrionAlarmAffectType, csOrionIKESvrParamMapName=csOrionIKESvrParamMapName, csOc3PosMaxPacketSize=csOc3PosMaxPacketSize, csPwe3ConfEntry=csPwe3ConfEntry, csOc3AtmIntervalIdleCells=csOc3AtmIntervalIdleCells, csOrionVPNVRouterManagedIpRouteMetric3=csOrionVPNVRouterManagedIpRouteMetric3, csOrionVrPktFilterEntry=csOrionVrPktFilterEntry, csOrionVrSpfIcmpIdleTimeout=csOrionVrSpfIcmpIdleTimeout, csOrionTemperatureAirFlowCardInfo=csOrionTemperatureAirFlowCardInfo, csPppoeSessionServiceName=csPppoeSessionServiceName, csOrionMlpppBundleFragmentsPerPacket=csOrionMlpppBundleFragmentsPerPacket, csUnchanDs3ConfigLoopbackType=csUnchanDs3ConfigLoopbackType, csOrionFwAccessAction=csOrionFwAccessAction, csOrionPptpConnFarIpAddr=csOrionPptpConnFarIpAddr, csOrionIKECryptoMapRemoteIdentity2=csOrionIKECryptoMapRemoteIdentity2, csOc3AtmCurrentStatsTable=csOc3AtmCurrentStatsTable, csOrionEngineLoaderVersion=csOrionEngineLoaderVersion, csOc3LineCurrentUASs=csOc3LineCurrentUASs, csOc3AtmIntervalUnCorrectedHEC=csOc3AtmIntervalUnCorrectedHEC, csDs3Ds1LoopbackStatus=csDs3Ds1LoopbackStatus, csOrionVIfRowStatus=csOrionVIfRowStatus, csOrionEngineFreeMemoryMedium=csOrionEngineFreeMemoryMedium, csOrionIKECryptoMapPolicy=csOrionIKECryptoMapPolicy, csAtmConnOamLoopbackRetryPvcDownAge=csAtmConnOamLoopbackRetryPvcDownAge, csOrionMlpppLinkPortIndex=csOrionMlpppLinkPortIndex, csRtPolicyTermFromOspfTag2=csRtPolicyTermFromOspfTag2, csOrionSnmpCommString=csOrionSnmpCommString, csOrionBladeDescr=csOrionBladeDescr, csOc3SectionPrevDayESs=csOc3SectionPrevDayESs, csFrCircuitOperStatus=csFrCircuitOperStatus, csOrionAAAServerListPriority=csOrionAAAServerListPriority)
mibBuilder.exportSymbols("COSINE-ORION-MIB", csPwVcStorageType=csPwVcStorageType, csOrionVrDhcpRelaySecsThreshold=csOrionVrDhcpRelaySecsThreshold, csIgmpInterfaceMulticastTTLThreshold=csIgmpInterfaceMulticastTTLThreshold, csOrionFwTelnetConfigEnd=csOrionFwTelnetConfigEnd, csOrionVrIfManagerPortIndex=csOrionVrIfManagerPortIndex, csOrionEngineEntry=csOrionEngineEntry, csOrionFwSmtpPolicyBadEmailAdmin=csOrionFwSmtpPolicyBadEmailAdmin, PositiveInteger=PositiveInteger, csAtmInterfaceConfUniType=csAtmInterfaceConfUniType, csOrionVrPktFilterTcpStatus=csOrionVrPktFilterTcpStatus, csOrionFanTempSensorTemperature=csOrionFanTempSensorTemperature, csAtmConnReceivedUnknownProtocolErrors=csAtmConnReceivedUnknownProtocolErrors, csEthStatsRx1519Pkts=csEthStatsRx1519Pkts, csOrionVPNVRouterTcpInSegs=csOrionVPNVRouterTcpInSegs, csRipIfStatTableEnd=csRipIfStatTableEnd, csOrionGenAclStartDstPort=csOrionGenAclStartDstPort, csOrionManualCryptoMapNumber=csOrionManualCryptoMapNumber, csOrionManualCryptoMapName=csOrionManualCryptoMapName, csLdpEntityKeepAliveHoldTimer=csLdpEntityKeepAliveHoldTimer, csOrionVPNVRouterIpOutNoRoutes=csOrionVPNVRouterIpOutNoRoutes, csOrionViPbfFilterIndex=csOrionViPbfFilterIndex, LSPBuffSize=LSPBuffSize, csAtmConnTransmittedArpRequests=csAtmConnTransmittedArpRequests, csOrionGreCheckSum=csOrionGreCheckSum, csOrionFwCompuServePolicyRemotePort=csOrionFwCompuServePolicyRemotePort, csOrionL2tpSessionTxQueueSize=csOrionL2tpSessionTxQueueSize, csRtPolicyName=csRtPolicyName, csEthSpeed=csEthSpeed, csOrionAAAServerListConfigTable=csOrionAAAServerListConfigTable, csIgmpCacheStatus=csIgmpCacheStatus, csOrionAccessListInfo=csOrionAccessListInfo, csOrionIKEStateExpirationTime=csOrionIKEStateExpirationTime, csFrCircuitSubIf=csFrCircuitSubIf, csOrionFwFtpAuthTable=csOrionFwFtpAuthTable, NSAPPrefix=NSAPPrefix, csOspfVirtIfNeighbor=csOspfVirtIfNeighbor, csRipExpPolEntry=csRipExpPolEntry, csOrionTunnelSwitchTargetPriority=csOrionTunnelSwitchTargetPriority, csFrCircuitExcessBurst=csFrCircuitExcessBurst, csOrionSystemLoginRoleAccessRights=csOrionSystemLoginRoleAccessRights, csIgmpInterfaceIfIndex=csIgmpInterfaceIfIndex, TOSType=TOSType, csPolicyRouteFilterTable=csPolicyRouteFilterTable, csOrionOspfVirtIfTxRetransmit=csOrionOspfVirtIfTxRetransmit, csOc3SectionJ0=csOc3SectionJ0, csDs3ConfigInvalidInterval=csDs3ConfigInvalidInterval, csIsisCircL2PartSNPInterval=csIsisCircL2PartSNPInterval, csOrionIKESvrParamMaxSACount=csOrionIKESvrParamMaxSACount, csDs3ConfigMdlEic=csDs3ConfigMdlEic, csEthStatsTxErrCounts=csEthStatsTxErrCounts, csOrionPppConfigTable=csOrionPppConfigTable, csOrionVPNVRouterIpNetToMediaIfIndex=csOrionVPNVRouterIpNetToMediaIfIndex, csDs3Ds1InvertData=csDs3Ds1InvertData, csRipIfConfRowStatus=csRipIfConfRowStatus, csAtmConnOamLoopback=csAtmConnOamLoopback, csOrionEngineApplicationTime=csOrionEngineApplicationTime, csOrionDhcpRelayOutNaks=csOrionDhcpRelayOutNaks, csIgmpStaticGroupIfIndex=csIgmpStaticGroupIfIndex, csOrionPingCtlFrequency=csOrionPingCtlFrequency, csOrionFwCompuServePolicyEntry=csOrionFwCompuServePolicyEntry, csOrionGenAclProt=csOrionGenAclProt, csIgmpMIBObjects=csIgmpMIBObjects, csIsisISAdjNeighSysID=csIsisISAdjNeighSysID, csTeLdpObjects=csTeLdpObjects, csOrionSystemBootInternalNwAddr=csOrionSystemBootInternalNwAddr, csOspfVersionNumber=csOspfVersionNumber, csMplsLspPrimaryTimeUp=csMplsLspPrimaryTimeUp, csOrionCiscoHdlcConfigEntry=csOrionCiscoHdlcConfigEntry, csOrionIpSecStateTable=csOrionIpSecStateTable, csOrionL2tpSessionFlowControl=csOrionL2tpSessionFlowControl, csOrionSystemBootLocalIpAddr=csOrionSystemBootLocalIpAddr, csOrionRadiusAcctEntry=csOrionRadiusAcctEntry, csOrionIKEPolicyTable=csOrionIKEPolicyTable, csRipIfConfPoisonReverse=csRipIfConfPoisonReverse, csAtmConnDynamicArpCacheIpAddress=csAtmConnDynamicArpCacheIpAddress, csOrionIKEStatsPhase2InPktsRejected=csOrionIKEStatsPhase2InPktsRejected, csOspfExtLsdbTable=csOspfExtLsdbTable, csOrionDsByteFilterInfo=csOrionDsByteFilterInfo, csOrionLacConfigAdminStatus=csOrionLacConfigAdminStatus, csBgpGenTable=csBgpGenTable, csDs3ConfigDeviceType=csDs3ConfigDeviceType, csOrionStatusPanelControlInfo=csOrionStatusPanelControlInfo, csOrionFwFtpConfigTable=csOrionFwFtpConfigTable, csIsisSysOperState=csIsisSysOperState, csOrionOspfIfStateChange=csOrionOspfIfStateChange, csOrionAccessListEndAddress=csOrionAccessListEndAddress, csOrionCiscoHdlcModuleIndex=csOrionCiscoHdlcModuleIndex, csRtPolicyPrefixListTable=csRtPolicyPrefixListTable, csOrionFwSmtpSpamRowStatus=csOrionFwSmtpSpamRowStatus, csBgpNbrGroup=csBgpNbrGroup, csPppoeSession=csPppoeSession, csAtmConnInArpInReqs=csAtmConnInArpInReqs, csOrionCustomerVrDown=csOrionCustomerVrDown, csOrionL2tpConfigPppTermReqRetransmission=csOrionL2tpConfigPppTermReqRetransmission, csOrionFwSmtpLocalDomain=csOrionFwSmtpLocalDomain, csOrionIpSecStateCreatorType=csOrionIpSecStateCreatorType, csOrionFwTelnetAuthPerUserAuthFilter=csOrionFwTelnetAuthPerUserAuthFilter, csChDs3PortIndex=csChDs3PortIndex, csOrionFwRshPolicyTimeout=csOrionFwRshPolicyTimeout, csUnchanDs3ConfigSlotIndex=csUnchanDs3ConfigSlotIndex, csOrionFwLdapPolicyTimeout=csOrionFwLdapPolicyTimeout, csOrionVIfOperStatus=csOrionVIfOperStatus, csOrionVPNVRouterTcpConnTable=csOrionVPNVRouterTcpConnTable, csAtmConnStaticArpCacheMacAddress=csAtmConnStaticArpCacheMacAddress, csMplsInterfaceLabelMinOut=csMplsInterfaceLabelMinOut, csOrionFwFtpPolicyDynamicPacketFilter=csOrionFwFtpPolicyDynamicPacketFilter, csMplsVrAdminStatus=csMplsVrAdminStatus, csOrionPingCtlTargetAddress=csOrionPingCtlTargetAddress, csIsisCircExistState=csIsisCircExistState, csOrionVrRadiusTimeout=csOrionVrRadiusTimeout, csOrionQueueWeight=csOrionQueueWeight, PwGroupID=PwGroupID, csOspfImportAsExtern=csOspfImportAsExtern, csAtmConnTransmittedBytes=csAtmConnTransmittedBytes, csIsisCircSysInstance=csIsisCircSysInstance, csRsvpIfEntry=csRsvpIfEntry, csMplsTrafficEnggAdminStatus=csMplsTrafficEnggAdminStatus, csOrionBladeSwVer=csOrionBladeSwVer, csOrionStatusPanelPortLoopback=csOrionStatusPanelPortLoopback, csOrionFwHttpHeaderIds=csOrionFwHttpHeaderIds, csOrionQueueInfo=csOrionQueueInfo, csOc3AlarmControl=csOc3AlarmControl, csOrionFwLnotesConfig=csOrionFwLnotesConfig, csOspfVirtNbrTable=csOspfVirtNbrTable, csEthStatsRxPausePktsOk=csEthStatsRxPausePktsOk, csOrionServiceSelectionInfoEnd=csOrionServiceSelectionInfoEnd, csAtmInterfaceConfMyNeighbourIfName=csAtmInterfaceConfMyNeighbourIfName, csOrionPppIfChIndex=csOrionPppIfChIndex, csOrionTraceRouteReqIndex=csOrionTraceRouteReqIndex, csFrDlcmiLmiDlci=csFrDlcmiLmiDlci, csMplsPathCosValue=csMplsPathCosValue, csOrionIKECryptoMapRemoteIdentityType5=csOrionIKECryptoMapRemoteIdentityType5, csOc3ClockSource=csOc3ClockSource, csOrionViPktFilterAction=csOrionViPktFilterAction, csOrionStatusPanelFWMajorRevision=csOrionStatusPanelFWMajorRevision, csOc3PortIndex=csOc3PortIndex, csOrionFwDestAccess=csOrionFwDestAccess, csOrionDNSInfo=csOrionDNSInfo, csOrionAccessListStatus=csOrionAccessListStatus, csFRoIPCircuitCommittedBurst=csFRoIPCircuitCommittedBurst, csOrionFileSysResultTable=csOrionFileSysResultTable, csExpPolRouteType=csExpPolRouteType, csOspfAddressLessIf=csOspfAddressLessIf, csOc3LineCurrentTable=csOc3LineCurrentTable, csOrionPptpConfPPPKeepAliveInterval=csOrionPptpConfPPPKeepAliveInterval, csImpPolBgpCommunity1=csImpPolBgpCommunity1, csOrionOc3Info=csOrionOc3Info, csLdpVrConfEntry=csLdpVrConfEntry, csOrionFwSmtpRelaySource=csOrionFwSmtpRelaySource, csPwVcInboundVcLabel=csPwVcInboundVcLabel, csOrionOc3Section=csOrionOc3Section, csOrionTraceRouteResultRtt3=csOrionTraceRouteResultRtt3, csPwVcPsnType=csPwVcPsnType, csFrCircuitThroughput=csFrCircuitThroughput, csOrionFanTrayHWRevision=csOrionFanTrayHWRevision, csOrionIpSecStatsEspTotalOutboundSAs=csOrionIpSecStatsEspTotalOutboundSAs, csOrionTcp=csOrionTcp, csOrionPppIfConfigEntry=csOrionPppIfConfigEntry, csOrionServiceTemplateConnProfileTable=csOrionServiceTemplateConnProfileTable, csRtPolicyUserIndexValue=csRtPolicyUserIndexValue, csTelnetSvrConfTimeout=csTelnetSvrConfTimeout, csBgpNbrGroupVpnIpv4AllowVrmodelCustomers=csBgpNbrGroupVpnIpv4AllowVrmodelCustomers, csPppoeAcIfStatGenericErrorReceive=csPppoeAcIfStatGenericErrorReceive, csOrionBladeIPSXLoaderProduct=csOrionBladeIPSXLoaderProduct, csOrionVPNVRouterIpFragCreates=csOrionVPNVRouterIpFragCreates, csOrionPptpConnLocalIpAddr=csOrionPptpConnLocalIpAddr, csOspfStubAreaEntry=csOspfStubAreaEntry, csOrionSystemLoginPermTable=csOrionSystemLoginPermTable, csOrionControlVrDown=csOrionControlVrDown, csOrionVPNVRouterIpRouteNextHopAS=csOrionVPNVRouterIpRouteNextHopAS, csRtPolicyTermActionBgpCommNamesListFlag=csRtPolicyTermActionBgpCommNamesListFlag, csOrionVPNVRouterIpRouteMetric4=csOrionVPNVRouterIpRouteMetric4, csOrionFwSmtpBadDir=csOrionFwSmtpBadDir, csOrionInletAirTempStatusChange=csOrionInletAirTempStatusChange, csEthPppoeService=csEthPppoeService, csOc3LineIntervalESs=csOc3LineIntervalESs, csRipGlobalStatEntry=csRipGlobalStatEntry, csOrionVPNVRouterName=csOrionVPNVRouterName, csOrionVPNVRouterIpDsByte=csOrionVPNVRouterIpDsByte, csOrionIpSecStateRemoteEndPoint=csOrionIpSecStateRemoteEndPoint, csUnchanDs3ConfigValidInterval=csUnchanDs3ConfigValidInterval, csRipIfConfAuthPassword=csRipIfConfAuthPassword, csOspfExtLsdbLimit=csOspfExtLsdbLimit, csOrionL2tpTunnelStatsTable=csOrionL2tpTunnelStatsTable, csDs3Ds1TotalSESs=csDs3Ds1TotalSESs, csDs3Ds1IntervalCSSs=csDs3Ds1IntervalCSSs, csOrionDs3Info=csOrionDs3Info, csAtmInterfaceConfAdminStatus=csAtmInterfaceConfAdminStatus, csOspfImpPolEntry=csOspfImpPolEntry, csOc3ApsControl=csOc3ApsControl, csPolicyRouteFilterSeqNum=csPolicyRouteFilterSeqNum, csOspfIfStatus=csOspfIfStatus, csOrionBladeInfo=csOrionBladeInfo, csAtmConnRespondedOAMLoopBackRequests=csAtmConnRespondedOAMLoopBackRequests, csVpnVrfRouteTargetEntry=csVpnVrfRouteTargetEntry, csOrionEngineOperAttributes=csOrionEngineOperAttributes, csOrionTrapInfo=csOrionTrapInfo, csFrCircuitType=csFrCircuitType, csOrionEventsInfo=csOrionEventsInfo, csBgpNbrGroupMaxPfxThreshold=csBgpNbrGroupMaxPfxThreshold, csOspfLsdbChecksum=csOspfLsdbChecksum, csOrionSnmpAgentErrorTable=csOrionSnmpAgentErrorTable, csOrionSystemBootDefGw=csOrionSystemBootDefGw, csOrionNatStaticVIInsideLocalAddress=csOrionNatStaticVIInsideLocalAddress, csOrionTraceRouteResultRtt2=csOrionTraceRouteResultRtt2, csRtPolicyTermFromProtocol=csRtPolicyTermFromProtocol, csOrionBladePort4MacAddr=csOrionBladePort4MacAddr, csDs3Ds1TotalBESs=csDs3Ds1TotalBESs, csOrionIKEPolicySaLifetimeHardKbytes=csOrionIKEPolicySaLifetimeHardKbytes, csOrionNatStaticVITranslationEntry=csOrionNatStaticVITranslationEntry, csOrionVPNVRouterIpRouteAge=csOrionVPNVRouterIpRouteAge, csOrionVrRadiusAcctSvrPort=csOrionVrRadiusAcctSvrPort, csRsvpIfNbrs=csRsvpIfNbrs, csBgpNbrGroupName=csBgpNbrGroupName, csIsisCircL2DelayMetric=csIsisCircL2DelayMetric, csOrionIKEPolicyHash=csOrionIKEPolicyHash, csDs3StatIntervalUASs=csDs3StatIntervalUASs, csOrionConnectionProfileRowStatus=csOrionConnectionProfileRowStatus, csAtmConnArpAgingTime=csAtmConnArpAgingTime, csOrionGreKeyEnable=csOrionGreKeyEnable, csMplsPathHoldPriority=csMplsPathHoldPriority, csIsisAreaAddr=csIsisAreaAddr, csOrionSnmpAgentErrorMsg=csOrionSnmpAgentErrorMsg, csOrionVrDsByteFilterEntry=csOrionVrDsByteFilterEntry, csOc3LinePrevDaySESs=csOc3LinePrevDaySESs, csAtmInterfaceConfTransmitCollisions=csAtmInterfaceConfTransmitCollisions, csExpFilterMatchingExp=csExpFilterMatchingExp, csLdpTargetAdminStatus=csLdpTargetAdminStatus, csOc3SectionIntervalNumber=csOc3SectionIntervalNumber, csOc3LineIntervalTable=csOc3LineIntervalTable, csOrionFwMsSqlPolicyEntry=csOrionFwMsSqlPolicyEntry, csOrionIpSecStateEntry=csOrionIpSecStateEntry, csOrionOspfOriginateLsa=csOrionOspfOriginateLsa, csIsisSysMinL2LSPGenInt=csIsisSysMinL2LSPGenInt, csEthStatsTxOctetsBad=csEthStatsTxOctetsBad, csRtPolicyTermTableEnd=csRtPolicyTermTableEnd, csIsisISAdjIPAddrCircIndex=csIsisISAdjIPAddrCircIndex, csRipGlobalConfLogLevelFlag=csRipGlobalConfLogLevelFlag, csRipIfConfEntry=csRipIfConfEntry, csOrionVrDhcpRelayServerEntry=csOrionVrDhcpRelayServerEntry, csOrionPbf=csOrionPbf, csOrionFwSmtpConfigEnd=csOrionFwSmtpConfigEnd, csOrionIpLocalAddrPoolStartRange=csOrionIpLocalAddrPoolStartRange, csFrDlcmiStatus=csFrDlcmiStatus, csBgpNbrGroupExpPolEntry=csBgpNbrGroupExpPolEntry, csAtmInterfaceConfIlmiVersion=csAtmInterfaceConfIlmiVersion, csOrionFwFtpAuthStatus=csOrionFwFtpAuthStatus, csOrionNatUdpTimeout=csOrionNatUdpTimeout, csOrionOc3Alarm=csOrionOc3Alarm, csIsisL2SummAddrEntry=csIsisL2SummAddrEntry, csRtPolicyPrefixListMatchType=csRtPolicyPrefixListMatchType, csOrionAAAServerIpAddress=csOrionAAAServerIpAddress, csEthSubIfTable=csEthSubIfTable, csRtPolicyPrefixListName=csRtPolicyPrefixListName)
mibBuilder.exportSymbols("COSINE-ORION-MIB", csOrionFwFtpPolicyName=csOrionFwFtpPolicyName, csOrionL2tpConfigTunnelHelloInterval=csOrionL2tpConfigTunnelHelloInterval, csPppoeAcIfStatPppAuthFails=csPppoeAcIfStatPppAuthFails, csOrionMpls=csOrionMpls, csOrionSnmpAgentErrorNmsRequestId=csOrionSnmpAgentErrorNmsRequestId, csDs3Ds1ConfigTable=csDs3Ds1ConfigTable, SPPBaudRate=SPPBaudRate, csDs3StatTotalCESs=csDs3StatTotalCESs, csOrionPowerSupplyMonitorStatusChange=csOrionPowerSupplyMonitorStatusChange, csDs3ConfigModuleIndex=csDs3ConfigModuleIndex, csFRoIPCircuitDlci=csFRoIPCircuitDlci, csOrionRadiusAcctVrId=csOrionRadiusAcctVrId, csOrionVPNVRouterIpRouteRowStatus=csOrionVPNVRouterIpRouteRowStatus, csIsisSysIDFieldLenMismatches=csIsisSysIDFieldLenMismatches, csOrionFwFtpPolicyEntry=csOrionFwFtpPolicyEntry, csPppoeAcIfConfigEntry=csPppoeAcIfConfigEntry, csOrionSyslogdReceiverAddr=csOrionSyslogdReceiverAddr, csOrionSystemIpAddress=csOrionSystemIpAddress, csChDs3RowStatus=csChDs3RowStatus, csMplsLspStandbyPaths=csMplsLspStandbyPaths, csOrionLogin=csOrionLogin, csOrionIKESvrParamAccountingList=csOrionIKESvrParamAccountingList, csOrionL2tpTunnelRemoteIpAddress=csOrionL2tpTunnelRemoteIpAddress, csImpPolPeerAS=csImpPolPeerAS, csBgpNbrId=csBgpNbrId, csEthStatsRxRuntCounts=csEthStatsRxRuntCounts, csOrionIpSecTransform1=csOrionIpSecTransform1, csOrionVPNVRouterIpInReceives=csOrionVPNVRouterIpInReceives, csOc3AtmIntervalValidData=csOc3AtmIntervalValidData, csOrionAAAServerListConfigTableEnd=csOrionAAAServerListConfigTableEnd, csOrionFRoIPTransportDefaultSlot=csOrionFRoIPTransportDefaultSlot, csOrionFwInsideIfRowStatus=csOrionFwInsideIfRowStatus, csOrionManualCryptoMapTable=csOrionManualCryptoMapTable, csOrionTrapReceiverRowStatus=csOrionTrapReceiverRowStatus, csRtPolicyTermActionVpnSooOp=csRtPolicyTermActionVpnSooOp, csChDs3Table=csChDs3Table, csOrionAAAServerListConfigEntry=csOrionAAAServerListConfigEntry, csOrionEngineFreeMemoryLong=csOrionEngineFreeMemoryLong, csOrionSystemLoginUserDesc=csOrionSystemLoginUserDesc, csOspfExpPolTable=csOspfExpPolTable, csIsisISAdjUsage=csIsisISAdjUsage, csOrionIKECryptoMapTransformSet4=csOrionIKECryptoMapTransformSet4, csOrionFwAolPolicyTable=csOrionFwAolPolicyTable, csOrionFwPlugPolicyRowStatus=csOrionFwPlugPolicyRowStatus, csOrionIpSecEvLogEntry=csOrionIpSecEvLogEntry, csOrionDhcpRelayOutRels=csOrionDhcpRelayOutRels, csOspfVirtIfAuthType=csOspfVirtIfAuthType, csFrErrType=csFrErrType, csDs3StatIntervalPCVs=csDs3StatIntervalPCVs, csBgpNbrGroupIpv4AdminStatus=csBgpNbrGroupIpv4AdminStatus, csIsisSysSPFL2Int=csIsisSysSPFL2Int, csOrionIpSecStatsAhCryptoCepEstablishOk=csOrionIpSecStatsAhCryptoCepEstablishOk, csOrionTraceRouteResultHopAddr=csOrionTraceRouteResultHopAddr, csOrionFwCompuServeConfigEnd=csOrionFwCompuServeConfigEnd, csOspfStubAreaId=csOspfStubAreaId, csOrionEngineMemoryBytesFreed=csOrionEngineMemoryBytesFreed, csFrCircuitDiscards=csFrCircuitDiscards, csRsvpIfEnabled=csRsvpIfEnabled, csOrionBladeNumSharcCrypto=csOrionBladeNumSharcCrypto, csRtPolicyPrefixListRowStatus=csRtPolicyPrefixListRowStatus, csOrionEngineInstructionCacheSize=csOrionEngineInstructionCacheSize, csOc3PathCurrentStatus=csOc3PathCurrentStatus, csOrionVPNRadiusSvrList=csOrionVPNRadiusSvrList, csOrionIKECryptoMapTransformSet6=csOrionIKECryptoMapTransformSet6, csOspfAreaLsaCksumSum=csOspfAreaLsaCksumSum, csOrionFwSmtpConfig=csOrionFwSmtpConfig, csOrionSystemTempStatus=csOrionSystemTempStatus, csOspfExtLsdbType=csOspfExtLsdbType, csOrionVrRadiusConfigTable=csOrionVrRadiusConfigTable, csRipExpPolTable=csRipExpPolTable, OSINSAddress=OSINSAddress, csOrionFwFtpAuthServers=csOrionFwFtpAuthServers, csOc3LineIntervalCVs=csOc3LineIntervalCVs, csOrionTunnelSwitchTargetTable=csOrionTunnelSwitchTargetTable, csExpPolMetric=csExpPolMetric, csBgpGenMaxPfx=csBgpGenMaxPfx, EvLogArea=EvLogArea, csDs3ConfigMdlPort=csDs3ConfigMdlPort, csRtPolicyTermFromVpnRouteTargetNamesListFlag=csRtPolicyTermFromVpnRouteTargetNamesListFlag, csOrionIpSecStatsAhCurrentInboundSAs=csOrionIpSecStatsAhCurrentInboundSAs, csOrionGreStatsUnknownProto=csOrionGreStatsUnknownProto, csOrionDynamicCryptoMapTransformSet2=csOrionDynamicCryptoMapTransformSet2, csOrionPptpInfo=csOrionPptpInfo, csFRoIPCircuitMulticast=csFRoIPCircuitMulticast, csOspfNbrTable=csOspfNbrTable, csRipImpPolEntry=csRipImpPolEntry, csOrionIpSecStatsAhTotalOutboundSAs=csOrionIpSecStatsAhTotalOutboundSAs, csOrionTraceRouteReqHops=csOrionTraceRouteReqHops, csOrionFrInfo=csOrionFrInfo, csOrionSyslogdFacility11=csOrionSyslogdFacility11, csPppoeSessionTable=csPppoeSessionTable, csDs3StatCurrentUASs=csDs3StatCurrentUASs, csIsisCircL2ErrorMetric=csIsisCircL2ErrorMetric, csOrionIKESvrParamIpAddress=csOrionIKESvrParamIpAddress, csAtmConnEthernetMacAddress=csAtmConnEthernetMacAddress, csExpPolEgpAS=csExpPolEgpAS, csMplsLspOperationStatus=csMplsLspOperationStatus, csRsvpIfHelloInterval=csRsvpIfHelloInterval, csOrionFwMsSqlPolicyRemoteServer=csOrionFwMsSqlPolicyRemoteServer, csIsisIPRADelMetricType=csIsisIPRADelMetricType, csOrionL2tpStatsPayloadRecvPackets=csOrionL2tpStatsPayloadRecvPackets, csOrionMlpppBundleIndex=csOrionMlpppBundleIndex, csUnchanDs3ConfigModuleIndex=csUnchanDs3ConfigModuleIndex, csOrionConfigSaveFileName=csOrionConfigSaveFileName, csFrDlcmiAddressLen=csFrDlcmiAddressLen, csOspfVirtNbrRtrId=csOspfVirtNbrRtrId, csOrionIKEPolicyEntry=csOrionIKEPolicyEntry, csOrionFwNwGroupInterface=csOrionFwNwGroupInterface, csRtPolicyTermFromOspfAreaType=csRtPolicyTermFromOspfAreaType, csAtmInterfaceConfVpcs=csAtmInterfaceConfVpcs, csOrionNatInsideLocalPort=csOrionNatInsideLocalPort, csMplsPathExpValue=csMplsPathExpValue, csOrionViStatsOutOctets=csOrionViStatsOutOctets, csAtmInterfaceConfReceivedBadAalType=csAtmInterfaceConfReceivedBadAalType, csMplsPathExclude=csMplsPathExclude, csOrionTrapReceiverTrapType=csOrionTrapReceiverTrapType, csOrionVPNVRouterManagedIpRouteEntry=csOrionVPNVRouterManagedIpRouteEntry, csOrionMlpppLinkTable=csOrionMlpppLinkTable, csOrionSyslogdFacility3=csOrionSyslogdFacility3, csOrionEngineSerialNumb=csOrionEngineSerialNumb, csOrionIKEStateMaxRetryDurationMicroSec=csOrionIKEStateMaxRetryDurationMicroSec, csPppoeAcIfConfigEvLogLevel=csPppoeAcIfConfigEvLogLevel, csPwe3EventLogArea=csPwe3EventLogArea, csOspfSpfDelay=csOspfSpfDelay, csOspfAreaSummary=csOspfAreaSummary, csLdpVrAutorouteAnnounce=csLdpVrAutorouteAnnounce, csTelnetConnTable=csTelnetConnTable, csOspfPacketSrc=csOspfPacketSrc, csOrionL2tpStatsActiveTunnels=csOrionL2tpStatsActiveTunnels, csDs3Ds1IntervalSESs=csDs3Ds1IntervalSESs, csIsisSysTable=csIsisSysTable, csMplsVrEventLogLevel=csMplsVrEventLogLevel, csFrDlcmiStatUnknownMessages=csFrDlcmiStatUnknownMessages, csFrDlcmiStatMissingResponses=csFrDlcmiStatMissingResponses, csRsvpIfRefreshMultiple=csRsvpIfRefreshMultiple, csMplsOspfExtensionsTable=csMplsOspfExtensionsTable, csRtPolicyTermFromNbrGroupName=csRtPolicyTermFromNbrGroupName, csOc3SectionIntervalEntry=csOc3SectionIntervalEntry, csOrionFwHttpAuthPerUserAuthFilter=csOrionFwHttpAuthPerUserAuthFilter, csOc3ApsActivePort=csOc3ApsActivePort, csOrionSystemLoginPermEntry=csOrionSystemLoginPermEntry, csDs3Ds1CurrentSEFSs=csDs3Ds1CurrentSEFSs, csFrDlcmiStatFullStatusEnquiries=csFrDlcmiStatFullStatusEnquiries, csOc3PathIntervalUASs=csOc3PathIntervalUASs, csOrionBladeEntry=csOrionBladeEntry, csOrionBackplaneInfo=csOrionBackplaneInfo, csIsisCircPtToPtCircID=csIsisCircPtToPtCircID, csOrionNumericListRowStatus=csOrionNumericListRowStatus, csOrionIKEStatsPhase2OutPkts=csOrionIKEStatsPhase2OutPkts, csOrionL2tpSessionLocalId=csOrionL2tpSessionLocalId, csVpnVrfTable=csVpnVrfTable, csOrionFwAolConfig=csOrionFwAolConfig, PathCost=PathCost, csOrionIpSecTransformName=csOrionIpSecTransformName, csOrionIKESvrParamTokenHashType=csOrionIKESvrParamTokenHashType, csEthOperStatus=csEthOperStatus, csIsisSysID=csIsisSysID, csBgpNbrGroupLogAreaFlag=csBgpNbrGroupLogAreaFlag, csOrionFwGenProxyConfig=csOrionFwGenProxyConfig, csOrionIpSecStateSAType=csOrionIpSecStateSAType, csOrionVPNRowStatus=csOrionVPNRowStatus, csOrionL2tpTunnelStatsState=csOrionL2tpTunnelStatsState, csOrionIKEDialupConnRemIpAddress=csOrionIKEDialupConnRemIpAddress, csMplsVrConfEntry=csMplsVrConfEntry, csDs3StatCurrentPCVs=csDs3StatCurrentPCVs, csOc3FarEndPerfMonControl=csOc3FarEndPerfMonControl, csMplsLspAge=csMplsLspAge, csOrionDevicePresent=csOrionDevicePresent, csOrionPktFilterInfoEnd=csOrionPktFilterInfoEnd, csOrionL2tpSessionRemoteIpAddress=csOrionL2tpSessionRemoteIpAddress, csOrionFRoIPConfMaxPeer=csOrionFRoIPConfMaxPeer, csRipGlobalConfAgeTime=csRipGlobalConfAgeTime, csIsisISAdjAreaAddrEntry=csIsisISAdjAreaAddrEntry, csOrionEngineApplicationDate=csOrionEngineApplicationDate, csDs3Ds1Fdl=csDs3Ds1Fdl, csOrionFwDestProxy=csOrionFwDestProxy, csOrionFwHttpFeatureIds=csOrionFwHttpFeatureIds, csOrionManualCryptoMapMatchAddress=csOrionManualCryptoMapMatchAddress, csPwVcSeqNumber=csPwVcSeqNumber, csOrionServiceProviderVrDown=csOrionServiceProviderVrDown, csOrionNatPoolTable=csOrionNatPoolTable, csOrionL2tpTunnelMaxRetransmissionTimeout=csOrionL2tpTunnelMaxRetransmissionTimeout, csOrionDHCPRelayInfo=csOrionDHCPRelayInfo, csOrionSystemReset=csOrionSystemReset, csOrionIKESvrParamAuthenticationList=csOrionIKESvrParamAuthenticationList, csIsisCircL1ExpenseMetric=csIsisCircL1ExpenseMetric, csOrionL2tpSessionLocalIpAddress=csOrionL2tpSessionLocalIpAddress, csDs3StatIntervalPSESs=csDs3StatIntervalPSESs, csOspfExtLsdbRouterId=csOspfExtLsdbRouterId, csBgpNbrLogAreaFlag=csBgpNbrLogAreaFlag, csOrionStatusPanelFWRelease=csOrionStatusPanelFWRelease, csRsvpIfResvTearIn=csRsvpIfResvTearIn, OtherMetric=OtherMetric, csOrionPppIfSubIfIndex=csOrionPppIfSubIfIndex, csDot1dTpFdbAddress=csDot1dTpFdbAddress, csOrionL2tpSessionRowStatus=csOrionL2tpSessionRowStatus, csOrionVPNVRouterIpRouteIfIndex=csOrionVPNVRouterIpRouteIfIndex, csOrionFwPlugPolicyRemoteServer=csOrionFwPlugPolicyRemoteServer, csOrionTunnelSwitchTargetEntry=csOrionTunnelSwitchTargetEntry, csDs3ConfigClockSource=csDs3ConfigClockSource, csIsisSysLSPIgnoreErrors=csIsisSysLSPIgnoreErrors, csOrionVrRadiusAcctSvrKey=csOrionVrRadiusAcctSvrKey, csOrionFwTelnetAuthStatus=csOrionFwTelnetAuthStatus, csDs3ConfigSlotIndex=csDs3ConfigSlotIndex, csFrDlcmiStatLostSequences=csFrDlcmiStatLostSequences, csAtmInterfaceConfReceivedDroppedPkts=csAtmInterfaceConfReceivedDroppedPkts, csBgpGenLocalAS=csBgpGenLocalAS, csDs3ConfigLoopbackType=csDs3ConfigLoopbackType, csOrionVIfFrameType=csOrionVIfFrameType, csOrionVPNVRouterUdpListenerLocalAddress=csOrionVPNVRouterUdpListenerLocalAddress, csOrionPppRemoteUserEntry=csOrionPppRemoteUserEntry, csIsisSysAdminStatus=csIsisSysAdminStatus, csOrionIpSecStatsEspCryptoCepEstablishFailed=csOrionIpSecStatsEspCryptoCepEstablishFailed, csOrionIKESvrParamSecretRecreate=csOrionIKESvrParamSecretRecreate, csOrionL2tpTunnelStatsTotalSessions=csOrionL2tpTunnelStatsTotalSessions, csDs3StatIntervalNumber=csDs3StatIntervalNumber, csLdpTargetKeepAliveTimer=csLdpTargetKeepAliveTimer, csOrionConfig=csOrionConfig, csOrionFwTelnetPolicyEntry=csOrionFwTelnetPolicyEntry, csOrionConnectionProfileVpnId=csOrionConnectionProfileVpnId, csAtmInterfaceConfReceivedInvalidVpiVciCells=csAtmInterfaceConfReceivedInvalidVpiVciCells, csRsvpIfBadResvErrIn=csRsvpIfBadResvErrIn, csOc3PosEmptyCellType=csOc3PosEmptyCellType, csOrionAddressListIpAddress=csOrionAddressListIpAddress, csOrionIpSecStatsAhCryptoCepEstablishFailed=csOrionIpSecStatsAhCryptoCepEstablishFailed, csOrionNumericListValue=csOrionNumericListValue, csOrionPingResultsSentProbes=csOrionPingResultsSentProbes, csOrionIpSecStatsAhDecryptPktsBad=csOrionIpSecStatsAhDecryptPktsBad, csOspfIfMd5MessageDigestKeyId=csOspfIfMd5MessageDigestKeyId, csOrionLnsConfigTable=csOrionLnsConfigTable, csOrionL2tpConfigPppRestartTimeout=csOrionL2tpConfigPppRestartTimeout, csOrionVPNVRouterIpRouteEntry=csOrionVPNVRouterIpRouteEntry, csMplsPathOspfAutoRouteAnnounce=csMplsPathOspfAutoRouteAnnounce, csOrionFwMsSqlPolicyTable=csOrionFwMsSqlPolicyTable, csOrionAAAServerListSvrName=csOrionAAAServerListSvrName, csOspfIfPollInterval=csOspfIfPollInterval, csOrionSystemShutdown=csOrionSystemShutdown, csDs3StatIntervalCCVs=csDs3StatIntervalCCVs, csDs3StatCurrentCCVs=csDs3StatCurrentCCVs, csOrionOc3AtmStats=csOrionOc3AtmStats, csOrionL2tpConfigPppAuthProtocol=csOrionL2tpConfigPppAuthProtocol, csBgpNbrGroupMaxPfxType=csBgpNbrGroupMaxPfxType, csOrionVrSpfIcmpCurrentConnTableEntries=csOrionVrSpfIcmpCurrentConnTableEntries, csIsisISAdjProtSuppEntry=csIsisISAdjProtSuppEntry, csOc3ValidIntervals=csOc3ValidIntervals, csOrionCiscoHdlcInfo=csOrionCiscoHdlcInfo, csIsisAreaAddrTable=csIsisAreaAddrTable, csOrionIpSecStatsEspCurrentOutboundSAs=csOrionIpSecStatsEspCurrentOutboundSAs, csIsisCircEntry=csIsisCircEntry, csOspfStubMetric=csOspfStubMetric, csOrionVrSpfUdpTotalConnTableEntries=csOrionVrSpfUdpTotalConnTableEntries, csOrionVrDhcpRelayServerName=csOrionVrDhcpRelayServerName, csIsisCircL1DesIS=csIsisCircL1DesIS, csOrionL2tpTunnelRemoteRWS=csOrionL2tpTunnelRemoteRWS)
mibBuilder.exportSymbols("COSINE-ORION-MIB", csOrionFRoIPTransportTable=csOrionFRoIPTransportTable, csOspfAreaAggregateAreaID=csOspfAreaAggregateAreaID, csOrionFwLnotesPolicyAuthenticate=csOrionFwLnotesPolicyAuthenticate, csTelnetSvrConfAdminStatus=csTelnetSvrConfAdminStatus, csOc3SectionDaySESs=csOc3SectionDaySESs, csOspfIfState=csOspfIfState, csOrionMlpppBundlePacketsReceived=csOrionMlpppBundlePacketsReceived, csOrionIKECryptoMapFlag=csOrionIKECryptoMapFlag, csOrionFwPlugPolicyTimeout=csOrionFwPlugPolicyTimeout, csOrionEngineFreeMemory=csOrionEngineFreeMemory, csOrionLogLinkPortIndex=csOrionLogLinkPortIndex, csOrionFwHttpPortNumber=csOrionFwHttpPortNumber, csIsisCircLANL2DesISChanges=csIsisCircLANL2DesISChanges, csOrionL2tpTunnelUpTime=csOrionL2tpTunnelUpTime, OrionIfIndex=OrionIfIndex, csOrionAAAServerListAdminEntry=csOrionAAAServerListAdminEntry, csOrionIKEStatsPhase2Negotiations=csOrionIKEStatsPhase2Negotiations, csOrionVPNVRouterIpAdEntOperStatus=csOrionVPNVRouterIpAdEntOperStatus, csAtmInterfaceConfTransmitOperationallyDown=csAtmInterfaceConfTransmitOperationallyDown, csOrionVPNVRouterManagedIpRouteMetric4=csOrionVPNVRouterManagedIpRouteMetric4, csOrionSpfInfoEnd=csOrionSpfInfoEnd, csOrionDhcpRelayOutOffers=csOrionDhcpRelayOutOffers, csOrionFRoIPConfNumActiveTransports=csOrionFRoIPConfNumActiveTransports, csUnchanDs3ConfigMdlGenerator=csUnchanDs3ConfigMdlGenerator, csMplsVrPathIdentifier=csMplsVrPathIdentifier, csOrionMlpppBundleEntry=csOrionMlpppBundleEntry, csOrionL2tpConfigPppEchoTimeout=csOrionL2tpConfigPppEchoTimeout, csRipIfStatTable=csRipIfStatTable, csOrionBladeIPSXLoaderDate=csOrionBladeIPSXLoaderDate, csPwVcInboundMTU=csPwVcInboundMTU, csOrionViDsByteFilterDirection=csOrionViDsByteFilterDirection, csDs3StatIntervalSEFSs=csDs3StatIntervalSEFSs, csOrionIKEPolicyName=csOrionIKEPolicyName, csOrionPppIfSlotIndex=csOrionPppIfSlotIndex, csTelnetSvrConfNumOfSessions=csTelnetSvrConfNumOfSessions, csOrionDynamicCryptoMapNumber=csOrionDynamicCryptoMapNumber, csOrionIKEStatsPhase1NegotiationsFailed=csOrionIKEStatsPhase1NegotiationsFailed, csFrDlcmiDceT392=csFrDlcmiDceT392, csOrionFanTrayFWMinorRevision=csOrionFanTrayFWMinorRevision, csExpFilterIfExpValue=csExpFilterIfExpValue, csOrionFwAccessSourceMask=csOrionFwAccessSourceMask, csOrionPppConfigHostname=csOrionPppConfigHostname, csOc3LineIntervalValidData=csOc3LineIntervalValidData, csOrionBladePort1MacAddr=csOrionBladePort1MacAddr, csOrionFwRshConfig=csOrionFwRshConfig, csOrionFanStatusChange=csOrionFanStatusChange, csOrionVrRadiusSvrTable=csOrionVrRadiusSvrTable, csOrionSystemLoginUserRowStatus=csOrionSystemLoginUserRowStatus, csDs3Ds1Framing=csDs3Ds1Framing, csOrionAirFlowCardFWMajorRevision=csOrionAirFlowCardFWMajorRevision, csOspfIfBackupDesignatedRouter=csOspfIfBackupDesignatedRouter, csOrionCBRFileError=csOrionCBRFileError, csOrionIKEStateBytesTransferred=csOrionIKEStateBytesTransferred, csDs3StatCurrentLSESs=csDs3StatCurrentLSESs, csOspfPrefInt=csOspfPrefInt, csOrionIpSecTransformMode=csOrionIpSecTransformMode, csOrionViStatsInOctets=csOrionViStatsInOctets, csOrionServiceTemplateEntry=csOrionServiceTemplateEntry, csOrionSystemGatewayAddress=csOrionSystemGatewayAddress, csOrionFanTrayEventTrapGeneration=csOrionFanTrayEventTrapGeneration, csOrionEngineConfigAttributes=csOrionEngineConfigAttributes, csOrionVPNVRouterIpDecTtl=csOrionVPNVRouterIpDecTtl, csOrionGreStatsTable=csOrionGreStatsTable, csOrionVPNVRouterIpRouteNextHop=csOrionVPNVRouterIpRouteNextHop, csRipIfConfFlashUpdate=csRipIfConfFlashUpdate, csAtmConnKind=csAtmConnKind, csExpFilterTableEnd=csExpFilterTableEnd, csOrionFileSysResultEntry=csOrionFileSysResultEntry, csOrionIKEStateNegotiations=csOrionIKEStateNegotiations, DefaultMetric=DefaultMetric, csOrionIpSecEventLogArea=csOrionIpSecEventLogArea, csOrionSystemBootConfig=csOrionSystemBootConfig, csRtPolicyTermFromPreference2=csRtPolicyTermFromPreference2, csOrionAirFlowCardTemperature=csOrionAirFlowCardTemperature, csOrionFwHttpPolicyHandoffAddr=csOrionFwHttpPolicyHandoffAddr, csOspfIfPassive=csOspfIfPassive, csOrionFwConfig=csOrionFwConfig, csOrionFwGenCfgEntry=csOrionFwGenCfgEntry, csOrionFwAccessDestMask=csOrionFwAccessDestMask, csChDs3ModuleIndex=csChDs3ModuleIndex, csDs3StatIntervalPESs=csDs3StatIntervalPESs, csOrionBladePortNumb=csOrionBladePortNumb, csRsvpIfQueueOperBandwidth=csRsvpIfQueueOperBandwidth, csOrionFwInsideIfIf=csOrionFwInsideIfIf, csOrionFwHttpAuthStatus=csOrionFwHttpAuthStatus, csOrionVrPktFilterIndex=csOrionVrPktFilterIndex, csOrionIKEStateSAIndex=csOrionIKEStateSAIndex, csOrionCustomerVrUp=csOrionCustomerVrUp, csRtPolicyTermEntry=csRtPolicyTermEntry, csOspfLsdbTable=csOspfLsdbTable, csIsisCircSmallHellos=csIsisCircSmallHellos, csOrionGenAclDstPortList=csOrionGenAclDstPortList, csOrionFwSmtpMaxRecip=csOrionFwSmtpMaxRecip, csOrionFwRshPolicyRemoteServer=csOrionFwRshPolicyRemoteServer, csOrionFwFtpConfigEntry=csOrionFwFtpConfigEntry, csOrionFarEndReceiveFailure=csOrionFarEndReceiveFailure, csOrionQueueClassOfService=csOrionQueueClassOfService, csOrionMlpppBundleEventLogLevel=csOrionMlpppBundleEventLogLevel, csOrionModemControl=csOrionModemControl, csRtPolicyTermActionOspfTag2Op=csRtPolicyTermActionOspfTag2Op, csIgmpCacheLastReporter=csIgmpCacheLastReporter, csVpnVrfAllowASIn=csVpnVrfAllowASIn, csIsisISAdjAreaAddrSysInstance=csIsisISAdjAreaAddrSysInstance, csEthStatsTx65To127Pkts=csEthStatsTx65To127Pkts, csMplsPathRecordRoute=csMplsPathRecordRoute, csOrionViPbfFilterAction=csOrionViPbfFilterAction, csOspfIfRetransInterval=csOspfIfRetransInterval, csAtmConnOamLoopbackManageVc=csAtmConnOamLoopbackManageVc, csOrionVPNVRouterTcpRtoMin=csOrionVPNVRouterTcpRtoMin, csBgpNbrAdminStatus=csBgpNbrAdminStatus, csOrionTrapReceiverEntry=csOrionTrapReceiverEntry, csOrionFileSysReqType=csOrionFileSysReqType, csAtmConnTransmittedArpResponses=csAtmConnTransmittedArpResponses, csOrionSnmpCommPriv=csOrionSnmpCommPriv, csOrionIpSecStatsAhEncryptPktsOk=csOrionIpSecStatsAhEncryptPktsOk, csOrionFwFtpAuthPasswdTimeout=csOrionFwFtpAuthPasswdTimeout, csEthStatsTx256To511Pkts=csEthStatsTx256To511Pkts, csOspfExpPolStatus=csOspfExpPolStatus, csOspfIfMetricTOS=csOspfIfMetricTOS, csOrionTraceRouteReqStatus=csOrionTraceRouteReqStatus, csBgpNbrVpnLogAreaFlag=csBgpNbrVpnLogAreaFlag, csOc3PathCurrentCVs=csOc3PathCurrentCVs, csOrionEngineIndex=csOrionEngineIndex, csRsvpIfIpNbrs=csRsvpIfIpNbrs, csMplsVrConfTable=csMplsVrConfTable, PwVcID=PwVcID, csUnchanDs3ConfigAdminStatus=csUnchanDs3ConfigAdminStatus, csOrionGeneralSys=csOrionGeneralSys, csBgpGenDampEnable=csBgpGenDampEnable, csOrionSystemBootImageName2=csOrionSystemBootImageName2, csBgpNbrGroupLocalAddr=csBgpNbrGroupLocalAddr, csDs3Ds1TotalCSSs=csDs3Ds1TotalCSSs, csOrionFwSmtpPolicyRelayReply=csOrionFwSmtpPolicyRelayReply, csOrionQueueMaxRandomForGreen=csOrionQueueMaxRandomForGreen, csRipExpPolId=csRipExpPolId, csAtmInterfaceConfTransmitBadLength=csAtmInterfaceConfTransmitBadLength, csPppoeSessionRowStatus=csPppoeSessionRowStatus, csDs3ConfigLoopbackStatus=csDs3ConfigLoopbackStatus, csOrionVPNOperStatus=csOrionVPNOperStatus, csOrionDynamicCryptoMapEntry=csOrionDynamicCryptoMapEntry, csAtmConnStaticArpCacheIpAddress=csAtmConnStaticArpCacheIpAddress, csEthAdminStatus=csEthAdminStatus, csRsvpIfDownPsbsCreated=csRsvpIfDownPsbsCreated, csAtmInterfaceConfReceivedBadAalLength=csAtmInterfaceConfReceivedBadAalLength, csOrionChangeTableOID=csOrionChangeTableOID, csEthSubIfEntry=csEthSubIfEntry, csOrionAAAServerRadiusKey=csOrionAAAServerRadiusKey, csOc3PosRcvFrameFCSError=csOc3PosRcvFrameFCSError, csAtmConnReceivedOamLoopBackResponses=csAtmConnReceivedOamLoopBackResponses, csOspfHostAreaID=csOspfHostAreaID, csOrionIKECertPrivateKey=csOrionIKECertPrivateKey, csPwVcPriority=csPwVcPriority, csAtmConnArpErrors=csAtmConnArpErrors, csDs3StatCurrentLESs=csDs3StatCurrentLESs, ISPriority=ISPriority, csPwVcForwardSlot=csPwVcForwardSlot, csOrionViPbfFilterAclId=csOrionViPbfFilterAclId, csExpFilterEntry=csExpFilterEntry, csMplsPathBandwidth=csMplsPathBandwidth, csMplsLspTo=csMplsLspTo, csLdpTargetPeerIpAddr=csLdpTargetPeerIpAddr, csOrionIKECryptoMapTransformSet3=csOrionIKECryptoMapTransformSet3, csOrionIKESvrParamSPISize=csOrionIKESvrParamSPISize, csAtmConnInArpGenericErrors=csAtmConnInArpGenericErrors, csOrionFWInfoEnd=csOrionFWInfoEnd, csOrionIKECryptoMapDynamicRouteAdd=csOrionIKECryptoMapDynamicRouteAdd, csOrionRadiusInfoEnd=csOrionRadiusInfoEnd, csIgmpStaticGroupStatus=csIgmpStaticGroupStatus, csOspfGeneralEntryRowStatus=csOspfGeneralEntryRowStatus, csIsisCircMeshGroupEnabled=csIsisCircMeshGroupEnabled, csAtmConnStaticArpCacheTable=csAtmConnStaticArpCacheTable, csPppoeSessionReceivedOctets=csPppoeSessionReceivedOctets, csOrionOc3Config=csOrionOc3Config, csLdpTargetHelloHoldTimer=csLdpTargetHelloHoldTimer, csOrionVPNVRouterManagedIpRouteMask=csOrionVPNVRouterManagedIpRouteMask, csOrionAirFlowCardEventTrapGeneration=csOrionAirFlowCardEventTrapGeneration, csOrionVPNVRouterIpRouteMask=csOrionVPNVRouterIpRouteMask, csOrionLnsConfigEntry=csOrionLnsConfigEntry, csIsisISAdjProtSuppSysInstance=csIsisISAdjProtSuppSysInstance, csOrionEngineLoaderProduct=csOrionEngineLoaderProduct, csDs3Ds1TotalUASs=csDs3Ds1TotalUASs, csOrionFwNntpPolicyTable=csOrionFwNntpPolicyTable, csPppoeAcIfStatPADIReject=csPppoeAcIfStatPADIReject, csAtmConnOamLoopbackStatus=csAtmConnOamLoopbackStatus, csBgpNbrImpPolId=csBgpNbrImpPolId, csRtPolicyTermToIsisLevel=csRtPolicyTermToIsisLevel, csOrionGenAclStartSrcPort=csOrionGenAclStartSrcPort, csOrionFwPop3PolicyName=csOrionFwPop3PolicyName, csEthSubIfRowStatus=csEthSubIfRowStatus, csLdpEntityTable=csLdpEntityTable, csOrionVPNNotifyInfo=csOrionVPNNotifyInfo, csDs3StatTotalPESs=csDs3StatTotalPESs, SNPAPrefix=SNPAPrefix, csOrionFwTelnetPolicyAuthenticate=csOrionFwTelnetPolicyAuthenticate, csAtmInterfaceConfMyNeighbourIpAddress=csAtmInterfaceConfMyNeighbourIpAddress, csOrionFwLdapPolicyName=csOrionFwLdapPolicyName, csOrionIKECryptoMapRemoteIdentity3=csOrionIKECryptoMapRemoteIdentity3, csOrionFwAccessDestAddr=csOrionFwAccessDestAddr, csPwVcPeerAddrType=csPwVcPeerAddrType, csOrionFwFtpAuthMechanism=csOrionFwFtpAuthMechanism, csEthDuplex=csEthDuplex, csOrionVPNVRouterUdpTable=csOrionVPNVRouterUdpTable, csOrionFwNetMeetingPolicyRowStatus=csOrionFwNetMeetingPolicyRowStatus, csOrionStaticConn=csOrionStaticConn, csOrionL2tpTunnelMaxSessions=csOrionL2tpTunnelMaxSessions, csIsisCircTableEnd=csIsisCircTableEnd, csOspfHostTable=csOspfHostTable, csOspfStubAreaTable=csOspfStubAreaTable, csOrionIKECryptoMapRemoteIdentityType1=csOrionIKECryptoMapRemoteIdentityType1, csFrDlcmiMonitoredEvents=csFrDlcmiMonitoredEvents, csOspfVirtIfAreaId=csOspfVirtIfAreaId, csBgpNbrGroupMaxPfx=csBgpNbrGroupMaxPfx, csOrionSystemLoginUserOperStatus=csOrionSystemLoginUserOperStatus, csBgpStats=csBgpStats, csOrionVPNTable=csOrionVPNTable, csOrionFwNntpPolicyRowStatus=csOrionFwNntpPolicyRowStatus, SPPModemStatus=SPPModemStatus, csOc3PosSentFrames=csOc3PosSentFrames, csMplsInterfaceUseInterfaceLabels=csMplsInterfaceUseInterfaceLabels, csExpPolBgpCommunity2=csExpPolBgpCommunity2, csOrionL2tpStatsTable=csOrionL2tpStatsTable, csAtmConnDynamicArpCacheRowStatus=csAtmConnDynamicArpCacheRowStatus, csOrionFwPlugPolicyEntry=csOrionFwPlugPolicyEntry, csOspfExtLsdbLsid=csOspfExtLsdbLsid, csIsisIPRADelMetric=csIsisIPRADelMetric, csOc3PathIntervalFCs=csOc3PathIntervalFCs, csOrionQueuePacketCount=csOrionQueuePacketCount, csOrionPppIfAdminStatus=csOrionPppIfAdminStatus, csOrionFwFtpFunctionIds=csOrionFwFtpFunctionIds, csMplsPathDropPrecedence=csMplsPathDropPrecedence, csOrionFwSmtpPolicyMaxBytes=csOrionFwSmtpPolicyMaxBytes, csOrionSystemLoginUserEntry=csOrionSystemLoginUserEntry, csMplsLspLastPathChange=csMplsLspLastPathChange, csOrionFwAccessPolicy=csOrionFwAccessPolicy, csOrionDynamicCryptoMapPeer=csOrionDynamicCryptoMapPeer, csOrionL2tpStatsDrainingTunnels=csOrionL2tpStatsDrainingTunnels, csPppoeAcIfConfigTable=csPppoeAcIfConfigTable, csOrionIKECryptoMapMatchAddress=csOrionIKECryptoMapMatchAddress, csOrionQoSMeterStatus=csOrionQoSMeterStatus, csIsisSysManAddrDropFromAreas=csIsisSysManAddrDropFromAreas, csIsisSysAuthFails=csIsisSysAuthFails, csOrionGenAclDstAddress=csOrionGenAclDstAddress, csOrionIKEPolicyPriority=csOrionIKEPolicyPriority, csOrionAAAServerLdapSearchFilter=csOrionAAAServerLdapSearchFilter, csAtmInterfaceConfModuleIndex=csAtmInterfaceConfModuleIndex, csAtmConnAal5CpcsTransmitSduSize=csAtmConnAal5CpcsTransmitSduSize, csOrionFwTelnetAuthServers=csOrionFwTelnetAuthServers, csOrionFwLnotesConfigEnd=csOrionFwLnotesConfigEnd, csOrionFwLnotesPolicyEntry=csOrionFwLnotesPolicyEntry, csAtmConnTable=csAtmConnTable, csOrionMlpppBundleReorderTimeout=csOrionMlpppBundleReorderTimeout, csOc3LineDayCVs=csOc3LineDayCVs, csTeMplsObjects=csTeMplsObjects, csOrionVPNVRouterTcpEntry=csOrionVPNVRouterTcpEntry)
mibBuilder.exportSymbols("COSINE-ORION-MIB", csFrCircuitReceivedFECNs=csFrCircuitReceivedFECNs, csBgpNetworkAddr=csBgpNetworkAddr, csOrionMeterEnd=csOrionMeterEnd, csOrionDhcpRelayOutReqs=csOrionDhcpRelayOutReqs, csOrionViQoSFilterServiceCategory=csOrionViQoSFilterServiceCategory, csDs3Ds1CurrentEntry=csDs3Ds1CurrentEntry, csOrionTraceRouteResultRtt1=csOrionTraceRouteResultRtt1, csDs3Ds1CurrentCSSs=csDs3Ds1CurrentCSSs, csOrionViQoSFilterMeterName=csOrionViQoSFilterMeterName, csFrErrEntry=csFrErrEntry, csRtPolicyTermFromNbrAddr=csRtPolicyTermFromNbrAddr, csOspfIfMetricTable=csOspfIfMetricTable, csOrionFwLdapPolicyRowStatus=csOrionFwLdapPolicyRowStatus, csMplsVrPathName=csMplsVrPathName, csOrionFwHostIndex=csOrionFwHostIndex, csOrionDhcpRelayOutDiscs=csOrionDhcpRelayOutDiscs, csFRoIPCircuitOperStatus=csFRoIPCircuitOperStatus, csOc3PathCurrentEntry=csOc3PathCurrentEntry, csMplsInterfaceConfEntry=csMplsInterfaceConfEntry, csIgmpInterfaceStatus=csIgmpInterfaceStatus, csEthTable=csEthTable, csEthEncapType=csEthEncapType, csOrionVPNVRouterIpAddrEntry=csOrionVPNVRouterIpAddrEntry, csOrionUdp=csOrionUdp, csOrionFileSysResultIndex=csOrionFileSysResultIndex, csRtPolicyTermFromIntfAddr=csRtPolicyTermFromIntfAddr, csOrionEngineSecondaryCacheSize=csOrionEngineSecondaryCacheSize, csFrDlcmiSlot=csFrDlcmiSlot, csOspfNbrState=csOspfNbrState, csAtmConnReceivedBufferAllocationFail=csAtmConnReceivedBufferAllocationFail, csMplsExtensionsRowStatus=csMplsExtensionsRowStatus, csRtPolicyTermActionBgpASPathOp=csRtPolicyTermActionBgpASPathOp, csDs3Ds1IntervalUASs=csDs3Ds1IntervalUASs, csBgpNbrRemoteAS=csBgpNbrRemoteAS, csRsvpSessionTable=csRsvpSessionTable, csRsvpVrEventLogArea=csRsvpVrEventLogArea, csOrionVrDhcpRelayServerAddress=csOrionVrDhcpRelayServerAddress, HelloRange=HelloRange, csOrionIKECryptoMapRemoteIdentity4=csOrionIKECryptoMapRemoteIdentity4, csIsisCircL2ISPriority=csIsisCircL2ISPriority, csOrionFRoIPTransportEventWindowSize=csOrionFRoIPTransportEventWindowSize, csOrionSystemLoginDomainRowStatus=csOrionSystemLoginDomainRowStatus, csOrionFwSmtpPolicyEntry=csOrionFwSmtpPolicyEntry, csOrionVrSpfConfTable=csOrionVrSpfConfTable, csOrionIKECryptoMapNumber=csOrionIKECryptoMapNumber, csOspfNbrEntry=csOspfNbrEntry, csOrionL2tpStatsFailedAuthentications=csOrionL2tpStatsFailedAuthentications, csOrionFwAccessPortNumber=csOrionFwAccessPortNumber, csRipGlobalRouteChanges=csRipGlobalRouteChanges, csVpnVrfAdminStatus=csVpnVrfAdminStatus, csOc3LinePrevDayTable=csOc3LinePrevDayTable, csRipIfConfSendDefRoute=csRipIfConfSendDefRoute, csAtmConnTransmittedOamLoopBackRequests=csAtmConnTransmittedOamLoopBackRequests, csOrionEngineTable=csOrionEngineTable, csEthStatsTx16CollisionCounts=csEthStatsTx16CollisionCounts, csAtmConnChannelIndex=csAtmConnChannelIndex, csOrionVrPrimaryDnsServer=csOrionVrPrimaryDnsServer, csBgpGenEntry=csBgpGenEntry, csOrionMlpppBundleQueueSize=csOrionMlpppBundleQueueSize, csIsisSysSPFL1Int=csIsisSysSPFL1Int, csOrionViPktFilterDirection=csOrionViPktFilterDirection, csOrionSyslogdStatus=csOrionSyslogdStatus, csOrionFwHttpPortAccess=csOrionFwHttpPortAccess, csOrionFwLnotesPolicyName=csOrionFwLnotesPolicyName, csOrionPingResultsErrors=csOrionPingResultsErrors, csOrionQueueGroupOperStatus=csOrionQueueGroupOperStatus, csOrionTrapReceiverComm=csOrionTrapReceiverComm, csPppoeAcIfStatPADSTransmit=csPppoeAcIfStatPADSTransmit, csOrionConfigChange=csOrionConfigChange, csRsvpIfQueueTableEnd=csRsvpIfQueueTableEnd, csMplsInterfaceAdminStatus=csMplsInterfaceAdminStatus, csOrionAAAServerListAdminRowStatus=csOrionAAAServerListAdminRowStatus, csIgmpAccessGroupEntry=csIgmpAccessGroupEntry, csFrDlcmiPollingInterval=csFrDlcmiPollingInterval, csIsisISAdjHoldTimer=csIsisISAdjHoldTimer, csIsisIPRAOperState=csIsisIPRAOperState, csOrionEngineOsVersion=csOrionEngineOsVersion, csDs3StatIntervalValidData=csDs3StatIntervalValidData, csOspfIfEntry=csOspfIfEntry, csDs3Ds1IntervalDMs=csDs3Ds1IntervalDMs, csAtmConnEvLogLevel=csAtmConnEvLogLevel, csOrionIKECertCertificate=csOrionIKECertCertificate, csIgmpCacheUpTime=csIgmpCacheUpTime, csOrionVpnAcctTable=csOrionVpnAcctTable, csOrionAlarmSeverityType=csOrionAlarmSeverityType, csOrionTunnelSwitchTable=csOrionTunnelSwitchTable, csDs3Ds1TotalTable=csDs3Ds1TotalTable, csIsisISAdjIPAddrAdjIndex=csIsisISAdjIPAddrAdjIndex, csOrionBladeSharcCryptoAssembly1=csOrionBladeSharcCryptoAssembly1, csOrionSnmpCommRowStatus=csOrionSnmpCommRowStatus, csDs3StatTotalTable=csDs3StatTotalTable, csAtmInterfaceConfEntry=csAtmInterfaceConfEntry, csOrionFwMsSqlConfigEnd=csOrionFwMsSqlConfigEnd, csOrionL2tpStatsControlRecvPackets=csOrionL2tpStatsControlRecvPackets, csOrionMlpppBundleRowStatus=csOrionMlpppBundleRowStatus, csRtPolicyTermFromIsisLevel=csRtPolicyTermFromIsisLevel, csOrionVrAcctCompStats=csOrionVrAcctCompStats, csOrionFwCompuServePolicyName=csOrionFwCompuServePolicyName, csLdpTargetEntry=csLdpTargetEntry, csRtPolicyTermActionMetric=csRtPolicyTermActionMetric, csOrionFwAccCfgFlag=csOrionFwAccCfgFlag, csOrionSyslogdFacility1=csOrionSyslogdFacility1, csOrionSystem=csOrionSystem, csOrionBladeFPGAVersion=csOrionBladeFPGAVersion, csOrionExpFilterInfo=csOrionExpFilterInfo, csIsisAreaAddrSysInstance=csIsisAreaAddrSysInstance, csOrionVrDsByteFilterRowStatus=csOrionVrDsByteFilterRowStatus, csOrionVPNServerInfo=csOrionVPNServerInfo, csOrionNumericListUpperLimit=csOrionNumericListUpperLimit, csOrionIKEStateCryptoAlgorithm=csOrionIKEStateCryptoAlgorithm, csOrionStatusPanelPortModemStatus=csOrionStatusPanelPortModemStatus, csOrionFwHttpPolicyTable=csOrionFwHttpPolicyTable, csDs3ConfigEntry=csDs3ConfigEntry, csIsisCircManL2Only=csIsisCircManL2Only, csIsisIPRAExpMetric=csIsisIPRAExpMetric, csOrionNatStaticTranslationType=csOrionNatStaticTranslationType, csOspfIfAuthKey=csOspfIfAuthKey, csOrionPppIfEvLogArea=csOrionPppIfEvLogArea, csIsisCircL2DesIS=csIsisCircL2DesIS, csOrionIpSecStateSAFlag=csOrionIpSecStateSAFlag, csBgpGenLogAreaFlag=csBgpGenLogAreaFlag, csOrionOc3AlarmClear=csOrionOc3AlarmClear, csRtPolicyTermFromPrefixNamesListFlag=csRtPolicyTermFromPrefixNamesListFlag, csRtPolicyTermActionVpnRouteTargetNamesListFlag=csRtPolicyTermActionVpnRouteTargetNamesListFlag, csIsisCircOperState=csIsisCircOperState, csMplsPathBgpAutoRouteAnnounce=csMplsPathBgpAutoRouteAnnounce, csUnchanDs3ConfigInvalidInterval=csUnchanDs3ConfigInvalidInterval, csOrionGreConfigEntry=csOrionGreConfigEntry, csIsisCircL1MinLSPTransInt=csIsisCircL1MinLSPTransInt, csOrionNatStaticVITranslationStatus=csOrionNatStaticVITranslationStatus, csOrionFRoIPConfDefaultWindowSize=csOrionFRoIPConfDefaultWindowSize, csOrionVPNVRouterOperStatus=csOrionVPNVRouterOperStatus, csOrionGreStatsHeaderErrors=csOrionGreStatsHeaderErrors, csOrionSyslogdFacility9=csOrionSyslogdFacility9, csOrionRestoreSlotIndex=csOrionRestoreSlotIndex, csOc3SectionIntervalCVs=csOc3SectionIntervalCVs, csOrionPowerSupplyControlInfo=csOrionPowerSupplyControlInfo, csOrionOspf=csOrionOspf, csUnchanDs3ConfigTable=csUnchanDs3ConfigTable, csOc3SectionPrevDayEntry=csOc3SectionPrevDayEntry, csBgpConfedAS=csBgpConfedAS, csOrionPppIfPortIndex=csOrionPppIfPortIndex, csDot1dPortEntry=csDot1dPortEntry, csRipIfConfSplitHorizon=csRipIfConfSplitHorizon, csOrionQoSMeterProfileColorMode=csOrionQoSMeterProfileColorMode, csExpPolAction=csExpPolAction, csMplsInterfaceAdminWeight=csMplsInterfaceAdminWeight, csMplsPathCOS=csMplsPathCOS, csOrionVPNVRouterIpStatsTable=csOrionVPNVRouterIpStatsTable, csPolicyRouteFilterEntry=csPolicyRouteFilterEntry, csOrionMlpppBundleTable=csOrionMlpppBundleTable, csOrionPptpConfMaxConn=csOrionPptpConfMaxConn, csOrionViPbfFilterNextHopIpAddr=csOrionViPbfFilterNextHopIpAddr, csOrionStatusPanelPortBaudRate=csOrionStatusPanelPortBaudRate, csOrionSystemCLIRadiusAuthentication=csOrionSystemCLIRadiusAuthentication, csBgpNbrImpPolTable=csBgpNbrImpPolTable, csOspfLsdbAreaId=csOspfLsdbAreaId, csBgpNbrGroupMhopGw=csBgpNbrGroupMhopGw, csOrionDhcpRelayStatsEntry=csOrionDhcpRelayStatsEntry, csOc3PosSentBytes=csOc3PosSentBytes, csOrionModemConnectWait=csOrionModemConnectWait, csOrionAirFlowCardFWRelease=csOrionAirFlowCardFWRelease, csExpFilterDirection=csExpFilterDirection, csOrionFRoIPTransportOutPkts=csOrionFRoIPTransportOutPkts, csAtmInterfaceConfStatsEntry=csAtmInterfaceConfStatsEntry, csIsisExpPolId=csIsisExpPolId, csIsisCircExtDomain=csIsisCircExtDomain, csOrionModuleIndex=csOrionModuleIndex, csOrionVPNVRouterIndex=csOrionVPNVRouterIndex, PerfCurrentCount=PerfCurrentCount, csPppoeStatistics=csPppoeStatistics, csOrionVPNVRouterTcpOutSegs=csOrionVPNVRouterTcpOutSegs, csOspfHostTOS=csOspfHostTOS, csIsisCircMinBroadLSPTransInt=csIsisCircMinBroadLSPTransInt, csOrionIKECryptoMapSaLifetimeSoftSec=csOrionIKECryptoMapSaLifetimeSoftSec, csBgpNbrGroupRemoteAS=csBgpNbrGroupRemoteAS, csOrionIKEPolicyPfsGroup=csOrionIKEPolicyPfsGroup, csOrionNatStaticTranslationStatus=csOrionNatStaticTranslationStatus, csOrionPingResults=csOrionPingResults, csOrionFwProxyConfig=csOrionFwProxyConfig, csIsisCircL1PartSNPInterval=csIsisCircL1PartSNPInterval, csOrionAccessListTable=csOrionAccessListTable, csIsisL2SummAddrSysInstance=csIsisL2SummAddrSysInstance, csOrionFwSmtpMaxBytes=csOrionFwSmtpMaxBytes, csOrionNatStaticInsideGlobalAddress=csOrionNatStaticInsideGlobalAddress, csIsisISAdjProtSuppAdjIndex=csIsisISAdjProtSuppAdjIndex, csMplsVrPathConfEntry=csMplsVrPathConfEntry, csRsvpSessionDownRsbs=csRsvpSessionDownRsbs, csOrionFanSpeed=csOrionFanSpeed, csOspfIfMetricIpAddress=csOspfIfMetricIpAddress, csIsisExpPolTable=csIsisExpPolTable, csDs3Ds1ConfigEntry=csDs3Ds1ConfigEntry, csOrionVrDsByteFilterDirection=csOrionVrDsByteFilterDirection, csDs3StatCurrentTable=csDs3StatCurrentTable, csOrionDynamicCryptoMapTable=csOrionDynamicCryptoMapTable, csOspfPacketType=csOspfPacketType, csOrionIpSecStatsEspDecryptPktsOk=csOrionIpSecStatsEspDecryptPktsOk, csEthStatsTxColCounts=csEthStatsTxColCounts, csOspfNbmaNbrPermanence=csOspfNbmaNbrPermanence, csOc3PathPrevDayEntry=csOc3PathPrevDayEntry, csOrionVPNVRouterIpForwarding=csOrionVPNVRouterIpForwarding, csOrionNumericListTable=csOrionNumericListTable, csDs3StatCurrentCESs=csDs3StatCurrentCESs, csEthSubIfOpStatus=csEthSubIfOpStatus, csRtPolicyTermFromOspfTag1=csRtPolicyTermFromOspfTag1, csChDs3T1Number=csChDs3T1Number, csRipIfConfStatus=csRipIfConfStatus, csOrionFwNntpConfigEnd=csOrionFwNntpConfigEnd, csIsisISAdjNeighSysType=csIsisISAdjNeighSysType, csOc3LineCurrentEntry=csOc3LineCurrentEntry, csOrionI2CDeviceId=csOrionI2CDeviceId, csOrionPptpInfoEnd=csOrionPptpInfoEnd, csOrionPktFilterInfo=csOrionPktFilterInfo, csOrionDynamicCryptoMapStatus=csOrionDynamicCryptoMapStatus, csOrionFwHostAddr=csOrionFwHostAddr, csPppoeAcIfConfigTableEnd=csPppoeAcIfConfigTableEnd, csOrionVPNName=csOrionVPNName, csOrionEngineUtilizationMedium=csOrionEngineUtilizationMedium, csChDs3Speed=csChDs3Speed, csFrCircuitSentFrames=csFrCircuitSentFrames, csOrionPingCtlLength=csOrionPingCtlLength, csOrionNatIcmpTimeout=csOrionNatIcmpTimeout, csTelnetSvrConfTable=csTelnetSvrConfTable, csIsisCircOutCtrlPDUs=csIsisCircOutCtrlPDUs, csOrionLnsConfigAdminStatus=csOrionLnsConfigAdminStatus, csOrionSyslogdTable=csOrionSyslogdTable, csBgpNbrMaxPfxType=csBgpNbrMaxPfxType, csPppoeAcIfStatEntry=csPppoeAcIfStatEntry, csOrionPppInfoEnd=csOrionPppInfoEnd, csOrionVrDhcpRelayServerTable=csOrionVrDhcpRelayServerTable, csOcNSpeed=csOcNSpeed, csOrionChassisPacketRingStatus=csOrionChassisPacketRingStatus, csOrionL2tpInfoEnd=csOrionL2tpInfoEnd, csOspfLsdbAge=csOspfLsdbAge, csOrionQoSMeterProfileCIR=csOrionQoSMeterProfileCIR, csOrionIpSecStateLocalGateway=csOrionIpSecStateLocalGateway, csOrionFwSmtpConfigTable=csOrionFwSmtpConfigTable, csOrionSyslogd=csOrionSyslogd, csRsvpIfUdpRequired=csRsvpIfUdpRequired, csOrionFRoIPVIfaceId=csOrionFRoIPVIfaceId, csOrionIKEStateRemoteAddress=csOrionIKEStateRemoteAddress, csOspfExternLsaCount=csOspfExternLsaCount, csOrionAAAServerRowStatus=csOrionAAAServerRowStatus, csOrionVpnAcctEntry=csOrionVpnAcctEntry, csOrionDynamicCryptoMapPfs=csOrionDynamicCryptoMapPfs, csIgmpGeneralEntryRowStatus=csIgmpGeneralEntryRowStatus, csOrionAirFlowCardHWRevision=csOrionAirFlowCardHWRevision, csOrionGreStatsSequenceErrors=csOrionGreStatsSequenceErrors, csRipGlobalConfLogAreaFlag=csRipGlobalConfLogAreaFlag, csOrionGreStatsEntry=csOrionGreStatsEntry, CircuitID=CircuitID, csOrionBladeIPSXLoaderTime=csOrionBladeIPSXLoaderTime, csPppoeSessionReceiveOperDown=csPppoeSessionReceiveOperDown, csOrionSystemBootUserPassword=csOrionSystemBootUserPassword)
mibBuilder.exportSymbols("COSINE-ORION-MIB", csBgpNbrPassive=csBgpNbrPassive, csOrionPppIfRetransmit=csOrionPppIfRetransmit, csOrionFwPop3PolicyPopServer=csOrionFwPop3PolicyPopServer, csAtmInterfaceConfUniVersion=csAtmInterfaceConfUniVersion, csPolicyRouteFilterPrefix2=csPolicyRouteFilterPrefix2, csOrionMlpppLinkChannelIndex=csOrionMlpppLinkChannelIndex, csOspfAreaAggregateMask=csOspfAreaAggregateMask, csMplsVrConfRowStatus=csMplsVrConfRowStatus, csOrionNatPoolEndAddress=csOrionNatPoolEndAddress, LevelState=LevelState, csIsisSysLogLevelFlag=csIsisSysLogLevelFlag, csOrionAAAServerConfigTable=csOrionAAAServerConfigTable, csOrionViQoSFilterStatus=csOrionViQoSFilterStatus, csOrionFwGenProxyActiveSessions=csOrionFwGenProxyActiveSessions, csOrionBgpMaxPfxLimitEvent=csOrionBgpMaxPfxLimitEvent, csOrionNatPoolId=csOrionNatPoolId, csRtPolicyTermActionNextHopAddr=csRtPolicyTermActionNextHopAddr, csOrionIKECertEntry=csOrionIKECertEntry, csOrionFwSmtpLogRelay=csOrionFwSmtpLogRelay, csEthStatsTx128To255Pkts=csEthStatsTx128To255Pkts, InterfaceIndexOrZero=InterfaceIndexOrZero, csFrCircuitEntry=csFrCircuitEntry, csOspfIfMetricValue=csOspfIfMetricValue, csOrionVPNVRouterTcpAttemptFails=csOrionVPNVRouterTcpAttemptFails, csOc3ConfigTable=csOc3ConfigTable, csOrionVPNVRouterTcpTable=csOrionVPNVRouterTcpTable, csOrionOspfIfConfigError=csOrionOspfIfConfigError, csOrionOspfLsdbOverflow=csOrionOspfLsdbOverflow, csOrionEngineDescr=csOrionEngineDescr, csOrionFwNetMeetingConfigEnd=csOrionFwNetMeetingConfigEnd, csDs3ConfigTimeElapsed=csDs3ConfigTimeElapsed, csRtPolicyStrTable=csRtPolicyStrTable, csOc3SectionCurrentSESs=csOc3SectionCurrentSESs, csOrionIKEDialupConnIndex=csOrionIKEDialupConnIndex, csPppoeAcIfConfigAdminStatus=csPppoeAcIfConfigAdminStatus, csImpPolTable=csImpPolTable, csOrionFwSmtpLogSpam=csOrionFwSmtpLogSpam, csEthStatsRx128To255Pkts=csEthStatsRx128To255Pkts, csRipIfStatRcvBadRoutes=csRipIfStatRcvBadRoutes, csFrDlcmiIfType=csFrDlcmiIfType, csOrionIpSecStateHashAlgorithm=csOrionIpSecStateHashAlgorithm, csPppoeAcIfModuleIndex=csPppoeAcIfModuleIndex, csDs3StatTotalLSESs=csDs3StatTotalLSESs, csOrionFwTelnetPolicyTable=csOrionFwTelnetPolicyTable, csRipIfConfSend=csRipIfConfSend, csLdpEntityHelloHoldTimer=csLdpEntityHelloHoldTimer, csUnchanDs3ConfigMdlPath=csUnchanDs3ConfigMdlPath, csMplsVrPathExplicitRoute=csMplsVrPathExplicitRoute, csAtmConnOamLoopbackRetryPvcUpRetryDelay=csAtmConnOamLoopbackRetryPvcUpRetryDelay, csBgpNbrGroupNm=csBgpNbrGroupNm, csOrionIpLocalAddrPoolEntry=csOrionIpLocalAddrPoolEntry, csIsisSysMaxAreaAddrMismatches=csIsisSysMaxAreaAddrMismatches, csOrionEngineLargestFreeMemory=csOrionEngineLargestFreeMemory, csOspfExtLsdbSequence=csOspfExtLsdbSequence, csOrionVrQoSFilterStatus=csOrionVrQoSFilterStatus, csOrionStatusPanelPortIndex=csOrionStatusPanelPortIndex, csAtmConnTransmitQueueFull=csAtmConnTransmitQueueFull, csIsisCircL1CircID=csIsisCircL1CircID, csRtPolicyTermTable=csRtPolicyTermTable, csOrionBladeSharcCryptoModuleId2=csOrionBladeSharcCryptoModuleId2, csOrionQueueMinThresholdForGreen=csOrionQueueMinThresholdForGreen, csIsisSysLSPL1DbaseOloads=csIsisSysLSPL1DbaseOloads, csIgmpInterfaceProxyIfIndex=csIgmpInterfaceProxyIfIndex, csOrionIKECryptoMapSaLifetimeHardSec=csOrionIKECryptoMapSaLifetimeHardSec, csIsisISAdjProtSuppProtocol=csIsisISAdjProtSuppProtocol, csOrionPptpConfAuthentication=csOrionPptpConfAuthentication, csExpPolTable=csExpPolTable, csOrionSnmpAgentErrorNmsPort=csOrionSnmpAgentErrorNmsPort, csRtPolicyTermActionBgpMetricType=csRtPolicyTermActionBgpMetricType, csLdpVrPwe3AutorouteAnnounce=csLdpVrPwe3AutorouteAnnounce, csOrionMlpppBundleBytesReceived=csOrionMlpppBundleBytesReceived, csOrionFwDestTable=csOrionFwDestTable, csMplsLspTable=csMplsLspTable, csOrionSystemMajorVer=csOrionSystemMajorVer, csOc3SectionCurrentESs=csOc3SectionCurrentESs, csOc3SectionDaySEFSs=csOc3SectionDaySEFSs, csOspfLsdbEntry=csOspfLsdbEntry, csOrionIKESvrParamMaxKeyLength=csOrionIKESvrParamMaxKeyLength, csOrionVPNVRouterIpOutRequests=csOrionVPNVRouterIpOutRequests, csOrionL2tpTunnelStatsFailedSessions=csOrionL2tpTunnelStatsFailedSessions, csVpnVrfDescription=csVpnVrfDescription, csRsvpIfEgressLspsCreated=csRsvpIfEgressLspsCreated, csOrionDhcpRelayOutAcks=csOrionDhcpRelayOutAcks, csOrionTcpEnd=csOrionTcpEnd, csFRoIPCircuitExcessBurst=csFRoIPCircuitExcessBurst, csOrionVPNVRouterUdpListenerLocalPort=csOrionVPNVRouterUdpListenerLocalPort, csOrionVIfRateLimitInterval=csOrionVIfRateLimitInterval, csOrionQueueMaxThreshold=csOrionQueueMaxThreshold, csDs3StatTotalPSESs=csDs3StatTotalPSESs, csOspfOriginateNewLsas=csOspfOriginateNewLsas, csOrionFwAccessRowStatus=csOrionFwAccessRowStatus, csOrionVPNVRouterManagedIpRouteAge=csOrionVPNVRouterManagedIpRouteAge, csOrionNatPoolEntry=csOrionNatPoolEntry, csOrionIpSecEventLogLevel=csOrionIpSecEventLogLevel, csOrionDhcpRelayStatsTable=csOrionDhcpRelayStatsTable, csOrionFRoIPTransportKeepAlive=csOrionFRoIPTransportKeepAlive, csOrionEncryptInfo=csOrionEncryptInfo, csOrionQoSMeterProfileTable=csOrionQoSMeterProfileTable, csOrionFwHttpPolicyLog=csOrionFwHttpPolicyLog, csChDs3Encap=csChDs3Encap, csMplsLspTransitions=csMplsLspTransitions, csOrionAAAServiceInfo=csOrionAAAServiceInfo, csRsvpIfQueueEntry=csRsvpIfQueueEntry, csExpFilterIfDropPrecedence=csExpFilterIfDropPrecedence, csOrionAAAServerPort=csOrionAAAServerPort, csFRoIPCircuitReceivedOctets=csFRoIPCircuitReceivedOctets, csOspfRouterId=csOspfRouterId, csIgmpCacheSelf=csIgmpCacheSelf, csOrionFwNetMeetingPolicyEntry=csOrionFwNetMeetingPolicyEntry, csOrionQosInfo=csOrionQosInfo, csOrionVPNEntry=csOrionVPNEntry, csOspfVirtNbrEvents=csOspfVirtNbrEvents, csOrionSystemBootImageName3=csOrionSystemBootImageName3, csBgpNbrGroupRemovePrivateAs=csBgpNbrGroupRemovePrivateAs, csMplsLspLastTransition=csMplsLspLastTransition, csOrionL2tpStatsActiveSessions=csOrionL2tpStatsActiveSessions, csOspfGeneralEntry=csOspfGeneralEntry, csOrionTrapPowerSupplyIndex=csOrionTrapPowerSupplyIndex, csRtPolicyTermName=csRtPolicyTermName, csOrionVPNVRouterManagedIpRouteType=csOrionVPNVRouterManagedIpRouteType, csOrionBladeShutdown=csOrionBladeShutdown, csOrionSystemBootImageName1=csOrionSystemBootImageName1, csMplsPathAffinity=csMplsPathAffinity, csIgmpGeneralTable=csIgmpGeneralTable, csOrionEngineAssemblyNumb=csOrionEngineAssemblyNumb, csOrionIpSecTransform2=csOrionIpSecTransform2, csOc3LineIntervalFCs=csOc3LineIntervalFCs, csIgmpCacheIfIndex=csIgmpCacheIfIndex, csOrionL2tpTunnelEntry=csOrionL2tpTunnelEntry, csFrCircuitMulticast=csFrCircuitMulticast, csOrionPppInfo=csOrionPppInfo, csPppoeAcIfSubIfIndex=csPppoeAcIfSubIfIndex, csPppoeSessionReceivedPkts=csPppoeSessionReceivedPkts, csOrionSnmpGenStatus=csOrionSnmpGenStatus, csAtmInterfaceConfReceivedBufferAllocationFail=csAtmInterfaceConfReceivedBufferAllocationFail, csOrionCiscoHdlcAdminStatus=csOrionCiscoHdlcAdminStatus, csOrionPingCtlRowStatus=csOrionPingCtlRowStatus, csOrionSyslogdFacility2=csOrionSyslogdFacility2, csOrionConfigChangeType=csOrionConfigChangeType, csTelnetSvrInfo=csTelnetSvrInfo, csOspfIfTable=csOspfIfTable, csOrionFileSysReqRowStatus=csOrionFileSysReqRowStatus, csIsisSysOwnLSPPurges=csIsisSysOwnLSPPurges, csAtmConnReceivedOperationallyDown=csAtmConnReceivedOperationallyDown, csAtmConnInArpStatisticsEntry=csAtmConnInArpStatisticsEntry, csOrionPingCtlTtl=csOrionPingCtlTtl, csIsisIPRAExistState=csIsisIPRAExistState, csOrionGenAclStatus=csOrionGenAclStatus, csOrionVrRadiusSvrEntry=csOrionVrRadiusSvrEntry, csDot1dBaseBridgeTable=csDot1dBaseBridgeTable, csOrionFwCompuServePolicyRowStatus=csOrionFwCompuServePolicyRowStatus, csDs3Ds1TotalPCVs=csDs3Ds1TotalPCVs, csRsvpVrAdminStatus=csRsvpVrAdminStatus, csMplsInterfaceLabelMinIn=csMplsInterfaceLabelMinIn, csOrionDHCPInfoEnd=csOrionDHCPInfoEnd, csExpFilterIfRowStatus=csExpFilterIfRowStatus, csOrionFwSmtpRelayReply=csOrionFwSmtpRelayReply, csOrionRadiusAcctVpnId=csOrionRadiusAcctVpnId, csOrionDhcpRelayInDiscs=csOrionDhcpRelayInDiscs, csAtmConnTransmitDroppedPkts=csAtmConnTransmitDroppedPkts, csOrionMlpppInfoEnd=csOrionMlpppInfoEnd, csBgpNbrGroupImpPolRowStatus=csBgpNbrGroupImpPolRowStatus, csAtmConnAdminStatus=csAtmConnAdminStatus, OperStatus=OperStatus, csOrionOc3FarEndLine=csOrionOc3FarEndLine, csBgpGenDampHalfLife=csBgpGenDampHalfLife, csEthStatsTx512To1023Pkts=csEthStatsTx512To1023Pkts, csOrionFwGlobalConfig=csOrionFwGlobalConfig, csOrionFwTelnetAuthEntry=csOrionFwTelnetAuthEntry, csDs3StatIntervalLCVs=csDs3StatIntervalLCVs, csOrionSnmpCommAddr=csOrionSnmpCommAddr, csIsisCircIpAddress=csIsisCircIpAddress, csOrionFwHttpPortRowStatus=csOrionFwHttpPortRowStatus, csIsisCirc=csIsisCirc, csOrionVPNVRouterManagedIpRouteTable=csOrionVPNVRouterManagedIpRouteTable, csOrionFRoIPTransportWindowTimeout=csOrionFRoIPTransportWindowTimeout, csAtmInterfaceConfPortIndex=csAtmInterfaceConfPortIndex, csEthStatsTxPausePktsOk=csEthStatsTxPausePktsOk, csOc3TimeElapsed=csOc3TimeElapsed, csRtPolicyTermFromBgpCommNamesListFlag=csRtPolicyTermFromBgpCommNamesListFlag, csOspfRxNewLsas=csOspfRxNewLsas, csOrionTrapReceiverAddr=csOrionTrapReceiverAddr, csImpPolPreference=csImpPolPreference, csAtmConnInArpInReplies=csAtmConnInArpInReplies, csBgpNbrGroupImpPolId=csBgpNbrGroupImpPolId, csOrionNumericListEntry=csOrionNumericListEntry, csPolicyRouteFilterPrefixLen=csPolicyRouteFilterPrefixLen, csOc3PosEncapType=csOc3PosEncapType, csOspfIfMetric=csOspfIfMetric, csAtmConnReceivedBadAalLength=csAtmConnReceivedBadAalLength, csOrionIKEStateMaxRetryDuration=csOrionIKEStateMaxRetryDuration, csOrionBladeType=csOrionBladeType, csOrionVrPktFilterCounterStatus=csOrionVrPktFilterCounterStatus, csOrionPpoeInfoEnd=csOrionPpoeInfoEnd, csOrionFwHttpFunctionIds=csOrionFwHttpFunctionIds, csOrionFanTrayControlTable=csOrionFanTrayControlTable, csOspfExtLsdbChecksum=csOspfExtLsdbChecksum, csOspfAreaBdrRtrStatus=csOspfAreaBdrRtrStatus, csUnchanDs3ConfigSendCode=csUnchanDs3ConfigSendCode, csOrionChangeSourceUserName=csOrionChangeSourceUserName, csOrionVrNbnsConfigTable=csOrionVrNbnsConfigTable, csOrionVPNVRouterIpAdEntBcastAddr=csOrionVPNVRouterIpAdEntBcastAddr, csOrionSyslogdLevel1=csOrionSyslogdLevel1, cosineOrionMod=cosineOrionMod, csOspfConfigErrorType=csOspfConfigErrorType, csOrionIpSecTransformInitVector=csOrionIpSecTransformInitVector, PYSNMP_MODULE_ID=cosineOrionMod, csRsvpIfPathOut=csRsvpIfPathOut, csOrionAcctInfo=csOrionAcctInfo, csOc3PathIntervalNumber=csOc3PathIntervalNumber, DLCI=DLCI, csVpnVrfRouteDistinguisher=csVpnVrfRouteDistinguisher, csAtmInterfaceReceivedBadAAL5HdrTrailers=csAtmInterfaceReceivedBadAAL5HdrTrailers, csOrionStatusPanelPortRedundantStatus=csOrionStatusPanelPortRedundantStatus, csIsisIPRAErrMetric=csIsisIPRAErrMetric, csRsvpIfRefreshBlockadeMultiple=csRsvpIfRefreshBlockadeMultiple, csOrionVPNVRouterIpAdEntNetMask=csOrionVPNVRouterIpAdEntNetMask, csOspfStubMetricType=csOspfStubMetricType, csOrionPingResultsTimeOuts=csOrionPingResultsTimeOuts, csOrionVPNVRouterType=csOrionVPNVRouterType, csBgpGenHoldTimeConfigured=csBgpGenHoldTimeConfigured, csIgmpStaticGroupEntry=csIgmpStaticGroupEntry, csOrionSnmpTrapEntry=csOrionSnmpTrapEntry, csOspfNbrHelloSuppressed=csOspfNbrHelloSuppressed, csDs3ConfigTestT1Id=csDs3ConfigTestT1Id, csIsisAreaAddrEntry=csIsisAreaAddrEntry, csRsvpSessionUpPsbs=csRsvpSessionUpPsbs, csOrionQoSMeterAclList=csOrionQoSMeterAclList, csOrionFanTrayFWMajorRevision=csOrionFanTrayFWMajorRevision, csDs3StatTotalUASs=csDs3StatTotalUASs, csOrionNumConfigChanges=csOrionNumConfigChanges, csRtPolicyPrefixListPrefixLen=csRtPolicyPrefixListPrefixLen, csOrionMlpppBundleBytesSent=csOrionMlpppBundleBytesSent, csIsisCircL2MinLSPTransInt=csIsisCircL2MinLSPTransInt, csOrionL2tpStatsControlRecvOctets=csOrionL2tpStatsControlRecvOctets, csOrionNatPoolEndPort=csOrionNatPoolEndPort, csOrionVrSpfCleanTablesFlag=csOrionVrSpfCleanTablesFlag, csBgpNbrNextHopSelf=csBgpNbrNextHopSelf, csPwVcID=csPwVcID, csOrionFwAolPolicyRemotePort=csOrionFwAolPolicyRemotePort, csOrionVPNVRouterIpRouteMetric3=csOrionVPNVRouterIpRouteMetric3, csAtmConnInArpManageStatus=csAtmConnInArpManageStatus, csOc3PathCurrentWidth=csOc3PathCurrentWidth, csOc3SectionDayTable=csOc3SectionDayTable, csOrionBladeReset=csOrionBladeReset, csBgpNbrGroupAdminStatus=csBgpNbrGroupAdminStatus, csOrionL2tpTunnelActiveSessionsCount=csOrionL2tpTunnelActiveSessionsCount, csOrionManualCryptoMapOutboundAHSPI=csOrionManualCryptoMapOutboundAHSPI, csMplsInterfaceOperStatus=csMplsInterfaceOperStatus, csOrionFwNetMeetingPolicyTimeout=csOrionFwNetMeetingPolicyTimeout, csOrionChassisPacketRingProtToPrimEndpoint=csOrionChassisPacketRingProtToPrimEndpoint, csOrionVPNVRouterUdpListenerTable=csOrionVPNVRouterUdpListenerTable, csOrionEngineMemoryFrees=csOrionEngineMemoryFrees, csOrionFwGenCfgTable=csOrionFwGenCfgTable)
mibBuilder.exportSymbols("COSINE-ORION-MIB", csAtmConnInArpInvalidInReqs=csAtmConnInArpInvalidInReqs, csOrionIpSecStateSpi=csOrionIpSecStateSpi, csEthStatsRxLongCrcCounts=csEthStatsRxLongCrcCounts, csPosEncapsulation=csPosEncapsulation, csFrDlcmiName=csFrDlcmiName, csAtmConnReceivedPackets=csAtmConnReceivedPackets, csOrionManualCryptoMapInboundAHSPI=csOrionManualCryptoMapInboundAHSPI, csOrionVpnAcctCompStats=csOrionVpnAcctCompStats, csOrionEngineUtilization=csOrionEngineUtilization, csOspfVirtIfStatus=csOspfVirtIfStatus, csRtPolicyTermActionBgpLocalPrefOp=csRtPolicyTermActionBgpLocalPrefOp, csOrionPowerSupplyFWMinorRevision=csOrionPowerSupplyFWMinorRevision, csDot1dTpFdbTable=csDot1dTpFdbTable, csOrionVPNVRouterIpRouteMetric2=csOrionVPNVRouterIpRouteMetric2, csMplsPathName=csMplsPathName, csDnsServer=csDnsServer, csOrionMlpppBundleMaxLinks=csOrionMlpppBundleMaxLinks, csOspfIfMetricEntry=csOspfIfMetricEntry, csOrionIKESvrParamRadiusAcctUserTypePriority2=csOrionIKESvrParamRadiusAcctUserTypePriority2, csOrionVPNVRouterIpRouteTable=csOrionVPNVRouterIpRouteTable, csOspfAreaRowStatus=csOspfAreaRowStatus, csOrionNatStaticVINetmask=csOrionNatStaticVINetmask, csOspfExpPolId=csOspfExpPolId, csOrionL2tpTunnelStatsActiveSessions=csOrionL2tpTunnelStatsActiveSessions, csDot1dTpFdbSubPort=csDot1dTpFdbSubPort, csRtPolicyUserRowStatus=csRtPolicyUserRowStatus, csOrionIKEPolicyAuthorizationTypeFlag=csOrionIKEPolicyAuthorizationTypeFlag, csAtmInterfaceConfReceivedBadVc=csAtmInterfaceConfReceivedBadVc, csAtmConnAal5CpcsReceiveSduSize=csAtmConnAal5CpcsReceiveSduSize, csDs3StatIntervalLESs=csDs3StatIntervalLESs, csOrionEngineCpuType=csOrionEngineCpuType, csOrionIpSecStatsEspTotalInboundSAsFailed=csOrionIpSecStatsEspTotalInboundSAsFailed, csRsvpSessionDownPsbs=csRsvpSessionDownPsbs, csOspfNbrEvents=csOspfNbrEvents, csOrionPingCtlProbeCount=csOrionPingCtlProbeCount, csOrionVIfRemIpAddressType=csOrionVIfRemIpAddressType, csOrionVPNVRouterTcpConnState=csOrionVPNVRouterTcpConnState, csOrionViStatsInNUcastPkts=csOrionViStatsInNUcastPkts, csMplsLspRowStatus=csMplsLspRowStatus, csOspfIfMulticastForwarding=csOspfIfMulticastForwarding, csOrionVPNVRouterCreationTime=csOrionVPNVRouterCreationTime, csRtPolicyUserType=csRtPolicyUserType, csOrionVrSpfConnTblSize=csOrionVrSpfConnTblSize, csOrionNatProtocol=csOrionNatProtocol, csOrionServiceTemplateRowStatus=csOrionServiceTemplateRowStatus, csOrionBladeHwVer=csOrionBladeHwVer, csOrionFwSmtpPolicyTable=csOrionFwSmtpPolicyTable, csOrionVrDhcpRelayServerRowStatus=csOrionVrDhcpRelayServerRowStatus, csPppoeSessionDuration=csPppoeSessionDuration, csOrionDhcpRelayOutDecs=csOrionDhcpRelayOutDecs, csAtmInterfaceConfTransmittedBytes=csAtmInterfaceConfTransmittedBytes, csExpPolExtRteTag=csExpPolExtRteTag, csVpnVrfPreference=csVpnVrfPreference, csOspfPrefExt=csOspfPrefExt, csOrionIpSecEvLogLevel=csOrionIpSecEvLogLevel, csOrionPortInfo=csOrionPortInfo, csIsisCircL1HelloMultiplier=csIsisCircL1HelloMultiplier, csOrionQueueMinThresholdForRed=csOrionQueueMinThresholdForRed, csOrionFwGenProxyStatus=csOrionFwGenProxyStatus, csOrionFwRshPolicyRowStatus=csOrionFwRshPolicyRowStatus, csRsvpVrEventLogLevel=csRsvpVrEventLogLevel, csOrionMlpppLinkSlotIndex=csOrionMlpppLinkSlotIndex, csBgpNbrAddr=csBgpNbrAddr, csPolicyRouteFilterPrefixLen2=csPolicyRouteFilterPrefixLen2, csOrionVPNVRouterIpRouteInfo=csOrionVPNVRouterIpRouteInfo, csOrionFwTelnetPolicyTimeout=csOrionFwTelnetPolicyTimeout, csOrionL2tpStatsControlSendPackets=csOrionL2tpStatsControlSendPackets, csExpPolRipIp=csExpPolRipIp, csOrionIKECertTable=csOrionIKECertTable, csOrionL2tpTunnelTable=csOrionL2tpTunnelTable, csRsvpIfBadResvTearIn=csRsvpIfBadResvTearIn, csRtPolicyTermActionOspfTag=csRtPolicyTermActionOspfTag, csOrionPingEnd=csOrionPingEnd, csDot1dBaseBridgeAddress=csDot1dBaseBridgeAddress, csPwVcEntry=csPwVcEntry, csIsisCircL1HelloTimer=csIsisCircL1HelloTimer, csOc3SectionIntervalSESs=csOc3SectionIntervalSESs, csRtPolicyStrTableEnd=csRtPolicyStrTableEnd, csDs3Ds1IntervalLESs=csDs3Ds1IntervalLESs, csPppoeAcIfConfigServiceTemplateProfile=csPppoeAcIfConfigServiceTemplateProfile, csOc3SectionCurrentSEFSs=csOc3SectionCurrentSEFSs, csExpFilterDropPrecedence=csExpFilterDropPrecedence, csOrionOc3PosStatsEnd=csOrionOc3PosStatsEnd, csOrionRestoreBladeStatus=csOrionRestoreBladeStatus, csOrionFwProxyDaemonTable=csOrionFwProxyDaemonTable, AtmVpIdentifier=AtmVpIdentifier, csOrionStatusPanelHWRevision=csOrionStatusPanelHWRevision, csDs3StatTotalCCVs=csDs3StatTotalCCVs, csExpFilterTable=csExpFilterTable, csOc3ReceivedPathJ1=csOc3ReceivedPathJ1, csFrDlcmiAsyncEnabled=csFrDlcmiAsyncEnabled, csOrionFwHttpAuthServers=csOrionFwHttpAuthServers, csOrionVPNVRouterIpInHdrErrors=csOrionVPNVRouterIpInHdrErrors, csOrionIpSecStatsEspEncryptPktsOk=csOrionIpSecStatsEspEncryptPktsOk, csOrionPingCtlTestName=csOrionPingCtlTestName, csIsisIPRASNPAAddress=csIsisIPRASNPAAddress, csIsisISAdjAreaAddress=csIsisISAdjAreaAddress, csRsvpSessionTunnelID=csRsvpSessionTunnelID, csOspfIfMd5Key=csOspfIfMd5Key, csOc3SectionPrevDayCVs=csOc3SectionPrevDayCVs, csIsisISAdjUpTime=csIsisISAdjUpTime, csMplsPathIsisAutoRouteAnnounce=csMplsPathIsisAutoRouteAnnounce, csRtPolicyStrRowStatus=csRtPolicyStrRowStatus, csIsisSysMinL1LSPGenInt=csIsisSysMinL1LSPGenInt, csOrionEngineForwardingMode=csOrionEngineForwardingMode, csOrionPingResultsLates=csOrionPingResultsLates, csAtmInterfaceConfReceivedUnknownProtocolErrors=csAtmInterfaceConfReceivedUnknownProtocolErrors, csOrionEngineMemoryUtil=csOrionEngineMemoryUtil, csOrionPWE3=csOrionPWE3, csOrionVPNVRouterManagedIpRouteColor1=csOrionVPNVRouterManagedIpRouteColor1, csOspfVirtNbrLsRetransQLen=csOspfVirtNbrLsRetransQLen, csOrionConnectionProfileName=csOrionConnectionProfileName, csOrionNBNSInfoEnd=csOrionNBNSInfoEnd, csOrionEngineTemperature=csOrionEngineTemperature, csOrionSnmpTrapTable=csOrionSnmpTrapTable, csOrionFileSysReqStatus=csOrionFileSysReqStatus, csOrionVrAcctTable=csOrionVrAcctTable, csOrionFileSysResultFilename=csOrionFileSysResultFilename, csRtPolicyStrData=csRtPolicyStrData, csPppoeAcIfStatACSystemErrors=csPppoeAcIfStatACSystemErrors, csDs3E1IntBits=csDs3E1IntBits, csOrionViQoSFilterEntry=csOrionViQoSFilterEntry, csOrionFRoIPConfTable=csOrionFRoIPConfTable, csOrionIpSecStatsTable=csOrionIpSecStatsTable, csOrionViStatsRateLimitRxBytesDropped=csOrionViStatsRateLimitRxBytesDropped, csOrionVPNVRouterIpNetToMediaType=csOrionVPNVRouterIpNetToMediaType, csFrErrFaults=csFrErrFaults, csFrCircuitUpperProtocol=csFrCircuitUpperProtocol, csOrionGreAdminStatus=csOrionGreAdminStatus, csOrionVPNVRouterUdpListenerEntry=csOrionVPNVRouterUdpListenerEntry, csPppoeAcConfig=csPppoeAcConfig, csOrionFwLdapConfig=csOrionFwLdapConfig, csOspfExpPolEntry=csOspfExpPolEntry, csOrionLogLinkChannelIndex=csOrionLogLinkChannelIndex, csOrionFwDmzIfRowStatus=csOrionFwDmzIfRowStatus, csOrionFwAccessDestAddrList=csOrionFwAccessDestAddrList, csOrionNumericListType=csOrionNumericListType, csOrionFwPop3PolicyTimeout=csOrionFwPop3PolicyTimeout, csUnchanDs3ConfigMdlPort=csUnchanDs3ConfigMdlPort, csOrionIKEStateRetryTimerMicroSec=csOrionIKEStateRetryTimerMicroSec, csOspfAreaOperStatus=csOspfAreaOperStatus, csDs3Ds1IntervalESs=csDs3Ds1IntervalESs, csOspfIfDesignatedRouter=csOspfIfDesignatedRouter, csOrionIpSecStateExpire=csOrionIpSecStateExpire, csOrionVrDhcpRelayConfigEntry=csOrionVrDhcpRelayConfigEntry, csRtPolicyTermActionBgpCommOp=csRtPolicyTermActionBgpCommOp, csOrionBladeSlotLocation=csOrionBladeSlotLocation, csOrionFRoIPTransportRowStatus=csOrionFRoIPTransportRowStatus, csRtPolicyUserEntry=csRtPolicyUserEntry, csOrionAddressListRowStatus=csOrionAddressListRowStatus, csFRoIPCircuitType=csFRoIPCircuitType, csMplsPathPwe3AutoRouteAnnounce=csMplsPathPwe3AutoRouteAnnounce, csRtPolicyTermActionMetric2=csRtPolicyTermActionMetric2, csFrDlcmiDceN393=csFrDlcmiDceN393, MetricType=MetricType, csOrionDhcpRelayInDecs=csOrionDhcpRelayInDecs, csOrionTunnelSwitchMode=csOrionTunnelSwitchMode, csMplsLspOperationalPaths=csMplsLspOperationalPaths, csOrionFRoIPTransportPeer=csOrionFRoIPTransportPeer, csIsisL2SummAddress=csIsisL2SummAddress, csEthStatsTxMulticCollisionPktsOK=csEthStatsTxMulticCollisionPktsOK, csOrionL2tpSessionTable=csOrionL2tpSessionTable, csAtmInterfaceConfIlmiVpi=csAtmInterfaceConfIlmiVpi, csOrionIpSecStatsEntry=csOrionIpSecStatsEntry, csBgpNbrMhopGw=csBgpNbrMhopGw, csIsisSysPartChanges=csIsisSysPartChanges, csRsvpIfPathTearOut=csRsvpIfPathTearOut, csFrDlcmiInjectionManagement=csFrDlcmiInjectionManagement, csRsvpVrConfEntry=csRsvpVrConfEntry, csOspfAreaAggregateTable=csOspfAreaAggregateTable, csIsisCircIDFieldLenMismatches=csIsisCircIDFieldLenMismatches, csDot1dPortStatus=csDot1dPortStatus, csOrionVPNVRouterIpDefaultTTL=csOrionVPNVRouterIpDefaultTTL, csOrionFwHttpPortTable=csOrionFwHttpPortTable, csOrionFwNetMeetingPolicyTable=csOrionFwNetMeetingPolicyTable, csOrionQoSMeterProfile=csOrionQoSMeterProfile, csOrionPortIndex=csOrionPortIndex, csOc3PosStatsEntry=csOc3PosStatsEntry, csMplsPathVpnAutoRouteAnnounce=csMplsPathVpnAutoRouteAnnounce, csDs3Ds1LoopbackType=csDs3Ds1LoopbackType, csOrionVrDsByteFilterTable=csOrionVrDsByteFilterTable, csOrionFwHttpPolicyEntry=csOrionFwHttpPolicyEntry, csAtmConnTransmitBadLength=csAtmConnTransmitBadLength, csBgpNetworkMask=csBgpNetworkMask, csOrionStatusPanelPortEntry=csOrionStatusPanelPortEntry, csOrionAddressListTableEnd=csOrionAddressListTableEnd, csOspfTrapControl=csOspfTrapControl, csOrionEncryptInfoEnd=csOrionEncryptInfoEnd, csOrionServiceTemplateConnProfileRowStatus=csOrionServiceTemplateConnProfileRowStatus, csIsisISAdjIPAddrTable=csIsisISAdjIPAddrTable, csOrionFwFtpAuthServiceType=csOrionFwFtpAuthServiceType, csPppoeSessionReceivedErrors=csPppoeSessionReceivedErrors, csDs3Ds1TotalESs=csDs3Ds1TotalESs, csOc3PosStatsTable=csOc3PosStatsTable, csOrionVIfaceEntry=csOrionVIfaceEntry, csOrionIKEStatsPhase2InPkts=csOrionIKEStatsPhase2InPkts, csOspfAreaLsaCount=csOspfAreaLsaCount, csOrionVPNVRouterFailOver=csOrionVPNVRouterFailOver, csOrionPppIfConfigReqRtx=csOrionPppIfConfigReqRtx, csOrionFRoIPAdminStatus=csOrionFRoIPAdminStatus, csAtmConnReceivedGenericErrors=csAtmConnReceivedGenericErrors, csOrionPingResultsAverageRtt=csOrionPingResultsAverageRtt, csRtPolicyTermActionBgpOrigin=csRtPolicyTermActionBgpOrigin, csOrionSystemBootServerAddress=csOrionSystemBootServerAddress, csOrionL2tpTunnelRWS=csOrionL2tpTunnelRWS, csOrionCiscoHdlcPortIndex=csOrionCiscoHdlcPortIndex, csDs3Ds1TotalLCVs=csDs3Ds1TotalLCVs, csRsvpIfUdpNbrs=csRsvpIfUdpNbrs, csRtPolicyTermFromBgpASPathName=csRtPolicyTermFromBgpASPathName, csDs3Ds1CurrentBESs=csDs3Ds1CurrentBESs, csMplsVrConfOpCode=csMplsVrConfOpCode, csIsisIPRAType=csIsisIPRAType, csOrionVrPktFilterEvlogStatus=csOrionVrPktFilterEvlogStatus, csOrionBgpEnd=csOrionBgpEnd, csUnchanDs3ConfigMdlIdleSig=csUnchanDs3ConfigMdlIdleSig, csOrionIpSecStatsAhTotalInboundSAsFailed=csOrionIpSecStatsAhTotalInboundSAsFailed, csFRoIPCircuitRowStatus=csFRoIPCircuitRowStatus, csOrionIKECryptoMapPfsGroup=csOrionIKECryptoMapPfsGroup, csOrionFwAolPolicyName=csOrionFwAolPolicyName, csOrionEngineMemoryAllocFailures=csOrionEngineMemoryAllocFailures, csBgpConfed=csBgpConfed, csIgmpInterfaceJoins=csIgmpInterfaceJoins, MplsLsrIdentifier=MplsLsrIdentifier, csBgpNbrGroupExpPolRowStatus=csBgpNbrGroupExpPolRowStatus, csPppoeAcIfStatAccessVRFails=csPppoeAcIfStatAccessVRFails, csOrionGenSnmp=csOrionGenSnmp, csDs3ConfigMdlPfi=csDs3ConfigMdlPfi, csDs3Ds1IntervalLCVs=csDs3Ds1IntervalLCVs, csOrionNatStaticIfIndex=csOrionNatStaticIfIndex, csUnchanDs3ConfigClockSource=csUnchanDs3ConfigClockSource, csOrionVPNVRouterOperLocations=csOrionVPNVRouterOperLocations, csIsisCircType=csIsisCircType, csMplsLspTimeUp=csMplsLspTimeUp, csOrionIpSecStatsAhTotalOutboundSAsFailed=csOrionIpSecStatsAhTotalOutboundSAsFailed, csDs3ConfigMdlGenerator=csDs3ConfigMdlGenerator, csOrionL2tpSessionState=csOrionL2tpSessionState, csRtPolicyStrType=csRtPolicyStrType, csAtmInterfaceConfTransmitIncomplete=csAtmInterfaceConfTransmitIncomplete, csRsvpIfDownRsbsCreated=csRsvpIfDownRsbsCreated, csBgpNbrGroupExpPolId=csBgpNbrGroupExpPolId, csIgmpInterfaceQueryInterval=csIgmpInterfaceQueryInterval, csLdpVrEventLogAreaMask=csLdpVrEventLogAreaMask, csOc3PathDaySESs=csOc3PathDaySESs, csDot1dTpLearnedEntryDiscards=csDot1dTpLearnedEntryDiscards, csAtmConnOamContinuity=csAtmConnOamContinuity, csUnchanDs3ConfigOperStatus=csUnchanDs3ConfigOperStatus, csIsisSysAttmptToExMaxSeqNums=csIsisSysAttmptToExMaxSeqNums, csRtPolicyUserPolicyString=csRtPolicyUserPolicyString, csOrionL2tpSessionPacketSequencing=csOrionL2tpSessionPacketSequencing, csOrionViPktFilterCounterStatus=csOrionViPktFilterCounterStatus, csBgpGenConfedId=csBgpGenConfedId, csOrionBladeCLEICode=csOrionBladeCLEICode, csIsisISAdjIndex=csIsisISAdjIndex, csOrionViDsByteFilterAction=csOrionViDsByteFilterAction)
mibBuilder.exportSymbols("COSINE-ORION-MIB", csOrionAirFlowCardFWMinorRevision=csOrionAirFlowCardFWMinorRevision, csOrionServiceTemplateConnProfileName=csOrionServiceTemplateConnProfileName, csAtmConnInArpAgingTime=csAtmConnInArpAgingTime, csOrionVncQueueRowStatus=csOrionVncQueueRowStatus, csPppoeAcIfStatPADRReject=csPppoeAcIfStatPADRReject, csDs3ConfigCableLength=csDs3ConfigCableLength, csRtPolicyStrEntry=csRtPolicyStrEntry, csOrionVIfCryptoMapName=csOrionVIfCryptoMapName, csOrionL2tpConfigTunnelRWS=csOrionL2tpConfigTunnelRWS, cbrFileErrorType=cbrFileErrorType, csRsvpIfResvIn=csRsvpIfResvIn, csVpnVrfRouteTargetRowStatus=csVpnVrfRouteTargetRowStatus, csOspfVirtNbrEntry=csOspfVirtNbrEntry, csOc3AtmCurrentCorrectedHEC=csOc3AtmCurrentCorrectedHEC, csOrionRadiusAcctIndex=csOrionRadiusAcctIndex, csOrionNatInfoEnd=csOrionNatInfoEnd, csAtmInterfaceConfReceivedDroppedCells=csAtmInterfaceConfReceivedDroppedCells, csOrionViStatsRateLimitTxPktsSubmitted=csOrionViStatsRateLimitTxPktsSubmitted, csOrionIpLocalAddrPoolEndRange=csOrionIpLocalAddrPoolEndRange, csDs3Ds1LineStatus=csDs3Ds1LineStatus, csDs3ConfigValidInterval=csDs3ConfigValidInterval, csOc3MediumLineType=csOc3MediumLineType, csOspfVirtNbrHelloSuppressed=csOspfVirtNbrHelloSuppressed, csBgpGenTableEnd=csBgpGenTableEnd, csOrionManualCryptoMapInboundESPSPI=csOrionManualCryptoMapInboundESPSPI, csOrionAAAServerListSvrType=csOrionAAAServerListSvrType, csOrionVPNVRouterManagedIpRouteOperState=csOrionVPNVRouterManagedIpRouteOperState, csMplsLspID=csMplsLspID, csOc3LineIntervalUASs=csOc3LineIntervalUASs, csFrDlcmiMulticast=csFrDlcmiMulticast, csOrionFwTelnetPolicyXGateway=csOrionFwTelnetPolicyXGateway, csLdpEntityAdminStatus=csLdpEntityAdminStatus, csOrionSyslogdFacility10=csOrionSyslogdFacility10, csEthStatsTx1024Pkts=csEthStatsTx1024Pkts, csOc3AdminStatus=csOc3AdminStatus, csIsisISAdjProtSuppTableEnd=csIsisISAdjProtSuppTableEnd, csOrionIpSecStatsRcvEspPktsBadEsp=csOrionIpSecStatsRcvEspPktsBadEsp, csOrionBladeSharcCryptoAssembly2=csOrionBladeSharcCryptoAssembly2, csPppoeSessionOperStatus=csPppoeSessionOperStatus, csOrionVrRadiusAcctSvrPriority=csOrionVrRadiusAcctSvrPriority, csOc3LineDayESs=csOc3LineDayESs, csOrionL2tpSessionEntry=csOrionL2tpSessionEntry, csPppoeSessionIPPoolNameInUse=csPppoeSessionIPPoolNameInUse, csOrionL2tpConfigEntry=csOrionL2tpConfigEntry, csOrionVrRadiusSvrRowStatus=csOrionVrRadiusSvrRowStatus, csRsvpVrConfRowStatus=csRsvpVrConfRowStatus, csIgmpInterfaceQueryMaxResponseTime=csIgmpInterfaceQueryMaxResponseTime, csExpPolTableEnd=csExpPolTableEnd, csOrionFwMsSqlPolicyRemotePort=csOrionFwMsSqlPolicyRemotePort, csIsisISAdjCircIndex=csIsisISAdjCircIndex, csOspfIfTransitDelay=csOspfIfTransitDelay, csOrionFwNwGroupTable=csOrionFwNwGroupTable, csOrionTraceRouteResultIndex=csOrionTraceRouteResultIndex, csOrionVPNVRouterTcpPassiveOpens=csOrionVPNVRouterTcpPassiveOpens, csMplsPathDynamic=csMplsPathDynamic, csBgpNbrEntry=csBgpNbrEntry, csOrionBladePort3MacAddr=csOrionBladePort3MacAddr, csOrionPptpConnStatus=csOrionPptpConnStatus, csOrionIKECertName=csOrionIKECertName, MplsLdpGenAddr=MplsLdpGenAddr, csAtmConnStatsTableEnd=csAtmConnStatsTableEnd, csRtPolicyTermActionPreference=csRtPolicyTermActionPreference, csOrionIpLocalAddrPoolTable=csOrionIpLocalAddrPoolTable, csRsvpIfRefreshInterval=csRsvpIfRefreshInterval, csOc3PathC2=csOc3PathC2, csOrionFwRshPolicyName=csOrionFwRshPolicyName, csDot1dBaseBridgeEntry=csDot1dBaseBridgeEntry, csRtPolicyPrefixListPrefix2=csRtPolicyPrefixListPrefix2, csRipIfStatSentUpdates=csRipIfStatSentUpdates, csOrionVrDhcpRelayConfigTable=csOrionVrDhcpRelayConfigTable, csOrionBladeRemoved=csOrionBladeRemoved, csOrionFwRshPolicyTable=csOrionFwRshPolicyTable, csOspfIfIpAddress=csOspfIfIpAddress, csIsisISAdjAreaAddrTable=csIsisISAdjAreaAddrTable, csAtmInterfaceConfEvLogLevel=csAtmInterfaceConfEvLogLevel, csMplsPathType=csMplsPathType, csLdpEntityRowStatus=csLdpEntityRowStatus, csFrCircuitLastTimeChange=csFrCircuitLastTimeChange, csOc3PathPrevDayCVs=csOc3PathPrevDayCVs, csPppoeSessionTransmittedOctets=csPppoeSessionTransmittedOctets, csOrionFwAccessEntry=csOrionFwAccessEntry, csFrCircuitSentOctets=csFrCircuitSentOctets, csOrionFanEvent=csOrionFanEvent, csOrionL2tpSessionCallType=csOrionL2tpSessionCallType, csPppoeAcIfConfigTotalActiveSessions=csPppoeAcIfConfigTotalActiveSessions, csOc3OperStatus=csOc3OperStatus, csBgpNbrGroupKeepAliveConfigured=csBgpNbrGroupKeepAliveConfigured, csMplsOspfOpaqueAdminStatus=csMplsOspfOpaqueAdminStatus, csOrionViStatsOutNUcastPkts=csOrionViStatsOutNUcastPkts, csOrionFwHttpAuthNonTransparentAuth=csOrionFwHttpAuthNonTransparentAuth, csOrionConnectionProfileEntry=csOrionConnectionProfileEntry, csOrionOc3Path=csOrionOc3Path, csOrionVIfRemIpAddress=csOrionVIfRemIpAddress, csOrionFwSmtpPolicyName=csOrionFwSmtpPolicyName, csDot1dPortEntryRowStatus=csDot1dPortEntryRowStatus, csOspfVirtNbrState=csOspfVirtNbrState, csRsvpIfBadResvConfIn=csRsvpIfBadResvConfIn, csOrionPowerSupplyFWRelease=csOrionPowerSupplyFWRelease, csOrionSystemLoginServer=csOrionSystemLoginServer, csIsisManAreaAddr=csIsisManAreaAddr, csChDs3ChNumber=csChDs3ChNumber, csOc3LinePrevDayUASs=csOc3LinePrevDayUASs, csRtPolicyTermActionBgpLocalPref=csRtPolicyTermActionBgpLocalPref, csVpnVrfRouteTargetValue=csVpnVrfRouteTargetValue, csOrionFwPop3PolicyEntry=csOrionFwPop3PolicyEntry, csOrionL2tpStatsControlSendOctets=csOrionL2tpStatsControlSendOctets, csOrionVIfRemoteEnd=csOrionVIfRemoteEnd, csBgpNbrGroupRowStatus=csBgpNbrGroupRowStatus, csOrionQoSMeterTable=csOrionQoSMeterTable, csOrionTrapReceiverTable=csOrionTrapReceiverTable, csOrionVPNVRouterIpStatsEntry=csOrionVPNVRouterIpStatsEntry, csUnchanDs3ConfigLoopbackStatus=csUnchanDs3ConfigLoopbackStatus, csOrionFwSmtpPolicyLogging=csOrionFwSmtpPolicyLogging, csUnchanDs3ConfigPortIndex=csUnchanDs3ConfigPortIndex, csEthStatsRxLongPktsCounts=csEthStatsRxLongPktsCounts, csOrionViPktFilterTcpStatus=csOrionViPktFilterTcpStatus, csFrCircuitState=csFrCircuitState, csOrionAAAServerRetransmit=csOrionAAAServerRetransmit, csOrionPPVpn=csOrionPPVpn, csAtmConnEvLogArea=csAtmConnEvLogArea, csOrionVIfBcastAddr=csOrionVIfBcastAddr, csOrionL2tpTunnelRemoteTunnelId=csOrionL2tpTunnelRemoteTunnelId, csOc3AtmIntervalTransmittedCells=csOc3AtmIntervalTransmittedCells, csOrionVrIfManagerTable=csOrionVrIfManagerTable, csBgpGenClearNbrGroupName=csBgpGenClearNbrGroupName, csIsisManAdjNeighNSAP=csIsisManAdjNeighNSAP, csDs3ConfigMdlLic=csDs3ConfigMdlLic, csOrionPppIfEncryptionMode=csOrionPppIfEncryptionMode, csOrionFileSysReqEntry=csOrionFileSysReqEntry, csOrionSyslogdEntry=csOrionSyslogdEntry, csOrionMplsEnd=csOrionMplsEnd, csOc3PathPrevDayESs=csOc3PathPrevDayESs, csAtmConnIpAddressTable=csAtmConnIpAddressTable, csPwe3ConfRowStatus=csPwe3ConfRowStatus, csOc3SectionDayESs=csOc3SectionDayESs, csRsvpIfIpAddress=csRsvpIfIpAddress, csPwVcType=csPwVcType, csIgmpAccessGroupIfIndex=csIgmpAccessGroupIfIndex, csOrionFwAolPolicyEntry=csOrionFwAolPolicyEntry, csOrionIKEPolicySaLifetimeSoftSec=csOrionIKEPolicySaLifetimeSoftSec, csAtmConnStaticArpCacheEntry=csAtmConnStaticArpCacheEntry, csOrionDynamicConn=csOrionDynamicConn, csImpPolOrigin=csImpPolOrigin, csRipGlobalConfEntry=csRipGlobalConfEntry, csIsisIPRAIndex=csIsisIPRAIndex, csOrionL2tpStatsPayloadRecvOctets=csOrionL2tpStatsPayloadRecvOctets, csMplsVrPathConfTable=csMplsVrPathConfTable, csOrionBladeTable=csOrionBladeTable, csOrionFwHttpAuthPasswdTimeout=csOrionFwHttpAuthPasswdTimeout, csRipGlobalConfPerUpdateInt=csRipGlobalConfPerUpdateInt, csEthStatsTxScolPktsOk=csEthStatsTxScolPktsOk, csIsisISAdjIPAddrSysInstance=csIsisISAdjIPAddrSysInstance, csOrionL2tpConfigTunnelEmptyTunnelTimeout=csOrionL2tpConfigTunnelEmptyTunnelTimeout, csOrionIKESvrParamPort=csOrionIKESvrParamPort, csOrionVrPrimaryNbnsServer=csOrionVrPrimaryNbnsServer, csOrionViStatsTable=csOrionViStatsTable, csDs3StatCurrentPSESs=csDs3StatCurrentPSESs, csExpPolBgpCommunity1=csExpPolBgpCommunity1, csDs3Ds1TotalLESs=csDs3Ds1TotalLESs, csOrionTraceRouteReqDestAddr=csOrionTraceRouteReqDestAddr, csOrionVncQueueTable=csOrionVncQueueTable, csOspfIfMetricStatus=csOspfIfMetricStatus, csOc3LineCurrentCVs=csOc3LineCurrentCVs, csOspfVirtIfTable=csOspfVirtIfTable, csIsisISAdjIPAddrEntry=csIsisISAdjIPAddrEntry, csOrionNatTcpTimeout=csOrionNatTcpTimeout, csOrionFwNwGroupRowStatus=csOrionFwNwGroupRowStatus, csOrionFwInsideIfMask=csOrionFwInsideIfMask, csEthSubIfUserPriority=csEthSubIfUserPriority, csOrionVPNVRouterIpAdEntAddr=csOrionVPNVRouterIpAdEntAddr, csMplsOspfAreaId=csMplsOspfAreaId, csFrCircuitTable=csFrCircuitTable, csOrionFwPlugConfig=csOrionFwPlugConfig, csOrionAddressListName=csOrionAddressListName, AtmVcIdentifier=AtmVcIdentifier, csBgpNbrLocalAddr=csBgpNbrLocalAddr, csOrionFRoIPConfDefaultWindowTimeout=csOrionFRoIPConfDefaultWindowTimeout, csRtPolicyTermFromVpnRd=csRtPolicyTermFromVpnRd, csRsvpIfResvConfOut=csRsvpIfResvConfOut, csOrionSystemBootImageName4=csOrionSystemBootImageName4, csOrionVrIfManagerModuleIndex=csOrionVrIfManagerModuleIndex, csRtPolicyTermActionMetric2Op=csRtPolicyTermActionMetric2Op, csRsvpIfRRCapable=csRsvpIfRRCapable, csRipIfStatEntry=csRipIfStatEntry, csIsisSysOrigL1LSPBuffSize=csIsisSysOrigL1LSPBuffSize, csOrionVPNVRouterIpRouteOperStatus=csOrionVPNVRouterIpRouteOperStatus, csExpFilterIfMatchingExp=csExpFilterIfMatchingExp, csAtmConnIpAddressRowStatus=csAtmConnIpAddressRowStatus, csOrionAAAServerConfigTableEnd=csOrionAAAServerConfigTableEnd, csAtmConnEncapType=csAtmConnEncapType, csOc3PathCurrentSESs=csOc3PathCurrentSESs, csOrionQueueGroupEntry=csOrionQueueGroupEntry, csAtmConnReceivedCRCErrors=csAtmConnReceivedCRCErrors, csRtPolicyTermSeqNum=csRtPolicyTermSeqNum, csFrDlcmiDceN392=csFrDlcmiDceN392, csAtmInterfaceConfMaxVpcs=csAtmInterfaceConfMaxVpcs, csOrionL2tpConfigMaxSessionsPerTunnel=csOrionL2tpConfigMaxSessionsPerTunnel, MplsLabel=MplsLabel, csDs3Ds1IntervalValidData=csDs3Ds1IntervalValidData, csMplsLspState=csMplsLspState, csOspfVirtIfAuthKey=csOspfVirtIfAuthKey, csOrionIpSecStatsAhEncryptPktsBad=csOrionIpSecStatsAhEncryptPktsBad, csOrionVrSpfUdpUnmatchedTableEntries=csOrionVrSpfUdpUnmatchedTableEntries, csEthModuleIndex=csEthModuleIndex, csLdpTargetActive=csLdpTargetActive, csVpnVrfName=csVpnVrfName, csOrionServiceProviderVIfDown=csOrionServiceProviderVIfDown, csOrionFwDestEntry=csOrionFwDestEntry, csIsisCircInitFails=csIsisCircInitFails, csOrionVrSpfTcpCloseTimeout=csOrionVrSpfTcpCloseTimeout, csExpFilterColorMeteringMode=csExpFilterColorMeteringMode, csOrionVrPktFilterTable=csOrionVrPktFilterTable, csAtmInterfaceConfSlotIndex=csAtmInterfaceConfSlotIndex, csBgpNbrGroupVpnIpv4AllowRfc2547Customers=csBgpNbrGroupVpnIpv4AllowRfc2547Customers, csRsvpIfQueueID=csRsvpIfQueueID, csEthStatsRxOvfCounts=csEthStatsRxOvfCounts, csAtmInterfaceConfOamLoopBackTransmitFail=csAtmInterfaceConfOamLoopBackTransmitFail, csPppoeAcIfConfigMaxSessions=csPppoeAcIfConfigMaxSessions, csOc3PathCurrentTable=csOc3PathCurrentTable, csLdpTargetTable=csLdpTargetTable, csOrionViStatsInUnknownProtos=csOrionViStatsInUnknownProtos, cbrFileErrorCode=cbrFileErrorCode, csOrionPptpConfIdleTimeout=csOrionPptpConfIdleTimeout, csOrionViStatsOutUcastPkts=csOrionViStatsOutUcastPkts, csMplsPathSetupPriority=csMplsPathSetupPriority, csAtmConnInArpInvalidOutReqs=csAtmConnInArpInvalidOutReqs, csBgpNbrGroupImpPolTable=csBgpNbrGroupImpPolTable, csOrionViQoSFilterTable=csOrionViQoSFilterTable, csOrionIKECryptoMapTable=csOrionIKECryptoMapTable, csOrionConnectionProfileTable=csOrionConnectionProfileTable, csUnchanDs3ConfigMdlFic=csUnchanDs3ConfigMdlFic, csOrionVPNGeneralInfo=csOrionVPNGeneralInfo, csOrionFileSysResultFilesize=csOrionFileSysResultFilesize, csIgmpCacheTable=csIgmpCacheTable, csOrionQueueEntry=csOrionQueueEntry, csOrionQoSMeterProfileCBS=csOrionQoSMeterProfileCBS, csOrionVPNVRouterRowStatus=csOrionVPNVRouterRowStatus, csOrionQueueGroupId=csOrionQueueGroupId, csOrionFwDestAddr=csOrionFwDestAddr, csOrionFwTelnetPolicyPrompt=csOrionFwTelnetPolicyPrompt, csOrionServiceSelectionInfo=csOrionServiceSelectionInfo, csOrionFwSmtpRelayAccess=csOrionFwSmtpRelayAccess, csOrionNatStaticNetmask=csOrionNatStaticNetmask, csRtgPolicy=csRtgPolicy, csOrionVPNVRouterManagedIpRouteMetric5=csOrionVPNVRouterManagedIpRouteMetric5, csOspfTOSSupport=csOspfTOSSupport, csOrionFwProxyDaemonRowStatus=csOrionFwProxyDaemonRowStatus, csOrionVrSpfTcpTotalConnTableEntries=csOrionVrSpfTcpTotalConnTableEntries, csIsisISAdj=csIsisISAdj, csOrionFileSysReqSrcFile=csOrionFileSysReqSrcFile, csOrionViStatsRateLimitTimeElapsed=csOrionViStatsRateLimitTimeElapsed, csDot1dTpFdbStatus=csDot1dTpFdbStatus, csOspfHostIpAddress=csOspfHostIpAddress, csOrionFwHttpPolicyOurname=csOrionFwHttpPolicyOurname)
mibBuilder.exportSymbols("COSINE-ORION-MIB", csLdpVrVpnAutorouteAnnounce=csLdpVrVpnAutorouteAnnounce, csOrionNatTranslationEntry=csOrionNatTranslationEntry, csOc3PosRcvFrames=csOc3PosRcvFrames, csRsvpIfResvConfIn=csRsvpIfResvConfIn, csOrionVrRadiusAcctSvrEntry=csOrionVrRadiusAcctSvrEntry, csDs3StatTotalLESs=csDs3StatTotalLESs, csVpnVrfMaxRoutesExceedAction=csVpnVrfMaxRoutesExceedAction, csOc3AtmCurrentStatsTableEnd=csOc3AtmCurrentStatsTableEnd, csIsisSysSeqNumSkips=csIsisSysSeqNumSkips, csAtmConnTransmitErrors=csAtmConnTransmitErrors, csOc3LineCurrentESs=csOc3LineCurrentESs, csOc3LinePrevDayEntry=csOc3LinePrevDayEntry, csOrionViDsByteFilterRowStatus=csOrionViDsByteFilterRowStatus, csOrionVPNVRouterManagedIpRouteTos=csOrionVPNVRouterManagedIpRouteTos, csChDs3Entry=csChDs3Entry, csRipImpPolStatus=csRipImpPolStatus, csIsisCircIndex=csIsisCircIndex, csOrionRadiusInfo=csOrionRadiusInfo, csDs3Ds1YellowAlarmDetect=csDs3Ds1YellowAlarmDetect, csOrionFwHttpPolicyTimeout=csOrionFwHttpPolicyTimeout, csOrionIKECertMapName=csOrionIKECertMapName, csOrionCiscoHdlcSlarpKeepAlive=csOrionCiscoHdlcSlarpKeepAlive, csPppoeSessionId=csPppoeSessionId, csIsisExpPolEntry=csIsisExpPolEntry, csAtmConnEntry=csAtmConnEntry, csRtPolicyTermFromMetric2=csRtPolicyTermFromMetric2, csOrionFwNntpPolicyName=csOrionFwNntpPolicyName, csExpPolLevel=csExpPolLevel, csOrionFwSmtpSpamSource=csOrionFwSmtpSpamSource, csEthStatsRx1024Pkts=csEthStatsRx1024Pkts, csOrionVPNVRouterIpRouteType=csOrionVPNVRouterIpRouteType, csAtmConnTransmittedPackets=csAtmConnTransmittedPackets, csOrionVrPktFilterRowStatus=csOrionVrPktFilterRowStatus, csOrionPppIfConfigAuth=csOrionPppIfConfigAuth, csRipConf=csRipConf, csOrionTunnelSwitchTargetRowStatus=csOrionTunnelSwitchTargetRowStatus, csOrionSnmpCommEntry=csOrionSnmpCommEntry, csOrionBgpMaxPfxLimit=csOrionBgpMaxPfxLimit, csMplsIsisExtensionsEntry=csMplsIsisExtensionsEntry, csOrionIKESvrParamRetryTimer=csOrionIKESvrParamRetryTimer, csOrionAirFlowCardTempState=csOrionAirFlowCardTempState, csOrionIKEStateAuthenticationType=csOrionIKEStateAuthenticationType, csOrionVrSecondaryNbnsServer=csOrionVrSecondaryNbnsServer, csOrionServiceTemplateName=csOrionServiceTemplateName, csOrionFWInfo=csOrionFWInfo, csOrionFwSmtpPolicyRowStatus=csOrionFwSmtpPolicyRowStatus, csOrionOspfVirtNbrStateChange=csOrionOspfVirtNbrStateChange, csOspfSpfRuns=csOspfSpfRuns, csOrionFileSysReqDestFile=csOrionFileSysReqDestFile, csOrionVrRadiusAcctSvrRowStatus=csOrionVrRadiusAcctSvrRowStatus, csOrionVIfRateLimitNumBytes=csOrionVIfRateLimitNumBytes, csOrionViStatsOutDiscards=csOrionViStatsOutDiscards, csOrionBladeSharcCryptoSerial1=csOrionBladeSharcCryptoSerial1, csOrionFwSmtpPolicyLocalDomain=csOrionFwSmtpPolicyLocalDomain, csOrionDsByteFilterInfoEnd=csOrionDsByteFilterInfoEnd, csOrionVIfUp=csOrionVIfUp, csOrionFwPop3PolicyRowStatus=csOrionFwPop3PolicyRowStatus, csOrionGenAclId=csOrionGenAclId, csDs3ConfigMdlPath=csDs3ConfigMdlPath, csOrionRadiusAcctFlush=csOrionRadiusAcctFlush, csIgmpAccessGroupTable=csIgmpAccessGroupTable, csPwVcVlanId=csPwVcVlanId, csOc3AtmCurrentIdleCells=csOc3AtmCurrentIdleCells, csOrionVrRadiusSvrPriority=csOrionVrRadiusSvrPriority, csEthSubIfVlanId=csEthSubIfVlanId, csIsisCircRejAdjs=csIsisCircRejAdjs, csRipGlobalConfTable=csRipGlobalConfTable, csBgpConfedASTableEnd=csBgpConfedASTableEnd, csChDs3SlotIndex=csChDs3SlotIndex, csOrionIKECryptoMapSaLifetimeHardKbytes=csOrionIKECryptoMapSaLifetimeHardKbytes, csOspfNbrAddressLessIndex=csOspfNbrAddressLessIndex, csOspfAsBdrRtrCount=csOspfAsBdrRtrCount, csOrionTemperatureSensorIndex=csOrionTemperatureSensorIndex, csOrionQoSMeterProfileName=csOrionQoSMeterProfileName, csOrionIKECryptoMapRemoteIdentityType3=csOrionIKECryptoMapRemoteIdentityType3, csOrionStatusPanelFWMinorRevision=csOrionStatusPanelFWMinorRevision, csVpnVrfRouteTargetTable=csVpnVrfRouteTargetTable, csOrionEngineUtilizationLong=csOrionEngineUtilizationLong, csRipGlobalConfStatus=csRipGlobalConfStatus, csOrionQueueGroupSubGroupAllocation=csOrionQueueGroupSubGroupAllocation, csOrionVncQueueMaxBw=csOrionVncQueueMaxBw, csDs3E1NatBits=csDs3E1NatBits, csIsisCircIfSubIndex=csIsisCircIfSubIndex, csOrionEngineApplicationProduct=csOrionEngineApplicationProduct, csOrionFwSmtpMaxChildren=csOrionFwSmtpMaxChildren, csOrionSyslogdFacility8=csOrionSyslogdFacility8, csOc3SectionIntervalTable=csOc3SectionIntervalTable, csOrionL2tpStatsFailedSessions=csOrionL2tpStatsFailedSessions, csBgpNbrMaxPfx=csBgpNbrMaxPfx, csAtmInterfaceConfIlmiControl=csAtmInterfaceConfIlmiControl, csOrionRestoreNumVRs=csOrionRestoreNumVRs, csOrionIKESvrParamRetryTimerMicroSec=csOrionIKESvrParamRetryTimerMicroSec, csIsisISAdjState=csIsisISAdjState, csOrionFwGenProxyEntry=csOrionFwGenProxyEntry, csOc3FarEndJ1=csOc3FarEndJ1, csOrionViStatsInErrors=csOrionViStatsInErrors, csRsvpIfTable=csRsvpIfTable, csOrionFwFtpConfigEnd=csOrionFwFtpConfigEnd, csOrionIKESvrParamRadiusAcctUserTypePriority3=csOrionIKESvrParamRadiusAcctUserTypePriority3, csOspfIfAdminStatus=csOspfIfAdminStatus, csOrionConnectionProfileAddrPoolname=csOrionConnectionProfileAddrPoolname, csOrionL2tpConfigSessionRWS=csOrionL2tpConfigSessionRWS, csOrionPppIfReauth=csOrionPppIfReauth, csRsvpIfPathIn=csRsvpIfPathIn, csPppoeSessionTranmittedPkts=csPppoeSessionTranmittedPkts, csEthStatsRx65To127Pkts=csEthStatsRx65To127Pkts, csDs3Ds1LineConfig=csDs3Ds1LineConfig, csOrionVPNVRouterTcpConnEntry=csOrionVPNVRouterTcpConnEntry, csPosInterfaceConfTable=csPosInterfaceConfTable, csOrionSyslogdFacility12=csOrionSyslogdFacility12, csPosInterfaceConfPortIndex=csPosInterfaceConfPortIndex, csOspfIfType=csOspfIfType, csOrionVrRadiusAcctSvrOperStatus=csOrionVrRadiusAcctSvrOperStatus, csOrionIKECryptoMapTransformSet2=csOrionIKECryptoMapTransformSet2, csOc3PathDayEntry=csOc3PathDayEntry, csOrionFwMsSqlConfig=csOrionFwMsSqlConfig, csOrionVrGeneralInfo=csOrionVrGeneralInfo, csOrionL2tpStatsFailedTunnels=csOrionL2tpStatsFailedTunnels, csOrionL2tpTunnelRemoteUdpPort=csOrionL2tpTunnelRemoteUdpPort, csAtmInterfaceConfMaxActiveVciBits=csAtmInterfaceConfMaxActiveVciBits, csFrCircuitReceivedFrames=csFrCircuitReceivedFrames, csOc3LineIntervalSESs=csOc3LineIntervalSESs, csOspfExtLsdbAdvertisement=csOspfExtLsdbAdvertisement, csRipGlobalConfRowStatus=csRipGlobalConfRowStatus, csOrionAlarmClear=csOrionAlarmClear, csIsisCircIfIndex=csIsisCircIfIndex, csOc3SectionCurrentEntry=csOc3SectionCurrentEntry, csLdpVrConfRowStatus=csLdpVrConfRowStatus, csMplsInterfaceLabelMaxOut=csMplsInterfaceLabelMaxOut, csAtmConnIpAddressIpAddress=csAtmConnIpAddressIpAddress, csBgpNbrExpPolEntry=csBgpNbrExpPolEntry, csOrionLogLinkDown=csOrionLogLinkDown, csOrionNatStaticTranslationTable=csOrionNatStaticTranslationTable, csVpnVrfEntry=csVpnVrfEntry, csOrionRipEnd=csOrionRipEnd, csOrionChassisPacketRingPrimToProtEndpoint=csOrionChassisPacketRingPrimToProtEndpoint, csOrionFwPlugPolicyRemotePort=csOrionFwPlugPolicyRemotePort, csAtmInterfaceConfCurrentMaxVciBits=csAtmInterfaceConfCurrentMaxVciBits, csOrionPacketRingPrimToProtCurrentEndpointSlot=csOrionPacketRingPrimToProtCurrentEndpointSlot, csIsisCircMeshGroup=csIsisCircMeshGroup, csOrionSystemBootConcurrentDownloads=csOrionSystemBootConcurrentDownloads, csOrionChassisMidplaneID=csOrionChassisMidplaneID, csOrionFwTelnetAuthNonTransparentAuth=csOrionFwTelnetAuthNonTransparentAuth, csRtPolicyTermActionVpnRouteTargetOp=csRtPolicyTermActionVpnRouteTargetOp, csOrionDhcpRelayInReqs=csOrionDhcpRelayInReqs, csOrionFwNntpPolicyRemotePort=csOrionFwNntpPolicyRemotePort, csOrionFwSmtpRelayPolicyName=csOrionFwSmtpRelayPolicyName, csOrionPppIfTerminateReqRtx=csOrionPppIfTerminateReqRtx, csOrionPowerSupplyIndex=csOrionPowerSupplyIndex, csBgpNbrHoldTimeConfigured=csBgpNbrHoldTimeConfigured, csOc3LinePrevDayESs=csOc3LinePrevDayESs, csAtmConnInArpOutReplies=csAtmConnInArpOutReplies, csOrionPptpConfEntry=csOrionPptpConfEntry, csLdpTargetKeepAliveHoldTimer=csLdpTargetKeepAliveHoldTimer, csOrionNatPoolStartAddress=csOrionNatPoolStartAddress, csIsisL2SummAddrDelayMetric=csIsisL2SummAddrDelayMetric, csOrionPingResultsMaxRtt=csOrionPingResultsMaxRtt, csOrionAAAServerTimeout=csOrionAAAServerTimeout, csDs3StatIntervalCESs=csDs3StatIntervalCESs, csOc3LineCurrentFCs=csOc3LineCurrentFCs, csOrionVrRadiusSvrKey=csOrionVrRadiusSvrKey, csAtmConnDynamicArpCacheEntry=csAtmConnDynamicArpCacheEntry, csOspfASBdrRtrStatus=csOspfASBdrRtrStatus, csOrionConfigSave=csOrionConfigSave, csAtmConnType=csAtmConnType, csTelnetConnPort=csTelnetConnPort, csOrionDynamicCryptoMapName=csOrionDynamicCryptoMapName, csOrionBladeInserted=csOrionBladeInserted, csOrionTraceRouteReqTable=csOrionTraceRouteReqTable, csOc3PathDayESs=csOc3PathDayESs, csBgpGenDampReuse=csBgpGenDampReuse, csOrionBladeTemperatureSensor2=csOrionBladeTemperatureSensor2, csOrionSyslogdLevel5=csOrionSyslogdLevel5, csAtmConnReceivedArpResponses=csAtmConnReceivedArpResponses, csOrionFwAolPolicyRemoteServer=csOrionFwAolPolicyRemoteServer, csOspfExternLsaCksumSum=csOspfExternLsaCksumSum, csOrionVPNVRouterIpReasmReqds=csOrionVPNVRouterIpReasmReqds, csOc3AtmCurrentUnCorrectedHEC=csOc3AtmCurrentUnCorrectedHEC, csOspfStubStatus=csOspfStubStatus, csOrionViPbfFilterTable=csOrionViPbfFilterTable, csDs3Ds1OperStatus=csDs3Ds1OperStatus, csBgpGenDampSuppress=csBgpGenDampSuppress, csOrionIgmp=csOrionIgmp, csPolicyRouteFilterMatchType=csPolicyRouteFilterMatchType, csOrionIKESvrParamRetryTimerMaximum=csOrionIKESvrParamRetryTimerMaximum, csFrCircuitReceivedOctets=csFrCircuitReceivedOctets, csOc3PathIntervalEntry=csOc3PathIntervalEntry, csIsisSysVersion=csIsisSysVersion, csOrionIKEDialupConnDistinguishName=csOrionIKEDialupConnDistinguishName, csMplsLspOctets=csMplsLspOctets, csBgpNbrExpPolId=csBgpNbrExpPolId, csOrionAccessListEntry=csOrionAccessListEntry, csOrionVPNVRouterTcpOutRsts=csOrionVPNVRouterTcpOutRsts, csVpnVrfASOverride=csVpnVrfASOverride, csOrionVrDsByteFilterValue=csOrionVrDsByteFilterValue, csAtmConnInArpOutReqs=csAtmConnInArpOutReqs, csOrionVrIfManagerSubifIndex=csOrionVrIfManagerSubifIndex, csOrionVIfMtu=csOrionVIfMtu, csOrionEngineLoaderDate=csOrionEngineLoaderDate, csPwVcOutboundOperStatus=csPwVcOutboundOperStatus, csOspfGeneralTable=csOspfGeneralTable, csOspfNbrLsRetransQLen=csOspfNbrLsRetransQLen, csOrionFwHttpPortPolicyName=csOrionFwHttpPortPolicyName, csOrionBladeSharcCryptoType1=csOrionBladeSharcCryptoType1, csOrionVPNVRouterLocations=csOrionVPNVRouterLocations, csRtPolicyTermFromIntfIndex=csRtPolicyTermFromIntfIndex, csAtmConnDynamicArpCacheMacAddress=csAtmConnDynamicArpCacheMacAddress, csTelnetConnRowStatus=csTelnetConnRowStatus, csRipImpPolId=csRipImpPolId, csOrionIpSecStatsRcvPktsOk=csOrionIpSecStatsRcvPktsOk, csOrionPptpConfTable=csOrionPptpConfTable, csPolicyRouteFilterPrefix=csPolicyRouteFilterPrefix, csOrionVrIfManagerSlotIndex=csOrionVrIfManagerSlotIndex, csOrionIpSecStatsAhTotalInboundSAs=csOrionIpSecStatsAhTotalInboundSAs, csOrionSystemLoginRoleRowStatus=csOrionSystemLoginRoleRowStatus, csOrionVPNVRouterIpRouteMetric1=csOrionVPNVRouterIpRouteMetric1, csOrionPingCtlTrapFilter=csOrionPingCtlTrapFilter, csOrionGenAclTable=csOrionGenAclTable, csPppoeAcIfStatPADTReceive=csPppoeAcIfStatPADTReceive, csOrionL2tpStatsPayloadSendOctets=csOrionL2tpStatsPayloadSendOctets, csOrionConfigSaveStart=csOrionConfigSaveStart, csBgpGenRowStatus=csBgpGenRowStatus, csOrionVrNbnsConfigEntry=csOrionVrNbnsConfigEntry, csRtPolicyUserPolicyType=csRtPolicyUserPolicyType, csBgpGenLogLevelFlag=csBgpGenLogLevelFlag, csPwVcPeerIpv4Addr=csPwVcPeerIpv4Addr, csRsvpIfBadPathTearIn=csRsvpIfBadPathTearIn, csOrionFwProxyDaemonPortNumber=csOrionFwProxyDaemonPortNumber, csAtmConnUpperProtocol=csAtmConnUpperProtocol, csOrionVPNVRouterTcpRetransSegs=csOrionVPNVRouterTcpRetransSegs, csOrionIKECertStatus=csOrionIKECertStatus, csOrionEngineDataCacheSize=csOrionEngineDataCacheSize, csPosInterfaceConfEntry=csPosInterfaceConfEntry, csOrionVPNDNSSvrList=csOrionVPNDNSSvrList, csOrionFwHttpAuthServiceType=csOrionFwHttpAuthServiceType, csIsisCircL1DefaultMetric=csIsisCircL1DefaultMetric, csOrionFwAccessDestPortList=csOrionFwAccessDestPortList, csEthSubIfIndex=csEthSubIfIndex, csFRoIPCircuitDiscards=csFRoIPCircuitDiscards, csOrionSystemBootImageName6=csOrionSystemBootImageName6, csOrionVPNVRouterTcpConnLocalPort=csOrionVPNVRouterTcpConnLocalPort, csOrionBladeConfigAttributes=csOrionBladeConfigAttributes, csOrionVIfIndex=csOrionVIfIndex, csOrionQueueMinThresholdForYellow=csOrionQueueMinThresholdForYellow, csOrionNatPoolStartPort=csOrionNatPoolStartPort, csDs3Ds1CurrentDMs=csDs3Ds1CurrentDMs, csAtmConnOamLoopbackRetryPvcDownCount=csAtmConnOamLoopbackRetryPvcDownCount, csDot1dTpFdbPort=csDot1dTpFdbPort, csPwVcUpTime=csPwVcUpTime, csOrionTraceRouteResultEntry=csOrionTraceRouteResultEntry, csAtmInterfaceConfEvLogArea=csAtmInterfaceConfEvLogArea, csLdpVrEventLogArea=csLdpVrEventLogArea, csOrionBladeEnginesNumb=csOrionBladeEnginesNumb, csOrionQosInfoEnd=csOrionQosInfoEnd)
mibBuilder.exportSymbols("COSINE-ORION-MIB", csAtmConnReceivedEncapsulationErrors=csAtmConnReceivedEncapsulationErrors, csOc3PathJ1=csOc3PathJ1, csOspfRefBw=csOspfRefBw, csOrionQueueGroupType=csOrionQueueGroupType, SupportedProtocol=SupportedProtocol, csOrionIKESvrParamAuthorizationList=csOrionIKESvrParamAuthorizationList, csOrionBladeSharcCryptoType2=csOrionBladeSharcCryptoType2, csOc3LineIntervalNumber=csOc3LineIntervalNumber, csAtmInterfaceConfTransmittedOamLoopBackRequests=csAtmInterfaceConfTransmittedOamLoopBackRequests, csAtmInterfaceConfReceivedGenericErrors=csAtmInterfaceConfReceivedGenericErrors, csOspfVirtIfTransitDelay=csOspfVirtIfTransitDelay, csDs3Ds1TotalSEFSs=csDs3Ds1TotalSEFSs, csOrionVPNVRouterIpInAddrErrors=csOrionVPNVRouterIpInAddrErrors, csBgpNetworkRowStatus=csBgpNetworkRowStatus, csOrionIKESvrParamTable=csOrionIKESvrParamTable, csOrionPptpConnFarUsername=csOrionPptpConnFarUsername, csOrionIKEStatsPhase1Negotiations=csOrionIKEStatsPhase1Negotiations, csOrionIp=csOrionIp, csFrDlcmiMaxSupportedVCs=csFrDlcmiMaxSupportedVCs, csAtmInterfaceConfTransmittedCells=csAtmInterfaceConfTransmittedCells, csOrionTraceRouteResultHopNum=csOrionTraceRouteResultHopNum, csRtPolicyTermActionFlag=csRtPolicyTermActionFlag, csAtmConnUnRespondedArpRequests=csAtmConnUnRespondedArpRequests, csFrErrTable=csFrErrTable, csOrionTraceRouteReqRowStatus=csOrionTraceRouteReqRowStatus, csRsvpSessionExtendedTunnelID=csRsvpSessionExtendedTunnelID, csOrionIpSecStatsEspDecryptPktsBad=csOrionIpSecStatsEspDecryptPktsBad, csOspfAreaAggregateStatus=csOspfAreaAggregateStatus, csRsvpIfPathErrIn=csRsvpIfPathErrIn, csOrionBladeRestore=csOrionBladeRestore, csOrionConnectionProfileLnsAddress=csOrionConnectionProfileLnsAddress, csOrionSystemLoginRoleEntry=csOrionSystemLoginRoleEntry, csRsvpIfBadPathIn=csRsvpIfBadPathIn, csRtPolicyTermActionNextHopAddrType=csRtPolicyTermActionNextHopAddrType, csOrionLogLinkModuleIndex=csOrionLogLinkModuleIndex, csBgpNbrGroupTable=csBgpNbrGroupTable, csOrionQueueMaxRandomForRed=csOrionQueueMaxRandomForRed, csOrionConfigLoadOutputEnable=csOrionConfigLoadOutputEnable, csPppoeAcIfStatPADRReceive=csPppoeAcIfStatPADRReceive, csAtmConnSCR=csAtmConnSCR, csOrionFwNetMeetingPolicyRemotePort=csOrionFwNetMeetingPolicyRemotePort, csIsisExpPolTableEnd=csIsisExpPolTableEnd, csUnchanDs3ConfigMdlUnit=csUnchanDs3ConfigMdlUnit, csAtmConnVpi=csAtmConnVpi, csOrionAirFlowCardFWReleaseDate=csOrionAirFlowCardFWReleaseDate, csOrionIpSecTransformTable=csOrionIpSecTransformTable, csOrionVPNInfo=csOrionVPNInfo, csAtmConnVci=csAtmConnVci, csIsisManAreaAddrSysInstance=csIsisManAreaAddrSysInstance, csOrionFwPlugPolicyName=csOrionFwPlugPolicyName, csPwVcCustomerName=csPwVcCustomerName, csOc3AtmIntervalStatsEntry=csOc3AtmIntervalStatsEntry, AtmServiceCategory=AtmServiceCategory, csDs3Ds1CurrentLESs=csDs3Ds1CurrentLESs, csRtPolicyRouteFilterActionLogFlag=csRtPolicyRouteFilterActionLogFlag, csOc3PathIntervalCVs=csOc3PathIntervalCVs, csEthStatsRxNormCrcCounts=csEthStatsRxNormCrcCounts, csIsisSysL2State=csIsisSysL2State, csOrionFwInsideIfAddr=csOrionFwInsideIfAddr, csDs3Ds1Id=csDs3Ds1Id, csRsvpIfMaxFlowBandwidth=csRsvpIfMaxFlowBandwidth, csPppoeAcIfConfigOperStatus=csPppoeAcIfConfigOperStatus, csDs3StatTotalSEFSs=csDs3StatTotalSEFSs, csOrionVrRadiusSvrPort=csOrionVrRadiusSvrPort, csBgpGenDampMaxSuppress=csBgpGenDampMaxSuppress, csOrionIKEStatsPhase2NegotiationsFailed=csOrionIKEStatsPhase2NegotiationsFailed, csFrDlcmiFullEnquiryInterval=csFrDlcmiFullEnquiryInterval, csIgmpInterfaceQuerierExpiryTime=csIgmpInterfaceQuerierExpiryTime, csOrionDynamicCryptoMapMatchAddress=csOrionDynamicCryptoMapMatchAddress, csMplsOspfAreaAdminStatus=csMplsOspfAreaAdminStatus, csOrionVPNVRouterUdpInDatagrams=csOrionVPNVRouterUdpInDatagrams, csLdpVrRoutePreference=csLdpVrRoutePreference, csOc3SectionIntervalSEFSs=csOc3SectionIntervalSEFSs, csOrionVPNVRouterIpAdEntRowStatus=csOrionVPNVRouterIpAdEntRowStatus, csOrionFwFtpAuthNonTransparentAuth=csOrionFwFtpAuthNonTransparentAuth, csRsvpVrConfOpCode=csRsvpVrConfOpCode, csOrionFwHttpPolicyHeader=csOrionFwHttpPolicyHeader, csDot1dPortTable=csDot1dPortTable, Metric=Metric, csIsisCircLevel=csIsisCircLevel, csOrionL2tpSessionRemoteRWS=csOrionL2tpSessionRemoteRWS, csOrionSpfInfo=csOrionSpfInfo, csOrionFwHttpPortEntry=csOrionFwHttpPortEntry, csRsvpIfBadResvIn=csRsvpIfBadResvIn, csOrionVPNVRouterManagedIpRouteDest=csOrionVPNVRouterManagedIpRouteDest, csIsisSysNextCircIndex=csIsisSysNextCircIndex, csPwVcCreateTime=csPwVcCreateTime, csAtmConnOamLoopbackRetryPvcUpCount=csAtmConnOamLoopbackRetryPvcUpCount, csOrionFwLdapPolicyRemoteServer=csOrionFwLdapPolicyRemoteServer, csOrionL2tpSessionRWS=csOrionL2tpSessionRWS, csOrionOspfMaxAgeLsa=csOrionOspfMaxAgeLsa, csOc3PathIntervalTable=csOc3PathIntervalTable, csOrionFwFtpPolicyRowStatus=csOrionFwFtpPolicyRowStatus, csOrionFwFtpAuthEntry=csOrionFwFtpAuthEntry, csOrionFRoIPTransportInBytes=csOrionFRoIPTransportInBytes, csBgpGenMaxPfxType=csBgpGenMaxPfxType, csOrionSyslogdLevel2=csOrionSyslogdLevel2, csIsisSysAuthDomainTransPwd=csIsisSysAuthDomainTransPwd, csOrionSnmpAgentErrorEntry=csOrionSnmpAgentErrorEntry, csOrionFwLnotesPolicyRemotePort=csOrionFwLnotesPolicyRemotePort, csOc3LineDayFCs=csOc3LineDayFCs, csOrionL2tpTunnelStatus=csOrionL2tpTunnelStatus, csOrionFileSysReqIndex=csOrionFileSysReqIndex, csExpFilterServiceCategory=csExpFilterServiceCategory, csTelnetConnIpAddr=csTelnetConnIpAddr, csDs3ConfigAdminStatus=csDs3ConfigAdminStatus, csOrionFwPop3Config=csOrionFwPop3Config, csOrionPingResultsMinRtt=csOrionPingResultsMinRtt, csIsisSysAuthAreaTransPwd=csIsisSysAuthAreaTransPwd, csOrionFwTelnetAuthServiceType=csOrionFwTelnetAuthServiceType, csIsisSysL2TO1Leak=csIsisSysL2TO1Leak, csOrionDhcpRelayInAcks=csOrionDhcpRelayInAcks, csEthEntry=csEthEntry, csOrionFwNntpPolicyTimeout=csOrionFwNntpPolicyTimeout, csIsisSysWaitTime=csIsisSysWaitTime, csOrionFwFtpPolicyFunctionIds=csOrionFwFtpPolicyFunctionIds, csOrionVPNVRouterUdpInErrors=csOrionVPNVRouterUdpInErrors, csOrionQoSMeterEntry=csOrionQoSMeterEntry, csOrionViDsByteFilterValue=csOrionViDsByteFilterValue, csDs3StatTotalEntry=csDs3StatTotalEntry, csAtmInterfaceConfTable=csAtmInterfaceConfTable, csOrionFwAolPolicyRowStatus=csOrionFwAolPolicyRowStatus, csIsisCircDRL1HelloTimer=csIsisCircDRL1HelloTimer, csOrionManualCryptoMapInboundAHKey=csOrionManualCryptoMapInboundAHKey, csIgmpInterfaceEntry=csIgmpInterfaceEntry, csOrionQoSMeterYellowByteCount=csOrionQoSMeterYellowByteCount, csOrionViDsByteFilterIndex=csOrionViDsByteFilterIndex, csOrionVPNVRouterTcpConnLocalAddress=csOrionVPNVRouterTcpConnLocalAddress, csOrionVPNVRouterIpRouteMetric5=csOrionVPNVRouterIpRouteMetric5, csOrionI2CDevicePresent=csOrionI2CDevicePresent, csOrionBladeIPSXLoaderVersion=csOrionBladeIPSXLoaderVersion, csOspfVirtIfEvents=csOspfVirtIfEvents, csOrionFwNntpPolicyAuthenticate=csOrionFwNntpPolicyAuthenticate, csOrionChassisInfo=csOrionChassisInfo, csOrionFwNwGroupMask=csOrionFwNwGroupMask, csOrionVIfInfo=csOrionVIfInfo, csOrionFwGenProxyId=csOrionFwGenProxyId, csOrionAAAServerListName=csOrionAAAServerListName, csLdpEntityTransportAddr=csLdpEntityTransportAddr, csOc3LineDayEntry=csOc3LineDayEntry, csOspfIfMd5Entry=csOspfIfMd5Entry, csOrionFRoIPTransportInPkts=csOrionFRoIPTransportInPkts, csExpPolBgpAS=csExpPolBgpAS, csOspfAreaEntry=csOspfAreaEntry, csRsvpIfQueueRowStatus=csRsvpIfQueueRowStatus, csFrDlcmiStatLocalSequenceNumber=csFrDlcmiStatLocalSequenceNumber, csOrionTraceRouteReqSrcAddr=csOrionTraceRouteReqSrcAddr, csOrionAAAServerLdapPassword=csOrionAAAServerLdapPassword, csExpFilterIfDirection=csExpFilterIfDirection, csAtmInterfaceConfReceivedCRCErrors=csAtmInterfaceConfReceivedCRCErrors, csOrionPPVpnObjects=csOrionPPVpnObjects, MplsLdpLabelTypes=MplsLdpLabelTypes, csBgpNbrExpPolRowStatus=csBgpNbrExpPolRowStatus, csIsisCircL1DelayMetric=csIsisCircL1DelayMetric, csOrionVrSpfUdpInitTblSize=csOrionVrSpfUdpInitTblSize, csUnchanDs3ConfigCableLength=csUnchanDs3ConfigCableLength, csFrCircuitFwdLink=csFrCircuitFwdLink, csOrionIpSecTransform3=csOrionIpSecTransform3, csPppoeSessionServiceVPN=csPppoeSessionServiceVPN, csAtmInfo=csAtmInfo, csOrionPingResultsUnreachables=csOrionPingResultsUnreachables, csOrionFanState=csOrionFanState, csOspfIfMd5RowStatus=csOspfIfMd5RowStatus, csMplsPathMetricValue=csMplsPathMetricValue, csAtmConnSubIfIndex=csAtmConnSubIfIndex, csFrDlcmiStatStatusEnquiries=csFrDlcmiStatStatusEnquiries, EvLogLevel=EvLogLevel, csOrionSystemLoginDomainEntry=csOrionSystemLoginDomainEntry, csOrionTraceRouteResultTable=csOrionTraceRouteResultTable, csBgpNbrTable=csBgpNbrTable, csAtmConnInArpStatisticsTableEnd=csAtmConnInArpStatisticsTableEnd, csIsisCircLANL1DesISChanges=csIsisCircLANL1DesISChanges, csOrionModem=csOrionModem, csFRoIPCircuitSentDEs=csFRoIPCircuitSentDEs, csOrionVrPktFilterDirection=csOrionVrPktFilterDirection, csDs3Ds1CurrentUASs=csDs3Ds1CurrentUASs, csIsisSysAuthDomainType=csIsisSysAuthDomainType, csOrionGenAclTos=csOrionGenAclTos, csBgpNbrGroupMhopTTL=csBgpNbrGroupMhopTTL, csOrionFwPop3ConfigEnd=csOrionFwPop3ConfigEnd, csFrCircuitRowStatus=csFrCircuitRowStatus, csOrionFanIndex=csOrionFanIndex, csOrionFwAccessSourceAddr=csOrionFwAccessSourceAddr, csOrionVrRadiusAcctSvrTable=csOrionVrRadiusAcctSvrTable, csRsvpSessionTunnelEndpoint=csRsvpSessionTunnelEndpoint, csBgpGenDefaultLocalPref=csBgpGenDefaultLocalPref, csRtPolicyUserTable=csRtPolicyUserTable, csOrionMlpppBundleRxMRRU=csOrionMlpppBundleRxMRRU, csOrionDynamicCryptoMapSessionKeyLifetimeBytes=csOrionDynamicCryptoMapSessionKeyLifetimeBytes, csFrDlcmiAddress=csFrDlcmiAddress, csOrionVrRadiusConfigEntry=csOrionVrRadiusConfigEntry, AreaID=AreaID, csOrionVPNVRouterIpNetToMediaTable=csOrionVPNVRouterIpNetToMediaTable, csLdpTargetHelloTimer=csLdpTargetHelloTimer, csMplsPathInclude=csMplsPathInclude, csOrionFwGenProxyTable=csOrionFwGenProxyTable, csOrionTempAirFlowCard=csOrionTempAirFlowCard, csRtgPolicyEnd=csRtgPolicyEnd, csDs3StatCurrentPESs=csDs3StatCurrentPESs, csOrionGenAclDstMask=csOrionGenAclDstMask, csOrionVrRadiusSvrOperStatus=csOrionVrRadiusSvrOperStatus, csOrionTemperatureThreshold=csOrionTemperatureThreshold, csOc3PathDayCVs=csOc3PathDayCVs, csOrionAAAServerName=csOrionAAAServerName, csBgpNetwork=csBgpNetwork, csBgpNbrMd5Password=csBgpNbrMd5Password, csOrionFwHostTable=csOrionFwHostTable, csOrionVIfDown=csOrionVIfDown, csPwVcForwardPE=csPwVcForwardPE, csOrionFwDmzIf=csOrionFwDmzIf, csOrionTraceRouteResultMplsLabelStackInfo=csOrionTraceRouteResultMplsLabelStackInfo, csOc3PathDayFCs=csOc3PathDayFCs, csOrionFwSmtpSpamPolicyName=csOrionFwSmtpSpamPolicyName, csOrionPingCtlEntry=csOrionPingCtlEntry, csOrionGreKey=csOrionGreKey, csOrionVrQoSFilterAclId=csOrionVrQoSFilterAclId, csOrionPacketRingPrimToProtPreviousEndpointSlot=csOrionPacketRingPrimToProtPreviousEndpointSlot, csOrionIKEStateLocalAddress=csOrionIKEStateLocalAddress, csOrionMlpppLinkRowStatus=csOrionMlpppLinkRowStatus, csIsisSysPollESHelloRate=csIsisSysPollESHelloRate, csOrionFwSmtpPolicySpamReply=csOrionFwSmtpPolicySpamReply, csOrionSyslogdLevel3=csOrionSyslogdLevel3, csMplsLspPreference=csMplsLspPreference, csOrionViStatsRateLimitTxPktsDropped=csOrionViStatsRateLimitTxPktsDropped, csIgmpCacheEntry=csIgmpCacheEntry, csOrionPingResultsCurrentStatus=csOrionPingResultsCurrentStatus, csOrionGlobalVPNIndex=csOrionGlobalVPNIndex, csOrionPingCtlSourceAddress=csOrionPingCtlSourceAddress, csOrionViPktFilterIndex=csOrionViPktFilterIndex, csTeRsvpObjects=csTeRsvpObjects, csOrionGenAclSrcMask=csOrionGenAclSrcMask, csOrionOc3PosStats=csOrionOc3PosStats, csOrionSystemLoginServerListName=csOrionSystemLoginServerListName, csDs3ConfigOperStatus=csDs3ConfigOperStatus, csOc3PosRcvFrameMaxPacketError=csOc3PosRcvFrameMaxPacketError, csOc3AtmIntervalStatsTableEnd=csOc3AtmIntervalStatsTableEnd, csOrionVIfType=csOrionVIfType, csFRoIPCircuitReceivedBECNs=csFRoIPCircuitReceivedBECNs, RouterID=RouterID, csOrionDynamicCryptoMapSessionKeyLifetimeSec=csOrionDynamicCryptoMapSessionKeyLifetimeSec, csOrionAAAServerConfigEntry=csOrionAAAServerConfigEntry, csBgpGenClearConn=csBgpGenClearConn, csExpFilterIfColorMeteringMode=csExpFilterIfColorMeteringMode, csOrionFwPlugConfigEnd=csOrionFwPlugConfigEnd, OperState=OperState, csMplsTrafficEnggLevel=csMplsTrafficEnggLevel, csMplsOspfExtensionsEntry=csMplsOspfExtensionsEntry, csOrionFanTrayControlEntry=csOrionFanTrayControlEntry, csOrionVPNVRouterTcpInErrs=csOrionVPNVRouterTcpInErrs, csOrionManualCryptoMapInboundESPAuthKey=csOrionManualCryptoMapInboundESPAuthKey, csAtmInterfaceConfReceivedPackets=csAtmInterfaceConfReceivedPackets, csOrionL2tpConfigPppReauthPeriod=csOrionL2tpConfigPppReauthPeriod, csOrionIpSecStatsRcvAhPktsDropped=csOrionIpSecStatsRcvAhPktsDropped, csOc3PathCurrentFCs=csOc3PathCurrentFCs)
mibBuilder.exportSymbols("COSINE-ORION-MIB", csOrionFwProxyDaemonProtocol=csOrionFwProxyDaemonProtocol, csAtmConnOamLoopbackRetryPvcDownRetryDelay=csAtmConnOamLoopbackRetryPvcDownRetryDelay, csOrionPppRemoteUserPassword=csOrionPppRemoteUserPassword, csOrionFwNetMeetingPolicyRemoteServer=csOrionFwNetMeetingPolicyRemoteServer, csOrionFwLnotesPolicyTimeout=csOrionFwLnotesPolicyTimeout, csOrionFwNntpPolicyEntry=csOrionFwNntpPolicyEntry, csUnchanDs3ConfigLineStatus=csUnchanDs3ConfigLineStatus, csOc3AtmCurrentTransmittedCells=csOc3AtmCurrentTransmittedCells, csOspfExitOverflowInterval=csOspfExitOverflowInterval, csOrionVrDsByteFilterAclId=csOrionVrDsByteFilterAclId, csRsvpIfPktsIn=csRsvpIfPktsIn, csIsisSysAuthAreaType=csIsisSysAuthAreaType, csOrionLogLinkSlotIndex=csOrionLogLinkSlotIndex, csOrionFwHttpConfigTable=csOrionFwHttpConfigTable, csOrionSystemLoginUserName=csOrionSystemLoginUserName, csOrionBladeInfoEnd=csOrionBladeInfoEnd, csOrionFwAccessTable=csOrionFwAccessTable, csRsvpIfStatus=csRsvpIfStatus, csOrionIpSecStatsRcvEspPktsDropped=csOrionIpSecStatsRcvEspPktsDropped, csPwVcIndex=csPwVcIndex, csOrionSnmpAgentErrorCode=csOrionSnmpAgentErrorCode, csFrDlcmiStatTable=csFrDlcmiStatTable, csOrionMlpppInfo=csOrionMlpppInfo, csOrionIKEDialupConnUserId=csOrionIKEDialupConnUserId, csOrionFwMsSqlPolicyTimeout=csOrionFwMsSqlPolicyTimeout, csOrionVPNVRouterManagedIpRouteRetainOption=csOrionVPNVRouterManagedIpRouteRetainOption, csOrionIKECryptoMapEntry=csOrionIKECryptoMapEntry, csOrionSnmpGenTable=csOrionSnmpGenTable, csOrionAAAServerListAdminTable=csOrionAAAServerListAdminTable, csOrionVrDsByteFilterIndex=csOrionVrDsByteFilterIndex, csOrionGenAclDstAddressList=csOrionGenAclDstAddressList, csRtPolicyTermActionLogFlag=csRtPolicyTermActionLogFlag, SPPRedundantStatus=SPPRedundantStatus, csOrionViDsByteFilterTable=csOrionViDsByteFilterTable, csOrionFwLdapPolicyRemotePort=csOrionFwLdapPolicyRemotePort, csOspfVirtIfRetransInterval=csOspfVirtIfRetransInterval, csOrionVIfaceTable=csOrionVIfaceTable, csBgpGenDefaultMetric=csBgpGenDefaultMetric, SNPAAddress=SNPAAddress, csOrionEngineState=csOrionEngineState, csOrionFwDmzIfTable=csOrionFwDmzIfTable, csOrionL2tpTunnelMaxRetransmissions=csOrionL2tpTunnelMaxRetransmissions, csOc3ConfigEntry=csOc3ConfigEntry, csOspfLsdbType=csOspfLsdbType, csOrionIKECryptoMapRemoteIdentityType4=csOrionIKECryptoMapRemoteIdentityType4, csIsisSysMaxAreaAddresses=csIsisSysMaxAreaAddresses, csOrionPppIfModuleIndex=csOrionPppIfModuleIndex, csEthSlotIndex=csEthSlotIndex, csPolicyRouteFilterTableEnd=csPolicyRouteFilterTableEnd, csOrionAccessListInfoEnd=csOrionAccessListInfoEnd, csOspfNbrOptions=csOspfNbrOptions, csOc3AtmIntervalStatsTable=csOc3AtmIntervalStatsTable, csOrionIKECryptoMapTransformSet1=csOrionIKECryptoMapTransformSet1, csOc3SectionCurrentCVs=csOc3SectionCurrentCVs, csAtmConnIpAddressType=csAtmConnIpAddressType, csAtmConnPvcType=csAtmConnPvcType, csOrionGreSequence=csOrionGreSequence, csOrionFRoIPTransportWindowSize=csOrionFRoIPTransportWindowSize, csOrionVrSpfIcmpTotalConnTableEntries=csOrionVrSpfIcmpTotalConnTableEntries, csOrionFwAccessPriority=csOrionFwAccessPriority, csIsisCircL1ErrorMetric=csIsisCircL1ErrorMetric, csRtPolicyTermActionBgpASPathName=csRtPolicyTermActionBgpASPathName, csOrionNatGenTimeout=csOrionNatGenTimeout, csFrCircuitRemoteIpAddress=csFrCircuitRemoteIpAddress, csOrionVPNVRouterIpReasmOKs=csOrionVPNVRouterIpReasmOKs, csOrionDynamicCryptoMapTransformSet1=csOrionDynamicCryptoMapTransformSet1, csOrionSystemLoginRoleTable=csOrionSystemLoginRoleTable, csOrionFileSysReqTable=csOrionFileSysReqTable, PerfIntervalCount=PerfIntervalCount, csImpPolHomeAS=csImpPolHomeAS, csOrionFwEvLogEntry=csOrionFwEvLogEntry, csRipGlobalStatTable=csRipGlobalStatTable, csOspfIfHelloInterval=csOspfIfHelloInterval, csOrionNatGeneralParamEntry=csOrionNatGeneralParamEntry, csOrionL2tpStatsTotalTunnels=csOrionL2tpStatsTotalTunnels, csOrionVPNVRouterUdpNoPorts=csOrionVPNVRouterUdpNoPorts, csMplsInterfaceConfTable=csMplsInterfaceConfTable, csOrionNumericListName=csOrionNumericListName, csFrDlcmiErrorThreshold=csFrDlcmiErrorThreshold, csAtmInterfaceConfReceivedOamLoopBackResponses=csAtmInterfaceConfReceivedOamLoopBackResponses, csOrionBladeState=csOrionBladeState, csOrionVPNVRouterManagedIpRouteActiveOption=csOrionVPNVRouterManagedIpRouteActiveOption, csOrionVPNVRouterManagedIpRouteNextHopAS=csOrionVPNVRouterManagedIpRouteNextHopAS, LongDisplayString=LongDisplayString, csOc3AtmCurrentStatsEntry=csOc3AtmCurrentStatsEntry, csOrionIKEStatsTable=csOrionIKEStatsTable, csDs3Ds1IntervalBESs=csDs3Ds1IntervalBESs, csRsvpVrConfTableEnd=csRsvpVrConfTableEnd, csOrionVncQueueId=csOrionVncQueueId, csOrionVPNVRouterIpOutDiscards=csOrionVPNVRouterIpOutDiscards, csVpnVrfLogAreaFlag=csVpnVrfLogAreaFlag, csOrionSystemLoginUserPassword=csOrionSystemLoginUserPassword, csPwVcCtrlWord=csPwVcCtrlWord, csIgmpAccessGroupStatus=csIgmpAccessGroupStatus, csOrionBladeSerialNumb=csOrionBladeSerialNumb, csOrionFwHttpAuthTable=csOrionFwHttpAuthTable, csOrionFRoIPOperStatus=csOrionFRoIPOperStatus, csOrionVIfRateLimitBurstSize=csOrionVIfRateLimitBurstSize, csImpPolAction=csImpPolAction, csExpFilterIfTable=csExpFilterIfTable, csDs3StatTotalLCVs=csDs3StatTotalLCVs, csOrionPowerSupplyEvent=csOrionPowerSupplyEvent, csOspfHostEntry=csOspfHostEntry, csDs3ConfigMdlTestSig=csDs3ConfigMdlTestSig, csOrionViQoSFilterIndex=csOrionViQoSFilterIndex, csOrionViDsByteFilterAclId=csOrionViDsByteFilterAclId, csFrDlcmiStatEntry=csFrDlcmiStatEntry, csOrionFanTrayFWRelease=csOrionFanTrayFWRelease, csOrionVncQueueEntry=csOrionVncQueueEntry, csDs3Ds1IntervalTable=csDs3Ds1IntervalTable, csTelnetConnEntry=csTelnetConnEntry, csOspfNbrPriority=csOspfNbrPriority, csOrionViStatsRateLimitRxPktsSubmitted=csOrionViStatsRateLimitRxPktsSubmitted, csOrionNatStaticVIInsideGlobalAddress=csOrionNatStaticVIInsideGlobalAddress, csOrionEngineLoaderTime=csOrionEngineLoaderTime, csOrionPppRemoteUserRowStatus=csOrionPppRemoteUserRowStatus, csOrionStatusPanelFWReleaseDate=csOrionStatusPanelFWReleaseDate, csRtPolicyTermFromPolicyNamesListFlag=csRtPolicyTermFromPolicyNamesListFlag, csEthStatsTxDeferPktsOk=csEthStatsTxDeferPktsOk, csIgmpInterfaceVersion=csIgmpInterfaceVersion, csOrionQoSMeterRedByteCount=csOrionQoSMeterRedByteCount, csOrionTempAirFlowCardEntry=csOrionTempAirFlowCardEntry, csOrionConfigLoad=csOrionConfigLoad, csUnchanDs3ConfigMdlTestSig=csUnchanDs3ConfigMdlTestSig, csOc3SectionIntervalESs=csOc3SectionIntervalESs, csOspfIfRtrDeadInterval=csOspfIfRtrDeadInterval, csOrionPppIfConfigTable=csOrionPppIfConfigTable, csFRoIPCircuitTable=csFRoIPCircuitTable, csOrionMlpppBundleTxMRRU=csOrionMlpppBundleTxMRRU, csIsisCircL1AuthType=csIsisCircL1AuthType, csOc3SectionDayEntry=csOc3SectionDayEntry, csOrionFwHttpAuthEntry=csOrionFwHttpAuthEntry, csOrionQueueMaxRandomForYellow=csOrionQueueMaxRandomForYellow, csIsisManAreaAddrEntry=csIsisManAreaAddrEntry, csMplsMetricStyle=csMplsMetricStyle, csOrionIpSecStatsEspTotalOutboundSAsFailed=csOrionIpSecStatsEspTotalOutboundSAsFailed, csOrionFRoIPConfEntry=csOrionFRoIPConfEntry, csOrionQoSMeterName=csOrionQoSMeterName, csRsvpIfPathErrOut=csRsvpIfPathErrOut, csOrionOspfVirtIfStateChange=csOrionOspfVirtIfStateChange, csEthStatsTxLateCollisionCounts=csEthStatsTxLateCollisionCounts, csAtmConnTransmittedCells=csAtmConnTransmittedCells, csIsisCircL2DefaultMetric=csIsisCircL2DefaultMetric, csOrionViStatsRateLimitTxBytesSubmitted=csOrionViStatsRateLimitTxBytesSubmitted, csOspfHostMetric=csOspfHostMetric, csRtPolicyTermActionOspfTagOp=csRtPolicyTermActionOspfTagOp, csOrionPowerSupplyInputPowerState=csOrionPowerSupplyInputPowerState, csOrionConfigSaveStatus=csOrionConfigSaveStatus, csOrionFwLnotesPolicyTable=csOrionFwLnotesPolicyTable, csRtPolicyPrefixListEntry=csRtPolicyPrefixListEntry, csRsvpVrConfTable=csRsvpVrConfTable, csOrionChassisType=csOrionChassisType, csIsisISAdjSysInstance=csIsisISAdjSysInstance, csOrionL2tpConfigTunnelAuthentication=csOrionL2tpConfigTunnelAuthentication, csOrionMlpppBundlePacketsSent=csOrionMlpppBundlePacketsSent, csOrionVPNVRouterManagedIpRouteInstallOption=csOrionVPNVRouterManagedIpRouteInstallOption, csOrionOspfVirtIfConfigError=csOrionOspfVirtIfConfigError, csRsvpSessionUpRsbs=csRsvpSessionUpRsbs, csOspfIfMetricAddressLessIf=csOspfIfMetricAddressLessIf, csOrionQoSMeterProfilePBS=csOrionQoSMeterProfilePBS, csOrionViStatsRateLimitRxBytesSubmitted=csOrionViStatsRateLimitRxBytesSubmitted, csOc3LineCurrentSESs=csOc3LineCurrentSESs, csOrionVrSpfTcpSynTableEntries=csOrionVrSpfTcpSynTableEntries, csOrionL2tpConfigTunnelMaxRetransmissionTimeout=csOrionL2tpConfigTunnelMaxRetransmissionTimeout, csDs3StatIntervalCSESs=csDs3StatIntervalCSESs, csAtmConnOperStatus=csAtmConnOperStatus, csOspfExtLsdbAge=csOspfExtLsdbAge, csOrionIpSecStatsAhCurrentOutboundSAs=csOrionIpSecStatsAhCurrentOutboundSAs, csOrionPacketRingProtToPrimPreviousEndpointSlot=csOrionPacketRingProtToPrimPreviousEndpointSlot, csOc3PathPrevDayTable=csOc3PathPrevDayTable, csOrionFwCompuServeConfig=csOrionFwCompuServeConfig, csEthStatsRxFalsCrcCounts=csEthStatsRxFalsCrcCounts, csRsvpIfUpRsbsCreated=csRsvpIfUpRsbsCreated, csOrionVPNVRouterIpInUnknownProtos=csOrionVPNVRouterIpInUnknownProtos, csOrionNatStaticTranslationEntry=csOrionNatStaticTranslationEntry, csOrionFwCompuServePolicyRemoteServer=csOrionFwCompuServePolicyRemoteServer, csChDs3OperStatus=csChDs3OperStatus, csOrionFwSmtpConfigEntry=csOrionFwSmtpConfigEntry, csPwVcDescr=csPwVcDescr, csOrionViQoSFilterAclId=csOrionViQoSFilterAclId, csRtPolicyTermActionOspfMetricType=csRtPolicyTermActionOspfMetricType, csRtPolicyTermActionPreference2=csRtPolicyTermActionPreference2, csLdpEntityIndex=csLdpEntityIndex, csOrionL2tpTunnelHelloInterval=csOrionL2tpTunnelHelloInterval, csPppoeAcIfConfigVolunteerServiceAdvertising=csPppoeAcIfConfigVolunteerServiceAdvertising, csOc3PathPrevDayFCs=csOc3PathPrevDayFCs, csIsisCircPassiveCircuit=csIsisCircPassiveCircuit, csMplsVrPathConfRowStatus=csMplsVrPathConfRowStatus, csUnchanDs3ConfigEncap=csUnchanDs3ConfigEncap, csOrionL2tpSessionUsername=csOrionL2tpSessionUsername, csPosAdminStatus=csPosAdminStatus, csOrionDhcpRelayInNaks=csOrionDhcpRelayInNaks, csIsisISAdjAreaAddrAdjIndex=csIsisISAdjAreaAddrAdjIndex, csOrionEngineMemoryAllocs=csOrionEngineMemoryAllocs, csOrionVPNVRouterManagedIpRoutePreference1=csOrionVPNVRouterManagedIpRoutePreference1, csFRoIPCircuitEntry=csFRoIPCircuitEntry, csUnchanDs3ConfigMdlPfi=csUnchanDs3ConfigMdlPfi, csOrionQoSMeterProfileEntry=csOrionQoSMeterProfileEntry, csFRoIPCircuitReceivedFrames=csFRoIPCircuitReceivedFrames, csOrionTraceRoute=csOrionTraceRoute, csOc3ModuleIndex=csOc3ModuleIndex, csOrionQueueGroupPriorityIndex=csOrionQueueGroupPriorityIndex, csOc3PosRcvFrameMinPacketError=csOc3PosRcvFrameMinPacketError, csEthSubifPppoeService=csEthSubifPppoeService, csRtPolicyTermFromBgpLocalPref=csRtPolicyTermFromBgpLocalPref, csRtPolicyTermToOspfAreaType=csRtPolicyTermToOspfAreaType, DesignatedRouterPriority=DesignatedRouterPriority, csOrionVrPktFilterAclId=csOrionVrPktFilterAclId, csOrionIKECryptoMapRemoteIdentityType2=csOrionIKECryptoMapRemoteIdentityType2, csFrDlcmiStatNetSequenceNumber=csFrDlcmiStatNetSequenceNumber, csOrionFwSmtpPolicyTimeout=csOrionFwSmtpPolicyTimeout, csEthStatsEntry=csEthStatsEntry, csOrionVPNVRouterIpFragOKs=csOrionVPNVRouterIpFragOKs, csOrionTempStatusChange=csOrionTempStatusChange, csFrCircuitRatePolice=csFrCircuitRatePolice, csOrionGenAclTableEnd=csOrionGenAclTableEnd, csOrionFwTelnetPolicyPasswordChange=csOrionFwTelnetPolicyPasswordChange, csPosInterfaceConfModuleIndex=csPosInterfaceConfModuleIndex, csOrionQoSMeterTotalPackets=csOrionQoSMeterTotalPackets, csOrionIKECryptoMapLocalIdentityType=csOrionIKECryptoMapLocalIdentityType, csBgpNetworkTable=csBgpNetworkTable, csOrionViPktFilterAclId=csOrionViPktFilterAclId, csIsisISAdjProtSuppTable=csIsisISAdjProtSuppTable, csRtPolicyTermActionVpnSoo=csRtPolicyTermActionVpnSoo, csOrionVrQoSFilterEntry=csOrionVrQoSFilterEntry, csAtmConnRowStatus=csAtmConnRowStatus, csOrionVPNVRouterIpAdEntReasmMaxSize=csOrionVPNVRouterIpAdEntReasmMaxSize, csOspfDemandExtensions=csOspfDemandExtensions, csIsisIPRASysInstance=csIsisIPRASysInstance, cbrFileType=cbrFileType, csRipGlobalConfJitterUpdateStatus=csRipGlobalConfJitterUpdateStatus, csOrionTunnelSwitchTargetIpAddress=csOrionTunnelSwitchTargetIpAddress, csOrionIpSecEvLogTable=csOrionIpSecEvLogTable, csOrionMlpppBundleSiteName=csOrionMlpppBundleSiteName, csDs3StatCurrentSEFSs=csDs3StatCurrentSEFSs, csOrionSnmpTrapStatus=csOrionSnmpTrapStatus, csOrionFwDmzIfMask=csOrionFwDmzIfMask, csOc3AtmIntervalRecievedCells=csOc3AtmIntervalRecievedCells, csOrionPingResultsIpTargetAddress=csOrionPingResultsIpTargetAddress, csOrionTemperature=csOrionTemperature, csOrionIKEStateTable=csOrionIKEStateTable, csOrionIKECryptoMapTransformSet5=csOrionIKECryptoMapTransformSet5, csIsisCircL2HelloTimer=csIsisCircL2HelloTimer, csOc3PosOperStatus=csOc3PosOperStatus, csIsisSysL1State=csIsisSysL1State, csOrionFwDmzIfEntry=csOrionFwDmzIfEntry, csOrionSyslogdFacility5=csOrionSyslogdFacility5, csOc3SectionPrevDaySEFSs=csOc3SectionPrevDaySEFSs, csOrionIKECryptoMapIdleTimeout=csOrionIKECryptoMapIdleTimeout, csMplsIsisExtensionsTable=csMplsIsisExtensionsTable, csEthStatsRx256To511Pkts=csEthStatsRx256To511Pkts, csDs3Ds1CurrentTable=csDs3Ds1CurrentTable, csOrionFanTray=csOrionFanTray, csFrDlcmiModule=csFrDlcmiModule)
mibBuilder.exportSymbols("COSINE-ORION-MIB", csOrionIKESvrParamRetryLimit=csOrionIKESvrParamRetryLimit, csUnchanDs3ConfigEntry=csUnchanDs3ConfigEntry, csRtPolicyTermActionFlow=csRtPolicyTermActionFlow, csOrionOc3AlarmType=csOrionOc3AlarmType, csRsvpIfRouteDelay=csRsvpIfRouteDelay, csPwVcCeIntf=csPwVcCeIntf, csOrionSystemBootIndex=csOrionSystemBootIndex, csDs3Ds1TotalEntry=csDs3Ds1TotalEntry, IKERadiusAcctUserType=IKERadiusAcctUserType, csOrionL2tpConfigMaxTunnels=csOrionL2tpConfigMaxTunnels, csOrionIpLocalAddrPoolName=csOrionIpLocalAddrPoolName, csIsisISAdjTable=csIsisISAdjTable, csIsisISAdjNeighSNPAAddress=csIsisISAdjNeighSNPAAddress, csOrionIKECryptoMapAddressPool=csOrionIKECryptoMapAddressPool, csUnchanDs3ConfigDeviceType=csUnchanDs3ConfigDeviceType, csOspfSpfHold=csOspfSpfHold, csOrionIKEPolicySaLifetimeSoftKbytes=csOrionIKEPolicySaLifetimeSoftKbytes, csOrionVrDsByteFilterAction=csOrionVrDsByteFilterAction, csImpPolId=csImpPolId, csFRoIPCircuitFwdLink=csFRoIPCircuitFwdLink, csRsvpIfIngressLspsCreated=csRsvpIfIngressLspsCreated, csPwVcOutboundVcLabel=csPwVcOutboundVcLabel, csPwVcName=csPwVcName, csOc3PosRcvBytes=csOc3PosRcvBytes, csEthStatsTx64Pkts=csEthStatsTx64Pkts, csOrionBladeSharcCryptoSerial2=csOrionBladeSharcCryptoSerial2, csOrionFwSmtpPolicyMaxRecipients=csOrionFwSmtpPolicyMaxRecipients, csFRoIPCircuitReceivedFECNs=csFRoIPCircuitReceivedFECNs, csTelnetConnId=csTelnetConnId, csRipGlobalConfRfc1058CalcStatus=csRipGlobalConfRfc1058CalcStatus, csOrionFwHostAccess=csOrionFwHostAccess, csFrDlcmiPort=csFrDlcmiPort, csOrionManualCryptoMapStatus=csOrionManualCryptoMapStatus, csOrionL2tpSessionRemoteFlowControl=csOrionL2tpSessionRemoteFlowControl, csOrionFwHttpAuthMechanism=csOrionFwHttpAuthMechanism, csOrionSyslogdFacility7=csOrionSyslogdFacility7, csDot1dBaseBridgeEntryRowStatus=csDot1dBaseBridgeEntryRowStatus, csBgpNbrRemovePrivateAs=csBgpNbrRemovePrivateAs, csIsisSysSPFStartInt=csIsisSysSPFStartInt, csIsisIPRADefMetricType=csIsisIPRADefMetricType, csOc3LineS1S0=csOc3LineS1S0, csIsisCircIPEncaps=csIsisCircIPEncaps, csOrionPWE3Objects=csOrionPWE3Objects, csOrionVPNVRouterIpRouteDest=csOrionVPNVRouterIpRouteDest, csPosInterfaceConfSlotIndex=csPosInterfaceConfSlotIndex, csOspfVirtIfRtrDeadInterval=csOspfVirtIfRtrDeadInterval, csPppoeAcIfStatTable=csPppoeAcIfStatTable, csOrionChangeSource=csOrionChangeSource, csPppoeAcIfChannelIndex=csPppoeAcIfChannelIndex, csAtmConnInArpStatisticsTable=csAtmConnInArpStatisticsTable, csIsisL2SummAddrErrorMetric=csIsisL2SummAddrErrorMetric, csOc3PathCurrentESs=csOc3PathCurrentESs, csOrionFwSmtpSpamReply=csOrionFwSmtpSpamReply, csOrionIKECertFlag=csOrionIKECertFlag, csOspfImpPolStatus=csOspfImpPolStatus, csOrionFwAolConfigEnd=csOrionFwAolConfigEnd, csIgmpInterfaceRobustness=csIgmpInterfaceRobustness, csOrionNatTranslationTable=csOrionNatTranslationTable, csOrionVPNVRouterTcpActiveOpens=csOrionVPNVRouterTcpActiveOpens, csOrionPppIfTimeout=csOrionPppIfTimeout, csExpPolEntry=csExpPolEntry, csOrionVPNVRouterFailbackToPrimary=csOrionVPNVRouterFailbackToPrimary, csIsisL2SummAddrExpenseMetric=csIsisL2SummAddrExpenseMetric, csOrionVPNVRouterTcpRtoAlgorithm=csOrionVPNVRouterTcpRtoAlgorithm, csIgmpInterfaceGroups=csIgmpInterfaceGroups, csRsvpIfAckDesired=csRsvpIfAckDesired, csOrionFwHttpLog=csOrionFwHttpLog, csOrionNatInsideLocalAddr=csOrionNatInsideLocalAddr, csDs3ConfigLineStatus=csDs3ConfigLineStatus, csAtmConnICR=csAtmConnICR, csOrionVPNVRouterManagedIpRouteProto=csOrionVPNVRouterManagedIpRouteProto, csOrionPppIfEncryption=csOrionPppIfEncryption, csOrionFwCompuServePolicyTable=csOrionFwCompuServePolicyTable, csOspfAreaAggregateLsdbType=csOspfAreaAggregateLsdbType, SPPLoopbackStatus=SPPLoopbackStatus, csOrionManualCryptoMapOutboundESPAuthKey=csOrionManualCryptoMapOutboundESPAuthKey, csOrionTunnelSwitchTargetSessionCount=csOrionTunnelSwitchTargetSessionCount, csBgpConfedASRowStatus=csBgpConfedASRowStatus, csOrionLossOfFrame=csOrionLossOfFrame, Status=Status, csRtPolicyTermFromRouteFilterFlag=csRtPolicyTermFromRouteFilterFlag, csOrionModemFlowCtl=csOrionModemFlowCtl, csIsisSysMaxLSPGenInt=csIsisSysMaxLSPGenInt, csIsisIPRAEntry=csIsisIPRAEntry, csOrionBladeOperAttributes=csOrionBladeOperAttributes, csOrionFwNntpConfig=csOrionFwNntpConfig, csOrionL2tpTunnelStatsEntry=csOrionL2tpTunnelStatsEntry, csOrionVncQueueAclId=csOrionVncQueueAclId, csBgpConfedASTable=csBgpConfedASTable, csUnchanDs3ConfigTimeElapsed=csUnchanDs3ConfigTimeElapsed, csRsvpIfUpPsbsCreated=csRsvpIfUpPsbsCreated, csOrionVrSecondaryDnsServer=csOrionVrSecondaryDnsServer, csFRoIPCircuitLastTimeChange=csFRoIPCircuitLastTimeChange, csOrionCiscoHdlcChIndex=csOrionCiscoHdlcChIndex, csOrionVIfIpMask=csOrionVIfIpMask, csOc3LineIntervalEntry=csOc3LineIntervalEntry, csOrionFwSmtpSpamTable=csOrionFwSmtpSpamTable, csOrionIKEStateCreationTime=csOrionIKEStateCreationTime, csOrionFwInsideIfEntry=csOrionFwInsideIfEntry, csOrionPptpConnAge=csOrionPptpConnAge, csOrionPingCtl=csOrionPingCtl, csOrionVPNVRouterAbortFailOver=csOrionVPNVRouterAbortFailOver, csDs3StatIntervalLSESs=csDs3StatIntervalLSESs, csOrionVPNVRouterIpInDelivers=csOrionVPNVRouterIpInDelivers, csOspfIfDemand=csOspfIfDemand, csOrionVrRadiusRetransmit=csOrionVrRadiusRetransmit, csRsvpIfQueueTable=csRsvpIfQueueTable, csAtmConnReceivedCells=csAtmConnReceivedCells, csExpPolRipNbrIp=csExpPolRipNbrIp, csFrCircitFwdDlciType=csFrCircitFwdDlciType, csOspfConf=csOspfConf, csPwVcRowStatus=csPwVcRowStatus, csIsisSysLogAreaFlag=csIsisSysLogAreaFlag, csIgmpInterfaceQuerier=csIgmpInterfaceQuerier, csFRoIPCircuitReceivedDEs=csFRoIPCircuitReceivedDEs, csOrionVPNVRouterIpInDiscards=csOrionVPNVRouterIpInDiscards, csOrionFwEvLogTable=csOrionFwEvLogTable, csAtmInterfaceConfMaxVccs=csAtmInterfaceConfMaxVccs, csOrionServiceTemplateConnProfileEntry=csOrionServiceTemplateConnProfileEntry, csOrionOspfVirtIfRxBadPacket=csOrionOspfVirtIfRxBadPacket, csAtmInterfaceConfMaxActiveVpiBits=csAtmInterfaceConfMaxActiveVpiBits, csRipIfConfReceiveV2=csRipIfConfReceiveV2, csBgpNbrGroupImpPolEntry=csBgpNbrGroupImpPolEntry, csOrionLogLinkUp=csOrionLogLinkUp, csOrionSystemLoginDomainVRList=csOrionSystemLoginDomainVRList, csOrionFanEntry=csOrionFanEntry, csBgpGen=csBgpGen, csOrionMlpppBundleAdminStatus=csOrionMlpppBundleAdminStatus, csEthSubIfVlanName=csEthSubIfVlanName, csRtPolicyTermActionPreferenceOp=csRtPolicyTermActionPreferenceOp, csOrionVrDhcpRelayAdminStatus=csOrionVrDhcpRelayAdminStatus, csOspfLsdbLsid=csOspfLsdbLsid, csOrionPppIfOperStatus=csOrionPppIfOperStatus, csOc3PathIntervalSESs=csOc3PathIntervalSESs, csFrCircuitSentDEs=csFrCircuitSentDEs, csOrionVPNVRouterTcpCurrEstab=csOrionVPNVRouterTcpCurrEstab, csOrionPowerSupplyOutputPowerState=csOrionPowerSupplyOutputPowerState, csOc3Scramble=csOc3Scramble, csOc3CrcType=csOc3CrcType, csOrionQueueGroupTableEnd=csOrionQueueGroupTableEnd, csOrionPptpConnTable=csOrionPptpConnTable, csOrionSystemLoginDomainTable=csOrionSystemLoginDomainTable, csIsisIPRADefMetric=csIsisIPRADefMetric, csOspfIfAdvertiseSubnet=csOspfIfAdvertiseSubnet, csOrionVPNVRouterManagedIpRouteColor2=csOrionVPNVRouterManagedIpRouteColor2, csOrionAAAServerType=csOrionAAAServerType, csOrionFwFtpAuthPerUserAuthFilter=csOrionFwFtpAuthPerUserAuthFilter, csIsisISAdjEntry=csIsisISAdjEntry, csOrionSystemBootEntry=csOrionSystemBootEntry, csOrionFwLdapPolicyEntry=csOrionFwLdapPolicyEntry, csOspfAreaAggregateNet=csOspfAreaAggregateNet, MplsAtmVcIdentifier=MplsAtmVcIdentifier, csIsisIPRATable=csIsisIPRATable, csOc3ApsForce=csOc3ApsForce, csBgpNbrGroupVpnLogAreaFlag=csBgpNbrGroupVpnLogAreaFlag, csDs3Ds1TotalDMs=csDs3Ds1TotalDMs, csOrionFwHttpPolicyFunctionIds=csOrionFwHttpPolicyFunctionIds, csEthStatsTable=csEthStatsTable, csIsisSysMaxLSPLifetime=csIsisSysMaxLSPLifetime, csOspfAreaAuthType=csOspfAreaAuthType, csOrionFwTelnetPolicyRowStatus=csOrionFwTelnetPolicyRowStatus, csOrionIpLocalAddrPoolRowStatus=csOrionIpLocalAddrPoolRowStatus, csOrionL2tpTunnelLocalId=csOrionL2tpTunnelLocalId, csOrionVPNVRouterTcpMaxConn=csOrionVPNVRouterTcpMaxConn, csOrionL2tpConfigTunnelMaxRetransmissions=csOrionL2tpConfigTunnelMaxRetransmissions, csOrionDs3PortIdle=csOrionDs3PortIdle, csVpnVrfRowStatus=csVpnVrfRowStatus, csRtPolicyTermFromNextHopAddrIndex=csRtPolicyTermFromNextHopAddrIndex, csOrionQueueAverageSize=csOrionQueueAverageSize, csOrionEngineCpuVersion=csOrionEngineCpuVersion, csOrionTunnelSwitchTargetMaxSession=csOrionTunnelSwitchTargetMaxSession, csOrionTrapReceiverPort=csOrionTrapReceiverPort, csOrionTraceRouteEnd=csOrionTraceRouteEnd, csOrionEngineLevel3CacheSize=csOrionEngineLevel3CacheSize, csMplsLspPackets=csMplsLspPackets, csOrionChassisPacketRingProtectionCRC=csOrionChassisPacketRingProtectionCRC, csOrionMeter=csOrionMeter, csOrionGenAclSrcAddressList=csOrionGenAclSrcAddressList, csOrionFwSmtpRelayTable=csOrionFwSmtpRelayTable, csBgpNbrMaxPfxThreshold=csBgpNbrMaxPfxThreshold, csPppoeAcIfConfigTotalSessions=csPppoeAcIfConfigTotalSessions, csOrionIKECryptoMapName=csOrionIKECryptoMapName, csOrionFwTelnetConfig=csOrionFwTelnetConfig, csOrionIKEStatsPhase1OutPkts=csOrionIKEStatsPhase1OutPkts, csOrionNatInsideGlobalPort=csOrionNatInsideGlobalPort, csOrionViPbfFilterRowStatus=csOrionViPbfFilterRowStatus, csPwVcInboundGroupID=csPwVcInboundGroupID, csIsisManAreaAddrTable=csIsisManAreaAddrTable, csOrionPowerSupplyEventTrapGeneration=csOrionPowerSupplyEventTrapGeneration, csOrionVrSpfTcpInitTblSize=csOrionVrSpfTcpInitTblSize, csOrionFRoIPInfo=csOrionFRoIPInfo, csOrionViStatsOutErrors=csOrionViStatsOutErrors, csRtPolicyTermToNbrAddr=csRtPolicyTermToNbrAddr, csExpPolId=csExpPolId, csOrionFwProxyDaemonEntry=csOrionFwProxyDaemonEntry, csOrionVIfLastChange=csOrionVIfLastChange, csOrionLossOfSignal=csOrionLossOfSignal, csOrionNatGeneralParamTable=csOrionNatGeneralParamTable, csDot1dPortRemoteEnd=csDot1dPortRemoteEnd, csIsisSysProtSuppTable=csIsisSysProtSuppTable, csIsisSysProtSuppSysInstance=csIsisSysProtSuppSysInstance, csDs3StatIntervalEntry=csDs3StatIntervalEntry, csOrionIKEPolicyEncryption=csOrionIKEPolicyEncryption, csOrionManualCryptoMapEntry=csOrionManualCryptoMapEntry, csOrionDs3AlarmIndication=csOrionDs3AlarmIndication, csDs3StatTotalPCVs=csDs3StatTotalPCVs, BigMetric=BigMetric, csDs3ConfigMdlFic=csDs3ConfigMdlFic, csOrionL2tpConfigPppIpPoolName=csOrionL2tpConfigPppIpPoolName, csOrionVPNVRouterTcpRtoMax=csOrionVPNVRouterTcpRtoMax, csRipIfStatRcvBadPackets=csRipIfStatRcvBadPackets, csOrionFwHttpPolicyRowStatus=csOrionFwHttpPolicyRowStatus, csOrionCiscoHdlcInfoEnd=csOrionCiscoHdlcInfoEnd, csPwVcAdminStatus=csPwVcAdminStatus, csExpPolProtocol=csExpPolProtocol, csOrionIpSecTransformStatus=csOrionIpSecTransformStatus, csOrionCiscoHdlcConfigTable=csOrionCiscoHdlcConfigTable, csOrionIpSecStatsEspCryptoCepEstablishOk=csOrionIpSecStatsEspCryptoCepEstablishOk, csOrionVPNVRouterIpReasmFails=csOrionVPNVRouterIpReasmFails, csOrionIKECryptoMapRemoteIdentity1=csOrionIKECryptoMapRemoteIdentity1, csVpnVrfLogLevelFlag=csVpnVrfLogLevelFlag, csIgmpAccessGroupAddress=csIgmpAccessGroupAddress, csOrionIpSecStatsEspEncryptPktsBad=csOrionIpSecStatsEspEncryptPktsBad, csOrionIKEStateRetryTimer=csOrionIKEStateRetryTimer, csMplsPathAffinityMask=csMplsPathAffinityMask, csOrionPacketRingStatusChange=csOrionPacketRingStatusChange, csOrionConnectionProfileVrId=csOrionConnectionProfileVrId, csOrionL2tpSessionUpTime=csOrionL2tpSessionUpTime, csOrionOspfNbrStateChange=csOrionOspfNbrStateChange, csAtmInterfaceConfStatsTableEnd=csAtmInterfaceConfStatsTableEnd, csDs3ConfigFraming=csDs3ConfigFraming, csIsisSysMaxAreaCheck=csIsisSysMaxAreaCheck, csOrionNatStaticVITranslationTable=csOrionNatStaticVITranslationTable, csOrionControlVrUp=csOrionControlVrUp, csMplsPathMetricMode=csMplsPathMetricMode, csOrionBladeStateChange=csOrionBladeStateChange, csOrionQoSMeterGreenByteCount=csOrionQoSMeterGreenByteCount, csPppoeAcIfConfigEvLogArea=csPppoeAcIfConfigEvLogArea, csOrionStatusPanelPortTable=csOrionStatusPanelPortTable, csRsvpIfMaxBandwidth=csRsvpIfMaxBandwidth, csOrionVrSpfTcpInitTimeout=csOrionVrSpfTcpInitTimeout, csOrionOspfIfRxBadPacket=csOrionOspfIfRxBadPacket, csMplsExtensionsEntry=csMplsExtensionsEntry, csPwe3EventLogLevel=csPwe3EventLogLevel, csOrionMlpppLinkSubIfIndex=csOrionMlpppLinkSubIfIndex, csPOSInfo=csPOSInfo, csOrionIKESvrParamRadiusAcctUserTypePriority1=csOrionIKESvrParamRadiusAcctUserTypePriority1, csPppoeAcIfConfigName=csPppoeAcIfConfigName, csEthStatsRx1024To1518Pkts=csEthStatsRx1024To1518Pkts, csOspfIfEvents=csOspfIfEvents, csOrionVPNVRouterManagedIpRouteRowStatus=csOrionVPNVRouterManagedIpRouteRowStatus, csOrionL2tpConfigSessionFlowControl=csOrionL2tpConfigSessionFlowControl, csBgpGenVpnLogAreaFlag=csBgpGenVpnLogAreaFlag, csAtmInterfaceConfTransmitErrors=csAtmInterfaceConfTransmitErrors)
mibBuilder.exportSymbols("COSINE-ORION-MIB", csOrionFwInsideIfTable=csOrionFwInsideIfTable, csOrionIpSecStatePort=csOrionIpSecStatePort, csPwVcPeerIpv6Addr=csPwVcPeerIpv6Addr, csOrionPingResultsProbeResponses=csOrionPingResultsProbeResponses, csOrionFwTelnetAuthMechanism=csOrionFwTelnetAuthMechanism, csOrionNatOutsideGlobalPort=csOrionNatOutsideGlobalPort, csOrionIpSecStatsAhDecryptPktsOk=csOrionIpSecStatsAhDecryptPktsOk, csOrionOspfIfAuthFailure=csOrionOspfIfAuthFailure, csOc3PosSentFrameUnderrunAborted=csOc3PosSentFrameUnderrunAborted, csAtmConnStatsTable=csAtmConnStatsTable, csImpPolEntry=csImpPolEntry, csExpPolPeerAS=csExpPolPeerAS, csAtmConnMBS=csAtmConnMBS, csOrionFwPop3PolicyAuthenticate=csOrionFwPop3PolicyAuthenticate, csAtmConnTransmitOperationallyDown=csAtmConnTransmitOperationallyDown, csOrionSnmpInfo=csOrionSnmpInfo, csIsisSysMaxPathSplits=csIsisSysMaxPathSplits, csOrionSystemLoginDomainInterfaceList=csOrionSystemLoginDomainInterfaceList, csIsisIPReachAddr=csIsisIPReachAddr, csUnchanDs3ConfigFraming=csUnchanDs3ConfigFraming, csUnchanDs3ConfigMdlEic=csUnchanDs3ConfigMdlEic, csOrionFwGenProxyConfigEnd=csOrionFwGenProxyConfigEnd, csOrionFwDestIndex=csOrionFwDestIndex, csOrionLogLinkSubIfIndex=csOrionLogLinkSubIfIndex, csAtmInterfaceConfCurrentMaxVpiBits=csAtmInterfaceConfCurrentMaxVpiBits, csAtmConnStaticArpCacheRowStatus=csAtmConnStaticArpCacheRowStatus, csOrionSnmpCommTable=csOrionSnmpCommTable, csOrionFwAolPolicyTimeout=csOrionFwAolPolicyTimeout, csOrionFRoIPConfDefaultServiceSlot=csOrionFRoIPConfDefaultServiceSlot, csOrionFwHttpOurname=csOrionFwHttpOurname, csOrionRip=csOrionRip, csDs3Ds1IntervalEntry=csDs3Ds1IntervalEntry, csOrionEngineMemorySize=csOrionEngineMemorySize, csOrionFwNwGroupAddr=csOrionFwNwGroupAddr, csRtPolicyTermFromIsisMetricType=csRtPolicyTermFromIsisMetricType, csBgpNbrImpPolEntry=csBgpNbrImpPolEntry, csOrionL2tpTunnelAuthentication=csOrionL2tpTunnelAuthentication, csPppoeAcIfPortIndex=csPppoeAcIfPortIndex, csOrionIKESvrParamLocalSecretSize=csOrionIKESvrParamLocalSecretSize, csOrionIKEStatsPhase1InPktsRejected=csOrionIKEStatsPhase1InPktsRejected, csOc3NearEndPerfMonControl=csOc3NearEndPerfMonControl, csLdpVrAcceptTargetedHellos=csLdpVrAcceptTargetedHellos, csPppoeAcIfStatPADTTransmit=csPppoeAcIfStatPADTTransmit, csOrionPowerSupplyTable=csOrionPowerSupplyTable, csBgpNbrRowStatus=csBgpNbrRowStatus, csOrionFanTempSensorTable=csOrionFanTempSensorTable, csOrionSystemBootLocalIpMask=csOrionSystemBootLocalIpMask, csOrionFwCompuServePolicyTimeout=csOrionFwCompuServePolicyTimeout, csOrionIKEStateEntry=csOrionIKEStateEntry, csFrDlcmiStatStatusResponses=csFrDlcmiStatStatusResponses, csOrionVPNVRouterManagedIpRouteIfIndex=csOrionVPNVRouterManagedIpRouteIfIndex, csOrionDynamicCryptoMapTransformSet4=csOrionDynamicCryptoMapTransformSet4, csOrionPowerSupplyFWMajorRevision=csOrionPowerSupplyFWMajorRevision, csOrionVPNVRouterIpAddrTable=csOrionVPNVRouterIpAddrTable, csOspfVirtNbrArea=csOspfVirtNbrArea, csOrionServiceProviderVIfUp=csOrionServiceProviderVIfUp, csOrionVPNVRouterBackupPEs=csOrionVPNVRouterBackupPEs, csOspfNbrRtrId=csOspfNbrRtrId, csIsisExpPolStatus=csIsisExpPolStatus, csBgpNbrGroupHoldTimeConfigured=csBgpNbrGroupHoldTimeConfigured, csOrionIKESvrParamRowStatus=csOrionIKESvrParamRowStatus, csPppoeSessionUserName=csPppoeSessionUserName, csUnchanDs3ConfigMdlLic=csUnchanDs3ConfigMdlLic, csOrionBgp=csOrionBgp, csAtmInterfaceConfVccs=csAtmInterfaceConfVccs, csOrionVrDnsConfigEntry=csOrionVrDnsConfigEntry, csIsisCircL2HelloMultiplier=csIsisCircL2HelloMultiplier, csLdpEntityKeepAliveTimer=csLdpEntityKeepAliveTimer, csOrionVPNVRouterIpFragFails=csOrionVPNVRouterIpFragFails, csRipIfConfReceiveV1=csRipIfConfReceiveV1, csOrionFwFtpPolicyHandoffAddr=csOrionFwFtpPolicyHandoffAddr, csBgpConf=csBgpConf, csOrionViPbfFilterCounter=csOrionViPbfFilterCounter, csBgpPol=csBgpPol, csPppoeAcIfConfigPortEthernetAddress=csPppoeAcIfConfigPortEthernetAddress, csOrionVrSpfUdpIdleTimeout=csOrionVrSpfUdpIdleTimeout, csEthLinkTestInterval=csEthLinkTestInterval, csOrionFwNetMeetingPolicyName=csOrionFwNetMeetingPolicyName, csOrionServiceInfo=csOrionServiceInfo, csOrionIKEDialupConnRowStatus=csOrionIKEDialupConnRowStatus, csOrionDHCPInfo=csOrionDHCPInfo, csOrionViPktFilterEvlogStatus=csOrionViPktFilterEvlogStatus, csOrionDynamicCryptoMapTransformSet3=csOrionDynamicCryptoMapTransformSet3, csOrionVIfRateLimitRate=csOrionVIfRateLimitRate, csBgpGenKeepAliveConfigured=csBgpGenKeepAliveConfigured, csOrionFwLnotesPolicyRemoteServer=csOrionFwLnotesPolicyRemoteServer, csOrionCiscoHdlcSlotIndex=csOrionCiscoHdlcSlotIndex, csAtmConnStatsEntry=csAtmConnStatsEntry, csDs3Ds1IntervalNumber=csDs3Ds1IntervalNumber, csIsisCircL2CircID=csIsisCircL2CircID, csOrionOspfVirtIfAuthFailure=csOrionOspfVirtIfAuthFailure, csDs3StatCurrentEntry=csDs3StatCurrentEntry, csOrionFRoIPTransportOperStatus=csOrionFRoIPTransportOperStatus, csExpPolGenAclId=csExpPolGenAclId, csOrionServiceQueueInfo=csOrionServiceQueueInfo, csOc3SectionDayCVs=csOc3SectionDayCVs, csOrionGenAclEndDstPort=csOrionGenAclEndDstPort, csOrionTunnelSwitchRowStatus=csOrionTunnelSwitchRowStatus, csOrionChassisPacketRingPrimaryCRC=csOrionChassisPacketRingPrimaryCRC, csOrionFwSmtpSpamEntry=csOrionFwSmtpSpamEntry, csOrionFanTable=csOrionFanTable, csIgmpInterfaceWrongVersionQueries=csIgmpInterfaceWrongVersionQueries, csPwe3ConfTable=csPwe3ConfTable, csOrionFwNwGroupName=csOrionFwNwGroupName, csFRoIPCircuitCreationTime=csFRoIPCircuitCreationTime, csOrionMlpppLinkEntry=csOrionMlpppLinkEntry, csOrionFwHttpConfigEntry=csOrionFwHttpConfigEntry, csOrionVrDhcpRelayMaxHops=csOrionVrDhcpRelayMaxHops, csPppoeAcIfStatServiceNameErrors=csPppoeAcIfStatServiceNameErrors, csDs3ConfigMdlUnit=csDs3ConfigMdlUnit, csIsisIPRAMask=csIsisIPRAMask, csBgpNbrState=csBgpNbrState, csOrionServiceProviderVrUp=csOrionServiceProviderVrUp, csMplsPathIdentifier=csMplsPathIdentifier, csFRoIPCircuitState=csFRoIPCircuitState, csIsisL2SummAddrMask=csIsisL2SummAddrMask, csOrionAAAServerLdapSearchBase=csOrionAAAServerLdapSearchBase, csOrionViPbfFilterEntry=csOrionViPbfFilterEntry, csOrionL2tpConfigServiceIf=csOrionL2tpConfigServiceIf, csImpPolGenAclId=csImpPolGenAclId, csOrionFwSmtpPolicyInternalMailHub=csOrionFwSmtpPolicyInternalMailHub, csMplsVrEventLogArea=csMplsVrEventLogArea, csOrionL2tpInfo=csOrionL2tpInfo, csOrionDhcpRelayInOffers=csOrionDhcpRelayInOffers, csOc3LinePrevDayFCs=csOc3LinePrevDayFCs, csBgpNbrImpPolRowStatus=csBgpNbrImpPolRowStatus, csOrionFwPlugPolicyAuthenticate=csOrionFwPlugPolicyAuthenticate, csOrionIpSecEventLogEntry=csOrionIpSecEventLogEntry, csAtmInterfaceConfReceivedEncapsulationErrors=csAtmInterfaceConfReceivedEncapsulationErrors, csPppoeAcIfConfigMaxSessionsPerHost=csPppoeAcIfConfigMaxSessionsPerHost, csRipIfConfRcvDefRoute=csRipIfConfRcvDefRoute, csEthStatsRxNormAliCounts=csEthStatsRxNormAliCounts, csBgpNbrVpnIpv4AdminStatus=csBgpNbrVpnIpv4AdminStatus, csAtmConnDynamicArpCacheTable=csAtmConnDynamicArpCacheTable, csOrionVPNVRouterInfo=csOrionVPNVRouterInfo, csOrionQoSMeterProfileStatus=csOrionQoSMeterProfileStatus, csIsisCircL2Password=csIsisCircL2Password, csIgmpInterfaceTable=csIgmpInterfaceTable, csOrionFwDestMask=csOrionFwDestMask, csIsisCircTable=csIsisCircTable, csOc3LinePrevDayCVs=csOc3LinePrevDayCVs, csOrionVPNVRouterTable=csOrionVPNVRouterTable, csIsisManAdjNeighSNPA=csIsisManAdjNeighSNPA, csOrionL2tpTunnelRemoteHostname=csOrionL2tpTunnelRemoteHostname, csOrionL2tpStatsPayloadRecvDiscards=csOrionL2tpStatsPayloadRecvDiscards, csDs3ConfigLineCoding=csDs3ConfigLineCoding, csFrCircuitReceivedDEs=csFrCircuitReceivedDEs, csLdpEntityEntry=csLdpEntityEntry, csAtmConnReceivedBytes=csAtmConnReceivedBytes, csOc3SectionPrevDaySESs=csOc3SectionPrevDaySESs, csIsisSysLogAdjacencyChanges=csIsisSysLogAdjacencyChanges, csOrionAddressListTable=csOrionAddressListTable, csOrionOc3Line=csOrionOc3Line, csOc3PathIntervalESs=csOc3PathIntervalESs, csOrionIKECryptoMapType=csOrionIKECryptoMapType, csOrionVPNVRouterIpNetToMediaNetAddress=csOrionVPNVRouterIpNetToMediaNetAddress, csIsisSysLSPL2DbaseOloads=csIsisSysLSPL2DbaseOloads, csOrionIpSecTransformEntry=csOrionIpSecTransformEntry, csRtPolicyTermActionOspfTag2=csRtPolicyTermActionOspfTag2, csFrErrFaultTime=csFrErrFaultTime, csMplsVrPathRecordRoute=csMplsVrPathRecordRoute, csBgpNbrExpPolTable=csBgpNbrExpPolTable, csOrionVPNVRouterTcpConnRemAddress=csOrionVPNVRouterTcpConnRemAddress, csOrionSnmpGenEntry=csOrionSnmpGenEntry, csOc3PosRcvAbortedFrames=csOc3PosRcvAbortedFrames, csAtmConnReceivedArpRequests=csAtmConnReceivedArpRequests, MplsLdpIdentifier=MplsLdpIdentifier, csIsisSysInstance=csIsisSysInstance, csPppoeSessionTransmitOperDown=csPppoeSessionTransmitOperDown, csOrionFwPop3PolicyTable=csOrionFwPop3PolicyTable, csOrionIKEPolicyAuthentication=csOrionIKEPolicyAuthentication, csOrionVrAcctEntry=csOrionVrAcctEntry, csOrionRadiusAcctTable=csOrionRadiusAcctTable, csOrionPppConfigEntry=csOrionPppConfigEntry, csOrionIKESvrParamEntry=csOrionIKESvrParamEntry, csOrionManualCryptoMapTransformSet=csOrionManualCryptoMapTransformSet, csRtPolicyTermFromVpnSoo=csRtPolicyTermFromVpnSoo, csOrionVrRadiusAcctSvrAddress=csOrionVrRadiusAcctSvrAddress, csRipIfConfRipV1Compatibility=csRipIfConfRipV1Compatibility, csIsisCircLSPThrottle=csIsisCircLSPThrottle, csOrionGreConfigTable=csOrionGreConfigTable, csOrionVPNVRouterManagedIpRoutePreference2=csOrionVPNVRouterManagedIpRoutePreference2, csOrionVPNVRouterManagedIpRouteMetric2=csOrionVPNVRouterManagedIpRouteMetric2, csEthStatsRxOctsBad=csEthStatsRxOctsBad, csOrionIKEStatsEntry=csOrionIKEStatsEntry, csOrionL2tpStatsTotalSessions=csOrionL2tpStatsTotalSessions, csOrionSystemBootPort=csOrionSystemBootPort, csOrionHWControlInfo=csOrionHWControlInfo, csOrionFwSmtpSpamAccess=csOrionFwSmtpSpamAccess, csMplsOspfExtensionsTableEnd=csMplsOspfExtensionsTableEnd, csEthAutoneg=csEthAutoneg, csBgpNbrGroupVpnIpv4AdminStatus=csBgpNbrGroupVpnIpv4AdminStatus, csIsisManAreaAddrExistState=csIsisManAreaAddrExistState, csDs3Ds1YellowAlarmGen=csDs3Ds1YellowAlarmGen, csOrionSystemNumberOfBlades=csOrionSystemNumberOfBlades, csFrDlcmiStatFullStatusResponses=csFrDlcmiStatFullStatusResponses, csFrErrTime=csFrErrTime, csFRoIPCircuitSentFrames=csFRoIPCircuitSentFrames, csPppoeAcIfStatPADIReceive=csPppoeAcIfStatPADIReceive, csAtmConnInArpManageVc=csAtmConnInArpManageVc, csIsisIPRADest=csIsisIPRADest, csOrionViPbfFilterEgressViId=csOrionViPbfFilterEgressViId, csOrionBladeTemperatureSensor3=csOrionBladeTemperatureSensor3, csOrionIpSecStatsEspCurrentInboundSAs=csOrionIpSecStatsEspCurrentInboundSAs, csAtmInterfaceConfReceivedOperationallyDown=csAtmInterfaceConfReceivedOperationallyDown, csLdpVrConfTable=csLdpVrConfTable, csOrionFwMsSqlPolicyName=csOrionFwMsSqlPolicyName, csOrionPowerSupplyMonitorEvent=csOrionPowerSupplyMonitorEvent, csOspfSetTrap=csOspfSetTrap, csOrionIpSecStateDirection=csOrionIpSecStateDirection, csFrErrData=csFrErrData, csOrionIKECryptoMapLocalIdentity=csOrionIKECryptoMapLocalIdentity, csOrionFwAccessSourceAddrList=csOrionFwAccessSourceAddrList, csOrionIpSecStateEncryptionAlgorithm=csOrionIpSecStateEncryptionAlgorithm, csDot1dBaseNumPorts=csDot1dBaseNumPorts, csOrionFwSmtpPolicyLogRelay=csOrionFwSmtpPolicyLogRelay, csOrionLacConfigEntry=csOrionLacConfigEntry, csIsisCircLocalID=csIsisCircLocalID, csOrionVPNVRouterIpReasmTimeout=csOrionVPNVRouterIpReasmTimeout, csOrionEngineType=csOrionEngineType, csFrDlcmiChannel=csFrDlcmiChannel, csAtmConnReceivedDroppedPkts=csAtmConnReceivedDroppedPkts, csOrionPingCtlTable=csOrionPingCtlTable, csBgpNbrGroupMd5Password=csBgpNbrGroupMd5Password, csOrionVPNVRouterIpRouteTos=csOrionVPNVRouterIpRouteTos, csOrionAAAServerLdapUsername=csOrionAAAServerLdapUsername, csRipExpPolStatus=csRipExpPolStatus, csDs3StatIntervalTable=csDs3StatIntervalTable, csMplsIsisExtensionsRowStatus=csMplsIsisExtensionsRowStatus, UpToMaxAge=UpToMaxAge, csAtmInterfaceConfTransmittedPackets=csAtmInterfaceConfTransmittedPackets, csPppoeAcIfStatMalformedPkts=csPppoeAcIfStatMalformedPkts, csPwVcTable=csPwVcTable, csEthStatsTx1519Pkts=csEthStatsTx1519Pkts, csOrionFwNntpPolicyRemoteServer=csOrionFwNntpPolicyRemoteServer, csOrionL2tpStatsEntry=csOrionL2tpStatsEntry, csOrionIKESvrParamFlag=csOrionIKESvrParamFlag, csFrDlcmiBECNFlowControl=csFrDlcmiBECNFlowControl, csOrionSystemBootImageName5=csOrionSystemBootImageName5, csOrionSystemBootTable=csOrionSystemBootTable, csDs3Ds1CurrentPCVs=csDs3Ds1CurrentPCVs, csDs3ConfigPortIndex=csDs3ConfigPortIndex, csOrionFwLdapConfigEnd=csOrionFwLdapConfigEnd, csOrionIKECryptoMapKey=csOrionIKECryptoMapKey, csOrionFRoIPTransportEntry=csOrionFRoIPTransportEntry, csBgpNbrGroupNextHopSelf=csBgpNbrGroupNextHopSelf, csOrionIKEStateLastUsed=csOrionIKEStateLastUsed, csRtPolicyTermActionVpnRd=csRtPolicyTermActionVpnRd, csOrionPingCtlAdminStatus=csOrionPingCtlAdminStatus, csOrionSystemFwVer=csOrionSystemFwVer, csOrionServiceTemplateTable=csOrionServiceTemplateTable, csVpnVrfSiteOfOrigin=csVpnVrfSiteOfOrigin, csIsisCircL2CSNPInterval=csIsisCircL2CSNPInterval, csOrionFwSmtpInternalMailHub=csOrionFwSmtpInternalMailHub)
mibBuilder.exportSymbols("COSINE-ORION-MIB", csOrionFwEvLogLevel=csOrionFwEvLogLevel, csEthStatsTx1024To1518Pkts=csEthStatsTx1024To1518Pkts, csIsisCircL1Password=csIsisCircL1Password, csOrionFRoIPTransportAdminStatus=csOrionFRoIPTransportAdminStatus, csMplsLspConfiguredPaths=csMplsLspConfiguredPaths)
