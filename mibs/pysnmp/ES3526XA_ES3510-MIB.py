#
# PySNMP MIB module ES3526XA_ES3510-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ES3526XA_ES3510-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:52:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
dot1dStpPort, BridgeId, MacAddress, Timeout, dot1dStpPortEntry = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dStpPort", "BridgeId", "MacAddress", "Timeout", "dot1dStpPortEntry")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
PortList, VlanIndex = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList", "VlanIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Bits, MibIdentifier, ObjectIdentity, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Integer32, ModuleIdentity, IpAddress, TimeTicks, Gauge32, iso, Unsigned32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Bits", "MibIdentifier", "ObjectIdentity", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Integer32", "ModuleIdentity", "IpAddress", "TimeTicks", "Gauge32", "iso", "Unsigned32", "Counter32")
TruthValue, TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "RowStatus", "DisplayString")
MacAddress, = mibBuilder.importSymbols("TOKEN-RING-RMON-MIB", "MacAddress")
accton = MibIdentifier((1, 3, 6, 1, 4, 1, 259))
edgecore = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8))
cheetahSwitchMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1))
es3526XA_ES3510MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 259, 8, 1, 5))
es3526XA_ES3510MIB.setRevisions(('2001-09-06 00:00',))
if mibBuilder.loadTexts: es3526XA_ES3510MIB.setLastUpdated('200109060000Z')
if mibBuilder.loadTexts: es3526XA_ES3510MIB.setOrganization('Accton Technology Corp.')
es3526XA_ES3510MIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1))
es3526XA_ES3510Notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 2))
es3526XA_ES3510Conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 3))
switchMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1))
portMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 2))
trunkMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 3))
lacpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 4))
staMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5))
tftpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 6))
restartMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 7))
mirrorMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 8))
igmpSnoopMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9))
ipMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 10))
bcastStormMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 11))
vlanMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 12))
priorityMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13))
trapDestMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 14))
qosMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16))
securityMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17))
sysLogMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19))
lineMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 20))
sysTimeMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23))
fileMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 24))
dnsMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26))
mvrMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44))
dhcpSnoopMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46))
clusterMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47))
ipSrcGuardMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 48))
class KeySegment(DisplayString):
    status = 'current'
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 128)

class ValidStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("valid", 1), ("invalid", 2))

class StaPathCostMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("short", 1), ("long", 2))

switchManagementVlan = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4092))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchManagementVlan.setStatus('current')
switchNumber = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchNumber.setStatus('current')
switchInfoTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 3), )
if mibBuilder.loadTexts: switchInfoTable.setStatus('current')
switchInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 3, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "swUnitIndex"))
if mibBuilder.loadTexts: switchInfoEntry.setStatus('current')
swUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: swUnitIndex.setStatus('current')
swHardwareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swHardwareVer.setStatus('current')
swMicrocodeVer = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMicrocodeVer.setStatus('current')
swLoaderVer = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swLoaderVer.setStatus('current')
swBootRomVer = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBootRomVer.setStatus('current')
swOpCodeVer = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swOpCodeVer.setStatus('current')
swPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortNumber.setStatus('current')
swPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internalPower", 1), ("redundantPower", 2), ("internalAndRedundantPower", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPowerStatus.setStatus('current')
swRoleInSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("backupMaster", 2), ("slave", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRoleInSystem.setStatus('current')
swSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSerialNumber.setStatus('current')
swServiceTag = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swServiceTag.setStatus('current')
switchOperState = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("noncritical", 4), ("critical", 5), ("nonrecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchOperState.setStatus('current')
switchProductId = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 5))
swProdName = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdName.setStatus('current')
swProdManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdManufacturer.setStatus('current')
swProdDescription = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdDescription.setStatus('current')
swProdVersion = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 5, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdVersion.setStatus('current')
swProdUrl = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 5, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdUrl.setStatus('current')
swIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIdentifier.setStatus('current')
swChassisServiceTag = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 5, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swChassisServiceTag.setStatus('current')
amtrMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 8))
amtrMacAddrAgingStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 8, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amtrMacAddrAgingStatus.setStatus('current')
amtrMacAddrDelete = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 8, 4), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amtrMacAddrDelete.setStatus('current')
portTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 2, 1), )
if mibBuilder.loadTexts: portTable.setStatus('current')
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 2, 1, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "portIndex"))
if mibBuilder.loadTexts: portEntry.setStatus('current')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: portIndex.setStatus('current')
portName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portName.setStatus('current')
portType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("hundredBaseTX", 2), ("hundredBaseFX", 3), ("thousandBaseSX", 4), ("thousandBaseLX", 5), ("thousandBaseT", 6), ("thousandBaseGBIC", 7), ("thousandBaseSfp", 8), ("hundredBaseFxScSingleMode", 9), ("hundredBaseFxScMultiMode", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portType.setStatus('current')
portSpeedDpxCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("reserved", 1), ("halfDuplex10", 2), ("fullDuplex10", 3), ("halfDuplex100", 4), ("fullDuplex100", 5), ("halfDuplex1000", 6), ("fullDuplex1000", 7))).clone('halfDuplex10')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSpeedDpxCfg.setStatus('current')
portFlowCtrlCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("backPressure", 3), ("dot3xFlowControl", 4))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFlowCtrlCfg.setStatus('current')
portCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 2, 1, 1, 6), Bits().clone(namedValues=NamedValues(("portCap10half", 0), ("portCap10full", 1), ("portCap100half", 2), ("portCap100full", 3), ("portCap1000half", 4), ("portCap1000full", 5), ("reserved6", 6), ("reserved7", 7), ("reserved8", 8), ("reserved9", 9), ("reserved10", 10), ("reserved11", 11), ("reserved12", 12), ("reserved13", 13), ("portCapSym", 14), ("portCapFlowCtrl", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portCapabilities.setStatus('current')
portAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portAutonegotiation.setStatus('current')
portSpeedDpxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("error", 1), ("halfDuplex10", 2), ("fullDuplex10", 3), ("halfDuplex100", 4), ("fullDuplex100", 5), ("halfDuplex1000", 6), ("fullDuplex1000", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSpeedDpxStatus.setStatus('current')
portFlowCtrlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("error", 1), ("backPressure", 2), ("dot3xFlowControl", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portFlowCtrlStatus.setStatus('current')
portTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTrunkIndex.setStatus('current')
trunkMaxId = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkMaxId.setStatus('current')
trunkValidNumber = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkValidNumber.setStatus('current')
trunkTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 3, 3), )
if mibBuilder.loadTexts: trunkTable.setStatus('current')
trunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 3, 3, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "trunkIndex"))
if mibBuilder.loadTexts: trunkEntry.setStatus('current')
trunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 3, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: trunkIndex.setStatus('current')
trunkPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 3, 3, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkPorts.setStatus('current')
trunkCreation = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("lacp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkCreation.setStatus('current')
trunkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 3, 3, 1, 4), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkStatus.setStatus('current')
lacpPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 4, 1), )
if mibBuilder.loadTexts: lacpPortTable.setStatus('current')
lacpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 4, 1, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "lacpPortIndex"))
if mibBuilder.loadTexts: lacpPortEntry.setStatus('current')
lacpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 4, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: lacpPortIndex.setStatus('current')
lacpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpPortStatus.setStatus('current')
staSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 1), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staSystemStatus.setStatus('current')
staPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 2), )
if mibBuilder.loadTexts: staPortTable.setStatus('current')
staPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 2, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "staPortIndex"))
if mibBuilder.loadTexts: staPortEntry.setStatus('current')
staPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: staPortIndex.setStatus('current')
staPortFastForward = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 2, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortFastForward.setStatus('current')
staPortProtocolMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 2, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortProtocolMigration.setStatus('current')
staPortAdminEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 2, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortAdminEdgePort.setStatus('current')
staPortOperEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPortOperEdgePort.setStatus('current')
staPortAdminPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceTrue", 0), ("forceFalse", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortAdminPointToPoint.setStatus('current')
staPortOperPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPortOperPointToPoint.setStatus('current')
staPortLongPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortLongPathCost.setStatus('current')
staPortSystemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 2, 1, 9), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortSystemStatus.setStatus('current')
staProtocolType = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stp", 1), ("rstp", 2), ("mstp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staProtocolType.setStatus('current')
staTxHoldCount = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staTxHoldCount.setStatus('current')
staPathCostMethod = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 5), StaPathCostMode().clone('short')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPathCostMethod.setStatus('current')
xstMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6))
mstName = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstName.setStatus('current')
mstRevision = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstRevision.setStatus('current')
mstMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstMaxHops.setStatus('current')
xstInstanceCfgTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 4), )
if mibBuilder.loadTexts: xstInstanceCfgTable.setStatus('current')
xstInstanceCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 4, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "xstInstanceCfgIndex"))
if mibBuilder.loadTexts: xstInstanceCfgEntry.setStatus('current')
xstInstanceCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: xstInstanceCfgIndex.setStatus('current')
xstInstanceCfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xstInstanceCfgPriority.setStatus('current')
xstInstanceCfgTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 4, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgTimeSinceTopologyChange.setStatus('current')
xstInstanceCfgTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgTopChanges.setStatus('current')
xstInstanceCfgDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 4, 1, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgDesignatedRoot.setStatus('current')
xstInstanceCfgRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgRootCost.setStatus('current')
xstInstanceCfgRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgRootPort.setStatus('current')
xstInstanceCfgMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 4, 1, 8), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgMaxAge.setStatus('current')
xstInstanceCfgHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 4, 1, 9), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgHelloTime.setStatus('current')
xstInstanceCfgHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 4, 1, 10), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgHoldTime.setStatus('current')
xstInstanceCfgForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 4, 1, 11), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgForwardDelay.setStatus('current')
xstInstanceCfgBridgeMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 4, 1, 12), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgBridgeMaxAge.setStatus('current')
xstInstanceCfgBridgeHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 4, 1, 13), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgBridgeHelloTime.setStatus('current')
xstInstanceCfgBridgeForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 4, 1, 14), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgBridgeForwardDelay.setStatus('current')
xstInstanceCfgTxHoldCount = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgTxHoldCount.setStatus('current')
xstInstanceCfgPathCostMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 4, 1, 16), StaPathCostMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgPathCostMethod.setStatus('current')
xstInstancePortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 5), )
if mibBuilder.loadTexts: xstInstancePortTable.setStatus('current')
xstInstancePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 5, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "xstInstancePortInstance"), (0, "ES3526XA_ES3510-MIB", "xstInstancePortPort"))
if mibBuilder.loadTexts: xstInstancePortEntry.setStatus('current')
xstInstancePortInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: xstInstancePortInstance.setStatus('current')
xstInstancePortPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 5, 1, 2), Integer32())
if mibBuilder.loadTexts: xstInstancePortPort.setStatus('current')
xstInstancePortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xstInstancePortPriority.setStatus('current')
xstInstancePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("discarding", 1), ("learning", 2), ("forwarding", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortState.setStatus('current')
xstInstancePortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 5, 1, 5), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortEnable.setStatus('current')
xstInstancePortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xstInstancePortPathCost.setStatus('current')
xstInstancePortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 5, 1, 7), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortDesignatedRoot.setStatus('current')
xstInstancePortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortDesignatedCost.setStatus('current')
xstInstancePortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 5, 1, 9), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortDesignatedBridge.setStatus('current')
xstInstancePortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 5, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortDesignatedPort.setStatus('current')
xstInstancePortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortForwardTransitions.setStatus('current')
xstInstancePortPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("root", 2), ("designated", 3), ("alternate", 4), ("backup", 5), ("master", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortPortRole.setStatus('current')
mstInstanceEditTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 6), )
if mibBuilder.loadTexts: mstInstanceEditTable.setStatus('current')
mstInstanceEditEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 6, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "mstInstanceEditIndex"))
if mibBuilder.loadTexts: mstInstanceEditEntry.setStatus('current')
mstInstanceEditIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: mstInstanceEditIndex.setStatus('current')
mstInstanceEditVlansMap = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstInstanceEditVlansMap.setStatus('current')
mstInstanceEditVlansMap2k = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstInstanceEditVlansMap2k.setStatus('current')
mstInstanceEditVlansMap3k = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstInstanceEditVlansMap3k.setStatus('current')
mstInstanceEditVlansMap4k = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstInstanceEditVlansMap4k.setStatus('current')
mstInstanceEditRemainingHops = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceEditRemainingHops.setStatus('current')
mstInstanceOperTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 7), )
if mibBuilder.loadTexts: mstInstanceOperTable.setStatus('current')
mstInstanceOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 7, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "mstInstanceOperIndex"))
if mibBuilder.loadTexts: mstInstanceOperEntry.setStatus('current')
mstInstanceOperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: mstInstanceOperIndex.setStatus('current')
mstInstanceOperVlansMap = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceOperVlansMap.setStatus('current')
mstInstanceOperVlansMap2k = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceOperVlansMap2k.setStatus('current')
mstInstanceOperVlansMap3k = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 7, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceOperVlansMap3k.setStatus('current')
mstInstanceOperVlansMap4k = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 7, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceOperVlansMap4k.setStatus('current')
staLoopbackDetectionPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 7), )
if mibBuilder.loadTexts: staLoopbackDetectionPortTable.setStatus('current')
staLoopbackDetectionPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 7, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "staLoopbackDetectionPortIfIndex"))
if mibBuilder.loadTexts: staLoopbackDetectionPortEntry.setStatus('current')
staLoopbackDetectionPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 7, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: staLoopbackDetectionPortIfIndex.setStatus('current')
staLoopbackDetectionPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 7, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staLoopbackDetectionPortStatus.setStatus('current')
staLoopbackDetectionPortTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 7, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staLoopbackDetectionPortTrapStatus.setStatus('current')
staLoopbackDetectionPortReleaseMode = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staLoopbackDetectionPortReleaseMode.setStatus('current')
staLoopbackDetectionPortRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noRelease", 1), ("release", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staLoopbackDetectionPortRelease.setStatus('current')
tftpFileType = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("opcode", 1), ("config", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFileType.setStatus('current')
tftpSrcFile = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpSrcFile.setStatus('current')
tftpDestFile = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 6, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpDestFile.setStatus('current')
tftpServer = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 6, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpServer.setStatus('current')
tftpAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notDownloading", 1), ("downloadToPROM", 2), ("downloadToRAM", 3), ("upload", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpAction.setStatus('current')
tftpStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("tftpSuccess", 1), ("tftpStatusUnknown", 2), ("tftpGeneralError", 3), ("tftpNoResponseFromServer", 4), ("tftpDownloadChecksumError", 5), ("tftpDownloadIncompatibleImage", 6), ("tftpTftpFileNotFound", 7), ("tftpTftpAccessViolation", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpStatus.setStatus('current')
restartOpCodeFile = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartOpCodeFile.setStatus('current')
restartConfigFile = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartConfigFile.setStatus('current')
restartControl = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("running", 1), ("warmBoot", 2), ("coldBoot", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartControl.setStatus('current')
mirrorTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 8, 1), )
if mibBuilder.loadTexts: mirrorTable.setStatus('current')
mirrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 8, 1, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "mirrorDestinationPort"), (0, "ES3526XA_ES3510-MIB", "mirrorSourcePort"))
if mibBuilder.loadTexts: mirrorEntry.setStatus('current')
mirrorDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 8, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: mirrorDestinationPort.setStatus('current')
mirrorSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 8, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: mirrorSourcePort.setStatus('current')
mirrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rx", 1), ("tx", 2), ("both", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mirrorType.setStatus('current')
mirrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 8, 1, 1, 4), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mirrorStatus.setStatus('current')
igmpSnoopStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopStatus.setStatus('current')
igmpSnoopQuerier = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQuerier.setStatus('current')
igmpSnoopQueryCount = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQueryCount.setStatus('current')
igmpSnoopQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 125)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQueryInterval.setStatus('current')
igmpSnoopQueryMaxResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 25)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQueryMaxResponseTime.setStatus('current')
igmpSnoopQueryTimeout = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 500)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQueryTimeout.setStatus('current')
igmpSnoopVersion = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopVersion.setStatus('current')
igmpSnoopRouterCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 8), )
if mibBuilder.loadTexts: igmpSnoopRouterCurrentTable.setStatus('current')
igmpSnoopRouterCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 8, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "igmpSnoopRouterCurrentVlanIndex"))
if mibBuilder.loadTexts: igmpSnoopRouterCurrentEntry.setStatus('current')
igmpSnoopRouterCurrentVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 8, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopRouterCurrentVlanIndex.setStatus('current')
igmpSnoopRouterCurrentPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 8, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopRouterCurrentPorts.setStatus('current')
igmpSnoopRouterCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 8, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopRouterCurrentStatus.setStatus('current')
igmpSnoopRouterStaticTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 9), )
if mibBuilder.loadTexts: igmpSnoopRouterStaticTable.setStatus('current')
igmpSnoopRouterStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 9, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "igmpSnoopRouterStaticVlanIndex"))
if mibBuilder.loadTexts: igmpSnoopRouterStaticEntry.setStatus('current')
igmpSnoopRouterStaticVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 9, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopRouterStaticVlanIndex.setStatus('current')
igmpSnoopRouterStaticPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 9, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpSnoopRouterStaticPorts.setStatus('current')
igmpSnoopRouterStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 9, 1, 3), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpSnoopRouterStaticStatus.setStatus('current')
igmpSnoopMulticastCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 10), )
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentTable.setStatus('current')
igmpSnoopMulticastCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 10, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "igmpSnoopMulticastCurrentVlanIndex"), (0, "ES3526XA_ES3510-MIB", "igmpSnoopMulticastCurrentIpAddress"))
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentEntry.setStatus('current')
igmpSnoopMulticastCurrentVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentVlanIndex.setStatus('current')
igmpSnoopMulticastCurrentIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 10, 1, 2), IpAddress())
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentIpAddress.setStatus('current')
igmpSnoopMulticastCurrentPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 10, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentPorts.setStatus('current')
igmpSnoopMulticastCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 10, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentStatus.setStatus('current')
igmpSnoopMulticastStaticTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 11), )
if mibBuilder.loadTexts: igmpSnoopMulticastStaticTable.setStatus('current')
igmpSnoopMulticastStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 11, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "igmpSnoopMulticastStaticVlanIndex"), (0, "ES3526XA_ES3510-MIB", "igmpSnoopMulticastStaticIpAddress"))
if mibBuilder.loadTexts: igmpSnoopMulticastStaticEntry.setStatus('current')
igmpSnoopMulticastStaticVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 11, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopMulticastStaticVlanIndex.setStatus('current')
igmpSnoopMulticastStaticIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 11, 1, 2), IpAddress())
if mibBuilder.loadTexts: igmpSnoopMulticastStaticIpAddress.setStatus('current')
igmpSnoopMulticastStaticPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 11, 1, 3), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpSnoopMulticastStaticPorts.setStatus('current')
igmpSnoopMulticastStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 11, 1, 4), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpSnoopMulticastStaticStatus.setStatus('current')
igmpSnoopCurrentVlanTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 14), )
if mibBuilder.loadTexts: igmpSnoopCurrentVlanTable.setStatus('current')
igmpSnoopCurrentVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 14, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "igmpSnoopCurrentVlanIndex"))
if mibBuilder.loadTexts: igmpSnoopCurrentVlanEntry.setStatus('current')
igmpSnoopCurrentVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 14, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopCurrentVlanIndex.setStatus('current')
igmpSnoopCurrentVlanImmediateLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 14, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopCurrentVlanImmediateLeave.setStatus('current')
igmpSnoopLeaveProxy = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 15), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopLeaveProxy.setStatus('current')
igmpSnoopFilterStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 17), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopFilterStatus.setStatus('current')
igmpSnoopProfileTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 18), )
if mibBuilder.loadTexts: igmpSnoopProfileTable.setStatus('current')
igmpSnoopProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 18, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "igmpSnoopProfileId"))
if mibBuilder.loadTexts: igmpSnoopProfileEntry.setStatus('current')
igmpSnoopProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 18, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopProfileId.setStatus('current')
igmpSnoopProfileAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('deny')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopProfileAction.setStatus('current')
igmpSnoopProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 18, 1, 3), ValidStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopProfileStatus.setStatus('current')
igmpSnoopProfileCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 19))
igmpSnoopProfileCtlId = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 19, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopProfileCtlId.setStatus('current')
igmpSnoopProfileCtlInetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 19, 2), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopProfileCtlInetAddressType.setStatus('current')
igmpSnoopProfileCtlStartInetAddress = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 19, 3), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopProfileCtlStartInetAddress.setStatus('current')
igmpSnoopProfileCtlEndInetAddress = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 19, 4), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopProfileCtlEndInetAddress.setStatus('current')
igmpSnoopProfileCtlAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 19, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("create", 2), ("destroy", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopProfileCtlAction.setStatus('current')
igmpSnoopProfileRangeTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 20), )
if mibBuilder.loadTexts: igmpSnoopProfileRangeTable.setStatus('current')
igmpSnoopProfileRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 20, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "igmpSnoopProfileRangeProfileId"), (0, "ES3526XA_ES3510-MIB", "igmpSnoopProfileRangeInetAddressType"), (0, "ES3526XA_ES3510-MIB", "igmpSnoopProfileRangeStartInetAddress"))
if mibBuilder.loadTexts: igmpSnoopProfileRangeEntry.setStatus('current')
igmpSnoopProfileRangeProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 20, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopProfileRangeProfileId.setStatus('current')
igmpSnoopProfileRangeInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 20, 1, 2), InetAddressType())
if mibBuilder.loadTexts: igmpSnoopProfileRangeInetAddressType.setStatus('current')
igmpSnoopProfileRangeStartInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 20, 1, 3), InetAddress())
if mibBuilder.loadTexts: igmpSnoopProfileRangeStartInetAddress.setStatus('current')
igmpSnoopProfileRangeEndInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 20, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopProfileRangeEndInetAddress.setStatus('current')
igmpSnoopProfileRangeAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('deny')).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopProfileRangeAction.setStatus('current')
igmpSnoopFilterPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 21), )
if mibBuilder.loadTexts: igmpSnoopFilterPortTable.setStatus('current')
igmpSnoopFilterPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 21, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "igmpSnoopFilterPortIndex"))
if mibBuilder.loadTexts: igmpSnoopFilterPortEntry.setStatus('current')
igmpSnoopFilterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 21, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopFilterPortIndex.setStatus('current')
igmpSnoopFilterPortProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 21, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopFilterPortProfileId.setStatus('current')
igmpSnoopThrottlePortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 22), )
if mibBuilder.loadTexts: igmpSnoopThrottlePortTable.setStatus('current')
igmpSnoopThrottlePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 22, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "igmpSnoopThrottlePortIndex"))
if mibBuilder.loadTexts: igmpSnoopThrottlePortEntry.setStatus('current')
igmpSnoopThrottlePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 22, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopThrottlePortIndex.setStatus('current')
igmpSnoopThrottlePortRunningStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 22, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopThrottlePortRunningStatus.setStatus('current')
igmpSnoopThrottlePortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("replace", 1), ("deny", 2))).clone('deny')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopThrottlePortAction.setStatus('current')
igmpSnoopThrottlePortMaxGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 22, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopThrottlePortMaxGroups.setStatus('current')
igmpSnoopThrottlePortCurrentGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 22, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopThrottlePortCurrentGroups.setStatus('current')
netConfigTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 10, 1), )
if mibBuilder.loadTexts: netConfigTable.setStatus('current')
netConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 10, 1, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "netConfigIfIndex"), (0, "ES3526XA_ES3510-MIB", "netConfigIPAddress"), (0, "ES3526XA_ES3510-MIB", "netConfigSubnetMask"))
if mibBuilder.loadTexts: netConfigEntry.setStatus('current')
netConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 10, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: netConfigIfIndex.setStatus('current')
netConfigIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 10, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: netConfigIPAddress.setStatus('current')
netConfigSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 10, 1, 1, 3), IpAddress())
if mibBuilder.loadTexts: netConfigSubnetMask.setStatus('current')
netConfigPrimaryInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netConfigPrimaryInterface.setStatus('current')
netConfigUnnumbered = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unnumbered", 1), ("notUnnumbered", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netConfigUnnumbered.setStatus('current')
netConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 10, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netConfigStatus.setStatus('current')
netDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 10, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netDefaultGateway.setStatus('current')
ipHttpState = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHttpState.setStatus('current')
ipHttpPort = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 10, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHttpPort.setStatus('current')
ipDhcpRestart = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("noRestart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDhcpRestart.setStatus('current')
ipHttpsState = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHttpsState.setStatus('current')
ipHttpsPort = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 10, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHttpsPort.setStatus('current')
pingMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 10, 15))
pingIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 10, 15, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingIpAddress.setStatus('current')
pingPacketSize = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 10, 15, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 512)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingPacketSize.setStatus('current')
pingRoundTripTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 10, 15, 3), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pingRoundTripTime.setStatus('current')
pingCompleted = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 10, 15, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pingCompleted.setStatus('current')
pingAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 10, 15, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("pingStart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingAction.setStatus('current')
bcastStormTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 11, 1), )
if mibBuilder.loadTexts: bcastStormTable.setStatus('current')
bcastStormEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 11, 1, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "bcastStormIfIndex"))
if mibBuilder.loadTexts: bcastStormEntry.setStatus('current')
bcastStormIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 11, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: bcastStormIfIndex.setStatus('current')
bcastStormStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcastStormStatus.setStatus('current')
bcastStormOctetRateScale = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("scale-1m", 0), ("scale-100k", 1), ("scale-10k", 2), ("scale-1k", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcastStormOctetRateScale.setStatus('current')
bcastStormOctetRateLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcastStormOctetRateLevel.setStatus('current')
vlanTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 12, 1), )
if mibBuilder.loadTexts: vlanTable.setStatus('current')
vlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 12, 1, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "vlanIndex"))
if mibBuilder.loadTexts: vlanEntry.setStatus('current')
vlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 12, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: vlanIndex.setStatus('current')
vlanAddressMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("user", 1), ("bootp", 2), ("dhcp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanAddressMethod.setStatus('current')
vlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 12, 2), )
if mibBuilder.loadTexts: vlanPortTable.setStatus('current')
vlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 12, 2, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "vlanPortIndex"))
if mibBuilder.loadTexts: vlanPortEntry.setStatus('current')
vlanPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 12, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: vlanPortIndex.setStatus('current')
vlanPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hybrid", 1), ("dot1qTrunk", 2), ("access", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPortMode.setStatus('current')
vlanPortPrivateVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 12, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("isolated", 2), ("community", 3), ("promiscous", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPortPrivateVlanType.setStatus('current')
prioIpPrecDscpStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("precedence", 2), ("dscp", 3), ("tos", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIpPrecDscpStatus.setStatus('current')
prioIpPrecTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 2), )
if mibBuilder.loadTexts: prioIpPrecTable.setStatus('current')
prioIpPrecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 2, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "prioIpPrecPort"), (0, "ES3526XA_ES3510-MIB", "prioIpPrecValue"))
if mibBuilder.loadTexts: prioIpPrecEntry.setStatus('current')
prioIpPrecPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: prioIpPrecPort.setStatus('current')
prioIpPrecValue = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: prioIpPrecValue.setStatus('current')
prioIpPrecCos = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIpPrecCos.setStatus('current')
prioIpPrecRestoreDefault = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIpPrecRestoreDefault.setStatus('current')
prioIpDscpTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 4), )
if mibBuilder.loadTexts: prioIpDscpTable.setStatus('current')
prioIpDscpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 4, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "prioIpDscpPort"), (0, "ES3526XA_ES3510-MIB", "prioIpDscpValue"))
if mibBuilder.loadTexts: prioIpDscpEntry.setStatus('current')
prioIpDscpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: prioIpDscpPort.setStatus('current')
prioIpDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: prioIpDscpValue.setStatus('current')
prioIpDscpCos = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIpDscpCos.setStatus('current')
prioIpDscpRestoreDefault = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIpDscpRestoreDefault.setStatus('current')
prioIpPortEnableStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIpPortEnableStatus.setStatus('current')
prioIpPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 7), )
if mibBuilder.loadTexts: prioIpPortTable.setStatus('current')
prioIpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 7, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "prioIpPortPhysPort"), (0, "ES3526XA_ES3510-MIB", "prioIpPortValue"))
if mibBuilder.loadTexts: prioIpPortEntry.setStatus('current')
prioIpPortPhysPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: prioIpPortPhysPort.setStatus('current')
prioIpPortValue = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: prioIpPortValue.setStatus('current')
prioIpPortCos = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prioIpPortCos.setStatus('current')
prioIpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prioIpPortStatus.setStatus('current')
prioCopy = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 8))
prioCopyIpPrec = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 8, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioCopyIpPrec.setStatus('current')
prioCopyIpDscp = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 8, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioCopyIpDscp.setStatus('current')
prioCopyIpPort = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 8, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioCopyIpPort.setStatus('current')
prioWrrTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 9), )
if mibBuilder.loadTexts: prioWrrTable.setStatus('current')
prioWrrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 9, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "prioWrrTrafficClass"))
if mibBuilder.loadTexts: prioWrrEntry.setStatus('current')
prioWrrTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: prioWrrTrafficClass.setStatus('current')
prioWrrWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioWrrWeight.setStatus('current')
prioQueueMode = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("wrr", 1), ("strict", 2), ("hybrid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioQueueMode.setStatus('current')
prioIpTosTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 11), )
if mibBuilder.loadTexts: prioIpTosTable.setStatus('current')
prioIpTosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 11, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "prioIpTosPort"), (0, "ES3526XA_ES3510-MIB", "prioIpTosValue"))
if mibBuilder.loadTexts: prioIpTosEntry.setStatus('current')
prioIpTosPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 11, 1, 2), Integer32())
if mibBuilder.loadTexts: prioIpTosPort.setStatus('current')
prioIpTosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: prioIpTosValue.setStatus('current')
prioIpTosCos = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIpTosCos.setStatus('current')
prioIpTosRestoreDefault = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIpTosRestoreDefault.setStatus('current')
trapDestTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 14, 1), )
if mibBuilder.loadTexts: trapDestTable.setStatus('current')
trapDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 14, 1, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "trapDestAddress"))
if mibBuilder.loadTexts: trapDestEntry.setStatus('current')
trapDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 14, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: trapDestAddress.setStatus('current')
trapDestCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 14, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapDestCommunity.setStatus('current')
trapDestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 14, 1, 1, 3), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapDestStatus.setStatus('current')
trapDestVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("version1", 1), ("version2", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapDestVersion.setStatus('current')
trapDestUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 14, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(162)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapDestUdpPort.setStatus('current')
rateLimitMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 1))
rateLimitPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 1, 2), )
if mibBuilder.loadTexts: rateLimitPortTable.setStatus('current')
rateLimitPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 1, 2, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "rlPortIndex"))
if mibBuilder.loadTexts: rateLimitPortEntry.setStatus('current')
rlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: rlPortIndex.setStatus('current')
rlPortInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 1, 2, 1, 6), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortInputStatus.setStatus('current')
rlPortOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 1, 2, 1, 7), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortOutputStatus.setStatus('current')
rlPortInputLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortInputLevel.setStatus('current')
rlPortInputScale = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("scale-10m", 0), ("scale-1m", 1), ("scale-100k", 2), ("scale-10k", 3), ("scale-1k", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortInputScale.setStatus('current')
rlPortOutputLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortOutputLevel.setStatus('current')
rlPortOutputScale = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("scale-10m", 0), ("scale-1m", 1), ("scale-100k", 2), ("scale-10k", 3), ("scale-1k", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortOutputScale.setStatus('current')
cosMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 3))
prioAclToCosMappingTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 3, 1), )
if mibBuilder.loadTexts: prioAclToCosMappingTable.setStatus('current')
prioAclToCosMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 3, 1, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "prioAclToCosMappingIfIndex"), (0, "ES3526XA_ES3510-MIB", "prioAclToCosMappingAclName"))
if mibBuilder.loadTexts: prioAclToCosMappingEntry.setStatus('current')
prioAclToCosMappingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 3, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: prioAclToCosMappingIfIndex.setStatus('current')
prioAclToCosMappingAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15)))
if mibBuilder.loadTexts: prioAclToCosMappingAclName.setStatus('current')
prioAclToCosMappingCosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prioAclToCosMappingCosValue.setStatus('current')
prioAclToCosMappingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 3, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prioAclToCosMappingStatus.setStatus('current')
portSecurityMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 2))
radiusMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 4))
tacacsMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 5))
sshMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6))
aclMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7))
ipFilterMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 9))
portSecPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 2, 1), )
if mibBuilder.loadTexts: portSecPortTable.setStatus('current')
portSecPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 2, 1, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "portSecPortIndex"))
if mibBuilder.loadTexts: portSecPortEntry.setStatus('current')
portSecPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: portSecPortIndex.setStatus('current')
portSecPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 2, 1, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecPortStatus.setStatus('current')
portSecAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("trap", 2), ("shutdown", 3), ("trapAndShutdown", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecAction.setStatus('current')
portSecMaxMacCount = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecMaxMacCount.setStatus('current')
radiusServerGlobalAuthPort = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerGlobalAuthPort.setStatus('current')
radiusServerGlobalAcctPort = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerGlobalAcctPort.setStatus('current')
radiusServerGlobalKey = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerGlobalKey.setStatus('current')
radiusServerGlobalRetransmit = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerGlobalRetransmit.setStatus('current')
radiusServerGlobalTimeout = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerGlobalTimeout.setStatus('current')
radiusServerTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 4, 7), )
if mibBuilder.loadTexts: radiusServerTable.setStatus('current')
radiusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 4, 7, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "radiusServerIndex"))
if mibBuilder.loadTexts: radiusServerEntry.setStatus('current')
radiusServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 4, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: radiusServerIndex.setStatus('current')
radiusServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 4, 7, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radiusServerAddress.setStatus('current')
radiusServerAuthPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 4, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radiusServerAuthPortNumber.setStatus('current')
radiusServerAcctPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 4, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radiusServerAcctPortNumber.setStatus('current')
radiusServerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 4, 7, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerKey.setStatus('current')
radiusServerRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 4, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerRetransmit.setStatus('current')
radiusServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 4, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerTimeout.setStatus('current')
radiusServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 4, 7, 1, 8), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radiusServerStatus.setStatus('current')
tacacsPlusServerGlobalPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsPlusServerGlobalPortNumber.setStatus('current')
tacacsPlusServerGlobalKey = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsPlusServerGlobalKey.setStatus('current')
tacacsPlusServerTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 5, 4), )
if mibBuilder.loadTexts: tacacsPlusServerTable.setStatus('current')
tacacsPlusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 5, 4, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "tacacsPlusServerIndex"))
if mibBuilder.loadTexts: tacacsPlusServerEntry.setStatus('current')
tacacsPlusServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 5, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: tacacsPlusServerIndex.setStatus('current')
tacacsPlusServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 5, 4, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tacacsPlusServerAddress.setStatus('current')
tacacsPlusServerPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tacacsPlusServerPortNumber.setStatus('current')
tacacsPlusServerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 5, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tacacsPlusServerKey.setStatus('current')
tacacsPlusServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 5, 4, 1, 8), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tacacsPlusServerStatus.setStatus('current')
tacacsPlusServerRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 5, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tacacsPlusServerRetransmit.setStatus('current')
tacacsPlusServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 5, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 540))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tacacsPlusServerTimeout.setStatus('current')
tacacsPlusServerGlobalRetransmit = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsPlusServerGlobalRetransmit.setStatus('current')
tacacsPlusServerGlobalTimeout = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 540))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsPlusServerGlobalTimeout.setStatus('current')
sshServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerStatus.setStatus('current')
sshServerMajorVersion = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshServerMajorVersion.setStatus('current')
sshServerMinorVersion = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshServerMinorVersion.setStatus('current')
sshTimeout = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshTimeout.setStatus('current')
sshAuthRetries = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshAuthRetries.setStatus('current')
sshConnInfoTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 6), )
if mibBuilder.loadTexts: sshConnInfoTable.setStatus('current')
sshConnInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 6, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "sshConnID"))
if mibBuilder.loadTexts: sshConnInfoEntry.setStatus('current')
sshConnID = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: sshConnID.setStatus('current')
sshConnMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnMajorVersion.setStatus('current')
sshConnMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnMinorVersion.setStatus('current')
sshConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("negotiationStart", 1), ("authenticationStart", 2), ("sessionStart", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnStatus.setStatus('current')
sshConnUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnUserName.setStatus('current')
sshDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noDisconnect", 1), ("disconnect", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshDisconnect.setStatus('current')
sshConnEncryptionTypeStr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnEncryptionTypeStr.setStatus('current')
sshKeySize = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 896))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshKeySize.setStatus('current')
sshRsaHostKey1 = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 8), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey1.setStatus('current')
sshRsaHostKey2 = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 9), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey2.setStatus('current')
sshRsaHostKey3 = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 10), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey3.setStatus('current')
sshRsaHostKey4 = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 11), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey4.setStatus('current')
sshRsaHostKey5 = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 12), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey5.setStatus('current')
sshRsaHostKey6 = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 13), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey6.setStatus('current')
sshRsaHostKey7 = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 14), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey7.setStatus('current')
sshRsaHostKey8 = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 15), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey8.setStatus('current')
sshDsaHostKey1 = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 16), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey1.setStatus('current')
sshDsaHostKey2 = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 17), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey2.setStatus('current')
sshDsaHostKey3 = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 18), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey3.setStatus('current')
sshDsaHostKey4 = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 19), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey4.setStatus('current')
sshDsaHostKey5 = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 20), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey5.setStatus('current')
sshDsaHostKey6 = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 21), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey6.setStatus('current')
sshDsaHostKey7 = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 22), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey7.setStatus('current')
sshDsaHostKey8 = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 23), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey8.setStatus('current')
sshHostKeyGenAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noGen", 1), ("genRsaKey", 2), ("genDsaKey", 3), ("genBothKeys", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshHostKeyGenAction.setStatus('current')
sshHostKeyGenStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("success", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshHostKeyGenStatus.setStatus('current')
sshHostKeySaveAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noSave", 1), ("save", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshHostKeySaveAction.setStatus('current')
sshHostKeySaveStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("success", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshHostKeySaveStatus.setStatus('current')
sshHostKeyDelAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noDel", 1), ("delRsaKey", 2), ("delDsaKey", 3), ("delBothKeys", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshHostKeyDelAction.setStatus('current')
aclIpAceTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1), )
if mibBuilder.loadTexts: aclIpAceTable.setStatus('current')
aclIpAceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "aclIpAceName"), (0, "ES3526XA_ES3510-MIB", "aclIpAceIndex"))
if mibBuilder.loadTexts: aclIpAceEntry.setStatus('current')
aclIpAceName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15)))
if mibBuilder.loadTexts: aclIpAceName.setStatus('current')
aclIpAceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: aclIpAceIndex.setStatus('current')
aclIpAcePrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclIpAcePrecedence.setStatus('current')
aclIpAceAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceAction.setStatus('current')
aclIpAceSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceSourceIpAddr.setStatus('current')
aclIpAceSourceIpAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceSourceIpAddrBitmask.setStatus('current')
aclIpAceDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceDestIpAddr.setStatus('current')
aclIpAceDestIpAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceDestIpAddrBitmask.setStatus('current')
aclIpAceProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceProtocol.setStatus('current')
aclIpAcePrec = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAcePrec.setStatus('current')
aclIpAceTos = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceTos.setStatus('current')
aclIpAceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceDscp.setStatus('current')
aclIpAceSourcePortOp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperator", 1), ("equal", 2), ("range", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceSourcePortOp.setStatus('current')
aclIpAceMinSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceMinSourcePort.setStatus('current')
aclIpAceMaxSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceMaxSourcePort.setStatus('current')
aclIpAceDestPortOp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperator", 1), ("equal", 2), ("range", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceDestPortOp.setStatus('current')
aclIpAceMinDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceMinDestPort.setStatus('current')
aclIpAceMaxDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceMaxDestPort.setStatus('current')
aclIpAceControlCode = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceControlCode.setStatus('current')
aclIpAceControlCodeBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceControlCodeBitmask.setStatus('current')
aclIpAceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1, 1, 23), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceStatus.setStatus('current')
aclMacAceTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 2), )
if mibBuilder.loadTexts: aclMacAceTable.setStatus('current')
aclMacAceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 2, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "aclMacAceName"), (0, "ES3526XA_ES3510-MIB", "aclMacAceIndex"))
if mibBuilder.loadTexts: aclMacAceEntry.setStatus('current')
aclMacAceName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15)))
if mibBuilder.loadTexts: aclMacAceName.setStatus('current')
aclMacAceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: aclMacAceIndex.setStatus('current')
aclMacAcePrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclMacAcePrecedence.setStatus('current')
aclMacAceAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceAction.setStatus('current')
aclMacAcePktformat = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("any", 1), ("untagged-Eth2", 2), ("untagged802Dot3", 3), ("tagggedEth2", 4), ("tagged802Dot3", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAcePktformat.setStatus('current')
aclMacAceSourceMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceSourceMacAddr.setStatus('current')
aclMacAceSourceMacAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceSourceMacAddrBitmask.setStatus('current')
aclMacAceDestMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceDestMacAddr.setStatus('current')
aclMacAceDestMacAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceDestMacAddrBitmask.setStatus('current')
aclMacAceVidOp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("noOperator", 1), ("range", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceVidOp.setStatus('current')
aclMacAceMinVid = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceMinVid.setStatus('current')
aclMacAceMaxVid = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceMaxVid.setStatus('current')
aclMacAceEtherTypeOp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("noOperator", 1), ("range", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceEtherTypeOp.setStatus('current')
aclMacAceMinEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceMinEtherType.setStatus('current')
aclMacAceMaxEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceMaxEtherType.setStatus('current')
aclMacAceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 2, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceStatus.setStatus('current')
aclAclGroupTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 3), )
if mibBuilder.loadTexts: aclAclGroupTable.setStatus('current')
aclAclGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 3, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "aclAclGroupIfIndex"))
if mibBuilder.loadTexts: aclAclGroupEntry.setStatus('current')
aclAclGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: aclAclGroupIfIndex.setStatus('current')
aclAclGroupIngressIpAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclAclGroupIngressIpAcl.setStatus('current')
aclAclGroupEgressIpAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclAclGroupEgressIpAcl.setStatus('current')
aclAclGroupIngressMacAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclAclGroupIngressMacAcl.setStatus('current')
aclAclGroupEgressMacAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclAclGroupEgressMacAcl.setStatus('current')
ipFilterSnmpTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 9, 1), )
if mibBuilder.loadTexts: ipFilterSnmpTable.setStatus('current')
ipFilterSnmpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 9, 1, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "ipFilterSnmpStartAddress"))
if mibBuilder.loadTexts: ipFilterSnmpEntry.setStatus('current')
ipFilterSnmpStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 9, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: ipFilterSnmpStartAddress.setStatus('current')
ipFilterSnmpEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 9, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterSnmpEndAddress.setStatus('current')
ipFilterSnmpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 9, 1, 1, 3), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterSnmpStatus.setStatus('current')
ipFilterHTTPTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 9, 2), )
if mibBuilder.loadTexts: ipFilterHTTPTable.setStatus('current')
ipFilterHTTPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 9, 2, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "ipFilterHTTPStartAddress"))
if mibBuilder.loadTexts: ipFilterHTTPEntry.setStatus('current')
ipFilterHTTPStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 9, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: ipFilterHTTPStartAddress.setStatus('current')
ipFilterHTTPEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 9, 2, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterHTTPEndAddress.setStatus('current')
ipFilterHTTPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 9, 2, 1, 3), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterHTTPStatus.setStatus('current')
ipFilterTelnetTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 9, 3), )
if mibBuilder.loadTexts: ipFilterTelnetTable.setStatus('current')
ipFilterTelnetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 9, 3, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "ipFilterTelnetStartAddress"))
if mibBuilder.loadTexts: ipFilterTelnetEntry.setStatus('current')
ipFilterTelnetStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 9, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: ipFilterTelnetStartAddress.setStatus('current')
ipFilterTelnetEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 9, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterTelnetEndAddress.setStatus('current')
ipFilterTelnetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 9, 3, 1, 3), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterTelnetStatus.setStatus('current')
sysLogStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogStatus.setStatus('current')
sysLogHistoryFlashLevel = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogHistoryFlashLevel.setStatus('current')
sysLogHistoryRamLevel = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogHistoryRamLevel.setStatus('current')
remoteLogMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 6))
remoteLogStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 6, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteLogStatus.setStatus('current')
remoteLogLevel = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteLogLevel.setStatus('current')
remoteLogFacilityType = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("localUse0", 16), ("localUse1", 17), ("localUse2", 18), ("localUse3", 19), ("localUse4", 20), ("localUse5", 21), ("localUse6", 22), ("localUse7", 23)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteLogFacilityType.setStatus('current')
remoteLogServerTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 6, 4), )
if mibBuilder.loadTexts: remoteLogServerTable.setStatus('current')
remoteLogServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 6, 4, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "remoteLogServerIp"))
if mibBuilder.loadTexts: remoteLogServerEntry.setStatus('current')
remoteLogServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 6, 4, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: remoteLogServerIp.setStatus('current')
remoteLogServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 6, 4, 1, 2), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: remoteLogServerStatus.setStatus('current')
smtpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 7))
smtpStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 7, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpStatus.setStatus('current')
smtpSeverityLevel = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpSeverityLevel.setStatus('current')
smtpSourceEMail = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 7, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 41))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpSourceEMail.setStatus('current')
smtpServerIpTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 7, 4), )
if mibBuilder.loadTexts: smtpServerIpTable.setStatus('current')
smtpServerIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 7, 4, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "smtpServerIp"))
if mibBuilder.loadTexts: smtpServerIpEntry.setStatus('current')
smtpServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 7, 4, 1, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: smtpServerIp.setStatus('current')
smtpServerIpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 7, 4, 1, 2), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: smtpServerIpStatus.setStatus('current')
smtpDestEMailTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 7, 5), )
if mibBuilder.loadTexts: smtpDestEMailTable.setStatus('current')
smtpDestEMailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 7, 5, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "smtpDestEMail"))
if mibBuilder.loadTexts: smtpDestEMailEntry.setStatus('current')
smtpDestEMail = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 7, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 41)))
if mibBuilder.loadTexts: smtpDestEMail.setStatus('current')
smtpDestEMailStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 7, 5, 1, 2), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: smtpDestEMailStatus.setStatus('current')
consoleMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 20, 1))
telnetMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 20, 2))
consoleDataBits = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("databits7", 1), ("databits8", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleDataBits.setStatus('current')
consoleParity = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("partyNone", 1), ("partyEven", 2), ("partyOdd", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleParity.setStatus('current')
consoleStopBits = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stopbits1", 1), ("stopbits2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleStopBits.setStatus('current')
consoleExecTimeout = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 20, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleExecTimeout.setStatus('current')
consolePasswordThreshold = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 20, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consolePasswordThreshold.setStatus('current')
consoleSilentTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 20, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleSilentTime.setStatus('current')
consoleAdminBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 20, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleAdminBaudRate.setStatus('current')
consoleOperBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 20, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: consoleOperBaudRate.setStatus('current')
consoleLoginResponseTimeout = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 20, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleLoginResponseTimeout.setStatus('current')
telnetExecTimeout = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 20, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetExecTimeout.setStatus('current')
telnetPasswordThreshold = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 20, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPasswordThreshold.setStatus('current')
telnetLoginResponseTimeout = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 20, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetLoginResponseTimeout.setStatus('current')
sntpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 1))
sntpStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpStatus.setStatus('current')
sntpServiceMode = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("unicast", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpServiceMode.setStatus('current')
sntpPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 16384))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpPollInterval.setStatus('current')
sntpServerTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 1, 4), )
if mibBuilder.loadTexts: sntpServerTable.setStatus('current')
sntpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 1, 4, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "sntpServerIndex"))
if mibBuilder.loadTexts: sntpServerEntry.setStatus('current')
sntpServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: sntpServerIndex.setStatus('current')
sntpServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 1, 4, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpServerIpAddress.setStatus('current')
sysCurrentTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCurrentTime.setStatus('current')
sysTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeZone.setStatus('current')
sysTimeZoneName = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeZoneName.setStatus('current')
ntpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 5))
ntpStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 5, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpStatus.setStatus('current')
ntpServiceMode = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("unicast", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpServiceMode.setStatus('current')
ntpPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 16384))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpPollInterval.setStatus('current')
ntpAuthenticateStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 5, 4), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpAuthenticateStatus.setStatus('current')
ntpServerTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 5, 5), )
if mibBuilder.loadTexts: ntpServerTable.setStatus('current')
ntpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 5, 5, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "ntpServerIpAddress"))
if mibBuilder.loadTexts: ntpServerEntry.setStatus('current')
ntpServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 5, 5, 1, 1), IpAddress())
if mibBuilder.loadTexts: ntpServerIpAddress.setStatus('current')
ntpServerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntpServerVersion.setStatus('current')
ntpServerKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpServerKeyId.setStatus('current')
ntpServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("create", 1), ("active", 2), ("destroy", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntpServerStatus.setStatus('current')
ntpAuthKeyTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 5, 6), )
if mibBuilder.loadTexts: ntpAuthKeyTable.setStatus('current')
ntpAuthKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 5, 6, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "ntpAuthKeyId"))
if mibBuilder.loadTexts: ntpAuthKeyEntry.setStatus('current')
ntpAuthKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 5, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536)))
if mibBuilder.loadTexts: ntpAuthKeyId.setStatus('current')
ntpAuthKeyWord = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 5, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntpAuthKeyWord.setStatus('current')
ntpAuthKeyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 5, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("create", 1), ("active", 2), ("destroy", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntpAuthKeyStatus.setStatus('current')
fileCopyMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 24, 1))
fileCopySrcOperType = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 24, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("file", 1), ("runningCfg", 2), ("startUpCfg", 3), ("tftp", 4), ("unit", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopySrcOperType.setStatus('current')
fileCopySrcFileName = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 24, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopySrcFileName.setStatus('current')
fileCopyDestOperType = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("file", 1), ("runningCfg", 2), ("startUpCfg", 3), ("tftp", 4), ("unit", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyDestOperType.setStatus('current')
fileCopyDestFileName = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 24, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyDestFileName.setStatus('current')
fileCopyFileType = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 24, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("opcode", 1), ("config", 2), ("bootRom", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyFileType.setStatus('current')
fileCopyTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 24, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyTftpServer.setStatus('current')
fileCopyUnitId = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 24, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyUnitId.setStatus('current')
fileCopyAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 24, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notCopying", 1), ("copy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyAction.setStatus('current')
fileCopyStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 24, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("fileCopyTftpUndefError", 1), ("fileCopyTftpFileNotFound", 2), ("fileCopyTftpAccessViolation", 3), ("fileCopyTftpDiskFull", 4), ("fileCopyTftpIllegalOperation", 5), ("fileCopyTftpUnkownTransferId", 6), ("fileCopyTftpFileExisted", 7), ("fileCopyTftpNoSuchUser", 8), ("fileCopyTftpTimeout", 9), ("fileCopyTftpSendError", 10), ("fileCopyTftpReceiverError", 11), ("fileCopyTftpSocketOpenError", 12), ("fileCopyTftpSocketBindError", 13), ("fileCopyTftpUserCancel", 14), ("fileCopyTftpCompleted", 15), ("fileCopyParaError", 16), ("fileCopyBusy", 17), ("fileCopyUnknown", 18), ("fileCopyReadFileError", 19), ("fileCopySetStartupError", 20), ("fileCopyFileSizeExceed", 21), ("fileCopyMagicWordError", 22), ("fileCopyImageTypeError", 23), ("fileCopyHeaderChecksumError", 24), ("fileCopyImageChecksumError", 25), ("fileCopyWriteFlashFinish", 26), ("fileCopyWriteFlashError", 27), ("fileCopyWriteFlashProgramming", 28), ("fileCopyError", 29), ("fileCopySuccess", 30), ("fileCopyCompleted", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileCopyStatus.setStatus('current')
fileCopyTftpErrMsg = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 24, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileCopyTftpErrMsg.setStatus('current')
fileInfoMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 24, 2))
fileInfoTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 24, 2, 1), )
if mibBuilder.loadTexts: fileInfoTable.setStatus('current')
fileInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 24, 2, 1, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "fileInfoUnitID"), (1, "ES3526XA_ES3510-MIB", "fileInfoFileName"))
if mibBuilder.loadTexts: fileInfoEntry.setStatus('current')
fileInfoUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 24, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: fileInfoUnitID.setStatus('current')
fileInfoFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 24, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: fileInfoFileName.setStatus('current')
fileInfoFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 24, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("diag", 1), ("runtime", 2), ("syslog", 3), ("cmdlog", 4), ("config", 5), ("postlog", 6), ("private", 7), ("certificate", 8), ("webarchive", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileInfoFileType.setStatus('current')
fileInfoIsStartUp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 24, 2, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileInfoIsStartUp.setStatus('current')
fileInfoFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 24, 2, 1, 1, 5), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: fileInfoFileSize.setStatus('current')
fileInfoCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 24, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileInfoCreationTime.setStatus('current')
fileInfoDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 24, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noDelete", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileInfoDelete.setStatus('current')
dnsDomainLookup = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsDomainLookup.setStatus('current')
dnsDomainName = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsDomainName.setStatus('current')
dnsHostTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 3), )
if mibBuilder.loadTexts: dnsHostTable.setStatus('current')
dnsHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 3, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "dnsHostName"), (0, "ES3526XA_ES3510-MIB", "dnsHostIndex"))
if mibBuilder.loadTexts: dnsHostEntry.setStatus('current')
dnsHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)))
if mibBuilder.loadTexts: dnsHostName.setStatus('current')
dnsHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: dnsHostIndex.setStatus('current')
dnsHostIp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 3, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dnsHostIp.setStatus('current')
dnsAliasTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 4), )
if mibBuilder.loadTexts: dnsAliasTable.setStatus('current')
dnsAliasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 4, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "dnsAliasName"), (0, "ES3526XA_ES3510-MIB", "dnsAliasAlias"))
if mibBuilder.loadTexts: dnsAliasEntry.setStatus('current')
dnsAliasName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsAliasName.setStatus('current')
dnsAliasAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsAliasAlias.setStatus('current')
dnsDomainListTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 5), )
if mibBuilder.loadTexts: dnsDomainListTable.setStatus('current')
dnsDomainListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 5, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "dnsDomainListName"))
if mibBuilder.loadTexts: dnsDomainListEntry.setStatus('current')
dnsDomainListName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)))
if mibBuilder.loadTexts: dnsDomainListName.setStatus('current')
dnsDomainListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 5, 1, 2), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dnsDomainListStatus.setStatus('current')
dnsNameServerTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 6), )
if mibBuilder.loadTexts: dnsNameServerTable.setStatus('current')
dnsNameServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 6, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "dnsNameServerIndex"))
if mibBuilder.loadTexts: dnsNameServerEntry.setStatus('current')
dnsNameServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: dnsNameServerIndex.setStatus('current')
dnsNameServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 6, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsNameServerIp.setStatus('current')
dnsCacheTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 7), )
if mibBuilder.loadTexts: dnsCacheTable.setStatus('current')
dnsCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 7, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "dnsCacheIndex"))
if mibBuilder.loadTexts: dnsCacheEntry.setStatus('current')
dnsCacheIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: dnsCacheIndex.setStatus('current')
dnsCacheFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCacheFlag.setStatus('current')
dnsCacheType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("address", 1), ("cname", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCacheType.setStatus('current')
dnsCacheIp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 7, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCacheIp.setStatus('current')
dnsCacheTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 876000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCacheTtl.setStatus('current')
dnsCacheDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 7, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCacheDomain.setStatus('current')
mvrStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrStatus.setStatus('current')
mvrVlanId = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrVlanId.setStatus('current')
mvrMaxGroups = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrMaxGroups.setStatus('current')
mvrCurrentGroups = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrCurrentGroups.setStatus('current')
mvrGroupsCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 5))
mvrGroupsCtlId = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 5, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrGroupsCtlId.setStatus('current')
mvrGroupsCtlCount = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrGroupsCtlCount.setStatus('current')
mvrGroupsCtlAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noAction", 0), ("create", 1), ("destory", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrGroupsCtlAction.setStatus('current')
mvrGroupTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 6), )
if mibBuilder.loadTexts: mvrGroupTable.setStatus('current')
mvrGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 6, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "mvrGroupId"))
if mibBuilder.loadTexts: mvrGroupEntry.setStatus('current')
mvrGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: mvrGroupId.setStatus('current')
mvrGroutActive = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrGroutActive.setStatus('current')
mvrGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrGroupStatus.setStatus('current')
mvrGroupStaticTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 7), )
if mibBuilder.loadTexts: mvrGroupStaticTable.setStatus('current')
mvrGroupStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 7, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "mvrGroupStaticAddress"))
if mibBuilder.loadTexts: mvrGroupStaticEntry.setStatus('current')
mvrGroupStaticAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 7, 1, 1), IpAddress())
if mibBuilder.loadTexts: mvrGroupStaticAddress.setStatus('current')
mvrGroupStaticPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 7, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrGroupStaticPorts.setStatus('current')
mvrGroupStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrGroupStaticStatus.setStatus('current')
mvrGroupCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 8), )
if mibBuilder.loadTexts: mvrGroupCurrentTable.setStatus('current')
mvrGroupCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 8, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "mvrGroupCurrentAddress"))
if mibBuilder.loadTexts: mvrGroupCurrentEntry.setStatus('current')
mvrGroupCurrentAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 8, 1, 1), IpAddress())
if mibBuilder.loadTexts: mvrGroupCurrentAddress.setStatus('current')
mvrGroupCurrentPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 8, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrGroupCurrentPorts.setStatus('current')
mvrPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 9), )
if mibBuilder.loadTexts: mvrPortTable.setStatus('current')
mvrPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 9, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "mvrIfIndex"))
if mibBuilder.loadTexts: mvrPortEntry.setStatus('current')
mvrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 9, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: mvrIfIndex.setStatus('current')
mvrPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("source", 1), ("receiver", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrPortType.setStatus('current')
mvrPortImmediateLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 9, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrPortImmediateLeave.setStatus('current')
mvrPortActive = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrPortActive.setStatus('current')
mvrRunningStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrRunningStatus.setStatus('current')
dhcpSnoopGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 1))
dhcpSnoopVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 2))
dhcpSnoopInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 3))
dhcpSnoopBindings = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 4))
dhcpSnoopStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 5))
dhcpSnoopEnable = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopEnable.setStatus('current')
dhcpSnoopVerifyMacAddressEnable = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopVerifyMacAddressEnable.setStatus('current')
dhcpSnoopInformationOptionEnable = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopInformationOptionEnable.setStatus('current')
dhcpSnoopInformationOptionPolicy = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("drop", 1), ("keep", 2), ("replace", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopInformationOptionPolicy.setStatus('current')
dhcpSnoopVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 2, 1), )
if mibBuilder.loadTexts: dhcpSnoopVlanConfigTable.setStatus('current')
dhcpSnoopVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 2, 1, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "dhcpSnoopVlanIndex"))
if mibBuilder.loadTexts: dhcpSnoopVlanConfigEntry.setStatus('current')
dhcpSnoopVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 2, 1, 1, 1), VlanIndex())
if mibBuilder.loadTexts: dhcpSnoopVlanIndex.setStatus('current')
dhcpSnoopVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 2, 1, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopVlanEnable.setStatus('current')
dhcpSnoopPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 3, 1), )
if mibBuilder.loadTexts: dhcpSnoopPortConfigTable.setStatus('current')
dhcpSnoopPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 3, 1, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "dhcpSnoopPortIfIndex"))
if mibBuilder.loadTexts: dhcpSnoopPortConfigEntry.setStatus('current')
dhcpSnoopPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 3, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: dhcpSnoopPortIfIndex.setStatus('current')
dhcpSnoopPortTrustEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 3, 1, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopPortTrustEnable.setStatus('current')
dhcpSnoopBindingsTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 4, 1), )
if mibBuilder.loadTexts: dhcpSnoopBindingsTable.setStatus('current')
dhcpSnoopBindingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 4, 1, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "dhcpSnoopBindingsVlanIndex"), (0, "ES3526XA_ES3510-MIB", "dhcpSnoopBindingsMacAddress"))
if mibBuilder.loadTexts: dhcpSnoopBindingsEntry.setStatus('current')
dhcpSnoopBindingsVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 4, 1, 1, 1), VlanIndex())
if mibBuilder.loadTexts: dhcpSnoopBindingsVlanIndex.setStatus('current')
dhcpSnoopBindingsMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 4, 1, 1, 2), MacAddress())
if mibBuilder.loadTexts: dhcpSnoopBindingsMacAddress.setStatus('current')
dhcpSnoopBindingsAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 4, 1, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopBindingsAddrType.setStatus('current')
dhcpSnoopBindingsEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("static", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopBindingsEntryType.setStatus('current')
dhcpSnoopBindingsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 4, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopBindingsIpAddress.setStatus('current')
dhcpSnoopBindingsPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 4, 1, 1, 6), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopBindingsPortIfIndex.setStatus('current')
dhcpSnoopBindingsLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 4, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopBindingsLeaseTime.setStatus('current')
dhcpSnoopTotalForwardedPkts = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopTotalForwardedPkts.setStatus('current')
dhcpSnoopUntrustedPortDroppedPkts = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopUntrustedPortDroppedPkts.setStatus('current')
clusterEnable = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusterEnable.setStatus('current')
clusterCommanderEnable = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusterCommanderEnable.setStatus('current')
clusterIpPool = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusterIpPool.setStatus('current')
clusterClearCandidateTable = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noClear", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusterClearCandidateTable.setStatus('current')
clusterRole = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5))).clone(namedValues=NamedValues(("commander", 1), ("candidate", 2), ("activeMember", 3), ("disabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterRole.setStatus('current')
clusterMemberCount = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterMemberCount.setStatus('current')
clusterCandidateCount = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterCandidateCount.setStatus('current')
clusterCandidateTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 9), )
if mibBuilder.loadTexts: clusterCandidateTable.setStatus('current')
clusterCandidateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 9, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "clusterCandidateMacAddr"))
if mibBuilder.loadTexts: clusterCandidateEntry.setStatus('current')
clusterCandidateMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 9, 1, 1), MacAddress())
if mibBuilder.loadTexts: clusterCandidateMacAddr.setStatus('current')
clusterCandidateDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 42))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterCandidateDesc.setStatus('current')
clusterCandidateRole = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("candidate", 2), ("activeMember", 3), ("inactiveMember", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterCandidateRole.setStatus('current')
clusterMemberTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 10), )
if mibBuilder.loadTexts: clusterMemberTable.setStatus('current')
clusterMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 10, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "clusterMemberId"))
if mibBuilder.loadTexts: clusterMemberEntry.setStatus('current')
clusterMemberId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: clusterMemberId.setStatus('current')
clusterMemberMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 10, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterMemberMacAddr.setStatus('current')
clusterMemberDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 42))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterMemberDesc.setStatus('current')
clusterMemberActive = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("activeMember", 3), ("inactiveMember", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterMemberActive.setStatus('current')
clusterMemberAddCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 11))
clusterMemberAddCtlMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 11, 1), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusterMemberAddCtlMacAddr.setStatus('current')
clusterMemberAddCtlId = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 11, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusterMemberAddCtlId.setStatus('current')
clusterMemberAddCtlAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 11, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAdd", 1), ("add", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusterMemberAddCtlAction.setStatus('current')
clusterMemberRemoveCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 12))
clusterMemberRemoveCtlId = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 12, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusterMemberRemoveCtlId.setStatus('current')
clusterMemberRemoveCtlAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noRemove", 1), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusterMemberRemoveCtlAction.setStatus('current')
ipSrcGuardConfigTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 48, 1), )
if mibBuilder.loadTexts: ipSrcGuardConfigTable.setStatus('current')
ipSrcGuardConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 48, 1, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "ipSrcGuardPortIfIndex"))
if mibBuilder.loadTexts: ipSrcGuardConfigEntry.setStatus('current')
ipSrcGuardPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 48, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ipSrcGuardPortIfIndex.setStatus('current')
ipSrcGuardMode = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 48, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("diabled", 0), ("srcIp", 1), ("srcIpMac", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSrcGuardMode.setStatus('current')
ipSrcGuardAddrTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 48, 2), )
if mibBuilder.loadTexts: ipSrcGuardAddrTable.setStatus('current')
ipSrcGuardAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 48, 2, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "ipSrcGuardBindingsVlanIndex"), (0, "ES3526XA_ES3510-MIB", "ipSrcGuardBindingsMacAddress"))
if mibBuilder.loadTexts: ipSrcGuardAddrEntry.setStatus('current')
ipSrcGuardBindingsVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 48, 2, 1, 1), VlanIndex())
if mibBuilder.loadTexts: ipSrcGuardBindingsVlanIndex.setStatus('current')
ipSrcGuardBindingsMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 48, 2, 1, 2), MacAddress())
if mibBuilder.loadTexts: ipSrcGuardBindingsMacAddress.setStatus('current')
ipSrcGuardBindingsAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 48, 2, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSrcGuardBindingsAddrType.setStatus('current')
ipSrcGuardBindingsEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 48, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("dynamic", 1), ("static", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSrcGuardBindingsEntryType.setStatus('current')
ipSrcGuardBindingsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 48, 2, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSrcGuardBindingsIpAddress.setStatus('current')
ipSrcGuardBindingsPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 48, 2, 1, 6), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSrcGuardBindingsPortIfIndex.setStatus('current')
ipSrcGuardBindingsLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 48, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSrcGuardBindingsLeaseTime.setStatus('current')
ipSrcGuardBindingsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 48, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSrcGuardBindingsStatus.setStatus('current')
es3526XA_ES3510Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 2, 1))
es3526XA_ES3510TrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 2, 1, 0))
swPowerStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 2, 1, 0, 1)).setObjects(("ES3526XA_ES3510-MIB", "swIndivPowerUnitIndex"), ("ES3526XA_ES3510-MIB", "swIndivPowerIndex"), ("ES3526XA_ES3510-MIB", "swIndivPowerStatus"))
if mibBuilder.loadTexts: swPowerStatusChangeTrap.setStatus('current')
swIpFilterRejectTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 2, 1, 0, 40)).setObjects(("ES3526XA_ES3510-MIB", "trapIpFilterRejectMode"), ("ES3526XA_ES3510-MIB", "trapIpFilterRejectIp"))
if mibBuilder.loadTexts: swIpFilterRejectTrap.setStatus('current')
swSmtpConnFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 2, 1, 0, 41)).setObjects(("ES3526XA_ES3510-MIB", "smtpServerIp"))
if mibBuilder.loadTexts: swSmtpConnFailureTrap.setStatus('current')
swAuthenticationFailure = NotificationType((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 2, 1, 0, 66)).setObjects(("ES3526XA_ES3510-MIB", "trapVarLoginUserName"), ("ES3526XA_ES3510-MIB", "trapVarLoginMethod"), ("ES3526XA_ES3510-MIB", "trapVarLoginIPAddress"), ("ES3526XA_ES3510-MIB", "trapVarLoginTime"))
if mibBuilder.loadTexts: swAuthenticationFailure.setStatus('current')
swAuthenticationSuccess = NotificationType((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 2, 1, 0, 67)).setObjects(("ES3526XA_ES3510-MIB", "trapVarLoginUserName"), ("ES3526XA_ES3510-MIB", "trapVarLoginMethod"), ("ES3526XA_ES3510-MIB", "trapVarLoginIPAddress"), ("ES3526XA_ES3510-MIB", "trapVarLoginTime"))
if mibBuilder.loadTexts: swAuthenticationSuccess.setStatus('current')
swVlanChangeStatus = NotificationType((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 2, 1, 0, 251)).setObjects(("ES3526XA_ES3510-MIB", "vlanChangeStatus"), ("ES3526XA_ES3510-MIB", "vlanChangeVlan"), ("ES3526XA_ES3510-MIB", "vlanChangePortIfIndex"))
if mibBuilder.loadTexts: swVlanChangeStatus.setStatus('current')
diffServMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4))
diffServPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 9), )
if mibBuilder.loadTexts: diffServPortTable.setStatus('current')
diffServPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 9, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "diffServPortIfIndex"))
if mibBuilder.loadTexts: diffServPortEntry.setStatus('current')
diffServPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 9, 1, 1), Integer32())
if mibBuilder.loadTexts: diffServPortIfIndex.setStatus('current')
diffServPortPolicyMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 9, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServPortPolicyMapIndex.setStatus('current')
diffServPortIngressIpAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 9, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServPortIngressIpAclIndex.setStatus('current')
diffServPortIngressMacAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 9, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServPortIngressMacAclIndex.setStatus('current')
diffServPolicyMapTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 10), )
if mibBuilder.loadTexts: diffServPolicyMapTable.setStatus('current')
diffServPolicyMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 10, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "diffServPolicyMapIndex"))
if mibBuilder.loadTexts: diffServPolicyMapEntry.setStatus('current')
diffServPolicyMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 10, 1, 1), Integer32())
if mibBuilder.loadTexts: diffServPolicyMapIndex.setStatus('current')
diffServPolicyMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServPolicyMapName.setStatus('current')
diffServPolicyMapDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServPolicyMapDescription.setStatus('current')
diffServPolicyMapElementIndexList = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 10, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServPolicyMapElementIndexList.setStatus('current')
diffServPolicyMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 10, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServPolicyMapStatus.setStatus('current')
diffServPolicyMapAttachCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 11))
diffServPolicyMapAttachCtlIndex = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServPolicyMapAttachCtlIndex.setStatus('current')
diffServPolicyMapAttachCtlElementIndex = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServPolicyMapAttachCtlElementIndex.setStatus('current')
diffServPolicyMapAttachCtlAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 11, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("attach", 2), ("detach", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServPolicyMapAttachCtlAction.setStatus('current')
diffServPolicyMapElementTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 12), )
if mibBuilder.loadTexts: diffServPolicyMapElementTable.setStatus('current')
diffServPolicyMapElementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 12, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "diffServPolicyMapElementIndex"))
if mibBuilder.loadTexts: diffServPolicyMapElementEntry.setStatus('current')
diffServPolicyMapElementIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 12, 1, 1), Integer32())
if mibBuilder.loadTexts: diffServPolicyMapElementIndex.setStatus('current')
diffServPolicyMapElementClassMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServPolicyMapElementClassMapIndex.setStatus('current')
diffServPolicyMapElementMeterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 12, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServPolicyMapElementMeterIndex.setStatus('current')
diffServPolicyMapElementActionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServPolicyMapElementActionIndex.setStatus('current')
diffServPolicyMapElementStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 12, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServPolicyMapElementStatus.setStatus('current')
diffServClassMapTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 13), )
if mibBuilder.loadTexts: diffServClassMapTable.setStatus('current')
diffServClassMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 13, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "diffServClassMapIndex"))
if mibBuilder.loadTexts: diffServClassMapEntry.setStatus('current')
diffServClassMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 13, 1, 1), Integer32())
if mibBuilder.loadTexts: diffServClassMapIndex.setStatus('current')
diffServClassMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 13, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServClassMapName.setStatus('current')
diffServClassMapDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 13, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServClassMapDescription.setStatus('current')
diffServClassMapMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("matchAny", 1), ("matchAll", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServClassMapMatchType.setStatus('current')
diffServClassMapElementIndexTypeList = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 13, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServClassMapElementIndexTypeList.setStatus('current')
diffServClassMapElementIndexList = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 13, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServClassMapElementIndexList.setStatus('current')
diffServClassMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 13, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServClassMapStatus.setStatus('current')
diffServClassMapAttachCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 14))
diffServClassMapAttachCtlIndex = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 14, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServClassMapAttachCtlIndex.setStatus('current')
diffServClassMapAttachCtlElementIndexType = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 14, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("macAce", 1), ("ipAce", 2), ("acl", 3), ("ipv6Ace", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServClassMapAttachCtlElementIndexType.setStatus('current')
diffServClassMapAttachCtlElementIndex = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 14, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServClassMapAttachCtlElementIndex.setStatus('current')
diffServClassMapAttachCtlAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 14, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("attach", 2), ("detach", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServClassMapAttachCtlAction.setStatus('current')
diffServAclTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 15), )
if mibBuilder.loadTexts: diffServAclTable.setStatus('current')
diffServAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 15, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "diffServAclIndex"))
if mibBuilder.loadTexts: diffServAclEntry.setStatus('current')
diffServAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 15, 1, 1), Integer32())
if mibBuilder.loadTexts: diffServAclIndex.setStatus('current')
diffServAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 15, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServAclName.setStatus('current')
diffServAclType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mac", 1), ("ipstandard", 2), ("ipextended", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServAclType.setStatus('current')
diffServAclAceIndexList = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 15, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServAclAceIndexList.setStatus('current')
diffServAclStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 15, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServAclStatus.setStatus('current')
diffServAclAttachCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 16))
diffServAclAttachCtlIndex = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 16, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServAclAttachCtlIndex.setStatus('current')
diffServAclAttachCtlAceType = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 16, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("macAce", 1), ("ipAce", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServAclAttachCtlAceType.setStatus('current')
diffServAclAttachCtlAceIndex = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 16, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServAclAttachCtlAceIndex.setStatus('current')
diffServAclAttachCtlAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 16, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("attach", 2), ("detach", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServAclAttachCtlAction.setStatus('current')
diffServIpAceTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17), )
if mibBuilder.loadTexts: diffServIpAceTable.setStatus('current')
diffServIpAceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "diffServIpAceIndex"))
if mibBuilder.loadTexts: diffServIpAceEntry.setStatus('current')
diffServIpAceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1, 1), Integer32())
if mibBuilder.loadTexts: diffServIpAceIndex.setStatus('current')
diffServIpAceType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standard", 1), ("extended", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceType.setStatus('current')
diffServIpAceAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceAccess.setStatus('current')
diffServIpAceSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceSourceIpAddr.setStatus('current')
diffServIpAceSourceIpAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceSourceIpAddrBitmask.setStatus('current')
diffServIpAceDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceDestIpAddr.setStatus('current')
diffServIpAceDestIpAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceDestIpAddrBitmask.setStatus('current')
diffServIpAceProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceProtocol.setStatus('current')
diffServIpAcePrec = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAcePrec.setStatus('current')
diffServIpAceTos = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceTos.setStatus('current')
diffServIpAceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceDscp.setStatus('current')
diffServIpAceSourcePortOp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperator", 1), ("equal", 2), ("range", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceSourcePortOp.setStatus('current')
diffServIpAceMinSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceMinSourcePort.setStatus('current')
diffServIpAceMaxSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceMaxSourcePort.setStatus('current')
diffServIpAceSourcePortBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceSourcePortBitmask.setStatus('current')
diffServIpAceDestPortOp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperator", 1), ("equal", 2), ("range", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceDestPortOp.setStatus('current')
diffServIpAceMinDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceMinDestPort.setStatus('current')
diffServIpAceMaxDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceMaxDestPort.setStatus('current')
diffServIpAceDestPortBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceDestPortBitmask.setStatus('current')
diffServIpAceControlCode = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceControlCode.setStatus('current')
diffServIpAceControlCodeBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceControlCodeBitmask.setStatus('current')
diffServIpAceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1, 22), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceStatus.setStatus('current')
diffServMacAceTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 18), )
if mibBuilder.loadTexts: diffServMacAceTable.setStatus('current')
diffServMacAceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 18, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "diffServMacAceIndex"))
if mibBuilder.loadTexts: diffServMacAceEntry.setStatus('current')
diffServMacAceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 18, 1, 1), Integer32())
if mibBuilder.loadTexts: diffServMacAceIndex.setStatus('current')
diffServMacAceAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceAccess.setStatus('current')
diffServMacAcePktformat = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("any", 1), ("untagged-Eth2", 2), ("untagged802Dot3", 3), ("tagggedEth2", 4), ("tagged802Dot3", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAcePktformat.setStatus('current')
diffServMacAceSourceMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 18, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceSourceMacAddr.setStatus('current')
diffServMacAceSourceMacAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 18, 1, 5), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceSourceMacAddrBitmask.setStatus('current')
diffServMacAceDestMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 18, 1, 6), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceDestMacAddr.setStatus('current')
diffServMacAceDestMacAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 18, 1, 7), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceDestMacAddrBitmask.setStatus('current')
diffServMacAceVidOp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 18, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperator", 1), ("equal", 2), ("range", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceVidOp.setStatus('current')
diffServMacAceMinVid = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 18, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceMinVid.setStatus('current')
diffServMacAceVidBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 18, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceVidBitmask.setStatus('current')
diffServMacAceMaxVid = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 18, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceMaxVid.setStatus('current')
diffServMacAceEtherTypeOp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 18, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperator", 1), ("equal", 2), ("range", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceEtherTypeOp.setStatus('current')
diffServMacAceEtherTypeBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 18, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceEtherTypeBitmask.setStatus('current')
diffServMacAceMinEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 18, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceMinEtherType.setStatus('current')
diffServMacAceMaxEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 18, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceMaxEtherType.setStatus('current')
diffServMacAceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 18, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceStatus.setStatus('current')
diffServActionTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 19), )
if mibBuilder.loadTexts: diffServActionTable.setStatus('current')
diffServActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 19, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "diffServActionIndex"))
if mibBuilder.loadTexts: diffServActionEntry.setStatus('current')
diffServActionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 19, 1, 1), Integer32())
if mibBuilder.loadTexts: diffServActionIndex.setStatus('current')
diffServActionList = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 19, 1, 2), Bits().clone(namedValues=NamedValues(("actionPktNewPri", 0), ("actionPktNewIpPrec", 1), ("actionPktNewDscp", 2), ("actionRedPktNewDscp", 3), ("actionRedDrop", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServActionList.setStatus('current')
diffServActionPktNewPri = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 19, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServActionPktNewPri.setStatus('current')
diffServActionPktNewIpPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 19, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServActionPktNewIpPrec.setStatus('current')
diffServActionPktNewDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 19, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServActionPktNewDscp.setStatus('current')
diffServActionRedPktNewDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 19, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServActionRedPktNewDscp.setStatus('current')
diffServActionRedDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 19, 1, 7), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServActionRedDrop.setStatus('current')
diffServActionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 19, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServActionStatus.setStatus('current')
diffServMeterTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 20), )
if mibBuilder.loadTexts: diffServMeterTable.setStatus('current')
diffServMeterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 20, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "diffServActionIndex"))
if mibBuilder.loadTexts: diffServMeterEntry.setStatus('current')
diffServMeterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 20, 1, 1), Integer32())
if mibBuilder.loadTexts: diffServMeterIndex.setStatus('current')
diffServMeterModel = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("default", 1), ("flow", 2), ("trTcmColorBlind", 3), ("trTcmColorAware", 4), ("srTcmColorBlind", 5), ("srTcmColorAware", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMeterModel.setStatus('current')
diffServMeterRate = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 20, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMeterRate.setStatus('current')
diffServMeterBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 20, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1522))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMeterBurstSize.setStatus('current')
diffServMeterInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 20, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMeterInterval.setStatus('current')
diffServMeterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 20, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMeterStatus.setStatus('current')
mibBuilder.exportSymbols("ES3526XA_ES3510-MIB", portSecPortStatus=portSecPortStatus, ipSrcGuardConfigTable=ipSrcGuardConfigTable, smtpStatus=smtpStatus, igmpSnoopProfileRangeStartInetAddress=igmpSnoopProfileRangeStartInetAddress, dnsHostIndex=dnsHostIndex, radiusServerAddress=radiusServerAddress, ipSrcGuardBindingsStatus=ipSrcGuardBindingsStatus, diffServAclAttachCtlAceIndex=diffServAclAttachCtlAceIndex, tacacsPlusServerEntry=tacacsPlusServerEntry, igmpSnoopMulticastStaticIpAddress=igmpSnoopMulticastStaticIpAddress, prioIpPrecValue=prioIpPrecValue, ipFilterTelnetStartAddress=ipFilterTelnetStartAddress, diffServIpAceType=diffServIpAceType, igmpSnoopQuerier=igmpSnoopQuerier, aclMacAceStatus=aclMacAceStatus, sshConnInfoTable=sshConnInfoTable, netConfigStatus=netConfigStatus, igmpSnoopProfileRangeTable=igmpSnoopProfileRangeTable, tacacsPlusServerGlobalKey=tacacsPlusServerGlobalKey, xstInstanceCfgDesignatedRoot=xstInstanceCfgDesignatedRoot, prioIpTosPort=prioIpTosPort, telnetMgt=telnetMgt, dhcpSnoopBindingsVlanIndex=dhcpSnoopBindingsVlanIndex, diffServPolicyMapElementClassMapIndex=diffServPolicyMapElementClassMapIndex, mstMaxHops=mstMaxHops, aclIpAceStatus=aclIpAceStatus, mvrVlanId=mvrVlanId, tftpAction=tftpAction, igmpSnoopQueryCount=igmpSnoopQueryCount, portIndex=portIndex, igmpSnoopRouterStaticTable=igmpSnoopRouterStaticTable, sshConnID=sshConnID, xstInstanceCfgBridgeHelloTime=xstInstanceCfgBridgeHelloTime, clusterMemberMacAddr=clusterMemberMacAddr, telnetLoginResponseTimeout=telnetLoginResponseTimeout, ipFilterSnmpEntry=ipFilterSnmpEntry, igmpSnoopFilterPortEntry=igmpSnoopFilterPortEntry, radiusServerIndex=radiusServerIndex, prioAclToCosMappingStatus=prioAclToCosMappingStatus, vlanMgt=vlanMgt, igmpSnoopProfileCtlInetAddressType=igmpSnoopProfileCtlInetAddressType, aclIpAceMinDestPort=aclIpAceMinDestPort, sshDsaHostKey8=sshDsaHostKey8, portSecPortTable=portSecPortTable, sshDsaHostKey5=sshDsaHostKey5, aclIpAceAction=aclIpAceAction, aclIpAceName=aclIpAceName, tacacsPlusServerTimeout=tacacsPlusServerTimeout, dhcpSnoopBindingsEntry=dhcpSnoopBindingsEntry, xstInstanceCfgIndex=xstInstanceCfgIndex, sshRsaHostKey7=sshRsaHostKey7, trapDestUdpPort=trapDestUdpPort, staPortProtocolMigration=staPortProtocolMigration, diffServAclEntry=diffServAclEntry, trapDestTable=trapDestTable, trunkMaxId=trunkMaxId, portSecMaxMacCount=portSecMaxMacCount, trapDestStatus=trapDestStatus, fileCopyAction=fileCopyAction, clusterMemberRemoveCtlId=clusterMemberRemoveCtlId, tftpDestFile=tftpDestFile, diffServPolicyMapElementMeterIndex=diffServPolicyMapElementMeterIndex, clusterCandidateEntry=clusterCandidateEntry, clusterMemberAddCtlMacAddr=clusterMemberAddCtlMacAddr, radiusServerAcctPortNumber=radiusServerAcctPortNumber, ValidStatus=ValidStatus, diffServMeterBurstSize=diffServMeterBurstSize, dhcpSnoopPortConfigTable=dhcpSnoopPortConfigTable, prioWrrEntry=prioWrrEntry, mvrGroupStaticStatus=mvrGroupStaticStatus, diffServIpAceTable=diffServIpAceTable, igmpSnoopProfileCtlId=igmpSnoopProfileCtlId, igmpSnoopProfileStatus=igmpSnoopProfileStatus, mvrPortEntry=mvrPortEntry, diffServIpAceDestPortOp=diffServIpAceDestPortOp, mvrMgt=mvrMgt, portAutonegotiation=portAutonegotiation, ntpServerVersion=ntpServerVersion, sshHostKeyGenAction=sshHostKeyGenAction, prioIpDscpValue=prioIpDscpValue, smtpDestEMailEntry=smtpDestEMailEntry, aclIpAceDscp=aclIpAceDscp, remoteLogServerTable=remoteLogServerTable, diffServMeterTable=diffServMeterTable, clusterCommanderEnable=clusterCommanderEnable, mirrorType=mirrorType, diffServMeterStatus=diffServMeterStatus, diffServPortTable=diffServPortTable, ntpPollInterval=ntpPollInterval, consoleParity=consoleParity, diffServPortIngressIpAclIndex=diffServPortIngressIpAclIndex, dhcpSnoopVlanEnable=dhcpSnoopVlanEnable, diffServClassMapAttachCtlIndex=diffServClassMapAttachCtlIndex, ipHttpPort=ipHttpPort, mirrorEntry=mirrorEntry, es3526XA_ES3510MIB=es3526XA_ES3510MIB, smtpServerIp=smtpServerIp, diffServClassMapAttachCtl=diffServClassMapAttachCtl, diffServIpAceAccess=diffServIpAceAccess, diffServIpAceTos=diffServIpAceTos, xstInstancePortPriority=xstInstancePortPriority, dnsCacheTable=dnsCacheTable, bcastStormOctetRateScale=bcastStormOctetRateScale, diffServPolicyMapName=diffServPolicyMapName, radiusMgt=radiusMgt, diffServClassMapElementIndexList=diffServClassMapElementIndexList, ntpAuthKeyTable=ntpAuthKeyTable, sshDsaHostKey4=sshDsaHostKey4, smtpSeverityLevel=smtpSeverityLevel, consoleOperBaudRate=consoleOperBaudRate, swLoaderVer=swLoaderVer, trapDestAddress=trapDestAddress, diffServMeterIndex=diffServMeterIndex, xstInstancePortPort=xstInstancePortPort, clusterCandidateDesc=clusterCandidateDesc, aclAclGroupTable=aclAclGroupTable, fileCopyDestOperType=fileCopyDestOperType, mstInstanceOperVlansMap2k=mstInstanceOperVlansMap2k, portSecPortEntry=portSecPortEntry, diffServActionTable=diffServActionTable, dhcpSnoopInformationOptionPolicy=dhcpSnoopInformationOptionPolicy, remoteLogStatus=remoteLogStatus, ipSrcGuardBindingsMacAddress=ipSrcGuardBindingsMacAddress, fileCopySrcOperType=fileCopySrcOperType, vlanTable=vlanTable, diffServAclAttachCtl=diffServAclAttachCtl, prioAclToCosMappingTable=prioAclToCosMappingTable, sshServerMajorVersion=sshServerMajorVersion, mirrorSourcePort=mirrorSourcePort, pingRoundTripTime=pingRoundTripTime, smtpDestEMail=smtpDestEMail, diffServPortPolicyMapIndex=diffServPortPolicyMapIndex, mstName=mstName, mvrPortImmediateLeave=mvrPortImmediateLeave, diffServIpAceEntry=diffServIpAceEntry, staLoopbackDetectionPortRelease=staLoopbackDetectionPortRelease, fileInfoTable=fileInfoTable, aclMacAceMinEtherType=aclMacAceMinEtherType, sshDsaHostKey3=sshDsaHostKey3, diffServAclAceIndexList=diffServAclAceIndexList, clusterClearCandidateTable=clusterClearCandidateTable, switchInfoEntry=switchInfoEntry, amtrMacAddrDelete=amtrMacAddrDelete, aclAclGroupIngressIpAcl=aclAclGroupIngressIpAcl, ipSrcGuardBindingsPortIfIndex=ipSrcGuardBindingsPortIfIndex, radiusServerTable=radiusServerTable, swMicrocodeVer=swMicrocodeVer, diffServMacAceDestMacAddr=diffServMacAceDestMacAddr, diffServActionEntry=diffServActionEntry, switchOperState=switchOperState, igmpSnoopRouterStaticEntry=igmpSnoopRouterStaticEntry, ipHttpsState=ipHttpsState, sshKeySize=sshKeySize, trunkTable=trunkTable, aclMacAceSourceMacAddrBitmask=aclMacAceSourceMacAddrBitmask, aclIpAceTos=aclIpAceTos, diffServClassMapAttachCtlElementIndex=diffServClassMapAttachCtlElementIndex, vlanPortMode=vlanPortMode, dhcpSnoopEnable=dhcpSnoopEnable, switchNumber=switchNumber, smtpMgt=smtpMgt, dhcpSnoopUntrustedPortDroppedPkts=dhcpSnoopUntrustedPortDroppedPkts, igmpSnoopQueryTimeout=igmpSnoopQueryTimeout, portSecurityMgt=portSecurityMgt, rlPortIndex=rlPortIndex, igmpSnoopThrottlePortCurrentGroups=igmpSnoopThrottlePortCurrentGroups, igmpSnoopFilterPortIndex=igmpSnoopFilterPortIndex, fileCopyStatus=fileCopyStatus, mstInstanceOperVlansMap3k=mstInstanceOperVlansMap3k, prioIpTosCos=prioIpTosCos, ipSrcGuardAddrEntry=ipSrcGuardAddrEntry, xstInstancePortForwardTransitions=xstInstancePortForwardTransitions, ipFilterMgt=ipFilterMgt, prioIpDscpRestoreDefault=prioIpDscpRestoreDefault, dhcpSnoopStatistics=dhcpSnoopStatistics, dhcpSnoopBindingsPortIfIndex=dhcpSnoopBindingsPortIfIndex, igmpSnoopQueryMaxResponseTime=igmpSnoopQueryMaxResponseTime, swVlanChangeStatus=swVlanChangeStatus, ipFilterTelnetEntry=ipFilterTelnetEntry, mstInstanceEditRemainingHops=mstInstanceEditRemainingHops, aclIpAceControlCode=aclIpAceControlCode, dnsDomainListName=dnsDomainListName, ipSrcGuardBindingsIpAddress=ipSrcGuardBindingsIpAddress, diffServActionRedPktNewDscp=diffServActionRedPktNewDscp, swRoleInSystem=swRoleInSystem, dhcpSnoopBindingsEntryType=dhcpSnoopBindingsEntryType, tftpFileType=tftpFileType, igmpSnoopProfileCtl=igmpSnoopProfileCtl, mvrGroupStaticPorts=mvrGroupStaticPorts, clusterMemberCount=clusterMemberCount, sshDsaHostKey2=sshDsaHostKey2, lacpPortIndex=lacpPortIndex, swChassisServiceTag=swChassisServiceTag, mvrRunningStatus=mvrRunningStatus, igmpSnoopMulticastStaticEntry=igmpSnoopMulticastStaticEntry, fileInfoMgt=fileInfoMgt, dnsNameServerEntry=dnsNameServerEntry, diffServPortEntry=diffServPortEntry, igmpSnoopRouterStaticStatus=igmpSnoopRouterStaticStatus, diffServMacAceVidBitmask=diffServMacAceVidBitmask, dnsCacheIndex=dnsCacheIndex, pingIpAddress=pingIpAddress, radiusServerEntry=radiusServerEntry, xstInstancePortTable=xstInstancePortTable, aclIpAceControlCodeBitmask=aclIpAceControlCodeBitmask, diffServIpAceDestIpAddrBitmask=diffServIpAceDestIpAddrBitmask, mirrorTable=mirrorTable, dhcpSnoopMgt=dhcpSnoopMgt, prioIpTosEntry=prioIpTosEntry, xstInstancePortDesignatedBridge=xstInstancePortDesignatedBridge, fileCopyUnitId=fileCopyUnitId, diffServClassMapAttachCtlAction=diffServClassMapAttachCtlAction, diffServAclTable=diffServAclTable, swAuthenticationFailure=swAuthenticationFailure, clusterMemberId=clusterMemberId, aclIpAceEntry=aclIpAceEntry, rlPortOutputLevel=rlPortOutputLevel, trunkStatus=trunkStatus, ntpServerIpAddress=ntpServerIpAddress, switchMgt=switchMgt, fileInfoEntry=fileInfoEntry, mstRevision=mstRevision, xstInstanceCfgHoldTime=xstInstanceCfgHoldTime, diffServIpAceDscp=diffServIpAceDscp, tacacsPlusServerPortNumber=tacacsPlusServerPortNumber, prioQueueMode=prioQueueMode, aclMacAceSourceMacAddr=aclMacAceSourceMacAddr, mvrGroupsCtlAction=mvrGroupsCtlAction, diffServMacAceEntry=diffServMacAceEntry, prioCopy=prioCopy, consoleAdminBaudRate=consoleAdminBaudRate, mstInstanceEditVlansMap4k=mstInstanceEditVlansMap4k, tacacsPlusServerGlobalPortNumber=tacacsPlusServerGlobalPortNumber, consoleSilentTime=consoleSilentTime, ipSrcGuardMode=ipSrcGuardMode, ipSrcGuardBindingsEntryType=ipSrcGuardBindingsEntryType, securityMgt=securityMgt, diffServPolicyMapIndex=diffServPolicyMapIndex, prioIpPortEnableStatus=prioIpPortEnableStatus, xstInstanceCfgPathCostMethod=xstInstanceCfgPathCostMethod, swProdUrl=swProdUrl, portName=portName, es3526XA_ES3510MIBObjects=es3526XA_ES3510MIBObjects, vlanIndex=vlanIndex, dnsCacheEntry=dnsCacheEntry, staLoopbackDetectionPortTrapStatus=staLoopbackDetectionPortTrapStatus, aclIpAceIndex=aclIpAceIndex, radiusServerGlobalKey=radiusServerGlobalKey, ntpServiceMode=ntpServiceMode, mvrGroupCurrentPorts=mvrGroupCurrentPorts, xstInstanceCfgEntry=xstInstanceCfgEntry, vlanPortIndex=vlanPortIndex, aclAclGroupEgressIpAcl=aclAclGroupEgressIpAcl, netConfigEntry=netConfigEntry)
mibBuilder.exportSymbols("ES3526XA_ES3510-MIB", sysTimeZoneName=sysTimeZoneName, dnsCacheFlag=dnsCacheFlag, dnsMgt=dnsMgt, rlPortInputStatus=rlPortInputStatus, KeySegment=KeySegment, xstInstanceCfgTimeSinceTopologyChange=xstInstanceCfgTimeSinceTopologyChange, netConfigIfIndex=netConfigIfIndex, diffServClassMapMatchType=diffServClassMapMatchType, diffServIpAceControlCode=diffServIpAceControlCode, portMgt=portMgt, rateLimitMgt=rateLimitMgt, sntpServerTable=sntpServerTable, clusterMemberRemoveCtlAction=clusterMemberRemoveCtlAction, swPowerStatusChangeTrap=swPowerStatusChangeTrap, aclMacAceAction=aclMacAceAction, diffServMacAceEtherTypeOp=diffServMacAceEtherTypeOp, sysLogHistoryRamLevel=sysLogHistoryRamLevel, prioIpPrecEntry=prioIpPrecEntry, staLoopbackDetectionPortReleaseMode=staLoopbackDetectionPortReleaseMode, sysTimeMgt=sysTimeMgt, clusterMemberAddCtlId=clusterMemberAddCtlId, staLoopbackDetectionPortIfIndex=staLoopbackDetectionPortIfIndex, sshConnEncryptionTypeStr=sshConnEncryptionTypeStr, fileInfoFileSize=fileInfoFileSize, igmpSnoopProfileCtlStartInetAddress=igmpSnoopProfileCtlStartInetAddress, aclIpAceSourcePortOp=aclIpAceSourcePortOp, prioIpPrecPort=prioIpPrecPort, diffServMacAceEtherTypeBitmask=diffServMacAceEtherTypeBitmask, xstInstanceCfgBridgeForwardDelay=xstInstanceCfgBridgeForwardDelay, portTrunkIndex=portTrunkIndex, sntpServerIpAddress=sntpServerIpAddress, diffServClassMapElementIndexTypeList=diffServClassMapElementIndexTypeList, portSpeedDpxStatus=portSpeedDpxStatus, staLoopbackDetectionPortTable=staLoopbackDetectionPortTable, igmpSnoopRouterStaticPorts=igmpSnoopRouterStaticPorts, prioAclToCosMappingAclName=prioAclToCosMappingAclName, lacpPortEntry=lacpPortEntry, sshServerMinorVersion=sshServerMinorVersion, ntpAuthenticateStatus=ntpAuthenticateStatus, swProdName=swProdName, xstInstanceCfgRootCost=xstInstanceCfgRootCost, mstInstanceOperEntry=mstInstanceOperEntry, pingCompleted=pingCompleted, consolePasswordThreshold=consolePasswordThreshold, diffServAclName=diffServAclName, aclMacAceVidOp=aclMacAceVidOp, aclIpAceMaxDestPort=aclIpAceMaxDestPort, xstInstanceCfgBridgeMaxAge=xstInstanceCfgBridgeMaxAge, ipFilterHTTPEndAddress=ipFilterHTTPEndAddress, igmpSnoopFilterPortProfileId=igmpSnoopFilterPortProfileId, tacacsPlusServerGlobalTimeout=tacacsPlusServerGlobalTimeout, swHardwareVer=swHardwareVer, aclMacAceDestMacAddr=aclMacAceDestMacAddr, clusterMemberRemoveCtl=clusterMemberRemoveCtl, igmpSnoopProfileCtlAction=igmpSnoopProfileCtlAction, igmpSnoopCurrentVlanTable=igmpSnoopCurrentVlanTable, prioWrrWeight=prioWrrWeight, remoteLogServerIp=remoteLogServerIp, dhcpSnoopTotalForwardedPkts=dhcpSnoopTotalForwardedPkts, lacpPortStatus=lacpPortStatus, trunkCreation=trunkCreation, sshConnUserName=sshConnUserName, dhcpSnoopBindingsAddrType=dhcpSnoopBindingsAddrType, restartConfigFile=restartConfigFile, tftpMgt=tftpMgt, igmpSnoopProfileRangeProfileId=igmpSnoopProfileRangeProfileId, consoleDataBits=consoleDataBits, igmpSnoopRouterCurrentStatus=igmpSnoopRouterCurrentStatus, fileCopyTftpErrMsg=fileCopyTftpErrMsg, igmpSnoopThrottlePortRunningStatus=igmpSnoopThrottlePortRunningStatus, remoteLogLevel=remoteLogLevel, sshConnInfoEntry=sshConnInfoEntry, ipFilterHTTPStartAddress=ipFilterHTTPStartAddress, mvrGroupCurrentEntry=mvrGroupCurrentEntry, igmpSnoopProfileEntry=igmpSnoopProfileEntry, prioCopyIpPrec=prioCopyIpPrec, prioAclToCosMappingCosValue=prioAclToCosMappingCosValue, dhcpSnoopGlobal=dhcpSnoopGlobal, igmpSnoopCurrentVlanIndex=igmpSnoopCurrentVlanIndex, clusterMemberEntry=clusterMemberEntry, prioIpPrecDscpStatus=prioIpPrecDscpStatus, staMgt=staMgt, staPortLongPathCost=staPortLongPathCost, ipSrcGuardPortIfIndex=ipSrcGuardPortIfIndex, trapDestEntry=trapDestEntry, dhcpSnoopPortIfIndex=dhcpSnoopPortIfIndex, diffServClassMapIndex=diffServClassMapIndex, netConfigTable=netConfigTable, mstInstanceEditTable=mstInstanceEditTable, sysCurrentTime=sysCurrentTime, mvrGroupCurrentAddress=mvrGroupCurrentAddress, xstInstancePortDesignatedRoot=xstInstancePortDesignatedRoot, xstInstanceCfgTopChanges=xstInstanceCfgTopChanges, remoteLogMgt=remoteLogMgt, swBootRomVer=swBootRomVer, igmpSnoopCurrentVlanImmediateLeave=igmpSnoopCurrentVlanImmediateLeave, swPortNumber=swPortNumber, diffServAclIndex=diffServAclIndex, swServiceTag=swServiceTag, igmpSnoopMulticastStaticPorts=igmpSnoopMulticastStaticPorts, igmpSnoopProfileCtlEndInetAddress=igmpSnoopProfileCtlEndInetAddress, xstInstancePortEnable=xstInstancePortEnable, trunkEntry=trunkEntry, prioIpPrecRestoreDefault=prioIpPrecRestoreDefault, aclIpAcePrec=aclIpAcePrec, aclMacAceTable=aclMacAceTable, mvrGroupsCtl=mvrGroupsCtl, pingAction=pingAction, amtrMacAddrAgingStatus=amtrMacAddrAgingStatus, mvrGroupStaticTable=mvrGroupStaticTable, prioIpTosRestoreDefault=prioIpTosRestoreDefault, diffServMacAceVidOp=diffServMacAceVidOp, rlPortInputScale=rlPortInputScale, diffServClassMapEntry=diffServClassMapEntry, bcastStormTable=bcastStormTable, ipFilterHTTPStatus=ipFilterHTTPStatus, mvrGroupsCtlCount=mvrGroupsCtlCount, mstInstanceOperVlansMap=mstInstanceOperVlansMap, prioIpPortTable=prioIpPortTable, diffServIpAceMinSourcePort=diffServIpAceMinSourcePort, diffServIpAceSourcePortOp=diffServIpAceSourcePortOp, mvrMaxGroups=mvrMaxGroups, trapDestCommunity=trapDestCommunity, diffServMacAceMaxEtherType=diffServMacAceMaxEtherType, tacacsPlusServerKey=tacacsPlusServerKey, fileCopyMgt=fileCopyMgt, trapDestVersion=trapDestVersion, diffServMacAceSourceMacAddrBitmask=diffServMacAceSourceMacAddrBitmask, igmpSnoopVersion=igmpSnoopVersion, aclIpAceDestPortOp=aclIpAceDestPortOp, aclIpAceDestIpAddrBitmask=aclIpAceDestIpAddrBitmask, mvrGroupTable=mvrGroupTable, radiusServerStatus=radiusServerStatus, ipFilterHTTPTable=ipFilterHTTPTable, sysLogStatus=sysLogStatus, ntpAuthKeyId=ntpAuthKeyId, diffServActionIndex=diffServActionIndex, switchInfoTable=switchInfoTable, diffServMacAceTable=diffServMacAceTable, trunkValidNumber=trunkValidNumber, staPortTable=staPortTable, clusterMemberAddCtlAction=clusterMemberAddCtlAction, dnsDomainName=dnsDomainName, dhcpSnoopVerifyMacAddressEnable=dhcpSnoopVerifyMacAddressEnable, diffServMacAceSourceMacAddr=diffServMacAceSourceMacAddr, diffServPolicyMapElementIndexList=diffServPolicyMapElementIndexList, portCapabilities=portCapabilities, xstInstancePortState=xstInstancePortState, netConfigUnnumbered=netConfigUnnumbered, tacacsPlusServerTable=tacacsPlusServerTable, diffServAclAttachCtlAction=diffServAclAttachCtlAction, sshDsaHostKey6=sshDsaHostKey6, diffServIpAcePrec=diffServIpAcePrec, dhcpSnoopPortConfigEntry=dhcpSnoopPortConfigEntry, diffServAclStatus=diffServAclStatus, clusterMgt=clusterMgt, igmpSnoopMulticastCurrentStatus=igmpSnoopMulticastCurrentStatus, dnsNameServerIndex=dnsNameServerIndex, clusterMemberDesc=clusterMemberDesc, sshRsaHostKey5=sshRsaHostKey5, diffServIpAceDestPortBitmask=diffServIpAceDestPortBitmask, tacacsPlusServerGlobalRetransmit=tacacsPlusServerGlobalRetransmit, aclAclGroupEntry=aclAclGroupEntry, xstInstanceCfgForwardDelay=xstInstanceCfgForwardDelay, clusterCandidateRole=clusterCandidateRole, rateLimitPortEntry=rateLimitPortEntry, swIdentifier=swIdentifier, mvrGroupId=mvrGroupId, dnsAliasEntry=dnsAliasEntry, igmpSnoopProfileRangeEndInetAddress=igmpSnoopProfileRangeEndInetAddress, es3526XA_ES3510Conformance=es3526XA_ES3510Conformance, mvrPortActive=mvrPortActive, igmpSnoopMulticastStaticVlanIndex=igmpSnoopMulticastStaticVlanIndex, bcastStormOctetRateLevel=bcastStormOctetRateLevel, ipSrcGuardBindingsAddrType=ipSrcGuardBindingsAddrType, fileInfoFileName=fileInfoFileName, netConfigSubnetMask=netConfigSubnetMask, telnetPasswordThreshold=telnetPasswordThreshold, aclIpAcePrecedence=aclIpAcePrecedence, diffServClassMapAttachCtlElementIndexType=diffServClassMapAttachCtlElementIndexType, clusterRole=clusterRole, clusterEnable=clusterEnable, xstInstanceCfgHelloTime=xstInstanceCfgHelloTime, igmpSnoopMulticastStaticTable=igmpSnoopMulticastStaticTable, dnsCacheType=dnsCacheType, tftpStatus=tftpStatus, xstMgt=xstMgt, remoteLogServerEntry=remoteLogServerEntry, ipSrcGuardBindingsVlanIndex=ipSrcGuardBindingsVlanIndex, radiusServerRetransmit=radiusServerRetransmit, diffServMacAceMaxVid=diffServMacAceMaxVid, igmpSnoopProfileRangeInetAddressType=igmpSnoopProfileRangeInetAddressType, rlPortOutputStatus=rlPortOutputStatus, igmpSnoopMulticastCurrentIpAddress=igmpSnoopMulticastCurrentIpAddress, staPortIndex=staPortIndex, xstInstancePortDesignatedCost=xstInstancePortDesignatedCost, mstInstanceEditVlansMap2k=mstInstanceEditVlansMap2k, mvrGroupStaticEntry=mvrGroupStaticEntry, sshConnMajorVersion=sshConnMajorVersion, clusterCandidateMacAddr=clusterCandidateMacAddr, trapDestMgt=trapDestMgt, prioIpDscpCos=prioIpDscpCos, aclMacAceEtherTypeOp=aclMacAceEtherTypeOp, ipFilterTelnetTable=ipFilterTelnetTable, mvrGroutActive=mvrGroutActive, clusterMemberActive=clusterMemberActive, dnsAliasName=dnsAliasName, dnsCacheTtl=dnsCacheTtl, igmpSnoopMulticastCurrentVlanIndex=igmpSnoopMulticastCurrentVlanIndex, smtpDestEMailTable=smtpDestEMailTable, staPortFastForward=staPortFastForward, igmpSnoopProfileTable=igmpSnoopProfileTable, mstInstanceOperVlansMap4k=mstInstanceOperVlansMap4k, restartControl=restartControl, aclMgt=aclMgt, portSecPortIndex=portSecPortIndex, fileInfoUnitID=fileInfoUnitID, diffServActionPktNewDscp=diffServActionPktNewDscp, ipHttpsPort=ipHttpsPort, swProdVersion=swProdVersion, swProdDescription=swProdDescription, diffServPolicyMapTable=diffServPolicyMapTable, aclIpAceProtocol=aclIpAceProtocol, ipFilterTelnetStatus=ipFilterTelnetStatus, dhcpSnoopBindingsTable=dhcpSnoopBindingsTable, tftpSrcFile=tftpSrcFile, sshRsaHostKey8=sshRsaHostKey8, sntpPollInterval=sntpPollInterval, dnsDomainListStatus=dnsDomainListStatus, portSecAction=portSecAction, ntpServerTable=ntpServerTable, prioIpDscpTable=prioIpDscpTable, diffServPolicyMapAttachCtlIndex=diffServPolicyMapAttachCtlIndex, xstInstanceCfgRootPort=xstInstanceCfgRootPort, bcastStormEntry=bcastStormEntry, vlanPortEntry=vlanPortEntry, sshDsaHostKey7=sshDsaHostKey7, diffServIpAceSourceIpAddr=diffServIpAceSourceIpAddr, radiusServerAuthPortNumber=radiusServerAuthPortNumber, netConfigIPAddress=netConfigIPAddress, diffServIpAceMaxSourcePort=diffServIpAceMaxSourcePort, xstInstanceCfgTable=xstInstanceCfgTable, tacacsPlusServerStatus=tacacsPlusServerStatus, igmpSnoopThrottlePortIndex=igmpSnoopThrottlePortIndex, dnsDomainListEntry=dnsDomainListEntry, prioIpPortCos=prioIpPortCos, lineMgt=lineMgt, mstInstanceOperIndex=mstInstanceOperIndex, qosMgt=qosMgt, staTxHoldCount=staTxHoldCount, sshRsaHostKey6=sshRsaHostKey6, dhcpSnoopVlanIndex=dhcpSnoopVlanIndex, radiusServerGlobalAcctPort=radiusServerGlobalAcctPort, dnsDomainListTable=dnsDomainListTable)
mibBuilder.exportSymbols("ES3526XA_ES3510-MIB", staPortSystemStatus=staPortSystemStatus, dnsHostEntry=dnsHostEntry, diffServIpAceSourceIpAddrBitmask=diffServIpAceSourceIpAddrBitmask, sntpServerIndex=sntpServerIndex, aclMacAceIndex=aclMacAceIndex, smtpDestEMailStatus=smtpDestEMailStatus, fileCopyTftpServer=fileCopyTftpServer, dhcpSnoopBindingsMacAddress=dhcpSnoopBindingsMacAddress, diffServPolicyMapEntry=diffServPolicyMapEntry, ipFilterHTTPEntry=ipFilterHTTPEntry, mvrGroupStatus=mvrGroupStatus, dhcpSnoopPortTrustEnable=dhcpSnoopPortTrustEnable, prioIpPortPhysPort=prioIpPortPhysPort, prioWrrTable=prioWrrTable, xstInstancePortDesignatedPort=xstInstancePortDesignatedPort, ipMgt=ipMgt, diffServIpAceIndex=diffServIpAceIndex, remoteLogFacilityType=remoteLogFacilityType, sntpServiceMode=sntpServiceMode, clusterMemberAddCtl=clusterMemberAddCtl, tftpServer=tftpServer, lacpPortTable=lacpPortTable, prioIpPrecTable=prioIpPrecTable, dhcpSnoopInterface=dhcpSnoopInterface, ntpAuthKeyWord=ntpAuthKeyWord, vlanPortPrivateVlanType=vlanPortPrivateVlanType, sntpMgt=sntpMgt, xstInstanceCfgPriority=xstInstanceCfgPriority, mstInstanceEditIndex=mstInstanceEditIndex, ipFilterTelnetEndAddress=ipFilterTelnetEndAddress, diffServClassMapStatus=diffServClassMapStatus, clusterIpPool=clusterIpPool, priorityMgt=priorityMgt, sshConnMinorVersion=sshConnMinorVersion, dnsCacheDomain=dnsCacheDomain, diffServPolicyMapElementTable=diffServPolicyMapElementTable, staPortEntry=staPortEntry, dnsDomainLookup=dnsDomainLookup, clusterCandidateCount=clusterCandidateCount, sntpServerEntry=sntpServerEntry, radiusServerGlobalTimeout=radiusServerGlobalTimeout, ipFilterSnmpEndAddress=ipFilterSnmpEndAddress, xstInstancePortPathCost=xstInstancePortPathCost, dhcpSnoopVlan=dhcpSnoopVlan, accton=accton, diffServMeterRate=diffServMeterRate, prioIpPortStatus=prioIpPortStatus, diffServMacAceAccess=diffServMacAceAccess, portFlowCtrlCfg=portFlowCtrlCfg, dhcpSnoopVlanConfigEntry=dhcpSnoopVlanConfigEntry, diffServIpAceDestIpAddr=diffServIpAceDestIpAddr, sshDsaHostKey1=sshDsaHostKey1, sysTimeZone=sysTimeZone, restartOpCodeFile=restartOpCodeFile, diffServPolicyMapAttachCtl=diffServPolicyMapAttachCtl, igmpSnoopThrottlePortEntry=igmpSnoopThrottlePortEntry, mirrorMgt=mirrorMgt, dhcpSnoopBindingsLeaseTime=dhcpSnoopBindingsLeaseTime, trunkPorts=trunkPorts, aclAclGroupIfIndex=aclAclGroupIfIndex, mvrCurrentGroups=mvrCurrentGroups, mstInstanceEditVlansMap3k=mstInstanceEditVlansMap3k, netDefaultGateway=netDefaultGateway, diffServIpAceStatus=diffServIpAceStatus, smtpSourceEMail=smtpSourceEMail, lacpMgt=lacpMgt, es3526XA_ES3510Traps=es3526XA_ES3510Traps, sshHostKeySaveAction=sshHostKeySaveAction, diffServMeterInterval=diffServMeterInterval, remoteLogServerStatus=remoteLogServerStatus, ntpServerEntry=ntpServerEntry, diffServIpAceSourcePortBitmask=diffServIpAceSourcePortBitmask, aclMacAceMaxEtherType=aclMacAceMaxEtherType, aclMacAcePktformat=aclMacAcePktformat, prioIpTosTable=prioIpTosTable, cosMgt=cosMgt, dnsAliasTable=dnsAliasTable, igmpSnoopThrottlePortAction=igmpSnoopThrottlePortAction, igmpSnoopRouterCurrentTable=igmpSnoopRouterCurrentTable, aclIpAceSourceIpAddrBitmask=aclIpAceSourceIpAddrBitmask, edgecore=edgecore, sysLogHistoryFlashLevel=sysLogHistoryFlashLevel, ipSrcGuardBindingsLeaseTime=ipSrcGuardBindingsLeaseTime, mvrGroupEntry=mvrGroupEntry, portFlowCtrlStatus=portFlowCtrlStatus, ntpServerKeyId=ntpServerKeyId, diffServClassMapTable=diffServClassMapTable, diffServAclAttachCtlAceType=diffServAclAttachCtlAceType, diffServActionRedDrop=diffServActionRedDrop, mvrGroupsCtlId=mvrGroupsCtlId, prioWrrTrafficClass=prioWrrTrafficClass, aclAclGroupIngressMacAcl=aclAclGroupIngressMacAcl, sshConnStatus=sshConnStatus, clusterMemberTable=clusterMemberTable, StaPathCostMode=StaPathCostMode, staProtocolType=staProtocolType, diffServPolicyMapElementIndex=diffServPolicyMapElementIndex, diffServMacAceDestMacAddrBitmask=diffServMacAceDestMacAddrBitmask, ipFilterSnmpStartAddress=ipFilterSnmpStartAddress, sntpStatus=sntpStatus, diffServPolicyMapElementActionIndex=diffServPolicyMapElementActionIndex, portType=portType, amtrMgt=amtrMgt, prioIpDscpEntry=prioIpDscpEntry, diffServPolicyMapElementStatus=diffServPolicyMapElementStatus, radiusServerKey=radiusServerKey, prioIpPortEntry=prioIpPortEntry, dnsHostIp=dnsHostIp, igmpSnoopProfileId=igmpSnoopProfileId, swOpCodeVer=swOpCodeVer, prioCopyIpDscp=prioCopyIpDscp, diffServPolicyMapElementEntry=diffServPolicyMapElementEntry, tacacsPlusServerIndex=tacacsPlusServerIndex, smtpServerIpStatus=smtpServerIpStatus, telnetExecTimeout=telnetExecTimeout, igmpSnoopProfileRangeAction=igmpSnoopProfileRangeAction, rateLimitPortTable=rateLimitPortTable, diffServClassMapDescription=diffServClassMapDescription, sshHostKeyDelAction=sshHostKeyDelAction, pingPacketSize=pingPacketSize, pingMgt=pingMgt, sshDisconnect=sshDisconnect, igmpSnoopFilterPortTable=igmpSnoopFilterPortTable, igmpSnoopMulticastCurrentEntry=igmpSnoopMulticastCurrentEntry, fileCopySrcFileName=fileCopySrcFileName, fileMgt=fileMgt, igmpSnoopProfileAction=igmpSnoopProfileAction, vlanEntry=vlanEntry, prioIpPortValue=prioIpPortValue, mstInstanceEditVlansMap=mstInstanceEditVlansMap, mirrorDestinationPort=mirrorDestinationPort, bcastStormIfIndex=bcastStormIfIndex, prioIpDscpPort=prioIpDscpPort, ipSrcGuardConfigEntry=ipSrcGuardConfigEntry, diffServMeterModel=diffServMeterModel, smtpServerIpEntry=smtpServerIpEntry, igmpSnoopQueryInterval=igmpSnoopQueryInterval, diffServPolicyMapStatus=diffServPolicyMapStatus, diffServActionList=diffServActionList, diffServMacAcePktformat=diffServMacAcePktformat, dhcpSnoopInformationOptionEnable=dhcpSnoopInformationOptionEnable, tacacsPlusServerRetransmit=tacacsPlusServerRetransmit, diffServPolicyMapAttachCtlAction=diffServPolicyMapAttachCtlAction, dnsNameServerIp=dnsNameServerIp, diffServMacAceStatus=diffServMacAceStatus, xstInstanceCfgTxHoldCount=xstInstanceCfgTxHoldCount, diffServActionPktNewIpPrec=diffServActionPktNewIpPrec, vlanAddressMethod=vlanAddressMethod, mvrPortTable=mvrPortTable, diffServIpAceMinDestPort=diffServIpAceMinDestPort, igmpSnoopCurrentVlanEntry=igmpSnoopCurrentVlanEntry, fileCopyDestFileName=fileCopyDestFileName, diffServAclAttachCtlIndex=diffServAclAttachCtlIndex, PYSNMP_MODULE_ID=es3526XA_ES3510MIB, rlPortInputLevel=rlPortInputLevel, igmpSnoopThrottlePortMaxGroups=igmpSnoopThrottlePortMaxGroups, diffServMacAceMinEtherType=diffServMacAceMinEtherType, igmpSnoopFilterStatus=igmpSnoopFilterStatus, diffServPolicyMapAttachCtlElementIndex=diffServPolicyMapAttachCtlElementIndex, aclIpAceMaxSourcePort=aclIpAceMaxSourcePort, staSystemStatus=staSystemStatus, igmpSnoopProfileRangeEntry=igmpSnoopProfileRangeEntry, xstInstancePortInstance=xstInstancePortInstance, staLoopbackDetectionPortEntry=staLoopbackDetectionPortEntry, portSpeedDpxCfg=portSpeedDpxCfg, portEntry=portEntry, netConfigPrimaryInterface=netConfigPrimaryInterface, consoleStopBits=consoleStopBits, vlanPortTable=vlanPortTable, igmpSnoopMgt=igmpSnoopMgt, staPortAdminEdgePort=staPortAdminEdgePort, aclIpAceMinSourcePort=aclIpAceMinSourcePort, fileCopyFileType=fileCopyFileType, igmpSnoopThrottlePortTable=igmpSnoopThrottlePortTable, dhcpSnoopBindingsIpAddress=dhcpSnoopBindingsIpAddress, tacacsMgt=tacacsMgt, aclMacAcePrecedence=aclMacAcePrecedence, ntpAuthKeyEntry=ntpAuthKeyEntry, diffServAclType=diffServAclType, diffServMacAceIndex=diffServMacAceIndex, dhcpSnoopVlanConfigTable=dhcpSnoopVlanConfigTable, diffServPolicyMapDescription=diffServPolicyMapDescription, igmpSnoopRouterCurrentEntry=igmpSnoopRouterCurrentEntry, ipSrcGuardMgt=ipSrcGuardMgt, staPortAdminPointToPoint=staPortAdminPointToPoint, mvrStatus=mvrStatus, aclIpAceDestIpAddr=aclIpAceDestIpAddr, trunkMgt=trunkMgt, swPowerStatus=swPowerStatus, swAuthenticationSuccess=swAuthenticationSuccess, staPortOperEdgePort=staPortOperEdgePort, sshRsaHostKey3=sshRsaHostKey3, sshHostKeyGenStatus=sshHostKeyGenStatus, cheetahSwitchMgt=cheetahSwitchMgt, rlPortOutputScale=rlPortOutputScale, sshMgt=sshMgt, es3526XA_ES3510TrapsPrefix=es3526XA_ES3510TrapsPrefix, diffServMgt=diffServMgt, ipFilterSnmpTable=ipFilterSnmpTable, igmpSnoopRouterCurrentPorts=igmpSnoopRouterCurrentPorts, portTable=portTable, ipFilterSnmpStatus=ipFilterSnmpStatus, fileInfoCreationTime=fileInfoCreationTime, mvrGroupCurrentTable=mvrGroupCurrentTable, xstInstancePortEntry=xstInstancePortEntry, ntpStatus=ntpStatus, consoleMgt=consoleMgt, mstInstanceEditEntry=mstInstanceEditEntry, aclIpAceSourceIpAddr=aclIpAceSourceIpAddr, consoleLoginResponseTimeout=consoleLoginResponseTimeout, prioIpPrecCos=prioIpPrecCos, tacacsPlusServerAddress=tacacsPlusServerAddress, fileInfoFileType=fileInfoFileType, clusterCandidateTable=clusterCandidateTable, ipSrcGuardAddrTable=ipSrcGuardAddrTable, igmpSnoopStatus=igmpSnoopStatus, igmpSnoopMulticastCurrentPorts=igmpSnoopMulticastCurrentPorts, aclMacAceEntry=aclMacAceEntry, diffServClassMapName=diffServClassMapName, diffServActionPktNewPri=diffServActionPktNewPri, diffServIpAceProtocol=diffServIpAceProtocol, swProdManufacturer=swProdManufacturer, staPortOperPointToPoint=staPortOperPointToPoint, diffServIpAceMaxDestPort=diffServIpAceMaxDestPort, prioAclToCosMappingIfIndex=prioAclToCosMappingIfIndex, swIpFilterRejectTrap=swIpFilterRejectTrap, switchManagementVlan=switchManagementVlan, sshRsaHostKey2=sshRsaHostKey2, ipDhcpRestart=ipDhcpRestart, sshHostKeySaveStatus=sshHostKeySaveStatus, mvrPortType=mvrPortType, dnsAliasAlias=dnsAliasAlias, bcastStormMgt=bcastStormMgt, xstInstanceCfgMaxAge=xstInstanceCfgMaxAge, dnsHostTable=dnsHostTable, igmpSnoopLeaveProxy=igmpSnoopLeaveProxy, ntpAuthKeyStatus=ntpAuthKeyStatus, aclMacAceMaxVid=aclMacAceMaxVid, prioIpTosValue=prioIpTosValue, smtpServerIpTable=smtpServerIpTable, dhcpSnoopBindings=dhcpSnoopBindings, swUnitIndex=swUnitIndex, prioAclToCosMappingEntry=prioAclToCosMappingEntry, ntpMgt=ntpMgt, sshAuthRetries=sshAuthRetries, ipHttpState=ipHttpState, staPathCostMethod=staPathCostMethod, ntpServerStatus=ntpServerStatus, swSerialNumber=swSerialNumber, prioCopyIpPort=prioCopyIpPort, radiusServerGlobalRetransmit=radiusServerGlobalRetransmit, diffServPortIngressMacAclIndex=diffServPortIngressMacAclIndex, igmpSnoopMulticastStaticStatus=igmpSnoopMulticastStaticStatus, fileInfoDelete=fileInfoDelete)
mibBuilder.exportSymbols("ES3526XA_ES3510-MIB", aclMacAceDestMacAddrBitmask=aclMacAceDestMacAddrBitmask, bcastStormStatus=bcastStormStatus, sshRsaHostKey1=sshRsaHostKey1, fileInfoIsStartUp=fileInfoIsStartUp, aclMacAceMinVid=aclMacAceMinVid, sshRsaHostKey4=sshRsaHostKey4, diffServIpAceControlCodeBitmask=diffServIpAceControlCodeBitmask, diffServActionStatus=diffServActionStatus, sysLogMgt=sysLogMgt, radiusServerTimeout=radiusServerTimeout, mirrorStatus=mirrorStatus, dnsNameServerTable=dnsNameServerTable, xstInstancePortPortRole=xstInstancePortPortRole, dnsHostName=dnsHostName, aclIpAceTable=aclIpAceTable, mvrGroupStaticAddress=mvrGroupStaticAddress, diffServPortIfIndex=diffServPortIfIndex, trunkIndex=trunkIndex, swSmtpConnFailureTrap=swSmtpConnFailureTrap, diffServMeterEntry=diffServMeterEntry, consoleExecTimeout=consoleExecTimeout, aclMacAceName=aclMacAceName, igmpSnoopMulticastCurrentTable=igmpSnoopMulticastCurrentTable, mstInstanceOperTable=mstInstanceOperTable, radiusServerGlobalAuthPort=radiusServerGlobalAuthPort, sshTimeout=sshTimeout, diffServMacAceMinVid=diffServMacAceMinVid, restartMgt=restartMgt, dnsCacheIp=dnsCacheIp, mvrIfIndex=mvrIfIndex, sshServerStatus=sshServerStatus, staLoopbackDetectionPortStatus=staLoopbackDetectionPortStatus, igmpSnoopRouterStaticVlanIndex=igmpSnoopRouterStaticVlanIndex, es3526XA_ES3510Notifications=es3526XA_ES3510Notifications, aclAclGroupEgressMacAcl=aclAclGroupEgressMacAcl, switchProductId=switchProductId, igmpSnoopRouterCurrentVlanIndex=igmpSnoopRouterCurrentVlanIndex)
