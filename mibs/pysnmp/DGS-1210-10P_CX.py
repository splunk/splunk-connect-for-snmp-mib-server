#
# PySNMP MIB module DGS-1210-10P_CX (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DGS-1210-10P_CX
# Produced by pysmi-0.3.4 at Mon Apr 29 18:27:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
dot1dBridge, dot1dBasePort, dot1dBasePortEntry = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBridge", "dot1dBasePort", "dot1dBasePortEntry")
AddressFamilyNumbers, = mibBuilder.importSymbols("IANA-ADDRESS-FAMILY-NUMBERS-MIB", "AddressFamilyNumbers")
ifIndex, InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndexOrZero", "InterfaceIndex")
InetAddress, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress")
SnmpEngineID, SnmpSecurityLevel, SnmpAdminString = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpEngineID", "SnmpSecurityLevel", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, ModuleIdentity, NotificationType, ObjectIdentity, Integer32, Gauge32, IpAddress, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Counter64, Bits, Unsigned32, iso, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ModuleIdentity", "NotificationType", "ObjectIdentity", "Integer32", "Gauge32", "IpAddress", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Counter64", "Bits", "Unsigned32", "iso", "Counter32")
RowStatus, DisplayString, MacAddress, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "MacAddress", "TextualConvention", "TruthValue")
d_link = MibIdentifier((1, 3, 6, 1, 4, 1, 171)).setLabel("d-link")
dlink_products = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10)).setLabel("dlink-products")
dlink_DGS12XXSeriesProd = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76)).setLabel("dlink-DGS12XXSeriesProd")
dgs_1210_10p = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18)).setLabel("dgs-1210-10p")
dgs_1210_10pcx = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1)).setLabel("dgs-1210-10pcx")
class VlanIndex(TextualConvention, Unsigned32):
    status = 'current'

class PortList(TextualConvention, OctetString):
    status = 'current'

class BridgeId(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class Timeout(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd4'

class RmonStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4))

class LldpManAddress(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 31)

class Ipv6Address(TextualConvention, OctetString):
    status = 'current'
    displayHint = '2x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

companySystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 1))
companyIpifGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 2))
companyTftpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 3))
companyMiscGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 4))
companyRSTP = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 6))
companyDot1qVlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 7))
companyLA = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 8))
companyStaticMAC = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 9))
companyIgsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 10))
companyQoSGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12))
companyTrafficMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 13))
companySecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14))
companyACLGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15))
companySyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 16))
companyLBD = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 17))
companyMirror = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 18))
companySNTPSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 20))
companyVoiceVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 21))
companyPoEGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 22))
companyAuthGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 23))
companyLLDPSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 24))
companySNMPV3 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25))
companyAutoSurveillanceVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 26))
companyTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 27))
companyGreenSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 31))
companyTimeRangeMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 32))
companyStaticMcast = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 35))
companyCableDiagnostic = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 37))
companyRMON = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 47))
companyNeighbor = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 50))
companydot3azEEE = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 52))
companyDHCPRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 61))
companyDHCPLocalRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 62))
companyDHCPv6Relay = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 63))
companyMldsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 88))
companyDoSCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 99))
sysSwitchName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSwitchName.setStatus('current')
sysHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHardwareVersion.setStatus('current')
sysFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFirmwareVersion.setStatus('current')
sysLoginTimeoutInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 30)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLoginTimeoutInterval.setStatus('current')
sysLocationName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLocationName.setStatus('current')
sysSystemPassword = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSystemPassword.setStatus('current')
sysSafeGuardEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSafeGuardEnable.setStatus('current')
sysRestart = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysRestart.setStatus('current')
sysSave = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 1, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSave.setStatus('current')
sysJumboFrameEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysJumboFrameEnable.setStatus('current')
sysPortCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 1, 13), )
if mibBuilder.loadTexts: sysPortCtrlTable.setStatus('current')
sysPortCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 1, 13, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "sysPortCtrlIndex"))
if mibBuilder.loadTexts: sysPortCtrlEntry.setStatus('current')
sysPortCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCtrlIndex.setStatus('current')
sysPortCtrlSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("rate1000MFull", 1), ("rate100MFull", 2), ("rate100MHalf", 3), ("rate10MFull", 4), ("rate10MHalf", 5), ("auto", 6), ("disable", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPortCtrlSpeed.setStatus('current')
sysPortCtrlOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("down", 1), ("rate1000MFull", 2), ("rate100MFull", 3), ("rate100MHalf", 4), ("rate10MFull", 5), ("rate10MHalf", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCtrlOperStatus.setStatus('current')
sysPortCtrlMDI = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("mdi", 2), ("mdix", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPortCtrlMDI.setStatus('current')
sysPortCtrlFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 1, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPortCtrlFlowControl.setStatus('current')
sysPortCtrlFlowControlOper = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 1, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCtrlFlowControlOper.setStatus('current')
sysPortCtrlType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 1, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fastethernet", 1), ("gigabitethernet", 2), ("fiberwith100BaseSFPModule", 3), ("fiberwith1000BaseSFPModule", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCtrlType.setStatus('current')
sysDhcpAutoConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDhcpAutoConfiguration.setStatus('current')
sysPortDescriptionTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 1, 16), )
if mibBuilder.loadTexts: sysPortDescriptionTable.setStatus('current')
sysPortDescriptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 1, 16, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "sysPortDescIndex"))
if mibBuilder.loadTexts: sysPortDescriptionEntry.setStatus('current')
sysPortDescIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortDescIndex.setStatus('current')
sysPortDescString = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 1, 16, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPortDescString.setStatus('current')
sysDdp = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 1, 30))
sysDdpGlobalOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 1, 30, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDdpGlobalOnOff.setStatus('current')
sysDdpGeneralReportOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 1, 30, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDdpGeneralReportOnOff.setStatus('current')
sysDdpGeneralReportTimer = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 1, 30, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(30, 60, 90, 120))).clone(namedValues=NamedValues(("time30seconds", 30), ("time60seconds", 60), ("time90seconds", 90), ("time120seconds", 120)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDdpGeneralReportTimer.setStatus('current')
sysDdpProtStatusTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 1, 30, 4), )
if mibBuilder.loadTexts: sysDdpProtStatusTable.setStatus('current')
sysDdpProtStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 1, 30, 4, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "sysDdpProtStatusIndex"))
if mibBuilder.loadTexts: sysDdpProtStatusEntry.setStatus('current')
sysDdpProtStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 1, 30, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDdpProtStatusIndex.setStatus('current')
sysDdpProtStatusControl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 1, 30, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDdpProtStatusControl.setStatus('current')
dot3azEEEset = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 52, 1))
dot3azTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 52, 1, 1), )
if mibBuilder.loadTexts: dot3azTable.setStatus('current')
dot3azEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 52, 1, 1, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "portD3Index"))
if mibBuilder.loadTexts: dot3azEntry.setStatus('current')
portD3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 52, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portD3Index.setStatus('current')
portD3State = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 52, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notsupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portD3State.setStatus('current')
dhcpOption12Status = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpOption12Status.setStatus('current')
dhcpOption12HostName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 2, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpOption12HostName.setStatus('current')
ipifSupportV4V6Info = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 2, 5))
sysIpAddrCfgMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("dhcp", 2), ("bootp", 3))).clone('manual')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpAddrCfgMode.setStatus('current')
sysIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 2, 5, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpAddr.setStatus('current')
sysIpSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 2, 5, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpSubnetMask.setStatus('current')
sysGateway = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 2, 5, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGateway.setStatus('current')
ipifName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 2, 5, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipifName.setStatus('current')
ipifv6GlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 2, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipifv6GlobalStatus.setStatus('current')
ipifv6DHCPStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 2, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipifv6DHCPStatus.setStatus('current')
ipifv6AutolinkloStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 2, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipifv6AutolinkloStatus.setStatus('current')
ipifv6NSRetransmitTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 2, 5, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipifv6NSRetransmitTime.setStatus('current')
ipifv6DefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 2, 5, 11), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipifv6DefaultGateway.setStatus('current')
ipifV6AddressTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 2, 5, 12), )
if mibBuilder.loadTexts: ipifV6AddressTable.setStatus('current')
ipifV6AddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 2, 5, 12, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "ipifV6AddressMainIndex"), (0, "DGS-1210-10P_CX", "ipifV6AddressIpAddr"), (0, "DGS-1210-10P_CX", "ipifV6AddressIpPrefix"))
if mibBuilder.loadTexts: ipifV6AddressEntry.setStatus('current')
ipifV6AddressMainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 2, 5, 12, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipifV6AddressMainIndex.setStatus('current')
ipifV6AddressIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 2, 5, 12, 1, 2), Ipv6Address().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipifV6AddressIpAddr.setStatus('current')
ipifV6AddressIpPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 2, 5, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipifV6AddressIpPrefix.setStatus('current')
ipifV6AddressIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 2, 5, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unicast", 1), ("anycast", 2), ("linklocal", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipifV6AddressIpType.setStatus('current')
ipifV6AddressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 2, 5, 12, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipifV6AddressRowStatus.setStatus('current')
tftpFwTargetGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 3, 9))
tftpFwTargetServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 3, 9, 1), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTargetServerIpAddress.setStatus('current')
tftpFwTargetServerIpType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 3, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTargetServerIpType.setStatus('current')
tftpFwTargetInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 3, 9, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTargetInterfaceName.setStatus('current')
tftpFwTargetImageFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 3, 9, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTargetImageFileName.setStatus('current')
tftpFwTargetTftpOperation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 3, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("download", 1), ("upload", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTargetTftpOperation.setStatus('current')
tftpFwTargetTftpOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 3, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("fail", 2), ("progressing", 3), ("transmit", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpFwTargetTftpOperationStatus.setStatus('current')
tftpCfgTargetGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 3, 10))
tftpCfgTargetServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 3, 10, 1), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgTargetServerIpAddress.setStatus('current')
tftpCfgTargetServerIpType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 3, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgTargetServerIpType.setStatus('current')
tftpCfgTargetInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 3, 10, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgTargetInterfaceName.setStatus('current')
tftpCfgTargetImageFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 3, 10, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgTargetImageFileName.setStatus('current')
tftpCfgTargetTftpOperation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 3, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("download", 1), ("upload", 2), ("progressing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgTargetTftpOperation.setStatus('current')
tftpCfgTargetTftpOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 3, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("fail", 2), ("progressing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpCfgTargetTftpOperationStatus.setStatus('current')
miscReset = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscReset.setStatus('current')
miscStatisticsReset = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscStatisticsReset.setStatus('current')
securityIpMacPortBinding = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 10))
impbSettingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 10, 1), )
if mibBuilder.loadTexts: impbSettingTable.setStatus('current')
impbSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 10, 1, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "impbPortIndex"))
if mibBuilder.loadTexts: impbSettingEntry.setStatus('current')
impbPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbPortIndex.setStatus('current')
impbPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbPortState.setStatus('current')
impbInsIpPacPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbInsIpPacPortState.setStatus('current')
impbDHCPPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbDHCPPortState.setStatus('current')
impbSmartTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 10, 2), )
if mibBuilder.loadTexts: impbSmartTable.setStatus('current')
impbSmartEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 10, 2, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "impbSmartMacAddress"), (0, "DGS-1210-10P_CX", "impbSmartPort"), (0, "DGS-1210-10P_CX", "impbSmartIpAddress"))
if mibBuilder.loadTexts: impbSmartEntry.setStatus('current')
impbSmartMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 10, 2, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbSmartMacAddress.setStatus('current')
impbSmartPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 10, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbSmartPort.setStatus('current')
impbSmartIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 10, 2, 1, 3), DisplayString().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbSmartIpAddress.setStatus('current')
impbSmartVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 10, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbSmartVlanId.setStatus('current')
impbSmartBinding = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbSmartBinding.setStatus('current')
impbWhiteListTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 10, 3), )
if mibBuilder.loadTexts: impbWhiteListTable.setStatus('current')
impbWhiteListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 10, 3, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "impbWhiteListIpAddress"), (0, "DGS-1210-10P_CX", "impbWhiteListMacAddress"))
if mibBuilder.loadTexts: impbWhiteListEntry.setStatus('current')
impbWhiteListIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 10, 3, 1, 1), DisplayString().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbWhiteListIpAddress.setStatus('current')
impbWhiteListMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 10, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbWhiteListMacAddress.setStatus('current')
impbWhiteListPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 10, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbWhiteListPort.setStatus('current')
impbWhiteListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 10, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: impbWhiteListRowStatus.setStatus('current')
impbBlackListTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 10, 4), )
if mibBuilder.loadTexts: impbBlackListTable.setStatus('current')
impbBlackListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 10, 4, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "impbBlackListMacAddress"), (0, "DGS-1210-10P_CX", "impbBlackListVlanId"), (0, "DGS-1210-10P_CX", "impbBlackListPort"))
if mibBuilder.loadTexts: impbBlackListEntry.setStatus('current')
impbBlackListMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 10, 4, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbBlackListMacAddress.setStatus('current')
impbBlackListVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 10, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbBlackListVlanId.setStatus('current')
impbBlackListPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 10, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbBlackListPort.setStatus('current')
impbBlackListIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 10, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbBlackListIpAddress.setStatus('current')
impbBlackListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 10, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("deleted", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbBlackListStatus.setStatus('current')
impbAutoScanIpAddressFrom = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 10, 5), Ipv6Address().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbAutoScanIpAddressFrom.setStatus('current')
impbAutoScanIpAddressTo = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 10, 6), Ipv6Address().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbAutoScanIpAddressTo.setStatus('current')
impbAutoScanStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 10, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("scan", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbAutoScanStatus.setStatus('current')
stpGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 6, 1))
rstpStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rstpStatus.setStatus('current')
stpVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("stpCompatible", 0), ("rstp", 2))).clone('rstp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpVersion.setStatus('current')
stpPriority = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPriority.setStatus('current')
stpTxHoldCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpTxHoldCount.setStatus('current')
stpProtocolSpecification = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("decLb100", 2), ("ieee8021d", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpProtocolSpecification.setStatus('current')
stpTimeSinceTopologyChange = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 6, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpTimeSinceTopologyChange.setStatus('current')
stpTopChanges = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpTopChanges.setStatus('current')
stpDesignatedRoot = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 6, 1, 8), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpDesignatedRoot.setStatus('current')
stpRootCost = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpRootCost.setStatus('current')
stpRootPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpRootPort.setStatus('current')
stpMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 6, 1, 11), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpMaxAge.setStatus('current')
stpHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 6, 1, 12), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpHelloTime.setStatus('current')
stpHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpHoldTime.setStatus('current')
stpForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 6, 1, 14), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpForwardDelay.setStatus('current')
stpBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 6, 1, 15), Timeout().subtype(subtypeSpec=ValueRangeConstraint(600, 4000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgeMaxAge.setStatus('current')
stpBridgeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 6, 1, 16), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgeHelloTime.setStatus('current')
stpBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 6, 1, 17), Timeout().subtype(subtypeSpec=ValueRangeConstraint(400, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgeForwardDelay.setStatus('current')
stpPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 6, 2), )
if mibBuilder.loadTexts: stpPortTable.setStatus('current')
stpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 6, 2, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "stpPort"))
if mibBuilder.loadTexts: stpPortEntry.setStatus('current')
stpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPort.setStatus('current')
stpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortPriority.setStatus('current')
stpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortState.setStatus('current')
stpPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortEnable.setStatus('current')
stpAdminPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpAdminPortPathCost.setStatus('current')
stpPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortPathCost.setStatus('current')
stpPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 6, 2, 1, 7), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortDesignatedRoot.setStatus('current')
stpPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 6, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortDesignatedCost.setStatus('current')
stpPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 6, 2, 1, 9), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortDesignatedBridge.setStatus('current')
stpPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 6, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortDesignatedPort.setStatus('current')
stpPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 6, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortForwardTransitions.setStatus('current')
stpPortProtocolMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 6, 2, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortProtocolMigration.setStatus('current')
stpPortOperEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 6, 2, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortOperEdgePort.setStatus('current')
stpPortAdminPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 6, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceTrue", 0), ("forceFalse", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortAdminPointToPoint.setStatus('current')
stpPortOperPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 6, 2, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortOperPointToPoint.setStatus('current')
stpPortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 6, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 0), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortEdge.setStatus('current')
stpPortRestrictedRole = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 6, 2, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortRestrictedRole.setStatus('current')
stpPortRestrictedTCN = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 6, 2, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortRestrictedTCN.setStatus('current')
staticMcastTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 35, 1), )
if mibBuilder.loadTexts: staticMcastTable.setStatus('current')
staticMcastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 35, 1, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "staticMcastVlanID"), (0, "DGS-1210-10P_CX", "staticMcastMac"), (0, "DGS-1210-10P_CX", "staticMcastEgressPorts"))
if mibBuilder.loadTexts: staticMcastEntry.setStatus('current')
staticMcastVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 35, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMcastVlanID.setStatus('current')
staticMcastMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 35, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMcastMac.setStatus('current')
staticMcastEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 35, 1, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMcastEgressPorts.setStatus('current')
staticMcastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 35, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticMcastStatus.setStatus('current')
dot1qVlanManagementOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanManagementOnOff.setStatus('current')
dot1qVlanManagementid = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 7, 3), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanManagementid.setStatus('current')
dot1qVlanAsyOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanAsyOnOff.setStatus('current')
dot1qVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 7, 6), )
if mibBuilder.loadTexts: dot1qVlanTable.setStatus('current')
dot1qVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 7, 6, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "dot1qVlanName"))
if mibBuilder.loadTexts: dot1qVlanEntry.setStatus('current')
dot1qVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 7, 6, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1qVlanName.setStatus('current')
dot1qVlanEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 7, 6, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1qVlanEgressPorts.setStatus('current')
dot1qVlanUntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 7, 6, 1, 4), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1qVlanUntaggedPorts.setStatus('current')
dot1qVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 7, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1qVlanRowStatus.setStatus('current')
dot1qVlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 7, 7), )
if mibBuilder.loadTexts: dot1qVlanPortTable.setStatus('current')
dot1qVlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 7, 7, 1), )
dot1dBasePortEntry.registerAugmentions(("DGS-1210-10P_CX", "dot1qVlanPortEntry"))
dot1qVlanPortEntry.setIndexNames(*dot1dBasePortEntry.getIndexNames())
if mibBuilder.loadTexts: dot1qVlanPortEntry.setStatus('current')
dot1qVlanPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 7, 7, 1, 1), VlanIndex().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanPvid.setStatus('current')
dot1qVlanUngisterMCFilterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 7, 8), )
if mibBuilder.loadTexts: dot1qVlanUngisterMCFilterTable.setStatus('current')
dot1qVlanUngisterMCFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 7, 8, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "dot1qVlanUngisterMCFilterVlanId"))
if mibBuilder.loadTexts: dot1qVlanUngisterMCFilterEntry.setStatus('current')
dot1qVlanUngisterMCFilterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 7, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qVlanUngisterMCFilterVlanId.setStatus('current')
dot1qVlanUngisterMCFiltermode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 7, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("filter", 1), ("forward", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanUngisterMCFiltermode.setStatus('current')
laSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 8, 1))
laPortControl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 8, 2))
class PortLaMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("lacp", 1), ("static", 2), ("disable", 3))

class LacpKey(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

laStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laStatus.setStatus('current')
laPortChannelTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 8, 1, 3), )
if mibBuilder.loadTexts: laPortChannelTable.setStatus('current')
laPortChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 8, 1, 3, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "laPortChannelIfIndex"))
if mibBuilder.loadTexts: laPortChannelEntry.setStatus('current')
laPortChannelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 8, 1, 3, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: laPortChannelIfIndex.setStatus('current')
laPortChannelMemberList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 8, 1, 3, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortChannelMemberList.setStatus('current')
laPortChannelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 8, 1, 3, 1, 3), PortLaMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortChannelMode.setStatus('current')
laPortControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 8, 2, 1), )
if mibBuilder.loadTexts: laPortControlTable.setStatus('current')
laPortControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 8, 2, 1, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "laPortControlIndex"))
if mibBuilder.loadTexts: laPortControlEntry.setStatus('current')
laPortControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 8, 2, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: laPortControlIndex.setStatus('current')
laPortActorActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 8, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortActorActivity.setStatus('current')
laPortActorTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 8, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortActorTimeout.setStatus('current')
staticDisableAutoLearn = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticDisableAutoLearn.setStatus('current')
staticAutoLearningList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 9, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticAutoLearningList.setStatus('current')
staticTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 9, 3), )
if mibBuilder.loadTexts: staticTable.setStatus('current')
staticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 9, 3, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "staticVlanID"), (0, "DGS-1210-10P_CX", "staticMac"), (0, "DGS-1210-10P_CX", "staticPort"))
if mibBuilder.loadTexts: staticEntry.setStatus('current')
staticVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticVlanID.setStatus('current')
staticMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 9, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMac.setStatus('current')
staticPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 9, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticPort.setStatus('current')
staticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 9, 3, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticStatus.setStatus('current')
igsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 10, 1))
igsVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 10, 3))
igsStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsStatus.setStatus('current')
igsRouterPortPurgeInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsRouterPortPurgeInterval.setStatus('current')
igsHostPortPurgeInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(130, 153025)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsHostPortPurgeInterval.setStatus('current')
igsRobustnessValue = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsRobustnessValue.setStatus('current')
igsGrpQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsGrpQueryInterval.setStatus('current')
igsQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsQueryInterval.setStatus('current')
igsQueryMaxResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 25)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsQueryMaxResponseTime.setStatus('current')
igsReportToAllPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsReportToAllPort.setStatus('current')
igsVlanRouterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 10, 3, 3), )
if mibBuilder.loadTexts: igsVlanRouterTable.setStatus('current')
igsVlanRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 10, 3, 3, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "igsVlanRouterVlanId"))
if mibBuilder.loadTexts: igsVlanRouterEntry.setStatus('current')
igsVlanRouterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 10, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanRouterVlanId.setStatus('current')
igsVlanRouterPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 10, 3, 3, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanRouterPortList.setStatus('current')
igsVlanFilterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 10, 3, 4), )
if mibBuilder.loadTexts: igsVlanFilterTable.setStatus('current')
igsVlanFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 10, 3, 4, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "igsVlanFilterVlanId"))
if mibBuilder.loadTexts: igsVlanFilterEntry.setStatus('current')
igsVlanFilterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 10, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanFilterVlanId.setStatus('current')
igsVlanSnoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 10, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanSnoopStatus.setStatus('current')
igsVlanQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 10, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanQuerier.setStatus('current')
igsVlanCfgQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 10, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanCfgQuerier.setStatus('current')
igsVlanQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 10, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(125)).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanQueryInterval.setStatus('current')
igsVlanRtrPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 10, 3, 4, 1, 6), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanRtrPortList.setStatus('current')
igsVlanFastLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 10, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanFastLeave.setStatus('current')
igsVlanMulticastGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 10, 3, 5), )
if mibBuilder.loadTexts: igsVlanMulticastGroupTable.setStatus('current')
igsVlanMulticastGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 10, 3, 5, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "igsVlanMulticastGroupVlanId"), (0, "DGS-1210-10P_CX", "igsVlanMulticastGroupIpAddress"))
if mibBuilder.loadTexts: igsVlanMulticastGroupEntry.setStatus('current')
igsVlanMulticastGroupVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 10, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupVlanId.setStatus('current')
igsVlanMulticastGroupIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 10, 3, 5, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupIpAddress.setStatus('current')
igsVlanMulticastGroupMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 10, 3, 5, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupMacAddress.setStatus('current')
igsVlanMulticastGroupPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 10, 3, 5, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupPortList.setStatus('current')
mldsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 88, 1))
mldsVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 88, 3))
mldsStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 88, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsStatus.setStatus('current')
mldsRouterPortPurgeInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 88, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsRouterPortPurgeInterval.setStatus('current')
mldsHostPortPurgeInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 88, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(130, 153025)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsHostPortPurgeInterval.setStatus('current')
mldsRobustnessValue = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 88, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsRobustnessValue.setStatus('current')
mldsGrpQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 88, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsGrpQueryInterval.setStatus('current')
mldsQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 88, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsQueryInterval.setStatus('current')
mldsQueryMaxResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 88, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 25)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsQueryMaxResponseTime.setStatus('current')
mldsVlanRouterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 88, 3, 3), )
if mibBuilder.loadTexts: mldsVlanRouterTable.setStatus('current')
mldsVlanRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 88, 3, 3, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "mldsVlanRouterVlanId"))
if mibBuilder.loadTexts: mldsVlanRouterEntry.setStatus('current')
mldsVlanRouterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 88, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanRouterVlanId.setStatus('current')
mldsVlanRouterPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 88, 3, 3, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanRouterPortList.setStatus('current')
mldsVlanFilterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 88, 3, 4), )
if mibBuilder.loadTexts: mldsVlanFilterTable.setStatus('current')
mldsVlanFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 88, 3, 4, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "mldsVlanFilterVlanId"))
if mibBuilder.loadTexts: mldsVlanFilterEntry.setStatus('current')
mldsVlanFilterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 88, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanFilterVlanId.setStatus('current')
mldsVlanSnoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 88, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanSnoopStatus.setStatus('current')
mldsVlanQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 88, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanQuerier.setStatus('current')
mldsVlanCfgQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 88, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanCfgQuerier.setStatus('current')
mldsVlanQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 88, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(125)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanQueryInterval.setStatus('current')
mldsVlanRtrPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 88, 3, 4, 1, 6), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanRtrPortList.setStatus('current')
mldsVlanFastLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 88, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanFastLeave.setStatus('current')
mldsVlanMulticastGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 88, 3, 5), )
if mibBuilder.loadTexts: mldsVlanMulticastGroupTable.setStatus('current')
mldsVlanMulticastGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 88, 3, 5, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "mldsVlanMulticastGroupVlanId"), (0, "DGS-1210-10P_CX", "mldsVlanMulticastGroupIpAddress"))
if mibBuilder.loadTexts: mldsVlanMulticastGroupEntry.setStatus('current')
mldsVlanMulticastGroupVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 88, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanMulticastGroupVlanId.setStatus('current')
mldsVlanMulticastGroupIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 88, 3, 5, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanMulticastGroupIpAddress.setStatus('current')
mldsVlanMulticastGroupMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 88, 3, 5, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanMulticastGroupMacAddress.setStatus('current')
mldsVlanMulticastGroupPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 88, 3, 5, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanMulticastGroupPortList.setStatus('current')
swAuthenCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 23, 1))
swAuthStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 23, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthStatus.setStatus('current')
authProtocol = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("authProtocolRadiusEap", 1), ("authProtocolLocal", 2))).clone('authProtocolRadiusEap')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authProtocol.setStatus('current')
swAuthCtrlPktFwdMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 23, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthCtrlPktFwdMode.setStatus('current')
swAuthPortAccessCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 23, 2))
swAuthPortAccessControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 23, 2, 1), )
if mibBuilder.loadTexts: swAuthPortAccessControlTable.setStatus('current')
swAuthPortAccessControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 23, 2, 1, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "swAuthAuthConfigPortNumber"))
if mibBuilder.loadTexts: swAuthPortAccessControlEntry.setStatus('current')
swAuthAuthConfigPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 23, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthAuthConfigPortNumber.setStatus('current')
swAuthAuthQuietPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 23, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthQuietPeriod.setStatus('current')
swAuthAuthSuppTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 23, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthSuppTimeout.setStatus('current')
swAuthAuthServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 23, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthServerTimeout.setStatus('current')
swAuthAuthMaxReq = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 23, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthMaxReq.setStatus('current')
swAuthAuthTxPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 23, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(24)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthTxPeriod.setStatus('current')
swAuthAuthReAuthPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 23, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(3600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthReAuthPeriod.setStatus('current')
swAuthAuthReAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 23, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthReAuthentication.setStatus('current')
swAuthAuthConfigPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 23, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forceUnauthorized", 1), ("auto", 2), ("forceAuthorized", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthConfigPortControl.setStatus('current')
swAuthAuthCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 23, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("authenticator", 1), ("none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthCapability.setStatus('current')
swAuthAuthDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 23, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("both", 0), ("in", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthDirection.setStatus('current')
swAuthUser = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 23, 3))
swAuthUserTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 23, 3, 1), )
if mibBuilder.loadTexts: swAuthUserTable.setStatus('current')
swAuthUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 23, 3, 1, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "swAuthUserName"))
if mibBuilder.loadTexts: swAuthUserEntry.setStatus('current')
swAuthUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 23, 3, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthUserName.setStatus('current')
swAuthUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 23, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthUserPassword.setStatus('current')
swAuthUserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 23, 3, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAuthUserStatus.setStatus('current')
swAuthRadiusServer = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 23, 4))
swAuthRadiusServerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 23, 4, 2), )
if mibBuilder.loadTexts: swAuthRadiusServerTable.setStatus('current')
swAuthRadiusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 23, 4, 2, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "swAuthRadiusServerIndex"))
if mibBuilder.loadTexts: swAuthRadiusServerEntry.setStatus('current')
swAuthRadiusServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 23, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthRadiusServerIndex.setStatus('current')
swAuthRadiusIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 23, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusIPType.setStatus('current')
swAuthRadiusServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 23, 4, 2, 1, 3), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusServerAddress.setStatus('current')
swAuthRadiusServerInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 23, 4, 2, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAuthRadiusServerInterfaceName.setStatus('current')
swAuthRadiusServerAuthenticationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 23, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1812)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusServerAuthenticationPort.setStatus('current')
swAuthRadiusServerAccountingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 23, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1813)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusServerAccountingPort.setStatus('current')
swAuthRadiusServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 23, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusServerTimeout.setStatus('current')
swAuthRadiusServerRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 23, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusServerRetransmit.setStatus('current')
swAuthRadiusServerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 23, 4, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusServerKey.setStatus('current')
swAuthRadiusServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 23, 4, 2, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAuthRadiusServerStatus.setStatus('current')
qosMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dot1p", 1), ("dscp", 2), ("tos", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosMode.setStatus('current')
queuingMechanism = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strictPriority", 1), ("wrr", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: queuingMechanism.setStatus('current')
qosQ1p = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 3))
dot1pPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 3, 1), )
if mibBuilder.loadTexts: dot1pPortTable.setStatus('current')
dot1pPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 3, 1, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "dot1pPortIndex"))
if mibBuilder.loadTexts: dot1pPortEntry.setStatus('current')
dot1pPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1pPortIndex.setStatus('current')
dot1pPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1pPortPriority.setStatus('current')
qosDiffServ = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4))
qosDiffServEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDiffServEnable.setStatus('current')
qosDiffServTypeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2))
qosDiffServType00 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType00.setStatus('current')
qosDiffServType01 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType01.setStatus('current')
qosDiffServType02 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType02.setStatus('current')
qosDiffServType03 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType03.setStatus('current')
qosDiffServType04 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType04.setStatus('current')
qosDiffServType05 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType05.setStatus('current')
qosDiffServType06 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType06.setStatus('current')
qosDiffServType07 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType07.setStatus('current')
qosDiffServType08 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType08.setStatus('current')
qosDiffServType09 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType09.setStatus('current')
qosDiffServType10 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType10.setStatus('current')
qosDiffServType11 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType11.setStatus('current')
qosDiffServType12 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType12.setStatus('current')
qosDiffServType13 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType13.setStatus('current')
qosDiffServType14 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType14.setStatus('current')
qosDiffServType15 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType15.setStatus('current')
qosDiffServType16 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType16.setStatus('current')
qosDiffServType17 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType17.setStatus('current')
qosDiffServType18 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType18.setStatus('current')
qosDiffServType19 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType19.setStatus('current')
qosDiffServType20 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType20.setStatus('current')
qosDiffServType21 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType21.setStatus('current')
qosDiffServType22 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType22.setStatus('current')
qosDiffServType23 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType23.setStatus('current')
qosDiffServType24 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType24.setStatus('current')
qosDiffServType25 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType25.setStatus('current')
qosDiffServType26 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType26.setStatus('current')
qosDiffServType27 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType27.setStatus('current')
qosDiffServType28 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType28.setStatus('current')
qosDiffServType29 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType29.setStatus('current')
qosDiffServType30 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType30.setStatus('current')
qosDiffServType31 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType31.setStatus('current')
qosDiffServType32 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType32.setStatus('current')
qosDiffServType33 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType33.setStatus('current')
qosDiffServType34 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType34.setStatus('current')
qosDiffServType35 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType35.setStatus('current')
qosDiffServType36 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType36.setStatus('current')
qosDiffServType37 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType37.setStatus('current')
qosDiffServType38 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType38.setStatus('current')
qosDiffServType39 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType39.setStatus('current')
qosDiffServType40 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType40.setStatus('current')
qosDiffServType41 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType41.setStatus('current')
qosDiffServType42 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType42.setStatus('current')
qosDiffServType43 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType43.setStatus('current')
qosDiffServType44 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType44.setStatus('current')
qosDiffServType45 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType45.setStatus('current')
qosDiffServType46 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType46.setStatus('current')
qosDiffServType47 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType47.setStatus('current')
qosDiffServType48 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType48.setStatus('current')
qosDiffServType49 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType49.setStatus('current')
qosDiffServType50 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType50.setStatus('current')
qosDiffServType51 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType51.setStatus('current')
qosDiffServType52 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType52.setStatus('current')
qosDiffServType53 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType53.setStatus('current')
qosDiffServType54 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType54.setStatus('current')
qosDiffServType55 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType55.setStatus('current')
qosDiffServType56 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType56.setStatus('current')
qosDiffServType57 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType57.setStatus('current')
qosDiffServType58 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType58.setStatus('current')
qosDiffServType59 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType59.setStatus('current')
qosDiffServType60 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType60.setStatus('current')
qosDiffServType61 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType61.setStatus('current')
qosDiffServType62 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType62.setStatus('current')
qosDiffServType63 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 4, 2, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType63.setStatus('current')
qosTOS = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 5))
qosTOSEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosTOSEnable.setStatus('current')
qosTOSGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 5, 2))
qosTOSType00 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 5, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType00.setStatus('current')
qosTOSType01 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 5, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType01.setStatus('current')
qosTOSType02 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 5, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType02.setStatus('current')
qosTOSType03 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 5, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType03.setStatus('current')
qosTOSType04 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 5, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType04.setStatus('current')
qosTOSType05 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 5, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType05.setStatus('current')
qosTOSType06 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 5, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType06.setStatus('current')
qosTOSType07 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 12, 5, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType07.setStatus('current')
bandwidthCtrlSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 13, 1))
bandwidthCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 13, 1, 2), )
if mibBuilder.loadTexts: bandwidthCtrlTable.setStatus('current')
bandwidthCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 13, 1, 2, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "bandwidthCtrlIndex"))
if mibBuilder.loadTexts: bandwidthCtrlEntry.setStatus('current')
bandwidthCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 13, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthCtrlIndex.setStatus('current')
bandwidthCtrlTxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 13, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 1024000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bandwidthCtrlTxThreshold.setStatus('current')
bandwidthCtrlRxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 13, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 1024000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bandwidthCtrlRxThreshold.setStatus('current')
broadcastStormCtrlSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 13, 3))
broadcastStormCtrlGlobalOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 13, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: broadcastStormCtrlGlobalOnOff.setStatus('current')
broadcastStormCtrlLimitType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 13, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("broadcastonly", 1), ("multicastAndbroadcast", 2), ("dlfMulticastAndbroadcast", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: broadcastStormCtrlLimitType.setStatus('current')
broadcastStormCtrlThreshold = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 13, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 1024000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: broadcastStormCtrlThreshold.setStatus('current')
securityTrustedHost = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 1))
trustedHostStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trustedHostStatus.setStatus('current')
trustedHostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 1, 3), )
if mibBuilder.loadTexts: trustedHostTable.setStatus('current')
trustedHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 1, 3, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "trustedHostIPType"), (0, "DGS-1210-10P_CX", "trustedHostIpAddr"), (0, "DGS-1210-10P_CX", "trustedHostIpMask"))
if mibBuilder.loadTexts: trustedHostEntry.setStatus('current')
trustedHostIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trustedHostIPType.setStatus('current')
trustedHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trustedHostIpAddr.setStatus('current')
trustedHostIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trustedHostIpMask.setStatus('current')
trustedHostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trustedHostRowStatus.setStatus('current')
securityARPSpoofPrevent = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 3))
aRPSpoofPreventTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 3, 1), )
if mibBuilder.loadTexts: aRPSpoofPreventTable.setStatus('current')
aRPSpoofPreventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 3, 1, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "aRPSpoofPreventIpAddr"))
if mibBuilder.loadTexts: aRPSpoofPreventEntry.setStatus('current')
aRPSpoofPreventIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 3, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: aRPSpoofPreventIpAddr.setStatus('current')
aRPSpoofPreventMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 3, 1, 1, 2), MacAddress().clone(hexValue="000102030405")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aRPSpoofPreventMacAddress.setStatus('current')
aRPSpoofPreventPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 3, 1, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aRPSpoofPreventPortList.setStatus('current')
aRPSpoofPreventRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 3, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aRPSpoofPreventRowStatus.setStatus('current')
securitySSL = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 5))
sslSecurityHttpStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslSecurityHttpStatus.setStatus('current')
sslCiphers = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 5, 2))
sslCipherSuiteList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 5, 2, 1), Bits().clone(namedValues=NamedValues(("rsa-null-md5", 0), ("rsa-null-sha", 1), ("rsa-des-sha", 2), ("rsa-3des-sha", 3), ("dh-rsa-des-sha", 4), ("dh-rsa-3des-sha", 5), ("rsa-exp1024-des-sha", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCipherSuiteList.setStatus('current')
securitySSH = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 8))
sshSecurityStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshSecurityStatus.setStatus('current')
sshMaxAuthFailAttempts = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshMaxAuthFailAttempts.setStatus('current')
sshSessionKeyRekeying = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("never", 0), ("ten-min", 1), ("thirty-min", 2), ("sixty-min", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshSessionKeyRekeying.setStatus('current')
sshMaxSession = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshMaxSession.setStatus('current')
sshConnectionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 8, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(120, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshConnectionTimeout.setStatus('current')
sshAuthenMethodPassWordAdmin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshAuthenMethodPassWordAdmin.setStatus('current')
sshAuthenMethodPubKeyAdmin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshAuthenMethodPubKeyAdmin.setStatus('current')
sshAuthenMethodHostKeyAdmin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 8, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshAuthenMethodHostKeyAdmin.setStatus('current')
sshCipherSuiteList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 8, 9), Bits().clone(namedValues=NamedValues(("tripleDESCBC", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshCipherSuiteList.setStatus('current')
sshMacSuiteList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 8, 10), Bits().clone(namedValues=NamedValues(("hMAC-SHA1", 0), ("hMAC-MD5", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshMacSuiteList.setStatus('current')
sshPublKeyRSAAdmin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 8, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshPublKeyRSAAdmin.setStatus('current')
sshUserInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 8, 12), )
if mibBuilder.loadTexts: sshUserInfoTable.setStatus('current')
sshUserInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 8, 12, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "sshUserInfoID"))
if mibBuilder.loadTexts: sshUserInfoEntry.setStatus('current')
sshUserInfoID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 8, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserInfoID.setStatus('current')
sshUserInfoUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 8, 12, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserInfoUserName.setStatus('current')
sshUserInfoAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 8, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 2, 1))).clone(namedValues=NamedValues(("publickey", 4), ("password", 2), ("hostbased", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshUserInfoAuth.setStatus('current')
sshUserInfoHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 8, 12, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshUserInfoHostName.setStatus('current')
sshUserInfoHostIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 8, 12, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshUserInfoHostIp.setStatus('current')
sshUserInfoHostIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 8, 12, 1, 6), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshUserInfoHostIpv6.setStatus('current')
securityPortSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 2))
portSecTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 2, 1), )
if mibBuilder.loadTexts: portSecTable.setStatus('current')
portSecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 2, 1, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "portSecIndex"))
if mibBuilder.loadTexts: portSecEntry.setStatus('current')
portSecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecIndex.setStatus('current')
portSecState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecState.setStatus('current')
portSecMLA = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecMLA.setStatus('current')
cableDiagTriggerIndex = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 37, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableDiagTriggerIndex.setStatus('current')
cableDiagPair1TestResult = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 37, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5))).clone(namedValues=NamedValues(("ok", 0), ("open", 1), ("short", 2), ("notAvailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair1TestResult.setStatus('current')
cableDiagPair1FaultDistance = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 37, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair1FaultDistance.setStatus('current')
cableDiagPair2TestResult = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 37, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5))).clone(namedValues=NamedValues(("ok", 0), ("open", 1), ("short", 2), ("notAvailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair2TestResult.setStatus('current')
cableDiagPair2FaultDistance = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 37, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair2FaultDistance.setStatus('current')
cableDiagPair3TestResult = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 37, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5))).clone(namedValues=NamedValues(("ok", 0), ("open", 1), ("short", 2), ("notAvailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair3TestResult.setStatus('current')
cableDiagPair3FaultDistance = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 37, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair3FaultDistance.setStatus('current')
cableDiagPair4TestResult = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 37, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5))).clone(namedValues=NamedValues(("ok", 0), ("open", 1), ("short", 2), ("notAvailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair4TestResult.setStatus('current')
cableDiagPair4FaultDistance = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 37, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair4FaultDistance.setStatus('current')
cableDiagLengthinRange = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 37, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("less50", 1), ("from50to80", 2), ("from80to100", 3), ("from100to140", 4), ("notAvailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagLengthinRange.setStatus('current')
aclProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 1))
aclProfileTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 1, 1), )
if mibBuilder.loadTexts: aclProfileTable.setStatus('current')
aclProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 1, 1, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "aclProfileNo"))
if mibBuilder.loadTexts: aclProfileEntry.setStatus('current')
aclProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclProfileNo.setStatus('current')
aclProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileName.setStatus('current')
aclProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 13, 11))).clone(namedValues=NamedValues(("l2", 1), ("l3v4", 2), ("l3v4Ext", 13), ("l3v6", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileType.setStatus('current')
aclProfileRuleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclProfileRuleCount.setStatus('current')
aclProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 1, 1, 1, 14), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileStatus.setStatus('current')
aclL2Rule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 2))
aclL2RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 2, 1), )
if mibBuilder.loadTexts: aclL2RuleTable.setStatus('current')
aclL2RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 2, 1, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "aclL2ProfileID"), (0, "DGS-1210-10P_CX", "aclL2AccessID"))
if mibBuilder.loadTexts: aclL2RuleEntry.setStatus('current')
aclL2AccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL2AccessID.setStatus('current')
aclL2ProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL2ProfileID.setStatus('current')
aclL2RuleEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1501, 65535), )).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleEtherType.setStatus('current')
aclL2RuleDstMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 2, 1, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleDstMacAddr.setStatus('current')
aclL2RuleSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 2, 1, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleSrcMacAddr.setStatus('current')
aclL2RuleVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleVlanId.setStatus('current')
aclL2Rule1pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2Rule1pPriority.setStatus('current')
aclL2RuleDstMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 2, 1, 1, 8), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleDstMacAddrMask.setStatus('current')
aclL2RuleSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 2, 1, 1, 9), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleSrcMacAddrMask.setStatus('current')
aclL2RuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleAction.setStatus('current')
aclL2RulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RulePriority.setStatus('current')
aclL2RuleReplacePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleReplacePriority.setStatus('current')
aclL2RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 2, 1, 1, 99), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleStatus.setStatus('current')
aclL3v4Rule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 3))
aclL3v4RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 3, 1), )
if mibBuilder.loadTexts: aclL3v4RuleTable.setStatus('current')
aclL3v4RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 3, 1, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "aclL3v4RuleProfileNo"), (0, "DGS-1210-10P_CX", "aclL3v4RuleAccessID"))
if mibBuilder.loadTexts: aclL3v4RuleEntry.setStatus('current')
aclL3v4RuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3v4RuleAccessID.setStatus('current')
aclL3v4RuleProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3v4RuleProfileNo.setStatus('current')
aclL3v4RuleDstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 3, 1, 1, 3), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4RuleDstIpAddr.setStatus('current')
aclL3v4RuleSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 3, 1, 1, 4), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4RuleSrcIpAddr.setStatus('current')
aclL3v4RuleDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 3, 1, 1, 5), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4RuleDstIpAddrMask.setStatus('current')
aclL3v4RuleSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 3, 1, 1, 6), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4RuleSrcIpAddrMask.setStatus('current')
aclL3v4RuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4RuleAction.setStatus('current')
aclL3v4RulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4RulePriority.setStatus('current')
aclL3v4RuleReplacePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4RuleReplacePriority.setStatus('current')
aclL3v4RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 3, 1, 1, 99), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4RuleStatus.setStatus('current')
aclL3v4ExtRule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 4))
aclL3v4ExtRuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 4, 1), )
if mibBuilder.loadTexts: aclL3v4ExtRuleTable.setStatus('current')
aclL3v4ExtRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 4, 1, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "aclL3v4ExtRuleProfileNo"), (0, "DGS-1210-10P_CX", "aclL3v4ExtRuleAccessID"))
if mibBuilder.loadTexts: aclL3v4ExtRuleEntry.setStatus('current')
aclL3v4ExtRuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3v4ExtRuleAccessID.setStatus('current')
aclL3v4ExtRuleProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3v4ExtRuleProfileNo.setStatus('current')
aclL3v4ExtRuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 6, 17, 24))).clone(namedValues=NamedValues(("none", 0), ("icmp", 1), ("igmp", 2), ("tcp", 6), ("udp", 17), ("protocolid", 24)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleProtocol.setStatus('current')
aclL3v4ExtRuleICMPMessageType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleICMPMessageType.setStatus('current')
aclL3v4ExtRuleICMPMessageCode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleICMPMessageCode.setStatus('current')
aclL3v4ExtRuleDstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 4, 1, 1, 6), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleDstIpAddr.setStatus('current')
aclL3v4ExtRuleSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 4, 1, 1, 7), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleSrcIpAddr.setStatus('current')
aclL3v4ExtRuleDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 4, 1, 1, 8), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleDstIpAddrMask.setStatus('current')
aclL3v4ExtRuleSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 4, 1, 1, 9), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleSrcIpAddrMask.setStatus('current')
aclL3v4ExtRuleTcpUdpDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleTcpUdpDstPort.setStatus('current')
aclL3v4ExtRuleTcpUdpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleTcpUdpSrcPort.setStatus('current')
aclL3v4ExtRuleTcpUdpDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 4, 1, 1, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleTcpUdpDstPortMask.setStatus('current')
aclL3v4ExtRuleTcpUdpSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 4, 1, 1, 13), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleTcpUdpSrcPortMask.setStatus('current')
aclL3v4ExtRuleDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 4, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3v4ExtRuleDscp.setStatus('current')
aclL3v4ExtRuleToS = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 4, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 15)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleToS.setStatus('current')
aclL3v4ExtRuleIgmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 4, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleIgmpType.setStatus('current')
aclL3v4ExtRuleProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 4, 1, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleProtocolId.setStatus('current')
aclL3v4ExtRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 4, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleAction.setStatus('current')
aclL3v4ExtRulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 4, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRulePriority.setStatus('current')
aclL3v4ExtRuleReplacePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 4, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleReplacePriority.setStatus('current')
aclL3v4ExtRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 4, 1, 1, 99), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v4ExtRuleStatus.setStatus('current')
aclL3v6Rule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 5))
aclL3v6RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 5, 1), )
if mibBuilder.loadTexts: aclL3v6RuleTable.setStatus('current')
aclL3v6RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 5, 1, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "aclL3v6RuleProfileNo"), (0, "DGS-1210-10P_CX", "aclL3v6RuleAccessID"))
if mibBuilder.loadTexts: aclL3v6RuleEntry.setStatus('current')
aclL3v6RuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3v6RuleAccessID.setStatus('current')
aclL3v6RuleProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3v6RuleProfileNo.setStatus('current')
aclL3v6RuleTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6RuleTrafficClass.setStatus('current')
aclL3v6RuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 6, 17, 24, 25))).clone(namedValues=NamedValues(("none", 0), ("tcp", 6), ("udp", 17), ("protocolid", 24), ("icmpv6", 25)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6RuleProtocol.setStatus('current')
aclL3v6RuleProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 5, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6RuleProtocolId.setStatus('current')
aclL3v6RuleTcpUdpDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6RuleTcpUdpDstPort.setStatus('current')
aclL3v6RuleTcpUdpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6RuleTcpUdpSrcPort.setStatus('current')
aclL3v6RuleTcpUdpDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 5, 1, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6RuleTcpUdpDstPortMask.setStatus('current')
aclL3v6RuleTcpUdpSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 5, 1, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6RuleTcpUdpSrcPortMask.setStatus('current')
aclL3v6RuleICMPv6MessageType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6RuleICMPv6MessageType.setStatus('current')
aclL3v6RuleICMPv6MessageCode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6RuleICMPv6MessageCode.setStatus('current')
aclL3v6RuleDstIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 5, 1, 1, 12), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6RuleDstIpv6Addr.setStatus('current')
aclL3v6RuleSrcIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 5, 1, 1, 13), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6RuleSrcIpv6Addr.setStatus('current')
aclL3v6RuleDstIpv6AddrPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 5, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6RuleDstIpv6AddrPrefixLen.setStatus('current')
aclL3v6RuleSrcIpv6AddrPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 5, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6RuleSrcIpv6AddrPrefixLen.setStatus('current')
aclL3v6RuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 5, 1, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6RuleAction.setStatus('current')
aclL3v6RulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 5, 1, 1, 92), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6RulePriority.setStatus('current')
aclL3v6RuleReplacePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 5, 1, 1, 93), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6RuleReplacePriority.setStatus('current')
aclL3v6RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 5, 1, 1, 99), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3v6RuleStatus.setStatus('current')
aclPortBindGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 6))
aclPortGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 6, 1), )
if mibBuilder.loadTexts: aclPortGroupTable.setStatus('current')
aclPortGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 6, 1, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "aclPortIndex"))
if mibBuilder.loadTexts: aclPortGroupEntry.setStatus('current')
aclPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclPortIndex.setStatus('current')
aclPortL2ProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPortL2ProfileNo.setStatus('current')
aclPortL3v4ProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPortL3v4ProfileNo.setStatus('current')
aclPortL3v6ProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPortL3v6ProfileNo.setStatus('current')
aclHWResourceStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 8))
aclHWResourceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 8, 1), )
if mibBuilder.loadTexts: aclHWResourceStatusTable.setStatus('current')
aclHWResourceStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 8, 1, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "aclHWProfileIndex"))
if mibBuilder.loadTexts: aclHWResourceStatusEntry.setStatus('current')
aclHWProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclHWProfileIndex.setStatus('current')
aclAccessListNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclAccessListNo.setStatus('current')
aclResourceEntryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 15, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclResourceEntryCount.setStatus('current')
snmpGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpGlobalState.setStatus('current')
snmpV3User = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 2))
snmpV3Group = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 3))
snmpV3ViewTree = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 4))
snmpV3Community = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 5))
snmpV3Host = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 6))
snmpV3EngineID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 7), SnmpEngineID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3EngineID.setStatus('current')
snmpV3Trap = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 8))
snmpV3UserTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 2, 1), )
if mibBuilder.loadTexts: snmpV3UserTable.setStatus('current')
snmpV3UserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 2, 1, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "snmpV3UserName"), (0, "DGS-1210-10P_CX", "snmpV3UserVersion"))
if mibBuilder.loadTexts: snmpV3UserEntry.setStatus('current')
snmpV3UserName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 2, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3UserName.setStatus('current')
snmpV3UserVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3UserVersion.setStatus('current')
snmpV3UserGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 2, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserGroupName.setStatus('current')
snmpV3UserAuthProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("md5", 2), ("sha", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserAuthProtocol.setStatus('current')
snmpV3UserAuthProtocolPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 2, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserAuthProtocolPassword.setStatus('current')
snmpV3UserPrivProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("des", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserPrivProtocol.setStatus('current')
snmpV3UserPrivProtocolPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 2, 1, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserPrivProtocolPassword.setStatus('current')
snmpV3UserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 2, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserStatus.setStatus('current')
snmpV3GroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 3, 1), )
if mibBuilder.loadTexts: snmpV3GroupTable.setStatus('current')
snmpV3GroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 3, 1, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "snmpV3GroupName"), (0, "DGS-1210-10P_CX", "snmpV3GroupSecurityModel"), (0, "DGS-1210-10P_CX", "snmpV3GroupSecurityLevel"))
if mibBuilder.loadTexts: snmpV3GroupEntry.setStatus('current')
snmpV3GroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 3, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3GroupName.setStatus('current')
snmpV3GroupSecurityModel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3GroupSecurityModel.setStatus('current')
snmpV3GroupSecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 3, 1, 1, 3), SnmpSecurityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3GroupSecurityLevel.setStatus('current')
snmpV3GroupReadViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 3, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3GroupReadViewName.setStatus('current')
snmpV3GroupWriteViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 3, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3GroupWriteViewName.setStatus('current')
snmpV3GroupNotifyViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 3, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3GroupNotifyViewName.setStatus('current')
snmpV3GroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 3, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3GroupStatus.setStatus('current')
snmpV3ViewTreeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 4, 1), )
if mibBuilder.loadTexts: snmpV3ViewTreeTable.setStatus('current')
snmpV3ViewTreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 4, 1, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "snmpV3viewTreeName"), (0, "DGS-1210-10P_CX", "snmpV3viewTreeSubtree"))
if mibBuilder.loadTexts: snmpV3ViewTreeEntry.setStatus('current')
snmpV3viewTreeName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 4, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3viewTreeName.setStatus('current')
snmpV3viewTreeSubtree = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 4, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3viewTreeSubtree.setStatus('current')
snmpV3viewTreeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3viewTreeMask.setStatus('current')
snmpV3viewTreeType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("included", 1), ("excluded", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3viewTreeType.setStatus('current')
snmpV3viewTreeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 4, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3viewTreeStatus.setStatus('current')
snmpV3CommunityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 5, 1), )
if mibBuilder.loadTexts: snmpV3CommunityTable.setStatus('current')
snmpV3CommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 5, 1, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "snmpV3CommunityName"))
if mibBuilder.loadTexts: snmpV3CommunityEntry.setStatus('current')
snmpV3CommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 5, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3CommunityName.setStatus('current')
snmpV3CommunityPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 5, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3CommunityPolicy.setStatus('current')
snmpV3CommunityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 5, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3CommunityStatus.setStatus('current')
snmpV3HostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 6, 2), )
if mibBuilder.loadTexts: snmpV3HostTable.setStatus('current')
snmpV3HostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 6, 2, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "snmpV3HostAddress"), (0, "DGS-1210-10P_CX", "snmpV3IPType"))
if mibBuilder.loadTexts: snmpV3HostEntry.setStatus('current')
snmpV3HostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 6, 2, 1, 1), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3HostAddress.setStatus('current')
snmpV3IPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3IPType.setStatus('current')
snmpV3HostCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 6, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3HostCommunityName.setStatus('current')
snmpV3HostVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3NoAuthNoPriv", 3), ("v3AuthNoPriv", 4), ("v3AuthPriv", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3HostVersion.setStatus('current')
snmpV3HostInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 6, 2, 1, 5), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3HostInterfaceName.setStatus('current')
snmpV3HostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 6, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3HostStatus.setStatus('current')
snmpV3TrapSNMPAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapSNMPAuthentication.setStatus('current')
snmpV3TrapBootup = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapBootup.setStatus('current')
snmpV3TrapPortLinkUpDown = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapPortLinkUpDown.setStatus('current')
snmpV3TrapRSTPStateChange = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapRSTPStateChange.setStatus('current')
snmpV3TrapFirmUpgrade = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapFirmUpgrade.setStatus('current')
snmpV3TrapPoePowerOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapPoePowerOnOff.setStatus('current')
snmpV3TrapPoePowerError = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapPoePowerError.setStatus('current')
snmpV3TrapOverMaxPowerBudget = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 8, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapOverMaxPowerBudget.setStatus('current')
snmpV3TrapLBD = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 25, 8, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapLBD.setStatus('current')
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 27, 0))
topologyChange = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 27, 0, 4)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: topologyChange.setStatus('current')
firmwareUpgradeSuccess = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 27, 0, 8))
if mibBuilder.loadTexts: firmwareUpgradeSuccess.setStatus('current')
firmwareUpgradeFailure = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 27, 0, 9))
if mibBuilder.loadTexts: firmwareUpgradeFailure.setStatus('current')
firmwareIllegalFile = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 27, 0, 10))
if mibBuilder.loadTexts: firmwareIllegalFile.setStatus('current')
firmwareTransferError = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 27, 0, 11))
if mibBuilder.loadTexts: firmwareTransferError.setStatus('current')
firmwareChecksumError = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 27, 0, 12))
if mibBuilder.loadTexts: firmwareChecksumError.setStatus('current')
poePowerOn = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 27, 0, 13))
if mibBuilder.loadTexts: poePowerOn.setStatus('current')
poePowerOff = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 27, 0, 14))
if mibBuilder.loadTexts: poePowerOff.setStatus('current')
poeShortCircuit = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 27, 0, 15))
if mibBuilder.loadTexts: poeShortCircuit.setStatus('current')
poeOverLoad = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 27, 0, 16))
if mibBuilder.loadTexts: poeOverLoad.setStatus('current')
poePowerDenied = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 27, 0, 17))
if mibBuilder.loadTexts: poePowerDenied.setStatus('current')
poeThermalShutdown = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 27, 0, 18))
if mibBuilder.loadTexts: poeThermalShutdown.setStatus('current')
poeOverMaxPowerBudget = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 27, 0, 19))
if mibBuilder.loadTexts: poeOverMaxPowerBudget.setStatus('current')
syslogGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 16, 2))
syslogState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 16, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogState.setStatus('current')
syslogTimeStampOption = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 16, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogTimeStampOption.setStatus('current')
syslogSrvSeverity = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 16, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 6, 7))).clone(namedValues=NamedValues(("warning", 4), ("info", 6), ("all", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogSrvSeverity.setStatus('current')
syslogSrvFacility = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 16, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(128, 136, 144, 152, 160, 168, 176, 184))).clone(namedValues=NamedValues(("local0", 128), ("local1", 136), ("local2", 144), ("local3", 152), ("local4", 160), ("local5", 168), ("local6", 176), ("local7", 184)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogSrvFacility.setStatus('current')
syslogSrvTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 16, 2, 5), )
if mibBuilder.loadTexts: syslogSrvTable.setStatus('current')
syslogSrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 16, 2, 5, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "syslogSrvIPType"), (0, "DGS-1210-10P_CX", "syslogSrvIP"))
if mibBuilder.loadTexts: syslogSrvEntry.setStatus('current')
syslogSrvIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 16, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogSrvIPType.setStatus('current')
syslogSrvIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 16, 2, 5, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogSrvIP.setStatus('current')
syslogSrvPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 16, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(514)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogSrvPort.setStatus('current')
syslogInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 16, 2, 5, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogInterfaceName.setStatus('current')
syslogSrvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 16, 2, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogSrvRowStatus.setStatus('current')
sysLBDStateEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDStateEnable.setStatus('current')
sysLBDMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 17, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port", 1), ("vlan", 2))).clone('port')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDMode.setStatus('current')
sysLBDInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 17, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDInterval.setStatus('current')
sysLBDRecoverTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 17, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 1000000), )).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDRecoverTime.setStatus('current')
sysLBDCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 17, 5), )
if mibBuilder.loadTexts: sysLBDCtrlTable.setStatus('current')
sysLBDCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 17, 5, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "sysLBDCtrlIndex"))
if mibBuilder.loadTexts: sysLBDCtrlEntry.setStatus('current')
sysLBDCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 17, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLBDCtrlIndex.setStatus('current')
sysLBDPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 17, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDPortStatus.setStatus('current')
sysLBDPortLoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 17, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLBDPortLoopStatus.setStatus('current')
sysLBDVlanLoopTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 17, 6), )
if mibBuilder.loadTexts: sysLBDVlanLoopTable.setStatus('current')
sysLBDVlanLoopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 17, 6, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "sysLBDVlanLoopIndex"))
if mibBuilder.loadTexts: sysLBDVlanLoopEntry.setStatus('current')
sysLBDVlanLoopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 17, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLBDVlanLoopIndex.setStatus('current')
sysLBDVlanLoopPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 17, 6, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLBDVlanLoopPorts.setStatus('current')
swLoopDetectEnabledVlanList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 17, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swLoopDetectEnabledVlanList.setStatus('current')
sysMirrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMirrorStatus.setStatus('current')
sysMirrorTargetPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 18, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMirrorTargetPort.setStatus('current')
sysMirrorCtrlIngressMirroring = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 18, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMirrorCtrlIngressMirroring.setStatus('current')
sysMirrorCtrlEgressMirroring = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 18, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMirrorCtrlEgressMirroring.setStatus('current')
sysSNTPServerTable = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 20, 17))
sysSNTPTimeSeconds = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 20, 17, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPTimeSeconds.setStatus('current')
sysSNTPFirstServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 20, 17, 2), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPFirstServer.setStatus('current')
sysSNTPFirstType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 20, 17, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPFirstType.setStatus('current')
sysSNTPFirstInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 20, 17, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPFirstInterfaceName.setStatus('current')
sysSNTPSecondServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 20, 17, 5), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPSecondServer.setStatus('current')
sysSNTPSecondType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 20, 17, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPSecondType.setStatus('current')
sysSNTPSecondInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 20, 17, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPSecondInterfaceName.setStatus('current')
sysSNTPPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 20, 17, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPPollInterval.setStatus('current')
sysSNTPState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 20, 17, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sntp", 1), ("local", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPState.setStatus('current')
sysSNTPDSTOffset = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 20, 17, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(30, 60, 90, 120))).clone(namedValues=NamedValues(("offset30min", 30), ("offset60min", 60), ("offset90min", 90), ("offset120min", 120)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTOffset.setStatus('current')
sysSNTPGMTMinutes = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 20, 17, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPGMTMinutes.setStatus('current')
sysSNTPDSTStartMon = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 20, 17, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTStartMon.setStatus('current')
sysSNTPDSTStartDay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 20, 17, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTStartDay.setStatus('current')
sysSNTPDSTStartHour = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 20, 17, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTStartHour.setStatus('current')
sysSNTPDSTStartMin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 20, 17, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTStartMin.setStatus('current')
sysSNTPDSTEndMon = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 20, 17, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTEndMon.setStatus('current')
sysSNTPDSTEndDay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 20, 17, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTEndDay.setStatus('current')
sysSNTPDSTEndHour = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 20, 17, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTEndHour.setStatus('current')
sysSNTPDSTEndMin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 20, 17, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTEndMin.setStatus('current')
sysSNTPDSTState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 20, 17, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("annual", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTState.setStatus('current')
voicevlanSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 21, 1))
voicevlanOUI = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 21, 2))
voicevlanDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 21, 3))
voiceVlanMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanMode.setStatus('current')
voiceVlanId = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 21, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanId.setStatus('current')
voiceVlanTimeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 21, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanTimeout.setStatus('current')
voiceVlanPriority = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 21, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanPriority.setStatus('current')
voicevlanPortControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 21, 1, 6), )
if mibBuilder.loadTexts: voicevlanPortControlTable.setStatus('current')
voicevlanPortControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 21, 1, 6, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "voicevlanPortControlIndex"))
if mibBuilder.loadTexts: voicevlanPortControlEntry.setStatus('current')
voicevlanPortControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 21, 1, 6, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanPortControlIndex.setStatus('current')
voicevlanPortAutoDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 21, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voicevlanPortAutoDetection.setStatus('current')
voicevlanPortManuTagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 21, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tag", 1), ("untag", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voicevlanPortManuTagMode.setStatus('current')
voicevlanPortCurrentTagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 21, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tag", 1), ("untag", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanPortCurrentTagMode.setStatus('current')
voicevlanPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 21, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("dynamic", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanPortState.setStatus('current')
voicevlanOUITable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 21, 2, 1), )
if mibBuilder.loadTexts: voicevlanOUITable.setStatus('current')
voicevlanOUIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 21, 2, 1, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "voicevlanOUITelephonyOUI"))
if mibBuilder.loadTexts: voicevlanOUIEntry.setStatus('current')
voicevlanOUITelephonyOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 21, 2, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanOUITelephonyOUI.setStatus('current')
voicevlanOUIDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 21, 2, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voicevlanOUIDescription.setStatus('current')
voicevlanOUIMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 21, 2, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanOUIMask.setStatus('current')
voicevlanOUIStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 21, 2, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voicevlanOUIStatus.setStatus('current')
voicevlanDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 21, 3, 1), )
if mibBuilder.loadTexts: voicevlanDeviceTable.setStatus('current')
voicevlanDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 21, 3, 1, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "voicevlanDeviceIndexMac"))
if mibBuilder.loadTexts: voicevlanDeviceEntry.setStatus('current')
voicevlanDeviceIndexMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 21, 3, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanDeviceIndexMac.setStatus('current')
voicevlanDevicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 21, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanDevicePort.setStatus('current')
voicevlanDevicePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 21, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanDevicePriority.setStatus('current')
voicevlanDeviceTagType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 21, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tag", 1), ("untag", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicevlanDeviceTagType.setStatus('current')
voicevlanDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 21, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6))).clone(namedValues=NamedValues(("active", 1), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voicevlanDeviceStatus.setStatus('current')
autoSurveillanceVlanSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 26, 1))
autoSurveillanceVlanOUI = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 26, 2))
autoSurveillanceVlanMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 26, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanMode.setStatus('current')
autoSurveillanceVlanId = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 26, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanId.setStatus('current')
autoSurveillanceVlanPriority = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 26, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanPriority.setStatus('current')
autoSurveillanceVlanTaggedUplinkDownlinkPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 26, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanTaggedUplinkDownlinkPort.setStatus('current')
autoSurveillanceVlanOUITable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 26, 2, 1), )
if mibBuilder.loadTexts: autoSurveillanceVlanOUITable.setStatus('current')
autoSurveillanceVlanOUIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 26, 2, 1, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "autoSurveillanceVlanOUISurveillanceOUI"))
if mibBuilder.loadTexts: autoSurveillanceVlanOUIEntry.setStatus('current')
autoSurveillanceVlanOUISurveillanceOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 26, 2, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoSurveillanceVlanOUISurveillanceOUI.setStatus('current')
autoSurveillanceVlanOUIDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 26, 2, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanOUIDescription.setStatus('current')
autoSurveillanceVlanOUIMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 26, 2, 1, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanOUIMask.setStatus('current')
autoSurveillanceVlanOUIComponentType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 26, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("video_Management_Server", 0), ("vMS_Client", 1), ("video_Encoder", 2), ("network_Storage", 3), ("other_IP_Surveillance_Devices", 4), ("d-Link_Surveillance_Device", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanOUIComponentType.setStatus('current')
autoSurveillanceVlanOUIStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 26, 2, 1, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoSurveillanceVlanOUIStatus.setStatus('current')
sysPoEPortSettingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 22, 1), )
if mibBuilder.loadTexts: sysPoEPortSettingTable.setStatus('current')
sysPoEPortSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 22, 1, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "poeportgroup"), (0, "DGS-1210-10P_CX", "poeportid"))
if mibBuilder.loadTexts: sysPoEPortSettingEntry.setStatus('current')
poeportgroup = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 22, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poeportgroup.setStatus('current')
poeportid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 22, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poeportid.setStatus('current')
poePortSettingState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 22, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortSettingState.setStatus('current')
poePortTimeBaseSchduleID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 22, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortTimeBaseSchduleID.setStatus('current')
poePortSettingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 22, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low", 1), ("normal", 2), ("high", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortSettingPriority.setStatus('current')
poePortSettingPowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 22, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("auto", 1), ("class1", 2), ("class2", 3), ("class3", 4), ("class4", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortSettingPowerLimit.setStatus('current')
poePortSettingUserDefineState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 22, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortSettingUserDefineState.setStatus('current')
poePortSettingUserDefine = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 22, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortSettingUserDefine.setStatus('current')
poePortPower = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 22, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortPower.setStatus('current')
poePortVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 22, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortVoltage.setStatus('current')
poePortCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 22, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortCurrent.setStatus('current')
poePortClassification = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 22, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortClassification.setStatus('current')
poePortDelayPowerDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 22, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortDelayPowerDetect.setStatus('current')
poePortLegacyPDDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 22, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poePortLegacyPDDetect.setStatus('current')
poePortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 22, 1, 1, 99), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poePortStatus.setStatus('current')
poeSystemSettingPowerThreshold = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 22, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeSystemSettingPowerThreshold.setStatus('current')
poeSystemSettingDisconnectMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 22, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("denyNextPort", 1), ("denyLowPriorityPort", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: poeSystemSettingDisconnectMethod.setStatus('current')
pethPsePortPowerBudget = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 22, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pethPsePortPowerBudget.setStatus('current')
pethPsePortPowerConsumption = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 22, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pethPsePortPowerConsumption.setStatus('current')
pethPsePortPowerRemainder = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 22, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pethPsePortPowerRemainder.setStatus('current')
pethPsePortPowerRatioOfSystemPower = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 22, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pethPsePortPowerRatioOfSystemPower.setStatus('current')
poeLedMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 22, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poeLedMode.setStatus('current')
swTimeRangeSettingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 32, 1), )
if mibBuilder.loadTexts: swTimeRangeSettingTable.setStatus('current')
swTimeRangeSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 32, 1, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "swTimeRangeIndex"))
if mibBuilder.loadTexts: swTimeRangeSettingEntry.setStatus('current')
swTimeRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 32, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTimeRangeIndex.setStatus('current')
swTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 32, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeName.setStatus('current')
swTimeRangeDate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 32, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeDate.setStatus('current')
swTimeRangeStartYear = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 32, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037))).clone(namedValues=NamedValues(("y2009", 2009), ("y2010", 2010), ("y2011", 2011), ("y2012", 2012), ("y2013", 2013), ("y2014", 2014), ("y2015", 2015), ("y2016", 2016), ("y2017", 2017), ("y2018", 2018), ("y2019", 2019), ("y2020", 2020), ("y2021", 2021), ("y2022", 2022), ("y2023", 2023), ("y2024", 2024), ("y2025", 2025), ("y2026", 2026), ("y2027", 2027), ("y2028", 2028), ("y2029", 2029), ("y2030", 2030), ("y2031", 2031), ("y2032", 2032), ("y2033", 2033), ("y2034", 2034), ("y2035", 2035), ("y2036", 2036), ("y2037", 2037)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeStartYear.setStatus('current')
swTimeRangeStartMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 32, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("january", 1), ("february", 2), ("march", 3), ("april", 4), ("may", 5), ("june", 6), ("july", 7), ("august", 8), ("september", 9), ("october", 10), ("november", 11), ("december", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeStartMonth.setStatus('current')
swTimeRangeStartDay = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 32, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeStartDay.setStatus('current')
swTimeRangeStartHour = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 32, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeStartHour.setStatus('current')
swTimeRangeStartMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 32, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeStartMinute.setStatus('current')
swTimeRangeEndYear = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 32, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037))).clone(namedValues=NamedValues(("y2009", 2009), ("y2010", 2010), ("y2011", 2011), ("y2012", 2012), ("y2013", 2013), ("y2014", 2014), ("y2015", 2015), ("y2016", 2016), ("y2017", 2017), ("y2018", 2018), ("y2019", 2019), ("y2020", 2020), ("y2021", 2021), ("y2022", 2022), ("y2023", 2023), ("y2024", 2024), ("y2025", 2025), ("y2026", 2026), ("y2027", 2027), ("y2028", 2028), ("y2029", 2029), ("y2030", 2030), ("y2031", 2031), ("y2032", 2032), ("y2033", 2033), ("y2034", 2034), ("y2035", 2035), ("y2036", 2036), ("y2037", 2037)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeEndYear.setStatus('current')
swTimeRangeEndMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 32, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("january", 1), ("february", 2), ("march", 3), ("april", 4), ("may", 5), ("june", 6), ("july", 7), ("august", 8), ("september", 9), ("october", 10), ("november", 11), ("december", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeEndMonth.setStatus('current')
swTimeRangeEndDay = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 32, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeEndDay.setStatus('current')
swTimeRangeEndHour = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 32, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeEndHour.setStatus('current')
swTimeRangeEndMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 32, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeEndMinute.setStatus('current')
swTimeRangeMonday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 32, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeMonday.setStatus('current')
swTimeRangeTuesday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 32, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeTuesday.setStatus('current')
swTimeRangeWednesday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 32, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeWednesday.setStatus('current')
swTimeRangeThursday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 32, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeThursday.setStatus('current')
swTimeRangeFriday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 32, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeFriday.setStatus('current')
swTimeRangeSaturday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 32, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeSaturday.setStatus('current')
swTimeRangeSunday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 32, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeSunday.setStatus('current')
swTimeRangeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 32, 1, 1, 21), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swTimeRangeRowStatus.setStatus('current')
dlinklldpState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 24, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpState.setStatus('current')
dlinklldpMsgHoldMultiplier = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 24, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpMsgHoldMultiplier.setStatus('current')
dlinklldpMsgTxInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 24, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 32768))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpMsgTxInterval.setStatus('current')
dlinklldpReinitDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 24, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpReinitDelay.setStatus('current')
dlinklldpTxDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 24, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpTxDelay.setStatus('current')
dlinklldpConfigManAddrTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 24, 7), )
if mibBuilder.loadTexts: dlinklldpConfigManAddrTable.setStatus('current')
dlinklldpConfigManAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 24, 7, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "dlinklldpLocManAddrSubtype"), (0, "DGS-1210-10P_CX", "dlinklldpLocManAddr"))
if mibBuilder.loadTexts: dlinklldpConfigManAddrEntry.setStatus('current')
dlinklldpLocManAddrSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 24, 7, 1, 1), AddressFamilyNumbers()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlinklldpLocManAddrSubtype.setStatus('current')
dlinklldpLocManAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 24, 7, 1, 2), LldpManAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlinklldpLocManAddr.setStatus('current')
dlinklldpConfigManAddrPortsTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 24, 7, 1, 3), PortList().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpConfigManAddrPortsTxEnable.setStatus('current')
lldpMEDPortControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 24, 8), )
if mibBuilder.loadTexts: lldpMEDPortControlTable.setStatus('current')
lldpMEDPortControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 24, 8, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "lldpMEDPortControlIndex"))
if mibBuilder.loadTexts: lldpMEDPortControlEntry.setStatus('current')
lldpMEDPortControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 24, 8, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMEDPortControlIndex.setStatus('current')
lldpMEDPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 24, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpMEDPortState.setStatus('current')
dlinklldpAntiRoguePortControl = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 24, 9), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpAntiRoguePortControl.setStatus('current')
dlinklldpRemOrgDefInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 24, 10), )
if mibBuilder.loadTexts: dlinklldpRemOrgDefInfoTable.setStatus('current')
dlinklldpRemOrgDefInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 24, 10, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "dlinklldpAntiRoguePortIndex"))
if mibBuilder.loadTexts: dlinklldpRemOrgDefInfoEntry.setStatus('current')
dlinklldpAntiRoguePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 24, 10, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlinklldpAntiRoguePortIndex.setStatus('current')
dlinklldpAntiRoguePortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 24, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("authenticationDisabled", 0), ("authenticationEnabled", 1), ("authenticationSuccessful", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlinklldpAntiRoguePortStatus.setStatus('current')
dlinklldpRemOrgDefInfoOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 24, 10, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlinklldpRemOrgDefInfoOUI.setStatus('current')
dlinklldpAntiRoguePassword = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 24, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpAntiRoguePassword.setStatus('current')
dlinkGreenLEDShutoff = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 31, 1))
dlinkGreenPortShutoff = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 31, 2))
dlinkGreenSystemHibernation = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 31, 4))
dlinkGreenLEDShutoffPortList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 31, 1, 1), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenLEDShutoffPortList.setStatus('current')
dlinkGreenLEDShutoffState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 31, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenLEDShutoffState.setStatus('current')
dlinkGreenLEDShutoffTimeProfile1 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 31, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenLEDShutoffTimeProfile1.setStatus('current')
dlinkGreenLEDShutoffTimeProfile2 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 31, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenLEDShutoffTimeProfile2.setStatus('current')
dlinkGreenPortShutoffPortList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 31, 2, 1), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenPortShutoffPortList.setStatus('current')
dlinkGreenPortShutoffState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 31, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenPortShutoffState.setStatus('current')
dlinkGreenPortShutoffTimeProfile1 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 31, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenPortShutoffTimeProfile1.setStatus('current')
dlinkGreenPortShutoffTimeProfile2 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 31, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenPortShutoffTimeProfile2.setStatus('current')
dlinkGreenSystemHibernationState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 31, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenSystemHibernationState.setStatus('current')
dlinkGreenSystemHibernationTimeProfile1 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 31, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenSystemHibernationTimeProfile1.setStatus('current')
dlinkGreenSystemHibernationTimeProfile2 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 31, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenSystemHibernationTimeProfile2.setStatus('current')
dlinkPowerSavingGlobalSetting = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 31, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkPowerSavingGlobalSetting.setStatus('current')
securityDhcpServerScreen = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 7))
dhcpServerScreenEnablePortlist = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 7, 1), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerScreenEnablePortlist.setStatus('current')
dhcpServerScreenTrustedServerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 7, 3), )
if mibBuilder.loadTexts: dhcpServerScreenTrustedServerTable.setStatus('current')
dhcpServerScreenTrustedServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 7, 3, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "dhcpServerScreenTrustedServerIndex"))
if mibBuilder.loadTexts: dhcpServerScreenTrustedServerEntry.setStatus('current')
dhcpServerScreenTrustedServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServerScreenTrustedServerIndex.setStatus('current')
dhcpServerScreenTrustedServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 7, 3, 1, 2), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerScreenTrustedServerAddress.setStatus('current')
dhcpServerScreenIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 7, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerScreenIPType.setStatus('current')
dhcpServerScreenTrustedServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 7, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpServerScreenTrustedServerStatus.setStatus('current')
securityTrafficSeg = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 9))
trafficSegStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficSegStatus.setStatus('current')
trafficSegTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 9, 2), )
if mibBuilder.loadTexts: trafficSegTable.setStatus('current')
trafficSegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 9, 2, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "trafficSegIfIndex"))
if mibBuilder.loadTexts: trafficSegEntry.setStatus('current')
trafficSegIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 9, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficSegIfIndex.setStatus('current')
trafficSegMemberList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 14, 9, 2, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficSegMemberList.setStatus('current')
doSCtrlState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 99, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doSCtrlState.setStatus('current')
doSCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 99, 2), )
if mibBuilder.loadTexts: doSCtrlTable.setStatus('current')
doSCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 99, 2, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "doSCtrlType"))
if mibBuilder.loadTexts: doSCtrlEntry.setStatus('current')
doSCtrlType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 99, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6, 7))).clone(namedValues=NamedValues(("landattack", 1), ("blatattack", 2), ("tcpnullscan", 4), ("tcpxmascan", 5), ("tcpsynfin", 6), ("tcpsynsrcportless1024", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: doSCtrlType.setStatus('current')
doSCtrlDisplayState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 99, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: doSCtrlDisplayState.setStatus('current')
rmonGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 47, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonGlobalState.setStatus('current')
rmonStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 47, 2))
rmonHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 47, 3))
rmonAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 47, 4))
rmonEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 47, 5))
rmonStatsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 47, 2, 1), )
if mibBuilder.loadTexts: rmonStatsTable.setStatus('current')
rmonStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 47, 2, 1, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "rmonStatsIndex"))
if mibBuilder.loadTexts: rmonStatsEntry.setStatus('current')
rmonStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 47, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonStatsIndex.setStatus('current')
rmonStatsDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 47, 2, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonStatsDataSource.setStatus('current')
rmonStatsOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 47, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonStatsOwner.setStatus('current')
rmonStatsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 47, 2, 1, 1, 4), RmonStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonStatsStatus.setStatus('current')
rmonHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 47, 3, 1), )
if mibBuilder.loadTexts: rmonHistoryTable.setStatus('current')
rmonHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 47, 3, 1, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "rmonHistoryIndex"))
if mibBuilder.loadTexts: rmonHistoryEntry.setStatus('current')
rmonHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 47, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonHistoryIndex.setStatus('current')
rmonHistoryDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 47, 3, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryDataSource.setStatus('current')
rmonHistoryBucketsRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 47, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryBucketsRequested.setStatus('current')
rmonHistoryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 47, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(1800)).setUnits('Seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryInterval.setStatus('current')
rmonHistoryOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 47, 3, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryOwner.setStatus('current')
rmonHistoryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 47, 3, 1, 1, 6), RmonStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryStatus.setStatus('current')
rmonAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 47, 4, 1), )
if mibBuilder.loadTexts: rmonAlarmTable.setStatus('current')
rmonAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 47, 4, 1, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "rmonAlarmIndex"))
if mibBuilder.loadTexts: rmonAlarmEntry.setStatus('current')
rmonAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 47, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonAlarmIndex.setStatus('current')
rmonAlarmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 47, 4, 1, 1, 2), Integer32()).setUnits('Seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmInterval.setStatus('current')
rmonAlarmVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 47, 4, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmVariable.setStatus('current')
rmonAlarmSampleType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 47, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absoluteValue", 1), ("deltaValue", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmSampleType.setStatus('current')
rmonAlarmRisingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 47, 4, 1, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmRisingThreshold.setStatus('current')
rmonAlarmFallingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 47, 4, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmFallingThreshold.setStatus('current')
rmonAlarmRisingEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 47, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmRisingEventIndex.setStatus('current')
rmonAlarmFallingEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 47, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmFallingEventIndex.setStatus('current')
rmonAlarmOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 47, 4, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmOwner.setStatus('current')
rmonAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 47, 4, 1, 1, 10), RmonStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmStatus.setStatus('current')
rmonEventTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 47, 5, 1), )
if mibBuilder.loadTexts: rmonEventTable.setStatus('current')
rmonEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 47, 5, 1, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "rmonEventIndex"))
if mibBuilder.loadTexts: rmonEventEntry.setStatus('current')
rmonEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 47, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonEventIndex.setStatus('current')
rmonEventDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 47, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventDescription.setStatus('current')
rmonEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 47, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("log", 2), ("snmptrap", 3), ("logandtrap", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventType.setStatus('current')
rmonEventCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 47, 5, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventCommunity.setStatus('current')
rmonEventOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 47, 5, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventOwner.setStatus('current')
rmonEventStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 47, 5, 1, 1, 6), RmonStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventStatus.setStatus('current')
neighborTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 50, 1), )
if mibBuilder.loadTexts: neighborTable.setStatus('current')
neighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 50, 1, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "neighborIfindex"), (0, "DGS-1210-10P_CX", "neighborIPv6Addr"), (0, "DGS-1210-10P_CX", "neighborMACAddr"))
if mibBuilder.loadTexts: neighborEntry.setStatus('current')
neighborIfindex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 50, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborIfindex.setStatus('current')
neighborIPv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 50, 1, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborIPv6Addr.setStatus('current')
neighborMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 50, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborMACAddr.setStatus('current')
neighborType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 50, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborType.setStatus('current')
neighborCacheState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 50, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("static", 1), ("reachable", 2), ("incomplete", 3), ("stale", 4), ("delay", 5), ("probe", 6), ("notinservice", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborCacheState.setStatus('current')
neighborRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 50, 1, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neighborRowStatus.setStatus('current')
dhcpRelayControl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 61, 1))
dhcpRelayManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 61, 2))
dhcpRelayManagementOption82 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 61, 2, 2))
dhcpRelayState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 61, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayState.setStatus('current')
dhcpRelayHopCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 61, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayHopCount.setStatus('current')
dhcpRelayTimeThreshold = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 61, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayTimeThreshold.setStatus('current')
dhcpRelayInterfaceSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 61, 2, 1), )
if mibBuilder.loadTexts: dhcpRelayInterfaceSettingsTable.setStatus('current')
dhcpRelayInterfaceSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 61, 2, 1, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "dhcpRelayInterface"), (0, "DGS-1210-10P_CX", "dhcpRelayServerIP"))
if mibBuilder.loadTexts: dhcpRelayInterfaceSettingsEntry.setStatus('current')
dhcpRelayInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 61, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRelayInterface.setStatus('current')
dhcpRelayServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 61, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRelayServerIP.setStatus('current')
dhcpRelayInterfaceSettingsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 61, 2, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRelayInterfaceSettingsRowStatus.setStatus('current')
dhcpRelayOption82State = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 61, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRelayOption82State.setStatus('current')
dhcpRelayOption82CheckState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 61, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayOption82CheckState.setStatus('current')
dhcpRelayOption82Policy = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 61, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("drop", 2), ("keep", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayOption82Policy.setStatus('current')
dhcpRelayOption82RemoteIDType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 61, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("userdefined", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayOption82RemoteIDType.setStatus('current')
dhcpRelayOption82RemoteID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 61, 2, 2, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayOption82RemoteID.setStatus('current')
dhcpLocalRelayGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 62, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpLocalRelayGlobalState.setStatus('current')
dhcpLocalRelayTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 62, 2), )
if mibBuilder.loadTexts: dhcpLocalRelayTable.setStatus('current')
dhcpLocalRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 62, 2, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "dhcpLocalRelaySettingsVLANID"))
if mibBuilder.loadTexts: dhcpLocalRelayEntry.setStatus('current')
dhcpLocalRelaySettingsVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 62, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpLocalRelaySettingsVLANID.setStatus('current')
dhcpLocalRelaySettingsState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 62, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpLocalRelaySettingsState.setStatus('current')
dhcpv6RelayControl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 63, 1))
dhcpv6RelayManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 63, 2))
dhcpv6RelayOption37 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 63, 3))
dhcpv6RelayState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 63, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayState.setStatus('current')
dhcpv6RelayHopCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 63, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayHopCount.setStatus('current')
dhcpv6RelayInterfaceSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 63, 2, 1), )
if mibBuilder.loadTexts: dhcpv6RelayInterfaceSettingsTable.setStatus('current')
dhcpv6RelayInterfaceSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 63, 2, 1, 1), ).setIndexNames((0, "DGS-1210-10P_CX", "dhcpv6RelayInterface"), (0, "DGS-1210-10P_CX", "dhcpv6RelayServerIP"))
if mibBuilder.loadTexts: dhcpv6RelayInterfaceSettingsEntry.setStatus('current')
dhcpv6RelayInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 63, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpv6RelayInterface.setStatus('current')
dhcpv6RelayServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 63, 2, 1, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpv6RelayServerIP.setStatus('current')
dhcpv6RelayInterfaceSettingsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 63, 2, 1, 1, 99), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpv6RelayInterfaceSettingsRowStatus.setStatus('current')
dhcpv6RelayOption37State = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 63, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayOption37State.setStatus('current')
dhcpv6RelayOption37CheckState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 63, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayOption37CheckState.setStatus('current')
dhcpv6RelayOption37RemoteIDType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 63, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("cid_with_user_define", 1), ("user_define", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayOption37RemoteIDType.setStatus('current')
dhcpv6RelayOption37RemoteID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 18, 1, 63, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayOption37RemoteID.setStatus('current')
mibBuilder.exportSymbols("DGS-1210-10P_CX", swAuthRadiusServerEntry=swAuthRadiusServerEntry, qosDiffServType45=qosDiffServType45, dlinklldpConfigManAddrPortsTxEnable=dlinklldpConfigManAddrPortsTxEnable, swAuthenCtrl=swAuthenCtrl, voicevlanDeviceEntry=voicevlanDeviceEntry, snmpV3HostStatus=snmpV3HostStatus, sysSNTPSecondServer=sysSNTPSecondServer, mldsVlanFilterTable=mldsVlanFilterTable, swAuthPortAccessCtrl=swAuthPortAccessCtrl, aclHWProfileIndex=aclHWProfileIndex, cableDiagPair2FaultDistance=cableDiagPair2FaultDistance, swTimeRangeTuesday=swTimeRangeTuesday, qosTOSType05=qosTOSType05, impbInsIpPacPortState=impbInsIpPacPortState, stpTimeSinceTopologyChange=stpTimeSinceTopologyChange, securityARPSpoofPrevent=securityARPSpoofPrevent, qosDiffServType22=qosDiffServType22, qosDiffServType46=qosDiffServType46, snmpV3HostVersion=snmpV3HostVersion, poePortSettingUserDefineState=poePortSettingUserDefineState, companyMiscGroup=companyMiscGroup, mldsVlanMulticastGroupPortList=mldsVlanMulticastGroupPortList, staticMcastVlanID=staticMcastVlanID, autoSurveillanceVlanId=autoSurveillanceVlanId, aclL3v4ExtRuleICMPMessageCode=aclL3v4ExtRuleICMPMessageCode, aclL3v6RuleDstIpv6Addr=aclL3v6RuleDstIpv6Addr, dot1qVlanRowStatus=dot1qVlanRowStatus, qosDiffServType48=qosDiffServType48, aclL3v4ExtRuleDstIpAddr=aclL3v4ExtRuleDstIpAddr, tftpCfgTargetGroup=tftpCfgTargetGroup, laPortControl=laPortControl, qosDiffServType63=qosDiffServType63, snmpV3UserEntry=snmpV3UserEntry, stpPortTable=stpPortTable, sysPoEPortSettingTable=sysPoEPortSettingTable, sysPortDescString=sysPortDescString, laPortChannelIfIndex=laPortChannelIfIndex, syslogGeneralGroup=syslogGeneralGroup, swAuthAuthQuietPeriod=swAuthAuthQuietPeriod, poePortCurrent=poePortCurrent, snmpV3UserPrivProtocolPassword=snmpV3UserPrivProtocolPassword, dlinklldpAntiRoguePassword=dlinklldpAntiRoguePassword, portD3State=portD3State, aclPortL2ProfileNo=aclPortL2ProfileNo, sysFirmwareVersion=sysFirmwareVersion, dot1pPortIndex=dot1pPortIndex, qosDiffServType27=qosDiffServType27, snmpV3viewTreeSubtree=snmpV3viewTreeSubtree, dhcpOption12Status=dhcpOption12Status, qosDiffServType55=qosDiffServType55, qosDiffServType29=qosDiffServType29, firmwareIllegalFile=firmwareIllegalFile, ipifv6DefaultGateway=ipifv6DefaultGateway, rmonAlarmInterval=rmonAlarmInterval, sysSNTPServerTable=sysSNTPServerTable, aclL3v4ExtRuleEntry=aclL3v4ExtRuleEntry, snmpV3TrapPoePowerOnOff=snmpV3TrapPoePowerOnOff, companyStaticMcast=companyStaticMcast, sysSNTPSecondType=sysSNTPSecondType, voicevlanOUIMask=voicevlanOUIMask, ipifSupportV4V6Info=ipifSupportV4V6Info, aclL2RuleDstMacAddrMask=aclL2RuleDstMacAddrMask, dlinkGreenSystemHibernationTimeProfile2=dlinkGreenSystemHibernationTimeProfile2, snmpV3GroupSecurityModel=snmpV3GroupSecurityModel, neighborIfindex=neighborIfindex, swTimeRangeWednesday=swTimeRangeWednesday, sysLBDVlanLoopEntry=sysLBDVlanLoopEntry, pethPsePortPowerRatioOfSystemPower=pethPsePortPowerRatioOfSystemPower, swLoopDetectEnabledVlanList=swLoopDetectEnabledVlanList, sshMaxSession=sshMaxSession, sysPortCtrlType=sysPortCtrlType, voicevlanOUIEntry=voicevlanOUIEntry, snmpV3HostAddress=snmpV3HostAddress, swTimeRangeRowStatus=swTimeRangeRowStatus, sysPortCtrlTable=sysPortCtrlTable, laSystem=laSystem, swAuthRadiusServerRetransmit=swAuthRadiusServerRetransmit, autoSurveillanceVlanTaggedUplinkDownlinkPort=autoSurveillanceVlanTaggedUplinkDownlinkPort, swAuthUserPassword=swAuthUserPassword, poeportgroup=poeportgroup, qosDiffServType20=qosDiffServType20, aclL2RuleEntry=aclL2RuleEntry, igsSystem=igsSystem, aclPortGroupEntry=aclPortGroupEntry, snmpV3TrapSNMPAuthentication=snmpV3TrapSNMPAuthentication, portD3Index=portD3Index, aclL2Rule=aclL2Rule, sysSNTPDSTEndMin=sysSNTPDSTEndMin, igsVlanRtrPortList=igsVlanRtrPortList, impbWhiteListRowStatus=impbWhiteListRowStatus, poePortLegacyPDDetect=poePortLegacyPDDetect, poeSystemSettingPowerThreshold=poeSystemSettingPowerThreshold, trafficSegTable=trafficSegTable, neighborIPv6Addr=neighborIPv6Addr, stpProtocolSpecification=stpProtocolSpecification, dgs_1210_10p=dgs_1210_10p, aclL3v4ExtRuleDstIpAddrMask=aclL3v4ExtRuleDstIpAddrMask, lldpMEDPortControlEntry=lldpMEDPortControlEntry, sshUserInfoID=sshUserInfoID, dhcpv6RelayControl=dhcpv6RelayControl, mldsVlanRouterVlanId=mldsVlanRouterVlanId, qosDiffServType33=qosDiffServType33, qosDiffServType52=qosDiffServType52, sysPortCtrlSpeed=sysPortCtrlSpeed, snmpV3ViewTreeTable=snmpV3ViewTreeTable, autoSurveillanceVlanOUISurveillanceOUI=autoSurveillanceVlanOUISurveillanceOUI, syslogInterfaceName=syslogInterfaceName, swTimeRangeSaturday=swTimeRangeSaturday, qosDiffServType21=qosDiffServType21, stpPortAdminPointToPoint=stpPortAdminPointToPoint, cableDiagPair2TestResult=cableDiagPair2TestResult, sysDhcpAutoConfiguration=sysDhcpAutoConfiguration, impbSettingEntry=impbSettingEntry, igsVlanMulticastGroupPortList=igsVlanMulticastGroupPortList, swAuthRadiusServerTimeout=swAuthRadiusServerTimeout, snmpV3GroupNotifyViewName=snmpV3GroupNotifyViewName, dlinkGreenPortShutoffTimeProfile1=dlinkGreenPortShutoffTimeProfile1, sysLBDVlanLoopIndex=sysLBDVlanLoopIndex, rmonGlobalState=rmonGlobalState, qosDiffServType04=qosDiffServType04, dhcpRelayHopCount=dhcpRelayHopCount, sysDdpGlobalOnOff=sysDdpGlobalOnOff, qosTOSType04=qosTOSType04, dot3azEEEset=dot3azEEEset, stpPortDesignatedRoot=stpPortDesignatedRoot, broadcastStormCtrlThreshold=broadcastStormCtrlThreshold, impbPortIndex=impbPortIndex, swAuthUserTable=swAuthUserTable, companyLA=companyLA, sysSNTPSecondInterfaceName=sysSNTPSecondInterfaceName, dlinklldpConfigManAddrTable=dlinklldpConfigManAddrTable, snmpV3Host=snmpV3Host, sshUserInfoHostIp=sshUserInfoHostIp, tftpCfgTargetImageFileName=tftpCfgTargetImageFileName, swAuthAuthServerTimeout=swAuthAuthServerTimeout, topologyChange=topologyChange, aclL3v4ExtRuleProfileNo=aclL3v4ExtRuleProfileNo, cableDiagPair4TestResult=cableDiagPair4TestResult, companyMirror=companyMirror, qosDiffServType32=qosDiffServType32, aclProfileStatus=aclProfileStatus, stpPortState=stpPortState, autoSurveillanceVlanOUIComponentType=autoSurveillanceVlanOUIComponentType, dlinkGreenLEDShutoffPortList=dlinkGreenLEDShutoffPortList, igsQueryInterval=igsQueryInterval, impbWhiteListPort=impbWhiteListPort, qosDiffServType61=qosDiffServType61, aclL2RulePriority=aclL2RulePriority, sysJumboFrameEnable=sysJumboFrameEnable, aclL3v4ExtRuleTcpUdpDstPortMask=aclL3v4ExtRuleTcpUdpDstPortMask, swTimeRangeEndYear=swTimeRangeEndYear, qosDiffServType42=qosDiffServType42, stpBridgeHelloTime=stpBridgeHelloTime, sslCipherSuiteList=sslCipherSuiteList, aclL3v4RuleSrcIpAddr=aclL3v4RuleSrcIpAddr, qosDiffServType18=qosDiffServType18, doSCtrlState=doSCtrlState, sshUserInfoEntry=sshUserInfoEntry, aclPortIndex=aclPortIndex, companySecurity=companySecurity, aclL2ProfileID=aclL2ProfileID, snmpV3UserAuthProtocolPassword=snmpV3UserAuthProtocolPassword, autoSurveillanceVlanMode=autoSurveillanceVlanMode, rmonAlarmStatus=rmonAlarmStatus, tftpCfgTargetTftpOperationStatus=tftpCfgTargetTftpOperationStatus, qosDiffServType26=qosDiffServType26, aclL3v6RuleDstIpv6AddrPrefixLen=aclL3v6RuleDstIpv6AddrPrefixLen, igsGrpQueryInterval=igsGrpQueryInterval, igsVlanRouterVlanId=igsVlanRouterVlanId, companyTraps=companyTraps, sysPortCtrlFlowControlOper=sysPortCtrlFlowControlOper, dot1qVlanUntaggedPorts=dot1qVlanUntaggedPorts, qosDiffServType60=qosDiffServType60, qosDiffServType54=qosDiffServType54, qosTOSEnable=qosTOSEnable, snmpV3UserName=snmpV3UserName, swAuthRadiusServer=swAuthRadiusServer, igsVlanRouterTable=igsVlanRouterTable, sysPortCtrlOperStatus=sysPortCtrlOperStatus, ipifV6AddressRowStatus=ipifV6AddressRowStatus, impbSmartIpAddress=impbSmartIpAddress, qosDiffServType13=qosDiffServType13, qosDiffServType49=qosDiffServType49, sshUserInfoHostName=sshUserInfoHostName, dlinkGreenSystemHibernationTimeProfile1=dlinkGreenSystemHibernationTimeProfile1, sshMacSuiteList=sshMacSuiteList, voicevlanPortControlTable=voicevlanPortControlTable, stpTopChanges=stpTopChanges, securityTrustedHost=securityTrustedHost, bandwidthCtrlRxThreshold=bandwidthCtrlRxThreshold, bandwidthCtrlTable=bandwidthCtrlTable, swTimeRangeSettingTable=swTimeRangeSettingTable, staticMcastEgressPorts=staticMcastEgressPorts, dhcpRelayState=dhcpRelayState, dot1qVlanName=dot1qVlanName, snmpV3TrapRSTPStateChange=snmpV3TrapRSTPStateChange, impbPortState=impbPortState, igsVlanMulticastGroupEntry=igsVlanMulticastGroupEntry, sysLBDCtrlIndex=sysLBDCtrlIndex, poePortClassification=poePortClassification, swAuthUserEntry=swAuthUserEntry, dot1qVlanEntry=dot1qVlanEntry, sshAuthenMethodPubKeyAdmin=sshAuthenMethodPubKeyAdmin, pethPsePortPowerBudget=pethPsePortPowerBudget, ipifv6DHCPStatus=ipifv6DHCPStatus, voicevlanPortControlIndex=voicevlanPortControlIndex, lldpMEDPortControlIndex=lldpMEDPortControlIndex, voiceVlanPriority=voiceVlanPriority, dot1qVlanUngisterMCFilterTable=dot1qVlanUngisterMCFilterTable, dhcpv6RelayOption37CheckState=dhcpv6RelayOption37CheckState, igsVlanFilterEntry=igsVlanFilterEntry, sysMirrorTargetPort=sysMirrorTargetPort, rmonEventStatus=rmonEventStatus, neighborCacheState=neighborCacheState, dlinklldpRemOrgDefInfoOUI=dlinklldpRemOrgDefInfoOUI, tftpFwTargetTftpOperationStatus=tftpFwTargetTftpOperationStatus, staticVlanID=staticVlanID, aclL3v4ExtRuleToS=aclL3v4ExtRuleToS, companydot3azEEE=companydot3azEEE, miscStatisticsReset=miscStatisticsReset, swAuthRadiusServerIndex=swAuthRadiusServerIndex, dot1pPortEntry=dot1pPortEntry, qosDiffServType01=qosDiffServType01, aclL3v4ExtRuleProtocol=aclL3v4ExtRuleProtocol, companyMldsGroup=companyMldsGroup, sysDdpGeneralReportTimer=sysDdpGeneralReportTimer, sysDdpProtStatusTable=sysDdpProtStatusTable, dhcpRelayOption82CheckState=dhcpRelayOption82CheckState, mldsVlanRtrPortList=mldsVlanRtrPortList, qosDiffServType25=qosDiffServType25, stpRootPort=stpRootPort, laPortChannelMemberList=laPortChannelMemberList, snmpV3EngineID=snmpV3EngineID, dhcpServerScreenTrustedServerIndex=dhcpServerScreenTrustedServerIndex, swAuthAuthMaxReq=swAuthAuthMaxReq, dot3azTable=dot3azTable, aclL3v6RuleEntry=aclL3v6RuleEntry, swAuthPortAccessControlTable=swAuthPortAccessControlTable, rmonStatistics=rmonStatistics, sysIpSubnetMask=sysIpSubnetMask, rmonAlarmTable=rmonAlarmTable, aclL3v6RuleSrcIpv6Addr=aclL3v6RuleSrcIpv6Addr, aclL3v6RuleSrcIpv6AddrPrefixLen=aclL3v6RuleSrcIpv6AddrPrefixLen, cableDiagPair3TestResult=cableDiagPair3TestResult, aclHWResourceStatusEntry=aclHWResourceStatusEntry, companyQoSGroup=companyQoSGroup, traps=traps, poePortTimeBaseSchduleID=poePortTimeBaseSchduleID, sysLBDPortLoopStatus=sysLBDPortLoopStatus, snmpV3CommunityTable=snmpV3CommunityTable, rmonAlarmSampleType=rmonAlarmSampleType, poePortVoltage=poePortVoltage, rmonStatsStatus=rmonStatsStatus, sysSNTPDSTEndDay=sysSNTPDSTEndDay)
mibBuilder.exportSymbols("DGS-1210-10P_CX", laStatus=laStatus, qosQ1p=qosQ1p, aclL3v4RuleAction=aclL3v4RuleAction, trafficSegEntry=trafficSegEntry, igsQueryMaxResponseTime=igsQueryMaxResponseTime, rmonHistoryIndex=rmonHistoryIndex, stpHoldTime=stpHoldTime, authProtocol=authProtocol, qosTOSType03=qosTOSType03, aclL2RuleSrcMacAddrMask=aclL2RuleSrcMacAddrMask, laPortControlIndex=laPortControlIndex, mldsVlanRouterEntry=mldsVlanRouterEntry, tftpCfgTargetInterfaceName=tftpCfgTargetInterfaceName, snmpV3UserPrivProtocol=snmpV3UserPrivProtocol, voicevlanSystem=voicevlanSystem, snmpV3TrapFirmUpgrade=snmpV3TrapFirmUpgrade, igsVlanCfgQuerier=igsVlanCfgQuerier, dhcpRelayManagement=dhcpRelayManagement, ipifv6AutolinkloStatus=ipifv6AutolinkloStatus, staticStatus=staticStatus, voicevlanDevice=voicevlanDevice, swAuthAuthReAuthentication=swAuthAuthReAuthentication, snmpV3TrapBootup=snmpV3TrapBootup, aclL2RuleTable=aclL2RuleTable, sysLBDCtrlEntry=sysLBDCtrlEntry, mldsQueryMaxResponseTime=mldsQueryMaxResponseTime, rmonEventOwner=rmonEventOwner, companyNeighbor=companyNeighbor, sysPortCtrlIndex=sysPortCtrlIndex, impbWhiteListMacAddress=impbWhiteListMacAddress, qosDiffServType15=qosDiffServType15, dlinkGreenPortShutoffState=dlinkGreenPortShutoffState, autoSurveillanceVlanOUIDescription=autoSurveillanceVlanOUIDescription, stpPortForwardTransitions=stpPortForwardTransitions, trustedHostStatus=trustedHostStatus, sshUserInfoHostIpv6=sshUserInfoHostIpv6, stpPortProtocolMigration=stpPortProtocolMigration, dhcpv6RelayInterfaceSettingsRowStatus=dhcpv6RelayInterfaceSettingsRowStatus, snmpV3IPType=snmpV3IPType, aclPortGroupTable=aclPortGroupTable, companyDoSCtrl=companyDoSCtrl, aclL3v6RuleProfileNo=aclL3v6RuleProfileNo, mldsHostPortPurgeInterval=mldsHostPortPurgeInterval, dlinkGreenLEDShutoffState=dlinkGreenLEDShutoffState, dhcpRelayManagementOption82=dhcpRelayManagementOption82, igsVlanRouterEntry=igsVlanRouterEntry, swAuthAuthTxPeriod=swAuthAuthTxPeriod, snmpV3UserGroupName=snmpV3UserGroupName, dhcpLocalRelayEntry=dhcpLocalRelayEntry, trustedHostTable=trustedHostTable, poePortDelayPowerDetect=poePortDelayPowerDetect, portSecIndex=portSecIndex, impbBlackListVlanId=impbBlackListVlanId, dhcpServerScreenTrustedServerEntry=dhcpServerScreenTrustedServerEntry, rmonEvent=rmonEvent, impbSmartEntry=impbSmartEntry, doSCtrlType=doSCtrlType, companySNMPV3=companySNMPV3, mldsRouterPortPurgeInterval=mldsRouterPortPurgeInterval, qosDiffServType51=qosDiffServType51, snmpV3viewTreeType=snmpV3viewTreeType, impbBlackListIpAddress=impbBlackListIpAddress, rmonAlarm=rmonAlarm, impbSmartVlanId=impbSmartVlanId, aclProfileEntry=aclProfileEntry, rmonStatsTable=rmonStatsTable, stpGlobal=stpGlobal, stpPortOperEdgePort=stpPortOperEdgePort, igsVlanMulticastGroupMacAddress=igsVlanMulticastGroupMacAddress, swAuthRadiusServerTable=swAuthRadiusServerTable, broadcastStormCtrlLimitType=broadcastStormCtrlLimitType, securityDhcpServerScreen=securityDhcpServerScreen, broadcastStormCtrlSettings=broadcastStormCtrlSettings, impbSmartTable=impbSmartTable, firmwareUpgradeSuccess=firmwareUpgradeSuccess, companyAuthGroup=companyAuthGroup, autoSurveillanceVlanOUI=autoSurveillanceVlanOUI, qosDiffServType10=qosDiffServType10, dlinklldpTxDelay=dlinklldpTxDelay, companyRMON=companyRMON, cableDiagPair1TestResult=cableDiagPair1TestResult, aclL3v4ExtRuleStatus=aclL3v4ExtRuleStatus, autoSurveillanceVlanOUIMask=autoSurveillanceVlanOUIMask, poeThermalShutdown=poeThermalShutdown, dlinklldpConfigManAddrEntry=dlinklldpConfigManAddrEntry, voicevlanPortCurrentTagMode=voicevlanPortCurrentTagMode, rmonEventType=rmonEventType, tftpFwTargetServerIpType=tftpFwTargetServerIpType, igsVlanQueryInterval=igsVlanQueryInterval, qosDiffServType31=qosDiffServType31, sysDdpProtStatusControl=sysDdpProtStatusControl, rmonAlarmEntry=rmonAlarmEntry, sysSafeGuardEnable=sysSafeGuardEnable, trustedHostIPType=trustedHostIPType, dhcpv6RelayState=dhcpv6RelayState, snmpV3viewTreeName=snmpV3viewTreeName, dlinkGreenLEDShutoff=dlinkGreenLEDShutoff, impbSettingTable=impbSettingTable, dlinkPowerSavingGlobalSetting=dlinkPowerSavingGlobalSetting, ipifV6AddressIpType=ipifV6AddressIpType, swAuthUser=swAuthUser, syslogSrvEntry=syslogSrvEntry, BridgeId=BridgeId, tftpFwTargetTftpOperation=tftpFwTargetTftpOperation, dot1qVlanEgressPorts=dot1qVlanEgressPorts, sysRestart=sysRestart, qosDiffServType19=qosDiffServType19, portSecTable=portSecTable, aclL2RuleVlanId=aclL2RuleVlanId, laPortChannelMode=laPortChannelMode, LldpManAddress=LldpManAddress, aclL3v4ExtRulePriority=aclL3v4ExtRulePriority, dot1qVlanUngisterMCFilterEntry=dot1qVlanUngisterMCFilterEntry, dhcpLocalRelayTable=dhcpLocalRelayTable, voicevlanDeviceStatus=voicevlanDeviceStatus, aclL3v6RulePriority=aclL3v6RulePriority, autoSurveillanceVlanOUIEntry=autoSurveillanceVlanOUIEntry, swTimeRangeFriday=swTimeRangeFriday, snmpV3UserAuthProtocol=snmpV3UserAuthProtocol, rmonAlarmVariable=rmonAlarmVariable, stpTxHoldCount=stpTxHoldCount, sysLocationName=sysLocationName, stpVersion=stpVersion, aclPortL3v6ProfileNo=aclPortL3v6ProfileNo, dhcpOption12HostName=dhcpOption12HostName, rmonEventCommunity=rmonEventCommunity, ipifV6AddressIpPrefix=ipifV6AddressIpPrefix, aclHWResourceStatus=aclHWResourceStatus, stpPortDesignatedCost=stpPortDesignatedCost, snmpV3TrapLBD=snmpV3TrapLBD, sysIpAddr=sysIpAddr, qosDiffServType23=qosDiffServType23, snmpV3CommunityEntry=snmpV3CommunityEntry, dhcpRelayServerIP=dhcpRelayServerIP, dhcpLocalRelayGlobalState=dhcpLocalRelayGlobalState, sysLBDPortStatus=sysLBDPortStatus, trustedHostIpMask=trustedHostIpMask, aclL3v4RuleReplacePriority=aclL3v4RuleReplacePriority, sysSNTPTimeSeconds=sysSNTPTimeSeconds, qosMode=qosMode, aclL3v4Rule=aclL3v4Rule, dot1qVlanTable=dot1qVlanTable, tftpCfgTargetServerIpAddress=tftpCfgTargetServerIpAddress, swTimeRangeName=swTimeRangeName, trafficSegStatus=trafficSegStatus, qosTOSType02=qosTOSType02, bandwidthCtrlEntry=bandwidthCtrlEntry, dhcpv6RelayOption37State=dhcpv6RelayOption37State, aclL3v4ExtRuleAccessID=aclL3v4ExtRuleAccessID, rmonAlarmIndex=rmonAlarmIndex, qosDiffServType50=qosDiffServType50, sysMirrorCtrlEgressMirroring=sysMirrorCtrlEgressMirroring, dlinklldpAntiRoguePortControl=dlinklldpAntiRoguePortControl, qosDiffServType41=qosDiffServType41, impbSmartBinding=impbSmartBinding, poeShortCircuit=poeShortCircuit, aclL3v4ExtRuleTcpUdpDstPort=aclL3v4ExtRuleTcpUdpDstPort, sshSecurityStatus=sshSecurityStatus, sysSNTPFirstInterfaceName=sysSNTPFirstInterfaceName, rmonHistoryDataSource=rmonHistoryDataSource, snmpV3viewTreeStatus=snmpV3viewTreeStatus, swTimeRangeEndMonth=swTimeRangeEndMonth, poeLedMode=poeLedMode, impbWhiteListIpAddress=impbWhiteListIpAddress, dlinklldpMsgTxInterval=dlinklldpMsgTxInterval, swAuthStatus=swAuthStatus, dlinkGreenSystemHibernation=dlinkGreenSystemHibernation, mldsVlanMulticastGroupVlanId=mldsVlanMulticastGroupVlanId, snmpV3UserVersion=snmpV3UserVersion, dot1qVlanManagementid=dot1qVlanManagementid, voicevlanOUI=voicevlanOUI, dlinkGreenSystemHibernationState=dlinkGreenSystemHibernationState, dlinklldpRemOrgDefInfoEntry=dlinklldpRemOrgDefInfoEntry, companyCableDiagnostic=companyCableDiagnostic, stpMaxAge=stpMaxAge, sshAuthenMethodPassWordAdmin=sshAuthenMethodPassWordAdmin, securityPortSecurity=securityPortSecurity, snmpV3TrapOverMaxPowerBudget=snmpV3TrapOverMaxPowerBudget, stpPortPathCost=stpPortPathCost, aRPSpoofPreventEntry=aRPSpoofPreventEntry, dot1pPortPriority=dot1pPortPriority, swTimeRangeEndDay=swTimeRangeEndDay, cableDiagPair3FaultDistance=cableDiagPair3FaultDistance, aclL3v6RuleICMPv6MessageCode=aclL3v6RuleICMPv6MessageCode, voicevlanDevicePriority=voicevlanDevicePriority, Ipv6Address=Ipv6Address, laPortActorTimeout=laPortActorTimeout, igsStatus=igsStatus, PortList=PortList, rmonHistoryOwner=rmonHistoryOwner, qosDiffServType16=qosDiffServType16, voicevlanOUITelephonyOUI=voicevlanOUITelephonyOUI, sshAuthenMethodHostKeyAdmin=sshAuthenMethodHostKeyAdmin, qosDiffServEnable=qosDiffServEnable, companySystem=companySystem, snmpV3HostEntry=snmpV3HostEntry, aclL3v6RuleTrafficClass=aclL3v6RuleTrafficClass, rmonStatsDataSource=rmonStatsDataSource, mldsRobustnessValue=mldsRobustnessValue, igsVlanSnoopStatus=igsVlanSnoopStatus, sslCiphers=sslCiphers, snmpV3TrapPortLinkUpDown=snmpV3TrapPortLinkUpDown, sysSNTPPollInterval=sysSNTPPollInterval, aclL3v4ExtRuleICMPMessageType=aclL3v4ExtRuleICMPMessageType, snmpV3viewTreeMask=snmpV3viewTreeMask, sysSNTPDSTStartDay=sysSNTPDSTStartDay, voiceVlanTimeout=voiceVlanTimeout, sysPortCtrlFlowControl=sysPortCtrlFlowControl, stpPortOperPointToPoint=stpPortOperPointToPoint, sysLBDInterval=sysLBDInterval, aclL3v4ExtRule=aclL3v4ExtRule, qosDiffServType14=qosDiffServType14, snmpV3GroupReadViewName=snmpV3GroupReadViewName, sysSNTPFirstType=sysSNTPFirstType, tftpCfgTargetTftpOperation=tftpCfgTargetTftpOperation, swAuthRadiusServerAuthenticationPort=swAuthRadiusServerAuthenticationPort, d_link=d_link, voicevlanPortAutoDetection=voicevlanPortAutoDetection, qosDiffServType30=qosDiffServType30, impbSmartPort=impbSmartPort, rmonHistory=rmonHistory, dlinklldpMsgHoldMultiplier=dlinklldpMsgHoldMultiplier, igsVlanRouterPortList=igsVlanRouterPortList, companyVoiceVlan=companyVoiceVlan, dlinklldpReinitDelay=dlinklldpReinitDelay, rmonHistoryInterval=rmonHistoryInterval, dhcpv6RelayHopCount=dhcpv6RelayHopCount, ipifV6AddressIpAddr=ipifV6AddressIpAddr, tftpCfgTargetServerIpType=tftpCfgTargetServerIpType, pethPsePortPowerRemainder=pethPsePortPowerRemainder, dhcpv6RelayInterfaceSettingsEntry=dhcpv6RelayInterfaceSettingsEntry, laPortActorActivity=laPortActorActivity, dlink_DGS12XXSeriesProd=dlink_DGS12XXSeriesProd, stpPortEdge=stpPortEdge, voicevlanPortControlEntry=voicevlanPortControlEntry, sysLBDRecoverTime=sysLBDRecoverTime, swTimeRangeStartMonth=swTimeRangeStartMonth, dhcpServerScreenIPType=dhcpServerScreenIPType, qosDiffServType28=qosDiffServType28, autoSurveillanceVlanOUITable=autoSurveillanceVlanOUITable, aclL3v6RuleReplacePriority=aclL3v6RuleReplacePriority, aclL2RuleReplacePriority=aclL2RuleReplacePriority, sshConnectionTimeout=sshConnectionTimeout, PortLaMode=PortLaMode, impbBlackListEntry=impbBlackListEntry, doSCtrlTable=doSCtrlTable, VlanIndex=VlanIndex, igsRobustnessValue=igsRobustnessValue, aclL3v4ExtRuleProtocolId=aclL3v4ExtRuleProtocolId, voicevlanDeviceTagType=voicevlanDeviceTagType, syslogSrvIPType=syslogSrvIPType, stpHelloTime=stpHelloTime, qosDiffServType03=qosDiffServType03, rmonAlarmRisingEventIndex=rmonAlarmRisingEventIndex)
mibBuilder.exportSymbols("DGS-1210-10P_CX", igsVlanFilterVlanId=igsVlanFilterVlanId, autoSurveillanceVlanPriority=autoSurveillanceVlanPriority, trafficSegMemberList=trafficSegMemberList, sysLBDVlanLoopTable=sysLBDVlanLoopTable, impbWhiteListTable=impbWhiteListTable, voicevlanPortState=voicevlanPortState, mldsVlanMulticastGroupTable=mldsVlanMulticastGroupTable, staticAutoLearningList=staticAutoLearningList, snmpGlobalState=snmpGlobalState, rmonHistoryBucketsRequested=rmonHistoryBucketsRequested, dot1pPortTable=dot1pPortTable, sysLoginTimeoutInterval=sysLoginTimeoutInterval, mldsVlanFilterVlanId=mldsVlanFilterVlanId, aclL3v6RuleTcpUdpSrcPort=aclL3v6RuleTcpUdpSrcPort, stpAdminPortPathCost=stpAdminPortPathCost, stpPortEntry=stpPortEntry, sysSNTPState=sysSNTPState, snmpV3User=snmpV3User, syslogSrvTable=syslogSrvTable, aclL2RuleEtherType=aclL2RuleEtherType, snmpV3HostCommunityName=snmpV3HostCommunityName, sysSave=sysSave, syslogState=syslogState, staticMcastEntry=staticMcastEntry, companySyslog=companySyslog, sysDdp=sysDdp, mldsVlanQuerier=mldsVlanQuerier, snmpV3Group=snmpV3Group, snmpV3CommunityPolicy=snmpV3CommunityPolicy, stpPortRestrictedTCN=stpPortRestrictedTCN, companyStaticMAC=companyStaticMAC, stpRootCost=stpRootCost, qosDiffServType09=qosDiffServType09, aclL3v6RuleTcpUdpDstPortMask=aclL3v6RuleTcpUdpDstPortMask, dot1qVlanUngisterMCFiltermode=dot1qVlanUngisterMCFiltermode, rmonHistoryEntry=rmonHistoryEntry, stpPortDesignatedPort=stpPortDesignatedPort, laPortControlTable=laPortControlTable, mldsStatus=mldsStatus, qosDiffServType56=qosDiffServType56, mldsVlanFilterEntry=mldsVlanFilterEntry, laPortChannelEntry=laPortChannelEntry, aclProfileName=aclProfileName, rmonAlarmRisingThreshold=rmonAlarmRisingThreshold, snmpV3HostTable=snmpV3HostTable, companyACLGroup=companyACLGroup, sshMaxAuthFailAttempts=sshMaxAuthFailAttempts, snmpV3GroupTable=snmpV3GroupTable, miscReset=miscReset, companyRSTP=companyRSTP, sysPoEPortSettingEntry=sysPoEPortSettingEntry, snmpV3GroupName=snmpV3GroupName, qosDiffServType24=qosDiffServType24, swAuthRadiusServerInterfaceName=swAuthRadiusServerInterfaceName, swTimeRangeStartDay=swTimeRangeStartDay, portSecMLA=portSecMLA, companyTrafficMgmt=companyTrafficMgmt, swAuthRadiusServerKey=swAuthRadiusServerKey, swAuthAuthSuppTimeout=swAuthAuthSuppTimeout, companyDot1qVlanGroup=companyDot1qVlanGroup, snmpV3UserTable=snmpV3UserTable, dlinklldpState=dlinklldpState, snmpV3GroupSecurityLevel=snmpV3GroupSecurityLevel, impbSmartMacAddress=impbSmartMacAddress, aclL3v6RuleAction=aclL3v6RuleAction, mldsVlanRouterPortList=mldsVlanRouterPortList, qosDiffServType11=qosDiffServType11, voicevlanDeviceTable=voicevlanDeviceTable, rmonStatsEntry=rmonStatsEntry, sshUserInfoUserName=sshUserInfoUserName, syslogSrvSeverity=syslogSrvSeverity, poeportid=poeportid, dot1qVlanUngisterMCFilterVlanId=dot1qVlanUngisterMCFilterVlanId, ipifName=ipifName, aclL3v6RuleAccessID=aclL3v6RuleAccessID, cableDiagTriggerIndex=cableDiagTriggerIndex, voicevlanPortManuTagMode=voicevlanPortManuTagMode, dhcpLocalRelaySettingsState=dhcpLocalRelaySettingsState, mldsVlanRouterTable=mldsVlanRouterTable, poePortSettingState=poePortSettingState, rmonAlarmFallingThreshold=rmonAlarmFallingThreshold, igsVlanMulticastGroupIpAddress=igsVlanMulticastGroupIpAddress, aclL2Rule1pPriority=aclL2Rule1pPriority, aclL3v4RulePriority=aclL3v4RulePriority, sysGateway=sysGateway, mldsVlanQueryInterval=mldsVlanQueryInterval, swTimeRangeThursday=swTimeRangeThursday, companyIpifGroup=companyIpifGroup, qosDiffServType47=qosDiffServType47, qosTOS=qosTOS, poePowerDenied=poePowerDenied, companyTftpGroup=companyTftpGroup, sysHardwareVersion=sysHardwareVersion, dot1qVlanPortTable=dot1qVlanPortTable, laPortControlEntry=laPortControlEntry, swTimeRangeMonday=swTimeRangeMonday, stpBridgeMaxAge=stpBridgeMaxAge, sysPortDescIndex=sysPortDescIndex, dhcpRelayOption82RemoteID=dhcpRelayOption82RemoteID, Timeout=Timeout, bandwidthCtrlIndex=bandwidthCtrlIndex, aclL3v4RuleSrcIpAddrMask=aclL3v4RuleSrcIpAddrMask, aclL3v6RuleTcpUdpSrcPortMask=aclL3v6RuleTcpUdpSrcPortMask, qosDiffServType59=qosDiffServType59, mldsSystem=mldsSystem, aclL3v4ExtRuleTable=aclL3v4ExtRuleTable, qosDiffServType17=qosDiffServType17, dhcpServerScreenTrustedServerTable=dhcpServerScreenTrustedServerTable, aRPSpoofPreventRowStatus=aRPSpoofPreventRowStatus, impbAutoScanIpAddressTo=impbAutoScanIpAddressTo, stpPriority=stpPriority, stpBridgeForwardDelay=stpBridgeForwardDelay, aclL3v6Rule=aclL3v6Rule, rmonStatsIndex=rmonStatsIndex, dhcpRelayOption82Policy=dhcpRelayOption82Policy, ipifv6NSRetransmitTime=ipifv6NSRetransmitTime, sshSessionKeyRekeying=sshSessionKeyRekeying, sysSNTPDSTEndHour=sysSNTPDSTEndHour, rmonAlarmFallingEventIndex=rmonAlarmFallingEventIndex, qosDiffServTypeGroup=qosDiffServTypeGroup, laPortChannelTable=laPortChannelTable, qosDiffServType07=qosDiffServType07, sysSNTPFirstServer=sysSNTPFirstServer, impbBlackListPort=impbBlackListPort, aclL3v4ExtRuleIgmpType=aclL3v4ExtRuleIgmpType, aclL2RuleDstMacAddr=aclL2RuleDstMacAddr, tftpFwTargetServerIpAddress=tftpFwTargetServerIpAddress, qosDiffServType58=qosDiffServType58, impbAutoScanIpAddressFrom=impbAutoScanIpAddressFrom, staticMcastStatus=staticMcastStatus, qosDiffServType53=qosDiffServType53, securityIpMacPortBinding=securityIpMacPortBinding, swTimeRangeEndMinute=swTimeRangeEndMinute, aclProfileRuleCount=aclProfileRuleCount, aclL3v4ExtRuleDscp=aclL3v4ExtRuleDscp, qosDiffServType62=qosDiffServType62, qosDiffServType05=qosDiffServType05, qosDiffServType12=qosDiffServType12, poePortPower=poePortPower, staticEntry=staticEntry, dlinklldpRemOrgDefInfoTable=dlinklldpRemOrgDefInfoTable, companyDHCPRelay=companyDHCPRelay, staticMcastTable=staticMcastTable, igsVlanFastLeave=igsVlanFastLeave, dot3azEntry=dot3azEntry, pethPsePortPowerConsumption=pethPsePortPowerConsumption, aRPSpoofPreventTable=aRPSpoofPreventTable, lldpMEDPortControlTable=lldpMEDPortControlTable, stpPortRestrictedRole=stpPortRestrictedRole, swAuthAuthDirection=swAuthAuthDirection, sysSNTPDSTEndMon=sysSNTPDSTEndMon, igsVlanMulticastGroupVlanId=igsVlanMulticastGroupVlanId, snmpV3CommunityName=snmpV3CommunityName, swAuthAuthCapability=swAuthAuthCapability, companyTimeRangeMgmt=companyTimeRangeMgmt, aclL3v4ExtRuleSrcIpAddr=aclL3v4ExtRuleSrcIpAddr, doSCtrlDisplayState=doSCtrlDisplayState, dot1qVlanPvid=dot1qVlanPvid, stpPort=stpPort, rmonHistoryStatus=rmonHistoryStatus, mldsVlan=mldsVlan, mldsVlanMulticastGroupEntry=mldsVlanMulticastGroupEntry, aclL3v6RuleTable=aclL3v6RuleTable, snmpV3CommunityStatus=snmpV3CommunityStatus, staticDisableAutoLearn=staticDisableAutoLearn, aclL3v6RuleICMPv6MessageType=aclL3v6RuleICMPv6MessageType, aclPortL3v4ProfileNo=aclPortL3v4ProfileNo, rmonEventIndex=rmonEventIndex, dhcpRelayInterfaceSettingsEntry=dhcpRelayInterfaceSettingsEntry, mldsVlanMulticastGroupMacAddress=mldsVlanMulticastGroupMacAddress, sshUserInfoAuth=sshUserInfoAuth, igsReportToAllPort=igsReportToAllPort, aclL3v6RuleProtocol=aclL3v6RuleProtocol, syslogSrvFacility=syslogSrvFacility, sysDdpProtStatusEntry=sysDdpProtStatusEntry, aclProfileType=aclProfileType, autoSurveillanceVlanOUIStatus=autoSurveillanceVlanOUIStatus, dlinklldpAntiRoguePortIndex=dlinklldpAntiRoguePortIndex, securitySSH=securitySSH, neighborRowStatus=neighborRowStatus, syslogSrvRowStatus=syslogSrvRowStatus, dhcpv6RelayOption37=dhcpv6RelayOption37, aclL3v6RuleProtocolId=aclL3v6RuleProtocolId, sysMirrorStatus=sysMirrorStatus, igsVlan=igsVlan, snmpV3ViewTreeEntry=snmpV3ViewTreeEntry, sysLBDStateEnable=sysLBDStateEnable, trafficSegIfIndex=trafficSegIfIndex, qosDiffServType06=qosDiffServType06, qosDiffServType40=qosDiffServType40, sysSystemPassword=sysSystemPassword, aclL3v4ExtRuleReplacePriority=aclL3v4ExtRuleReplacePriority, qosTOSType07=qosTOSType07, sysLBDCtrlTable=sysLBDCtrlTable, qosDiffServType02=qosDiffServType02, dhcpv6RelayOption37RemoteIDType=dhcpv6RelayOption37RemoteIDType, aclL3v4RuleDstIpAddrMask=aclL3v4RuleDstIpAddrMask, dhcpServerScreenTrustedServerAddress=dhcpServerScreenTrustedServerAddress, swAuthCtrlPktFwdMode=swAuthCtrlPktFwdMode, poeOverLoad=poeOverLoad, impbBlackListTable=impbBlackListTable, voiceVlanMode=voiceVlanMode, qosDiffServType43=qosDiffServType43, poePowerOff=poePowerOff, aclL3v4ExtRuleTcpUdpSrcPort=aclL3v4ExtRuleTcpUdpSrcPort, snmpV3UserStatus=snmpV3UserStatus, dlinkGreenPortShutoffTimeProfile2=dlinkGreenPortShutoffTimeProfile2, dhcpv6RelayOption37RemoteID=dhcpv6RelayOption37RemoteID, broadcastStormCtrlGlobalOnOff=broadcastStormCtrlGlobalOnOff, snmpV3HostInterfaceName=snmpV3HostInterfaceName, dot1qVlanAsyOnOff=dot1qVlanAsyOnOff, neighborTable=neighborTable, mldsVlanMulticastGroupIpAddress=mldsVlanMulticastGroupIpAddress, tftpFwTargetImageFileName=tftpFwTargetImageFileName, neighborMACAddr=neighborMACAddr, securitySSL=securitySSL, qosTOSGroup=qosTOSGroup, swTimeRangeIndex=swTimeRangeIndex, cableDiagPair1FaultDistance=cableDiagPair1FaultDistance, qosDiffServType35=qosDiffServType35, dhcpRelayControl=dhcpRelayControl, qosDiffServType08=qosDiffServType08, snmpV3GroupWriteViewName=snmpV3GroupWriteViewName, sysSNTPGMTMinutes=sysSNTPGMTMinutes, companyLBD=companyLBD, dlinkGreenLEDShutoffTimeProfile1=dlinkGreenLEDShutoffTimeProfile1, trustedHostRowStatus=trustedHostRowStatus, impbWhiteListEntry=impbWhiteListEntry, lldpMEDPortState=lldpMEDPortState, sysIpAddrCfgMode=sysIpAddrCfgMode, firmwareTransferError=firmwareTransferError, mldsVlanCfgQuerier=mldsVlanCfgQuerier, sshCipherSuiteList=sshCipherSuiteList, swAuthAuthConfigPortNumber=swAuthAuthConfigPortNumber, aRPSpoofPreventPortList=aRPSpoofPreventPortList, aclL3v4RuleAccessID=aclL3v4RuleAccessID, swTimeRangeStartMinute=swTimeRangeStartMinute, ipifv6GlobalStatus=ipifv6GlobalStatus, companyDHCPv6Relay=companyDHCPv6Relay, aclHWResourceStatusTable=aclHWResourceStatusTable, companyDHCPLocalRelay=companyDHCPLocalRelay, cableDiagPair4FaultDistance=cableDiagPair4FaultDistance, voicevlanOUIDescription=voicevlanOUIDescription, sslSecurityHttpStatus=sslSecurityHttpStatus, aclL3v6RuleTcpUdpDstPort=aclL3v6RuleTcpUdpDstPort, snmpV3Trap=snmpV3Trap, sysSNTPDSTStartHour=sysSNTPDSTStartHour, voiceVlanId=voiceVlanId, poePowerOn=poePowerOn, securityTrafficSeg=securityTrafficSeg, aclProfileTable=aclProfileTable, swAuthRadiusServerAccountingPort=swAuthRadiusServerAccountingPort, qosDiffServType39=qosDiffServType39, staticMac=staticMac)
mibBuilder.exportSymbols("DGS-1210-10P_CX", poePortSettingPriority=poePortSettingPriority, dot1qVlanManagementOnOff=dot1qVlanManagementOnOff, companyLLDPSetting=companyLLDPSetting, dhcpv6RelayInterfaceSettingsTable=dhcpv6RelayInterfaceSettingsTable, qosDiffServType37=qosDiffServType37, impbAutoScanStatus=impbAutoScanStatus, aclL2AccessID=aclL2AccessID, swTimeRangeStartYear=swTimeRangeStartYear, dlinklldpAntiRoguePortStatus=dlinklldpAntiRoguePortStatus, snmpV3Community=snmpV3Community, sysSwitchName=sysSwitchName, igsVlanQuerier=igsVlanQuerier, stpPortEnable=stpPortEnable, neighborEntry=neighborEntry, qosDiffServType57=qosDiffServType57, poePortSettingUserDefine=poePortSettingUserDefine, impbDHCPPortState=impbDHCPPortState, stpDesignatedRoot=stpDesignatedRoot, voicevlanDeviceIndexMac=voicevlanDeviceIndexMac, dhcpRelayInterfaceSettingsRowStatus=dhcpRelayInterfaceSettingsRowStatus, rstpStatus=rstpStatus, companyPoEGroup=companyPoEGroup, poeSystemSettingDisconnectMethod=poeSystemSettingDisconnectMethod, stpForwardDelay=stpForwardDelay, qosDiffServType34=qosDiffServType34, cableDiagLengthinRange=cableDiagLengthinRange, firmwareUpgradeFailure=firmwareUpgradeFailure, bandwidthCtrlTxThreshold=bandwidthCtrlTxThreshold, RmonStatus=RmonStatus, dhcpRelayOption82RemoteIDType=dhcpRelayOption82RemoteIDType, swAuthAuthReAuthPeriod=swAuthAuthReAuthPeriod, poeOverMaxPowerBudget=poeOverMaxPowerBudget, igsRouterPortPurgeInterval=igsRouterPortPurgeInterval, qosDiffServType38=qosDiffServType38, stpPortDesignatedBridge=stpPortDesignatedBridge, dlinkGreenPortShutoff=dlinkGreenPortShutoff, snmpV3TrapPoePowerError=snmpV3TrapPoePowerError, aclL2RuleStatus=aclL2RuleStatus, swTimeRangeEndHour=swTimeRangeEndHour, sysPortCtrlMDI=sysPortCtrlMDI, sshPublKeyRSAAdmin=sshPublKeyRSAAdmin, qosDiffServType36=qosDiffServType36, syslogSrvPort=syslogSrvPort, swTimeRangeDate=swTimeRangeDate, swTimeRangeSettingEntry=swTimeRangeSettingEntry, aclResourceEntryCount=aclResourceEntryCount, trustedHostIpAddr=trustedHostIpAddr, aRPSpoofPreventIpAddr=aRPSpoofPreventIpAddr, aclL2RuleSrcMacAddr=aclL2RuleSrcMacAddr, qosDiffServType00=qosDiffServType00, sysPortCtrlEntry=sysPortCtrlEntry, snmpV3GroupEntry=snmpV3GroupEntry, poePortSettingPowerLimit=poePortSettingPowerLimit, poePortStatus=poePortStatus, dlinkGreenLEDShutoffTimeProfile2=dlinkGreenLEDShutoffTimeProfile2, sysSNTPDSTStartMon=sysSNTPDSTStartMon, sysPortDescriptionEntry=sysPortDescriptionEntry, sysSNTPDSTOffset=sysSNTPDSTOffset, voicevlanOUITable=voicevlanOUITable, rmonEventDescription=rmonEventDescription, aclProfileNo=aclProfileNo, syslogTimeStampOption=syslogTimeStampOption, dhcpv6RelayInterface=dhcpv6RelayInterface, dot1qVlanPortEntry=dot1qVlanPortEntry, tftpFwTargetInterfaceName=tftpFwTargetInterfaceName, rmonStatsOwner=rmonStatsOwner, rmonAlarmOwner=rmonAlarmOwner, mldsVlanSnoopStatus=mldsVlanSnoopStatus, aclL3v4ExtRuleTcpUdpSrcPortMask=aclL3v4ExtRuleTcpUdpSrcPortMask, sysSNTPDSTStartMin=sysSNTPDSTStartMin, qosTOSType01=qosTOSType01, aclL3v4RuleStatus=aclL3v4RuleStatus, dlink_products=dlink_products, dhcpv6RelayServerIP=dhcpv6RelayServerIP, rmonHistoryTable=rmonHistoryTable, sysLBDMode=sysLBDMode, aclL3v4ExtRuleSrcIpAddrMask=aclL3v4ExtRuleSrcIpAddrMask, qosDiffServType44=qosDiffServType44, portSecState=portSecState, dhcpServerScreenTrustedServerStatus=dhcpServerScreenTrustedServerStatus, doSCtrlEntry=doSCtrlEntry, companyAutoSurveillanceVlan=companyAutoSurveillanceVlan, companySNTPSetting=companySNTPSetting, qosTOSType06=qosTOSType06, aclL3v4RuleTable=aclL3v4RuleTable, mldsVlanFastLeave=mldsVlanFastLeave, impbBlackListMacAddress=impbBlackListMacAddress, igsVlanFilterTable=igsVlanFilterTable, aclL3v6RuleStatus=aclL3v6RuleStatus, snmpV3GroupStatus=snmpV3GroupStatus, swAuthAuthConfigPortControl=swAuthAuthConfigPortControl, syslogSrvIP=syslogSrvIP, dlinkGreenPortShutoffPortList=dlinkGreenPortShutoffPortList, aclAccessListNo=aclAccessListNo, dhcpRelayOption82State=dhcpRelayOption82State, dhcpLocalRelaySettingsVLANID=dhcpLocalRelaySettingsVLANID, swAuthUserStatus=swAuthUserStatus, sysLBDVlanLoopPorts=sysLBDVlanLoopPorts, dlinklldpLocManAddrSubtype=dlinklldpLocManAddrSubtype, sysPortDescriptionTable=sysPortDescriptionTable, impbBlackListStatus=impbBlackListStatus, sysMirrorCtrlIngressMirroring=sysMirrorCtrlIngressMirroring, ipifV6AddressTable=ipifV6AddressTable, rmonEventTable=rmonEventTable, voicevlanDevicePort=voicevlanDevicePort, dlinklldpLocManAddr=dlinklldpLocManAddr, aclL3v4RuleDstIpAddr=aclL3v4RuleDstIpAddr, stpPortPriority=stpPortPriority, aclL3v4ExtRuleAction=aclL3v4ExtRuleAction, ipifV6AddressEntry=ipifV6AddressEntry, igsHostPortPurgeInterval=igsHostPortPurgeInterval, qosDiffServ=qosDiffServ, dhcpServerScreenEnablePortlist=dhcpServerScreenEnablePortlist, voicevlanOUIStatus=voicevlanOUIStatus, firmwareChecksumError=firmwareChecksumError, rmonEventEntry=rmonEventEntry, LacpKey=LacpKey, aRPSpoofPreventMacAddress=aRPSpoofPreventMacAddress, aclL3v4RuleProfileNo=aclL3v4RuleProfileNo, swTimeRangeSunday=swTimeRangeSunday, dhcpRelayInterfaceSettingsTable=dhcpRelayInterfaceSettingsTable, qosTOSType00=qosTOSType00, sysDdpGeneralReportOnOff=sysDdpGeneralReportOnOff, sysDdpProtStatusIndex=sysDdpProtStatusIndex, companyIgsGroup=companyIgsGroup, swAuthRadiusServerAddress=swAuthRadiusServerAddress, swAuthRadiusIPType=swAuthRadiusIPType, swTimeRangeStartHour=swTimeRangeStartHour, aclL3v4RuleEntry=aclL3v4RuleEntry, staticPort=staticPort, neighborType=neighborType, mldsGrpQueryInterval=mldsGrpQueryInterval, dhcpRelayInterface=dhcpRelayInterface, swAuthUserName=swAuthUserName, aclL2RuleAction=aclL2RuleAction, aclProfile=aclProfile, bandwidthCtrlSettings=bandwidthCtrlSettings, staticTable=staticTable, portSecEntry=portSecEntry, dhcpRelayTimeThreshold=dhcpRelayTimeThreshold, staticMcastMac=staticMcastMac, trustedHostEntry=trustedHostEntry, autoSurveillanceVlanSystem=autoSurveillanceVlanSystem, mldsQueryInterval=mldsQueryInterval, sysSNTPDSTState=sysSNTPDSTState, dgs_1210_10pcx=dgs_1210_10pcx, igsVlanMulticastGroupTable=igsVlanMulticastGroupTable, ipifV6AddressMainIndex=ipifV6AddressMainIndex, dhcpv6RelayManagement=dhcpv6RelayManagement, tftpFwTargetGroup=tftpFwTargetGroup, swAuthRadiusServerStatus=swAuthRadiusServerStatus, aclPortBindGroup=aclPortBindGroup, queuingMechanism=queuingMechanism, sshUserInfoTable=sshUserInfoTable, snmpV3ViewTree=snmpV3ViewTree, companyGreenSetting=companyGreenSetting, swAuthPortAccessControlEntry=swAuthPortAccessControlEntry)
