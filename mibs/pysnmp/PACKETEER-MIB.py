#
# PySNMP MIB module PACKETEER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PACKETEER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:26:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Counter32, NotificationType, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, iso, IpAddress, MibIdentifier, Unsigned32, TimeTicks, ObjectIdentity, Integer32, Gauge32, ModuleIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "NotificationType", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "iso", "IpAddress", "MibIdentifier", "Unsigned32", "TimeTicks", "ObjectIdentity", "Integer32", "Gauge32", "ModuleIdentity", "Counter64")
TextualConvention, DisplayString, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "DateAndTime")
packeteer = MibIdentifier((1, 3, 6, 1, 4, 1, 2334))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 1))
packetShaper = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 1, 1))
packetShaper_2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 1, 1, 1)).setLabel("packetShaper-2000")
packetShaper_4000 = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 1, 1, 2)).setLabel("packetShaper-4000")
packetShaper_1000 = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 1, 1, 3)).setLabel("packetShaper-1000")
packetShaper_2500 = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 1, 1, 4)).setLabel("packetShaper-2500")
packetShaper_4500 = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 1, 1, 5)).setLabel("packetShaper-4500")
packetShaper_1500 = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 1, 1, 6)).setLabel("packetShaper-1500")
packetShaper_asm50 = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 1, 1, 7)).setLabel("packetShaper-asm50")
packetShaper_asm70 = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 1, 1, 8)).setLabel("packetShaper-asm70")
packetShaper_asm30 = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 1, 1, 9)).setLabel("packetShaper-asm30")
packetShaper_asm90 = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 1, 1, 10)).setLabel("packetShaper-asm90")
packetShaper_6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 1, 1, 11)).setLabel("packetShaper-6500")
packetShaper_8500 = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 1, 1, 12)).setLabel("packetShaper-8500")
packetShaper_asm110 = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 1, 1, 13)).setLabel("packetShaper-asm110")
packetShaper_1550 = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 1, 1, 14)).setLabel("packetShaper-1550")
packetShaper_9500 = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 1, 1, 15)).setLabel("packetShaper-9500")
packetShaper_2550 = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 1, 1, 16)).setLabel("packetShaper-2550")
packetShaper_10000 = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 1, 1, 17)).setLabel("packetShaper-10000")
packeteerMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 2))
psCommonMib = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 2, 1))
psSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 2, 1, 1))
psLinks = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2))
psPartitions = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3))
psClasses = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4))
psAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5))
psAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 2, 1, 6))
psUserEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 2, 1, 8))
psHighAv = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 2, 1, 9))
psAgentEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 2, 1, 10))
psShapingStatusOper = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psShapingStatusOper.setStatus('mandatory')
linkTableSize = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTableSize.setStatus('mandatory')
linkTable = MibTable((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2), )
if mibBuilder.loadTexts: linkTable.setStatus('mandatory')
linkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1), ).setIndexNames((0, "PACKETEER-MIB", "linkIndex"))
if mibBuilder.loadTexts: linkEntry.setStatus('mandatory')
linkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkIndex.setStatus('mandatory')
linkName = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkName.setStatus('mandatory')
linkByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkByteCount.setStatus('mandatory')
linkByteCountHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkByteCountHi.setStatus('mandatory')
linkPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkPkts.setStatus('mandatory')
linkDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDataPkts.setStatus('mandatory')
linkReTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkReTxs.setStatus('mandatory')
linkReTxTosses = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkReTxTosses.setStatus('mandatory')
linkCirFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCirFails.setStatus('mandatory')
linkCirAllocs = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCirAllocs.setStatus('mandatory')
linkEirAllocs = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkEirAllocs.setStatus('mandatory')
linkPeakTcpConns = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkPeakTcpConns.setStatus('mandatory')
linkTcpConnInits = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTcpConnInits.setStatus('mandatory')
linkTcpConnExits = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTcpConnExits.setStatus('mandatory')
linkTcpConnRefuses = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTcpConnRefuses.setStatus('mandatory')
linkTcpConnIgnores = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTcpConnIgnores.setStatus('mandatory')
linkTcpConnAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTcpConnAborts.setStatus('mandatory')
linkTcpConnDenies = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTcpConnDenies.setStatus('mandatory')
linkTcpConnTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTcpConnTimeouts.setStatus('deprecated')
linkPeakUdpConns = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkPeakUdpConns.setStatus('deprecated')
linkUdpConnInits = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkUdpConnInits.setStatus('deprecated')
linkUdpConnExits = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkUdpConnExits.setStatus('deprecated')
linkSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkSize.setStatus('mandatory')
linkRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkRate.setStatus('mandatory')
linkRateAllocations = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkRateAllocations.setStatus('mandatory')
linkPeakGuaranteedRateFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkPeakGuaranteedRateFlows.setStatus('mandatory')
linkPeakRateFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkPeakRateFlows.setStatus('mandatory')
linkReTxByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkReTxByteCount.setStatus('mandatory')
linkReTxByteCountHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkReTxByteCountHi.setStatus('mandatory')
linkTotalRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTotalRxPkts.setStatus('mandatory')
linkTotalTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTotalTxPkts.setStatus('mandatory')
linkRxNoBufs = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkRxNoBufs.setStatus('mandatory')
linkRxPktDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkRxPktDrops.setStatus('mandatory')
linkTxPktDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTxPktDrops.setStatus('mandatory')
linkRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkRxErrors.setStatus('mandatory')
linkTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTxErrors.setStatus('mandatory')
linkTcpAllocFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTcpAllocFails.setStatus('mandatory')
linkIpdgAllocFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkIpdgAllocFails.setStatus('mandatory')
linkHostdbAllocFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkHostdbAllocFails.setStatus('mandatory')
linkShapingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("watch", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkShapingMode.setStatus('mandatory')
linkAutoclassifyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAutoclassifyMode.setStatus('mandatory')
linkMacSameSidePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkMacSameSidePkts.setStatus('mandatory')
linkPassthruPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkPassthruPkts.setStatus('mandatory')
linkTotalRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTotalRxBytes.setStatus('mandatory')
linkTotalRxBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTotalRxBytesHi.setStatus('mandatory')
linkTotalTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTotalTxBytes.setStatus('mandatory')
linkTotalTxBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTotalTxBytesHi.setStatus('mandatory')
linkClassChecks = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkClassChecks.setStatus('mandatory')
linkPassthruBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkPassthruBytes.setStatus('mandatory')
linkCompressionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCompressionMode.setStatus('mandatory')
linkPeakPreCompressionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkPeakPreCompressionRate.setStatus('mandatory')
linkPeakPostCompressionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkPeakPostCompressionRate.setStatus('mandatory')
linkNonComprsnBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkNonComprsnBytes.setStatus('mandatory')
linkNonComprsnBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkNonComprsnBytesHi.setStatus('mandatory')
linkPreComprsnBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkPreComprsnBytes.setStatus('mandatory')
linkPreComprsnBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkPreComprsnBytesHi.setStatus('mandatory')
linkPostComprsnBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkPostComprsnBytes.setStatus('mandatory')
linkPostComprsnBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkPostComprsnBytesHi.setStatus('mandatory')
partitionTableSize = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionTableSize.setStatus('mandatory')
partitionTable = MibTable((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2), )
if mibBuilder.loadTexts: partitionTable.setStatus('mandatory')
partitionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1), ).setIndexNames((0, "PACKETEER-MIB", "partitionIndex"))
if mibBuilder.loadTexts: partitionEntry.setStatus('mandatory')
partitionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionIndex.setStatus('mandatory')
partitionName = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionName.setStatus('mandatory')
partitionLinkDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in-bound", 1), ("out-bound", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionLinkDirection.setStatus('mandatory')
partitionByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionByteCount.setStatus('mandatory')
partitionByteCountHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionByteCountHi.setStatus('mandatory')
partitionPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionPkts.setStatus('mandatory')
partitionDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionDataPkts.setStatus('mandatory')
partitionReTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionReTxs.setStatus('mandatory')
partitionReTxTosses = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionReTxTosses.setStatus('mandatory')
partitionCirFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionCirFails.setStatus('mandatory')
partitionCirAllocs = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionCirAllocs.setStatus('mandatory')
partitionEirAllocs = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionEirAllocs.setStatus('mandatory')
partitionPeakTcpConns = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionPeakTcpConns.setStatus('mandatory')
partitionTcpConnInits = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionTcpConnInits.setStatus('mandatory')
partitionTcpConnExits = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionTcpConnExits.setStatus('mandatory')
partitionTcpConnRefuses = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionTcpConnRefuses.setStatus('mandatory')
partitionTcpConnIgnores = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionTcpConnIgnores.setStatus('mandatory')
partitionTcpConnAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionTcpConnAborts.setStatus('mandatory')
partitionTcpConnDenies = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionTcpConnDenies.setStatus('mandatory')
partitionTcpConnTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionTcpConnTimeouts.setStatus('deprecated')
partitionPeakUdpConns = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionPeakUdpConns.setStatus('deprecated')
partitionUdpConnInits = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionUdpConnInits.setStatus('deprecated')
partitionUdpConnExits = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionUdpConnExits.setStatus('deprecated')
partitionMinimumBps = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionMinimumBps.setStatus('mandatory')
partitionBurstLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionBurstLimit.setStatus('mandatory')
partitionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionRate.setStatus('mandatory')
partitionCirRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionCirRate.setStatus('mandatory')
partitionEirRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionEirRate.setStatus('mandatory')
partitionUnreservedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionUnreservedRate.setStatus('mandatory')
partitionFirstSatisfiedPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionFirstSatisfiedPriority.setStatus('mandatory')
partitionTimeOverLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionTimeOverLimit.setStatus('mandatory')
partitionRateAllocations = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionRateAllocations.setStatus('mandatory')
partitionPeakGuaranteedRateFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionPeakGuaranteedRateFlows.setStatus('mandatory')
partitionPeakRateFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionPeakRateFlows.setStatus('mandatory')
partitionReTxByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionReTxByteCount.setStatus('mandatory')
partitionReTxByteCountHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionReTxByteCountHi.setStatus('mandatory')
partitionDynamicCapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionDynamicCapCount.setStatus('mandatory')
partitionDynamicNoCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionDynamicNoCount.setStatus('mandatory')
partitionDynamicLiveUserCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionDynamicLiveUserCount.setStatus('mandatory')
partitionCommittmentFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionCommittmentFailures.setStatus('mandatory')
partitionLateDropPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionLateDropPktCount.setStatus('mandatory')
partitionLateDropPktCountHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionLateDropPktCountHi.setStatus('mandatory')
partitionLateDropByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionLateDropByteCount.setStatus('mandatory')
partitionLateDropByteCountHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionLateDropByteCountHi.setStatus('mandatory')
partitionSchedDropPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionSchedDropPktCount.setStatus('mandatory')
partitionSchedDropPktCountHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionSchedDropPktCountHi.setStatus('mandatory')
partitionSchedDropByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionSchedDropByteCount.setStatus('mandatory')
partitionSchedDropByteCountHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionSchedDropByteCountHi.setStatus('mandatory')
partitionFrameBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionFrameBytes.setStatus('mandatory')
partitionFrameBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionFrameBytesHi.setStatus('mandatory')
partitionFrameTargetRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionFrameTargetRate.setStatus('mandatory')
partitionFrameTargetRateHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionFrameTargetRateHi.setStatus('mandatory')
partitionFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionFrameCount.setStatus('mandatory')
partitionEcnCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionEcnCount.setStatus('mandatory')
partitionNonComprsnBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionNonComprsnBytes.setStatus('mandatory')
partitionNonComprsnBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionNonComprsnBytesHi.setStatus('mandatory')
partitionPreComprsnBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionPreComprsnBytes.setStatus('mandatory')
partitionPreComprsnBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionPreComprsnBytesHi.setStatus('mandatory')
partitionPostComprsnBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionPostComprsnBytes.setStatus('mandatory')
partitionPostComprsnBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionPostComprsnBytesHi.setStatus('mandatory')
classTableSize = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classTableSize.setStatus('mandatory')
classTable = MibTable((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2), )
if mibBuilder.loadTexts: classTable.setStatus('mandatory')
classEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1), ).setIndexNames((0, "PACKETEER-MIB", "classIndex"))
if mibBuilder.loadTexts: classEntry.setStatus('mandatory')
classIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classIndex.setStatus('mandatory')
className = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: className.setStatus('mandatory')
classOwningPartName = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classOwningPartName.setStatus('mandatory')
classLinkDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in-bound", 1), ("out-bound", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: classLinkDirection.setStatus('mandatory')
classByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classByteCount.setStatus('mandatory')
classByteCountHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classByteCountHi.setStatus('mandatory')
classPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classPkts.setStatus('mandatory')
classDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classDataPkts.setStatus('mandatory')
classReTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classReTxs.setStatus('mandatory')
classReTxTosses = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classReTxTosses.setStatus('mandatory')
classCirFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classCirFails.setStatus('mandatory')
classCirAllocs = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classCirAllocs.setStatus('mandatory')
classEirAllocs = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classEirAllocs.setStatus('mandatory')
classPeakTcpConns = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classPeakTcpConns.setStatus('mandatory')
classTcpConnInits = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classTcpConnInits.setStatus('mandatory')
classTcpConnExits = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classTcpConnExits.setStatus('mandatory')
classTcpConnRefuses = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classTcpConnRefuses.setStatus('mandatory')
classTcpConnIgnores = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classTcpConnIgnores.setStatus('mandatory')
classTcpConnAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classTcpConnAborts.setStatus('mandatory')
classTcpConnDenies = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classTcpConnDenies.setStatus('mandatory')
classTcpConnTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classTcpConnTimeouts.setStatus('deprecated')
classPeakUdpConns = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classPeakUdpConns.setStatus('deprecated')
classUdpConnInits = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classUdpConnInits.setStatus('deprecated')
classUdpConnExits = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classUdpConnExits.setStatus('deprecated')
classHits = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classHits.setStatus('mandatory')
classPolicyHits = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classPolicyHits.setStatus('mandatory')
classRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classRate.setStatus('mandatory')
classRateAllocations = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classRateAllocations.setStatus('mandatory')
classPeakGuaranteedRateFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classPeakGuaranteedRateFlows.setStatus('mandatory')
classPeakRateFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classPeakRateFlows.setStatus('mandatory')
classDataDelayEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classDataDelayEvents.setStatus('deprecated')
classDataDelayTimeCum = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classDataDelayTimeCum.setStatus('deprecated')
classReservedOne = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classReservedOne.setStatus('mandatory')
classReTxByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classReTxByteCount.setStatus('mandatory')
classReTxByteCountHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classReTxByteCountHi.setStatus('mandatory')
classFullName = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 36), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classFullName.setStatus('mandatory')
classCurrentRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classCurrentRate.setStatus('mandatory')
classPktExchangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classPktExchangeTime.setStatus('mandatory')
classPktExchangeTimeHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classPktExchangeTimeHi.setStatus('mandatory')
classPktExchangeTimeSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classPktExchangeTimeSamples.setStatus('mandatory')
classClientFloodBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classClientFloodBlock.setStatus('mandatory')
classServerFloodBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classServerFloodBlock.setStatus('mandatory')
classAppAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classAppAvailability.setStatus('deprecated')
classPeakIpdgConns = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classPeakIpdgConns.setStatus('mandatory')
classWebResponse2XX = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classWebResponse2XX.setStatus('mandatory')
classWebResponse3XX = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classWebResponse3XX.setStatus('mandatory')
classWebResponse4XX = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classWebResponse4XX.setStatus('mandatory')
classWebResponse5XX = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classWebResponse5XX.setStatus('mandatory')
classNonComprsnBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classNonComprsnBytes.setStatus('mandatory')
classNonComprsnBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classNonComprsnBytesHi.setStatus('mandatory')
classPreComprsnBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classPreComprsnBytes.setStatus('mandatory')
classPreComprsnBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classPreComprsnBytesHi.setStatus('mandatory')
classPostComprsnBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classPostComprsnBytes.setStatus('mandatory')
classPostComprsnBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classPostComprsnBytesHi.setStatus('mandatory')
psAlarmInsideLinkCount = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmInsideLinkCount.setStatus('mandatory')
psAlarmOutsideLinkCount = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmOutsideLinkCount.setStatus('mandatory')
psAlarmSiteRouterCount = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmSiteRouterCount.setStatus('mandatory')
psAlarmSiteRouterStatus = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ready", 1), ("gone", 2), ("error-inside", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmSiteRouterStatus.setStatus('mandatory')
psAlarmSiteRouter = NotificationType((1, 3, 6, 1, 4, 1, 2334, 1, 1) + (0,3)).setObjects(("PACKETEER-MIB", "psAlarmSiteRouterStatus"))
psAlarmPowerSystemOne = NotificationType((1, 3, 6, 1, 4, 1, 2334, 1, 1) + (0,4))
psAlarmPowerSystemOneCount = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmPowerSystemOneCount.setStatus('mandatory')
psAlarmPowerSystemOneStatus = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("not-ok", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmPowerSystemOneStatus.setStatus('mandatory')
psAlarmPowerSystemTwo = NotificationType((1, 3, 6, 1, 4, 1, 2334, 1, 1) + (0,5))
psAlarmPowerSystemTwoCount = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmPowerSystemTwoCount.setStatus('mandatory')
psAlarmPowerSystemTwoStatus = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("not-ok", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmPowerSystemTwoStatus.setStatus('mandatory')
psAlarmFanOne = NotificationType((1, 3, 6, 1, 4, 1, 2334, 1, 1) + (0,6))
psAlarmFanOneCount = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmFanOneCount.setStatus('mandatory')
psAlarmFanOneStatus = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("non-existant", 0), ("ok", 1), ("not-ok", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmFanOneStatus.setStatus('mandatory')
psAlarmFanTwo = NotificationType((1, 3, 6, 1, 4, 1, 2334, 1, 1) + (0,7))
psAlarmFanTwoCount = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmFanTwoCount.setStatus('mandatory')
psAlarmFanTwoStatus = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("non-existant", 0), ("ok", 1), ("not-ok", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmFanTwoStatus.setStatus('mandatory')
psAlarmCfgFile = NotificationType((1, 3, 6, 1, 4, 1, 2334, 1, 1) + (0,8))
psAlarmCfgFileCount = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmCfgFileCount.setStatus('mandatory')
psAlarmCfgFileStatus = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("corrupted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmCfgFileStatus.setStatus('mandatory')
psAlarmMeasurementEngineCount = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmMeasurementEngineCount.setStatus('mandatory')
psAlarmMeasurementEngineStatus = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("initiallyStarting", 1), ("starting", 2), ("running", 3), ("errorOnVolume", 4), ("disabled", 5), ("waitToStart", 6), ("suspended", 7), ("backup", 8), ("restore", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmMeasurementEngineStatus.setStatus('mandatory')
psAlarmMeasurementEngine = NotificationType((1, 3, 6, 1, 4, 1, 2334, 1, 1) + (0,10)).setObjects(("PACKETEER-MIB", "psAlarmMeasurementEngineStatus"))
psAlarmStandbyCount = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmStandbyCount.setStatus('mandatory')
psAlarmStandbyStatus = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("not-configured", 1), ("active", 2), ("passive", 3), ("down", 4), ("direct", 5), ("disconnected", 6), ("leak", 7), ("disable", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmStandbyStatus.setStatus('mandatory')
psAlarmStandby = NotificationType((1, 3, 6, 1, 4, 1, 2334, 1, 1) + (0,11)).setObjects(("PACKETEER-MIB", "psAlarmStandbyStatus"))
psAlarmFanThree = NotificationType((1, 3, 6, 1, 4, 1, 2334, 1, 1) + (0,14))
psAlarmFanThreeCount = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmFanThreeCount.setStatus('mandatory')
psAlarmFanThreeStatus = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("non-existant", 0), ("ok", 1), ("not-ok", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmFanThreeStatus.setStatus('mandatory')
psAlarmFanFour = NotificationType((1, 3, 6, 1, 4, 1, 2334, 1, 1) + (0,15))
psAlarmFanFourCount = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmFanFourCount.setStatus('mandatory')
psAlarmFanFourStatus = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("non-existant", 0), ("ok", 1), ("not-ok", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmFanFourStatus.setStatus('mandatory')
trapDestTable = MibTable((1, 3, 6, 1, 4, 1, 2334, 2, 1, 6, 1), )
if mibBuilder.loadTexts: trapDestTable.setStatus('mandatory')
trapDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2334, 2, 1, 6, 1, 1), ).setIndexNames((0, "PACKETEER-MIB", "trapDestIpAddr"))
if mibBuilder.loadTexts: trapDestEntry.setStatus('mandatory')
trapDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 6, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapDestIpAddr.setStatus('mandatory')
trapDestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDestStatus.setStatus('mandatory')
trapDestAdd = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 6, 2), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: trapDestAdd.setStatus('mandatory')
trapDestRemove = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 6, 3), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: trapDestRemove.setStatus('mandatory')
psShapingStatusAdmin = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("bypass", 3), ("other", 4), ("watch", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psShapingStatusAdmin.setStatus('mandatory')
psUserEventTrapVars = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 2, 1, 8, 1))
userEventTrapName = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 8, 1, 1), DisplayString())
if mibBuilder.loadTexts: userEventTrapName.setStatus('mandatory')
userEventTrapExpression = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 8, 1, 2), DisplayString())
if mibBuilder.loadTexts: userEventTrapExpression.setStatus('mandatory')
userEventTrapVariable = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 8, 1, 3), DisplayString())
if mibBuilder.loadTexts: userEventTrapVariable.setStatus('mandatory')
userEventTrapElementType = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("link", 1), ("class", 2), ("partition", 3))))
if mibBuilder.loadTexts: userEventTrapElementType.setStatus('mandatory')
userEventTrapRegid = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 8, 1, 5), Integer32())
if mibBuilder.loadTexts: userEventTrapRegid.setStatus('mandatory')
userEventTrapDate = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 8, 1, 6), DateAndTime())
if mibBuilder.loadTexts: userEventTrapDate.setStatus('mandatory')
userEventTrapValue = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 8, 1, 7), Integer32())
if mibBuilder.loadTexts: userEventTrapValue.setStatus('mandatory')
userEventTrapTarget = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 8, 1, 8), DisplayString())
if mibBuilder.loadTexts: userEventTrapTarget.setStatus('mandatory')
userEventTrapThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 8, 1, 9), Integer32())
if mibBuilder.loadTexts: userEventTrapThreshold.setStatus('mandatory')
userEventTrapRearm = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 8, 1, 10), Integer32())
if mibBuilder.loadTexts: userEventTrapRearm.setStatus('mandatory')
userEventTrapDayCount = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 8, 1, 11), Integer32())
if mibBuilder.loadTexts: userEventTrapDayCount.setStatus('mandatory')
userEventTrapDayLimit = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 8, 1, 12), Integer32())
if mibBuilder.loadTexts: userEventTrapDayLimit.setStatus('mandatory')
psAlarmUserEvent = NotificationType((1, 3, 6, 1, 4, 1, 2334, 1, 1) + (0,9)).setObjects(("PACKETEER-MIB", "userEventTrapName"), ("PACKETEER-MIB", "userEventTrapExpression"), ("PACKETEER-MIB", "userEventTrapVariable"), ("PACKETEER-MIB", "userEventTrapElementType"), ("PACKETEER-MIB", "userEventTrapRegid"), ("PACKETEER-MIB", "userEventTrapDate"), ("PACKETEER-MIB", "userEventTrapValue"), ("PACKETEER-MIB", "userEventTrapTarget"), ("PACKETEER-MIB", "userEventTrapThreshold"), ("PACKETEER-MIB", "userEventTrapRearm"), ("PACKETEER-MIB", "userEventTrapDayCount"), ("PACKETEER-MIB", "userEventTrapDayLimit"))
psAgentEventTrapVars = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 2, 1, 10, 1))
agentEventTrapName = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 10, 1, 1), DisplayString())
if mibBuilder.loadTexts: agentEventTrapName.setStatus('mandatory')
agentEventTrapDate = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 10, 1, 2), DateAndTime())
if mibBuilder.loadTexts: agentEventTrapDate.setStatus('mandatory')
agentEventTrapType = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("green", 0), ("red", 1), ("yellow", 2), ("blue", 3))))
if mibBuilder.loadTexts: agentEventTrapType.setStatus('mandatory')
agentEventTrapDescription = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 10, 1, 4), DisplayString())
if mibBuilder.loadTexts: agentEventTrapDescription.setStatus('mandatory')
psAlarmAgentEvent = NotificationType((1, 3, 6, 1, 4, 1, 2334, 1, 1) + (0,13)).setObjects(("PACKETEER-MIB", "agentEventTrapName"), ("PACKETEER-MIB", "agentEventTrapDate"), ("PACKETEER-MIB", "agentEventTrapType"), ("PACKETEER-MIB", "agentEventTrapDescription"))
psFeatureHighAvDeviceDown = NotificationType((1, 3, 6, 1, 4, 1, 2334, 1, 1) + (0,12)).setObjects(("PACKETEER-MIB", "psFeatureHighAvDeviceDownStatus"), ("PACKETEER-MIB", "psFeatureHighAvDeviceDownRouter"), ("PACKETEER-MIB", "psFeatureHighAvDeviceDownInterface"))
psFeatureHighAvDeviceDownCount = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 9, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psFeatureHighAvDeviceDownCount.setStatus('mandatory')
psFeatureHighAvDeviceDownStatus = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psFeatureHighAvDeviceDownStatus.setStatus('mandatory')
psFeatureHighAvDeviceDownRouter = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 9, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psFeatureHighAvDeviceDownRouter.setStatus('mandatory')
psFeatureHighAvDeviceDownInterface = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 9, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psFeatureHighAvDeviceDownInterface.setStatus('mandatory')
mibBuilder.exportSymbols("PACKETEER-MIB", psAlarmMeasurementEngineStatus=psAlarmMeasurementEngineStatus, psAlarmPowerSystemOneCount=psAlarmPowerSystemOneCount, partitionPkts=partitionPkts, classUdpConnExits=classUdpConnExits, classPktExchangeTimeSamples=classPktExchangeTimeSamples, classPostComprsnBytesHi=classPostComprsnBytesHi, psAlarmPowerSystemTwoStatus=psAlarmPowerSystemTwoStatus, psUserEvents=psUserEvents, userEventTrapRegid=userEventTrapRegid, classRateAllocations=classRateAllocations, partitionLateDropPktCount=partitionLateDropPktCount, partitionEirAllocs=partitionEirAllocs, classEntry=classEntry, packetShaper_6500=packetShaper_6500, linkTotalTxPkts=linkTotalTxPkts, classPktExchangeTimeHi=classPktExchangeTimeHi, partitionPostComprsnBytes=partitionPostComprsnBytes, psAlarmFanOneStatus=psAlarmFanOneStatus, linkEntry=linkEntry, userEventTrapName=userEventTrapName, partitionBurstLimit=partitionBurstLimit, userEventTrapRearm=userEventTrapRearm, partitionUnreservedRate=partitionUnreservedRate, classPreComprsnBytesHi=classPreComprsnBytesHi, classTcpConnAborts=classTcpConnAborts, psAlarmSiteRouterStatus=psAlarmSiteRouterStatus, partitionLateDropByteCount=partitionLateDropByteCount, psAlarmFanTwoStatus=psAlarmFanTwoStatus, classFullName=classFullName, partitionByteCount=partitionByteCount, partitionPeakGuaranteedRateFlows=partitionPeakGuaranteedRateFlows, linkTcpAllocFails=linkTcpAllocFails, linkCirFails=linkCirFails, partitionTableSize=partitionTableSize, partitionReTxByteCount=partitionReTxByteCount, userEventTrapDate=userEventTrapDate, partitionEirRate=partitionEirRate, psAlarms=psAlarms, linkName=linkName, classDataPkts=classDataPkts, classReTxByteCountHi=classReTxByteCountHi, linkTableSize=linkTableSize, partitionFrameBytes=partitionFrameBytes, userEventTrapValue=userEventTrapValue, classTable=classTable, linkTotalRxPkts=linkTotalRxPkts, classDataDelayTimeCum=classDataDelayTimeCum, partitionTcpConnIgnores=partitionTcpConnIgnores, classCurrentRate=classCurrentRate, packetShaper_1000=packetShaper_1000, linkByteCount=linkByteCount, psAlarmFanOneCount=psAlarmFanOneCount, psAlarmCfgFileStatus=psAlarmCfgFileStatus, packetShaper_2550=packetShaper_2550, userEventTrapVariable=userEventTrapVariable, agentEventTrapDate=agentEventTrapDate, packetShaper_8500=packetShaper_8500, linkEirAllocs=linkEirAllocs, partitionByteCountHi=partitionByteCountHi, psAlarmOutsideLinkCount=psAlarmOutsideLinkCount, classUdpConnInits=classUdpConnInits, linkTotalTxBytesHi=linkTotalTxBytesHi, partitionCirRate=partitionCirRate, partitionTcpConnDenies=partitionTcpConnDenies, psUserEventTrapVars=psUserEventTrapVars, psAlarmFanThreeStatus=psAlarmFanThreeStatus, psAlarmFanThreeCount=psAlarmFanThreeCount, userEventTrapTarget=userEventTrapTarget, linkIndex=linkIndex, psAlarmSiteRouter=psAlarmSiteRouter, partitionUdpConnExits=partitionUdpConnExits, linkPeakUdpConns=linkPeakUdpConns, partitionRate=partitionRate, linkPassthruBytes=linkPassthruBytes, psAlarmFanFour=psAlarmFanFour, partitionName=partitionName, psAlarmUserEvent=psAlarmUserEvent, psShapingStatusAdmin=psShapingStatusAdmin, partitionUdpConnInits=partitionUdpConnInits, classPolicyHits=classPolicyHits, partitionRateAllocations=partitionRateAllocations, linkPeakPreCompressionRate=linkPeakPreCompressionRate, partitionReTxTosses=partitionReTxTosses, linkHostdbAllocFails=linkHostdbAllocFails, psAlarmPowerSystemTwoCount=psAlarmPowerSystemTwoCount, linkReTxs=linkReTxs, classWebResponse5XX=classWebResponse5XX, psAlarmSiteRouterCount=psAlarmSiteRouterCount, partitionEntry=partitionEntry, partitionIndex=partitionIndex, partitionFrameTargetRate=partitionFrameTargetRate, classAppAvailability=classAppAvailability, packetShaper_asm30=packetShaper_asm30, classPeakIpdgConns=classPeakIpdgConns, packetShaper_4000=packetShaper_4000, classOwningPartName=classOwningPartName, linkAutoclassifyMode=linkAutoclassifyMode, psAdmin=psAdmin, psAlarmStandbyStatus=psAlarmStandbyStatus, classCirAllocs=classCirAllocs, partitionCirFails=partitionCirFails, psAlarmAgentEvent=psAlarmAgentEvent, linkReTxByteCount=linkReTxByteCount, packetShaper_2500=packetShaper_2500, partitionTimeOverLimit=partitionTimeOverLimit, linkTotalRxBytes=linkTotalRxBytes, psCommonMib=psCommonMib, partitionPeakUdpConns=partitionPeakUdpConns, classNonComprsnBytes=classNonComprsnBytes, trapDestIpAddr=trapDestIpAddr, linkPassthruPkts=linkPassthruPkts, userEventTrapDayCount=userEventTrapDayCount, linkRxNoBufs=linkRxNoBufs, linkUdpConnInits=linkUdpConnInits, linkTcpConnExits=linkTcpConnExits, linkCompressionMode=linkCompressionMode, partitionTcpConnAborts=partitionTcpConnAborts, partitionMinimumBps=partitionMinimumBps, classServerFloodBlock=classServerFloodBlock, classHits=classHits, classIndex=classIndex, classRate=classRate, agentEventTrapName=agentEventTrapName, linkByteCountHi=linkByteCountHi, partitionDataPkts=partitionDataPkts, packetShaper=packetShaper, classTcpConnTimeouts=classTcpConnTimeouts, packetShaper_asm50=packetShaper_asm50, classTableSize=classTableSize, psFeatureHighAvDeviceDownRouter=psFeatureHighAvDeviceDownRouter, linkRate=linkRate, partitionPostComprsnBytesHi=partitionPostComprsnBytesHi, partitionCirAllocs=partitionCirAllocs, classPeakUdpConns=classPeakUdpConns, packetShaper_1550=packetShaper_1550, classPostComprsnBytes=classPostComprsnBytes, partitionDynamicNoCount=partitionDynamicNoCount, trapDestStatus=trapDestStatus, partitionFrameTargetRateHi=partitionFrameTargetRateHi, partitionTable=partitionTable, packetShaper_10000=packetShaper_10000, linkPeakTcpConns=linkPeakTcpConns, linkCirAllocs=linkCirAllocs, psHighAv=psHighAv, partitionTcpConnInits=partitionTcpConnInits, psAlarmFanFourCount=psAlarmFanFourCount, trapDestEntry=trapDestEntry, psLinks=psLinks, linkReTxByteCountHi=linkReTxByteCountHi, psAlarmFanTwo=psAlarmFanTwo, psAlarmStandbyCount=psAlarmStandbyCount, partitionNonComprsnBytes=partitionNonComprsnBytes, linkPreComprsnBytes=linkPreComprsnBytes, partitionSchedDropByteCount=partitionSchedDropByteCount, packetShaper_2000=packetShaper_2000, linkIpdgAllocFails=linkIpdgAllocFails, linkTotalTxBytes=linkTotalTxBytes, psAlarmPowerSystemTwo=psAlarmPowerSystemTwo, agentEventTrapDescription=agentEventTrapDescription, trapDestTable=trapDestTable, classPeakGuaranteedRateFlows=classPeakGuaranteedRateFlows, linkPeakRateFlows=linkPeakRateFlows, partitionFrameCount=partitionFrameCount, classTcpConnDenies=classTcpConnDenies, classPeakRateFlows=classPeakRateFlows, userEventTrapElementType=userEventTrapElementType, packeteer=packeteer, classReTxs=classReTxs, partitionReTxs=partitionReTxs, trapDestAdd=trapDestAdd, classLinkDirection=classLinkDirection, linkPostComprsnBytesHi=linkPostComprsnBytesHi, linkRxPktDrops=linkRxPktDrops, classReservedOne=classReservedOne, classWebResponse4XX=classWebResponse4XX, linkNonComprsnBytes=linkNonComprsnBytes, partitionTcpConnRefuses=partitionTcpConnRefuses, classByteCount=classByteCount, psAlarmFanOne=psAlarmFanOne, linkRxErrors=linkRxErrors, partitionSchedDropPktCount=partitionSchedDropPktCount, packetShaper_asm70=packetShaper_asm70, userEventTrapDayLimit=userEventTrapDayLimit, linkPostComprsnBytes=linkPostComprsnBytes, psFeatureHighAvDeviceDownCount=psFeatureHighAvDeviceDownCount, psAgentEventTrapVars=psAgentEventTrapVars, psAlarmPowerSystemOne=psAlarmPowerSystemOne, classEirAllocs=classEirAllocs, psPartitions=psPartitions, psAlarmFanThree=psAlarmFanThree, partitionNonComprsnBytesHi=partitionNonComprsnBytesHi, linkTcpConnInits=linkTcpConnInits, packeteerMibs=packeteerMibs, classReTxByteCount=classReTxByteCount, psFeatureHighAvDeviceDownInterface=psFeatureHighAvDeviceDownInterface, partitionEcnCount=partitionEcnCount, packetShaper_4500=packetShaper_4500, linkClassChecks=linkClassChecks, classTcpConnInits=classTcpConnInits, linkTable=linkTable, classPreComprsnBytes=classPreComprsnBytes, classDataDelayEvents=classDataDelayEvents, linkTcpConnTimeouts=linkTcpConnTimeouts, psAlarmFanTwoCount=psAlarmFanTwoCount, partitionPreComprsnBytes=partitionPreComprsnBytes, partitionFirstSatisfiedPriority=partitionFirstSatisfiedPriority, partitionDynamicCapCount=partitionDynamicCapCount, linkShapingMode=linkShapingMode, classWebResponse3XX=classWebResponse3XX, partitionSchedDropPktCountHi=partitionSchedDropPktCountHi, linkNonComprsnBytesHi=linkNonComprsnBytesHi, psAlarmStandby=psAlarmStandby, linkRateAllocations=linkRateAllocations, classTcpConnExits=classTcpConnExits, linkTotalRxBytesHi=linkTotalRxBytesHi, linkPreComprsnBytesHi=linkPreComprsnBytesHi, linkTcpConnDenies=linkTcpConnDenies, linkPeakGuaranteedRateFlows=linkPeakGuaranteedRateFlows, classPkts=classPkts, partitionCommittmentFailures=partitionCommittmentFailures, linkUdpConnExits=linkUdpConnExits, partitionPeakTcpConns=partitionPeakTcpConns, partitionLateDropPktCountHi=partitionLateDropPktCountHi, classReTxTosses=classReTxTosses, packetShaper_9500=packetShaper_9500, partitionPeakRateFlows=partitionPeakRateFlows, classWebResponse2XX=classWebResponse2XX, partitionSchedDropByteCountHi=partitionSchedDropByteCountHi, psAlarmCfgFileCount=psAlarmCfgFileCount, partitionReTxByteCountHi=partitionReTxByteCountHi, packetShaper_1500=packetShaper_1500, trapDestRemove=trapDestRemove, linkTcpConnAborts=linkTcpConnAborts, className=className, linkReTxTosses=linkReTxTosses, partitionLinkDirection=partitionLinkDirection, linkTcpConnRefuses=linkTcpConnRefuses, partitionTcpConnTimeouts=partitionTcpConnTimeouts, partitionTcpConnExits=partitionTcpConnExits, classPeakTcpConns=classPeakTcpConns, psAlarmPowerSystemOneStatus=psAlarmPowerSystemOneStatus, linkTxPktDrops=linkTxPktDrops, psAlarmCfgFile=psAlarmCfgFile, userEventTrapThreshold=userEventTrapThreshold, partitionLateDropByteCountHi=partitionLateDropByteCountHi, psClasses=psClasses, classTcpConnIgnores=classTcpConnIgnores, partitionDynamicLiveUserCount=partitionDynamicLiveUserCount, psAlarmInsideLinkCount=psAlarmInsideLinkCount, partitionFrameBytesHi=partitionFrameBytesHi, psFeatureHighAvDeviceDownStatus=psFeatureHighAvDeviceDownStatus, classTcpConnRefuses=classTcpConnRefuses, partitionPreComprsnBytesHi=partitionPreComprsnBytesHi, linkTcpConnIgnores=linkTcpConnIgnores)
mibBuilder.exportSymbols("PACKETEER-MIB", linkDataPkts=linkDataPkts, classByteCountHi=classByteCountHi, psFeatureHighAvDeviceDown=psFeatureHighAvDeviceDown, linkPkts=linkPkts, products=products, packetShaper_asm90=packetShaper_asm90, psSettings=psSettings, classNonComprsnBytesHi=classNonComprsnBytesHi, psAgentEvent=psAgentEvent, psShapingStatusOper=psShapingStatusOper, agentEventTrapType=agentEventTrapType, linkMacSameSidePkts=linkMacSameSidePkts, userEventTrapExpression=userEventTrapExpression, linkTxErrors=linkTxErrors, linkSize=linkSize, linkPeakPostCompressionRate=linkPeakPostCompressionRate, packetShaper_asm110=packetShaper_asm110, classCirFails=classCirFails, classClientFloodBlock=classClientFloodBlock, psAlarmFanFourStatus=psAlarmFanFourStatus, psAlarmMeasurementEngineCount=psAlarmMeasurementEngineCount, classPktExchangeTime=classPktExchangeTime, psAlarmMeasurementEngine=psAlarmMeasurementEngine)
