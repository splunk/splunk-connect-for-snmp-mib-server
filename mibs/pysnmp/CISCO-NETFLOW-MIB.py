#
# PySNMP MIB module CISCO-NETFLOW-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-NETFLOW-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:51:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InterfaceIndexOrZero, InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex", "ifIndex")
InetAddressType, InetAddress, InetAddressPrefixLength, InetAutonomousSystemNumber, InetPortNumber = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress", "InetAddressPrefixLength", "InetAutonomousSystemNumber", "InetPortNumber")
VlanIndex, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIndex")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
TimeTicks, Unsigned32, Counter64, NotificationType, IpAddress, Integer32, MibIdentifier, Bits, ModuleIdentity, Gauge32, Counter32, ObjectIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Unsigned32", "Counter64", "NotificationType", "IpAddress", "Integer32", "MibIdentifier", "Bits", "ModuleIdentity", "Gauge32", "Counter32", "ObjectIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, RowStatus, TextualConvention, TimeStamp, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention", "TimeStamp", "TruthValue")
ciscoNetflowMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 387))
ciscoNetflowMIB.setRevisions(('2006-04-27 00:00', '2006-04-20 00:00', '2005-08-30 00:00', '2005-03-27 00:00', '2004-05-18 00:00', '2004-01-09 00:00',))
if mibBuilder.loadTexts: ciscoNetflowMIB.setLastUpdated('200604270000Z')
if mibBuilder.loadTexts: ciscoNetflowMIB.setOrganization('Cisco Systems, Inc.')
ciscoNetflowMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 387, 0))
ciscoNetflowMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 387, 1))
ciscoNetflowMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 387, 2))
cnfCacheInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 1))
cnfExportInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 2))
cnfExportStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 4))
cnfProtocolStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 5))
cnfExportTemplate = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 6))
cnfTopFlows = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7))
class NfInterfaceDirectionTypes(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("interfaceDirNone", 0), ("interfaceDirIngress", 1), ("interfaceDirEgress", 2), ("interfaceDirBoth", 3))

class NfCacheTypes(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 23))
    namedValues = NamedValues(("main", 0), ("as", 1), ("protocolPort", 2), ("sourcePrefix", 3), ("destinationPrefix", 4), ("prefix", 5), ("destinationOnly", 6), ("sourceDestination", 7), ("fullFlow", 8), ("asTos", 9), ("protocolPortTos", 10), ("sourcePrefixTos", 11), ("destinationPrefixTos", 12), ("prefixTos", 13), ("prefixPort", 14), ("bgpNexthopTos", 15), ("expBgpPrefix", 23))

class NfProtocolTypes(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))
    namedValues = NamedValues(("tcpTelnet", 1), ("tcpFtp", 2), ("tcpFtpd", 3), ("tcpWww", 4), ("tcpSmtp", 5), ("tcpX", 6), ("tcpBgp", 7), ("tcpNntp", 8), ("tcpFrag", 9), ("tcpOther", 10), ("udpDns", 11), ("udpNtp", 12), ("udpTftp", 13), ("udpFrag", 14), ("udpOther", 15), ("icmp", 16), ("igmp", 17), ("ipInIp", 18), ("ipv6InIp", 19), ("gre", 20), ("ipOther", 21), ("all", 22))

class NfTemplateTypes(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("template", 1), ("optionTemplate", 2))

class NfTopFlowsSortTypes(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("noSort", 1), ("byPackets", 2), ("byBytes", 3))

class NfFlowDirectionTypes(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("flowDirNone", 0), ("flowDirIngress", 1), ("flowDirEgress", 2))

cnfCIInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 1, 1), )
if mibBuilder.loadTexts: cnfCIInterfaceTable.setStatus('current')
cnfCIInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cnfCIInterfaceEntry.setStatus('current')
cnfCINetflowEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 1, 1, 1, 1), NfInterfaceDirectionTypes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfCINetflowEnable.setStatus('current')
cnfCIMcastNetflowEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 1, 1, 1, 2), NfInterfaceDirectionTypes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfCIMcastNetflowEnable.setStatus('current')
cnfCICacheTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 1, 2), )
if mibBuilder.loadTexts: cnfCICacheTable.setStatus('current')
cnfCICacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-NETFLOW-MIB", "cnfCICacheType"))
if mibBuilder.loadTexts: cnfCICacheEntry.setStatus('current')
cnfCICacheType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 1, 2, 1, 1), NfCacheTypes())
if mibBuilder.loadTexts: cnfCICacheType.setStatus('current')
cnfCICacheEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 1, 2, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfCICacheEnable.setStatus('current')
cnfCICacheEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfCICacheEntries.setStatus('current')
cnfCIActiveFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfCIActiveFlows.setStatus('current')
cnfCIInactiveFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfCIInactiveFlows.setStatus('current')
cnfCIActiveTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 1, 2, 1, 6), Unsigned32()).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfCIActiveTimeOut.setStatus('current')
cnfCIInactiveTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 1, 2, 1, 7), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfCIInactiveTimeOut.setStatus('current')
cnfCIMinSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 1, 2, 1, 8), InetAddressPrefixLength()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfCIMinSourceMask.setStatus('current')
cnfCIMinDestinationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 1, 2, 1, 9), InetAddressPrefixLength()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfCIMinDestinationMask.setStatus('current')
cnfCIBridgedFlowStatsCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 1, 3), )
if mibBuilder.loadTexts: cnfCIBridgedFlowStatsCtrlTable.setStatus('current')
cnfCIBridgedFlowStatsCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-NETFLOW-MIB", "cnfCIBridgedFlowVlan"))
if mibBuilder.loadTexts: cnfCIBridgedFlowStatsCtrlEntry.setStatus('current')
cnfCIBridgedFlowVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 1, 3, 1, 1), VlanIndex())
if mibBuilder.loadTexts: cnfCIBridgedFlowVlan.setStatus('current')
cnfCIBridgedFlowStatsCrtEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 1, 3, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfCIBridgedFlowStatsCrtEnable.setStatus('current')
cnfCIBridgedFlowStatsExpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 1, 3, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfCIBridgedFlowStatsExpEnable.setStatus('current')
cnfCIMcastNetflowRPFFailedEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfCIMcastNetflowRPFFailedEnable.setStatus('current')
cnfEIExportInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 2, 1), )
if mibBuilder.loadTexts: cnfEIExportInfoTable.setStatus('current')
cnfEIExportInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-NETFLOW-MIB", "cnfCICacheType"))
if mibBuilder.loadTexts: cnfEIExportInfoEntry.setStatus('current')
cnfEIExportVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfEIExportVersion.setStatus('current')
cnfEIPeerAS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 2, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfEIPeerAS.setStatus('current')
cnfEIOriginAS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 2, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfEIOriginAS.setStatus('current')
cnfEIBgpNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 2, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfEIBgpNextHop.setStatus('current')
cnfEIMaxCollectors = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 2, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfEIMaxCollectors.setStatus('current')
cnfEICollectorTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 2, 3), )
if mibBuilder.loadTexts: cnfEICollectorTable.setStatus('current')
cnfEICollectorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 2, 3, 1), ).setIndexNames((0, "CISCO-NETFLOW-MIB", "cnfCICacheType"), (0, "CISCO-NETFLOW-MIB", "cnfEICollectorAddressType"), (0, "CISCO-NETFLOW-MIB", "cnfEICollectorAddress"), (0, "CISCO-NETFLOW-MIB", "cnfEICollectorPort"))
if mibBuilder.loadTexts: cnfEICollectorEntry.setStatus('current')
cnfEICollectorAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 2, 3, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cnfEICollectorAddressType.setStatus('current')
cnfEICollectorAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 2, 3, 1, 2), InetAddress())
if mibBuilder.loadTexts: cnfEICollectorAddress.setStatus('current')
cnfEICollectorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 2, 3, 1, 3), InetPortNumber())
if mibBuilder.loadTexts: cnfEICollectorPort.setStatus('current')
cnfEICollectorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 2, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cnfEICollectorStatus.setStatus('current')
cnfESSampledPacket = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfESSampledPacket.setStatus('current')
cnfESExportRate = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 4, 2), Counter32()).setUnits('bytes per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfESExportRate.setStatus('current')
cnfESRecordsExported = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfESRecordsExported.setStatus('current')
cnfESPktsExported = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfESPktsExported.setStatus('current')
cnfESPktsFailed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfESPktsFailed.setStatus('current')
cnfESPktsDropped = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfESPktsDropped.setStatus('current')
cnfPSPacketSizeDistribution = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 5, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(52, 52)).setFixedLength(52)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfPSPacketSizeDistribution.setStatus('current')
cnfPSLastClearElapsedTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 5, 2), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfPSLastClearElapsedTime.setStatus('current')
cnfPSProtocolStatTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 5, 3), )
if mibBuilder.loadTexts: cnfPSProtocolStatTable.setStatus('current')
cnfPSProtocolStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 5, 3, 1), ).setIndexNames((0, "CISCO-NETFLOW-MIB", "cnfPSProtocolType"))
if mibBuilder.loadTexts: cnfPSProtocolStatEntry.setStatus('current')
cnfPSProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 5, 3, 1, 1), NfProtocolTypes())
if mibBuilder.loadTexts: cnfPSProtocolType.setStatus('current')
cnfPSExpiredFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 5, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfPSExpiredFlows.setStatus('current')
cnfPSPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 5, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfPSPackets.setStatus('current')
cnfPSBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 5, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfPSBytes.setStatus('current')
cnfPSActive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 5, 3, 1, 5), Counter64()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfPSActive.setStatus('current')
cnfPSInactive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 5, 3, 1, 6), Counter64()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfPSInactive.setStatus('current')
cnfTemplateOptionsFlag = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 6, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfTemplateOptionsFlag.setStatus('current')
cnfTemplateTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 6, 2), )
if mibBuilder.loadTexts: cnfTemplateTable.setStatus('current')
cnfTemplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 6, 2, 1), ).setIndexNames((0, "CISCO-NETFLOW-MIB", "cnfTemplateType"))
if mibBuilder.loadTexts: cnfTemplateEntry.setStatus('current')
cnfTemplateType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 6, 2, 1, 1), NfTemplateTypes())
if mibBuilder.loadTexts: cnfTemplateType.setStatus('current')
cnfTemplateAdded = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 6, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfTemplateAdded.setStatus('current')
cnfTemplateActive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 6, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfTemplateActive.setStatus('current')
cnfTemplateAgerPolls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 6, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfTemplateAgerPolls.setStatus('current')
cnfTemplateExportInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 6, 3), )
if mibBuilder.loadTexts: cnfTemplateExportInfoTable.setStatus('current')
cnfTemplateExportInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 6, 3, 1), ).setIndexNames((0, "CISCO-NETFLOW-MIB", "cnfCICacheType"))
if mibBuilder.loadTexts: cnfTemplateExportInfoEntry.setStatus('current')
cnfTemplateExportVer9Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 6, 3, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfTemplateExportVer9Enable.setStatus('current')
cnfTemplateExportVer9TplTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 6, 3, 1, 2), Unsigned32()).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfTemplateExportVer9TplTimeout.setStatus('current')
cnfTemplateExportVer9OptTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 6, 3, 1, 3), Unsigned32()).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfTemplateExportVer9OptTimeout.setStatus('current')
cnfTemplateExportVer9TplRefreshRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 6, 3, 1, 4), Unsigned32()).setUnits('packets').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfTemplateExportVer9TplRefreshRate.setStatus('current')
cnfTemplateExportVer9OptRefreshRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 6, 3, 1, 5), Unsigned32()).setUnits('packets').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfTemplateExportVer9OptRefreshRate.setStatus('current')
cnfTopFlowsTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfTopFlowsTimeStamp.setStatus('current')
cnfTopFlowsTopN = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfTopFlowsTopN.setStatus('current')
cnfTopFlowsAvailableFlows = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfTopFlowsAvailableFlows.setStatus('current')
cnfTopFlowsMatchingFlows = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfTopFlowsMatchingFlows.setStatus('current')
cnfTopFlowsTotalFlows = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfTopFlowsTotalFlows.setStatus('current')
cnfTopFlowsSortBy = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 6), NfTopFlowsSortTypes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfTopFlowsSortBy.setStatus('current')
cnfTopFlowsCacheTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 7), Unsigned32()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfTopFlowsCacheTimeout.setStatus('current')
cnfTopFlowsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 8), )
if mibBuilder.loadTexts: cnfTopFlowsTable.setStatus('current')
cnfTopFlowsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 8, 1), ).setIndexNames((0, "CISCO-NETFLOW-MIB", "cnfTopFlowsIndex"))
if mibBuilder.loadTexts: cnfTopFlowsTableEntry.setStatus('current')
cnfTopFlowsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 8, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cnfTopFlowsIndex.setStatus('current')
cnfTopFlowsSrcAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 8, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfTopFlowsSrcAddressType.setStatus('current')
cnfTopFlowsSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 8, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfTopFlowsSrcAddress.setStatus('current')
cnfTopFlowsSrcAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 8, 1, 4), InetAddressPrefixLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfTopFlowsSrcAddressMask.setStatus('current')
cnfTopFlowsDstAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 8, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfTopFlowsDstAddressType.setStatus('current')
cnfTopFlowsDstAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 8, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfTopFlowsDstAddress.setStatus('current')
cnfTopFlowsDstAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 8, 1, 7), InetAddressPrefixLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfTopFlowsDstAddressMask.setStatus('current')
cnfTopFlowsNhAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 8, 1, 8), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfTopFlowsNhAddressType.setStatus('current')
cnfTopFlowsNhAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 8, 1, 9), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfTopFlowsNhAddress.setStatus('current')
cnfTopFlowsSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 8, 1, 10), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfTopFlowsSrcPort.setStatus('current')
cnfTopFlowsDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 8, 1, 11), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfTopFlowsDstPort.setStatus('current')
cnfTopFlowsSrcAS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 8, 1, 12), InetAutonomousSystemNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfTopFlowsSrcAS.setStatus('current')
cnfTopFlowsDstAS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 8, 1, 13), InetAutonomousSystemNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfTopFlowsDstAS.setStatus('current')
cnfTopFlowsInputIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 8, 1, 14), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfTopFlowsInputIfIndex.setStatus('current')
cnfTopFlowsOutputIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 8, 1, 15), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfTopFlowsOutputIfIndex.setStatus('current')
cnfTopFlowsFirstSwitched = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 8, 1, 16), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfTopFlowsFirstSwitched.setStatus('current')
cnfTopFlowsLastSwitched = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 8, 1, 17), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfTopFlowsLastSwitched.setStatus('current')
cnfTopFlowsTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 8, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfTopFlowsTOS.setStatus('current')
cnfTopFlowsProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 8, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfTopFlowsProtocol.setStatus('current')
cnfTopFlowsTCPFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 8, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfTopFlowsTCPFlags.setStatus('current')
cnfTopFlowsSamplerID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 8, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfTopFlowsSamplerID.setStatus('current')
cnfTopFlowsClassID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 8, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfTopFlowsClassID.setStatus('current')
cnfTopFlowsFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 8, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfTopFlowsFlags.setStatus('current')
cnfTopFlowsBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 8, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfTopFlowsBytes.setStatus('current')
cnfTopFlowsPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 8, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfTopFlowsPackets.setStatus('current')
cnfTopFlowsVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 8, 1, 26), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfTopFlowsVlan.setStatus('current')
cnfTopFlowsMatchSrcAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 9), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfTopFlowsMatchSrcAddressType.setStatus('current')
cnfTopFlowsMatchSrcAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 10), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfTopFlowsMatchSrcAddress.setStatus('current')
cnfTopFlowsMatchSrcAddressMask = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 11), InetAddressPrefixLength()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfTopFlowsMatchSrcAddressMask.setStatus('current')
cnfTopFlowsMatchDstAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 12), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfTopFlowsMatchDstAddressType.setStatus('current')
cnfTopFlowsMatchDstAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 13), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfTopFlowsMatchDstAddress.setStatus('current')
cnfTopFlowsMatchDstAddressMask = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 14), InetAddressPrefixLength()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfTopFlowsMatchDstAddressMask.setStatus('current')
cnfTopFlowsMatchNhAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 15), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfTopFlowsMatchNhAddressType.setStatus('current')
cnfTopFlowsMatchNhAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 16), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfTopFlowsMatchNhAddress.setStatus('current')
cnfTopFlowsMatchNhAddressMask = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 17), InetAddressPrefixLength()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfTopFlowsMatchNhAddressMask.setStatus('current')
cnfTopFlowsMatchSrcPortLo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfTopFlowsMatchSrcPortLo.setStatus('current')
cnfTopFlowsMatchSrcPortHi = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfTopFlowsMatchSrcPortHi.setStatus('current')
cnfTopFlowsMatchDstPortLo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfTopFlowsMatchDstPortLo.setStatus('current')
cnfTopFlowsMatchDstPortHi = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfTopFlowsMatchDstPortHi.setStatus('current')
cnfTopFlowsMatchSrcAS = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfTopFlowsMatchSrcAS.setStatus('current')
cnfTopFlowsMatchDstAS = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfTopFlowsMatchDstAS.setStatus('current')
cnfTopFlowsMatchInputIf = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 24), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfTopFlowsMatchInputIf.setStatus('current')
cnfTopFlowsMatchOutputIf = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 25), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfTopFlowsMatchOutputIf.setStatus('current')
cnfTopFlowsMatchTOSByte = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfTopFlowsMatchTOSByte.setStatus('current')
cnfTopFlowsMatchProtocol = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfTopFlowsMatchProtocol.setStatus('current')
cnfTopFlowsMatchSampler = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfTopFlowsMatchSampler.setStatus('current')
cnfTopFlowsMatchClass = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 29), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfTopFlowsMatchClass.setStatus('current')
cnfTopFlowsMatchMinPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 30), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfTopFlowsMatchMinPackets.setStatus('current')
cnfTopFlowsMatchMaxPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 31), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfTopFlowsMatchMaxPackets.setStatus('current')
cnfTopFlowsMatchMinBytes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 32), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfTopFlowsMatchMinBytes.setStatus('current')
cnfTopFlowsMatchMaxBytes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 33), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfTopFlowsMatchMaxBytes.setStatus('current')
cnfTopFlowsMatchDirection = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 34), NfFlowDirectionTypes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfTopFlowsMatchDirection.setStatus('current')
cnfTopFlowsGenerate = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 35), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfTopFlowsGenerate.setStatus('current')
cnfTopFlowsReportAvailable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 36), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfTopFlowsReportAvailable.setStatus('current')
cnfTopFlowsNextGenActionEffect = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOp", 1), ("generate", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfTopFlowsNextGenActionEffect.setStatus('current')
cnfTopFlowsReportSource = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 387, 1, 7, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("hardware", 2), ("software", 3), ("both", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfTopFlowsReportSource.setStatus('current')
cnfMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 387, 2, 1))
cnfMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 387, 2, 2))
cnfMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 387, 2, 1, 1)).setObjects(("CISCO-NETFLOW-MIB", "cnfCacheInfoGroup"), ("CISCO-NETFLOW-MIB", "cnfProtocolStatGroup"), ("CISCO-NETFLOW-MIB", "cnfExportInfoGroup"), ("CISCO-NETFLOW-MIB", "cnfExportStatisticsGroup"), ("CISCO-NETFLOW-MIB", "cnfExportTemplateGroup"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cnfMIBCompliance = cnfMIBCompliance.setStatus('deprecated')
cnfMIBCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 387, 2, 1, 2)).setObjects(("CISCO-NETFLOW-MIB", "cnfCacheInfoGroup"), ("CISCO-NETFLOW-MIB", "cnfProtocolStatGroup"), ("CISCO-NETFLOW-MIB", "cnfExportInfoGroup"), ("CISCO-NETFLOW-MIB", "cnfExportStatisticsGroup"), ("CISCO-NETFLOW-MIB", "cnfExportTemplateGroup"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsDataGroup1"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsDataGroup2"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsVlanGroup"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsControlGroup1"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsControlGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cnfMIBCompliance1 = cnfMIBCompliance1.setStatus('deprecated')
cnfMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 387, 2, 1, 3)).setObjects(("CISCO-NETFLOW-MIB", "cnfCacheInfoGroup"), ("CISCO-NETFLOW-MIB", "cnfProtocolStatGroup"), ("CISCO-NETFLOW-MIB", "cnfExportInfoGroup"), ("CISCO-NETFLOW-MIB", "cnfExportStatisticsGroup"), ("CISCO-NETFLOW-MIB", "cnfExportTemplateGroup"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsDataGroup1"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsDataGroup2"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsVlanGroup"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsControlGroup1"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsControlGroup2"), ("CISCO-NETFLOW-MIB", "cnfMcastNetflowControlGroup"), ("CISCO-NETFLOW-MIB", "cnfBridgedFlowStatsCtrlGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cnfMIBCompliance2 = cnfMIBCompliance2.setStatus('deprecated')
cnfMIBCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 387, 2, 1, 4)).setObjects(("CISCO-NETFLOW-MIB", "cnfCacheInfoGroup"), ("CISCO-NETFLOW-MIB", "cnfProtocolStatGroup"), ("CISCO-NETFLOW-MIB", "cnfExportInfoGroup"), ("CISCO-NETFLOW-MIB", "cnfExportStatisticsGroup"), ("CISCO-NETFLOW-MIB", "cnfExportTemplateGroup"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsDataGroup1"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsDataGroup2"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsVlanGroup"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsControlGroup1"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsControlGroup2"), ("CISCO-NETFLOW-MIB", "cnfMcastNetflowControlGroup"), ("CISCO-NETFLOW-MIB", "cnfBridgedFlowStatsCtrlGroup"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsReportGenerateGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cnfMIBCompliance3 = cnfMIBCompliance3.setStatus('current')
cnfCacheInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 387, 2, 2, 1)).setObjects(("CISCO-NETFLOW-MIB", "cnfCINetflowEnable"), ("CISCO-NETFLOW-MIB", "cnfCICacheEnable"), ("CISCO-NETFLOW-MIB", "cnfCICacheEntries"), ("CISCO-NETFLOW-MIB", "cnfCIActiveFlows"), ("CISCO-NETFLOW-MIB", "cnfCIInactiveFlows"), ("CISCO-NETFLOW-MIB", "cnfCIActiveTimeOut"), ("CISCO-NETFLOW-MIB", "cnfCIInactiveTimeOut"), ("CISCO-NETFLOW-MIB", "cnfCIMinSourceMask"), ("CISCO-NETFLOW-MIB", "cnfCIMinDestinationMask"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cnfCacheInfoGroup = cnfCacheInfoGroup.setStatus('current')
cnfProtocolStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 387, 2, 2, 2)).setObjects(("CISCO-NETFLOW-MIB", "cnfPSPacketSizeDistribution"), ("CISCO-NETFLOW-MIB", "cnfPSLastClearElapsedTime"), ("CISCO-NETFLOW-MIB", "cnfPSExpiredFlows"), ("CISCO-NETFLOW-MIB", "cnfPSPackets"), ("CISCO-NETFLOW-MIB", "cnfPSBytes"), ("CISCO-NETFLOW-MIB", "cnfPSActive"), ("CISCO-NETFLOW-MIB", "cnfPSInactive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cnfProtocolStatGroup = cnfProtocolStatGroup.setStatus('current')
cnfExportInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 387, 2, 2, 3)).setObjects(("CISCO-NETFLOW-MIB", "cnfEIExportVersion"), ("CISCO-NETFLOW-MIB", "cnfEIPeerAS"), ("CISCO-NETFLOW-MIB", "cnfEIOriginAS"), ("CISCO-NETFLOW-MIB", "cnfEIBgpNextHop"), ("CISCO-NETFLOW-MIB", "cnfEIMaxCollectors"), ("CISCO-NETFLOW-MIB", "cnfEICollectorStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cnfExportInfoGroup = cnfExportInfoGroup.setStatus('current')
cnfExportStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 387, 2, 2, 5)).setObjects(("CISCO-NETFLOW-MIB", "cnfESSampledPacket"), ("CISCO-NETFLOW-MIB", "cnfESExportRate"), ("CISCO-NETFLOW-MIB", "cnfESRecordsExported"), ("CISCO-NETFLOW-MIB", "cnfESPktsExported"), ("CISCO-NETFLOW-MIB", "cnfESPktsFailed"), ("CISCO-NETFLOW-MIB", "cnfESPktsDropped"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cnfExportStatisticsGroup = cnfExportStatisticsGroup.setStatus('current')
cnfExportTemplateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 387, 2, 2, 6)).setObjects(("CISCO-NETFLOW-MIB", "cnfTemplateOptionsFlag"), ("CISCO-NETFLOW-MIB", "cnfTemplateAdded"), ("CISCO-NETFLOW-MIB", "cnfTemplateActive"), ("CISCO-NETFLOW-MIB", "cnfTemplateAgerPolls"), ("CISCO-NETFLOW-MIB", "cnfTemplateExportVer9Enable"), ("CISCO-NETFLOW-MIB", "cnfTemplateExportVer9TplTimeout"), ("CISCO-NETFLOW-MIB", "cnfTemplateExportVer9OptTimeout"), ("CISCO-NETFLOW-MIB", "cnfTemplateExportVer9TplRefreshRate"), ("CISCO-NETFLOW-MIB", "cnfTemplateExportVer9OptRefreshRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cnfExportTemplateGroup = cnfExportTemplateGroup.setStatus('current')
cnfTopFlowsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 387, 2, 2, 7)).setObjects(("CISCO-NETFLOW-MIB", "cnfTopFlowsTimeStamp"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsTopN"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsAvailableFlows"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchingFlows"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsTotalFlows"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsSortBy"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsCacheTimeout"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsSrcAddressType"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsSrcAddress"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsSrcAddressMask"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsDstAddressType"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsDstAddress"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsDstAddressMask"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsNhAddressType"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsNhAddress"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsSrcPort"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsDstPort"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsSrcAS"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsDstAS"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsInputIfIndex"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsOutputIfIndex"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsFirstSwitched"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsLastSwitched"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsTOS"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsProtocol"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsTCPFlags"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsSamplerID"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsClassID"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsFlags"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsBytes"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsPackets"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchSrcAddressType"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchSrcAddress"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchSrcAddressMask"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchDstAddressType"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchDstAddress"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchDstAddressMask"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchNhAddressType"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchNhAddress"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchNhAddressMask"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchSrcPortLo"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchSrcPortHi"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchDstPortLo"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchDstPortHi"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchSrcAS"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchDstAS"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchInputIf"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchOutputIf"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchTOSByte"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchProtocol"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchSampler"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchClass"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchMinPackets"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchMaxPackets"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchMinBytes"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchMaxBytes"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchDirection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cnfTopFlowsGroup = cnfTopFlowsGroup.setStatus('deprecated')
cnfTopFlowsDataGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 387, 2, 2, 8)).setObjects(("CISCO-NETFLOW-MIB", "cnfTopFlowsTimeStamp"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsTopN"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsAvailableFlows"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsTotalFlows"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsSortBy"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsSrcAddressType"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsSrcAddress"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsDstAddressType"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsDstAddress"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsSrcPort"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsDstPort"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsProtocol"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsBytes"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cnfTopFlowsDataGroup1 = cnfTopFlowsDataGroup1.setStatus('current')
cnfTopFlowsDataGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 387, 2, 2, 9)).setObjects(("CISCO-NETFLOW-MIB", "cnfTopFlowsCacheTimeout"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsSrcAddressMask"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsDstAddressMask"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsNhAddressType"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsNhAddress"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsSrcAS"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsDstAS"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsInputIfIndex"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsOutputIfIndex"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsFirstSwitched"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsLastSwitched"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsTOS"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsTCPFlags"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsSamplerID"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsClassID"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsFlags"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cnfTopFlowsDataGroup2 = cnfTopFlowsDataGroup2.setStatus('current')
cnfTopFlowsVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 387, 2, 2, 10)).setObjects(("CISCO-NETFLOW-MIB", "cnfTopFlowsVlan"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cnfTopFlowsVlanGroup = cnfTopFlowsVlanGroup.setStatus('current')
cnfTopFlowsControlGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 387, 2, 2, 11)).setObjects(("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchingFlows"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchSrcAddressType"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchSrcAddress"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchSrcAddressMask"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchDstAddressType"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchDstAddress"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchDstAddressMask"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchNhAddressType"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchNhAddress"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchNhAddressMask"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchSrcPortLo"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchSrcPortHi"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchDstPortLo"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchDstPortHi"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchSrcAS"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchDstAS"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchInputIf"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchOutputIf"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchTOSByte"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchProtocol"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchSampler"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchClass"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchMinPackets"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchMaxPackets"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchMinBytes"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchMaxBytes"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsMatchDirection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cnfTopFlowsControlGroup1 = cnfTopFlowsControlGroup1.setStatus('current')
cnfTopFlowsControlGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 387, 2, 2, 12)).setObjects(("CISCO-NETFLOW-MIB", "cnfTopFlowsGenerate"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsReportAvailable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cnfTopFlowsControlGroup2 = cnfTopFlowsControlGroup2.setStatus('current')
cnfMcastNetflowControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 387, 2, 2, 13)).setObjects(("CISCO-NETFLOW-MIB", "cnfCIMcastNetflowEnable"), ("CISCO-NETFLOW-MIB", "cnfCIMcastNetflowRPFFailedEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cnfMcastNetflowControlGroup = cnfMcastNetflowControlGroup.setStatus('current')
cnfBridgedFlowStatsCtrlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 387, 2, 2, 14)).setObjects(("CISCO-NETFLOW-MIB", "cnfCIBridgedFlowStatsCrtEnable"), ("CISCO-NETFLOW-MIB", "cnfCIBridgedFlowStatsExpEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cnfBridgedFlowStatsCtrlGroup = cnfBridgedFlowStatsCtrlGroup.setStatus('current')
cnfTopFlowsReportGenerateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 387, 2, 2, 15)).setObjects(("CISCO-NETFLOW-MIB", "cnfTopFlowsNextGenActionEffect"), ("CISCO-NETFLOW-MIB", "cnfTopFlowsReportSource"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cnfTopFlowsReportGenerateGroup = cnfTopFlowsReportGenerateGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-NETFLOW-MIB", cnfTopFlowsTopN=cnfTopFlowsTopN, cnfTopFlowsTotalFlows=cnfTopFlowsTotalFlows, cnfTopFlowsSrcAddressMask=cnfTopFlowsSrcAddressMask, cnfTopFlowsDstAddressMask=cnfTopFlowsDstAddressMask, cnfTopFlowsReportAvailable=cnfTopFlowsReportAvailable, cnfTopFlowsTableEntry=cnfTopFlowsTableEntry, cnfTopFlowsMatchDstAddressType=cnfTopFlowsMatchDstAddressType, cnfTopFlowsIndex=cnfTopFlowsIndex, cnfTopFlowsMatchTOSByte=cnfTopFlowsMatchTOSByte, cnfEICollectorEntry=cnfEICollectorEntry, cnfCIInactiveTimeOut=cnfCIInactiveTimeOut, cnfCIActiveFlows=cnfCIActiveFlows, cnfTopFlowsControlGroup2=cnfTopFlowsControlGroup2, cnfCacheInfoGroup=cnfCacheInfoGroup, cnfCIMcastNetflowRPFFailedEnable=cnfCIMcastNetflowRPFFailedEnable, cnfMIBGroups=cnfMIBGroups, cnfPSLastClearElapsedTime=cnfPSLastClearElapsedTime, cnfTopFlowsSrcAddressType=cnfTopFlowsSrcAddressType, cnfTopFlowsOutputIfIndex=cnfTopFlowsOutputIfIndex, cnfTopFlowsLastSwitched=cnfTopFlowsLastSwitched, cnfTopFlowsDstPort=cnfTopFlowsDstPort, cnfTemplateType=cnfTemplateType, cnfProtocolStatistics=cnfProtocolStatistics, cnfTopFlowsMatchDstPortHi=cnfTopFlowsMatchDstPortHi, cnfTopFlowsVlanGroup=cnfTopFlowsVlanGroup, cnfTopFlowsMatchSrcAddressType=cnfTopFlowsMatchSrcAddressType, cnfESPktsFailed=cnfESPktsFailed, ciscoNetflowMIBNotifs=ciscoNetflowMIBNotifs, cnfTemplateExportVer9TplRefreshRate=cnfTemplateExportVer9TplRefreshRate, cnfExportTemplateGroup=cnfExportTemplateGroup, cnfPSInactive=cnfPSInactive, cnfTopFlowsFirstSwitched=cnfTopFlowsFirstSwitched, ciscoNetflowMIB=ciscoNetflowMIB, cnfMIBCompliance2=cnfMIBCompliance2, ciscoNetflowMIBObjects=ciscoNetflowMIBObjects, cnfMIBCompliance1=cnfMIBCompliance1, cnfTopFlowsDstAddressType=cnfTopFlowsDstAddressType, cnfESRecordsExported=cnfESRecordsExported, cnfTemplateEntry=cnfTemplateEntry, cnfTopFlowsMatchSrcAddress=cnfTopFlowsMatchSrcAddress, cnfTopFlowsPackets=cnfTopFlowsPackets, cnfTemplateExportVer9TplTimeout=cnfTemplateExportVer9TplTimeout, cnfTopFlowsTCPFlags=cnfTopFlowsTCPFlags, cnfCIInterfaceTable=cnfCIInterfaceTable, cnfTopFlowsMatchMinPackets=cnfTopFlowsMatchMinPackets, cnfEICollectorPort=cnfEICollectorPort, cnfMIBCompliance3=cnfMIBCompliance3, cnfCICacheTable=cnfCICacheTable, cnfPSBytes=cnfPSBytes, cnfEICollectorAddressType=cnfEICollectorAddressType, cnfTopFlowsMatchSrcAddressMask=cnfTopFlowsMatchSrcAddressMask, cnfEIExportVersion=cnfEIExportVersion, cnfTopFlowsControlGroup1=cnfTopFlowsControlGroup1, cnfCIActiveTimeOut=cnfCIActiveTimeOut, cnfPSProtocolType=cnfPSProtocolType, cnfExportInfoGroup=cnfExportInfoGroup, PYSNMP_MODULE_ID=ciscoNetflowMIB, cnfEIMaxCollectors=cnfEIMaxCollectors, cnfESSampledPacket=cnfESSampledPacket, cnfPSProtocolStatTable=cnfPSProtocolStatTable, cnfTopFlowsNhAddress=cnfTopFlowsNhAddress, cnfExportStatisticsGroup=cnfExportStatisticsGroup, cnfTemplateTable=cnfTemplateTable, cnfCICacheType=cnfCICacheType, cnfTopFlowsReportGenerateGroup=cnfTopFlowsReportGenerateGroup, NfFlowDirectionTypes=NfFlowDirectionTypes, cnfTopFlowsMatchMinBytes=cnfTopFlowsMatchMinBytes, NfProtocolTypes=NfProtocolTypes, cnfTopFlowsSamplerID=cnfTopFlowsSamplerID, cnfTopFlowsDstAddress=cnfTopFlowsDstAddress, cnfTopFlowsGroup=cnfTopFlowsGroup, cnfCIBridgedFlowStatsExpEnable=cnfCIBridgedFlowStatsExpEnable, cnfEICollectorAddress=cnfEICollectorAddress, cnfTopFlowsMatchSampler=cnfTopFlowsMatchSampler, cnfExportStatistics=cnfExportStatistics, cnfCICacheEnable=cnfCICacheEnable, NfCacheTypes=NfCacheTypes, cnfCIMinDestinationMask=cnfCIMinDestinationMask, cnfEIExportInfoTable=cnfEIExportInfoTable, cnfEIBgpNextHop=cnfEIBgpNextHop, cnfTopFlowsBytes=cnfTopFlowsBytes, cnfTopFlowsDataGroup1=cnfTopFlowsDataGroup1, cnfExportTemplate=cnfExportTemplate, cnfEIPeerAS=cnfEIPeerAS, cnfCacheInfo=cnfCacheInfo, cnfTopFlowsMatchInputIf=cnfTopFlowsMatchInputIf, cnfTopFlowsClassID=cnfTopFlowsClassID, cnfMIBCompliances=cnfMIBCompliances, cnfTopFlowsTimeStamp=cnfTopFlowsTimeStamp, cnfTopFlowsMatchSrcPortLo=cnfTopFlowsMatchSrcPortLo, cnfTopFlowsMatchDstAS=cnfTopFlowsMatchDstAS, cnfTopFlowsMatchMaxBytes=cnfTopFlowsMatchMaxBytes, cnfTemplateAgerPolls=cnfTemplateAgerPolls, cnfESPktsDropped=cnfESPktsDropped, cnfPSExpiredFlows=cnfPSExpiredFlows, cnfTopFlowsMatchNhAddressMask=cnfTopFlowsMatchNhAddressMask, cnfPSPackets=cnfPSPackets, cnfCIBridgedFlowVlan=cnfCIBridgedFlowVlan, cnfTopFlowsGenerate=cnfTopFlowsGenerate, cnfTopFlowsMatchProtocol=cnfTopFlowsMatchProtocol, cnfTopFlowsSrcPort=cnfTopFlowsSrcPort, cnfTopFlowsSrcAddress=cnfTopFlowsSrcAddress, cnfTopFlowsMatchMaxPackets=cnfTopFlowsMatchMaxPackets, cnfTopFlowsReportSource=cnfTopFlowsReportSource, cnfTopFlowsSrcAS=cnfTopFlowsSrcAS, cnfTemplateExportInfoTable=cnfTemplateExportInfoTable, cnfTopFlowsMatchDstAddressMask=cnfTopFlowsMatchDstAddressMask, cnfTopFlowsMatchDstPortLo=cnfTopFlowsMatchDstPortLo, cnfTemplateActive=cnfTemplateActive, cnfTemplateExportVer9Enable=cnfTemplateExportVer9Enable, cnfTopFlowsDataGroup2=cnfTopFlowsDataGroup2, cnfTopFlowsMatchOutputIf=cnfTopFlowsMatchOutputIf, cnfTemplateExportVer9OptRefreshRate=cnfTemplateExportVer9OptRefreshRate, cnfCIBridgedFlowStatsCrtEnable=cnfCIBridgedFlowStatsCrtEnable, cnfExportInfo=cnfExportInfo, cnfTemplateExportVer9OptTimeout=cnfTemplateExportVer9OptTimeout, cnfTopFlowsMatchSrcAS=cnfTopFlowsMatchSrcAS, cnfEICollectorStatus=cnfEICollectorStatus, cnfCIMcastNetflowEnable=cnfCIMcastNetflowEnable, cnfCINetflowEnable=cnfCINetflowEnable, cnfTopFlowsMatchDstAddress=cnfTopFlowsMatchDstAddress, cnfTopFlowsAvailableFlows=cnfTopFlowsAvailableFlows, cnfTopFlowsProtocol=cnfTopFlowsProtocol, cnfCICacheEntries=cnfCICacheEntries, cnfTopFlowsMatchClass=cnfTopFlowsMatchClass, cnfCIBridgedFlowStatsCtrlEntry=cnfCIBridgedFlowStatsCtrlEntry, cnfCIInterfaceEntry=cnfCIInterfaceEntry, cnfTopFlowsNextGenActionEffect=cnfTopFlowsNextGenActionEffect, cnfTemplateExportInfoEntry=cnfTemplateExportInfoEntry, cnfEIOriginAS=cnfEIOriginAS, cnfTemplateOptionsFlag=cnfTemplateOptionsFlag, cnfProtocolStatGroup=cnfProtocolStatGroup, cnfTopFlowsSortBy=cnfTopFlowsSortBy, cnfESExportRate=cnfESExportRate, cnfBridgedFlowStatsCtrlGroup=cnfBridgedFlowStatsCtrlGroup, cnfTopFlows=cnfTopFlows, cnfTopFlowsVlan=cnfTopFlowsVlan, cnfCIInactiveFlows=cnfCIInactiveFlows, cnfMcastNetflowControlGroup=cnfMcastNetflowControlGroup, NfTopFlowsSortTypes=NfTopFlowsSortTypes, cnfMIBCompliance=cnfMIBCompliance, cnfTopFlowsMatchDirection=cnfTopFlowsMatchDirection, cnfTemplateAdded=cnfTemplateAdded, cnfCICacheEntry=cnfCICacheEntry, cnfTopFlowsMatchNhAddressType=cnfTopFlowsMatchNhAddressType, cnfCIBridgedFlowStatsCtrlTable=cnfCIBridgedFlowStatsCtrlTable, cnfTopFlowsNhAddressType=cnfTopFlowsNhAddressType, NfInterfaceDirectionTypes=NfInterfaceDirectionTypes, ciscoNetflowMIBConform=ciscoNetflowMIBConform, cnfEIExportInfoEntry=cnfEIExportInfoEntry, cnfPSProtocolStatEntry=cnfPSProtocolStatEntry, cnfTopFlowsMatchSrcPortHi=cnfTopFlowsMatchSrcPortHi, NfTemplateTypes=NfTemplateTypes, cnfPSPacketSizeDistribution=cnfPSPacketSizeDistribution, cnfCIMinSourceMask=cnfCIMinSourceMask, cnfESPktsExported=cnfESPktsExported, cnfEICollectorTable=cnfEICollectorTable, cnfTopFlowsCacheTimeout=cnfTopFlowsCacheTimeout, cnfTopFlowsTable=cnfTopFlowsTable, cnfTopFlowsMatchNhAddress=cnfTopFlowsMatchNhAddress, cnfTopFlowsTOS=cnfTopFlowsTOS, cnfTopFlowsFlags=cnfTopFlowsFlags, cnfTopFlowsInputIfIndex=cnfTopFlowsInputIfIndex, cnfTopFlowsMatchingFlows=cnfTopFlowsMatchingFlows, cnfPSActive=cnfPSActive, cnfTopFlowsDstAS=cnfTopFlowsDstAS)
