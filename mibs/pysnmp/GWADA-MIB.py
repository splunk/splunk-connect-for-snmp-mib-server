#
# PySNMP MIB module GWADA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GWADA-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:07:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Bits, NotificationType, ObjectIdentity, TimeTicks, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, IpAddress, Unsigned32, Counter32, iso, NotificationType, MibIdentifier, enterprises, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Bits", "NotificationType", "ObjectIdentity", "TimeTicks", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "IpAddress", "Unsigned32", "Counter32", "iso", "NotificationType", "MibIdentifier", "enterprises", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
novell = MibIdentifier((1, 3, 6, 1, 4, 1, 23))
mibDoc = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2))
gwada = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 39))
ada = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 39, 1))
adaTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 39, 2))
adaTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 39, 3))
adaTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 39, 1, 1), )
if mibBuilder.loadTexts: adaTable.setStatus('mandatory')
adaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 39, 1, 1, 1), ).setIndexNames((0, "GWADA-MIB", "adaIndex"))
if mibBuilder.loadTexts: adaEntry.setStatus('mandatory')
adaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 39, 1, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adaIndex.setStatus('mandatory')
adaName = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 39, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaName.setStatus('mandatory')
adaOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 39, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("domain", 2), ("postOffice", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adaOperationMode.setStatus('mandatory')
adaTotalPostOffices = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 39, 1, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaTotalPostOffices.setStatus('mandatory')
adaClosedPostOffices = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 39, 1, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaClosedPostOffices.setStatus('mandatory')
adaCompletedMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 39, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaCompletedMsgs.setStatus('mandatory')
adaErrorMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 39, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaErrorMsgs.setStatus('mandatory')
adaUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 39, 1, 1, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaUptime.setStatus('mandatory')
adaCurrentLogFile = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 39, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaCurrentLogFile.setStatus('mandatory')
adaLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 39, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("verbose", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adaLogLevel.setStatus('mandatory')
adaFileLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 39, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adaFileLogging.setStatus('mandatory')
adaMaxLogFileAge = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 39, 1, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adaMaxLogFileAge.setStatus('mandatory')
adaMaxLogDiskSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 39, 1, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adaMaxLogDiskSpace.setStatus('mandatory')
adaRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 39, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adaRestart.setStatus('mandatory')
adaGUID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 39, 1, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 36))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaGUID.setStatus('mandatory')
adaOS = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 39, 1, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaOS.setStatus('mandatory')
adaVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 39, 1, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaVersion.setStatus('mandatory')
adaTrapTime = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 39, 2, 1), Integer32())
if mibBuilder.loadTexts: adaTrapTime.setStatus('mandatory')
adaFacilityName = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 39, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: adaFacilityName.setStatus('mandatory')
adaFacilityLink = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 39, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: adaFacilityLink.setStatus('mandatory')
adaRecoveredDB = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 39, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: adaRecoveredDB.setStatus('mandatory')
adaStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 39, 3) + (0,1)).setObjects(("GWADA-MIB", "adaTrapTime"), ("GWADA-MIB", "adaName"), ("GWADA-MIB", "adaGUID"))
adaShutdownTrap = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 39, 3) + (0,2)).setObjects(("GWADA-MIB", "adaTrapTime"), ("GWADA-MIB", "adaName"), ("GWADA-MIB", "adaGUID"))
adaFacilityBlockedTrap = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 39, 3) + (0,3)).setObjects(("GWADA-MIB", "adaTrapTime"), ("GWADA-MIB", "adaFacilityLink"), ("GWADA-MIB", "adaFacilityName"), ("GWADA-MIB", "adaGUID"))
adaFacilityOpenTrap = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 39, 3) + (0,4)).setObjects(("GWADA-MIB", "adaTrapTime"), ("GWADA-MIB", "adaFacilityLink"), ("GWADA-MIB", "adaFacilityName"), ("GWADA-MIB", "adaGUID"))
adaDBRecoverOkay = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 39, 3) + (0,5)).setObjects(("GWADA-MIB", "adaTrapTime"), ("GWADA-MIB", "adaRecoveredDB"), ("GWADA-MIB", "adaGUID"))
adaDBRecoverError = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 39, 3) + (0,6)).setObjects(("GWADA-MIB", "adaTrapTime"), ("GWADA-MIB", "adaRecoveredDB"), ("GWADA-MIB", "adaGUID"))
adaDBRecoverWarn = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 39, 3) + (0,7)).setObjects(("GWADA-MIB", "adaTrapTime"), ("GWADA-MIB", "adaRecoveredDB"), ("GWADA-MIB", "adaGUID"))
adaRestartTrap = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 39, 3) + (0,8)).setObjects(("GWADA-MIB", "adaTrapTime"), ("GWADA-MIB", "adaFacilityName"), ("GWADA-MIB", "adaGUID"))
mibBuilder.exportSymbols("GWADA-MIB", adaName=adaName, novell=novell, gwada=gwada, adaIndex=adaIndex, adaRestart=adaRestart, adaFacilityOpenTrap=adaFacilityOpenTrap, adaErrorMsgs=adaErrorMsgs, adaMaxLogDiskSpace=adaMaxLogDiskSpace, adaVersion=adaVersion, mibDoc=mibDoc, adaLogLevel=adaLogLevel, adaOperationMode=adaOperationMode, adaTrapInfo=adaTrapInfo, adaOS=adaOS, ada=ada, adaShutdownTrap=adaShutdownTrap, adaRestartTrap=adaRestartTrap, adaCompletedMsgs=adaCompletedMsgs, adaFacilityName=adaFacilityName, adaTotalPostOffices=adaTotalPostOffices, adaTable=adaTable, adaRecoveredDB=adaRecoveredDB, adaTraps=adaTraps, adaFileLogging=adaFileLogging, adaStartTrap=adaStartTrap, adaMaxLogFileAge=adaMaxLogFileAge, adaGUID=adaGUID, adaEntry=adaEntry, adaFacilityLink=adaFacilityLink, adaDBRecoverWarn=adaDBRecoverWarn, adaUptime=adaUptime, adaDBRecoverError=adaDBRecoverError, adaClosedPostOffices=adaClosedPostOffices, adaDBRecoverOkay=adaDBRecoverOkay, adaFacilityBlockedTrap=adaFacilityBlockedTrap, adaTrapTime=adaTrapTime, adaCurrentLogFile=adaCurrentLogFile)
