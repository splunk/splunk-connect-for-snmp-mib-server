#
# PySNMP MIB module DLB-802DOT11-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DLB-802DOT11-EXT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:32:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
dlbMgmt, = mibBuilder.importSymbols("DELIBERANT-MIB", "dlbMgmt")
ifIndex, InterfaceIndex, ifPhysAddress = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex", "ifPhysAddress")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysLocation, = mibBuilder.importSymbols("SNMPv2-MIB", "sysLocation")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, iso, Counter64, ObjectIdentity, IpAddress, Bits, Integer32, Unsigned32, MibIdentifier, NotificationType, TimeTicks, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "iso", "Counter64", "ObjectIdentity", "IpAddress", "Bits", "Integer32", "Unsigned32", "MibIdentifier", "NotificationType", "TimeTicks", "ModuleIdentity")
TruthValue, DisplayString, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention", "MacAddress")
dlb802dot11ExtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 32761, 3, 5))
dlb802dot11ExtMIB.setRevisions(('2010-03-31 00:00', '2009-05-15 00:00', '2008-12-12 00:00',))
if mibBuilder.loadTexts: dlb802dot11ExtMIB.setLastUpdated('201003310000Z')
if mibBuilder.loadTexts: dlb802dot11ExtMIB.setOrganization('Deliberant')
dlb802dot11ExtMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 32761, 3, 5, 1))
dlbDot11Notifs = MibIdentifier((1, 3, 6, 1, 4, 1, 32761, 3, 5, 1, 0))
dlbDot11Info = MibIdentifier((1, 3, 6, 1, 4, 1, 32761, 3, 5, 1, 1))
dlbDot11Conf = MibIdentifier((1, 3, 6, 1, 4, 1, 32761, 3, 5, 1, 2))
dlbDot11Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 32761, 3, 5, 1, 3))
dlbDot11IfConfTable = MibTable((1, 3, 6, 1, 4, 1, 32761, 3, 5, 1, 2, 1), )
if mibBuilder.loadTexts: dlbDot11IfConfTable.setStatus('current')
dlbDot11IfConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 32761, 3, 5, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dlbDot11IfConfEntry.setStatus('current')
dlbDot11IfParentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 5, 1, 2, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbDot11IfParentIndex.setStatus('current')
dlbDot11IfProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 5, 1, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbDot11IfProtocol.setStatus('current')
dlbDot11IfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 5, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("auto", 0), ("adhoc", 1), ("managed", 2), ("master", 3), ("repeater", 4), ("secondary", 5), ("monitor", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbDot11IfMode.setStatus('current')
dlbDot11IfESSID = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 5, 1, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbDot11IfESSID.setStatus('current')
dlbDot11IfAccessPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 5, 1, 2, 1, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbDot11IfAccessPoint.setStatus('current')
dlbDot11IfCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 5, 1, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbDot11IfCountryCode.setStatus('current')
dlbDot11IfFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 5, 1, 2, 1, 1, 7), Integer32()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbDot11IfFrequency.setStatus('current')
dlbDot11IfChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 5, 1, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbDot11IfChannel.setStatus('current')
dlbDot11IfChannelBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 5, 1, 2, 1, 1, 9), Integer32()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbDot11IfChannelBandwidth.setStatus('current')
dlbDot11IfTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 5, 1, 2, 1, 1, 10), Gauge32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbDot11IfTxPower.setStatus('current')
dlbDot11IfBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 5, 1, 2, 1, 1, 11), Gauge32()).setUnits('kbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbDot11IfBitRate.setStatus('current')
dlbDot11IfLinkQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 5, 1, 2, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbDot11IfLinkQuality.setStatus('current')
dlbDot11IfMaxLinkQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 5, 1, 2, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbDot11IfMaxLinkQuality.setStatus('current')
dlbDot11IfSignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 5, 1, 2, 1, 1, 14), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbDot11IfSignalLevel.setStatus('current')
dlbDot11IfNoiseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 5, 1, 2, 1, 1, 15), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbDot11IfNoiseLevel.setStatus('current')
dlbDot11IfAssocNodeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 5, 1, 2, 1, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbDot11IfAssocNodeCount.setStatus('current')
dlbDot11IfErrStatsTable = MibTable((1, 3, 6, 1, 4, 1, 32761, 3, 5, 1, 3, 1), )
if mibBuilder.loadTexts: dlbDot11IfErrStatsTable.setStatus('current')
dlbDot11IfErrStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 32761, 3, 5, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dlbDot11IfErrStatsEntry.setStatus('current')
dlbDot11IfRxInvalidNWID = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 5, 1, 3, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbDot11IfRxInvalidNWID.setStatus('current')
dlbDot11IfRxInvalidCrypt = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 5, 1, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbDot11IfRxInvalidCrypt.setStatus('current')
dlbDot11IfRxInvalidFrag = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 5, 1, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbDot11IfRxInvalidFrag.setStatus('current')
dlbDot11IfTxExcessiveRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 5, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbDot11IfTxExcessiveRetries.setStatus('current')
dlbDot11IfInvalidMisc = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 5, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbDot11IfInvalidMisc.setStatus('current')
dlbDot11IfMissedBeacons = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 5, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbDot11IfMissedBeacons.setStatus('current')
dlbDot11RemoteNodeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 32761, 3, 5, 1, 3, 2), )
if mibBuilder.loadTexts: dlbDot11RemoteNodeStatsTable.setStatus('current')
dlbDot11RemoteNodeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 32761, 3, 5, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DLB-802DOT11-EXT-MIB", "dlbDot11RmtNodeMacAddress"))
if mibBuilder.loadTexts: dlbDot11RemoteNodeStatsEntry.setStatus('current')
dlbDot11RmtNodeMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 5, 1, 3, 2, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbDot11RmtNodeMacAddress.setStatus('current')
dlbDot11RmtNodeAssociated = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 5, 1, 3, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbDot11RmtNodeAssociated.setStatus('current')
dlbDot11RmtNodeTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 5, 1, 3, 2, 1, 3), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbDot11RmtNodeTxBytes.setStatus('current')
dlbDot11RmtNodeRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 5, 1, 3, 2, 1, 4), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbDot11RmtNodeRxBytes.setStatus('current')
dlbDot11RmtNodeAssocTime = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 5, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbDot11RmtNodeAssocTime.setStatus('current')
dlbDot11RmtNodeDisassocTime = MibTableColumn((1, 3, 6, 1, 4, 1, 32761, 3, 5, 1, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlbDot11RmtNodeDisassocTime.setStatus('current')
dlbFrequencyChange = NotificationType((1, 3, 6, 1, 4, 1, 32761, 3, 5, 1, 0, 1)).setObjects(("SNMPv2-MIB", "sysLocation"), ("IF-MIB", "ifIndex"), ("DLB-802DOT11-EXT-MIB", "dlbDot11IfFrequency"))
if mibBuilder.loadTexts: dlbFrequencyChange.setStatus('current')
dlbNoiseThresholdReached = NotificationType((1, 3, 6, 1, 4, 1, 32761, 3, 5, 1, 0, 2)).setObjects(("SNMPv2-MIB", "sysLocation"), ("IF-MIB", "ifIndex"), ("DLB-802DOT11-EXT-MIB", "dlbDot11IfNoiseLevel"))
if mibBuilder.loadTexts: dlbNoiseThresholdReached.setStatus('current')
dlbRemoteNodeConnected = NotificationType((1, 3, 6, 1, 4, 1, 32761, 3, 5, 1, 0, 3)).setObjects(("SNMPv2-MIB", "sysLocation"), ("IF-MIB", "ifPhysAddress"), ("IF-MIB", "ifIndex"), ("DLB-802DOT11-EXT-MIB", "dlbDot11RmtNodeMacAddress"))
if mibBuilder.loadTexts: dlbRemoteNodeConnected.setStatus('current')
dlbRemoteNodeDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 32761, 3, 5, 1, 0, 4)).setObjects(("SNMPv2-MIB", "sysLocation"), ("IF-MIB", "ifPhysAddress"), ("IF-MIB", "ifIndex"), ("DLB-802DOT11-EXT-MIB", "dlbDot11RmtNodeMacAddress"))
if mibBuilder.loadTexts: dlbRemoteNodeDisconnected.setStatus('current')
dlbLinkQualThresholdReached = NotificationType((1, 3, 6, 1, 4, 1, 32761, 3, 5, 1, 0, 5)).setObjects(("SNMPv2-MIB", "sysLocation"), ("IF-MIB", "ifIndex"), ("DLB-802DOT11-EXT-MIB", "dlbDot11IfLinkQuality"))
if mibBuilder.loadTexts: dlbLinkQualThresholdReached.setStatus('current')
mibBuilder.exportSymbols("DLB-802DOT11-EXT-MIB", dlbDot11IfMode=dlbDot11IfMode, dlbDot11IfChannelBandwidth=dlbDot11IfChannelBandwidth, dlbRemoteNodeConnected=dlbRemoteNodeConnected, dlbDot11IfChannel=dlbDot11IfChannel, dlbDot11IfAssocNodeCount=dlbDot11IfAssocNodeCount, dlbDot11RmtNodeRxBytes=dlbDot11RmtNodeRxBytes, dlbDot11RmtNodeDisassocTime=dlbDot11RmtNodeDisassocTime, dlbDot11IfParentIndex=dlbDot11IfParentIndex, dlbDot11Stats=dlbDot11Stats, dlbDot11IfCountryCode=dlbDot11IfCountryCode, dlbDot11IfInvalidMisc=dlbDot11IfInvalidMisc, dlbDot11RmtNodeAssocTime=dlbDot11RmtNodeAssocTime, dlbNoiseThresholdReached=dlbNoiseThresholdReached, dlbDot11RmtNodeMacAddress=dlbDot11RmtNodeMacAddress, dlbDot11IfMissedBeacons=dlbDot11IfMissedBeacons, dlbDot11IfESSID=dlbDot11IfESSID, dlbDot11IfRxInvalidFrag=dlbDot11IfRxInvalidFrag, dlbDot11IfNoiseLevel=dlbDot11IfNoiseLevel, dlbDot11IfMaxLinkQuality=dlbDot11IfMaxLinkQuality, dlbDot11RmtNodeTxBytes=dlbDot11RmtNodeTxBytes, dlbDot11IfRxInvalidCrypt=dlbDot11IfRxInvalidCrypt, dlb802dot11ExtMIBObjects=dlb802dot11ExtMIBObjects, dlbDot11IfProtocol=dlbDot11IfProtocol, dlbDot11Info=dlbDot11Info, dlbRemoteNodeDisconnected=dlbRemoteNodeDisconnected, dlbFrequencyChange=dlbFrequencyChange, dlbDot11IfRxInvalidNWID=dlbDot11IfRxInvalidNWID, dlbDot11IfConfTable=dlbDot11IfConfTable, dlbDot11IfLinkQuality=dlbDot11IfLinkQuality, dlbDot11RemoteNodeStatsEntry=dlbDot11RemoteNodeStatsEntry, dlbDot11IfConfEntry=dlbDot11IfConfEntry, dlb802dot11ExtMIB=dlb802dot11ExtMIB, dlbDot11IfAccessPoint=dlbDot11IfAccessPoint, PYSNMP_MODULE_ID=dlb802dot11ExtMIB, dlbDot11IfTxExcessiveRetries=dlbDot11IfTxExcessiveRetries, dlbDot11RmtNodeAssociated=dlbDot11RmtNodeAssociated, dlbDot11Notifs=dlbDot11Notifs, dlbDot11IfErrStatsEntry=dlbDot11IfErrStatsEntry, dlbDot11IfSignalLevel=dlbDot11IfSignalLevel, dlbDot11IfBitRate=dlbDot11IfBitRate, dlbDot11IfFrequency=dlbDot11IfFrequency, dlbDot11RemoteNodeStatsTable=dlbDot11RemoteNodeStatsTable, dlbDot11IfErrStatsTable=dlbDot11IfErrStatsTable, dlbDot11Conf=dlbDot11Conf, dlbLinkQualThresholdReached=dlbLinkQualThresholdReached, dlbDot11IfTxPower=dlbDot11IfTxPower)
