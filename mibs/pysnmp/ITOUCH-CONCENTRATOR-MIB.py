#
# PySNMP MIB module ITOUCH-CONCENTRATOR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ITOUCH-CONCENTRATOR-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:46:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
Letter, = mibBuilder.importSymbols("ITOUCH-CHASSIS-MIB", "Letter")
IOType, iTouch = mibBuilder.importSymbols("ITOUCH-MIB", "IOType", "iTouch")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, IpAddress, Bits, TimeTicks, Gauge32, Counter64, ObjectIdentity, Integer32, MibIdentifier, iso, Unsigned32, Counter32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "IpAddress", "Bits", "TimeTicks", "Gauge32", "Counter64", "ObjectIdentity", "Integer32", "MibIdentifier", "iso", "Unsigned32", "Counter32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
xConcentrator = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 25))
concentratorMode = MibScalar((1, 3, 6, 1, 4, 1, 33, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("twoRing", 1), ("fourRing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: concentratorMode.setStatus('mandatory')
concentratorManagement = MibScalar((1, 3, 6, 1, 4, 1, 33, 25, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: concentratorManagement.setStatus('mandatory')
concentratorBuildTopology = MibScalar((1, 3, 6, 1, 4, 1, 33, 25, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: concentratorBuildTopology.setStatus('mandatory')
concentratorTopologyLastBuild = MibScalar((1, 3, 6, 1, 4, 1, 33, 25, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorTopologyLastBuild.setStatus('mandatory')
concentratorChassisRingDefaults = MibScalar((1, 3, 6, 1, 4, 1, 33, 25, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: concentratorChassisRingDefaults.setStatus('mandatory')
concentratorSlotTable = MibTable((1, 3, 6, 1, 4, 1, 33, 25, 6), )
if mibBuilder.loadTexts: concentratorSlotTable.setStatus('mandatory')
concentratorSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 25, 6, 1), ).setIndexNames((0, "ITOUCH-CONCENTRATOR-MIB", "concentratorSlotIndex"))
if mibBuilder.loadTexts: concentratorSlotEntry.setStatus('mandatory')
concentratorSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorSlotIndex.setStatus('mandatory')
concentratorSlotIOType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 6, 1, 2), IOType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorSlotIOType.setStatus('mandatory')
concentratorSlotIOFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorSlotIOFirmwareVersion.setStatus('mandatory')
concentratorSlotIOOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("loadRequested", 1), ("loading", 2), ("dumpRequested", 3), ("dumping", 4), ("paramRequested", 5), ("paramLoading", 6), ("running", 7), ("initializing", 8), ("attended", 9), ("internal10", 10), ("internal11", 11), ("inhibited", 12), ("maxserverCard", 13), ("invalidConfigStorage", 14), ("securityLockdown", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorSlotIOOperStatus.setStatus('mandatory')
concentratorSlotUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 6, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorSlotUptime.setStatus('mandatory')
concentratorSlotNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorSlotNumPorts.setStatus('mandatory')
concentratorSlotRingTable = MibTable((1, 3, 6, 1, 4, 1, 33, 25, 7), )
if mibBuilder.loadTexts: concentratorSlotRingTable.setStatus('mandatory')
concentratorSlotRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 25, 7, 1), ).setIndexNames((0, "ITOUCH-CONCENTRATOR-MIB", "concentratorSlotIndex"), (0, "ITOUCH-CONCENTRATOR-MIB", "concentratorSlotRingIndex"))
if mibBuilder.loadTexts: concentratorSlotRingEntry.setStatus('mandatory')
concentratorSlotSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorSlotSlotIndex.setStatus('mandatory')
concentratorSlotRingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorSlotRingIndex.setStatus('mandatory')
concentratorSlotRingAdminName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: concentratorSlotRingAdminName.setStatus('mandatory')
concentratorSlotRingAdminSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mbps4", 1), ("mbps16", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: concentratorSlotRingAdminSpeed.setStatus('mandatory')
concentratorSlotRingAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isolated", 1), ("inserted", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: concentratorSlotRingAdminState.setStatus('mandatory')
concentratorSlotRingZero = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: concentratorSlotRingZero.setStatus('mandatory')
concentratorSlotRingSinceZero = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 7, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorSlotRingSinceZero.setStatus('mandatory')
concentratorSlotRingChassisRing = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 7, 1, 8), Letter()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: concentratorSlotRingChassisRing.setStatus('mandatory')
concentratorSlotRingOperName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 7, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorSlotRingOperName.setStatus('mandatory')
concentratorSlotRingOperSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mbps4", 1), ("mbps16", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorSlotRingOperSpeed.setStatus('mandatory')
concentratorSlotRingOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isolated", 1), ("inserted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorSlotRingOperState.setStatus('mandatory')
concentratorSlotRingChassisRingsAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 7, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorSlotRingChassisRingsAllowed.setStatus('mandatory')
concentratorChassisRingTable = MibTable((1, 3, 6, 1, 4, 1, 33, 25, 8), )
if mibBuilder.loadTexts: concentratorChassisRingTable.setStatus('mandatory')
concentratorChassisRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 25, 8, 1), ).setIndexNames((0, "ITOUCH-CONCENTRATOR-MIB", "concentratorChassisRingIndex"))
if mibBuilder.loadTexts: concentratorChassisRingEntry.setStatus('mandatory')
concentratorChassisRingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 8, 1, 1), Letter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorChassisRingIndex.setStatus('mandatory')
concentratorChassisRingName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 8, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: concentratorChassisRingName.setStatus('mandatory')
concentratorChassisRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mbps4", 1), ("mbps16", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: concentratorChassisRingSpeed.setStatus('mandatory')
concentratorChassisRingTopologyChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorChassisRingTopologyChanges.setStatus('mandatory')
concentratorChassisRingZero = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: concentratorChassisRingZero.setStatus('mandatory')
concentratorChassisRingSinceZero = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 8, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorChassisRingSinceZero.setStatus('mandatory')
concentratorChassisRingTopologyTable = MibTable((1, 3, 6, 1, 4, 1, 33, 25, 9), )
if mibBuilder.loadTexts: concentratorChassisRingTopologyTable.setStatus('mandatory')
concentratorChassisRingTopologyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 25, 9, 1), ).setIndexNames((0, "ITOUCH-CONCENTRATOR-MIB", "concentratorChassisRingTopologySlotIndex"), (0, "ITOUCH-CONCENTRATOR-MIB", "concentratorChassisRingTopologyRingIndex"))
if mibBuilder.loadTexts: concentratorChassisRingTopologyEntry.setStatus('mandatory')
concentratorChassisRingTopologySlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorChassisRingTopologySlotIndex.setStatus('mandatory')
concentratorChassisRingTopologyRingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 9, 1, 2), Letter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorChassisRingTopologyRingIndex.setStatus('mandatory')
concentratorChassisRingTopologyWrapUp = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unwrap", 1), ("wrap", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorChassisRingTopologyWrapUp.setStatus('mandatory')
concentratorChassisRingTopologyWrapDown = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unwrap", 1), ("wrap", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorChassisRingTopologyWrapDown.setStatus('mandatory')
concentratorChassisRingTopologyUpState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorChassisRingTopologyUpState.setStatus('mandatory')
concentratorChassisRingTopologyDownState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorChassisRingTopologyDownState.setStatus('mandatory')
concentratorChassisRingTopologySegment = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorChassisRingTopologySegment.setStatus('mandatory')
concentratorChassisRingTopologyName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 9, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorChassisRingTopologyName.setStatus('mandatory')
concentratorChassisRingTopologySpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mbps4", 1), ("mbps16", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorChassisRingTopologySpeed.setStatus('mandatory')
concentratorChassisRingTopologyCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 9, 1, 10), IOType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorChassisRingTopologyCardType.setStatus('mandatory')
concentratorChassisRingTopologyAutoUpChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 9, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorChassisRingTopologyAutoUpChanges.setStatus('mandatory')
concentratorChassisRingTopologyAutoDownChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 9, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorChassisRingTopologyAutoDownChanges.setStatus('mandatory')
concentratorPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 25, 10), )
if mibBuilder.loadTexts: concentratorPortTable.setStatus('mandatory')
concentratorPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 25, 10, 1), ).setIndexNames((0, "ITOUCH-CONCENTRATOR-MIB", "concentratorSlotIndex"), (0, "ITOUCH-CONCENTRATOR-MIB", "concentratorPortIndex"))
if mibBuilder.loadTexts: concentratorPortEntry.setStatus('mandatory')
concentratorPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorPortSlotIndex.setStatus('mandatory')
concentratorPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorPortIndex.setStatus('mandatory')
concentratorPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: concentratorPortName.setStatus('mandatory')
concentratorPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rj45", 1), ("fiber", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorPortType.setStatus('mandatory')
concentratorPortZero = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: concentratorPortZero.setStatus('mandatory')
concentratorPortSinceZero = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 10, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorPortSinceZero.setStatus('mandatory')
concentratorPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: concentratorPortAdminState.setStatus('mandatory')
concentratorPortOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inserted", 1), ("notInserted", 2), ("rateMismatch", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorPortOperState.setStatus('mandatory')
concentratorPortInsertions = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 10, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorPortInsertions.setStatus('mandatory')
concentratorPortInsertFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 10, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorPortInsertFailures.setStatus('mandatory')
concentratorPortAdminInsert = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("auto", 1), ("ring1", 2), ("ring2", 3), ("ring3", 4), ("ring4", 5), ("ring5", 6), ("ring6", 7), ("ring7", 8), ("ring8", 9), ("ring9", 10), ("ring10", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: concentratorPortAdminInsert.setStatus('mandatory')
concentratorPortOperInsert = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("notInserted", 1), ("ring1", 2), ("ring2", 3), ("ring3", 4), ("ring4", 5), ("ring5", 6), ("ring6", 7), ("ring7", 8), ("ring8", 9), ("ring9", 10), ("ring10", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorPortOperInsert.setStatus('mandatory')
concentratorPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mbs4", 1), ("mbs16", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorPortSpeed.setStatus('mandatory')
concentratorPortAdminLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("insert", 1), ("loopback", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: concentratorPortAdminLoopback.setStatus('mandatory')
concentratorPortStationType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 10, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("station", 1), ("trunk", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: concentratorPortStationType.setStatus('mandatory')
concentratorPortAdminTrunkInsert = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 10, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: concentratorPortAdminTrunkInsert.setStatus('mandatory')
concentratorPortSlotRingsAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 25, 10, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: concentratorPortSlotRingsAllowed.setStatus('mandatory')
mibBuilder.exportSymbols("ITOUCH-CONCENTRATOR-MIB", concentratorPortInsertFailures=concentratorPortInsertFailures, concentratorSlotRingAdminSpeed=concentratorSlotRingAdminSpeed, concentratorChassisRingTopologyUpState=concentratorChassisRingTopologyUpState, concentratorSlotEntry=concentratorSlotEntry, concentratorPortAdminLoopback=concentratorPortAdminLoopback, concentratorPortStationType=concentratorPortStationType, concentratorChassisRingTopologyCardType=concentratorChassisRingTopologyCardType, concentratorPortAdminState=concentratorPortAdminState, concentratorSlotRingChassisRing=concentratorSlotRingChassisRing, concentratorManagement=concentratorManagement, concentratorSlotTable=concentratorSlotTable, concentratorPortName=concentratorPortName, concentratorSlotUptime=concentratorSlotUptime, concentratorSlotRingEntry=concentratorSlotRingEntry, concentratorSlotIOFirmwareVersion=concentratorSlotIOFirmwareVersion, concentratorSlotRingAdminState=concentratorSlotRingAdminState, concentratorSlotRingZero=concentratorSlotRingZero, concentratorChassisRingIndex=concentratorChassisRingIndex, concentratorPortType=concentratorPortType, concentratorChassisRingTopologyRingIndex=concentratorChassisRingTopologyRingIndex, concentratorChassisRingTopologyDownState=concentratorChassisRingTopologyDownState, concentratorChassisRingTopologySlotIndex=concentratorChassisRingTopologySlotIndex, concentratorChassisRingTable=concentratorChassisRingTable, concentratorPortEntry=concentratorPortEntry, concentratorPortSlotRingsAllowed=concentratorPortSlotRingsAllowed, concentratorPortSpeed=concentratorPortSpeed, xConcentrator=xConcentrator, concentratorChassisRingTopologyWrapDown=concentratorChassisRingTopologyWrapDown, concentratorSlotRingOperState=concentratorSlotRingOperState, concentratorChassisRingTopologyName=concentratorChassisRingTopologyName, concentratorPortSinceZero=concentratorPortSinceZero, concentratorSlotRingChassisRingsAllowed=concentratorSlotRingChassisRingsAllowed, concentratorTopologyLastBuild=concentratorTopologyLastBuild, concentratorPortAdminTrunkInsert=concentratorPortAdminTrunkInsert, concentratorChassisRingDefaults=concentratorChassisRingDefaults, concentratorPortOperInsert=concentratorPortOperInsert, concentratorPortOperState=concentratorPortOperState, concentratorChassisRingTopologyWrapUp=concentratorChassisRingTopologyWrapUp, concentratorPortAdminInsert=concentratorPortAdminInsert, concentratorSlotNumPorts=concentratorSlotNumPorts, concentratorSlotRingIndex=concentratorSlotRingIndex, concentratorChassisRingSpeed=concentratorChassisRingSpeed, concentratorChassisRingTopologyChanges=concentratorChassisRingTopologyChanges, concentratorChassisRingTopologySegment=concentratorChassisRingTopologySegment, concentratorSlotRingOperSpeed=concentratorSlotRingOperSpeed, concentratorSlotSlotIndex=concentratorSlotSlotIndex, concentratorChassisRingName=concentratorChassisRingName, concentratorPortSlotIndex=concentratorPortSlotIndex, concentratorBuildTopology=concentratorBuildTopology, concentratorSlotIOOperStatus=concentratorSlotIOOperStatus, concentratorChassisRingSinceZero=concentratorChassisRingSinceZero, concentratorChassisRingTopologySpeed=concentratorChassisRingTopologySpeed, concentratorSlotRingAdminName=concentratorSlotRingAdminName, concentratorChassisRingEntry=concentratorChassisRingEntry, concentratorPortZero=concentratorPortZero, concentratorPortTable=concentratorPortTable, concentratorChassisRingTopologyAutoDownChanges=concentratorChassisRingTopologyAutoDownChanges, concentratorSlotIOType=concentratorSlotIOType, concentratorMode=concentratorMode, concentratorSlotIndex=concentratorSlotIndex, concentratorSlotRingTable=concentratorSlotRingTable, concentratorSlotRingSinceZero=concentratorSlotRingSinceZero, concentratorChassisRingTopologyEntry=concentratorChassisRingTopologyEntry, concentratorPortInsertions=concentratorPortInsertions, concentratorChassisRingZero=concentratorChassisRingZero, concentratorChassisRingTopologyAutoUpChanges=concentratorChassisRingTopologyAutoUpChanges, concentratorPortIndex=concentratorPortIndex, concentratorSlotRingOperName=concentratorSlotRingOperName, concentratorChassisRingTopologyTable=concentratorChassisRingTopologyTable)
