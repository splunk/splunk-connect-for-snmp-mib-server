#
# PySNMP MIB module CHS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CHS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:31:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, experimental, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, Counter32, Unsigned32, Bits, NotificationType, TimeTicks, iso, Counter64, ModuleIdentity, Integer32, IpAddress, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "experimental", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "Counter32", "Unsigned32", "Bits", "NotificationType", "TimeTicks", "iso", "Counter64", "ModuleIdentity", "Integer32", "IpAddress", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
usr = MibIdentifier((1, 3, 6, 1, 4, 1, 429))
nas = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1))
chs = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1))
uchasSlot = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 1))
uchasSlotTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 1, 1, 1), )
if mibBuilder.loadTexts: uchasSlotTable.setStatus('mandatory')
uchasSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 1, 1, 1, 1), ).setIndexNames((0, "CHS-MIB", "uchasSlotIndex"))
if mibBuilder.loadTexts: uchasSlotEntry.setStatus('mandatory')
uchasSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 37))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasSlotIndex.setStatus('mandatory')
uchasSlotModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 1, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasSlotModuleType.setStatus('mandatory')
uchasSlotLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 1, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasSlotLastChange.setStatus('mandatory')
uchasSlotModuleDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 124))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasSlotModuleDescr.setStatus('mandatory')
uchasSlotModuleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 124))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasSlotModuleVersion.setStatus('mandatory')
uchasSlotModuleSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasSlotModuleSerialNumber.setStatus('mandatory')
uchasSlotModuleProductCode = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasSlotModuleProductCode.setStatus('mandatory')
uchasSlotStatFeEna = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasSlotStatFeEna.setStatus('optional')
uchasSlotFeKey = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 22))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uchasSlotFeKey.setStatus('optional')
uchasSlotNacConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 1, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 160))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasSlotNacConfig.setStatus('optional')
uchasSlotSwitchSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasSlotSwitchSettings.setStatus('mandatory')
uchasSlotRamInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasSlotRamInstalled.setStatus('mandatory')
uchasSlotFlashInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasSlotFlashInstalled.setStatus('mandatory')
uchasEntity = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 2))
uchasEntityTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 1, 2, 1), )
if mibBuilder.loadTexts: uchasEntityTable.setStatus('mandatory')
uchasEntityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 1, 2, 1, 1), ).setIndexNames((0, "CHS-MIB", "uchasEntityIndex"))
if mibBuilder.loadTexts: uchasEntityEntry.setStatus('mandatory')
uchasEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasEntityIndex.setStatus('mandatory')
uchasEntityObjectID = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 2, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasEntityObjectID.setStatus('mandatory')
uchasEntityDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 124))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasEntityDescr.setStatus('mandatory')
uchasEntityVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 124))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasEntityVersion.setStatus('mandatory')
uchasEntityOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("outOfService", 2), ("testing", 3), ("operational", 4), ("failed", 5), ("loading", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasEntityOperStatus.setStatus('mandatory')
uchasEntityTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 2, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasEntityTimeStamp.setStatus('mandatory')
uchasConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 3))
uchasType = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 1, 3, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasType.setStatus('mandatory')
uchasDescr = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 1, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 124))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uchasDescr.setStatus('mandatory')
uchasDisplayName = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 1, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uchasDisplayName.setStatus('mandatory')
uchasPhysicalChanges = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 1, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasPhysicalChanges.setStatus('mandatory')
uchasFrontPanelLedStates = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 1, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasFrontPanelLedStates.setStatus('mandatory')
uchasFrontPanelLedColor = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 1, 3, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasFrontPanelLedColor.setStatus('mandatory')
uchasNicStates = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 1, 3, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasNicStates.setStatus('optional')
uchasPowerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 4))
uchasPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 1, 4, 1), )
if mibBuilder.loadTexts: uchasPowerSupplyTable.setStatus('optional')
uchasPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 1, 4, 1, 1), ).setIndexNames((0, "CHS-MIB", "uchasPowerSupplyIndex"))
if mibBuilder.loadTexts: uchasPowerSupplyEntry.setStatus('optional')
uchasPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasPowerSupplyIndex.setStatus('optional')
uchasPowerSupplyDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 124))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasPowerSupplyDescr.setStatus('optional')
uchasPowerSupplyOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("bad", 2), ("good", 3), ("empty", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasPowerSupplyOperStatus.setStatus('optional')
uchasPowerSupplyFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasPowerSupplyFailures.setStatus('optional')
uchasPowerSupplyOutTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 1, 4, 2), )
if mibBuilder.loadTexts: uchasPowerSupplyOutTable.setStatus('optional')
uchasPowerSupplyOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 1, 4, 2, 1), ).setIndexNames((0, "CHS-MIB", "uchasPowerSupplyOutPSIndex"), (0, "CHS-MIB", "uchasPowerSupplyOutIndex"))
if mibBuilder.loadTexts: uchasPowerSupplyOutEntry.setStatus('optional')
uchasPowerSupplyOutPSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasPowerSupplyOutPSIndex.setStatus('optional')
uchasPowerSupplyOutIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasPowerSupplyOutIndex.setStatus('optional')
uchasPowerSupplyOutStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("warning", 2), ("good", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasPowerSupplyOutStatus.setStatus('optional')
uchasPowerSupplyOutNominalVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasPowerSupplyOutNominalVolt.setStatus('optional')
uchasPowerSupplyOutOfferedVolt = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasPowerSupplyOutOfferedVolt.setStatus('optional')
uchasPowerSupplyOutWarnings = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasPowerSupplyOutWarnings.setStatus('optional')
uchasEnviron = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 5))
uchasEnvironTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 1, 5, 1), )
if mibBuilder.loadTexts: uchasEnvironTable.setStatus('optional')
uchasEnvironEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 1, 5, 1, 1), ).setIndexNames((0, "CHS-MIB", "uchasEnvironIndex"))
if mibBuilder.loadTexts: uchasEnvironEntry.setStatus('optional')
uchasEnvironIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasEnvironIndex.setStatus('optional')
uchasEnvironSensor = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 5, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasEnvironSensor.setStatus('optional')
uchasEnvironStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("bad", 2), ("warning", 3), ("good", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasEnvironStatus.setStatus('optional')
uchasEnvironWarnings = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasEnvironWarnings.setStatus('optional')
uchasEnvironFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasEnvironFailures.setStatus('optional')
uchasKnownTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6))
uchasKnownChassis = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 1))
uchas17SlotChassis = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 1, 1))
uchas7SlotChassis = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 1, 2))
uchasKnownModules = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2))
uchasSlotEmpty = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 1))
uchasSlotUnknown = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 2))
uchasNetwMgtCard = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 3))
uchasDualT1NAC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 4))
uchasDualModemNAC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 5))
uchasQuadModemNAC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 6))
uchasTrGatewayNAC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 7))
uchasX25GatewayNAC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 8))
uchasDualV34ModemNAC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 9))
uchasQuadV32DigitalModemNAC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 10))
uchasQuadV32AnalogModemNAC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 11))
uchasQuadV32DigAnlModemNAC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 12))
uchasQuadV34DigModemNAC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 13))
uchasQuadV34AnlModemNAC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 14))
uchasQuadV34DigAnlModemNAC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 15))
uchasSingleT1NAC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 16))
uchasEthernetGatewayNAC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 17))
uchasAccessServer = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 18))
uchas486TrGatewayNAC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 19))
uchas486EthernetGatewayNAC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 20))
uchasDualRS232NAC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 22))
uchas486X25GatewayNAC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 23))
uchasApplicationServerNAC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 25))
uchasISDNGatewayNAC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 26))
uchasISDNpriT1NAC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 27))
uchasModemPoolManagmentNAC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 29))
uchasModemPoolNetserverNAC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 30))
uchasModemPoolV34ModemNAC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 31))
uchasModemPoolISDNNAC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 32))
uchasNTServerNAC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 33))
uchasQuadV34AnalogG2NAC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 34))
uchasQuadV34DigitalG2NAC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 35))
uchasQuadV34DigAnlgG2NAC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 36))
uchasNETServerFrameRelayNAC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 37))
uchasNETServerTokenRingNAC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 38))
uchasX2524ChannelNAC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 39))
uchasDualT1NIC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 1001))
uchasDualAlogMdmNIC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 1002))
uchasQuadDgtlMdmNIC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 1003))
uchasQuadAlogDgtlMdmNIC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 1004))
uchasTokenRingNIC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 1005))
uchasSingleT1NIC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 1006))
uchasEthernetNIC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 1007))
uchasShortHaulDualT1NIC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 1008))
uchasDualAlogMgdIntlMdmNIC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 1009))
uchasX25NIC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 1010))
uchasQuadAlogNonMgdMdmNIC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 1011))
uchasQuadAlogMgdIntlMdmNIC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 1012))
uchasQuadAlogNonMgdIntlMdmNIC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 1013))
uchasQuadLsdLiMgdMdmNIC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 1014))
uchasQuadLsdLiNonMgdMdmNIC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 1015))
uchasQuadLsdLiMgdIntlMdmNIC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 1016))
uchasQuadLsdLiNonMgdIntlMdmNIC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 1017))
uchasHSEthernetWithV35NIC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 1018))
uchasHSEthernetWithoutV35NIC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 1019))
uchasDualHighSpeedV35NIC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 1020))
uchasQuadV35RS232LowSpeedNIC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 1021))
uchasDualE1NIC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 1022))
uchasShortHaulDualE1NIC = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 2, 1023))
uchasKnownEntities = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 3))
uchasNetwMgtEntity = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 3, 1))
uchasDualT1Entity = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 3, 2))
uchasDS1Entity = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 3, 3))
uchasModemEntity = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 3, 4))
uchasDualStandardModemEntity = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 3, 5))
uchasHSTModemEntity = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 3, 6))
uchasV32ModemEntity = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 3, 7))
uchasTokenRingEntity = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 3, 8))
uchasX25GatewayEntity = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 3, 9))
uchasDualStandardV32TerboMdEnt = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 3, 10))
uchasV32TerboModemEntity = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 3, 11))
uchasV32TerboFaxModemEntity = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 3, 12))
uchasDualStandardV34Modem = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 3, 13))
uchasV34ModemEntity = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 3, 14))
uchasV34FaxModemEntity = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 3, 15))
uchasSingleT1Entity = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 3, 16))
uchasEthernetGatewayEntity = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 3, 17))
uchasX25GatewaySubnetEntity = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 3, 18))
uchasTokenRingAccSrvrEntity = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 3, 19))
uchasEthernetAccSrvrEntity = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 3, 20))
uchasDualRS232Entity = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 3, 22))
uchasEnetFRIsdnNetservrEntity = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 3, 23))
uchasIsdnPriT1Entity = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 3, 24))
uchasTknRngIsdnNetserverEntity = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 3, 25))
uchasEnetNetserverEntity = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 3, 26))
uchasIsdnPriE1Entity = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 3, 27))
uchasAnalogMdmNicEntity = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 3, 1001))
uchasWellKnownSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 4))
uchasSensorOther = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 4, 1))
uchasSensorTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 4, 2))
uchasSensorFans = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 6, 4, 3))
uchasCmd = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 7))
uchasCmdTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 1, 7, 1), )
if mibBuilder.loadTexts: uchasCmdTable.setStatus('mandatory')
uchasCmdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 1, 7, 1, 1), ).setIndexNames((0, "CHS-MIB", "uchasCmdSlotIndex"))
if mibBuilder.loadTexts: uchasCmdEntry.setStatus('mandatory')
uchasCmdSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasCmdSlotIndex.setStatus('mandatory')
uchasCmdMgtStationId = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 7, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uchasCmdMgtStationId.setStatus('mandatory')
uchasCmdReqId = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasCmdReqId.setStatus('mandatory')
uchasCmdFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noCommand", 1), ("removeFromService", 2), ("restoreToService", 3), ("hardwareReset", 4), ("softwareDownload", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uchasCmdFunction.setStatus('mandatory')
uchasCmdForce = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("force", 1), ("noForce", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uchasCmdForce.setStatus('mandatory')
uchasCmdParam = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 7, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uchasCmdParam.setStatus('mandatory')
uchasCmdResult = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("success", 2), ("inProgress", 3), ("notSupported", 4), ("unAbleToRun", 5), ("aborted", 6), ("failed", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasCmdResult.setStatus('mandatory')
uchasCmdCode = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 8, 12, 14, 20, 21, 22, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88))).clone(namedValues=NamedValues(("noError", 1), ("unable", 2), ("unrecognizedCommand", 6), ("slotEmpty", 8), ("noResponse", 12), ("connected", 14), ("unsupportedCommand", 20), ("nonManagedDevice", 21), ("deviceDisabled", 22), ("userInterfaceActive", 58), ("badFlashRomID", 61), ("badFlashVoltage", 62), ("flashEraseError", 63), ("eraseSequenceError", 64), ("eraseExecutionError", 65), ("receiveBufferOverflow", 66), ("badAddressInData", 67), ("badProgramVoltage", 68), ("programmingDataError", 69), ("programCodeError", 70), ("invalidCodeError", 71), ("romCrcBad", 72), ("pendingSoftwareDownload", 73), ("ramCrcBad", 74), ("invalidRomId", 75), ("sdlTrigger", 76), ("downloadingSdlFile", 77), ("crcTestingSdlFile", 78), ("queryWorkSpaceSize", 79), ("executeLoadedProgram", 80), ("erasingFlash", 81), ("downloadingNacFile", 82), ("resetingNac", 83), ("cardIdMismatch", 84), ("cardIdUnknown", 85), ("tftpTimeout", 86), ("flashEraseTimeout", 87), ("invalidFileHeader", 88)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasCmdCode.setStatus('mandatory')
uchasTrapEnable = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 8))
uchasModuleInsertedTrapEna = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uchasModuleInsertedTrapEna.setStatus('optional')
uchasModuleRemovedTrapEna = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uchasModuleRemovedTrapEna.setStatus('optional')
uchasPSUWarningTrapEna = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 1, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uchasPSUWarningTrapEna.setStatus('optional')
uchasPSUFailureTrapEna = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 1, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uchasPSUFailureTrapEna.setStatus('optional')
uchasTempWarningTrapEna = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 1, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uchasTempWarningTrapEna.setStatus('optional')
uchasFanFailureTrapEna = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 1, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uchasFanFailureTrapEna.setStatus('optional')
uchasEntityWatchdogTrapEna = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 1, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uchasEntityWatchdogTrapEna.setStatus('mandatory')
uchasEntityMgtBusFailTrapEna = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 1, 8, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uchasEntityMgtBusFailTrapEna.setStatus('mandatory')
uchasAutoResponse = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 9))
uchasArPsuVoltOutOfRange = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 1, 9, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uchasArPsuVoltOutOfRange.setStatus('optional')
uchasArPsuFailed = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 1, 9, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uchasArPsuFailed.setStatus('optional')
uchasArFanFailed = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 1, 9, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uchasArFanFailed.setStatus('optional')
uchasArHubTempOutOfRange = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 1, 9, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uchasArHubTempOutOfRange.setStatus('optional')
uchasArTimer1 = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 1, 9, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uchasArTimer1.setStatus('optional')
uchasArTimer2 = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 1, 9, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uchasArTimer2.setStatus('optional')
uchasArTimer3 = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 1, 9, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uchasArTimer3.setStatus('optional')
uchasArTimer4 = MibScalar((1, 3, 6, 1, 4, 1, 429, 1, 1, 9, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uchasArTimer4.setStatus('optional')
uchasArSlotTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 1, 9, 9), )
if mibBuilder.loadTexts: uchasArSlotTable.setStatus('optional')
uchasArSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 1, 9, 9, 1), ).setIndexNames((0, "CHS-MIB", "uchasArSlotIndex"))
if mibBuilder.loadTexts: uchasArSlotEntry.setStatus('optional')
uchasArSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 9, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 37))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasArSlotIndex.setStatus('optional')
uchasArModuleInserted = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 9, 9, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uchasArModuleInserted.setStatus('optional')
uchasArModuleReinit = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 9, 9, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uchasArModuleReinit.setStatus('optional')
uchasArModuleRemoved = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 9, 9, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uchasArModuleRemoved.setStatus('optional')
uchasArModuleNonoper = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 9, 9, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uchasArModuleNonoper.setStatus('optional')
uchasArModuleWatchdog = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 9, 9, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uchasArModuleWatchdog.setStatus('optional')
uchasArTimers = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 1, 10))
uchasArTimerTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 1, 10, 1), )
if mibBuilder.loadTexts: uchasArTimerTable.setStatus('optional')
uchasArTimerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 1, 10, 1, 1), ).setIndexNames((0, "CHS-MIB", "uchasArTimerIndex"))
if mibBuilder.loadTexts: uchasArTimerEntry.setStatus('optional')
uchasArTimerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasArTimerIndex.setStatus('optional')
uchasArTimerEna = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uchasArTimerEna.setStatus('optional')
uchasArTimerStartDate = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 10, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uchasArTimerStartDate.setStatus('optional')
uchasArTimerStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 10, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uchasArTimerStartTime.setStatus('optional')
uchasArTimerStopDate = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 10, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uchasArTimerStopDate.setStatus('optional')
uchasArTimerStopTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 10, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uchasArTimerStopTime.setStatus('optional')
uchasArTimerInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2678400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uchasArTimerInterval.setStatus('optional')
uchasArTimerState = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("init", 1), ("passive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasArTimerState.setStatus('optional')
uchasArTimerTriggers = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 1, 10, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uchasArTimerTriggers.setStatus('optional')
mibBuilder.exportSymbols("CHS-MIB", uchasPowerSupplyOutStatus=uchasPowerSupplyOutStatus, uchasConfig=uchasConfig, uchasEnvironEntry=uchasEnvironEntry, uchasKnownChassis=uchasKnownChassis, uchasQuadLsdLiMgdMdmNIC=uchasQuadLsdLiMgdMdmNIC, uchasPowerSupplyOutIndex=uchasPowerSupplyOutIndex, uchasCmdTable=uchasCmdTable, uchasArSlotTable=uchasArSlotTable, uchasDescr=uchasDescr, uchasArPsuFailed=uchasArPsuFailed, uchasEthernetNIC=uchasEthernetNIC, uchasArModuleRemoved=uchasArModuleRemoved, uchasISDNGatewayNAC=uchasISDNGatewayNAC, uchasSlotFeKey=uchasSlotFeKey, uchasV34ModemEntity=uchasV34ModemEntity, uchasEnviron=uchasEnviron, uchasShortHaulDualT1NIC=uchasShortHaulDualT1NIC, uchasSlotModuleVersion=uchasSlotModuleVersion, uchasISDNpriT1NAC=uchasISDNpriT1NAC, uchasKnownEntities=uchasKnownEntities, uchasTokenRingNIC=uchasTokenRingNIC, uchasNETServerTokenRingNAC=uchasNETServerTokenRingNAC, uchasCmdReqId=uchasCmdReqId, uchasEnetFRIsdnNetservrEntity=uchasEnetFRIsdnNetservrEntity, uchasEthernetGatewayNAC=uchasEthernetGatewayNAC, uchasArTimerStopTime=uchasArTimerStopTime, uchasPowerSupplyOutOfferedVolt=uchasPowerSupplyOutOfferedVolt, uchasPowerSupplyTable=uchasPowerSupplyTable, uchasPowerSupplyOperStatus=uchasPowerSupplyOperStatus, uchasArTimer2=uchasArTimer2, uchasShortHaulDualE1NIC=uchasShortHaulDualE1NIC, uchasType=uchasType, uchasKnownTypes=uchasKnownTypes, uchasHSTModemEntity=uchasHSTModemEntity, uchasCmd=uchasCmd, uchasArTimerStartDate=uchasArTimerStartDate, uchasDualRS232NAC=uchasDualRS232NAC, uchasSlotIndex=uchasSlotIndex, uchasSlotRamInstalled=uchasSlotRamInstalled, uchasDualT1NIC=uchasDualT1NIC, uchasModemPoolV34ModemNAC=uchasModemPoolV34ModemNAC, uchasEntity=uchasEntity, uchasSlotTable=uchasSlotTable, uchasSlotSwitchSettings=uchasSlotSwitchSettings, uchasArTimers=uchasArTimers, uchasSlotModuleSerialNumber=uchasSlotModuleSerialNumber, uchasDualStandardV32TerboMdEnt=uchasDualStandardV32TerboMdEnt, uchasSlotUnknown=uchasSlotUnknown, uchasArTimerState=uchasArTimerState, uchasSensorOther=uchasSensorOther, uchasSlotEmpty=uchasSlotEmpty, uchasSlot=uchasSlot, uchasQuadAlogNonMgdMdmNIC=uchasQuadAlogNonMgdMdmNIC, uchasArTimer4=uchasArTimer4, uchasNicStates=uchasNicStates, uchasAnalogMdmNicEntity=uchasAnalogMdmNicEntity, uchasDS1Entity=uchasDS1Entity, uchasDualV34ModemNAC=uchasDualV34ModemNAC, uchasArModuleInserted=uchasArModuleInserted, uchasPowerSupplyOutPSIndex=uchasPowerSupplyOutPSIndex, uchasV32ModemEntity=uchasV32ModemEntity, uchasArTimer1=uchasArTimer1, uchasEntityObjectID=uchasEntityObjectID, uchasEntityVersion=uchasEntityVersion, uchasQuadV35RS232LowSpeedNIC=uchasQuadV35RS232LowSpeedNIC, uchasX25NIC=uchasX25NIC, uchasV34FaxModemEntity=uchasV34FaxModemEntity, uchasQuadAlogDgtlMdmNIC=uchasQuadAlogDgtlMdmNIC, uchasApplicationServerNAC=uchasApplicationServerNAC, uchasDualAlogMdmNIC=uchasDualAlogMdmNIC, uchasSlotModuleDescr=uchasSlotModuleDescr, uchas7SlotChassis=uchas7SlotChassis, uchasEntityDescr=uchasEntityDescr, uchasQuadModemNAC=uchasQuadModemNAC, uchasArTimerStopDate=uchasArTimerStopDate, uchasSlotEntry=uchasSlotEntry, uchasPowerSupplyFailures=uchasPowerSupplyFailures, uchasTknRngIsdnNetserverEntity=uchasTknRngIsdnNetserverEntity, uchasNetwMgtEntity=uchasNetwMgtEntity, uchasDualModemNAC=uchasDualModemNAC, uchasQuadLsdLiMgdIntlMdmNIC=uchasQuadLsdLiMgdIntlMdmNIC, uchasSlotModuleType=uchasSlotModuleType, uchasX25GatewaySubnetEntity=uchasX25GatewaySubnetEntity, uchasFrontPanelLedColor=uchasFrontPanelLedColor, uchasCmdMgtStationId=uchasCmdMgtStationId, uchasSlotModuleProductCode=uchasSlotModuleProductCode, uchasEnvironTable=uchasEnvironTable, uchasQuadDgtlMdmNIC=uchasQuadDgtlMdmNIC, uchasQuadAlogMgdIntlMdmNIC=uchasQuadAlogMgdIntlMdmNIC, uchasSensorTemperature=uchasSensorTemperature, uchasPSUWarningTrapEna=uchasPSUWarningTrapEna, uchasQuadLsdLiNonMgdIntlMdmNIC=uchasQuadLsdLiNonMgdIntlMdmNIC, uchas486EthernetGatewayNAC=uchas486EthernetGatewayNAC, uchasQuadV32DigAnlModemNAC=uchasQuadV32DigAnlModemNAC, uchasSlotLastChange=uchasSlotLastChange, uchasEthernetAccSrvrEntity=uchasEthernetAccSrvrEntity, uchasX25GatewayEntity=uchasX25GatewayEntity, uchasModemPoolManagmentNAC=uchasModemPoolManagmentNAC, uchasSlotNacConfig=uchasSlotNacConfig, uchasCmdForce=uchasCmdForce, uchas486X25GatewayNAC=uchas486X25GatewayNAC, uchasArHubTempOutOfRange=uchasArHubTempOutOfRange, uchasHSEthernetWithV35NIC=uchasHSEthernetWithV35NIC, uchasEnvironWarnings=uchasEnvironWarnings, nas=nas, uchasKnownModules=uchasKnownModules, uchasAutoResponse=uchasAutoResponse, uchas486TrGatewayNAC=uchas486TrGatewayNAC, uchasNETServerFrameRelayNAC=uchasNETServerFrameRelayNAC, uchasWellKnownSensors=uchasWellKnownSensors, uchasArTimerTable=uchasArTimerTable, uchasPowerSupplyDescr=uchasPowerSupplyDescr, uchasDualT1Entity=uchasDualT1Entity, uchasPowerSupplyIndex=uchasPowerSupplyIndex, uchasCmdFunction=uchasCmdFunction, uchasModemEntity=uchasModemEntity, uchasArTimerStartTime=uchasArTimerStartTime, uchasV32TerboModemEntity=uchasV32TerboModemEntity, uchasEnvironIndex=uchasEnvironIndex, uchasEntityOperStatus=uchasEntityOperStatus, uchasDualStandardV34Modem=uchasDualStandardV34Modem, uchasEntityWatchdogTrapEna=uchasEntityWatchdogTrapEna, uchasPowerSupply=uchasPowerSupply, uchasQuadV34AnlModemNAC=uchasQuadV34AnlModemNAC, uchasEntityTimeStamp=uchasEntityTimeStamp, uchasHSEthernetWithoutV35NIC=uchasHSEthernetWithoutV35NIC, uchasDualE1NIC=uchasDualE1NIC, uchasQuadV32AnalogModemNAC=uchasQuadV32AnalogModemNAC, uchasArTimerIndex=uchasArTimerIndex, uchasQuadV34DigitalG2NAC=uchasQuadV34DigitalG2NAC, uchasArTimerTriggers=uchasArTimerTriggers, uchasModuleInsertedTrapEna=uchasModuleInsertedTrapEna, uchasModemPoolISDNNAC=uchasModemPoolISDNNAC, uchasDisplayName=uchasDisplayName, uchasEnvironStatus=uchasEnvironStatus, uchasEnvironFailures=uchasEnvironFailures, uchasArSlotEntry=uchasArSlotEntry, uchasX2524ChannelNAC=uchasX2524ChannelNAC, uchasPowerSupplyOutTable=uchasPowerSupplyOutTable, uchasDualRS232Entity=uchasDualRS232Entity, uchasQuadAlogNonMgdIntlMdmNIC=uchasQuadAlogNonMgdIntlMdmNIC, uchasCmdSlotIndex=uchasCmdSlotIndex, uchasQuadLsdLiNonMgdMdmNIC=uchasQuadLsdLiNonMgdMdmNIC, uchasTrGatewayNAC=uchasTrGatewayNAC, uchasModemPoolNetserverNAC=uchasModemPoolNetserverNAC, uchasSensorFans=uchasSensorFans, uchasTokenRingEntity=uchasTokenRingEntity, uchasEntityMgtBusFailTrapEna=uchasEntityMgtBusFailTrapEna, uchasSingleT1NAC=uchasSingleT1NAC, uchasIsdnPriE1Entity=uchasIsdnPriE1Entity, uchasModuleRemovedTrapEna=uchasModuleRemovedTrapEna, uchasEntityTable=uchasEntityTable, uchas17SlotChassis=uchas17SlotChassis, uchasArPsuVoltOutOfRange=uchasArPsuVoltOutOfRange, uchasDualHighSpeedV35NIC=uchasDualHighSpeedV35NIC, uchasSlotStatFeEna=uchasSlotStatFeEna, uchasDualAlogMgdIntlMdmNIC=uchasDualAlogMgdIntlMdmNIC, uchasV32TerboFaxModemEntity=uchasV32TerboFaxModemEntity, uchasEntityEntry=uchasEntityEntry, uchasQuadV34DigAnlModemNAC=uchasQuadV34DigAnlModemNAC, uchasArTimer3=uchasArTimer3, uchasTokenRingAccSrvrEntity=uchasTokenRingAccSrvrEntity, uchasCmdEntry=uchasCmdEntry, uchasCmdParam=uchasCmdParam, uchasTempWarningTrapEna=uchasTempWarningTrapEna, uchasCmdResult=uchasCmdResult, uchasArSlotIndex=uchasArSlotIndex, uchasArFanFailed=uchasArFanFailed, uchasQuadV34AnalogG2NAC=uchasQuadV34AnalogG2NAC, uchasPowerSupplyOutEntry=uchasPowerSupplyOutEntry, uchasEnetNetserverEntity=uchasEnetNetserverEntity, uchasX25GatewayNAC=uchasX25GatewayNAC, uchasEthernetGatewayEntity=uchasEthernetGatewayEntity, uchasPhysicalChanges=uchasPhysicalChanges, uchasEnvironSensor=uchasEnvironSensor, uchasSlotFlashInstalled=uchasSlotFlashInstalled, uchasDualT1NAC=uchasDualT1NAC, uchasNetwMgtCard=uchasNetwMgtCard, uchasNTServerNAC=uchasNTServerNAC, uchasIsdnPriT1Entity=uchasIsdnPriT1Entity, uchasArModuleNonoper=uchasArModuleNonoper, uchasSingleT1Entity=uchasSingleT1Entity, uchasArModuleReinit=uchasArModuleReinit, uchasSingleT1NIC=uchasSingleT1NIC, uchasCmdCode=uchasCmdCode, usr=usr, uchasDualStandardModemEntity=uchasDualStandardModemEntity, uchasPSUFailureTrapEna=uchasPSUFailureTrapEna, uchasPowerSupplyOutNominalVolt=uchasPowerSupplyOutNominalVolt, uchasArModuleWatchdog=uchasArModuleWatchdog, uchasQuadV34DigModemNAC=uchasQuadV34DigModemNAC, uchasEntityIndex=uchasEntityIndex, uchasQuadV34DigAnlgG2NAC=uchasQuadV34DigAnlgG2NAC, uchasArTimerEna=uchasArTimerEna, uchasPowerSupplyEntry=uchasPowerSupplyEntry, uchasFrontPanelLedStates=uchasFrontPanelLedStates, uchasQuadV32DigitalModemNAC=uchasQuadV32DigitalModemNAC, uchasArTimerInterval=uchasArTimerInterval, uchasPowerSupplyOutWarnings=uchasPowerSupplyOutWarnings, chs=chs, uchasArTimerEntry=uchasArTimerEntry, uchasTrapEnable=uchasTrapEnable, uchasFanFailureTrapEna=uchasFanFailureTrapEna, uchasAccessServer=uchasAccessServer)
