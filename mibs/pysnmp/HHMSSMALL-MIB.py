#
# PySNMP MIB module HHMSSMALL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HHMSSMALL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:17:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, Unsigned32, Counter64, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, iso, ModuleIdentity, NotificationType, MibIdentifier, ObjectIdentity, NotificationType, Integer32, IpAddress, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Unsigned32", "Counter64", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "iso", "ModuleIdentity", "NotificationType", "MibIdentifier", "ObjectIdentity", "NotificationType", "Integer32", "IpAddress", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
internet = MibIdentifier((1, 3, 6, 1))
directory = MibIdentifier((1, 3, 6, 1, 1))
mgmt = MibIdentifier((1, 3, 6, 1, 2))
experimental = MibIdentifier((1, 3, 6, 1, 3))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
class DisplayString(OctetString):
    pass

akcp = MibIdentifier((1, 3, 6, 1, 4, 1, 3854))
hhmsagent = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1))
hhmsSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2))
hhmsSensorArray = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2))
hhmsSensorArrayEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1))
hhmsSensorArrayTemp = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16))
hhmsSensorArrayTempEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1))
hhmsSensorArrayTempDegree = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorArrayTempDegree.setStatus('mandatory')
hhmsSensorArrayTempStatus = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorArrayTempStatus.setStatus('mandatory')
hhmsSensorArrayHumidity = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17))
hhmsSensorArrayHumidityEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1))
hhmsSensorArrayHumidityPercent = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorArrayHumidityPercent.setStatus('mandatory')
hhmsSensorArrayHumidityStatus = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorArrayHumidityStatus.setStatus('mandatory')
hhmsSensorArraySwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18))
hhmsSensorArraySwitchEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1))
hhmsSensorArraySwitchStatus = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 2, 2, 1, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("critical", 4), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorArraySwitchStatus.setStatus('mandatory')
hhmsAgentTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 3854, 1, 7))
hhmsSensorStatus = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noStatus", 1), ("normal", 2), ("highWarning", 3), ("highCritical", 4), ("lowWarning", 5), ("lowCritical", 6), ("sensorError", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorStatus.setStatus('mandatory')
hhmsSensorValue = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorValue.setStatus('mandatory')
hhmsSensorLevelExceeded = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorLevelExceeded.setStatus('mandatory')
hhmsSensorIndex = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorIndex.setStatus('mandatory')
hhmsSensorName = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorName.setStatus('mandatory')
hhmsSensorDescription = MibScalar((1, 3, 6, 1, 4, 1, 3854, 1, 7, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hhmsSensorDescription.setStatus('mandatory')
hhmsUnknownStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,0))
hhmsNormalStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,1))
hhmsWarningStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,2))
hhmsCriticalStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,3))
hhmsDownStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,4))
hhmsTemperatureStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,10)).setObjects(("HHMSSMALL-MIB", "hhmsSensorStatus"), ("HHMSSMALL-MIB", "hhmsSensorValue"), ("HHMSSMALL-MIB", "hhmsSensorLevelExceeded"), ("HHMSSMALL-MIB", "hhmsSensorIndex"), ("HHMSSMALL-MIB", "hhmsSensorName"), ("HHMSSMALL-MIB", "hhmsSensorDescription"))
hhmsHumidityStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,20)).setObjects(("HHMSSMALL-MIB", "hhmsSensorStatus"), ("HHMSSMALL-MIB", "hhmsSensorValue"), ("HHMSSMALL-MIB", "hhmsSensorLevelExceeded"), ("HHMSSMALL-MIB", "hhmsSensorIndex"), ("HHMSSMALL-MIB", "hhmsSensorName"), ("HHMSSMALL-MIB", "hhmsSensorDescription"))
hhmsSwitchStatus = NotificationType((1, 3, 6, 1, 4, 1, 3854, 1) + (0,30)).setObjects(("HHMSSMALL-MIB", "hhmsSensorStatus"), ("HHMSSMALL-MIB", "hhmsSensorValue"), ("HHMSSMALL-MIB", "hhmsSensorLevelExceeded"), ("HHMSSMALL-MIB", "hhmsSensorIndex"), ("HHMSSMALL-MIB", "hhmsSensorName"), ("HHMSSMALL-MIB", "hhmsSensorDescription"))
mibBuilder.exportSymbols("HHMSSMALL-MIB", hhmsSensorArrayHumidityPercent=hhmsSensorArrayHumidityPercent, hhmsWarningStatus=hhmsWarningStatus, enterprises=enterprises, hhmsSensorLevelExceeded=hhmsSensorLevelExceeded, hhmsUnknownStatus=hhmsUnknownStatus, hhmsSensorArrayHumidity=hhmsSensorArrayHumidity, mgmt=mgmt, hhmsSensorArrayHumidityStatus=hhmsSensorArrayHumidityStatus, hhmsSensorDescription=hhmsSensorDescription, hhmsDownStatus=hhmsDownStatus, private=private, DisplayString=DisplayString, hhmsSensorArrayTempEntry=hhmsSensorArrayTempEntry, hhmsSensorArray=hhmsSensorArray, hhmsSensorValue=hhmsSensorValue, hhmsSensorArrayTempStatus=hhmsSensorArrayTempStatus, hhmsTemperatureStatus=hhmsTemperatureStatus, hhmsHumidityStatus=hhmsHumidityStatus, hhmsSensorArraySwitch=hhmsSensorArraySwitch, hhmsSensorArrayTemp=hhmsSensorArrayTemp, akcp=akcp, hhmsSensorArrayTempDegree=hhmsSensorArrayTempDegree, hhmsAgentTraps=hhmsAgentTraps, hhmsSensorName=hhmsSensorName, hhmsSensorArraySwitchEntry=hhmsSensorArraySwitchEntry, hhmsNormalStatus=hhmsNormalStatus, hhmsSensorArrayHumidityEntry=hhmsSensorArrayHumidityEntry, internet=internet, experimental=experimental, hhmsSensorArrayEntry=hhmsSensorArrayEntry, hhmsCriticalStatus=hhmsCriticalStatus, hhmsSensor=hhmsSensor, directory=directory, hhmsSensorArraySwitchStatus=hhmsSensorArraySwitchStatus, hhmsSensorStatus=hhmsSensorStatus, hhmsagent=hhmsagent, hhmsSwitchStatus=hhmsSwitchStatus, hhmsSensorIndex=hhmsSensorIndex)
