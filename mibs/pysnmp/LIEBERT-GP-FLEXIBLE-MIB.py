#
# PySNMP MIB module LIEBERT-GP-FLEXIBLE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LIEBERT-GP-FLEXIBLE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:56:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
lgpFlexible, liebertFlexibleModuleReg = mibBuilder.importSymbols("LIEBERT-GP-REGISTRATION-MIB", "lgpFlexible", "liebertFlexibleModuleReg")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Counter32, Gauge32, Unsigned32, IpAddress, ObjectIdentity, TimeTicks, MibIdentifier, Integer32, iso, Counter64, Bits, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter32", "Gauge32", "Unsigned32", "IpAddress", "ObjectIdentity", "TimeTicks", "MibIdentifier", "Integer32", "iso", "Counter64", "Bits", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
liebertGlobalProductsFlexibleModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 1, 10, 1))
liebertGlobalProductsFlexibleModule.setRevisions(('2013-05-14 00:00',))
if mibBuilder.loadTexts: liebertGlobalProductsFlexibleModule.setLastUpdated('201305140000Z')
if mibBuilder.loadTexts: liebertGlobalProductsFlexibleModule.setOrganization('Emerson Network Power/Liebert Corporation')
lgpFlexibleTableCount = MibScalar((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 9, 10), Unsigned32()).setUnits('Count').setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpFlexibleTableCount.setStatus('current')
lgpFlexibleBasicTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 9, 20), )
if mibBuilder.loadTexts: lgpFlexibleBasicTable.setStatus('current')
lgpFlexibleBasicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 9, 20, 1), ).setIndexNames((1, "LIEBERT-GP-FLEXIBLE-MIB", "lgpFlexibleEntryIndex"))
if mibBuilder.loadTexts: lgpFlexibleBasicEntry.setStatus('current')
lgpFlexibleEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 9, 20, 1, 1), ObjectIdentifier())
if mibBuilder.loadTexts: lgpFlexibleEntryIndex.setStatus('current')
lgpFlexibleEntryDataLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 9, 20, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpFlexibleEntryDataLabel.setStatus('current')
lgpFlexibleEntryValue = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 9, 20, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpFlexibleEntryValue.setStatus('current')
lgpFlexibleEntryUnitsOfMeasure = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 9, 20, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpFlexibleEntryUnitsOfMeasure.setStatus('current')
lgpFlexibleExtendedTable = MibTable((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 9, 30), )
if mibBuilder.loadTexts: lgpFlexibleExtendedTable.setStatus('current')
lgpFlexibleExtendedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 9, 30, 1), )
lgpFlexibleBasicEntry.registerAugmentions(("LIEBERT-GP-FLEXIBLE-MIB", "lgpFlexibleExtendedEntry"))
lgpFlexibleExtendedEntry.setIndexNames(*lgpFlexibleBasicEntry.getIndexNames())
if mibBuilder.loadTexts: lgpFlexibleExtendedEntry.setStatus('current')
lgpFlexibleEntryIntegerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 9, 30, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpFlexibleEntryIntegerValue.setStatus('current')
lgpFlexibleEntryUnsignedIntegerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 9, 30, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lgpFlexibleEntryUnsignedIntegerValue.setStatus('current')
lgpFlexibleEntryDecimalPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 9, 30, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpFlexibleEntryDecimalPosition.setStatus('current')
lgpFlexibleEntryDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 9, 30, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("not-specified", 0), ("int16", 1), ("uint16", 2), ("int32", 3), ("uint32", 4), ("text", 5), ("enum", 6), ("event16", 7), ("event32", 8), ("ipv4", 9), ("time32", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpFlexibleEntryDataType.setStatus('current')
lgpFlexibleEntryAccessibility = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 9, 30, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("not-specified", 0), ("readonly", 1), ("writeonly", 2), ("readwrite", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpFlexibleEntryAccessibility.setStatus('current')
lgpFlexibleEntryUnitsOfMeasureEnum = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 9, 30, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4096, 4097, 4098, 4099, 4100, 4101, 4102, 4103, 4104, 4105, 4106, 4107, 4108, 4109, 4110, 4111, 4112, 4113, 4114, 4115, 4116, 4117, 4118, 4119, 4120, 4121, 4122, 4123, 4124, 4125, 4126, 4127, 4128, 4129, 4130, 4131, 4132, 4133, 4134, 4135, 4136, 4137, 4138, 4139, 4140, 4141, 4142, 4143, 4144, 4145, 4146, 4147, 4148, 4149, 4150, 4151, 4152, 4153, 4154, 4155, 4156, 4157, 4158, 4159, 4160, 4161, 4162, 4163, 4164, 4165, 4166, 4167, 4168, 4169, 4170, 4171, 4172, 4173, 4174, 4175, 4176, 4177, 4178))).clone(namedValues=NamedValues(("not-specified", 0), ("milliSeconds", 4096), ("seconds", 4097), ("minutes", 4098), ("hours", 4099), ("voltsAcRms", 4100), ("milliVoltsAcRms", 4101), ("voltsDc", 4102), ("milliVoltsDc", 4103), ("voltsPeak", 4104), ("voltsPeakToPeak", 4105), ("ampsAcRms", 4106), ("milliAmpsAcRms", 4107), ("ampsDc", 4108), ("milliAmpsDc", 4109), ("voltAmps", 4110), ("kiloVoltAmps", 4111), ("voltAmpsReactive", 4112), ("kVAReactive", 4113), ("watts", 4114), ("kiloWatts", 4115), ("wattHours", 4116), ("kiloWattHour", 4117), ("ampDcHours", 4118), ("hertz", 4119), ("milliHertz", 4120), ("kiloHertz", 4121), ("megaHertz", 4122), ("gigaHertz", 4123), ("percent", 4124), ("degC", 4125), ("degCDelta", 4126), ("degF", 4127), ("degFDelta", 4128), ("psi", 4129), ("pascal", 4130), ("psia", 4131), ("relativeHumidity", 4132), ("thd", 4133), ("days", 4134), ("phase", 4135), ("microOhms", 4136), ("milliOhms", 4137), ("ohms", 4138), ("kiloOhms", 4139), ("megaOhms", 4140), ("bars", 4141), ("rpm", 4142), ("bytes", 4143), ("kilobytes", 4144), ("megabytes", 4145), ("gigabytes", 4146), ("terabytes", 4147), ("voltAmpHours", 4148), ("kiloVoltAmpHours", 4149), ("vaReactiveHours", 4150), ("kVAReactiveHours", 4151), ("meter", 4152), ("feet", 4153), ("cms", 4154), ("cmh", 4155), ("cfs", 4156), ("cfm", 4157), ("lpm", 4158), ("gpmUk", 4159), ("gpmUs", 4160), ("absoluteHumidity", 4161), ("kilograms", 4162), ("cubicMeters", 4163), ("btu", 4164), ("torrs", 4165), ("millitorrs", 4166), ("pounds", 4167), ("mps", 4168), ("fpm", 4169), ("liter", 4170), ("gallonUs", 4171), ("gallonUk", 4172), ("lps", 4173), ("mho", 4174), ("siemensCm", 4175), ("weeks", 4176), ("inWC", 4177), ("btuHours", 4178)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpFlexibleEntryUnitsOfMeasureEnum.setStatus('current')
lgpFlexibleEntryDataDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 9, 30, 1, 70), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lgpFlexibleEntryDataDescription.setStatus('current')
mibBuilder.exportSymbols("LIEBERT-GP-FLEXIBLE-MIB", lgpFlexibleEntryValue=lgpFlexibleEntryValue, lgpFlexibleBasicTable=lgpFlexibleBasicTable, PYSNMP_MODULE_ID=liebertGlobalProductsFlexibleModule, lgpFlexibleExtendedEntry=lgpFlexibleExtendedEntry, lgpFlexibleEntryDecimalPosition=lgpFlexibleEntryDecimalPosition, lgpFlexibleEntryAccessibility=lgpFlexibleEntryAccessibility, lgpFlexibleEntryIntegerValue=lgpFlexibleEntryIntegerValue, lgpFlexibleTableCount=lgpFlexibleTableCount, lgpFlexibleEntryDataDescription=lgpFlexibleEntryDataDescription, lgpFlexibleBasicEntry=lgpFlexibleBasicEntry, lgpFlexibleEntryIndex=lgpFlexibleEntryIndex, lgpFlexibleExtendedTable=lgpFlexibleExtendedTable, lgpFlexibleEntryDataLabel=lgpFlexibleEntryDataLabel, liebertGlobalProductsFlexibleModule=liebertGlobalProductsFlexibleModule, lgpFlexibleEntryUnsignedIntegerValue=lgpFlexibleEntryUnsignedIntegerValue, lgpFlexibleEntryUnitsOfMeasureEnum=lgpFlexibleEntryUnitsOfMeasureEnum, lgpFlexibleEntryUnitsOfMeasure=lgpFlexibleEntryUnitsOfMeasure, lgpFlexibleEntryDataType=lgpFlexibleEntryDataType)
