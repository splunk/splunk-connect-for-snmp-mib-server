#
# PySNMP MIB module AISLCDISCRETE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AISLCDISCRETE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:00:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Gauge32, Integer32, NotificationType, ModuleIdentity, Unsigned32, Counter64, TimeTicks, enterprises, Counter32, MibIdentifier, iso, Bits, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Gauge32", "Integer32", "NotificationType", "ModuleIdentity", "Unsigned32", "Counter64", "TimeTicks", "enterprises", "Counter32", "MibIdentifier", "iso", "Bits", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
class PositiveInteger(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

aii = MibIdentifier((1, 3, 6, 1, 4, 1, 539))
aiSLCDiscrete = ModuleIdentity((1, 3, 6, 1, 4, 1, 539, 24))
if mibBuilder.loadTexts: aiSLCDiscrete.setLastUpdated('0002181700Z')
if mibBuilder.loadTexts: aiSLCDiscrete.setOrganization('Applied Innovation Inc.')
aiSLCDiscreteInputTable = MibTable((1, 3, 6, 1, 4, 1, 539, 24, 1), )
if mibBuilder.loadTexts: aiSLCDiscreteInputTable.setStatus('current')
aiSLCDiscreteInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 24, 1, 1), ).setIndexNames((0, "AISLCDISCRETE-MIB", "aislcdinPointNumber"))
if mibBuilder.loadTexts: aiSLCDiscreteInputEntry.setStatus('current')
aislcdinPointNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 1, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcdinPointNumber.setStatus('current')
aislcdinDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdinDescription.setStatus('current')
aislcdinTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdinTrapEnable.setStatus('current')
aislcdinNormalInput = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdinNormalInput.setStatus('current')
aislcdinAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("info", 4), ("notReported", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdinAlarmSeverity.setStatus('current')
aislcdinNormalStateText = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdinNormalStateText.setStatus('current')
aislcdinAlarmStateText = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdinAlarmStateText.setStatus('current')
aislcdinCurrentInput = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcdinCurrentInput.setStatus('current')
aislcdinLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(19, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcdinLastChangeTime.setStatus('current')
aislcdinCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("info", 4), ("normal", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcdinCurrentState.setStatus('current')
aislcdinCurrentStateText = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcdinCurrentStateText.setStatus('current')
aislcdintl1AccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 22))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdintl1AccessID.setStatus('current')
aislcdintl1Provisioned = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 1, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdintl1Provisioned.setStatus('current')
aislcdintl1AccessIDType = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("equipment", 1), ("environmental", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdintl1AccessIDType.setStatus('current')
aislcdintl1NotificationCode = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdintl1NotificationCode.setStatus('current')
aislcdintl1ServiceAffecting = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("serviceAffecting", 1), ("notServiceAffecting", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdintl1ServiceAffecting.setStatus('current')
aislcdintl1ConditionType = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdintl1ConditionType.setStatus('current')
aislcdintl1ConditionDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdintl1ConditionDescription.setStatus('current')
aislcdintl1AlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdintl1AlarmType.setStatus('current')
aislcdintl1AlarmMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdintl1AlarmMessage.setStatus('current')
aislcdinDebounceValue = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdinDebounceValue.setStatus('current')
aiSLCDiscreteOutputTable = MibTable((1, 3, 6, 1, 4, 1, 539, 24, 2), )
if mibBuilder.loadTexts: aiSLCDiscreteOutputTable.setStatus('current')
aiSLCDiscreteOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 24, 2, 1), ).setIndexNames((0, "AISLCDISCRETE-MIB", "aislcdoutPointNumber"))
if mibBuilder.loadTexts: aiSLCDiscreteOutputEntry.setStatus('current')
aislcdoutPointNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 2, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcdoutPointNumber.setStatus('current')
aislcdoutDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdoutDescription.setStatus('current')
aislcdoutOutputEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdoutOutputEnable.setStatus('current')
aislcdoutNormalOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("relayOn", 1), ("relayOff", 2))))
if mibBuilder.loadTexts: aislcdoutNormalOutput.setStatus('deprecated')
aislcdoutMomentaryTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setUnits('0.1 second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdoutMomentaryTimeout.setStatus('current')
aislcdoutCurrentOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("relayOn", 1), ("relayOff", 2))))
if mibBuilder.loadTexts: aislcdoutCurrentOutput.setStatus('deprecated')
aislcdouttl1AccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 22))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdouttl1AccessID.setStatus('current')
aislcdoutTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdoutTrapEnable.setStatus('current')
aislcdoutAlarmStateOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("energized", 1), ("de-energized", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdoutAlarmStateOutput.setStatus('current')
aislcdoutAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("info", 4), ("notReported", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdoutAlarmSeverity.setStatus('current')
aislcdoutNonAlarmStateText = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdoutNonAlarmStateText.setStatus('current')
aislcdoutAlarmStateText = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdoutAlarmStateText.setStatus('current')
aislcdoutOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("energized", 1), ("de-energized", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdoutOutput.setStatus('current')
aislcdoutLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(19, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcdoutLastChangeTime.setStatus('current')
aislcdoutCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("info", 4), ("normal", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcdoutCurrentState.setStatus('current')
aislcdoutCurrentStateText = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 2, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcdoutCurrentStateText.setStatus('current')
aislcdoutEnergizeExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 24, 2, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aislcdoutEnergizeExpression.setStatus('current')
aislcdiscPowerSupplyStatus = MibScalar((1, 3, 6, 1, 4, 1, 539, 24, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("okay", 1), ("trouble", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcdiscPowerSupplyStatus.setStatus('current')
aislcdiscPowerSupplyAStatus = MibScalar((1, 3, 6, 1, 4, 1, 539, 24, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("okay", 1), ("underVoltage", 2), ("overVoltage", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcdiscPowerSupplyAStatus.setStatus('current')
aislcdiscPowerSupplyBStatus = MibScalar((1, 3, 6, 1, 4, 1, 539, 24, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("okay", 1), ("underVoltage", 2), ("overVoltage", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcdiscPowerSupplyBStatus.setStatus('current')
aislcdiscFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 539, 24, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("okay", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcdiscFanStatus.setStatus('current')
aislcdisc5VPowerSupplyAStatus = MibScalar((1, 3, 6, 1, 4, 1, 539, 24, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("okay", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcdisc5VPowerSupplyAStatus.setStatus('current')
aislcdisc5VPowerSupplyBStatus = MibScalar((1, 3, 6, 1, 4, 1, 539, 24, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("okay", 1), ("fail", 2), ("notPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcdisc5VPowerSupplyBStatus.setStatus('current')
aislcdiscFiber1TransmitterStatus = MibScalar((1, 3, 6, 1, 4, 1, 539, 24, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("okay", 1), ("fail", 2), ("notPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcdiscFiber1TransmitterStatus.setStatus('current')
aislcdiscFiber2TransmitterStatus = MibScalar((1, 3, 6, 1, 4, 1, 539, 24, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("okay", 1), ("fail", 2), ("notPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcdiscFiber2TransmitterStatus.setStatus('current')
aislcdiscAnalogInputPowerSupplyStatus = MibScalar((1, 3, 6, 1, 4, 1, 539, 24, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("okay", 1), ("fail", 2), ("notPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aislcdiscAnalogInputPowerSupplyStatus.setStatus('current')
mibBuilder.exportSymbols("AISLCDISCRETE-MIB", aislcdoutNormalOutput=aislcdoutNormalOutput, aislcdinNormalStateText=aislcdinNormalStateText, aislcdintl1AccessID=aislcdintl1AccessID, PositiveInteger=PositiveInteger, aislcdoutCurrentOutput=aislcdoutCurrentOutput, aislcdinCurrentState=aislcdinCurrentState, aislcdoutOutput=aislcdoutOutput, aislcdoutDescription=aislcdoutDescription, aislcdiscPowerSupplyAStatus=aislcdiscPowerSupplyAStatus, aislcdintl1ServiceAffecting=aislcdintl1ServiceAffecting, aislcdoutMomentaryTimeout=aislcdoutMomentaryTimeout, aislcdintl1ConditionDescription=aislcdintl1ConditionDescription, aislcdinTrapEnable=aislcdinTrapEnable, aislcdintl1NotificationCode=aislcdintl1NotificationCode, aislcdintl1AlarmType=aislcdintl1AlarmType, PYSNMP_MODULE_ID=aiSLCDiscrete, aislcdoutTrapEnable=aislcdoutTrapEnable, aislcdoutCurrentState=aislcdoutCurrentState, aislcdoutOutputEnable=aislcdoutOutputEnable, aislcdiscPowerSupplyBStatus=aislcdiscPowerSupplyBStatus, aislcdinPointNumber=aislcdinPointNumber, aislcdinAlarmSeverity=aislcdinAlarmSeverity, aislcdinCurrentStateText=aislcdinCurrentStateText, aislcdoutEnergizeExpression=aislcdoutEnergizeExpression, aiSLCDiscrete=aiSLCDiscrete, aislcdisc5VPowerSupplyBStatus=aislcdisc5VPowerSupplyBStatus, aislcdinNormalInput=aislcdinNormalInput, aiSLCDiscreteOutputTable=aiSLCDiscreteOutputTable, aislcdoutAlarmStateOutput=aislcdoutAlarmStateOutput, aislcdoutAlarmStateText=aislcdoutAlarmStateText, aislcdintl1AccessIDType=aislcdintl1AccessIDType, aislcdoutCurrentStateText=aislcdoutCurrentStateText, aiSLCDiscreteInputTable=aiSLCDiscreteInputTable, aislcdintl1Provisioned=aislcdintl1Provisioned, aislcdintl1AlarmMessage=aislcdintl1AlarmMessage, aislcdinDebounceValue=aislcdinDebounceValue, aiSLCDiscreteOutputEntry=aiSLCDiscreteOutputEntry, aislcdoutPointNumber=aislcdoutPointNumber, aislcdisc5VPowerSupplyAStatus=aislcdisc5VPowerSupplyAStatus, aislcdiscFiber2TransmitterStatus=aislcdiscFiber2TransmitterStatus, aislcdouttl1AccessID=aislcdouttl1AccessID, aislcdinDescription=aislcdinDescription, aislcdoutLastChangeTime=aislcdoutLastChangeTime, aislcdiscFanStatus=aislcdiscFanStatus, aislcdiscPowerSupplyStatus=aislcdiscPowerSupplyStatus, aislcdoutNonAlarmStateText=aislcdoutNonAlarmStateText, aislcdoutAlarmSeverity=aislcdoutAlarmSeverity, aislcdinAlarmStateText=aislcdinAlarmStateText, aislcdintl1ConditionType=aislcdintl1ConditionType, aislcdiscFiber1TransmitterStatus=aislcdiscFiber1TransmitterStatus, aislcdiscAnalogInputPowerSupplyStatus=aislcdiscAnalogInputPowerSupplyStatus, aiSLCDiscreteInputEntry=aiSLCDiscreteInputEntry, aislcdinCurrentInput=aislcdinCurrentInput, aii=aii, aislcdinLastChangeTime=aislcdinLastChangeTime)
