#
# PySNMP MIB module CHATEAU-CD-PRODUCT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CHATEAU-CD-PRODUCT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:31:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
chateauCDProduct, ChateauTrapControl, ChateauEventSeverity = mibBuilder.importSymbols("CHATEAUSYSTEMS-REGISTRATIONS-MIB", "chateauCDProduct", "ChateauTrapControl", "ChateauEventSeverity")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
NotificationType, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter32, Counter64, IpAddress, MibIdentifier, ObjectIdentity, TimeTicks, iso, Bits, Integer32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter32", "Counter64", "IpAddress", "MibIdentifier", "ObjectIdentity", "TimeTicks", "iso", "Bits", "Integer32", "Unsigned32")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
chateauCDProductMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1))
chateauCDProductMIB.setRevisions(('2005-11-09 00:00',))
if mibBuilder.loadTexts: chateauCDProductMIB.setLastUpdated('200511090000Z')
if mibBuilder.loadTexts: chateauCDProductMIB.setOrganization('Chateau Systems, Inc.')
chateauCDProdConfig = ObjectIdentity((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 1))
if mibBuilder.loadTexts: chateauCDProdConfig.setStatus('current')
cdStaticConfig = ObjectIdentity((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 1, 1))
if mibBuilder.loadTexts: cdStaticConfig.setStatus('current')
cdStCfgManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 1, 1, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdStCfgManufacturer.setStatus('current')
cdStCfgModel = MibScalar((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdStCfgModel.setStatus('current')
cdStCfgFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdStCfgFirmwareRev.setStatus('current')
cdDynamicConfig = ObjectIdentity((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 1, 2))
if mibBuilder.loadTexts: cdDynamicConfig.setStatus('current')
cdDynCfgUserAlias = MibScalar((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 1, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdDynCfgUserAlias.setStatus('current')
chateauCDProdControl = ObjectIdentity((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 2))
if mibBuilder.loadTexts: chateauCDProdControl.setStatus('current')
cdCtlPower = MibScalar((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdCtlPower.setStatus('current')
cdCtlTrayDoor = MibScalar((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("closed", 1), ("open", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdCtlTrayDoor.setStatus('current')
cdCtlPlaying = MibScalar((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 2, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdCtlPlaying.setStatus('current')
chateauCDProdStatus = ObjectIdentity((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3))
if mibBuilder.loadTexts: chateauCDProdStatus.setStatus('current')
cdChassisStatus = ObjectIdentity((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3, 1))
if mibBuilder.loadTexts: cdChassisStatus.setStatus('current')
cdChStPowerOnHours = MibScalar((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdChStPowerOnHours.setStatus('current')
cdChStLaserOnHours = MibScalar((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdChStLaserOnHours.setStatus('current')
cdChStCrcErrorCtr = MibScalar((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdChStCrcErrorCtr.setStatus('current')
cdChStTemperature = MibScalar((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3, 1, 4), Integer32()).setUnits('Celcius').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdChStTemperature.setStatus('current')
cdChStPowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("okay", 1), ("voltageError", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdChStPowerSupply.setStatus('current')
cdChangerStatus = ObjectIdentity((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3, 2))
if mibBuilder.loadTexts: cdChangerStatus.setStatus('current')
cdChangerNbrCdSlots = MibScalar((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3, 2, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdChangerNbrCdSlots.setStatus('current')
cdChangerSlotTable = MibTable((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3, 2, 2), )
if mibBuilder.loadTexts: cdChangerSlotTable.setStatus('current')
cdChangerSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3, 2, 2, 1), ).setIndexNames((0, "CHATEAU-CD-PRODUCT-MIB", "cdChangerSlotNbr"))
if mibBuilder.loadTexts: cdChangerSlotEntry.setStatus('current')
cdChangerSlotNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: cdChangerSlotNbr.setStatus('current')
cdChangerSlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("containsCD", 1), ("empty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdChangerSlotStatus.setStatus('current')
cdChangerSlotCDTrackPlaying = MibTableColumn((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdChangerSlotCDTrackPlaying.setStatus('current')
cdChangerCDNbrTracks = MibTableColumn((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdChangerCDNbrTracks.setStatus('current')
cdChangerCDTrackTable = MibTable((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3, 2, 3), )
if mibBuilder.loadTexts: cdChangerCDTrackTable.setStatus('current')
cdChangerCDTrackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3, 2, 3, 1), ).setIndexNames((0, "CHATEAU-CD-PRODUCT-MIB", "cdChangerSlotNbr"), (0, "CHATEAU-CD-PRODUCT-MIB", "cdChangerCDTrackNbr"))
if mibBuilder.loadTexts: cdChangerCDTrackEntry.setStatus('current')
cdChangerCDTrackNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3, 2, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cdChangerCDTrackNbr.setStatus('current')
cdChangerCDTrackPlaying = MibTableColumn((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3, 2, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdChangerCDTrackPlaying.setStatus('current')
cdChangerCDTrackLengthSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3, 2, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdChangerCDTrackLengthSecs.setStatus('current')
cdChangerCDTrackLengthStr = MibTableColumn((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3, 2, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdChangerCDTrackLengthStr.setStatus('current')
cdChangerCDTrackTitle = MibTableColumn((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3, 2, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdChangerCDTrackTitle.setStatus('current')
cdChangerCDTrackArtist = MibTableColumn((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 3, 2, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdChangerCDTrackArtist.setStatus('current')
chateauCDProdEvents = ObjectIdentity((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 10))
if mibBuilder.loadTexts: chateauCDProdEvents.setStatus('current')
cdEventControl = ObjectIdentity((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 10, 1))
if mibBuilder.loadTexts: cdEventControl.setStatus('current')
cdEvCtlAgtPollFreq = MibScalar((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 10, 1, 1), Unsigned32().clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdEvCtlAgtPollFreq.setStatus('current')
cdChassisTempAlarmThresh = MibScalar((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 10, 1, 2), Integer32().clone(40)).setUnits('Celcius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdChassisTempAlarmThresh.setStatus('current')
cdChassisTempEvTrapEn = MibScalar((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 10, 1, 10), ChateauTrapControl().clone('trapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdChassisTempEvTrapEn.setStatus('current')
cdPowerSupplyEvTrapEn = MibScalar((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 10, 1, 20), ChateauTrapControl().clone('trapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdPowerSupplyEvTrapEn.setStatus('current')
cdEventDescriptors = ObjectIdentity((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 10, 2))
if mibBuilder.loadTexts: cdEventDescriptors.setStatus('current')
cdEvSeverity = MibScalar((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 10, 2, 1), ChateauEventSeverity()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cdEvSeverity.setStatus('current')
cdEvDescription = MibScalar((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 10, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cdEvDescription.setStatus('current')
cdEventList = ObjectIdentity((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 10, 0))
if mibBuilder.loadTexts: cdEventList.setStatus('current')
cdChassisTempAlarmEv = NotificationType((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 10, 0, 10)).setObjects(("CHATEAU-CD-PRODUCT-MIB", "cdDynCfgUserAlias"), ("CHATEAU-CD-PRODUCT-MIB", "cdStCfgModel"), ("CHATEAU-CD-PRODUCT-MIB", "cdChStTemperature"), ("CHATEAU-CD-PRODUCT-MIB", "cdEvSeverity"), ("CHATEAU-CD-PRODUCT-MIB", "cdEvDescription"))
if mibBuilder.loadTexts: cdChassisTempAlarmEv.setStatus('current')
cdChassisTempOkayEv = NotificationType((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 10, 0, 11)).setObjects(("CHATEAU-CD-PRODUCT-MIB", "cdDynCfgUserAlias"), ("CHATEAU-CD-PRODUCT-MIB", "cdStCfgModel"), ("CHATEAU-CD-PRODUCT-MIB", "cdChStTemperature"), ("CHATEAU-CD-PRODUCT-MIB", "cdEvSeverity"), ("CHATEAU-CD-PRODUCT-MIB", "cdEvDescription"))
if mibBuilder.loadTexts: cdChassisTempOkayEv.setStatus('current')
cdPowerSupplyEv = NotificationType((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 10, 0, 20)).setObjects(("CHATEAU-CD-PRODUCT-MIB", "cdDynCfgUserAlias"), ("CHATEAU-CD-PRODUCT-MIB", "cdStCfgModel"), ("CHATEAU-CD-PRODUCT-MIB", "cdChStPowerSupply"), ("CHATEAU-CD-PRODUCT-MIB", "cdEvSeverity"), ("CHATEAU-CD-PRODUCT-MIB", "cdEvDescription"))
if mibBuilder.loadTexts: cdPowerSupplyEv.setStatus('current')
chateauCDProdConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 20))
if mibBuilder.loadTexts: chateauCDProdConformance.setStatus('current')
cdConformanceGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 20, 1))
if mibBuilder.loadTexts: cdConformanceGroups.setStatus('current')
cdProdConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 20, 1, 1)).setObjects(("CHATEAU-CD-PRODUCT-MIB", "cdStCfgManufacturer"), ("CHATEAU-CD-PRODUCT-MIB", "cdStCfgModel"), ("CHATEAU-CD-PRODUCT-MIB", "cdStCfgFirmwareRev"), ("CHATEAU-CD-PRODUCT-MIB", "cdDynCfgUserAlias"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdProdConfigGroup = cdProdConfigGroup.setStatus('current')
cdProdControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 20, 1, 2)).setObjects(("CHATEAU-CD-PRODUCT-MIB", "cdCtlPower"), ("CHATEAU-CD-PRODUCT-MIB", "cdCtlTrayDoor"), ("CHATEAU-CD-PRODUCT-MIB", "cdCtlPlaying"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdProdControlGroup = cdProdControlGroup.setStatus('current')
cdProdStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 20, 1, 3)).setObjects(("CHATEAU-CD-PRODUCT-MIB", "cdChStPowerOnHours"), ("CHATEAU-CD-PRODUCT-MIB", "cdChStLaserOnHours"), ("CHATEAU-CD-PRODUCT-MIB", "cdChStCrcErrorCtr"), ("CHATEAU-CD-PRODUCT-MIB", "cdChStTemperature"), ("CHATEAU-CD-PRODUCT-MIB", "cdChStPowerSupply"), ("CHATEAU-CD-PRODUCT-MIB", "cdChangerNbrCdSlots"), ("CHATEAU-CD-PRODUCT-MIB", "cdChangerSlotStatus"), ("CHATEAU-CD-PRODUCT-MIB", "cdChangerSlotCDTrackPlaying"), ("CHATEAU-CD-PRODUCT-MIB", "cdChangerCDNbrTracks"), ("CHATEAU-CD-PRODUCT-MIB", "cdChangerCDTrackPlaying"), ("CHATEAU-CD-PRODUCT-MIB", "cdChangerCDTrackLengthSecs"), ("CHATEAU-CD-PRODUCT-MIB", "cdChangerCDTrackLengthStr"), ("CHATEAU-CD-PRODUCT-MIB", "cdChangerCDTrackTitle"), ("CHATEAU-CD-PRODUCT-MIB", "cdChangerCDTrackArtist"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdProdStatusGroup = cdProdStatusGroup.setStatus('current')
cdProdEventGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 20, 1, 4)).setObjects(("CHATEAU-CD-PRODUCT-MIB", "cdEvCtlAgtPollFreq"), ("CHATEAU-CD-PRODUCT-MIB", "cdChassisTempAlarmThresh"), ("CHATEAU-CD-PRODUCT-MIB", "cdChassisTempEvTrapEn"), ("CHATEAU-CD-PRODUCT-MIB", "cdPowerSupplyEvTrapEn"), ("CHATEAU-CD-PRODUCT-MIB", "cdEvSeverity"), ("CHATEAU-CD-PRODUCT-MIB", "cdEvDescription"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdProdEventGroup = cdProdEventGroup.setStatus('current')
cdProdNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 20, 1, 5)).setObjects(("CHATEAU-CD-PRODUCT-MIB", "cdChassisTempAlarmEv"), ("CHATEAU-CD-PRODUCT-MIB", "cdChassisTempOkayEv"), ("CHATEAU-CD-PRODUCT-MIB", "cdPowerSupplyEv"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdProdNotificationsGroup = cdProdNotificationsGroup.setStatus('current')
cdCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 10910, 2, 2, 3, 1, 1, 20, 2)).setObjects(("CHATEAU-CD-PRODUCT-MIB", "cdProdConfigGroup"), ("CHATEAU-CD-PRODUCT-MIB", "cdProdStatusGroup"), ("CHATEAU-CD-PRODUCT-MIB", "cdProdEventGroup"), ("CHATEAU-CD-PRODUCT-MIB", "cdProdNotificationsGroup"), ("CHATEAU-CD-PRODUCT-MIB", "cdProdControlGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdCompliance = cdCompliance.setStatus('current')
mibBuilder.exportSymbols("CHATEAU-CD-PRODUCT-MIB", cdConformanceGroups=cdConformanceGroups, cdChangerCDTrackArtist=cdChangerCDTrackArtist, cdStaticConfig=cdStaticConfig, cdChangerSlotStatus=cdChangerSlotStatus, cdChangerCDNbrTracks=cdChangerCDNbrTracks, cdChassisStatus=cdChassisStatus, chateauCDProdConformance=chateauCDProdConformance, cdEvDescription=cdEvDescription, cdProdEventGroup=cdProdEventGroup, cdChStPowerSupply=cdChStPowerSupply, cdChangerCDTrackPlaying=cdChangerCDTrackPlaying, chateauCDProdEvents=chateauCDProdEvents, cdEvCtlAgtPollFreq=cdEvCtlAgtPollFreq, cdPowerSupplyEvTrapEn=cdPowerSupplyEvTrapEn, cdChangerSlotNbr=cdChangerSlotNbr, cdProdConfigGroup=cdProdConfigGroup, chateauCDProductMIB=chateauCDProductMIB, cdStCfgModel=cdStCfgModel, cdChassisTempAlarmThresh=cdChassisTempAlarmThresh, cdChangerCDTrackTable=cdChangerCDTrackTable, cdStCfgManufacturer=cdStCfgManufacturer, cdCtlPower=cdCtlPower, cdEvSeverity=cdEvSeverity, cdChStLaserOnHours=cdChStLaserOnHours, chateauCDProdConfig=chateauCDProdConfig, cdEventList=cdEventList, cdChStTemperature=cdChStTemperature, PYSNMP_MODULE_ID=chateauCDProductMIB, cdChangerSlotTable=cdChangerSlotTable, cdChangerSlotCDTrackPlaying=cdChangerSlotCDTrackPlaying, cdChangerCDTrackTitle=cdChangerCDTrackTitle, cdChangerSlotEntry=cdChangerSlotEntry, cdEventControl=cdEventControl, cdChassisTempEvTrapEn=cdChassisTempEvTrapEn, cdChangerCDTrackNbr=cdChangerCDTrackNbr, cdChangerCDTrackLengthStr=cdChangerCDTrackLengthStr, chateauCDProdStatus=chateauCDProdStatus, cdEventDescriptors=cdEventDescriptors, cdCtlTrayDoor=cdCtlTrayDoor, cdChStPowerOnHours=cdChStPowerOnHours, cdChangerNbrCdSlots=cdChangerNbrCdSlots, cdChStCrcErrorCtr=cdChStCrcErrorCtr, cdProdStatusGroup=cdProdStatusGroup, cdChassisTempOkayEv=cdChassisTempOkayEv, chateauCDProdControl=chateauCDProdControl, cdProdNotificationsGroup=cdProdNotificationsGroup, cdCompliance=cdCompliance, cdPowerSupplyEv=cdPowerSupplyEv, cdProdControlGroup=cdProdControlGroup, cdDynCfgUserAlias=cdDynCfgUserAlias, cdChangerStatus=cdChangerStatus, cdChangerCDTrackLengthSecs=cdChangerCDTrackLengthSecs, cdChangerCDTrackEntry=cdChangerCDTrackEntry, cdStCfgFirmwareRev=cdStCfgFirmwareRev, cdCtlPlaying=cdCtlPlaying, cdChassisTempAlarmEv=cdChassisTempAlarmEv, cdDynamicConfig=cdDynamicConfig)
