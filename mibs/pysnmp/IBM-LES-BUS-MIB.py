#
# PySNMP MIB module IBM-LES-BUS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IBM-LES-BUS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:39:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
AtmLaneAddress, = mibBuilder.importSymbols("LAN-EMULATION-CLIENT-MIB", "AtmLaneAddress")
lesConfEntry, lesConfIndex = mibBuilder.importSymbols("LAN-EMULATION-LES-MIB", "lesConfEntry", "lesConfIndex")
AtmPrivateAddrEsi, Bandwidth, AtmVccTrafficType, AtmSelector, mssServerLanE = mibBuilder.importSymbols("NWAYSMSS-MIB", "AtmPrivateAddrEsi", "Bandwidth", "AtmVccTrafficType", "AtmSelector", "mssServerLanE")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, Bits, ModuleIdentity, NotificationType, Counter64, Gauge32, Integer32, iso, Counter32, IpAddress, ObjectIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Bits", "ModuleIdentity", "NotificationType", "Counter64", "Gauge32", "Integer32", "iso", "Counter32", "IpAddress", "ObjectIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier")
DisplayString, TimeStamp, TruthValue, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeStamp", "TruthValue", "MacAddress", "TextualConvention")
ibmLesBusMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1))
ibmLesBusConfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 1))
ibmLesBusStatGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 2))
ibmBusMonStatGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 3))
ibmLesBusMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 4))
ibmLesBusMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 4, 1))
ibmLesBusMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 4, 2))
ibmLesBusConfTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 1, 1), )
if mibBuilder.loadTexts: ibmLesBusConfTable.setStatus('mandatory')
ibmLesBusConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 1, 1, 1), ).setIndexNames((0, "LAN-EMULATION-LES-MIB", "lesConfIndex"))
if mibBuilder.loadTexts: ibmLesBusConfEntry.setStatus('mandatory')
atmDevNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmDevNum.setStatus('mandatory')
useBurnedInEsi = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 1, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: useBurnedInEsi.setStatus('mandatory')
configuredEsi = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 1, 1, 1, 3), AtmPrivateAddrEsi()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configuredEsi.setStatus('mandatory')
configuredSelector = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 1, 1, 1, 4), AtmSelector()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configuredSelector.setStatus('mandatory')
leArpResponseDest = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("oneClient", 0), ("allClients", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: leArpResponseDest.setStatus('mandatory')
use2ControlDistributeVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 1, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: use2ControlDistributeVccs.setStatus('mandatory')
use2MulticastForwardVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 1, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: use2MulticastForwardVccs.setStatus('mandatory')
validateBestEffortPcr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 1, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: validateBestEffortPcr.setStatus('mandatory')
controlDirectMaxReservedBw = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 1, 1, 1, 9), Bandwidth()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlDirectMaxReservedBw.setStatus('mandatory')
multicastSendMaxReservedBw = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 1, 1, 1, 10), Bandwidth()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastSendMaxReservedBw.setStatus('mandatory')
controlDistributeVccType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 1, 1, 1, 11), AtmVccTrafficType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlDistributeVccType.setStatus('mandatory')
controlDistributePcr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 1, 1, 1, 12), Bandwidth()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlDistributePcr.setStatus('mandatory')
controlDistributeScr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 1, 1, 1, 13), Bandwidth()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlDistributeScr.setStatus('mandatory')
multicastForwardVccType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 1, 1, 1, 14), AtmVccTrafficType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastForwardVccType.setStatus('mandatory')
multicastForwardPcr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 1, 1, 1, 15), Bandwidth()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastForwardPcr.setStatus('mandatory')
multicastForwardScr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 1, 1, 1, 16), Bandwidth()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastForwardScr.setStatus('mandatory')
validateJoinsWithLecs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 1, 1, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: validateJoinsWithLecs.setStatus('mandatory')
redundancyEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 1, 1, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundancyEnabled.setStatus('mandatory')
redundancyRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("neverSet", 0), ("primaryLesBus", 1), ("backupLesBus", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundancyRole.setStatus('mandatory')
redundancyAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 1, 1, 1, 20), AtmLaneAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redundancyAtmAddr.setStatus('mandatory')
bmonEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 1, 1, 1, 21), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bmonEnabled.setStatus('mandatory')
numTopMacs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: numTopMacs.setStatus('mandatory')
sampleDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sampleDuration.setStatus('mandatory')
interSampleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interSampleTime.setStatus('mandatory')
sampleRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sampleRate.setStatus('mandatory')
busMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("systemBusMode", 1), ("adapterBusMode", 2), ("vccSpliceBusMode", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: busMode.setStatus('mandatory')
ibmLesBusStatTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 2, 1), )
if mibBuilder.loadTexts: ibmLesBusStatTable.setStatus('mandatory')
ibmLesBusStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 2, 1, 1), ).setIndexNames((0, "LAN-EMULATION-LES-MIB", "lesConfIndex"))
if mibBuilder.loadTexts: ibmLesBusStatEntry.setStatus('mandatory')
redundancyVccRefused = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redundancyVccRefused.setStatus('mandatory')
redundancyVccReleased = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redundancyVccReleased.setStatus('mandatory')
redundancyVccFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redundancyVccFailure.setStatus('mandatory')
bmonSampleInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 3, 1), )
if mibBuilder.loadTexts: bmonSampleInfoTable.setStatus('mandatory')
bmonSampleInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 3, 1, 1), ).setIndexNames((0, "LAN-EMULATION-LES-MIB", "lesConfIndex"))
if mibBuilder.loadTexts: bmonSampleInfoEntry.setStatus('mandatory')
bmonSampleStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 3, 1, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmonSampleStartTime.setStatus('mandatory')
bmonSampleDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmonSampleDuration.setStatus('mandatory')
bmonNumTopMacs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmonNumTopMacs.setStatus('mandatory')
bmonReceivedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmonReceivedFrames.setStatus('mandatory')
bmonSampledFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmonSampledFrames.setStatus('mandatory')
bmonSamplingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmonSamplingRate.setStatus('mandatory')
bmonStatTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 3, 2), )
if mibBuilder.loadTexts: bmonStatTable.setStatus('mandatory')
bmonStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 3, 2, 1), ).setIndexNames((0, "LAN-EMULATION-LES-MIB", "lesConfIndex"), (0, "IBM-LES-BUS-MIB", "bmonTopNRank"))
if mibBuilder.loadTexts: bmonStatEntry.setStatus('mandatory')
bmonTopNRank = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 3, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmonTopNRank.setStatus('mandatory')
bmonTopNSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 3, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmonTopNSrcMacAddr.setStatus('mandatory')
bmonTopNLecAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 3, 2, 1, 3), AtmLaneAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmonTopNLecAtmAddr.setStatus('mandatory')
bmonTopNFramesSampled = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bmonTopNFramesSampled.setStatus('mandatory')
ibmLesBusCConfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 4, 1, 1))
ibmLesBusCStatGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 4, 1, 2))
ibmBusMonCStatGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 4, 1, 3))
ibmLesBusMIBCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 118, 1, 2, 1, 1, 4, 2, 1))
mibBuilder.exportSymbols("IBM-LES-BUS-MIB", ibmLesBusConfTable=ibmLesBusConfTable, ibmLesBusCConfGroup=ibmLesBusCConfGroup, ibmLesBusConfEntry=ibmLesBusConfEntry, use2MulticastForwardVccs=use2MulticastForwardVccs, sampleRate=sampleRate, controlDistributePcr=controlDistributePcr, sampleDuration=sampleDuration, bmonEnabled=bmonEnabled, redundancyVccReleased=redundancyVccReleased, controlDirectMaxReservedBw=controlDirectMaxReservedBw, redundancyVccFailure=redundancyVccFailure, bmonTopNRank=bmonTopNRank, atmDevNum=atmDevNum, multicastForwardScr=multicastForwardScr, redundancyAtmAddr=redundancyAtmAddr, ibmLesBusConfGroup=ibmLesBusConfGroup, bmonSampleInfoEntry=bmonSampleInfoEntry, ibmLesBusMIBCompliance=ibmLesBusMIBCompliance, validateBestEffortPcr=validateBestEffortPcr, redundancyEnabled=redundancyEnabled, ibmBusMonCStatGroup=ibmBusMonCStatGroup, busMode=busMode, bmonTopNSrcMacAddr=bmonTopNSrcMacAddr, ibmBusMonStatGroup=ibmBusMonStatGroup, bmonTopNLecAtmAddr=bmonTopNLecAtmAddr, bmonStatTable=bmonStatTable, ibmLesBusStatEntry=ibmLesBusStatEntry, controlDistributeVccType=controlDistributeVccType, configuredEsi=configuredEsi, ibmLesBusMIBGroups=ibmLesBusMIBGroups, configuredSelector=configuredSelector, bmonSampleStartTime=bmonSampleStartTime, validateJoinsWithLecs=validateJoinsWithLecs, multicastSendMaxReservedBw=multicastSendMaxReservedBw, controlDistributeScr=controlDistributeScr, ibmLesBusMIBConformance=ibmLesBusMIBConformance, ibmLesBusStatTable=ibmLesBusStatTable, use2ControlDistributeVccs=use2ControlDistributeVccs, interSampleTime=interSampleTime, bmonReceivedFrames=bmonReceivedFrames, ibmLesBusMIBCompliances=ibmLesBusMIBCompliances, bmonSamplingRate=bmonSamplingRate, ibmLesBusMIB=ibmLesBusMIB, bmonNumTopMacs=bmonNumTopMacs, multicastForwardPcr=multicastForwardPcr, redundancyVccRefused=redundancyVccRefused, bmonSampleInfoTable=bmonSampleInfoTable, multicastForwardVccType=multicastForwardVccType, useBurnedInEsi=useBurnedInEsi, leArpResponseDest=leArpResponseDest, bmonSampleDuration=bmonSampleDuration, numTopMacs=numTopMacs, bmonSampledFrames=bmonSampledFrames, bmonStatEntry=bmonStatEntry, redundancyRole=redundancyRole, bmonTopNFramesSampled=bmonTopNFramesSampled, ibmLesBusCStatGroup=ibmLesBusCStatGroup, ibmLesBusStatGroup=ibmLesBusStatGroup)
