#
# PySNMP MIB module TRIPPLITE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TRIPPLITE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:20:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
MibIdentifier, ModuleIdentity, NotificationType, Counter64, Unsigned32, iso, enterprises, Bits, Counter32, Integer32, ObjectIdentity, IpAddress, NotificationType, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "ModuleIdentity", "NotificationType", "Counter64", "Unsigned32", "iso", "enterprises", "Bits", "Counter32", "Integer32", "ObjectIdentity", "IpAddress", "NotificationType", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32")
TextualConvention, TruthValue, VariablePointer, TimeStamp, DateAndTime, AutonomousType, TimeInterval, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "VariablePointer", "TimeStamp", "DateAndTime", "AutonomousType", "TimeInterval", "DisplayString", "RowStatus")
PositiveInteger, NonNegativeInteger = mibBuilder.importSymbols("UPS-MIB", "PositiveInteger", "NonNegativeInteger")
tripplite = ModuleIdentity((1, 3, 6, 1, 4, 1, 850))
tripplite.setRevisions(('2013-10-30 13:00',))
if mibBuilder.loadTexts: tripplite.setLastUpdated('201310301300Z')
if mibBuilder.loadTexts: tripplite.setOrganization('Tripp Lite')
tlEnumerations = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2))
tlOperatingSystems = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1))
hpux9 = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 1))
sunos4 = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 2))
solaris = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 3))
osf = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 4))
ultrix = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 5))
hpux10 = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 6))
netbsd1 = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 7))
freebsd = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 8))
irix = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 9))
linux = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 10))
bsdi = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 11))
openbsd = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 12))
win32 = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 13))
hpux11 = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 14))
win9x = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 50))
winnt = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 51))
solspark = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 52))
solintel = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 53))
aix = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 54))
sco = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 55))
osx = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 56))
unknown = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 2, 1, 255))
tlPowerAlert = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 90))
tlPASystem = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 90, 1))
tlPAContacts = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 90, 1, 1))
tlPAEmailContacts = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 1))
tlPANumberOfEmailContacts = MibScalar((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 1, 1), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlPANumberOfEmailContacts.setStatus('current')
tlPAEmailContactsTable = MibTable((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 1, 2), )
if mibBuilder.loadTexts: tlPAEmailContactsTable.setStatus('current')
tlPAEmailContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 1, 2, 1), ).setIndexNames((0, "TRIPPLITE-MIB", "tlPAEmailContactIndex"))
if mibBuilder.loadTexts: tlPAEmailContactEntry.setStatus('current')
tlPAEmailContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 1, 2, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlPAEmailContactIndex.setStatus('current')
tlPAEmailContactRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 1, 2, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlPAEmailContactRowStatus.setStatus('current')
tlPAEmailContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 1, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlPAEmailContactName.setStatus('current')
tlPAEmailContactAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 1, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlPAEmailContactAddress.setStatus('current')
tlPASnmpContacts = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 2))
tlPANumberOfSnmpContacts = MibScalar((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 2, 1), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlPANumberOfSnmpContacts.setStatus('current')
tlPASnmpContactsTable = MibTable((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 2, 2), )
if mibBuilder.loadTexts: tlPASnmpContactsTable.setStatus('current')
tlPASnmpContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 2, 2, 1), ).setIndexNames((0, "TRIPPLITE-MIB", "tlPASnmpContactIndex"))
if mibBuilder.loadTexts: tlPASnmpContactEntry.setStatus('current')
tlPASnmpContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 2, 2, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlPASnmpContactIndex.setStatus('current')
tlPASnmpContactRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 2, 2, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlPASnmpContactRowStatus.setStatus('current')
tlPASnmpContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 2, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlPASnmpContactName.setStatus('current')
tlPASnmpContactIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 2, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlPASnmpContactIpAddress.setStatus('current')
tlPASnmpContactPort = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 2, 2, 1, 5), PositiveInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlPASnmpContactPort.setStatus('current')
tlPASnmpContactSnmpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("snmpv1", 1), ("snmpv2c", 2), ("snmpv3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlPASnmpContactSnmpVersion.setStatus('current')
tlPASnmpContactSecurityName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 2, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlPASnmpContactSecurityName.setStatus('current')
tlPASnmpContactPrivPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 2, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlPASnmpContactPrivPassword.setStatus('current')
tlPASnmpContactAuthPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 90, 1, 1, 2, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlPASnmpContactAuthPassword.setStatus('current')
tlUPS = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100))
tlUpsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1))
tlUpsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 1))
tlUpsIdentUpsSoftwareChecksum = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsIdentUpsSoftwareChecksum.setStatus('current')
tlUpsIdentSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsIdentSerialNum.setStatus('current')
tlUpsIdentID = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsIdentID.setStatus('current')
tlUpsSnmpCardSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsSnmpCardSerialNum.setStatus('current')
tlUpsSelectedDeviceID = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsSelectedDeviceID.setStatus('current')
tlUpsLocation = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsLocation.setStatus('current')
tlUpsBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 2))
tlUpsBatteryAge = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsBatteryAge.setStatus('current')
tlUpsTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsTemperatureF.setStatus('current')
tlUpsInput = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 3))
tlUpsInputNumVoltages = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 3, 1), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsInputNumVoltages.setStatus('current')
tlUpsInputVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 850, 100, 1, 3, 2), )
if mibBuilder.loadTexts: tlUpsInputVoltageTable.setStatus('current')
tlUpsInputVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 100, 1, 3, 2, 1), ).setIndexNames((0, "TRIPPLITE-MIB", "tlUpsInputVoltageIndex"))
if mibBuilder.loadTexts: tlUpsInputVoltageEntry.setStatus('current')
tlUpsInputVoltageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 3, 2, 1, 1), PositiveInteger())
if mibBuilder.loadTexts: tlUpsInputVoltageIndex.setStatus('current')
tlUpsInputVoltageType = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("phaseToNeutral", 0), ("phaseToPhase", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsInputVoltageType.setStatus('current')
tlUpsInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 3, 2, 1, 3), NonNegativeInteger()).setUnits('RMS Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsInputVoltage.setStatus('current')
tlUpsOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 4))
tlUpsOutputPowerTotal = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 4, 5), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsOutputPowerTotal.setStatus('current')
tlUpsOutputCircuits = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 4, 6), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsOutputCircuits.setStatus('current')
tlUpsOutputCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 850, 100, 1, 4, 7), )
if mibBuilder.loadTexts: tlUpsOutputCircuitTable.setStatus('current')
tlUpsOutputCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 100, 1, 4, 7, 1), ).setIndexNames((0, "TRIPPLITE-MIB", "tlUpsOutputCircuitIndex"))
if mibBuilder.loadTexts: tlUpsOutputCircuitEntry.setStatus('current')
tlUpsOutputCircuitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 4, 7, 1, 1), PositiveInteger())
if mibBuilder.loadTexts: tlUpsOutputCircuitIndex.setStatus('current')
tlUpsOutputCircuitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 4, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("open", 0), ("closed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsOutputCircuitStatus.setStatus('current')
tlUpsOutputCircuitLoadCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 4, 7, 1, 3), NonNegativeInteger()).setUnits('Tenths of Amperes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsOutputCircuitLoadCurrent.setStatus('current')
tlUpsAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 6))
tlUpsAlarmsPresent = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsAlarmsPresent.setStatus('current')
tlUpsAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2), )
if mibBuilder.loadTexts: tlUpsAlarmTable.setStatus('current')
tlUpsAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2, 1), ).setIndexNames((0, "TRIPPLITE-MIB", "tlUpsAlarmId"))
if mibBuilder.loadTexts: tlUpsAlarmEntry.setStatus('current')
tlUpsAlarmId = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsAlarmId.setStatus('current')
tlUpsAlarmDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2, 1, 2), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsAlarmDescr.setStatus('current')
tlUpsAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsAlarmTime.setStatus('current')
tlUpsAlarmDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsAlarmDetail.setStatus('current')
tlUpsAlarmDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2, 1, 5), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsAlarmDeviceId.setStatus('current')
tlUpsAlarmDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsAlarmDeviceName.setStatus('current')
tlUpsAlarmLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsAlarmLocation.setStatus('current')
tlUpsAlarmGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("critical", 1), ("warning", 2), ("info", 3), ("status", 4), ("offline", 5), ("custom", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsAlarmGroup.setStatus('current')
tlUpsAlarmIp = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsAlarmIp.setStatus('current')
tlUpsAlarmMac = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsAlarmMac.setStatus('current')
tlUpsWellKnownAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3))
tlUpsAlarmPrimaryPowerOutage = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 1))
if mibBuilder.loadTexts: tlUpsAlarmPrimaryPowerOutage.setStatus('current')
tlUpsAlarmSecondaryPowerOutage = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 2))
if mibBuilder.loadTexts: tlUpsAlarmSecondaryPowerOutage.setStatus('current')
tlUpsAlarmLoadLevelAboveThreshold = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 3))
if mibBuilder.loadTexts: tlUpsAlarmLoadLevelAboveThreshold.setStatus('current')
tlUpsAlarmOutputCurrentChanged = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 4))
if mibBuilder.loadTexts: tlUpsAlarmOutputCurrentChanged.setStatus('current')
tlUpsAlarmBatteryAgeAboveThreshold = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 5))
if mibBuilder.loadTexts: tlUpsAlarmBatteryAgeAboveThreshold.setStatus('current')
tlUpsAlarmLoadOff = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 6))
if mibBuilder.loadTexts: tlUpsAlarmLoadOff.setStatus('current')
tlUpsAlarmUserDefined = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 7))
if mibBuilder.loadTexts: tlUpsAlarmUserDefined.setStatus('current')
tlUpsAlarmBatteryBad = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 8))
if mibBuilder.loadTexts: tlUpsAlarmBatteryBad.setStatus('current')
tlUpsAlarmOnBattery = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 9))
if mibBuilder.loadTexts: tlUpsAlarmOnBattery.setStatus('current')
tlUpsAlarmLowBattery = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 10))
if mibBuilder.loadTexts: tlUpsAlarmLowBattery.setStatus('current')
tlUpsAlarmDepletedBattery = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 11))
if mibBuilder.loadTexts: tlUpsAlarmDepletedBattery.setStatus('current')
tlUpsAlarmTempBad = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 12))
if mibBuilder.loadTexts: tlUpsAlarmTempBad.setStatus('current')
tlUpsAlarmInputBad = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 13))
if mibBuilder.loadTexts: tlUpsAlarmInputBad.setStatus('current')
tlUpsAlarmOutputBad = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 14))
if mibBuilder.loadTexts: tlUpsAlarmOutputBad.setStatus('current')
tlUpsAlarmOutputOverload = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 15))
if mibBuilder.loadTexts: tlUpsAlarmOutputOverload.setStatus('current')
tlUpsAlarmOnBypass = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 16))
if mibBuilder.loadTexts: tlUpsAlarmOnBypass.setStatus('current')
tlUpsAlarmBypassBad = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 17))
if mibBuilder.loadTexts: tlUpsAlarmBypassBad.setStatus('current')
tlUpsAlarmOutputOffAsRequested = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 18))
if mibBuilder.loadTexts: tlUpsAlarmOutputOffAsRequested.setStatus('current')
tlUpsAlarmUpsOffAsRequested = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 19))
if mibBuilder.loadTexts: tlUpsAlarmUpsOffAsRequested.setStatus('current')
tlUpsAlarmChargerFailed = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 20))
if mibBuilder.loadTexts: tlUpsAlarmChargerFailed.setStatus('current')
tlUpsAlarmUpsOutputOff = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 21))
if mibBuilder.loadTexts: tlUpsAlarmUpsOutputOff.setStatus('current')
tlUpsAlarmUpsSystemOff = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 22))
if mibBuilder.loadTexts: tlUpsAlarmUpsSystemOff.setStatus('current')
tlUpsAlarmFanFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 23))
if mibBuilder.loadTexts: tlUpsAlarmFanFailure.setStatus('current')
tlUpsAlarmFuseFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 24))
if mibBuilder.loadTexts: tlUpsAlarmFuseFailure.setStatus('current')
tlUpsAlarmGeneralFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 25))
if mibBuilder.loadTexts: tlUpsAlarmGeneralFault.setStatus('current')
tlUpsAlarmDiagnosticTestFailed = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 26))
if mibBuilder.loadTexts: tlUpsAlarmDiagnosticTestFailed.setStatus('current')
tlUpsAlarmCommunicationsLost = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 27))
if mibBuilder.loadTexts: tlUpsAlarmCommunicationsLost.setStatus('current')
tlUpsAlarmAwaitingPower = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 28))
if mibBuilder.loadTexts: tlUpsAlarmAwaitingPower.setStatus('current')
tlUpsAlarmShutdownPending = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 29))
if mibBuilder.loadTexts: tlUpsAlarmShutdownPending.setStatus('current')
tlUpsAlarmShutdownImminent = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 30))
if mibBuilder.loadTexts: tlUpsAlarmShutdownImminent.setStatus('current')
tlUpsAlarmTestInProgress = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 31))
if mibBuilder.loadTexts: tlUpsAlarmTestInProgress.setStatus('current')
tlUpsAlarmCircuitBreaker1Open = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 32))
if mibBuilder.loadTexts: tlUpsAlarmCircuitBreaker1Open.setStatus('current')
tlUpsAlarmCircuitBreaker2Open = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 33))
if mibBuilder.loadTexts: tlUpsAlarmCircuitBreaker2Open.setStatus('current')
tlUpsAlarmCircuitBreaker3Open = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 34))
if mibBuilder.loadTexts: tlUpsAlarmCircuitBreaker3Open.setStatus('current')
tlUpsAlarmCircuitBreaker4Open = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 35))
if mibBuilder.loadTexts: tlUpsAlarmCircuitBreaker4Open.setStatus('current')
tlUpsAlarmCircuitBreaker5Open = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 36))
if mibBuilder.loadTexts: tlUpsAlarmCircuitBreaker5Open.setStatus('current')
tlUpsAlarmCircuitBreaker6Open = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 37))
if mibBuilder.loadTexts: tlUpsAlarmCircuitBreaker6Open.setStatus('current')
tlUpsAlarmCircuitBreaker7Open = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 38))
if mibBuilder.loadTexts: tlUpsAlarmCircuitBreaker7Open.setStatus('current')
tlUpsAlarmCircuitBreaker8Open = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 39))
if mibBuilder.loadTexts: tlUpsAlarmCircuitBreaker8Open.setStatus('current')
tlUpsAlarmCurrent1AboveThreshold = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 40))
if mibBuilder.loadTexts: tlUpsAlarmCurrent1AboveThreshold.setStatus('current')
tlUpsAlarmCurrent2AboveThreshold = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 41))
if mibBuilder.loadTexts: tlUpsAlarmCurrent2AboveThreshold.setStatus('current')
tlUpsAlarmCurrent3AboveThreshold = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 3, 42))
if mibBuilder.loadTexts: tlUpsAlarmCurrent3AboveThreshold.setStatus('current')
tlUpsAlarmDevName = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsAlarmDevName.setStatus('deprecated')
tlUpsAlarmDevLocation = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsAlarmDevLocation.setStatus('deprecated')
tlUpsAlarmCategory = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsAlarmCategory.setStatus('deprecated')
tlUpsTest = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 7))
tlUpsTestDate = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 7, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsTestDate.setStatus('current')
tlUpsTestResultsDetail = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 7, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsTestResultsDetail.setStatus('current')
tlUpsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 8))
tlUpsWatchdogSupported = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 8, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsWatchdogSupported.setStatus('current')
tlUpsWatchdogSecsBeforeReboot = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 8, 2), NonNegativeInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsWatchdogSecsBeforeReboot.setStatus('current')
tlUpsWellKnownControls = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 8, 3))
tlUpsControlSelfTest = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 8, 3, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsControlSelfTest.setStatus('current')
tlUpsControlRamp = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 8, 3, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsControlRamp.setStatus('current')
tlUpsControlShed = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 8, 3, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsControlShed.setStatus('current')
tlUpsControlUpsOn = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 8, 3, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsControlUpsOn.setStatus('current')
tlUpsControlUpsOff = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 8, 3, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsControlUpsOff.setStatus('current')
tlUpsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 9))
tlUpsConfigBattReplDate = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 9, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsConfigBattReplDate.setStatus('current')
tlUpsOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 10))
tlUpsOutletNumOutlets = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 1), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsOutletNumOutlets.setStatus('current')
tlUpsOutletTable = MibTable((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2), )
if mibBuilder.loadTexts: tlUpsOutletTable.setStatus('current')
tlUpsOutletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1), ).setIndexNames((0, "TRIPPLITE-MIB", "tlUpsOutletIndex"))
if mibBuilder.loadTexts: tlUpsOutletEntry.setStatus('current')
tlUpsOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsOutletIndex.setStatus('current')
tlUpsOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsOutletState.setStatus('current')
tlUpsOutletType = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsOutletType.setStatus('current')
tlUpsOutletControl = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("turnOff", 1), ("turnOn", 2), ("cycle", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsOutletControl.setStatus('current')
tlUpsOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsOutletName.setStatus('current')
tlUpsOutletRampAction = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("remainOff", 0), ("turnOnAfterDelay", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsOutletRampAction.setStatus('current')
tlUpsOutletRampDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("delayInSeconds", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsOutletRampDataType.setStatus('current')
tlUpsOutletRampData = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsOutletRampData.setStatus('current')
tlUpsOutletShedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("remainOn", 0), ("turnOffAfterDelay", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsOutletShedAction.setStatus('current')
tlUpsOutletShedDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("delayInSeconds", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsOutletShedDataType.setStatus('current')
tlUpsOutletShedData = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsOutletShedData.setStatus('current')
tlUpsOutletGroupNdx = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsOutletGroupNdx.setStatus('current')
tlUpsOutletCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 13), PositiveInteger()).setUnits('0.1 RMS Amp').setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsOutletCurrent.setStatus('current')
tlUpsOutletPower = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 10, 2, 1, 14), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsOutletPower.setStatus('current')
tlUpsOutletGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 11))
tlUpsOutletNumOutletGroups = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 11, 1), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsOutletNumOutletGroups.setStatus('current')
tlUpsOutletGroupTable = MibTable((1, 3, 6, 1, 4, 1, 850, 100, 1, 11, 2), )
if mibBuilder.loadTexts: tlUpsOutletGroupTable.setStatus('current')
tlUpsOutletGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 100, 1, 11, 2, 1), ).setIndexNames((0, "TRIPPLITE-MIB", "tlUpsOutletGroupIndex"))
if mibBuilder.loadTexts: tlUpsOutletGroupEntry.setStatus('current')
tlUpsOutletGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 11, 2, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsOutletGroupIndex.setStatus('current')
tlUpsOutletGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 11, 2, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsOutletGroupRowStatus.setStatus('current')
tlUpsOutletGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 11, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsOutletGroupName.setStatus('current')
tlUpsOutletGroupDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 11, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsOutletGroupDesc.setStatus('current')
tlUpsOutletGroupState = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 11, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2), ("mixed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsOutletGroupState.setStatus('current')
tlUpsOutletGroupControl = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 100, 1, 11, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("turnOff", 1), ("turnOn", 2), ("cycle", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsOutletGroupControl.setStatus('current')
tlUpsMainOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 1, 12))
tlUpsMainOutletState = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2), ("mixed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsMainOutletState.setStatus('current')
tlUpsMainOutletControllable = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 12, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlUpsMainOutletControllable.setStatus('current')
tlUpsMainOutletControl = MibScalar((1, 3, 6, 1, 4, 1, 850, 100, 1, 12, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("idle", 0), ("turnOff", 1), ("turnOn", 2), ("cycle", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlUpsMainOutletControl.setStatus('current')
tlUpsTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 100, 2))
tlUpsTrapAlarmEntryAddedV1 = NotificationType((1, 3, 6, 1, 4, 1, 850, 100, 2) + (0,3)).setObjects(("TRIPPLITE-MIB", "tlUpsAlarmId"), ("TRIPPLITE-MIB", "tlUpsAlarmDescr"), ("TRIPPLITE-MIB", "tlUpsAlarmDetail"), ("TRIPPLITE-MIB", "tlUpsAlarmDeviceId"), ("TRIPPLITE-MIB", "tlUpsAlarmDeviceName"), ("TRIPPLITE-MIB", "tlUpsAlarmLocation"), ("TRIPPLITE-MIB", "tlUpsAlarmGroup"))
tlUpsTrapAlarmEntryAdded = NotificationType((1, 3, 6, 1, 4, 1, 850, 100, 2, 3)).setObjects(("TRIPPLITE-MIB", "tlUpsAlarmId"), ("TRIPPLITE-MIB", "tlUpsAlarmDescr"), ("TRIPPLITE-MIB", "tlUpsAlarmDetail"), ("TRIPPLITE-MIB", "tlUpsAlarmDeviceId"), ("TRIPPLITE-MIB", "tlUpsAlarmDeviceName"), ("TRIPPLITE-MIB", "tlUpsAlarmLocation"), ("TRIPPLITE-MIB", "tlUpsAlarmGroup"))
if mibBuilder.loadTexts: tlUpsTrapAlarmEntryAdded.setStatus('current')
tlUpsTrapAlarmEntryRemovedV1 = NotificationType((1, 3, 6, 1, 4, 1, 850, 100, 2) + (0,4)).setObjects(("TRIPPLITE-MIB", "tlUpsAlarmId"), ("TRIPPLITE-MIB", "tlUpsAlarmDescr"), ("TRIPPLITE-MIB", "tlUpsAlarmDetail"), ("TRIPPLITE-MIB", "tlUpsAlarmDeviceId"), ("TRIPPLITE-MIB", "tlUpsAlarmDeviceName"), ("TRIPPLITE-MIB", "tlUpsAlarmLocation"), ("TRIPPLITE-MIB", "tlUpsAlarmGroup"))
tlUpsTrapAlarmEntryRemoved = NotificationType((1, 3, 6, 1, 4, 1, 850, 100, 2, 4)).setObjects(("TRIPPLITE-MIB", "tlUpsAlarmId"), ("TRIPPLITE-MIB", "tlUpsAlarmDescr"), ("TRIPPLITE-MIB", "tlUpsAlarmDetail"), ("TRIPPLITE-MIB", "tlUpsAlarmDeviceId"), ("TRIPPLITE-MIB", "tlUpsAlarmDeviceName"), ("TRIPPLITE-MIB", "tlUpsAlarmLocation"), ("TRIPPLITE-MIB", "tlUpsAlarmGroup"))
if mibBuilder.loadTexts: tlUpsTrapAlarmEntryRemoved.setStatus('current')
tlUpsTrapSystemStartup = NotificationType((1, 3, 6, 1, 4, 1, 850, 100, 2, 5))
if mibBuilder.loadTexts: tlUpsTrapSystemStartup.setStatus('current')
tlUpsTrapSystemShutdown = NotificationType((1, 3, 6, 1, 4, 1, 850, 100, 2, 6))
if mibBuilder.loadTexts: tlUpsTrapSystemShutdown.setStatus('current')
tlEnviroSense = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 101))
tlEnvEnvironment = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 101, 1))
tlEnvTemperatureData = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 101, 1, 1))
tlEnvTemperatureC = MibScalar((1, 3, 6, 1, 4, 1, 850, 101, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlEnvTemperatureC.setStatus('current')
tlEnvTemperatureF = MibScalar((1, 3, 6, 1, 4, 1, 850, 101, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlEnvTemperatureF.setStatus('current')
tlEnvTemperatureLowLimit = MibScalar((1, 3, 6, 1, 4, 1, 850, 101, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlEnvTemperatureLowLimit.setStatus('current')
tlEnvTemperatureHighLimit = MibScalar((1, 3, 6, 1, 4, 1, 850, 101, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlEnvTemperatureHighLimit.setStatus('current')
tlEnvTemperatureInAlarm = MibScalar((1, 3, 6, 1, 4, 1, 850, 101, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlEnvTemperatureInAlarm.setStatus('current')
tlEnvHumidityData = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 101, 1, 2))
tlEnvHumidity = MibScalar((1, 3, 6, 1, 4, 1, 850, 101, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlEnvHumidity.setStatus('current')
tlEnvHumidityLowLimit = MibScalar((1, 3, 6, 1, 4, 1, 850, 101, 1, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlEnvHumidityLowLimit.setStatus('current')
tlEnvHumidityHighLimit = MibScalar((1, 3, 6, 1, 4, 1, 850, 101, 1, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlEnvHumidityHighLimit.setStatus('current')
tlEnvHumidityInAlarm = MibScalar((1, 3, 6, 1, 4, 1, 850, 101, 1, 2, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlEnvHumidityInAlarm.setStatus('current')
tlEnvContacts = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 101, 2))
tlEnvContactTable = MibTable((1, 3, 6, 1, 4, 1, 850, 101, 2, 1), )
if mibBuilder.loadTexts: tlEnvContactTable.setStatus('current')
tlEnvContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 101, 2, 1, 1), ).setIndexNames((0, "TRIPPLITE-MIB", "tlEnvContactIndex"))
if mibBuilder.loadTexts: tlEnvContactEntry.setStatus('current')
tlEnvContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 101, 2, 1, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlEnvContactIndex.setStatus('current')
tlEnvContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 101, 2, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlEnvContactName.setStatus('current')
tlEnvContactStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 101, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlEnvContactStatus.setStatus('current')
tlEnvContactConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 101, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normallyOpen", 0), ("normallyClosed", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlEnvContactConfig.setStatus('current')
tlCooling = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 103))
tlCoolingEnvironment = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 103, 1))
tlCoolingIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 103, 1, 1))
tlCoolingModel = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingModel.setStatus('current')
tlCoolingManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingManufacturer.setStatus('current')
tlCoolingSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingSerialNumber.setStatus('current')
tlCoolingFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingFirmwareVersion.setStatus('current')
tlCoolingHostSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingHostSoftwareVersion.setStatus('current')
tlCoolingName = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingName.setStatus('current')
tlCoolingLocation = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingLocation.setStatus('current')
tlCoolingStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 103, 1, 2))
tlCoolingCondOutletTemp = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingCondOutletTemp.setStatus('current')
tlCoolingCondInletTemp = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingCondInletTemp.setStatus('current')
tlCoolingRefrigerantTemp = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingRefrigerantTemp.setStatus('current')
tlCoolingEvapSurfaceTemp = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingEvapSurfaceTemp.setStatus('current')
tlCoolingSuctionPressure = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingSuctionPressure.setStatus('current')
tlCoolingDischargePressure = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingDischargePressure.setStatus('current')
tlCoolingEvapFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 0), ("low", 1), ("medLow", 2), ("med", 3), ("medHi", 4), ("hi", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingEvapFanSpeed.setStatus('current')
tlCoolingCondFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("low", 1), ("hi", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingCondFanSpeed.setStatus('current')
tlCoolingCompFrequency = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingCompFrequency.setStatus('current')
tlCoolingEEVPercentage = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingEEVPercentage.setStatus('current')
tlCoolingUnitCurrent = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingUnitCurrent.setStatus('current')
tlCoolingFanCurrent = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingFanCurrent.setStatus('current')
tlCoolingCompCurrent = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingCompCurrent.setStatus('current')
tlCoolingReturnAirTemp = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingReturnAirTemp.setStatus('current')
tlCoolingSuctionTemp = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingSuctionTemp.setStatus('current')
tlCoolingSupplyAirTemp = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingSupplyAirTemp.setStatus('current')
tlCoolingRunTimes = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 103, 1, 3))
tlCoolingAirFilterRunHours = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingAirFilterRunHours.setStatus('current')
tlCoolingEvapFanRunDays = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingEvapFanRunDays.setStatus('current')
tlCoolingCondFanRunDays = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingCondFanRunDays.setStatus('current')
tlCoolingCompressorRunDays = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingCompressorRunDays.setStatus('current')
tlCoolingCondPumpRunDays = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingCondPumpRunDays.setStatus('current')
tlCoolingAtomizerRunDays = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlCoolingAtomizerRunDays.setStatus('current')
tlCoolingConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 103, 1, 4))
tlCoolingOnOff = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("turnOffUnit", 0), ("turnOnUnit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingOnOff.setStatus('current')
tlCoolingSetPointTemp = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingSetPointTemp.setStatus('current')
tlCoolingAutoStart = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingAutoStart.setStatus('current')
tlCoolingFanSpeedOverride = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("autoFanSpeed", 0), ("low", 1), ("medLow", 2), ("med", 3), ("medHi", 4), ("hi", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingFanSpeedOverride.setStatus('current')
tlCoolingControlType = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("returnAirTemp", 0), ("remoteTemperature", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingControlType.setStatus('current')
tlCoolingCurrentRemoteTemp = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingCurrentRemoteTemp.setStatus('current')
tlCoolingDisplayUnits = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("metric", 0), ("english", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingDisplayUnits.setStatus('current')
tlCoolingBeepOnKey = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noBeep", 0), ("beepOn", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingBeepOnKey.setStatus('current')
tlCoolingOutputRelaySource = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("allAlarmsAndWarnings", 1), ("criticalAlarmsOnly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingOutputRelaySource.setStatus('current')
tlCoolingOffOnLeak = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("turnOff", 0), ("alarmOnly", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingOffOnLeak.setStatus('current')
tlCoolingOffOnInputContact = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("turnOff", 0), ("alarmOnly", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingOffOnInputContact.setStatus('current')
tlCoolingInputContactType = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ncRelay", 0), ("noRelay", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingInputContactType.setStatus('current')
tlCoolingOutputRelayDefault = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nc", 0), ("no", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingOutputRelayDefault.setStatus('current')
tlCoolingAirFilterInterval = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingAirFilterInterval.setStatus('current')
tlCoolingWaterLeakContactType = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 4, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noRelay", 0), ("ncRelay", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingWaterLeakContactType.setStatus('current')
tlCoolingThresholds = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 103, 1, 5))
tlCoolingMaxAirFilterRunHours = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingMaxAirFilterRunHours.setStatus('current')
tlCoolingEnableAirFilterAlarm = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingEnableAirFilterAlarm.setStatus('current')
tlCoolingMaxSupplyTemp = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingMaxSupplyTemp.setStatus('current')
tlCoolingMinSupplyTemp = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingMinSupplyTemp.setStatus('current')
tlCoolingTempDiffAlarm = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingTempDiffAlarm.setStatus('current')
tlCoolingMaxReturnAirTemp = MibScalar((1, 3, 6, 1, 4, 1, 850, 103, 1, 5, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tlCoolingMaxReturnAirTemp.setStatus('current')
tlCoolingAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 103, 6))
tlCoolingWellKnownAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 103, 6, 3))
tlCoolingSupplyAirSensorFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 1))
if mibBuilder.loadTexts: tlCoolingSupplyAirSensorFault.setStatus('current')
tlCoolingReturnAirSensorFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 2))
if mibBuilder.loadTexts: tlCoolingReturnAirSensorFault.setStatus('current')
tlCoolingCondenserInletAirSensorFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 3))
if mibBuilder.loadTexts: tlCoolingCondenserInletAirSensorFault.setStatus('current')
tlCoolingCondenserOutletAirSensorFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 4))
if mibBuilder.loadTexts: tlCoolingCondenserOutletAirSensorFault.setStatus('current')
tlCoolingSuctionTemperatureSensorFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 5))
if mibBuilder.loadTexts: tlCoolingSuctionTemperatureSensorFault.setStatus('current')
tlCoolingEvaporatorTemperatureSensorFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 6))
if mibBuilder.loadTexts: tlCoolingEvaporatorTemperatureSensorFault.setStatus('current')
tlCoolingAirFilterClogged = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 7))
if mibBuilder.loadTexts: tlCoolingAirFilterClogged.setStatus('current')
tlCoolingAirFilterRunHoursViolation = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 8))
if mibBuilder.loadTexts: tlCoolingAirFilterRunHoursViolation.setStatus('current')
tlCoolingSuctionPressureSensorFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 9))
if mibBuilder.loadTexts: tlCoolingSuctionPressureSensorFault.setStatus('current')
tlCoolingInverterCommunicationsFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 10))
if mibBuilder.loadTexts: tlCoolingInverterCommunicationsFault.setStatus('current')
tlCoolingRemoteShutdownViaInputContact = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 11))
if mibBuilder.loadTexts: tlCoolingRemoteShutdownViaInputContact.setStatus('current')
tlCoolingCondensatePumpFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 12))
if mibBuilder.loadTexts: tlCoolingCondensatePumpFault.setStatus('current')
tlCoolingLowRefrigerantStartupFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 13))
if mibBuilder.loadTexts: tlCoolingLowRefrigerantStartupFault.setStatus('current')
tlCoolingCondenserFanFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 14))
if mibBuilder.loadTexts: tlCoolingCondenserFanFault.setStatus('current')
tlCoolingCondenserFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 15))
if mibBuilder.loadTexts: tlCoolingCondenserFailure.setStatus('current')
tlCoolingEvaporatorCoolingFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 16))
if mibBuilder.loadTexts: tlCoolingEvaporatorCoolingFailure.setStatus('current')
tlCoolingReturnAirTempHigh = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 17))
if mibBuilder.loadTexts: tlCoolingReturnAirTempHigh.setStatus('current')
tlCoolingSupplyAirTempHigh = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 18))
if mibBuilder.loadTexts: tlCoolingSupplyAirTempHigh.setStatus('current')
tlCoolingEvaporatorFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 19))
if mibBuilder.loadTexts: tlCoolingEvaporatorFailure.setStatus('current')
tlCoolingEvaporatorFreezeUp = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 20))
if mibBuilder.loadTexts: tlCoolingEvaporatorFreezeUp.setStatus('current')
tlCoolingDischargePressureHigh = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 21))
if mibBuilder.loadTexts: tlCoolingDischargePressureHigh.setStatus('current')
tlCoolingPressureGaugeFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 22))
if mibBuilder.loadTexts: tlCoolingPressureGaugeFailure.setStatus('current')
tlCoolingDischargePressurePersistentHigh = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 23))
if mibBuilder.loadTexts: tlCoolingDischargePressurePersistentHigh.setStatus('current')
tlCoolingSuctionPressureLowStartFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 24))
if mibBuilder.loadTexts: tlCoolingSuctionPressureLowStartFailure.setStatus('current')
tlCoolingSuctionPressureLow = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 25))
if mibBuilder.loadTexts: tlCoolingSuctionPressureLow.setStatus('current')
tlCoolingSuctionPressurePersistentLow = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 26))
if mibBuilder.loadTexts: tlCoolingSuctionPressurePersistentLow.setStatus('current')
tlCoolingStartupLinePressureImbalance = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 27))
if mibBuilder.loadTexts: tlCoolingStartupLinePressureImbalance.setStatus('current')
tlCoolingCompressorFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 28))
if mibBuilder.loadTexts: tlCoolingCompressorFailure.setStatus('current')
tlCoolingCurrentLimit = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 29))
if mibBuilder.loadTexts: tlCoolingCurrentLimit.setStatus('current')
tlCoolingWaterLeak = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 30))
if mibBuilder.loadTexts: tlCoolingWaterLeak.setStatus('current')
tlCoolingFanUnderCurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 31))
if mibBuilder.loadTexts: tlCoolingFanUnderCurrent.setStatus('current')
tlCoolingFanOverCurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 32))
if mibBuilder.loadTexts: tlCoolingFanOverCurrent.setStatus('current')
tlCoolingDischargePressureSensorFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 33))
if mibBuilder.loadTexts: tlCoolingDischargePressureSensorFault.setStatus('current')
tlCoolingWaterFull = ObjectIdentity((1, 3, 6, 1, 4, 1, 850, 103, 6, 3, 34))
if mibBuilder.loadTexts: tlCoolingWaterFull.setStatus('current')
tlConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 20))
tlCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 20, 1))
tlGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 20, 2))
tlSubsetGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 20, 2, 1))
tlBasicGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 20, 2, 2))
tlFullGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 20, 2, 3))
tlV11Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 20, 2, 4))
tlDeprecatedV11Group = ObjectGroup((1, 3, 6, 1, 4, 1, 850, 20, 2, 4, 1)).setObjects(("TRIPPLITE-MIB", "upsTrapCode"), ("TRIPPLITE-MIB", "upsTrapDescription"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tlDeprecatedV11Group = tlDeprecatedV11Group.setStatus('obsolete')
tlDeprecatedV11NotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 850, 20, 2, 4, 2)).setObjects(("TRIPPLITE-MIB", "tlV11upsCritical"), ("TRIPPLITE-MIB", "tlV11upsWarning"), ("TRIPPLITE-MIB", "tlV11upsInformation"), ("TRIPPLITE-MIB", "tlV11upsAlarmCleared"), ("TRIPPLITE-MIB", "tlV11upsAgentStarted"), ("TRIPPLITE-MIB", "tlV11upsAgentStopped"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tlDeprecatedV11NotificationsGroup = tlDeprecatedV11NotificationsGroup.setStatus('obsolete')
tlObsoleteV11Group = ObjectGroup((1, 3, 6, 1, 4, 1, 850, 20, 2, 4, 3)).setObjects(("TRIPPLITE-MIB", "upsReceptaclesNumReceptacles"), ("TRIPPLITE-MIB", "upsReceptacleIndex"), ("TRIPPLITE-MIB", "upsReceptacleType"), ("TRIPPLITE-MIB", "upsReceptacleStatus"), ("TRIPPLITE-MIB", "upsReceptacleControl"), ("TRIPPLITE-MIB", "upsEnvTemperature"), ("TRIPPLITE-MIB", "upsEnvHumidity"), ("TRIPPLITE-MIB", "upsContactIndex"), ("TRIPPLITE-MIB", "upsContactName"), ("TRIPPLITE-MIB", "upsContactStatus"), ("TRIPPLITE-MIB", "upsContactConfig"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tlObsoleteV11Group = tlObsoleteV11Group.setStatus('obsolete')
tlUpsFullGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 20, 2, 3, 100))
tlUpsFullIdentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 850, 20, 2, 3, 100, 1)).setObjects(("TRIPPLITE-MIB", "tlUpsIdentUpsSoftwareChecksum"), ("TRIPPLITE-MIB", "tlUpsIdentSerialNum"), ("TRIPPLITE-MIB", "tlUpsIdentID"), ("TRIPPLITE-MIB", "tlUpsSelectedDeviceID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tlUpsFullIdentGroup = tlUpsFullIdentGroup.setStatus('current')
tlUpsFullBatteryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 850, 20, 2, 3, 100, 2)).setObjects(("TRIPPLITE-MIB", "tlUpsBatteryAge"), ("TRIPPLITE-MIB", "tlUpsTemperatureF"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tlUpsFullBatteryGroup = tlUpsFullBatteryGroup.setStatus('current')
tlUpsFullAlarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 20, 2, 3, 100, 6))
tlUpsFullAlarmObjsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 850, 20, 2, 3, 100, 6, 1)).setObjects(("TRIPPLITE-MIB", "tlUpsAlarmDevName"), ("TRIPPLITE-MIB", "tlUpsAlarmDevLocation"), ("TRIPPLITE-MIB", "tlUpsAlarmCategory"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tlUpsFullAlarmObjsGroup = tlUpsFullAlarmObjsGroup.setStatus('current')
tlUpsFullTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 850, 20, 2, 3, 100, 7)).setObjects(("TRIPPLITE-MIB", "tlUpsTestDate"), ("TRIPPLITE-MIB", "tlUpsTestResultsDetail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tlUpsFullTestGroup = tlUpsFullTestGroup.setStatus('current')
tlUpsFullControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 850, 20, 2, 3, 100, 8)).setObjects(("TRIPPLITE-MIB", "tlUpsWatchdogSupported"), ("TRIPPLITE-MIB", "tlUpsWatchdogSecsBeforeReboot"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tlUpsFullControlGroup = tlUpsFullControlGroup.setStatus('current')
tlUpsFullConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 850, 20, 2, 3, 100, 9)).setObjects(("TRIPPLITE-MIB", "tlUpsConfigBattReplDate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tlUpsFullConfigGroup = tlUpsFullConfigGroup.setStatus('current')
tlUpsFullOutletGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 850, 20, 2, 3, 100, 10)).setObjects(("TRIPPLITE-MIB", "tlUpsOutletNumOutlets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tlUpsFullOutletGroup = tlUpsFullOutletGroup.setStatus('current')
trippUPS = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1))
trippUpsReceptacles = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 1))
upsReceptaclesNumReceptacles = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 1, 1), NonNegativeInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsReceptaclesNumReceptacles.setStatus('obsolete')
upsReceptacleTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 1, 2), )
if mibBuilder.loadTexts: upsReceptacleTable.setStatus('obsolete')
upsReceptacleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 1), ).setIndexNames((0, "TRIPPLITE-MIB", "upsReceptacleIndex"))
if mibBuilder.loadTexts: upsReceptacleEntry.setStatus('obsolete')
upsReceptacleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsReceptacleIndex.setStatus('obsolete')
upsReceptacleType = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("surgeOnly", 1), ("batteryProtected", 2), ("controllableBatteryProtected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsReceptacleType.setStatus('obsolete')
upsReceptacleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsReceptacleStatus.setStatus('obsolete')
upsReceptacleControl = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("cycle", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsReceptacleControl.setStatus('obsolete')
trippUpsTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 2))
upsTrapCode = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsTrapCode.setStatus('deprecated')
upsTrapDescription = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsTrapDescription.setStatus('deprecated')
trippUpsEnvironment = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 3))
upsEnvTemperature = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEnvTemperature.setStatus('obsolete')
upsEnvHumidity = MibScalar((1, 3, 6, 1, 4, 1, 850, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEnvHumidity.setStatus('obsolete')
trippUpsContacts = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 4))
upsContactTable = MibTable((1, 3, 6, 1, 4, 1, 850, 1, 4, 1), )
if mibBuilder.loadTexts: upsContactTable.setStatus('obsolete')
upsContactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 850, 1, 4, 1, 1), ).setIndexNames((0, "TRIPPLITE-MIB", "upsContactIndex"))
if mibBuilder.loadTexts: upsContactEntry.setStatus('obsolete')
upsContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 4, 1, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsContactIndex.setStatus('obsolete')
upsContactName = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsContactName.setStatus('obsolete')
upsContactStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("normal", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsContactStatus.setStatus('obsolete')
upsContactConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 850, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normallyClosed", 0), ("normallyOpen", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsContactConfig.setStatus('obsolete')
tlV11TrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 850, 1, 0))
tlV11upsCritical = NotificationType((1, 3, 6, 1, 4, 1, 850, 1, 0, 100)).setObjects(("TRIPPLITE-MIB", "upsTrapCode"), ("TRIPPLITE-MIB", "upsTrapDescription"))
if mibBuilder.loadTexts: tlV11upsCritical.setStatus('obsolete')
tlV11upsWarning = NotificationType((1, 3, 6, 1, 4, 1, 850, 1, 0, 101)).setObjects(("TRIPPLITE-MIB", "upsTrapCode"), ("TRIPPLITE-MIB", "upsTrapDescription"))
if mibBuilder.loadTexts: tlV11upsWarning.setStatus('obsolete')
tlV11upsInformation = NotificationType((1, 3, 6, 1, 4, 1, 850, 1, 0, 102)).setObjects(("TRIPPLITE-MIB", "upsTrapCode"), ("TRIPPLITE-MIB", "upsTrapDescription"))
if mibBuilder.loadTexts: tlV11upsInformation.setStatus('obsolete')
tlV11upsAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 850, 1, 0, 103)).setObjects(("TRIPPLITE-MIB", "upsTrapCode"), ("TRIPPLITE-MIB", "upsTrapDescription"))
if mibBuilder.loadTexts: tlV11upsAlarmCleared.setStatus('obsolete')
tlV11upsAgentStarted = NotificationType((1, 3, 6, 1, 4, 1, 850, 1, 0, 104)).setObjects(("TRIPPLITE-MIB", "upsTrapCode"), ("TRIPPLITE-MIB", "upsTrapDescription"))
if mibBuilder.loadTexts: tlV11upsAgentStarted.setStatus('obsolete')
tlV11upsAgentStopped = NotificationType((1, 3, 6, 1, 4, 1, 850, 1, 0, 105)).setObjects(("TRIPPLITE-MIB", "upsTrapCode"), ("TRIPPLITE-MIB", "upsTrapDescription"))
if mibBuilder.loadTexts: tlV11upsAgentStopped.setStatus('obsolete')
mibBuilder.exportSymbols("TRIPPLITE-MIB", tlCoolingControlType=tlCoolingControlType, tlUpsTestDate=tlUpsTestDate, tlCoolingSupplyAirTempHigh=tlCoolingSupplyAirTempHigh, tlUpsOutletTable=tlUpsOutletTable, tlCoolingEvapFanRunDays=tlCoolingEvapFanRunDays, tlCoolingMaxReturnAirTemp=tlCoolingMaxReturnAirTemp, bsdi=bsdi, tlCoolingSuctionPressurePersistentLow=tlCoolingSuctionPressurePersistentLow, tlUpsAlarmCircuitBreaker2Open=tlUpsAlarmCircuitBreaker2Open, win32=win32, tlUpsAlarmCurrent1AboveThreshold=tlUpsAlarmCurrent1AboveThreshold, trippUPS=trippUPS, trippUpsEnvironment=trippUpsEnvironment, tlEnvContactEntry=tlEnvContactEntry, tlUpsFullAlarmGroup=tlUpsFullAlarmGroup, tlUpsAlarmCircuitBreaker8Open=tlUpsAlarmCircuitBreaker8Open, tlUpsOutputCircuitLoadCurrent=tlUpsOutputCircuitLoadCurrent, upsReceptacleEntry=upsReceptacleEntry, solaris=solaris, tlPAEmailContactRowStatus=tlPAEmailContactRowStatus, tlUpsOutlet=tlUpsOutlet, tlUpsAlarmsPresent=tlUpsAlarmsPresent, tlEnvTemperatureF=tlEnvTemperatureF, tlUpsInputVoltage=tlUpsInputVoltage, trippUpsContacts=trippUpsContacts, tlPANumberOfEmailContacts=tlPANumberOfEmailContacts, tlUpsTrapSystemShutdown=tlUpsTrapSystemShutdown, upsContactName=upsContactName, tlCoolingEvaporatorFailure=tlCoolingEvaporatorFailure, tlCoolingCondensatePumpFault=tlCoolingCondensatePumpFault, tlCoolingWellKnownAlarms=tlCoolingWellKnownAlarms, tlUpsInputNumVoltages=tlUpsInputNumVoltages, tlUpsAlarmDevLocation=tlUpsAlarmDevLocation, tlUpsOutletGroupState=tlUpsOutletGroupState, tlUpsControl=tlUpsControl, tlEnvTemperatureC=tlEnvTemperatureC, tlUpsInputVoltageTable=tlUpsInputVoltageTable, tlCoolingPressureGaugeFailure=tlCoolingPressureGaugeFailure, tlCoolingUnitCurrent=tlCoolingUnitCurrent, tlUpsAlarmCurrent2AboveThreshold=tlUpsAlarmCurrent2AboveThreshold, tlPASnmpContactSnmpVersion=tlPASnmpContactSnmpVersion, tlCoolingCompFrequency=tlCoolingCompFrequency, irix=irix, tlCoolingMinSupplyTemp=tlCoolingMinSupplyTemp, tlCoolingCondPumpRunDays=tlCoolingCondPumpRunDays, tlCoolingManufacturer=tlCoolingManufacturer, solintel=solintel, tlV11TrapsPrefix=tlV11TrapsPrefix, tlCoolingHostSoftwareVersion=tlCoolingHostSoftwareVersion, tlUpsOutletGroupRowStatus=tlUpsOutletGroupRowStatus, tlCoolingReturnAirTempHigh=tlCoolingReturnAirTempHigh, tlUpsBattery=tlUpsBattery, hpux11=hpux11, sco=sco, tlCoolingCondenserFanFault=tlCoolingCondenserFanFault, tlCoolingSuctionPressureLow=tlCoolingSuctionPressureLow, tlBasicGroups=tlBasicGroups, tlPAEmailContactsTable=tlPAEmailContactsTable, tlUpsAlarmCircuitBreaker5Open=tlUpsAlarmCircuitBreaker5Open, tlUpsTrapSystemStartup=tlUpsTrapSystemStartup, tlUpsControlUpsOn=tlUpsControlUpsOn, unknown=unknown, tlCoolingEnvironment=tlCoolingEnvironment, tlEnvContacts=tlEnvContacts, tlUpsAlarmId=tlUpsAlarmId, tlCoolingCondInletTemp=tlCoolingCondInletTemp, tlCoolingCondenserFailure=tlCoolingCondenserFailure, tlV11Groups=tlV11Groups, upsReceptacleTable=upsReceptacleTable, tlUpsAlarmTestInProgress=tlUpsAlarmTestInProgress, tlCoolingDischargePressureHigh=tlCoolingDischargePressureHigh, tlCoolingReturnAirTemp=tlCoolingReturnAirTemp, upsContactIndex=upsContactIndex, tlCoolingWaterLeak=tlCoolingWaterLeak, tlCoolingSerialNumber=tlCoolingSerialNumber, tlCoolingEvaporatorCoolingFailure=tlCoolingEvaporatorCoolingFailure, trippUpsTrapInfo=trippUpsTrapInfo, tlV11upsAgentStopped=tlV11upsAgentStopped, tlUpsAlarmGeneralFault=tlUpsAlarmGeneralFault, tlUpsAlarmChargerFailed=tlUpsAlarmChargerFailed, tlCoolingLocation=tlCoolingLocation, tlCoolingEvapFanSpeed=tlCoolingEvapFanSpeed, tlCoolingCondOutletTemp=tlCoolingCondOutletTemp, tlUpsTestResultsDetail=tlUpsTestResultsDetail, tlUpsAlarm=tlUpsAlarm, tlCoolingDischargePressurePersistentHigh=tlCoolingDischargePressurePersistentHigh, tlFullGroups=tlFullGroups, tlEnvHumidityData=tlEnvHumidityData, tlCooling=tlCooling, tlCoolingSupplyAirTemp=tlCoolingSupplyAirTemp, tlUpsAlarmUserDefined=tlUpsAlarmUserDefined, tlPAEmailContacts=tlPAEmailContacts, tlUpsAlarmFuseFailure=tlUpsAlarmFuseFailure, tlUpsFullBatteryGroup=tlUpsFullBatteryGroup, tlUpsIdentID=tlUpsIdentID, tlUpsLocation=tlUpsLocation, tlUpsAlarmSecondaryPowerOutage=tlUpsAlarmSecondaryPowerOutage, tlUpsAlarmInputBad=tlUpsAlarmInputBad, tlCoolingAlarm=tlCoolingAlarm, tlCoolingName=tlCoolingName, tlUpsConfig=tlUpsConfig, tlV11upsInformation=tlV11upsInformation, tlCoolingCondFanSpeed=tlCoolingCondFanSpeed, tlCoolingEvapSurfaceTemp=tlCoolingEvapSurfaceTemp, tlCoolingTempDiffAlarm=tlCoolingTempDiffAlarm, tlCoolingSetPointTemp=tlCoolingSetPointTemp, tlCoolingAtomizerRunDays=tlCoolingAtomizerRunDays, tlUpsOutletRampData=tlUpsOutletRampData, win9x=win9x, tlPAEmailContactName=tlPAEmailContactName, tlPAEmailContactIndex=tlPAEmailContactIndex, tlCoolingDischargePressure=tlCoolingDischargePressure, upsEnvHumidity=upsEnvHumidity, hpux10=hpux10, solspark=solspark, tlPASnmpContactIndex=tlPASnmpContactIndex, tlUpsWellKnownControls=tlUpsWellKnownControls, trippUpsReceptacles=trippUpsReceptacles, tlUpsIdent=tlUpsIdent, tlUpsBatteryAge=tlUpsBatteryAge, tlUpsOutputCircuitEntry=tlUpsOutputCircuitEntry, tlUpsOutletName=tlUpsOutletName, upsReceptacleIndex=upsReceptacleIndex, upsContactStatus=upsContactStatus, tlUpsFullIdentGroup=tlUpsFullIdentGroup, tlUpsMainOutlet=tlUpsMainOutlet, tlUpsAlarmDescr=tlUpsAlarmDescr, tlUpsAlarmDiagnosticTestFailed=tlUpsAlarmDiagnosticTestFailed, tlUpsControlShed=tlUpsControlShed, tlCoolingConfig=tlCoolingConfig, tlUpsAlarmOutputBad=tlUpsAlarmOutputBad, tlUpsMainOutletControllable=tlUpsMainOutletControllable, tlEnvEnvironment=tlEnvEnvironment, tlCoolingFanCurrent=tlCoolingFanCurrent, tlUpsOutputCircuitIndex=tlUpsOutputCircuitIndex, tlUpsWatchdogSecsBeforeReboot=tlUpsWatchdogSecsBeforeReboot, tlCoolingEnableAirFilterAlarm=tlCoolingEnableAirFilterAlarm, tlPASnmpContactPort=tlPASnmpContactPort, tlCoolingEvaporatorTemperatureSensorFault=tlCoolingEvaporatorTemperatureSensorFault, tlUpsAlarmDetail=tlUpsAlarmDetail, tlUpsAlarmBatteryBad=tlUpsAlarmBatteryBad, tlUpsFullAlarmObjsGroup=tlUpsFullAlarmObjsGroup, tlUpsTemperatureF=tlUpsTemperatureF, tlUpsAlarmTable=tlUpsAlarmTable, osf=osf, tlCoolingReturnAirSensorFault=tlCoolingReturnAirSensorFault, tlUpsOutletControl=tlUpsOutletControl, tlCoolingBeepOnKey=tlCoolingBeepOnKey, tlUpsInputVoltageType=tlUpsInputVoltageType, ultrix=ultrix, tlUpsOutletGroupDesc=tlUpsOutletGroupDesc, tlCoolingRemoteShutdownViaInputContact=tlCoolingRemoteShutdownViaInputContact, tlUpsFullGroups=tlUpsFullGroups, upsReceptacleControl=upsReceptacleControl, upsReceptacleStatus=upsReceptacleStatus, tlCoolingMaxAirFilterRunHours=tlCoolingMaxAirFilterRunHours, tlUpsInputVoltageIndex=tlUpsInputVoltageIndex, tlUpsOutletNumOutlets=tlUpsOutletNumOutlets, tlUpsAlarmCategory=tlUpsAlarmCategory, tlEnvContactName=tlEnvContactName, tlUpsObjects=tlUpsObjects, tlPASnmpContactIpAddress=tlPASnmpContactIpAddress, tlEnvTemperatureData=tlEnvTemperatureData, tlGroups=tlGroups, tlUpsOutletShedAction=tlUpsOutletShedAction, tlUpsOutletGroupIndex=tlUpsOutletGroupIndex, tlUpsAlarmUpsOutputOff=tlUpsAlarmUpsOutputOff, tlUpsControlSelfTest=tlUpsControlSelfTest, tlCoolingStatus=tlCoolingStatus, tlUpsAlarmDeviceName=tlUpsAlarmDeviceName, upsReceptaclesNumReceptacles=upsReceptaclesNumReceptacles, tlCoolingAirFilterInterval=tlCoolingAirFilterInterval, tlCoolingThresholds=tlCoolingThresholds, upsContactEntry=upsContactEntry, tlCoolingIdent=tlCoolingIdent, tlV11upsAlarmCleared=tlV11upsAlarmCleared, tlObsoleteV11Group=tlObsoleteV11Group, tlUpsAlarmCircuitBreaker6Open=tlUpsAlarmCircuitBreaker6Open, upsTrapCode=upsTrapCode, tlUpsAlarmGroup=tlUpsAlarmGroup, tlUpsAlarmBypassBad=tlUpsAlarmBypassBad, tlUpsAlarmBatteryAgeAboveThreshold=tlUpsAlarmBatteryAgeAboveThreshold, tlCoolingRefrigerantTemp=tlCoolingRefrigerantTemp, tlUpsAlarmUpsSystemOff=tlUpsAlarmUpsSystemOff, tlUpsOutputCircuits=tlUpsOutputCircuits, tlUpsOutletGroup=tlUpsOutletGroup, tlUpsOutletEntry=tlUpsOutletEntry, tlUpsSelectedDeviceID=tlUpsSelectedDeviceID, tlEnvTemperatureInAlarm=tlEnvTemperatureInAlarm, tlUpsAlarmTime=tlUpsAlarmTime, tlEnviroSense=tlEnviroSense, tlDeprecatedV11NotificationsGroup=tlDeprecatedV11NotificationsGroup, tlPASystem=tlPASystem, tlUpsOutputPowerTotal=tlUpsOutputPowerTotal, tlUPS=tlUPS, tlUpsAlarmDevName=tlUpsAlarmDevName, tlCoolingDisplayUnits=tlCoolingDisplayUnits, tlPowerAlert=tlPowerAlert, tlCoolingCompCurrent=tlCoolingCompCurrent, tlCoolingSuctionTemperatureSensorFault=tlCoolingSuctionTemperatureSensorFault, tlUpsSnmpCardSerialNum=tlUpsSnmpCardSerialNum, tlPASnmpContactAuthPassword=tlPASnmpContactAuthPassword, tlUpsOutletNumOutletGroups=tlUpsOutletNumOutletGroups, tlCoolingCondenserInletAirSensorFault=tlCoolingCondenserInletAirSensorFault, tlPASnmpContactName=tlPASnmpContactName, tlUpsOutletPower=tlUpsOutletPower, tlUpsAlarmCircuitBreaker1Open=tlUpsAlarmCircuitBreaker1Open, tlUpsOutletGroupTable=tlUpsOutletGroupTable, upsContactConfig=upsContactConfig, winnt=winnt, tlCoolingInverterCommunicationsFault=tlCoolingInverterCommunicationsFault, tlUpsOutletIndex=tlUpsOutletIndex, tlCoolingOnOff=tlCoolingOnOff, tlUpsWellKnownAlarms=tlUpsWellKnownAlarms, tlUpsAlarmDepletedBattery=tlUpsAlarmDepletedBattery, tlCoolingOffOnInputContact=tlCoolingOffOnInputContact, tlUpsInputVoltageEntry=tlUpsInputVoltageEntry, tlUpsOutletShedData=tlUpsOutletShedData, tlUpsOutletGroupName=tlUpsOutletGroupName, tlUpsOutletState=tlUpsOutletState, tlCoolingSuctionPressure=tlCoolingSuctionPressure, tlUpsAlarmPrimaryPowerOutage=tlUpsAlarmPrimaryPowerOutage, tlEnvContactConfig=tlEnvContactConfig, tlOperatingSystems=tlOperatingSystems, tlCoolingMaxSupplyTemp=tlCoolingMaxSupplyTemp, tlUpsAlarmCircuitBreaker7Open=tlUpsAlarmCircuitBreaker7Open, freebsd=freebsd, tlCoolingFirmwareVersion=tlCoolingFirmwareVersion, tlUpsAlarmCircuitBreaker3Open=tlUpsAlarmCircuitBreaker3Open, osx=osx, tlUpsTrapAlarmEntryRemovedV1=tlUpsTrapAlarmEntryRemovedV1, tlCoolingCurrentLimit=tlCoolingCurrentLimit, tlEnvHumidityInAlarm=tlEnvHumidityInAlarm, tlUpsControlRamp=tlUpsControlRamp, tlCoolingCondenserOutletAirSensorFault=tlCoolingCondenserOutletAirSensorFault, tlUpsAlarmAwaitingPower=tlUpsAlarmAwaitingPower, tlPAContacts=tlPAContacts, tlCoolingRunTimes=tlCoolingRunTimes, tlUpsFullConfigGroup=tlUpsFullConfigGroup, tlCoolingSuctionPressureLowStartFailure=tlCoolingSuctionPressureLowStartFailure, tlUpsMainOutletState=tlUpsMainOutletState, tlUpsIdentSerialNum=tlUpsIdentSerialNum, tlEnumerations=tlEnumerations, tlPASnmpContacts=tlPASnmpContacts, tlEnvHumidity=tlEnvHumidity, tlUpsAlarmOnBypass=tlUpsAlarmOnBypass, tripplite=tripplite, tlUpsAlarmLowBattery=tlUpsAlarmLowBattery, tlV11upsWarning=tlV11upsWarning, openbsd=openbsd, tlPASnmpContactSecurityName=tlPASnmpContactSecurityName, tlUpsOutletGroupEntry=tlUpsOutletGroupEntry, tlUpsWatchdogSupported=tlUpsWatchdogSupported, tlCoolingOffOnLeak=tlCoolingOffOnLeak)
mibBuilder.exportSymbols("TRIPPLITE-MIB", tlCoolingOutputRelayDefault=tlCoolingOutputRelayDefault, upsReceptacleType=upsReceptacleType, tlCoolingModel=tlCoolingModel, tlCoolingDischargePressureSensorFault=tlCoolingDischargePressureSensorFault, tlUpsAlarmLoadOff=tlUpsAlarmLoadOff, tlUpsTest=tlUpsTest, tlCoolingOutputRelaySource=tlCoolingOutputRelaySource, upsEnvTemperature=upsEnvTemperature, tlUpsOutletGroupNdx=tlUpsOutletGroupNdx, tlCoolingStartupLinePressureImbalance=tlCoolingStartupLinePressureImbalance, tlUpsConfigBattReplDate=tlUpsConfigBattReplDate, tlPANumberOfSnmpContacts=tlPANumberOfSnmpContacts, tlCoolingEEVPercentage=tlCoolingEEVPercentage, tlPASnmpContactPrivPassword=tlPASnmpContactPrivPassword, tlUpsAlarmLoadLevelAboveThreshold=tlUpsAlarmLoadLevelAboveThreshold, tlUpsAlarmOutputOverload=tlUpsAlarmOutputOverload, tlUpsAlarmCommunicationsLost=tlUpsAlarmCommunicationsLost, tlUpsAlarmMac=tlUpsAlarmMac, tlUpsFullTestGroup=tlUpsFullTestGroup, tlCoolingWaterLeakContactType=tlCoolingWaterLeakContactType, tlUpsAlarmDeviceId=tlUpsAlarmDeviceId, tlUpsOutletGroupControl=tlUpsOutletGroupControl, tlCoolingAutoStart=tlCoolingAutoStart, sunos4=sunos4, tlUpsMainOutletControl=tlUpsMainOutletControl, tlUpsOutletRampDataType=tlUpsOutletRampDataType, tlUpsAlarmIp=tlUpsAlarmIp, tlPASnmpContactRowStatus=tlPASnmpContactRowStatus, tlCoolingFanUnderCurrent=tlCoolingFanUnderCurrent, tlUpsAlarmTempBad=tlUpsAlarmTempBad, tlEnvHumidityHighLimit=tlEnvHumidityHighLimit, tlUpsInput=tlUpsInput, tlUpsAlarmOutputCurrentChanged=tlUpsAlarmOutputCurrentChanged, tlEnvHumidityLowLimit=tlEnvHumidityLowLimit, tlCoolingFanSpeedOverride=tlCoolingFanSpeedOverride, PYSNMP_MODULE_ID=tripplite, upsContactTable=upsContactTable, tlConformance=tlConformance, tlV11upsAgentStarted=tlV11upsAgentStarted, tlUpsAlarmCurrent3AboveThreshold=tlUpsAlarmCurrent3AboveThreshold, tlUpsAlarmEntry=tlUpsAlarmEntry, tlCoolingInputContactType=tlCoolingInputContactType, tlUpsAlarmShutdownImminent=tlUpsAlarmShutdownImminent, tlCoolingAirFilterRunHours=tlCoolingAirFilterRunHours, tlCoolingCondFanRunDays=tlCoolingCondFanRunDays, tlPAEmailContactAddress=tlPAEmailContactAddress, tlV11upsCritical=tlV11upsCritical, tlUpsOutputCircuitTable=tlUpsOutputCircuitTable, tlCoolingLowRefrigerantStartupFault=tlCoolingLowRefrigerantStartupFault, tlCoolingSupplyAirSensorFault=tlCoolingSupplyAirSensorFault, tlEnvContactIndex=tlEnvContactIndex, tlUpsOutletRampAction=tlUpsOutletRampAction, tlCoolingEvaporatorFreezeUp=tlCoolingEvaporatorFreezeUp, tlUpsTrapAlarmEntryAdded=tlUpsTrapAlarmEntryAdded, tlUpsAlarmFanFailure=tlUpsAlarmFanFailure, aix=aix, tlUpsOutletShedDataType=tlUpsOutletShedDataType, tlEnvContactStatus=tlEnvContactStatus, tlEnvTemperatureLowLimit=tlEnvTemperatureLowLimit, tlCoolingWaterFull=tlCoolingWaterFull, tlEnvContactTable=tlEnvContactTable, tlCoolingCompressorRunDays=tlCoolingCompressorRunDays, tlUpsOutletType=tlUpsOutletType, tlUpsIdentUpsSoftwareChecksum=tlUpsIdentUpsSoftwareChecksum, tlUpsAlarmShutdownPending=tlUpsAlarmShutdownPending, tlCoolingSuctionPressureSensorFault=tlCoolingSuctionPressureSensorFault, tlDeprecatedV11Group=tlDeprecatedV11Group, tlPASnmpContactsTable=tlPASnmpContactsTable, tlCompliances=tlCompliances, tlUpsOutletCurrent=tlUpsOutletCurrent, tlUpsAlarmOnBattery=tlUpsAlarmOnBattery, tlEnvTemperatureHighLimit=tlEnvTemperatureHighLimit, tlUpsFullControlGroup=tlUpsFullControlGroup, tlCoolingAirFilterRunHoursViolation=tlCoolingAirFilterRunHoursViolation, tlUpsAlarmOutputOffAsRequested=tlUpsAlarmOutputOffAsRequested, netbsd1=netbsd1, linux=linux, tlCoolingCurrentRemoteTemp=tlCoolingCurrentRemoteTemp, tlPASnmpContactEntry=tlPASnmpContactEntry, tlUpsFullOutletGroup=tlUpsFullOutletGroup, tlPAEmailContactEntry=tlPAEmailContactEntry, tlCoolingAirFilterClogged=tlCoolingAirFilterClogged, tlUpsAlarmCircuitBreaker4Open=tlUpsAlarmCircuitBreaker4Open, tlUpsOutputCircuitStatus=tlUpsOutputCircuitStatus, tlUpsControlUpsOff=tlUpsControlUpsOff, tlUpsTrapAlarmEntryRemoved=tlUpsTrapAlarmEntryRemoved, upsTrapDescription=upsTrapDescription, tlSubsetGroups=tlSubsetGroups, tlCoolingFanOverCurrent=tlCoolingFanOverCurrent, tlUpsOutput=tlUpsOutput, tlUpsTraps=tlUpsTraps, hpux9=hpux9, tlUpsAlarmLocation=tlUpsAlarmLocation, tlCoolingCompressorFailure=tlCoolingCompressorFailure, tlCoolingSuctionTemp=tlCoolingSuctionTemp, tlUpsTrapAlarmEntryAddedV1=tlUpsTrapAlarmEntryAddedV1, tlUpsAlarmUpsOffAsRequested=tlUpsAlarmUpsOffAsRequested)
