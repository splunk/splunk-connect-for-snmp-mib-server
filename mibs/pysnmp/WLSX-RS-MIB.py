#
# PySNMP MIB module WLSX-RS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WLSX-RS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:30:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
wlsxEnterpriseMibModules, = mibBuilder.importSymbols("ARUBA-MIB", "wlsxEnterpriseMibModules")
ArubaEnet1Mode, ArubaAPDot1dState, ArubaOperStateValue, ArubaPortType, ArubaPoeState, ArubaDot3azStatus, ArubaEnableValue, ArubaPortSpeed, ArubaActiveState, ArubaPortDuplex = mibBuilder.importSymbols("ARUBA-TC", "ArubaEnet1Mode", "ArubaAPDot1dState", "ArubaOperStateValue", "ArubaPortType", "ArubaPoeState", "ArubaDot3azStatus", "ArubaEnableValue", "ArubaPortSpeed", "ArubaActiveState", "ArubaPortDuplex")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
AddressFamilyNumbers, = mibBuilder.importSymbols("IANA-ADDRESS-FAMILY-NUMBERS-MIB", "AddressFamilyNumbers")
LldpSystemCapabilitiesMap, LldpPortIdSubtype, LldpChassisIdSubtype, LldpChassisId, LldpPortId, LldpManAddress = mibBuilder.importSymbols("LLDP-MIB", "LldpSystemCapabilitiesMap", "LldpPortIdSubtype", "LldpChassisIdSubtype", "LldpChassisId", "LldpPortId", "LldpManAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
iso, Unsigned32, ObjectIdentity, TimeTicks, NotificationType, Gauge32, MibIdentifier, snmpModules, IpAddress, ModuleIdentity, Counter64, Counter32, Bits, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Unsigned32", "ObjectIdentity", "TimeTicks", "NotificationType", "Gauge32", "MibIdentifier", "snmpModules", "IpAddress", "ModuleIdentity", "Counter64", "Counter32", "Bits", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TimeInterval, StorageType, PhysAddress, TAddress, TruthValue, TestAndIncr, MacAddress, RowStatus, DisplayString, TextualConvention, TDomain = mibBuilder.importSymbols("SNMPv2-TC", "TimeInterval", "StorageType", "PhysAddress", "TAddress", "TruthValue", "TestAndIncr", "MacAddress", "RowStatus", "DisplayString", "TextualConvention", "TDomain")
wlanAPMacAddress, = mibBuilder.importSymbols("WLSX-WLAN-MIB", "wlanAPMacAddress")
wlsxRSMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16))
wlsxRSMIB.setRevisions(('1911-06-01 20:12',))
if mibBuilder.loadTexts: wlsxRSMIB.setLastUpdated('1106012012Z')
if mibBuilder.loadTexts: wlsxRSMIB.setOrganization('Aruba Wireless Networks')
wlsxRemoteWiredGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1))
wlsxRemoteUSBGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2))
wlsxRemoteAccessPointPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1))
wlsxRemoteAccessPointUSBGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1))
wlsxRemoteWiredPortTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1), )
if mibBuilder.loadTexts: wlsxRemoteWiredPortTable.setStatus('current')
wlsxRemotePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1), ).setIndexNames((0, "WLSX-WLAN-MIB", "wlanAPMacAddress"), (0, "WLSX-RS-MIB", "remotePortNumber"))
if mibBuilder.loadTexts: wlsxRemotePortEntry.setStatus('current')
remotePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: remotePortNumber.setStatus('current')
remotePortMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortMAC.setStatus('current')
remotePortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 3), ArubaEnet1Mode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortMode.setStatus('current')
remotePortSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortSlotNumber.setStatus('current')
remotePortPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortPortNumber.setStatus('current')
remotePortType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 6), ArubaPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortType.setStatus('current')
remotePortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 7), ArubaEnableValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortAdminState.setStatus('current')
remotePortOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 8), ArubaOperStateValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortOperState.setStatus('current')
remotePortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 9), ArubaPortSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortSpeed.setStatus('current')
remotePortDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 10), ArubaPortDuplex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortDuplex.setStatus('current')
remotePortTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortTxPackets.setStatus('current')
remotePortTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortTxBytes.setStatus('current')
remotePortRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortRxPackets.setStatus('current')
remotePortRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortRxBytes.setStatus('current')
remotePortDot3azStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 15), ArubaDot3azStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortDot3azStatus.setStatus('current')
remotePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortName.setStatus('current')
remotePortPoEState = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 17), ArubaPoeState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortPoEState.setStatus('current')
remotePortSTPState = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 18), ArubaAPDot1dState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortSTPState.setStatus('current')
wlsxRemoteUSBTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1), )
if mibBuilder.loadTexts: wlsxRemoteUSBTable.setStatus('current')
wlsxUSBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1), ).setIndexNames((0, "WLSX-WLAN-MIB", "wlanAPMacAddress"), (0, "WLSX-RS-MIB", "usbDevNumber"))
if mibBuilder.loadTexts: wlsxUSBEntry.setStatus('current')
usbDevNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbDevNumber.setStatus('current')
usbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbStatus.setStatus('current')
usbManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbManufacturer.setStatus('current')
usbProduct = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbProduct.setStatus('current')
usbSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbSerialNumber.setStatus('current')
usbVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbVendor.setStatus('current')
usbProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbProductID.setStatus('current')
usbDriver = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbDriver.setStatus('current')
usbRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbRSSI.setStatus('current')
usbNetworkServiceLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbNetworkServiceLevel.setStatus('current')
usbFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbFirmwareVersion.setStatus('current')
usbEsnNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbEsnNumber.setStatus('current')
usbifOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 13), ArubaOperStateValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbifOperStatus.setStatus('current')
usbifInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbifInUcastPkts.setStatus('current')
usbifInUcastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbifInUcastOctets.setStatus('current')
usbifOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbifOutUcastPkts.setStatus('current')
usbifOutUcastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbifOutUcastOctets.setStatus('current')
usbifInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbifInErrors.setStatus('current')
usbifOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbifOutErrors.setStatus('current')
wlsxRemoteWiredUserStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 2), )
if mibBuilder.loadTexts: wlsxRemoteWiredUserStatsTable.setStatus('current')
wlsxRemoteWiredUserStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 2, 1), ).setIndexNames((0, "WLSX-RS-MIB", "remoteWiredUserPhyAddress"))
if mibBuilder.loadTexts: wlsxRemoteWiredUserStatsEntry.setStatus('current')
remoteWiredUserPhyAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: remoteWiredUserPhyAddress.setStatus('current')
remoteWiredUserSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteWiredUserSlot.setStatus('current')
remoteWiredUserPort = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteWiredUserPort.setStatus('current')
remoteWiredUserVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteWiredUserVlan.setStatus('current')
remoteWiredUserTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteWiredUserTxPkts.setStatus('current')
remoteWiredUserTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteWiredUserTxBytes.setStatus('current')
remoteWiredUserRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteWiredUserRxPkts.setStatus('current')
remoteWiredUserRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteWiredUserRxBytes.setStatus('current')
remoteWiredUserTxBCastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteWiredUserTxBCastPkts.setStatus('current')
remoteWiredUserTxBCastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteWiredUserTxBCastBytes.setStatus('current')
remoteWiredUserTxMCastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteWiredUserTxMCastPkts.setStatus('current')
remoteWiredUserTxMCastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteWiredUserTxMCastBytes.setStatus('current')
wlsxLldpNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 3), )
if mibBuilder.loadTexts: wlsxLldpNeighborTable.setStatus('current')
wlsxLldpNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 3, 1), ).setIndexNames((0, "WLSX-WLAN-MIB", "wlanAPMacAddress"), (0, "WLSX-RS-MIB", "remotePortNumber"), (0, "WLSX-RS-MIB", "lldpNeighborIndex"))
if mibBuilder.loadTexts: wlsxLldpNeighborEntry.setStatus('current')
lldpNeighborIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: lldpNeighborIndex.setStatus('current')
lldpNeighborChassisIdSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 3, 1, 2), LldpChassisIdSubtype()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpNeighborChassisIdSubtype.setStatus('current')
lldpNeighborChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 3, 1, 3), LldpChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpNeighborChassisId.setStatus('current')
lldpNeighborPortIdSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 3, 1, 4), LldpPortIdSubtype()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpNeighborPortIdSubtype.setStatus('current')
lldpNeighborPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 3, 1, 5), LldpPortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpNeighborPortId.setStatus('current')
lldpNeighborPortDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 3, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpNeighborPortDesc.setStatus('current')
lldpNeighborSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 3, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpNeighborSysName.setStatus('current')
lldpNeighborSysDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 3, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpNeighborSysDesc.setStatus('current')
lldpNeighborSysCapSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 3, 1, 9), LldpSystemCapabilitiesMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpNeighborSysCapSupported.setStatus('current')
lldpNeighborSysCapEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 3, 1, 10), LldpSystemCapabilitiesMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpNeighborSysCapEnabled.setStatus('current')
wlsxLldpNeighborManAddrTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 4), )
if mibBuilder.loadTexts: wlsxLldpNeighborManAddrTable.setStatus('current')
wlsxLldpNeighborManAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 4, 1), ).setIndexNames((0, "WLSX-WLAN-MIB", "wlanAPMacAddress"), (0, "WLSX-RS-MIB", "remotePortNumber"), (0, "WLSX-RS-MIB", "lldpNeighborIndex"), (0, "WLSX-RS-MIB", "lldpNeighborManAddrIndex"))
if mibBuilder.loadTexts: wlsxLldpNeighborManAddrEntry.setStatus('current')
lldpNeighborManAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: lldpNeighborManAddrIndex.setStatus('current')
lldpNeighborManAddrSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 4, 1, 2), AddressFamilyNumbers()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpNeighborManAddrSubtype.setStatus('current')
lldpNeighborManAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 4, 1, 3), LldpManAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpNeighborManAddr.setStatus('current')
mibBuilder.exportSymbols("WLSX-RS-MIB", usbFirmwareVersion=usbFirmwareVersion, lldpNeighborPortIdSubtype=lldpNeighborPortIdSubtype, remoteWiredUserRxPkts=remoteWiredUserRxPkts, remotePortTxBytes=remotePortTxBytes, usbifInUcastOctets=usbifInUcastOctets, remotePortPoEState=remotePortPoEState, wlsxLldpNeighborManAddrEntry=wlsxLldpNeighborManAddrEntry, lldpNeighborSysCapSupported=lldpNeighborSysCapSupported, lldpNeighborChassisId=lldpNeighborChassisId, remoteWiredUserTxMCastBytes=remoteWiredUserTxMCastBytes, wlsxLldpNeighborTable=wlsxLldpNeighborTable, usbifOperStatus=usbifOperStatus, remotePortMAC=remotePortMAC, remotePortPortNumber=remotePortPortNumber, remotePortRxPackets=remotePortRxPackets, lldpNeighborChassisIdSubtype=lldpNeighborChassisIdSubtype, usbProductID=usbProductID, wlsxRemoteWiredGroup=wlsxRemoteWiredGroup, wlsxUSBEntry=wlsxUSBEntry, remoteWiredUserTxBCastPkts=remoteWiredUserTxBCastPkts, wlsxRSMIB=wlsxRSMIB, PYSNMP_MODULE_ID=wlsxRSMIB, remotePortSlotNumber=remotePortSlotNumber, remotePortName=remotePortName, remoteWiredUserTxBytes=remoteWiredUserTxBytes, usbManufacturer=usbManufacturer, remotePortTxPackets=remotePortTxPackets, remotePortType=remotePortType, remoteWiredUserPhyAddress=remoteWiredUserPhyAddress, lldpNeighborSysCapEnabled=lldpNeighborSysCapEnabled, remoteWiredUserTxPkts=remoteWiredUserTxPkts, remotePortMode=remotePortMode, wlsxRemoteWiredUserStatsTable=wlsxRemoteWiredUserStatsTable, usbRSSI=usbRSSI, lldpNeighborManAddrSubtype=lldpNeighborManAddrSubtype, remotePortDuplex=remotePortDuplex, usbEsnNumber=usbEsnNumber, usbifOutUcastOctets=usbifOutUcastOctets, remotePortRxBytes=remotePortRxBytes, usbNetworkServiceLevel=usbNetworkServiceLevel, wlsxRemotePortEntry=wlsxRemotePortEntry, wlsxLldpNeighborEntry=wlsxLldpNeighborEntry, usbProduct=usbProduct, usbifInUcastPkts=usbifInUcastPkts, lldpNeighborManAddrIndex=lldpNeighborManAddrIndex, usbDevNumber=usbDevNumber, wlsxRemoteAccessPointPortGroup=wlsxRemoteAccessPointPortGroup, wlsxRemoteWiredPortTable=wlsxRemoteWiredPortTable, wlsxLldpNeighborManAddrTable=wlsxLldpNeighborManAddrTable, lldpNeighborIndex=lldpNeighborIndex, usbDriver=usbDriver, lldpNeighborSysName=lldpNeighborSysName, remotePortSTPState=remotePortSTPState, remotePortNumber=remotePortNumber, wlsxRemoteUSBTable=wlsxRemoteUSBTable, remoteWiredUserRxBytes=remoteWiredUserRxBytes, remotePortAdminState=remotePortAdminState, lldpNeighborPortId=lldpNeighborPortId, wlsxRemoteAccessPointUSBGroup=wlsxRemoteAccessPointUSBGroup, remotePortOperState=remotePortOperState, lldpNeighborSysDesc=lldpNeighborSysDesc, remotePortDot3azStatus=remotePortDot3azStatus, lldpNeighborPortDesc=lldpNeighborPortDesc, remoteWiredUserPort=remoteWiredUserPort, remoteWiredUserTxMCastPkts=remoteWiredUserTxMCastPkts, remoteWiredUserVlan=remoteWiredUserVlan, usbifInErrors=usbifInErrors, lldpNeighborManAddr=lldpNeighborManAddr, usbifOutErrors=usbifOutErrors, usbSerialNumber=usbSerialNumber, usbifOutUcastPkts=usbifOutUcastPkts, remoteWiredUserTxBCastBytes=remoteWiredUserTxBCastBytes, usbStatus=usbStatus, wlsxRemoteUSBGroup=wlsxRemoteUSBGroup, remoteWiredUserSlot=remoteWiredUserSlot, remotePortSpeed=remotePortSpeed, wlsxRemoteWiredUserStatsEntry=wlsxRemoteWiredUserStatsEntry, usbVendor=usbVendor)
