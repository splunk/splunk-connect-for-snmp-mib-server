#
# PySNMP MIB module DL5400-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DL5400-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:32:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ObjectIdentity, MibIdentifier, Unsigned32, NotificationType, Gauge32, NotificationType, Counter64, ModuleIdentity, IpAddress, Bits, iso, TimeTicks, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ObjectIdentity", "MibIdentifier", "Unsigned32", "NotificationType", "Gauge32", "NotificationType", "Counter64", "ModuleIdentity", "IpAddress", "Bits", "iso", "TimeTicks", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DisplayString(OctetString):
    pass

digital_link = MibIdentifier((1, 3, 6, 1, 4, 1, 300)).setLabel("digital-link")
dl5400 = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 110))
configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 110, 1))
alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 110, 2))
events = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 110, 3))
statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 110, 4))
maintenance = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 110, 5))
class DL5400Validation(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("valid", 1), ("invalid", 2))

class DL5400commBaudRate(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("bps1200", 1), ("bps2400", 2), ("bps4800", 3), ("bps9600", 4), ("bps19200", 5), ("bps38400", 6), ("bps57600", 7), ("bps115200", 8))

class DL5400commParity(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("even", 1), ("odd", 2), ("none", 3))

class DL5400commStopBits(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("one", 1), ("oneAndHalf", 2), ("two", 3))

class DL5400commNumDataBits(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(7, 8))
    namedValues = NamedValues(("seven", 7), ("eight", 8))

class DL5400commFlowControl(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("xoffUntilXon", 1), ("xoffUntilAny", 2), ("hwFlowControl", 3), ("none", 4))

class TODYear(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 9999)

class TODMonth(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 12)

class TODDay(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 31)

class TODHour(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 23)

class TODMinute(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 59)

class TODSecond(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 59)

class DL5400CardId(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("mpm", 1), ("pp", 2), ("enet", 3), ("ds1", 4))

class DL5400PortId(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("dte", 1), ("nmsEthernet", 2), ("comm1", 3), ("comm2", 4), ("net1", 5), ("net2", 6), ("net3", 7), ("net4", 8), ("net5", 9), ("net6", 10), ("net7", 11), ("net8", 12))

class DL5400TxClkSrc(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("internalClock", 1), ("externalClock", 2), ("rcvrdTiming", 3), ("autoTiming", 4))

class DL5400Event(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175))
    namedValues = NamedValues(("ev-mod-appear", 1), ("ev-mod-disappear", 2), ("ev-system-reset", 3), ("ev-system-initialized", 4), ("ev-timeofday-changed", 5), ("ev-admin-isnr", 6), ("ev-admin-oos", 7), ("ev-admin-oosmt", 8), ("ev-cuisession-inactivitytimeout", 9), ("ev-clkref-configchanged", 10), ("ev-selftest-fail", 11), ("ev-ram-test-fail", 12), ("ev-rom-checksum-fail", 13), ("ev-flash-checksum-fail", 14), ("ev-time-not-set", 15), ("ev-unit-restart", 16), ("ev-lamptest-start", 17), ("ev-lamptest-end", 18), ("ev-mgmt-post-fail", 19), ("ev-mgmt-post-fail-remit", 20), ("ev-front-high-temperature", 21), ("ev-front-high-temperature-remit", 22), ("ev-back-high-temperature", 23), ("ev-back-high-temperature-remit", 24), ("ev-external-major-alarm-input", 25), ("ev-external-major-alarm-input-end", 26), ("ev-external-minor-alarm-input", 27), ("ev-external-minor-alarm-input-end", 28), ("ev-external-status-alarm-input", 29), ("ev-external-status-alarm-input-end", 30), ("ev-primary-clk-fail", 31), ("ev-primary-clk-ok", 32), ("ev-secondary-clk-fail", 33), ("ev-secondary-clk-ok", 34), ("ev-ext-clk-fail", 35), ("ev-ext-clk-ok", 36), ("ev-fan1-fail", 37), ("ev-fan1-ok", 38), ("ev-fan2-fail", 39), ("ev-fan2-ok", 40), ("ev-ps-fan-fail", 41), ("ev-ps-fan-ok", 42), ("ev-packet-processor-post-fail", 43), ("ev-packet-processor-post-ok", 44), ("ev-packet-processor-missing", 45), ("ev-packet-processor-ok", 46), ("ev-voltage-exceeds", 47), ("ev-voltage-ok", 48), ("ev-module-processor-fail", 49), ("ev-module-processor-ok", 50), ("ev-mod-cfg-mismatch", 51), ("ev-mod-cfg-match", 52), ("ev-use-primary-clk", 53), ("ev-use-secondary-clk", 54), ("ev-use-internal-clk", 55), ("ev-use-rx-clk1", 56), ("ev-use-rx-clk2", 57), ("ev-use-rx-clk3", 58), ("ev-use-rx-clk4", 59), ("ev-use-rx-clk5", 60), ("ev-use-rx-clk6", 61), ("ev-use-rx-clk7", 62), ("ev-use-rx-clk8", 63), ("ev-mlppp-post-fail", 64), ("ev-mlppp-post-fail-remit", 65), ("ev-mlppp-module-missing", 66), ("ev-mlppp-module-ok", 67), ("ev-mlppp-insufficient-links", 68), ("ev-mlppp-insufficient-links-remit", 69), ("ev-mod-fail", 70), ("ev-mod-up", 71), ("ev-mod-no-resp", 72), ("ev-mod-hello", 73), ("ev-mod-init-fail", 74), ("ev-mod-init-ok", 75), ("ev-mod-some-ports-failed", 76), ("ev-mod-some-ports-ok", 77), ("ev-mod-all-ports-failed", 78), ("ev-mod-all-ports-ok", 79), ("ev-lost-signal", 100), ("ev-lost-signal-remit", 101), ("ev-lof", 102), ("ev-lof-remit", 103), ("ev-ais", 104), ("ev-ais-remit", 105), ("ev-rai", 106), ("ev-rai-remit", 107), ("ev-red-alarm", 108), ("ev-red-alarm-remit", 109), ("ev-exceeded-cv-consec-sec", 110), ("ev-exceeded-cv-consec-sec-remit", 111), ("ev-exceeded-ses-consec-sec", 112), ("ev-exceeded-ses-consec-sec-remit", 113), ("ev-exceeded-uas-consec-sec", 114), ("ev-exceeded-uas-consec-sec-remit", 115), ("ev-exceeded-pcv-15min-minor-threshold", 116), ("ev-exceeded-pcv-15min-minor-threshold-remit", 117), ("ev-exceeded-pcv-15min-major-threshold", 118), ("ev-exceeded-pcv-15min-major-threshold-remit", 119), ("ev-exceeded-es-15min-minor-threshold", 120), ("ev-exceeded-es-15min-minor-threshold-remit", 121), ("ev-exceeded-es-15min-major-threshold", 122), ("ev-exceeded-es-15min-major-threshold-remit", 123), ("ev-exceeded-ses-15min-minor-threshold", 124), ("ev-exceeded-ses-15min-minor-threshold-remit", 125), ("ev-exceeded-ses-15min-major-threshold", 126), ("ev-exceeded-ses-15min-major-threshold-remit", 127), ("ev-exceeded-sas-15min-minor-threshold", 128), ("ev-exceeded-sas-15min-minor-threshold-remit", 129), ("ev-exceeded-sas-15min-major-threshold", 130), ("ev-exceeded-sas-15min-major-threshold-remit", 131), ("ev-exceeded-uas-15min-minor-threshold", 132), ("ev-exceeded-uas-15min-minor-threshold-remit", 133), ("ev-exceeded-uas-15min-major-threshold", 134), ("ev-exceeded-uas-15min-major-threshold-remit", 135), ("ev-exceeded-pcv-24hr-minor-threshold", 136), ("ev-exceeded-pcv-24hr-minor-threshold-remit", 137), ("ev-exceeded-pcv-24hr-major-threshold", 138), ("ev-exceeded-pcv-24hr-major-threshold-remit", 139), ("ev-exceeded-es-24hr-minor-threshold", 140), ("ev-exceeded-es-24hr-minor-threshold-remit", 141), ("ev-exceeded-es-24hr-major-threshold", 142), ("ev-exceeded-es-24hr-major-threshold-remit", 143), ("ev-exceeded-ses-24hr-minor-threshold", 144), ("ev-exceeded-ses-24hr-minor-threshold-remit", 145), ("ev-exceeded-ses-24hr-major-threshold", 146), ("ev-exceeded-ses-24hr-major-threshold-remit", 147), ("ev-exceeded-sas-24hr-minor-threshold", 148), ("ev-exceeded-sas-24hr-minor-threshold-remit", 149), ("ev-exceeded-sas-24hr-major-threshold", 150), ("ev-exceeded-sas-24hr-major-threshold-remit", 151), ("ev-exceeded-uas-24hr-minor-threshold", 152), ("ev-exceeded-uas-24hr-minor-threshold-remit", 153), ("ev-exceeded-uas-24hr-major-threshold", 154), ("ev-exceeded-uas-24hr-major-threshold-remit", 155), ("ev-net-local-loopback-start", 156), ("ev-net-local-loopback-end", 157), ("ev-net-remote-loopback-start", 158), ("ev-net-remote-loopback-end", 159), ("ev-net-payload-loopback-start", 160), ("ev-net-payload-loopback-end", 161), ("ev-net-BERT-start", 162), ("ev-net-BERT-end", 163), ("ev-ppp-echo-timeout", 164), ("ev-ppp-echo-timeout-remit", 165), ("ev-ppp-loopback-line", 166), ("ev-ppp-loopback-line-remit", 167), ("ev-ppp-link-fallback", 168), ("ev-ppp-link-fallback-remit", 169), ("ev-dte-local-loopback-start", 170), ("ev-dte-local-loopback-end", 171), ("ev-dte-remote-loopback-start", 172), ("ev-dte-remote-loopback-end", 173), ("ev-mlppp-link-down", 174), ("ev-mlppp-link-up", 175))

unitLevelConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 110, 1, 1))
unitSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSerialNum.setStatus('mandatory')
unitName = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitName.setStatus('mandatory')
unitHwRev = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitHwRev.setStatus('mandatory')
unitSwRev = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSwRev.setStatus('mandatory')
unitMibRev = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitMibRev.setStatus('mandatory')
unitFrontPnl = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitFrontPnl.setStatus('mandatory')
unitDateYear = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 1, 7), TODYear()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitDateYear.setStatus('mandatory')
unitDateMonth = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 1, 8), TODMonth()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitDateMonth.setStatus('mandatory')
unitDateDay = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 1, 9), TODDay()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitDateDay.setStatus('mandatory')
unitTimeHour = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 1, 10), TODHour()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitTimeHour.setStatus('mandatory')
unitTimeMinute = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 1, 11), TODMinute()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitTimeMinute.setStatus('mandatory')
unitTimeSecond = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 1, 12), TODSecond()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitTimeSecond.setStatus('mandatory')
unitTimezone = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("gmtTimezone", 1), ("g01Timezone", 2), ("g02Timezone", 3), ("g03Timezone", 4), ("g04Timezone", 5), ("estTimezone", 6), ("cstTimezone", 7), ("mstTimezone", 8), ("pstTimezone", 9), ("astTimezone", 10), ("hstTimezone", 11), ("g11Timezone", 12), ("g12Timezone", 13), ("g13Timezone", 14), ("g14Timezone", 15), ("g15Timezone", 16), ("g16Timezone", 17), ("g17Timezone", 18), ("g18Timezone", 19), ("g19Timezone", 20), ("g20Timezone", 21), ("g21Timezone", 22), ("g22Timezone", 23), ("g23Timezone", 24))).clone('gmtTimezone')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitTimezone.setStatus('mandatory')
unitLedStatus = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("off", 1), ("green", 2), ("blink-Green", 3), ("blink-Amber", 4), ("solid-Amber", 5), ("red", 6), ("blink-Red", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitLedStatus.setStatus('mandatory')
unitTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitTimeStamp.setStatus('mandatory')
unitModelType = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ml-pppNxDs1Enet", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitModelType.setStatus('mandatory')
unitRouteMode = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("staticIp", 1), ("fastForward", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitRouteMode.setStatus('mandatory')
unitTelnetConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 110, 1, 2))
unitTelnetIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitTelnetIdleTimeout.setStatus('mandatory')
unitDteEnetCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 110, 1, 3))
dteEnetTable = MibTable((1, 3, 6, 1, 4, 1, 300, 110, 1, 3, 1), )
if mibBuilder.loadTexts: dteEnetTable.setStatus('mandatory')
dteEnetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 300, 110, 1, 3, 1, 1), ).setIndexNames((0, "DL5400-MIB", "dteEnetIndex"))
if mibBuilder.loadTexts: dteEnetEntry.setStatus('mandatory')
dteEnetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("dte1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dteEnetIndex.setStatus('mandatory')
dteEnetIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 3, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dteEnetIpAddress.setStatus('mandatory')
dteEnetSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 3, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dteEnetSubnetMask.setStatus('mandatory')
dteEnetMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 3, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dteEnetMacAddress.setStatus('mandatory')
dteEnetProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethernet", 1), ("ieee8023", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dteEnetProtocol.setStatus('mandatory')
dteEnetOper = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("autodetect", 1), ("tenMb", 2), ("hundredMb", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dteEnetOper.setStatus('mandatory')
dteEnetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("autodetect", 1), ("halfduplex", 2), ("fullduplex", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dteEnetMode.setStatus('mandatory')
dteEnetOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 3, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dteEnetOperStatus.setStatus('mandatory')
dteEnetModeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 3, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dteEnetModeStatus.setStatus('mandatory')
comm1SerialConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 110, 1, 5))
comm1SerialPortState = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comm1SerialPortState.setStatus('mandatory')
comm1SerialBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 5, 2), DL5400commBaudRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comm1SerialBaudRate.setStatus('mandatory')
comm1SerialBitsPerWord = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 5, 3), DL5400commNumDataBits()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comm1SerialBitsPerWord.setStatus('mandatory')
comm1SerialStopBits = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 5, 4), DL5400commStopBits()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comm1SerialStopBits.setStatus('mandatory')
comm1SerialParity = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 5, 5), DL5400commParity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comm1SerialParity.setStatus('mandatory')
comm1SerialFlowControl = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 5, 6), DL5400commFlowControl()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comm1SerialFlowControl.setStatus('mandatory')
comm1SerialLogoutOnLos = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comm1SerialLogoutOnLos.setStatus('mandatory')
comm1SerialIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comm1SerialIdleTimeout.setStatus('mandatory')
comm2SerialConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 110, 1, 6))
comm2SerialPortState = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comm2SerialPortState.setStatus('mandatory')
comm2SerialBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 6, 2), DL5400commBaudRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comm2SerialBaudRate.setStatus('mandatory')
comm2SerialBitsPerWord = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 6, 3), DL5400commNumDataBits()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comm2SerialBitsPerWord.setStatus('mandatory')
comm2SerialStopBits = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 6, 4), DL5400commStopBits()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comm2SerialStopBits.setStatus('mandatory')
comm2SerialParity = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 6, 5), DL5400commParity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comm2SerialParity.setStatus('mandatory')
comm2SerialFlowControl = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 6, 6), DL5400commFlowControl()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comm2SerialFlowControl.setStatus('mandatory')
comm2SerialLogoutOnLos = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comm2SerialLogoutOnLos.setStatus('mandatory')
comm2SerialIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 6, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comm2SerialIdleTimeout.setStatus('mandatory')
comm2InMDmode = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 6, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comm2InMDmode.setStatus('mandatory')
comm2InMDId = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 6, 10), DisplayString().clone('0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: comm2InMDId.setStatus('mandatory')
netConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 110, 1, 7))
netPriTxClk = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 1), DL5400TxClkSrc()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netPriTxClk.setStatus('mandatory')
netPriLoopPort = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netPriLoopPort.setStatus('mandatory')
netSecTxClk = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 3), DL5400TxClkSrc()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netSecTxClk.setStatus('mandatory')
netSecLoopPort = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netSecLoopPort.setStatus('mandatory')
netExtClkFrequency = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("freq8kHZ", 1), ("freq1544kHZ", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netExtClkFrequency.setStatus('mandatory')
netPriStatus = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netPriStatus.setStatus('mandatory')
netSecStatus = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netSecStatus.setStatus('mandatory')
netActiveStatus = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netActiveStatus.setStatus('mandatory')
netSuppressYeldet = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("suppressYelDet", 1), ("allowYelDet", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netSuppressYeldet.setStatus('mandatory')
netLineType = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("t1", 1), ("e1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netLineType.setStatus('mandatory')
netPortTable = MibTable((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 11), )
if mibBuilder.loadTexts: netPortTable.setStatus('mandatory')
netPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 11, 1), ).setIndexNames((0, "DL5400-MIB", "netPortIndex"))
if mibBuilder.loadTexts: netPortEntry.setStatus('mandatory')
netPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netPortIndex.setStatus('mandatory')
netAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("is", 1), ("oos", 2), ("oos-mt", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netAdmin.setStatus('mandatory')
netFramingFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("esf", 2), ("d4", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netFramingFormat.setStatus('mandatory')
netLineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5))).clone(namedValues=NamedValues(("b8zs", 2), ("ami", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netLineCode.setStatus('mandatory')
netLBO = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("ft0To133", 3), ("ft133To266", 4), ("ft266To399", 5), ("ft399To533", 6), ("ft533To655", 7), ("lbo-0dB", 8), ("lbo-7p5dB", 9), ("lbo-15dB", 10), ("lbo-22p5dB", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netLBO.setStatus('mandatory')
netEGL = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("egl-36dB", 1), ("egl-30dB", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netEGL.setStatus('mandatory')
netFDL = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("ansi", 2), ("att", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netFDL.setStatus('mandatory')
netSetCode = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netSetCode.setStatus('mandatory')
netClock = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("loopTiming", 1), ("sysTiming", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netClock.setStatus('mandatory')
netFrameStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 11, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netFrameStatus.setStatus('mandatory')
netFrameUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 7, 11, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netFrameUpTime.setStatus('mandatory')
unitSnmpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 110, 1, 8))
unitSnmpTrapAddrTable = MibTable((1, 3, 6, 1, 4, 1, 300, 110, 1, 8, 1), )
if mibBuilder.loadTexts: unitSnmpTrapAddrTable.setStatus('mandatory')
unitSnmpTrapAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 300, 110, 1, 8, 1, 1), ).setIndexNames((0, "DL5400-MIB", "unitSnmpTrapHostAddr"))
if mibBuilder.loadTexts: unitSnmpTrapAddrEntry.setStatus('mandatory')
unitSnmpTrapHostAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 8, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSnmpTrapHostAddr.setStatus('mandatory')
unitSnmpTrapDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("inBand", 2), ("outBand", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSnmpTrapDirection.setStatus('mandatory')
unitSnmpTrapDevState = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("block", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSnmpTrapDevState.setStatus('mandatory')
unitSnmpTrapCommunity = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 8, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSnmpTrapCommunity.setStatus('mandatory')
unitPPPConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 110, 1, 9))
pppPortTable = MibTable((1, 3, 6, 1, 4, 1, 300, 110, 1, 9, 1), )
if mibBuilder.loadTexts: pppPortTable.setStatus('mandatory')
pppPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 300, 110, 1, 9, 1, 1), ).setIndexNames((0, "DL5400-MIB", "pppPortIndex"))
if mibBuilder.loadTexts: pppPortEntry.setStatus('mandatory')
pppPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("net1", 1), ("net2", 2), ("net3", 3), ("net4", 4), ("net5", 5), ("net6", 6), ("net7", 7), ("net8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppPortIndex.setStatus('mandatory')
pppPortInitialMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 9, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppPortInitialMRU.setStatus('mandatory')
pppPortMagicNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppPortMagicNumber.setStatus('mandatory')
pppPortFcsSize = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("size16bits", 1), ("size32bits", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppPortFcsSize.setStatus('mandatory')
pppPortRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppPortRestore.setStatus('mandatory')
unitMLPPPConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 110, 1, 9, 2))
mlPPPIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 9, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlPPPIpAddress.setStatus('mandatory')
mlPPPSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 9, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlPPPSubnetMask.setStatus('mandatory')
mlPPPNumberedInterface = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 9, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlPPPNumberedInterface.setStatus('mandatory')
mlPPPMRRU = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 9, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlPPPMRRU.setStatus('mandatory')
mlPPPBundleStatus = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 9, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlPPPBundleStatus.setStatus('mandatory')
mlPPPBundleUpTime = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 9, 2, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlPPPBundleUpTime.setStatus('mandatory')
mlPPPIPCPState = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 9, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlPPPIPCPState.setStatus('mandatory')
mlPPPPortTable = MibTable((1, 3, 6, 1, 4, 1, 300, 110, 1, 9, 3), )
if mibBuilder.loadTexts: mlPPPPortTable.setStatus('mandatory')
mlPPPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 300, 110, 1, 9, 3, 1), ).setIndexNames((0, "DL5400-MIB", "mlPPPPortIndex"))
if mibBuilder.loadTexts: mlPPPPortEntry.setStatus('mandatory')
mlPPPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlPPPPortIndex.setStatus('mandatory')
mlPPPAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 9, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("is", 1), ("oos", 2), ("oos-mt", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlPPPAdmin.setStatus('mandatory')
mlPPPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 9, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlPPPStatus.setStatus('mandatory')
mlPPPUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 9, 3, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlPPPUpTime.setStatus('mandatory')
mlPPPLCPState = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 9, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlPPPLCPState.setStatus('mandatory')
unitRouterConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 110, 1, 10))
unitStaticRoutingTable = MibTable((1, 3, 6, 1, 4, 1, 300, 110, 1, 10, 1), )
if mibBuilder.loadTexts: unitStaticRoutingTable.setStatus('mandatory')
staticRoutingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 300, 110, 1, 10, 1, 1), ).setIndexNames((0, "DL5400-MIB", "routeDestination"))
if mibBuilder.loadTexts: staticRoutingEntry.setStatus('mandatory')
routeDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 10, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeDestination.setStatus('mandatory')
routeNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 10, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeNetworkMask.setStatus('mandatory')
routeNextHopAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 10, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeNextHopAddress.setStatus('mandatory')
routeMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 10, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeMetric.setStatus('mandatory')
routeDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("wan", 1), ("num", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeDirection.setStatus('mandatory')
routeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 10, 1, 1, 6), DL5400Validation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeStatus.setStatus('mandatory')
unitArpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 110, 1, 11))
unitClearArpTable = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 1, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitClearArpTable.setStatus('mandatory')
unitArpTable = MibTable((1, 3, 6, 1, 4, 1, 300, 110, 1, 11, 2), )
if mibBuilder.loadTexts: unitArpTable.setStatus('mandatory')
unitArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 300, 110, 1, 11, 2, 1), ).setIndexNames((0, "DL5400-MIB", "arpEntryNum"))
if mibBuilder.loadTexts: unitArpEntry.setStatus('mandatory')
arpEntryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpEntryNum.setStatus('mandatory')
arpIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 11, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpIPAddress.setStatus('mandatory')
arpMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 11, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpMACAddress.setStatus('mandatory')
arpPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 1, 11, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpPortNum.setStatus('mandatory')
unitAlarmConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 110, 2, 1))
unitAlarmStatusTable = MibTable((1, 3, 6, 1, 4, 1, 300, 110, 2, 1, 1), )
if mibBuilder.loadTexts: unitAlarmStatusTable.setStatus('mandatory')
unitAlarmStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 300, 110, 2, 1, 1, 1), ).setIndexNames((0, "DL5400-MIB", "unitAlarmIndex"))
if mibBuilder.loadTexts: unitAlarmStatusEntry.setStatus('mandatory')
unitAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitAlarmIndex.setStatus('mandatory')
unitAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("status", 1), ("minor", 2), ("major", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitAlarmSeverity.setStatus('mandatory')
unitAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 2, 1, 1, 1, 3), DL5400Event()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitAlarmType.setStatus('mandatory')
unitAlarmOriginCardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 2, 1, 1, 1, 4), DL5400CardId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitAlarmOriginCardNum.setStatus('mandatory')
unitAlarmOriginPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 2, 1, 1, 1, 5), DL5400PortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitAlarmOriginPortNum.setStatus('mandatory')
unitEventTable = MibTable((1, 3, 6, 1, 4, 1, 300, 110, 3, 1), )
if mibBuilder.loadTexts: unitEventTable.setStatus('mandatory')
unitEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 300, 110, 3, 1, 1), ).setIndexNames((0, "DL5400-MIB", "unitEventIndex"))
if mibBuilder.loadTexts: unitEventEntry.setStatus('mandatory')
unitEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitEventIndex.setStatus('mandatory')
unitEventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("status", 1), ("minor", 2), ("major", 3), ("clear", 4), ("information", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitEventSeverity.setStatus('mandatory')
unitEventHour = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 3, 1, 1, 3), TODHour()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitEventHour.setStatus('mandatory')
unitEventMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 3, 1, 1, 4), TODMinute()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitEventMinute.setStatus('mandatory')
unitEventSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 3, 1, 1, 5), TODSecond()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitEventSecond.setStatus('mandatory')
unitEventMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 3, 1, 1, 6), TODMonth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitEventMonth.setStatus('mandatory')
unitEventDay = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 3, 1, 1, 7), TODDay()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitEventDay.setStatus('mandatory')
unitEventYear = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 3, 1, 1, 8), TODYear()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitEventYear.setStatus('mandatory')
unitEventOriginCardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 3, 1, 1, 9), DL5400CardId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitEventOriginCardNum.setStatus('mandatory')
unitEventOriginPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 3, 1, 1, 10), DL5400PortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitEventOriginPortNum.setStatus('mandatory')
unitEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 3, 1, 1, 11), DL5400Event()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitEventType.setStatus('mandatory')
arpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 110, 4, 1))
arpbadLengthField = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpbadLengthField.setStatus('mandatory')
arpunsupportedHardware = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpunsupportedHardware.setStatus('mandatory')
arpunsupportedProtocol = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpunsupportedProtocol.setStatus('mandatory')
arpinvalidSenderAddr = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpinvalidSenderAddr.setStatus('mandatory')
arpinvalidTargetAddr = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpinvalidTargetAddr.setStatus('mandatory')
arpbadAddress = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpbadAddress.setStatus('mandatory')
arppktsReceived = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arppktsReceived.setStatus('mandatory')
arpshortPktsReceived = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpshortPktsReceived.setStatus('mandatory')
arppktsFromMeReceived = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arppktsFromMeReceived.setStatus('mandatory')
arpsrcBcstReceived = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpsrcBcstReceived.setStatus('mandatory')
arprepliedSent = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arprepliedSent.setStatus('mandatory')
arpincomingRequests = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpincomingRequests.setStatus('mandatory')
arprequestSent = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arprequestSent.setStatus('mandatory')
arpnoMACAddr = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpnoMACAddr.setStatus('mandatory')
hdlcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 300, 110, 4, 2), )
if mibBuilder.loadTexts: hdlcStatsTable.setStatus('mandatory')
hdlcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 300, 110, 4, 2, 1), ).setIndexNames((0, "DL5400-MIB", "hdlcPortIndex"))
if mibBuilder.loadTexts: hdlcStatsEntry.setStatus('mandatory')
hdlcPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcPortIndex.setStatus('mandatory')
hdlcLinkStatusBadFCSc = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 4, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcLinkStatusBadFCSc.setStatus('mandatory')
hdlcFramesAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcFramesAborted.setStatus('mandatory')
hdlcFramesNotAligned = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcFramesNotAligned.setStatus('mandatory')
hdlcOctetsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcOctetsRcv.setStatus('mandatory')
hdlcPctsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcPctsRcv.setStatus('mandatory')
hdlcOctetsTrsmt = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcOctetsTrsmt.setStatus('mandatory')
hdlcPctsTrsmt = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcPctsTrsmt.setStatus('mandatory')
miscStats = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 110, 4, 3))
miscprotocolPctsDumped = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 4, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscprotocolPctsDumped.setStatus('mandatory')
miscnonroutablePcts = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 4, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: miscnonroutablePcts.setStatus('mandatory')
clrStats = MibIdentifier((1, 3, 6, 1, 4, 1, 300, 110, 4, 4))
clearAllStats = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 4, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearAllStats.setStatus('mandatory')
clearCur15Min = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 4, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearCur15Min.setStatus('mandatory')
clearCur24Hr = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 4, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearCur24Hr.setStatus('mandatory')
clearOld15Min = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 4, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearOld15Min.setStatus('mandatory')
clearOld24Hr = MibScalar((1, 3, 6, 1, 4, 1, 300, 110, 4, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearOld24Hr.setStatus('mandatory')
maintModTable = MibTable((1, 3, 6, 1, 4, 1, 300, 110, 5, 1), )
if mibBuilder.loadTexts: maintModTable.setStatus('mandatory')
maintModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 300, 110, 5, 1, 1), ).setIndexNames((0, "DL5400-MIB", "maintModIndex"))
if mibBuilder.loadTexts: maintModEntry.setStatus('mandatory')
maintModIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pp", 1), ("ds1", 2), ("enet", 3), ("mpm", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: maintModIndex.setStatus('mandatory')
maintModStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maintModStatus.setStatus('mandatory')
maintOperstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 300, 110, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maintOperstatus.setStatus('mandatory')
dl5400ModulesAppear = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,1)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400ModulesDisappear = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,2)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400SelfTestFail = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,11)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400RamTestFail = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,12)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400RomChecksumFail = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,13)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400FlashChecksumFail = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,14)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400TimeNotSet = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,15)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400UnitRestart = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,16)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400LampTestStart = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,17)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400LampTestEnd = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,18)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400mgmtPOSTFail = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,19)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400mgmtPOSTok = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,20)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400FrontTemperatureHigh = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,21)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400FrontTemperatureOK = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,22)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400BackTemperatureHigh = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,23)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400BackTemperatureOK = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,24)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400ExternalMajorAlarmStart = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,25)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400ExternalMajorAlarmEnd = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,26)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400ExternalMinorAlarmStart = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,27)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400ExternalMinorAlarmEnd = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,28)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400ExternalStatusAlarmStart = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,29)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400ExternalStatusAlarmEnd = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,30)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400PrimaryClockFail = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,31)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400PrimaryClockOk = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,32)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400SecondaryClockFail = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,33)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400SecondaryClockOk = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,34)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400ExternalClockFail = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,35)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400ExternalClockOk = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,36)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400Fan1FailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,37)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400Fan1Ok = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,38)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400Fan2FailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,39)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400Fan2Ok = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,40)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400PSFanFailed = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,41)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400PSFanOK = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,42)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400PktProcessorPostFail = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,43)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400PktProcessorPostOk = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,44)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400PacketProcessorMissing = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,45)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400PacketProcessorOk = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,46)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400VoltageExceeds = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,47)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400VoltageOk = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,48)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400ModuleProcessorFail = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,49)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400ModuleProcessorOk = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,50)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400ModulesCfgMismatch = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,51)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400ModulesCfgMatch = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,52)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400UsePriClkAlarm = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,53)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400UseSecClkAlarm = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,54)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400UseIntClkAlarm = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,55)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400UseRxClk1Alarm = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,56)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400UseRxClk2Alarm = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,57)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400UseRxClk3Alarm = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,58)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400UseRxClk4Alarm = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,59)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400UseRxClk5Alarm = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,60)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400UseRxClk6Alarm = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,61)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400UseRxClk7Alarm = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,62)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400UseRxClk8Alarm = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,63)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400MLpppPOSTFail = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,64)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400MLpppPOSTok = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,65)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400MLpppModuleMissing = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,66)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400MLpppModuleOK = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,67)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400MLpppInsufficientLinks = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,68)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400MLpppInsufficientLinksOk = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,69)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400ModulesFail = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,70)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400ModulesUp = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,71)).setObjects(("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400LossOfSignalStart = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,100)).setObjects(("DL5400-MIB", "unitEventOriginPortNum"), ("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400LossOfSignalEnd = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,101)).setObjects(("DL5400-MIB", "unitEventOriginPortNum"), ("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400LossOfFrameStart = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,102)).setObjects(("DL5400-MIB", "unitEventOriginPortNum"), ("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400LossOfFrameEnd = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,103)).setObjects(("DL5400-MIB", "unitEventOriginPortNum"), ("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400AisStart = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,104)).setObjects(("DL5400-MIB", "unitEventOriginPortNum"), ("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400AisEnd = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,105)).setObjects(("DL5400-MIB", "unitEventOriginPortNum"), ("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400RaiStart = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,106)).setObjects(("DL5400-MIB", "unitEventOriginPortNum"), ("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400RaiEnd = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,107)).setObjects(("DL5400-MIB", "unitEventOriginPortNum"), ("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400netLineRemoteLoopbackStart = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,158)).setObjects(("DL5400-MIB", "unitEventOriginPortNum"), ("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400netLineRemoteLoopbackEnd = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,159)).setObjects(("DL5400-MIB", "unitEventOriginPortNum"), ("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400pppEchoTimeout = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,164)).setObjects(("DL5400-MIB", "unitEventOriginPortNum"), ("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400pppEchoTimeoutRemit = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,165)).setObjects(("DL5400-MIB", "unitEventOriginPortNum"), ("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400pppLineLoopbackStart = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,166)).setObjects(("DL5400-MIB", "unitEventOriginPortNum"), ("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400pppLineLoopbackEnd = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,167)).setObjects(("DL5400-MIB", "unitEventOriginPortNum"), ("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400pppLinkFallbackStart = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,168)).setObjects(("DL5400-MIB", "unitEventOriginPortNum"), ("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400pppLinkFallbackEnd = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,169)).setObjects(("DL5400-MIB", "unitEventOriginPortNum"), ("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400dteLocalLoopbackStart = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,170)).setObjects(("DL5400-MIB", "unitEventOriginPortNum"), ("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400dteLocalLoopbackEnd = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,171)).setObjects(("DL5400-MIB", "unitEventOriginPortNum"), ("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400dteRemoteLoopbackStart = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,172)).setObjects(("DL5400-MIB", "unitEventOriginPortNum"), ("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400dteRemoteLoopbackEnd = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,173)).setObjects(("DL5400-MIB", "unitEventOriginPortNum"), ("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400MLpppLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,174)).setObjects(("DL5400-MIB", "unitEventOriginPortNum"), ("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
dl5400MLpppLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 300, 110) + (0,175)).setObjects(("DL5400-MIB", "unitEventOriginPortNum"), ("DL5400-MIB", "unitEventSeverity"), ("DL5400-MIB", "unitTimeStamp"))
mibBuilder.exportSymbols("DL5400-MIB", miscStats=miscStats, unitSnmpTrapCommunity=unitSnmpTrapCommunity, unitFrontPnl=unitFrontPnl, unitDateDay=unitDateDay, DL5400commBaudRate=DL5400commBaudRate, comm1SerialBaudRate=comm1SerialBaudRate, mlPPPAdmin=mlPPPAdmin, miscnonroutablePcts=miscnonroutablePcts, pppPortEntry=pppPortEntry, netConfig=netConfig, pppPortIndex=pppPortIndex, pppPortTable=pppPortTable, unitArpConfig=unitArpConfig, netPortTable=netPortTable, unitStaticRoutingTable=unitStaticRoutingTable, arpsrcBcstReceived=arpsrcBcstReceived, dteEnetSubnetMask=dteEnetSubnetMask, arprepliedSent=arprepliedSent, maintenance=maintenance, DL5400commParity=DL5400commParity, dl5400MLpppPOSTok=dl5400MLpppPOSTok, dl5400RaiEnd=dl5400RaiEnd, dl5400pppLineLoopbackStart=dl5400pppLineLoopbackStart, dl5400LossOfFrameEnd=dl5400LossOfFrameEnd, miscprotocolPctsDumped=miscprotocolPctsDumped, dl5400PktProcessorPostOk=dl5400PktProcessorPostOk, DL5400CardId=DL5400CardId, routeStatus=routeStatus, netPortIndex=netPortIndex, unitClearArpTable=unitClearArpTable, unitArpEntry=unitArpEntry, arpunsupportedHardware=arpunsupportedHardware, comm1SerialIdleTimeout=comm1SerialIdleTimeout, arpbadAddress=arpbadAddress, dl5400PrimaryClockOk=dl5400PrimaryClockOk, unitSnmpTrapHostAddr=unitSnmpTrapHostAddr, dl5400SelfTestFail=dl5400SelfTestFail, dl5400mgmtPOSTok=dl5400mgmtPOSTok, mlPPPBundleUpTime=mlPPPBundleUpTime, dl5400SecondaryClockFail=dl5400SecondaryClockFail, unitAlarmSeverity=unitAlarmSeverity, dl5400PSFanOK=dl5400PSFanOK, dl5400mgmtPOSTFail=dl5400mgmtPOSTFail, netExtClkFrequency=netExtClkFrequency, dl5400MLpppInsufficientLinks=dl5400MLpppInsufficientLinks, mlPPPPortIndex=mlPPPPortIndex, dl5400=dl5400, dl5400ExternalMinorAlarmStart=dl5400ExternalMinorAlarmStart, mlPPPBundleStatus=mlPPPBundleStatus, dl5400ModulesCfgMatch=dl5400ModulesCfgMatch, dl5400dteRemoteLoopbackStart=dl5400dteRemoteLoopbackStart, unitSnmpTrapAddrTable=unitSnmpTrapAddrTable, dl5400MLpppLinkDown=dl5400MLpppLinkDown, alarms=alarms, dteEnetEntry=dteEnetEntry, dl5400FrontTemperatureHigh=dl5400FrontTemperatureHigh, hdlcOctetsRcv=hdlcOctetsRcv, dl5400ExternalClockOk=dl5400ExternalClockOk, TODYear=TODYear, hdlcFramesAborted=hdlcFramesAborted, dl5400BackTemperatureHigh=dl5400BackTemperatureHigh, dl5400ModulesCfgMismatch=dl5400ModulesCfgMismatch, dl5400VoltageOk=dl5400VoltageOk, hdlcPortIndex=hdlcPortIndex, DL5400commStopBits=DL5400commStopBits, pppPortFcsSize=pppPortFcsSize, arpStats=arpStats, arpbadLengthField=arpbadLengthField, arpinvalidSenderAddr=arpinvalidSenderAddr, dl5400pppLinkFallbackStart=dl5400pppLinkFallbackStart, comm2SerialPortState=comm2SerialPortState, unitRouterConfig=unitRouterConfig, dl5400netLineRemoteLoopbackEnd=dl5400netLineRemoteLoopbackEnd, dl5400PacketProcessorOk=dl5400PacketProcessorOk, dl5400dteLocalLoopbackEnd=dl5400dteLocalLoopbackEnd, comm1SerialParity=comm1SerialParity, netSecLoopPort=netSecLoopPort, DisplayString=DisplayString, arppktsReceived=arppktsReceived, dl5400LampTestEnd=dl5400LampTestEnd, unitLevelConfig=unitLevelConfig, unitModelType=unitModelType, comm1SerialBitsPerWord=comm1SerialBitsPerWord, unitTimeStamp=unitTimeStamp, dteEnetTable=dteEnetTable, unitDteEnetCfg=unitDteEnetCfg, pppPortInitialMRU=pppPortInitialMRU, mlPPPSubnetMask=mlPPPSubnetMask, arpMACAddress=arpMACAddress, unitEventTable=unitEventTable, unitEventYear=unitEventYear, dl5400Fan1FailAlarm=dl5400Fan1FailAlarm, unitTimezone=unitTimezone, unitSnmpTrapDirection=unitSnmpTrapDirection, digital_link=digital_link, unitEventMinute=unitEventMinute, dl5400ModulesDisappear=dl5400ModulesDisappear, dl5400PacketProcessorMissing=dl5400PacketProcessorMissing, TODHour=TODHour, unitAlarmStatusTable=unitAlarmStatusTable, dteEnetIndex=dteEnetIndex, dl5400Fan2Ok=dl5400Fan2Ok, dl5400FrontTemperatureOK=dl5400FrontTemperatureOK, dl5400AisStart=dl5400AisStart, TODSecond=TODSecond, dl5400RomChecksumFail=dl5400RomChecksumFail, netLineType=netLineType, dl5400ModuleProcessorFail=dl5400ModuleProcessorFail, dl5400ExternalMajorAlarmEnd=dl5400ExternalMajorAlarmEnd, unitTimeHour=unitTimeHour, comm2SerialConfig=comm2SerialConfig, unitRouteMode=unitRouteMode, routeDestination=routeDestination, clrStats=clrStats, dl5400ModulesUp=dl5400ModulesUp, pppPortMagicNumber=pppPortMagicNumber, dl5400UseRxClk2Alarm=dl5400UseRxClk2Alarm, dl5400UseRxClk5Alarm=dl5400UseRxClk5Alarm, hdlcPctsTrsmt=hdlcPctsTrsmt, dl5400LampTestStart=dl5400LampTestStart, dl5400PSFanFailed=dl5400PSFanFailed, dl5400UseSecClkAlarm=dl5400UseSecClkAlarm, dl5400UseRxClk7Alarm=dl5400UseRxClk7Alarm, netSuppressYeldet=netSuppressYeldet, unitSnmpTrapAddrEntry=unitSnmpTrapAddrEntry, unitArpTable=unitArpTable, dl5400UnitRestart=dl5400UnitRestart, maintModStatus=maintModStatus, events=events, statistics=statistics, comm1SerialPortState=comm1SerialPortState, netFramingFormat=netFramingFormat, netSecTxClk=netSecTxClk, arpincomingRequests=arpincomingRequests, dteEnetModeStatus=dteEnetModeStatus, clearCur24Hr=clearCur24Hr, dl5400PrimaryClockFail=dl5400PrimaryClockFail, dteEnetProtocol=dteEnetProtocol, netLineCode=netLineCode, netFrameUpTime=netFrameUpTime, unitSnmpTrapDevState=unitSnmpTrapDevState, arpshortPktsReceived=arpshortPktsReceived, maintOperstatus=maintOperstatus, dl5400LossOfFrameStart=dl5400LossOfFrameStart, dl5400pppLineLoopbackEnd=dl5400pppLineLoopbackEnd, unitEventMonth=unitEventMonth, clearAllStats=clearAllStats, routeMetric=routeMetric, dl5400UseRxClk8Alarm=dl5400UseRxClk8Alarm, unitHwRev=unitHwRev, dl5400MLpppPOSTFail=dl5400MLpppPOSTFail, dl5400pppLinkFallbackEnd=dl5400pppLinkFallbackEnd, unitEventHour=unitEventHour, dteEnetMode=dteEnetMode, routeNextHopAddress=routeNextHopAddress, dl5400BackTemperatureOK=dl5400BackTemperatureOK, dl5400MLpppModuleOK=dl5400MLpppModuleOK, dl5400FlashChecksumFail=dl5400FlashChecksumFail, unitTelnetIdleTimeout=unitTelnetIdleTimeout, unitEventEntry=unitEventEntry, unitAlarmOriginCardNum=unitAlarmOriginCardNum, netLBO=netLBO, mlPPPIPCPState=mlPPPIPCPState, arppktsFromMeReceived=arppktsFromMeReceived, hdlcFramesNotAligned=hdlcFramesNotAligned, TODDay=TODDay, mlPPPLCPState=mlPPPLCPState, unitAlarmOriginPortNum=unitAlarmOriginPortNum, maintModIndex=maintModIndex, mlPPPUpTime=mlPPPUpTime, comm2SerialLogoutOnLos=comm2SerialLogoutOnLos, dl5400netLineRemoteLoopbackStart=dl5400netLineRemoteLoopbackStart, dl5400dteLocalLoopbackStart=dl5400dteLocalLoopbackStart, unitSnmpConfig=unitSnmpConfig, unitSwRev=unitSwRev, comm1SerialFlowControl=comm1SerialFlowControl, netPriLoopPort=netPriLoopPort, unitEventType=unitEventType, netPortEntry=netPortEntry, mlPPPStatus=mlPPPStatus, unitAlarmConfig=unitAlarmConfig, maintModEntry=maintModEntry, comm1SerialLogoutOnLos=comm1SerialLogoutOnLos, netSecStatus=netSecStatus, unitEventIndex=unitEventIndex, unitEventOriginPortNum=unitEventOriginPortNum, staticRoutingEntry=staticRoutingEntry, pppPortRestore=pppPortRestore, unitSerialNum=unitSerialNum, unitTimeMinute=unitTimeMinute, dl5400ExternalMinorAlarmEnd=dl5400ExternalMinorAlarmEnd, netPriStatus=netPriStatus, netAdmin=netAdmin, unitEventSecond=unitEventSecond, unitLedStatus=unitLedStatus, dl5400SecondaryClockOk=dl5400SecondaryClockOk, dl5400LossOfSignalStart=dl5400LossOfSignalStart, dl5400PktProcessorPostFail=dl5400PktProcessorPostFail, arpIPAddress=arpIPAddress, routeNetworkMask=routeNetworkMask, dl5400Fan2FailAlarm=dl5400Fan2FailAlarm, mlPPPNumberedInterface=mlPPPNumberedInterface, dl5400Fan1Ok=dl5400Fan1Ok, dl5400UseRxClk6Alarm=dl5400UseRxClk6Alarm, unitTelnetConfig=unitTelnetConfig, comm2InMDId=comm2InMDId, comm2SerialStopBits=comm2SerialStopBits, dl5400MLpppModuleMissing=dl5400MLpppModuleMissing, dl5400ModulesAppear=dl5400ModulesAppear, comm1SerialConfig=comm1SerialConfig, dteEnetMacAddress=dteEnetMacAddress, mlPPPMRRU=mlPPPMRRU, hdlcLinkStatusBadFCSc=hdlcLinkStatusBadFCSc, dl5400TimeNotSet=dl5400TimeNotSet, unitDateMonth=unitDateMonth, dteEnetIpAddress=dteEnetIpAddress, unitMLPPPConfig=unitMLPPPConfig, mlPPPIpAddress=mlPPPIpAddress, unitEventDay=unitEventDay, DL5400TxClkSrc=DL5400TxClkSrc, DL5400PortId=DL5400PortId, unitPPPConfig=unitPPPConfig, unitEventOriginCardNum=unitEventOriginCardNum, hdlcStatsTable=hdlcStatsTable, dl5400ExternalStatusAlarmStart=dl5400ExternalStatusAlarmStart, dl5400UseRxClk1Alarm=dl5400UseRxClk1Alarm, clearOld24Hr=clearOld24Hr, maintModTable=maintModTable, arprequestSent=arprequestSent, netSetCode=netSetCode, netPriTxClk=netPriTxClk, arpEntryNum=arpEntryNum, dl5400UseIntClkAlarm=dl5400UseIntClkAlarm, netClock=netClock, comm1SerialStopBits=comm1SerialStopBits, comm2SerialParity=comm2SerialParity, hdlcPctsRcv=hdlcPctsRcv, hdlcOctetsTrsmt=hdlcOctetsTrsmt, dl5400MLpppInsufficientLinksOk=dl5400MLpppInsufficientLinksOk, mlPPPPortTable=mlPPPPortTable, hdlcStatsEntry=hdlcStatsEntry, netActiveStatus=netActiveStatus, arpunsupportedProtocol=arpunsupportedProtocol, arpnoMACAddr=arpnoMACAddr, netFDL=netFDL, TODMinute=TODMinute, arpinvalidTargetAddr=arpinvalidTargetAddr, clearOld15Min=clearOld15Min, routeDirection=routeDirection, netFrameStatus=netFrameStatus, dl5400UseRxClk3Alarm=dl5400UseRxClk3Alarm, unitMibRev=unitMibRev, dl5400pppEchoTimeoutRemit=dl5400pppEchoTimeoutRemit, dl5400VoltageExceeds=dl5400VoltageExceeds)
mibBuilder.exportSymbols("DL5400-MIB", dl5400RaiStart=dl5400RaiStart, dteEnetOper=dteEnetOper, arpPortNum=arpPortNum, dl5400RamTestFail=dl5400RamTestFail, dl5400pppEchoTimeout=dl5400pppEchoTimeout, netEGL=netEGL, comm2SerialBitsPerWord=comm2SerialBitsPerWord, mlPPPPortEntry=mlPPPPortEntry, unitTimeSecond=unitTimeSecond, DL5400Validation=DL5400Validation, unitAlarmType=unitAlarmType, unitAlarmIndex=unitAlarmIndex, dl5400ExternalClockFail=dl5400ExternalClockFail, dl5400ExternalMajorAlarmStart=dl5400ExternalMajorAlarmStart, dl5400UsePriClkAlarm=dl5400UsePriClkAlarm, dl5400ModulesFail=dl5400ModulesFail, TODMonth=TODMonth, unitEventSeverity=unitEventSeverity, dl5400LossOfSignalEnd=dl5400LossOfSignalEnd, dl5400dteRemoteLoopbackEnd=dl5400dteRemoteLoopbackEnd, dl5400MLpppLinkUp=dl5400MLpppLinkUp, DL5400commNumDataBits=DL5400commNumDataBits, unitName=unitName, comm2SerialBaudRate=comm2SerialBaudRate, dl5400AisEnd=dl5400AisEnd, unitDateYear=unitDateYear, dl5400ModuleProcessorOk=dl5400ModuleProcessorOk, dl5400UseRxClk4Alarm=dl5400UseRxClk4Alarm, comm2SerialFlowControl=comm2SerialFlowControl, clearCur15Min=clearCur15Min, configuration=configuration, unitAlarmStatusEntry=unitAlarmStatusEntry, dteEnetOperStatus=dteEnetOperStatus, DL5400Event=DL5400Event, comm2SerialIdleTimeout=comm2SerialIdleTimeout, DL5400commFlowControl=DL5400commFlowControl, comm2InMDmode=comm2InMDmode, dl5400ExternalStatusAlarmEnd=dl5400ExternalStatusAlarmEnd)
