#
# PySNMP MIB module CISCO-LWAPP-DOT11-CLIENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-LWAPP-DOT11-CLIENT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:48:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
cLApDot11IfSlotId, cLApLocation, cLApSubMode, cLAPGroupVlanName, cLApDot11RadioChannelNumber, cLApName, cLApIfLoadChannelUtilization = mibBuilder.importSymbols("CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId", "cLApLocation", "cLApSubMode", "cLAPGroupVlanName", "cLApDot11RadioChannelNumber", "cLApName", "cLApIfLoadChannelUtilization")
cLMobilityExtMCClientAssociatedMAAddress, cLMobilityExtMCClientAssociatedMCAddress, cLMobilityExtMCClientAnchorMCPrivateAddress, cLMobilityExtMCClientAnchorMCGroupId, cLMobilityExtMCClientAnchorMCPrivateAddressType, cLMobilityExtMCClientAssociatedMAAddressType, cLMobilityExtMCClientAssociatedMCAddressType, cLMobilityExtMCClientAssociatedMCGroupId = mibBuilder.importSymbols("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientAssociatedMAAddress", "cLMobilityExtMCClientAssociatedMCAddress", "cLMobilityExtMCClientAnchorMCPrivateAddress", "cLMobilityExtMCClientAnchorMCGroupId", "cLMobilityExtMCClientAnchorMCPrivateAddressType", "cLMobilityExtMCClientAssociatedMAAddressType", "cLMobilityExtMCClientAssociatedMCAddressType", "cLMobilityExtMCClientAssociatedMCGroupId")
CLApIfType, CcxServiceVersion, CLClientPowerSaveMode, CLDot11ClientStatus = mibBuilder.importSymbols("CISCO-LWAPP-TC-MIB", "CLApIfType", "CcxServiceVersion", "CLClientPowerSaveMode", "CLDot11ClientStatus")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CiscoURLStringOrEmpty, = mibBuilder.importSymbols("CISCO-TC", "CiscoURLStringOrEmpty")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter64, ModuleIdentity, Unsigned32, Counter32, MibIdentifier, Gauge32, NotificationType, IpAddress, Bits, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, iso, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ModuleIdentity", "Unsigned32", "Counter32", "MibIdentifier", "Gauge32", "NotificationType", "IpAddress", "Bits", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "iso", "ObjectIdentity")
DisplayString, TimeStamp, TruthValue, TextualConvention, MacAddress, TimeInterval, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeStamp", "TruthValue", "TextualConvention", "MacAddress", "TimeInterval", "RowStatus")
ciscoLwappDot11ClientMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 599))
ciscoLwappDot11ClientMIB.setRevisions(('2011-04-29 00:00', '2006-11-21 00:00',))
if mibBuilder.loadTexts: ciscoLwappDot11ClientMIB.setLastUpdated('201104290000Z')
if mibBuilder.loadTexts: ciscoLwappDot11ClientMIB.setOrganization('Cisco Systems Inc.')
ciscoLwappDot11ClientMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 599, 0))
ciscoLwappDot11ClientMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 599, 1))
ciscoLwappDot11ClientMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 599, 2))
ciscoLwappDot11ClientCcxMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 599, 3))
cldcConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 1))
cldcNotifObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2))
cldcStatusObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3))
cldcStatisticObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4))
cldcCcxObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 1))
cldcClientTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1), )
if mibBuilder.loadTexts: cldcClientTable.setStatus('current')
cldcClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"))
if mibBuilder.loadTexts: cldcClientEntry.setStatus('current')
cldcClientMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: cldcClientMacAddress.setStatus('current')
cldcClientStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 2), CLDot11ClientStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientStatus.setStatus('current')
cldcClientWlanProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientWlanProfileName.setStatus('current')
cldcClientWgbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("regClient", 1), ("wgbClient", 2), ("wgb", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientWgbStatus.setStatus('current')
cldcClientWgbMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientWgbMacAddress.setStatus('current')
cldcClientProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("dot11a", 1), ("dot11b", 2), ("dot11g", 3), ("unknown", 4), ("mobile", 5), ("dot11n24", 6), ("dot11n5", 7), ("ethernet", 8), ("dot3", 9), ("dot11ac5", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientProtocol.setStatus('current')
cldcAssociationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("wep", 2), ("wpa", 3), ("wpa2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcAssociationMode.setStatus('current')
cldcApMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcApMacAddress.setStatus('current')
cldcIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 9), CLApIfType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcIfType.setStatus('current')
cldcClientIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientIPAddress.setStatus('current')
cldcClientNacState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("quarantine", 1), ("access", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldcClientNacState.setStatus('current')
cldcClientQuarantineVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 12), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientQuarantineVLAN.setStatus('current')
cldcClientAccessVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 13), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientAccessVLAN.setStatus('current')
cldcClientLoginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 14), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientLoginTime.setStatus('current')
cldcClientUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 15), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientUpTime.setStatus('current')
cldcClientPowerSaveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 16), CLClientPowerSaveMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientPowerSaveMode.setStatus('current')
cldcClientCurrentTxRateSet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setUnits('Mbit/s').setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientCurrentTxRateSet.setStatus('current')
cldcClientDataRateSet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 126))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientDataRateSet.setStatus('current')
cldcClientHreapApAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientHreapApAuth.setStatus('current')
cldcClient80211uCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClient80211uCapable.setStatus('current')
cldcClientPostureState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientPostureState.setStatus('current')
cldcClientAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 22), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientAclName.setStatus('current')
cldcClientAclApplied = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientAclApplied.setStatus('current')
cldcClientRedirectUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 24), CiscoURLStringOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientRedirectUrl.setStatus('current')
cldcClientAaaOverrideAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 25), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientAaaOverrideAclName.setStatus('current')
cldcClientAaaOverrideAclApplied = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientAaaOverrideAclApplied.setStatus('current')
cldcClientUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 27), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientUsername.setStatus('current')
cldcClientSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 28), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientSSID.setStatus('current')
cldcClientSecurityTagId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientSecurityTagId.setStatus('current')
cldcClientTypeKTS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 30), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientTypeKTS.setStatus('current')
cldcClientIpv6AclName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientIpv6AclName.setStatus('current')
cldcClientIpv6AclApplied = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientIpv6AclApplied.setStatus('current')
cldcClientDataSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("central", 2), ("local", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientDataSwitching.setStatus('current')
cldcClientAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("central", 2), ("local", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientAuthentication.setStatus('current')
cldcClientChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 35), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientChannel.setStatus('current')
cldcClientAuthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 0), ("psk", 1), ("radius", 2), ("cckm", 3), ("wapipsk", 4), ("wapicert", 5), ("ftDot1x", 6), ("ftPsk", 7), ("pmfDot1x", 8), ("pmfPsk", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientAuthMode.setStatus('current')
cldcClientReasonCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 40, 41, 42, 43, 44, 45, 46, 99, 101, 105, 106, 200, 201, 202, 203))).clone(namedValues=NamedValues(("unspecified", 1), ("previousAuthNotValid", 2), ("deauthenticationLeaving", 3), ("disassociationDueToInactivity", 4), ("disassociationAPBusy", 5), ("class2FrameFromNonAuthStation", 6), ("class2FrameFromNonAssStation", 7), ("disassociationStaHasLeft", 8), ("staReqAssociationWithoutAuth", 9), ("invalidInformationElement", 40), ("groupCipherInvalid", 41), ("unicastCipherInvalid", 42), ("akmpInvalid", 43), ("unsupportedRsnVersion", 44), ("invalidRsnIeCapabilities", 45), ("cipherSuiteRejected", 46), ("missingReasonCode", 99), ("maxAssociatedClientsReached", 101), ("maxAssociatedClientsReachedOnRadio", 105), ("maxAssociatedClientsReachedOnWlan", 106), ("unSpecifiedQosFailure", 200), ("qosPolicyMismatch", 201), ("inSufficientBandwidth", 202), ("inValidQosParams", 203)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientReasonCode.setStatus('current')
cldcClientSessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 38), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientSessionID.setStatus('current')
cldcClientApRoamMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 39), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientApRoamMacAddress.setStatus('current')
cldcClientMdnsProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 40), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientMdnsProfile.setStatus('current')
cldcClientMdnsAdvCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientMdnsAdvCount.setStatus('current')
cldcClientPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 42), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientPolicyName.setStatus('current')
cldcClientAAARole = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 43), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientAAARole.setStatus('current')
cldcClientDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 44), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientDeviceType.setStatus('current')
cldcUserAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("open", 1), ("wepPsk", 2), ("portal", 3), ("simPeap", 4), ("other", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcUserAuthType.setStatus('current')
cldcClientByIpTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 2), )
if mibBuilder.loadTexts: cldcClientByIpTable.setStatus('current')
cldcClientByIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"), (0, "CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientByIpAddressType"), (0, "CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientByIpAddress"))
if mibBuilder.loadTexts: cldcClientByIpEntry.setStatus('current')
cldcClientByIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 2, 1, 2), InetAddressType())
if mibBuilder.loadTexts: cldcClientByIpAddressType.setStatus('current')
cldcClientByIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 2, 1, 3), InetAddress())
if mibBuilder.loadTexts: cldcClientByIpAddress.setStatus('current')
cldcClientByIpAddressDiscoverType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("invalid", 1), ("ndp", 2), ("dhcp", 3), ("packet", 4), ("local", 5), ("static", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientByIpAddressDiscoverType.setStatus('current')
cldcClientByIpAddressLastSeen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 2, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientByIpAddressLastSeen.setStatus('current')
cldcSleepingClientTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 3), )
if mibBuilder.loadTexts: cldcSleepingClientTable.setStatus('current')
cldcSleepingClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 3, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcSleepingClientMacAddress"))
if mibBuilder.loadTexts: cldcSleepingClientEntry.setStatus('current')
cldcSleepingClientMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 3, 1, 1), MacAddress())
if mibBuilder.loadTexts: cldcSleepingClientMacAddress.setStatus('current')
cldcSleepingClientSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcSleepingClientSsid.setStatus('current')
cldcSleepingClientUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 3, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcSleepingClientUserName.setStatus('current')
cldcSleepingClientRemainingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 3, 1, 4), TimeInterval()).setUnits('Hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcSleepingClientRemainingTime.setStatus('current')
cldcSleepingClientRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 3, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cldcSleepingClientRowStatus.setStatus('current')
cldcClientStatisticTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1), )
if mibBuilder.loadTexts: cldcClientStatisticTable.setStatus('current')
cldcClientStatisticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"))
if mibBuilder.loadTexts: cldcClientStatisticEntry.setStatus('current')
cldcClientDataRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 1), Counter64()).setUnits('Retries').setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientDataRetries.setStatus('current')
cldcClientRtsRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 2), Counter64()).setUnits('Retries').setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientRtsRetries.setStatus('current')
cldcClientDuplicatePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 3), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientDuplicatePackets.setStatus('current')
cldcClientDecryptFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 4), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientDecryptFailures.setStatus('current')
cldcClientMicErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 5), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientMicErrors.setStatus('current')
cldcClientMicMissingFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 6), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientMicMissingFrames.setStatus('current')
cldcClientRaPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientRaPacketsDropped.setStatus('current')
cldcClientInterimUpdatesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientInterimUpdatesCount.setStatus('current')
cldcClientDataBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientDataBytesReceived.setStatus('current')
cldcClientRealtimeBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientRealtimeBytesReceived.setStatus('current')
cldcClientRxDataBytesDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientRxDataBytesDropped.setStatus('current')
cldcClientRxRealtimeBytesDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientRxRealtimeBytesDropped.setStatus('current')
cldcClientDataBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientDataBytesSent.setStatus('current')
cldcClientRealtimeBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientRealtimeBytesSent.setStatus('current')
cldcClientTxDataBytesDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientTxDataBytesDropped.setStatus('current')
cldcClientTxRealtimeBytesDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientTxRealtimeBytesDropped.setStatus('current')
cldcClientDataPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientDataPacketsReceived.setStatus('current')
cldcClientRealtimePacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientRealtimePacketsReceived.setStatus('current')
cldcClientRxDataPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientRxDataPacketsDropped.setStatus('current')
cldcClientRxRealtimePacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientRxRealtimePacketsDropped.setStatus('current')
cldcClientDataPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientDataPacketsSent.setStatus('current')
cldcClientRealtimePacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientRealtimePacketsSent.setStatus('current')
cldcClientTxDataPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientTxDataPacketsDropped.setStatus('current')
cldcClientTxRealtimePacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientTxRealtimePacketsDropped.setStatus('current')
cldcClientTxDataPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientTxDataPackets.setStatus('current')
cldcClientTxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientTxDataBytes.setStatus('current')
cldcClientRxDataPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientRxDataPackets.setStatus('current')
cldcClientRxDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 4, 1, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldcClientRxDataBytes.setStatus('current')
cldccCcxVersionInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 1, 1), )
if mibBuilder.loadTexts: cldccCcxVersionInfoTable.setStatus('current')
cldccCcxVersionInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 1, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"))
if mibBuilder.loadTexts: cldccCcxVersionInfoEntry.setStatus('current')
cldccCcxFoundationServiceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 1, 1, 1, 1), CcxServiceVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccCcxFoundationServiceVersion.setStatus('current')
cldccCcxLocationServiceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 1, 1, 1, 2), CcxServiceVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccCcxLocationServiceVersion.setStatus('current')
cldccCcxVoiceServiceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 1, 1, 1, 3), CcxServiceVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccCcxVoiceServiceVersion.setStatus('current')
cldccCcxManagementServiceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 599, 3, 1, 1, 1, 4), CcxServiceVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cldccCcxManagementServiceVersion.setStatus('current')
cldcKeyDecryptErrorEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldcKeyDecryptErrorEnabled.setStatus('current')
cldcAssocNacAlertEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldcAssocNacAlertEnabled.setStatus('current')
cldcDisassocNacAlertEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldcDisassocNacAlertEnabled.setStatus('current')
cldcMovedToRunStateEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cldcMovedToRunStateEnabled.setStatus('current')
ciscoLwappDot11ClientStaticIpFailTrapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 1, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoLwappDot11ClientStaticIpFailTrapEnabled.setStatus('current')
cldcClientRSSI = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientRSSI.setStatus('current')
cldcClientSNR = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientSNR.setStatus('current')
cldcDOT11ClientReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 40, 41, 42, 43, 44, 45, 46, 99, 101, 105, 106, 200, 201, 202, 203))).clone(namedValues=NamedValues(("unspecified", 1), ("previousAuthNotValid", 2), ("deauthenticationLeaving", 3), ("disassociationDueToInactivity", 4), ("disassociationAPBusy", 5), ("class2FrameFromNonAuthStation", 6), ("class2FrameFromNonAssStation", 7), ("disassociationStaHasLeft", 8), ("staReqAssociationWithoutAuth", 9), ("invalidInformationElement", 40), ("groupCipherInvalid", 41), ("unicastCipherInvalid", 42), ("akmpInvalid", 43), ("unsupportedRsnVersion", 44), ("invalidRsnIeCapabilities", 45), ("cipherSuiteRejected", 46), ("missingReasonCode", 99), ("maxAssociatedClientsReached", 101), ("maxAssociatedClientsReachedOnRadio", 105), ("maxAssociatedClientsReachedOnWlan", 106), ("unSpecifiedQosFailure", 200), ("qosPolicyMismatch", 201), ("inSufficientBandwidth", 202), ("inValidQosParams", 203)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcDOT11ClientReasonCode.setStatus('current')
cldcDOT11ClientTxDataPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcDOT11ClientTxDataPackets.setStatus('current')
cldcDOT11ClientTxDataBytes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 5), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcDOT11ClientTxDataBytes.setStatus('current')
cldcDOT11ClientRxDataPackets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 6), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcDOT11ClientRxDataPackets.setStatus('current')
cldcDOT11ClientRxDataBytes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 7), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcDOT11ClientRxDataBytes.setStatus('current')
cldcClientVlanId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientVlanId.setStatus('current')
cldcClientPolicyType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("dot1x", 1), ("wpa1", 2), ("wpa2", 3), ("wpa2vff", 4), ("notavailable", 5), ("unknown", 6), ("wapi", 7)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientPolicyType.setStatus('current')
cldcClientEapType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("eapTls", 1), ("ttls", 2), ("peap", 3), ("leap", 4), ("speke", 5), ("eapFast", 6), ("notavailable", 7), ("unknown", 8)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientEapType.setStatus('current')
cldcClientAID = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 11), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientAID.setStatus('current')
cldcClientAuthenticationAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 129))).clone(namedValues=NamedValues(("openSystem", 1), ("sharedKey", 2), ("unknown", 3), ("openAndEap", 129)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientAuthenticationAlgorithm.setStatus('current')
cldcClientWepState = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientWepState.setStatus('current')
cldcClientEncryptionCypher = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ccmpAes", 1), ("tkipMic", 2), ("wep40", 3), ("wep104", 4), ("wep128", 5), ("none", 6), ("notavailable", 7), ("unknown", 8), ("wapiSMS4", 9)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientEncryptionCypher.setStatus('current')
cldcClientPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 15), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientPortNumber.setStatus('current')
cldcClientAnchorAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 16), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientAnchorAddressType.setStatus('current')
cldcClientAnchorAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 17), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientAnchorAddress.setStatus('current')
cldcClientEssIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 517))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientEssIndex.setStatus('current')
cldcClientCcxVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notSupported", 1), ("ccxv1", 2), ("ccxv2", 3), ("ccxv3", 4), ("ccxv4", 5), ("ccxv5", 6), ("ccxv6", 7))).clone('notSupported')).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientCcxVersion.setStatus('current')
cldcClientE2eVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("e2ev1", 2), ("e2ev2", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientE2eVersion.setStatus('current')
cldcClientInterface = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientInterface.setStatus('current')
cldcClientMobilityStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unassociated", 1), ("local", 2), ("anchor", 3), ("foreign", 4), ("handoff", 5), ("unknown", 6), ("exportanchor", 7), ("exportforeign", 8)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientMobilityStatus.setStatus('current')
cldcClientStatusCode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientStatusCode.setStatus('current')
cldcClientDeleteAction = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("delete", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientDeleteAction.setStatus('current')
cldcClientSecurityPolicyStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("completed", 1), ("notcompleted", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientSecurityPolicyStatus.setStatus('current')
cldcClientTrapEventTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 26), TimeTicks()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientTrapEventTime.setStatus('current')
cldcClientPolicyManagerState = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 27), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientPolicyManagerState.setStatus('current')
cldcClientAssocTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 28), TimeStamp()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientAssocTime.setStatus('current')
cldcClientPmipDataValid = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 29), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientPmipDataValid.setStatus('current')
cldcClientMobilityExtDataValid = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 30), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientMobilityExtDataValid.setStatus('current')
cldcClientPolicyErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 31), Counter64()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientPolicyErrors.setStatus('current')
cldcClientSessionId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 32), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientSessionId.setStatus('current')
cldcClientPmipNai = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 33), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientPmipNai.setStatus('current')
cldcClientPmipState = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 34), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientPmipState.setStatus('current')
cldcClientPmipInterface = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 35), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientPmipInterface.setStatus('current')
cldcClientPmipHomeAddrType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 36), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientPmipHomeAddrType.setStatus('current')
cldcClientPmipHomeAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 37), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientPmipHomeAddr.setStatus('current')
cldcClientPmipAtt = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("reserved", 1), ("logicalNetworkInterface", 2), ("pointToPointInterface", 3), ("ethernet", 4), ("wirelessLan", 5), ("wimax", 6), ("threeGPPGERAN", 7), ("threeGPPUTRAN", 8), ("threeGPPETRAN", 9), ("threeGPP2eHRPD", 10), ("threeGPP2HRPD", 11), ("threeGPP21xRTT", 12), ("threeGPP2UMB", 13)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientPmipAtt.setStatus('current')
cldcClientPmipLocalLinkId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 39), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientPmipLocalLinkId.setStatus('current')
cldcClientPmipLmaName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 40), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientPmipLmaName.setStatus('current')
cldcClientPmipLifeTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 41), TimeTicks()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientPmipLifeTime.setStatus('current')
cldcClientPmipDomainName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 42), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientPmipDomainName.setStatus('current')
cldcClientPmipUpKey = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 43), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientPmipUpKey.setStatus('current')
cldcClientPmipDownKey = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 599, 1, 2, 44), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cldcClientPmipDownKey.setStatus('current')
ciscoLwappDot11ClientKeyDecryptError = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 599, 0, 1)).setObjects(("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcAssociationMode"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcApMacAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcIfType"), ("CISCO-LWAPP-AP-MIB", "cLApName"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAuthMode"))
if mibBuilder.loadTexts: ciscoLwappDot11ClientKeyDecryptError.setStatus('current')
ciscoLwappDot11ClientAssocNacAlert = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 599, 0, 2)).setObjects(("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientWlanProfileName"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientIPAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcApMacAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientQuarantineVLAN"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAccessVLAN"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAuthMode"))
if mibBuilder.loadTexts: ciscoLwappDot11ClientAssocNacAlert.setStatus('current')
ciscoLwappDot11ClientDisassocNacAlert = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 599, 0, 3)).setObjects(("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientWlanProfileName"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientIPAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcApMacAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientQuarantineVLAN"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAccessVLAN"))
if mibBuilder.loadTexts: ciscoLwappDot11ClientDisassocNacAlert.setStatus('current')
ciscoLwappDot11ClientMovedToRunState = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 599, 0, 4)).setObjects(("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientIPAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientUsername"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientSSID"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcApMacAddress"), ("CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"), ("CISCO-LWAPP-AP-MIB", "cLApName"))
if mibBuilder.loadTexts: ciscoLwappDot11ClientMovedToRunState.setStatus('current')
ciscoLwappDot11ClientStaticIpFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 599, 0, 5)).setObjects(("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientIPAddress"))
if mibBuilder.loadTexts: ciscoLwappDot11ClientStaticIpFailTrap.setStatus('current')
ciscoLwappDot11ClientDisassocDataStatsTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 599, 0, 6)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApName"), ("CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientByIpAddressType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientByIpAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcApMacAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientReasonCode"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientUsername"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientSSID"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientSessionID"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientTxDataPackets"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientTxDataBytes"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientRxDataPackets"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientRxDataBytes"))
if mibBuilder.loadTexts: ciscoLwappDot11ClientDisassocDataStatsTrap.setStatus('current')
ciscoLwappDot11ClientAssocDataStatsTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 599, 0, 7)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientByIpAddressType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientByIpAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcApMacAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientUsername"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientApRoamMacAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientSSID"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientTxDataPackets"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientTxDataBytes"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientRxDataPackets"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientRxDataBytes"))
if mibBuilder.loadTexts: ciscoLwappDot11ClientAssocDataStatsTrap.setStatus('current')
ciscoLwappDot11ClientSessionTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 599, 0, 8)).setObjects(("CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"), ("CISCO-LWAPP-AP-MIB", "cLApName"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientByIpAddressType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientByIpAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientUsername"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientSSID"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientSessionID"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcApMacAddress"))
if mibBuilder.loadTexts: ciscoLwappDot11ClientSessionTrap.setStatus('current')
ciscoLwappDot11ClientAssocTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 599, 0, 9)).setObjects(("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientTrapEventTime"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientByIpAddressType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientByIpAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPolicyType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientStatus"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAID"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcApMacAddress"), ("CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientSSID"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAuthenticationAlgorithm"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientEncryptionCypher"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPortNumber"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAnchorAddressType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAnchorAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientEssIndex"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientWlanProfileName"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientWgbStatus"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientWgbMacAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientCcxVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientE2eVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientInterface"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClient80211uCapable"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMobilityStatus"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientRSSI"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientSNR"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientSecurityPolicyStatus"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientLoginTime"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAssocTime"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientCurrentTxRateSet"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataRateSet"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientHreapApAuth"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldccCcxFoundationServiceVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldccCcxLocationServiceVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldccCcxVoiceServiceVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldccCcxManagementServiceVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataSwitching"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAuthentication"), ("CISCO-LWAPP-AP-MIB", "cLApDot11RadioChannelNumber"), ("CISCO-LWAPP-AP-MIB", "cLApIfLoadChannelUtilization"), ("CISCO-LWAPP-AP-MIB", "cLApLocation"), ("CISCO-LWAPP-AP-MIB", "cLAPGroupVlanName"), ("CISCO-LWAPP-AP-MIB", "cLApSubMode"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientIPAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientSessionId"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientVlanId"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientProtocol"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientEapType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPolicyErrors"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataRetries"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientRtsRetries"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataBytesSent"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataBytesReceived"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataPacketsSent"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataPacketsReceived"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientTxDataBytesDropped"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientRxDataBytesDropped"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientTxDataPacketsDropped"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientRxDataPacketsDropped"))
if mibBuilder.loadTexts: ciscoLwappDot11ClientAssocTrap.setStatus('current')
ciscoLwappDot11ClientDeAuthenticatedTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 599, 0, 10)).setObjects(("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientTrapEventTime"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientUpTime"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientByIpAddressType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientByIpAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPostureState"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientProtocol"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientVlanId"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPolicyType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientEapType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientStatus"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAID"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcApMacAddress"), ("CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientSSID"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAuthenticationAlgorithm"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientWepState"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientEncryptionCypher"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPortNumber"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAnchorAddressType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAnchorAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientEssIndex"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientWlanProfileName"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientWgbStatus"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientWgbMacAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientCcxVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientE2eVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientInterface"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClient80211uCapable"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMobilityStatus"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientRSSI"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientSNR"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataRetries"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientRtsRetries"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientUsername"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcDOT11ClientReasonCode"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientStatusCode"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDeleteAction"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientSecurityPolicyStatus"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientNacState"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientLoginTime"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAssocTime"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientCurrentTxRateSet"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataRateSet"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientHreapApAuth"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldccCcxFoundationServiceVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldccCcxLocationServiceVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldccCcxVoiceServiceVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldccCcxManagementServiceVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataSwitching"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAuthentication"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientByIpAddressDiscoverType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientByIpAddressLastSeen"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPowerSaveMode"), ("CISCO-LWAPP-AP-MIB", "cLApDot11RadioChannelNumber"), ("CISCO-LWAPP-AP-MIB", "cLApIfLoadChannelUtilization"), ("CISCO-LWAPP-AP-MIB", "cLApLocation"), ("CISCO-LWAPP-AP-MIB", "cLAPGroupVlanName"), ("CISCO-LWAPP-AP-MIB", "cLApSubMode"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientIPAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPolicyErrors"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPolicyManagerState"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataBytesSent"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataBytesReceived"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataPacketsSent"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataPacketsReceived"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientTxDataBytesDropped"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientRxDataBytesDropped"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientTxDataPacketsDropped"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientRxDataPacketsDropped"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientSessionId"))
if mibBuilder.loadTexts: ciscoLwappDot11ClientDeAuthenticatedTrap.setStatus('current')
ciscoLwappDot11ClientMovedToRunStateNewTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 599, 0, 11)).setObjects(("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientTrapEventTime"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientByIpAddressType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientByIpAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPostureState"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientProtocol"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientVlanId"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPolicyType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientEapType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientStatus"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAID"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcApMacAddress"), ("CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientWlanProfileName"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAuthenticationAlgorithm"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientWepState"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientEncryptionCypher"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPortNumber"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAnchorAddressType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAnchorAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientEssIndex"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientWgbStatus"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientWgbMacAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientCcxVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientE2eVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClient80211uCapable"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMobilityStatus"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientRSSI"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientSNR"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataRetries"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientRtsRetries"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientUsername"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientStatusCode"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientSecurityPolicyStatus"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientNacState"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientLoginTime"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataRateSet"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientHreapApAuth"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldccCcxFoundationServiceVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldccCcxLocationServiceVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldccCcxVoiceServiceVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldccCcxManagementServiceVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataSwitching"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAuthentication"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientByIpAddressDiscoverType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientByIpAddressLastSeen"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPowerSaveMode"), ("CISCO-LWAPP-AP-MIB", "cLApDot11RadioChannelNumber"), ("CISCO-LWAPP-AP-MIB", "cLApIfLoadChannelUtilization"), ("CISCO-LWAPP-AP-MIB", "cLApSubMode"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientIPAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPolicyManagerState"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPmipNai"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPmipState"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPmipInterface"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPmipHomeAddrType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPmipHomeAddr"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPmipAtt"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPmipLocalLinkId"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPmipDomainName"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPmipLmaName"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPmipUpKey"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPmipDownKey"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPmipLifeTime"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientAnchorMCPrivateAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientAnchorMCPrivateAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientAssociatedMAAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientAssociatedMAAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientAssociatedMCAddressType"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientAssociatedMCAddress"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientAssociatedMCGroupId"), ("CISCO-LWAPP-MOBILITY-EXT-MIB", "cLMobilityExtMCClientAnchorMCGroupId"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPmipDataValid"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMobilityExtDataValid"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientSessionId"))
if mibBuilder.loadTexts: ciscoLwappDot11ClientMovedToRunStateNewTrap.setStatus('current')
ciscoLwappDot11ClientMobilityTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 599, 0, 12)).setObjects(("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientTrapEventTime"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientUpTime"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMacAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientByIpAddressType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientByIpAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPostureState"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientProtocol"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientVlanId"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPolicyType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientEapType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientStatus"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAID"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcApMacAddress"), ("CISCO-LWAPP-AP-MIB", "cLApDot11IfSlotId"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientSSID"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAuthenticationAlgorithm"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientWepState"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientEncryptionCypher"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPortNumber"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAnchorAddressType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAnchorAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientEssIndex"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientWlanProfileName"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientWgbStatus"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientWgbMacAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientCcxVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientE2eVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientInterface"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClient80211uCapable"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMobilityStatus"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientRSSI"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientSNR"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataRetries"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientRtsRetries"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientUsername"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcDOT11ClientReasonCode"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientStatusCode"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDeleteAction"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientSecurityPolicyStatus"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientNacState"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientLoginTime"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAssocTime"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientCurrentTxRateSet"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataRateSet"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientHreapApAuth"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldccCcxFoundationServiceVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldccCcxLocationServiceVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldccCcxVoiceServiceVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldccCcxManagementServiceVersion"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataSwitching"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAuthentication"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientByIpAddressDiscoverType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientByIpAddressLastSeen"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPowerSaveMode"), ("CISCO-LWAPP-AP-MIB", "cLApDot11RadioChannelNumber"), ("CISCO-LWAPP-AP-MIB", "cLApIfLoadChannelUtilization"), ("CISCO-LWAPP-AP-MIB", "cLApLocation"), ("CISCO-LWAPP-AP-MIB", "cLAPGroupVlanName"), ("CISCO-LWAPP-AP-MIB", "cLApSubMode"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientIPAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPolicyErrors"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPolicyManagerState"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataBytesSent"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataBytesReceived"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataPacketsSent"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataPacketsReceived"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientTxDataBytesDropped"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientRxDataBytesDropped"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientTxDataPacketsDropped"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientRxDataPacketsDropped"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientSessionId"))
if mibBuilder.loadTexts: ciscoLwappDot11ClientMobilityTrap.setStatus('current')
ciscoLwappDot11ClientMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 599, 2, 1))
ciscoLwappDot11ClientMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 599, 2, 2))
ciscoLwappDot11ClientMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 599, 2, 1, 1)).setObjects(("CISCO-LWAPP-DOT11-CLIENT-MIB", "ciscoLwappDot11ClientMIBConfigGroup"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "ciscoLwappDot11ClientMIBNotifsGroup"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "ciscoLwappDot11ClientMIBStatusGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappDot11ClientMIBCompliance = ciscoLwappDot11ClientMIBCompliance.setStatus('deprecated')
ciscoLwappDot11ClientMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 599, 2, 1, 2)).setObjects(("CISCO-LWAPP-DOT11-CLIENT-MIB", "ciscoLwappDot11ClientMIBConfigGroup"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "ciscoLwappDot11ClientMIBNotifsGroup"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "ciscoLwappDot11ClientMIBStatusGroup"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "ciscoLwappDot11ClientMIBStatusGroupRev2"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "ciscoLwappDot11ClientMIBNotifsGroupRev2"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "ciscoLwappDot11ClientMIBNotifControlGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappDot11ClientMIBComplianceRev2 = ciscoLwappDot11ClientMIBComplianceRev2.setStatus('current')
ciscoLwappDot11ClientMIBConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 599, 2, 2, 1)).setObjects(("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcKeyDecryptErrorEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappDot11ClientMIBConfigGroup = ciscoLwappDot11ClientMIBConfigGroup.setStatus('current')
ciscoLwappDot11ClientMIBNotifsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 599, 2, 2, 2)).setObjects(("CISCO-LWAPP-DOT11-CLIENT-MIB", "ciscoLwappDot11ClientKeyDecryptError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappDot11ClientMIBNotifsGroup = ciscoLwappDot11ClientMIBNotifsGroup.setStatus('current')
ciscoLwappDot11ClientMIBStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 599, 2, 2, 3)).setObjects(("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientStatus"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientWlanProfileName"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientWgbStatus"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientWgbMacAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientProtocol"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcAssociationMode"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcApMacAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcIfType"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientIPAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientNacState"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientQuarantineVLAN"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAccessVLAN"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAuthMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappDot11ClientMIBStatusGroup = ciscoLwappDot11ClientMIBStatusGroup.setStatus('current')
ciscoLwappDot11ClientMIBStatusGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 599, 2, 2, 4)).setObjects(("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientLoginTime"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientUpTime"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPowerSaveMode"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientCurrentTxRateSet"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataRateSet"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientHreapApAuth"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClient80211uCapable"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDataRetries"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientRtsRetries"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDuplicatePackets"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientDecryptFailures"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMicErrors"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientMicMissingFrames"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientIPAddress"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientNacState"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientQuarantineVLAN"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAccessVLAN"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientPostureState"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAclName"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAclApplied"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientRedirectUrl"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAaaOverrideAclName"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientAaaOverrideAclApplied"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientUsername"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcClientSSID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappDot11ClientMIBStatusGroupRev2 = ciscoLwappDot11ClientMIBStatusGroupRev2.setStatus('current')
ciscoLwappDot11ClientMIBNotifsGroupRev2 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 599, 2, 2, 5)).setObjects(("CISCO-LWAPP-DOT11-CLIENT-MIB", "ciscoLwappDot11ClientAssocNacAlert"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "ciscoLwappDot11ClientDisassocNacAlert"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "ciscoLwappDot11ClientMovedToRunState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappDot11ClientMIBNotifsGroupRev2 = ciscoLwappDot11ClientMIBNotifsGroupRev2.setStatus('current')
ciscoLwappDot11ClientMIBNotifControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 599, 2, 2, 6)).setObjects(("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcAssocNacAlertEnabled"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcDisassocNacAlertEnabled"), ("CISCO-LWAPP-DOT11-CLIENT-MIB", "cldcMovedToRunStateEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappDot11ClientMIBNotifControlGroup = ciscoLwappDot11ClientMIBNotifControlGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-LWAPP-DOT11-CLIENT-MIB", cldcClientTxDataBytes=cldcClientTxDataBytes, cldcClientByIpTable=cldcClientByIpTable, cldcSleepingClientRemainingTime=cldcSleepingClientRemainingTime, cldcIfType=cldcIfType, ciscoLwappDot11ClientAssocNacAlert=ciscoLwappDot11ClientAssocNacAlert, cldcClientDeviceType=cldcClientDeviceType, cldcClientStatisticEntry=cldcClientStatisticEntry, cldcClientInterimUpdatesCount=cldcClientInterimUpdatesCount, cldcStatisticObjects=cldcStatisticObjects, ciscoLwappDot11ClientMIBComplianceRev2=ciscoLwappDot11ClientMIBComplianceRev2, cldcClientTable=cldcClientTable, ciscoLwappDot11ClientMIBStatusGroupRev2=ciscoLwappDot11ClientMIBStatusGroupRev2, ciscoLwappDot11ClientStaticIpFailTrap=ciscoLwappDot11ClientStaticIpFailTrap, ciscoLwappDot11ClientStaticIpFailTrapEnabled=ciscoLwappDot11ClientStaticIpFailTrapEnabled, cldcClientPostureState=cldcClientPostureState, cldccCcxManagementServiceVersion=cldccCcxManagementServiceVersion, cldcClientPolicyManagerState=cldcClientPolicyManagerState, cldcClientPowerSaveMode=cldcClientPowerSaveMode, cldcClientSessionId=cldcClientSessionId, cldcClientDataBytesReceived=cldcClientDataBytesReceived, cldcClientSecurityPolicyStatus=cldcClientSecurityPolicyStatus, ciscoLwappDot11ClientMIBStatusGroup=ciscoLwappDot11ClientMIBStatusGroup, ciscoLwappDot11ClientMIBCompliances=ciscoLwappDot11ClientMIBCompliances, cldcNotifObjects=cldcNotifObjects, ciscoLwappDot11ClientMIB=ciscoLwappDot11ClientMIB, cldcMovedToRunStateEnabled=cldcMovedToRunStateEnabled, cldcClientPmipDataValid=cldcClientPmipDataValid, cldcCcxObjects=cldcCcxObjects, cldcClientPolicyName=cldcClientPolicyName, cldccCcxVoiceServiceVersion=cldccCcxVoiceServiceVersion, ciscoLwappDot11ClientCcxMIBObjects=ciscoLwappDot11ClientCcxMIBObjects, cldcClientMdnsAdvCount=cldcClientMdnsAdvCount, cldcClientPmipInterface=cldcClientPmipInterface, cldcClientAAARole=cldcClientAAARole, cldcClientLoginTime=cldcClientLoginTime, ciscoLwappDot11ClientDisassocDataStatsTrap=ciscoLwappDot11ClientDisassocDataStatsTrap, ciscoLwappDot11ClientKeyDecryptError=ciscoLwappDot11ClientKeyDecryptError, cldcStatusObjects=cldcStatusObjects, ciscoLwappDot11ClientAssocTrap=ciscoLwappDot11ClientAssocTrap, cldcClientPortNumber=cldcClientPortNumber, cldcClientRxRealtimeBytesDropped=cldcClientRxRealtimeBytesDropped, cldcClientStatisticTable=cldcClientStatisticTable, cldcClientEntry=cldcClientEntry, ciscoLwappDot11ClientSessionTrap=ciscoLwappDot11ClientSessionTrap, cldcClientTxRealtimePacketsDropped=cldcClientTxRealtimePacketsDropped, cldcClientEapType=cldcClientEapType, cldcClientDataSwitching=cldcClientDataSwitching, cldcClientWgbStatus=cldcClientWgbStatus, cldcClientTxDataPackets=cldcClientTxDataPackets, ciscoLwappDot11ClientMovedToRunState=ciscoLwappDot11ClientMovedToRunState, cldcClientAuthenticationAlgorithm=cldcClientAuthenticationAlgorithm, cldcClientWepState=cldcClientWepState, cldcClientDataRetries=cldcClientDataRetries, cldcClientChannel=cldcClientChannel, ciscoLwappDot11ClientMIBGroups=ciscoLwappDot11ClientMIBGroups, cldcClientProtocol=cldcClientProtocol, cldcSleepingClientMacAddress=cldcSleepingClientMacAddress, cldcClientReasonCode=cldcClientReasonCode, cldcClientDataBytesSent=cldcClientDataBytesSent, cldcClientRtsRetries=cldcClientRtsRetries, cldcClientPmipHomeAddr=cldcClientPmipHomeAddr, ciscoLwappDot11ClientMIBNotifsGroupRev2=ciscoLwappDot11ClientMIBNotifsGroupRev2, cldcSleepingClientTable=cldcSleepingClientTable, cldcClientAclApplied=cldcClientAclApplied, cldcClientInterface=cldcClientInterface, cldcClientMdnsProfile=cldcClientMdnsProfile, ciscoLwappDot11ClientDeAuthenticatedTrap=ciscoLwappDot11ClientDeAuthenticatedTrap, cldcClientRealtimePacketsSent=cldcClientRealtimePacketsSent, cldcClientByIpAddress=cldcClientByIpAddress, cldcSleepingClientRowStatus=cldcSleepingClientRowStatus, cldcDOT11ClientTxDataPackets=cldcDOT11ClientTxDataPackets, cldcClientRxDataBytesDropped=cldcClientRxDataBytesDropped, ciscoLwappDot11ClientMIBObjects=ciscoLwappDot11ClientMIBObjects, cldcClientWlanProfileName=cldcClientWlanProfileName, cldcClientCurrentTxRateSet=cldcClientCurrentTxRateSet, cldcClientStatus=cldcClientStatus, ciscoLwappDot11ClientMIBNotifs=ciscoLwappDot11ClientMIBNotifs, cldcClientNacState=cldcClientNacState, cldcAssocNacAlertEnabled=cldcAssocNacAlertEnabled, cldcClientSNR=cldcClientSNR, cldcClientTxRealtimeBytesDropped=cldcClientTxRealtimeBytesDropped, cldccCcxVersionInfoTable=cldccCcxVersionInfoTable, cldcClientAnchorAddress=cldcClientAnchorAddress, cldcClientByIpAddressType=cldcClientByIpAddressType, ciscoLwappDot11ClientDisassocNacAlert=ciscoLwappDot11ClientDisassocNacAlert, cldcClientMobilityStatus=cldcClientMobilityStatus, cldcClientUpTime=cldcClientUpTime, cldcClientByIpAddressDiscoverType=cldcClientByIpAddressDiscoverType, cldcClientPolicyErrors=cldcClientPolicyErrors, ciscoLwappDot11ClientMobilityTrap=ciscoLwappDot11ClientMobilityTrap, cldcClientStatusCode=cldcClientStatusCode, cldcClientHreapApAuth=cldcClientHreapApAuth, cldcClientRedirectUrl=cldcClientRedirectUrl, cldcClientAID=cldcClientAID, cldcConfigObjects=cldcConfigObjects, cldcClientPmipDomainName=cldcClientPmipDomainName, cldcClientPmipUpKey=cldcClientPmipUpKey, cldcClientIPAddress=cldcClientIPAddress, cldcClientPmipAtt=cldcClientPmipAtt, cldcClient80211uCapable=cldcClient80211uCapable, cldcClientDecryptFailures=cldcClientDecryptFailures, cldcClientAclName=cldcClientAclName, cldccCcxVersionInfoEntry=cldccCcxVersionInfoEntry, cldcDOT11ClientRxDataPackets=cldcDOT11ClientRxDataPackets, cldcClientPmipLmaName=cldcClientPmipLmaName, cldcSleepingClientSsid=cldcSleepingClientSsid, cldcClientPmipHomeAddrType=cldcClientPmipHomeAddrType, cldcClientSessionID=cldcClientSessionID, cldcClientIpv6AclName=cldcClientIpv6AclName, cldcClientMicMissingFrames=cldcClientMicMissingFrames, cldcClientTxDataBytesDropped=cldcClientTxDataBytesDropped, cldcClientAaaOverrideAclApplied=cldcClientAaaOverrideAclApplied, cldcClientDataRateSet=cldcClientDataRateSet, cldcClientPmipLocalLinkId=cldcClientPmipLocalLinkId, cldcClientRxDataBytes=cldcClientRxDataBytes, ciscoLwappDot11ClientMIBNotifControlGroup=ciscoLwappDot11ClientMIBNotifControlGroup, cldcApMacAddress=cldcApMacAddress, cldcDOT11ClientReasonCode=cldcDOT11ClientReasonCode, ciscoLwappDot11ClientMIBCompliance=ciscoLwappDot11ClientMIBCompliance, cldcClientPolicyType=cldcClientPolicyType, cldcClientWgbMacAddress=cldcClientWgbMacAddress, cldcClientDataPacketsReceived=cldcClientDataPacketsReceived, ciscoLwappDot11ClientAssocDataStatsTrap=ciscoLwappDot11ClientAssocDataStatsTrap, cldcClientAccessVLAN=cldcClientAccessVLAN, cldcClientRaPacketsDropped=cldcClientRaPacketsDropped, ciscoLwappDot11ClientMIBConfigGroup=ciscoLwappDot11ClientMIBConfigGroup, cldcClientDeleteAction=cldcClientDeleteAction, cldcClientAssocTime=cldcClientAssocTime, cldcKeyDecryptErrorEnabled=cldcKeyDecryptErrorEnabled, cldcClientEssIndex=cldcClientEssIndex, cldccCcxLocationServiceVersion=cldccCcxLocationServiceVersion, cldcSleepingClientEntry=cldcSleepingClientEntry, cldcClientPmipNai=cldcClientPmipNai, cldcClientRealtimeBytesReceived=cldcClientRealtimeBytesReceived, cldcClientTrapEventTime=cldcClientTrapEventTime, ciscoLwappDot11ClientMIBConform=ciscoLwappDot11ClientMIBConform, cldcDisassocNacAlertEnabled=cldcDisassocNacAlertEnabled, cldcClientTypeKTS=cldcClientTypeKTS, cldcClientEncryptionCypher=cldcClientEncryptionCypher, cldcClientApRoamMacAddress=cldcClientApRoamMacAddress, cldcDOT11ClientTxDataBytes=cldcDOT11ClientTxDataBytes, cldcClientRealtimeBytesSent=cldcClientRealtimeBytesSent, cldcClientAnchorAddressType=cldcClientAnchorAddressType, cldcAssociationMode=cldcAssociationMode, cldcClientQuarantineVLAN=cldcClientQuarantineVLAN, cldcClientAuthentication=cldcClientAuthentication, ciscoLwappDot11ClientMovedToRunStateNewTrap=ciscoLwappDot11ClientMovedToRunStateNewTrap, PYSNMP_MODULE_ID=ciscoLwappDot11ClientMIB, cldcClientDataPacketsSent=cldcClientDataPacketsSent, cldcClientPmipLifeTime=cldcClientPmipLifeTime, cldcClientCcxVersion=cldcClientCcxVersion, cldcClientSecurityTagId=cldcClientSecurityTagId, cldcClientRxRealtimePacketsDropped=cldcClientRxRealtimePacketsDropped, cldcClientIpv6AclApplied=cldcClientIpv6AclApplied, cldcClientTxDataPacketsDropped=cldcClientTxDataPacketsDropped, cldcClientByIpEntry=cldcClientByIpEntry, cldcClientRealtimePacketsReceived=cldcClientRealtimePacketsReceived, cldcClientUsername=cldcClientUsername, cldcSleepingClientUserName=cldcSleepingClientUserName, cldcUserAuthType=cldcUserAuthType, cldcClientSSID=cldcClientSSID, cldcClientE2eVersion=cldcClientE2eVersion, cldcDOT11ClientRxDataBytes=cldcDOT11ClientRxDataBytes, cldcClientVlanId=cldcClientVlanId, cldcClientByIpAddressLastSeen=cldcClientByIpAddressLastSeen, cldcClientPmipState=cldcClientPmipState, cldcClientMacAddress=cldcClientMacAddress, cldcClientDuplicatePackets=cldcClientDuplicatePackets, cldccCcxFoundationServiceVersion=cldccCcxFoundationServiceVersion, cldcClientAaaOverrideAclName=cldcClientAaaOverrideAclName, cldcClientRSSI=cldcClientRSSI, cldcClientAuthMode=cldcClientAuthMode, cldcClientRxDataPackets=cldcClientRxDataPackets, cldcClientPmipDownKey=cldcClientPmipDownKey, cldcClientMobilityExtDataValid=cldcClientMobilityExtDataValid, cldcClientMicErrors=cldcClientMicErrors, ciscoLwappDot11ClientMIBNotifsGroup=ciscoLwappDot11ClientMIBNotifsGroup, cldcClientRxDataPacketsDropped=cldcClientRxDataPacketsDropped)
