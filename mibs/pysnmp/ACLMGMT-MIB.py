#
# PySNMP MIB module ACLMGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ACLMGMT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 16:57:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
dlink_common_mgmt, = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "dlink-common-mgmt")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Unsigned32, ModuleIdentity, NotificationType, Counter32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter64, MibIdentifier, Bits, iso, Gauge32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Unsigned32", "ModuleIdentity", "NotificationType", "Counter32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter64", "MibIdentifier", "Bits", "iso", "Gauge32", "IpAddress")
RowStatus, DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "MacAddress", "TextualConvention")
swAclMgmtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 12, 9))
if mibBuilder.loadTexts: swAclMgmtMIB.setLastUpdated('0804180000Z')
if mibBuilder.loadTexts: swAclMgmtMIB.setOrganization('D-Link Corp.')
class PortList(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 127)

swAclCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 9, 1))
swAclMaskMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 9, 2))
swAclRuleMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 9, 3))
swCpuAclMaskMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 9, 4))
swCpuAclRuleMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 9, 5))
swAclMeteringMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 9, 6))
class Ipv6Address(TextualConvention, OctetString):
    status = 'current'
    displayHint = '2x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

swCpuInterfacefilterState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swCpuInterfacefilterState.setStatus('current')
swACLTotalUsedRuleEntries = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLTotalUsedRuleEntries.setStatus('current')
swACLTotalUnusedRuleEntries = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLTotalUnusedRuleEntries.setStatus('current')
swACLEthernetTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 1), )
if mibBuilder.loadTexts: swACLEthernetTable.setStatus('current')
swACLEthernetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 1, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swACLEthernetProfileID"))
if mibBuilder.loadTexts: swACLEthernetEntry.setStatus('current')
swACLEthernetProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLEthernetProfileID.setStatus('current')
swACLEthernetUsevlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEthernetUsevlan.setStatus('current')
swACLEthernetMacAddrMaskState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("dst-mac-addr", 2), ("src-mac-addr", 3), ("dst-src-mac-addr", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEthernetMacAddrMaskState.setStatus('current')
swACLEthernetSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 1, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEthernetSrcMacAddrMask.setStatus('current')
swACLEthernetDstMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 1, 1, 5), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEthernetDstMacAddrMask.setStatus('current')
swACLEthernetUse8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEthernetUse8021p.setStatus('current')
swACLEthernetUseEthernetType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEthernetUseEthernetType.setStatus('current')
swACLEthernetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEthernetRowStatus.setStatus('current')
swACLEthernetOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("any", 1), ("acl", 2), ("ipbind", 3), ("other", 4), ("dhcp", 5), ("netbios", 6), ("ext-netbios", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLEthernetOwner.setStatus('current')
swACLEthernetUnusedRuleEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLEthernetUnusedRuleEntries.setStatus('current')
swACLEthernetProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEthernetProfileName.setStatus('current')
swACLIpTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2), )
if mibBuilder.loadTexts: swACLIpTable.setStatus('current')
swACLIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swACLIpProfileID"))
if mibBuilder.loadTexts: swACLIpEntry.setStatus('current')
swACLIpProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLIpProfileID.setStatus('current')
swACLIpUsevlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpUsevlan.setStatus('current')
swACLIpIpAddrMaskState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("dst-ip-addr", 2), ("src-ip-addr", 3), ("dst-src-ip-addr", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpIpAddrMaskState.setStatus('current')
swACLIpSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpSrcIpAddrMask.setStatus('current')
swACLIpDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpDstIpAddrMask.setStatus('current')
swACLIpUseDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpUseDSCP.setStatus('current')
swACLIpUseProtoType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("icmp", 2), ("igmp", 3), ("tcp", 4), ("udp", 5), ("protocolId", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpUseProtoType.setStatus('current')
swACLIpIcmpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("type", 2), ("code", 3), ("type-code", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpIcmpOption.setStatus('current')
swACLIpIgmpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpIgmpOption.setStatus('current')
swACLIpTcpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("dst-addr", 2), ("src-addr", 3), ("dst-src-addr", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpTcpOption.setStatus('current')
swACLIpUdpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("dst-addr", 2), ("src-addr", 3), ("dst-src-addr", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpUdpOption.setStatus('current')
swACLIpTCPorUDPSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpTCPorUDPSrcPortMask.setStatus('current')
swACLIpTCPorUDPDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpTCPorUDPDstPortMask.setStatus('current')
swACLIpTCPFlagBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpTCPFlagBit.setStatus('current')
swACLIpTCPFlagBitMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpTCPFlagBitMask.setStatus('current')
swACLIpProtoIDOption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpProtoIDOption.setStatus('current')
swACLIpProtoID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpProtoID.setStatus('current')
swACLIpProtoIDMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpProtoIDMask.setStatus('current')
swACLIpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRowStatus.setStatus('current')
swACLIpOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("any", 1), ("acl", 2), ("ipbind", 3), ("other", 4), ("dhcp", 5), ("netbios", 6), ("ext-netbios", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLIpOwner.setStatus('current')
swACLIpUnusedRuleEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLIpUnusedRuleEntries.setStatus('current')
swACLIpProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpProfileName.setStatus('current')
swACLPktContMaskTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 3), )
if mibBuilder.loadTexts: swACLPktContMaskTable.setStatus('current')
swACLPktContMaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 3, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swACLPktContMaskProfileID"))
if mibBuilder.loadTexts: swACLPktContMaskEntry.setStatus('current')
swACLPktContMaskProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLPktContMaskProfileID.setStatus('current')
swACLPktContMaskOffset0to15 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContMaskOffset0to15.setStatus('current')
swACLPktContMaskOffset16to31 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContMaskOffset16to31.setStatus('current')
swACLPktContMaskOffset32to47 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContMaskOffset32to47.setStatus('current')
swACLPktContMaskOffset48to63 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContMaskOffset48to63.setStatus('current')
swACLPktContMaskOffset64to79 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContMaskOffset64to79.setStatus('current')
swACLPktContMaskRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContMaskRowStatus.setStatus('current')
swACLPktContMaskOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("any", 1), ("acl", 2), ("ipbind", 3), ("other", 4), ("dhcp", 5), ("netbios", 6), ("ext-netbios", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLPktContMaskOwner.setStatus('current')
swACLPktContMaskUnusedRuleEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLPktContMaskUnusedRuleEntries.setStatus('current')
swACLPktContMaskProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContMaskProfileName.setStatus('current')
swACLIpv6MaskTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 4), )
if mibBuilder.loadTexts: swACLIpv6MaskTable.setStatus('current')
swACLIpv6MaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 4, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swACLIpv6MaskProfileID"))
if mibBuilder.loadTexts: swACLIpv6MaskEntry.setStatus('current')
swACLIpv6MaskProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLIpv6MaskProfileID.setStatus('current')
swACLIpv6MaskClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6MaskClass.setStatus('current')
swACLIpv6MaskFlowlabel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6MaskFlowlabel.setStatus('current')
swACLIpv6IpAddrMaskState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("dst-ipv6-addr", 2), ("src-ipv6-addr", 3), ("dst-src-ipv6-addr", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6IpAddrMaskState.setStatus('current')
swACLIpv6MaskSrcIpv6Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 4, 1, 5), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6MaskSrcIpv6Mask.setStatus('current')
swACLIpv6MaskDstIpv6Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 4, 1, 6), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6MaskDstIpv6Mask.setStatus('current')
swACLIpv6MaskRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 4, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6MaskRowStatus.setStatus('current')
swACLIpv6MaskOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("any", 1), ("acl", 2), ("ipbind", 3), ("other", 4), ("dhcp", 5), ("netbios", 6), ("ext-netbios", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLIpv6MaskOwner.setStatus('current')
swACLIpv6MaskUnusedRuleEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLIpv6MaskUnusedRuleEntries.setStatus('current')
swACLIpv6MaskProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 4, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6MaskProfileName.setStatus('current')
swACLIpv6MaskUseProtoType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("tcp", 2), ("udp", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6MaskUseProtoType.setStatus('current')
swACLIpv6MaskTcpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("dst-addr", 2), ("src-addr", 3), ("dst-src-addr", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6MaskTcpOption.setStatus('current')
swACLIpv6MaskUdpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("dst-addr", 2), ("src-addr", 3), ("dst-src-addr", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6MaskUdpOption.setStatus('current')
swACLIpv6MaskTCPorUDPSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 4, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6MaskTCPorUDPSrcPortMask.setStatus('current')
swACLIpv6MaskTCPorUDPDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 4, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6MaskTCPorUDPDstPortMask.setStatus('current')
swACLMaskDelAllState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swACLMaskDelAllState.setStatus('current')
swIBPACLEthernetTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 6), )
if mibBuilder.loadTexts: swIBPACLEthernetTable.setStatus('obsolete')
swIBPACLEthernetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 6, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swIBPACLEthernetProfileID"))
if mibBuilder.loadTexts: swIBPACLEthernetEntry.setStatus('obsolete')
swIBPACLEthernetProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIBPACLEthernetProfileID.setStatus('obsolete')
swIBPACLEthernetUseEthernetType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIBPACLEthernetUseEthernetType.setStatus('obsolete')
swIBPACLIpTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 7), )
if mibBuilder.loadTexts: swIBPACLIpTable.setStatus('obsolete')
swIBPACLIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 7, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swIBPACLIpProfileID"))
if mibBuilder.loadTexts: swIBPACLIpEntry.setStatus('obsolete')
swIBPACLIpProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIBPACLIpProfileID.setStatus('obsolete')
swIBPACLIpSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 7, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIBPACLIpSrcMacAddrMask.setStatus('obsolete')
swIBPACLIpSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 7, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIBPACLIpSrcIpAddrMask.setStatus('obsolete')
swACLPktContMaskOptionTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 8), )
if mibBuilder.loadTexts: swACLPktContMaskOptionTable.setStatus('current')
swACLPktContMaskOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 8, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swACLPktContMaskOptionProfileID"))
if mibBuilder.loadTexts: swACLPktContMaskOptionEntry.setStatus('current')
swACLPktContMaskOptionProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLPktContMaskOptionProfileID.setStatus('current')
swACLPktContMaskOffsetChunk1State = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContMaskOffsetChunk1State.setStatus('current')
swACLPktContMaskOffsetChunk1OffsetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContMaskOffsetChunk1OffsetValue.setStatus('current')
swACLPktContMaskOffsetChunk1Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 8, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContMaskOffsetChunk1Mask.setStatus('current')
swACLPktContMaskOffsetChunk2State = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContMaskOffsetChunk2State.setStatus('current')
swACLPktContMaskOffsetChunk2OffsetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContMaskOffsetChunk2OffsetValue.setStatus('current')
swACLPktContMaskOffsetChunk2Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 8, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContMaskOffsetChunk2Mask.setStatus('current')
swACLPktContMaskOffsetChunk3State = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContMaskOffsetChunk3State.setStatus('current')
swACLPktContMaskOffsetChunk3OffsetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContMaskOffsetChunk3OffsetValue.setStatus('current')
swACLPktContMaskOffsetChunk3Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 8, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContMaskOffsetChunk3Mask.setStatus('current')
swACLPktContMaskOffsetChunk4State = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContMaskOffsetChunk4State.setStatus('current')
swACLPktContMaskOffsetChunk4OffsetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 8, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContMaskOffsetChunk4OffsetValue.setStatus('current')
swACLPktContMaskOffsetChunk4Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 8, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContMaskOffsetChunk4Mask.setStatus('current')
swACLPktContMaskOptionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 8, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContMaskOptionRowStatus.setStatus('current')
swACLPktContMaskOptionOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 8, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("any", 1), ("acl", 2), ("ipbind", 3), ("other", 4), ("dhcp", 5), ("netbios", 6), ("ext-netbios", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLPktContMaskOptionOwner.setStatus('current')
swACLPktContMaskOptionUnusedRuleEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 8, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLPktContMaskOptionUnusedRuleEntries.setStatus('current')
swACLPktContMaskOptionProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 8, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContMaskOptionProfileName.setStatus('current')
swACLEtherRuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 1), )
if mibBuilder.loadTexts: swACLEtherRuleTable.setStatus('current')
swACLEtherRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 1, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swACLEtherRuleProfileID"), (0, "ACLMGMT-MIB", "swACLEtherRuleAccessID"))
if mibBuilder.loadTexts: swACLEtherRuleEntry.setStatus('current')
swACLEtherRuleProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLEtherRuleProfileID.setStatus('current')
swACLEtherRuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLEtherRuleAccessID.setStatus('current')
swACLEtherRuleVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRuleVlan.setStatus('current')
swACLEtherRuleSrcMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 1, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRuleSrcMacAddress.setStatus('current')
swACLEtherRuleDstMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 1, 1, 5), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRuleDstMacAddress.setStatus('current')
swACLEtherRule8021P = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRule8021P.setStatus('current')
swACLEtherRuleEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRuleEtherType.setStatus('current')
swACLEtherRuleEnablePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRuleEnablePriority.setStatus('current')
swACLEtherRulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRulePriority.setStatus('current')
swACLEtherRuleReplacePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRuleReplacePriority.setStatus('current')
swACLEtherRuleEnableReplaceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRuleEnableReplaceDscp.setStatus('current')
swACLEtherRuleRepDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRuleRepDscp.setStatus('current')
swACLEtherRulePermit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRulePermit.setStatus('current')
swACLEtherRulePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 1, 1, 14), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRulePort.setStatus('current')
swACLEtherRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 1, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRuleRowStatus.setStatus('current')
swACLEtherRuleOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("any", 1), ("acl", 2), ("ipbind", 3), ("other", 4), ("dhcp", 5), ("netbios", 6), ("ext-netbios", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLEtherRuleOwner.setStatus('current')
swACLEtherRuleRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 1, 1, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRuleRxRate.setStatus('current')
swACLEtherRuleEnableReplaceTosPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRuleEnableReplaceTosPrecedence.setStatus('current')
swACLEtherRuleRepTosPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRuleRepTosPrecedence.setStatus('current')
swACLEtherRuleVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRuleVID.setStatus('current')
swACLIpRuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2), )
if mibBuilder.loadTexts: swACLIpRuleTable.setStatus('current')
swACLIpRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swACLIpRuleProfileID"), (0, "ACLMGMT-MIB", "swACLIpRuleAccessID"))
if mibBuilder.loadTexts: swACLIpRuleEntry.setStatus('current')
swACLIpRuleProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLIpRuleProfileID.setStatus('current')
swACLIpRuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLIpRuleAccessID.setStatus('current')
swACLIpRuleVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleVlan.setStatus('current')
swACLIpRuleSrcIpaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleSrcIpaddress.setStatus('current')
swACLIpRuleDstIpaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleDstIpaddress.setStatus('current')
swACLIpRuleDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleDscp.setStatus('current')
swACLIpRuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("icmp", 2), ("igmp", 3), ("tcp", 4), ("udp", 5), ("protocolId", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swACLIpRuleProtocol.setStatus('current')
swACLIpRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleType.setStatus('current')
swACLIpRuleCode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleCode.setStatus('current')
swACLIpRuleSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleSrcPort.setStatus('current')
swACLIpRuleDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleDstPort.setStatus('current')
swACLIpRuleFlagBits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleFlagBits.setStatus('current')
swACLIpRuleProtoID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleProtoID.setStatus('current')
swACLIpRuleUserMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleUserMask.setStatus('current')
swACLIpRuleEnablePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleEnablePriority.setStatus('current')
swACLIpRulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRulePriority.setStatus('current')
swACLIpRuleReplacePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleReplacePriority.setStatus('current')
swACLIpRuleEnableReplaceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleEnableReplaceDscp.setStatus('current')
swACLIpRuleRepDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleRepDscp.setStatus('current')
swACLIpRulePermit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRulePermit.setStatus('current')
swACLIpRulePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 21), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRulePort.setStatus('current')
swACLIpRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 22), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleRowStatus.setStatus('current')
swACLIpRuleOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("any", 1), ("acl", 2), ("ipbind", 3), ("other", 4), ("dhcp", 5), ("netbios", 6), ("ext-netbios", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLIpRuleOwner.setStatus('current')
swACLIpRuleRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 24), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleRxRate.setStatus('current')
swACLIpRuleEnableReplaceTosPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleEnableReplaceTosPrecedence.setStatus('current')
swACLIpRuleRepTosPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleRepTosPrecedence.setStatus('current')
swACLIpRuleVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleVID.setStatus('current')
swACLIpv6RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4), )
if mibBuilder.loadTexts: swACLIpv6RuleTable.setStatus('current')
swACLIpv6RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swACLIpv6RuleProfileID"), (0, "ACLMGMT-MIB", "swACLIpv6RuleAccessID"))
if mibBuilder.loadTexts: swACLIpv6RuleEntry.setStatus('current')
swACLIpv6RuleProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLIpv6RuleProfileID.setStatus('current')
swACLIpv6RuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLIpv6RuleAccessID.setStatus('current')
swACLIpv6RuleClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6RuleClass.setStatus('current')
swACLIpv6RuleFlowlabel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6RuleFlowlabel.setStatus('current')
swACLIpv6RuleSrcIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1, 5), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6RuleSrcIpv6Addr.setStatus('current')
swACLIpv6RuleDstIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1, 6), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6RuleDstIpv6Addr.setStatus('current')
swACLIpv6RuleEnablePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6RuleEnablePriority.setStatus('current')
swACLIpv6RulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6RulePriority.setStatus('current')
swACLIpv6RuleReplacePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6RuleReplacePriority.setStatus('current')
swACLIpv6RulePermit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2), ("mirror", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6RulePermit.setStatus('current')
swACLIpv6RulePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1, 11), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6RulePort.setStatus('current')
swACLIpv6RuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6RuleRowStatus.setStatus('current')
swACLIpv6RuleOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("any", 1), ("acl", 2), ("ipbind", 3), ("other", 4), ("dhcp", 5), ("netbios", 6), ("ext-netbios", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLIpv6RuleOwner.setStatus('current')
swACLIpv6RuleRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6RuleRxRate.setStatus('current')
swACLIpv6RuleEnableReplaceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6RuleEnableReplaceDscp.setStatus('current')
swACLIpv6RuleRepDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6RuleRepDscp.setStatus('current')
swACLIpv6RuleEnableReplaceTosPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6RuleEnableReplaceTosPrecedence.setStatus('current')
swACLIpv6RuleRepTosPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6RuleRepTosPrecedence.setStatus('current')
swACLIpv6RuleVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6RuleVID.setStatus('current')
swACLIpv6RuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("tcp", 2), ("udp", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6RuleProtocol.setStatus('current')
swACLIpv6RuleSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6RuleSrcPort.setStatus('current')
swACLIpv6RuleDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6RuleDstPort.setStatus('current')
swIBPACLEtherRuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 5), )
if mibBuilder.loadTexts: swIBPACLEtherRuleTable.setStatus('obsolete')
swIBPACLEtherRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 5, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swIBPACLEtherRuleProfileID"), (0, "ACLMGMT-MIB", "swIBPACLEtherRuleAccessID"))
if mibBuilder.loadTexts: swIBPACLEtherRuleEntry.setStatus('obsolete')
swIBPACLEtherRuleProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIBPACLEtherRuleProfileID.setStatus('obsolete')
swIBPACLEtherRuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIBPACLEtherRuleAccessID.setStatus('obsolete')
swIBPACLEtherRuleEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIBPACLEtherRuleEtherType.setStatus('obsolete')
swIBPACLEtherRulePermit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIBPACLEtherRulePermit.setStatus('obsolete')
swIBPACLEtherRulePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 5, 1, 5), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIBPACLEtherRulePort.setStatus('obsolete')
swIBPACLIpRuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 6), )
if mibBuilder.loadTexts: swIBPACLIpRuleTable.setStatus('obsolete')
swIBPACLIpRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 6, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swIBPACLIpRuleProfileID"), (0, "ACLMGMT-MIB", "swIBPACLIpRuleAccessID"))
if mibBuilder.loadTexts: swIBPACLIpRuleEntry.setStatus('obsolete')
swIBPACLIpRuleProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIBPACLIpRuleProfileID.setStatus('obsolete')
swIBPACLIpRuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIBPACLIpRuleAccessID.setStatus('obsolete')
swIBPACLIpRuleSrcMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 6, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIBPACLIpRuleSrcMacAddress.setStatus('obsolete')
swIBPACLIpRuleSrcIpaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 6, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIBPACLIpRuleSrcIpaddress.setStatus('obsolete')
swIBPACLIpRulePermit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIBPACLIpRulePermit.setStatus('obsolete')
swIBPACLIpRulePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 6, 1, 6), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIBPACLIpRulePort.setStatus('obsolete')
swACLCounterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 8), )
if mibBuilder.loadTexts: swACLCounterTable.setStatus('current')
swACLCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 8, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swACLCounterProfileID"), (0, "ACLMGMT-MIB", "swACLCounterAccessID"))
if mibBuilder.loadTexts: swACLCounterEntry.setStatus('current')
swACLCounterProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLCounterProfileID.setStatus('current')
swACLCounterAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLCounterAccessID.setStatus('current')
swACLCounterState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swACLCounterState.setStatus('current')
swACLCounterTotalCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 8, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLCounterTotalCounter.setStatus('current')
swACLCounterGreenCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 8, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLCounterGreenCounter.setStatus('current')
swACLCounterYellowCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 8, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLCounterYellowCounter.setStatus('current')
swACLCounterRedCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 8, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLCounterRedCounter.setStatus('current')
swACLPktContRuleVarOffsetTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9), )
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetTable.setStatus('current')
swACLPktContRuleVarOffsetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swACLPktContRuleVarOffsetProfileID"), (0, "ACLMGMT-MIB", "swACLPktContRuleVarOffsetAccessID"))
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetEntry.setStatus('current')
swACLPktContRuleVarOffsetProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetProfileID.setStatus('current')
swACLPktContRuleVarOffsetAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetAccessID.setStatus('current')
swACLPktContRuleVarOffsetOffsetIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 76))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetOffsetIndex1.setStatus('current')
swACLPktContRuleVarOffsetMask1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetMask1.setStatus('current')
swACLPktContRuleVarOffsetData1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetData1.setStatus('current')
swACLPktContRuleVarOffsetOffsetIndex2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 76))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetOffsetIndex2.setStatus('current')
swACLPktContRuleVarOffsetMask2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetMask2.setStatus('current')
swACLPktContRuleVarOffsetData2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetData2.setStatus('current')
swACLPktContRuleVarOffsetOffsetIndex3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 76))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetOffsetIndex3.setStatus('current')
swACLPktContRuleVarOffsetMask3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetMask3.setStatus('current')
swACLPktContRuleVarOffsetData3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetData3.setStatus('current')
swACLPktContRuleVarOffsetOffsetIndex4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 76))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetOffsetIndex4.setStatus('current')
swACLPktContRuleVarOffsetMask4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetMask4.setStatus('current')
swACLPktContRuleVarOffsetData4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetData4.setStatus('current')
swACLPktContRuleVarOffsetOffsetIndex5 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 76))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetOffsetIndex5.setStatus('current')
swACLPktContRuleVarOffsetMask5 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetMask5.setStatus('current')
swACLPktContRuleVarOffsetData5 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetData5.setStatus('current')
swACLPktContRuleVarOffsetEnablePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetEnablePriority.setStatus('current')
swACLPktContRuleVarOffsetPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetPriority.setStatus('current')
swACLPktContRuleVarOffsetReplacePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetReplacePriority.setStatus('current')
swACLPktContRuleVarOffsetRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1024000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetRxRate.setStatus('current')
swACLPktContRuleVarOffsetPermit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetPermit.setStatus('current')
swACLPktContRuleVarOffsetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 30), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetPort.setStatus('current')
swACLPktContRuleVarOffsetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 33), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetRowStatus.setStatus('current')
swACLPktContRuleVarOffsetReplacePriorityWith = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetReplacePriorityWith.setStatus('current')
swCpuAclEthernetTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 1), )
if mibBuilder.loadTexts: swCpuAclEthernetTable.setStatus('current')
swCpuAclEthernetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 1, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swCpuAclEthernetProfileID"))
if mibBuilder.loadTexts: swCpuAclEthernetEntry.setStatus('current')
swCpuAclEthernetProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCpuAclEthernetProfileID.setStatus('current')
swCpuAclEthernetUsevlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclEthernetUsevlan.setStatus('current')
swCpuAclEthernetMacAddrMaskState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("dst-mac-addr", 2), ("src-mac-addr", 3), ("dst-src-mac-addr", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclEthernetMacAddrMaskState.setStatus('current')
swCpuAclEthernetSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 1, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclEthernetSrcMacAddrMask.setStatus('current')
swCpuAclEthernetDstMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 1, 1, 5), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclEthernetDstMacAddrMask.setStatus('current')
swCpuAclEthernetUse8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclEthernetUse8021p.setStatus('current')
swCpuAclEthernetUseEthernetType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclEthernetUseEthernetType.setStatus('current')
swCpuAclEthernetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclEthernetRowStatus.setStatus('current')
swCpuAclIpTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 2), )
if mibBuilder.loadTexts: swCpuAclIpTable.setStatus('current')
swCpuAclIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 2, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swCpuAclIpProfileID"))
if mibBuilder.loadTexts: swCpuAclIpEntry.setStatus('current')
swCpuAclIpProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCpuAclIpProfileID.setStatus('current')
swCpuAclIpUsevlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpUsevlan.setStatus('current')
swCpuAclIpIpAddrMaskState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("dst-ip-addr", 2), ("src-ip-addr", 3), ("dst-src-ip-addr", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpIpAddrMaskState.setStatus('current')
swCpuAclIpSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 2, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpSrcIpAddrMask.setStatus('current')
swCpuAclIpDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 2, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpDstIpAddrMask.setStatus('current')
swCpuAclIpUseDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpUseDSCP.setStatus('current')
swCpuAclIpUseProtoType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("icmp", 2), ("igmp", 3), ("tcp", 4), ("udp", 5), ("protocolId", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpUseProtoType.setStatus('current')
swCpuAclIpIcmpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("type", 2), ("code", 3), ("type-code", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpIcmpOption.setStatus('current')
swCpuAclIpIgmpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpIgmpOption.setStatus('current')
swCpuAclIpTcpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("dst-addr", 2), ("src-addr", 3), ("dst-src-addr", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpTcpOption.setStatus('current')
swCpuAclIpUdpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("dst-addr", 2), ("src-addr", 3), ("dst-src-addr", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpUdpOption.setStatus('current')
swCpuAclIpTCPorUDPSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpTCPorUDPSrcPortMask.setStatus('current')
swCpuAclIpTCPorUDPDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpTCPorUDPDstPortMask.setStatus('current')
swCpuAclIpTCPFlagBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpTCPFlagBit.setStatus('current')
swCpuAclIpTCPFlagBitMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpTCPFlagBitMask.setStatus('current')
swCpuAclIpProtoIDOption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpProtoIDOption.setStatus('current')
swCpuAclIpProtoID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpProtoID.setStatus('current')
swCpuAclIpProtoIDMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 2, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpProtoIDMask.setStatus('current')
swCpuAclIpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 2, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpRowStatus.setStatus('current')
swCpuAclPktContMaskTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 3), )
if mibBuilder.loadTexts: swCpuAclPktContMaskTable.setStatus('current')
swCpuAclPktContMaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 3, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swCpuAclPktContMaskProfileID"))
if mibBuilder.loadTexts: swCpuAclPktContMaskEntry.setStatus('current')
swCpuAclPktContMaskProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCpuAclPktContMaskProfileID.setStatus('current')
swCpuAclPktContMaskOffset0to15 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclPktContMaskOffset0to15.setStatus('current')
swCpuAclPktContMaskOffset16to31 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclPktContMaskOffset16to31.setStatus('current')
swCpuAclPktContMaskOffset32to47 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclPktContMaskOffset32to47.setStatus('current')
swCpuAclPktContMaskOffset48to63 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclPktContMaskOffset48to63.setStatus('current')
swCpuAclPktContMaskOffset64to79 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclPktContMaskOffset64to79.setStatus('current')
swCpuAclPktContMaskRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclPktContMaskRowStatus.setStatus('current')
swCpuAclIpv6MaskTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 4), )
if mibBuilder.loadTexts: swCpuAclIpv6MaskTable.setStatus('current')
swCpuAclIpv6MaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 4, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swCpuAclIpv6MaskProfileID"))
if mibBuilder.loadTexts: swCpuAclIpv6MaskEntry.setStatus('current')
swCpuAclIpv6MaskProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCpuAclIpv6MaskProfileID.setStatus('current')
swCpuAclIpv6MaskClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpv6MaskClass.setStatus('current')
swCpuAclIpv6MaskFlowlabel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpv6MaskFlowlabel.setStatus('current')
swCpuAclIpv6IpAddrMaskState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("dst-ipv6-addr", 2), ("src-ipv6-addr", 3), ("dst-src-ipv6-addr", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpv6IpAddrMaskState.setStatus('current')
swCpuAclIpv6MaskSrcIpv6Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 4, 1, 5), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpv6MaskSrcIpv6Mask.setStatus('current')
swCpuAclIpv6MaskDstIpv6Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 4, 1, 6), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpv6MaskDstIpv6Mask.setStatus('current')
swCpuAclIpv6MaskRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 4, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpv6MaskRowStatus.setStatus('current')
swCpuACLMaskDelAllState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swCpuACLMaskDelAllState.setStatus('current')
swCpuAclEtherRuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 1), )
if mibBuilder.loadTexts: swCpuAclEtherRuleTable.setStatus('current')
swCpuAclEtherRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 1, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swCpuAclEtherRuleProfileID"), (0, "ACLMGMT-MIB", "swCpuAclEtherRuleAccessID"))
if mibBuilder.loadTexts: swCpuAclEtherRuleEntry.setStatus('current')
swCpuAclEtherRuleProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCpuAclEtherRuleProfileID.setStatus('current')
swCpuAclEtherRuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCpuAclEtherRuleAccessID.setStatus('current')
swCpuAclEtherRuleVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclEtherRuleVlan.setStatus('current')
swCpuAclEtherRuleSrcMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 1, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclEtherRuleSrcMacAddress.setStatus('current')
swCpuAclEtherRuleDstMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 1, 1, 5), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclEtherRuleDstMacAddress.setStatus('current')
swCpuAclEtherRule8021P = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclEtherRule8021P.setStatus('current')
swCpuAclEtherRuleEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclEtherRuleEtherType.setStatus('current')
swCpuAclEtherRulePermit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclEtherRulePermit.setStatus('current')
swCpuAclEtherRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclEtherRuleRowStatus.setStatus('current')
swCpuAclEtherRulePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 1, 1, 10), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclEtherRulePort.setStatus('current')
swCpuAclIpRuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 2), )
if mibBuilder.loadTexts: swCpuAclIpRuleTable.setStatus('current')
swCpuAclIpRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 2, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swCpuAclIpRuleProfileID"), (0, "ACLMGMT-MIB", "swCpuAclIpRuleAccessID"))
if mibBuilder.loadTexts: swCpuAclIpRuleEntry.setStatus('current')
swCpuAclIpRuleProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCpuAclIpRuleProfileID.setStatus('current')
swCpuAclIpRuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCpuAclIpRuleAccessID.setStatus('current')
swCpuAclIpRuleVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpRuleVlan.setStatus('current')
swCpuAclIpRuleSrcIpaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 2, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpRuleSrcIpaddress.setStatus('current')
swCpuAclIpRuleDstIpaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 2, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpRuleDstIpaddress.setStatus('current')
swCpuAclIpRuleDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpRuleDscp.setStatus('current')
swCpuAclIpRuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("icmp", 2), ("igmp", 3), ("tcp", 4), ("udp", 5), ("protocolId", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCpuAclIpRuleProtocol.setStatus('current')
swCpuAclIpRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpRuleType.setStatus('current')
swCpuAclIpRuleCode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpRuleCode.setStatus('current')
swCpuAclIpRuleSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpRuleSrcPort.setStatus('current')
swCpuAclIpRuleDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpRuleDstPort.setStatus('current')
swCpuAclIpRuleFlagBits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpRuleFlagBits.setStatus('current')
swCpuAclIpRuleProtoID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpRuleProtoID.setStatus('current')
swCpuAclIpRuleUserMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpRuleUserMask.setStatus('current')
swCpuAclIpRulePermit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpRulePermit.setStatus('current')
swCpuAclIpRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 2, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpRuleRowStatus.setStatus('current')
swCpuAclIpRulePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 2, 1, 17), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpRulePort.setStatus('current')
swCpuAclPktContRuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 3), )
if mibBuilder.loadTexts: swCpuAclPktContRuleTable.setStatus('current')
swCpuAclPktContRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 3, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swCpuAclPktContRuleProfileID"), (0, "ACLMGMT-MIB", "swCpuAclPktContRuleAccessID"))
if mibBuilder.loadTexts: swCpuAclPktContRuleEntry.setStatus('current')
swCpuAclPktContRuleProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCpuAclPktContRuleProfileID.setStatus('current')
swCpuAclPktContRuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCpuAclPktContRuleAccessID.setStatus('current')
swCpuAclPktContRuleOffset0to15 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclPktContRuleOffset0to15.setStatus('current')
swCpuAclPktContRuleOffset16to31 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclPktContRuleOffset16to31.setStatus('current')
swCpuAclPktContRuleOffset32to47 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclPktContRuleOffset32to47.setStatus('current')
swCpuAclPktContRuleOffset48to63 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclPktContRuleOffset48to63.setStatus('current')
swCpuAclPktContRuleOffset64to79 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclPktContRuleOffset64to79.setStatus('current')
swCpuAclPktContRulePermit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclPktContRulePermit.setStatus('current')
swCpuAclPktContRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 3, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclPktContRuleRowStatus.setStatus('current')
swCpuAclPktContRulePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 3, 1, 10), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclPktContRulePort.setStatus('current')
swCpuAclIpv6RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 4), )
if mibBuilder.loadTexts: swCpuAclIpv6RuleTable.setStatus('current')
swCpuAclIpv6RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 4, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swCpuAclIpv6RuleProfileID"), (0, "ACLMGMT-MIB", "swCpuAclIpv6RuleAccessID"))
if mibBuilder.loadTexts: swCpuAclIpv6RuleEntry.setStatus('current')
swCpuAclIpv6RuleProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCpuAclIpv6RuleProfileID.setStatus('current')
swCpuAclIpv6RuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCpuAclIpv6RuleAccessID.setStatus('current')
swCpuAclIpv6RuleClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpv6RuleClass.setStatus('current')
swCpuAclIpv6RuleFlowlabel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpv6RuleFlowlabel.setStatus('current')
swCpuAclIpv6RuleSrcIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 4, 1, 5), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpv6RuleSrcIpv6Addr.setStatus('current')
swCpuAclIpv6RuleDstIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 4, 1, 6), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpv6RuleDstIpv6Addr.setStatus('current')
swCpuAclIpv6RulePermit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpv6RulePermit.setStatus('current')
swCpuAclIpv6RuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 4, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpv6RuleRowStatus.setStatus('current')
swCpuAclIpv6RulePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 4, 1, 9), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpv6RulePort.setStatus('current')
swAclMeterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1), )
if mibBuilder.loadTexts: swAclMeterTable.setStatus('current')
swAclMeterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swAclMeterProfileID"), (0, "ACLMGMT-MIB", "swAclMeterAccessID"))
if mibBuilder.loadTexts: swAclMeterEntry.setStatus('current')
swAclMeterProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAclMeterProfileID.setStatus('current')
swAclMeterAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAclMeterAccessID.setStatus('current')
swAclMeterRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterRate.setStatus('current')
swAclMeterActionForRateExceed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("drop-packet", 2), ("set-drop-precedence", 3), ("remark-dscp", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterActionForRateExceed.setStatus('current')
swAclMeterRemarkDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterRemarkDscp.setStatus('current')
swAclMeterBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterBurstSize.setStatus('current')
swAclMeterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("tr-tcm", 2), ("sr-tcm", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterMode.setStatus('current')
swAclMeterTrtcmCir = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 156249))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterTrtcmCir.setStatus('current')
swAclMeterTrtcmCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16384))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterTrtcmCbs.setStatus('current')
swAclMeterTrtcmPir = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 156249))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterTrtcmPir.setStatus('current')
swAclMeterTrtcmPbs = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16384))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterTrtcmPbs.setStatus('current')
swAclMeterTrtcmColorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("color-blind", 1), ("color-aware", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterTrtcmColorMode.setStatus('current')
swAclMeterTrtcmConformState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("permit", 2), ("replace-dscp", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterTrtcmConformState.setStatus('current')
swAclMeterTrtcmConformReplaceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterTrtcmConformReplaceDscp.setStatus('current')
swAclMeterTrtcmConformCounterState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterTrtcmConformCounterState.setStatus('current')
swAclMeterTrtcmExceedState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("permit", 2), ("replace-dscp", 3), ("drop", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterTrtcmExceedState.setStatus('current')
swAclMeterTrtcmExceedReplaceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterTrtcmExceedReplaceDscp.setStatus('current')
swAclMeterTrtcmExceedCounterState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterTrtcmExceedCounterState.setStatus('current')
swAclMeterTrtcmViolateState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("permit", 2), ("replace-dscp", 3), ("drop", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterTrtcmViolateState.setStatus('current')
swAclMeterTrtcmViolateReplaceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterTrtcmViolateReplaceDscp.setStatus('current')
swAclMeterTrtcmViolateCounterState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterTrtcmViolateCounterState.setStatus('current')
swAclMeterSrtcmCir = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 156249))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterSrtcmCir.setStatus('current')
swAclMeterSrtcmCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16384))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterSrtcmCbs.setStatus('current')
swAclMeterSrtcmEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16384))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterSrtcmEbs.setStatus('current')
swAclMeterSrtcmColorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("color-blind", 1), ("color-aware", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterSrtcmColorMode.setStatus('current')
swAclMeterSrtcmConformState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("permit", 2), ("replace-dscp", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterSrtcmConformState.setStatus('current')
swAclMeterSrtcmConformReplaceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterSrtcmConformReplaceDscp.setStatus('current')
swAclMeterSrtcmConformCounterState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterSrtcmConformCounterState.setStatus('current')
swAclMeterSrtcmExceedState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("permit", 2), ("replace-dscp", 3), ("drop", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterSrtcmExceedState.setStatus('current')
swAclMeterSrtcmExceedReplaceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterSrtcmExceedReplaceDscp.setStatus('current')
swAclMeterSrtcmExceedCounterState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterSrtcmExceedCounterState.setStatus('current')
swAclMeterSrtcmViolateState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("permit", 2), ("replace-dscp", 3), ("drop", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterSrtcmViolateState.setStatus('current')
swAclMeterSrtcmViolateReplaceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterSrtcmViolateReplaceDscp.setStatus('current')
swAclMeterSrtcmViolateCounterState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterSrtcmViolateCounterState.setStatus('current')
swAclMeterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 35), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterRowStatus.setStatus('current')
swAclMeteringNumOfEntryInUse = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAclMeteringNumOfEntryInUse.setStatus('current')
mibBuilder.exportSymbols("ACLMGMT-MIB", swCpuAclIpTCPFlagBit=swCpuAclIpTCPFlagBit, swACLIpv6RuleTable=swACLIpv6RuleTable, swAclMeterTrtcmViolateState=swAclMeterTrtcmViolateState, swACLIpRuleRowStatus=swACLIpRuleRowStatus, swACLPktContMaskOptionEntry=swACLPktContMaskOptionEntry, swACLPktContMaskOffsetChunk1State=swACLPktContMaskOffsetChunk1State, swACLPktContRuleVarOffsetMask1=swACLPktContRuleVarOffsetMask1, swACLIpv6RuleVID=swACLIpv6RuleVID, swACLIpv6RulePort=swACLIpv6RulePort, swCpuAclIpRuleProtocol=swCpuAclIpRuleProtocol, swACLIpIcmpOption=swACLIpIcmpOption, swACLPktContMaskOffsetChunk4State=swACLPktContMaskOffsetChunk4State, swACLPktContRuleVarOffsetEntry=swACLPktContRuleVarOffsetEntry, swACLEthernetOwner=swACLEthernetOwner, swACLCounterGreenCounter=swACLCounterGreenCounter, swACLIpRuleDstPort=swACLIpRuleDstPort, swCpuAclEthernetDstMacAddrMask=swCpuAclEthernetDstMacAddrMask, swCpuAclEthernetProfileID=swCpuAclEthernetProfileID, swACLIpRuleEnableReplaceDscp=swACLIpRuleEnableReplaceDscp, swACLEtherRuleProfileID=swACLEtherRuleProfileID, swCpuAclIpUseProtoType=swCpuAclIpUseProtoType, swACLIpProtoIDOption=swACLIpProtoIDOption, swCpuAclIpRuleCode=swCpuAclIpRuleCode, swCpuAclIpIgmpOption=swCpuAclIpIgmpOption, swAclMeterSrtcmConformReplaceDscp=swAclMeterSrtcmConformReplaceDscp, swAclMeterSrtcmViolateCounterState=swAclMeterSrtcmViolateCounterState, swCpuAclIpEntry=swCpuAclIpEntry, PortList=PortList, swACLPktContMaskRowStatus=swACLPktContMaskRowStatus, swCpuAclIpTCPFlagBitMask=swCpuAclIpTCPFlagBitMask, swCpuAclIpRuleEntry=swCpuAclIpRuleEntry, swCpuAclRuleMgmt=swCpuAclRuleMgmt, swACLIpRuleRepDscp=swACLIpRuleRepDscp, swACLPktContRuleVarOffsetMask3=swACLPktContRuleVarOffsetMask3, swCpuAclIpProfileID=swCpuAclIpProfileID, swACLIpProtoIDMask=swACLIpProtoIDMask, swAclMeterTrtcmPbs=swAclMeterTrtcmPbs, swACLEtherRulePort=swACLEtherRulePort, swACLPktContMaskOffset32to47=swACLPktContMaskOffset32to47, swACLEtherRule8021P=swACLEtherRule8021P, swCpuAclIpUsevlan=swCpuAclIpUsevlan, swACLIpv6RuleClass=swACLIpv6RuleClass, swAclMeterRate=swAclMeterRate, swAclMeterSrtcmViolateState=swAclMeterSrtcmViolateState, swIBPACLIpRuleAccessID=swIBPACLIpRuleAccessID, swAclMeterTrtcmColorMode=swAclMeterTrtcmColorMode, swACLPktContRuleVarOffsetPermit=swACLPktContRuleVarOffsetPermit, swCpuAclIpv6RuleFlowlabel=swCpuAclIpv6RuleFlowlabel, swAclMeterSrtcmCbs=swAclMeterSrtcmCbs, swAclMeterTrtcmConformReplaceDscp=swAclMeterTrtcmConformReplaceDscp, swIBPACLIpTable=swIBPACLIpTable, swAclMeterSrtcmConformState=swAclMeterSrtcmConformState, swACLEtherRuleEnablePriority=swACLEtherRuleEnablePriority, swACLIpv6RuleRowStatus=swACLIpv6RuleRowStatus, swACLIpv6RuleEnableReplaceDscp=swACLIpv6RuleEnableReplaceDscp, swCpuAclEthernetSrcMacAddrMask=swCpuAclEthernetSrcMacAddrMask, swCpuAclPktContMaskProfileID=swCpuAclPktContMaskProfileID, swCpuAclIpv6RuleClass=swCpuAclIpv6RuleClass, swACLIpv6RuleSrcPort=swACLIpv6RuleSrcPort, swACLIpv6MaskTCPorUDPSrcPortMask=swACLIpv6MaskTCPorUDPSrcPortMask, swCpuAclIpTCPorUDPSrcPortMask=swCpuAclIpTCPorUDPSrcPortMask, swCpuAclPktContRuleProfileID=swCpuAclPktContRuleProfileID, swAclMeterTrtcmExceedState=swAclMeterTrtcmExceedState, swCpuAclPktContRulePort=swCpuAclPktContRulePort, swACLIpTCPFlagBitMask=swACLIpTCPFlagBitMask, swIBPACLIpSrcMacAddrMask=swIBPACLIpSrcMacAddrMask, swAclMeterSrtcmExceedReplaceDscp=swAclMeterSrtcmExceedReplaceDscp, swACLEtherRuleRxRate=swACLEtherRuleRxRate, swACLIpUsevlan=swACLIpUsevlan, swAclMeterActionForRateExceed=swAclMeterActionForRateExceed, swACLIpProtoID=swACLIpProtoID, swCpuAclIpRulePort=swCpuAclIpRulePort, swACLEtherRuleDstMacAddress=swACLEtherRuleDstMacAddress, swAclRuleMgmt=swAclRuleMgmt, swACLIpRuleRxRate=swACLIpRuleRxRate, swACLIpv6MaskUseProtoType=swACLIpv6MaskUseProtoType, swAclMeterSrtcmConformCounterState=swAclMeterSrtcmConformCounterState, Ipv6Address=Ipv6Address, swCpuAclIpTcpOption=swCpuAclIpTcpOption, swACLEtherRuleEnableReplaceDscp=swACLEtherRuleEnableReplaceDscp, swACLIpUseDSCP=swACLIpUseDSCP, swACLCounterTable=swACLCounterTable, swCpuAclIpRuleDstIpaddress=swCpuAclIpRuleDstIpaddress, swACLPktContMaskTable=swACLPktContMaskTable, swACLEthernetMacAddrMaskState=swACLEthernetMacAddrMaskState, swCpuAclIpv6MaskProfileID=swCpuAclIpv6MaskProfileID, swCpuAclIpRuleType=swCpuAclIpRuleType, swCpuAclIpv6RulePermit=swCpuAclIpv6RulePermit, swACLIpv6RulePriority=swACLIpv6RulePriority, swCpuAclIpRuleVlan=swCpuAclIpRuleVlan, swIBPACLIpRuleSrcIpaddress=swIBPACLIpRuleSrcIpaddress, swACLPktContMaskOptionTable=swACLPktContMaskOptionTable, swACLIpv6RuleProfileID=swACLIpv6RuleProfileID, swACLPktContRuleVarOffsetTable=swACLPktContRuleVarOffsetTable, swACLIpTCPorUDPSrcPortMask=swACLIpTCPorUDPSrcPortMask, swCpuAclIpProtoID=swCpuAclIpProtoID, swCpuAclEtherRuleRowStatus=swCpuAclEtherRuleRowStatus, swCpuAclIpRuleDscp=swCpuAclIpRuleDscp, swACLCounterRedCounter=swACLCounterRedCounter, swACLIpv6RuleRepDscp=swACLIpv6RuleRepDscp, swACLEtherRulePermit=swACLEtherRulePermit, swAclMeterTrtcmCir=swAclMeterTrtcmCir, swACLIpv6RuleProtocol=swACLIpv6RuleProtocol, swACLIpv6MaskSrcIpv6Mask=swACLIpv6MaskSrcIpv6Mask, swIBPACLIpRulePort=swIBPACLIpRulePort, swCpuAclEtherRulePort=swCpuAclEtherRulePort, swCpuAclEthernetUse8021p=swCpuAclEthernetUse8021p, swCpuAclIpRulePermit=swCpuAclIpRulePermit, swACLIpv6MaskTable=swACLIpv6MaskTable, swACLCounterEntry=swACLCounterEntry, swACLPktContRuleVarOffsetPriority=swACLPktContRuleVarOffsetPriority, swAclMeterTrtcmViolateReplaceDscp=swAclMeterTrtcmViolateReplaceDscp, swACLIpv6RuleDstPort=swACLIpv6RuleDstPort, swACLPktContRuleVarOffsetProfileID=swACLPktContRuleVarOffsetProfileID, swACLPktContRuleVarOffsetMask5=swACLPktContRuleVarOffsetMask5, swCpuAclIpRuleProfileID=swCpuAclIpRuleProfileID, swCpuAclIpv6IpAddrMaskState=swCpuAclIpv6IpAddrMaskState, PYSNMP_MODULE_ID=swAclMgmtMIB, swACLIpIpAddrMaskState=swACLIpIpAddrMaskState, swCpuAclEtherRuleEntry=swCpuAclEtherRuleEntry, swACLIpv6RuleRxRate=swACLIpv6RuleRxRate, swACLIpUnusedRuleEntries=swACLIpUnusedRuleEntries, swIBPACLEtherRuleProfileID=swIBPACLEtherRuleProfileID, swACLIpv6RuleSrcIpv6Addr=swACLIpv6RuleSrcIpv6Addr, swAclMeterSrtcmViolateReplaceDscp=swAclMeterSrtcmViolateReplaceDscp, swACLIpv6RulePermit=swACLIpv6RulePermit, swCpuAclIpv6RulePort=swCpuAclIpv6RulePort, swACLEthernetRowStatus=swACLEthernetRowStatus, swACLPktContMaskOffset16to31=swACLPktContMaskOffset16to31, swACLPktContMaskUnusedRuleEntries=swACLPktContMaskUnusedRuleEntries, swAclMeterRemarkDscp=swAclMeterRemarkDscp, swACLIpRowStatus=swACLIpRowStatus, swIBPACLEtherRuleAccessID=swIBPACLEtherRuleAccessID, swACLIpv6MaskTcpOption=swACLIpv6MaskTcpOption, swACLCounterYellowCounter=swACLCounterYellowCounter, swAclMaskMgmt=swAclMaskMgmt, swCpuAclPktContRuleOffset0to15=swCpuAclPktContRuleOffset0to15, swAclCtrl=swAclCtrl, swAclMeteringMgmt=swAclMeteringMgmt, swACLIpv6RuleFlowlabel=swACLIpv6RuleFlowlabel, swIBPACLEtherRuleEtherType=swIBPACLEtherRuleEtherType, swCpuAclEtherRuleAccessID=swCpuAclEtherRuleAccessID, swCpuAclIpv6MaskEntry=swCpuAclIpv6MaskEntry, swCpuAclIpRuleTable=swCpuAclIpRuleTable, swCpuAclEthernetEntry=swCpuAclEthernetEntry, swAclMeterAccessID=swAclMeterAccessID, swACLEthernetDstMacAddrMask=swACLEthernetDstMacAddrMask, swACLIpRuleOwner=swACLIpRuleOwner, swACLPktContMaskOptionProfileName=swACLPktContMaskOptionProfileName, swACLIpRuleReplacePriority=swACLIpRuleReplacePriority, swACLPktContRuleVarOffsetOffsetIndex4=swACLPktContRuleVarOffsetOffsetIndex4, swCpuAclIpIcmpOption=swCpuAclIpIcmpOption, swCpuAclPktContRulePermit=swCpuAclPktContRulePermit, swCpuAclPktContRuleTable=swCpuAclPktContRuleTable, swCpuAclIpv6MaskFlowlabel=swCpuAclIpv6MaskFlowlabel, swACLPktContRuleVarOffsetOffsetIndex5=swACLPktContRuleVarOffsetOffsetIndex5, swAclMeterTrtcmViolateCounterState=swAclMeterTrtcmViolateCounterState, swACLIpRuleSrcPort=swACLIpRuleSrcPort, swACLIpRuleDscp=swACLIpRuleDscp, swAclMeterEntry=swAclMeterEntry, swCpuAclIpTable=swCpuAclIpTable, swACLIpProfileName=swACLIpProfileName, swACLIpRuleRepTosPrecedence=swACLIpRuleRepTosPrecedence, swACLEthernetTable=swACLEthernetTable, swACLIpRuleUserMask=swACLIpRuleUserMask, swCpuAclIpIpAddrMaskState=swCpuAclIpIpAddrMaskState, swACLIpv6RuleAccessID=swACLIpv6RuleAccessID, swACLIpRuleEnablePriority=swACLIpRuleEnablePriority, swCpuAclPktContMaskRowStatus=swCpuAclPktContMaskRowStatus, swCpuAclPktContMaskOffset16to31=swCpuAclPktContMaskOffset16to31, swACLIpEntry=swACLIpEntry, swCpuAclIpUdpOption=swCpuAclIpUdpOption, swCpuAclEtherRulePermit=swCpuAclEtherRulePermit, swACLPktContRuleVarOffsetRxRate=swACLPktContRuleVarOffsetRxRate, swACLIpv6RuleRepTosPrecedence=swACLIpv6RuleRepTosPrecedence, swACLIpRuleCode=swACLIpRuleCode, swACLIpRuleProtoID=swACLIpRuleProtoID, swACLIpv6MaskTCPorUDPDstPortMask=swACLIpv6MaskTCPorUDPDstPortMask, swCpuAclPktContRuleEntry=swCpuAclPktContRuleEntry, swCpuInterfacefilterState=swCpuInterfacefilterState, swCpuAclEthernetRowStatus=swCpuAclEthernetRowStatus, swACLPktContMaskOffsetChunk3State=swACLPktContMaskOffsetChunk3State, swACLTotalUnusedRuleEntries=swACLTotalUnusedRuleEntries, swACLIpRulePermit=swACLIpRulePermit, swAclMeterTrtcmCbs=swAclMeterTrtcmCbs, swACLIpRuleAccessID=swACLIpRuleAccessID, swACLPktContRuleVarOffsetRowStatus=swACLPktContRuleVarOffsetRowStatus, swCpuAclPktContMaskOffset64to79=swCpuAclPktContMaskOffset64to79, swACLIpv6RuleEnableReplaceTosPrecedence=swACLIpv6RuleEnableReplaceTosPrecedence, swACLPktContMaskOptionUnusedRuleEntries=swACLPktContMaskOptionUnusedRuleEntries, swACLEtherRuleOwner=swACLEtherRuleOwner, swACLTotalUsedRuleEntries=swACLTotalUsedRuleEntries, swACLPktContRuleVarOffsetMask2=swACLPktContRuleVarOffsetMask2, swCpuAclIpRuleAccessID=swCpuAclIpRuleAccessID, swACLEtherRuleVID=swACLEtherRuleVID, swCpuAclPktContRuleOffset16to31=swCpuAclPktContRuleOffset16to31, swACLPktContRuleVarOffsetReplacePriority=swACLPktContRuleVarOffsetReplacePriority, swACLIpv6RuleDstIpv6Addr=swACLIpv6RuleDstIpv6Addr, swACLIpTcpOption=swACLIpTcpOption, swACLPktContMaskOffset64to79=swACLPktContMaskOffset64to79, swACLIpv6RuleEnablePriority=swACLIpv6RuleEnablePriority, swIBPACLIpRuleTable=swIBPACLIpRuleTable, swIBPACLIpEntry=swIBPACLIpEntry, swACLEtherRuleVlan=swACLEtherRuleVlan, swACLEtherRuleAccessID=swACLEtherRuleAccessID, swCpuAclIpv6RuleEntry=swCpuAclIpv6RuleEntry, swACLPktContMaskProfileID=swACLPktContMaskProfileID, swAclMeterProfileID=swAclMeterProfileID, swIBPACLEtherRulePermit=swIBPACLEtherRulePermit, swACLPktContMaskOwner=swACLPktContMaskOwner, swACLEtherRuleRowStatus=swACLEtherRuleRowStatus, swACLIpUdpOption=swACLIpUdpOption, swIBPACLIpRuleSrcMacAddress=swIBPACLIpRuleSrcMacAddress, swACLPktContRuleVarOffsetData1=swACLPktContRuleVarOffsetData1, swACLIpv6MaskUnusedRuleEntries=swACLIpv6MaskUnusedRuleEntries, swIBPACLIpProfileID=swIBPACLIpProfileID, swACLCounterAccessID=swACLCounterAccessID, swCpuAclIpv6MaskTable=swCpuAclIpv6MaskTable, swACLEthernetEntry=swACLEthernetEntry, swACLPktContMaskOffsetChunk4Mask=swACLPktContMaskOffsetChunk4Mask, swCpuAclPktContMaskTable=swCpuAclPktContMaskTable, swACLPktContMaskOffsetChunk2Mask=swACLPktContMaskOffsetChunk2Mask, swAclMeterTable=swAclMeterTable, swCpuAclEtherRuleDstMacAddress=swCpuAclEtherRuleDstMacAddress, swACLIpv6MaskOwner=swACLIpv6MaskOwner, swACLEthernetProfileName=swACLEthernetProfileName, swCpuAclPktContMaskOffset32to47=swCpuAclPktContMaskOffset32to47, swACLPktContRuleVarOffsetOffsetIndex3=swACLPktContRuleVarOffsetOffsetIndex3, swCpuAclIpSrcIpAddrMask=swCpuAclIpSrcIpAddrMask, swCpuAclIpv6MaskDstIpv6Mask=swCpuAclIpv6MaskDstIpv6Mask, swIBPACLEtherRuleTable=swIBPACLEtherRuleTable, swACLIpTCPFlagBit=swACLIpTCPFlagBit, swACLEthernetUsevlan=swACLEthernetUsevlan, swACLIpv6MaskRowStatus=swACLIpv6MaskRowStatus, swACLIpProfileID=swACLIpProfileID, swCpuAclIpUseDSCP=swCpuAclIpUseDSCP, swAclMgmtMIB=swAclMgmtMIB, swIBPACLEthernetProfileID=swIBPACLEthernetProfileID, swACLIpv6MaskFlowlabel=swACLIpv6MaskFlowlabel, swAclMeterSrtcmCir=swAclMeterSrtcmCir, swACLIpRuleDstIpaddress=swACLIpRuleDstIpaddress, swACLPktContRuleVarOffsetData2=swACLPktContRuleVarOffsetData2, swACLPktContRuleVarOffsetData3=swACLPktContRuleVarOffsetData3, swACLEtherRuleRepTosPrecedence=swACLEtherRuleRepTosPrecedence, swIBPACLIpSrcIpAddrMask=swIBPACLIpSrcIpAddrMask, swACLPktContMaskProfileName=swACLPktContMaskProfileName, swIBPACLEtherRulePort=swIBPACLEtherRulePort, swACLPktContRuleVarOffsetOffsetIndex2=swACLPktContRuleVarOffsetOffsetIndex2, swACLEtherRuleEntry=swACLEtherRuleEntry, swACLIpRulePriority=swACLIpRulePriority, swACLPktContRuleVarOffsetMask4=swACLPktContRuleVarOffsetMask4, swACLIpv6RuleEntry=swACLIpv6RuleEntry, swCpuAclIpProtoIDOption=swCpuAclIpProtoIDOption, swACLEthernetUseEthernetType=swACLEthernetUseEthernetType)
mibBuilder.exportSymbols("ACLMGMT-MIB", swCpuAclEtherRuleEtherType=swCpuAclEtherRuleEtherType, swACLIpv6MaskDstIpv6Mask=swACLIpv6MaskDstIpv6Mask, swACLPktContRuleVarOffsetData4=swACLPktContRuleVarOffsetData4, swACLEtherRuleEtherType=swACLEtherRuleEtherType, swACLEtherRulePriority=swACLEtherRulePriority, swACLPktContMaskOptionOwner=swACLPktContMaskOptionOwner, swACLIpRuleType=swACLIpRuleType, swACLPktContMaskOffsetChunk3Mask=swACLPktContMaskOffsetChunk3Mask, swCpuAclIpRuleRowStatus=swCpuAclIpRuleRowStatus, swCpuAclPktContRuleOffset64to79=swCpuAclPktContRuleOffset64to79, swACLEtherRuleEnableReplaceTosPrecedence=swACLEtherRuleEnableReplaceTosPrecedence, swACLPktContMaskOffsetChunk3OffsetValue=swACLPktContMaskOffsetChunk3OffsetValue, swACLEtherRuleReplacePriority=swACLEtherRuleReplacePriority, swCpuAclEtherRuleSrcMacAddress=swCpuAclEtherRuleSrcMacAddress, swCpuAclIpTCPorUDPDstPortMask=swCpuAclIpTCPorUDPDstPortMask, swIBPACLEtherRuleEntry=swIBPACLEtherRuleEntry, swCpuAclIpRuleUserMask=swCpuAclIpRuleUserMask, swACLIpv6MaskUdpOption=swACLIpv6MaskUdpOption, swCpuAclIpRuleDstPort=swCpuAclIpRuleDstPort, swCpuAclIpRuleSrcPort=swCpuAclIpRuleSrcPort, swAclMeterRowStatus=swAclMeterRowStatus, swACLIpRuleFlagBits=swACLIpRuleFlagBits, swACLIpv6MaskProfileName=swACLIpv6MaskProfileName, swACLIpRuleTable=swACLIpRuleTable, swACLEthernetUse8021p=swACLEthernetUse8021p, swCpuAclIpv6RuleTable=swCpuAclIpv6RuleTable, swACLIpRuleProtocol=swACLIpRuleProtocol, swACLIpv6MaskEntry=swACLIpv6MaskEntry, swACLCounterProfileID=swACLCounterProfileID, swIBPACLEthernetTable=swIBPACLEthernetTable, swCpuAclIpv6RuleSrcIpv6Addr=swCpuAclIpv6RuleSrcIpv6Addr, swACLIpTable=swACLIpTable, swCpuAclPktContMaskEntry=swCpuAclPktContMaskEntry, swACLIpv6IpAddrMaskState=swACLIpv6IpAddrMaskState, swACLIpRuleProfileID=swACLIpRuleProfileID, swACLCounterState=swACLCounterState, swACLIpSrcIpAddrMask=swACLIpSrcIpAddrMask, swAclMeterSrtcmEbs=swAclMeterSrtcmEbs, swCpuAclPktContRuleOffset48to63=swCpuAclPktContRuleOffset48to63, swCpuAclPktContRuleAccessID=swCpuAclPktContRuleAccessID, swACLPktContMaskOffsetChunk1Mask=swACLPktContMaskOffsetChunk1Mask, swCpuAclIpRuleSrcIpaddress=swCpuAclIpRuleSrcIpaddress, swACLIpOwner=swACLIpOwner, swCpuAclEthernetMacAddrMaskState=swCpuAclEthernetMacAddrMaskState, swCpuAclIpv6MaskClass=swCpuAclIpv6MaskClass, swACLIpv6MaskClass=swACLIpv6MaskClass, swACLIpRuleVID=swACLIpRuleVID, swAclMeterSrtcmExceedCounterState=swAclMeterSrtcmExceedCounterState, swIBPACLIpRulePermit=swIBPACLIpRulePermit, swCpuAclIpRuleProtoID=swCpuAclIpRuleProtoID, swCpuAclIpv6RuleDstIpv6Addr=swCpuAclIpv6RuleDstIpv6Addr, swCpuAclIpRowStatus=swCpuAclIpRowStatus, swACLIpv6RuleOwner=swACLIpv6RuleOwner, swACLIpRulePort=swACLIpRulePort, swCpuAclIpv6MaskSrcIpv6Mask=swCpuAclIpv6MaskSrcIpv6Mask, swCpuAclIpv6RuleAccessID=swCpuAclIpv6RuleAccessID, swCpuAclEthernetUseEthernetType=swCpuAclEthernetUseEthernetType, swCpuAclPktContRuleRowStatus=swCpuAclPktContRuleRowStatus, swACLCounterTotalCounter=swACLCounterTotalCounter, swAclMeteringNumOfEntryInUse=swAclMeteringNumOfEntryInUse, swCpuAclEtherRuleProfileID=swCpuAclEtherRuleProfileID, swACLPktContMaskEntry=swACLPktContMaskEntry, swCpuAclPktContMaskOffset0to15=swCpuAclPktContMaskOffset0to15, swACLPktContRuleVarOffsetData5=swACLPktContRuleVarOffsetData5, swCpuAclEtherRule8021P=swCpuAclEtherRule8021P, swACLPktContMaskOffsetChunk1OffsetValue=swACLPktContMaskOffsetChunk1OffsetValue, swAclMeterTrtcmExceedCounterState=swAclMeterTrtcmExceedCounterState, swACLPktContMaskOffset0to15=swACLPktContMaskOffset0to15, swIBPACLEthernetEntry=swIBPACLEthernetEntry, swAclMeterTrtcmConformState=swAclMeterTrtcmConformState, swIBPACLIpRuleProfileID=swIBPACLIpRuleProfileID, swCpuAclIpv6RuleProfileID=swCpuAclIpv6RuleProfileID, swIBPACLEthernetUseEthernetType=swIBPACLEthernetUseEthernetType, swAclMeterTrtcmExceedReplaceDscp=swAclMeterTrtcmExceedReplaceDscp, swCpuAclPktContRuleOffset32to47=swCpuAclPktContRuleOffset32to47, swACLMaskDelAllState=swACLMaskDelAllState, swACLEthernetSrcMacAddrMask=swACLEthernetSrcMacAddrMask, swCpuAclIpProtoIDMask=swCpuAclIpProtoIDMask, swACLIpRuleEnableReplaceTosPrecedence=swACLIpRuleEnableReplaceTosPrecedence, swACLEtherRuleTable=swACLEtherRuleTable, swACLPktContRuleVarOffsetEnablePriority=swACLPktContRuleVarOffsetEnablePriority, swACLIpv6MaskProfileID=swACLIpv6MaskProfileID, swACLEtherRuleSrcMacAddress=swACLEtherRuleSrcMacAddress, swCpuACLMaskDelAllState=swCpuACLMaskDelAllState, swCpuAclEthernetTable=swCpuAclEthernetTable, swCpuAclEthernetUsevlan=swCpuAclEthernetUsevlan, swACLPktContMaskOptionRowStatus=swACLPktContMaskOptionRowStatus, swAclMeterSrtcmExceedState=swAclMeterSrtcmExceedState, swCpuAclIpv6MaskRowStatus=swCpuAclIpv6MaskRowStatus, swACLEthernetProfileID=swACLEthernetProfileID, swCpuAclPktContMaskOffset48to63=swCpuAclPktContMaskOffset48to63, swACLEthernetUnusedRuleEntries=swACLEthernetUnusedRuleEntries, swACLIpUseProtoType=swACLIpUseProtoType, swACLPktContRuleVarOffsetReplacePriorityWith=swACLPktContRuleVarOffsetReplacePriorityWith, swACLPktContMaskOptionProfileID=swACLPktContMaskOptionProfileID, swACLIpDstIpAddrMask=swACLIpDstIpAddrMask, swAclMeterTrtcmPir=swAclMeterTrtcmPir, swCpuAclMaskMgmt=swCpuAclMaskMgmt, swACLIpRuleSrcIpaddress=swACLIpRuleSrcIpaddress, swACLIpRuleVlan=swACLIpRuleVlan, swCpuAclIpv6RuleRowStatus=swCpuAclIpv6RuleRowStatus, swACLPktContMaskOffsetChunk4OffsetValue=swACLPktContMaskOffsetChunk4OffsetValue, swIBPACLIpRuleEntry=swIBPACLIpRuleEntry, swACLPktContRuleVarOffsetAccessID=swACLPktContRuleVarOffsetAccessID, swACLPktContMaskOffset48to63=swACLPktContMaskOffset48to63, swACLIpv6RuleReplacePriority=swACLIpv6RuleReplacePriority, swCpuAclEtherRuleVlan=swCpuAclEtherRuleVlan, swAclMeterBurstSize=swAclMeterBurstSize, swACLPktContRuleVarOffsetOffsetIndex1=swACLPktContRuleVarOffsetOffsetIndex1, swACLIpTCPorUDPDstPortMask=swACLIpTCPorUDPDstPortMask, swCpuAclIpRuleFlagBits=swCpuAclIpRuleFlagBits, swACLIpRuleEntry=swACLIpRuleEntry, swACLEtherRuleRepDscp=swACLEtherRuleRepDscp, swACLPktContMaskOffsetChunk2State=swACLPktContMaskOffsetChunk2State, swCpuAclIpDstIpAddrMask=swCpuAclIpDstIpAddrMask, swACLIpIgmpOption=swACLIpIgmpOption, swACLPktContMaskOffsetChunk2OffsetValue=swACLPktContMaskOffsetChunk2OffsetValue, swAclMeterSrtcmColorMode=swAclMeterSrtcmColorMode, swAclMeterMode=swAclMeterMode, swAclMeterTrtcmConformCounterState=swAclMeterTrtcmConformCounterState, swCpuAclEtherRuleTable=swCpuAclEtherRuleTable, swACLPktContRuleVarOffsetPort=swACLPktContRuleVarOffsetPort)
