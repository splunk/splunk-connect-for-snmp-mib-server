#
# PySNMP MIB module BTI-7000-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BTI-7000-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:24:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
bti7000, btiModules = mibBuilder.importSymbols("BTI-MIB", "bti7000", "btiModules")
LldpPortIdSubtype, BERType, DesignatedRouterPriority, LldpPortId, ShelfType, FiberType, Unsigned64, SlotType, CpType, ProtSwOpCmd, OdunType, NotifObjectType, XcvrProtocolType, UpgradeCompleteStage, MirrorConfigType, OperStatQlfr, NotifCodeType, MediaRateType, SwitchIdxType, ShelfConfigType, AmdPortType, XcvrType, PMMontype, WDMGrid, TimeZone, AreaID, PMIntervalType, CondReportType, LoopbackType, SyncSwEvtType, VcnType, LldpChassisIdSubtype, InitializeCmd, CondSeverity, OaType, StsnType, AmdType, OcnType, StmnType, PowerFeedModeType, FixedX10, ProtSwEvtType, PassivePortType, InetAddressType, XCType, DuplexModeType, OperStatus, EnvNotifCodeType, LldpChassisId, CondServiceAffecting, PvxL1PortType, PvxPortType, PMValidity, InetAddress, AdminStatus, HoursAndMinutes, ProtectionStatusType, FixedX100 = mibBuilder.importSymbols("BTI-TC-MIB", "LldpPortIdSubtype", "BERType", "DesignatedRouterPriority", "LldpPortId", "ShelfType", "FiberType", "Unsigned64", "SlotType", "CpType", "ProtSwOpCmd", "OdunType", "NotifObjectType", "XcvrProtocolType", "UpgradeCompleteStage", "MirrorConfigType", "OperStatQlfr", "NotifCodeType", "MediaRateType", "SwitchIdxType", "ShelfConfigType", "AmdPortType", "XcvrType", "PMMontype", "WDMGrid", "TimeZone", "AreaID", "PMIntervalType", "CondReportType", "LoopbackType", "SyncSwEvtType", "VcnType", "LldpChassisIdSubtype", "InitializeCmd", "CondSeverity", "OaType", "StsnType", "AmdType", "OcnType", "StmnType", "PowerFeedModeType", "FixedX10", "ProtSwEvtType", "PassivePortType", "InetAddressType", "XCType", "DuplexModeType", "OperStatus", "EnvNotifCodeType", "LldpChassisId", "CondServiceAffecting", "PvxL1PortType", "PvxPortType", "PMValidity", "InetAddress", "AdminStatus", "HoursAndMinutes", "ProtectionStatusType", "FixedX100")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, Integer32, Bits, Unsigned32, MibIdentifier, TimeTicks, iso, ModuleIdentity, Gauge32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Integer32", "Bits", "Unsigned32", "MibIdentifier", "TimeTicks", "iso", "ModuleIdentity", "Gauge32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter32", "NotificationType")
TextualConvention, MacAddress, RowStatus, TruthValue, DisplayString, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "RowStatus", "TruthValue", "DisplayString", "DateAndTime")
bti7000Mib = ModuleIdentity((1, 3, 6, 1, 4, 1, 18070, 1, 3))
bti7000Mib.setRevisions(('2012-10-09 12:00', '2012-08-29 12:00', '2012-02-10 12:00', '2011-09-26 12:00', '2011-04-26 12:00', '2011-03-28 12:00', '2011-02-25 12:00', '2010-09-17 12:00', '2010-08-06 12:00', '2010-06-18 12:00', '2010-02-12 12:00', '2009-01-19 12:00', '2008-12-19 12:00', '2008-10-10 12:00', '2008-05-30 12:00', '2007-09-14 12:00', '2007-07-16 12:00', '2007-03-09 12:00', '2006-08-25 12:00', '2005-12-05 12:00', '2005-07-25 12:00', '2005-01-07 12:00', '2004-09-23 12:00', '2004-09-09 14:34', '2004-04-14 22:35', '2003-12-01 12:00',))
if mibBuilder.loadTexts: bti7000Mib.setLastUpdated('201210091200Z')
if mibBuilder.loadTexts: bti7000Mib.setOrganization('BTI Systems Inc.')
objects = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1))
networkElement = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1))
inventory = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2))
equipment = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3))
facilities = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4))
dataComms = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5))
performance = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6))
conditions = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7))
administration = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8))
connections = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9))
protection = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10))
operations = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11))
synchronization = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12))
topology = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13))
pvxObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14))
miscellaneous = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 15))
opticalLayer = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16))
pvxBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1))
pvxNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 4))
mstpNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 4, 1))
notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2))
eventNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1))
conditionNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2))
dbChangeNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 3))
notificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 4))
notificationControl = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5))
evtNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 1))
neEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 2))
shelfInvEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 3))
slotInvEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 4))
shelfEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 5))
cpEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 6))
oaEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 7))
dataCommsEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 8))
pluggableInvEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 9))
xcvrEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 10))
adminEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 11))
amdEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 12))
ocnEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 13))
stsnEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 14))
stmnEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 15))
vcnEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 16))
geEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 17))
fcEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 18))
ethPortEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 21))
pvxL2EvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 22))
mstpEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 23))
briEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 24))
cpSynchronizationEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 25))
pvxESrvcBWPrflEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 26))
pvxESrvcEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 27))
pvxERPSSrvcNNIEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 28))
pvxERPSSrvcEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 29))
pvxSlaMsmtEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 30))
ntpcEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 31))
pvxSUniEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 32))
olEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 33))
pvxLldpEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 34))
neCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 1))
shelfInvCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2))
slotInvCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3))
shelfCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 4))
cpCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5))
oaCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6))
dataCommsCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 7))
pluggableInvCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 8))
xcvrCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9))
adminCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 10))
amdCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 11))
ocnCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12))
stsnCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13))
stmnCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14))
vcnCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15))
geCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16))
fcCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17))
ethPortCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20))
pvxL2PortCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 21))
mstpCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 22))
lagCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 23))
odunCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 24))
briCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25))
ntpcCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 26))
envCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27))
olCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28))
erpsCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 29))
swMemberCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 30))
condNotifCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 1))
eventNotifCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 2))
neOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1))
shelfInvOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 2))
slotInvOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 3))
shelfOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 4))
cpOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 5))
oaOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 6))
dataCommsOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 7))
pluggableInvOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 8))
xcvrOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9))
adminOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 10))
amdOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 11))
ocnOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12))
stsnOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 13))
stmnOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14))
vcnOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 15))
geOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 16))
fcOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 17))
briOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 18))
neSWVersion = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: neSWVersion.setStatus('current')
neNum = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neNum.setStatus('current')
neSiteNum = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neSiteNum.setStatus('current')
neDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 4), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neDateAndTime.setStatus('current')
neTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 5), TimeZone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neTimeZone.setStatus('current')
neAutoDST = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neAutoDST.setStatus('current')
neGateway = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neGateway.setStatus('current')
neSecGateway = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neSecGateway.setStatus('current')
neActiveGateway = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neActiveGateway.setStatus('current')
neAutoProv = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("autoEnabled", 3), ("autoProvOff", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neAutoProv.setStatus('current')
neAutoDeProv = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 11), HoursAndMinutes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neAutoDeProv.setStatus('obsolete')
neAutoEnabledTimer = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 12), HoursAndMinutes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neAutoEnabledTimer.setStatus('current')
ntpClient = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 13))
ntpClientPollingRate = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 13, 1), HoursAndMinutes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpClientPollingRate.setStatus('current')
ntpClientAuthKey = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 13, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpClientAuthKey.setStatus('obsolete')
ntpClientSyncState = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 13, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpClientSyncState.setStatus('current')
ntpClientStratum = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 13, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpClientStratum.setStatus('current')
ntpClientRefIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 13, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpClientRefIPAddr.setStatus('current')
ntpClientAssocTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 13, 6), )
if mibBuilder.loadTexts: ntpClientAssocTable.setStatus('current')
ntpClientAssocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 13, 6, 1), ).setIndexNames((0, "BTI-7000-MIB", "ntpClientAssocIdx"))
if mibBuilder.loadTexts: ntpClientAssocEntry.setStatus('current')
ntpClientAssocIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 13, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: ntpClientAssocIdx.setStatus('current')
ntpClientAssocRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 13, 6, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntpClientAssocRowStatus.setStatus('current')
ntpOldTimeAndDate = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 13, 7), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntpOldTimeAndDate.setStatus('current')
ntpNewTimeAndDate = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 13, 8), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntpNewTimeAndDate.setStatus('current')
ntpRefIP = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 13, 9), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntpRefIP.setStatus('current')
ntpRefStratum = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 13, 10), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntpRefStratum.setStatus('current')
neFPDetect = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neFPDetect.setStatus('current')
neHTAutoShutdown = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neHTAutoShutdown.setStatus('current')
shelfInvTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1), )
if mibBuilder.loadTexts: shelfInvTable.setStatus('current')
shelfInvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "shelfInvIdx"))
if mibBuilder.loadTexts: shelfInvEntry.setStatus('current')
shelfInvIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: shelfInvIdx.setStatus('current')
shelfInvExpectedNEName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: shelfInvExpectedNEName.setStatus('current')
shelfInvExpectedIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: shelfInvExpectedIPAddress.setStatus('current')
shelfInvExpectedShelfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: shelfInvExpectedShelfNum.setStatus('current')
shelfInvExpectedMSISerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: shelfInvExpectedMSISerialNum.setStatus('current')
shelfInvDiscoveredNEName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: shelfInvDiscoveredNEName.setStatus('current')
shelfInvDiscoveredIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: shelfInvDiscoveredIPAddress.setStatus('current')
shelfInvDiscoveredShelfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: shelfInvDiscoveredShelfNum.setStatus('current')
shelfInvDiscoveredMSISerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: shelfInvDiscoveredMSISerialNum.setStatus('current')
shelfInvType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 10), ShelfType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInvType.setStatus('current')
shelfInvShortName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInvShortName.setStatus('current')
shelfInvName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInvName.setStatus('current')
shelfInvChassisPEC = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInvChassisPEC.setStatus('current')
shelfInvChassisCLEI = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInvChassisCLEI.setStatus('current')
shelfInvAssemblyPEC = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInvAssemblyPEC.setStatus('obsolete')
shelfInvRev = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInvRev.setStatus('current')
shelfInvConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 17), ShelfConfigType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInvConfig.setStatus('deprecated')
shelfInvUSI = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInvUSI.setStatus('current')
shelfInvSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInvSerialNum.setStatus('current')
shelfInvMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInvMfgDate.setStatus('current')
shelfInvMfgLoc = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInvMfgLoc.setStatus('current')
shelfInvTestDate = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInvTestDate.setStatus('current')
shelfInvTestLoc = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfInvTestLoc.setStatus('current')
slotInvTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2), )
if mibBuilder.loadTexts: slotInvTable.setStatus('current')
slotInvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1), ).setIndexNames((0, "BTI-7000-MIB", "slotInvShelfIdx"), (0, "BTI-7000-MIB", "slotInvSlotTypeIdx"), (0, "BTI-7000-MIB", "slotInvSlotIdx"))
if mibBuilder.loadTexts: slotInvEntry.setStatus('current')
slotInvShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: slotInvShelfIdx.setStatus('current')
slotInvSlotTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 2), SlotType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: slotInvSlotTypeIdx.setStatus('current')
slotInvSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: slotInvSlotIdx.setStatus('current')
slotInvSWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: slotInvSWVersion.setStatus('current')
slotInvPackShortName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotInvPackShortName.setStatus('current')
slotInvPackName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotInvPackName.setStatus('current')
slotInvPackPEC = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotInvPackPEC.setStatus('current')
slotInvPackCLEI = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotInvPackCLEI.setStatus('current')
slotInvPackSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotInvPackSerialNum.setStatus('current')
slotInvPackRev = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotInvPackRev.setStatus('current')
slotInvPackMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotInvPackMfgDate.setStatus('current')
slotInvPackMfgLoc = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotInvPackMfgLoc.setStatus('current')
slotInvPackTestDate = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotInvPackTestDate.setStatus('current')
slotInvPackTestLoc = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotInvPackTestLoc.setStatus('current')
slotInvUpgradeStage = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 15), UpgradeCompleteStage()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: slotInvUpgradeStage.setStatus('current')
slotInvUpgradeResult = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("success", 1), ("failure", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: slotInvUpgradeResult.setStatus('current')
slotInvPackUSI = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotInvPackUSI.setStatus('current')
slotInvTempHighTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: slotInvTempHighTh.setStatus('current')
slotInvTempShutdownTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: slotInvTempShutdownTh.setStatus('current')
pluggableInvTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3), )
if mibBuilder.loadTexts: pluggableInvTable.setStatus('current')
pluggableInvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1), ).setIndexNames((0, "BTI-7000-MIB", "pluggableInvShelfIdx"), (0, "BTI-7000-MIB", "pluggableInvSlotTypeIdx"), (0, "BTI-7000-MIB", "pluggableInvSlotIdx"), (0, "BTI-7000-MIB", "pluggableInvPortIdx"))
if mibBuilder.loadTexts: pluggableInvEntry.setStatus('current')
pluggableInvShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pluggableInvShelfIdx.setStatus('current')
pluggableInvSlotTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 2), SlotType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pluggableInvSlotTypeIdx.setStatus('current')
pluggableInvSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pluggableInvSlotIdx.setStatus('current')
pluggableInvPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pluggableInvPortIdx.setStatus('current')
pluggableInvType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("sfp", 2), ("xfp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvType.setStatus('current')
pluggableInvPEC = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvPEC.setStatus('current')
pluggableInvCLEI = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvCLEI.setStatus('current')
pluggableInvVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvVendorName.setStatus('current')
pluggableInvVendorOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvVendorOUI.setStatus('current')
pluggableInvVendorPartNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvVendorPartNum.setStatus('current')
pluggableInvVendorRev = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvVendorRev.setStatus('current')
pluggableInvVendorSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvVendorSerialNum.setStatus('current')
pluggableInvMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvMfgDate.setStatus('current')
pluggableInvConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("unknown", 1), ("sc", 2), ("fcs1cc", 3), ("fcs2cc", 4), ("bnctnc", 5), ("fcch", 6), ("fj", 7), ("lc", 8), ("mtrj", 9), ("mu", 10), ("sg", 11), ("op", 12), ("hssdc2", 13), ("cp", 14), ("vs", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvConnectorType.setStatus('current')
pluggableInvMinBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('MBits/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvMinBitRate.setStatus('current')
pluggableInvMaxBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('MBits/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvMaxBitRate.setStatus('current')
pluggableInvNomBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('MBits/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvNomBitRate.setStatus('current')
pluggableInvEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvEncoding.setStatus('current')
pluggableInvWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 19), FixedX100()).setUnits('nanometers/100').setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvWavelength.setStatus('current')
pluggableInvReach = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('kilometers').setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvReach.setStatus('current')
pluggableInvTxFaultImpl = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvTxFaultImpl.setStatus('current')
pluggableInvLOSImpl = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvLOSImpl.setStatus('current')
pluggableInvDDiagImpl = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvDDiagImpl.setStatus('current')
pluggableInvTxDisableImpl = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvTxDisableImpl.setStatus('current')
pluggableInvMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("electrical", 2), ("optical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvMedia.setStatus('current')
pluggableInvUSI = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvUSI.setStatus('current')
pluggableInvWavelengthMin = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 27), FixedX100()).setUnits('nanometers/100').setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvWavelengthMin.setStatus('current')
pluggableInvWavelengthMax = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 28), FixedX100()).setUnits('nanometers/100').setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvWavelengthMax.setStatus('current')
pluggableInvWavelengthSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 3, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(50, 50), ValueRangeConstraint(100, 100), ))).setUnits('GHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: pluggableInvWavelengthSpacing.setStatus('current')
pluggableInvRestartOpTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 8, 1), )
if mibBuilder.loadTexts: pluggableInvRestartOpTable.setStatus('current')
pluggableInvRestartOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 8, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "pluggableInvRestartOpTypeIdx"), (0, "BTI-7000-MIB", "pluggableInvRestartOpShelfIdx"), (0, "BTI-7000-MIB", "pluggableInvRestartOpSlotIdx"), (0, "BTI-7000-MIB", "pluggableInvRestartOpPortIdx"))
if mibBuilder.loadTexts: pluggableInvRestartOpEntry.setStatus('current')
pluggableInvRestartOpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("unknown", 1), ("xfp", 3))))
if mibBuilder.loadTexts: pluggableInvRestartOpTypeIdx.setStatus('current')
pluggableInvRestartOpShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pluggableInvRestartOpShelfIdx.setStatus('current')
pluggableInvRestartOpSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: pluggableInvRestartOpSlotIdx.setStatus('current')
pluggableInvRestartOpPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28)))
if mibBuilder.loadTexts: pluggableInvRestartOpPortIdx.setStatus('current')
pluggableInvRestartOpCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOp", 1), ("coldRestart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pluggableInvRestartOpCmd.setStatus('current')
slotInvDataTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 4), )
if mibBuilder.loadTexts: slotInvDataTable.setStatus('current')
slotInvDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 4, 1), ).setIndexNames((0, "BTI-7000-MIB", "slotInvDataShelfIdx"), (0, "BTI-7000-MIB", "slotInvDataSlotTypeIdx"), (0, "BTI-7000-MIB", "slotInvDataSlotIdx"), (0, "BTI-7000-MIB", "slotInvDataRecordIdx"), (0, "BTI-7000-MIB", "slotInvDataNameIdx"))
if mibBuilder.loadTexts: slotInvDataEntry.setStatus('current')
slotInvDataShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: slotInvDataShelfIdx.setStatus('current')
slotInvDataSlotTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 4, 1, 2), SlotType())
if mibBuilder.loadTexts: slotInvDataSlotTypeIdx.setStatus('current')
slotInvDataSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)))
if mibBuilder.loadTexts: slotInvDataSlotIdx.setStatus('current')
slotInvDataRecordIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 4, 1, 4), Unsigned32())
if mibBuilder.loadTexts: slotInvDataRecordIdx.setStatus('current')
slotInvDataNameIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("wavelength", 1), ("loss", 2), ("dispersion", 3))))
if mibBuilder.loadTexts: slotInvDataNameIdx.setStatus('current')
slotInvDataValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 2, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotInvDataValue.setStatus('current')
shelfTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1), )
if mibBuilder.loadTexts: shelfTable.setStatus('current')
shelfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "shelfIdx"))
if mibBuilder.loadTexts: shelfEntry.setStatus('current')
shelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: shelfIdx.setStatus('current')
shelfProvConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 2), ShelfConfigType().clone('sixSlot')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfProvConfig.setStatus('deprecated')
shelfDiscConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 3), ShelfConfigType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: shelfDiscConfig.setStatus('deprecated')
shelfType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 4), ShelfType().clone('expansion')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfType.setStatus('current')
shelfPEC = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfPEC.setStatus('current')
shelfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 6), AdminStatus().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfAdminStatus.setStatus('current')
shelfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 7), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfOperStatus.setStatus('current')
shelfOperStatQlfr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 8), OperStatQlfr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfOperStatQlfr.setStatus('current')
shelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfId.setStatus('current')
shelfCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 10), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfCustom1.setStatus('current')
shelfCustom2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 11), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfCustom2.setStatus('current')
shelfCustom3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 12), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfCustom3.setStatus('current')
shelfPowerFeedA = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 13), PowerFeedModeType().clone('dc')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfPowerFeedA.setStatus('current')
shelfPowerFeedB = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 14), PowerFeedModeType().clone('dc')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfPowerFeedB.setStatus('current')
shelfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 1, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: shelfRowStatus.setStatus('current')
cpTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2), )
if mibBuilder.loadTexts: cpTable.setStatus('current')
cpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1), ).setIndexNames((0, "BTI-7000-MIB", "cpTypeIdx"), (0, "BTI-7000-MIB", "cpShelfIdx"), (0, "BTI-7000-MIB", "cpSlotIdx"))
if mibBuilder.loadTexts: cpEntry.setStatus('current')
cpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1, 1), CpType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cpTypeIdx.setStatus('current')
cpShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cpShelfIdx.setStatus('current')
cpSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cpSlotIdx.setStatus('current')
cpPEC = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpPEC.setStatus('current')
cpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1, 5), AdminStatus().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpAdminStatus.setStatus('current')
cpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1, 6), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpOperStatus.setStatus('current')
cpOperStatQlfr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1, 7), OperStatQlfr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpOperStatQlfr.setStatus('current')
cpId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpId.setStatus('current')
cpCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1, 9), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpCustom1.setStatus('current')
cpCustom2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1, 10), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpCustom2.setStatus('current')
cpCustom3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1, 11), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpCustom3.setStatus('current')
cpUpgradeStage = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1, 12), UpgradeCompleteStage()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cpUpgradeStage.setStatus('current')
cpUpgradeResult = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("success", 1), ("failure", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cpUpgradeResult.setStatus('current')
cpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 3, 2, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpRowStatus.setStatus('current')
oaTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1), )
if mibBuilder.loadTexts: oaTable.setStatus('current')
oaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "oaTypeIdx"), (0, "BTI-7000-MIB", "oaShelfIdx"), (0, "BTI-7000-MIB", "oaSlotIdx"), (0, "BTI-7000-MIB", "oaIdx"))
if mibBuilder.loadTexts: oaEntry.setStatus('current')
oaTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 1), OaType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: oaTypeIdx.setStatus('current')
oaShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: oaShelfIdx.setStatus('current')
oaSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: oaSlotIdx.setStatus('current')
oaIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: oaIdx.setStatus('current')
oaCaseTempMaxTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767)).clone(60)).setUnits('degrees Celsius').setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaCaseTempMaxTh.setStatus('current')
oaCaseTempMaxShutdownTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCaseTempMaxShutdownTh.setStatus('current')
oaLaserTempMinShutdownTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaserTempMinShutdownTh.setStatus('current')
oaLaserTempMaxShutdownTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaserTempMaxShutdownTh.setStatus('current')
oaOpticalPwrReceivedMinTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 9), FixedX10()).setUnits('dBm/10').setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaOpticalPwrReceivedMinTh.setStatus('current')
oaOpticalPwrReceivedMaxTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 10), FixedX10()).setUnits('dBm/10').setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaOpticalPwrReceivedMaxTh.setStatus('current')
oaSSIOpticalPwrReceivedMaxTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 11), FixedX10().clone(55)).setUnits('dBm/10').setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaSSIOpticalPwrReceivedMaxTh.setStatus('current')
oaOpticalPwrTransmittedMinTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 12), FixedX10()).setUnits('dBm/10').setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaOpticalPwrTransmittedMinTh.setStatus('current')
oaOpticalPwrTransmittedMaxTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 13), FixedX10()).setUnits('dBm/10').setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaOpticalPwrTransmittedMaxTh.setStatus('current')
oaBackReflectionSafetyTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 14), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaBackReflectionSafetyTh.setStatus('current')
oaMSInsertionLossMaxTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 15), FixedX10().clone(150)).setUnits('dB/10').setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaMSInsertionLossMaxTh.setStatus('current')
oaCaseTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCaseTemp.setStatus('current')
oaLaser1Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser1Temp.setStatus('current')
oaLaser2Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser2Temp.setStatus('current')
oaOpticalPwrReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 19), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaOpticalPwrReceived.setStatus('current')
oaSSIOpticalPwrReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 20), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaSSIOpticalPwrReceived.setStatus('current')
oaOpticalPwrTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 21), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaOpticalPwrTransmitted.setStatus('current')
oaMSInsertionLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 22), FixedX10()).setUnits('dB/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaMSInsertionLoss.setStatus('current')
oaEffectiveGain = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 33), FixedX10()).setUnits('dB/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaEffectiveGain.setStatus('current')
oaFSOOpticalPwrTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 34), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaFSOOpticalPwrTransmitted.setStatus('current')
oaLaser1Current = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 35), FixedX10()).setUnits('mAmp/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser1Current.setStatus('current')
oaLaser2Current = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 36), FixedX10()).setUnits('mAmp/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser2Current.setStatus('current')
oaLaser1Power = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 37), FixedX10()).setUnits('mWatts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser1Power.setStatus('current')
oaLaser2Power = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 38), FixedX10()).setUnits('mWatts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaser2Power.setStatus('current')
oaOpticalBackReflection = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 39), FixedX10()).setUnits('dB/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaOpticalBackReflection.setStatus('current')
oaVariableOpticalAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 40), FixedX10()).setUnits('dB/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaVariableOpticalAttenuation.setStatus('current')
oaAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 41), AdminStatus().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaAdminStatus.setStatus('current')
oaOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 42), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaOperStatus.setStatus('current')
oaOperStatQlfr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 43), OperStatQlfr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaOperStatQlfr.setStatus('current')
oaAutoEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 44), HoursAndMinutes().clone('008-00')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaAutoEnableTimer.setStatus('current')
oaActAutoEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 45), HoursAndMinutes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaActAutoEnableTimer.setStatus('current')
oaModeSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("constantGain", 2), ("constantPower", 3))).clone('constantGain')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaModeSetting.setStatus('current')
oaGainSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 47), FixedX10()).setUnits('dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaGainSetting.setStatus('current')
oaPwrSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 48), FixedX10()).setUnits('dBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaPwrSetting.setStatus('current')
oaTiltCompSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 49), FixedX10()).setUnits('dB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaTiltCompSetting.setStatus('current')
oaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("none", 1), ("constantGain", 2), ("constantPower", 3), ("eyeSafe", 4), ("shutdown", 5), ("constantGainOff", 6), ("constantPowerOff", 7), ("constantLaserCurrent", 8), ("constantLaserCurrentOff", 9), ("constantLaserPower", 10), ("constantLaserPowerOff", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaStatus.setStatus('current')
oaLaserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaLaserStatus.setStatus('current')
oaId1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 52), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaId1.setStatus('current')
oaId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 53), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaId2.setStatus('current')
oaFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 54), FiberType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaFiberType.setStatus('current')
oaGrid = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 55), WDMGrid().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaGrid.setStatus('current')
oaNumChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaNumChannels.setStatus('current')
oaCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 57), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaCustom1.setStatus('current')
oaCustom2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 58), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaCustom2.setStatus('current')
oaCustom3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 59), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaCustom3.setStatus('current')
oaWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 60), FixedX100()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaWavelength.setStatus('current')
oaRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 61), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaRemoteId.setStatus('current')
oaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 1, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oaRowStatus.setStatus('current')
xcvrTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2), )
if mibBuilder.loadTexts: xcvrTable.setStatus('current')
xcvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1), ).setIndexNames((0, "BTI-7000-MIB", "xcvrTypeIdx"), (0, "BTI-7000-MIB", "xcvrShelfIdx"), (0, "BTI-7000-MIB", "xcvrSlotIdx"), (0, "BTI-7000-MIB", "xcvrIdx"))
if mibBuilder.loadTexts: xcvrEntry.setStatus('current')
xcvrTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 1), XcvrType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: xcvrTypeIdx.setStatus('current')
xcvrShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: xcvrShelfIdx.setStatus('current')
xcvrSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: xcvrSlotIdx.setStatus('current')
xcvrIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: xcvrIdx.setStatus('current')
xcvrOpticalPwrReceivedMinTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 5), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrOpticalPwrReceivedMinTh.setStatus('current')
xcvrOpticalPwrReceivedMaxTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 6), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrOpticalPwrReceivedMaxTh.setStatus('current')
xcvrOpticalPwrTransmittedMinTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 7), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrOpticalPwrTransmittedMinTh.setStatus('current')
xcvrOpticalPwrTransmittedMaxTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 8), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrOpticalPwrTransmittedMaxTh.setStatus('current')
xcvrOpticalPwrReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 9), FixedX10()).setUnits('dBm/10').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: xcvrOpticalPwrReceived.setStatus('current')
xcvrOpticalPwrTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 10), FixedX10()).setUnits('dBm/10').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: xcvrOpticalPwrTransmitted.setStatus('current')
xcvrProtSwEvtType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 11), ProtSwEvtType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: xcvrProtSwEvtType.setStatus('current')
xcvrPEC = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrPEC.setStatus('current')
xcvrAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 13), AdminStatus().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrAdminStatus.setStatus('current')
xcvrOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 14), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrOperStatus.setStatus('current')
xcvrOperStatQlfr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 15), OperStatQlfr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrOperStatQlfr.setStatus('current')
xcvrAutoEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 16), HoursAndMinutes().clone('008-00')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrAutoEnableTimer.setStatus('current')
xcvrActAutoEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 17), HoursAndMinutes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrActAutoEnableTimer.setStatus('current')
xcvrProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 18), XcvrProtocolType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrProtocol.setStatus('current')
xcvrWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 19), FixedX100()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrWavelength.setStatus('current')
xcvrVendorPN1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrVendorPN1.setStatus('current')
xcvrVendorPN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrVendorPN2.setStatus('current')
xcvrVendorPN3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrVendorPN3.setStatus('current')
xcvrPhyPMMon = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrPhyPMMon.setStatus('current')
xcvrFPSD = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrFPSD.setStatus('current')
xcvrLaserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("idle", 3), ("aisl", 4), ("msais", 5), ("odu2ais", 6), ("prbs", 7), ("remoteFault", 8), ("odu2lck", 9), ("odu2oci", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrLaserStatus.setStatus('current')
xcvrId1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrId1.setStatus('current')
xcvrId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrId2.setStatus('current')
xcvrFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 28), FiberType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrFiberType.setStatus('current')
xcvrGrid = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 29), WDMGrid().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrGrid.setStatus('current')
xcvrCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 30), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrCustom1.setStatus('current')
xcvrCustom2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 31), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrCustom2.setStatus('current')
xcvrCustom3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 32), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrCustom3.setStatus('current')
xcvrTraceLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrTraceLabel.setStatus('current')
xcvrExpectedTraceLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrExpectedTraceLabel.setStatus('current')
xcvrReceivedTraceLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrReceivedTraceLabel.setStatus('current')
xcvrSDBERTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 36), BERType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrSDBERTh.setStatus('current')
xcvrLoopbackType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 37), LoopbackType().clone('noLoopback')).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrLoopbackType.setStatus('current')
xcvrRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 38), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrRemoteId.setStatus('current')
xcvrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 2, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrRowStatus.setStatus('current')
amdTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3), )
if mibBuilder.loadTexts: amdTable.setStatus('obsolete')
amdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1), ).setIndexNames((0, "BTI-7000-MIB", "amdTypeIdx"), (0, "BTI-7000-MIB", "amdShelfIdx"), (0, "BTI-7000-MIB", "amdSlotIdx"), (0, "BTI-7000-MIB", "amdLineIdx"), (0, "BTI-7000-MIB", "amdPortIdx"))
if mibBuilder.loadTexts: amdEntry.setStatus('obsolete')
amdTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 1), AmdType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: amdTypeIdx.setStatus('obsolete')
amdShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: amdShelfIdx.setStatus('obsolete')
amdSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: amdSlotIdx.setStatus('obsolete')
amdLineIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: amdLineIdx.setStatus('obsolete')
amdPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 5), AmdPortType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: amdPortIdx.setStatus('obsolete')
amdOpticalPwrReceivedMinTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 6), FixedX10()).setUnits('dBm/10').setMaxAccess("readwrite")
if mibBuilder.loadTexts: amdOpticalPwrReceivedMinTh.setStatus('obsolete')
amdOpticalPwrReceivedMaxTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 7), FixedX10()).setUnits('dBm/10').setMaxAccess("readwrite")
if mibBuilder.loadTexts: amdOpticalPwrReceivedMaxTh.setStatus('obsolete')
amdOpticalPwrTransmittedTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 8), FixedX10()).setUnits('dBm/10').setMaxAccess("readwrite")
if mibBuilder.loadTexts: amdOpticalPwrTransmittedTarget.setStatus('obsolete')
amdOpticalAttenuationTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 9), FixedX10()).setUnits('dB/10').setMaxAccess("readwrite")
if mibBuilder.loadTexts: amdOpticalAttenuationTarget.setStatus('obsolete')
amdOpticalPwrReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 10), FixedX10()).setUnits('dBm/10').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: amdOpticalPwrReceived.setStatus('obsolete')
amdOpticalPwrTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 11), FixedX10()).setUnits('dBm/10').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: amdOpticalPwrTransmitted.setStatus('obsolete')
amdOpticalAttentuation = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 12), FixedX10()).setUnits('dB/10').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: amdOpticalAttentuation.setStatus('obsolete')
amdAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 13), AdminStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amdAdminStatus.setStatus('obsolete')
amdOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 14), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amdOperStatus.setStatus('obsolete')
amdOperStatQlfr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 15), OperStatQlfr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amdOperStatQlfr.setStatus('obsolete')
amdAutoEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 16), HoursAndMinutes().clone('008-00')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amdAutoEnableTimer.setStatus('obsolete')
amdActAutoEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 17), HoursAndMinutes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amdActAutoEnableTimer.setStatus('obsolete')
amdWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 18), FixedX100()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amdWavelength.setStatus('obsolete')
amdId1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amdId1.setStatus('obsolete')
amdId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amdId2.setStatus('obsolete')
amdFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 21), FiberType().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amdFiberType.setStatus('obsolete')
amdGrid = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 22), WDMGrid().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amdGrid.setStatus('obsolete')
amdCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 23), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amdCustom1.setStatus('obsolete')
amdCustom2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amdCustom2.setStatus('obsolete')
amdCustom3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amdCustom3.setStatus('obsolete')
amdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 3, 1, 100), RowStatus()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: amdRowStatus.setStatus('obsolete')
passivePortTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4), )
if mibBuilder.loadTexts: passivePortTable.setStatus('current')
passivePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1), ).setIndexNames((0, "BTI-7000-MIB", "passivePortCpTypeIdx"), (0, "BTI-7000-MIB", "passivePortShelfIdx"), (0, "BTI-7000-MIB", "passivePortSlotIdx"), (0, "BTI-7000-MIB", "passivePortLineIdx"), (0, "BTI-7000-MIB", "passivePortTypeIdx"))
if mibBuilder.loadTexts: passivePortEntry.setStatus('current')
passivePortCpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 1), CpType())
if mibBuilder.loadTexts: passivePortCpTypeIdx.setStatus('current')
passivePortShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: passivePortShelfIdx.setStatus('current')
passivePortSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: passivePortSlotIdx.setStatus('current')
passivePortLineIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: passivePortLineIdx.setStatus('current')
passivePortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 5), PassivePortType())
if mibBuilder.loadTexts: passivePortTypeIdx.setStatus('current')
passivePortId1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: passivePortId1.setStatus('current')
passivePortId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: passivePortId2.setStatus('current')
passivePortFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 8), FiberType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: passivePortFiberType.setStatus('current')
passivePortGrid = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 9), WDMGrid()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: passivePortGrid.setStatus('current')
passivePortNumChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: passivePortNumChannels.setStatus('current')
passivePortWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 11), FixedX100()).setMaxAccess("readonly")
if mibBuilder.loadTexts: passivePortWavelength.setStatus('current')
passivePortCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: passivePortCustom1.setStatus('current')
passivePortCustom2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: passivePortCustom2.setStatus('current')
passivePortCustom3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: passivePortCustom3.setStatus('current')
passivePortRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 15), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: passivePortRemoteId.setStatus('current')
passivePortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 4, 1, 100), RowStatus()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: passivePortRowStatus.setStatus('current')
ocnTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5), )
if mibBuilder.loadTexts: ocnTable.setStatus('current')
ocnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1), ).setIndexNames((0, "BTI-7000-MIB", "ocnTypeIdx"), (0, "BTI-7000-MIB", "ocnShelfIdx"), (0, "BTI-7000-MIB", "ocnSlotIdx"), (0, "BTI-7000-MIB", "ocnPortIdx"))
if mibBuilder.loadTexts: ocnEntry.setStatus('current')
ocnTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 1), OcnType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ocnTypeIdx.setStatus('current')
ocnShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ocnShelfIdx.setStatus('current')
ocnSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ocnSlotIdx.setStatus('current')
ocnPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ocnPortIdx.setStatus('current')
ocnOpticalPwrReceivedMinTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 5), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnOpticalPwrReceivedMinTh.setStatus('current')
ocnOpticalPwrReceivedMaxTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 6), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnOpticalPwrReceivedMaxTh.setStatus('current')
ocnOpticalPwrTransmittedMinTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 7), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnOpticalPwrTransmittedMinTh.setStatus('current')
ocnOpticalPwrTransmittedMaxTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 8), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnOpticalPwrTransmittedMaxTh.setStatus('current')
ocnOpticalPwrReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 9), FixedX10()).setUnits('dBm/10').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ocnOpticalPwrReceived.setStatus('current')
ocnOpticalPwrTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 10), FixedX10()).setUnits('dBm/10').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ocnOpticalPwrTransmitted.setStatus('current')
ocnBER = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 11), BERType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ocnBER.setStatus('current')
ocnBERTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 12), BERType().clone('tenExpMinus5')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ocnBERTh.setStatus('current')
ocnPEC = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ocnPEC.setStatus('current')
ocnAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 14), AdminStatus().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ocnAdminStatus.setStatus('current')
ocnOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 15), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnOperStatus.setStatus('current')
ocnOperStatQlfr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 16), OperStatQlfr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnOperStatQlfr.setStatus('current')
ocnAutoEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 17), HoursAndMinutes().clone('008-00')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ocnAutoEnableTimer.setStatus('current')
ocnActAutoEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 18), HoursAndMinutes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnActAutoEnableTimer.setStatus('current')
ocnWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 19), FixedX100()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ocnWavelength.setStatus('current')
ocnVendorPN1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ocnVendorPN1.setStatus('current')
ocnVendorPN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ocnVendorPN2.setStatus('current')
ocnVendorPN3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ocnVendorPN3.setStatus('current')
ocnPhyPMMon = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ocnPhyPMMon.setStatus('current')
ocnLaserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnLaserStatus.setStatus('current')
ocnId1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ocnId1.setStatus('current')
ocnFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 26), FiberType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ocnFiberType.setStatus('current')
ocnCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 27), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ocnCustom1.setStatus('current')
ocnTOHTransparency = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ocnTOHTransparency.setStatus('current')
ocnLineMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unmapped", 1), ("odu1ToOtu2", 2), ("otu2", 3), ("subOdu1ToOtu1", 4), ("otu1", 5))).clone('otu2')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ocnLineMapping.setStatus('current')
ocnProtSwEvtType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 30), ProtSwEvtType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ocnProtSwEvtType.setStatus('current')
ocnDCCTransparency = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ocnDCCTransparency.setStatus('current')
ocnTransparencyChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ocnTransparencyChannel.setStatus('current')
ocnRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 33), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ocnRemoteId.setStatus('current')
ocnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 5, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ocnRowStatus.setStatus('current')
stsnTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 6), )
if mibBuilder.loadTexts: stsnTable.setStatus('current')
stsnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 6, 1), ).setIndexNames((0, "BTI-7000-MIB", "stsnTypeIdx"), (0, "BTI-7000-MIB", "stsnShelfIdx"), (0, "BTI-7000-MIB", "stsnSlotIdx"), (0, "BTI-7000-MIB", "stsnPortIdx"), (0, "BTI-7000-MIB", "stsnIdx"))
if mibBuilder.loadTexts: stsnEntry.setStatus('current')
stsnTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 6, 1, 1), StsnType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: stsnTypeIdx.setStatus('current')
stsnShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: stsnShelfIdx.setStatus('current')
stsnSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: stsnSlotIdx.setStatus('current')
stsnPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: stsnPortIdx.setStatus('current')
stsnIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 192))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: stsnIdx.setStatus('current')
stsnProtSwEvtType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 6, 1, 6), ProtSwEvtType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: stsnProtSwEvtType.setStatus('current')
stsnBER = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 6, 1, 7), BERType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: stsnBER.setStatus('current')
stsnBERTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 6, 1, 8), BERType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: stsnBERTh.setStatus('current')
stsnProtSwStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 6, 1, 9), OperStatQlfr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsnProtSwStatus.setStatus('current')
stmnTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7), )
if mibBuilder.loadTexts: stmnTable.setStatus('current')
stmnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1), ).setIndexNames((0, "BTI-7000-MIB", "stmnTypeIdx"), (0, "BTI-7000-MIB", "stmnShelfIdx"), (0, "BTI-7000-MIB", "stmnSlotIdx"), (0, "BTI-7000-MIB", "stmnPortIdx"))
if mibBuilder.loadTexts: stmnEntry.setStatus('current')
stmnTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 1), StmnType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: stmnTypeIdx.setStatus('current')
stmnShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: stmnShelfIdx.setStatus('current')
stmnSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: stmnSlotIdx.setStatus('current')
stmnPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: stmnPortIdx.setStatus('current')
stmnOpticalPwrReceivedMinTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 5), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnOpticalPwrReceivedMinTh.setStatus('current')
stmnOpticalPwrReceivedMaxTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 6), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnOpticalPwrReceivedMaxTh.setStatus('current')
stmnOpticalPwrTransmittedMinTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 7), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnOpticalPwrTransmittedMinTh.setStatus('current')
stmnOpticalPwrTransmittedMaxTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 8), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnOpticalPwrTransmittedMaxTh.setStatus('current')
stmnOpticalPwrReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 9), FixedX10()).setUnits('dBm/10').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: stmnOpticalPwrReceived.setStatus('current')
stmnOpticalPwrTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 10), FixedX10()).setUnits('dBm/10').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: stmnOpticalPwrTransmitted.setStatus('current')
stmnBER = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 11), BERType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: stmnBER.setStatus('current')
stmnBERTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 12), BERType().clone('tenExpMinus6')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stmnBERTh.setStatus('current')
stmnPEC = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stmnPEC.setStatus('current')
stmnAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 14), AdminStatus().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stmnAdminStatus.setStatus('current')
stmnOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 15), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnOperStatus.setStatus('current')
stmnOperStatQlfr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 16), OperStatQlfr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnOperStatQlfr.setStatus('current')
stmnAutoEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 17), HoursAndMinutes().clone('008-00')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stmnAutoEnableTimer.setStatus('current')
stmnActAutoEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 18), HoursAndMinutes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnActAutoEnableTimer.setStatus('current')
stmnWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 19), FixedX100()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stmnWavelength.setStatus('current')
stmnVendorPN1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stmnVendorPN1.setStatus('current')
stmnVendorPN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stmnVendorPN2.setStatus('current')
stmnVendorPN3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stmnVendorPN3.setStatus('current')
stmnPhyPMMon = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stmnPhyPMMon.setStatus('current')
stmnLaserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnLaserStatus.setStatus('current')
stmnId1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stmnId1.setStatus('current')
stmnFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 26), FiberType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stmnFiberType.setStatus('current')
stmnCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 27), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stmnCustom1.setStatus('current')
stmnTOHTransparency = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stmnTOHTransparency.setStatus('current')
stmnLineMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unmapped", 1), ("odu1ToOtu2", 2), ("otu2", 3), ("subOdu1ToOtu1", 4), ("otu1", 5))).clone('otu2')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stmnLineMapping.setStatus('current')
stmnProtSwEvtType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 30), ProtSwEvtType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: stmnProtSwEvtType.setStatus('current')
stmnDCCTransparency = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stmnDCCTransparency.setStatus('current')
stmnTransparencyChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stmnTransparencyChannel.setStatus('current')
stmnRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 33), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stmnRemoteId.setStatus('current')
stmnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 7, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stmnRowStatus.setStatus('current')
vcnTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 8), )
if mibBuilder.loadTexts: vcnTable.setStatus('current')
vcnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 8, 1), ).setIndexNames((0, "BTI-7000-MIB", "vcnTypeIdx"), (0, "BTI-7000-MIB", "vcnShelfIdx"), (0, "BTI-7000-MIB", "vcnSlotIdx"), (0, "BTI-7000-MIB", "vcnPortIdx"), (0, "BTI-7000-MIB", "vcnIdx"))
if mibBuilder.loadTexts: vcnEntry.setStatus('current')
vcnTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 8, 1, 1), VcnType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vcnTypeIdx.setStatus('current')
vcnShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vcnShelfIdx.setStatus('current')
vcnSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vcnSlotIdx.setStatus('current')
vcnPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vcnPortIdx.setStatus('current')
vcnIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vcnIdx.setStatus('current')
vcnProtSwEvtType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 8, 1, 6), ProtSwEvtType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vcnProtSwEvtType.setStatus('current')
vcnBER = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 8, 1, 7), BERType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vcnBER.setStatus('current')
vcnBERTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 8, 1, 8), BERType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vcnBERTh.setStatus('current')
vcnProtSwStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 8, 1, 9), OperStatQlfr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcnProtSwStatus.setStatus('current')
geTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9), )
if mibBuilder.loadTexts: geTable.setStatus('current')
geEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1), ).setIndexNames((0, "BTI-7000-MIB", "geShelfIdx"), (0, "BTI-7000-MIB", "geSlotIdx"), (0, "BTI-7000-MIB", "gePortIdx"))
if mibBuilder.loadTexts: geEntry.setStatus('current')
geShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: geShelfIdx.setStatus('current')
geSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: geSlotIdx.setStatus('current')
gePortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 12))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: gePortIdx.setStatus('current')
geOpticalPwrReceivedMinTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 4), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: geOpticalPwrReceivedMinTh.setStatus('current')
geOpticalPwrReceivedMaxTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 5), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: geOpticalPwrReceivedMaxTh.setStatus('current')
geOpticalPwrTransmittedMinTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 6), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: geOpticalPwrTransmittedMinTh.setStatus('current')
geOpticalPwrTransmittedMaxTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 7), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: geOpticalPwrTransmittedMaxTh.setStatus('current')
geOpticalPwrReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 8), FixedX10()).setUnits('dBm/10').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: geOpticalPwrReceived.setStatus('current')
geOpticalPwrTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 9), FixedX10()).setUnits('dBm/10').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: geOpticalPwrTransmitted.setStatus('current')
gePEC = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gePEC.setStatus('current')
geAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 11), AdminStatus().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: geAdminStatus.setStatus('current')
geOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 12), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geOperStatus.setStatus('current')
geOperStatQlfr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 13), OperStatQlfr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geOperStatQlfr.setStatus('current')
geAutoEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 14), HoursAndMinutes().clone('008-00')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: geAutoEnableTimer.setStatus('current')
geActAutoEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 15), HoursAndMinutes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geActAutoEnableTimer.setStatus('current')
geWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 16), FixedX100()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: geWavelength.setStatus('current')
geVendorPN1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: geVendorPN1.setStatus('current')
geVendorPN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: geVendorPN2.setStatus('current')
geVendorPN3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: geVendorPN3.setStatus('current')
gePhyPMMon = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gePhyPMMon.setStatus('current')
geFPSD = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: geFPSD.setStatus('current')
geLaserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: geLaserStatus.setStatus('current')
geId1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: geId1.setStatus('current')
geFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 24), FiberType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: geFiberType.setStatus('current')
geCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 25), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: geCustom1.setStatus('current')
geSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 26), Gauge32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: geSpeed.setStatus('current')
geDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 27), DuplexModeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geDuplex.setStatus('current')
geMediaRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 28), MediaRateType().clone('autoNegotiated')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: geMediaRate.setStatus('current')
geMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geMTU.setStatus('current')
geMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 30), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geMACAddr.setStatus('current')
geGfpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unmapped", 1), ("gfpf", 2), ("gfpt", 3))).clone('gfpt')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: geGfpMode.setStatus('current')
geFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("transparent", 1), ("local", 2))).clone('transparent')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: geFlowControl.setStatus('current')
geRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 33), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: geRemoteId.setStatus('current')
geRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 9, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: geRowStatus.setStatus('current')
feTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 10), )
if mibBuilder.loadTexts: feTable.setStatus('current')
feEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 10, 1), ).setIndexNames((0, "BTI-7000-MIB", "feShelfIdx"), (0, "BTI-7000-MIB", "feSlotIdx"), (0, "BTI-7000-MIB", "fePortIdx"))
if mibBuilder.loadTexts: feEntry.setStatus('current')
feShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: feShelfIdx.setStatus('current')
feSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: feSlotIdx.setStatus('current')
fePortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 6))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fePortIdx.setStatus('current')
feId1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 10, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: feId1.setStatus('current')
feCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 10, 1, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: feCustom1.setStatus('current')
feSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 10, 1, 6), Gauge32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: feSpeed.setStatus('current')
feDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 10, 1, 7), DuplexModeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feDuplex.setStatus('current')
feMediaRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 10, 1, 8), MediaRateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feMediaRate.setStatus('current')
feMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 10, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feMTU.setStatus('current')
feMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 10, 1, 10), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: feMACAddr.setStatus('current')
feRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 10, 1, 11), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: feRemoteId.setStatus('current')
feRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 10, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: feRowStatus.setStatus('current')
vcgTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 11), )
if mibBuilder.loadTexts: vcgTable.setStatus('current')
vcgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 11, 1), ).setIndexNames((0, "BTI-7000-MIB", "vcgShelfIdx"), (0, "BTI-7000-MIB", "vcgSlotIdx"), (0, "BTI-7000-MIB", "vcgPortIdx"), (0, "BTI-7000-MIB", "vcgIdx"))
if mibBuilder.loadTexts: vcgEntry.setStatus('current')
vcgShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: vcgShelfIdx.setStatus('current')
vcgSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: vcgSlotIdx.setStatus('current')
vcgPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: vcgPortIdx.setStatus('current')
vcgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: vcgIdx.setStatus('current')
vcgType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("sts1c21v", 1), ("sts1c2v", 2), ("sts3c7v", 3), ("sts3c1v", 4), ("vc47v", 5), ("vc41v", 6), ("sts1c3v", 7), ("sts1c19v", 8), ("sts1c22v", 9), ("sts1c37v", 10), ("sts1c74v", 11), ("sts3c6v", 12), ("sts3c12v", 13), ("sts3c24v", 14), ("vc46v", 15), ("vc412v", 16), ("vc424v", 17), ("vc42v", 18), ("sts1c6v", 19), ("sts3c2v", 20), ("sts1c31v", 21), ("sts3c10v", 22), ("vc410v", 23)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcgType.setStatus('current')
vcgTimeSlotIndices = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 11, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 511))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcgTimeSlotIndices.setStatus('current')
vcgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 11, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcgRowStatus.setStatus('current')
fcTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12), )
if mibBuilder.loadTexts: fcTable.setStatus('current')
fcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1), ).setIndexNames((0, "BTI-7000-MIB", "fcShelfIdx"), (0, "BTI-7000-MIB", "fcSlotIdx"), (0, "BTI-7000-MIB", "fcPortIdx"))
if mibBuilder.loadTexts: fcEntry.setStatus('current')
fcShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fcShelfIdx.setStatus('current')
fcSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fcSlotIdx.setStatus('current')
fcPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 12))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fcPortIdx.setStatus('current')
fcRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("oneGbs", 1), ("twoGbs", 2), ("fourGbs", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcRate.setStatus('current')
fcOpticalPwrReceivedMinTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 5), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcOpticalPwrReceivedMinTh.setStatus('current')
fcOpticalPwrReceivedMaxTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 6), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcOpticalPwrReceivedMaxTh.setStatus('current')
fcOpticalPwrTransmittedMinTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 7), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcOpticalPwrTransmittedMinTh.setStatus('current')
fcOpticalPwrTransmittedMaxTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 8), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcOpticalPwrTransmittedMaxTh.setStatus('current')
fcOpticalPwrReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 9), FixedX10()).setUnits('dBm/10').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fcOpticalPwrReceived.setStatus('current')
fcOpticalPwrTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 10), FixedX10()).setUnits('dBm/10').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fcOpticalPwrTransmitted.setStatus('current')
fcPEC = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcPEC.setStatus('current')
fcAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 12), AdminStatus().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcAdminStatus.setStatus('current')
fcOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 13), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcOperStatus.setStatus('current')
fcOperStatQlfr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 14), OperStatQlfr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcOperStatQlfr.setStatus('current')
fcAutoEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 15), HoursAndMinutes().clone('008-00')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcAutoEnableTimer.setStatus('current')
fcActAutoEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 16), HoursAndMinutes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcActAutoEnableTimer.setStatus('current')
fcWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 17), FixedX100()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcWavelength.setStatus('current')
fcVendorPN1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcVendorPN1.setStatus('current')
fcVendorPN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcVendorPN2.setStatus('current')
fcVendorPN3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcVendorPN3.setStatus('current')
fcPhyPMMon = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcPhyPMMon.setStatus('current')
fcFPSD = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcFPSD.setStatus('current')
fcLaserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcLaserStatus.setStatus('current')
fcId1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcId1.setStatus('current')
fcFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 25), FiberType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcFiberType.setStatus('current')
fcCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 26), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcCustom1.setStatus('current')
fcGfpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unmapped", 1), ("gfpt", 2))).clone('gfpt')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcGfpMode.setStatus('current')
fcRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 28), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcRemoteId.setStatus('current')
fcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 12, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcRowStatus.setStatus('current')
oscTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1), )
if mibBuilder.loadTexts: oscTable.setStatus('current')
oscEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "oscShelfIdx"), (0, "BTI-7000-MIB", "oscSlotIdx"), (0, "BTI-7000-MIB", "oscIdx"))
if mibBuilder.loadTexts: oscEntry.setStatus('current')
oscShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: oscShelfIdx.setStatus('current')
oscSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: oscSlotIdx.setStatus('current')
oscIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: oscIdx.setStatus('current')
oscAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 4), AdminStatus().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oscAdminStatus.setStatus('current')
oscOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 5), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscOperStatus.setStatus('current')
oscOperStatQlfr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 6), OperStatQlfr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscOperStatQlfr.setStatus('current')
oscCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oscCustom1.setStatus('current')
oscType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("optical", 1), ("electrical", 2), ("logical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscType.setStatus('current')
oscUnmbrd = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscUnmbrd.setStatus('current')
oscSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 10), Gauge32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: oscSpeed.setStatus('current')
oscDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 11), DuplexModeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscDuplex.setStatus('current')
oscMediaRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 12), MediaRateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscMediaRate.setStatus('current')
oscMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscMTU.setStatus('current')
oscMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 14), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscMACAddr.setStatus('current')
oscIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 15), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oscIPAddr.setStatus('current')
oscIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 16), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oscIPMask.setStatus('current')
oscIPBcast = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 17), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscIPBcast.setStatus('current')
oscRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 1, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: oscRowStatus.setStatus('current')
netMgmtTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2), )
if mibBuilder.loadTexts: netMgmtTable.setStatus('current')
netMgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1), ).setIndexNames((0, "BTI-7000-MIB", "netMgmtIdx"))
if mibBuilder.loadTexts: netMgmtEntry.setStatus('current')
netMgmtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nms", 1), ("craft", 2))))
if mibBuilder.loadTexts: netMgmtIdx.setStatus('current')
netMgmtAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 2), AdminStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMgmtAdminStatus.setStatus('current')
netMgmtOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 3), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netMgmtOperStatus.setStatus('current')
netMgmtOperStatQlfr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 4), OperStatQlfr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netMgmtOperStatQlfr.setStatus('current')
netMgmtIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMgmtIPAddr.setStatus('current')
netMgmtIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMgmtIPMask.setStatus('current')
netMgmtIPBcast = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netMgmtIPBcast.setStatus('current')
netMgmtCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMgmtCustom1.setStatus('current')
netMgmtType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("optical", 1), ("electrical", 2), ("logical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netMgmtType.setStatus('current')
netMgmtUnmbrd = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netMgmtUnmbrd.setStatus('current')
netMgmtSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 11), Gauge32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: netMgmtSpeed.setStatus('current')
netMgmtDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 12), DuplexModeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netMgmtDuplex.setStatus('current')
netMgmtMediaRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 13), MediaRateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netMgmtMediaRate.setStatus('current')
netMgmtMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netMgmtMTU.setStatus('current')
netMgmtMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 2, 1, 15), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netMgmtMACAddr.setStatus('current')
serialTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 3), )
if mibBuilder.loadTexts: serialTable.setStatus('current')
serialEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 3, 1), ).setIndexNames((0, "BTI-7000-MIB", "serialPortIdx"))
if mibBuilder.loadTexts: serialEntry.setStatus('current')
serialPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: serialPortIdx.setStatus('current')
serialBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 3, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialBaudRate.setStatus('current')
serialDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialDataBits.setStatus('current')
serialParity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialParity.setStatus('current')
serialStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("one", 1), ("two", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialStopBits.setStatus('current')
ethIntfTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14), )
if mibBuilder.loadTexts: ethIntfTable.setStatus('current')
ethIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1), ).setIndexNames((0, "BTI-7000-MIB", "ethIntfShelfIdx"), (0, "BTI-7000-MIB", "ethIntfSlotIdx"), (0, "BTI-7000-MIB", "ethIntfPortTypeIdx"), (0, "BTI-7000-MIB", "ethIntfPortIdx"))
if mibBuilder.loadTexts: ethIntfEntry.setStatus('current')
ethIntfShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ethIntfShelfIdx.setStatus('current')
ethIntfSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ethIntfSlotIdx.setStatus('current')
ethIntfPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 3), PvxL1PortType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ethIntfPortTypeIdx.setStatus('current')
ethIntfPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ethIntfPortIdx.setStatus('current')
ethIntfOpticalPwrReceivedMinTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 5), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntfOpticalPwrReceivedMinTh.setStatus('current')
ethIntfOpticalPwrReceivedMaxTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 6), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntfOpticalPwrReceivedMaxTh.setStatus('current')
ethIntfOpticalPwrTransmittedMinTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 7), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntfOpticalPwrTransmittedMinTh.setStatus('current')
ethIntfOpticalPwrTransmittedMaxTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 8), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntfOpticalPwrTransmittedMaxTh.setStatus('current')
ethIntfOpticalPwrReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 9), FixedX10()).setUnits('dBm/10').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ethIntfOpticalPwrReceived.setStatus('current')
ethIntfOpticalPwrTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 10), FixedX10()).setUnits('dBm/10').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ethIntfOpticalPwrTransmitted.setStatus('current')
ethIntfPEC = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIntfPEC.setStatus('current')
ethIntfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIntfAdminStatus.setStatus('current')
ethIntfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 13), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntfOperStatus.setStatus('current')
ethIntfOperStatQlfr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 14), OperStatQlfr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntfOperStatQlfr.setStatus('current')
ethIntfAutoEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 15), HoursAndMinutes().clone('008-00')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIntfAutoEnableTimer.setStatus('current')
ethIntfActAutoEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 16), HoursAndMinutes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntfActAutoEnableTimer.setStatus('current')
ethIntfWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 17), FixedX100()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIntfWavelength.setStatus('current')
ethIntfVendorPN1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIntfVendorPN1.setStatus('current')
ethIntfVendorPN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIntfVendorPN2.setStatus('current')
ethIntfVendorPN3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIntfVendorPN3.setStatus('current')
ethIntfPhyPMMon = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIntfPhyPMMon.setStatus('current')
ethIntfFPSD = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIntfFPSD.setStatus('current')
ethIntfLaserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntfLaserStatus.setStatus('current')
ethIntfId1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIntfId1.setStatus('current')
ethIntfFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 25), FiberType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIntfFiberType.setStatus('current')
ethIntfCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 26), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIntfCustom1.setStatus('current')
ethIntfSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 27), Gauge32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntfSpeed.setStatus('current')
ethIntfDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("half", 1), ("full", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntfDuplex.setStatus('current')
ethIntfMediaRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 29), MediaRateType().clone('autoNegotiated')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIntfMediaRate.setStatus('current')
ethIntfMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1518, 9600)).clone(1518)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIntfMTU.setStatus('current')
ethIntfLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntfLinkStatus.setStatus('current')
ethIntfLagId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntfLagId.setStatus('current')
ethIntfLagPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 33), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIntfLagPortPriority.setStatus('current')
ethIntfBER = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 37), BERType().clone('tenExpMinus5')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIntfBER.setStatus('current')
ethIntfMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 39), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntfMACAddr.setStatus('current')
ethIntfLineMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tenglanphy", 1), ("otu2gfp1", 2), ("notApplicable", 3), ("stacking", 4))).clone('tenglanphy')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIntfLineMapping.setStatus('current')
ethIntfErrorCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("fec", 2), ("efec", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIntfErrorCorrection.setStatus('current')
ethIntfLpbkOpCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOp", 1), ("oprLpbk", 2), ("rlsLpbk", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIntfLpbkOpCmd.setStatus('current')
ethIntfRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 43), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIntfRemoteId.setStatus('current')
ethIntfMirrorConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 44), MirrorConfigType().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIntfMirrorConfig.setStatus('current')
ethIntfLldpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIntfLldpAdminStatus.setStatus('current')
ethIntfLldpRemChassisIdSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 46), LldpChassisIdSubtype()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntfLldpRemChassisIdSubtype.setStatus('current')
ethIntfLldpRemChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 47), LldpChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntfLldpRemChassisId.setStatus('current')
ethIntfLldpRemPortIdSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 48), LldpPortIdSubtype()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntfLldpRemPortIdSubtype.setStatus('current')
ethIntfLldpRemPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 49), LldpPortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntfLldpRemPortId.setStatus('current')
ethIntfBouncingStateChangeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIntfBouncingStateChangeCount.setStatus('current')
ethIntfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 14, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ethIntfRowStatus.setStatus('current')
odunTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 15), )
if mibBuilder.loadTexts: odunTable.setStatus('current')
odunEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 15, 1), ).setIndexNames((0, "BTI-7000-MIB", "odunTypeIdx"), (0, "BTI-7000-MIB", "odunShelfIdx"), (0, "BTI-7000-MIB", "odunSlotIdx"), (0, "BTI-7000-MIB", "odunPortIdx"))
if mibBuilder.loadTexts: odunEntry.setStatus('current')
odunTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 15, 1, 1), OdunType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: odunTypeIdx.setStatus('current')
odunShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: odunShelfIdx.setStatus('current')
odunSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: odunSlotIdx.setStatus('current')
odunPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 15, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: odunPortIdx.setStatus('current')
odunIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 15, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: odunIdx.setStatus('current')
briTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16), )
if mibBuilder.loadTexts: briTable.setStatus('current')
briEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1), ).setIndexNames((0, "BTI-7000-MIB", "briShelfIdx"), (0, "BTI-7000-MIB", "briSlotIdx"), (0, "BTI-7000-MIB", "briPortIdx"))
if mibBuilder.loadTexts: briEntry.setStatus('current')
briShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: briShelfIdx.setStatus('current')
briSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: briSlotIdx.setStatus('current')
briPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 12))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: briPortIdx.setStatus('current')
briProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("fx100", 1), ("escon", 2), ("sdSdi", 3), ("hdSdi", 4), ("hdSdi1001", 5), ("dvbAsi", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: briProtocol.setStatus('current')
briOpticalPwrReceivedMinTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 5), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: briOpticalPwrReceivedMinTh.setStatus('current')
briOpticalPwrReceivedMaxTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 6), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: briOpticalPwrReceivedMaxTh.setStatus('current')
briOpticalPwrTransmittedMinTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 7), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: briOpticalPwrTransmittedMinTh.setStatus('current')
briOpticalPwrTransmittedMaxTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 8), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: briOpticalPwrTransmittedMaxTh.setStatus('current')
briOpticalPwrReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 9), FixedX10()).setUnits('dBm/10').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: briOpticalPwrReceived.setStatus('current')
briOpticalPwrTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 10), FixedX10()).setUnits('dBm/10').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: briOpticalPwrTransmitted.setStatus('current')
briPEC = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: briPEC.setStatus('current')
briAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 12), AdminStatus().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: briAdminStatus.setStatus('current')
briOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 13), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briOperStatus.setStatus('current')
briOperStatQlfr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 14), OperStatQlfr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briOperStatQlfr.setStatus('current')
briAutoEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 15), HoursAndMinutes().clone('008-00')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: briAutoEnableTimer.setStatus('current')
briActAutoEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 16), HoursAndMinutes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briActAutoEnableTimer.setStatus('current')
briWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 17), FixedX100()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: briWavelength.setStatus('current')
briVendorPN1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: briVendorPN1.setStatus('current')
briVendorPN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: briVendorPN2.setStatus('current')
briVendorPN3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: briVendorPN3.setStatus('current')
briPhyPMMon = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: briPhyPMMon.setStatus('current')
briLaserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: briLaserStatus.setStatus('current')
briId1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: briId1.setStatus('current')
briFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 24), FiberType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: briFiberType.setStatus('current')
briCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 25), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: briCustom1.setStatus('current')
briBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 26), FixedX100()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briBitRate.setStatus('current')
briRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 27), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: briRemoteId.setStatus('current')
briRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 4, 16, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: briRowStatus.setStatus('current')
oaCrntPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1), )
if mibBuilder.loadTexts: oaCrntPMTable.setStatus('current')
oaCrntPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "oaCrntPMOaTypeIdx"), (0, "BTI-7000-MIB", "oaCrntPMShelfIdx"), (0, "BTI-7000-MIB", "oaCrntPMSlotIdx"), (0, "BTI-7000-MIB", "oaCrntPMOaIdx"), (0, "BTI-7000-MIB", "oaCrntPMIntervalTypeIdx"))
if mibBuilder.loadTexts: oaCrntPMEntry.setStatus('current')
oaCrntPMOaTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 1), OaType())
if mibBuilder.loadTexts: oaCrntPMOaTypeIdx.setStatus('current')
oaCrntPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: oaCrntPMShelfIdx.setStatus('current')
oaCrntPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: oaCrntPMSlotIdx.setStatus('current')
oaCrntPMOaIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: oaCrntPMOaIdx.setStatus('current')
oaCrntPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 5), PMIntervalType())
if mibBuilder.loadTexts: oaCrntPMIntervalTypeIdx.setStatus('current')
oaCrntPMCaseTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMCaseTempValue.setStatus('current')
oaCrntPMCaseTempTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMCaseTempTimeStamp.setStatus('current')
oaCrntPMCaseTempValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 8), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMCaseTempValidity.setStatus('current')
oaCrntPMLaser1TempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMLaser1TempValue.setStatus('current')
oaCrntPMLaser1TempTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMLaser1TempTimeStamp.setStatus('current')
oaCrntPMLaser1TempValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 11), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMLaser1TempValidity.setStatus('current')
oaCrntPMLaser2TempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMLaser2TempValue.setStatus('current')
oaCrntPMLaser2TempTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMLaser2TempTimeStamp.setStatus('current')
oaCrntPMLaser2TempValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 14), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMLaser2TempValidity.setStatus('current')
oaCrntPMOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 15), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMOPRValue.setStatus('current')
oaCrntPMOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMOPRTimeStamp.setStatus('current')
oaCrntPMOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 17), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMOPRValidity.setStatus('current')
oaCrntPMSSIOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 18), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMSSIOPRValue.setStatus('current')
oaCrntPMSSIOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 19), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMSSIOPRTimeStamp.setStatus('current')
oaCrntPMSSIOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 20), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMSSIOPRValidity.setStatus('current')
oaCrntPMOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 21), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMOPTValue.setStatus('current')
oaCrntPMOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 22), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMOPTTimeStamp.setStatus('current')
oaCrntPMOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 23), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMOPTValidity.setStatus('current')
oaCrntPMMSInsLossValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 24), FixedX10()).setUnits('dB/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMMSInsLossValue.setStatus('current')
oaCrntPMMSInsLossTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 25), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMMSInsLossTimeStamp.setStatus('current')
oaCrntPMMSInsLossValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 26), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMMSInsLossValidity.setStatus('current')
oaCrntPMEffectiveGainValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 27), FixedX10()).setUnits('dB/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMEffectiveGainValue.setStatus('current')
oaCrntPMEffectiveGainTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 28), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMEffectiveGainTimeStamp.setStatus('current')
oaCrntPMEffectiveGainValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 29), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMEffectiveGainValidity.setStatus('current')
oaCrntPMFSOOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 30), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMFSOOPTValue.setStatus('current')
oaCrntPMFSOOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 31), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMFSOOPTTimeStamp.setStatus('current')
oaCrntPMFSOOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 32), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMFSOOPTValidity.setStatus('current')
oaCrntPMLaser1CurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 33), FixedX10()).setUnits('mAmp/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMLaser1CurrentValue.setStatus('current')
oaCrntPMLaser1CurrentTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 34), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMLaser1CurrentTimeStamp.setStatus('current')
oaCrntPMLaser1CurrentValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 35), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMLaser1CurrentValidity.setStatus('current')
oaCrntPMLaser2CurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 36), FixedX10()).setUnits('mAmp/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMLaser2CurrentValue.setStatus('current')
oaCrntPMLaser2CurrentTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 37), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMLaser2CurrentTimeStamp.setStatus('current')
oaCrntPMLaser2CurrentValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 38), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMLaser2CurrentValidity.setStatus('current')
oaCrntPMLaser1PowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 39), FixedX10()).setUnits('mWatts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMLaser1PowerValue.setStatus('current')
oaCrntPMLaser1PowerTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 40), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMLaser1PowerTimeStamp.setStatus('current')
oaCrntPMLaser1PowerValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 41), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMLaser1PowerValidity.setStatus('current')
oaCrntPMLaser2PowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 42), FixedX10()).setUnits('mWatts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMLaser2PowerValue.setStatus('current')
oaCrntPMLaser2PowerTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 43), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMLaser2PowerTimeStamp.setStatus('current')
oaCrntPMLaser2PowerValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 44), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMLaser2PowerValidity.setStatus('current')
oaCrntPMOBRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 45), FixedX10()).setUnits('dB/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMOBRValue.setStatus('current')
oaCrntPMOBRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 46), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMOBRTimeStamp.setStatus('current')
oaCrntPMOBRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 47), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMOBRValidity.setStatus('current')
oaCrntPMVOAValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 48), FixedX10()).setUnits('dB/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMVOAValue.setStatus('current')
oaCrntPMVOATimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 49), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMVOATimeStamp.setStatus('current')
oaCrntPMVOAValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 1, 1, 50), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaCrntPMVOAValidity.setStatus('current')
oaHistPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2), )
if mibBuilder.loadTexts: oaHistPMTable.setStatus('current')
oaHistPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1), ).setIndexNames((0, "BTI-7000-MIB", "oaHistPMOaTypeIdx"), (0, "BTI-7000-MIB", "oaHistPMShelfIdx"), (0, "BTI-7000-MIB", "oaHistPMSlotIdx"), (0, "BTI-7000-MIB", "oaHistPMOaIdx"), (0, "BTI-7000-MIB", "oaHistPMIntervalTypeIdx"), (0, "BTI-7000-MIB", "oaHistPMIntervalIdx"))
if mibBuilder.loadTexts: oaHistPMEntry.setStatus('current')
oaHistPMOaTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 1), OaType())
if mibBuilder.loadTexts: oaHistPMOaTypeIdx.setStatus('current')
oaHistPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: oaHistPMShelfIdx.setStatus('current')
oaHistPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: oaHistPMSlotIdx.setStatus('current')
oaHistPMOaIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: oaHistPMOaIdx.setStatus('current')
oaHistPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 5), PMIntervalType())
if mibBuilder.loadTexts: oaHistPMIntervalTypeIdx.setStatus('current')
oaHistPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: oaHistPMIntervalIdx.setStatus('current')
oaHistPMCaseTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMCaseTempValue.setStatus('current')
oaHistPMCaseTempTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMCaseTempTimeStamp.setStatus('current')
oaHistPMCaseTempValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 9), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMCaseTempValidity.setStatus('current')
oaHistPMLaser1TempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMLaser1TempValue.setStatus('current')
oaHistPMLaser1TempTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMLaser1TempTimeStamp.setStatus('current')
oaHistPMLaser1TempValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 12), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMLaser1TempValidity.setStatus('current')
oaHistPMLaser2TempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMLaser2TempValue.setStatus('current')
oaHistPMLaser2TempTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMLaser2TempTimeStamp.setStatus('current')
oaHistPMLaser2TempValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 15), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMLaser2TempValidity.setStatus('current')
oaHistPMOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 16), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMOPRValue.setStatus('current')
oaHistPMOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 17), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMOPRTimeStamp.setStatus('current')
oaHistPMOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 18), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMOPRValidity.setStatus('current')
oaHistPMSSIOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 19), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMSSIOPRValue.setStatus('current')
oaHistPMSSIOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 20), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMSSIOPRTimeStamp.setStatus('current')
oaHistPMSSIOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 21), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMSSIOPRValidity.setStatus('current')
oaHistPMOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 22), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMOPTValue.setStatus('current')
oaHistPMOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 23), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMOPTTimeStamp.setStatus('current')
oaHistPMOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 24), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMOPTValidity.setStatus('current')
oaHistPMMSInsLossValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 25), FixedX10()).setUnits('dB/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMMSInsLossValue.setStatus('current')
oaHistPMMSInsLossTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 26), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMMSInsLossTimeStamp.setStatus('current')
oaHistPMMSInsLossValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 27), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMMSInsLossValidity.setStatus('current')
oaHistPMEffectiveGainValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 28), FixedX10()).setUnits('dB/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMEffectiveGainValue.setStatus('current')
oaHistPMEffectiveGainTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 29), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMEffectiveGainTimeStamp.setStatus('current')
oaHistPMEffectiveGainValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 30), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMEffectiveGainValidity.setStatus('current')
oaHistPMFSOOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 31), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMFSOOPTValue.setStatus('current')
oaHistPMFSOOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 32), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMFSOOPTTimeStamp.setStatus('current')
oaHistPMFSOOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 33), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMFSOOPTValidity.setStatus('current')
oaHistPMLaser1CurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 34), FixedX10()).setUnits('mAmp/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMLaser1CurrentValue.setStatus('current')
oaHistPMLaser1CurrentTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 35), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMLaser1CurrentTimeStamp.setStatus('current')
oaHistPMLaser1CurrentValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 36), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMLaser1CurrentValidity.setStatus('current')
oaHistPMLaser2CurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 37), FixedX10()).setUnits('mAmp/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMLaser2CurrentValue.setStatus('current')
oaHistPMLaser2CurrentTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 38), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMLaser2CurrentTimeStamp.setStatus('current')
oaHistPMLaser2CurrentValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 39), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMLaser2CurrentValidity.setStatus('current')
oaHistPMLaser1PowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 40), FixedX10()).setUnits('mWatts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMLaser1PowerValue.setStatus('current')
oaHistPMLaser1PowerTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 41), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMLaser1PowerTimeStamp.setStatus('current')
oaHistPMLaser1PowerValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 42), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMLaser1PowerValidity.setStatus('current')
oaHistPMLaser2PowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 43), FixedX10()).setUnits('mWatts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMLaser2PowerValue.setStatus('current')
oaHistPMLaser2PowerTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 44), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMLaser2PowerTimeStamp.setStatus('current')
oaHistPMLaser2PowerValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 45), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMLaser2PowerValidity.setStatus('current')
oaHistPMOBRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 46), FixedX10()).setUnits('dB/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMOBRValue.setStatus('current')
oaHistPMOBRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 47), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMOBRTimeStamp.setStatus('current')
oaHistPMOBRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 48), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMOBRValidity.setStatus('current')
oaHistPMVOAValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 49), FixedX10()).setUnits('dB/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMVOAValue.setStatus('current')
oaHistPMVOATimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 50), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMVOATimeStamp.setStatus('current')
oaHistPMVOAValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 2, 1, 51), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oaHistPMVOAValidity.setStatus('current')
xcvrCrntPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3), )
if mibBuilder.loadTexts: xcvrCrntPMTable.setStatus('current')
xcvrCrntPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1), ).setIndexNames((0, "BTI-7000-MIB", "xcvrCrntPMTypeIdx"), (0, "BTI-7000-MIB", "xcvrCrntPMShelfIdx"), (0, "BTI-7000-MIB", "xcvrCrntPMSlotIdx"), (0, "BTI-7000-MIB", "xcvrCrntPMIdx"), (0, "BTI-7000-MIB", "xcvrCrntPMIntervalTypeIdx"))
if mibBuilder.loadTexts: xcvrCrntPMEntry.setStatus('current')
xcvrCrntPMTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 1), XcvrType())
if mibBuilder.loadTexts: xcvrCrntPMTypeIdx.setStatus('current')
xcvrCrntPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: xcvrCrntPMShelfIdx.setStatus('current')
xcvrCrntPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: xcvrCrntPMSlotIdx.setStatus('current')
xcvrCrntPMIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: xcvrCrntPMIdx.setStatus('current')
xcvrCrntPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 5), PMIntervalType())
if mibBuilder.loadTexts: xcvrCrntPMIntervalTypeIdx.setStatus('current')
xcvrCrntPMOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 6), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPRValue.setStatus('current')
xcvrCrntPMOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPRTimeStamp.setStatus('current')
xcvrCrntPMOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 8), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPRValidity.setStatus('current')
xcvrCrntPMOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 9), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPTValue.setStatus('current')
xcvrCrntPMOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPTTimeStamp.setStatus('current')
xcvrCrntPMOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 11), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPTValidity.setStatus('current')
xcvrCrntPMTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMTempValue.setStatus('current')
xcvrCrntPMTempTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMTempTimeStamp.setStatus('current')
xcvrCrntPMTempValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 14), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMTempValidity.setStatus('current')
xcvrCrntPMSupplyVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 15), FixedX10()).setUnits('mVolts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSupplyVoltageValue.setStatus('current')
xcvrCrntPMSupplyVoltageTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSupplyVoltageTimeStamp.setStatus('current')
xcvrCrntPMSupplyVoltageValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 17), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSupplyVoltageValidity.setStatus('current')
xcvrCrntPMLBCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('mAmp').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMLBCValue.setStatus('current')
xcvrCrntPMLBCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 19), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMLBCTimeStamp.setStatus('current')
xcvrCrntPMLBCValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 20), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMLBCValidity.setStatus('current')
xcvrCrntPMCVSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMCVSValue.setStatus('current')
xcvrCrntPMCVSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 22), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMCVSTimeStamp.setStatus('current')
xcvrCrntPMCVSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 23), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMCVSValidity.setStatus('current')
xcvrCrntPMESSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMESSValue.setStatus('current')
xcvrCrntPMESSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 25), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMESSTimeStamp.setStatus('current')
xcvrCrntPMESSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 26), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMESSValidity.setStatus('current')
xcvrCrntPMSESSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 27), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMSESSValue.setStatus('current')
xcvrCrntPMSESSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 28), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSESSTimeStamp.setStatus('current')
xcvrCrntPMSESSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 29), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSESSValidity.setStatus('current')
xcvrCrntPMSEFSSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 30), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMSEFSSValue.setStatus('current')
xcvrCrntPMSEFSSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 31), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSEFSSTimeStamp.setStatus('current')
xcvrCrntPMSEFSSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 32), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSEFSSValidity.setStatus('current')
xcvrCrntPMRSEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 33), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMRSEBValue.setStatus('current')
xcvrCrntPMRSEBTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 34), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMRSEBTimeStamp.setStatus('current')
xcvrCrntPMRSEBValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 35), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMRSEBValidity.setStatus('current')
xcvrCrntPMRSBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 36), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMRSBBEValue.setStatus('current')
xcvrCrntPMRSBBETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 37), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMRSBBETimeStamp.setStatus('current')
xcvrCrntPMRSBBEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 38), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMRSBBEValidity.setStatus('current')
xcvrCrntPMRSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 39), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMRSESValue.setStatus('current')
xcvrCrntPMRSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 40), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMRSESTimeStamp.setStatus('current')
xcvrCrntPMRSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 41), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMRSESValidity.setStatus('current')
xcvrCrntPMRSSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 42), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMRSSESValue.setStatus('current')
xcvrCrntPMRSSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 43), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMRSSESTimeStamp.setStatus('current')
xcvrCrntPMRSSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 44), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMRSSESValidity.setStatus('current')
xcvrCrntPMRSOFSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 45), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMRSOFSValue.setStatus('current')
xcvrCrntPMRSOFSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 46), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMRSOFSTimeStamp.setStatus('current')
xcvrCrntPMRSOFSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 47), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMRSOFSValidity.setStatus('current')
xcvrCrntPMCVValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 48), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMCVValue.setStatus('current')
xcvrCrntPMCVTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 49), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMCVTimeStamp.setStatus('current')
xcvrCrntPMCVValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 50), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMCVValidity.setStatus('current')
xcvrCrntPMESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 51), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMESValue.setStatus('current')
xcvrCrntPMESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 52), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMESTimeStamp.setStatus('current')
xcvrCrntPMESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 53), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMESValidity.setStatus('current')
xcvrCrntPMSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 54), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMSESValue.setStatus('current')
xcvrCrntPMSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 55), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSESTimeStamp.setStatus('current')
xcvrCrntPMSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 56), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSESValidity.setStatus('current')
xcvrCrntPMINVBLKValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 57), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMINVBLKValue.setStatus('current')
xcvrCrntPMINVBLKTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 58), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMINVBLKTimeStamp.setStatus('current')
xcvrCrntPMINVBLKValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 59), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMINVBLKValidity.setStatus('current')
xcvrCrntPMNBITCRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 60), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMNBITCRValue.setStatus('current')
xcvrCrntPMNBITCRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 61), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMNBITCRTimeStamp.setStatus('current')
xcvrCrntPMNBITCRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 62), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMNBITCRValidity.setStatus('current')
xcvrCrntPMNBYTCRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 63), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMNBYTCRValue.setStatus('current')
xcvrCrntPMNBYTCRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 64), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMNBYTCRTimeStamp.setStatus('current')
xcvrCrntPMNBYTCRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 65), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMNBYTCRValidity.setStatus('current')
xcvrCrntPMUNCRCDWValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 66), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMUNCRCDWValue.setStatus('current')
xcvrCrntPMUNCRCDWTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 67), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMUNCRCDWTimeStamp.setStatus('current')
xcvrCrntPMUNCRCDWValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 68), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMUNCRCDWValidity.setStatus('current')
xcvrCrntPMTBYCRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 69), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMTBYCRXValue.setStatus('current')
xcvrCrntPMTBYCRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 70), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMTBYCRXTimeStamp.setStatus('current')
xcvrCrntPMTBYCRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 71), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMTBYCRXValidity.setStatus('current')
xcvrCrntPMTBYCRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 72), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMTBYCRXInitialize.setStatus('current')
xcvrCrntPMTFRCRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 73), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMTFRCRXValue.setStatus('current')
xcvrCrntPMTFRCRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 74), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMTFRCRXTimeStamp.setStatus('current')
xcvrCrntPMTFRCRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 75), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMTFRCRXValidity.setStatus('current')
xcvrCrntPMTFRCRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 76), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMTFRCRXInitialize.setStatus('current')
xcvrCrntPMBCSTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 77), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMBCSTValue.setStatus('current')
xcvrCrntPMBCSTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 78), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMBCSTTimeStamp.setStatus('current')
xcvrCrntPMBCSTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 79), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMBCSTValidity.setStatus('current')
xcvrCrntPMBCSTInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 80), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMBCSTInitialize.setStatus('current')
xcvrCrntPMMCSTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 81), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMMCSTValue.setStatus('current')
xcvrCrntPMMCSTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 82), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMMCSTTimeStamp.setStatus('current')
xcvrCrntPMMCSTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 83), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMMCSTValidity.setStatus('current')
xcvrCrntPMMCSTInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 84), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMMCSTInitialize.setStatus('current')
xcvrCrntPMSIZE64Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 85), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSIZE64Value.setStatus('current')
xcvrCrntPMSIZE64TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 86), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSIZE64TimeStamp.setStatus('current')
xcvrCrntPMSIZE64Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 87), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSIZE64Validity.setStatus('current')
xcvrCrntPMSIZE64Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 88), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMSIZE64Initialize.setStatus('current')
xcvrCrntPMSIZE65To127Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 89), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSIZE65To127Value.setStatus('current')
xcvrCrntPMSIZE65To127TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 90), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSIZE65To127TimeStamp.setStatus('current')
xcvrCrntPMSIZE65To127Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 91), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSIZE65To127Validity.setStatus('current')
xcvrCrntPMSIZE65To127Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 92), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMSIZE65To127Initialize.setStatus('current')
xcvrCrntPMSIZE128To255Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 93), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSIZE128To255Value.setStatus('current')
xcvrCrntPMSIZE128To255TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 94), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSIZE128To255TimeStamp.setStatus('current')
xcvrCrntPMSIZE128To255Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 95), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSIZE128To255Validity.setStatus('current')
xcvrCrntPMSIZE128To255Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 96), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMSIZE128To255Initialize.setStatus('current')
xcvrCrntPMSIZE256To511Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 97), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSIZE256To511Value.setStatus('current')
xcvrCrntPMSIZE256To511TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 98), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSIZE256To511TimeStamp.setStatus('current')
xcvrCrntPMSIZE256To511Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 99), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSIZE256To511Validity.setStatus('current')
xcvrCrntPMSIZE256To511Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 100), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMSIZE256To511Initialize.setStatus('current')
xcvrCrntPMSIZE512To1023Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 101), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSIZE512To1023Value.setStatus('current')
xcvrCrntPMSIZE512To1023TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 102), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSIZE512To1023TimeStamp.setStatus('current')
xcvrCrntPMSIZE512To1023Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 103), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSIZE512To1023Validity.setStatus('current')
xcvrCrntPMSIZE512To1023Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 104), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMSIZE512To1023Initialize.setStatus('current')
xcvrCrntPMSIZE1024To1518Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 105), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSIZE1024To1518Value.setStatus('current')
xcvrCrntPMSIZE1024To1518TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 106), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSIZE1024To1518TimeStamp.setStatus('current')
xcvrCrntPMSIZE1024To1518Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 107), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSIZE1024To1518Validity.setStatus('current')
xcvrCrntPMSIZE1024To1518Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 108), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMSIZE1024To1518Initialize.setStatus('current')
xcvrCrntPMSIZEOver1518Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 109), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSIZEOver1518Value.setStatus('current')
xcvrCrntPMSIZEOver1518TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 110), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSIZEOver1518TimeStamp.setStatus('current')
xcvrCrntPMSIZEOver1518Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 111), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSIZEOver1518Validity.setStatus('current')
xcvrCrntPMSIZEOver1518Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 112), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMSIZEOver1518Initialize.setStatus('current')
xcvrCrntPMFCSEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 113), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMFCSEValue.setStatus('current')
xcvrCrntPMFCSETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 114), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMFCSETimeStamp.setStatus('current')
xcvrCrntPMFCSEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 115), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMFCSEValidity.setStatus('current')
xcvrCrntPMFRDRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 116), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMFRDRValue.setStatus('current')
xcvrCrntPMFRDRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 117), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMFRDRTimeStamp.setStatus('current')
xcvrCrntPMFRDRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 118), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMFRDRValidity.setStatus('current')
xcvrCrntPMUSIZEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 119), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMUSIZEValue.setStatus('current')
xcvrCrntPMUSIZETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 120), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMUSIZETimeStamp.setStatus('current')
xcvrCrntPMUSIZEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 121), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMUSIZEValidity.setStatus('current')
xcvrCrntPMOSIZEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 122), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMOSIZEValue.setStatus('current')
xcvrCrntPMOSIZETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 123), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOSIZETimeStamp.setStatus('current')
xcvrCrntPMOSIZEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 124), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOSIZEValidity.setStatus('current')
xcvrCrntPMFRGTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 125), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMFRGTValue.setStatus('current')
xcvrCrntPMFRGTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 126), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMFRGTTimeStamp.setStatus('current')
xcvrCrntPMFRGTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 127), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMFRGTValidity.setStatus('current')
xcvrCrntPMJABRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 128), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMJABRValue.setStatus('current')
xcvrCrntPMJABRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 129), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMJABRTimeStamp.setStatus('current')
xcvrCrntPMJABRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 130), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMJABRValidity.setStatus('current')
xcvrCrntPMOTUEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 131), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMOTUEBValue.setStatus('current')
xcvrCrntPMOTUEBTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 132), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOTUEBTimeStamp.setStatus('current')
xcvrCrntPMOTUEBValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 133), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOTUEBValidity.setStatus('current')
xcvrCrntPMOTUBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 134), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMOTUBBEValue.setStatus('current')
xcvrCrntPMOTUBBETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 135), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOTUBBETimeStamp.setStatus('current')
xcvrCrntPMOTUBBEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 136), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOTUBBEValidity.setStatus('current')
xcvrCrntPMOTUESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 137), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMOTUESValue.setStatus('current')
xcvrCrntPMOTUESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 138), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOTUESTimeStamp.setStatus('current')
xcvrCrntPMOTUESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 139), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOTUESValidity.setStatus('current')
xcvrCrntPMOTUSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 140), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMOTUSESValue.setStatus('current')
xcvrCrntPMOTUSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 141), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOTUSESTimeStamp.setStatus('current')
xcvrCrntPMOTUSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 142), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOTUSESValidity.setStatus('current')
xcvrCrntPMOTUOFSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 143), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMOTUOFSValue.setStatus('current')
xcvrCrntPMOTUOFSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 144), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOTUOFSTimeStamp.setStatus('current')
xcvrCrntPMOTUOFSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 145), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOTUOFSValidity.setStatus('current')
xcvrCrntPMSupplyVoltage2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 146), FixedX10()).setUnits('mVolts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSupplyVoltage2Value.setStatus('current')
xcvrCrntPMSupplyVoltage2TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 147), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSupplyVoltage2TimeStamp.setStatus('current')
xcvrCrntPMSupplyVoltage2Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 148), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMSupplyVoltage2Validity.setStatus('current')
xcvrCrntPMCVSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 149), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMCVSInitialize.setStatus('current')
xcvrCrntPMESSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 150), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMESSInitialize.setStatus('current')
xcvrCrntPMSESSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 151), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMSESSInitialize.setStatus('current')
xcvrCrntPMSEFSSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 152), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMSEFSSInitialize.setStatus('current')
xcvrCrntPMRSEBInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 153), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMRSEBInitialize.setStatus('current')
xcvrCrntPMRSBBEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 154), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMRSBBEInitialize.setStatus('current')
xcvrCrntPMRSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 155), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMRSESInitialize.setStatus('current')
xcvrCrntPMRSSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 156), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMRSSESInitialize.setStatus('current')
xcvrCrntPMRSOFSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 157), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMRSOFSInitialize.setStatus('current')
xcvrCrntPMCVInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 158), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMCVInitialize.setStatus('current')
xcvrCrntPMESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 159), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMESInitialize.setStatus('current')
xcvrCrntPMSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 160), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMSESInitialize.setStatus('current')
xcvrCrntPMINVBLKInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 161), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMINVBLKInitialize.setStatus('current')
xcvrCrntPMNBITCRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 162), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMNBITCRInitialize.setStatus('current')
xcvrCrntPMNBYTCRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 163), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMNBYTCRInitialize.setStatus('current')
xcvrCrntPMUNCRCDWInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 164), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMUNCRCDWInitialize.setStatus('current')
xcvrCrntPMFCSEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 165), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMFCSEInitialize.setStatus('current')
xcvrCrntPMFRDRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 166), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMFRDRInitialize.setStatus('current')
xcvrCrntPMUSIZEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 167), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMUSIZEInitialize.setStatus('current')
xcvrCrntPMOSIZEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 168), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMOSIZEInitialize.setStatus('current')
xcvrCrntPMFRGTInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 169), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMFRGTInitialize.setStatus('current')
xcvrCrntPMJABRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 170), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMJABRInitialize.setStatus('current')
xcvrCrntPMOTUEBInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 171), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMOTUEBInitialize.setStatus('current')
xcvrCrntPMOTUBBEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 172), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMOTUBBEInitialize.setStatus('current')
xcvrCrntPMOTUESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 173), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMOTUESInitialize.setStatus('current')
xcvrCrntPMOTUSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 174), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMOTUSESInitialize.setStatus('current')
xcvrCrntPMOTUOFSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 175), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMOTUOFSInitialize.setStatus('current')
xcvrCrntPMUASSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 176), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMUASSValue.setStatus('current')
xcvrCrntPMUASSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 177), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMUASSTimeStamp.setStatus('current')
xcvrCrntPMUASSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 178), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMUASSValidity.setStatus('current')
xcvrCrntPMUASSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 179), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMUASSInitialize.setStatus('current')
xcvrCrntPMRSUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 180), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMRSUASValue.setStatus('current')
xcvrCrntPMRSUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 181), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMRSUASTimeStamp.setStatus('current')
xcvrCrntPMRSUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 182), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMRSUASValidity.setStatus('current')
xcvrCrntPMRSUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 183), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMRSUASInitialize.setStatus('current')
xcvrCrntPMUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 184), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMUASValue.setStatus('current')
xcvrCrntPMUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 185), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMUASTimeStamp.setStatus('current')
xcvrCrntPMUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 186), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMUASValidity.setStatus('current')
xcvrCrntPMUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 187), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMUASInitialize.setStatus('current')
xcvrCrntPMOTUUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 188), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMOTUUASValue.setStatus('current')
xcvrCrntPMOTUUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 189), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOTUUASTimeStamp.setStatus('current')
xcvrCrntPMOTUUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 190), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOTUUASValidity.setStatus('current')
xcvrCrntPMOTUUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 191), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMOTUUASInitialize.setStatus('current')
xcvrCrntPMOTNBERValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 192), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOTNBERValue.setStatus('current')
xcvrCrntPMOTNBERTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 193), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOTNBERTimeStamp.setStatus('current')
xcvrCrntPMOTNBERValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 194), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOTNBERValidity.setStatus('current')
xcvrCrntPMOTNBERInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 195), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMOTNBERInitialize.setStatus('current')
xcvrCrntPMOTNAVGBERValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 196), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOTNAVGBERValue.setStatus('current')
xcvrCrntPMOTNAVGBERTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 197), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOTNAVGBERTimeStamp.setStatus('current')
xcvrCrntPMOTNAVGBERValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 198), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOTNAVGBERValidity.setStatus('current')
xcvrCrntPMOTNAVGBERInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 199), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMOTNAVGBERInitialize.setStatus('current')
xcvrCrntPMNBITCR64BitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 200), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMNBITCR64BitValue.setStatus('current')
xcvrCrntPMNBITCR64BitTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 201), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMNBITCR64BitTimeStamp.setStatus('current')
xcvrCrntPMNBITCR64BitValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 202), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMNBITCR64BitValidity.setStatus('current')
xcvrCrntPMNBITCR64BitInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 203), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMNBITCR64BitInitialize.setStatus('current')
xcvrCrntPMNBYTCR64BitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 204), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMNBYTCR64BitValue.setStatus('current')
xcvrCrntPMNBYTCR64BitTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 205), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMNBYTCR64BitTimeStamp.setStatus('current')
xcvrCrntPMNBYTCR64BitValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 206), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMNBYTCR64BitValidity.setStatus('current')
xcvrCrntPMNBYTCR64BitInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 207), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMNBYTCR64BitInitialize.setStatus('current')
xcvrCrntPMOPRMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 208), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPRMinValue.setStatus('current')
xcvrCrntPMOPRMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 209), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPRMinTimeStamp.setStatus('current')
xcvrCrntPMOPRMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 210), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPRMinValidity.setStatus('current')
xcvrCrntPMOPRMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 211), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMOPRMinInitialize.setStatus('current')
xcvrCrntPMOPRMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 212), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPRMaxValue.setStatus('current')
xcvrCrntPMOPRMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 213), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPRMaxTimeStamp.setStatus('current')
xcvrCrntPMOPRMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 214), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPRMaxValidity.setStatus('current')
xcvrCrntPMOPRMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 215), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMOPRMaxInitialize.setStatus('current')
xcvrCrntPMOPRAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 216), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPRAvgValue.setStatus('current')
xcvrCrntPMOPRAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 217), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPRAvgTimeStamp.setStatus('current')
xcvrCrntPMOPRAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 218), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPRAvgValidity.setStatus('current')
xcvrCrntPMOPRAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 219), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMOPRAvgInitialize.setStatus('current')
xcvrCrntPMOPTMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 220), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPTMinValue.setStatus('current')
xcvrCrntPMOPTMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 221), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPTMinTimeStamp.setStatus('current')
xcvrCrntPMOPTMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 222), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPTMinValidity.setStatus('current')
xcvrCrntPMOPTMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 223), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMOPTMinInitialize.setStatus('current')
xcvrCrntPMOPTMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 224), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPTMaxValue.setStatus('current')
xcvrCrntPMOPTMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 225), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPTMaxTimeStamp.setStatus('current')
xcvrCrntPMOPTMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 226), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPTMaxValidity.setStatus('current')
xcvrCrntPMOPTMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 227), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMOPTMaxInitialize.setStatus('current')
xcvrCrntPMOPTAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 228), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPTAvgValue.setStatus('current')
xcvrCrntPMOPTAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 229), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPTAvgTimeStamp.setStatus('current')
xcvrCrntPMOPTAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 230), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrCrntPMOPTAvgValidity.setStatus('current')
xcvrCrntPMOPTAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 3, 1, 231), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrCrntPMOPTAvgInitialize.setStatus('current')
xcvrHistPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4), )
if mibBuilder.loadTexts: xcvrHistPMTable.setStatus('current')
xcvrHistPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1), ).setIndexNames((0, "BTI-7000-MIB", "xcvrHistPMTypeIdx"), (0, "BTI-7000-MIB", "xcvrHistPMShelfIdx"), (0, "BTI-7000-MIB", "xcvrHistPMSlotIdx"), (0, "BTI-7000-MIB", "xcvrHistPMIdx"), (0, "BTI-7000-MIB", "xcvrHistPMIntervalTypeIdx"), (0, "BTI-7000-MIB", "xcvrHistPMIntervalIdx"))
if mibBuilder.loadTexts: xcvrHistPMEntry.setStatus('current')
xcvrHistPMTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 1), XcvrType())
if mibBuilder.loadTexts: xcvrHistPMTypeIdx.setStatus('current')
xcvrHistPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: xcvrHistPMShelfIdx.setStatus('current')
xcvrHistPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: xcvrHistPMSlotIdx.setStatus('current')
xcvrHistPMIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: xcvrHistPMIdx.setStatus('current')
xcvrHistPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 5), PMIntervalType())
if mibBuilder.loadTexts: xcvrHistPMIntervalTypeIdx.setStatus('current')
xcvrHistPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: xcvrHistPMIntervalIdx.setStatus('current')
xcvrHistPMOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 7), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPRValue.setStatus('current')
xcvrHistPMOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPRTimeStamp.setStatus('current')
xcvrHistPMOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 9), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPRValidity.setStatus('current')
xcvrHistPMOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 10), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPTValue.setStatus('current')
xcvrHistPMOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPTTimeStamp.setStatus('current')
xcvrHistPMOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 12), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPTValidity.setStatus('current')
xcvrHistPMTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMTempValue.setStatus('current')
xcvrHistPMTempTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMTempTimeStamp.setStatus('current')
xcvrHistPMTempValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 15), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMTempValidity.setStatus('current')
xcvrHistPMSupplyVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 16), FixedX10()).setUnits('mVolts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSupplyVoltageValue.setStatus('current')
xcvrHistPMSupplyVoltageTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 17), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSupplyVoltageTimeStamp.setStatus('current')
xcvrHistPMSupplyVoltageValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 18), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSupplyVoltageValidity.setStatus('current')
xcvrHistPMLBCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('mAmp').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMLBCValue.setStatus('current')
xcvrHistPMLBCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 20), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMLBCTimeStamp.setStatus('current')
xcvrHistPMLBCValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 21), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMLBCValidity.setStatus('current')
xcvrHistPMCVSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMCVSValue.setStatus('current')
xcvrHistPMCVSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 23), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMCVSTimeStamp.setStatus('current')
xcvrHistPMCVSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 24), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMCVSValidity.setStatus('current')
xcvrHistPMESSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMESSValue.setStatus('current')
xcvrHistPMESSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 26), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMESSTimeStamp.setStatus('current')
xcvrHistPMESSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 27), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMESSValidity.setStatus('current')
xcvrHistPMSESSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 28), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMSESSValue.setStatus('current')
xcvrHistPMSESSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 29), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSESSTimeStamp.setStatus('current')
xcvrHistPMSESSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 30), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSESSValidity.setStatus('current')
xcvrHistPMSEFSSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 31), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMSEFSSValue.setStatus('current')
xcvrHistPMSEFSSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 32), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSEFSSTimeStamp.setStatus('current')
xcvrHistPMSEFSSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 33), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSEFSSValidity.setStatus('current')
xcvrHistPMRSEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 34), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMRSEBValue.setStatus('current')
xcvrHistPMRSEBTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 35), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMRSEBTimeStamp.setStatus('current')
xcvrHistPMRSEBValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 36), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMRSEBValidity.setStatus('current')
xcvrHistPMRSBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 37), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMRSBBEValue.setStatus('current')
xcvrHistPMRSBBETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 38), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMRSBBETimeStamp.setStatus('current')
xcvrHistPMRSBBEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 39), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMRSBBEValidity.setStatus('current')
xcvrHistPMRSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 40), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMRSESValue.setStatus('current')
xcvrHistPMRSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 41), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMRSESTimeStamp.setStatus('current')
xcvrHistPMRSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 42), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMRSESValidity.setStatus('current')
xcvrHistPMRSSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 43), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMRSSESValue.setStatus('current')
xcvrHistPMRSSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 44), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMRSSESTimeStamp.setStatus('current')
xcvrHistPMRSSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 45), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMRSSESValidity.setStatus('current')
xcvrHistPMRSOFSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 46), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMRSOFSValue.setStatus('current')
xcvrHistPMRSOFSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 47), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMRSOFSTimeStamp.setStatus('current')
xcvrHistPMRSOFSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 48), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMRSOFSValidity.setStatus('current')
xcvrHistPMCVValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 49), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMCVValue.setStatus('current')
xcvrHistPMCVTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 50), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMCVTimeStamp.setStatus('current')
xcvrHistPMCVValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 51), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMCVValidity.setStatus('current')
xcvrHistPMESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 52), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMESValue.setStatus('current')
xcvrHistPMESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 53), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMESTimeStamp.setStatus('current')
xcvrHistPMESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 54), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMESValidity.setStatus('current')
xcvrHistPMSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 55), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMSESValue.setStatus('current')
xcvrHistPMSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 56), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSESTimeStamp.setStatus('current')
xcvrHistPMSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 57), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSESValidity.setStatus('current')
xcvrHistPMINVBLKValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 58), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMINVBLKValue.setStatus('current')
xcvrHistPMINVBLKTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 59), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMINVBLKTimeStamp.setStatus('current')
xcvrHistPMINVBLKValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 60), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMINVBLKValidity.setStatus('current')
xcvrHistPMNBITCRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 61), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMNBITCRValue.setStatus('current')
xcvrHistPMNBITCRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 62), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMNBITCRTimeStamp.setStatus('current')
xcvrHistPMNBITCRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 63), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMNBITCRValidity.setStatus('current')
xcvrHistPMNBYTCRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 64), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMNBYTCRValue.setStatus('current')
xcvrHistPMNBYTCRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 65), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMNBYTCRTimeStamp.setStatus('current')
xcvrHistPMNBYTCRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 66), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMNBYTCRValidity.setStatus('current')
xcvrHistPMUNCRCDWValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 67), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMUNCRCDWValue.setStatus('current')
xcvrHistPMUNCRCDWTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 68), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMUNCRCDWTimeStamp.setStatus('current')
xcvrHistPMUNCRCDWValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 69), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMUNCRCDWValidity.setStatus('current')
xcvrHistPMTBYCRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 70), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMTBYCRXValue.setStatus('current')
xcvrHistPMTBYCRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 71), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMTBYCRXTimeStamp.setStatus('current')
xcvrHistPMTBYCRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 72), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMTBYCRXValidity.setStatus('current')
xcvrHistPMTBYCRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 73), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMTBYCRXInitialize.setStatus('current')
xcvrHistPMTFRCRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 74), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMTFRCRXValue.setStatus('current')
xcvrHistPMTFRCRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 75), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMTFRCRXTimeStamp.setStatus('current')
xcvrHistPMTFRCRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 76), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMTFRCRXValidity.setStatus('current')
xcvrHistPMTFRCRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 77), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMTFRCRXInitialize.setStatus('current')
xcvrHistPMBCSTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 78), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMBCSTValue.setStatus('current')
xcvrHistPMBCSTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 79), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMBCSTTimeStamp.setStatus('current')
xcvrHistPMBCSTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 80), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMBCSTValidity.setStatus('current')
xcvrHistPMBCSTInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 81), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMBCSTInitialize.setStatus('current')
xcvrHistPMMCSTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 82), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMMCSTValue.setStatus('current')
xcvrHistPMMCSTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 83), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMMCSTTimeStamp.setStatus('current')
xcvrHistPMMCSTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 84), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMMCSTValidity.setStatus('current')
xcvrHistPMMCSTInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 85), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMMCSTInitialize.setStatus('current')
xcvrHistPMSIZE64Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 86), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSIZE64Value.setStatus('current')
xcvrHistPMSIZE64TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 87), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSIZE64TimeStamp.setStatus('current')
xcvrHistPMSIZE64Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 88), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSIZE64Validity.setStatus('current')
xcvrHistPMSIZE64Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 89), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMSIZE64Initialize.setStatus('current')
xcvrHistPMSIZE65To127Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 90), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSIZE65To127Value.setStatus('current')
xcvrHistPMSIZE65To127TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 91), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSIZE65To127TimeStamp.setStatus('current')
xcvrHistPMSIZE65To127Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 92), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSIZE65To127Validity.setStatus('current')
xcvrHistPMSIZE65To127Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 93), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMSIZE65To127Initialize.setStatus('current')
xcvrHistPMSIZE128To255Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 94), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSIZE128To255Value.setStatus('current')
xcvrHistPMSIZE128To255TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 95), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSIZE128To255TimeStamp.setStatus('current')
xcvrHistPMSIZE128To255Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 96), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSIZE128To255Validity.setStatus('current')
xcvrHistPMSIZE128To255Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 97), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMSIZE128To255Initialize.setStatus('current')
xcvrHistPMSIZE256To511Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 98), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSIZE256To511Value.setStatus('current')
xcvrHistPMSIZE256To511TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 99), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSIZE256To511TimeStamp.setStatus('current')
xcvrHistPMSIZE256To511Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 100), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSIZE256To511Validity.setStatus('current')
xcvrHistPMSIZE256To511Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 101), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMSIZE256To511Initialize.setStatus('current')
xcvrHistPMSIZE512To1023Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 102), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSIZE512To1023Value.setStatus('current')
xcvrHistPMSIZE512To1023TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 103), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSIZE512To1023TimeStamp.setStatus('current')
xcvrHistPMSIZE512To1023Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 104), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSIZE512To1023Validity.setStatus('current')
xcvrHistPMSIZE512To1023Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 105), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMSIZE512To1023Initialize.setStatus('current')
xcvrHistPMSIZE1024To1518Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 106), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSIZE1024To1518Value.setStatus('current')
xcvrHistPMSIZE1024To1518TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 107), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSIZE1024To1518TimeStamp.setStatus('current')
xcvrHistPMSIZE1024To1518Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 108), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSIZE1024To1518Validity.setStatus('current')
xcvrHistPMSIZE1024To1518Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 109), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMSIZE1024To1518Initialize.setStatus('current')
xcvrHistPMSIZEOver1518Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 110), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSIZEOver1518Value.setStatus('current')
xcvrHistPMSIZEOver1518TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 111), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSIZEOver1518TimeStamp.setStatus('current')
xcvrHistPMSIZEOver1518Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 112), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSIZEOver1518Validity.setStatus('current')
xcvrHistPMSIZEOver1518Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 113), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMSIZEOver1518Initialize.setStatus('current')
xcvrHistPMFCSEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 114), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMFCSEValue.setStatus('current')
xcvrHistPMFCSETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 115), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMFCSETimeStamp.setStatus('current')
xcvrHistPMFCSEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 116), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMFCSEValidity.setStatus('current')
xcvrHistPMFRDRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 117), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMFRDRValue.setStatus('current')
xcvrHistPMFRDRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 118), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMFRDRTimeStamp.setStatus('current')
xcvrHistPMFRDRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 119), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMFRDRValidity.setStatus('current')
xcvrHistPMUSIZEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 120), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMUSIZEValue.setStatus('current')
xcvrHistPMUSIZETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 121), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMUSIZETimeStamp.setStatus('current')
xcvrHistPMUSIZEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 122), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMUSIZEValidity.setStatus('current')
xcvrHistPMOSIZEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 123), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMOSIZEValue.setStatus('current')
xcvrHistPMOSIZETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 124), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOSIZETimeStamp.setStatus('current')
xcvrHistPMOSIZEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 125), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOSIZEValidity.setStatus('current')
xcvrHistPMFRGTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 126), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMFRGTValue.setStatus('current')
xcvrHistPMFRGTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 127), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMFRGTTimeStamp.setStatus('current')
xcvrHistPMFRGTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 128), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMFRGTValidity.setStatus('current')
xcvrHistPMJABRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 129), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMJABRValue.setStatus('current')
xcvrHistPMJABRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 130), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMJABRTimeStamp.setStatus('current')
xcvrHistPMJABRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 131), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMJABRValidity.setStatus('current')
xcvrHistPMOTUEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 132), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMOTUEBValue.setStatus('current')
xcvrHistPMOTUEBTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 133), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOTUEBTimeStamp.setStatus('current')
xcvrHistPMOTUEBValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 134), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOTUEBValidity.setStatus('current')
xcvrHistPMOTUBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 135), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMOTUBBEValue.setStatus('current')
xcvrHistPMOTUBBETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 136), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOTUBBETimeStamp.setStatus('current')
xcvrHistPMOTUBBEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 137), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOTUBBEValidity.setStatus('current')
xcvrHistPMOTUESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 138), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMOTUESValue.setStatus('current')
xcvrHistPMOTUESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 139), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOTUESTimeStamp.setStatus('current')
xcvrHistPMOTUESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 140), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOTUESValidity.setStatus('current')
xcvrHistPMOTUSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 141), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMOTUSESValue.setStatus('current')
xcvrHistPMOTUSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 142), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOTUSESTimeStamp.setStatus('current')
xcvrHistPMOTUSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 143), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOTUSESValidity.setStatus('current')
xcvrHistPMOTUOFSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 144), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMOTUOFSValue.setStatus('current')
xcvrHistPMOTUOFSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 145), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOTUOFSTimeStamp.setStatus('current')
xcvrHistPMOTUOFSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 146), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOTUOFSValidity.setStatus('current')
xcvrHistPMSupplyVoltage2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 147), FixedX10()).setUnits('mVolts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSupplyVoltage2Value.setStatus('current')
xcvrHistPMSupplyVoltage2TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 148), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSupplyVoltage2TimeStamp.setStatus('current')
xcvrHistPMSupplyVoltage2Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 149), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMSupplyVoltage2Validity.setStatus('current')
xcvrHistPMCVSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 150), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMCVSInitialize.setStatus('current')
xcvrHistPMESSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 151), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMESSInitialize.setStatus('current')
xcvrHistPMSESSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 152), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMSESSInitialize.setStatus('current')
xcvrHistPMSEFSSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 153), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMSEFSSInitialize.setStatus('current')
xcvrHistPMRSEBInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 154), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMRSEBInitialize.setStatus('current')
xcvrHistPMRSBBEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 155), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMRSBBEInitialize.setStatus('current')
xcvrHistPMRSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 156), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMRSESInitialize.setStatus('current')
xcvrHistPMRSSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 157), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMRSSESInitialize.setStatus('current')
xcvrHistPMRSOFSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 158), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMRSOFSInitialize.setStatus('current')
xcvrHistPMCVInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 159), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMCVInitialize.setStatus('current')
xcvrHistPMESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 160), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMESInitialize.setStatus('current')
xcvrHistPMSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 161), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMSESInitialize.setStatus('current')
xcvrHistPMINVBLKInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 162), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMINVBLKInitialize.setStatus('current')
xcvrHistPMNBITCRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 163), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMNBITCRInitialize.setStatus('current')
xcvrHistPMNBYTCRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 164), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMNBYTCRInitialize.setStatus('current')
xcvrHistPMUNCRCDWInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 165), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMUNCRCDWInitialize.setStatus('current')
xcvrHistPMFCSEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 166), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMFCSEInitialize.setStatus('current')
xcvrHistPMFRDRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 167), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMFRDRInitialize.setStatus('current')
xcvrHistPMUSIZEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 168), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMUSIZEInitialize.setStatus('current')
xcvrHistPMOSIZEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 169), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMOSIZEInitialize.setStatus('current')
xcvrHistPMFRGTInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 170), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMFRGTInitialize.setStatus('current')
xcvrHistPMJABRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 171), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMJABRInitialize.setStatus('current')
xcvrHistPMOTUEBInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 172), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMOTUEBInitialize.setStatus('current')
xcvrHistPMOTUBBEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 173), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMOTUBBEInitialize.setStatus('current')
xcvrHistPMOTUESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 174), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMOTUESInitialize.setStatus('current')
xcvrHistPMOTUSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 175), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMOTUSESInitialize.setStatus('current')
xcvrHistPMOTUOFSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 176), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMOTUOFSInitialize.setStatus('current')
xcvrHistPMUASSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 177), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMUASSValue.setStatus('current')
xcvrHistPMUASSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 178), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMUASSTimeStamp.setStatus('current')
xcvrHistPMUASSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 179), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMUASSValidity.setStatus('current')
xcvrHistPMUASSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 180), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMUASSInitialize.setStatus('current')
xcvrHistPMRSUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 181), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMRSUASValue.setStatus('current')
xcvrHistPMRSUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 182), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMRSUASTimeStamp.setStatus('current')
xcvrHistPMRSUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 183), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMRSUASValidity.setStatus('current')
xcvrHistPMRSUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 184), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMRSUASInitialize.setStatus('current')
xcvrHistPMUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 185), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMUASValue.setStatus('current')
xcvrHistPMUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 186), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMUASTimeStamp.setStatus('current')
xcvrHistPMUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 187), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMUASValidity.setStatus('current')
xcvrHistPMUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 188), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMUASInitialize.setStatus('current')
xcvrHistPMOTUUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 189), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMOTUUASValue.setStatus('current')
xcvrHistPMOTUUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 190), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOTUUASTimeStamp.setStatus('current')
xcvrHistPMOTUUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 191), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOTUUASValidity.setStatus('current')
xcvrHistPMOTUUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 192), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMOTUUASInitialize.setStatus('current')
xcvrHistPMOTNBERValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 193), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOTNBERValue.setStatus('current')
xcvrHistPMOTNBERTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 194), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOTNBERTimeStamp.setStatus('current')
xcvrHistPMOTNBERValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 195), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOTNBERValidity.setStatus('current')
xcvrHistPMOTNBERInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 196), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMOTNBERInitialize.setStatus('current')
xcvrHistPMOTNAVGBERValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 197), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOTNAVGBERValue.setStatus('current')
xcvrHistPMOTNAVGBERTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 198), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOTNAVGBERTimeStamp.setStatus('current')
xcvrHistPMOTNAVGBERValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 199), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOTNAVGBERValidity.setStatus('current')
xcvrHistPMOTNAVGBERInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 200), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMOTNAVGBERInitialize.setStatus('current')
xcvrHistPMNBITCR64BitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 201), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMNBITCR64BitValue.setStatus('current')
xcvrHistPMNBITCR64BitTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 202), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMNBITCR64BitTimeStamp.setStatus('current')
xcvrHistPMNBITCR64BitValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 203), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMNBITCR64BitValidity.setStatus('current')
xcvrHistPMNBITCR64BitInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 204), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMNBITCR64BitInitialize.setStatus('current')
xcvrHistPMNBYTCR64BitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 205), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMNBYTCR64BitValue.setStatus('current')
xcvrHistPMNBYTCR64BitTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 206), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMNBYTCR64BitTimeStamp.setStatus('current')
xcvrHistPMNBYTCR64BitValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 207), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMNBYTCR64BitValidity.setStatus('current')
xcvrHistPMNBYTCR64BitInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 208), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMNBYTCR64BitInitialize.setStatus('current')
xcvrHistPMOPRMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 209), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPRMinValue.setStatus('current')
xcvrHistPMOPRMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 210), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPRMinTimeStamp.setStatus('current')
xcvrHistPMOPRMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 211), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPRMinValidity.setStatus('current')
xcvrHistPMOPRMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 212), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMOPRMinInitialize.setStatus('current')
xcvrHistPMOPRMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 213), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPRMaxValue.setStatus('current')
xcvrHistPMOPRMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 214), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPRMaxTimeStamp.setStatus('current')
xcvrHistPMOPRMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 215), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPRMaxValidity.setStatus('current')
xcvrHistPMOPRMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 216), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMOPRMaxInitialize.setStatus('current')
xcvrHistPMOPRAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 217), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPRAvgValue.setStatus('current')
xcvrHistPMOPRAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 218), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPRAvgTimeStamp.setStatus('current')
xcvrHistPMOPRAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 219), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPRAvgValidity.setStatus('current')
xcvrHistPMOPRAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 220), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMOPRAvgInitialize.setStatus('current')
xcvrHistPMOPTMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 221), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPTMinValue.setStatus('current')
xcvrHistPMOPTMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 222), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPTMinTimeStamp.setStatus('current')
xcvrHistPMOPTMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 223), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPTMinValidity.setStatus('current')
xcvrHistPMOPTMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 224), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMOPTMinInitialize.setStatus('current')
xcvrHistPMOPTMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 225), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPTMaxValue.setStatus('current')
xcvrHistPMOPTMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 226), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPTMaxTimeStamp.setStatus('current')
xcvrHistPMOPTMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 227), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPTMaxValidity.setStatus('current')
xcvrHistPMOPTMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 228), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMOPTMaxInitialize.setStatus('current')
xcvrHistPMOPTAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 229), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPTAvgValue.setStatus('current')
xcvrHistPMOPTAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 230), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPTAvgTimeStamp.setStatus('current')
xcvrHistPMOPTAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 231), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xcvrHistPMOPTAvgValidity.setStatus('current')
xcvrHistPMOPTAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 4, 1, 232), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrHistPMOPTAvgInitialize.setStatus('current')
xcvrPMThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5), )
if mibBuilder.loadTexts: xcvrPMThresholdTable.setStatus('current')
xcvrPMThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1), ).setIndexNames((0, "BTI-7000-MIB", "xcvrPMThresholdTypeIdx"), (0, "BTI-7000-MIB", "xcvrPMThresholdShelfIdx"), (0, "BTI-7000-MIB", "xcvrPMThresholdSlotIdx"), (0, "BTI-7000-MIB", "xcvrPMThresholdIdx"), (0, "BTI-7000-MIB", "xcvrPMThresholdIntervalTypeIdx"))
if mibBuilder.loadTexts: xcvrPMThresholdEntry.setStatus('current')
xcvrPMThresholdTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 1), XcvrType())
if mibBuilder.loadTexts: xcvrPMThresholdTypeIdx.setStatus('current')
xcvrPMThresholdShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: xcvrPMThresholdShelfIdx.setStatus('current')
xcvrPMThresholdSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: xcvrPMThresholdSlotIdx.setStatus('current')
xcvrPMThresholdIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: xcvrPMThresholdIdx.setStatus('current')
xcvrPMThresholdIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 5), PMIntervalType())
if mibBuilder.loadTexts: xcvrPMThresholdIntervalTypeIdx.setStatus('current')
xcvrPMThresholdCVSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdCVSValue.setStatus('current')
xcvrPMThresholdESSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdESSValue.setStatus('current')
xcvrPMThresholdSESSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdSESSValue.setStatus('current')
xcvrPMThresholdSEFSSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdSEFSSValue.setStatus('current')
xcvrPMThresholdRSEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdRSEBValue.setStatus('current')
xcvrPMThresholdRSBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdRSBBEValue.setStatus('current')
xcvrPMThresholdRSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdRSESValue.setStatus('current')
xcvrPMThresholdRSSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdRSSESValue.setStatus('current')
xcvrPMThresholdRSOFSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdRSOFSValue.setStatus('current')
xcvrPMThresholdCVValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdCVValue.setStatus('current')
xcvrPMThresholdESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdESValue.setStatus('current')
xcvrPMThresholdSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdSESValue.setStatus('current')
xcvrPMThresholdINVBLKValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdINVBLKValue.setStatus('current')
xcvrPMThresholdUNCRCDWValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdUNCRCDWValue.setStatus('current')
xcvrPMThresholdFCSEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdFCSEValue.setStatus('current')
xcvrPMThresholdFRDRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdFRDRValue.setStatus('current')
xcvrPMThresholdUSIZEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdUSIZEValue.setStatus('current')
xcvrPMThresholdOSIZEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdOSIZEValue.setStatus('current')
xcvrPMThresholdFRGTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 26), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdFRGTValue.setStatus('current')
xcvrPMThresholdJABRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 27), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdJABRValue.setStatus('current')
xcvrPMThresholdOTUEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 28), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdOTUEBValue.setStatus('current')
xcvrPMThresholdOTUBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 29), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdOTUBBEValue.setStatus('current')
xcvrPMThresholdOTUESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 30), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdOTUESValue.setStatus('current')
xcvrPMThresholdOTUSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 31), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdOTUSESValue.setStatus('current')
xcvrPMThresholdOTUOFSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 32), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdOTUOFSValue.setStatus('current')
xcvrPMThresholdUASSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 33), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdUASSValue.setStatus('current')
xcvrPMThresholdRSUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 34), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdRSUASValue.setStatus('current')
xcvrPMThresholdUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 35), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdUASValue.setStatus('current')
xcvrPMThresholdOTUUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 5, 1, 36), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrPMThresholdOTUUASValue.setStatus('current')
amdCrntPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6), )
if mibBuilder.loadTexts: amdCrntPMTable.setStatus('obsolete')
amdCrntPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1), ).setIndexNames((0, "BTI-7000-MIB", "amdCrntPMTypeIdx"), (0, "BTI-7000-MIB", "amdCrntPMShelfIdx"), (0, "BTI-7000-MIB", "amdCrntPMSlotIdx"), (0, "BTI-7000-MIB", "amdCrntPMLineIdx"), (0, "BTI-7000-MIB", "amdCrntPMPortIdx"), (0, "BTI-7000-MIB", "amdCrntPMIntervalTypeIdx"))
if mibBuilder.loadTexts: amdCrntPMEntry.setStatus('obsolete')
amdCrntPMTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 1), AmdType())
if mibBuilder.loadTexts: amdCrntPMTypeIdx.setStatus('obsolete')
amdCrntPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: amdCrntPMShelfIdx.setStatus('obsolete')
amdCrntPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: amdCrntPMSlotIdx.setStatus('obsolete')
amdCrntPMLineIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: amdCrntPMLineIdx.setStatus('obsolete')
amdCrntPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 5), AmdPortType())
if mibBuilder.loadTexts: amdCrntPMPortIdx.setStatus('obsolete')
amdCrntPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 6), PMIntervalType())
if mibBuilder.loadTexts: amdCrntPMIntervalTypeIdx.setStatus('obsolete')
amdCrntPMOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 7), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: amdCrntPMOPRValue.setStatus('obsolete')
amdCrntPMOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amdCrntPMOPRTimeStamp.setStatus('obsolete')
amdCrntPMOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 9), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amdCrntPMOPRValidity.setStatus('obsolete')
amdCrntPMOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 10), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: amdCrntPMOPTValue.setStatus('obsolete')
amdCrntPMOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amdCrntPMOPTTimeStamp.setStatus('obsolete')
amdCrntPMOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 12), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amdCrntPMOPTValidity.setStatus('obsolete')
amdCrntPMVOAValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 13), FixedX10()).setUnits('dB/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: amdCrntPMVOAValue.setStatus('obsolete')
amdCrntPMVOATimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amdCrntPMVOATimeStamp.setStatus('obsolete')
amdCrntPMVOAValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 15), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amdCrntPMVOAValidity.setStatus('obsolete')
amdCrntPMLitChnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: amdCrntPMLitChnValue.setStatus('obsolete')
amdCrntPMLitChnTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 17), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amdCrntPMLitChnTimeStamp.setStatus('obsolete')
amdCrntPMLitChnValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 6, 1, 18), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amdCrntPMLitChnValidity.setStatus('obsolete')
amdHistPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7), )
if mibBuilder.loadTexts: amdHistPMTable.setStatus('obsolete')
amdHistPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1), ).setIndexNames((0, "BTI-7000-MIB", "amdHistPMTypeIdx"), (0, "BTI-7000-MIB", "amdHistPMShelfIdx"), (0, "BTI-7000-MIB", "amdHistPMSlotIdx"), (0, "BTI-7000-MIB", "amdHistPMLineIdx"), (0, "BTI-7000-MIB", "amdHistPMPortIdx"), (0, "BTI-7000-MIB", "amdHistPMIntervalTypeIdx"), (0, "BTI-7000-MIB", "amdHistPMIntervalIdx"))
if mibBuilder.loadTexts: amdHistPMEntry.setStatus('obsolete')
amdHistPMTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 1), AmdType())
if mibBuilder.loadTexts: amdHistPMTypeIdx.setStatus('obsolete')
amdHistPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: amdHistPMShelfIdx.setStatus('obsolete')
amdHistPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: amdHistPMSlotIdx.setStatus('obsolete')
amdHistPMLineIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: amdHistPMLineIdx.setStatus('obsolete')
amdHistPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 5), AmdPortType())
if mibBuilder.loadTexts: amdHistPMPortIdx.setStatus('obsolete')
amdHistPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 6), PMIntervalType())
if mibBuilder.loadTexts: amdHistPMIntervalTypeIdx.setStatus('obsolete')
amdHistPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: amdHistPMIntervalIdx.setStatus('obsolete')
amdHistPMOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 8), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: amdHistPMOPRValue.setStatus('obsolete')
amdHistPMOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amdHistPMOPRTimeStamp.setStatus('obsolete')
amdHistPMOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 10), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amdHistPMOPRValidity.setStatus('obsolete')
amdHistPMOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 11), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: amdHistPMOPTValue.setStatus('obsolete')
amdHistPMOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amdHistPMOPTTimeStamp.setStatus('obsolete')
amdHistPMOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 13), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amdHistPMOPTValidity.setStatus('obsolete')
amdHistPMVOAValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 14), FixedX10()).setUnits('dB/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: amdHistPMVOAValue.setStatus('obsolete')
amdHistPMVOATimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 15), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amdHistPMVOATimeStamp.setStatus('obsolete')
amdHistPMVOAValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 16), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amdHistPMVOAValidity.setStatus('obsolete')
amdHistPMLitChnValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: amdHistPMLitChnValue.setStatus('obsolete')
amdHistPMLitChnTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 18), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amdHistPMLitChnTimeStamp.setStatus('obsolete')
amdHistPMLitChnValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 7, 1, 19), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amdHistPMLitChnValidity.setStatus('obsolete')
ocnCrntPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8), )
if mibBuilder.loadTexts: ocnCrntPMTable.setStatus('current')
ocnCrntPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1), ).setIndexNames((0, "BTI-7000-MIB", "ocnCrntPMTypeIdx"), (0, "BTI-7000-MIB", "ocnCrntPMShelfIdx"), (0, "BTI-7000-MIB", "ocnCrntPMSlotIdx"), (0, "BTI-7000-MIB", "ocnCrntPMPortIdx"), (0, "BTI-7000-MIB", "ocnCrntPMIntervalTypeIdx"))
if mibBuilder.loadTexts: ocnCrntPMEntry.setStatus('current')
ocnCrntPMTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 1), OcnType())
if mibBuilder.loadTexts: ocnCrntPMTypeIdx.setStatus('current')
ocnCrntPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: ocnCrntPMShelfIdx.setStatus('current')
ocnCrntPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: ocnCrntPMSlotIdx.setStatus('current')
ocnCrntPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: ocnCrntPMPortIdx.setStatus('current')
ocnCrntPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 5), PMIntervalType())
if mibBuilder.loadTexts: ocnCrntPMIntervalTypeIdx.setStatus('current')
ocnCrntPMOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 6), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPRValue.setStatus('current')
ocnCrntPMOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPRTimeStamp.setStatus('current')
ocnCrntPMOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 8), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPRValidity.setStatus('current')
ocnCrntPMOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 9), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPTValue.setStatus('current')
ocnCrntPMOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPTTimeStamp.setStatus('current')
ocnCrntPMOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 11), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPTValidity.setStatus('current')
ocnCrntPMTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMTempValue.setStatus('current')
ocnCrntPMTempTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMTempTimeStamp.setStatus('current')
ocnCrntPMTempValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 14), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMTempValidity.setStatus('current')
ocnCrntPMSupplyVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 15), FixedX10()).setUnits('mVolts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMSupplyVoltageValue.setStatus('current')
ocnCrntPMSupplyVoltageTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMSupplyVoltageTimeStamp.setStatus('current')
ocnCrntPMSupplyVoltageValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 17), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMSupplyVoltageValidity.setStatus('current')
ocnCrntPMLBCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('mAmp').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMLBCValue.setStatus('current')
ocnCrntPMLBCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 19), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMLBCTimeStamp.setStatus('current')
ocnCrntPMLBCValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 20), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMLBCValidity.setStatus('current')
ocnCrntPMCVSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMCVSValue.setStatus('current')
ocnCrntPMCVSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 22), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMCVSTimeStamp.setStatus('current')
ocnCrntPMCVSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 23), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMCVSValidity.setStatus('current')
ocnCrntPMESSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMESSValue.setStatus('current')
ocnCrntPMESSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 25), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMESSTimeStamp.setStatus('current')
ocnCrntPMESSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 26), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMESSValidity.setStatus('current')
ocnCrntPMSESSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 27), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMSESSValue.setStatus('current')
ocnCrntPMSESSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 28), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMSESSTimeStamp.setStatus('current')
ocnCrntPMSESSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 29), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMSESSValidity.setStatus('current')
ocnCrntPMSEFSSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 30), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMSEFSSValue.setStatus('current')
ocnCrntPMSEFSSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 31), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMSEFSSTimeStamp.setStatus('current')
ocnCrntPMSEFSSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 32), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMSEFSSValidity.setStatus('current')
ocnCrntPMSupplyVoltage2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 33), FixedX10()).setUnits('mVolts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMSupplyVoltage2Value.setStatus('current')
ocnCrntPMSupplyVoltage2TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 34), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMSupplyVoltage2TimeStamp.setStatus('current')
ocnCrntPMSupplyVoltage2Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 35), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMSupplyVoltage2Validity.setStatus('current')
ocnCrntPMCVLValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 36), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMCVLValue.setStatus('current')
ocnCrntPMCVLTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 37), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMCVLTimeStamp.setStatus('current')
ocnCrntPMCVLValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 38), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMCVLValidity.setStatus('current')
ocnCrntPMESLValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 39), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMESLValue.setStatus('current')
ocnCrntPMESLTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 40), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMESLTimeStamp.setStatus('current')
ocnCrntPMESLValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 41), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMESLValidity.setStatus('current')
ocnCrntPMSESLValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 42), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMSESLValue.setStatus('current')
ocnCrntPMSESLTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 43), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMSESLTimeStamp.setStatus('current')
ocnCrntPMSESLValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 44), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMSESLValidity.setStatus('current')
ocnCrntPMUASLValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 45), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMUASLValue.setStatus('current')
ocnCrntPMUASLTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 46), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMUASLTimeStamp.setStatus('current')
ocnCrntPMUASLValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 47), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMUASLValidity.setStatus('current')
ocnCrntPMOTUEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 48), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMOTUEBValue.setStatus('current')
ocnCrntPMOTUEBTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 49), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOTUEBTimeStamp.setStatus('current')
ocnCrntPMOTUEBValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 50), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOTUEBValidity.setStatus('current')
ocnCrntPMOTUBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 51), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMOTUBBEValue.setStatus('current')
ocnCrntPMOTUBBETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 52), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOTUBBETimeStamp.setStatus('current')
ocnCrntPMOTUBBEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 53), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOTUBBEValidity.setStatus('current')
ocnCrntPMOTUESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 54), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMOTUESValue.setStatus('current')
ocnCrntPMOTUESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 55), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOTUESTimeStamp.setStatus('current')
ocnCrntPMOTUESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 56), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOTUESValidity.setStatus('current')
ocnCrntPMOTUSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 57), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMOTUSESValue.setStatus('current')
ocnCrntPMOTUSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 58), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOTUSESTimeStamp.setStatus('current')
ocnCrntPMOTUSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 59), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOTUSESValidity.setStatus('current')
ocnCrntPMOTUOFSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 60), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMOTUOFSValue.setStatus('current')
ocnCrntPMOTUOFSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 61), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOTUOFSTimeStamp.setStatus('current')
ocnCrntPMOTUOFSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 62), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOTUOFSValidity.setStatus('current')
ocnCrntPMNBITCRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 63), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMNBITCRValue.setStatus('current')
ocnCrntPMNBITCRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 64), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMNBITCRTimeStamp.setStatus('current')
ocnCrntPMNBITCRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 65), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMNBITCRValidity.setStatus('current')
ocnCrntPMNBYTCRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 66), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMNBYTCRValue.setStatus('current')
ocnCrntPMNBYTCRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 67), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMNBYTCRTimeStamp.setStatus('current')
ocnCrntPMNBYTCRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 68), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMNBYTCRValidity.setStatus('current')
ocnCrntPMUNCRCDWValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 69), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMUNCRCDWValue.setStatus('current')
ocnCrntPMUNCRCDWTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 70), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMUNCRCDWTimeStamp.setStatus('current')
ocnCrntPMUNCRCDWValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 71), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMUNCRCDWValidity.setStatus('current')
ocnCrntPMCVSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 72), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMCVSInitialize.setStatus('current')
ocnCrntPMESSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 73), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMESSInitialize.setStatus('current')
ocnCrntPMSESSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 74), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMSESSInitialize.setStatus('current')
ocnCrntPMSEFSSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 75), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMSEFSSInitialize.setStatus('current')
ocnCrntPMCVLInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 76), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMCVLInitialize.setStatus('current')
ocnCrntPMESLInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 77), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMESLInitialize.setStatus('current')
ocnCrntPMSESLInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 78), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMSESLInitialize.setStatus('current')
ocnCrntPMUASLInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 79), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMUASLInitialize.setStatus('current')
ocnCrntPMOTUEBInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 80), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMOTUEBInitialize.setStatus('current')
ocnCrntPMOTUBBEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 81), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMOTUBBEInitialize.setStatus('current')
ocnCrntPMOTUESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 82), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMOTUESInitialize.setStatus('current')
ocnCrntPMOTUSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 83), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMOTUSESInitialize.setStatus('current')
ocnCrntPMOTUOFSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 84), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMOTUOFSInitialize.setStatus('current')
ocnCrntPMNBITCRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 85), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMNBITCRInitialize.setStatus('current')
ocnCrntPMNBYTCRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 86), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMNBYTCRInitialize.setStatus('current')
ocnCrntPMUNCRCDWInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 87), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMUNCRCDWInitialize.setStatus('current')
ocnCrntPMOTNBERValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 88), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOTNBERValue.setStatus('current')
ocnCrntPMOTNBERTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 89), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOTNBERTimeStamp.setStatus('current')
ocnCrntPMOTNBERValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 90), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOTNBERValidity.setStatus('current')
ocnCrntPMOTNBERInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 91), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMOTNBERInitialize.setStatus('current')
ocnCrntPMOTNAVGBERValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 92), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOTNAVGBERValue.setStatus('current')
ocnCrntPMOTNAVGBERTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 93), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOTNAVGBERTimeStamp.setStatus('current')
ocnCrntPMOTNAVGBERValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 94), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOTNAVGBERValidity.setStatus('current')
ocnCrntPMOTNAVGBERInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 95), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMOTNAVGBERInitialize.setStatus('current')
ocnCrntPMNBITCR64BitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 96), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMNBITCR64BitValue.setStatus('current')
ocnCrntPMNBITCR64BitTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 97), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMNBITCR64BitTimeStamp.setStatus('current')
ocnCrntPMNBITCR64BitValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 98), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMNBITCR64BitValidity.setStatus('current')
ocnCrntPMNBITCR64BitInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 99), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMNBITCR64BitInitialize.setStatus('current')
ocnCrntPMNBYTCR64BitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 100), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMNBYTCR64BitValue.setStatus('current')
ocnCrntPMNBYTCR64BitTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 101), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMNBYTCR64BitTimeStamp.setStatus('current')
ocnCrntPMNBYTCR64BitValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 102), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMNBYTCR64BitValidity.setStatus('current')
ocnCrntPMNBYTCR64BitInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 103), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMNBYTCR64BitInitialize.setStatus('current')
ocnCrntPMUASSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 104), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMUASSValue.setStatus('current')
ocnCrntPMUASSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 105), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMUASSTimeStamp.setStatus('current')
ocnCrntPMUASSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 106), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMUASSValidity.setStatus('current')
ocnCrntPMUASSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 107), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMUASSInitialize.setStatus('current')
ocnCrntPMOTUUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 108), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMOTUUASValue.setStatus('current')
ocnCrntPMOTUUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 109), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOTUUASTimeStamp.setStatus('current')
ocnCrntPMOTUUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 110), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOTUUASValidity.setStatus('current')
ocnCrntPMOTUUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 111), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMOTUUASInitialize.setStatus('current')
ocnCrntPMOPRMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 112), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPRMinValue.setStatus('current')
ocnCrntPMOPRMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 113), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPRMinTimeStamp.setStatus('current')
ocnCrntPMOPRMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 114), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPRMinValidity.setStatus('current')
ocnCrntPMOPRMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 115), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMOPRMinInitialize.setStatus('current')
ocnCrntPMOPRMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 116), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPRMaxValue.setStatus('current')
ocnCrntPMOPRMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 117), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPRMaxTimeStamp.setStatus('current')
ocnCrntPMOPRMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 118), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPRMaxValidity.setStatus('current')
ocnCrntPMOPRMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 119), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMOPRMaxInitialize.setStatus('current')
ocnCrntPMOPRAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 120), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPRAvgValue.setStatus('current')
ocnCrntPMOPRAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 121), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPRAvgTimeStamp.setStatus('current')
ocnCrntPMOPRAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 122), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPRAvgValidity.setStatus('current')
ocnCrntPMOPRAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 123), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMOPRAvgInitialize.setStatus('current')
ocnCrntPMOPTMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 124), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPTMinValue.setStatus('current')
ocnCrntPMOPTMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 125), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPTMinTimeStamp.setStatus('current')
ocnCrntPMOPTMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 126), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPTMinValidity.setStatus('current')
ocnCrntPMOPTMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 127), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMOPTMinInitialize.setStatus('current')
ocnCrntPMOPTMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 128), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPTMaxValue.setStatus('current')
ocnCrntPMOPTMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 129), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPTMaxTimeStamp.setStatus('current')
ocnCrntPMOPTMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 130), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPTMaxValidity.setStatus('current')
ocnCrntPMOPTMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 131), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMOPTMaxInitialize.setStatus('current')
ocnCrntPMOPTAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 132), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPTAvgValue.setStatus('current')
ocnCrntPMOPTAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 133), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPTAvgTimeStamp.setStatus('current')
ocnCrntPMOPTAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 134), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnCrntPMOPTAvgValidity.setStatus('current')
ocnCrntPMOPTAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 8, 1, 135), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnCrntPMOPTAvgInitialize.setStatus('current')
ocnHistPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9), )
if mibBuilder.loadTexts: ocnHistPMTable.setStatus('current')
ocnHistPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1), ).setIndexNames((0, "BTI-7000-MIB", "ocnHistPMTypeIdx"), (0, "BTI-7000-MIB", "ocnHistPMShelfIdx"), (0, "BTI-7000-MIB", "ocnHistPMSlotIdx"), (0, "BTI-7000-MIB", "ocnHistPMPortIdx"), (0, "BTI-7000-MIB", "ocnHistPMIntervalTypeIdx"), (0, "BTI-7000-MIB", "ocnHistPMIntervalIdx"))
if mibBuilder.loadTexts: ocnHistPMEntry.setStatus('current')
ocnHistPMTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 1), OcnType())
if mibBuilder.loadTexts: ocnHistPMTypeIdx.setStatus('current')
ocnHistPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: ocnHistPMShelfIdx.setStatus('current')
ocnHistPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: ocnHistPMSlotIdx.setStatus('current')
ocnHistPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: ocnHistPMPortIdx.setStatus('current')
ocnHistPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 5), PMIntervalType())
if mibBuilder.loadTexts: ocnHistPMIntervalTypeIdx.setStatus('current')
ocnHistPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: ocnHistPMIntervalIdx.setStatus('current')
ocnHistPMOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 7), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPRValue.setStatus('current')
ocnHistPMOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPRTimeStamp.setStatus('current')
ocnHistPMOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 9), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPRValidity.setStatus('current')
ocnHistPMOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 10), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPTValue.setStatus('current')
ocnHistPMOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPTTimeStamp.setStatus('current')
ocnHistPMOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 12), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPTValidity.setStatus('current')
ocnHistPMTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMTempValue.setStatus('current')
ocnHistPMTempTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMTempTimeStamp.setStatus('current')
ocnHistPMTempValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 15), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMTempValidity.setStatus('current')
ocnHistPMSupplyVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 16), FixedX10()).setUnits('mVolts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMSupplyVoltageValue.setStatus('current')
ocnHistPMSupplyVoltageTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 17), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMSupplyVoltageTimeStamp.setStatus('current')
ocnHistPMSupplyVoltageValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 18), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMSupplyVoltageValidity.setStatus('current')
ocnHistPMLBCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('mAmp').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMLBCValue.setStatus('current')
ocnHistPMLBCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 20), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMLBCTimeStamp.setStatus('current')
ocnHistPMLBCValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 21), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMLBCValidity.setStatus('current')
ocnHistPMCVSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMCVSValue.setStatus('current')
ocnHistPMCVSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 23), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMCVSTimeStamp.setStatus('current')
ocnHistPMCVSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 24), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMCVSValidity.setStatus('current')
ocnHistPMESSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMESSValue.setStatus('current')
ocnHistPMESSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 26), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMESSTimeStamp.setStatus('current')
ocnHistPMESSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 27), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMESSValidity.setStatus('current')
ocnHistPMSESSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 28), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMSESSValue.setStatus('current')
ocnHistPMSESSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 29), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMSESSTimeStamp.setStatus('current')
ocnHistPMSESSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 30), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMSESSValidity.setStatus('current')
ocnHistPMSEFSSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 31), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMSEFSSValue.setStatus('current')
ocnHistPMSEFSSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 32), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMSEFSSTimeStamp.setStatus('current')
ocnHistPMSEFSSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 33), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMSEFSSValidity.setStatus('current')
ocnHistPMSupplyVoltage2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 34), FixedX10()).setUnits('mVolts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMSupplyVoltage2Value.setStatus('current')
ocnHistPMSupplyVoltage2TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 35), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMSupplyVoltage2TimeStamp.setStatus('current')
ocnHistPMSupplyVoltage2Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 36), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMSupplyVoltage2Validity.setStatus('current')
ocnHistPMCVLValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 37), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMCVLValue.setStatus('current')
ocnHistPMCVLTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 38), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMCVLTimeStamp.setStatus('current')
ocnHistPMCVLValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 39), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMCVLValidity.setStatus('current')
ocnHistPMESLValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 40), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMESLValue.setStatus('current')
ocnHistPMESLTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 41), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMESLTimeStamp.setStatus('current')
ocnHistPMESLValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 42), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMESLValidity.setStatus('current')
ocnHistPMSESLValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 43), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMSESLValue.setStatus('current')
ocnHistPMSESLTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 44), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMSESLTimeStamp.setStatus('current')
ocnHistPMSESLValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 45), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMSESLValidity.setStatus('current')
ocnHistPMUASLValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 46), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMUASLValue.setStatus('current')
ocnHistPMUASLTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 47), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMUASLTimeStamp.setStatus('current')
ocnHistPMUASLValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 48), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMUASLValidity.setStatus('current')
ocnHistPMOTUEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 49), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMOTUEBValue.setStatus('current')
ocnHistPMOTUEBTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 50), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOTUEBTimeStamp.setStatus('current')
ocnHistPMOTUEBValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 51), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOTUEBValidity.setStatus('current')
ocnHistPMOTUBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 52), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMOTUBBEValue.setStatus('current')
ocnHistPMOTUBBETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 53), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOTUBBETimeStamp.setStatus('current')
ocnHistPMOTUBBEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 54), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOTUBBEValidity.setStatus('current')
ocnHistPMOTUESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 55), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMOTUESValue.setStatus('current')
ocnHistPMOTUESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 56), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOTUESTimeStamp.setStatus('current')
ocnHistPMOTUESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 57), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOTUESValidity.setStatus('current')
ocnHistPMOTUSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 58), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMOTUSESValue.setStatus('current')
ocnHistPMOTUSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 59), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOTUSESTimeStamp.setStatus('current')
ocnHistPMOTUSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 60), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOTUSESValidity.setStatus('current')
ocnHistPMOTUOFSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 61), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMOTUOFSValue.setStatus('current')
ocnHistPMOTUOFSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 62), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOTUOFSTimeStamp.setStatus('current')
ocnHistPMOTUOFSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 63), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOTUOFSValidity.setStatus('current')
ocnHistPMNBITCRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 64), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMNBITCRValue.setStatus('current')
ocnHistPMNBITCRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 65), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMNBITCRTimeStamp.setStatus('current')
ocnHistPMNBITCRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 66), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMNBITCRValidity.setStatus('current')
ocnHistPMNBYTCRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 67), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMNBYTCRValue.setStatus('current')
ocnHistPMNBYTCRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 68), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMNBYTCRTimeStamp.setStatus('current')
ocnHistPMNBYTCRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 69), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMNBYTCRValidity.setStatus('current')
ocnHistPMUNCRCDWValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 70), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMUNCRCDWValue.setStatus('current')
ocnHistPMUNCRCDWTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 71), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMUNCRCDWTimeStamp.setStatus('current')
ocnHistPMUNCRCDWValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 72), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMUNCRCDWValidity.setStatus('current')
ocnHistPMCVSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 73), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMCVSInitialize.setStatus('current')
ocnHistPMESSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 74), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMESSInitialize.setStatus('current')
ocnHistPMSESSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 75), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMSESSInitialize.setStatus('current')
ocnHistPMSEFSSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 76), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMSEFSSInitialize.setStatus('current')
ocnHistPMCVLInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 77), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMCVLInitialize.setStatus('current')
ocnHistPMESLInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 78), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMESLInitialize.setStatus('current')
ocnHistPMSESLInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 79), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMSESLInitialize.setStatus('current')
ocnHistPMUASLInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 80), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMUASLInitialize.setStatus('current')
ocnHistPMOTUEBInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 81), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMOTUEBInitialize.setStatus('current')
ocnHistPMOTUBBEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 82), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMOTUBBEInitialize.setStatus('current')
ocnHistPMOTUESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 83), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMOTUESInitialize.setStatus('current')
ocnHistPMOTUSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 84), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMOTUSESInitialize.setStatus('current')
ocnHistPMOTUOFSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 85), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMOTUOFSInitialize.setStatus('current')
ocnHistPMNBITCRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 86), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMNBITCRInitialize.setStatus('current')
ocnHistPMNBYTCRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 87), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMNBYTCRInitialize.setStatus('current')
ocnHistPMUNCRCDWInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 88), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMUNCRCDWInitialize.setStatus('current')
ocnHistPMOTNBERValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 89), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOTNBERValue.setStatus('current')
ocnHistPMOTNBERTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 90), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOTNBERTimeStamp.setStatus('current')
ocnHistPMOTNBERValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 91), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOTNBERValidity.setStatus('current')
ocnHistPMOTNBERInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 92), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMOTNBERInitialize.setStatus('current')
ocnHistPMOTNAVGBERValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 93), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOTNAVGBERValue.setStatus('current')
ocnHistPMOTNAVGBERTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 94), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOTNAVGBERTimeStamp.setStatus('current')
ocnHistPMOTNAVGBERValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 95), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOTNAVGBERValidity.setStatus('current')
ocnHistPMOTNAVGBERInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 96), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMOTNAVGBERInitialize.setStatus('current')
ocnHistPMNBITCR64BitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 97), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMNBITCR64BitValue.setStatus('current')
ocnHistPMNBITCR64BitTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 98), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMNBITCR64BitTimeStamp.setStatus('current')
ocnHistPMNBITCR64BitValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 99), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMNBITCR64BitValidity.setStatus('current')
ocnHistPMNBITCR64BitInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 100), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMNBITCR64BitInitialize.setStatus('current')
ocnHistPMNBYTCR64BitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 101), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMNBYTCR64BitValue.setStatus('current')
ocnHistPMNBYTCR64BitTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 102), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMNBYTCR64BitTimeStamp.setStatus('current')
ocnHistPMNBYTCR64BitValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 103), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMNBYTCR64BitValidity.setStatus('current')
ocnHistPMNBYTCR64BitInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 104), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMNBYTCR64BitInitialize.setStatus('current')
ocnHistPMUASSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 105), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMUASSValue.setStatus('current')
ocnHistPMUASSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 106), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMUASSTimeStamp.setStatus('current')
ocnHistPMUASSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 107), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMUASSValidity.setStatus('current')
ocnHistPMUASSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 108), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMUASSInitialize.setStatus('current')
ocnHistPMOTUUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 109), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMOTUUASValue.setStatus('current')
ocnHistPMOTUUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 110), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOTUUASTimeStamp.setStatus('current')
ocnHistPMOTUUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 111), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOTUUASValidity.setStatus('current')
ocnHistPMOTUUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 112), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMOTUUASInitialize.setStatus('current')
ocnHistPMOPRMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 113), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPRMinValue.setStatus('current')
ocnHistPMOPRMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 114), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPRMinTimeStamp.setStatus('current')
ocnHistPMOPRMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 115), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPRMinValidity.setStatus('current')
ocnHistPMOPRMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 116), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMOPRMinInitialize.setStatus('current')
ocnHistPMOPRMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 117), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPRMaxValue.setStatus('current')
ocnHistPMOPRMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 118), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPRMaxTimeStamp.setStatus('current')
ocnHistPMOPRMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 119), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPRMaxValidity.setStatus('current')
ocnHistPMOPRMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 120), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMOPRMaxInitialize.setStatus('current')
ocnHistPMOPRAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 121), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPRAvgValue.setStatus('current')
ocnHistPMOPRAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 122), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPRAvgTimeStamp.setStatus('current')
ocnHistPMOPRAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 123), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPRAvgValidity.setStatus('current')
ocnHistPMOPRAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 124), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMOPRAvgInitialize.setStatus('current')
ocnHistPMOPTMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 125), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPTMinValue.setStatus('current')
ocnHistPMOPTMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 126), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPTMinTimeStamp.setStatus('current')
ocnHistPMOPTMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 127), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPTMinValidity.setStatus('current')
ocnHistPMOPTMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 128), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMOPTMinInitialize.setStatus('current')
ocnHistPMOPTMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 129), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPTMaxValue.setStatus('current')
ocnHistPMOPTMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 130), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPTMaxTimeStamp.setStatus('current')
ocnHistPMOPTMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 131), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPTMaxValidity.setStatus('current')
ocnHistPMOPTMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 132), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMOPTMaxInitialize.setStatus('current')
ocnHistPMOPTAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 133), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPTAvgValue.setStatus('current')
ocnHistPMOPTAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 134), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPTAvgTimeStamp.setStatus('current')
ocnHistPMOPTAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 135), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnHistPMOPTAvgValidity.setStatus('current')
ocnHistPMOPTAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 9, 1, 136), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnHistPMOPTAvgInitialize.setStatus('current')
ocnPMThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10), )
if mibBuilder.loadTexts: ocnPMThresholdTable.setStatus('current')
ocnPMThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1), ).setIndexNames((0, "BTI-7000-MIB", "ocnPMThresholdTypeIdx"), (0, "BTI-7000-MIB", "ocnPMThresholdShelfIdx"), (0, "BTI-7000-MIB", "ocnPMThresholdSlotIdx"), (0, "BTI-7000-MIB", "ocnPMThresholdPortIdx"), (0, "BTI-7000-MIB", "ocnPMThresholdIntervalTypeIdx"))
if mibBuilder.loadTexts: ocnPMThresholdEntry.setStatus('current')
ocnPMThresholdTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 1), OcnType())
if mibBuilder.loadTexts: ocnPMThresholdTypeIdx.setStatus('current')
ocnPMThresholdShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: ocnPMThresholdShelfIdx.setStatus('current')
ocnPMThresholdSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: ocnPMThresholdSlotIdx.setStatus('current')
ocnPMThresholdPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: ocnPMThresholdPortIdx.setStatus('current')
ocnPMThresholdIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 5), PMIntervalType())
if mibBuilder.loadTexts: ocnPMThresholdIntervalTypeIdx.setStatus('current')
ocnPMThresholdCVSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnPMThresholdCVSValue.setStatus('current')
ocnPMThresholdESSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnPMThresholdESSValue.setStatus('current')
ocnPMThresholdSESSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnPMThresholdSESSValue.setStatus('current')
ocnPMThresholdSEFSSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnPMThresholdSEFSSValue.setStatus('current')
ocnPMThresholdCVLValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnPMThresholdCVLValue.setStatus('current')
ocnPMThresholdESLValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnPMThresholdESLValue.setStatus('current')
ocnPMThresholdSESLValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnPMThresholdSESLValue.setStatus('current')
ocnPMThresholdUASLValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnPMThresholdUASLValue.setStatus('current')
ocnPMThresholdOTUEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnPMThresholdOTUEBValue.setStatus('current')
ocnPMThresholdOTUBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnPMThresholdOTUBBEValue.setStatus('current')
ocnPMThresholdOTUESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnPMThresholdOTUESValue.setStatus('current')
ocnPMThresholdOTUSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnPMThresholdOTUSESValue.setStatus('current')
ocnPMThresholdOTUOFSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnPMThresholdOTUOFSValue.setStatus('current')
ocnPMThresholdUNCRCDWValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnPMThresholdUNCRCDWValue.setStatus('current')
ocnPMThresholdUASSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnPMThresholdUASSValue.setStatus('current')
ocnPMThresholdOTUUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 10, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnPMThresholdOTUUASValue.setStatus('current')
stsnCrntPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11), )
if mibBuilder.loadTexts: stsnCrntPMTable.setStatus('current')
stsnCrntPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1), ).setIndexNames((0, "BTI-7000-MIB", "stsnCrntPMTypeIdx"), (0, "BTI-7000-MIB", "stsnCrntPMShelfIdx"), (0, "BTI-7000-MIB", "stsnCrntPMSlotIdx"), (0, "BTI-7000-MIB", "stsnCrntPMPortIdx"), (0, "BTI-7000-MIB", "stsnCrntPMIdx"), (0, "BTI-7000-MIB", "stsnCrntPMIntervalTypeIdx"))
if mibBuilder.loadTexts: stsnCrntPMEntry.setStatus('current')
stsnCrntPMTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 1), StsnType())
if mibBuilder.loadTexts: stsnCrntPMTypeIdx.setStatus('current')
stsnCrntPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: stsnCrntPMShelfIdx.setStatus('current')
stsnCrntPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: stsnCrntPMSlotIdx.setStatus('current')
stsnCrntPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: stsnCrntPMPortIdx.setStatus('current')
stsnCrntPMIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 192)))
if mibBuilder.loadTexts: stsnCrntPMIdx.setStatus('current')
stsnCrntPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 6), PMIntervalType())
if mibBuilder.loadTexts: stsnCrntPMIntervalTypeIdx.setStatus('current')
stsnCrntPMCVPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnCrntPMCVPValue.setStatus('current')
stsnCrntPMCVPTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsnCrntPMCVPTimeStamp.setStatus('current')
stsnCrntPMCVPValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 9), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsnCrntPMCVPValidity.setStatus('current')
stsnCrntPMESPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnCrntPMESPValue.setStatus('current')
stsnCrntPMESPTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsnCrntPMESPTimeStamp.setStatus('current')
stsnCrntPMESPValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 12), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsnCrntPMESPValidity.setStatus('current')
stsnCrntPMSESPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnCrntPMSESPValue.setStatus('current')
stsnCrntPMSESPTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsnCrntPMSESPTimeStamp.setStatus('current')
stsnCrntPMSESPValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 15), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsnCrntPMSESPValidity.setStatus('current')
stsnCrntPMUASPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnCrntPMUASPValue.setStatus('current')
stsnCrntPMUASPTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 17), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsnCrntPMUASPTimeStamp.setStatus('current')
stsnCrntPMUASPValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 18), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsnCrntPMUASPValidity.setStatus('current')
stsnCrntPMFCPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnCrntPMFCPValue.setStatus('current')
stsnCrntPMFCPTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 20), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsnCrntPMFCPTimeStamp.setStatus('current')
stsnCrntPMFCPValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 21), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsnCrntPMFCPValidity.setStatus('current')
stsnCrntPMCVPInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 22), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnCrntPMCVPInitialize.setStatus('current')
stsnCrntPMESPInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 23), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnCrntPMESPInitialize.setStatus('current')
stsnCrntPMSESPInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 24), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnCrntPMSESPInitialize.setStatus('current')
stsnCrntPMUASPInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 25), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnCrntPMUASPInitialize.setStatus('current')
stsnCrntPMFCPInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 11, 1, 26), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnCrntPMFCPInitialize.setStatus('current')
stsnHistPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12), )
if mibBuilder.loadTexts: stsnHistPMTable.setStatus('current')
stsnHistPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1), ).setIndexNames((0, "BTI-7000-MIB", "stsnHistPMTypeIdx"), (0, "BTI-7000-MIB", "stsnHistPMShelfIdx"), (0, "BTI-7000-MIB", "stsnHistPMSlotIdx"), (0, "BTI-7000-MIB", "stsnHistPMPortIdx"), (0, "BTI-7000-MIB", "stsnHistPMIdx"), (0, "BTI-7000-MIB", "stsnHistPMIntervalTypeIdx"), (0, "BTI-7000-MIB", "stsnHistPMIntervalIdx"))
if mibBuilder.loadTexts: stsnHistPMEntry.setStatus('current')
stsnHistPMTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 1), StsnType())
if mibBuilder.loadTexts: stsnHistPMTypeIdx.setStatus('current')
stsnHistPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: stsnHistPMShelfIdx.setStatus('current')
stsnHistPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: stsnHistPMSlotIdx.setStatus('current')
stsnHistPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: stsnHistPMPortIdx.setStatus('current')
stsnHistPMIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 192)))
if mibBuilder.loadTexts: stsnHistPMIdx.setStatus('current')
stsnHistPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 6), PMIntervalType())
if mibBuilder.loadTexts: stsnHistPMIntervalTypeIdx.setStatus('current')
stsnHistPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: stsnHistPMIntervalIdx.setStatus('current')
stsnHistPMCVPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnHistPMCVPValue.setStatus('current')
stsnHistPMCVPTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsnHistPMCVPTimeStamp.setStatus('current')
stsnHistPMCVPValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 10), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsnHistPMCVPValidity.setStatus('current')
stsnHistPMESPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnHistPMESPValue.setStatus('current')
stsnHistPMESPTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsnHistPMESPTimeStamp.setStatus('current')
stsnHistPMESPValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 13), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsnHistPMESPValidity.setStatus('current')
stsnHistPMSESPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnHistPMSESPValue.setStatus('current')
stsnHistPMSESPTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 15), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsnHistPMSESPTimeStamp.setStatus('current')
stsnHistPMSESPValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 16), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsnHistPMSESPValidity.setStatus('current')
stsnHistPMUASPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnHistPMUASPValue.setStatus('current')
stsnHistPMUASPTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 18), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsnHistPMUASPTimeStamp.setStatus('current')
stsnHistPMUASPValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 19), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsnHistPMUASPValidity.setStatus('current')
stsnHistPMFCPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnHistPMFCPValue.setStatus('current')
stsnHistPMFCPTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsnHistPMFCPTimeStamp.setStatus('current')
stsnHistPMFCPValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 22), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsnHistPMFCPValidity.setStatus('current')
stsnHistPMCVPInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 23), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnHistPMCVPInitialize.setStatus('current')
stsnHistPMESPInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 24), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnHistPMESPInitialize.setStatus('current')
stsnHistPMSESPInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 25), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnHistPMSESPInitialize.setStatus('current')
stsnHistPMUASPInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 26), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnHistPMUASPInitialize.setStatus('current')
stsnHistPMFCPInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 12, 1, 27), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnHistPMFCPInitialize.setStatus('current')
stsnPMThresholdByPortTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 13), )
if mibBuilder.loadTexts: stsnPMThresholdByPortTable.setStatus('current')
stsnPMThresholdByPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 13, 1), ).setIndexNames((0, "BTI-7000-MIB", "stsnPMThresholdByPortTypeIdx"), (0, "BTI-7000-MIB", "stsnPMThresholdByPortShelfIdx"), (0, "BTI-7000-MIB", "stsnPMThresholdByPortSlotIdx"), (0, "BTI-7000-MIB", "stsnPMThresholdByPortIdx"), (0, "BTI-7000-MIB", "stsnPMThresholdByPortIntervalTypeIdx"))
if mibBuilder.loadTexts: stsnPMThresholdByPortEntry.setStatus('current')
stsnPMThresholdByPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 13, 1, 1), StsnType())
if mibBuilder.loadTexts: stsnPMThresholdByPortTypeIdx.setStatus('current')
stsnPMThresholdByPortShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: stsnPMThresholdByPortShelfIdx.setStatus('current')
stsnPMThresholdByPortSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: stsnPMThresholdByPortSlotIdx.setStatus('current')
stsnPMThresholdByPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 13, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: stsnPMThresholdByPortIdx.setStatus('current')
stsnPMThresholdByPortIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 13, 1, 5), PMIntervalType())
if mibBuilder.loadTexts: stsnPMThresholdByPortIntervalTypeIdx.setStatus('current')
stsnPMThresholdByPortCVPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 13, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnPMThresholdByPortCVPValue.setStatus('current')
stsnPMThresholdByPortESPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 13, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnPMThresholdByPortESPValue.setStatus('current')
stsnPMThresholdByPortSESPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 13, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnPMThresholdByPortSESPValue.setStatus('current')
stsnPMThresholdByPortUASPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 13, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnPMThresholdByPortUASPValue.setStatus('current')
stsnPMThresholdByPortFCPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 13, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnPMThresholdByPortFCPValue.setStatus('current')
stmnCrntPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14), )
if mibBuilder.loadTexts: stmnCrntPMTable.setStatus('current')
stmnCrntPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1), ).setIndexNames((0, "BTI-7000-MIB", "stmnCrntPMTypeIdx"), (0, "BTI-7000-MIB", "stmnCrntPMShelfIdx"), (0, "BTI-7000-MIB", "stmnCrntPMSlotIdx"), (0, "BTI-7000-MIB", "stmnCrntPMPortIdx"), (0, "BTI-7000-MIB", "stmnCrntPMIntervalTypeIdx"))
if mibBuilder.loadTexts: stmnCrntPMEntry.setStatus('current')
stmnCrntPMTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 1), StmnType())
if mibBuilder.loadTexts: stmnCrntPMTypeIdx.setStatus('current')
stmnCrntPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: stmnCrntPMShelfIdx.setStatus('current')
stmnCrntPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: stmnCrntPMSlotIdx.setStatus('current')
stmnCrntPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: stmnCrntPMPortIdx.setStatus('current')
stmnCrntPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 5), PMIntervalType())
if mibBuilder.loadTexts: stmnCrntPMIntervalTypeIdx.setStatus('current')
stmnCrntPMOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 6), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPRValue.setStatus('current')
stmnCrntPMOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPRTimeStamp.setStatus('current')
stmnCrntPMOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 8), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPRValidity.setStatus('current')
stmnCrntPMOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 9), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPTValue.setStatus('current')
stmnCrntPMOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPTTimeStamp.setStatus('current')
stmnCrntPMOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 11), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPTValidity.setStatus('current')
stmnCrntPMTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMTempValue.setStatus('current')
stmnCrntPMTempTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMTempTimeStamp.setStatus('current')
stmnCrntPMTempValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 14), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMTempValidity.setStatus('current')
stmnCrntPMSupplyVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 15), FixedX10()).setUnits('mVolts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMSupplyVoltageValue.setStatus('current')
stmnCrntPMSupplyVoltageTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMSupplyVoltageTimeStamp.setStatus('current')
stmnCrntPMSupplyVoltageValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 17), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMSupplyVoltageValidity.setStatus('current')
stmnCrntPMLBCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('mAmp').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMLBCValue.setStatus('current')
stmnCrntPMLBCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 19), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMLBCTimeStamp.setStatus('current')
stmnCrntPMLBCValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 20), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMLBCValidity.setStatus('current')
stmnCrntPMRSEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMRSEBValue.setStatus('current')
stmnCrntPMRSEBTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 22), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMRSEBTimeStamp.setStatus('current')
stmnCrntPMRSEBValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 23), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMRSEBValidity.setStatus('current')
stmnCrntPMRSBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMRSBBEValue.setStatus('current')
stmnCrntPMRSBBETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 25), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMRSBBETimeStamp.setStatus('current')
stmnCrntPMRSBBEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 26), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMRSBBEValidity.setStatus('current')
stmnCrntPMRSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 27), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMRSESValue.setStatus('current')
stmnCrntPMRSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 28), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMRSESTimeStamp.setStatus('current')
stmnCrntPMRSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 29), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMRSESValidity.setStatus('current')
stmnCrntPMRSSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 30), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMRSSESValue.setStatus('current')
stmnCrntPMRSSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 31), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMRSSESTimeStamp.setStatus('current')
stmnCrntPMRSSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 32), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMRSSESValidity.setStatus('current')
stmnCrntPMRSOFSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 33), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMRSOFSValue.setStatus('current')
stmnCrntPMRSOFSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 34), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMRSOFSTimeStamp.setStatus('current')
stmnCrntPMRSOFSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 35), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMRSOFSValidity.setStatus('current')
stmnCrntPMSupplyVoltage2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 36), FixedX10()).setUnits('mVolts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMSupplyVoltage2Value.setStatus('current')
stmnCrntPMSupplyVoltage2TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 37), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMSupplyVoltage2TimeStamp.setStatus('current')
stmnCrntPMSupplyVoltage2Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 38), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMSupplyVoltage2Validity.setStatus('current')
stmnCrntPMMSEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 39), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMMSEBValue.setStatus('current')
stmnCrntPMMSEBTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 40), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMMSEBTimeStamp.setStatus('current')
stmnCrntPMMSEBValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 41), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMMSEBValidity.setStatus('current')
stmnCrntPMMSBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 42), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMMSBBEValue.setStatus('current')
stmnCrntPMMSBBETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 43), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMMSBBETimeStamp.setStatus('current')
stmnCrntPMMSBBEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 44), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMMSBBEValidity.setStatus('current')
stmnCrntPMMSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 45), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMMSESValue.setStatus('current')
stmnCrntPMMSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 46), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMMSESTimeStamp.setStatus('current')
stmnCrntPMMSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 47), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMMSESValidity.setStatus('current')
stmnCrntPMMSSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 48), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMMSSESValue.setStatus('current')
stmnCrntPMMSSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 49), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMMSSESTimeStamp.setStatus('current')
stmnCrntPMMSSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 50), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMMSSESValidity.setStatus('current')
stmnCrntPMMSUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 51), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMMSUASValue.setStatus('current')
stmnCrntPMMSUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 52), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMMSUASTimeStamp.setStatus('current')
stmnCrntPMMSUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 53), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMMSUASValidity.setStatus('current')
stmnCrntPMOTUEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 54), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMOTUEBValue.setStatus('current')
stmnCrntPMOTUEBTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 55), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOTUEBTimeStamp.setStatus('current')
stmnCrntPMOTUEBValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 56), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOTUEBValidity.setStatus('current')
stmnCrntPMOTUBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 57), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMOTUBBEValue.setStatus('current')
stmnCrntPMOTUBBETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 58), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOTUBBETimeStamp.setStatus('current')
stmnCrntPMOTUBBEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 59), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOTUBBEValidity.setStatus('current')
stmnCrntPMOTUESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 60), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMOTUESValue.setStatus('current')
stmnCrntPMOTUESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 61), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOTUESTimeStamp.setStatus('current')
stmnCrntPMOTUESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 62), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOTUESValidity.setStatus('current')
stmnCrntPMOTUSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 63), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMOTUSESValue.setStatus('current')
stmnCrntPMOTUSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 64), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOTUSESTimeStamp.setStatus('current')
stmnCrntPMOTUSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 65), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOTUSESValidity.setStatus('current')
stmnCrntPMOTUOFSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 66), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMOTUOFSValue.setStatus('current')
stmnCrntPMOTUOFSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 67), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOTUOFSTimeStamp.setStatus('current')
stmnCrntPMOTUOFSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 68), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOTUOFSValidity.setStatus('current')
stmnCrntPMNBITCRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 69), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMNBITCRValue.setStatus('current')
stmnCrntPMNBITCRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 70), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMNBITCRTimeStamp.setStatus('current')
stmnCrntPMNBITCRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 71), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMNBITCRValidity.setStatus('current')
stmnCrntPMNBYTCRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 72), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMNBYTCRValue.setStatus('current')
stmnCrntPMNBYTCRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 73), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMNBYTCRTimeStamp.setStatus('current')
stmnCrntPMNBYTCRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 74), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMNBYTCRValidity.setStatus('current')
stmnCrntPMUNCRCDWValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 75), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMUNCRCDWValue.setStatus('current')
stmnCrntPMUNCRCDWTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 76), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMUNCRCDWTimeStamp.setStatus('current')
stmnCrntPMUNCRCDWValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 77), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMUNCRCDWValidity.setStatus('current')
stmnCrntPMRSEBInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 78), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMRSEBInitialize.setStatus('current')
stmnCrntPMRSBBEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 79), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMRSBBEInitialize.setStatus('current')
stmnCrntPMRSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 80), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMRSESInitialize.setStatus('current')
stmnCrntPMRSSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 81), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMRSSESInitialize.setStatus('current')
stmnCrntPMRSOFSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 82), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMRSOFSInitialize.setStatus('current')
stmnCrntPMMSEBInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 83), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMMSEBInitialize.setStatus('current')
stmnCrntPMMSBBEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 84), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMMSBBEInitialize.setStatus('current')
stmnCrntPMMSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 85), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMMSESInitialize.setStatus('current')
stmnCrntPMMSSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 86), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMMSSESInitialize.setStatus('current')
stmnCrntPMMSUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 87), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMMSUASInitialize.setStatus('current')
stmnCrntPMOTUEBInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 88), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMOTUEBInitialize.setStatus('current')
stmnCrntPMOTUBBEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 89), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMOTUBBEInitialize.setStatus('current')
stmnCrntPMOTUESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 90), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMOTUESInitialize.setStatus('current')
stmnCrntPMOTUSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 91), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMOTUSESInitialize.setStatus('current')
stmnCrntPMOTUOFSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 92), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMOTUOFSInitialize.setStatus('current')
stmnCrntPMNBITCRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 93), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMNBITCRInitialize.setStatus('current')
stmnCrntPMNBYTCRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 94), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMNBYTCRInitialize.setStatus('current')
stmnCrntPMUNCRCDWInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 95), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMUNCRCDWInitialize.setStatus('current')
stmnCrntPMOTNBERValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 96), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOTNBERValue.setStatus('current')
stmnCrntPMOTNBERTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 97), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOTNBERTimeStamp.setStatus('current')
stmnCrntPMOTNBERValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 98), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOTNBERValidity.setStatus('current')
stmnCrntPMOTNBERInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 99), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMOTNBERInitialize.setStatus('current')
stmnCrntPMOTNAVGBERValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 100), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOTNAVGBERValue.setStatus('current')
stmnCrntPMOTNAVGBERTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 101), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOTNAVGBERTimeStamp.setStatus('current')
stmnCrntPMOTNAVGBERValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 102), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOTNAVGBERValidity.setStatus('current')
stmnCrntPMOTNAVGBERInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 103), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMOTNAVGBERInitialize.setStatus('current')
stmnCrntPMNBITCR64BitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 104), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMNBITCR64BitValue.setStatus('current')
stmnCrntPMNBITCR64BitTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 105), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMNBITCR64BitTimeStamp.setStatus('current')
stmnCrntPMNBITCR64BitValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 106), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMNBITCR64BitValidity.setStatus('current')
stmnCrntPMNBITCR64BitInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 107), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMNBITCR64BitInitialize.setStatus('current')
stmnCrntPMNBYTCR64BitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 108), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMNBYTCR64BitValue.setStatus('current')
stmnCrntPMNBYTCR64BitTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 109), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMNBYTCR64BitTimeStamp.setStatus('current')
stmnCrntPMNBYTCR64BitValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 110), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMNBYTCR64BitValidity.setStatus('current')
stmnCrntPMNBYTCR64BitInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 111), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMNBYTCR64BitInitialize.setStatus('current')
stmnCrntPMRSUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 112), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMRSUASValue.setStatus('current')
stmnCrntPMRSUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 113), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMRSUASTimeStamp.setStatus('current')
stmnCrntPMRSUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 114), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMRSUASValidity.setStatus('current')
stmnCrntPMRSUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 115), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMRSUASInitialize.setStatus('current')
stmnCrntPMOTUUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 116), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMOTUUASValue.setStatus('current')
stmnCrntPMOTUUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 117), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOTUUASTimeStamp.setStatus('current')
stmnCrntPMOTUUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 118), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOTUUASValidity.setStatus('current')
stmnCrntPMOTUUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 119), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMOTUUASInitialize.setStatus('current')
stmnCrntPMOPRMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 120), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPRMinValue.setStatus('current')
stmnCrntPMOPRMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 121), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPRMinTimeStamp.setStatus('current')
stmnCrntPMOPRMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 122), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPRMinValidity.setStatus('current')
stmnCrntPMOPRMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 123), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMOPRMinInitialize.setStatus('current')
stmnCrntPMOPRMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 124), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPRMaxValue.setStatus('current')
stmnCrntPMOPRMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 125), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPRMaxTimeStamp.setStatus('current')
stmnCrntPMOPRMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 126), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPRMaxValidity.setStatus('current')
stmnCrntPMOPRMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 127), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMOPRMaxInitialize.setStatus('current')
stmnCrntPMOPRAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 128), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPRAvgValue.setStatus('current')
stmnCrntPMOPRAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 129), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPRAvgTimeStamp.setStatus('current')
stmnCrntPMOPRAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 130), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPRAvgValidity.setStatus('current')
stmnCrntPMOPRAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 131), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMOPRAvgInitialize.setStatus('current')
stmnCrntPMOPTMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 132), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPTMinValue.setStatus('current')
stmnCrntPMOPTMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 133), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPTMinTimeStamp.setStatus('current')
stmnCrntPMOPTMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 134), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPTMinValidity.setStatus('current')
stmnCrntPMOPTMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 135), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMOPTMinInitialize.setStatus('current')
stmnCrntPMOPTMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 136), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPTMaxValue.setStatus('current')
stmnCrntPMOPTMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 137), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPTMaxTimeStamp.setStatus('current')
stmnCrntPMOPTMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 138), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPTMaxValidity.setStatus('current')
stmnCrntPMOPTMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 139), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMOPTMaxInitialize.setStatus('current')
stmnCrntPMOPTAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 140), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPTAvgValue.setStatus('current')
stmnCrntPMOPTAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 141), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPTAvgTimeStamp.setStatus('current')
stmnCrntPMOPTAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 142), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnCrntPMOPTAvgValidity.setStatus('current')
stmnCrntPMOPTAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 14, 1, 143), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnCrntPMOPTAvgInitialize.setStatus('current')
stmnHistPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15), )
if mibBuilder.loadTexts: stmnHistPMTable.setStatus('current')
stmnHistPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1), ).setIndexNames((0, "BTI-7000-MIB", "stmnHistPMTypeIdx"), (0, "BTI-7000-MIB", "stmnHistPMShelfIdx"), (0, "BTI-7000-MIB", "stmnHistPMSlotIdx"), (0, "BTI-7000-MIB", "stmnHistPMPortIdx"), (0, "BTI-7000-MIB", "stmnHistPMIntervalTypeIdx"), (0, "BTI-7000-MIB", "stmnHistPMIntervalIdx"))
if mibBuilder.loadTexts: stmnHistPMEntry.setStatus('current')
stmnHistPMTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 1), StmnType())
if mibBuilder.loadTexts: stmnHistPMTypeIdx.setStatus('current')
stmnHistPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: stmnHistPMShelfIdx.setStatus('current')
stmnHistPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: stmnHistPMSlotIdx.setStatus('current')
stmnHistPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: stmnHistPMPortIdx.setStatus('current')
stmnHistPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 5), PMIntervalType())
if mibBuilder.loadTexts: stmnHistPMIntervalTypeIdx.setStatus('current')
stmnHistPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: stmnHistPMIntervalIdx.setStatus('current')
stmnHistPMOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 7), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPRValue.setStatus('current')
stmnHistPMOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPRTimeStamp.setStatus('current')
stmnHistPMOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 9), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPRValidity.setStatus('current')
stmnHistPMOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 10), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPTValue.setStatus('current')
stmnHistPMOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPTTimeStamp.setStatus('current')
stmnHistPMOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 12), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPTValidity.setStatus('current')
stmnHistPMTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMTempValue.setStatus('current')
stmnHistPMTempTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMTempTimeStamp.setStatus('current')
stmnHistPMTempValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 15), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMTempValidity.setStatus('current')
stmnHistPMSupplyVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 16), FixedX10()).setUnits('mVolts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMSupplyVoltageValue.setStatus('current')
stmnHistPMSupplyVoltageTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 17), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMSupplyVoltageTimeStamp.setStatus('current')
stmnHistPMSupplyVoltageValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 18), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMSupplyVoltageValidity.setStatus('current')
stmnHistPMLBCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('mAmp').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMLBCValue.setStatus('current')
stmnHistPMLBCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 20), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMLBCTimeStamp.setStatus('current')
stmnHistPMLBCValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 21), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMLBCValidity.setStatus('current')
stmnHistPMRSEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMRSEBValue.setStatus('current')
stmnHistPMRSEBTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 23), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMRSEBTimeStamp.setStatus('current')
stmnHistPMRSEBValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 24), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMRSEBValidity.setStatus('current')
stmnHistPMRSBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMRSBBEValue.setStatus('current')
stmnHistPMRSBBETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 26), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMRSBBETimeStamp.setStatus('current')
stmnHistPMRSBBEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 27), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMRSBBEValidity.setStatus('current')
stmnHistPMRSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 28), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMRSESValue.setStatus('current')
stmnHistPMRSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 29), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMRSESTimeStamp.setStatus('current')
stmnHistPMRSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 30), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMRSESValidity.setStatus('current')
stmnHistPMRSSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 31), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMRSSESValue.setStatus('current')
stmnHistPMRSSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 32), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMRSSESTimeStamp.setStatus('current')
stmnHistPMRSSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 33), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMRSSESValidity.setStatus('current')
stmnHistPMRSOFSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 34), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMRSOFSValue.setStatus('current')
stmnHistPMRSOFSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 35), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMRSOFSTimeStamp.setStatus('current')
stmnHistPMRSOFSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 36), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMRSOFSValidity.setStatus('current')
stmnHistPMSupplyVoltage2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 37), FixedX10()).setUnits('mVolts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMSupplyVoltage2Value.setStatus('current')
stmnHistPMSupplyVoltage2TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 38), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMSupplyVoltage2TimeStamp.setStatus('current')
stmnHistPMSupplyVoltage2Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 39), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMSupplyVoltage2Validity.setStatus('current')
stmnHistPMMSEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 40), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMMSEBValue.setStatus('current')
stmnHistPMMSEBTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 41), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMMSEBTimeStamp.setStatus('current')
stmnHistPMMSEBValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 42), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMMSEBValidity.setStatus('current')
stmnHistPMMSBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 43), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMMSBBEValue.setStatus('current')
stmnHistPMMSBBETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 44), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMMSBBETimeStamp.setStatus('current')
stmnHistPMMSBBEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 45), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMMSBBEValidity.setStatus('current')
stmnHistPMMSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 46), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMMSESValue.setStatus('current')
stmnHistPMMSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 47), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMMSESTimeStamp.setStatus('current')
stmnHistPMMSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 48), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMMSESValidity.setStatus('current')
stmnHistPMMSSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 49), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMMSSESValue.setStatus('current')
stmnHistPMMSSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 50), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMMSSESTimeStamp.setStatus('current')
stmnHistPMMSSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 51), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMMSSESValidity.setStatus('current')
stmnHistPMMSUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 52), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMMSUASValue.setStatus('current')
stmnHistPMMSUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 53), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMMSUASTimeStamp.setStatus('current')
stmnHistPMMSUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 54), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMMSUASValidity.setStatus('current')
stmnHistPMOTUEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 55), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMOTUEBValue.setStatus('current')
stmnHistPMOTUEBTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 56), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOTUEBTimeStamp.setStatus('current')
stmnHistPMOTUEBValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 57), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOTUEBValidity.setStatus('current')
stmnHistPMOTUBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 58), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMOTUBBEValue.setStatus('current')
stmnHistPMOTUBBETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 59), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOTUBBETimeStamp.setStatus('current')
stmnHistPMOTUBBEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 60), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOTUBBEValidity.setStatus('current')
stmnHistPMOTUESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 61), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMOTUESValue.setStatus('current')
stmnHistPMOTUESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 62), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOTUESTimeStamp.setStatus('current')
stmnHistPMOTUESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 63), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOTUESValidity.setStatus('current')
stmnHistPMOTUSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 64), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMOTUSESValue.setStatus('current')
stmnHistPMOTUSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 65), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOTUSESTimeStamp.setStatus('current')
stmnHistPMOTUSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 66), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOTUSESValidity.setStatus('current')
stmnHistPMOTUOFSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 67), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMOTUOFSValue.setStatus('current')
stmnHistPMOTUOFSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 68), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOTUOFSTimeStamp.setStatus('current')
stmnHistPMOTUOFSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 69), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOTUOFSValidity.setStatus('current')
stmnHistPMNBITCRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 70), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMNBITCRValue.setStatus('current')
stmnHistPMNBITCRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 71), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMNBITCRTimeStamp.setStatus('current')
stmnHistPMNBITCRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 72), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMNBITCRValidity.setStatus('current')
stmnHistPMNBYTCRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 73), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMNBYTCRValue.setStatus('current')
stmnHistPMNBYTCRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 74), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMNBYTCRTimeStamp.setStatus('current')
stmnHistPMNBYTCRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 75), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMNBYTCRValidity.setStatus('current')
stmnHistPMUNCRCDWValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 76), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMUNCRCDWValue.setStatus('current')
stmnHistPMUNCRCDWTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 77), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMUNCRCDWTimeStamp.setStatus('current')
stmnHistPMUNCRCDWValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 78), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMUNCRCDWValidity.setStatus('current')
stmnHistPMRSEBInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 79), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMRSEBInitialize.setStatus('current')
stmnHistPMRSBBEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 80), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMRSBBEInitialize.setStatus('current')
stmnHistPMRSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 81), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMRSESInitialize.setStatus('current')
stmnHistPMRSSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 82), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMRSSESInitialize.setStatus('current')
stmnHistPMRSOFSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 83), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMRSOFSInitialize.setStatus('current')
stmnHistPMMSEBInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 84), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMMSEBInitialize.setStatus('current')
stmnHistPMMSBBEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 85), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMMSBBEInitialize.setStatus('current')
stmnHistPMMSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 86), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMMSESInitialize.setStatus('current')
stmnHistPMMSSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 87), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMMSSESInitialize.setStatus('current')
stmnHistPMMSUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 88), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMMSUASInitialize.setStatus('current')
stmnHistPMOTUEBInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 89), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMOTUEBInitialize.setStatus('current')
stmnHistPMOTUBBEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 90), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMOTUBBEInitialize.setStatus('current')
stmnHistPMOTUESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 91), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMOTUESInitialize.setStatus('current')
stmnHistPMOTUSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 92), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMOTUSESInitialize.setStatus('current')
stmnHistPMOTUOFSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 93), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMOTUOFSInitialize.setStatus('current')
stmnHistPMNBITCRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 94), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMNBITCRInitialize.setStatus('current')
stmnHistPMNBYTCRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 95), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMNBYTCRInitialize.setStatus('current')
stmnHistPMUNCRCDWInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 96), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMUNCRCDWInitialize.setStatus('current')
stmnHistPMOTNBERValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 97), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOTNBERValue.setStatus('current')
stmnHistPMOTNBERTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 98), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOTNBERTimeStamp.setStatus('current')
stmnHistPMOTNBERValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 99), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOTNBERValidity.setStatus('current')
stmnHistPMOTNBERInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 100), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMOTNBERInitialize.setStatus('current')
stmnHistPMOTNAVGBERValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 101), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOTNAVGBERValue.setStatus('current')
stmnHistPMOTNAVGBERTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 102), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOTNAVGBERTimeStamp.setStatus('current')
stmnHistPMOTNAVGBERValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 103), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOTNAVGBERValidity.setStatus('current')
stmnHistPMOTNAVGBERInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 104), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMOTNAVGBERInitialize.setStatus('current')
stmnHistPMNBITCR64BitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 105), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMNBITCR64BitValue.setStatus('current')
stmnHistPMNBITCR64BitTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 106), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMNBITCR64BitTimeStamp.setStatus('current')
stmnHistPMNBITCR64BitValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 107), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMNBITCR64BitValidity.setStatus('current')
stmnHistPMNBITCR64BitInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 108), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMNBITCR64BitInitialize.setStatus('current')
stmnHistPMNBYTCR64BitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 109), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMNBYTCR64BitValue.setStatus('current')
stmnHistPMNBYTCR64BitTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 110), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMNBYTCR64BitTimeStamp.setStatus('current')
stmnHistPMNBYTCR64BitValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 111), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMNBYTCR64BitValidity.setStatus('current')
stmnHistPMNBYTCR64BitInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 112), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMNBYTCR64BitInitialize.setStatus('current')
stmnHistPMRSUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 113), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMRSUASValue.setStatus('current')
stmnHistPMRSUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 114), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMRSUASTimeStamp.setStatus('current')
stmnHistPMRSUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 115), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMRSUASValidity.setStatus('current')
stmnHistPMRSUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 116), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMRSUASInitialize.setStatus('current')
stmnHistPMOTUUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 117), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMOTUUASValue.setStatus('current')
stmnHistPMOTUUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 118), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOTUUASTimeStamp.setStatus('current')
stmnHistPMOTUUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 119), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOTUUASValidity.setStatus('current')
stmnHistPMOTUUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 120), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMOTUUASInitialize.setStatus('current')
stmnHistPMOPRMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 121), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPRMinValue.setStatus('current')
stmnHistPMOPRMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 122), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPRMinTimeStamp.setStatus('current')
stmnHistPMOPRMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 123), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPRMinValidity.setStatus('current')
stmnHistPMOPRMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 124), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMOPRMinInitialize.setStatus('current')
stmnHistPMOPRMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 125), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPRMaxValue.setStatus('current')
stmnHistPMOPRMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 126), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPRMaxTimeStamp.setStatus('current')
stmnHistPMOPRMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 127), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPRMaxValidity.setStatus('current')
stmnHistPMOPRMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 128), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMOPRMaxInitialize.setStatus('current')
stmnHistPMOPRAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 129), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPRAvgValue.setStatus('current')
stmnHistPMOPRAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 130), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPRAvgTimeStamp.setStatus('current')
stmnHistPMOPRAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 131), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPRAvgValidity.setStatus('current')
stmnHistPMOPRAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 132), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMOPRAvgInitialize.setStatus('current')
stmnHistPMOPTMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 133), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPTMinValue.setStatus('current')
stmnHistPMOPTMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 134), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPTMinTimeStamp.setStatus('current')
stmnHistPMOPTMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 135), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPTMinValidity.setStatus('current')
stmnHistPMOPTMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 136), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMOPTMinInitialize.setStatus('current')
stmnHistPMOPTMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 137), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPTMaxValue.setStatus('current')
stmnHistPMOPTMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 138), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPTMaxTimeStamp.setStatus('current')
stmnHistPMOPTMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 139), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPTMaxValidity.setStatus('current')
stmnHistPMOPTMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 140), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMOPTMaxInitialize.setStatus('current')
stmnHistPMOPTAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 141), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPTAvgValue.setStatus('current')
stmnHistPMOPTAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 142), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPTAvgTimeStamp.setStatus('current')
stmnHistPMOPTAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 143), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stmnHistPMOPTAvgValidity.setStatus('current')
stmnHistPMOPTAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 15, 1, 144), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnHistPMOPTAvgInitialize.setStatus('current')
stmnPMThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16), )
if mibBuilder.loadTexts: stmnPMThresholdTable.setStatus('current')
stmnPMThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1), ).setIndexNames((0, "BTI-7000-MIB", "stmnPMThresholdTypeIdx"), (0, "BTI-7000-MIB", "stmnPMThresholdShelfIdx"), (0, "BTI-7000-MIB", "stmnPMThresholdSlotIdx"), (0, "BTI-7000-MIB", "stmnPMThresholdPortIdx"), (0, "BTI-7000-MIB", "stmnPMThresholdIntervalTypeIdx"))
if mibBuilder.loadTexts: stmnPMThresholdEntry.setStatus('current')
stmnPMThresholdTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 1), StmnType())
if mibBuilder.loadTexts: stmnPMThresholdTypeIdx.setStatus('current')
stmnPMThresholdShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: stmnPMThresholdShelfIdx.setStatus('current')
stmnPMThresholdSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: stmnPMThresholdSlotIdx.setStatus('current')
stmnPMThresholdPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: stmnPMThresholdPortIdx.setStatus('current')
stmnPMThresholdIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 5), PMIntervalType())
if mibBuilder.loadTexts: stmnPMThresholdIntervalTypeIdx.setStatus('current')
stmnPMThresholdRSEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnPMThresholdRSEBValue.setStatus('current')
stmnPMThresholdRSBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnPMThresholdRSBBEValue.setStatus('current')
stmnPMThresholdRSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnPMThresholdRSESValue.setStatus('current')
stmnPMThresholdRSSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnPMThresholdRSSESValue.setStatus('current')
stmnPMThresholdRSOFSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnPMThresholdRSOFSValue.setStatus('current')
stmnPMThresholdMSEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnPMThresholdMSEBValue.setStatus('current')
stmnPMThresholdMSBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnPMThresholdMSBBEValue.setStatus('current')
stmnPMThresholdMSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnPMThresholdMSESValue.setStatus('current')
stmnPMThresholdMSSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnPMThresholdMSSESValue.setStatus('current')
stmnPMThresholdMSUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnPMThresholdMSUASValue.setStatus('current')
stmnPMThresholdOTUEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnPMThresholdOTUEBValue.setStatus('current')
stmnPMThresholdOTUBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnPMThresholdOTUBBEValue.setStatus('current')
stmnPMThresholdOTUESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnPMThresholdOTUESValue.setStatus('current')
stmnPMThresholdOTUSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnPMThresholdOTUSESValue.setStatus('current')
stmnPMThresholdOTUOFSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnPMThresholdOTUOFSValue.setStatus('current')
stmnPMThresholdUNCRCDWValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnPMThresholdUNCRCDWValue.setStatus('current')
stmnPMThresholdRSUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnPMThresholdRSUASValue.setStatus('current')
stmnPMThresholdOTUUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 16, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnPMThresholdOTUUASValue.setStatus('current')
vcnCrntPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17), )
if mibBuilder.loadTexts: vcnCrntPMTable.setStatus('current')
vcnCrntPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1), ).setIndexNames((0, "BTI-7000-MIB", "vcnCrntPMTypeIdx"), (0, "BTI-7000-MIB", "vcnCrntPMShelfIdx"), (0, "BTI-7000-MIB", "vcnCrntPMSlotIdx"), (0, "BTI-7000-MIB", "vcnCrntPMPortIdx"), (0, "BTI-7000-MIB", "vcnCrntPMIdx"), (0, "BTI-7000-MIB", "vcnCrntPMIntervalTypeIdx"))
if mibBuilder.loadTexts: vcnCrntPMEntry.setStatus('current')
vcnCrntPMTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 1), VcnType())
if mibBuilder.loadTexts: vcnCrntPMTypeIdx.setStatus('current')
vcnCrntPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: vcnCrntPMShelfIdx.setStatus('current')
vcnCrntPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: vcnCrntPMSlotIdx.setStatus('current')
vcnCrntPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: vcnCrntPMPortIdx.setStatus('current')
vcnCrntPMIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: vcnCrntPMIdx.setStatus('current')
vcnCrntPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 6), PMIntervalType())
if mibBuilder.loadTexts: vcnCrntPMIntervalTypeIdx.setStatus('current')
vcnCrntPMHPEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnCrntPMHPEBValue.setStatus('current')
vcnCrntPMHPEBTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcnCrntPMHPEBTimeStamp.setStatus('current')
vcnCrntPMHPEBValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 9), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcnCrntPMHPEBValidity.setStatus('current')
vcnCrntPMHPBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnCrntPMHPBBEValue.setStatus('current')
vcnCrntPMHPBBETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcnCrntPMHPBBETimeStamp.setStatus('current')
vcnCrntPMHPBBEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 12), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcnCrntPMHPBBEValidity.setStatus('current')
vcnCrntPMHPESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnCrntPMHPESValue.setStatus('current')
vcnCrntPMHPESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcnCrntPMHPESTimeStamp.setStatus('current')
vcnCrntPMHPESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 15), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcnCrntPMHPESValidity.setStatus('current')
vcnCrntPMHPSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnCrntPMHPSESValue.setStatus('current')
vcnCrntPMHPSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 17), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcnCrntPMHPSESTimeStamp.setStatus('current')
vcnCrntPMHPSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 18), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcnCrntPMHPSESValidity.setStatus('current')
vcnCrntPMHPUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnCrntPMHPUASValue.setStatus('current')
vcnCrntPMHPUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 20), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcnCrntPMHPUASTimeStamp.setStatus('current')
vcnCrntPMHPUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 21), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcnCrntPMHPUASValidity.setStatus('current')
vcnCrntPMHPEBInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 22), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnCrntPMHPEBInitialize.setStatus('current')
vcnCrntPMHPBBEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 23), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnCrntPMHPBBEInitialize.setStatus('current')
vcnCrntPMHPESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 24), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnCrntPMHPESInitialize.setStatus('current')
vcnCrntPMHPSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 25), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnCrntPMHPSESInitialize.setStatus('current')
vcnCrntPMHPUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 17, 1, 26), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnCrntPMHPUASInitialize.setStatus('current')
vcnHistPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18), )
if mibBuilder.loadTexts: vcnHistPMTable.setStatus('current')
vcnHistPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1), ).setIndexNames((0, "BTI-7000-MIB", "vcnHistPMTypeIdx"), (0, "BTI-7000-MIB", "vcnHistPMShelfIdx"), (0, "BTI-7000-MIB", "vcnHistPMSlotIdx"), (0, "BTI-7000-MIB", "vcnHistPMPortIdx"), (0, "BTI-7000-MIB", "vcnHistPMIdx"), (0, "BTI-7000-MIB", "vcnHistPMIntervalTypeIdx"), (0, "BTI-7000-MIB", "vcnHistPMIntervalIdx"))
if mibBuilder.loadTexts: vcnHistPMEntry.setStatus('current')
vcnHistPMTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 1), VcnType())
if mibBuilder.loadTexts: vcnHistPMTypeIdx.setStatus('current')
vcnHistPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: vcnHistPMShelfIdx.setStatus('current')
vcnHistPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: vcnHistPMSlotIdx.setStatus('current')
vcnHistPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: vcnHistPMPortIdx.setStatus('current')
vcnHistPMIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: vcnHistPMIdx.setStatus('current')
vcnHistPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 6), PMIntervalType())
if mibBuilder.loadTexts: vcnHistPMIntervalTypeIdx.setStatus('current')
vcnHistPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: vcnHistPMIntervalIdx.setStatus('current')
vcnHistPMHPEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnHistPMHPEBValue.setStatus('current')
vcnHistPMHPEBTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcnHistPMHPEBTimeStamp.setStatus('current')
vcnHistPMHPEBValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 10), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcnHistPMHPEBValidity.setStatus('current')
vcnHistPMHPBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnHistPMHPBBEValue.setStatus('current')
vcnHistPMHPBBETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcnHistPMHPBBETimeStamp.setStatus('current')
vcnHistPMHPBBEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 13), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcnHistPMHPBBEValidity.setStatus('current')
vcnHistPMHPESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnHistPMHPESValue.setStatus('current')
vcnHistPMHPESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 15), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcnHistPMHPESTimeStamp.setStatus('current')
vcnHistPMHPESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 16), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcnHistPMHPESValidity.setStatus('current')
vcnHistPMHPSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnHistPMHPSESValue.setStatus('current')
vcnHistPMHPSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 18), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcnHistPMHPSESTimeStamp.setStatus('current')
vcnHistPMHPSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 19), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcnHistPMHPSESValidity.setStatus('current')
vcnHistPMHPUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnHistPMHPUASValue.setStatus('current')
vcnHistPMHPUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcnHistPMHPUASTimeStamp.setStatus('current')
vcnHistPMHPUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 22), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcnHistPMHPUASValidity.setStatus('current')
vcnHistPMHPEBInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 23), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnHistPMHPEBInitialize.setStatus('current')
vcnHistPMHPBBEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 24), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnHistPMHPBBEInitialize.setStatus('current')
vcnHistPMHPESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 25), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnHistPMHPESInitialize.setStatus('current')
vcnHistPMHPSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 26), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnHistPMHPSESInitialize.setStatus('current')
vcnHistPMHPUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 18, 1, 27), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnHistPMHPUASInitialize.setStatus('current')
vcnPMThresholdByPortTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 19), )
if mibBuilder.loadTexts: vcnPMThresholdByPortTable.setStatus('current')
vcnPMThresholdByPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 19, 1), ).setIndexNames((0, "BTI-7000-MIB", "vcnPMThresholdByPortTypeIdx"), (0, "BTI-7000-MIB", "vcnPMThresholdByPortShelfIdx"), (0, "BTI-7000-MIB", "vcnPMThresholdByPortSlotIdx"), (0, "BTI-7000-MIB", "vcnPMThresholdByPortIdx"), (0, "BTI-7000-MIB", "vcnPMThresholdByPortIntervalTypeIdx"))
if mibBuilder.loadTexts: vcnPMThresholdByPortEntry.setStatus('current')
vcnPMThresholdByPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 19, 1, 1), VcnType())
if mibBuilder.loadTexts: vcnPMThresholdByPortTypeIdx.setStatus('current')
vcnPMThresholdByPortShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: vcnPMThresholdByPortShelfIdx.setStatus('current')
vcnPMThresholdByPortSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 19, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: vcnPMThresholdByPortSlotIdx.setStatus('current')
vcnPMThresholdByPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 19, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: vcnPMThresholdByPortIdx.setStatus('current')
vcnPMThresholdByPortIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 19, 1, 5), PMIntervalType())
if mibBuilder.loadTexts: vcnPMThresholdByPortIntervalTypeIdx.setStatus('current')
vcnPMThresholdByPortHPEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 19, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnPMThresholdByPortHPEBValue.setStatus('current')
vcnPMThresholdByPortHPBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 19, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnPMThresholdByPortHPBBEValue.setStatus('current')
vcnPMThresholdByPortHPESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 19, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnPMThresholdByPortHPESValue.setStatus('current')
vcnPMThresholdByPortHPSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 19, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnPMThresholdByPortHPSESValue.setStatus('current')
vcnPMThresholdByPortHPUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 19, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnPMThresholdByPortHPUASValue.setStatus('current')
geCrntPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20), )
if mibBuilder.loadTexts: geCrntPMTable.setStatus('current')
geCrntPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1), ).setIndexNames((0, "BTI-7000-MIB", "geCrntPMShelfIdx"), (0, "BTI-7000-MIB", "geCrntPMSlotIdx"), (0, "BTI-7000-MIB", "geCrntPMPortIdx"), (0, "BTI-7000-MIB", "geCrntPMIntervalTypeIdx"))
if mibBuilder.loadTexts: geCrntPMEntry.setStatus('current')
geCrntPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: geCrntPMShelfIdx.setStatus('current')
geCrntPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: geCrntPMSlotIdx.setStatus('current')
geCrntPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 12)))
if mibBuilder.loadTexts: geCrntPMPortIdx.setStatus('current')
geCrntPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 4), PMIntervalType())
if mibBuilder.loadTexts: geCrntPMIntervalTypeIdx.setStatus('current')
geCrntPMOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 5), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPRValue.setStatus('current')
geCrntPMOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPRTimeStamp.setStatus('current')
geCrntPMOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 7), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPRValidity.setStatus('current')
geCrntPMOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 8), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPTValue.setStatus('current')
geCrntPMOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPTTimeStamp.setStatus('current')
geCrntPMOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 10), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPTValidity.setStatus('current')
geCrntPMTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMTempValue.setStatus('current')
geCrntPMTempTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMTempTimeStamp.setStatus('current')
geCrntPMTempValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 13), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMTempValidity.setStatus('current')
geCrntPMSupplyVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 14), FixedX10()).setUnits('mVolts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSupplyVoltageValue.setStatus('current')
geCrntPMSupplyVoltageTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 15), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSupplyVoltageTimeStamp.setStatus('current')
geCrntPMSupplyVoltageValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 16), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSupplyVoltageValidity.setStatus('current')
geCrntPMLBCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('mAmp').setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMLBCValue.setStatus('current')
geCrntPMLBCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 18), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMLBCTimeStamp.setStatus('current')
geCrntPMLBCValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 19), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMLBCValidity.setStatus('current')
geCrntPMCVValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMCVValue.setStatus('current')
geCrntPMCVTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMCVTimeStamp.setStatus('current')
geCrntPMCVValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 22), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMCVValidity.setStatus('current')
geCrntPMESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMESValue.setStatus('current')
geCrntPMESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 24), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMESTimeStamp.setStatus('current')
geCrntPMESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 25), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMESValidity.setStatus('current')
geCrntPMSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 26), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMSESValue.setStatus('current')
geCrntPMSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 27), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSESTimeStamp.setStatus('current')
geCrntPMSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 28), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSESValidity.setStatus('current')
geCrntPMTFRCRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 29), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMTFRCRXValue.setStatus('current')
geCrntPMTFRCRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 30), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMTFRCRXTimeStamp.setStatus('current')
geCrntPMTFRCRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 31), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMTFRCRXValidity.setStatus('current')
geCrntPMTFRCRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 32), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMTFRCRXInitialize.setStatus('current')
geCrntPMTFRCTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 33), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMTFRCTXValue.setStatus('current')
geCrntPMTFRCTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 34), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMTFRCTXTimeStamp.setStatus('current')
geCrntPMTFRCTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 35), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMTFRCTXValidity.setStatus('current')
geCrntPMTFRCTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 36), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMTFRCTXInitialize.setStatus('current')
geCrntPMFRDRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 37), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMFRDRValue.setStatus('current')
geCrntPMFRDRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 38), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMFRDRTimeStamp.setStatus('current')
geCrntPMFRDRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 39), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMFRDRValidity.setStatus('current')
geCrntPMFCSEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 40), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMFCSEValue.setStatus('current')
geCrntPMFCSETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 41), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMFCSETimeStamp.setStatus('current')
geCrntPMFCSEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 42), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMFCSEValidity.setStatus('current')
geCrntPMTBYCRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 43), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMTBYCRXValue.setStatus('current')
geCrntPMTBYCRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 44), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMTBYCRXTimeStamp.setStatus('current')
geCrntPMTBYCRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 45), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMTBYCRXValidity.setStatus('current')
geCrntPMTBYCRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 46), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMTBYCRXInitialize.setStatus('current')
geCrntPMTBYCTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 47), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMTBYCTXValue.setStatus('current')
geCrntPMTBYCTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 48), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMTBYCTXTimeStamp.setStatus('current')
geCrntPMTBYCTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 49), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMTBYCTXValidity.setStatus('current')
geCrntPMTBYCTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 50), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMTBYCTXInitialize.setStatus('current')
geCrntPMBCSTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 51), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMBCSTValue.setStatus('current')
geCrntPMBCSTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 52), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMBCSTTimeStamp.setStatus('current')
geCrntPMBCSTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 53), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMBCSTValidity.setStatus('current')
geCrntPMBCSTInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 54), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMBCSTInitialize.setStatus('current')
geCrntPMMCSTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 55), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMMCSTValue.setStatus('current')
geCrntPMMCSTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 56), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMMCSTTimeStamp.setStatus('current')
geCrntPMMCSTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 57), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMMCSTValidity.setStatus('current')
geCrntPMMCSTInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 58), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMMCSTInitialize.setStatus('current')
geCrntPMSIZE64Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 59), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSIZE64Value.setStatus('current')
geCrntPMSIZE64TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 60), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSIZE64TimeStamp.setStatus('current')
geCrntPMSIZE64Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 61), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSIZE64Validity.setStatus('current')
geCrntPMSIZE64Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 62), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMSIZE64Initialize.setStatus('current')
geCrntPMSIZE65To127Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 63), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSIZE65To127Value.setStatus('current')
geCrntPMSIZE65To127TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 64), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSIZE65To127TimeStamp.setStatus('current')
geCrntPMSIZE65To127Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 65), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSIZE65To127Validity.setStatus('current')
geCrntPMSIZE65To127Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 66), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMSIZE65To127Initialize.setStatus('current')
geCrntPMSIZE128To255Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 67), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSIZE128To255Value.setStatus('current')
geCrntPMSIZE128To255TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 68), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSIZE128To255TimeStamp.setStatus('current')
geCrntPMSIZE128To255Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 69), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSIZE128To255Validity.setStatus('current')
geCrntPMSIZE128To255Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 70), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMSIZE128To255Initialize.setStatus('current')
geCrntPMSIZE256To511Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 71), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSIZE256To511Value.setStatus('current')
geCrntPMSIZE256To511TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 72), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSIZE256To511TimeStamp.setStatus('current')
geCrntPMSIZE256To511Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 73), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSIZE256To511Validity.setStatus('current')
geCrntPMSIZE256To511Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 74), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMSIZE256To511Initialize.setStatus('current')
geCrntPMSIZE512To1023Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 75), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSIZE512To1023Value.setStatus('current')
geCrntPMSIZE512To1023TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 76), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSIZE512To1023TimeStamp.setStatus('current')
geCrntPMSIZE512To1023Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 77), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSIZE512To1023Validity.setStatus('current')
geCrntPMSIZE512To1023Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 78), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMSIZE512To1023Initialize.setStatus('current')
geCrntPMSIZE1024To1518Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 79), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSIZE1024To1518Value.setStatus('current')
geCrntPMSIZE1024To1518TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 80), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSIZE1024To1518TimeStamp.setStatus('current')
geCrntPMSIZE1024To1518Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 81), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSIZE1024To1518Validity.setStatus('current')
geCrntPMSIZE1024To1518Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 82), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMSIZE1024To1518Initialize.setStatus('current')
geCrntPMSIZEOver1518Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 83), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSIZEOver1518Value.setStatus('current')
geCrntPMSIZEOver1518TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 84), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSIZEOver1518TimeStamp.setStatus('current')
geCrntPMSIZEOver1518Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 85), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMSIZEOver1518Validity.setStatus('current')
geCrntPMSIZEOver1518Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 86), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMSIZEOver1518Initialize.setStatus('current')
geCrntPMTPFCRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 87), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMTPFCRXValue.setStatus('current')
geCrntPMTPFCRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 88), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMTPFCRXTimeStamp.setStatus('current')
geCrntPMTPFCRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 89), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMTPFCRXValidity.setStatus('current')
geCrntPMTPFCRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 90), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMTPFCRXInitialize.setStatus('current')
geCrntPMTPFCTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 91), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMTPFCTXValue.setStatus('current')
geCrntPMTPFCTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 92), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMTPFCTXTimeStamp.setStatus('current')
geCrntPMTPFCTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 93), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMTPFCTXValidity.setStatus('current')
geCrntPMTPFCTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 94), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMTPFCTXInitialize.setStatus('current')
geCrntPMUSIZEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 95), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMUSIZEValue.setStatus('current')
geCrntPMUSIZETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 96), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMUSIZETimeStamp.setStatus('current')
geCrntPMUSIZEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 97), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMUSIZEValidity.setStatus('current')
geCrntPMOSIZEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 98), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMOSIZEValue.setStatus('current')
geCrntPMOSIZETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 99), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOSIZETimeStamp.setStatus('current')
geCrntPMOSIZEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 100), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOSIZEValidity.setStatus('current')
geCrntPMFRGTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 101), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMFRGTValue.setStatus('current')
geCrntPMFRGTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 102), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMFRGTTimeStamp.setStatus('current')
geCrntPMFRGTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 103), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMFRGTValidity.setStatus('current')
geCrntPMJABRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 104), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMJABRValue.setStatus('current')
geCrntPMJABRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 105), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMJABRTimeStamp.setStatus('current')
geCrntPMJABRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 106), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMJABRValidity.setStatus('current')
geCrntPMCVInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 107), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMCVInitialize.setStatus('current')
geCrntPMESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 108), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMESInitialize.setStatus('current')
geCrntPMSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 109), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMSESInitialize.setStatus('current')
geCrntPMFCSEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 110), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMFCSEInitialize.setStatus('current')
geCrntPMFRDRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 111), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMFRDRInitialize.setStatus('current')
geCrntPMUSIZEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 112), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMUSIZEInitialize.setStatus('current')
geCrntPMOSIZEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 113), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMOSIZEInitialize.setStatus('current')
geCrntPMFRGTInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 114), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMFRGTInitialize.setStatus('current')
geCrntPMJABRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 115), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMJABRInitialize.setStatus('current')
geCrntPMUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 116), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMUASValue.setStatus('current')
geCrntPMUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 117), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMUASTimeStamp.setStatus('current')
geCrntPMUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 118), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMUASValidity.setStatus('current')
geCrntPMUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 119), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMUASInitialize.setStatus('current')
geCrntPMOPRMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 120), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPRMinValue.setStatus('current')
geCrntPMOPRMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 121), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPRMinTimeStamp.setStatus('current')
geCrntPMOPRMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 122), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPRMinValidity.setStatus('current')
geCrntPMOPRMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 123), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMOPRMinInitialize.setStatus('current')
geCrntPMOPRMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 124), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPRMaxValue.setStatus('current')
geCrntPMOPRMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 125), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPRMaxTimeStamp.setStatus('current')
geCrntPMOPRMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 126), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPRMaxValidity.setStatus('current')
geCrntPMOPRMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 127), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMOPRMaxInitialize.setStatus('current')
geCrntPMOPRAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 128), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPRAvgValue.setStatus('current')
geCrntPMOPRAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 129), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPRAvgTimeStamp.setStatus('current')
geCrntPMOPRAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 130), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPRAvgValidity.setStatus('current')
geCrntPMOPRAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 131), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMOPRAvgInitialize.setStatus('current')
geCrntPMOPTMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 132), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPTMinValue.setStatus('current')
geCrntPMOPTMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 133), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPTMinTimeStamp.setStatus('current')
geCrntPMOPTMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 134), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPTMinValidity.setStatus('current')
geCrntPMOPTMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 135), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMOPTMinInitialize.setStatus('current')
geCrntPMOPTMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 136), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPTMaxValue.setStatus('current')
geCrntPMOPTMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 137), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPTMaxTimeStamp.setStatus('current')
geCrntPMOPTMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 138), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPTMaxValidity.setStatus('current')
geCrntPMOPTMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 139), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMOPTMaxInitialize.setStatus('current')
geCrntPMOPTAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 140), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPTAvgValue.setStatus('current')
geCrntPMOPTAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 141), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPTAvgTimeStamp.setStatus('current')
geCrntPMOPTAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 142), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geCrntPMOPTAvgValidity.setStatus('current')
geCrntPMOPTAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 20, 1, 143), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geCrntPMOPTAvgInitialize.setStatus('current')
geHistPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21), )
if mibBuilder.loadTexts: geHistPMTable.setStatus('current')
geHistPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1), ).setIndexNames((0, "BTI-7000-MIB", "geHistPMShelfIdx"), (0, "BTI-7000-MIB", "geHistPMSlotIdx"), (0, "BTI-7000-MIB", "geHistPMPortIdx"), (0, "BTI-7000-MIB", "geHistPMIntervalTypeIdx"), (0, "BTI-7000-MIB", "geHistPMIntervalIdx"))
if mibBuilder.loadTexts: geHistPMEntry.setStatus('current')
geHistPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: geHistPMShelfIdx.setStatus('current')
geHistPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: geHistPMSlotIdx.setStatus('current')
geHistPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 12)))
if mibBuilder.loadTexts: geHistPMPortIdx.setStatus('current')
geHistPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 4), PMIntervalType())
if mibBuilder.loadTexts: geHistPMIntervalTypeIdx.setStatus('current')
geHistPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: geHistPMIntervalIdx.setStatus('current')
geHistPMOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 6), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPRValue.setStatus('current')
geHistPMOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPRTimeStamp.setStatus('current')
geHistPMOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 8), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPRValidity.setStatus('current')
geHistPMOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 9), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPTValue.setStatus('current')
geHistPMOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPTTimeStamp.setStatus('current')
geHistPMOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 11), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPTValidity.setStatus('current')
geHistPMTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMTempValue.setStatus('current')
geHistPMTempTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMTempTimeStamp.setStatus('current')
geHistPMTempValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 14), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMTempValidity.setStatus('current')
geHistPMSupplyVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 15), FixedX10()).setUnits('mVolts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSupplyVoltageValue.setStatus('current')
geHistPMSupplyVoltageTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSupplyVoltageTimeStamp.setStatus('current')
geHistPMSupplyVoltageValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 17), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSupplyVoltageValidity.setStatus('current')
geHistPMLBCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('mAmp').setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMLBCValue.setStatus('current')
geHistPMLBCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 19), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMLBCTimeStamp.setStatus('current')
geHistPMLBCValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 20), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMLBCValidity.setStatus('current')
geHistPMCVValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMCVValue.setStatus('current')
geHistPMCVTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 22), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMCVTimeStamp.setStatus('current')
geHistPMCVValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 23), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMCVValidity.setStatus('current')
geHistPMESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMESValue.setStatus('current')
geHistPMESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 25), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMESTimeStamp.setStatus('current')
geHistPMESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 26), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMESValidity.setStatus('current')
geHistPMSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 27), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMSESValue.setStatus('current')
geHistPMSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 28), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSESTimeStamp.setStatus('current')
geHistPMSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 29), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSESValidity.setStatus('current')
geHistPMTFRCRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 30), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMTFRCRXValue.setStatus('current')
geHistPMTFRCRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 31), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMTFRCRXTimeStamp.setStatus('current')
geHistPMTFRCRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 32), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMTFRCRXValidity.setStatus('current')
geHistPMTFRCRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 33), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMTFRCRXInitialize.setStatus('current')
geHistPMTFRCTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 34), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMTFRCTXValue.setStatus('current')
geHistPMTFRCTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 35), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMTFRCTXTimeStamp.setStatus('current')
geHistPMTFRCTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 36), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMTFRCTXValidity.setStatus('current')
geHistPMTFRCTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 37), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMTFRCTXInitialize.setStatus('current')
geHistPMFRDRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 38), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMFRDRValue.setStatus('current')
geHistPMFRDRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 39), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMFRDRTimeStamp.setStatus('current')
geHistPMFRDRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 40), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMFRDRValidity.setStatus('current')
geHistPMFCSEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 41), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMFCSEValue.setStatus('current')
geHistPMFCSETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 42), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMFCSETimeStamp.setStatus('current')
geHistPMFCSEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 43), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMFCSEValidity.setStatus('current')
geHistPMTBYCRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 44), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMTBYCRXValue.setStatus('current')
geHistPMTBYCRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 45), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMTBYCRXTimeStamp.setStatus('current')
geHistPMTBYCRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 46), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMTBYCRXValidity.setStatus('current')
geHistPMTBYCRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 47), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMTBYCRXInitialize.setStatus('current')
geHistPMTBYCTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 48), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMTBYCTXValue.setStatus('current')
geHistPMTBYCTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 49), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMTBYCTXTimeStamp.setStatus('current')
geHistPMTBYCTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 50), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMTBYCTXValidity.setStatus('current')
geHistPMTBYCTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 51), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMTBYCTXInitialize.setStatus('current')
geHistPMBCSTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 52), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMBCSTValue.setStatus('current')
geHistPMBCSTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 53), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMBCSTTimeStamp.setStatus('current')
geHistPMBCSTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 54), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMBCSTValidity.setStatus('current')
geHistPMBCSTInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 55), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMBCSTInitialize.setStatus('current')
geHistPMMCSTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 56), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMMCSTValue.setStatus('current')
geHistPMMCSTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 57), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMMCSTTimeStamp.setStatus('current')
geHistPMMCSTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 58), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMMCSTValidity.setStatus('current')
geHistPMMCSTInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 59), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMMCSTInitialize.setStatus('current')
geHistPMSIZE64Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 60), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSIZE64Value.setStatus('current')
geHistPMSIZE64TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 61), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSIZE64TimeStamp.setStatus('current')
geHistPMSIZE64Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 62), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSIZE64Validity.setStatus('current')
geHistPMSIZE64Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 63), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMSIZE64Initialize.setStatus('current')
geHistPMSIZE65To127Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 64), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSIZE65To127Value.setStatus('current')
geHistPMSIZE65To127TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 65), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSIZE65To127TimeStamp.setStatus('current')
geHistPMSIZE65To127Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 66), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSIZE65To127Validity.setStatus('current')
geHistPMSIZE65To127Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 67), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMSIZE65To127Initialize.setStatus('current')
geHistPMSIZE128To255Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 68), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSIZE128To255Value.setStatus('current')
geHistPMSIZE128To255TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 69), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSIZE128To255TimeStamp.setStatus('current')
geHistPMSIZE128To255Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 70), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSIZE128To255Validity.setStatus('current')
geHistPMSIZE128To255Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 71), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMSIZE128To255Initialize.setStatus('current')
geHistPMSIZE256To511Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 72), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSIZE256To511Value.setStatus('current')
geHistPMSIZE256To511TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 73), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSIZE256To511TimeStamp.setStatus('current')
geHistPMSIZE256To511Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 74), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSIZE256To511Validity.setStatus('current')
geHistPMSIZE256To511Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 75), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMSIZE256To511Initialize.setStatus('current')
geHistPMSIZE512To1023Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 76), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSIZE512To1023Value.setStatus('current')
geHistPMSIZE512To1023TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 77), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSIZE512To1023TimeStamp.setStatus('current')
geHistPMSIZE512To1023Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 78), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSIZE512To1023Validity.setStatus('current')
geHistPMSIZE512To1023Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 79), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMSIZE512To1023Initialize.setStatus('current')
geHistPMSIZE1024To1518Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 80), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSIZE1024To1518Value.setStatus('current')
geHistPMSIZE1024To1518TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 81), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSIZE1024To1518TimeStamp.setStatus('current')
geHistPMSIZE1024To1518Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 82), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSIZE1024To1518Validity.setStatus('current')
geHistPMSIZE1024To1518Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 83), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMSIZE1024To1518Initialize.setStatus('current')
geHistPMSIZEOver1518Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 84), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSIZEOver1518Value.setStatus('current')
geHistPMSIZEOver1518TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 85), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSIZEOver1518TimeStamp.setStatus('current')
geHistPMSIZEOver1518Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 86), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMSIZEOver1518Validity.setStatus('current')
geHistPMSIZEOver1518Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 87), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMSIZEOver1518Initialize.setStatus('current')
geHistPMTPFCRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 88), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMTPFCRXValue.setStatus('current')
geHistPMTPFCRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 89), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMTPFCRXTimeStamp.setStatus('current')
geHistPMTPFCRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 90), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMTPFCRXValidity.setStatus('current')
geHistPMTPFCRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 91), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMTPFCRXInitialize.setStatus('current')
geHistPMTPFCTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 92), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMTPFCTXValue.setStatus('current')
geHistPMTPFCTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 93), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMTPFCTXTimeStamp.setStatus('current')
geHistPMTPFCTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 94), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMTPFCTXValidity.setStatus('current')
geHistPMTPFCTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 95), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMTPFCTXInitialize.setStatus('current')
geHistPMUSIZEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 96), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMUSIZEValue.setStatus('current')
geHistPMUSIZETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 97), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMUSIZETimeStamp.setStatus('current')
geHistPMUSIZEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 98), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMUSIZEValidity.setStatus('current')
geHistPMOSIZEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 99), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMOSIZEValue.setStatus('current')
geHistPMOSIZETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 100), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOSIZETimeStamp.setStatus('current')
geHistPMOSIZEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 101), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOSIZEValidity.setStatus('current')
geHistPMFRGTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 102), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMFRGTValue.setStatus('current')
geHistPMFRGTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 103), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMFRGTTimeStamp.setStatus('current')
geHistPMFRGTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 104), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMFRGTValidity.setStatus('current')
geHistPMJABRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 105), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMJABRValue.setStatus('current')
geHistPMJABRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 106), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMJABRTimeStamp.setStatus('current')
geHistPMJABRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 107), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMJABRValidity.setStatus('current')
geHistPMCVInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 108), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMCVInitialize.setStatus('current')
geHistPMESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 109), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMESInitialize.setStatus('current')
geHistPMSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 110), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMSESInitialize.setStatus('current')
geHistPMFCSEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 111), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMFCSEInitialize.setStatus('current')
geHistPMFRDRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 112), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMFRDRInitialize.setStatus('current')
geHistPMUSIZEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 113), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMUSIZEInitialize.setStatus('current')
geHistPMOSIZEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 114), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMOSIZEInitialize.setStatus('current')
geHistPMFRGTInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 115), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMFRGTInitialize.setStatus('current')
geHistPMJABRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 116), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMJABRInitialize.setStatus('current')
geHistPMUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 117), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMUASValue.setStatus('current')
geHistPMUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 118), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMUASTimeStamp.setStatus('current')
geHistPMUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 119), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMUASValidity.setStatus('current')
geHistPMUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 120), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMUASInitialize.setStatus('current')
geHistPMOPRMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 121), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPRMinValue.setStatus('current')
geHistPMOPRMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 122), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPRMinTimeStamp.setStatus('current')
geHistPMOPRMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 123), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPRMinValidity.setStatus('current')
geHistPMOPRMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 124), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMOPRMinInitialize.setStatus('current')
geHistPMOPRMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 125), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPRMaxValue.setStatus('current')
geHistPMOPRMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 126), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPRMaxTimeStamp.setStatus('current')
geHistPMOPRMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 127), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPRMaxValidity.setStatus('current')
geHistPMOPRMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 128), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMOPRMaxInitialize.setStatus('current')
geHistPMOPRAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 129), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPRAvgValue.setStatus('current')
geHistPMOPRAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 130), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPRAvgTimeStamp.setStatus('current')
geHistPMOPRAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 131), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPRAvgValidity.setStatus('current')
geHistPMOPRAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 132), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMOPRAvgInitialize.setStatus('current')
geHistPMOPTMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 133), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPTMinValue.setStatus('current')
geHistPMOPTMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 134), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPTMinTimeStamp.setStatus('current')
geHistPMOPTMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 135), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPTMinValidity.setStatus('current')
geHistPMOPTMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 136), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMOPTMinInitialize.setStatus('current')
geHistPMOPTMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 137), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPTMaxValue.setStatus('current')
geHistPMOPTMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 138), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPTMaxTimeStamp.setStatus('current')
geHistPMOPTMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 139), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPTMaxValidity.setStatus('current')
geHistPMOPTMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 140), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMOPTMaxInitialize.setStatus('current')
geHistPMOPTAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 141), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPTAvgValue.setStatus('current')
geHistPMOPTAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 142), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPTAvgTimeStamp.setStatus('current')
geHistPMOPTAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 143), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geHistPMOPTAvgValidity.setStatus('current')
geHistPMOPTAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 21, 1, 144), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geHistPMOPTAvgInitialize.setStatus('current')
gePMThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22), )
if mibBuilder.loadTexts: gePMThresholdTable.setStatus('current')
gePMThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1), ).setIndexNames((0, "BTI-7000-MIB", "gePMThresholdShelfIdx"), (0, "BTI-7000-MIB", "gePMThresholdSlotIdx"), (0, "BTI-7000-MIB", "gePMThresholdPortIdx"), (0, "BTI-7000-MIB", "gePMThresholdIntervalTypeIdx"))
if mibBuilder.loadTexts: gePMThresholdEntry.setStatus('current')
gePMThresholdShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: gePMThresholdShelfIdx.setStatus('current')
gePMThresholdSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: gePMThresholdSlotIdx.setStatus('current')
gePMThresholdPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 12)))
if mibBuilder.loadTexts: gePMThresholdPortIdx.setStatus('current')
gePMThresholdIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1, 4), PMIntervalType())
if mibBuilder.loadTexts: gePMThresholdIntervalTypeIdx.setStatus('current')
gePMThresholdCVValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gePMThresholdCVValue.setStatus('current')
gePMThresholdESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gePMThresholdESValue.setStatus('current')
gePMThresholdSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gePMThresholdSESValue.setStatus('current')
gePMThresholdFRDRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gePMThresholdFRDRValue.setStatus('current')
gePMThresholdFCSEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gePMThresholdFCSEValue.setStatus('current')
gePMThresholdUSIZEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gePMThresholdUSIZEValue.setStatus('current')
gePMThresholdOSIZEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gePMThresholdOSIZEValue.setStatus('current')
gePMThresholdFRGTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gePMThresholdFRGTValue.setStatus('current')
gePMThresholdJABRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gePMThresholdJABRValue.setStatus('current')
gePMThresholdUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 22, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gePMThresholdUASValue.setStatus('current')
fcCrntPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23), )
if mibBuilder.loadTexts: fcCrntPMTable.setStatus('current')
fcCrntPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1), ).setIndexNames((0, "BTI-7000-MIB", "fcCrntPMShelfIdx"), (0, "BTI-7000-MIB", "fcCrntPMSlotIdx"), (0, "BTI-7000-MIB", "fcCrntPMPortIdx"), (0, "BTI-7000-MIB", "fcCrntPMIntervalTypeIdx"))
if mibBuilder.loadTexts: fcCrntPMEntry.setStatus('current')
fcCrntPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: fcCrntPMShelfIdx.setStatus('current')
fcCrntPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: fcCrntPMSlotIdx.setStatus('current')
fcCrntPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 12)))
if mibBuilder.loadTexts: fcCrntPMPortIdx.setStatus('current')
fcCrntPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 4), PMIntervalType())
if mibBuilder.loadTexts: fcCrntPMIntervalTypeIdx.setStatus('current')
fcCrntPMOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 5), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPRValue.setStatus('current')
fcCrntPMOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPRTimeStamp.setStatus('current')
fcCrntPMOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 7), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPRValidity.setStatus('current')
fcCrntPMOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 8), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPTValue.setStatus('current')
fcCrntPMOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPTTimeStamp.setStatus('current')
fcCrntPMOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 10), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPTValidity.setStatus('current')
fcCrntPMTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMTempValue.setStatus('current')
fcCrntPMTempTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMTempTimeStamp.setStatus('current')
fcCrntPMTempValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 13), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMTempValidity.setStatus('current')
fcCrntPMSupplyVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 14), FixedX10()).setUnits('mVolts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMSupplyVoltageValue.setStatus('current')
fcCrntPMSupplyVoltageTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 15), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMSupplyVoltageTimeStamp.setStatus('current')
fcCrntPMSupplyVoltageValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 16), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMSupplyVoltageValidity.setStatus('current')
fcCrntPMLBCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('mAmp').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMLBCValue.setStatus('current')
fcCrntPMLBCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 18), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMLBCTimeStamp.setStatus('current')
fcCrntPMLBCValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 19), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMLBCValidity.setStatus('current')
fcCrntPMCVValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcCrntPMCVValue.setStatus('current')
fcCrntPMCVTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMCVTimeStamp.setStatus('current')
fcCrntPMCVValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 22), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMCVValidity.setStatus('current')
fcCrntPMESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcCrntPMESValue.setStatus('current')
fcCrntPMESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 24), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMESTimeStamp.setStatus('current')
fcCrntPMESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 25), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMESValidity.setStatus('current')
fcCrntPMSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 26), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcCrntPMSESValue.setStatus('current')
fcCrntPMSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 27), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMSESTimeStamp.setStatus('current')
fcCrntPMSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 28), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMSESValidity.setStatus('current')
fcCrntPMCVInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 29), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcCrntPMCVInitialize.setStatus('current')
fcCrntPMESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 30), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcCrntPMESInitialize.setStatus('current')
fcCrntPMSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 31), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcCrntPMSESInitialize.setStatus('current')
fcCrntPMUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 32), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcCrntPMUASValue.setStatus('current')
fcCrntPMUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 33), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMUASTimeStamp.setStatus('current')
fcCrntPMUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 34), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMUASValidity.setStatus('current')
fcCrntPMUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 35), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcCrntPMUASInitialize.setStatus('current')
fcCrntPMOPRMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 36), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPRMinValue.setStatus('current')
fcCrntPMOPRMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 37), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPRMinTimeStamp.setStatus('current')
fcCrntPMOPRMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 38), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPRMinValidity.setStatus('current')
fcCrntPMOPRMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 39), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcCrntPMOPRMinInitialize.setStatus('current')
fcCrntPMOPRMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 40), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPRMaxValue.setStatus('current')
fcCrntPMOPRMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 41), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPRMaxTimeStamp.setStatus('current')
fcCrntPMOPRMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 42), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPRMaxValidity.setStatus('current')
fcCrntPMOPRMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 43), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcCrntPMOPRMaxInitialize.setStatus('current')
fcCrntPMOPRAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 44), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPRAvgValue.setStatus('current')
fcCrntPMOPRAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 45), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPRAvgTimeStamp.setStatus('current')
fcCrntPMOPRAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 46), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPRAvgValidity.setStatus('current')
fcCrntPMOPRAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 47), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcCrntPMOPRAvgInitialize.setStatus('current')
fcCrntPMOPTMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 48), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPTMinValue.setStatus('current')
fcCrntPMOPTMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 49), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPTMinTimeStamp.setStatus('current')
fcCrntPMOPTMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 50), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPTMinValidity.setStatus('current')
fcCrntPMOPTMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 51), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcCrntPMOPTMinInitialize.setStatus('current')
fcCrntPMOPTMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 52), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPTMaxValue.setStatus('current')
fcCrntPMOPTMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 53), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPTMaxTimeStamp.setStatus('current')
fcCrntPMOPTMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 54), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPTMaxValidity.setStatus('current')
fcCrntPMOPTMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 55), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcCrntPMOPTMaxInitialize.setStatus('current')
fcCrntPMOPTAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 56), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPTAvgValue.setStatus('current')
fcCrntPMOPTAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 57), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPTAvgTimeStamp.setStatus('current')
fcCrntPMOPTAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 58), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCrntPMOPTAvgValidity.setStatus('current')
fcCrntPMOPTAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 23, 1, 59), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcCrntPMOPTAvgInitialize.setStatus('current')
fcHistPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24), )
if mibBuilder.loadTexts: fcHistPMTable.setStatus('current')
fcHistPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1), ).setIndexNames((0, "BTI-7000-MIB", "fcHistPMShelfIdx"), (0, "BTI-7000-MIB", "fcHistPMSlotIdx"), (0, "BTI-7000-MIB", "fcHistPMPortIdx"), (0, "BTI-7000-MIB", "fcHistPMIntervalTypeIdx"), (0, "BTI-7000-MIB", "fcHistPMIntervalIdx"))
if mibBuilder.loadTexts: fcHistPMEntry.setStatus('current')
fcHistPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: fcHistPMShelfIdx.setStatus('current')
fcHistPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: fcHistPMSlotIdx.setStatus('current')
fcHistPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 12)))
if mibBuilder.loadTexts: fcHistPMPortIdx.setStatus('current')
fcHistPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 4), PMIntervalType())
if mibBuilder.loadTexts: fcHistPMIntervalTypeIdx.setStatus('current')
fcHistPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: fcHistPMIntervalIdx.setStatus('current')
fcHistPMOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 6), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPRValue.setStatus('current')
fcHistPMOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPRTimeStamp.setStatus('current')
fcHistPMOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 8), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPRValidity.setStatus('current')
fcHistPMOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 9), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPTValue.setStatus('current')
fcHistPMOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPTTimeStamp.setStatus('current')
fcHistPMOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 11), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPTValidity.setStatus('current')
fcHistPMTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMTempValue.setStatus('current')
fcHistPMTempTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMTempTimeStamp.setStatus('current')
fcHistPMTempValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 14), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMTempValidity.setStatus('current')
fcHistPMSupplyVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 15), FixedX10()).setUnits('mVolts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMSupplyVoltageValue.setStatus('current')
fcHistPMSupplyVoltageTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMSupplyVoltageTimeStamp.setStatus('current')
fcHistPMSupplyVoltageValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 17), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMSupplyVoltageValidity.setStatus('current')
fcHistPMLBCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('mAmp').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMLBCValue.setStatus('current')
fcHistPMLBCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 19), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMLBCTimeStamp.setStatus('current')
fcHistPMLBCValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 20), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMLBCValidity.setStatus('current')
fcHistPMCVValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHistPMCVValue.setStatus('current')
fcHistPMCVTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 22), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMCVTimeStamp.setStatus('current')
fcHistPMCVValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 23), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMCVValidity.setStatus('current')
fcHistPMESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHistPMESValue.setStatus('current')
fcHistPMESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 25), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMESTimeStamp.setStatus('current')
fcHistPMESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 26), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMESValidity.setStatus('current')
fcHistPMSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 27), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHistPMSESValue.setStatus('current')
fcHistPMSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 28), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMSESTimeStamp.setStatus('current')
fcHistPMSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 29), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMSESValidity.setStatus('current')
fcHistPMCVInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 30), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHistPMCVInitialize.setStatus('current')
fcHistPMESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 31), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHistPMESInitialize.setStatus('current')
fcHistPMSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 32), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHistPMSESInitialize.setStatus('current')
fcHistPMUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 33), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHistPMUASValue.setStatus('current')
fcHistPMUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 34), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMUASTimeStamp.setStatus('current')
fcHistPMUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 35), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMUASValidity.setStatus('current')
fcHistPMUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 36), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHistPMUASInitialize.setStatus('current')
fcHistPMOPRMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 37), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPRMinValue.setStatus('current')
fcHistPMOPRMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 38), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPRMinTimeStamp.setStatus('current')
fcHistPMOPRMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 39), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPRMinValidity.setStatus('current')
fcHistPMOPRMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 40), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHistPMOPRMinInitialize.setStatus('current')
fcHistPMOPRMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 41), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPRMaxValue.setStatus('current')
fcHistPMOPRMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 42), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPRMaxTimeStamp.setStatus('current')
fcHistPMOPRMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 43), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPRMaxValidity.setStatus('current')
fcHistPMOPRMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 44), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHistPMOPRMaxInitialize.setStatus('current')
fcHistPMOPRAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 45), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPRAvgValue.setStatus('current')
fcHistPMOPRAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 46), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPRAvgTimeStamp.setStatus('current')
fcHistPMOPRAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 47), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPRAvgValidity.setStatus('current')
fcHistPMOPRAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 48), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHistPMOPRAvgInitialize.setStatus('current')
fcHistPMOPTMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 49), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPTMinValue.setStatus('current')
fcHistPMOPTMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 50), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPTMinTimeStamp.setStatus('current')
fcHistPMOPTMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 51), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPTMinValidity.setStatus('current')
fcHistPMOPTMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 52), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHistPMOPTMinInitialize.setStatus('current')
fcHistPMOPTMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 53), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPTMaxValue.setStatus('current')
fcHistPMOPTMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 54), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPTMaxTimeStamp.setStatus('current')
fcHistPMOPTMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 55), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPTMaxValidity.setStatus('current')
fcHistPMOPTMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 56), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHistPMOPTMaxInitialize.setStatus('current')
fcHistPMOPTAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 57), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPTAvgValue.setStatus('current')
fcHistPMOPTAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 58), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPTAvgTimeStamp.setStatus('current')
fcHistPMOPTAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 59), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHistPMOPTAvgValidity.setStatus('current')
fcHistPMOPTAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 24, 1, 60), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcHistPMOPTAvgInitialize.setStatus('current')
fcPMThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 25), )
if mibBuilder.loadTexts: fcPMThresholdTable.setStatus('current')
fcPMThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 25, 1), ).setIndexNames((0, "BTI-7000-MIB", "fcPMThresholdShelfIdx"), (0, "BTI-7000-MIB", "fcPMThresholdSlotIdx"), (0, "BTI-7000-MIB", "fcPMThresholdPortIdx"), (0, "BTI-7000-MIB", "fcPMThresholdIntervalTypeIdx"))
if mibBuilder.loadTexts: fcPMThresholdEntry.setStatus('current')
fcPMThresholdShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 25, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: fcPMThresholdShelfIdx.setStatus('current')
fcPMThresholdSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 25, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: fcPMThresholdSlotIdx.setStatus('current')
fcPMThresholdPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 25, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 12)))
if mibBuilder.loadTexts: fcPMThresholdPortIdx.setStatus('current')
fcPMThresholdIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 25, 1, 4), PMIntervalType())
if mibBuilder.loadTexts: fcPMThresholdIntervalTypeIdx.setStatus('current')
fcPMThresholdCVValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 25, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcPMThresholdCVValue.setStatus('current')
fcPMThresholdESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 25, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcPMThresholdESValue.setStatus('current')
fcPMThresholdSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 25, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcPMThresholdSESValue.setStatus('current')
fcPMThresholdUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 25, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcPMThresholdUASValue.setStatus('current')
ethL1IFCrntPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26), )
if mibBuilder.loadTexts: ethL1IFCrntPMTable.setStatus('current')
ethL1IFCrntPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1), ).setIndexNames((0, "BTI-7000-MIB", "ethL1IFCrntPMShelfIdx"), (0, "BTI-7000-MIB", "ethL1IFCrntPMSlotIdx"), (0, "BTI-7000-MIB", "ethL1IFCrntPMPortTypeIdx"), (0, "BTI-7000-MIB", "ethL1IFCrntPMPortIdx"), (0, "BTI-7000-MIB", "ethL1IFCrntPMIntervalTypeIdx"))
if mibBuilder.loadTexts: ethL1IFCrntPMEntry.setStatus('current')
ethL1IFCrntPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: ethL1IFCrntPMShelfIdx.setStatus('current')
ethL1IFCrntPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: ethL1IFCrntPMSlotIdx.setStatus('current')
ethL1IFCrntPMPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 3), PvxL1PortType())
if mibBuilder.loadTexts: ethL1IFCrntPMPortTypeIdx.setStatus('current')
ethL1IFCrntPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: ethL1IFCrntPMPortIdx.setStatus('current')
ethL1IFCrntPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 5), PMIntervalType())
if mibBuilder.loadTexts: ethL1IFCrntPMIntervalTypeIdx.setStatus('current')
ethL1IFCrntPMOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 6), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPRValue.setStatus('current')
ethL1IFCrntPMOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPRTimeStamp.setStatus('current')
ethL1IFCrntPMOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 8), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPRValidity.setStatus('current')
ethL1IFCrntPMOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 9), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPTValue.setStatus('current')
ethL1IFCrntPMOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPTTimeStamp.setStatus('current')
ethL1IFCrntPMOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 11), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPTValidity.setStatus('current')
ethL1IFCrntPMTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMTempValue.setStatus('current')
ethL1IFCrntPMTempTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMTempTimeStamp.setStatus('current')
ethL1IFCrntPMTempValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 14), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMTempValidity.setStatus('current')
ethL1IFCrntPMSupplyVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 15), FixedX10()).setUnits('mVolts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMSupplyVoltageValue.setStatus('current')
ethL1IFCrntPMSupplyVoltageTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMSupplyVoltageTimeStamp.setStatus('current')
ethL1IFCrntPMSupplyVoltageValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 17), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMSupplyVoltageValidity.setStatus('current')
ethL1IFCrntPMSupplyVoltage2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 18), FixedX10()).setUnits('mVolts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMSupplyVoltage2Value.setStatus('current')
ethL1IFCrntPMSupplyVoltage2TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 19), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMSupplyVoltage2TimeStamp.setStatus('current')
ethL1IFCrntPMSupplyVoltage2Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 20), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMSupplyVoltage2Validity.setStatus('current')
ethL1IFCrntPMLBCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('mAmp').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMLBCValue.setStatus('current')
ethL1IFCrntPMLBCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 22), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMLBCTimeStamp.setStatus('current')
ethL1IFCrntPMLBCValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 23), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMLBCValidity.setStatus('current')
ethL1IFCrntPMCVValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMCVValue.setStatus('current')
ethL1IFCrntPMCVTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 25), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMCVTimeStamp.setStatus('current')
ethL1IFCrntPMCVValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 26), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMCVValidity.setStatus('current')
ethL1IFCrntPMCVInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 27), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMCVInitialize.setStatus('current')
ethL1IFCrntPMINVBLKValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 28), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMINVBLKValue.setStatus('current')
ethL1IFCrntPMINVBLKTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 29), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMINVBLKTimeStamp.setStatus('current')
ethL1IFCrntPMINVBLKValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 30), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMINVBLKValidity.setStatus('current')
ethL1IFCrntPMINVBLKInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 31), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMINVBLKInitialize.setStatus('current')
ethL1IFCrntPMESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 32), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMESValue.setStatus('current')
ethL1IFCrntPMESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 33), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMESTimeStamp.setStatus('current')
ethL1IFCrntPMESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 34), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMESValidity.setStatus('current')
ethL1IFCrntPMESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 35), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMESInitialize.setStatus('current')
ethL1IFCrntPMSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 36), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMSESValue.setStatus('current')
ethL1IFCrntPMSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 37), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMSESTimeStamp.setStatus('current')
ethL1IFCrntPMSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 38), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMSESValidity.setStatus('current')
ethL1IFCrntPMSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 39), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMSESInitialize.setStatus('current')
ethL1IFCrntPMOTUEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 40), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUEBValue.setStatus('current')
ethL1IFCrntPMOTUEBTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 41), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUEBTimeStamp.setStatus('current')
ethL1IFCrntPMOTUEBValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 42), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUEBValidity.setStatus('current')
ethL1IFCrntPMOTUEBInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 43), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUEBInitialize.setStatus('current')
ethL1IFCrntPMOTUBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 44), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUBBEValue.setStatus('current')
ethL1IFCrntPMOTUBBETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 45), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUBBETimeStamp.setStatus('current')
ethL1IFCrntPMOTUBBEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 46), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUBBEValidity.setStatus('current')
ethL1IFCrntPMOTUBBEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 47), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUBBEInitialize.setStatus('current')
ethL1IFCrntPMOTUESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 48), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUESValue.setStatus('current')
ethL1IFCrntPMOTUESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 49), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUESTimeStamp.setStatus('current')
ethL1IFCrntPMOTUESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 50), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUESValidity.setStatus('current')
ethL1IFCrntPMOTUESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 51), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUESInitialize.setStatus('current')
ethL1IFCrntPMOTUSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 52), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUSESValue.setStatus('current')
ethL1IFCrntPMOTUSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 53), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUSESTimeStamp.setStatus('current')
ethL1IFCrntPMOTUSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 54), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUSESValidity.setStatus('current')
ethL1IFCrntPMOTUSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 55), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUSESInitialize.setStatus('current')
ethL1IFCrntPMOTUOFSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 56), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUOFSValue.setStatus('current')
ethL1IFCrntPMOTUOFSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 57), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUOFSTimeStamp.setStatus('current')
ethL1IFCrntPMOTUOFSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 58), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUOFSValidity.setStatus('current')
ethL1IFCrntPMOTUOFSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 59), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUOFSInitialize.setStatus('current')
ethL1IFCrntPMNBITCRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 60), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMNBITCRValue.setStatus('current')
ethL1IFCrntPMNBITCRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 61), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMNBITCRTimeStamp.setStatus('current')
ethL1IFCrntPMNBITCRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 62), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMNBITCRValidity.setStatus('current')
ethL1IFCrntPMNBITCRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 63), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMNBITCRInitialize.setStatus('current')
ethL1IFCrntPMNBYTCRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 64), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMNBYTCRValue.setStatus('current')
ethL1IFCrntPMNBYTCRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 65), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMNBYTCRTimeStamp.setStatus('current')
ethL1IFCrntPMNBYTCRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 66), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMNBYTCRValidity.setStatus('current')
ethL1IFCrntPMNBYTCRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 67), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMNBYTCRInitialize.setStatus('current')
ethL1IFCrntPMUNCRCDWValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 68), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMUNCRCDWValue.setStatus('current')
ethL1IFCrntPMUNCRCDWTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 69), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMUNCRCDWTimeStamp.setStatus('current')
ethL1IFCrntPMUNCRCDWValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 70), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMUNCRCDWValidity.setStatus('current')
ethL1IFCrntPMUNCRCDWInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 71), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMUNCRCDWInitialize.setStatus('current')
ethL1IFCrntPMOTNBERValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 72), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOTNBERValue.setStatus('current')
ethL1IFCrntPMOTNBERTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 73), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOTNBERTimeStamp.setStatus('current')
ethL1IFCrntPMOTNBERValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 74), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOTNBERValidity.setStatus('current')
ethL1IFCrntPMOTNBERInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 75), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMOTNBERInitialize.setStatus('current')
ethL1IFCrntPMOTNAVGBERValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 76), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOTNAVGBERValue.setStatus('current')
ethL1IFCrntPMOTNAVGBERTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 77), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOTNAVGBERTimeStamp.setStatus('current')
ethL1IFCrntPMOTNAVGBERValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 78), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOTNAVGBERValidity.setStatus('current')
ethL1IFCrntPMOTNAVGBERInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 79), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMOTNAVGBERInitialize.setStatus('current')
ethL1IFCrntPMNBITCR64BitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 80), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMNBITCR64BitValue.setStatus('current')
ethL1IFCrntPMNBITCR64BitTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 81), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMNBITCR64BitTimeStamp.setStatus('current')
ethL1IFCrntPMNBITCR64BitValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 82), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMNBITCR64BitValidity.setStatus('current')
ethL1IFCrntPMNBITCR64BitInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 83), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMNBITCR64BitInitialize.setStatus('current')
ethL1IFCrntPMNBYTCR64BitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 84), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMNBYTCR64BitValue.setStatus('current')
ethL1IFCrntPMNBYTCR64BitTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 85), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMNBYTCR64BitTimeStamp.setStatus('current')
ethL1IFCrntPMNBYTCR64BitValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 86), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMNBYTCR64BitValidity.setStatus('current')
ethL1IFCrntPMNBYTCR64BitInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 87), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMNBYTCR64BitInitialize.setStatus('current')
ethL1IFCrntPMUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 88), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMUASValue.setStatus('current')
ethL1IFCrntPMUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 89), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMUASTimeStamp.setStatus('current')
ethL1IFCrntPMUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 90), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMUASValidity.setStatus('current')
ethL1IFCrntPMUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 91), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMUASInitialize.setStatus('current')
ethL1IFCrntPMOTUUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 92), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUUASValue.setStatus('current')
ethL1IFCrntPMOTUUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 93), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUUASTimeStamp.setStatus('current')
ethL1IFCrntPMOTUUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 94), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUUASValidity.setStatus('current')
ethL1IFCrntPMOTUUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 95), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMOTUUASInitialize.setStatus('current')
ethL1IFCrntPMOPRMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 96), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPRMinValue.setStatus('current')
ethL1IFCrntPMOPRMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 97), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPRMinTimeStamp.setStatus('current')
ethL1IFCrntPMOPRMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 98), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPRMinValidity.setStatus('current')
ethL1IFCrntPMOPRMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 99), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMOPRMinInitialize.setStatus('current')
ethL1IFCrntPMOPRMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 100), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPRMaxValue.setStatus('current')
ethL1IFCrntPMOPRMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 101), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPRMaxTimeStamp.setStatus('current')
ethL1IFCrntPMOPRMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 102), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPRMaxValidity.setStatus('current')
ethL1IFCrntPMOPRMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 103), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMOPRMaxInitialize.setStatus('current')
ethL1IFCrntPMOPRAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 104), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPRAvgValue.setStatus('current')
ethL1IFCrntPMOPRAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 105), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPRAvgTimeStamp.setStatus('current')
ethL1IFCrntPMOPRAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 106), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPRAvgValidity.setStatus('current')
ethL1IFCrntPMOPRAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 107), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMOPRAvgInitialize.setStatus('current')
ethL1IFCrntPMOPTMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 108), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPTMinValue.setStatus('current')
ethL1IFCrntPMOPTMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 109), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPTMinTimeStamp.setStatus('current')
ethL1IFCrntPMOPTMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 110), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPTMinValidity.setStatus('current')
ethL1IFCrntPMOPTMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 111), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMOPTMinInitialize.setStatus('current')
ethL1IFCrntPMOPTMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 112), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPTMaxValue.setStatus('current')
ethL1IFCrntPMOPTMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 113), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPTMaxTimeStamp.setStatus('current')
ethL1IFCrntPMOPTMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 114), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPTMaxValidity.setStatus('current')
ethL1IFCrntPMOPTMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 115), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMOPTMaxInitialize.setStatus('current')
ethL1IFCrntPMOPTAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 116), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPTAvgValue.setStatus('current')
ethL1IFCrntPMOPTAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 117), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPTAvgTimeStamp.setStatus('current')
ethL1IFCrntPMOPTAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 118), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFCrntPMOPTAvgValidity.setStatus('current')
ethL1IFCrntPMOPTAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 26, 1, 119), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFCrntPMOPTAvgInitialize.setStatus('current')
ethL1IFHistPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27), )
if mibBuilder.loadTexts: ethL1IFHistPMTable.setStatus('current')
ethL1IFHistPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1), ).setIndexNames((0, "BTI-7000-MIB", "ethL1IFHistPMShelfIdx"), (0, "BTI-7000-MIB", "ethL1IFHistPMSlotIdx"), (0, "BTI-7000-MIB", "ethL1IFHistPMPortTypeIdx"), (0, "BTI-7000-MIB", "ethL1IFHistPMPortIdx"), (0, "BTI-7000-MIB", "ethL1IFHistPMIntervalTypeIdx"), (0, "BTI-7000-MIB", "ethL1IFHistPMIntervalIdx"))
if mibBuilder.loadTexts: ethL1IFHistPMEntry.setStatus('current')
ethL1IFHistPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: ethL1IFHistPMShelfIdx.setStatus('current')
ethL1IFHistPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: ethL1IFHistPMSlotIdx.setStatus('current')
ethL1IFHistPMPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 3), PvxL1PortType())
if mibBuilder.loadTexts: ethL1IFHistPMPortTypeIdx.setStatus('current')
ethL1IFHistPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: ethL1IFHistPMPortIdx.setStatus('current')
ethL1IFHistPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 5), PMIntervalType())
if mibBuilder.loadTexts: ethL1IFHistPMIntervalTypeIdx.setStatus('current')
ethL1IFHistPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: ethL1IFHistPMIntervalIdx.setStatus('current')
ethL1IFHistPMOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 7), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPRValue.setStatus('current')
ethL1IFHistPMOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPRTimeStamp.setStatus('current')
ethL1IFHistPMOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 9), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPRValidity.setStatus('current')
ethL1IFHistPMOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 10), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPTValue.setStatus('current')
ethL1IFHistPMOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPTTimeStamp.setStatus('current')
ethL1IFHistPMOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 12), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPTValidity.setStatus('current')
ethL1IFHistPMTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMTempValue.setStatus('current')
ethL1IFHistPMTempTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMTempTimeStamp.setStatus('current')
ethL1IFHistPMTempValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 15), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMTempValidity.setStatus('current')
ethL1IFHistPMSupplyVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 16), FixedX10()).setUnits('mVolts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMSupplyVoltageValue.setStatus('current')
ethL1IFHistPMSupplyVoltageTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 17), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMSupplyVoltageTimeStamp.setStatus('current')
ethL1IFHistPMSupplyVoltageValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 18), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMSupplyVoltageValidity.setStatus('current')
ethL1IFHistPMSupplyVoltage2Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 19), FixedX10()).setUnits('mVolts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMSupplyVoltage2Value.setStatus('current')
ethL1IFHistPMSupplyVoltage2TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 20), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMSupplyVoltage2TimeStamp.setStatus('current')
ethL1IFHistPMSupplyVoltage2Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 21), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMSupplyVoltage2Validity.setStatus('current')
ethL1IFHistPMLBCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('mAmp').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMLBCValue.setStatus('current')
ethL1IFHistPMLBCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 23), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMLBCTimeStamp.setStatus('current')
ethL1IFHistPMLBCValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 24), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMLBCValidity.setStatus('current')
ethL1IFHistPMCVValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMCVValue.setStatus('current')
ethL1IFHistPMCVTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 26), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMCVTimeStamp.setStatus('current')
ethL1IFHistPMCVValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 27), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMCVValidity.setStatus('current')
ethL1IFHistPMCVInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 28), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMCVInitialize.setStatus('current')
ethL1IFHistPMINVBLKValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 29), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMINVBLKValue.setStatus('current')
ethL1IFHistPMINVBLKTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 30), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMINVBLKTimeStamp.setStatus('current')
ethL1IFHistPMINVBLKValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 31), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMINVBLKValidity.setStatus('current')
ethL1IFHistPMINVBLKInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 32), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMINVBLKInitialize.setStatus('current')
ethL1IFHistPMESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 33), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMESValue.setStatus('current')
ethL1IFHistPMESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 34), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMESTimeStamp.setStatus('current')
ethL1IFHistPMESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 35), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMESValidity.setStatus('current')
ethL1IFHistPMESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 36), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMESInitialize.setStatus('current')
ethL1IFHistPMSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 37), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMSESValue.setStatus('current')
ethL1IFHistPMSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 38), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMSESTimeStamp.setStatus('current')
ethL1IFHistPMSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 39), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMSESValidity.setStatus('current')
ethL1IFHistPMSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 40), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMSESInitialize.setStatus('current')
ethL1IFHistPMOTUEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 41), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMOTUEBValue.setStatus('current')
ethL1IFHistPMOTUEBTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 42), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOTUEBTimeStamp.setStatus('current')
ethL1IFHistPMOTUEBValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 43), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOTUEBValidity.setStatus('current')
ethL1IFHistPMOTUEBInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 44), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMOTUEBInitialize.setStatus('current')
ethL1IFHistPMOTUBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 45), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMOTUBBEValue.setStatus('current')
ethL1IFHistPMOTUBBETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 46), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOTUBBETimeStamp.setStatus('current')
ethL1IFHistPMOTUBBEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 47), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOTUBBEValidity.setStatus('current')
ethL1IFHistPMOTUBBEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 48), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMOTUBBEInitialize.setStatus('current')
ethL1IFHistPMOTUESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 49), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMOTUESValue.setStatus('current')
ethL1IFHistPMOTUESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 50), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOTUESTimeStamp.setStatus('current')
ethL1IFHistPMOTUESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 51), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOTUESValidity.setStatus('current')
ethL1IFHistPMOTUESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 52), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMOTUESInitialize.setStatus('current')
ethL1IFHistPMOTUSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 53), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMOTUSESValue.setStatus('current')
ethL1IFHistPMOTUSESTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 54), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOTUSESTimeStamp.setStatus('current')
ethL1IFHistPMOTUSESValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 55), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOTUSESValidity.setStatus('current')
ethL1IFHistPMOTUSESInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 56), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMOTUSESInitialize.setStatus('current')
ethL1IFHistPMOTUOFSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 57), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMOTUOFSValue.setStatus('current')
ethL1IFHistPMOTUOFSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 58), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOTUOFSTimeStamp.setStatus('current')
ethL1IFHistPMOTUOFSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 59), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOTUOFSValidity.setStatus('current')
ethL1IFHistPMOTUOFSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 60), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMOTUOFSInitialize.setStatus('current')
ethL1IFHistPMNBITCRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 61), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMNBITCRValue.setStatus('current')
ethL1IFHistPMNBITCRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 62), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMNBITCRTimeStamp.setStatus('current')
ethL1IFHistPMNBITCRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 63), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMNBITCRValidity.setStatus('current')
ethL1IFHistPMNBITCRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 64), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMNBITCRInitialize.setStatus('current')
ethL1IFHistPMNBYTCRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 65), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMNBYTCRValue.setStatus('current')
ethL1IFHistPMNBYTCRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 66), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMNBYTCRTimeStamp.setStatus('current')
ethL1IFHistPMNBYTCRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 67), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMNBYTCRValidity.setStatus('current')
ethL1IFHistPMNBYTCRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 68), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMNBYTCRInitialize.setStatus('current')
ethL1IFHistPMUNCRCDWValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 69), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMUNCRCDWValue.setStatus('current')
ethL1IFHistPMUNCRCDWTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 70), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMUNCRCDWTimeStamp.setStatus('current')
ethL1IFHistPMUNCRCDWValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 71), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMUNCRCDWValidity.setStatus('current')
ethL1IFHistPMUNCRCDWInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 72), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMUNCRCDWInitialize.setStatus('current')
ethL1IFHistPMOTNBERValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 73), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOTNBERValue.setStatus('current')
ethL1IFHistPMOTNBERTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 74), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOTNBERTimeStamp.setStatus('current')
ethL1IFHistPMOTNBERValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 75), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOTNBERValidity.setStatus('current')
ethL1IFHistPMOTNBERInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 76), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMOTNBERInitialize.setStatus('current')
ethL1IFHistPMOTNAVGBERValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 77), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOTNAVGBERValue.setStatus('current')
ethL1IFHistPMOTNAVGBERTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 78), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOTNAVGBERTimeStamp.setStatus('current')
ethL1IFHistPMOTNAVGBERValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 79), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOTNAVGBERValidity.setStatus('current')
ethL1IFHistPMOTNAVGBERInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 80), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMOTNAVGBERInitialize.setStatus('current')
ethL1IFHistPMNBITCR64BitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 81), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMNBITCR64BitValue.setStatus('current')
ethL1IFHistPMNBITCR64BitTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 82), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMNBITCR64BitTimeStamp.setStatus('current')
ethL1IFHistPMNBITCR64BitValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 83), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMNBITCR64BitValidity.setStatus('current')
ethL1IFHistPMNBITCR64BitInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 84), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMNBITCR64BitInitialize.setStatus('current')
ethL1IFHistPMNBYTCR64BitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 85), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMNBYTCR64BitValue.setStatus('current')
ethL1IFHistPMNBYTCR64BitTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 86), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMNBYTCR64BitTimeStamp.setStatus('current')
ethL1IFHistPMNBYTCR64BitValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 87), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMNBYTCR64BitValidity.setStatus('current')
ethL1IFHistPMNBYTCR64BitInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 88), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMNBYTCR64BitInitialize.setStatus('current')
ethL1IFHistPMUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 89), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMUASValue.setStatus('current')
ethL1IFHistPMUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 90), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMUASTimeStamp.setStatus('current')
ethL1IFHistPMUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 91), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMUASValidity.setStatus('current')
ethL1IFHistPMUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 92), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMUASInitialize.setStatus('current')
ethL1IFHistPMOTUUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 93), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMOTUUASValue.setStatus('current')
ethL1IFHistPMOTUUASTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 94), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOTUUASTimeStamp.setStatus('current')
ethL1IFHistPMOTUUASValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 95), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOTUUASValidity.setStatus('current')
ethL1IFHistPMOTUUASInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 96), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMOTUUASInitialize.setStatus('current')
ethL1IFHistPMOPRMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 97), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPRMinValue.setStatus('current')
ethL1IFHistPMOPRMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 98), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPRMinTimeStamp.setStatus('current')
ethL1IFHistPMOPRMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 99), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPRMinValidity.setStatus('current')
ethL1IFHistPMOPRMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 100), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMOPRMinInitialize.setStatus('current')
ethL1IFHistPMOPRMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 101), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPRMaxValue.setStatus('current')
ethL1IFHistPMOPRMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 102), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPRMaxTimeStamp.setStatus('current')
ethL1IFHistPMOPRMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 103), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPRMaxValidity.setStatus('current')
ethL1IFHistPMOPRMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 104), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMOPRMaxInitialize.setStatus('current')
ethL1IFHistPMOPRAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 105), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPRAvgValue.setStatus('current')
ethL1IFHistPMOPRAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 106), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPRAvgTimeStamp.setStatus('current')
ethL1IFHistPMOPRAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 107), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPRAvgValidity.setStatus('current')
ethL1IFHistPMOPRAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 108), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMOPRAvgInitialize.setStatus('current')
ethL1IFHistPMOPTMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 109), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPTMinValue.setStatus('current')
ethL1IFHistPMOPTMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 110), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPTMinTimeStamp.setStatus('current')
ethL1IFHistPMOPTMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 111), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPTMinValidity.setStatus('current')
ethL1IFHistPMOPTMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 112), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMOPTMinInitialize.setStatus('current')
ethL1IFHistPMOPTMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 113), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPTMaxValue.setStatus('current')
ethL1IFHistPMOPTMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 114), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPTMaxTimeStamp.setStatus('current')
ethL1IFHistPMOPTMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 115), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPTMaxValidity.setStatus('current')
ethL1IFHistPMOPTMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 116), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMOPTMaxInitialize.setStatus('current')
ethL1IFHistPMOPTAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 117), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPTAvgValue.setStatus('current')
ethL1IFHistPMOPTAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 118), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPTAvgTimeStamp.setStatus('current')
ethL1IFHistPMOPTAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 119), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethL1IFHistPMOPTAvgValidity.setStatus('current')
ethL1IFHistPMOPTAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 27, 1, 120), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFHistPMOPTAvgInitialize.setStatus('current')
ethL1IFPMThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28), )
if mibBuilder.loadTexts: ethL1IFPMThresholdTable.setStatus('current')
ethL1IFPMThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1), ).setIndexNames((0, "BTI-7000-MIB", "ethL1IFPMThresholdShelfIdx"), (0, "BTI-7000-MIB", "ethL1IFPMThresholdSlotIdx"), (0, "BTI-7000-MIB", "ethL1IFPMThresholdPortTypeIdx"), (0, "BTI-7000-MIB", "ethL1IFPMThresholdPortIdx"), (0, "BTI-7000-MIB", "ethL1IFPMThresholdIntervalTypeIdx"))
if mibBuilder.loadTexts: ethL1IFPMThresholdEntry.setStatus('current')
ethL1IFPMThresholdShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: ethL1IFPMThresholdShelfIdx.setStatus('current')
ethL1IFPMThresholdSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: ethL1IFPMThresholdSlotIdx.setStatus('current')
ethL1IFPMThresholdPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 3), PvxL1PortType())
if mibBuilder.loadTexts: ethL1IFPMThresholdPortTypeIdx.setStatus('current')
ethL1IFPMThresholdPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: ethL1IFPMThresholdPortIdx.setStatus('current')
ethL1IFPMThresholdIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 5), PMIntervalType())
if mibBuilder.loadTexts: ethL1IFPMThresholdIntervalTypeIdx.setStatus('current')
ethL1IFPMThresholdCVValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFPMThresholdCVValue.setStatus('current')
ethL1IFPMThresholdINVBLKValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFPMThresholdINVBLKValue.setStatus('current')
ethL1IFPMThresholdESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFPMThresholdESValue.setStatus('current')
ethL1IFPMThresholdSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFPMThresholdSESValue.setStatus('current')
ethL1IFPMThresholdOTUEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFPMThresholdOTUEBValue.setStatus('current')
ethL1IFPMThresholdOTUBBEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFPMThresholdOTUBBEValue.setStatus('current')
ethL1IFPMThresholdOTUESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFPMThresholdOTUESValue.setStatus('current')
ethL1IFPMThresholdOTUSESValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFPMThresholdOTUSESValue.setStatus('current')
ethL1IFPMThresholdOTUOFSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFPMThresholdOTUOFSValue.setStatus('current')
ethL1IFPMThresholdUNCRCDWValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFPMThresholdUNCRCDWValue.setStatus('current')
ethL1IFPMThresholdUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFPMThresholdUASValue.setStatus('current')
ethL1IFPMThresholdOTUUASValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 28, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethL1IFPMThresholdOTUUASValue.setStatus('current')
pvxL2IFCrntPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29), )
if mibBuilder.loadTexts: pvxL2IFCrntPMTable.setStatus('current')
pvxL2IFCrntPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1), ).setIndexNames((0, "BTI-7000-MIB", "pvxL2IFCrntPMSwitchIdx"), (0, "BTI-7000-MIB", "pvxL2IFCrntPMShelfIdx"), (0, "BTI-7000-MIB", "pvxL2IFCrntPMSlotIdx"), (0, "BTI-7000-MIB", "pvxL2IFCrntPMPortTypeIdx"), (0, "BTI-7000-MIB", "pvxL2IFCrntPMPortIdx"), (0, "BTI-7000-MIB", "pvxL2IFCrntPMIntervalTypeIdx"))
if mibBuilder.loadTexts: pvxL2IFCrntPMEntry.setStatus('current')
pvxL2IFCrntPMSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxL2IFCrntPMSwitchIdx.setStatus('current')
pvxL2IFCrntPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxL2IFCrntPMShelfIdx.setStatus('current')
pvxL2IFCrntPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxL2IFCrntPMSlotIdx.setStatus('current')
pvxL2IFCrntPMPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxL2IFCrntPMPortTypeIdx.setStatus('current')
pvxL2IFCrntPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: pvxL2IFCrntPMPortIdx.setStatus('current')
pvxL2IFCrntPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 6), PMIntervalType())
if mibBuilder.loadTexts: pvxL2IFCrntPMIntervalTypeIdx.setStatus('current')
pvxL2IFCrntPMTFRCRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 7), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMTFRCRXValue.setStatus('current')
pvxL2IFCrntPMTFRCRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMTFRCRXTimeStamp.setStatus('current')
pvxL2IFCrntPMTFRCRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 9), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMTFRCRXValidity.setStatus('current')
pvxL2IFCrntPMTFRCRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 10), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMTFRCRXInitialize.setStatus('current')
pvxL2IFCrntPMTFRCTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 11), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMTFRCTXValue.setStatus('current')
pvxL2IFCrntPMTFRCTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMTFRCTXTimeStamp.setStatus('current')
pvxL2IFCrntPMTFRCTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 13), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMTFRCTXValidity.setStatus('current')
pvxL2IFCrntPMTFRCTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 14), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMTFRCTXInitialize.setStatus('current')
pvxL2IFCrntPMFRDRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMFRDRValue.setStatus('current')
pvxL2IFCrntPMFRDRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMFRDRTimeStamp.setStatus('current')
pvxL2IFCrntPMFRDRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 17), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMFRDRValidity.setStatus('current')
pvxL2IFCrntPMFRDRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 18), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMFRDRInitialize.setStatus('current')
pvxL2IFCrntPMFCSEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMFCSEValue.setStatus('current')
pvxL2IFCrntPMFCSETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 20), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMFCSETimeStamp.setStatus('current')
pvxL2IFCrntPMFCSEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 21), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMFCSEValidity.setStatus('current')
pvxL2IFCrntPMFCSEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 22), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMFCSEInitialize.setStatus('current')
pvxL2IFCrntPMTBYCRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 23), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMTBYCRXValue.setStatus('current')
pvxL2IFCrntPMTBYCRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 24), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMTBYCRXTimeStamp.setStatus('current')
pvxL2IFCrntPMTBYCRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 25), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMTBYCRXValidity.setStatus('current')
pvxL2IFCrntPMTBYCRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 26), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMTBYCRXInitialize.setStatus('current')
pvxL2IFCrntPMTBYCTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 27), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMTBYCTXValue.setStatus('current')
pvxL2IFCrntPMTBYCTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 28), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMTBYCTXTimeStamp.setStatus('current')
pvxL2IFCrntPMTBYCTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 29), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMTBYCTXValidity.setStatus('current')
pvxL2IFCrntPMTBYCTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 30), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMTBYCTXInitialize.setStatus('current')
pvxL2IFCrntPMBCSTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 31), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMBCSTValue.setStatus('current')
pvxL2IFCrntPMBCSTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 32), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMBCSTTimeStamp.setStatus('current')
pvxL2IFCrntPMBCSTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 33), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMBCSTValidity.setStatus('current')
pvxL2IFCrntPMBCSTInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 34), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMBCSTInitialize.setStatus('current')
pvxL2IFCrntPMMCSTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 35), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMMCSTValue.setStatus('current')
pvxL2IFCrntPMMCSTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 36), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMMCSTTimeStamp.setStatus('current')
pvxL2IFCrntPMMCSTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 37), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMMCSTValidity.setStatus('current')
pvxL2IFCrntPMMCSTInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 38), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMMCSTInitialize.setStatus('current')
pvxL2IFCrntPMSIZE64Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 39), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE64Value.setStatus('current')
pvxL2IFCrntPMSIZE64TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 40), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE64TimeStamp.setStatus('current')
pvxL2IFCrntPMSIZE64Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 41), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE64Validity.setStatus('current')
pvxL2IFCrntPMSIZE64Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 42), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE64Initialize.setStatus('current')
pvxL2IFCrntPMSIZE65To127Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 43), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE65To127Value.setStatus('current')
pvxL2IFCrntPMSIZE65To127TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 44), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE65To127TimeStamp.setStatus('current')
pvxL2IFCrntPMSIZE65To127Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 45), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE65To127Validity.setStatus('current')
pvxL2IFCrntPMSIZE65To127Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 46), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE65To127Initialize.setStatus('current')
pvxL2IFCrntPMSIZE128To255Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 47), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE128To255Value.setStatus('current')
pvxL2IFCrntPMSIZE128To255TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 48), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE128To255TimeStamp.setStatus('current')
pvxL2IFCrntPMSIZE128To255Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 49), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE128To255Validity.setStatus('current')
pvxL2IFCrntPMSIZE128To255Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 50), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE128To255Initialize.setStatus('current')
pvxL2IFCrntPMSIZE256To511Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 51), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE256To511Value.setStatus('current')
pvxL2IFCrntPMSIZE256To511TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 52), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE256To511TimeStamp.setStatus('current')
pvxL2IFCrntPMSIZE256To511Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 53), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE256To511Validity.setStatus('current')
pvxL2IFCrntPMSIZE256To511Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 54), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE256To511Initialize.setStatus('current')
pvxL2IFCrntPMSIZE512To1023Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 55), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE512To1023Value.setStatus('current')
pvxL2IFCrntPMSIZE512To1023TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 56), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE512To1023TimeStamp.setStatus('current')
pvxL2IFCrntPMSIZE512To1023Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 57), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE512To1023Validity.setStatus('current')
pvxL2IFCrntPMSIZE512To1023Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 58), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE512To1023Initialize.setStatus('current')
pvxL2IFCrntPMSIZE1024To1518Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 59), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE1024To1518Value.setStatus('current')
pvxL2IFCrntPMSIZE1024To1518TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 60), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE1024To1518TimeStamp.setStatus('current')
pvxL2IFCrntPMSIZE1024To1518Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 61), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE1024To1518Validity.setStatus('current')
pvxL2IFCrntPMSIZE1024To1518Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 62), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZE1024To1518Initialize.setStatus('current')
pvxL2IFCrntPMSIZEOver1518Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 63), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZEOver1518Value.setStatus('current')
pvxL2IFCrntPMSIZEOver1518TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 64), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZEOver1518TimeStamp.setStatus('current')
pvxL2IFCrntPMSIZEOver1518Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 65), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZEOver1518Validity.setStatus('current')
pvxL2IFCrntPMSIZEOver1518Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 66), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMSIZEOver1518Initialize.setStatus('current')
pvxL2IFCrntPMTPFCRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 67), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMTPFCRXValue.setStatus('current')
pvxL2IFCrntPMTPFCRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 68), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMTPFCRXTimeStamp.setStatus('current')
pvxL2IFCrntPMTPFCRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 69), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMTPFCRXValidity.setStatus('current')
pvxL2IFCrntPMTPFCRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 70), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMTPFCRXInitialize.setStatus('current')
pvxL2IFCrntPMTPFCTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 71), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMTPFCTXValue.setStatus('current')
pvxL2IFCrntPMTPFCTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 72), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMTPFCTXTimeStamp.setStatus('current')
pvxL2IFCrntPMTPFCTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 73), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMTPFCTXValidity.setStatus('current')
pvxL2IFCrntPMTPFCTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 74), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMTPFCTXInitialize.setStatus('current')
pvxL2IFCrntPMUSIZEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 75), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMUSIZEValue.setStatus('current')
pvxL2IFCrntPMUSIZETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 76), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMUSIZETimeStamp.setStatus('current')
pvxL2IFCrntPMUSIZEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 77), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMUSIZEValidity.setStatus('current')
pvxL2IFCrntPMUSIZEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 78), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMUSIZEInitialize.setStatus('current')
pvxL2IFCrntPMOSIZEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 79), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMOSIZEValue.setStatus('current')
pvxL2IFCrntPMOSIZETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 80), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMOSIZETimeStamp.setStatus('current')
pvxL2IFCrntPMOSIZEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 81), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMOSIZEValidity.setStatus('current')
pvxL2IFCrntPMOSIZEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 82), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMOSIZEInitialize.setStatus('current')
pvxL2IFCrntPMFRGTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 83), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMFRGTValue.setStatus('current')
pvxL2IFCrntPMFRGTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 84), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMFRGTTimeStamp.setStatus('current')
pvxL2IFCrntPMFRGTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 85), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFCrntPMFRGTValidity.setStatus('current')
pvxL2IFCrntPMFRGTInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 29, 1, 86), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFCrntPMFRGTInitialize.setStatus('current')
pvxL2IFHistPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30), )
if mibBuilder.loadTexts: pvxL2IFHistPMTable.setStatus('current')
pvxL2IFHistPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1), ).setIndexNames((0, "BTI-7000-MIB", "pvxL2IFHistPMSwitchIdx"), (0, "BTI-7000-MIB", "pvxL2IFHistPMShelfIdx"), (0, "BTI-7000-MIB", "pvxL2IFHistPMSlotIdx"), (0, "BTI-7000-MIB", "pvxL2IFHistPMPortTypeIdx"), (0, "BTI-7000-MIB", "pvxL2IFHistPMPortIdx"), (0, "BTI-7000-MIB", "pvxL2IFHistPMIntervalTypeIdx"), (0, "BTI-7000-MIB", "pvxL2IFHistPMIntervalIdx"))
if mibBuilder.loadTexts: pvxL2IFHistPMEntry.setStatus('current')
pvxL2IFHistPMSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxL2IFHistPMSwitchIdx.setStatus('current')
pvxL2IFHistPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxL2IFHistPMShelfIdx.setStatus('current')
pvxL2IFHistPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxL2IFHistPMSlotIdx.setStatus('current')
pvxL2IFHistPMPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxL2IFHistPMPortTypeIdx.setStatus('current')
pvxL2IFHistPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: pvxL2IFHistPMPortIdx.setStatus('current')
pvxL2IFHistPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 6), PMIntervalType())
if mibBuilder.loadTexts: pvxL2IFHistPMIntervalTypeIdx.setStatus('current')
pvxL2IFHistPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: pvxL2IFHistPMIntervalIdx.setStatus('current')
pvxL2IFHistPMTFRCRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 8), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMTFRCRXValue.setStatus('current')
pvxL2IFHistPMTFRCRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMTFRCRXTimeStamp.setStatus('current')
pvxL2IFHistPMTFRCRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 10), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMTFRCRXValidity.setStatus('current')
pvxL2IFHistPMTFRCRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 11), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMTFRCRXInitialize.setStatus('current')
pvxL2IFHistPMTFRCTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 12), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMTFRCTXValue.setStatus('current')
pvxL2IFHistPMTFRCTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMTFRCTXTimeStamp.setStatus('current')
pvxL2IFHistPMTFRCTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 14), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMTFRCTXValidity.setStatus('current')
pvxL2IFHistPMTFRCTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 15), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMTFRCTXInitialize.setStatus('current')
pvxL2IFHistPMFRDRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMFRDRValue.setStatus('current')
pvxL2IFHistPMFRDRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 17), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMFRDRTimeStamp.setStatus('current')
pvxL2IFHistPMFRDRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 18), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMFRDRValidity.setStatus('current')
pvxL2IFHistPMFRDRInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 19), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMFRDRInitialize.setStatus('current')
pvxL2IFHistPMFCSEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMFCSEValue.setStatus('current')
pvxL2IFHistPMFCSETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMFCSETimeStamp.setStatus('current')
pvxL2IFHistPMFCSEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 22), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMFCSEValidity.setStatus('current')
pvxL2IFHistPMFCSEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 23), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMFCSEInitialize.setStatus('current')
pvxL2IFHistPMTBYCRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 24), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMTBYCRXValue.setStatus('current')
pvxL2IFHistPMTBYCRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 25), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMTBYCRXTimeStamp.setStatus('current')
pvxL2IFHistPMTBYCRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 26), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMTBYCRXValidity.setStatus('current')
pvxL2IFHistPMTBYCRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 27), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMTBYCRXInitialize.setStatus('current')
pvxL2IFHistPMTBYCTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 28), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMTBYCTXValue.setStatus('current')
pvxL2IFHistPMTBYCTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 29), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMTBYCTXTimeStamp.setStatus('current')
pvxL2IFHistPMTBYCTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 30), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMTBYCTXValidity.setStatus('current')
pvxL2IFHistPMTBYCTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 31), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMTBYCTXInitialize.setStatus('current')
pvxL2IFHistPMBCSTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 32), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMBCSTValue.setStatus('current')
pvxL2IFHistPMBCSTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 33), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMBCSTTimeStamp.setStatus('current')
pvxL2IFHistPMBCSTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 34), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMBCSTValidity.setStatus('current')
pvxL2IFHistPMBCSTInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 35), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMBCSTInitialize.setStatus('current')
pvxL2IFHistPMMCSTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 36), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMMCSTValue.setStatus('current')
pvxL2IFHistPMMCSTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 37), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMMCSTTimeStamp.setStatus('current')
pvxL2IFHistPMMCSTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 38), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMMCSTValidity.setStatus('current')
pvxL2IFHistPMMCSTInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 39), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMMCSTInitialize.setStatus('current')
pvxL2IFHistPMSIZE64Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 40), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE64Value.setStatus('current')
pvxL2IFHistPMSIZE64TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 41), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE64TimeStamp.setStatus('current')
pvxL2IFHistPMSIZE64Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 42), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE64Validity.setStatus('current')
pvxL2IFHistPMSIZE64Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 43), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE64Initialize.setStatus('current')
pvxL2IFHistPMSIZE65To127Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 44), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE65To127Value.setStatus('current')
pvxL2IFHistPMSIZE65To127TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 45), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE65To127TimeStamp.setStatus('current')
pvxL2IFHistPMSIZE65To127Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 46), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE65To127Validity.setStatus('current')
pvxL2IFHistPMSIZE65To127Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 47), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE65To127Initialize.setStatus('current')
pvxL2IFHistPMSIZE128To255Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 48), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE128To255Value.setStatus('current')
pvxL2IFHistPMSIZE128To255TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 49), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE128To255TimeStamp.setStatus('current')
pvxL2IFHistPMSIZE128To255Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 50), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE128To255Validity.setStatus('current')
pvxL2IFHistPMSIZE128To255Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 51), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE128To255Initialize.setStatus('current')
pvxL2IFHistPMSIZE256To511Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 52), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE256To511Value.setStatus('current')
pvxL2IFHistPMSIZE256To511TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 53), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE256To511TimeStamp.setStatus('current')
pvxL2IFHistPMSIZE256To511Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 54), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE256To511Validity.setStatus('current')
pvxL2IFHistPMSIZE256To511Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 55), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE256To511Initialize.setStatus('current')
pvxL2IFHistPMSIZE512To1023Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 56), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE512To1023Value.setStatus('current')
pvxL2IFHistPMSIZE512To1023TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 57), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE512To1023TimeStamp.setStatus('current')
pvxL2IFHistPMSIZE512To1023Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 58), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE512To1023Validity.setStatus('current')
pvxL2IFHistPMSIZE512To1023Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 59), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE512To1023Initialize.setStatus('current')
pvxL2IFHistPMSIZE1024To1518Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 60), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE1024To1518Value.setStatus('current')
pvxL2IFHistPMSIZE1024To1518TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 61), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE1024To1518TimeStamp.setStatus('current')
pvxL2IFHistPMSIZE1024To1518Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 62), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE1024To1518Validity.setStatus('current')
pvxL2IFHistPMSIZE1024To1518Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 63), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZE1024To1518Initialize.setStatus('current')
pvxL2IFHistPMSIZEOver1518Value = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 64), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZEOver1518Value.setStatus('current')
pvxL2IFHistPMSIZEOver1518TimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 65), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZEOver1518TimeStamp.setStatus('current')
pvxL2IFHistPMSIZEOver1518Validity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 66), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZEOver1518Validity.setStatus('current')
pvxL2IFHistPMSIZEOver1518Initialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 67), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMSIZEOver1518Initialize.setStatus('current')
pvxL2IFHistPMTPFCRXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 68), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMTPFCRXValue.setStatus('current')
pvxL2IFHistPMTPFCRXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 69), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMTPFCRXTimeStamp.setStatus('current')
pvxL2IFHistPMTPFCRXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 70), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMTPFCRXValidity.setStatus('current')
pvxL2IFHistPMTPFCRXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 71), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMTPFCRXInitialize.setStatus('current')
pvxL2IFHistPMTPFCTXValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 72), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMTPFCTXValue.setStatus('current')
pvxL2IFHistPMTPFCTXTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 73), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMTPFCTXTimeStamp.setStatus('current')
pvxL2IFHistPMTPFCTXValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 74), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMTPFCTXValidity.setStatus('current')
pvxL2IFHistPMTPFCTXInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 75), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMTPFCTXInitialize.setStatus('current')
pvxL2IFHistPMUSIZEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 76), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMUSIZEValue.setStatus('current')
pvxL2IFHistPMUSIZETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 77), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMUSIZETimeStamp.setStatus('current')
pvxL2IFHistPMUSIZEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 78), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMUSIZEValidity.setStatus('current')
pvxL2IFHistPMUSIZEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 79), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMUSIZEInitialize.setStatus('current')
pvxL2IFHistPMOSIZEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 80), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMOSIZEValue.setStatus('current')
pvxL2IFHistPMOSIZETimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 81), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMOSIZETimeStamp.setStatus('current')
pvxL2IFHistPMOSIZEValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 82), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMOSIZEValidity.setStatus('current')
pvxL2IFHistPMOSIZEInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 83), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMOSIZEInitialize.setStatus('current')
pvxL2IFHistPMFRGTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 84), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMFRGTValue.setStatus('current')
pvxL2IFHistPMFRGTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 85), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMFRGTTimeStamp.setStatus('current')
pvxL2IFHistPMFRGTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 86), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IFHistPMFRGTValidity.setStatus('current')
pvxL2IFHistPMFRGTInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 30, 1, 87), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFHistPMFRGTInitialize.setStatus('current')
pvxL2IFPMThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 31), )
if mibBuilder.loadTexts: pvxL2IFPMThresholdTable.setStatus('current')
pvxL2IFPMThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 31, 1), ).setIndexNames((0, "BTI-7000-MIB", "pvxL2IFPMThresholdSwitchIdx"), (0, "BTI-7000-MIB", "pvxL2IFPMThresholdShelfIdx"), (0, "BTI-7000-MIB", "pvxL2IFPMThresholdSlotIdx"), (0, "BTI-7000-MIB", "pvxL2IFPMThresholdPortTypeIdx"), (0, "BTI-7000-MIB", "pvxL2IFPMThresholdPortIdx"), (0, "BTI-7000-MIB", "pvxL2IFPMThresholdIntervalTypeIdx"))
if mibBuilder.loadTexts: pvxL2IFPMThresholdEntry.setStatus('current')
pvxL2IFPMThresholdSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 31, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11)))
if mibBuilder.loadTexts: pvxL2IFPMThresholdSwitchIdx.setStatus('current')
pvxL2IFPMThresholdShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 31, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: pvxL2IFPMThresholdShelfIdx.setStatus('current')
pvxL2IFPMThresholdSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 31, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: pvxL2IFPMThresholdSlotIdx.setStatus('current')
pvxL2IFPMThresholdPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 31, 1, 4), PvxPortType())
if mibBuilder.loadTexts: pvxL2IFPMThresholdPortTypeIdx.setStatus('current')
pvxL2IFPMThresholdPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 31, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: pvxL2IFPMThresholdPortIdx.setStatus('current')
pvxL2IFPMThresholdIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 31, 1, 6), PMIntervalType())
if mibBuilder.loadTexts: pvxL2IFPMThresholdIntervalTypeIdx.setStatus('current')
pvxL2IFPMThresholdFRDRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 31, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFPMThresholdFRDRValue.setStatus('current')
pvxL2IFPMThresholdFCSEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 31, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFPMThresholdFCSEValue.setStatus('current')
pvxL2IFPMThresholdUSIZEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 31, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFPMThresholdUSIZEValue.setStatus('current')
pvxL2IFPMThresholdOSIZEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 31, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFPMThresholdOSIZEValue.setStatus('current')
pvxL2IFPMThresholdFRGTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 31, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvxL2IFPMThresholdFRGTValue.setStatus('current')
briCrntPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38), )
if mibBuilder.loadTexts: briCrntPMTable.setStatus('current')
briCrntPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1), ).setIndexNames((0, "BTI-7000-MIB", "briCrntPMShelfIdx"), (0, "BTI-7000-MIB", "briCrntPMSlotIdx"), (0, "BTI-7000-MIB", "briCrntPMPortIdx"), (0, "BTI-7000-MIB", "briCrntPMIntervalTypeIdx"))
if mibBuilder.loadTexts: briCrntPMEntry.setStatus('current')
briCrntPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: briCrntPMShelfIdx.setStatus('current')
briCrntPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: briCrntPMSlotIdx.setStatus('current')
briCrntPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 12)))
if mibBuilder.loadTexts: briCrntPMPortIdx.setStatus('current')
briCrntPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 4), PMIntervalType())
if mibBuilder.loadTexts: briCrntPMIntervalTypeIdx.setStatus('current')
briCrntPMOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 5), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPRValue.setStatus('current')
briCrntPMOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPRTimeStamp.setStatus('current')
briCrntPMOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 7), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPRValidity.setStatus('current')
briCrntPMOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 8), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPTValue.setStatus('current')
briCrntPMOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPTTimeStamp.setStatus('current')
briCrntPMOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 10), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPTValidity.setStatus('current')
briCrntPMTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMTempValue.setStatus('current')
briCrntPMTempTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMTempTimeStamp.setStatus('current')
briCrntPMTempValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 13), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMTempValidity.setStatus('current')
briCrntPMSupplyVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 14), FixedX10()).setUnits('mVolts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMSupplyVoltageValue.setStatus('current')
briCrntPMSupplyVoltageTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 15), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMSupplyVoltageTimeStamp.setStatus('current')
briCrntPMSupplyVoltageValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 16), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMSupplyVoltageValidity.setStatus('current')
briCrntPMLBCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('mAmp').setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMLBCValue.setStatus('current')
briCrntPMLBCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 18), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMLBCTimeStamp.setStatus('current')
briCrntPMLBCValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 19), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMLBCValidity.setStatus('current')
briCrntPMOPRMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 20), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPRMinValue.setStatus('current')
briCrntPMOPRMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPRMinTimeStamp.setStatus('current')
briCrntPMOPRMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 22), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPRMinValidity.setStatus('current')
briCrntPMOPRMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 23), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: briCrntPMOPRMinInitialize.setStatus('current')
briCrntPMOPRMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 24), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPRMaxValue.setStatus('current')
briCrntPMOPRMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 25), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPRMaxTimeStamp.setStatus('current')
briCrntPMOPRMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 26), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPRMaxValidity.setStatus('current')
briCrntPMOPRMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 27), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: briCrntPMOPRMaxInitialize.setStatus('current')
briCrntPMOPRAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 28), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPRAvgValue.setStatus('current')
briCrntPMOPRAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 29), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPRAvgTimeStamp.setStatus('current')
briCrntPMOPRAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 30), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPRAvgValidity.setStatus('current')
briCrntPMOPRAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 31), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: briCrntPMOPRAvgInitialize.setStatus('current')
briCrntPMOPTMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 32), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPTMinValue.setStatus('current')
briCrntPMOPTMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 33), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPTMinTimeStamp.setStatus('current')
briCrntPMOPTMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 34), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPTMinValidity.setStatus('current')
briCrntPMOPTMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 35), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: briCrntPMOPTMinInitialize.setStatus('current')
briCrntPMOPTMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 36), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPTMaxValue.setStatus('current')
briCrntPMOPTMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 37), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPTMaxTimeStamp.setStatus('current')
briCrntPMOPTMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 38), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPTMaxValidity.setStatus('current')
briCrntPMOPTMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 39), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: briCrntPMOPTMaxInitialize.setStatus('current')
briCrntPMOPTAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 40), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPTAvgValue.setStatus('current')
briCrntPMOPTAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 41), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPTAvgTimeStamp.setStatus('current')
briCrntPMOPTAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 42), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briCrntPMOPTAvgValidity.setStatus('current')
briCrntPMOPTAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 38, 1, 43), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: briCrntPMOPTAvgInitialize.setStatus('current')
briHistPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39), )
if mibBuilder.loadTexts: briHistPMTable.setStatus('current')
briHistPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1), ).setIndexNames((0, "BTI-7000-MIB", "briHistPMShelfIdx"), (0, "BTI-7000-MIB", "briHistPMSlotIdx"), (0, "BTI-7000-MIB", "briHistPMPortIdx"), (0, "BTI-7000-MIB", "briHistPMIntervalTypeIdx"), (0, "BTI-7000-MIB", "briHistPMIntervalIdx"))
if mibBuilder.loadTexts: briHistPMEntry.setStatus('current')
briHistPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: briHistPMShelfIdx.setStatus('current')
briHistPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: briHistPMSlotIdx.setStatus('current')
briHistPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 12)))
if mibBuilder.loadTexts: briHistPMPortIdx.setStatus('current')
briHistPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 4), PMIntervalType())
if mibBuilder.loadTexts: briHistPMIntervalTypeIdx.setStatus('current')
briHistPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: briHistPMIntervalIdx.setStatus('current')
briHistPMOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 6), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPRValue.setStatus('current')
briHistPMOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPRTimeStamp.setStatus('current')
briHistPMOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 8), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPRValidity.setStatus('current')
briHistPMOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 9), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPTValue.setStatus('current')
briHistPMOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPTTimeStamp.setStatus('current')
briHistPMOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 11), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPTValidity.setStatus('current')
briHistPMTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMTempValue.setStatus('current')
briHistPMTempTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMTempTimeStamp.setStatus('current')
briHistPMTempValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 14), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMTempValidity.setStatus('current')
briHistPMSupplyVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 15), FixedX10()).setUnits('mVolts/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMSupplyVoltageValue.setStatus('current')
briHistPMSupplyVoltageTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMSupplyVoltageTimeStamp.setStatus('current')
briHistPMSupplyVoltageValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 17), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMSupplyVoltageValidity.setStatus('current')
briHistPMLBCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('mAmp').setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMLBCValue.setStatus('current')
briHistPMLBCTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 19), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMLBCTimeStamp.setStatus('current')
briHistPMLBCValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 20), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMLBCValidity.setStatus('current')
briHistPMOPRMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 21), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPRMinValue.setStatus('current')
briHistPMOPRMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 22), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPRMinTimeStamp.setStatus('current')
briHistPMOPRMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 23), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPRMinValidity.setStatus('current')
briHistPMOPRMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 24), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: briHistPMOPRMinInitialize.setStatus('current')
briHistPMOPRMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 25), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPRMaxValue.setStatus('current')
briHistPMOPRMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 26), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPRMaxTimeStamp.setStatus('current')
briHistPMOPRMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 27), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPRMaxValidity.setStatus('current')
briHistPMOPRMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 28), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: briHistPMOPRMaxInitialize.setStatus('current')
briHistPMOPRAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 29), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPRAvgValue.setStatus('current')
briHistPMOPRAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 30), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPRAvgTimeStamp.setStatus('current')
briHistPMOPRAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 31), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPRAvgValidity.setStatus('current')
briHistPMOPRAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 32), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: briHistPMOPRAvgInitialize.setStatus('current')
briHistPMOPTMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 33), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPTMinValue.setStatus('current')
briHistPMOPTMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 34), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPTMinTimeStamp.setStatus('current')
briHistPMOPTMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 35), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPTMinValidity.setStatus('current')
briHistPMOPTMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 36), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: briHistPMOPTMinInitialize.setStatus('current')
briHistPMOPTMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 37), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPTMaxValue.setStatus('current')
briHistPMOPTMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 38), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPTMaxTimeStamp.setStatus('current')
briHistPMOPTMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 39), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPTMaxValidity.setStatus('current')
briHistPMOPTMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 40), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: briHistPMOPTMaxInitialize.setStatus('current')
briHistPMOPTAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 41), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPTAvgValue.setStatus('current')
briHistPMOPTAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 42), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPTAvgTimeStamp.setStatus('current')
briHistPMOPTAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 43), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: briHistPMOPTAvgValidity.setStatus('current')
briHistPMOPTAvgInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 39, 1, 44), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: briHistPMOPTAvgInitialize.setStatus('current')
cpCrntPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 49), )
if mibBuilder.loadTexts: cpCrntPMTable.setStatus('current')
cpCrntPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 49, 1), ).setIndexNames((0, "BTI-7000-MIB", "cpCrntPMCpTypeIdx"), (0, "BTI-7000-MIB", "cpCrntPMShelfIdx"), (0, "BTI-7000-MIB", "cpCrntPMSlotIdx"), (0, "BTI-7000-MIB", "cpCrntPMIntervalTypeIdx"))
if mibBuilder.loadTexts: cpCrntPMEntry.setStatus('current')
cpCrntPMCpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 49, 1, 1), CpType())
if mibBuilder.loadTexts: cpCrntPMCpTypeIdx.setStatus('current')
cpCrntPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 49, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: cpCrntPMShelfIdx.setStatus('current')
cpCrntPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 49, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: cpCrntPMSlotIdx.setStatus('current')
cpCrntPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 49, 1, 4), PMIntervalType())
if mibBuilder.loadTexts: cpCrntPMIntervalTypeIdx.setStatus('current')
cpCrntPMTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 49, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCrntPMTempValue.setStatus('current')
cpCrntPMTempTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 49, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCrntPMTempTimeStamp.setStatus('current')
cpCrntPMTempValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 49, 1, 7), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCrntPMTempValidity.setStatus('current')
cpHistPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 50), )
if mibBuilder.loadTexts: cpHistPMTable.setStatus('current')
cpHistPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 50, 1), ).setIndexNames((0, "BTI-7000-MIB", "cpHistPMCpTypeIdx"), (0, "BTI-7000-MIB", "cpHistPMShelfIdx"), (0, "BTI-7000-MIB", "cpHistPMSlotIdx"), (0, "BTI-7000-MIB", "cpHistPMIntervalTypeIdx"), (0, "BTI-7000-MIB", "cpHistPMIntervalIdx"))
if mibBuilder.loadTexts: cpHistPMEntry.setStatus('current')
cpHistPMCpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 50, 1, 1), CpType())
if mibBuilder.loadTexts: cpHistPMCpTypeIdx.setStatus('current')
cpHistPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 50, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: cpHistPMShelfIdx.setStatus('current')
cpHistPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 50, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: cpHistPMSlotIdx.setStatus('current')
cpHistPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 50, 1, 4), PMIntervalType())
if mibBuilder.loadTexts: cpHistPMIntervalTypeIdx.setStatus('current')
cpHistPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 50, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: cpHistPMIntervalIdx.setStatus('current')
cpHistPMTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 50, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpHistPMTempValue.setStatus('current')
cpHistPMTempTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 50, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpHistPMTempTimeStamp.setStatus('current')
cpHistPMTempValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 6, 50, 1, 8), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpHistPMTempValidity.setStatus('current')
gcc0ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 4), )
if mibBuilder.loadTexts: gcc0ConfigTable.setStatus('current')
gcc0ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 4, 1), ).setIndexNames((0, "BTI-7000-MIB", "gcc0ConfigCpTypeIdx"), (0, "BTI-7000-MIB", "gcc0ConfigShelfIdx"), (0, "BTI-7000-MIB", "gcc0ConfigSlotIdx"), (0, "BTI-7000-MIB", "gcc0ConfigPortIdx"))
if mibBuilder.loadTexts: gcc0ConfigEntry.setStatus('current')
gcc0ConfigCpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 4, 1, 1), CpType())
if mibBuilder.loadTexts: gcc0ConfigCpTypeIdx.setStatus('current')
gcc0ConfigShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: gcc0ConfigShelfIdx.setStatus('current')
gcc0ConfigSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: gcc0ConfigSlotIdx.setStatus('current')
gcc0ConfigPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: gcc0ConfigPortIdx.setStatus('current')
gcc0ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fullRate", 1), ("lowRate", 2))).clone('fullRate')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gcc0ConfigMode.setStatus('current')
gcc0ConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 4, 1, 6), AdminStatus().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gcc0ConfigAdminStatus.setStatus('current')
gcc0ConfigOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 4, 1, 7), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gcc0ConfigOperStatus.setStatus('current')
gcc0ConfigOperStatQlfr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 4, 1, 8), OperStatQlfr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gcc0ConfigOperStatQlfr.setStatus('current')
gcc0ConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 4, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gcc0ConfigRowStatus.setStatus('current')
ipExtInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5), )
if mibBuilder.loadTexts: ipExtInterfaceTable.setStatus('current')
ipExtInterfaceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1), ).setIndexNames((0, "BTI-7000-MIB", "pvxL2IntfSwitchIdx"), (0, "BTI-7000-MIB", "pvxL2IntfShelfIdx"), (0, "BTI-7000-MIB", "pvxL2IntfSlotIdx"), (0, "BTI-7000-MIB", "pvxL2IntfPortTypeIdx"), (0, "BTI-7000-MIB", "pvxL2IntfPortIdx"), (0, "BTI-7000-MIB", "pvxL2IntfSubPortNumber"))
if mibBuilder.loadTexts: ipExtInterfaceTableEntry.setStatus('current')
pvxL2IntfSubPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: pvxL2IntfSubPortNumber.setStatus('current')
ipExtIntfPrimaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 2), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipExtIntfPrimaryState.setStatus('current')
ipExtIntfSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 3), OperStatQlfr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipExtIntfSecondaryState.setStatus('current')
ipExtIntfCmdPrimaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 4), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipExtIntfCmdPrimaryState.setStatus('current')
ipExtIntfNumberedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipExtIntfNumberedStatus.setStatus('current')
ipExtIntfAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipExtIntfAddressType.setStatus('current')
ipExtIntfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipExtIntfAddress.setStatus('current')
ipExtIntfSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipExtIntfSubnetMask.setStatus('current')
ipExtIntfProxyARPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipExtIntfProxyARPStatus.setStatus('current')
ipExtIntfDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipExtIntfDescription.setStatus('current')
ipExtIntfMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 11), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipExtIntfMACAddr.setStatus('current')
ipExtIntfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 12), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipExtIntfOperStatus.setStatus('current')
ipExtIntfType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("optical", 1), ("electrical", 2), ("logical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipExtIntfType.setStatus('current')
ipExtIntfBroadcastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 14), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipExtIntfBroadcastAddress.setStatus('current')
ipExtIntfSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipExtIntfSpeed.setStatus('current')
ipExtIntfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 16), DuplexModeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipExtIntfMode.setStatus('current')
ipExtIntfMTUSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipExtIntfMTUSize.setStatus('current')
ipExtIntfLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipExtIntfLastChange.setStatus('current')
ipExtIntfGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 19), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipExtIntfGateway.setStatus('current')
ipExtIntfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 5, 5, 1, 100), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipExtIntfRowStatus.setStatus('current')
notifObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 1))
condDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 1, 1), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: condDateAndTime.setStatus('current')
condReportType = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 1, 2), CondReportType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: condReportType.setStatus('current')
condSeverity = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 1, 3), CondSeverity()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: condSeverity.setStatus('current')
condServiceAffecting = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 1, 4), CondServiceAffecting()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: condServiceAffecting.setStatus('current')
condDescription = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 1, 5), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: condDescription.setStatus('current')
condObjectType = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 1, 6), NotifObjectType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: condObjectType.setStatus('current')
condCodeType = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 1, 7), NotifCodeType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: condCodeType.setStatus('current')
actCondTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 2), )
if mibBuilder.loadTexts: actCondTable.setStatus('current')
actCondEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 2, 1), ).setIndexNames((0, "BTI-7000-MIB", "actCondNotifIdx"), (0, "BTI-7000-MIB", "actCondTableEntryIdx"), (0, "BTI-7000-MIB", "actCondInstanceIdx"))
if mibBuilder.loadTexts: actCondEntry.setStatus('current')
actCondNotifIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 2, 1, 1), ObjectIdentifier())
if mibBuilder.loadTexts: actCondNotifIdx.setStatus('current')
actCondTableEntryIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 2, 1, 2), ObjectIdentifier())
if mibBuilder.loadTexts: actCondTableEntryIdx.setStatus('current')
actCondInstanceIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: actCondInstanceIdx.setStatus('current')
actCondReportType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 2, 1, 4), CondReportType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actCondReportType.setStatus('current')
actCondDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actCondDateAndTime.setStatus('current')
actCondSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 2, 1, 6), CondSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actCondSeverity.setStatus('current')
actCondServiceAffecting = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 2, 1, 7), CondServiceAffecting()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actCondServiceAffecting.setStatus('current')
actCondDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actCondDescription.setStatus('current')
actCondObjectType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 2, 1, 9), NotifObjectType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actCondObjectType.setStatus('current')
actCondCodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 2, 1, 10), NotifCodeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actCondCodeType.setStatus('current')
actCondSummary = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noActiveConditions", 1), ("nonAlarmedConditionsActive", 2), ("minorAlarmsActive", 3), ("majorAlarmsActive", 4), ("criticalAlarmsActive", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: actCondSummary.setStatus('current')
actAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 4), )
if mibBuilder.loadTexts: actAlarmTable.setStatus('current')
actAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 4, 1), ).setIndexNames((0, "BTI-7000-MIB", "actAlarmNotifIdx"), (0, "BTI-7000-MIB", "actAlarmTableEntryIdx"), (0, "BTI-7000-MIB", "actAlarmInstanceIdx"))
if mibBuilder.loadTexts: actAlarmEntry.setStatus('current')
actAlarmNotifIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 4, 1, 1), ObjectIdentifier())
if mibBuilder.loadTexts: actAlarmNotifIdx.setStatus('current')
actAlarmTableEntryIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 4, 1, 2), ObjectIdentifier())
if mibBuilder.loadTexts: actAlarmTableEntryIdx.setStatus('current')
actAlarmInstanceIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: actAlarmInstanceIdx.setStatus('current')
actAlarmReportType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 4, 1, 4), CondReportType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actAlarmReportType.setStatus('current')
actAlarmDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 4, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actAlarmDateAndTime.setStatus('current')
actAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 4, 1, 6), CondSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actAlarmSeverity.setStatus('current')
actAlarmServiceAffecting = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 4, 1, 7), CondServiceAffecting()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actAlarmServiceAffecting.setStatus('current')
actAlarmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actAlarmDescription.setStatus('current')
actAlarmObjectType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 4, 1, 9), NotifObjectType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actAlarmObjectType.setStatus('current')
actAlarmCodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 7, 4, 1, 10), NotifCodeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actAlarmCodeType.setStatus('current')
tl1UserTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 1), )
if mibBuilder.loadTexts: tl1UserTable.setStatus('current')
tl1UserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "tl1UserIdx"))
if mibBuilder.loadTexts: tl1UserEntry.setStatus('current')
tl1UserIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tl1UserIdx.setStatus('current')
tl1IpLockoutAddr = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tl1IpLockoutAddr.setStatus('current')
tl1LogTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 3), )
if mibBuilder.loadTexts: tl1LogTable.setStatus('current')
tl1LogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 3, 1), ).setIndexNames((0, "BTI-7000-MIB", "tl1LogIdx"))
if mibBuilder.loadTexts: tl1LogEntry.setStatus('current')
tl1LogIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: tl1LogIdx.setStatus('current')
tl1LogSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1LogSysName.setStatus('current')
tl1LogType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("alarm", 1), ("event", 2), ("dbChange", 3), ("security", 4), ("command", 5), ("rtrvcmd", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1LogType.setStatus('current')
tl1LogTypeSpecificLogNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1LogTypeSpecificLogNum.setStatus('current')
tl1LogMsgCode = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1LogMsgCode.setStatus('current')
tl1LogDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 3, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1LogDateAndTime.setStatus('current')
tl1LogMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tl1LogMessage.setStatus('current')
latestTl1LogNum = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: latestTl1LogNum.setStatus('current')
snmpTrapRcvTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 5), )
if mibBuilder.loadTexts: snmpTrapRcvTable.setStatus('current')
snmpTrapRcvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 5, 1), ).setIndexNames((0, "BTI-7000-MIB", "snmpTrapRcvIdx"))
if mibBuilder.loadTexts: snmpTrapRcvEntry.setStatus('current')
snmpTrapRcvIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTrapRcvIdx.setStatus('current')
snmpTrapRcvIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 5, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTrapRcvIPAddr.setStatus('current')
snmpTrapRcvPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(162)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTrapRcvPort.setStatus('current')
snmpTrapRcvNotifType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trap", 1), ("inform", 2))).clone('trap')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTrapRcvNotifType.setStatus('current')
snmpTrapRcvVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("snmpV1", 1), ("snmpV2c", 2), ("snmpV3", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTrapRcvVersion.setStatus('current')
snmpTrapRcvCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTrapRcvCommunity.setStatus('current')
snmpTrapRcvTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 5, 1, 7), HoursAndMinutes().clone('000-00')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTrapRcvTTL.setStatus('current')
snmpTrapRcvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 8, 5, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTrapRcvRowStatus.setStatus('current')
xcvrXCTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 1), )
if mibBuilder.loadTexts: xcvrXCTable.setStatus('current')
xcvrXCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "xcvrXCSrcTypeIdx"), (0, "BTI-7000-MIB", "xcvrXCSrcShelfIdx"), (0, "BTI-7000-MIB", "xcvrXCSrcSlotIdx"), (0, "BTI-7000-MIB", "xcvrXCSrcIdx"), (0, "BTI-7000-MIB", "xcvrXCDestTypeIdx"), (0, "BTI-7000-MIB", "xcvrXCDestShelfIdx"), (0, "BTI-7000-MIB", "xcvrXCDestSlotIdx"), (0, "BTI-7000-MIB", "xcvrXCDestIdx"))
if mibBuilder.loadTexts: xcvrXCEntry.setStatus('current')
xcvrXCSrcTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 1, 1, 1), XcvrType())
if mibBuilder.loadTexts: xcvrXCSrcTypeIdx.setStatus('current')
xcvrXCSrcShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: xcvrXCSrcShelfIdx.setStatus('current')
xcvrXCSrcSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: xcvrXCSrcSlotIdx.setStatus('current')
xcvrXCSrcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: xcvrXCSrcIdx.setStatus('current')
xcvrXCDestTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 1, 1, 5), XcvrType())
if mibBuilder.loadTexts: xcvrXCDestTypeIdx.setStatus('current')
xcvrXCDestShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: xcvrXCDestShelfIdx.setStatus('current')
xcvrXCDestSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: xcvrXCDestSlotIdx.setStatus('current')
xcvrXCDestIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: xcvrXCDestIdx.setStatus('current')
xcvrXCType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 1, 1, 9), XCType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrXCType.setStatus('current')
xcvrXCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 1, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrXCRowStatus.setStatus('current')
vcgXCTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2), )
if mibBuilder.loadTexts: vcgXCTable.setStatus('current')
vcgXCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1), ).setIndexNames((0, "BTI-7000-MIB", "vcgXCSrcShelfIdx"), (0, "BTI-7000-MIB", "vcgXCSrcSlotIdx"), (0, "BTI-7000-MIB", "vcgXCSrcPortIdx"), (0, "BTI-7000-MIB", "vcgXCSrcIdx"), (0, "BTI-7000-MIB", "vcgXCDestShelfIdx"), (0, "BTI-7000-MIB", "vcgXCDestSlotIdx"), (0, "BTI-7000-MIB", "vcgXCDestPortIdx"), (0, "BTI-7000-MIB", "vcgXCDestIdx"))
if mibBuilder.loadTexts: vcgXCEntry.setStatus('current')
vcgXCSrcShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: vcgXCSrcShelfIdx.setStatus('current')
vcgXCSrcSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: vcgXCSrcSlotIdx.setStatus('current')
vcgXCSrcPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: vcgXCSrcPortIdx.setStatus('current')
vcgXCSrcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: vcgXCSrcIdx.setStatus('current')
vcgXCDestShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: vcgXCDestShelfIdx.setStatus('current')
vcgXCDestSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: vcgXCDestSlotIdx.setStatus('current')
vcgXCDestPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)))
if mibBuilder.loadTexts: vcgXCDestPortIdx.setStatus('current')
vcgXCDestIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: vcgXCDestIdx.setStatus('current')
vcgXCType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1, 9), XCType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcgXCType.setStatus('current')
vcgXCProtShelfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcgXCProtShelfNum.setStatus('current')
vcgXCProtSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcgXCProtSlotNum.setStatus('current')
vcgXCProtPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcgXCProtPortNum.setStatus('current')
vcgXCProtNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcgXCProtNum.setStatus('current')
vcgXCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 2, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcgXCRowStatus.setStatus('current')
stsnXCTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3), )
if mibBuilder.loadTexts: stsnXCTable.setStatus('current')
stsnXCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1), ).setIndexNames((0, "BTI-7000-MIB", "stsnXCStsnTypeIdx"), (0, "BTI-7000-MIB", "stsnXCSrcShelfIdx"), (0, "BTI-7000-MIB", "stsnXCSrcSlotIdx"), (0, "BTI-7000-MIB", "stsnXCSrcPortIdx"), (0, "BTI-7000-MIB", "stsnXCSrcIdx"), (0, "BTI-7000-MIB", "stsnXCDestShelfIdx"), (0, "BTI-7000-MIB", "stsnXCDestSlotIdx"), (0, "BTI-7000-MIB", "stsnXCDestPortIdx"), (0, "BTI-7000-MIB", "stsnXCDestIdx"))
if mibBuilder.loadTexts: stsnXCEntry.setStatus('current')
stsnXCStsnTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 1), StsnType())
if mibBuilder.loadTexts: stsnXCStsnTypeIdx.setStatus('current')
stsnXCSrcShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: stsnXCSrcShelfIdx.setStatus('current')
stsnXCSrcSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: stsnXCSrcSlotIdx.setStatus('current')
stsnXCSrcPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: stsnXCSrcPortIdx.setStatus('current')
stsnXCSrcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 192)))
if mibBuilder.loadTexts: stsnXCSrcIdx.setStatus('current')
stsnXCDestShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: stsnXCDestShelfIdx.setStatus('current')
stsnXCDestSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: stsnXCDestSlotIdx.setStatus('current')
stsnXCDestPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)))
if mibBuilder.loadTexts: stsnXCDestPortIdx.setStatus('current')
stsnXCDestIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 192)))
if mibBuilder.loadTexts: stsnXCDestIdx.setStatus('current')
stsnXCType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 10), XCType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stsnXCType.setStatus('current')
stsnXCProtTypeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 11), StsnType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stsnXCProtTypeNum.setStatus('current')
stsnXCProtShelfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stsnXCProtShelfNum.setStatus('current')
stsnXCProtSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stsnXCProtSlotNum.setStatus('current')
stsnXCProtPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stsnXCProtPortNum.setStatus('current')
stsnXCProtNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 192))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stsnXCProtNum.setStatus('current')
stsnXCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 3, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stsnXCRowStatus.setStatus('current')
vcnXCTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4), )
if mibBuilder.loadTexts: vcnXCTable.setStatus('current')
vcnXCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1), ).setIndexNames((0, "BTI-7000-MIB", "vcnXCVcnTypeIdx"), (0, "BTI-7000-MIB", "vcnXCSrcShelfIdx"), (0, "BTI-7000-MIB", "vcnXCSrcSlotIdx"), (0, "BTI-7000-MIB", "vcnXCSrcPortIdx"), (0, "BTI-7000-MIB", "vcnXCSrcIdx"), (0, "BTI-7000-MIB", "vcnXCDestShelfIdx"), (0, "BTI-7000-MIB", "vcnXCDestSlotIdx"), (0, "BTI-7000-MIB", "vcnXCDestPortIdx"), (0, "BTI-7000-MIB", "vcnXCDestIdx"))
if mibBuilder.loadTexts: vcnXCEntry.setStatus('current')
vcnXCVcnTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 1), VcnType())
if mibBuilder.loadTexts: vcnXCVcnTypeIdx.setStatus('current')
vcnXCSrcShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: vcnXCSrcShelfIdx.setStatus('current')
vcnXCSrcSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: vcnXCSrcSlotIdx.setStatus('current')
vcnXCSrcPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: vcnXCSrcPortIdx.setStatus('current')
vcnXCSrcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: vcnXCSrcIdx.setStatus('current')
vcnXCDestShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: vcnXCDestShelfIdx.setStatus('current')
vcnXCDestSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: vcnXCDestSlotIdx.setStatus('current')
vcnXCDestPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)))
if mibBuilder.loadTexts: vcnXCDestPortIdx.setStatus('current')
vcnXCDestIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: vcnXCDestIdx.setStatus('current')
vcnXCType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 10), XCType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcnXCType.setStatus('current')
vcnXCProtTypeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 11), VcnType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcnXCProtTypeNum.setStatus('current')
vcnXCProtShelfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcnXCProtShelfNum.setStatus('current')
vcnXCProtSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcnXCProtSlotNum.setStatus('current')
vcnXCProtPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcnXCProtPortNum.setStatus('current')
vcnXCProtNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcnXCProtNum.setStatus('current')
vcnXCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 4, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcnXCRowStatus.setStatus('current')
odunXCTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5), )
if mibBuilder.loadTexts: odunXCTable.setStatus('current')
odunXCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1), ).setIndexNames((0, "BTI-7000-MIB", "odunXCOdunTypeIdx"), (0, "BTI-7000-MIB", "odunXCSrcShelfIdx"), (0, "BTI-7000-MIB", "odunXCSrcSlotIdx"), (0, "BTI-7000-MIB", "odunXCSrcPortIdx"), (0, "BTI-7000-MIB", "odunXCSrcIdx"), (0, "BTI-7000-MIB", "odunXCDestShelfIdx"), (0, "BTI-7000-MIB", "odunXCDestSlotIdx"), (0, "BTI-7000-MIB", "odunXCDestPortIdx"), (0, "BTI-7000-MIB", "odunXCDestIdx"))
if mibBuilder.loadTexts: odunXCEntry.setStatus('current')
odunXCOdunTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 1), OdunType())
if mibBuilder.loadTexts: odunXCOdunTypeIdx.setStatus('current')
odunXCSrcShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: odunXCSrcShelfIdx.setStatus('current')
odunXCSrcSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: odunXCSrcSlotIdx.setStatus('current')
odunXCSrcPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: odunXCSrcPortIdx.setStatus('current')
odunXCSrcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: odunXCSrcIdx.setStatus('current')
odunXCDestShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: odunXCDestShelfIdx.setStatus('current')
odunXCDestSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: odunXCDestSlotIdx.setStatus('current')
odunXCDestPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)))
if mibBuilder.loadTexts: odunXCDestPortIdx.setStatus('current')
odunXCDestIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: odunXCDestIdx.setStatus('current')
odunXCType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 10), XCType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: odunXCType.setStatus('current')
odunXCProtTypeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 11), OdunType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: odunXCProtTypeNum.setStatus('current')
odunXCProtShelfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: odunXCProtShelfNum.setStatus('current')
odunXCProtSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: odunXCProtSlotNum.setStatus('current')
odunXCProtPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: odunXCProtPortNum.setStatus('current')
odunXCProtNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: odunXCProtNum.setStatus('current')
odunXCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 9, 5, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: odunXCRowStatus.setStatus('current')
xcvrProtGrpTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 1), )
if mibBuilder.loadTexts: xcvrProtGrpTable.setStatus('current')
xcvrProtGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "xcvrProtGrpWorkTypeIdx"), (0, "BTI-7000-MIB", "xcvrProtGrpWorkShelfIdx"), (0, "BTI-7000-MIB", "xcvrProtGrpWorkSlotIdx"), (0, "BTI-7000-MIB", "xcvrProtGrpWorkIdx"), (0, "BTI-7000-MIB", "xcvrProtGrpProtTypeIdx"), (0, "BTI-7000-MIB", "xcvrProtGrpProtShelfIdx"), (0, "BTI-7000-MIB", "xcvrProtGrpProtSlotIdx"), (0, "BTI-7000-MIB", "xcvrProtGrpProtIdx"))
if mibBuilder.loadTexts: xcvrProtGrpEntry.setStatus('current')
xcvrProtGrpWorkTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 1, 1, 1), XcvrType())
if mibBuilder.loadTexts: xcvrProtGrpWorkTypeIdx.setStatus('current')
xcvrProtGrpWorkShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: xcvrProtGrpWorkShelfIdx.setStatus('current')
xcvrProtGrpWorkSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: xcvrProtGrpWorkSlotIdx.setStatus('current')
xcvrProtGrpWorkIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: xcvrProtGrpWorkIdx.setStatus('current')
xcvrProtGrpProtTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 1, 1, 5), XcvrType())
if mibBuilder.loadTexts: xcvrProtGrpProtTypeIdx.setStatus('current')
xcvrProtGrpProtShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: xcvrProtGrpProtShelfIdx.setStatus('current')
xcvrProtGrpProtSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: xcvrProtGrpProtSlotIdx.setStatus('current')
xcvrProtGrpProtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: xcvrProtGrpProtIdx.setStatus('current')
xcvrProtGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrProtGrpId.setStatus('current')
xcvrProtGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 1, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xcvrProtGrpRowStatus.setStatus('current')
ocnProtGrpTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 2), )
if mibBuilder.loadTexts: ocnProtGrpTable.setStatus('current')
ocnProtGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 2, 1), ).setIndexNames((0, "BTI-7000-MIB", "ocnProtGrpWorkTypeIdx"), (0, "BTI-7000-MIB", "ocnProtGrpWorkShelfIdx"), (0, "BTI-7000-MIB", "ocnProtGrpWorkSlotIdx"), (0, "BTI-7000-MIB", "ocnProtGrpWorkPortIdx"), (0, "BTI-7000-MIB", "ocnProtGrpProtTypeIdx"), (0, "BTI-7000-MIB", "ocnProtGrpProtShelfIdx"), (0, "BTI-7000-MIB", "ocnProtGrpProtSlotIdx"), (0, "BTI-7000-MIB", "ocnProtGrpProtPortIdx"))
if mibBuilder.loadTexts: ocnProtGrpEntry.setStatus('current')
ocnProtGrpWorkTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 2, 1, 1), OcnType())
if mibBuilder.loadTexts: ocnProtGrpWorkTypeIdx.setStatus('current')
ocnProtGrpWorkShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: ocnProtGrpWorkShelfIdx.setStatus('current')
ocnProtGrpWorkSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: ocnProtGrpWorkSlotIdx.setStatus('current')
ocnProtGrpWorkPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: ocnProtGrpWorkPortIdx.setStatus('current')
ocnProtGrpProtTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 2, 1, 5), OcnType())
if mibBuilder.loadTexts: ocnProtGrpProtTypeIdx.setStatus('current')
ocnProtGrpProtShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: ocnProtGrpProtShelfIdx.setStatus('current')
ocnProtGrpProtSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: ocnProtGrpProtSlotIdx.setStatus('current')
ocnProtGrpProtPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: ocnProtGrpProtPortIdx.setStatus('current')
ocnProtGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ocnProtGrpId.setStatus('current')
ocnProtGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 2, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ocnProtGrpRowStatus.setStatus('current')
stmnProtGrpTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 3), )
if mibBuilder.loadTexts: stmnProtGrpTable.setStatus('current')
stmnProtGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 3, 1), ).setIndexNames((0, "BTI-7000-MIB", "stmnProtGrpWorkTypeIdx"), (0, "BTI-7000-MIB", "stmnProtGrpWorkShelfIdx"), (0, "BTI-7000-MIB", "stmnProtGrpWorkSlotIdx"), (0, "BTI-7000-MIB", "stmnProtGrpWorkPortIdx"), (0, "BTI-7000-MIB", "stmnProtGrpProtTypeIdx"), (0, "BTI-7000-MIB", "stmnProtGrpProtShelfIdx"), (0, "BTI-7000-MIB", "stmnProtGrpProtSlotIdx"), (0, "BTI-7000-MIB", "stmnProtGrpProtPortIdx"))
if mibBuilder.loadTexts: stmnProtGrpEntry.setStatus('current')
stmnProtGrpWorkTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 3, 1, 1), StmnType())
if mibBuilder.loadTexts: stmnProtGrpWorkTypeIdx.setStatus('current')
stmnProtGrpWorkShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: stmnProtGrpWorkShelfIdx.setStatus('current')
stmnProtGrpWorkSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: stmnProtGrpWorkSlotIdx.setStatus('current')
stmnProtGrpWorkPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: stmnProtGrpWorkPortIdx.setStatus('current')
stmnProtGrpProtTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 3, 1, 5), StmnType())
if mibBuilder.loadTexts: stmnProtGrpProtTypeIdx.setStatus('current')
stmnProtGrpProtShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: stmnProtGrpProtShelfIdx.setStatus('current')
stmnProtGrpProtSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: stmnProtGrpProtSlotIdx.setStatus('current')
stmnProtGrpProtPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: stmnProtGrpProtPortIdx.setStatus('current')
stmnProtGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stmnProtGrpId.setStatus('current')
stmnProtGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 10, 3, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stmnProtGrpRowStatus.setStatus('current')
dbBackupAndRestore = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 1))
swUpgrade = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 2))
class DbBackupAndRestoreCmd(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7))
    namedValues = NamedValues(("noOp", 1), ("invokeBackup", 2), ("loadRestore", 3), ("invokeRestore", 4), ("commitRestore", 6), ("cancelRestore", 7))

class DbBackupAndRestoreType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("local", 1), ("remote", 2), ("remoteSftp", 3))

dbBackupAndRestoreCmd = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 1, 1), DbBackupAndRestoreCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbBackupAndRestoreCmd.setStatus('current')
dbBackupAndRestoreType = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 1, 2), DbBackupAndRestoreType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbBackupAndRestoreType.setStatus('current')
dbBackupAndRestoreAddress = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbBackupAndRestoreAddress.setStatus('current')
dbBackupAndRestorePath = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbBackupAndRestorePath.setStatus('current')
dbBackupAndRestoreFtpUser = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbBackupAndRestoreFtpUser.setStatus('current')
dbBackupAndRestoreFtpPswd = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbBackupAndRestoreFtpPswd.setStatus('current')
dbBackupAndRestoreCheckAlm = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbBackupAndRestoreCheckAlm.setStatus('current')
dbBackupAndRestoreCheckSysName = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbBackupAndRestoreCheckSysName.setStatus('current')
dbBackupAndRestoreInvokeFilename = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbBackupAndRestoreInvokeFilename.setStatus('current')
dbBackupAndRestoreFilename = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbBackupAndRestoreFilename.setStatus('current')
dbBackupAndRestoreResult = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("success", 1), ("failure", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dbBackupAndRestoreResult.setStatus('current')
class SwUpgradeCmd(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("noOp", 1), ("checkUpgrade", 2), ("loadUpgrade", 3), ("invkUpgrade", 4), ("cmmtUpgrade", 5), ("cancUpgrade", 6), ("invkScpUpgrade", 7))

class SwUpgradeFileTransferType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ftp", 1), ("sftp", 2))

swUpgradeCmd = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 2, 1), SwUpgradeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swUpgradeCmd.setStatus('current')
swUpgradeAddress = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swUpgradeAddress.setStatus('current')
swUpgradePath = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swUpgradePath.setStatus('current')
swUpgradeFtpUser = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swUpgradeFtpUser.setStatus('current')
swUpgradeFtpPswd = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swUpgradeFtpPswd.setStatus('current')
swUpgradeInvokeRelNum = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swUpgradeInvokeRelNum.setStatus('current')
swUpgradeCheckAlm = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swUpgradeCheckAlm.setStatus('current')
swUpgradeActiveRelNum = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swUpgradeActiveRelNum.setStatus('current')
swUpgradeInactiveRelNum = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 2, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swUpgradeInactiveRelNum.setStatus('current')
swUpgradeFileTransferType = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 1, 2, 10), SwUpgradeFileTransferType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swUpgradeFileTransferType.setStatus('current')
cpRestartOpTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 5, 1), )
if mibBuilder.loadTexts: cpRestartOpTable.setStatus('current')
cpRestartOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 5, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "cpRestartOpTypeIdx"), (0, "BTI-7000-MIB", "cpRestartOpShelfIdx"), (0, "BTI-7000-MIB", "cpRestartOpSlotIdx"))
if mibBuilder.loadTexts: cpRestartOpEntry.setStatus('current')
cpRestartOpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 5, 1, 1, 1), CpType())
if mibBuilder.loadTexts: cpRestartOpTypeIdx.setStatus('current')
cpRestartOpShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: cpRestartOpShelfIdx.setStatus('current')
cpRestartOpSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)))
if mibBuilder.loadTexts: cpRestartOpSlotIdx.setStatus('current')
cpRestartOpCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noOp", 1), ("warmRestart", 2), ("coldRestart", 3), ("powerOn", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpRestartOpCmd.setStatus('current')
oaOOBRSDOpTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 6, 1), )
if mibBuilder.loadTexts: oaOOBRSDOpTable.setStatus('current')
oaOOBRSDOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 6, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "oaOOBRSDOpTypeIdx"), (0, "BTI-7000-MIB", "oaOOBRSDOpShelfIdx"), (0, "BTI-7000-MIB", "oaOOBRSDOpSlotIdx"), (0, "BTI-7000-MIB", "oaOOBRSDOpIdx"))
if mibBuilder.loadTexts: oaOOBRSDOpEntry.setStatus('current')
oaOOBRSDOpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 6, 1, 1, 1), OaType())
if mibBuilder.loadTexts: oaOOBRSDOpTypeIdx.setStatus('current')
oaOOBRSDOpShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: oaOOBRSDOpShelfIdx.setStatus('current')
oaOOBRSDOpSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: oaOOBRSDOpSlotIdx.setStatus('current')
oaOOBRSDOpIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: oaOOBRSDOpIdx.setStatus('current')
oaOOBRSDOpCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOp", 1), ("overrideOBRSD", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaOOBRSDOpCmd.setStatus('current')
oaOOBRSDOpTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oaOOBRSDOpTimer.setStatus('current')
xcvrLpbkOpTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9, 1), )
if mibBuilder.loadTexts: xcvrLpbkOpTable.setStatus('current')
xcvrLpbkOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "xcvrLpbkOpTypeIdx"), (0, "BTI-7000-MIB", "xcvrLpbkOpShelfIdx"), (0, "BTI-7000-MIB", "xcvrLpbkOpSlotIdx"), (0, "BTI-7000-MIB", "xcvrLpbkOpIdx"))
if mibBuilder.loadTexts: xcvrLpbkOpEntry.setStatus('current')
xcvrLpbkOpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9, 1, 1, 1), XcvrType())
if mibBuilder.loadTexts: xcvrLpbkOpTypeIdx.setStatus('current')
xcvrLpbkOpShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: xcvrLpbkOpShelfIdx.setStatus('current')
xcvrLpbkOpSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: xcvrLpbkOpSlotIdx.setStatus('current')
xcvrLpbkOpIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: xcvrLpbkOpIdx.setStatus('current')
xcvrLpbkOpCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noOp", 1), ("oprLpbk", 2), ("rlsLpbk", 3), ("oprTerminalLpbk", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrLpbkOpCmd.setStatus('current')
xcvrProtSwOpTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9, 2), )
if mibBuilder.loadTexts: xcvrProtSwOpTable.setStatus('current')
xcvrProtSwOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9, 2, 1), ).setIndexNames((0, "BTI-7000-MIB", "xcvrProtSwOpTypeIdx"), (0, "BTI-7000-MIB", "xcvrProtSwOpShelfIdx"), (0, "BTI-7000-MIB", "xcvrProtSwOpSlotIdx"), (0, "BTI-7000-MIB", "xcvrProtSwOpIdx"))
if mibBuilder.loadTexts: xcvrProtSwOpEntry.setStatus('current')
xcvrProtSwOpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9, 2, 1, 1), XcvrType())
if mibBuilder.loadTexts: xcvrProtSwOpTypeIdx.setStatus('current')
xcvrProtSwOpShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: xcvrProtSwOpShelfIdx.setStatus('current')
xcvrProtSwOpSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: xcvrProtSwOpSlotIdx.setStatus('current')
xcvrProtSwOpIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: xcvrProtSwOpIdx.setStatus('current')
xcvrProtSwOpCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 9, 2, 1, 5), ProtSwOpCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xcvrProtSwOpCmd.setStatus('current')
ocnLpbkOpTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12, 1), )
if mibBuilder.loadTexts: ocnLpbkOpTable.setStatus('current')
ocnLpbkOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "ocnLpbkOpTypeIdx"), (0, "BTI-7000-MIB", "ocnLpbkOpShelfIdx"), (0, "BTI-7000-MIB", "ocnLpbkOpSlotIdx"), (0, "BTI-7000-MIB", "ocnLpbkOpPortIdx"))
if mibBuilder.loadTexts: ocnLpbkOpEntry.setStatus('current')
ocnLpbkOpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12, 1, 1, 1), OcnType())
if mibBuilder.loadTexts: ocnLpbkOpTypeIdx.setStatus('current')
ocnLpbkOpShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: ocnLpbkOpShelfIdx.setStatus('current')
ocnLpbkOpSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: ocnLpbkOpSlotIdx.setStatus('current')
ocnLpbkOpPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: ocnLpbkOpPortIdx.setStatus('current')
ocnLpbkOpCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noOp", 1), ("oprFacilityLpbk", 2), ("rlsLpbk", 3), ("oprTerminalLpbk", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnLpbkOpCmd.setStatus('current')
ocnProtSwOpTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12, 2), )
if mibBuilder.loadTexts: ocnProtSwOpTable.setStatus('current')
ocnProtSwOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12, 2, 1), ).setIndexNames((0, "BTI-7000-MIB", "ocnProtSwOpTypeIdx"), (0, "BTI-7000-MIB", "ocnProtSwOpShelfIdx"), (0, "BTI-7000-MIB", "ocnProtSwOpSlotIdx"), (0, "BTI-7000-MIB", "ocnProtSwOpIdx"))
if mibBuilder.loadTexts: ocnProtSwOpEntry.setStatus('current')
ocnProtSwOpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12, 2, 1, 1), OcnType())
if mibBuilder.loadTexts: ocnProtSwOpTypeIdx.setStatus('current')
ocnProtSwOpShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: ocnProtSwOpShelfIdx.setStatus('current')
ocnProtSwOpSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: ocnProtSwOpSlotIdx.setStatus('current')
ocnProtSwOpIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: ocnProtSwOpIdx.setStatus('current')
ocnProtSwOpCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 12, 2, 1, 5), ProtSwOpCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnProtSwOpCmd.setStatus('current')
stsnProtSwOpTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 13, 1), )
if mibBuilder.loadTexts: stsnProtSwOpTable.setStatus('current')
stsnProtSwOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 13, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "stsnProtSwOpTypeIdx"), (0, "BTI-7000-MIB", "stsnProtSwOpShelfIdx"), (0, "BTI-7000-MIB", "stsnProtSwOpSlotIdx"), (0, "BTI-7000-MIB", "stsnProtSwOpPortIdx"), (0, "BTI-7000-MIB", "stsnProtSwOpIdx"))
if mibBuilder.loadTexts: stsnProtSwOpEntry.setStatus('current')
stsnProtSwOpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 13, 1, 1, 1), StsnType())
if mibBuilder.loadTexts: stsnProtSwOpTypeIdx.setStatus('current')
stsnProtSwOpShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: stsnProtSwOpShelfIdx.setStatus('current')
stsnProtSwOpSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: stsnProtSwOpSlotIdx.setStatus('current')
stsnProtSwOpPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: stsnProtSwOpPortIdx.setStatus('current')
stsnProtSwOpIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 192)))
if mibBuilder.loadTexts: stsnProtSwOpIdx.setStatus('current')
stsnProtSwOpCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 13, 1, 1, 6), ProtSwOpCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsnProtSwOpCmd.setStatus('current')
stmnLpbkOpTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14, 1), )
if mibBuilder.loadTexts: stmnLpbkOpTable.setStatus('current')
stmnLpbkOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "stmnLpbkOpTypeIdx"), (0, "BTI-7000-MIB", "stmnLpbkOpShelfIdx"), (0, "BTI-7000-MIB", "stmnLpbkOpSlotIdx"), (0, "BTI-7000-MIB", "stmnLpbkOpPortIdx"))
if mibBuilder.loadTexts: stmnLpbkOpEntry.setStatus('current')
stmnLpbkOpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14, 1, 1, 1), StmnType())
if mibBuilder.loadTexts: stmnLpbkOpTypeIdx.setStatus('current')
stmnLpbkOpShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: stmnLpbkOpShelfIdx.setStatus('current')
stmnLpbkOpSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: stmnLpbkOpSlotIdx.setStatus('current')
stmnLpbkOpPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: stmnLpbkOpPortIdx.setStatus('current')
stmnLpbkOpCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noOp", 1), ("oprFacilityLpbk", 2), ("rlsLpbk", 3), ("oprTerminalLpbk", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnLpbkOpCmd.setStatus('current')
stmnProtSwOpTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14, 2), )
if mibBuilder.loadTexts: stmnProtSwOpTable.setStatus('current')
stmnProtSwOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14, 2, 1), ).setIndexNames((0, "BTI-7000-MIB", "stmnProtSwOpTypeIdx"), (0, "BTI-7000-MIB", "stmnProtSwOpShelfIdx"), (0, "BTI-7000-MIB", "stmnProtSwOpSlotIdx"), (0, "BTI-7000-MIB", "stmnProtSwOpIdx"))
if mibBuilder.loadTexts: stmnProtSwOpEntry.setStatus('current')
stmnProtSwOpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14, 2, 1, 1), StmnType())
if mibBuilder.loadTexts: stmnProtSwOpTypeIdx.setStatus('current')
stmnProtSwOpShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: stmnProtSwOpShelfIdx.setStatus('current')
stmnProtSwOpSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: stmnProtSwOpSlotIdx.setStatus('current')
stmnProtSwOpIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: stmnProtSwOpIdx.setStatus('current')
stmnProtSwOpCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 14, 2, 1, 5), ProtSwOpCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stmnProtSwOpCmd.setStatus('current')
vcnProtSwOpTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 15, 1), )
if mibBuilder.loadTexts: vcnProtSwOpTable.setStatus('current')
vcnProtSwOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 15, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "vcnProtSwOpTypeIdx"), (0, "BTI-7000-MIB", "vcnProtSwOpShelfIdx"), (0, "BTI-7000-MIB", "vcnProtSwOpSlotIdx"), (0, "BTI-7000-MIB", "vcnProtSwOpPortIdx"), (0, "BTI-7000-MIB", "vcnProtSwOpIdx"))
if mibBuilder.loadTexts: vcnProtSwOpEntry.setStatus('current')
vcnProtSwOpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 15, 1, 1, 1), VcnType())
if mibBuilder.loadTexts: vcnProtSwOpTypeIdx.setStatus('current')
vcnProtSwOpShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: vcnProtSwOpShelfIdx.setStatus('current')
vcnProtSwOpSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: vcnProtSwOpSlotIdx.setStatus('current')
vcnProtSwOpPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 15, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: vcnProtSwOpPortIdx.setStatus('current')
vcnProtSwOpIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 15, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: vcnProtSwOpIdx.setStatus('current')
vcnProtSwOpCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 15, 1, 1, 6), ProtSwOpCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcnProtSwOpCmd.setStatus('current')
geLpbkOpTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 16, 1), )
if mibBuilder.loadTexts: geLpbkOpTable.setStatus('current')
geLpbkOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 16, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "geLpbkOpShelfIdx"), (0, "BTI-7000-MIB", "geLpbkOpSlotIdx"), (0, "BTI-7000-MIB", "geLpbkOpPortIdx"))
if mibBuilder.loadTexts: geLpbkOpEntry.setStatus('current')
geLpbkOpShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: geLpbkOpShelfIdx.setStatus('current')
geLpbkOpSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: geLpbkOpSlotIdx.setStatus('current')
geLpbkOpPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 12)))
if mibBuilder.loadTexts: geLpbkOpPortIdx.setStatus('current')
geLpbkOpCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 16, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noOp", 1), ("oprFacilityLpbk", 2), ("oprTerminalLpbk", 3), ("rlsLpbk", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: geLpbkOpCmd.setStatus('current')
fcLpbkOpTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 17, 1), )
if mibBuilder.loadTexts: fcLpbkOpTable.setStatus('current')
fcLpbkOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 17, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "fcLpbkOpShelfIdx"), (0, "BTI-7000-MIB", "fcLpbkOpSlotIdx"), (0, "BTI-7000-MIB", "fcLpbkOpPortIdx"))
if mibBuilder.loadTexts: fcLpbkOpEntry.setStatus('current')
fcLpbkOpShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: fcLpbkOpShelfIdx.setStatus('current')
fcLpbkOpSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: fcLpbkOpSlotIdx.setStatus('current')
fcLpbkOpPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 17, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 12)))
if mibBuilder.loadTexts: fcLpbkOpPortIdx.setStatus('current')
fcLpbkOpCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 17, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noOp", 1), ("oprFacilityLpbk", 2), ("oprTerminalLpbk", 3), ("rlsLpbk", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcLpbkOpCmd.setStatus('current')
briLpbkOpTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 18, 1), )
if mibBuilder.loadTexts: briLpbkOpTable.setStatus('current')
briLpbkOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 18, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "briLpbkOpShelfIdx"), (0, "BTI-7000-MIB", "briLpbkOpSlotIdx"), (0, "BTI-7000-MIB", "briLpbkOpPortIdx"))
if mibBuilder.loadTexts: briLpbkOpEntry.setStatus('current')
briLpbkOpShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 18, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: briLpbkOpShelfIdx.setStatus('current')
briLpbkOpSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 18, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(3, 3), ValueRangeConstraint(5, 5), ValueRangeConstraint(7, 7), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(13, 13), ValueRangeConstraint(15, 15), ValueRangeConstraint(17, 17), ValueRangeConstraint(19, 19), )))
if mibBuilder.loadTexts: briLpbkOpSlotIdx.setStatus('current')
briLpbkOpPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 18, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 12)))
if mibBuilder.loadTexts: briLpbkOpPortIdx.setStatus('current')
briLpbkOpCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 18, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noOp", 1), ("oprFacilityLpbk", 2), ("oprTerminalLpbk", 3), ("rlsLpbk", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: briLpbkOpCmd.setStatus('current')
class DataCommsPingCmd(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("noOp", 1), ("ping", 2), ("pingInProgress", 3))

dataCommsPingTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 7, 1), )
if mibBuilder.loadTexts: dataCommsPingTable.setStatus('current')
dataCommsPingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 7, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "dataCommsPingCpTypeIdx"), (0, "BTI-7000-MIB", "dataCommsPingShelfIdx"), (0, "BTI-7000-MIB", "dataCommsPingSlotIdx"))
if mibBuilder.loadTexts: dataCommsPingEntry.setStatus('current')
dataCommsPingCpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 7, 1, 1, 1), CpType())
if mibBuilder.loadTexts: dataCommsPingCpTypeIdx.setStatus('current')
dataCommsPingShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: dataCommsPingShelfIdx.setStatus('current')
dataCommsPingSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: dataCommsPingSlotIdx.setStatus('current')
dataCommsPingCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 7, 1, 1, 4), DataCommsPingCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataCommsPingCmd.setStatus('current')
dataCommsPingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 7, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataCommsPingAddress.setStatus('current')
dataCommsPingNumAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataCommsPingNumAttempts.setStatus('current')
dataCommsPingNumSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 11, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataCommsPingNumSuccesses.setStatus('current')
cpSynchronizationTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1), )
if mibBuilder.loadTexts: cpSynchronizationTable.setStatus('current')
cpSynchronizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "cpSynchronizationTypeIdx"), (0, "BTI-7000-MIB", "cpSynchronizationShelfIdx"), (0, "BTI-7000-MIB", "cpSynchronizationSlotIdx"))
if mibBuilder.loadTexts: cpSynchronizationEntry.setStatus('current')
cpSynchronizationTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1, 1, 1), CpType())
if mibBuilder.loadTexts: cpSynchronizationTypeIdx.setStatus('current')
cpSynchronizationShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: cpSynchronizationShelfIdx.setStatus('current')
cpSynchronizationSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: cpSynchronizationSlotIdx.setStatus('current')
cpSynchronizationTimingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("line", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpSynchronizationTimingMode.setStatus('current')
cpSynchronizationPrimRefSrcPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpSynchronizationPrimRefSrcPortNum.setStatus('current')
cpSynchronizationPrimRefProtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1, 1, 6), ProtectionStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpSynchronizationPrimRefProtStatus.setStatus('current')
cpSynchronizationPrimProtStatQlfr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1, 1, 7), OperStatQlfr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpSynchronizationPrimProtStatQlfr.setStatus('current')
cpSynchronizationSecRefSrcPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpSynchronizationSecRefSrcPortNum.setStatus('current')
cpSynchronizationSecRefProtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1, 1, 9), ProtectionStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpSynchronizationSecRefProtStatus.setStatus('current')
cpSynchronizationSecProtStatQlfr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1, 1, 10), OperStatQlfr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpSynchronizationSecProtStatQlfr.setStatus('current')
cpSynchronizationPrimRefBasicSSM = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpSynchronizationPrimRefBasicSSM.setStatus('current')
cpSynchronizationSecRefBasicSSM = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpSynchronizationSecRefBasicSSM.setStatus('current')
cpSynchronizationSwEvtType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 12, 1, 1, 13), SyncSwEvtType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cpSynchronizationSwEvtType.setStatus('current')
networkNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 1), )
if mibBuilder.loadTexts: networkNeighborTable.setStatus('current')
networkNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "networkNeighborIdx"))
if mibBuilder.loadTexts: networkNeighborEntry.setStatus('current')
networkNeighborIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: networkNeighborIdx.setStatus('current')
networkNeighborIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: networkNeighborIPAddr.setStatus('current')
networkNeighborRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: networkNeighborRowStatus.setStatus('current')
ospfGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 2), )
if mibBuilder.loadTexts: ospfGeneralTable.setStatus('current')
ospfGeneralGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 2, 1), ).setIndexNames((0, "BTI-7000-MIB", "ospfIdx"))
if mibBuilder.loadTexts: ospfGeneralGroupEntry.setStatus('current')
ospfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)).clone(1))
if mibBuilder.loadTexts: ospfIdx.setStatus('current')
ospfRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 2, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfRouterId.setStatus('current')
ospfAdminStat = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfAdminStat.setStatus('current')
ospfVersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("version2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVersionNumber.setStatus('current')
ospfAreaBdrRtrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaBdrRtrStatus.setStatus('current')
ospfRouteRedist = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("static", 2), ("connected", 3), ("staticAndConnected", 4), ("defOrig", 5), ("defOrigAndStatic", 6), ("defOrigAndConnected", 7), ("all", 8))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfRouteRedist.setStatus('current')
ospfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 2, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfAreaId.setStatus('current')
ospfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfRowStatus.setStatus('current')
ospfIfTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3), )
if mibBuilder.loadTexts: ospfIfTable.setStatus('current')
ospfIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1), ).setIndexNames((0, "BTI-7000-MIB", "ospfIfSwitchId"), (0, "BTI-7000-MIB", "ospfIfShelfIdx"), (0, "BTI-7000-MIB", "ospfIfSlotIdx"), (0, "BTI-7000-MIB", "ospfIfType"), (0, "BTI-7000-MIB", "ospfIfIdx"), (0, "BTI-7000-MIB", "ospfIfSubIdx"))
if mibBuilder.loadTexts: ospfIfEntry.setStatus('current')
ospfIfSwitchId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ospfIfSwitchId.setStatus('current')
ospfIfShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ospfIfShelfIdx.setStatus('current')
ospfIfSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ospfIfSlotIdx.setStatus('current')
ospfIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 4), PvxPortType().clone('unknown')).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ospfIfType.setStatus('current')
ospfIfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ospfIfIdx.setStatus('current')
ospfIfSubIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ospfIfSubIdx.setStatus('current')
ospfIfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 7), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfAreaId.setStatus('current')
ospfIfAdminStat = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfIfAdminStat.setStatus('current')
ospfIfRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfIfRtrPriority.setStatus('current')
ospfIfTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(1)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfIfTransitDelay.setStatus('current')
ospfIfRetransInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfIfRetransInterval.setStatus('current')
ospfIfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfIfHelloInterval.setStatus('current')
ospfIfRtrDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(40)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfIfRtrDeadInterval.setStatus('current')
ospfIfMetricValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfIfMetricValue.setStatus('current')
ospfIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 3, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfIfStatus.setStatus('current')
ospfLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 4), )
if mibBuilder.loadTexts: ospfLsdbTable.setStatus('current')
ospfLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 4, 1), ).setIndexNames((0, "BTI-7000-MIB", "ospfLsdbAreaId"), (0, "BTI-7000-MIB", "ospfLsdbType"), (0, "BTI-7000-MIB", "ospfLsdbLsid"), (0, "BTI-7000-MIB", "ospfLsdbRouterId"))
if mibBuilder.loadTexts: ospfLsdbEntry.setStatus('current')
ospfLsdbAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 4, 1, 1), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLsdbAreaId.setStatus('current')
ospfLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 10))).clone(namedValues=NamedValues(("routerLink", 1), ("networkLink", 2), ("summaryLink", 3), ("asSummaryLink", 4), ("asExternalLink", 5), ("multicastLink", 6), ("nssaExternalLink", 7), ("areaOpaqueLink", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLsdbType.setStatus('current')
ospfLsdbLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLsdbLsid.setStatus('current')
ospfLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 4, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLsdbRouterId.setStatus('current')
ospfLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLsdbSequence.setStatus('current')
ospfLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 4, 1, 6), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLsdbAge.setStatus('current')
ospfLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLsdbChecksum.setStatus('current')
ospfNbrTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 5), )
if mibBuilder.loadTexts: ospfNbrTable.setStatus('current')
ospfNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 5, 1), ).setIndexNames((0, "BTI-7000-MIB", "ospfNbrIpAddr"), (0, "BTI-7000-MIB", "ospfNbrAddressLessIndex"))
if mibBuilder.loadTexts: ospfNbrEntry.setStatus('current')
ospfNbrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNbrIpAddr.setStatus('current')
ospfNbrAddressLessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNbrAddressLessIndex.setStatus('current')
ospfNbrRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 5, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNbrRtrId.setStatus('current')
ospfNbrOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNbrOptions.setStatus('current')
ospfNbrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 5, 1, 5), DesignatedRouterPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNbrPriority.setStatus('current')
ospfNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 13, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("down", 1), ("attempt", 2), ("init", 3), ("twoWay", 4), ("exchangeStart", 5), ("exchange", 6), ("loading", 7), ("full", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNbrState.setStatus('current')
pvxL2IntfTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3), )
if mibBuilder.loadTexts: pvxL2IntfTable.setStatus('current')
pvxL2IntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1), ).setIndexNames((0, "BTI-7000-MIB", "pvxL2IntfSwitchIdx"), (0, "BTI-7000-MIB", "pvxL2IntfShelfIdx"), (0, "BTI-7000-MIB", "pvxL2IntfSlotIdx"), (0, "BTI-7000-MIB", "pvxL2IntfPortTypeIdx"), (0, "BTI-7000-MIB", "pvxL2IntfPortIdx"))
if mibBuilder.loadTexts: pvxL2IntfEntry.setStatus('current')
pvxL2IntfSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pvxL2IntfSwitchIdx.setStatus('current')
pvxL2IntfShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pvxL2IntfShelfIdx.setStatus('current')
pvxL2IntfSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pvxL2IntfSlotIdx.setStatus('current')
pvxL2IntfPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 4), PvxPortType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pvxL2IntfPortTypeIdx.setStatus('current')
pvxL2IntfPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pvxL2IntfPortIdx.setStatus('current')
pvxL2IntfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfAdminStatus.setStatus('current')
pvxL2IntfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 7), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IntfOperStatus.setStatus('current')
pvxL2IntfType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pnp", 1), ("cep", 2), ("cnpPortbased", 3), ("cbp", 4))).clone('pnp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfType.setStatus('current')
pvxL2IntfSTpid = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("uni8100", 1), ("nni88a8", 2), ("nni9100", 3))).clone('uni8100')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfSTpid.setStatus('current')
pvxL2IntfPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4090))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfPvid.setStatus('current')
pvxL2IntfDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfDefaultPriority.setStatus('current')
pvxL2IntfAllowedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all", 1), ("vlanTagged", 2), ("priorityTagged", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfAllowedFrames.setStatus('current')
pvxL2IntfIngressFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 13), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfIngressFiltering.setStatus('deprecated')
pvxL2IntfCtrlFrmProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfCtrlFrmProfileId.setStatus('deprecated')
pvxL2IntfMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 15), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IntfMACAddr.setStatus('current')
pvxL2IntfRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 16), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfRateLimit.setStatus('current')
pvxL2IntfCoSProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfCoSProfileId.setStatus('current')
pvxL2IntfIsUNI = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("neither", 1), ("uni", 2), ("nni", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvxL2IntfIsUNI.setStatus('current')
pvxL2IntfSchedProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfSchedProfName.setStatus('current')
pvxL2IntfPriTCMapProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfPriTCMapProfName.setStatus('current')
pvxL2IntfPCPCodingProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfPCPCodingProfName.setStatus('current')
pvxL2IntfDscpPHBProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfDscpPHBProfName.setStatus('current')
pvxL2IntfCtrlFrmProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfCtrlFrmProfileName.setStatus('current')
pvxL2IntfUseDei = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 24), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfUseDei.setStatus('current')
pvxL2IntfIngressBandwidthProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfIngressBandwidthProfile.setStatus('current')
pvxL2IntfEgressBandwidthProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfEgressBandwidthProfile.setStatus('current')
pvxL2IntfTrustIncomingPCP = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 27), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfTrustIncomingPCP.setStatus('current')
pvxL2IntfTrustIncomingDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 28), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfTrustIncomingDscp.setStatus('current')
pvxL2IntfBcastLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(20, 20), ValueRangeConstraint(40, 40), ValueRangeConstraint(60, 60), ValueRangeConstraint(100, 100), )).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfBcastLimit.setStatus('current')
pvxL2IntfMcastLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(20, 20), ValueRangeConstraint(40, 40), ValueRangeConstraint(60, 60), ValueRangeConstraint(100, 100), )).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfMcastLimit.setStatus('current')
pvxL2IntfDlfLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(20, 20), ValueRangeConstraint(40, 40), ValueRangeConstraint(60, 60), ValueRangeConstraint(100, 100), )).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfDlfLimit.setStatus('current')
pvxL2IntfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 14, 1, 3, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvxL2IntfRowStatus.setStatus('current')
setErrorInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 15, 1))
setErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 15, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setErrorCode.setStatus('current')
setErrorDesc = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 15, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setErrorDesc.setStatus('current')
trapSeqNum = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 4, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapSeqNum.setStatus('current')
evtDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 1, 1), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: evtDateAndTime.setStatus('current')
tcaIntervalType = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 1, 2), PMIntervalType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tcaIntervalType.setStatus('current')
tcaDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 1, 3), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tcaDateAndTime.setStatus('current')
tcaMontype = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 1, 4), PMMontype()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tcaMontype.setStatus('current')
tcaValue = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 1, 5), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tcaValue.setStatus('current')
tcaThreshold = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 1, 6), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tcaThreshold.setStatus('current')
evtDescription = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 1, 7), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: evtDescription.setStatus('current')
evtObjectType = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 1, 8), NotifObjectType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: evtObjectType.setStatus('current')
evtCodeType = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 1, 9), NotifCodeType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: evtCodeType.setStatus('current')
dbChangeNotificationsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 3, 1))
dbChangeDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 3, 1, 1), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dbChangeDateAndTime.setStatus('current')
dbChangeSeqNum = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 3, 1, 2), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dbChangeSeqNum.setStatus('current')
dbChangeOID = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 3, 1, 3), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dbChangeOID.setStatus('current')
condNotifCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 1, 1), )
if mibBuilder.loadTexts: condNotifCtrlTable.setStatus('current')
condNotifCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 1, 1, 1), ).setIndexNames((0, "BTI-7000-MIB", "condNotifObjId"))
if mibBuilder.loadTexts: condNotifCtrlEntry.setStatus('current')
condNotifObjId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 1, 1, 1, 1), ObjectIdentifier())
if mibBuilder.loadTexts: condNotifObjId.setStatus('current')
condNotifSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 1, 1, 1, 2), CondSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: condNotifSeverity.setStatus('current')
condNotifDefaultSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 1, 1, 1, 3), CondSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: condNotifDefaultSeverity.setStatus('current')
envCondAttrTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 1, 2), )
if mibBuilder.loadTexts: envCondAttrTable.setStatus('current')
envCondAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 1, 2, 1), ).setIndexNames((0, "BTI-7000-MIB", "envCondAttrHKIIdx"))
if mibBuilder.loadTexts: envCondAttrEntry.setStatus('current')
envCondAttrHKIIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: envCondAttrHKIIdx.setStatus('current')
envCondAttrSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 1, 2, 1, 2), CondSeverity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envCondAttrSeverity.setStatus('current')
envCondAttrCodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 1, 2, 1, 3), EnvNotifCodeType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envCondAttrCodeType.setStatus('current')
envCondAttrDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envCondAttrDescription.setStatus('current')
envCondAttrInputType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normallyOpen", 1), ("normallyClosed", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: envCondAttrInputType.setStatus('current')
eventNotifState = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eventsEnabled", 1), ("eventsDisabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eventNotifState.setStatus('current')
shelfInvPluginEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 3, 0, 1)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "shelfInvType"), ("BTI-7000-MIB", "shelfInvShortName"), ("BTI-7000-MIB", "shelfInvName"), ("BTI-7000-MIB", "shelfInvChassisPEC"), ("BTI-7000-MIB", "shelfInvChassisCLEI"), ("BTI-7000-MIB", "shelfInvRev"), ("BTI-7000-MIB", "shelfInvConfig"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: shelfInvPluginEvt.setStatus('current')
shelfInvUnpluginEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 3, 0, 2)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: shelfInvUnpluginEvt.setStatus('current')
slotInvPluginEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 4, 0, 1)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "slotInvPackShortName"), ("BTI-7000-MIB", "slotInvPackName"), ("BTI-7000-MIB", "slotInvPackPEC"), ("BTI-7000-MIB", "slotInvPackCLEI"), ("BTI-7000-MIB", "slotInvPackSerialNum"), ("BTI-7000-MIB", "slotInvPackRev"), ("BTI-7000-MIB", "slotInvPackMfgDate"), ("BTI-7000-MIB", "slotInvPackMfgLoc"), ("BTI-7000-MIB", "slotInvPackTestDate"), ("BTI-7000-MIB", "slotInvPackTestLoc"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: slotInvPluginEvt.setStatus('current')
slotInvUnpluginEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 4, 0, 2)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: slotInvUnpluginEvt.setStatus('current')
slotInvUpgradeStageResultEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 4, 0, 3)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "slotInvUpgradeStage"), ("BTI-7000-MIB", "slotInvUpgradeResult"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: slotInvUpgradeStageResultEvt.setStatus('current')
pluggableInvPluginEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 9, 0, 1)).setObjects(("BTI-7000-MIB", "pluggableInvShelfIdx"), ("BTI-7000-MIB", "pluggableInvSlotTypeIdx"), ("BTI-7000-MIB", "pluggableInvSlotIdx"), ("BTI-7000-MIB", "pluggableInvPortIdx"), ("BTI-7000-MIB", "pluggableInvType"), ("BTI-7000-MIB", "pluggableInvPEC"), ("BTI-7000-MIB", "pluggableInvCLEI"), ("BTI-7000-MIB", "pluggableInvVendorName"), ("BTI-7000-MIB", "pluggableInvVendorOUI"), ("BTI-7000-MIB", "pluggableInvVendorPartNum"), ("BTI-7000-MIB", "pluggableInvVendorRev"), ("BTI-7000-MIB", "pluggableInvVendorSerialNum"), ("BTI-7000-MIB", "pluggableInvMfgDate"), ("BTI-7000-MIB", "pluggableInvConnectorType"), ("BTI-7000-MIB", "pluggableInvMinBitRate"), ("BTI-7000-MIB", "pluggableInvMaxBitRate"), ("BTI-7000-MIB", "pluggableInvNomBitRate"), ("BTI-7000-MIB", "pluggableInvEncoding"), ("BTI-7000-MIB", "pluggableInvWavelength"), ("BTI-7000-MIB", "pluggableInvReach"), ("BTI-7000-MIB", "pluggableInvTxFaultImpl"), ("BTI-7000-MIB", "pluggableInvLOSImpl"), ("BTI-7000-MIB", "pluggableInvDDiagImpl"), ("BTI-7000-MIB", "pluggableInvTxDisableImpl"), ("BTI-7000-MIB", "pluggableInvMedia"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: pluggableInvPluginEvt.setStatus('current')
pluggableInvUnpluginEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 9, 0, 2)).setObjects(("BTI-7000-MIB", "pluggableInvShelfIdx"), ("BTI-7000-MIB", "pluggableInvSlotTypeIdx"), ("BTI-7000-MIB", "pluggableInvSlotIdx"), ("BTI-7000-MIB", "pluggableInvPortIdx"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: pluggableInvUnpluginEvt.setStatus('current')
shelfStatusChangeEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 5, 0, 1)).setObjects(("BTI-7000-MIB", "shelfIdx"), ("BTI-7000-MIB", "shelfOperStatus"), ("BTI-7000-MIB", "shelfOperStatQlfr"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: shelfStatusChangeEvt.setStatus('current')
cpStatusChangeEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 6, 0, 1)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "cpOperStatus"), ("BTI-7000-MIB", "cpOperStatQlfr"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: cpStatusChangeEvt.setStatus('current')
cpCheckUpgradeResultEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 6, 0, 2)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "cpUpgradeResult"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: cpCheckUpgradeResultEvt.setStatus('current')
cpUpgradeTransferResultEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 6, 0, 3)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "cpUpgradeResult"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: cpUpgradeTransferResultEvt.setStatus('current')
cpUpgradeStageResultEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 6, 0, 4)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "cpUpgradeStage"), ("BTI-7000-MIB", "cpUpgradeResult"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: cpUpgradeStageResultEvt.setStatus('current')
cpDbBackupResultEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 6, 0, 5)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "dbBackupAndRestoreAddress"), ("BTI-7000-MIB", "dbBackupAndRestorePath"), ("BTI-7000-MIB", "dbBackupAndRestoreResult"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: cpDbBackupResultEvt.setStatus('current')
cpDbRestoreTransferResultEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 6, 0, 6)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "dbBackupAndRestoreAddress"), ("BTI-7000-MIB", "dbBackupAndRestorePath"), ("BTI-7000-MIB", "dbBackupAndRestoreResult"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: cpDbRestoreTransferResultEvt.setStatus('current')
cpDbInvokeResultEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 6, 0, 7)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "dbBackupAndRestoreResult"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: cpDbInvokeResultEvt.setStatus('current')
cpDbApplyResultEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 6, 0, 8)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "dbBackupAndRestoreResult"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: cpDbApplyResultEvt.setStatus('obsolete')
oaStatusChangeEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 7, 0, 1)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "oaOperStatus"), ("BTI-7000-MIB", "oaOperStatQlfr"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: oaStatusChangeEvt.setStatus('current')
xcvrStatusChangeEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 10, 0, 1)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "xcvrOperStatus"), ("BTI-7000-MIB", "xcvrOperStatQlfr"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: xcvrStatusChangeEvt.setStatus('current')
xcvrProtSwitchEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 10, 0, 2)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "xcvrProtSwEvtType"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: xcvrProtSwitchEvt.setStatus('current')
xcvrTcaEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 10, 0, 3)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "tcaIntervalType"), ("BTI-7000-MIB", "tcaDateAndTime"), ("BTI-7000-MIB", "tcaMontype"), ("BTI-7000-MIB", "tcaValue"), ("BTI-7000-MIB", "tcaThreshold"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: xcvrTcaEvt.setStatus('current')
amdStatusChangeEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 12, 0, 1)).setObjects(("BTI-7000-MIB", "amdTypeIdx"), ("BTI-7000-MIB", "amdShelfIdx"), ("BTI-7000-MIB", "amdSlotIdx"), ("BTI-7000-MIB", "amdLineIdx"), ("BTI-7000-MIB", "amdPortIdx"), ("BTI-7000-MIB", "amdOperStatus"), ("BTI-7000-MIB", "amdOperStatQlfr"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: amdStatusChangeEvt.setStatus('obsolete')
oscStatusChangeEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 8, 0, 1)).setObjects(("BTI-7000-MIB", "oscShelfIdx"), ("BTI-7000-MIB", "oscSlotIdx"), ("BTI-7000-MIB", "oscIdx"), ("BTI-7000-MIB", "oscOperStatus"), ("BTI-7000-MIB", "oscOperStatQlfr"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: oscStatusChangeEvt.setStatus('current')
netMgmtStatusChangeEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 8, 0, 2)).setObjects(("BTI-7000-MIB", "netMgmtIdx"), ("BTI-7000-MIB", "netMgmtOperStatus"), ("BTI-7000-MIB", "netMgmtOperStatQlfr"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: netMgmtStatusChangeEvt.setStatus('current')
ocnStatusChangeEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 13, 0, 1)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "ocnOperStatus"), ("BTI-7000-MIB", "ocnOperStatQlfr"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: ocnStatusChangeEvt.setStatus('current')
ocnTcaEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 13, 0, 2)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "tcaIntervalType"), ("BTI-7000-MIB", "tcaDateAndTime"), ("BTI-7000-MIB", "tcaMontype"), ("BTI-7000-MIB", "tcaValue"), ("BTI-7000-MIB", "tcaThreshold"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: ocnTcaEvt.setStatus('current')
ocnProtSwitchEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 13, 0, 3)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "ocnProtSwEvtType"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: ocnProtSwitchEvt.setStatus('current')
stsnProtSwitchEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 14, 0, 2)).setObjects(("BTI-7000-MIB", "stsnTypeIdx"), ("BTI-7000-MIB", "stsnShelfIdx"), ("BTI-7000-MIB", "stsnSlotIdx"), ("BTI-7000-MIB", "stsnPortIdx"), ("BTI-7000-MIB", "stsnIdx"), ("BTI-7000-MIB", "stsnProtSwEvtType"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: stsnProtSwitchEvt.setStatus('current')
stsnTcaEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 14, 0, 3)).setObjects(("BTI-7000-MIB", "stsnTypeIdx"), ("BTI-7000-MIB", "stsnShelfIdx"), ("BTI-7000-MIB", "stsnSlotIdx"), ("BTI-7000-MIB", "stsnPortIdx"), ("BTI-7000-MIB", "stsnIdx"), ("BTI-7000-MIB", "tcaIntervalType"), ("BTI-7000-MIB", "tcaDateAndTime"), ("BTI-7000-MIB", "tcaMontype"), ("BTI-7000-MIB", "tcaValue"), ("BTI-7000-MIB", "tcaThreshold"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: stsnTcaEvt.setStatus('current')
stmnStatusChangeEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 15, 0, 1)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "stmnOperStatus"), ("BTI-7000-MIB", "stmnOperStatQlfr"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: stmnStatusChangeEvt.setStatus('current')
stmnTcaEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 15, 0, 2)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "tcaIntervalType"), ("BTI-7000-MIB", "tcaDateAndTime"), ("BTI-7000-MIB", "tcaMontype"), ("BTI-7000-MIB", "tcaValue"), ("BTI-7000-MIB", "tcaThreshold"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: stmnTcaEvt.setStatus('current')
stmnProtSwitchEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 15, 0, 3)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "stmnProtSwEvtType"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: stmnProtSwitchEvt.setStatus('current')
vcnProtSwitchEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 16, 0, 2)).setObjects(("BTI-7000-MIB", "vcnTypeIdx"), ("BTI-7000-MIB", "vcnShelfIdx"), ("BTI-7000-MIB", "vcnSlotIdx"), ("BTI-7000-MIB", "vcnPortIdx"), ("BTI-7000-MIB", "vcnIdx"), ("BTI-7000-MIB", "vcnProtSwEvtType"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: vcnProtSwitchEvt.setStatus('current')
vcnTcaEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 16, 0, 3)).setObjects(("BTI-7000-MIB", "vcnTypeIdx"), ("BTI-7000-MIB", "vcnShelfIdx"), ("BTI-7000-MIB", "vcnSlotIdx"), ("BTI-7000-MIB", "vcnPortIdx"), ("BTI-7000-MIB", "vcnIdx"), ("BTI-7000-MIB", "tcaIntervalType"), ("BTI-7000-MIB", "tcaDateAndTime"), ("BTI-7000-MIB", "tcaMontype"), ("BTI-7000-MIB", "tcaValue"), ("BTI-7000-MIB", "tcaThreshold"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: vcnTcaEvt.setStatus('current')
geStatusChangeEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 17, 0, 1)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "geOperStatus"), ("BTI-7000-MIB", "geOperStatQlfr"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: geStatusChangeEvt.setStatus('current')
geTcaEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 17, 0, 2)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "tcaIntervalType"), ("BTI-7000-MIB", "tcaDateAndTime"), ("BTI-7000-MIB", "tcaMontype"), ("BTI-7000-MIB", "tcaValue"), ("BTI-7000-MIB", "tcaThreshold"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: geTcaEvt.setStatus('current')
fcStatusChangeEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 18, 0, 1)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "fcOperStatus"), ("BTI-7000-MIB", "fcOperStatQlfr"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: fcStatusChangeEvt.setStatus('current')
fcTcaEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 18, 0, 2)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "tcaIntervalType"), ("BTI-7000-MIB", "tcaDateAndTime"), ("BTI-7000-MIB", "tcaMontype"), ("BTI-7000-MIB", "tcaValue"), ("BTI-7000-MIB", "tcaThreshold"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: fcTcaEvt.setStatus('current')
ethL1IFStatusChangeEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 21, 0, 1)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "ethIntfOperStatus"), ("BTI-7000-MIB", "ethIntfOperStatQlfr"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: ethL1IFStatusChangeEvt.setStatus('current')
ethL1IFTcaEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 21, 0, 2)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "tcaIntervalType"), ("BTI-7000-MIB", "tcaDateAndTime"), ("BTI-7000-MIB", "tcaMontype"), ("BTI-7000-MIB", "tcaValue"), ("BTI-7000-MIB", "tcaThreshold"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: ethL1IFTcaEvt.setStatus('current')
pvxL2IFTcaEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 22, 0, 2)).setObjects(("BTI-7000-MIB", "pvxL2IntfSwitchIdx"), ("BTI-7000-MIB", "pvxL2IntfShelfIdx"), ("BTI-7000-MIB", "pvxL2IntfSlotIdx"), ("BTI-7000-MIB", "pvxL2IntfPortTypeIdx"), ("BTI-7000-MIB", "pvxL2IntfPortIdx"), ("BTI-7000-MIB", "tcaIntervalType"), ("BTI-7000-MIB", "tcaDateAndTime"), ("BTI-7000-MIB", "tcaMontype"), ("BTI-7000-MIB", "tcaValue"), ("BTI-7000-MIB", "tcaThreshold"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: pvxL2IFTcaEvt.setStatus('current')
briStatusChangeEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 24, 0, 1)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "briOperStatus"), ("BTI-7000-MIB", "briOperStatQlfr"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: briStatusChangeEvt.setStatus('current')
cpSynchronizationSwitchEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 25, 0, 1)).setObjects(("BTI-7000-MIB", "cpSynchronizationTypeIdx"), ("BTI-7000-MIB", "cpSynchronizationShelfIdx"), ("BTI-7000-MIB", "cpSynchronizationSlotIdx"), ("BTI-7000-MIB", "cpSynchronizationSwEvtType"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: cpSynchronizationSwitchEvt.setStatus('current')
shelfInvMissingCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 1)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvMissingCond.setStatus('obsolete')
shelfInvMissingClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 2)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvMissingClear.setStatus('obsolete')
shelfInvUnknownCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 3)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvUnknownCond.setStatus('current')
shelfInvUnknownClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 4)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvUnknownClear.setStatus('current')
shelfInvCommCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 5)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvCommCond.setStatus('obsolete')
shelfInvCommClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 6)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvCommClear.setStatus('obsolete')
shelfInvPwrFeedAFailCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 7)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvPwrFeedAFailCond.setStatus('current')
shelfInvPwrFeedAFailClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 8)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvPwrFeedAFailClear.setStatus('current')
shelfInvPwrFeedBFailCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 9)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvPwrFeedBFailCond.setStatus('current')
shelfInvPwrFeedBFailClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 10)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvPwrFeedBFailClear.setStatus('current')
shelfInvPwrBrownoutCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 11)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvPwrBrownoutCond.setStatus('current')
shelfInvPwrBrownoutClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 12)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvPwrBrownoutClear.setStatus('current')
shelfInvSysCommCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 13)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvSysCommCond.setStatus('deprecated')
shelfInvSysCommClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 14)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvSysCommClear.setStatus('deprecated')
shelfInvExpansionShelfIdMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 15)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "shelfInvExpectedNEName"), ("BTI-7000-MIB", "shelfInvExpectedIPAddress"), ("BTI-7000-MIB", "shelfInvExpectedShelfNum"), ("BTI-7000-MIB", "shelfInvExpectedMSISerialNum"), ("BTI-7000-MIB", "shelfInvDiscoveredNEName"), ("BTI-7000-MIB", "shelfInvDiscoveredIPAddress"), ("BTI-7000-MIB", "shelfInvDiscoveredShelfNum"), ("BTI-7000-MIB", "shelfInvDiscoveredMSISerialNum"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvExpansionShelfIdMismatchCond.setStatus('current')
shelfInvExpansionShelfIdMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 16)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvExpansionShelfIdMismatchClear.setStatus('current')
shelfInvExpansionShelfCommLOSCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 17)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvExpansionShelfCommLOSCond.setStatus('current')
shelfInvExpansionShelfCommLOSClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 18)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvExpansionShelfCommLOSClear.setStatus('current')
shelfInvExpansionShelfCommLinkDownCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 19)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvExpansionShelfCommLinkDownCond.setStatus('current')
shelfInvExpansionShelfCommLinkDownClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 20)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvExpansionShelfCommLinkDownClear.setStatus('current')
shelfInvExpansionShelfCommDeviceUnsupportedCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 21)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvExpansionShelfCommDeviceUnsupportedCond.setStatus('current')
shelfInvExpansionShelfCommDeviceUnsupportedClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 22)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvExpansionShelfCommDeviceUnsupportedClear.setStatus('current')
shelfInvTempMaxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 23)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvTempMaxCond.setStatus('current')
shelfInvTempMaxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 2, 0, 24)).setObjects(("BTI-7000-MIB", "shelfInvIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfInvTempMaxClear.setStatus('current')
slotInvMissingCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 1)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvMissingCond.setStatus('current')
slotInvMissingClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 2)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvMissingClear.setStatus('current')
slotInvUnknownCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 3)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvUnknownCond.setStatus('current')
slotInvUnknownClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 4)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvUnknownClear.setStatus('current')
slotInvCommCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 5)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvCommCond.setStatus('current')
slotInvCommClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 6)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvCommClear.setStatus('current')
slotInvFailCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 7)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvFailCond.setStatus('current')
slotInvFailClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 8)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvFailClear.setStatus('current')
slotInvUpgradeInProgressCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 9)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvUpgradeInProgressCond.setStatus('current')
slotInvUpgradeInProgressClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 10)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvUpgradeInProgressClear.setStatus('current')
slotInvUpgradeFailureCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 11)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvUpgradeFailureCond.setStatus('current')
slotInvUpgradeFailureClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 12)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvUpgradeFailureClear.setStatus('current')
slotInvVersionMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 13)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "slotInvSWVersion"), ("BTI-7000-MIB", "neSWVersion"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvVersionMismatchCond.setStatus('current')
slotInvVersionMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 14)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvVersionMismatchClear.setStatus('current')
slotInvCoolingUnitFailCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 15)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvCoolingUnitFailCond.setStatus('current')
slotInvCoolingUnitFailClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 16)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvCoolingUnitFailClear.setStatus('current')
slotInvDspCommCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 17)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvDspCommCond.setStatus('current')
slotInvDspCommClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 18)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvDspCommClear.setStatus('current')
slotInvUnsupportedPackCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 19)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvUnsupportedPackCond.setStatus('current')
slotInvUnsupportedPackClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 20)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvUnsupportedPackClear.setStatus('current')
slotInvCoolingUnitMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 21)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvCoolingUnitMismatchCond.setStatus('current')
slotInvCoolingUnitMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 22)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvCoolingUnitMismatchClear.setStatus('current')
slotInvPwrFeedAFuseFailCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 23)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvPwrFeedAFuseFailCond.setStatus('current')
slotInvPwrFeedAFuseFailClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 24)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvPwrFeedAFuseFailClear.setStatus('current')
slotInvPwrFeedBFuseFailCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 25)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvPwrFeedBFuseFailCond.setStatus('current')
slotInvPwrFeedBFuseFailClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 26)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvPwrFeedBFuseFailClear.setStatus('current')
slotInvPowerFailCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 27)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvPowerFailCond.setStatus('current')
slotInvPowerFailClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 28)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvPowerFailClear.setStatus('current')
slotInvHiTempAutoShutdownCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 29)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvHiTempAutoShutdownCond.setStatus('current')
slotInvHiTempAutoShutdownClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 30)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvHiTempAutoShutdownClear.setStatus('current')
slotInvHTThreshExceededCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 31)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvHTThreshExceededCond.setStatus('current')
slotInvHTThreshExceededClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 32)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvHTThreshExceededClear.setStatus('current')
slotInvHTSThreshExceededCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 33)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvHTSThreshExceededCond.setStatus('current')
slotInvHTSThreshExceededClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 34)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvHTSThreshExceededClear.setStatus('current')
slotInvHTASUnsupportedCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 35)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvHTASUnsupportedCond.setStatus('current')
slotInvHTASUnsupportedClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 3, 0, 36)).setObjects(("BTI-7000-MIB", "slotInvShelfIdx"), ("BTI-7000-MIB", "slotInvSlotTypeIdx"), ("BTI-7000-MIB", "slotInvSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: slotInvHTASUnsupportedClear.setStatus('current')
shelfMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 4, 0, 1)).setObjects(("BTI-7000-MIB", "shelfIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfMismatchCond.setStatus('current')
shelfMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 4, 0, 2)).setObjects(("BTI-7000-MIB", "shelfIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfMismatchClear.setStatus('current')
shelfMissingCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 4, 0, 3)).setObjects(("BTI-7000-MIB", "shelfIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfMissingCond.setStatus('current')
shelfMissingClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 4, 0, 4)).setObjects(("BTI-7000-MIB", "shelfIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfMissingClear.setStatus('current')
shelfConfigurationMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 4, 0, 5)).setObjects(("BTI-7000-MIB", "shelfIdx"), ("BTI-7000-MIB", "shelfProvConfig"), ("BTI-7000-MIB", "shelfDiscConfig"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfConfigurationMismatchCond.setStatus('deprecated')
shelfConfigurationMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 4, 0, 6)).setObjects(("BTI-7000-MIB", "shelfIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: shelfConfigurationMismatchClear.setStatus('deprecated')
cpMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 1)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpMismatchCond.setStatus('current')
cpMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 2)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpMismatchClear.setStatus('current')
cpConnectorMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 3)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpConnectorMismatchCond.setStatus('current')
cpConnectorMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 4)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpConnectorMismatchClear.setStatus('current')
cpInvalidProvCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 5)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpInvalidProvCond.setStatus('current')
cpInvalidProvClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 6)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpInvalidProvClear.setStatus('current')
cpSoftwareBankAFailCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 7)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpSoftwareBankAFailCond.setStatus('current')
cpSoftwareBankAFailClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 8)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpSoftwareBankAFailClear.setStatus('current')
cpSoftwareBankBFailCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 9)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpSoftwareBankBFailCond.setStatus('current')
cpSoftwareBankBFailClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 10)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpSoftwareBankBFailClear.setStatus('current')
cpUpgradeInProgressCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 11)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpUpgradeInProgressCond.setStatus('current')
cpUpgradeInProgressClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 12)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpUpgradeInProgressClear.setStatus('current')
cpUpgradeFailCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 15)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpUpgradeFailCond.setStatus('current')
cpUpgradeFailClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 16)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpUpgradeFailClear.setStatus('current')
cpDbRestoreInProgressCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 17)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpDbRestoreInProgressCond.setStatus('current')
cpDbRestoreInProgressClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 18)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpDbRestoreInProgressClear.setStatus('current')
cpDbRecoveryFailCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 19)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpDbRecoveryFailCond.setStatus('current')
cpDbRecoveryFailClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 20)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpDbRecoveryFailClear.setStatus('current')
cpFanFeedFailCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 21)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpFanFeedFailCond.setStatus('current')
cpFanFeedFailClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 22)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpFanFeedFailClear.setStatus('current')
cpStorageCardFailCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 23)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpStorageCardFailCond.setStatus('current')
cpStorageCardFailClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 24)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpStorageCardFailClear.setStatus('current')
cpDbDeletionInProgressCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 25)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpDbDeletionInProgressCond.setStatus('current')
cpDbDeletionInProgressClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 26)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpDbDeletionInProgressClear.setStatus('current')
cpDegradeCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 27)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpDegradeCond.setStatus('current')
cpDegradeClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 5, 0, 28)).setObjects(("BTI-7000-MIB", "cpTypeIdx"), ("BTI-7000-MIB", "cpShelfIdx"), ("BTI-7000-MIB", "cpSlotIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: cpDegradeClear.setStatus('current')
oaCaseTempCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 1)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "oaCaseTemp"), ("BTI-7000-MIB", "oaCaseTempMaxTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaCaseTempCond.setStatus('current')
oaCaseTempClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 2)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaCaseTempClear.setStatus('current')
oaCaseTempShutdownCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 3)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "oaCaseTemp"), ("BTI-7000-MIB", "oaCaseTempMaxShutdownTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaCaseTempShutdownCond.setStatus('current')
oaCaseTempShutdownClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 4)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaCaseTempShutdownClear.setStatus('current')
oaLaserMinTempShutdownCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 5)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "oaLaser1Temp"), ("BTI-7000-MIB", "oaLaser2Temp"), ("BTI-7000-MIB", "oaLaserTempMinShutdownTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaLaserMinTempShutdownCond.setStatus('current')
oaLaserMinTempShutdownClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 6)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaLaserMinTempShutdownClear.setStatus('current')
oaLaserMaxTempShutdownCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 7)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "oaLaser1Temp"), ("BTI-7000-MIB", "oaLaser2Temp"), ("BTI-7000-MIB", "oaLaserTempMaxShutdownTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaLaserMaxTempShutdownCond.setStatus('current')
oaLaserMaxTempShutdownClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 8)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaLaserMaxTempShutdownClear.setStatus('current')
oaOpticalPwrReceivedMinCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 9)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "oaOpticalPwrReceived"), ("BTI-7000-MIB", "oaOpticalPwrReceivedMinTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaOpticalPwrReceivedMinCond.setStatus('current')
oaOpticalPwrReceivedMinClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 10)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaOpticalPwrReceivedMinClear.setStatus('current')
oaOpticalPwrReceivedMaxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 11)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "oaOpticalPwrReceived"), ("BTI-7000-MIB", "oaOpticalPwrReceivedMaxTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaOpticalPwrReceivedMaxCond.setStatus('current')
oaOpticalPwrReceivedMaxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 12)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaOpticalPwrReceivedMaxClear.setStatus('current')
oaSSIOpticalPwrReceivedMaxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 13)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "oaSSIOpticalPwrReceived"), ("BTI-7000-MIB", "oaSSIOpticalPwrReceivedMaxTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaSSIOpticalPwrReceivedMaxCond.setStatus('current')
oaSSIOpticalPwrReceivedMaxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 14)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaSSIOpticalPwrReceivedMaxClear.setStatus('current')
oaBackReflectionSafetyCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 17)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "oaBackReflectionSafetyTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaBackReflectionSafetyCond.setStatus('current')
oaBackReflectionSafetyClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 18)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaBackReflectionSafetyClear.setStatus('current')
oaOpticalPwrTransmittedMinCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 19)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "oaOpticalPwrTransmitted"), ("BTI-7000-MIB", "oaOpticalPwrTransmittedMinTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaOpticalPwrTransmittedMinCond.setStatus('current')
oaOpticalPwrTransmittedMinClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 20)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaOpticalPwrTransmittedMinClear.setStatus('current')
oaOpticalPwrTransmittedMaxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 21)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "oaOpticalPwrTransmitted"), ("BTI-7000-MIB", "oaOpticalPwrTransmittedMaxTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaOpticalPwrTransmittedMaxCond.setStatus('current')
oaOpticalPwrTransmittedMaxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 22)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaOpticalPwrTransmittedMaxClear.setStatus('current')
oaMSInsertionLossCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 23)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "oaMSInsertionLoss"), ("BTI-7000-MIB", "oaMSInsertionLossMaxTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaMSInsertionLossCond.setStatus('current')
oaMSInsertionLossClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 24)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaMSInsertionLossClear.setStatus('current')
oaAmplifierConditioningCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 25)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaAmplifierConditioningCond.setStatus('current')
oaAmplifierConditioningClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 26)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaAmplifierConditioningClear.setStatus('current')
oaDspCommCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 27)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaDspCommCond.setStatus('current')
oaDspCommClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 28)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaDspCommClear.setStatus('current')
oaBackReflectionSafetyOverrideCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 41)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaBackReflectionSafetyOverrideCond.setStatus('current')
oaBackReflectionSafetyOverrideClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 42)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaBackReflectionSafetyOverrideClear.setStatus('current')
oaBackReflectionHighThresholdCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 43)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaBackReflectionHighThresholdCond.setStatus('current')
oaBackReflectionHighThresholdClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 6, 0, 44)).setObjects(("BTI-7000-MIB", "oaTypeIdx"), ("BTI-7000-MIB", "oaShelfIdx"), ("BTI-7000-MIB", "oaSlotIdx"), ("BTI-7000-MIB", "oaIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oaBackReflectionHighThresholdClear.setStatus('current')
oscLossOfSignalCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 7, 0, 1)).setObjects(("BTI-7000-MIB", "oscShelfIdx"), ("BTI-7000-MIB", "oscSlotIdx"), ("BTI-7000-MIB", "oscIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oscLossOfSignalCond.setStatus('current')
oscLossOfSignalClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 7, 0, 2)).setObjects(("BTI-7000-MIB", "oscShelfIdx"), ("BTI-7000-MIB", "oscSlotIdx"), ("BTI-7000-MIB", "oscIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oscLossOfSignalClear.setStatus('current')
oscSfpMissingCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 7, 0, 3)).setObjects(("BTI-7000-MIB", "oscShelfIdx"), ("BTI-7000-MIB", "oscSlotIdx"), ("BTI-7000-MIB", "oscIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oscSfpMissingCond.setStatus('current')
oscSfpMissingClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 7, 0, 4)).setObjects(("BTI-7000-MIB", "oscShelfIdx"), ("BTI-7000-MIB", "oscSlotIdx"), ("BTI-7000-MIB", "oscIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: oscSfpMissingClear.setStatus('current')
pluggableInvUnknownCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 8, 0, 1)).setObjects(("BTI-7000-MIB", "pluggableInvShelfIdx"), ("BTI-7000-MIB", "pluggableInvSlotTypeIdx"), ("BTI-7000-MIB", "pluggableInvSlotIdx"), ("BTI-7000-MIB", "pluggableInvPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: pluggableInvUnknownCond.setStatus('current')
pluggableInvUnknownClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 8, 0, 2)).setObjects(("BTI-7000-MIB", "pluggableInvShelfIdx"), ("BTI-7000-MIB", "pluggableInvSlotTypeIdx"), ("BTI-7000-MIB", "pluggableInvSlotIdx"), ("BTI-7000-MIB", "pluggableInvPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: pluggableInvUnknownClear.setStatus('current')
pluggableInvCommCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 8, 0, 3)).setObjects(("BTI-7000-MIB", "pluggableInvShelfIdx"), ("BTI-7000-MIB", "pluggableInvSlotTypeIdx"), ("BTI-7000-MIB", "pluggableInvSlotIdx"), ("BTI-7000-MIB", "pluggableInvPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: pluggableInvCommCond.setStatus('current')
pluggableInvCommClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 8, 0, 4)).setObjects(("BTI-7000-MIB", "pluggableInvShelfIdx"), ("BTI-7000-MIB", "pluggableInvSlotTypeIdx"), ("BTI-7000-MIB", "pluggableInvSlotIdx"), ("BTI-7000-MIB", "pluggableInvPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: pluggableInvCommClear.setStatus('current')
pluggableInvFailCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 8, 0, 5)).setObjects(("BTI-7000-MIB", "pluggableInvShelfIdx"), ("BTI-7000-MIB", "pluggableInvSlotTypeIdx"), ("BTI-7000-MIB", "pluggableInvSlotIdx"), ("BTI-7000-MIB", "pluggableInvPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: pluggableInvFailCond.setStatus('current')
pluggableInvFailClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 8, 0, 6)).setObjects(("BTI-7000-MIB", "pluggableInvShelfIdx"), ("BTI-7000-MIB", "pluggableInvSlotTypeIdx"), ("BTI-7000-MIB", "pluggableInvSlotIdx"), ("BTI-7000-MIB", "pluggableInvPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: pluggableInvFailClear.setStatus('current')
pluggableInvMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 8, 0, 7)).setObjects(("BTI-7000-MIB", "pluggableInvShelfIdx"), ("BTI-7000-MIB", "pluggableInvSlotTypeIdx"), ("BTI-7000-MIB", "pluggableInvSlotIdx"), ("BTI-7000-MIB", "pluggableInvPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: pluggableInvMismatchCond.setStatus('current')
pluggableInvMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 8, 0, 8)).setObjects(("BTI-7000-MIB", "pluggableInvShelfIdx"), ("BTI-7000-MIB", "pluggableInvSlotTypeIdx"), ("BTI-7000-MIB", "pluggableInvSlotIdx"), ("BTI-7000-MIB", "pluggableInvPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: pluggableInvMismatchClear.setStatus('current')
pluggableInvMissingCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 8, 0, 9)).setObjects(("BTI-7000-MIB", "pluggableInvShelfIdx"), ("BTI-7000-MIB", "pluggableInvSlotTypeIdx"), ("BTI-7000-MIB", "pluggableInvSlotIdx"), ("BTI-7000-MIB", "pluggableInvPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: pluggableInvMissingCond.setStatus('current')
pluggableInvMissingClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 8, 0, 10)).setObjects(("BTI-7000-MIB", "pluggableInvShelfIdx"), ("BTI-7000-MIB", "pluggableInvSlotTypeIdx"), ("BTI-7000-MIB", "pluggableInvSlotIdx"), ("BTI-7000-MIB", "pluggableInvPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: pluggableInvMissingClear.setStatus('current')
pluggableInvUnsupportedCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 8, 0, 11)).setObjects(("BTI-7000-MIB", "pluggableInvShelfIdx"), ("BTI-7000-MIB", "pluggableInvSlotTypeIdx"), ("BTI-7000-MIB", "pluggableInvSlotIdx"), ("BTI-7000-MIB", "pluggableInvPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: pluggableInvUnsupportedCond.setStatus('current')
pluggableInvUnsupportedClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 8, 0, 12)).setObjects(("BTI-7000-MIB", "pluggableInvShelfIdx"), ("BTI-7000-MIB", "pluggableInvSlotTypeIdx"), ("BTI-7000-MIB", "pluggableInvSlotIdx"), ("BTI-7000-MIB", "pluggableInvPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: pluggableInvUnsupportedClear.setStatus('current')
xcvrMissingCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 1)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrMissingCond.setStatus('current')
xcvrMissingClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 2)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrMissingClear.setStatus('current')
xcvrMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 3)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrMismatchCond.setStatus('current')
xcvrMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 4)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrMismatchClear.setStatus('current')
xcvrRFICond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 5)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrRFICond.setStatus('current')
xcvrRFIClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 6)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrRFIClear.setStatus('current')
xcvrLossOfSignalCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 7)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrLossOfSignalCond.setStatus('current')
xcvrLossOfSignalClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 8)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrLossOfSignalClear.setStatus('current')
xcvrLossOfLockCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 9)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrLossOfLockCond.setStatus('current')
xcvrLossOfLockClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 10)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrLossOfLockClear.setStatus('current')
xcvrOpticalPwrReceivedMinCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 11)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "xcvrOpticalPwrReceived"), ("BTI-7000-MIB", "xcvrOpticalPwrReceivedMinTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrOpticalPwrReceivedMinCond.setStatus('current')
xcvrOpticalPwrReceivedMinClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 12)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrOpticalPwrReceivedMinClear.setStatus('current')
xcvrOpticalPwrReceivedMaxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 13)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "xcvrOpticalPwrReceived"), ("BTI-7000-MIB", "xcvrOpticalPwrReceivedMaxTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrOpticalPwrReceivedMaxCond.setStatus('current')
xcvrOpticalPwrReceivedMaxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 14)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrOpticalPwrReceivedMaxClear.setStatus('current')
xcvrOpticalPwrTransmittedMinCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 15)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "xcvrOpticalPwrTransmitted"), ("BTI-7000-MIB", "xcvrOpticalPwrTransmittedMinTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrOpticalPwrTransmittedMinCond.setStatus('current')
xcvrOpticalPwrTransmittedMinClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 16)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrOpticalPwrTransmittedMinClear.setStatus('current')
xcvrOpticalPwrTransmittedMaxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 17)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "xcvrOpticalPwrTransmitted"), ("BTI-7000-MIB", "xcvrOpticalPwrTransmittedMaxTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrOpticalPwrTransmittedMaxCond.setStatus('current')
xcvrOpticalPwrTransmittedMaxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 18)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrOpticalPwrTransmittedMaxClear.setStatus('current')
xcvrLossOfFrameCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 19)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrLossOfFrameCond.setStatus('current')
xcvrLossOfFrameClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 20)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrLossOfFrameClear.setStatus('current')
xcvrLossOfSyncCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 21)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrLossOfSyncCond.setStatus('current')
xcvrLossOfSyncClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 22)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrLossOfSyncClear.setStatus('current')
xcvrLoopbackCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 27)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrLoopbackCond.setStatus('current')
xcvrLoopbackClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 28)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrLoopbackClear.setStatus('current')
xcvrForcedSwitchToProtectionCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 29)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrForcedSwitchToProtectionCond.setStatus('current')
xcvrForcedSwitchToProtectionClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 30)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrForcedSwitchToProtectionClear.setStatus('current')
xcvrForcedSwitchToWorkingCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 31)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrForcedSwitchToWorkingCond.setStatus('current')
xcvrForcedSwitchToWorkingClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 32)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrForcedSwitchToWorkingClear.setStatus('current')
xcvrLockoutProtectionCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 33)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrLockoutProtectionCond.setStatus('current')
xcvrLockoutProtectionClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 34)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrLockoutProtectionClear.setStatus('current')
xcvrLockoutWorkingCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 35)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrLockoutWorkingCond.setStatus('current')
xcvrLockoutWorkingClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 36)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrLockoutWorkingClear.setStatus('current')
xcvrTempMaxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 37)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrTempMaxCond.setStatus('current')
xcvrTempMaxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 38)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrTempMaxClear.setStatus('current')
xcvrWavelengthNotAchievableCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 39)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrWavelengthNotAchievableCond.setStatus('current')
xcvrWavelengthNotAchievableClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 40)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrWavelengthNotAchievableClear.setStatus('current')
xcvrAlarmIndicationSignalCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 41)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrAlarmIndicationSignalCond.setStatus('current')
xcvrAlarmIndicationSignalClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 42)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrAlarmIndicationSignalClear.setStatus('current')
xcvrTraceMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 43)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "xcvrReceivedTraceLabel"), ("BTI-7000-MIB", "xcvrExpectedTraceLabel"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrTraceMismatchCond.setStatus('current')
xcvrTraceMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 44)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrTraceMismatchClear.setStatus('current')
xcvrRemoteFaultCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 45)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrRemoteFaultCond.setStatus('current')
xcvrRemoteFaultClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 46)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrRemoteFaultClear.setStatus('current')
xcvrSignalDegradeCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 47)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrSignalDegradeCond.setStatus('current')
xcvrSignalDegradeClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 48)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrSignalDegradeClear.setStatus('current')
xcvrOTNPayloadMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 49)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrOTNPayloadMismatchCond.setStatus('current')
xcvrOTNPayloadMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 50)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrOTNPayloadMismatchClear.setStatus('current')
xcvrLFCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 51)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrLFCond.setStatus('current')
xcvrLFClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 52)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrLFClear.setStatus('current')
xcvrOpenConnectionIndicatorCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 53)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrOpenConnectionIndicatorCond.setStatus('current')
xcvrOpenConnectionIndicatorClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 54)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrOpenConnectionIndicatorClear.setStatus('current')
xcvrReceivedLockoutCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 55)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrReceivedLockoutCond.setStatus('current')
xcvrReceivedLockoutClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 56)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrReceivedLockoutClear.setStatus('current')
xcvrBackwardDefectIndicatorCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 57)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrBackwardDefectIndicatorCond.setStatus('current')
xcvrBackwardDefectIndicatorClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 9, 0, 58)).setObjects(("BTI-7000-MIB", "xcvrTypeIdx"), ("BTI-7000-MIB", "xcvrShelfIdx"), ("BTI-7000-MIB", "xcvrSlotIdx"), ("BTI-7000-MIB", "xcvrIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: xcvrBackwardDefectIndicatorClear.setStatus('current')
amdLossOfSignalCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 11, 0, 1)).setObjects(("BTI-7000-MIB", "amdTypeIdx"), ("BTI-7000-MIB", "amdShelfIdx"), ("BTI-7000-MIB", "amdSlotIdx"), ("BTI-7000-MIB", "amdLineIdx"), ("BTI-7000-MIB", "amdPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: amdLossOfSignalCond.setStatus('obsolete')
amdLossOfSignalClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 11, 0, 2)).setObjects(("BTI-7000-MIB", "amdTypeIdx"), ("BTI-7000-MIB", "amdShelfIdx"), ("BTI-7000-MIB", "amdSlotIdx"), ("BTI-7000-MIB", "amdLineIdx"), ("BTI-7000-MIB", "amdPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: amdLossOfSignalClear.setStatus('obsolete')
amdOpticalPwrReceivedMinCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 11, 0, 3)).setObjects(("BTI-7000-MIB", "amdTypeIdx"), ("BTI-7000-MIB", "amdShelfIdx"), ("BTI-7000-MIB", "amdSlotIdx"), ("BTI-7000-MIB", "amdLineIdx"), ("BTI-7000-MIB", "amdPortIdx"), ("BTI-7000-MIB", "amdOpticalPwrReceived"), ("BTI-7000-MIB", "amdOpticalPwrReceivedMinTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: amdOpticalPwrReceivedMinCond.setStatus('obsolete')
amdOpticalPwrReceivedMinClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 11, 0, 4)).setObjects(("BTI-7000-MIB", "amdTypeIdx"), ("BTI-7000-MIB", "amdShelfIdx"), ("BTI-7000-MIB", "amdSlotIdx"), ("BTI-7000-MIB", "amdLineIdx"), ("BTI-7000-MIB", "amdPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: amdOpticalPwrReceivedMinClear.setStatus('obsolete')
amdOpticalPwrReceivedMaxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 11, 0, 5)).setObjects(("BTI-7000-MIB", "amdTypeIdx"), ("BTI-7000-MIB", "amdShelfIdx"), ("BTI-7000-MIB", "amdSlotIdx"), ("BTI-7000-MIB", "amdLineIdx"), ("BTI-7000-MIB", "amdPortIdx"), ("BTI-7000-MIB", "amdOpticalPwrReceived"), ("BTI-7000-MIB", "amdOpticalPwrReceivedMaxTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: amdOpticalPwrReceivedMaxCond.setStatus('obsolete')
amdOpticalPwrReceivedMaxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 11, 0, 6)).setObjects(("BTI-7000-MIB", "amdTypeIdx"), ("BTI-7000-MIB", "amdShelfIdx"), ("BTI-7000-MIB", "amdSlotIdx"), ("BTI-7000-MIB", "amdLineIdx"), ("BTI-7000-MIB", "amdPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: amdOpticalPwrReceivedMaxClear.setStatus('obsolete')
amdTPLNACond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 11, 0, 7)).setObjects(("BTI-7000-MIB", "amdTypeIdx"), ("BTI-7000-MIB", "amdShelfIdx"), ("BTI-7000-MIB", "amdSlotIdx"), ("BTI-7000-MIB", "amdLineIdx"), ("BTI-7000-MIB", "amdPortIdx"), ("BTI-7000-MIB", "amdOpticalPwrTransmitted"), ("BTI-7000-MIB", "amdOpticalPwrTransmittedTarget"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: amdTPLNACond.setStatus('obsolete')
amdTPLNAClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 11, 0, 8)).setObjects(("BTI-7000-MIB", "amdTypeIdx"), ("BTI-7000-MIB", "amdShelfIdx"), ("BTI-7000-MIB", "amdSlotIdx"), ("BTI-7000-MIB", "amdLineIdx"), ("BTI-7000-MIB", "amdPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: amdTPLNAClear.setStatus('obsolete')
amdTALNACond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 11, 0, 9)).setObjects(("BTI-7000-MIB", "amdTypeIdx"), ("BTI-7000-MIB", "amdShelfIdx"), ("BTI-7000-MIB", "amdSlotIdx"), ("BTI-7000-MIB", "amdLineIdx"), ("BTI-7000-MIB", "amdPortIdx"), ("BTI-7000-MIB", "amdOpticalAttentuation"), ("BTI-7000-MIB", "amdOpticalAttenuationTarget"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: amdTALNACond.setStatus('obsolete')
amdTALNAClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 11, 0, 10)).setObjects(("BTI-7000-MIB", "amdTypeIdx"), ("BTI-7000-MIB", "amdShelfIdx"), ("BTI-7000-MIB", "amdSlotIdx"), ("BTI-7000-MIB", "amdLineIdx"), ("BTI-7000-MIB", "amdPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: amdTALNAClear.setStatus('obsolete')
ocnLossOfSignalCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 1)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnLossOfSignalCond.setStatus('current')
ocnLossOfSignalClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 2)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnLossOfSignalClear.setStatus('current')
ocnXcvrMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 3)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnXcvrMismatchCond.setStatus('current')
ocnXcvrMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 4)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnXcvrMismatchClear.setStatus('current')
ocnOpticalPwrReceivedMinCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 5)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "ocnOpticalPwrReceived"), ("BTI-7000-MIB", "ocnOpticalPwrReceivedMinTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnOpticalPwrReceivedMinCond.setStatus('current')
ocnOpticalPwrReceivedMinClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 6)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnOpticalPwrReceivedMinClear.setStatus('current')
ocnOpticalPwrReceivedMaxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 7)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "ocnOpticalPwrReceived"), ("BTI-7000-MIB", "ocnOpticalPwrReceivedMaxTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnOpticalPwrReceivedMaxCond.setStatus('current')
ocnOpticalPwrReceivedMaxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 8)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnOpticalPwrReceivedMaxClear.setStatus('current')
ocnOpticalPwrTransmittedMinCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 9)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "ocnOpticalPwrTransmitted"), ("BTI-7000-MIB", "ocnOpticalPwrTransmittedMinTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnOpticalPwrTransmittedMinCond.setStatus('current')
ocnOpticalPwrTransmittedMinClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 10)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnOpticalPwrTransmittedMinClear.setStatus('current')
ocnOpticalPwrTransmittedMaxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 11)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "ocnOpticalPwrTransmitted"), ("BTI-7000-MIB", "ocnOpticalPwrTransmittedMaxTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnOpticalPwrTransmittedMaxCond.setStatus('current')
ocnOpticalPwrTransmittedMaxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 12)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnOpticalPwrTransmittedMaxClear.setStatus('current')
ocnLossOfFrameCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 13)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnLossOfFrameCond.setStatus('current')
ocnLossOfFrameClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 14)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnLossOfFrameClear.setStatus('current')
ocnSignalDegradeCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 15)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "ocnBER"), ("BTI-7000-MIB", "ocnBERTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnSignalDegradeCond.setStatus('current')
ocnSignalDegradeClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 16)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnSignalDegradeClear.setStatus('current')
ocnAlarmIndicationSignalCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 17)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnAlarmIndicationSignalCond.setStatus('current')
ocnAlarmIndicationSignalClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 18)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnAlarmIndicationSignalClear.setStatus('current')
ocnLoopbackCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 19)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnLoopbackCond.setStatus('current')
ocnLoopbackClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 20)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnLoopbackClear.setStatus('current')
ocnLossOfPrimaryTimingReferenceCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 21)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnLossOfPrimaryTimingReferenceCond.setStatus('current')
ocnLossOfPrimaryTimingReferenceClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 22)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnLossOfPrimaryTimingReferenceClear.setStatus('current')
ocnLossOfSecondaryTimingReferenceCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 23)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnLossOfSecondaryTimingReferenceCond.setStatus('current')
ocnLossOfSecondaryTimingReferenceClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 24)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnLossOfSecondaryTimingReferenceClear.setStatus('current')
ocnOTNPayloadMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 25)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnOTNPayloadMismatchCond.setStatus('current')
ocnOTNPayloadMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 26)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnOTNPayloadMismatchClear.setStatus('current')
ocnForcedSwitchToProtectionCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 27)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnForcedSwitchToProtectionCond.setStatus('current')
ocnForcedSwitchToProtectionClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 28)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnForcedSwitchToProtectionClear.setStatus('current')
ocnForcedSwitchToWorkingCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 29)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnForcedSwitchToWorkingCond.setStatus('current')
ocnForcedSwitchToWorkingClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 30)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnForcedSwitchToWorkingClear.setStatus('current')
ocnLockoutProtectionCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 31)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnLockoutProtectionCond.setStatus('current')
ocnLockoutProtectionClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 32)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnLockoutProtectionClear.setStatus('current')
ocnLockoutWorkingCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 33)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnLockoutWorkingCond.setStatus('current')
ocnLockoutWorkingClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 34)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnLockoutWorkingClear.setStatus('current')
ocnWavelengthNotAchievableCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 35)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnWavelengthNotAchievableCond.setStatus('current')
ocnWavelengthNotAchievableClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 12, 0, 36)).setObjects(("BTI-7000-MIB", "ocnTypeIdx"), ("BTI-7000-MIB", "ocnShelfIdx"), ("BTI-7000-MIB", "ocnSlotIdx"), ("BTI-7000-MIB", "ocnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ocnWavelengthNotAchievableClear.setStatus('current')
stsnAlarmIndicationSignalCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 1)).setObjects(("BTI-7000-MIB", "stsnTypeIdx"), ("BTI-7000-MIB", "stsnShelfIdx"), ("BTI-7000-MIB", "stsnSlotIdx"), ("BTI-7000-MIB", "stsnPortIdx"), ("BTI-7000-MIB", "stsnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stsnAlarmIndicationSignalCond.setStatus('current')
stsnAlarmIndicationSignalClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 2)).setObjects(("BTI-7000-MIB", "stsnTypeIdx"), ("BTI-7000-MIB", "stsnShelfIdx"), ("BTI-7000-MIB", "stsnSlotIdx"), ("BTI-7000-MIB", "stsnPortIdx"), ("BTI-7000-MIB", "stsnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stsnAlarmIndicationSignalClear.setStatus('current')
stsnLossOfPointerCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 3)).setObjects(("BTI-7000-MIB", "stsnTypeIdx"), ("BTI-7000-MIB", "stsnShelfIdx"), ("BTI-7000-MIB", "stsnSlotIdx"), ("BTI-7000-MIB", "stsnPortIdx"), ("BTI-7000-MIB", "stsnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stsnLossOfPointerCond.setStatus('current')
stsnLossOfPointerClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 4)).setObjects(("BTI-7000-MIB", "stsnTypeIdx"), ("BTI-7000-MIB", "stsnShelfIdx"), ("BTI-7000-MIB", "stsnSlotIdx"), ("BTI-7000-MIB", "stsnPortIdx"), ("BTI-7000-MIB", "stsnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stsnLossOfPointerClear.setStatus('current')
stsnUnequippedCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 5)).setObjects(("BTI-7000-MIB", "stsnTypeIdx"), ("BTI-7000-MIB", "stsnShelfIdx"), ("BTI-7000-MIB", "stsnSlotIdx"), ("BTI-7000-MIB", "stsnPortIdx"), ("BTI-7000-MIB", "stsnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stsnUnequippedCond.setStatus('current')
stsnUnequippedClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 6)).setObjects(("BTI-7000-MIB", "stsnTypeIdx"), ("BTI-7000-MIB", "stsnShelfIdx"), ("BTI-7000-MIB", "stsnSlotIdx"), ("BTI-7000-MIB", "stsnPortIdx"), ("BTI-7000-MIB", "stsnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stsnUnequippedClear.setStatus('current')
stsnSignalDegradeCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 7)).setObjects(("BTI-7000-MIB", "stsnTypeIdx"), ("BTI-7000-MIB", "stsnShelfIdx"), ("BTI-7000-MIB", "stsnSlotIdx"), ("BTI-7000-MIB", "stsnPortIdx"), ("BTI-7000-MIB", "stsnIdx"), ("BTI-7000-MIB", "stsnBER"), ("BTI-7000-MIB", "stsnBERTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stsnSignalDegradeCond.setStatus('current')
stsnSignalDegradeClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 8)).setObjects(("BTI-7000-MIB", "stsnTypeIdx"), ("BTI-7000-MIB", "stsnShelfIdx"), ("BTI-7000-MIB", "stsnSlotIdx"), ("BTI-7000-MIB", "stsnPortIdx"), ("BTI-7000-MIB", "stsnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stsnSignalDegradeClear.setStatus('current')
stsnForcedSwitchToProtectionCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 9)).setObjects(("BTI-7000-MIB", "stsnTypeIdx"), ("BTI-7000-MIB", "stsnShelfIdx"), ("BTI-7000-MIB", "stsnSlotIdx"), ("BTI-7000-MIB", "stsnPortIdx"), ("BTI-7000-MIB", "stsnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stsnForcedSwitchToProtectionCond.setStatus('current')
stsnForcedSwitchToProtectionClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 10)).setObjects(("BTI-7000-MIB", "stsnTypeIdx"), ("BTI-7000-MIB", "stsnShelfIdx"), ("BTI-7000-MIB", "stsnSlotIdx"), ("BTI-7000-MIB", "stsnPortIdx"), ("BTI-7000-MIB", "stsnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stsnForcedSwitchToProtectionClear.setStatus('current')
stsnForcedSwitchToWorkingCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 11)).setObjects(("BTI-7000-MIB", "stsnTypeIdx"), ("BTI-7000-MIB", "stsnShelfIdx"), ("BTI-7000-MIB", "stsnSlotIdx"), ("BTI-7000-MIB", "stsnPortIdx"), ("BTI-7000-MIB", "stsnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stsnForcedSwitchToWorkingCond.setStatus('current')
stsnForcedSwitchToWorkingClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 12)).setObjects(("BTI-7000-MIB", "stsnTypeIdx"), ("BTI-7000-MIB", "stsnShelfIdx"), ("BTI-7000-MIB", "stsnSlotIdx"), ("BTI-7000-MIB", "stsnPortIdx"), ("BTI-7000-MIB", "stsnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stsnForcedSwitchToWorkingClear.setStatus('current')
stsnLockoutProtectionCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 13)).setObjects(("BTI-7000-MIB", "stsnTypeIdx"), ("BTI-7000-MIB", "stsnShelfIdx"), ("BTI-7000-MIB", "stsnSlotIdx"), ("BTI-7000-MIB", "stsnPortIdx"), ("BTI-7000-MIB", "stsnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stsnLockoutProtectionCond.setStatus('current')
stsnLockoutProtectionClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 14)).setObjects(("BTI-7000-MIB", "stsnTypeIdx"), ("BTI-7000-MIB", "stsnShelfIdx"), ("BTI-7000-MIB", "stsnSlotIdx"), ("BTI-7000-MIB", "stsnPortIdx"), ("BTI-7000-MIB", "stsnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stsnLockoutProtectionClear.setStatus('current')
stsnLockoutWorkingCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 15)).setObjects(("BTI-7000-MIB", "stsnTypeIdx"), ("BTI-7000-MIB", "stsnShelfIdx"), ("BTI-7000-MIB", "stsnSlotIdx"), ("BTI-7000-MIB", "stsnPortIdx"), ("BTI-7000-MIB", "stsnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stsnLockoutWorkingCond.setStatus('current')
stsnLockoutWorkingClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 16)).setObjects(("BTI-7000-MIB", "stsnTypeIdx"), ("BTI-7000-MIB", "stsnShelfIdx"), ("BTI-7000-MIB", "stsnSlotIdx"), ("BTI-7000-MIB", "stsnPortIdx"), ("BTI-7000-MIB", "stsnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stsnLockoutWorkingClear.setStatus('current')
stsnConcatMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 17)).setObjects(("BTI-7000-MIB", "stsnTypeIdx"), ("BTI-7000-MIB", "stsnShelfIdx"), ("BTI-7000-MIB", "stsnSlotIdx"), ("BTI-7000-MIB", "stsnPortIdx"), ("BTI-7000-MIB", "stsnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stsnConcatMismatchCond.setStatus('current')
stsnConcatMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 13, 0, 18)).setObjects(("BTI-7000-MIB", "stsnTypeIdx"), ("BTI-7000-MIB", "stsnShelfIdx"), ("BTI-7000-MIB", "stsnSlotIdx"), ("BTI-7000-MIB", "stsnPortIdx"), ("BTI-7000-MIB", "stsnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stsnConcatMismatchClear.setStatus('current')
stmnLossOfSignalCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 1)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnLossOfSignalCond.setStatus('current')
stmnLossOfSignalClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 2)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnLossOfSignalClear.setStatus('current')
stmnXcvrMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 3)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnXcvrMismatchCond.setStatus('current')
stmnXcvrMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 4)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnXcvrMismatchClear.setStatus('current')
stmnOpticalPwrReceivedMinCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 5)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "stmnOpticalPwrReceived"), ("BTI-7000-MIB", "stmnOpticalPwrReceivedMinTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnOpticalPwrReceivedMinCond.setStatus('current')
stmnOpticalPwrReceivedMinClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 6)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnOpticalPwrReceivedMinClear.setStatus('current')
stmnOpticalPwrReceivedMaxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 7)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "stmnOpticalPwrReceived"), ("BTI-7000-MIB", "stmnOpticalPwrReceivedMaxTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnOpticalPwrReceivedMaxCond.setStatus('current')
stmnOpticalPwrReceivedMaxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 8)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnOpticalPwrReceivedMaxClear.setStatus('current')
stmnOpticalPwrTransmittedMinCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 9)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "stmnOpticalPwrTransmitted"), ("BTI-7000-MIB", "stmnOpticalPwrTransmittedMinTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnOpticalPwrTransmittedMinCond.setStatus('current')
stmnOpticalPwrTransmittedMinClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 10)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnOpticalPwrTransmittedMinClear.setStatus('current')
stmnOpticalPwrTransmittedMaxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 11)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "stmnOpticalPwrTransmitted"), ("BTI-7000-MIB", "stmnOpticalPwrTransmittedMaxTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnOpticalPwrTransmittedMaxCond.setStatus('current')
stmnOpticalPwrTransmittedMaxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 12)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnOpticalPwrTransmittedMaxClear.setStatus('current')
stmnLossOfFrameCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 13)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnLossOfFrameCond.setStatus('current')
stmnLossOfFrameClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 14)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnLossOfFrameClear.setStatus('current')
stmnSignalDegradeCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 15)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "stmnBER"), ("BTI-7000-MIB", "stmnBERTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnSignalDegradeCond.setStatus('current')
stmnSignalDegradeClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 16)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnSignalDegradeClear.setStatus('current')
stmnAlarmIndicationSignalCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 17)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnAlarmIndicationSignalCond.setStatus('current')
stmnAlarmIndicationSignalClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 18)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnAlarmIndicationSignalClear.setStatus('current')
stmnLoopbackCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 19)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnLoopbackCond.setStatus('current')
stmnLoopbackClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 20)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnLoopbackClear.setStatus('current')
stmnLossOfPrimaryTimingReferenceCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 21)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnLossOfPrimaryTimingReferenceCond.setStatus('current')
stmnLossOfPrimaryTimingReferenceClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 22)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnLossOfPrimaryTimingReferenceClear.setStatus('current')
stmnLossOfSecondaryTimingReferenceCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 23)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnLossOfSecondaryTimingReferenceCond.setStatus('current')
stmnLossOfSecondaryTimingReferenceClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 24)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnLossOfSecondaryTimingReferenceClear.setStatus('current')
stmnOTNPayloadMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 25)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnOTNPayloadMismatchCond.setStatus('current')
stmnOTNPayloadMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 26)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnOTNPayloadMismatchClear.setStatus('current')
stmnForcedSwitchToProtectionCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 27)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnForcedSwitchToProtectionCond.setStatus('current')
stmnForcedSwitchToProtectionClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 28)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnForcedSwitchToProtectionClear.setStatus('current')
stmnForcedSwitchToWorkingCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 29)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnForcedSwitchToWorkingCond.setStatus('current')
stmnForcedSwitchToWorkingClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 30)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnForcedSwitchToWorkingClear.setStatus('current')
stmnLockoutProtectionCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 31)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnLockoutProtectionCond.setStatus('current')
stmnLockoutProtectionClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 32)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnLockoutProtectionClear.setStatus('current')
stmnLockoutWorkingCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 33)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnLockoutWorkingCond.setStatus('current')
stmnLockoutWorkingClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 34)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnLockoutWorkingClear.setStatus('current')
stmnWavelengthNotAchievableCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 35)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnWavelengthNotAchievableCond.setStatus('current')
stmnWavelengthNotAchievableClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 14, 0, 36)).setObjects(("BTI-7000-MIB", "stmnTypeIdx"), ("BTI-7000-MIB", "stmnShelfIdx"), ("BTI-7000-MIB", "stmnSlotIdx"), ("BTI-7000-MIB", "stmnPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: stmnWavelengthNotAchievableClear.setStatus('current')
vcnAlarmIndicationSignalCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 1)).setObjects(("BTI-7000-MIB", "vcnTypeIdx"), ("BTI-7000-MIB", "vcnShelfIdx"), ("BTI-7000-MIB", "vcnSlotIdx"), ("BTI-7000-MIB", "vcnPortIdx"), ("BTI-7000-MIB", "vcnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: vcnAlarmIndicationSignalCond.setStatus('current')
vcnAlarmIndicationSignalClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 2)).setObjects(("BTI-7000-MIB", "vcnTypeIdx"), ("BTI-7000-MIB", "vcnShelfIdx"), ("BTI-7000-MIB", "vcnSlotIdx"), ("BTI-7000-MIB", "vcnPortIdx"), ("BTI-7000-MIB", "vcnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: vcnAlarmIndicationSignalClear.setStatus('current')
vcnLossOfPointerCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 3)).setObjects(("BTI-7000-MIB", "vcnTypeIdx"), ("BTI-7000-MIB", "vcnShelfIdx"), ("BTI-7000-MIB", "vcnSlotIdx"), ("BTI-7000-MIB", "vcnPortIdx"), ("BTI-7000-MIB", "vcnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: vcnLossOfPointerCond.setStatus('current')
vcnLossOfPointerClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 4)).setObjects(("BTI-7000-MIB", "vcnTypeIdx"), ("BTI-7000-MIB", "vcnShelfIdx"), ("BTI-7000-MIB", "vcnSlotIdx"), ("BTI-7000-MIB", "vcnPortIdx"), ("BTI-7000-MIB", "vcnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: vcnLossOfPointerClear.setStatus('current')
vcnUnequippedCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 5)).setObjects(("BTI-7000-MIB", "vcnTypeIdx"), ("BTI-7000-MIB", "vcnShelfIdx"), ("BTI-7000-MIB", "vcnSlotIdx"), ("BTI-7000-MIB", "vcnPortIdx"), ("BTI-7000-MIB", "vcnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: vcnUnequippedCond.setStatus('current')
vcnUnequippedClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 6)).setObjects(("BTI-7000-MIB", "vcnTypeIdx"), ("BTI-7000-MIB", "vcnShelfIdx"), ("BTI-7000-MIB", "vcnSlotIdx"), ("BTI-7000-MIB", "vcnPortIdx"), ("BTI-7000-MIB", "vcnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: vcnUnequippedClear.setStatus('current')
vcnSignalDegradeCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 7)).setObjects(("BTI-7000-MIB", "vcnTypeIdx"), ("BTI-7000-MIB", "vcnShelfIdx"), ("BTI-7000-MIB", "vcnSlotIdx"), ("BTI-7000-MIB", "vcnPortIdx"), ("BTI-7000-MIB", "vcnIdx"), ("BTI-7000-MIB", "vcnBER"), ("BTI-7000-MIB", "vcnBERTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: vcnSignalDegradeCond.setStatus('current')
vcnSignalDegradeClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 8)).setObjects(("BTI-7000-MIB", "vcnTypeIdx"), ("BTI-7000-MIB", "vcnShelfIdx"), ("BTI-7000-MIB", "vcnSlotIdx"), ("BTI-7000-MIB", "vcnPortIdx"), ("BTI-7000-MIB", "vcnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: vcnSignalDegradeClear.setStatus('current')
vcnForcedSwitchToProtectionCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 9)).setObjects(("BTI-7000-MIB", "vcnTypeIdx"), ("BTI-7000-MIB", "vcnShelfIdx"), ("BTI-7000-MIB", "vcnSlotIdx"), ("BTI-7000-MIB", "vcnPortIdx"), ("BTI-7000-MIB", "vcnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: vcnForcedSwitchToProtectionCond.setStatus('current')
vcnForcedSwitchToProtectionClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 10)).setObjects(("BTI-7000-MIB", "vcnTypeIdx"), ("BTI-7000-MIB", "vcnShelfIdx"), ("BTI-7000-MIB", "vcnSlotIdx"), ("BTI-7000-MIB", "vcnPortIdx"), ("BTI-7000-MIB", "vcnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: vcnForcedSwitchToProtectionClear.setStatus('current')
vcnForcedSwitchToWorkingCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 11)).setObjects(("BTI-7000-MIB", "vcnTypeIdx"), ("BTI-7000-MIB", "vcnShelfIdx"), ("BTI-7000-MIB", "vcnSlotIdx"), ("BTI-7000-MIB", "vcnPortIdx"), ("BTI-7000-MIB", "vcnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: vcnForcedSwitchToWorkingCond.setStatus('current')
vcnForcedSwitchToWorkingClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 12)).setObjects(("BTI-7000-MIB", "vcnTypeIdx"), ("BTI-7000-MIB", "vcnShelfIdx"), ("BTI-7000-MIB", "vcnSlotIdx"), ("BTI-7000-MIB", "vcnPortIdx"), ("BTI-7000-MIB", "vcnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: vcnForcedSwitchToWorkingClear.setStatus('current')
vcnLockoutProtectionCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 13)).setObjects(("BTI-7000-MIB", "vcnTypeIdx"), ("BTI-7000-MIB", "vcnShelfIdx"), ("BTI-7000-MIB", "vcnSlotIdx"), ("BTI-7000-MIB", "vcnPortIdx"), ("BTI-7000-MIB", "vcnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: vcnLockoutProtectionCond.setStatus('current')
vcnLockoutProtectionClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 14)).setObjects(("BTI-7000-MIB", "vcnTypeIdx"), ("BTI-7000-MIB", "vcnShelfIdx"), ("BTI-7000-MIB", "vcnSlotIdx"), ("BTI-7000-MIB", "vcnPortIdx"), ("BTI-7000-MIB", "vcnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: vcnLockoutProtectionClear.setStatus('current')
vcnLockoutWorkingCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 15)).setObjects(("BTI-7000-MIB", "vcnTypeIdx"), ("BTI-7000-MIB", "vcnShelfIdx"), ("BTI-7000-MIB", "vcnSlotIdx"), ("BTI-7000-MIB", "vcnPortIdx"), ("BTI-7000-MIB", "vcnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: vcnLockoutWorkingCond.setStatus('current')
vcnLockoutWorkingClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 16)).setObjects(("BTI-7000-MIB", "vcnTypeIdx"), ("BTI-7000-MIB", "vcnShelfIdx"), ("BTI-7000-MIB", "vcnSlotIdx"), ("BTI-7000-MIB", "vcnPortIdx"), ("BTI-7000-MIB", "vcnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: vcnLockoutWorkingClear.setStatus('current')
vcnConcatMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 17)).setObjects(("BTI-7000-MIB", "vcnTypeIdx"), ("BTI-7000-MIB", "vcnShelfIdx"), ("BTI-7000-MIB", "vcnSlotIdx"), ("BTI-7000-MIB", "vcnPortIdx"), ("BTI-7000-MIB", "vcnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: vcnConcatMismatchCond.setStatus('current')
vcnConcatMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 15, 0, 18)).setObjects(("BTI-7000-MIB", "vcnTypeIdx"), ("BTI-7000-MIB", "vcnShelfIdx"), ("BTI-7000-MIB", "vcnSlotIdx"), ("BTI-7000-MIB", "vcnPortIdx"), ("BTI-7000-MIB", "vcnIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: vcnConcatMismatchClear.setStatus('current')
geLossOfSignalCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 1)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geLossOfSignalCond.setStatus('current')
geLossOfSignalClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 2)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geLossOfSignalClear.setStatus('current')
geXcvrMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 3)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geXcvrMismatchCond.setStatus('current')
geXcvrMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 4)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geXcvrMismatchClear.setStatus('current')
geOpticalPwrReceivedMinCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 5)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "geOpticalPwrReceived"), ("BTI-7000-MIB", "geOpticalPwrReceivedMinTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geOpticalPwrReceivedMinCond.setStatus('current')
geOpticalPwrReceivedMinClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 6)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geOpticalPwrReceivedMinClear.setStatus('current')
geOpticalPwrReceivedMaxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 7)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "geOpticalPwrReceived"), ("BTI-7000-MIB", "geOpticalPwrReceivedMaxTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geOpticalPwrReceivedMaxCond.setStatus('current')
geOpticalPwrReceivedMaxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 8)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geOpticalPwrReceivedMaxClear.setStatus('current')
geOpticalPwrTransmittedMinCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 9)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "geOpticalPwrTransmitted"), ("BTI-7000-MIB", "geOpticalPwrTransmittedMinTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geOpticalPwrTransmittedMinCond.setStatus('current')
geOpticalPwrTransmittedMinClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 10)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geOpticalPwrTransmittedMinClear.setStatus('current')
geOpticalPwrTransmittedMaxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 11)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "geOpticalPwrTransmitted"), ("BTI-7000-MIB", "geOpticalPwrTransmittedMaxTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geOpticalPwrTransmittedMaxCond.setStatus('current')
geOpticalPwrTransmittedMaxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 12)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geOpticalPwrTransmittedMaxClear.setStatus('current')
geLossOfSyncCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 13)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geLossOfSyncCond.setStatus('current')
geLossOfSyncClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 14)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geLossOfSyncClear.setStatus('current')
geRemotePathFailureCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 15)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geRemotePathFailureCond.setStatus('current')
geRemotePathFailureClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 16)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geRemotePathFailureClear.setStatus('current')
geLossOfMultiframeCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 17)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geLossOfMultiframeCond.setStatus('current')
geLossOfMultiframeClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 18)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geLossOfMultiframeClear.setStatus('current')
geLossOfSequenceCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 19)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geLossOfSequenceCond.setStatus('current')
geLossOfSequenceClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 20)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geLossOfSequenceClear.setStatus('current')
geLossOfAlignmentCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 21)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geLossOfAlignmentCond.setStatus('current')
geLossOfAlignmentClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 22)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geLossOfAlignmentClear.setStatus('current')
geLoopbackCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 23)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geLoopbackCond.setStatus('current')
geLoopbackClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 24)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geLoopbackClear.setStatus('current')
geBandwidthMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 25)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geBandwidthMismatchCond.setStatus('current')
geBandwidthMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 26)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: geBandwidthMismatchClear.setStatus('current')
gePayloadMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 27)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: gePayloadMismatchCond.setStatus('current')
gePayloadMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 16, 0, 28)).setObjects(("BTI-7000-MIB", "geShelfIdx"), ("BTI-7000-MIB", "geSlotIdx"), ("BTI-7000-MIB", "gePortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: gePayloadMismatchClear.setStatus('current')
fcLossOfSignalCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 1)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcLossOfSignalCond.setStatus('current')
fcLossOfSignalClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 2)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcLossOfSignalClear.setStatus('current')
fcXcvrMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 3)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcXcvrMismatchCond.setStatus('current')
fcXcvrMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 4)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcXcvrMismatchClear.setStatus('current')
fcOpticalPwrReceivedMinCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 5)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "fcOpticalPwrReceived"), ("BTI-7000-MIB", "fcOpticalPwrReceivedMinTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcOpticalPwrReceivedMinCond.setStatus('current')
fcOpticalPwrReceivedMinClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 6)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcOpticalPwrReceivedMinClear.setStatus('current')
fcOpticalPwrReceivedMaxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 7)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "fcOpticalPwrReceived"), ("BTI-7000-MIB", "fcOpticalPwrReceivedMaxTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcOpticalPwrReceivedMaxCond.setStatus('current')
fcOpticalPwrReceivedMaxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 8)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcOpticalPwrReceivedMaxClear.setStatus('current')
fcOpticalPwrTransmittedMinCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 9)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "fcOpticalPwrTransmitted"), ("BTI-7000-MIB", "fcOpticalPwrTransmittedMinTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcOpticalPwrTransmittedMinCond.setStatus('current')
fcOpticalPwrTransmittedMinClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 10)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcOpticalPwrTransmittedMinClear.setStatus('current')
fcOpticalPwrTransmittedMaxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 11)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "fcOpticalPwrTransmitted"), ("BTI-7000-MIB", "fcOpticalPwrTransmittedMaxTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcOpticalPwrTransmittedMaxCond.setStatus('current')
fcOpticalPwrTransmittedMaxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 12)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcOpticalPwrTransmittedMaxClear.setStatus('current')
fcLossOfSyncCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 13)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcLossOfSyncCond.setStatus('current')
fcLossOfSyncClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 14)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcLossOfSyncClear.setStatus('current')
fcRemotePathFailureCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 15)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcRemotePathFailureCond.setStatus('current')
fcRemotePathFailureClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 16)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcRemotePathFailureClear.setStatus('current')
fcLossOfMultiframeCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 17)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcLossOfMultiframeCond.setStatus('current')
fcLossOfMultiframeClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 18)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcLossOfMultiframeClear.setStatus('current')
fcLossOfSequenceCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 19)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcLossOfSequenceCond.setStatus('current')
fcLossOfSequenceClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 20)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcLossOfSequenceClear.setStatus('current')
fcLossOfAlignmentCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 21)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcLossOfAlignmentCond.setStatus('current')
fcLossOfAlignmentClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 22)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcLossOfAlignmentClear.setStatus('current')
fcLoopbackCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 23)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcLoopbackCond.setStatus('current')
fcLoopbackClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 24)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcLoopbackClear.setStatus('current')
fcBandwidthMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 25)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcBandwidthMismatchCond.setStatus('current')
fcBandwidthMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 26)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcBandwidthMismatchClear.setStatus('current')
fcPayloadMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 27)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcPayloadMismatchCond.setStatus('current')
fcPayloadMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 17, 0, 28)).setObjects(("BTI-7000-MIB", "fcShelfIdx"), ("BTI-7000-MIB", "fcSlotIdx"), ("BTI-7000-MIB", "fcPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: fcPayloadMismatchClear.setStatus('current')
tl1UserLockoutCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 10, 0, 1)).setObjects(("BTI-7000-MIB", "tl1UserIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: tl1UserLockoutCond.setStatus('current')
tl1UserLockoutClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 10, 0, 2)).setObjects(("BTI-7000-MIB", "tl1UserIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: tl1UserLockoutClear.setStatus('current')
tl1IpLockoutCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 10, 0, 3)).setObjects(("BTI-7000-MIB", "tl1IpLockoutAddr"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: tl1IpLockoutCond.setStatus('current')
tl1IpLockoutClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 10, 0, 4)).setObjects(("BTI-7000-MIB", "tl1IpLockoutAddr"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: tl1IpLockoutClear.setStatus('current')
olsSFPMissingCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 1)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsSFPMissingCond.setStatus('current')
olsSFPMissingClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 2)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsSFPMissingClear.setStatus('current')
olsSFPMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 3)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsSFPMismatchCond.setStatus('current')
olsSFPMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 4)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsSFPMismatchClear.setStatus('current')
olsInputLOSCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 5)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsInputLOSCond.setStatus('current')
olsInputLOSClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 6)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsInputLOSClear.setStatus('current')
olsOpticalPwrReceivedMinCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 7)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsOpticalPwrReceivedMinCond.setStatus('current')
olsOpticalPwrReceivedMinClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 8)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsOpticalPwrReceivedMinClear.setStatus('current')
olsOpticalPwrReceivedMaxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 9)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsOpticalPwrReceivedMaxCond.setStatus('current')
olsOpticalPwrReceivedMaxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 10)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsOpticalPwrReceivedMaxClear.setStatus('current')
olsOpticalPwrTransmittedMinCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 11)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsOpticalPwrTransmittedMinCond.setStatus('current')
olsOpticalPwrTransmittedMinClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 12)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsOpticalPwrTransmittedMinClear.setStatus('current')
olsOpticalPwrTransmittedMaxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 13)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsOpticalPwrTransmittedMaxCond.setStatus('current')
olsOpticalPwrTransmittedMaxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 14)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsOpticalPwrTransmittedMaxClear.setStatus('current')
olsTemperatureMaxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 15)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsTemperatureMaxCond.setStatus('current')
olsTemperatureMaxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 16)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsTemperatureMaxClear.setStatus('current')
olsLoopbackCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 17)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsLoopbackCond.setStatus('current')
olsLoopbackClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 18)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsLoopbackClear.setStatus('current')
olsLossOfSyncCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 19)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsLossOfSyncCond.setStatus('current')
olsLossOfSyncClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 20)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsLossOfSyncClear.setStatus('current')
olsLossOfFrameCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 21)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsLossOfFrameCond.setStatus('current')
olsLossOfFrameClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 22)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsLossOfFrameClear.setStatus('current')
olsAlarmIndicationSignalCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 23)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsAlarmIndicationSignalCond.setStatus('current')
olsAlarmIndicationSignalClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 24)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsAlarmIndicationSignalClear.setStatus('current')
olsBackwardDefectIndicatorCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 25)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsBackwardDefectIndicatorCond.setStatus('current')
olsBackwardDefectIndicatorClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 26)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsBackwardDefectIndicatorClear.setStatus('current')
olsSignalDegradeCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 27)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsSignalDegradeCond.setStatus('current')
olsSignalDegradeClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 28)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsSignalDegradeClear.setStatus('current')
olsOTNPayloadMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 29)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsOTNPayloadMismatchCond.setStatus('current')
olsOTNPayloadMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 30)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsOTNPayloadMismatchClear.setStatus('current')
olsOTUTrailTraceMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 31)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsOTUTrailTraceMismatchCond.setStatus('current')
olsOTUTrailTraceMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 32)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsOTUTrailTraceMismatchClear.setStatus('current')
olsRemoteFaultCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 33)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsRemoteFaultCond.setStatus('current')
olsRemoteFaultClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 34)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsRemoteFaultClear.setStatus('current')
olsLocalFaultCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 35)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsLocalFaultCond.setStatus('current')
olsLocalFaultClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 36)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsLocalFaultClear.setStatus('current')
olsWavelengthNotAchievableCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 37)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsWavelengthNotAchievableCond.setStatus('current')
olsWavelengthNotAchievableClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 20, 0, 38)).setObjects(("BTI-7000-MIB", "ethIntfShelfIdx"), ("BTI-7000-MIB", "ethIntfSlotIdx"), ("BTI-7000-MIB", "ethIntfPortTypeIdx"), ("BTI-7000-MIB", "ethIntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsWavelengthNotAchievableClear.setStatus('current')
olsLinkDownCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 21, 0, 1)).setObjects(("BTI-7000-MIB", "pvxL2IntfSwitchIdx"), ("BTI-7000-MIB", "pvxL2IntfShelfIdx"), ("BTI-7000-MIB", "pvxL2IntfSlotIdx"), ("BTI-7000-MIB", "pvxL2IntfPortTypeIdx"), ("BTI-7000-MIB", "pvxL2IntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsLinkDownCond.setStatus('current')
olsLinkDownClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 21, 0, 2)).setObjects(("BTI-7000-MIB", "pvxL2IntfSwitchIdx"), ("BTI-7000-MIB", "pvxL2IntfShelfIdx"), ("BTI-7000-MIB", "pvxL2IntfSlotIdx"), ("BTI-7000-MIB", "pvxL2IntfPortTypeIdx"), ("BTI-7000-MIB", "pvxL2IntfPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olsLinkDownClear.setStatus('current')
odunPayloadMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 24, 0, 1)).setObjects(("BTI-7000-MIB", "odunTypeIdx"), ("BTI-7000-MIB", "odunShelfIdx"), ("BTI-7000-MIB", "odunSlotIdx"), ("BTI-7000-MIB", "odunPortIdx"), ("BTI-7000-MIB", "odunIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: odunPayloadMismatchCond.setStatus('current')
odunPayloadMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 24, 0, 2)).setObjects(("BTI-7000-MIB", "odunTypeIdx"), ("BTI-7000-MIB", "odunShelfIdx"), ("BTI-7000-MIB", "odunSlotIdx"), ("BTI-7000-MIB", "odunPortIdx"), ("BTI-7000-MIB", "odunIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: odunPayloadMismatchClear.setStatus('current')
odunOpenConnectionIndicatorCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 24, 0, 3)).setObjects(("BTI-7000-MIB", "odunTypeIdx"), ("BTI-7000-MIB", "odunShelfIdx"), ("BTI-7000-MIB", "odunSlotIdx"), ("BTI-7000-MIB", "odunPortIdx"), ("BTI-7000-MIB", "odunIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: odunOpenConnectionIndicatorCond.setStatus('current')
odunOpenConnectionIndicatorClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 24, 0, 4)).setObjects(("BTI-7000-MIB", "odunTypeIdx"), ("BTI-7000-MIB", "odunShelfIdx"), ("BTI-7000-MIB", "odunSlotIdx"), ("BTI-7000-MIB", "odunPortIdx"), ("BTI-7000-MIB", "odunIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: odunOpenConnectionIndicatorClear.setStatus('current')
briLossOfSignalCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 1)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briLossOfSignalCond.setStatus('current')
briLossOfSignalClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 2)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briLossOfSignalClear.setStatus('current')
briXcvrMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 3)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briXcvrMismatchCond.setStatus('current')
briXcvrMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 4)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briXcvrMismatchClear.setStatus('current')
briOpticalPwrReceivedMinCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 5)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "briOpticalPwrReceived"), ("BTI-7000-MIB", "briOpticalPwrReceivedMinTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briOpticalPwrReceivedMinCond.setStatus('current')
briOpticalPwrReceivedMinClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 6)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briOpticalPwrReceivedMinClear.setStatus('current')
briOpticalPwrReceivedMaxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 7)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "briOpticalPwrReceived"), ("BTI-7000-MIB", "briOpticalPwrReceivedMaxTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briOpticalPwrReceivedMaxCond.setStatus('current')
briOpticalPwrReceivedMaxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 8)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briOpticalPwrReceivedMaxClear.setStatus('current')
briOpticalPwrTransmittedMinCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 9)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "briOpticalPwrTransmitted"), ("BTI-7000-MIB", "briOpticalPwrTransmittedMinTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briOpticalPwrTransmittedMinCond.setStatus('current')
briOpticalPwrTransmittedMinClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 10)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briOpticalPwrTransmittedMinClear.setStatus('current')
briOpticalPwrTransmittedMaxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 11)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "briOpticalPwrTransmitted"), ("BTI-7000-MIB", "briOpticalPwrTransmittedMaxTh"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briOpticalPwrTransmittedMaxCond.setStatus('current')
briOpticalPwrTransmittedMaxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 12)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briOpticalPwrTransmittedMaxClear.setStatus('current')
briLossOfMultiframeCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 13)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briLossOfMultiframeCond.setStatus('current')
briLossOfMultiframeClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 14)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briLossOfMultiframeClear.setStatus('current')
briLossOfSequenceCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 15)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briLossOfSequenceCond.setStatus('current')
briLossOfSequenceClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 16)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briLossOfSequenceClear.setStatus('current')
briLossOfAlignmentCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 17)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briLossOfAlignmentCond.setStatus('current')
briLossOfAlignmentClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 18)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briLossOfAlignmentClear.setStatus('current')
briLoopbackCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 19)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briLoopbackCond.setStatus('current')
briLoopbackClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 20)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briLoopbackClear.setStatus('current')
briBandwidthMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 21)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briBandwidthMismatchCond.setStatus('current')
briBandwidthMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 22)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briBandwidthMismatchClear.setStatus('current')
briLossOfLockCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 23)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briLossOfLockCond.setStatus('current')
briLossOfLockClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 24)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briLossOfLockClear.setStatus('current')
briTxLockingCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 25)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briTxLockingCond.setStatus('current')
briTxLockingClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 25, 0, 26)).setObjects(("BTI-7000-MIB", "briShelfIdx"), ("BTI-7000-MIB", "briSlotIdx"), ("BTI-7000-MIB", "briPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: briTxLockingClear.setStatus('current')
ntpAssocSrvrNotReachableCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 26, 0, 1)).setObjects(("BTI-7000-MIB", "ntpClientAssocIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ntpAssocSrvrNotReachableCond.setStatus('current')
ntpAssocSrvrNotReachableClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 26, 0, 2)).setObjects(("BTI-7000-MIB", "ntpClientAssocIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ntpAssocSrvrNotReachableClear.setStatus('current')
ntpAssocSrvrNotRespondingCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 26, 0, 3)).setObjects(("BTI-7000-MIB", "ntpClientAssocIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ntpAssocSrvrNotRespondingCond.setStatus('current')
ntpAssocSrvrNotRespondingClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 26, 0, 4)).setObjects(("BTI-7000-MIB", "ntpClientAssocIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ntpAssocSrvrNotRespondingClear.setStatus('current')
ntpAssocAuthenFailedCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 26, 0, 5)).setObjects(("BTI-7000-MIB", "ntpClientAssocIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ntpAssocAuthenFailedCond.setStatus('current')
ntpAssocAuthenFailedClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 26, 0, 6)).setObjects(("BTI-7000-MIB", "ntpClientAssocIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: ntpAssocAuthenFailedClear.setStatus('current')
ntpTimeAndDateUpdateEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 31, 0, 1)).setObjects(("BTI-7000-MIB", "ntpOldTimeAndDate"), ("BTI-7000-MIB", "ntpNewTimeAndDate"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: ntpTimeAndDateUpdateEvt.setStatus('current')
ntpTimingRefUpdateEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 31, 0, 2)).setObjects(("BTI-7000-MIB", "ntpRefIP"), ("BTI-7000-MIB", "ntpRefStratum"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: ntpTimingRefUpdateEvt.setStatus('current')
envAttrUnsupportedCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 1)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envAttrUnsupportedCond.setStatus('current')
envAttrUnsupportedClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 2)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envAttrUnsupportedClear.setStatus('current')
envAirComprCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 3)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envAirComprCond.setStatus('current')
envAirComprClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 4)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envAirComprClear.setStatus('current')
envAirCondCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 5)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envAirCondCond.setStatus('current')
envAirCondClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 6)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envAirCondClear.setStatus('current')
envAirDryrCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 7)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envAirDryrCond.setStatus('current')
envAirDryrClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 8)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envAirDryrClear.setStatus('current')
envBatDschrdCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 9)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envBatDschrdCond.setStatus('current')
envBatDschrdClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 10)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envBatDschrdClear.setStatus('current')
envBatteryCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 11)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envBatteryCond.setStatus('current')
envBatteryClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 12)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envBatteryClear.setStatus('current')
envClFanCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 13)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envClFanCond.setStatus('current')
envClFanClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 14)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envClFanClear.setStatus('current')
envCpMajorCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 15)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envCpMajorCond.setStatus('current')
envCpMajorClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 16)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envCpMajorClear.setStatus('current')
envCpMinorCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 17)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envCpMinorCond.setStatus('current')
envCpMinorClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 18)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envCpMinorClear.setStatus('current')
envDoorOpenCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 19)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envDoorOpenCond.setStatus('current')
envDoorOpenClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 20)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envDoorOpenClear.setStatus('current')
envEngineCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 21)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envEngineCond.setStatus('current')
envEngineClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 22)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envEngineClear.setStatus('current')
envEngOprgCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 23)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envEngOprgCond.setStatus('current')
envEngOprgClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 24)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envEngOprgClear.setStatus('current')
envExplGsCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 25)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envExplGsCond.setStatus('current')
envExplGsClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 26)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envExplGsClear.setStatus('current')
envFirDetrCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 27)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envFirDetrCond.setStatus('current')
envFirDetrClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 28)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envFirDetrClear.setStatus('current')
envFireCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 29)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envFireCond.setStatus('current')
envFireClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 30)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envFireClear.setStatus('current')
envFloodCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 31)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envFloodCond.setStatus('current')
envFloodClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 32)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envFloodClear.setStatus('current')
envFuseCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 33)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envFuseCond.setStatus('current')
envFuseClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 34)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envFuseClear.setStatus('current')
envGenCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 35)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envGenCond.setStatus('current')
envGenClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 36)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envGenClear.setStatus('current')
envGenericCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 37)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envGenericCond.setStatus('current')
envGenericClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 38)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envGenericClear.setStatus('current')
envHiAirCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 39)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envHiAirCond.setStatus('current')
envHiAirClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 40)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envHiAirClear.setStatus('current')
envHiHumCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 41)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envHiHumCond.setStatus('current')
envHiHumClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 42)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envHiHumClear.setStatus('current')
envHiTempCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 43)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envHiTempCond.setStatus('current')
envHiTempClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 44)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envHiTempClear.setStatus('current')
envHiWindCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 45)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envHiWindCond.setStatus('current')
envHiWindClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 46)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envHiWindClear.setStatus('current')
envHiWtrCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 47)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envHiWtrCond.setStatus('current')
envHiWtrClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 48)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envHiWtrClear.setStatus('current')
envIceBuildupCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 49)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envIceBuildupCond.setStatus('current')
envIceBuildupClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 50)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envIceBuildupClear.setStatus('current')
envIntruderCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 51)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envIntruderCond.setStatus('current')
envIntruderClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 52)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envIntruderClear.setStatus('current')
envLwBatvgCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 53)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envLwBatvgCond.setStatus('current')
envLwBatvgClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 54)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envLwBatvgClear.setStatus('current')
envLwFuelCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 55)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envLwFuelCond.setStatus('current')
envLwFuelClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 56)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envLwFuelClear.setStatus('current')
envLwHumCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 57)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envLwHumCond.setStatus('current')
envLwHumClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 58)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envLwHumClear.setStatus('current')
envLwPresCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 59)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envLwPresCond.setStatus('current')
envLwPresClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 60)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envLwPresClear.setStatus('current')
envLwTempCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 61)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envLwTempCond.setStatus('current')
envLwTempClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 62)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envLwTempClear.setStatus('current')
envLwWtrCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 63)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envLwWtrCond.setStatus('current')
envLwWtrClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 64)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envLwWtrClear.setStatus('current')
envMiscCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 65)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envMiscCond.setStatus('current')
envMiscClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 66)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envMiscClear.setStatus('current')
envOpenDrCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 67)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envOpenDrCond.setStatus('current')
envOpenDrClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 68)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envOpenDrClear.setStatus('current')
envPowerCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 69)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envPowerCond.setStatus('current')
envPowerClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 70)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envPowerClear.setStatus('current')
envPumpCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 71)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envPumpCond.setStatus('current')
envPumpClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 72)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envPumpClear.setStatus('current')
envRectCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 73)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envRectCond.setStatus('current')
envRectClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 74)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envRectClear.setStatus('current')
envRectHiCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 75)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envRectHiCond.setStatus('current')
envRectHiClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 76)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envRectHiClear.setStatus('current')
envRectLoCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 77)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envRectLoCond.setStatus('current')
envRectLoClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 78)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envRectLoClear.setStatus('current')
envSmokeCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 79)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envSmokeCond.setStatus('current')
envSmokeClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 80)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envSmokeClear.setStatus('current')
envToxicGasCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 81)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envToxicGasCond.setStatus('current')
envToxicGasClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 82)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envToxicGasClear.setStatus('current')
envVentnCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 83)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envVentnCond.setStatus('current')
envVentnClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 27, 0, 84)).setObjects(("BTI-7000-MIB", "envCondAttrHKIIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: envVentnClear.setStatus('current')
dbChangeEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 3, 0, 2)).setObjects(("BTI-7000-MIB", "dbChangeDateAndTime"), ("BTI-7000-MIB", "dbChangeSeqNum"), ("BTI-7000-MIB", "dbChangeOID"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: dbChangeEvt.setStatus('current')
dbChangeSecuEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 3, 0, 3)).setObjects(("BTI-7000-MIB", "dbChangeDateAndTime"), ("BTI-7000-MIB", "dbChangeSeqNum"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: dbChangeSecuEvt.setStatus('current')
pvxLldpRemTablesChangeEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 34, 0, 1)).setObjects(("BTI-7000-MIB", "pvxL2IntfSwitchIdx"))
if mibBuilder.loadTexts: pvxLldpRemTablesChangeEvt.setStatus('current')
mibBuilder.exportSymbols("BTI-7000-MIB", geCrntPMTPFCTXValue=geCrntPMTPFCTXValue, cpHistPMTempValidity=cpHistPMTempValidity, briHistPMOPTMaxValue=briHistPMOPTMaxValue, xcvrHistPMOSIZEValue=xcvrHistPMOSIZEValue, amdHistPMTable=amdHistPMTable, amdCustom2=amdCustom2, oaTable=oaTable, pvxL2IFHistPMSIZE256To511Validity=pvxL2IFHistPMSIZE256To511Validity, geCrntPMOPTMinInitialize=geCrntPMOPTMinInitialize, ethL1IFHistPMESTimeStamp=ethL1IFHistPMESTimeStamp, stmnCrntPMRSSESInitialize=stmnCrntPMRSSESInitialize, xcvrHistPMOPRAvgInitialize=xcvrHistPMOPRAvgInitialize, xcvrLpbkOpTable=xcvrLpbkOpTable, ethIntfVendorPN2=ethIntfVendorPN2, xcvrCrntPMRSOFSValue=xcvrCrntPMRSOFSValue, stmnHistPMOTUBBEInitialize=stmnHistPMOTUBBEInitialize, ethL1IFHistPMNBITCRValidity=ethL1IFHistPMNBITCRValidity, odunXCSrcSlotIdx=odunXCSrcSlotIdx, oaCrntPMLaser2PowerValidity=oaCrntPMLaser2PowerValidity, fcCrntPMCVValidity=fcCrntPMCVValidity, stsnForcedSwitchToWorkingClear=stsnForcedSwitchToWorkingClear, vcnCrntPMHPESTimeStamp=vcnCrntPMHPESTimeStamp, geCrntPMTFRCRXValue=geCrntPMTFRCRXValue, ospfLsdbTable=ospfLsdbTable, xcvrHistPMRSESValidity=xcvrHistPMRSESValidity, xcvrHistPMOPTAvgValue=xcvrHistPMOPTAvgValue, shelfInvExpansionShelfCommLinkDownCond=shelfInvExpansionShelfCommLinkDownCond, stmnCrntPMRSUASInitialize=stmnCrntPMRSUASInitialize, pvxL2IFCrntPMTPFCTXInitialize=pvxL2IFCrntPMTPFCTXInitialize, oaCaseTempMaxTh=oaCaseTempMaxTh, ethL1IFCrntPMOTUESValidity=ethL1IFCrntPMOTUESValidity, stsnSignalDegradeClear=stsnSignalDegradeClear, fcCrntPMSESInitialize=fcCrntPMSESInitialize, stmnCrntPMMSSESValidity=stmnCrntPMMSSESValidity, slotInvDataSlotTypeIdx=slotInvDataSlotTypeIdx, ethIntfLineMapping=ethIntfLineMapping, stsnXCTable=stsnXCTable, adminCondNotifications=adminCondNotifications, fcPMThresholdEntry=fcPMThresholdEntry, ocnHistPMESLValidity=ocnHistPMESLValidity, ethL1IFHistPMIntervalIdx=ethL1IFHistPMIntervalIdx, ethL1IFHistPMOTUUASInitialize=ethL1IFHistPMOTUUASInitialize, stmnPMThresholdOTUBBEValue=stmnPMThresholdOTUBBEValue, xcvrHistPMTFRCRXValue=xcvrHistPMTFRCRXValue, oaHistPMLaser2PowerValue=oaHistPMLaser2PowerValue, stmnHistPMMSSESValue=stmnHistPMMSSESValue, xcvrPMThresholdRSSESValue=xcvrPMThresholdRSSESValue, pluggableInvWavelengthSpacing=pluggableInvWavelengthSpacing, cpDegradeClear=cpDegradeClear, olsTemperatureMaxClear=olsTemperatureMaxClear, xcvrOpticalPwrTransmittedMaxCond=xcvrOpticalPwrTransmittedMaxCond, xcvrHistPMCVSInitialize=xcvrHistPMCVSInitialize, fcLossOfMultiframeCond=fcLossOfMultiframeCond, slotInvHTSThreshExceededClear=slotInvHTSThreshExceededClear, stmnCrntPMSupplyVoltage2Validity=stmnCrntPMSupplyVoltage2Validity, pvxL2IFHistPMTFRCTXValue=pvxL2IFHistPMTFRCTXValue, xcvrHistPMOTUBBEInitialize=xcvrHistPMOTUBBEInitialize, oaCrntPMLaser1TempValue=oaCrntPMLaser1TempValue, pluggableInvWavelengthMax=pluggableInvWavelengthMax, oaHistPMLaser1CurrentValue=oaHistPMLaser1CurrentValue, odunXCDestIdx=odunXCDestIdx, xcvrHistPMRSBBEValidity=xcvrHistPMRSBBEValidity, cpRestartOpTypeIdx=cpRestartOpTypeIdx, vcnProtSwOpShelfIdx=vcnProtSwOpShelfIdx, xcvrCrntPMRSESInitialize=xcvrCrntPMRSESInitialize, geHistPMSIZE256To511Validity=geHistPMSIZE256To511Validity, geHistPMOPTAvgTimeStamp=geHistPMOPTAvgTimeStamp, stmnHistPMRSEBTimeStamp=stmnHistPMRSEBTimeStamp, stmnCrntPMOPTAvgInitialize=stmnCrntPMOPTAvgInitialize, oaHistPMEffectiveGainValidity=oaHistPMEffectiveGainValidity, xcvrCrntPMOPRMaxInitialize=xcvrCrntPMOPRMaxInitialize, olsInputLOSClear=olsInputLOSClear, ocnCrntPMOTUSESValue=ocnCrntPMOTUSESValue, fcHistPMUASValue=fcHistPMUASValue, xcvrCrntPMJABRInitialize=xcvrCrntPMJABRInitialize, ospfIfMetricValue=ospfIfMetricValue, pvxL2IFHistPMOSIZEValidity=pvxL2IFHistPMOSIZEValidity, shelfInvPluginEvt=shelfInvPluginEvt, ocnHistPMOTUUASValidity=ocnHistPMOTUUASValidity, ethIntfActAutoEnableTimer=ethIntfActAutoEnableTimer, evtObjectType=evtObjectType, xcvrPMThresholdSESValue=xcvrPMThresholdSESValue, stmnHistPMRSUASValidity=stmnHistPMRSUASValidity, stmnOTNPayloadMismatchClear=stmnOTNPayloadMismatchClear, stmnPMThresholdOTUSESValue=stmnPMThresholdOTUSESValue, stmnCrntPMOPRAvgInitialize=stmnCrntPMOPRAvgInitialize, xcvrCrntPMSIZE128To255Value=xcvrCrntPMSIZE128To255Value, geCrntPMBCSTValidity=geCrntPMBCSTValidity, fcOpticalPwrReceivedMaxTh=fcOpticalPwrReceivedMaxTh, stmnHistPMOPRMinValue=stmnHistPMOPRMinValue, geCrntPMFCSEValue=geCrntPMFCSEValue, xcvrHistPMNBYTCR64BitValidity=xcvrHistPMNBYTCR64BitValidity, stmnCrntPMLBCTimeStamp=stmnCrntPMLBCTimeStamp, geCrntPMSIZE128To255Validity=geCrntPMSIZE128To255Validity, geHistPMTFRCRXValue=geHistPMTFRCRXValue, briLpbkOpTable=briLpbkOpTable, ocnHistPMOTNAVGBERValue=ocnHistPMOTNAVGBERValue, geCrntPMOPTMaxInitialize=geCrntPMOPTMaxInitialize, ocnActAutoEnableTimer=ocnActAutoEnableTimer, xcvrHistPMESInitialize=xcvrHistPMESInitialize, stmnHistPMTable=stmnHistPMTable, stmnCrntPMMSUASValue=stmnCrntPMMSUASValue, pvxL2IFHistPMSIZE1024To1518TimeStamp=pvxL2IFHistPMSIZE1024To1518TimeStamp, geCrntPMSIZE512To1023Initialize=geCrntPMSIZE512To1023Initialize, envMiscCond=envMiscCond, geHistPMTBYCRXValue=geHistPMTBYCRXValue, cpHistPMTable=cpHistPMTable, pvxL2IFHistPMMCSTTimeStamp=pvxL2IFHistPMMCSTTimeStamp, geWavelength=geWavelength, xcvrCrntPMIntervalTypeIdx=xcvrCrntPMIntervalTypeIdx, tl1IpLockoutAddr=tl1IpLockoutAddr, xcvrXCSrcShelfIdx=xcvrXCSrcShelfIdx, stsnXCProtNum=stsnXCProtNum, shelfInvUnknownCond=shelfInvUnknownCond, ocnHistPMSlotIdx=ocnHistPMSlotIdx, vcnXCEntry=vcnXCEntry, ethL1IFHistPMINVBLKInitialize=ethL1IFHistPMINVBLKInitialize, stmnCrntPMNBYTCRValue=stmnCrntPMNBYTCRValue, oaHistPMLaser1PowerValue=oaHistPMLaser1PowerValue, stmnCrntPMUNCRCDWTimeStamp=stmnCrntPMUNCRCDWTimeStamp, fcEntry=fcEntry, pvxL2IFHistPMTable=pvxL2IFHistPMTable, stmnProtGrpWorkShelfIdx=stmnProtGrpWorkShelfIdx, ethL1IFCrntPMLBCValidity=ethL1IFCrntPMLBCValidity, briOpticalPwrTransmittedMaxClear=briOpticalPwrTransmittedMaxClear, xcvrCrntPMESValidity=xcvrCrntPMESValidity, briBandwidthMismatchCond=briBandwidthMismatchCond, briLossOfSequenceCond=briLossOfSequenceCond, stmnCrntPMMSESValue=stmnCrntPMMSESValue, xcvrCrntPMOTUOFSInitialize=xcvrCrntPMOTUOFSInitialize, ocnPMThresholdOTUOFSValue=ocnPMThresholdOTUOFSValue, ethL1IFCrntPMOTUEBValidity=ethL1IFCrntPMOTUEBValidity, briCrntPMOPTAvgValidity=briCrntPMOPTAvgValidity, stmnProtSwOpShelfIdx=stmnProtSwOpShelfIdx, fcHistPMESValue=fcHistPMESValue, oaCrntPMOBRValue=oaCrntPMOBRValue, geCrntPMOPTMinTimeStamp=geCrntPMOPTMinTimeStamp, briCrntPMOPRMaxTimeStamp=briCrntPMOPRMaxTimeStamp, geHistPMSIZE256To511TimeStamp=geHistPMSIZE256To511TimeStamp, fePortIdx=fePortIdx, briOpticalPwrReceived=briOpticalPwrReceived, stsnCrntPMCVPInitialize=stsnCrntPMCVPInitialize, ethL1IFCrntPMOPRMaxInitialize=ethL1IFCrntPMOPRMaxInitialize, ethL1IFHistPMOTUSESValue=ethL1IFHistPMOTUSESValue, stmnLpbkOpEntry=stmnLpbkOpEntry, ocnHistPMNBITCR64BitValidity=ocnHistPMNBITCR64BitValidity, envSmokeCond=envSmokeCond, snmpTrapRcvNotifType=snmpTrapRcvNotifType, pvxL2IntfTable=pvxL2IntfTable, ethL1IFCrntPMCVTimeStamp=ethL1IFCrntPMCVTimeStamp, vcnXCProtTypeNum=vcnXCProtTypeNum, geOpticalPwrReceivedMaxClear=geOpticalPwrReceivedMaxClear, olsRemoteFaultClear=olsRemoteFaultClear, ntpTimingRefUpdateEvt=ntpTimingRefUpdateEvt, xcvrHistPMRSUASInitialize=xcvrHistPMRSUASInitialize, stmnCrntPMShelfIdx=stmnCrntPMShelfIdx, pvxL2IFHistPMSIZE256To511Value=pvxL2IFHistPMSIZE256To511Value, stmnCrntPMUNCRCDWValue=stmnCrntPMUNCRCDWValue, fcHistPMOPTMaxValue=fcHistPMOPTMaxValue, geCrntPMJABRInitialize=geCrntPMJABRInitialize, swUpgradePath=swUpgradePath, envClFanCond=envClFanCond, gePMThresholdFRDRValue=gePMThresholdFRDRValue, stmnCrntPMOTUUASInitialize=stmnCrntPMOTUUASInitialize, oaBackReflectionSafetyClear=oaBackReflectionSafetyClear, xcvrCrntPMSupplyVoltage2TimeStamp=xcvrCrntPMSupplyVoltage2TimeStamp, xcvrCrntPMBCSTInitialize=xcvrCrntPMBCSTInitialize, xcvrFPSD=xcvrFPSD, ocnHistPMLBCValue=ocnHistPMLBCValue, ocnOpticalPwrReceived=ocnOpticalPwrReceived, vcnProtSwOpCmd=vcnProtSwOpCmd, xcvrPMThresholdOTUESValue=xcvrPMThresholdOTUESValue, vcnXCProtNum=vcnXCProtNum, cpTable=cpTable, cpSynchronizationShelfIdx=cpSynchronizationShelfIdx, geHistPMSIZE1024To1518Validity=geHistPMSIZE1024To1518Validity, pvxL2IFCrntPMMCSTTimeStamp=pvxL2IFCrntPMMCSTTimeStamp, ocnHistPMUASSValue=ocnHistPMUASSValue, shelfInvCommCond=shelfInvCommCond, vcnXCProtShelfNum=vcnXCProtShelfNum, slotInvPackShortName=slotInvPackShortName, actCondEntry=actCondEntry, amdHistPMEntry=amdHistPMEntry, xcvrHistPMShelfIdx=xcvrHistPMShelfIdx, ocnXcvrMismatchClear=ocnXcvrMismatchClear, amdCrntPMLitChnValue=amdCrntPMLitChnValue, vcnPMThresholdByPortHPEBValue=vcnPMThresholdByPortHPEBValue, xcvrHistPMRSBBEValue=xcvrHistPMRSBBEValue, pvxL2IFHistPMSIZE512To1023Initialize=pvxL2IFHistPMSIZE512To1023Initialize, ocnProtGrpRowStatus=ocnProtGrpRowStatus, vcnHistPMHPESValidity=vcnHistPMHPESValidity, stmnVendorPN2=stmnVendorPN2, oscMediaRate=oscMediaRate, fcPayloadMismatchClear=fcPayloadMismatchClear, envAirCondCond=envAirCondCond, olsLoopbackCond=olsLoopbackCond, pvxL2IFPMThresholdFRGTValue=pvxL2IFPMThresholdFRGTValue, ethL1IFHistPMOTNBERValidity=ethL1IFHistPMOTNBERValidity, stmnHistPMOPRAvgValidity=stmnHistPMOPRAvgValidity, passivePortCustom3=passivePortCustom3, ocnVendorPN2=ocnVendorPN2, xcvrHistPMTBYCRXValue=xcvrHistPMTBYCRXValue, amdHistPMOPRValue=amdHistPMOPRValue, briCrntPMOPRValidity=briCrntPMOPRValidity, snmpTrapRcvCommunity=snmpTrapRcvCommunity, oaHistPMFSOOPTTimeStamp=oaHistPMFSOOPTTimeStamp, amdCrntPMTypeIdx=amdCrntPMTypeIdx, olsLossOfFrameClear=olsLossOfFrameClear, passivePortFiberType=passivePortFiberType, vcnCrntPMHPESValue=vcnCrntPMHPESValue, shelfInvSysCommClear=shelfInvSysCommClear, ethL1IFHistPMOPRAvgValidity=ethL1IFHistPMOPRAvgValidity, briCrntPMTable=briCrntPMTable, fcHistPMOPRValue=fcHistPMOPRValue, xcvrHistPMUNCRCDWValidity=xcvrHistPMUNCRCDWValidity, ocnHistPMUASSTimeStamp=ocnHistPMUASSTimeStamp, ocnHistPMOPRValue=ocnHistPMOPRValue, ospfLsdbAreaId=ospfLsdbAreaId, ocnCrntPMOPRAvgValue=ocnCrntPMOPRAvgValue, xcvrHistPMSESValue=xcvrHistPMSESValue, pvxL2IFCrntPMTPFCRXInitialize=pvxL2IFCrntPMTPFCRXInitialize, xcvrLockoutWorkingClear=xcvrLockoutWorkingClear, shelfInvExpansionShelfIdMismatchCond=shelfInvExpansionShelfIdMismatchCond, netMgmtTable=netMgmtTable, pvxL2IFHistPMSIZE64Validity=pvxL2IFHistPMSIZE64Validity, envBatDschrdClear=envBatDschrdClear, vcnCondNotifications=vcnCondNotifications, pvxL2IFHistPMUSIZEInitialize=pvxL2IFHistPMUSIZEInitialize, xcvrHistPMOPRTimeStamp=xcvrHistPMOPRTimeStamp, xcvrHistPMTBYCRXInitialize=xcvrHistPMTBYCRXInitialize, stsnPMThresholdByPortTypeIdx=stsnPMThresholdByPortTypeIdx, stmnHistPMRSEBInitialize=stmnHistPMRSEBInitialize, stsnHistPMSESPValidity=stsnHistPMSESPValidity, pvxL2IFHistPMTFRCRXTimeStamp=pvxL2IFHistPMTFRCRXTimeStamp, actCondServiceAffecting=actCondServiceAffecting, stsnXCDestPortIdx=stsnXCDestPortIdx, pvxL2IFCrntPMTFRCRXValidity=pvxL2IFCrntPMTFRCRXValidity, amdEvtNotifications=amdEvtNotifications, xcvrCrntPMOPRMaxValidity=xcvrCrntPMOPRMaxValidity, slotInvDspCommCond=slotInvDspCommCond, xcvrProtGrpEntry=xcvrProtGrpEntry, netMgmtAdminStatus=netMgmtAdminStatus, vcnCrntPMSlotIdx=vcnCrntPMSlotIdx, geAdminStatus=geAdminStatus, oaCustom2=oaCustom2, xcvrCrntPMUNCRCDWInitialize=xcvrCrntPMUNCRCDWInitialize, geCrntPMFCSETimeStamp=geCrntPMFCSETimeStamp, netMgmtMACAddr=netMgmtMACAddr, ocnHistPMOTUSESValidity=ocnHistPMOTUSESValidity, envGenClear=envGenClear, pvxL2IFHistPMTPFCRXValidity=pvxL2IFHistPMTPFCRXValidity, oaTiltCompSetting=oaTiltCompSetting, xcvrCrntPMOTNAVGBERValidity=xcvrCrntPMOTNAVGBERValidity, ospfLsdbLsid=ospfLsdbLsid)
mibBuilder.exportSymbols("BTI-7000-MIB", gePMThresholdShelfIdx=gePMThresholdShelfIdx, oaHistPMOPTValue=oaHistPMOPTValue, geCrntPMOPTValidity=geCrntPMOPTValidity, xcvrHistPMNBYTCRInitialize=xcvrHistPMNBYTCRInitialize, fcHistPMOPTValue=fcHistPMOPTValue, ethL1IFHistPMOTNBERTimeStamp=ethL1IFHistPMOTNBERTimeStamp, ocnHistPMOPTMaxValidity=ocnHistPMOPTMaxValidity, amdCrntPMOPRTimeStamp=amdCrntPMOPRTimeStamp, ocnCrntPMOTNAVGBERTimeStamp=ocnCrntPMOTNAVGBERTimeStamp, pvxL2IFHistPMSIZE64TimeStamp=pvxL2IFHistPMSIZE64TimeStamp, slotInvTempHighTh=slotInvTempHighTh, briCrntPMOPTValue=briCrntPMOPTValue, swUpgradeActiveRelNum=swUpgradeActiveRelNum, stmnCrntPMOTNAVGBERValue=stmnCrntPMOTNAVGBERValue, ospfRouteRedist=ospfRouteRedist, pluggableInvCommCond=pluggableInvCommCond, dataCommsPingShelfIdx=dataCommsPingShelfIdx, geCrntPMSIZE256To511TimeStamp=geCrntPMSIZE256To511TimeStamp, oaEntry=oaEntry, xcvrOTNPayloadMismatchCond=xcvrOTNPayloadMismatchCond, envVentnCond=envVentnCond, stsnPMThresholdByPortEntry=stsnPMThresholdByPortEntry, geCrntPMSESValue=geCrntPMSESValue, stmnHistPMOPTMaxInitialize=stmnHistPMOPTMaxInitialize, briHistPMOPRMaxInitialize=briHistPMOPRMaxInitialize, xcvrHistPMRSBBETimeStamp=xcvrHistPMRSBBETimeStamp, pvxL2IFHistPMIntervalIdx=pvxL2IFHistPMIntervalIdx, fcHistPMOPTMaxTimeStamp=fcHistPMOPTMaxTimeStamp, cpMismatchClear=cpMismatchClear, actCondObjectType=actCondObjectType, odunXCRowStatus=odunXCRowStatus, stsnHistPMESPValue=stsnHistPMESPValue, vcnCrntPMHPBBEValidity=vcnCrntPMHPBBEValidity, serialDataBits=serialDataBits, xcvrCrntPMOSIZETimeStamp=xcvrCrntPMOSIZETimeStamp, envLwTempCond=envLwTempCond, ethL1IFCrntPMSESInitialize=ethL1IFCrntPMSESInitialize, xcvrCrntPMESTimeStamp=xcvrCrntPMESTimeStamp, ocnHistPMESSTimeStamp=ocnHistPMESSTimeStamp, ocnHistPMOTNAVGBERInitialize=ocnHistPMOTNAVGBERInitialize, xcvrEntry=xcvrEntry, amdCrntPMVOAValidity=amdCrntPMVOAValidity, geHistPMFRGTInitialize=geHistPMFRGTInitialize, ipExtIntfSubnetMask=ipExtIntfSubnetMask, ocnOpticalPwrTransmittedMinClear=ocnOpticalPwrTransmittedMinClear, cpDbApplyResultEvt=cpDbApplyResultEvt, briLoopbackClear=briLoopbackClear, pvxL2IFHistPMTFRCTXValidity=pvxL2IFHistPMTFRCTXValidity, oaGainSetting=oaGainSetting, xcvrHistPMNBITCR64BitInitialize=xcvrHistPMNBITCR64BitInitialize, ocnCrntPMOTNAVGBERValue=ocnCrntPMOTNAVGBERValue, xcvrLFCond=xcvrLFCond, slotInvCoolingUnitFailCond=slotInvCoolingUnitFailCond, ipExtIntfMode=ipExtIntfMode, shelfInvIdx=shelfInvIdx, xcvrPMThresholdUNCRCDWValue=xcvrPMThresholdUNCRCDWValue, geCrntPMSIZE128To255Value=geCrntPMSIZE128To255Value, xcvrHistPMJABRTimeStamp=xcvrHistPMJABRTimeStamp, stsnXCSrcIdx=stsnXCSrcIdx, oaCaseTemp=oaCaseTemp, geHistPMCVInitialize=geHistPMCVInitialize, vcgXCProtShelfNum=vcgXCProtShelfNum, stmnHistPMLBCValidity=stmnHistPMLBCValidity, connections=connections, xcvrFiberType=xcvrFiberType, xcvrLockoutProtectionCond=xcvrLockoutProtectionCond, stsnPMThresholdByPortUASPValue=stsnPMThresholdByPortUASPValue, stsnCrntPMCVPValue=stsnCrntPMCVPValue, oaNumChannels=oaNumChannels, pluggableInvRestartOpSlotIdx=pluggableInvRestartOpSlotIdx, ethL1IFCrntPMOTUEBInitialize=ethL1IFCrntPMOTUEBInitialize, stmnHistPMOTUESTimeStamp=stmnHistPMOTUESTimeStamp, oaCrntPMSSIOPRTimeStamp=oaCrntPMSSIOPRTimeStamp, stmnHistPMRSOFSValue=stmnHistPMRSOFSValue, pvxL2IntfRateLimit=pvxL2IntfRateLimit, envLwTempClear=envLwTempClear, xcvrCrntPMJABRValue=xcvrCrntPMJABRValue, xcvrId2=xcvrId2, xcvrCrntPMSEFSSValidity=xcvrCrntPMSEFSSValidity, xcvrCrntPMOPRValidity=xcvrCrntPMOPRValidity, vcnPMThresholdByPortIntervalTypeIdx=vcnPMThresholdByPortIntervalTypeIdx, odunOpenConnectionIndicatorCond=odunOpenConnectionIndicatorCond, ethIntfSlotIdx=ethIntfSlotIdx, slotInvEvtNotifications=slotInvEvtNotifications, shelfConfigurationMismatchClear=shelfConfigurationMismatchClear, xcvrCrntPMSEFSSInitialize=xcvrCrntPMSEFSSInitialize, stmnCrntPMNBYTCR64BitValue=stmnCrntPMNBYTCR64BitValue, shelfCustom1=shelfCustom1, geOperStatus=geOperStatus, fcPMThresholdSESValue=fcPMThresholdSESValue, actAlarmCodeType=actAlarmCodeType, cpRestartOpCmd=cpRestartOpCmd, gcc0ConfigRowStatus=gcc0ConfigRowStatus, stmnCrntPMNBITCRValue=stmnCrntPMNBITCRValue, oaCaseTempShutdownClear=oaCaseTempShutdownClear, fcHistPMSupplyVoltageValidity=fcHistPMSupplyVoltageValidity, cpCrntPMIntervalTypeIdx=cpCrntPMIntervalTypeIdx, vcnEntry=vcnEntry, ethIntfOpticalPwrReceivedMinTh=ethIntfOpticalPwrReceivedMinTh, geHistPMSIZE1024To1518Value=geHistPMSIZE1024To1518Value, oaShelfIdx=oaShelfIdx, swUpgradeCmd=swUpgradeCmd, ethL1IFCrntPMOPTMaxTimeStamp=ethL1IFCrntPMOPTMaxTimeStamp, stmnCrntPMRSBBETimeStamp=stmnCrntPMRSBBETimeStamp, gcc0ConfigOperStatQlfr=gcc0ConfigOperStatQlfr, xcvrActAutoEnableTimer=xcvrActAutoEnableTimer, odunXCEntry=odunXCEntry, xcvrProtGrpTable=xcvrProtGrpTable, amdRowStatus=amdRowStatus, oaHistPMShelfIdx=oaHistPMShelfIdx, ethL1IFCrntPMESValue=ethL1IFCrntPMESValue, oaBackReflectionHighThresholdClear=oaBackReflectionHighThresholdClear, geHistPMMCSTInitialize=geHistPMMCSTInitialize, fcCrntPMIntervalTypeIdx=fcCrntPMIntervalTypeIdx, ocnHistPMCVSTimeStamp=ocnHistPMCVSTimeStamp, fcHistPMOPTMinInitialize=fcHistPMOPTMinInitialize, ocnHistPMOPRAvgValue=ocnHistPMOPRAvgValue, fcHistPMOPRAvgInitialize=fcHistPMOPRAvgInitialize, xcvrHistPMMCSTValue=xcvrHistPMMCSTValue, vcnLockoutWorkingClear=vcnLockoutWorkingClear, xcvrXCDestSlotIdx=xcvrXCDestSlotIdx, fcCrntPMCVValue=fcCrntPMCVValue, briCrntPMOPTTimeStamp=briCrntPMOPTTimeStamp, amdOperations=amdOperations, xcvrCrntPMRSBBEValidity=xcvrCrntPMRSBBEValidity, ethL1IFCrntPMOTNBERTimeStamp=ethL1IFCrntPMOTNBERTimeStamp, shelfEntry=shelfEntry, stmnCrntPMOPTMaxValidity=stmnCrntPMOPTMaxValidity, xcvrHistPMOPRAvgValidity=xcvrHistPMOPRAvgValidity, evtDateAndTime=evtDateAndTime, ethL1IFHistPMSupplyVoltageTimeStamp=ethL1IFHistPMSupplyVoltageTimeStamp, xcvrProtGrpWorkSlotIdx=xcvrProtGrpWorkSlotIdx, ethIntfLldpRemChassisId=ethIntfLldpRemChassisId, geHistPMTable=geHistPMTable, ethIntfPortIdx=ethIntfPortIdx, fcHistPMLBCTimeStamp=fcHistPMLBCTimeStamp, odunXCTable=odunXCTable, oaCrntPMLaser1CurrentValidity=oaCrntPMLaser1CurrentValidity, xcvrHistPMOTUSESInitialize=xcvrHistPMOTUSESInitialize, ethL1IFCrntPMNBITCRValidity=ethL1IFCrntPMNBITCRValidity, oaHistPMOPTTimeStamp=oaHistPMOPTTimeStamp, stmnHistPMMSUASValidity=stmnHistPMMSUASValidity, xcvrCrntPMSESTimeStamp=xcvrCrntPMSESTimeStamp, stmnCrntPMOPRAvgTimeStamp=stmnCrntPMOPRAvgTimeStamp, geCrntPMTPFCRXValidity=geCrntPMTPFCRXValidity, ocnHistPMNBYTCRTimeStamp=ocnHistPMNBYTCRTimeStamp, ethL1IFCrntPMLBCTimeStamp=ethL1IFCrntPMLBCTimeStamp, oaCrntPMLaser2TempValue=oaCrntPMLaser2TempValue, SwUpgradeCmd=SwUpgradeCmd, geOpticalPwrReceivedMaxTh=geOpticalPwrReceivedMaxTh, xcvrCrntPMOTNBERValidity=xcvrCrntPMOTNBERValidity, tl1UserIdx=tl1UserIdx, oaCrntPMEffectiveGainValue=oaCrntPMEffectiveGainValue, xcvrCrntPMSIZE1024To1518Initialize=xcvrCrntPMSIZE1024To1518Initialize, ocnCrntPMOPTMaxValidity=ocnCrntPMOPTMaxValidity, fcCrntPMSupplyVoltageValidity=fcCrntPMSupplyVoltageValidity, shelfTable=shelfTable, ethIntfRemoteId=ethIntfRemoteId, vcnCrntPMShelfIdx=vcnCrntPMShelfIdx, geEvtNotifications=geEvtNotifications, ethL1IFCrntPMNBYTCRTimeStamp=ethL1IFCrntPMNBYTCRTimeStamp, shelfProvConfig=shelfProvConfig, briCrntPMOPTMinValue=briCrntPMOPTMinValue, ethL1IFCrntPMOTUOFSValidity=ethL1IFCrntPMOTUOFSValidity, netMgmtUnmbrd=netMgmtUnmbrd, actCondSeverity=actCondSeverity, envMiscClear=envMiscClear, geOpticalPwrTransmitted=geOpticalPwrTransmitted, netMgmtType=netMgmtType, xcvrLpbkOpIdx=xcvrLpbkOpIdx, ethL1IFHistPMOPTMaxValidity=ethL1IFHistPMOPTMaxValidity, briEvtNotifications=briEvtNotifications, ocnCrntPMOTUOFSValidity=ocnCrntPMOTUOFSValidity, xcvrProtSwOpTypeIdx=xcvrProtSwOpTypeIdx, shelfPowerFeedB=shelfPowerFeedB, ethL1IFHistPMTempValue=ethL1IFHistPMTempValue, ntpClientAssocEntry=ntpClientAssocEntry, geCrntPMUASTimeStamp=geCrntPMUASTimeStamp, geHistPMOPRMaxInitialize=geHistPMOPRMaxInitialize, inventory=inventory, stsnCrntPMTypeIdx=stsnCrntPMTypeIdx, slotInvPwrFeedAFuseFailClear=slotInvPwrFeedAFuseFailClear, gcc0ConfigPortIdx=gcc0ConfigPortIdx, geCrntPMBCSTInitialize=geCrntPMBCSTInitialize, xcvrHistPMESSInitialize=xcvrHistPMESSInitialize, geCrntPMTFRCRXInitialize=geCrntPMTFRCRXInitialize, ethL1IFCrntPMSESValidity=ethL1IFCrntPMSESValidity, fcPMThresholdTable=fcPMThresholdTable, conditionNotifications=conditionNotifications, geHistPMSIZE128To255Value=geHistPMSIZE128To255Value, shelfInvPwrFeedAFailClear=shelfInvPwrFeedAFailClear, oaCrntPMEntry=oaCrntPMEntry, geFPSD=geFPSD, stmnXcvrMismatchClear=stmnXcvrMismatchClear, fcCrntPMOPTMaxValue=fcCrntPMOPTMaxValue, xcvrHistPMESValue=xcvrHistPMESValue, ethL1IFCrntPMLBCValue=ethL1IFCrntPMLBCValue, geBandwidthMismatchCond=geBandwidthMismatchCond, vcnHistPMHPUASValue=vcnHistPMHPUASValue, briCrntPMOPTAvgTimeStamp=briCrntPMOPTAvgTimeStamp, stmnPMThresholdMSUASValue=stmnPMThresholdMSUASValue, xcvrHistPMOPRMinValidity=xcvrHistPMOPRMinValidity, xcvrHistPMOPTAvgInitialize=xcvrHistPMOPTAvgInitialize, ethL1IFHistPMOTNBERValue=ethL1IFHistPMOTNBERValue, ocnCrntPMTempValue=ocnCrntPMTempValue, stmnCrntPMRSBBEValue=stmnCrntPMRSBBEValue, pvxL2IFCrntPMFRGTValue=pvxL2IFCrntPMFRGTValue, pvxL2IFHistPMTFRCRXValidity=pvxL2IFHistPMTFRCRXValidity, vcnXCRowStatus=vcnXCRowStatus, xcvrTempMaxCond=xcvrTempMaxCond, xcvrProtSwOpIdx=xcvrProtSwOpIdx, stmnAdminStatus=stmnAdminStatus, stmnCrntPMOTUOFSTimeStamp=stmnCrntPMOTUOFSTimeStamp, xcvrCondNotifications=xcvrCondNotifications, ethL1IFHistPMUNCRCDWTimeStamp=ethL1IFHistPMUNCRCDWTimeStamp, ocnForcedSwitchToWorkingClear=ocnForcedSwitchToWorkingClear, pluggableInvShelfIdx=pluggableInvShelfIdx, ocnHistPMOPTTimeStamp=ocnHistPMOPTTimeStamp, tl1LogDateAndTime=tl1LogDateAndTime, pvxL2IFCrntPMFCSEValue=pvxL2IFCrntPMFCSEValue, performance=performance, pvxL2IFHistPMSIZE65To127Value=pvxL2IFHistPMSIZE65To127Value, oscDuplex=oscDuplex, stmnLossOfPrimaryTimingReferenceCond=stmnLossOfPrimaryTimingReferenceCond, oaHistPMLaser1PowerTimeStamp=oaHistPMLaser1PowerTimeStamp, xcvrAutoEnableTimer=xcvrAutoEnableTimer, oaHistPMTable=oaHistPMTable, stsnCrntPMTable=stsnCrntPMTable, geHistPMSIZE512To1023TimeStamp=geHistPMSIZE512To1023TimeStamp, ethL1IFHistPMPortTypeIdx=ethL1IFHistPMPortTypeIdx, ethL1IFPMThresholdESValue=ethL1IFPMThresholdESValue, fcHistPMUASTimeStamp=fcHistPMUASTimeStamp, xcvrProtSwOpCmd=xcvrProtSwOpCmd, dataCommsPingNumAttempts=dataCommsPingNumAttempts, xcvrCrntPMBCSTValidity=xcvrCrntPMBCSTValidity, neOperations=neOperations, xcvrHistPMSIZE512To1023Value=xcvrHistPMSIZE512To1023Value, geCrntPMJABRValue=geCrntPMJABRValue, amdLossOfSignalCond=amdLossOfSignalCond, gePMThresholdEntry=gePMThresholdEntry, xcvrLossOfLockCond=xcvrLossOfLockCond, geCrntPMOPRMinValue=geCrntPMOPRMinValue, xcvrPMThresholdRSEBValue=xcvrPMThresholdRSEBValue, geHistPMTFRCTXValue=geHistPMTFRCTXValue, fcCrntPMTable=fcCrntPMTable, vcnProtSwOpSlotIdx=vcnProtSwOpSlotIdx, oaHistPMOPRTimeStamp=oaHistPMOPRTimeStamp, pvxL2IFCrntPMUSIZEValue=pvxL2IFCrntPMUSIZEValue, fcHistPMCVTimeStamp=fcHistPMCVTimeStamp, ocnHistPMOTUSESValue=ocnHistPMOTUSESValue, xcvrXCType=xcvrXCType, notifObjects=notifObjects, pvxL2IFCrntPMUSIZEInitialize=pvxL2IFCrntPMUSIZEInitialize, briCrntPMSlotIdx=briCrntPMSlotIdx)
mibBuilder.exportSymbols("BTI-7000-MIB", stsnHistPMCVPValue=stsnHistPMCVPValue, fcHistPMLBCValidity=fcHistPMLBCValidity, ocnHistPMSupplyVoltageTimeStamp=ocnHistPMSupplyVoltageTimeStamp, shelfMismatchClear=shelfMismatchClear, vcnHistPMHPSESTimeStamp=vcnHistPMHPSESTimeStamp, geCrntPMTPFCRXTimeStamp=geCrntPMTPFCRXTimeStamp, xcvrHistPMSupplyVoltage2Validity=xcvrHistPMSupplyVoltage2Validity, geHistPMUASTimeStamp=geHistPMUASTimeStamp, pvxL2IFHistPMOSIZETimeStamp=pvxL2IFHistPMOSIZETimeStamp, actCondSummary=actCondSummary, xcvrHistPMSIZE256To511Initialize=xcvrHistPMSIZE256To511Initialize, pvxL2IntfPortIdx=pvxL2IntfPortIdx, xcvrHistPMTBYCRXTimeStamp=xcvrHistPMTBYCRXTimeStamp, xcvrCrntPMSIZE64TimeStamp=xcvrCrntPMSIZE64TimeStamp, oaStatus=oaStatus, actAlarmTable=actAlarmTable, geCrntPMFRDRTimeStamp=geCrntPMFRDRTimeStamp, fcHistPMCVValue=fcHistPMCVValue, stsnCrntPMUASPValue=stsnCrntPMUASPValue, stsnLockoutProtectionClear=stsnLockoutProtectionClear, geOpticalPwrTransmittedMaxCond=geOpticalPwrTransmittedMaxCond, pvxL2IFPMThresholdIntervalTypeIdx=pvxL2IFPMThresholdIntervalTypeIdx, briHistPMOPTValidity=briHistPMOPTValidity, xcvrCrntPMRSUASInitialize=xcvrCrntPMRSUASInitialize, ocnOpticalPwrTransmittedMaxTh=ocnOpticalPwrTransmittedMaxTh, stmnOperations=stmnOperations, stmnCrntPMOTUEBValidity=stmnCrntPMOTUEBValidity, stmnCrntPMOTUOFSValue=stmnCrntPMOTUOFSValue, ospfLsdbChecksum=ospfLsdbChecksum, ocnCrntPMOTUUASInitialize=ocnCrntPMOTUUASInitialize, xcvrCrntPMSupplyVoltage2Validity=xcvrCrntPMSupplyVoltage2Validity, stmnCrntPMOPRAvgValidity=stmnCrntPMOPRAvgValidity, geHistPMOPTMinTimeStamp=geHistPMOPTMinTimeStamp, ethL1IFHistPMOTUOFSInitialize=ethL1IFHistPMOTUOFSInitialize, briLpbkOpSlotIdx=briLpbkOpSlotIdx, condNotifObjId=condNotifObjId, olsOpticalPwrReceivedMaxCond=olsOpticalPwrReceivedMaxCond, fcSlotIdx=fcSlotIdx, ethL1IFHistPMOPRMaxValue=ethL1IFHistPMOPRMaxValue, oaHistPMSSIOPRValue=oaHistPMSSIOPRValue, dbBackupAndRestoreFtpUser=dbBackupAndRestoreFtpUser, amdOpticalAttentuation=amdOpticalAttentuation, cpSynchronizationPrimRefProtStatus=cpSynchronizationPrimRefProtStatus, xcvrCrntPMCVSValue=xcvrCrntPMCVSValue, xcvrHistPMSESInitialize=xcvrHistPMSESInitialize, geCrntPMFRGTValue=geCrntPMFRGTValue, pvxL2IFCrntPMSIZE64Value=pvxL2IFCrntPMSIZE64Value, xcvrOpticalPwrReceivedMinTh=xcvrOpticalPwrReceivedMinTh, dbChangeDateAndTime=dbChangeDateAndTime, xcvrHistPMOSIZEInitialize=xcvrHistPMOSIZEInitialize, xcvrPMThresholdSEFSSValue=xcvrPMThresholdSEFSSValue, xcvrCrntPMOPRAvgInitialize=xcvrCrntPMOPRAvgInitialize, xcvrHistPMIntervalTypeIdx=xcvrHistPMIntervalTypeIdx, ocnCrntPMOPRValidity=ocnCrntPMOPRValidity, shelfInvPwrBrownoutClear=shelfInvPwrBrownoutClear, stsnLockoutWorkingCond=stsnLockoutWorkingCond, stmnCrntPMLBCValidity=stmnCrntPMLBCValidity, stmnLoopbackClear=stmnLoopbackClear, shelfPowerFeedA=shelfPowerFeedA, envLwPresCond=envLwPresCond, fcHistPMOPTAvgInitialize=fcHistPMOPTAvgInitialize, oscLossOfSignalClear=oscLossOfSignalClear, objects=objects, cpSynchronizationEntry=cpSynchronizationEntry, stmnCrntPMOTNBERValidity=stmnCrntPMOTNBERValidity, oaCrntPMLaser2TempValidity=oaCrntPMLaser2TempValidity, vcnHistPMEntry=vcnHistPMEntry, ocnHistPMOTUBBEInitialize=ocnHistPMOTUBBEInitialize, oaMSInsertionLossMaxTh=oaMSInsertionLossMaxTh, xcvrProtGrpWorkIdx=xcvrProtGrpWorkIdx, xcvrHistPMFRDRInitialize=xcvrHistPMFRDRInitialize, geCrntPMESInitialize=geCrntPMESInitialize, geCrntPMUSIZETimeStamp=geCrntPMUSIZETimeStamp, xcvrHistPMCVValue=xcvrHistPMCVValue, briHistPMTempTimeStamp=briHistPMTempTimeStamp, stmnHistPMNBYTCR64BitTimeStamp=stmnHistPMNBYTCR64BitTimeStamp, fcRemoteId=fcRemoteId, stsnCrntPMSlotIdx=stsnCrntPMSlotIdx, xcvrCrntPMNBYTCR64BitInitialize=xcvrCrntPMNBYTCR64BitInitialize, stmnLossOfFrameClear=stmnLossOfFrameClear, stsnHistPMPortIdx=stsnHistPMPortIdx, briId1=briId1, pvxL2IFCrntPMFRGTValidity=pvxL2IFCrntPMFRGTValidity, xcvrWavelengthNotAchievableCond=xcvrWavelengthNotAchievableCond, stmnCrntPMRSESValidity=stmnCrntPMRSESValidity, vcgXCSrcPortIdx=vcgXCSrcPortIdx, envCondAttrInputType=envCondAttrInputType, briHistPMSupplyVoltageValue=briHistPMSupplyVoltageValue, fcHistPMSupplyVoltageValue=fcHistPMSupplyVoltageValue, xcvrHistPMTFRCRXTimeStamp=xcvrHistPMTFRCRXTimeStamp, stmnCrntPMMSEBValidity=stmnCrntPMMSEBValidity, xcvrHistPMOTNAVGBERTimeStamp=xcvrHistPMOTNAVGBERTimeStamp, geHistPMSESInitialize=geHistPMSESInitialize, cpDbDeletionInProgressClear=cpDbDeletionInProgressClear, shelfCondNotifications=shelfCondNotifications, oaCrntPMFSOOPTValidity=oaCrntPMFSOOPTValidity, geCrntPMTable=geCrntPMTable, fcCrntPMOPTMaxInitialize=fcCrntPMOPTMaxInitialize, ethL1IFPMThresholdOTUOFSValue=ethL1IFPMThresholdOTUOFSValue, facilities=facilities, ocnCrntPMOPTAvgValue=ocnCrntPMOPTAvgValue, stmnCrntPMNBYTCRInitialize=stmnCrntPMNBYTCRInitialize, ocnCrntPMOPTMinValue=ocnCrntPMOPTMinValue, olsSFPMismatchClear=olsSFPMismatchClear, ocnLpbkOpTypeIdx=ocnLpbkOpTypeIdx, xcvrHistPMNBITCR64BitTimeStamp=xcvrHistPMNBITCR64BitTimeStamp, xcvrCrntPMSESSTimeStamp=xcvrCrntPMSESSTimeStamp, xcvrCrntPMTempTimeStamp=xcvrCrntPMTempTimeStamp, amdHistPMPortIdx=amdHistPMPortIdx, briLossOfAlignmentCond=briLossOfAlignmentCond, briPEC=briPEC, eventNotifications=eventNotifications, xcvrCrntPMOPTAvgValidity=xcvrCrntPMOPTAvgValidity, ocnCrntPMOTNAVGBERValidity=ocnCrntPMOTNAVGBERValidity, xcvrCrntPMINVBLKTimeStamp=xcvrCrntPMINVBLKTimeStamp, olsLinkDownCond=olsLinkDownCond, geCrntPMBCSTValue=geCrntPMBCSTValue, amdOpticalPwrReceivedMaxTh=amdOpticalPwrReceivedMaxTh, geCrntPMOPTAvgValue=geCrntPMOPTAvgValue, shelfEvtNotifications=shelfEvtNotifications, amdCrntPMOPRValidity=amdCrntPMOPRValidity, ocnCrntPMUASSValue=ocnCrntPMUASSValue, stmnCrntPMMSBBEValue=stmnCrntPMMSBBEValue, gePMThresholdOSIZEValue=gePMThresholdOSIZEValue, pvxERPSSrvcNNIEvtNotifications=pvxERPSSrvcNNIEvtNotifications, oaHistPMLaser2TempTimeStamp=oaHistPMLaser2TempTimeStamp, xcvrHistPMOPRMaxValue=xcvrHistPMOPRMaxValue, ocnCrntPMESLInitialize=ocnCrntPMESLInitialize, fcHistPMOPRMaxInitialize=fcHistPMOPRMaxInitialize, ethL1IFCrntPMINVBLKValidity=ethL1IFCrntPMINVBLKValidity, ethL1IFHistPMOPTAvgInitialize=ethL1IFHistPMOPTAvgInitialize, ospfNbrAddressLessIndex=ospfNbrAddressLessIndex, geHistPMTPFCTXInitialize=geHistPMTPFCTXInitialize, ethIntfShelfIdx=ethIntfShelfIdx, oaMSInsertionLossClear=oaMSInsertionLossClear, ocnHistPMNBYTCRValue=ocnHistPMNBYTCRValue, stmnHistPMTypeIdx=stmnHistPMTypeIdx, stmnHistPMOTUUASInitialize=stmnHistPMOTUUASInitialize, slotInvPackUSI=slotInvPackUSI, stmnCrntPMOTUBBEInitialize=stmnCrntPMOTUBBEInitialize, shelfOperations=shelfOperations, swUpgradeCheckAlm=swUpgradeCheckAlm, geDuplex=geDuplex, envHiWtrClear=envHiWtrClear, geHistPMTPFCRXValue=geHistPMTPFCRXValue, stmnCrntPMOPRMaxValidity=stmnCrntPMOPRMaxValidity, ethL1IFPMThresholdOTUSESValue=ethL1IFPMThresholdOTUSESValue, dbBackupAndRestorePath=dbBackupAndRestorePath, ocnCrntPMSESSTimeStamp=ocnCrntPMSESSTimeStamp, ocnCrntPMPortIdx=ocnCrntPMPortIdx, briOpticalPwrReceivedMaxClear=briOpticalPwrReceivedMaxClear, geCrntPMLBCTimeStamp=geCrntPMLBCTimeStamp, xcvrCrntPMMCSTInitialize=xcvrCrntPMMCSTInitialize, xcvrStatusChangeEvt=xcvrStatusChangeEvt, stmnHistPMShelfIdx=stmnHistPMShelfIdx, xcvrProtSwOpTable=xcvrProtSwOpTable, pvxL2IFHistPMTPFCTXValidity=pvxL2IFHistPMTPFCTXValidity, xcvrHistPMBCSTValue=xcvrHistPMBCSTValue, briCrntPMOPTMinTimeStamp=briCrntPMOPTMinTimeStamp, stmnTcaEvt=stmnTcaEvt, ocnOTNPayloadMismatchClear=ocnOTNPayloadMismatchClear, geRemotePathFailureClear=geRemotePathFailureClear, condNotifCtrlEntry=condNotifCtrlEntry, xcvrCrntPMOTNAVGBERInitialize=xcvrCrntPMOTNAVGBERInitialize, ocnPMThresholdPortIdx=ocnPMThresholdPortIdx, shelfInvUnknownClear=shelfInvUnknownClear, envHiHumCond=envHiHumCond, ethL1IFHistPMNBYTCR64BitValidity=ethL1IFHistPMNBYTCR64BitValidity, stmnCrntPMRSESValue=stmnCrntPMRSESValue, fcPMThresholdUASValue=fcPMThresholdUASValue, ocnProtGrpWorkPortIdx=ocnProtGrpWorkPortIdx, xcvrCrntPMMCSTTimeStamp=xcvrCrntPMMCSTTimeStamp, stmnProtGrpProtPortIdx=stmnProtGrpProtPortIdx, ethIntfEntry=ethIntfEntry, xcvrHistPMFRGTTimeStamp=xcvrHistPMFRGTTimeStamp, ocnHistPMOTUBBETimeStamp=ocnHistPMOTUBBETimeStamp, ospfGeneralGroupEntry=ospfGeneralGroupEntry, slotInvUpgradeResult=slotInvUpgradeResult, ethL1IFHistPMOTNAVGBERValidity=ethL1IFHistPMOTNAVGBERValidity, stmnCrntPMOTUSESValidity=stmnCrntPMOTUSESValidity, oscTable=oscTable, xcvrCrntPMFRDRValue=xcvrCrntPMFRDRValue, stsnCrntPMESPTimeStamp=stsnCrntPMESPTimeStamp, stmnProtSwOpSlotIdx=stmnProtSwOpSlotIdx, briLossOfSignalClear=briLossOfSignalClear, ethIntfLagPortPriority=ethIntfLagPortPriority, pvxL2IFHistPMFCSETimeStamp=pvxL2IFHistPMFCSETimeStamp, amdCustom1=amdCustom1, envFuseCond=envFuseCond, ocnLpbkOpPortIdx=ocnLpbkOpPortIdx, ocnHistPMNBITCRValue=ocnHistPMNBITCRValue, pvxL2IFCrntPMTFRCTXTimeStamp=pvxL2IFCrntPMTFRCTXTimeStamp, ethL1IFHistPMOPRMaxValidity=ethL1IFHistPMOPRMaxValidity, briSlotIdx=briSlotIdx, fcHistPMOPTAvgTimeStamp=fcHistPMOPTAvgTimeStamp, shelfPEC=shelfPEC, dbChangeNotifications=dbChangeNotifications, ethIntfVendorPN3=ethIntfVendorPN3, ocnPMThresholdSESSValue=ocnPMThresholdSESSValue, pvxL2IFCrntPMOSIZEInitialize=pvxL2IFCrntPMOSIZEInitialize, briProtocol=briProtocol, shelfInvTempMaxClear=shelfInvTempMaxClear, geCrntPMCVValidity=geCrntPMCVValidity, xcvrHistPMOTUSESValidity=xcvrHistPMOTUSESValidity, odunXCProtTypeNum=odunXCProtTypeNum, stsnCrntPMFCPValidity=stsnCrntPMFCPValidity, ethL1IFHistPMUASTimeStamp=ethL1IFHistPMUASTimeStamp, notifications=notifications, geHistPMEntry=geHistPMEntry, fcAdminStatus=fcAdminStatus, stsnSlotIdx=stsnSlotIdx, ocnHistPMOPTAvgInitialize=ocnHistPMOPTAvgInitialize, slotInvDataNameIdx=slotInvDataNameIdx, geCrntPMFCSEValidity=geCrntPMFCSEValidity, ethL1IFCrntPMOPTMaxValidity=ethL1IFCrntPMOPTMaxValidity, xcvrHistPMUSIZETimeStamp=xcvrHistPMUSIZETimeStamp, stmnHistPMOTUEBTimeStamp=stmnHistPMOTUEBTimeStamp, ocnCrntPMSESSInitialize=ocnCrntPMSESSInitialize, pvxL2IntfRowStatus=pvxL2IntfRowStatus, fcHistPMOPRMaxTimeStamp=fcHistPMOPRMaxTimeStamp, pvxL2IntfSwitchIdx=pvxL2IntfSwitchIdx, ethIntfAdminStatus=ethIntfAdminStatus, pluggableInvTxFaultImpl=pluggableInvTxFaultImpl, briCrntPMOPRAvgInitialize=briCrntPMOPRAvgInitialize, xcvrHistPMSIZE1024To1518Value=xcvrHistPMSIZE1024To1518Value, ocnSignalDegradeClear=ocnSignalDegradeClear, ethL1IFCrntPMOTUBBETimeStamp=ethL1IFCrntPMOTUBBETimeStamp, ocnCrntPMESSTimeStamp=ocnCrntPMESSTimeStamp, ethL1IFPMThresholdOTUBBEValue=ethL1IFPMThresholdOTUBBEValue, pvxL2IFCrntPMSIZE1024To1518TimeStamp=pvxL2IFCrntPMSIZE1024To1518TimeStamp, envPumpCond=envPumpCond, oaFSOOpticalPwrTransmitted=oaFSOOpticalPwrTransmitted, cpStorageCardFailClear=cpStorageCardFailClear, fcPEC=fcPEC, geSpeed=geSpeed, stmnWavelength=stmnWavelength, shelfInvExpectedMSISerialNum=shelfInvExpectedMSISerialNum, oaLaser2Temp=oaLaser2Temp, stmnShelfIdx=stmnShelfIdx, xcvrHistPMNBITCR64BitValidity=xcvrHistPMNBITCR64BitValidity, ocnHistPMTempValue=ocnHistPMTempValue, ethIntfOperStatus=ethIntfOperStatus, ethL1IFCrntPMNBITCRValue=ethL1IFCrntPMNBITCRValue, vcnEvtNotifications=vcnEvtNotifications, olsWavelengthNotAchievableClear=olsWavelengthNotAchievableClear, xcvrCrntPMOTUEBValue=xcvrCrntPMOTUEBValue, olsInputLOSCond=olsInputLOSCond, envAttrUnsupportedClear=envAttrUnsupportedClear, briHistPMOPRMaxValue=briHistPMOPRMaxValue, vcnSlotIdx=vcnSlotIdx, xcvrCrntPMTBYCRXValidity=xcvrCrntPMTBYCRXValidity, xcvrCrntPMTFRCRXValidity=xcvrCrntPMTFRCRXValidity, ocnLoopbackCond=ocnLoopbackCond, geHistPMTempValidity=geHistPMTempValidity)
mibBuilder.exportSymbols("BTI-7000-MIB", ethL1IFCrntPMOPRAvgValue=ethL1IFCrntPMOPRAvgValue, envEngineClear=envEngineClear, xcvrMismatchCond=xcvrMismatchCond, stmnOpticalPwrTransmittedMinCond=stmnOpticalPwrTransmittedMinCond, slotInvPluginEvt=slotInvPluginEvt, stmnCrntPMOPTValue=stmnCrntPMOPTValue, oscUnmbrd=oscUnmbrd, ocnLockoutProtectionCond=ocnLockoutProtectionCond, geHistPMTFRCTXTimeStamp=geHistPMTFRCTXTimeStamp, vcnProtSwEvtType=vcnProtSwEvtType, briCrntPMOPRAvgTimeStamp=briCrntPMOPRAvgTimeStamp, xcvrCrntPMTBYCRXValue=xcvrCrntPMTBYCRXValue, stsnPMThresholdByPortTable=stsnPMThresholdByPortTable, ethIntfOperStatQlfr=ethIntfOperStatQlfr, stmnHistPMRSESValue=stmnHistPMRSESValue, stmnHistPMRSEBValidity=stmnHistPMRSEBValidity, fcPayloadMismatchCond=fcPayloadMismatchCond, xcvrCrntPMTable=xcvrCrntPMTable, oaOOBRSDOpTable=oaOOBRSDOpTable, envFirDetrCond=envFirDetrCond, geStatusChangeEvt=geStatusChangeEvt, pvxL2IFHistPMSIZE256To511Initialize=pvxL2IFHistPMSIZE256To511Initialize, stmnFiberType=stmnFiberType, vcnCrntPMHPSESValidity=vcnCrntPMHPSESValidity, shelfInvEvtNotifications=shelfInvEvtNotifications, slotInvUnpluginEvt=slotInvUnpluginEvt, envGenericClear=envGenericClear, stsnProtSwOpCmd=stsnProtSwOpCmd, xcvrHistPMTBYCRXValidity=xcvrHistPMTBYCRXValidity, DataCommsPingCmd=DataCommsPingCmd, ethL1IFCrntPMNBITCRTimeStamp=ethL1IFCrntPMNBITCRTimeStamp, stmnHistPMMSSESValidity=stmnHistPMMSSESValidity, xcvrHistPMBCSTTimeStamp=xcvrHistPMBCSTTimeStamp, briHistPMOPRAvgValue=briHistPMOPRAvgValue, pvxL2IFPMThresholdOSIZEValue=pvxL2IFPMThresholdOSIZEValue, stmnPMThresholdOTUUASValue=stmnPMThresholdOTUUASValue, xcvrHistPMFCSEValidity=xcvrHistPMFCSEValidity, briOperStatQlfr=briOperStatQlfr, ocnCrntPMSupplyVoltage2TimeStamp=ocnCrntPMSupplyVoltage2TimeStamp, ocnCrntPMNBYTCR64BitTimeStamp=ocnCrntPMNBYTCR64BitTimeStamp, geCrntPMEntry=geCrntPMEntry, ocnCrntPMSESSValue=ocnCrntPMSESSValue, stmnCrntPMMSESValidity=stmnCrntPMMSESValidity, fcHistPMOPTMinValidity=fcHistPMOPTMinValidity, fcHistPMOPTMinValue=fcHistPMOPTMinValue, actAlarmObjectType=actAlarmObjectType, dbBackupAndRestoreFtpPswd=dbBackupAndRestoreFtpPswd, vcnUnequippedClear=vcnUnequippedClear, ethIntfMediaRate=ethIntfMediaRate, briHistPMOPRMinInitialize=briHistPMOPRMinInitialize, pvxL2IntfSchedProfName=pvxL2IntfSchedProfName, stsnProtSwOpTable=stsnProtSwOpTable, ethIntfBER=ethIntfBER, ethIntfPortTypeIdx=ethIntfPortTypeIdx, geOpticalPwrTransmittedMaxTh=geOpticalPwrTransmittedMaxTh, stmnLaserStatus=stmnLaserStatus, fcLpbkOpCmd=fcLpbkOpCmd, xcvrCrntPMSIZE128To255Validity=xcvrCrntPMSIZE128To255Validity, xcvrCrntPMOPRMinTimeStamp=xcvrCrntPMOPRMinTimeStamp, stmnCrntPMOPTMaxTimeStamp=stmnCrntPMOPTMaxTimeStamp, briCrntPMOPTMaxValue=briCrntPMOPTMaxValue, geHistPMSIZE128To255Initialize=geHistPMSIZE128To255Initialize, stmnCrntPMUNCRCDWValidity=stmnCrntPMUNCRCDWValidity, oaHistPMMSInsLossValidity=oaHistPMMSInsLossValidity, ocnHistPMOPRAvgTimeStamp=ocnHistPMOPRAvgTimeStamp, ocnPMThresholdShelfIdx=ocnPMThresholdShelfIdx, networkNeighborIdx=networkNeighborIdx, geCrntPMBCSTTimeStamp=geCrntPMBCSTTimeStamp, condNotifCtrlTable=condNotifCtrlTable, stmnCrntPMMSEBValue=stmnCrntPMMSEBValue, fcVendorPN2=fcVendorPN2, briOpticalPwrTransmittedMinTh=briOpticalPwrTransmittedMinTh, stmnHistPMOTNAVGBERValue=stmnHistPMOTNAVGBERValue, xcvrHistPMUSIZEValue=xcvrHistPMUSIZEValue, envLwBatvgCond=envLwBatvgCond, briHistPMOPRValue=briHistPMOPRValue, xcvrCrntPMRSBBEValue=xcvrCrntPMRSBBEValue, oaFiberType=oaFiberType, amdCrntPMOPTValue=amdCrntPMOPTValue, shelfId=shelfId, pvxL2IFHistPMSIZE256To511TimeStamp=pvxL2IFHistPMSIZE256To511TimeStamp, stmnPMThresholdIntervalTypeIdx=stmnPMThresholdIntervalTypeIdx, ocnCrntPMUASLValidity=ocnCrntPMUASLValidity, briCrntPMOPRMinValue=briCrntPMOPRMinValue, oaCrntPMSlotIdx=oaCrntPMSlotIdx, erpsCondNotifications=erpsCondNotifications, ocnPortIdx=ocnPortIdx, stmnCrntPMRSEBInitialize=stmnCrntPMRSEBInitialize, stmnHistPMOPRAvgTimeStamp=stmnHistPMOPRAvgTimeStamp, stmnHistPMNBYTCRValidity=stmnHistPMNBYTCRValidity, oaId2=oaId2, stmnCrntPMSlotIdx=stmnCrntPMSlotIdx, ipExtIntfDescription=ipExtIntfDescription, oaHistPMFSOOPTValue=oaHistPMFSOOPTValue, geLossOfSignalCond=geLossOfSignalCond, xcvrCrntPMSIZE512To1023TimeStamp=xcvrCrntPMSIZE512To1023TimeStamp, stmnCrntPMOTNBERInitialize=stmnCrntPMOTNBERInitialize, ocnCrntPMSESLTimeStamp=ocnCrntPMSESLTimeStamp, fcHistPMOPTMaxValidity=fcHistPMOPTMaxValidity, actCondCodeType=actCondCodeType, gePhyPMMon=gePhyPMMon, dataCommsPingNumSuccesses=dataCommsPingNumSuccesses, fcHistPMOPRMaxValidity=fcHistPMOPRMaxValidity, slotInvPackSerialNum=slotInvPackSerialNum, xcvrHistPMOPTMinValue=xcvrHistPMOPTMinValue, dbBackupAndRestoreCmd=dbBackupAndRestoreCmd, geCrntPMSIZE1024To1518Initialize=geCrntPMSIZE1024To1518Initialize, stmnCrntPMMSEBInitialize=stmnCrntPMMSEBInitialize, stmnHistPMOPTMinValue=stmnHistPMOPTMinValue, cpCrntPMTempValue=cpCrntPMTempValue, slotInvCondNotifications=slotInvCondNotifications, oaLaserTempMinShutdownTh=oaLaserTempMinShutdownTh, ethL1IFHistPMESValue=ethL1IFHistPMESValue, oaActAutoEnableTimer=oaActAutoEnableTimer, fcPortIdx=fcPortIdx, slotInvPackName=slotInvPackName, pluggableInvTable=pluggableInvTable, oaCrntPMCaseTempValue=oaCrntPMCaseTempValue, cpInvalidProvCond=cpInvalidProvCond, stsnForcedSwitchToProtectionClear=stsnForcedSwitchToProtectionClear, ocnVendorPN3=ocnVendorPN3, stsnPMThresholdByPortFCPValue=stsnPMThresholdByPortFCPValue, geCrntPMLBCValidity=geCrntPMLBCValidity, geRemotePathFailureCond=geRemotePathFailureCond, fcCrntPMOPTAvgTimeStamp=fcCrntPMOPTAvgTimeStamp, pvxL2IFCrntPMSIZEOver1518Initialize=pvxL2IFCrntPMSIZEOver1518Initialize, oaCrntPMOPRValue=oaCrntPMOPRValue, stsnCrntPMSESPValue=stsnCrntPMSESPValue, cpSynchronizationPrimRefBasicSSM=cpSynchronizationPrimRefBasicSSM, ethIntfMACAddr=ethIntfMACAddr, ethL1IFHistPMOTUESTimeStamp=ethL1IFHistPMOTUESTimeStamp, envToxicGasClear=envToxicGasClear, briOpticalPwrReceivedMaxCond=briOpticalPwrReceivedMaxCond, oaCrntPMShelfIdx=oaCrntPMShelfIdx, stmnHistPMNBITCRInitialize=stmnHistPMNBITCRInitialize, ntpAssocAuthenFailedClear=ntpAssocAuthenFailedClear, ethPortEvtNotifications=ethPortEvtNotifications, xcvrCrntPMINVBLKValue=xcvrCrntPMINVBLKValue, amdCrntPMVOAValue=amdCrntPMVOAValue, stmnForcedSwitchToWorkingCond=stmnForcedSwitchToWorkingCond, xcvrCrntPMSIZE64Validity=xcvrCrntPMSIZE64Validity, ocnPMThresholdSESLValue=ocnPMThresholdSESLValue, fcCrntPMOPRMaxValue=fcCrntPMOPRMaxValue, ethL1IFHistPMINVBLKTimeStamp=ethL1IFHistPMINVBLKTimeStamp, geHistPMSIZEOver1518Initialize=geHistPMSIZEOver1518Initialize, ocnProtSwOpSlotIdx=ocnProtSwOpSlotIdx, oaHistPMVOATimeStamp=oaHistPMVOATimeStamp, ocnCrntPMOPTValue=ocnCrntPMOPTValue, ocnCrntPMCVLInitialize=ocnCrntPMCVLInitialize, stmnPMThresholdEntry=stmnPMThresholdEntry, conditions=conditions, geHistPMOSIZEInitialize=geHistPMOSIZEInitialize, geHistPMOPRMinTimeStamp=geHistPMOPRMinTimeStamp, briShelfIdx=briShelfIdx, passivePortSlotIdx=passivePortSlotIdx, ethIntfWavelength=ethIntfWavelength, geOpticalPwrReceivedMaxCond=geOpticalPwrReceivedMaxCond, odunShelfIdx=odunShelfIdx, pluggableInvRestartOpEntry=pluggableInvRestartOpEntry, fcHistPMOPTAvgValidity=fcHistPMOPTAvgValidity, ocnCrntPMSEFSSValue=ocnCrntPMSEFSSValue, xcvrCrntPMSupplyVoltageTimeStamp=xcvrCrntPMSupplyVoltageTimeStamp, briHistPMOPRAvgInitialize=briHistPMOPRAvgInitialize, xcvrVendorPN3=xcvrVendorPN3, pvxL2IntfDscpPHBProfName=pvxL2IntfDscpPHBProfName, stmnPMThresholdRSEBValue=stmnPMThresholdRSEBValue, xcvrHistPMOTNBERInitialize=xcvrHistPMOTNBERInitialize, ethL1IFHistPMOTNAVGBERTimeStamp=ethL1IFHistPMOTNAVGBERTimeStamp, shelfCustom3=shelfCustom3, geLossOfSequenceClear=geLossOfSequenceClear, vcnAlarmIndicationSignalCond=vcnAlarmIndicationSignalCond, ethL1IFCrntPMNBYTCRValidity=ethL1IFCrntPMNBYTCRValidity, xcvrOperations=xcvrOperations, pvxL2IFCrntPMTFRCTXInitialize=pvxL2IFCrntPMTFRCTXInitialize, cpCustom1=cpCustom1, ethL1IFHistPMLBCTimeStamp=ethL1IFHistPMLBCTimeStamp, xcvrHistPMOTNBERValue=xcvrHistPMOTNBERValue, xcvrCrntPMOTUBBEInitialize=xcvrCrntPMOTUBBEInitialize, ocnHistPMCVSValidity=ocnHistPMCVSValidity, cpSynchronizationPrimRefSrcPortNum=cpSynchronizationPrimRefSrcPortNum, fcCrntPMOPRTimeStamp=fcCrntPMOPRTimeStamp, networkNeighborEntry=networkNeighborEntry, fcLoopbackCond=fcLoopbackCond, geCrntPMOPRTimeStamp=geCrntPMOPRTimeStamp, stsnCrntPMFCPValue=stsnCrntPMFCPValue, pvxL2IFHistPMSIZE128To255Validity=pvxL2IFHistPMSIZE128To255Validity, xcvrCrntPMBCSTValue=xcvrCrntPMBCSTValue, geHistPMSIZE64TimeStamp=geHistPMSIZE64TimeStamp, stmnHistPMMSUASTimeStamp=stmnHistPMMSUASTimeStamp, ethL1IFHistPMOTUUASValue=ethL1IFHistPMOTUUASValue, geCrntPMSESTimeStamp=geCrntPMSESTimeStamp, cpCrntPMEntry=cpCrntPMEntry, stmnLossOfSecondaryTimingReferenceCond=stmnLossOfSecondaryTimingReferenceCond, administration=administration, stmnLpbkOpPortIdx=stmnLpbkOpPortIdx, xcvrHistPMNBYTCRValidity=xcvrHistPMNBYTCRValidity, geHistPMTFRCRXInitialize=geHistPMTFRCRXInitialize, geOpticalPwrReceived=geOpticalPwrReceived, slotInvEntry=slotInvEntry, envIntruderClear=envIntruderClear, ocnHistPMOPRValidity=ocnHistPMOPRValidity, xcvrTable=xcvrTable, stmnCrntPMRSBBEInitialize=stmnCrntPMRSBBEInitialize, vcnCrntPMPortIdx=vcnCrntPMPortIdx, geCrntPMSIZE256To511Initialize=geCrntPMSIZE256To511Initialize, vcnProtSwOpTypeIdx=vcnProtSwOpTypeIdx, briHistPMOPTMinValidity=briHistPMOPTMinValidity, ocnHistPMIntervalIdx=ocnHistPMIntervalIdx, fcCrntPMOPRMinValue=fcCrntPMOPRMinValue, gcc0ConfigAdminStatus=gcc0ConfigAdminStatus, oaLaser1Power=oaLaser1Power, xcvrTypeIdx=xcvrTypeIdx, ocnCrntPMOTUEBValidity=ocnCrntPMOTUEBValidity, shelfInvAssemblyPEC=shelfInvAssemblyPEC, passivePortCpTypeIdx=passivePortCpTypeIdx, xcvrHistPMUNCRCDWValue=xcvrHistPMUNCRCDWValue, xcvrHistPMSIZE65To127TimeStamp=xcvrHistPMSIZE65To127TimeStamp, shelfInvCommClear=shelfInvCommClear, geCrntPMShelfIdx=geCrntPMShelfIdx, geHistPMSESTimeStamp=geHistPMSESTimeStamp, xcvrCrntPMOTUOFSValue=xcvrCrntPMOTUOFSValue, stsnCrntPMESPValue=stsnCrntPMESPValue, stmnOTNPayloadMismatchCond=stmnOTNPayloadMismatchCond, oaHistPMLaser2PowerTimeStamp=oaHistPMLaser2PowerTimeStamp, pvxL2IFCrntPMIntervalTypeIdx=pvxL2IFCrntPMIntervalTypeIdx, oaHistPMLaser1TempValue=oaHistPMLaser1TempValue, stmnHistPMOTUESValue=stmnHistPMOTUESValue, vcnCrntPMIntervalTypeIdx=vcnCrntPMIntervalTypeIdx, briActAutoEnableTimer=briActAutoEnableTimer, cpCrntPMTempValidity=cpCrntPMTempValidity, fcHistPMLBCValue=fcHistPMLBCValue, cpStatusChangeEvt=cpStatusChangeEvt, odunTable=odunTable, amdHistPMIntervalIdx=amdHistPMIntervalIdx, briHistPMTempValidity=briHistPMTempValidity, envRectLoClear=envRectLoClear, envAirComprCond=envAirComprCond, ocnOpticalPwrReceivedMinTh=ocnOpticalPwrReceivedMinTh, geCrntPMTFRCTXValidity=geCrntPMTFRCTXValidity, geHistPMOPRMaxValidity=geHistPMOPRMaxValidity, xcvrHistPMSESSValidity=xcvrHistPMSESSValidity, briHistPMOPTAvgValidity=briHistPMOPTAvgValidity, amdCondNotifications=amdCondNotifications, xcvrVendorPN1=xcvrVendorPN1, geCrntPMOPTValue=geCrntPMOPTValue, stmnCrntPMMSEBTimeStamp=stmnCrntPMMSEBTimeStamp, ethL1IFHistPMOTUEBValidity=ethL1IFHistPMOTUEBValidity, ocnCrntPMESSValidity=ocnCrntPMESSValidity, ethL1IFCrntPMOPRAvgValidity=ethL1IFCrntPMOPRAvgValidity, oaOpticalPwrTransmittedMinTh=oaOpticalPwrTransmittedMinTh, slotInvCoolingUnitMismatchClear=slotInvCoolingUnitMismatchClear, oaOpticalPwrReceivedMaxClear=oaOpticalPwrReceivedMaxClear, stmnCrntPMOTUESValidity=stmnCrntPMOTUESValidity, fcOpticalPwrReceivedMinCond=fcOpticalPwrReceivedMinCond)
mibBuilder.exportSymbols("BTI-7000-MIB", geCondNotifications=geCondNotifications, oaCrntPMFSOOPTTimeStamp=oaCrntPMFSOOPTTimeStamp, geCrntPMSIZE65To127Initialize=geCrntPMSIZE65To127Initialize, ipExtInterfaceTable=ipExtInterfaceTable, stmnAlarmIndicationSignalClear=stmnAlarmIndicationSignalClear, envFloodCond=envFloodCond, stmnHistPMSupplyVoltageValidity=stmnHistPMSupplyVoltageValidity, ethL1IFCrntPMOTUOFSInitialize=ethL1IFCrntPMOTUOFSInitialize, fcCrntPMOPTMinTimeStamp=fcCrntPMOPTMinTimeStamp, stsnCrntPMESPInitialize=stsnCrntPMESPInitialize, ethL1IFHistPMOPTValue=ethL1IFHistPMOPTValue, geCrntPMTBYCTXValue=geCrntPMTBYCTXValue, fcOpticalPwrTransmittedMaxTh=fcOpticalPwrTransmittedMaxTh, stsnXCSrcPortIdx=stsnXCSrcPortIdx, ocnCrntPMOPTMaxInitialize=ocnCrntPMOPTMaxInitialize, ocnSignalDegradeCond=ocnSignalDegradeCond, xcvrHistPMOTUEBValidity=xcvrHistPMOTUEBValidity, fcOperStatus=fcOperStatus, xcvrHistPMOPRMinInitialize=xcvrHistPMOPRMinInitialize, stsnXCProtShelfNum=stsnXCProtShelfNum, pvxL2IFCrntPMSIZE1024To1518Initialize=pvxL2IFCrntPMSIZE1024To1518Initialize, oaLaser1Temp=oaLaser1Temp, ocnHistPMOTNBERValue=ocnHistPMOTNBERValue, pluggableInvEvtNotifications=pluggableInvEvtNotifications, stmnHistPMRSESInitialize=stmnHistPMRSESInitialize, olsAlarmIndicationSignalCond=olsAlarmIndicationSignalCond, ocnPMThresholdUASLValue=ocnPMThresholdUASLValue, xcvrCrntPMRSUASTimeStamp=xcvrCrntPMRSUASTimeStamp, xcvrHistPMOTNAVGBERInitialize=xcvrHistPMOTNAVGBERInitialize, oaHistPMLaser1TempValidity=oaHistPMLaser1TempValidity, slotInvSlotIdx=slotInvSlotIdx, vcnCrntPMHPUASInitialize=vcnCrntPMHPUASInitialize, ethL1IFCrntPMOTUBBEInitialize=ethL1IFCrntPMOTUBBEInitialize, ethL1IFCrntPMUASValidity=ethL1IFCrntPMUASValidity, briHistPMOPTAvgTimeStamp=briHistPMOPTAvgTimeStamp, ethL1IFCrntPMNBYTCR64BitValidity=ethL1IFCrntPMNBYTCR64BitValidity, envOpenDrCond=envOpenDrCond, shelfOperStatQlfr=shelfOperStatQlfr, ocnCrntPMOTNAVGBERInitialize=ocnCrntPMOTNAVGBERInitialize, xcvrHistPMSupplyVoltage2Value=xcvrHistPMSupplyVoltage2Value, stmnHistPMOTNBERValue=stmnHistPMOTNBERValue, stmnHistPMNBITCR64BitInitialize=stmnHistPMNBITCR64BitInitialize, pvxL2IFHistPMTPFCRXInitialize=pvxL2IFHistPMTPFCRXInitialize, amdOpticalPwrReceivedMaxCond=amdOpticalPwrReceivedMaxCond, stsnEntry=stsnEntry, xcvrCrntPMNBITCRValue=xcvrCrntPMNBITCRValue, slotInvHTSThreshExceededCond=slotInvHTSThreshExceededCond, geHistPMSlotIdx=geHistPMSlotIdx, olsWavelengthNotAchievableCond=olsWavelengthNotAchievableCond, stmnHistPMLBCTimeStamp=stmnHistPMLBCTimeStamp, stmnCrntPMMSSESTimeStamp=stmnCrntPMMSSESTimeStamp, geHistPMTFRCRXValidity=geHistPMTFRCRXValidity, pvxL2IFCrntPMTBYCTXValidity=pvxL2IFCrntPMTBYCTXValidity, fcLossOfSequenceClear=fcLossOfSequenceClear, geRemoteId=geRemoteId, stmnHistPMOTUESValidity=stmnHistPMOTUESValidity, stsnProtSwitchEvt=stsnProtSwitchEvt, olsLinkDownClear=olsLinkDownClear, ethIntfLldpRemPortId=ethIntfLldpRemPortId, geHistPMSIZE512To1023Initialize=geHistPMSIZE512To1023Initialize, stmnHistPMOTUOFSValue=stmnHistPMOTUOFSValue, fcHistPMUASValidity=fcHistPMUASValidity, ipExtIntfMTUSize=ipExtIntfMTUSize, geLossOfSequenceCond=geLossOfSequenceCond, xcvrCrntPMOSIZEValidity=xcvrCrntPMOSIZEValidity, stsnPMThresholdByPortIdx=stsnPMThresholdByPortIdx, geHistPMOPTMinValidity=geHistPMOPTMinValidity, stmnCustom1=stmnCustom1, ethL1IFHistPMUASValidity=ethL1IFHistPMUASValidity, ethIntfLldpAdminStatus=ethIntfLldpAdminStatus, ocnPMThresholdUNCRCDWValue=ocnPMThresholdUNCRCDWValue, amdFiberType=amdFiberType, amdCustom3=amdCustom3, stsnCrntPMSESPValidity=stsnCrntPMSESPValidity, briTable=briTable, stmnCrntPMOPTMinInitialize=stmnCrntPMOPTMinInitialize, fcHistPMCVInitialize=fcHistPMCVInitialize, stmnCrntPMNBYTCRTimeStamp=stmnCrntPMNBYTCRTimeStamp, odunXCSrcPortIdx=odunXCSrcPortIdx, pvxL2IntfTrustIncomingPCP=pvxL2IntfTrustIncomingPCP, oaId1=oaId1, oaOOBRSDOpTypeIdx=oaOOBRSDOpTypeIdx, slotInvPowerFailCond=slotInvPowerFailCond, envOpenDrClear=envOpenDrClear, ocnOpticalPwrReceivedMaxTh=ocnOpticalPwrReceivedMaxTh, xcvrHistPMSupplyVoltage2TimeStamp=xcvrHistPMSupplyVoltage2TimeStamp, geHistPMJABRValue=geHistPMJABRValue, networkNeighborIPAddr=networkNeighborIPAddr, envHiWtrCond=envHiWtrCond, condCodeType=condCodeType, xcvrOpticalPwrReceivedMaxClear=xcvrOpticalPwrReceivedMaxClear, oaSSIOpticalPwrReceivedMaxTh=oaSSIOpticalPwrReceivedMaxTh, amdCrntPMEntry=amdCrntPMEntry, stmnHistPMMSEBValidity=stmnHistPMMSEBValidity, stmnCrntPMOPRMaxValue=stmnCrntPMOPRMaxValue, pvxL2IFHistPMUSIZETimeStamp=pvxL2IFHistPMUSIZETimeStamp, vcgXCSrcShelfIdx=vcgXCSrcShelfIdx, ospfLsdbSequence=ospfLsdbSequence, ethL1IFCrntPMOTUEBTimeStamp=ethL1IFCrntPMOTUEBTimeStamp, pluggableInvMismatchClear=pluggableInvMismatchClear, fcTable=fcTable, geHistPMSIZEOver1518TimeStamp=geHistPMSIZEOver1518TimeStamp, xcvrHistPMRSEBValidity=xcvrHistPMRSEBValidity, ocnHistPMOPRMinValidity=ocnHistPMOPRMinValidity, amdCrntPMOPRValue=amdCrntPMOPRValue, condDescription=condDescription, envCondAttrHKIIdx=envCondAttrHKIIdx, shelfInvExpansionShelfCommLOSClear=shelfInvExpansionShelfCommLOSClear, ocnCrntPMTable=ocnCrntPMTable, vcnXCDestPortIdx=vcnXCDestPortIdx, pvxL2IFCrntPMFRDRInitialize=pvxL2IFCrntPMFRDRInitialize, oaHistPMLaser2PowerValidity=oaHistPMLaser2PowerValidity, envFloodClear=envFloodClear, pvxL2IFCrntPMFCSETimeStamp=pvxL2IFCrntPMFCSETimeStamp, geCrntPMSupplyVoltageValidity=geCrntPMSupplyVoltageValidity, stmnHistPMOTNBERValidity=stmnHistPMOTNBERValidity, stsnCrntPMSESPInitialize=stsnCrntPMSESPInitialize, stmnForcedSwitchToProtectionClear=stmnForcedSwitchToProtectionClear, oaCrntPMOPRTimeStamp=oaCrntPMOPRTimeStamp, vcnProtSwStatus=vcnProtSwStatus, pvxL2IFHistPMTPFCTXInitialize=pvxL2IFHistPMTPFCTXInitialize, stmnCrntPMOTUSESTimeStamp=stmnCrntPMOTUSESTimeStamp, xcvrId1=xcvrId1, fcFPSD=fcFPSD, xcvrHistPMOTUESInitialize=xcvrHistPMOTUESInitialize, shelfInvOperations=shelfInvOperations, xcvrPMThresholdESValue=xcvrPMThresholdESValue, pvxL2IFHistPMSIZE128To255TimeStamp=pvxL2IFHistPMSIZE128To255TimeStamp, amdHistPMOPRTimeStamp=amdHistPMOPRTimeStamp, stmnHistPMOPRMinTimeStamp=stmnHistPMOPRMinTimeStamp, ospfNbrEntry=ospfNbrEntry, xcvrHistPMFRGTValidity=xcvrHistPMFRGTValidity, ocnHistPMNBITCR64BitTimeStamp=ocnHistPMNBITCR64BitTimeStamp, xcvrHistPMUSIZEValidity=xcvrHistPMUSIZEValidity, ethL1IFHistPMOTUSESInitialize=ethL1IFHistPMOTUSESInitialize, ethIntfTable=ethIntfTable, tl1UserEntry=tl1UserEntry, pvxL2IntfEgressBandwidthProfile=pvxL2IntfEgressBandwidthProfile, ocnCrntPMSEFSSInitialize=ocnCrntPMSEFSSInitialize, stmnHistPMRSUASTimeStamp=stmnHistPMRSUASTimeStamp, cpTypeIdx=cpTypeIdx, shelfInvMissingClear=shelfInvMissingClear, oaHistPMCaseTempTimeStamp=oaHistPMCaseTempTimeStamp, xcvrOpticalPwrReceivedMaxCond=xcvrOpticalPwrReceivedMaxCond, ethL1IFHistPMNBYTCR64BitInitialize=ethL1IFHistPMNBYTCR64BitInitialize, vcgEntry=vcgEntry, fcCrntPMSlotIdx=fcCrntPMSlotIdx, ethL1IFCrntPMOPRMaxTimeStamp=ethL1IFCrntPMOPRMaxTimeStamp, shelfInvPwrFeedBFailCond=shelfInvPwrFeedBFailCond, pvxL2IFCrntPMMCSTInitialize=pvxL2IFCrntPMMCSTInitialize, xcvrCrntPMOPRTimeStamp=xcvrCrntPMOPRTimeStamp, ntpRefIP=ntpRefIP, geHistPMTPFCRXValidity=geHistPMTPFCRXValidity, pvxNotificationObjects=pvxNotificationObjects, slotInvDataValue=slotInvDataValue, slotInvDataTable=slotInvDataTable, stmnCrntPMOPRMinValue=stmnCrntPMOPRMinValue, briLossOfLockClear=briLossOfLockClear, ocnHistPMOTUEBValidity=ocnHistPMOTUEBValidity, ethL1IFCrntPMESValidity=ethL1IFCrntPMESValidity, ethL1IFHistPMSupplyVoltage2Value=ethL1IFHistPMSupplyVoltage2Value, pvxL2IFCrntPMTBYCRXInitialize=pvxL2IFCrntPMTBYCRXInitialize, ospfNbrPriority=ospfNbrPriority, ethL1IFHistPMUNCRCDWValidity=ethL1IFHistPMUNCRCDWValidity, ethL1IFCrntPMUASTimeStamp=ethL1IFCrntPMUASTimeStamp, geActAutoEnableTimer=geActAutoEnableTimer, cpPEC=cpPEC, serialStopBits=serialStopBits, envCondAttrEntry=envCondAttrEntry, ocnOpticalPwrTransmittedMinCond=ocnOpticalPwrTransmittedMinCond, ocnAlarmIndicationSignalCond=ocnAlarmIndicationSignalCond, pvxERPSSrvcEvtNotifications=pvxERPSSrvcEvtNotifications, stmnPMThresholdOTUOFSValue=stmnPMThresholdOTUOFSValue, ocnOperStatQlfr=ocnOperStatQlfr, geCrntPMOSIZETimeStamp=geCrntPMOSIZETimeStamp, vcgXCDestPortIdx=vcgXCDestPortIdx, stmnCrntPMOTUOFSInitialize=stmnCrntPMOTUOFSInitialize, pvxESrvcEvtNotifications=pvxESrvcEvtNotifications, fcCrntPMOPTMinValue=fcCrntPMOPTMinValue, ocnLossOfFrameClear=ocnLossOfFrameClear, ocnCrntPMCVLTimeStamp=ocnCrntPMCVLTimeStamp, xcvrHistPMSupplyVoltageValidity=xcvrHistPMSupplyVoltageValidity, amdOperStatQlfr=amdOperStatQlfr, stmnWavelengthNotAchievableClear=stmnWavelengthNotAchievableClear, stmnHistPMNBYTCRTimeStamp=stmnHistPMNBYTCRTimeStamp, stmnOpticalPwrReceivedMaxClear=stmnOpticalPwrReceivedMaxClear, briHistPMOPTMinValue=briHistPMOPTMinValue, ocnHistPMOTUBBEValidity=ocnHistPMOTUBBEValidity, stmnCrntPMTypeIdx=stmnCrntPMTypeIdx, xcvrPMThresholdEntry=xcvrPMThresholdEntry, shelfInvEntry=shelfInvEntry, ocnHistPMNBITCR64BitValue=ocnHistPMNBITCR64BitValue, vcgXCType=vcgXCType, stsnPMThresholdByPortShelfIdx=stsnPMThresholdByPortShelfIdx, olsSFPMismatchCond=olsSFPMismatchCond, geCrntPMOPRAvgValue=geCrntPMOPRAvgValue, stmnHistPMOTUOFSInitialize=stmnHistPMOTUOFSInitialize, pvxL2IFHistPMSIZEOver1518Value=pvxL2IFHistPMSIZEOver1518Value, feRowStatus=feRowStatus, tl1LogSysName=tl1LogSysName, fcLossOfSyncCond=fcLossOfSyncCond, envEngOprgClear=envEngOprgClear, stmnCrntPMRSBBEValidity=stmnCrntPMRSBBEValidity, briHistPMOPTValue=briHistPMOPTValue, ocnCrntPMOTUESInitialize=ocnCrntPMOTUESInitialize, odunEntry=odunEntry, amdOpticalPwrReceivedMinTh=amdOpticalPwrReceivedMinTh, stsnHistPMUASPValue=stsnHistPMUASPValue, ocnCrntPMCVLValue=ocnCrntPMCVLValue, ethL1IFHistPMNBYTCRValidity=ethL1IFHistPMNBYTCRValidity, stmnCrntPMPortIdx=stmnCrntPMPortIdx, xcvrHistPMTFRCRXValidity=xcvrHistPMTFRCRXValidity, stmnCrntPMOPRMaxInitialize=stmnCrntPMOPRMaxInitialize, fcCrntPMEntry=fcCrntPMEntry, pvxL2IFPMThresholdFCSEValue=pvxL2IFPMThresholdFCSEValue, geOpticalPwrReceivedMinCond=geOpticalPwrReceivedMinCond, vcnHistPMTypeIdx=vcnHistPMTypeIdx, ocnAutoEnableTimer=ocnAutoEnableTimer, stmnPMThresholdMSEBValue=stmnPMThresholdMSEBValue, shelfInvDiscoveredNEName=shelfInvDiscoveredNEName, stmnCrntPMNBITCRTimeStamp=stmnCrntPMNBITCRTimeStamp, stmnCrntPMOTUESTimeStamp=stmnCrntPMOTUESTimeStamp, ipExtIntfGateway=ipExtIntfGateway, stmnCrntPMNBITCR64BitValidity=stmnCrntPMNBITCR64BitValidity, oaCrntPMLaser1TempValidity=oaCrntPMLaser1TempValidity, geCrntPMOSIZEInitialize=geCrntPMOSIZEInitialize, xcvrCrntPMCVTimeStamp=xcvrCrntPMCVTimeStamp, envCondNotifications=envCondNotifications, ethIntfAutoEnableTimer=ethIntfAutoEnableTimer, ethL1IFHistPMOTUBBEValidity=ethL1IFHistPMOTUBBEValidity, ocnWavelength=ocnWavelength, stmnRowStatus=stmnRowStatus, ocnHistPMNBYTCR64BitTimeStamp=ocnHistPMNBYTCR64BitTimeStamp, stmnHistPMMSESTimeStamp=stmnHistPMMSESTimeStamp, xcvrCrntPMShelfIdx=xcvrCrntPMShelfIdx, pvxL2IntfCtrlFrmProfileId=pvxL2IntfCtrlFrmProfileId, shelfRowStatus=shelfRowStatus, vcnHistPMHPSESValidity=vcnHistPMHPSESValidity, geHistPMOPRMinValidity=geHistPMOPRMinValidity, ethL1IFCrntPMOTNAVGBERInitialize=ethL1IFCrntPMOTNAVGBERInitialize, ospfIfRetransInterval=ospfIfRetransInterval, briCrntPMTempTimeStamp=briCrntPMTempTimeStamp, pvxL2IFCrntPMTFRCTXValidity=pvxL2IFCrntPMTFRCTXValidity, oaCrntPMLaser1PowerTimeStamp=oaCrntPMLaser1PowerTimeStamp, geCrntPMOPRValue=geCrntPMOPRValue, fcPMThresholdIntervalTypeIdx=fcPMThresholdIntervalTypeIdx, stmnRemoteId=stmnRemoteId, ntpOldTimeAndDate=ntpOldTimeAndDate, ocnAlarmIndicationSignalClear=ocnAlarmIndicationSignalClear, xcvrCrntPMUSIZEValidity=xcvrCrntPMUSIZEValidity, stmnHistPMRSEBValue=stmnHistPMRSEBValue, geHistPMTBYCRXInitialize=geHistPMTBYCRXInitialize, vcnConcatMismatchClear=vcnConcatMismatchClear, xcvrCrntPMOTUBBEValidity=xcvrCrntPMOTUBBEValidity)
mibBuilder.exportSymbols("BTI-7000-MIB", geHistPMOPRMaxTimeStamp=geHistPMOPRMaxTimeStamp, xcvrCrntPMUASSValue=xcvrCrntPMUASSValue, fcCrntPMLBCTimeStamp=fcCrntPMLBCTimeStamp, envIceBuildupCond=envIceBuildupCond, vcnProtSwOpEntry=vcnProtSwOpEntry, ocnProtSwOpTypeIdx=ocnProtSwOpTypeIdx, ethL1IFCrntPMOTUBBEValue=ethL1IFCrntPMOTUBBEValue, ocnCrntPMTypeIdx=ocnCrntPMTypeIdx, stmnCrntPMMSUASInitialize=stmnCrntPMMSUASInitialize, vcnBERTh=vcnBERTh, xcvrHistPMRSOFSTimeStamp=xcvrHistPMRSOFSTimeStamp, xcvrXCDestIdx=xcvrXCDestIdx, ntpAssocSrvrNotReachableCond=ntpAssocSrvrNotReachableCond, geCustom1=geCustom1, ocnHistPMOPRMaxInitialize=ocnHistPMOPRMaxInitialize, ocnRowStatus=ocnRowStatus, geHistPMOPRValue=geHistPMOPRValue, stmnCrntPMTempValidity=stmnCrntPMTempValidity, shelfMismatchCond=shelfMismatchCond, fcCrntPMOPRMinTimeStamp=fcCrntPMOPRMinTimeStamp, briCrntPMShelfIdx=briCrntPMShelfIdx, actCondTable=actCondTable, ethL1IFCrntPMOTNAVGBERValidity=ethL1IFCrntPMOTNAVGBERValidity, xcvrHistPMJABRValue=xcvrHistPMJABRValue, fcRemotePathFailureCond=fcRemotePathFailureCond, fcCrntPMOPTMaxValidity=fcCrntPMOPTMaxValidity, amdHistPMOPTTimeStamp=amdHistPMOPTTimeStamp, stsnPMThresholdByPortSESPValue=stsnPMThresholdByPortSESPValue, xcvrCrntPMNBYTCRValue=xcvrCrntPMNBYTCRValue, stmnCrntPMOTNAVGBERTimeStamp=stmnCrntPMOTNAVGBERTimeStamp, stmnCrntPMNBITCR64BitValue=stmnCrntPMNBITCR64BitValue, briHistPMSupplyVoltageTimeStamp=briHistPMSupplyVoltageTimeStamp, xcvrHistPMBCSTInitialize=xcvrHistPMBCSTInitialize, oaHistPMFSOOPTValidity=oaHistPMFSOOPTValidity, geHistPMSIZE128To255TimeStamp=geHistPMSIZE128To255TimeStamp, xcvrHistPMNBYTCR64BitValue=xcvrHistPMNBYTCR64BitValue, xcvrVendorPN2=xcvrVendorPN2, geHistPMJABRValidity=geHistPMJABRValidity, ethL1IFCrntPMShelfIdx=ethL1IFCrntPMShelfIdx, ospfIfIdx=ospfIfIdx, cpCondNotifications=cpCondNotifications, shelfInvSerialNum=shelfInvSerialNum, oaHistPMOBRValidity=oaHistPMOBRValidity, olsOTNPayloadMismatchCond=olsOTNPayloadMismatchCond, synchronization=synchronization, xcvrCrntPMOTUESValidity=xcvrCrntPMOTUESValidity, geLaserStatus=geLaserStatus, pvxL2IntfCoSProfileId=pvxL2IntfCoSProfileId, envBatDschrdCond=envBatDschrdCond, stmnHistPMOTUSESTimeStamp=stmnHistPMOTUSESTimeStamp, ethIntfDuplex=ethIntfDuplex, pluggableInvUSI=pluggableInvUSI, xcvrCrntPMOPTMinInitialize=xcvrCrntPMOPTMinInitialize, xcvrHistPMOPRValidity=xcvrHistPMOPRValidity, stmnHistPMRSSESValidity=stmnHistPMRSSESValidity, geCrntPMIntervalTypeIdx=geCrntPMIntervalTypeIdx, vcgXCSrcIdx=vcgXCSrcIdx, vcnForcedSwitchToProtectionClear=vcnForcedSwitchToProtectionClear, xcvrCrntPMSIZEOver1518Initialize=xcvrCrntPMSIZEOver1518Initialize, geHistPMFRDRInitialize=geHistPMFRDRInitialize, serialBaudRate=serialBaudRate, ethL1IFCrntPMOPTMinInitialize=ethL1IFCrntPMOPTMinInitialize, briHistPMOPTAvgInitialize=briHistPMOPTAvgInitialize, oscSlotIdx=oscSlotIdx, briHistPMOPTMinInitialize=briHistPMOPTMinInitialize, oaCaseTempClear=oaCaseTempClear, envSmokeClear=envSmokeClear, ethL1IFCrntPMNBITCR64BitInitialize=ethL1IFCrntPMNBITCR64BitInitialize, ethL1IFHistPMUNCRCDWValue=ethL1IFHistPMUNCRCDWValue, oaModeSetting=oaModeSetting, ocnCrntPMOTUSESInitialize=ocnCrntPMOTUSESInitialize, vcnHistPMHPSESInitialize=vcnHistPMHPSESInitialize, geCrntPMSESValidity=geCrntPMSESValidity, ocnCrntPMCVLValidity=ocnCrntPMCVLValidity, ospfRouterId=ospfRouterId, stmnHistPMLBCValue=stmnHistPMLBCValue, xcvrHistPMOTNBERTimeStamp=xcvrHistPMOTNBERTimeStamp, geCrntPMLBCValue=geCrntPMLBCValue, geLossOfSignalClear=geLossOfSignalClear, xcvrMissingClear=xcvrMissingClear, ocnPMThresholdSlotIdx=ocnPMThresholdSlotIdx, ocnCrntPMESLValidity=ocnCrntPMESLValidity, stmnOpticalPwrTransmittedMinTh=stmnOpticalPwrTransmittedMinTh, xcvrHistPMOPTMaxValue=xcvrHistPMOPTMaxValue, ethL1IFCrntPMOPRMinValidity=ethL1IFCrntPMOPRMinValidity, envLwPresClear=envLwPresClear, odunXCDestSlotIdx=odunXCDestSlotIdx, ethL1IFCrntPMOTUSESValue=ethL1IFCrntPMOTUSESValue, stmnHistPMOTUUASValidity=stmnHistPMOTUUASValidity, olsOTUTrailTraceMismatchClear=olsOTUTrailTraceMismatchClear, ethL1IFCrntPMINVBLKTimeStamp=ethL1IFCrntPMINVBLKTimeStamp, ethL1IFPMThresholdCVValue=ethL1IFPMThresholdCVValue, oaOpticalPwrTransmitted=oaOpticalPwrTransmitted, ocnOperStatus=ocnOperStatus, geMediaRate=geMediaRate, ethL1IFHistPMNBITCR64BitTimeStamp=ethL1IFHistPMNBITCR64BitTimeStamp, ethL1IFHistPMOPTTimeStamp=ethL1IFHistPMOPTTimeStamp, ospfIfSubIdx=ospfIfSubIdx, slotInvUnknownClear=slotInvUnknownClear, vcnLossOfPointerClear=vcnLossOfPointerClear, ethL1IFHistPMCVValue=ethL1IFHistPMCVValue, tl1UserLockoutClear=tl1UserLockoutClear, fcHistPMOPRValidity=fcHistPMOPRValidity, stsnProtSwStatus=stsnProtSwStatus, xcvrHistPMOTUSESTimeStamp=xcvrHistPMOTUSESTimeStamp, xcvrCrntPMSupplyVoltageValidity=xcvrCrntPMSupplyVoltageValidity, ocnCrntPMOPTMinInitialize=ocnCrntPMOPTMinInitialize, fcHistPMIntervalTypeIdx=fcHistPMIntervalTypeIdx, xcvrCrntPMOPTAvgValue=xcvrCrntPMOPTAvgValue, pvxL2IFHistPMFRGTInitialize=pvxL2IFHistPMFRGTInitialize, fcCrntPMTempTimeStamp=fcCrntPMTempTimeStamp, ipExtIntfAddress=ipExtIntfAddress, stmnCrntPMOPRValidity=stmnCrntPMOPRValidity, xcvrCrntPMRSUASValue=xcvrCrntPMRSUASValue, xcvrHistPMINVBLKTimeStamp=xcvrHistPMINVBLKTimeStamp, stmnCrntPMMSESTimeStamp=stmnCrntPMMSESTimeStamp, slotInvPackMfgLoc=slotInvPackMfgLoc, stmnCrntPMNBITCRInitialize=stmnCrntPMNBITCRInitialize, pvxL2IFCrntPMSIZE64TimeStamp=pvxL2IFCrntPMSIZE64TimeStamp, xcvrLossOfFrameCond=xcvrLossOfFrameCond, briBitRate=briBitRate, stmnHistPMOPTTimeStamp=stmnHistPMOPTTimeStamp, ocnHistPMESSValue=ocnHistPMESSValue, ocnHistPMOTUOFSValidity=ocnHistPMOTUOFSValidity, ethL1IFPMThresholdOTUESValue=ethL1IFPMThresholdOTUESValue, actCondTableEntryIdx=actCondTableEntryIdx, cpSynchronizationTypeIdx=cpSynchronizationTypeIdx, geCrntPMSIZE128To255TimeStamp=geCrntPMSIZE128To255TimeStamp, geCrntPMTPFCRXInitialize=geCrntPMTPFCRXInitialize, odunXCProtShelfNum=odunXCProtShelfNum, xcvrOpenConnectionIndicatorClear=xcvrOpenConnectionIndicatorClear, xcvrHistPMIdx=xcvrHistPMIdx, xcvrHistPMUASSTimeStamp=xcvrHistPMUASSTimeStamp, shelfInvSysCommCond=shelfInvSysCommCond, xcvrPMThresholdUASValue=xcvrPMThresholdUASValue, ethL1IFCrntPMOTUSESTimeStamp=ethL1IFCrntPMOTUSESTimeStamp, xcvrCrntPMTFRCRXInitialize=xcvrCrntPMTFRCRXInitialize, ocnCrntPMOPRValue=ocnCrntPMOPRValue, ocnCrntPMESSInitialize=ocnCrntPMESSInitialize, gePMThresholdESValue=gePMThresholdESValue, pvxL2IFCrntPMSIZE65To127Initialize=pvxL2IFCrntPMSIZE65To127Initialize, envHiAirClear=envHiAirClear, xcvrCrntPMESSTimeStamp=xcvrCrntPMESSTimeStamp, geCrntPMTempValidity=geCrntPMTempValidity, pvxL2IFHistPMTFRCRXInitialize=pvxL2IFHistPMTFRCRXInitialize, briLossOfLockCond=briLossOfLockCond, geCrntPMMCSTValidity=geCrntPMMCSTValidity, stsnCrntPMUASPTimeStamp=stsnCrntPMUASPTimeStamp, ocnHistPMTypeIdx=ocnHistPMTypeIdx, xcvrHistPMNBYTCRTimeStamp=xcvrHistPMNBYTCRTimeStamp, vcnTable=vcnTable, ospfIfType=ospfIfType, xcvrHistPMSupplyVoltageTimeStamp=xcvrHistPMSupplyVoltageTimeStamp, cpHistPMEntry=cpHistPMEntry, geXcvrMismatchClear=geXcvrMismatchClear, ocnHistPMOPRAvgValidity=ocnHistPMOPRAvgValidity, stsnAlarmIndicationSignalClear=stsnAlarmIndicationSignalClear, xcvrHistPMSIZE128To255Initialize=xcvrHistPMSIZE128To255Initialize, ocnHistPMOPTMaxInitialize=ocnHistPMOPTMaxInitialize, xcvrHistPMOPTMinTimeStamp=xcvrHistPMOPTMinTimeStamp, oaHistPMCaseTempValue=oaHistPMCaseTempValue, xcvrHistPMSIZEOver1518Initialize=xcvrHistPMSIZEOver1518Initialize, briHistPMOPRAvgValidity=briHistPMOPRAvgValidity, oscIPAddr=oscIPAddr, stsnShelfIdx=stsnShelfIdx, pluggableInvPortIdx=pluggableInvPortIdx, ocnHistPMOPTMaxValue=ocnHistPMOPTMaxValue, fcHistPMESInitialize=fcHistPMESInitialize, ocnPMThresholdSEFSSValue=ocnPMThresholdSEFSSValue, cpDbRestoreInProgressClear=cpDbRestoreInProgressClear, slotInvHTThreshExceededCond=slotInvHTThreshExceededCond, stmnCrntPMOTNBERValue=stmnCrntPMOTNBERValue, xcvrCrntPMCVSValidity=xcvrCrntPMCVSValidity, geHistPMFRDRValidity=geHistPMFRDRValidity, ethL1IFHistPMLBCValidity=ethL1IFHistPMLBCValidity, pvxL2IFHistPMTBYCRXValue=pvxL2IFHistPMTBYCRXValue, xcvrProtGrpWorkTypeIdx=xcvrProtGrpWorkTypeIdx, geLossOfSyncClear=geLossOfSyncClear, olsOpticalPwrTransmittedMinClear=olsOpticalPwrTransmittedMinClear, geHistPMOPTAvgValidity=geHistPMOPTAvgValidity, olsLossOfFrameCond=olsLossOfFrameCond, pvxL2IFCrntPMTFRCRXTimeStamp=pvxL2IFCrntPMTFRCRXTimeStamp, xcvrReceivedLockoutClear=xcvrReceivedLockoutClear, cpRestartOpEntry=cpRestartOpEntry, ocnCrntPMNBITCR64BitValue=ocnCrntPMNBITCR64BitValue, geCrntPMTBYCRXValue=geCrntPMTBYCRXValue, ethL1IFHistPMOPTMaxInitialize=ethL1IFHistPMOPTMaxInitialize, oaHistPMVOAValue=oaHistPMVOAValue, xcvrCrntPMRSEBInitialize=xcvrCrntPMRSEBInitialize, xcvrHistPMFCSEValue=xcvrHistPMFCSEValue, xcvrHistPMUASInitialize=xcvrHistPMUASInitialize, xcvrPMThresholdShelfIdx=xcvrPMThresholdShelfIdx, ocnPMThresholdOTUEBValue=ocnPMThresholdOTUEBValue, slotInvPwrFeedBFuseFailCond=slotInvPwrFeedBFuseFailCond, tl1LogEntry=tl1LogEntry, stsnHistPMFCPValue=stsnHistPMFCPValue, feSlotIdx=feSlotIdx, xcvrCrntPMSIZEOver1518TimeStamp=xcvrCrntPMSIZEOver1518TimeStamp, pvxL2IFHistPMPortTypeIdx=pvxL2IFHistPMPortTypeIdx, tl1LogMessage=tl1LogMessage, xcvrProtGrpWorkShelfIdx=xcvrProtGrpWorkShelfIdx, pluggableInvMissingClear=pluggableInvMissingClear, ethL1IFCrntPMUNCRCDWValidity=ethL1IFCrntPMUNCRCDWValidity, ocnHistPMOTNBERTimeStamp=ocnHistPMOTNBERTimeStamp, ocnHistPMOTUOFSTimeStamp=ocnHistPMOTUOFSTimeStamp, netMgmtIdx=netMgmtIdx, stmnHistPMOTUEBValue=stmnHistPMOTUEBValue, xcvrCrntPMOTNBERInitialize=xcvrCrntPMOTNBERInitialize, stmnHistPMNBITCRTimeStamp=stmnHistPMNBITCRTimeStamp, ethL1IFHistPMOPRMaxTimeStamp=ethL1IFHistPMOPRMaxTimeStamp, geSlotIdx=geSlotIdx, pvxL2IFCrntPMSIZEOver1518Validity=pvxL2IFCrntPMSIZEOver1518Validity, snmpTrapRcvVersion=snmpTrapRcvVersion, amdOpticalPwrReceivedMaxClear=amdOpticalPwrReceivedMaxClear, cpSynchronizationSwEvtType=cpSynchronizationSwEvtType, envDoorOpenCond=envDoorOpenCond, stmnCrntPMLBCValue=stmnCrntPMLBCValue, swUpgradeInactiveRelNum=swUpgradeInactiveRelNum, shelfIdx=shelfIdx, ocnCrntPMNBITCR64BitValidity=ocnCrntPMNBITCR64BitValidity, geHistPMOPTMinInitialize=geHistPMOPTMinInitialize, stmnSignalDegradeCond=stmnSignalDegradeCond, xcvrHistPMFCSETimeStamp=xcvrHistPMFCSETimeStamp, geHistPMSIZE1024To1518TimeStamp=geHistPMSIZE1024To1518TimeStamp, oaLaserMaxTempShutdownClear=oaLaserMaxTempShutdownClear, ocnCrntPMSESLValue=ocnCrntPMSESLValue, shelfAdminStatus=shelfAdminStatus, amdId1=amdId1, xcvrOperStatus=xcvrOperStatus, pvxL2IntfPriTCMapProfName=pvxL2IntfPriTCMapProfName, ocnFiberType=ocnFiberType, geCrntPMOPTAvgValidity=geCrntPMOPTAvgValidity, amdCrntPMTable=amdCrntPMTable, pvxL2IntfIngressFiltering=pvxL2IntfIngressFiltering, stmnOpticalPwrTransmittedMinClear=stmnOpticalPwrTransmittedMinClear, envToxicGasCond=envToxicGasCond, xcvrCrntPMOTNBERTimeStamp=xcvrCrntPMOTNBERTimeStamp, ocnCrntPMUNCRCDWInitialize=ocnCrntPMUNCRCDWInitialize, stmnSlotIdx=stmnSlotIdx, ocnHistPMOTUEBTimeStamp=ocnHistPMOTUEBTimeStamp, ntpClientAuthKey=ntpClientAuthKey, netMgmtIPAddr=netMgmtIPAddr, geCrntPMTBYCTXInitialize=geCrntPMTBYCTXInitialize, geHistPMSIZE65To127Initialize=geHistPMSIZE65To127Initialize, ethL1IFHistPMNBYTCRValue=ethL1IFHistPMNBYTCRValue, oaLaserMinTempShutdownClear=oaLaserMinTempShutdownClear, slotInvDataShelfIdx=slotInvDataShelfIdx, ocnHistPMNBITCRTimeStamp=ocnHistPMNBITCRTimeStamp, xcvrCrntPMOTUSESInitialize=xcvrCrntPMOTUSESInitialize, geCrntPMTempTimeStamp=geCrntPMTempTimeStamp, pvxL2IFCrntPMShelfIdx=pvxL2IFCrntPMShelfIdx, slotInvVersionMismatchClear=slotInvVersionMismatchClear, geHistPMSIZE64Value=geHistPMSIZE64Value, cpFanFeedFailCond=cpFanFeedFailCond)
mibBuilder.exportSymbols("BTI-7000-MIB", stmnOpticalPwrReceivedMinClear=stmnOpticalPwrReceivedMinClear, stmnPMThresholdTable=stmnPMThresholdTable, amdCrntPMLitChnValidity=amdCrntPMLitChnValidity, geHistPMUASValue=geHistPMUASValue, stmnHistPMMSSESTimeStamp=stmnHistPMMSSESTimeStamp, dataCommsCondNotifications=dataCommsCondNotifications, gePMThresholdSESValue=gePMThresholdSESValue, oaOpticalPwrTransmittedMaxCond=oaOpticalPwrTransmittedMaxCond, ethL1IFHistPMOTUBBETimeStamp=ethL1IFHistPMOTUBBETimeStamp, stsnHistPMFCPInitialize=stsnHistPMFCPInitialize, geCrntPMOPRMinInitialize=geCrntPMOPRMinInitialize, dbBackupAndRestoreType=dbBackupAndRestoreType, ocnHistPMOPRMaxTimeStamp=ocnHistPMOPRMaxTimeStamp, stmnHistPMMSBBETimeStamp=stmnHistPMMSBBETimeStamp, oscAdminStatus=oscAdminStatus, xcvrHistPMSIZE128To255TimeStamp=xcvrHistPMSIZE128To255TimeStamp, ocnCrntPMNBYTCR64BitValue=ocnCrntPMNBYTCR64BitValue, ethL1IFCrntPMOTNAVGBERTimeStamp=ethL1IFCrntPMOTNAVGBERTimeStamp, pvxL2IFCrntPMTPFCRXValue=pvxL2IFCrntPMTPFCRXValue, ethL1IFHistPMOPRAvgValue=ethL1IFHistPMOPRAvgValue, feTable=feTable, xcvrHistPMOTUEBTimeStamp=xcvrHistPMOTUEBTimeStamp, ocnCrntPMNBITCRValue=ocnCrntPMNBITCRValue, amdOpticalPwrTransmitted=amdOpticalPwrTransmitted, ethL1IFCrntPMTempTimeStamp=ethL1IFCrntPMTempTimeStamp, oaBackReflectionSafetyOverrideClear=oaBackReflectionSafetyOverrideClear, adminOperations=adminOperations, amdLossOfSignalClear=amdLossOfSignalClear, ethL1IFCrntPMESTimeStamp=ethL1IFCrntPMESTimeStamp, vcnLockoutProtectionClear=vcnLockoutProtectionClear, envFirDetrClear=envFirDetrClear, ocnHistPMPortIdx=ocnHistPMPortIdx, envDoorOpenClear=envDoorOpenClear, slotInvPackTestLoc=slotInvPackTestLoc, shelfCustom2=shelfCustom2, xcvrCrntPMMCSTValue=xcvrCrntPMMCSTValue, ocnHistPMSupplyVoltage2Value=ocnHistPMSupplyVoltage2Value, xcvrHistPMUSIZEInitialize=xcvrHistPMUSIZEInitialize, ocnHistPMOPTMinInitialize=ocnHistPMOPTMinInitialize, oaCrntPMEffectiveGainValidity=oaCrntPMEffectiveGainValidity, ethL1IFCrntPMTable=ethL1IFCrntPMTable, geHistPMOPRAvgValidity=geHistPMOPRAvgValidity, stmnOpticalPwrReceivedMinTh=stmnOpticalPwrReceivedMinTh, xcvrLoopbackType=xcvrLoopbackType, pluggableInvUnpluginEvt=pluggableInvUnpluginEvt, fcOpticalPwrReceivedMaxClear=fcOpticalPwrReceivedMaxClear, fcLaserStatus=fcLaserStatus, pvxL2IFCrntPMMCSTValidity=pvxL2IFCrntPMMCSTValidity, oaIdx=oaIdx, geCrntPMOPRMaxInitialize=geCrntPMOPRMaxInitialize, stmnHistPMMSBBEValue=stmnHistPMMSBBEValue, pvxL2IntfSTpid=pvxL2IntfSTpid, xcvrHistPMOPRValue=xcvrHistPMOPRValue, eventNotifState=eventNotifState, xcvrHistPMOPTMaxTimeStamp=xcvrHistPMOPTMaxTimeStamp, ocnPMThresholdEntry=ocnPMThresholdEntry, briCrntPMOPTMaxValidity=briCrntPMOPTMaxValidity, pvxL2IFCrntPMSIZE256To511Initialize=pvxL2IFCrntPMSIZE256To511Initialize, ocnCrntPMOTUBBEValue=ocnCrntPMOTUBBEValue, ocnCrntPMCVSTimeStamp=ocnCrntPMCVSTimeStamp, xcvrCrntPMESSValue=xcvrCrntPMESSValue, ethL1IFHistPMNBITCR64BitInitialize=ethL1IFHistPMNBITCR64BitInitialize, ocnEvtNotifications=ocnEvtNotifications, xcvrHistPMOPTTimeStamp=xcvrHistPMOPTTimeStamp, ocnCrntPMNBITCR64BitInitialize=ocnCrntPMNBITCR64BitInitialize, fcCrntPMOPTAvgValue=fcCrntPMOPTAvgValue, slotInvCommClear=slotInvCommClear, dbBackupAndRestore=dbBackupAndRestore, pluggableInvVendorRev=pluggableInvVendorRev, geHistPMCVValue=geHistPMCVValue, stmnHistPMOPTValue=stmnHistPMOPTValue, xcvrCrntPMOTUOFSTimeStamp=xcvrCrntPMOTUOFSTimeStamp, pvxL2IFCrntPMUSIZEValidity=pvxL2IFCrntPMUSIZEValidity, fcBandwidthMismatchClear=fcBandwidthMismatchClear, dbChangeEvt=dbChangeEvt, ocnCrntPMOTUSESValidity=ocnCrntPMOTUSESValidity, pvxL2IntfMcastLimit=pvxL2IntfMcastLimit, pluggableInvWavelength=pluggableInvWavelength, vcgIdx=vcgIdx, oscOperStatus=oscOperStatus, ethL1IFHistPMOPTMinInitialize=ethL1IFHistPMOPTMinInitialize, briHistPMOPRMinValue=briHistPMOPRMinValue, xcvrHistPMUNCRCDWInitialize=xcvrHistPMUNCRCDWInitialize, actCondNotifIdx=actCondNotifIdx, ocnPMThresholdOTUUASValue=ocnPMThresholdOTUUASValue, pvxL2IntfOperStatus=pvxL2IntfOperStatus, ocnHistPMSupplyVoltage2Validity=ocnHistPMSupplyVoltage2Validity, ocnSlotIdx=ocnSlotIdx, oaCrntPMFSOOPTValue=oaCrntPMFSOOPTValue, briCrntPMOPRMaxValidity=briCrntPMOPRMaxValidity, geHistPMSIZE65To127Value=geHistPMSIZE65To127Value, geHistPMOSIZEValidity=geHistPMOSIZEValidity, ocnCrntPMTempValidity=ocnCrntPMTempValidity, xcvrCrntPMSIZE256To511TimeStamp=xcvrCrntPMSIZE256To511TimeStamp, oaOpticalPwrTransmittedMinClear=oaOpticalPwrTransmittedMinClear, geHistPMFCSEValue=geHistPMFCSEValue, pvxL2IFCrntPMSIZE128To255Value=pvxL2IFCrntPMSIZE128To255Value, xcvrHistPMUASValue=xcvrHistPMUASValue, ocnHistPMOTUUASValue=ocnHistPMOTUUASValue, stmnProtSwitchEvt=stmnProtSwitchEvt, xcvrCrntPMJABRTimeStamp=xcvrCrntPMJABRTimeStamp, geCrntPMFRGTInitialize=geCrntPMFRGTInitialize, oscLossOfSignalCond=oscLossOfSignalCond, xcvrHistPMFRGTInitialize=xcvrHistPMFRGTInitialize, ocnHistPMOTNBERValidity=ocnHistPMOTNBERValidity, xcvrHistPMOPTAvgTimeStamp=xcvrHistPMOPTAvgTimeStamp, ethL1IFCrntPMOTUSESInitialize=ethL1IFCrntPMOTUSESInitialize, ocnCrntPMSupplyVoltage2Value=ocnCrntPMSupplyVoltage2Value, xcvrHistPMMCSTValidity=xcvrHistPMMCSTValidity, ocnOpticalPwrReceivedMaxClear=ocnOpticalPwrReceivedMaxClear, fcCondNotifications=fcCondNotifications, fcOpticalPwrTransmitted=fcOpticalPwrTransmitted, xcvrCrntPMOTUEBTimeStamp=xcvrCrntPMOTUEBTimeStamp, xcvrEvtNotifications=xcvrEvtNotifications, xcvrHistPMCVSValidity=xcvrHistPMCVSValidity, ocnHistPMShelfIdx=ocnHistPMShelfIdx, fcCrntPMOPRMinValidity=fcCrntPMOPRMinValidity, oaHistPMLaser2TempValue=oaHistPMLaser2TempValue, stsnXCDestSlotIdx=stsnXCDestSlotIdx, tcaMontype=tcaMontype, amdTypeIdx=amdTypeIdx, stmnOperStatus=stmnOperStatus, geCrntPMSIZE512To1023Value=geCrntPMSIZE512To1023Value, geHistPMOPTMinValue=geHistPMOPTMinValue, odunXCProtNum=odunXCProtNum, odunIdx=odunIdx, ocnHistPMNBITCRValidity=ocnHistPMNBITCRValidity, geGfpMode=geGfpMode, xcvrCrntPMOTNBERValue=xcvrCrntPMOTNBERValue, stmnHistPMOPTAvgInitialize=stmnHistPMOPTAvgInitialize, feShelfIdx=feShelfIdx, pvxL2IFPMThresholdPortTypeIdx=pvxL2IFPMThresholdPortTypeIdx, oaCrntPMLaser2PowerValue=oaCrntPMLaser2PowerValue, xcvrCrntPMRSSESValue=xcvrCrntPMRSSESValue, shelfInvDiscoveredIPAddress=shelfInvDiscoveredIPAddress, pluggableInvUnknownCond=pluggableInvUnknownCond, cpOperStatQlfr=cpOperStatQlfr, stmnCrntPMRSESInitialize=stmnCrntPMRSESInitialize, vcgXCEntry=vcgXCEntry, dataComms=dataComms, stsnPMThresholdByPortCVPValue=stsnPMThresholdByPortCVPValue, dataCommsEvtNotifications=dataCommsEvtNotifications, vcnForcedSwitchToWorkingClear=vcnForcedSwitchToWorkingClear, xcvrHistPMINVBLKValidity=xcvrHistPMINVBLKValidity, amdTALNACond=amdTALNACond, fcHistPMOPTTimeStamp=fcHistPMOPTTimeStamp, operations=operations, oaCrntPMOaIdx=oaCrntPMOaIdx, cpHistPMIntervalTypeIdx=cpHistPMIntervalTypeIdx, xcvrCrntPMSIZE1024To1518Value=xcvrCrntPMSIZE1024To1518Value, stmnHistPMOTUUASTimeStamp=stmnHistPMOTUUASTimeStamp, stsnHistPMCVPValidity=stsnHistPMCVPValidity, pvxL2IFCrntPMTBYCTXValue=pvxL2IFCrntPMTBYCTXValue, xcvrCrntPMOSIZEInitialize=xcvrCrntPMOSIZEInitialize, xcvrCrntPMLBCValue=xcvrCrntPMLBCValue, olsLocalFaultClear=olsLocalFaultClear, feSpeed=feSpeed, ocnCrntPMUASSValidity=ocnCrntPMUASSValidity, ethL1IFHistPMSESTimeStamp=ethL1IFHistPMSESTimeStamp, stmnHistPMOTNAVGBERValidity=stmnHistPMOTNAVGBERValidity, vcgXCTable=vcgXCTable, xcvrHistPMFRDRValue=xcvrHistPMFRDRValue, odunXCSrcIdx=odunXCSrcIdx, envIceBuildupClear=envIceBuildupClear, stsnHistPMShelfIdx=stsnHistPMShelfIdx, gcc0ConfigMode=gcc0ConfigMode, stmnHistPMMSUASValue=stmnHistPMMSUASValue, stmnHistPMOTNAVGBERInitialize=stmnHistPMOTNAVGBERInitialize, stmnHistPMOTUBBEValidity=stmnHistPMOTUBBEValidity, envLwFuelCond=envLwFuelCond, ocnCrntPMOPTAvgValidity=ocnCrntPMOPTAvgValidity, stmnCrntPMRSEBValidity=stmnCrntPMRSEBValidity, xcvrHistPMRSOFSValue=xcvrHistPMRSOFSValue, geCrntPMTFRCTXInitialize=geCrntPMTFRCTXInitialize, briHistPMOPRValidity=briHistPMOPRValidity, vcnCrntPMTable=vcnCrntPMTable, cpCustom2=cpCustom2, fcHistPMOPRMinTimeStamp=fcHistPMOPRMinTimeStamp, actAlarmInstanceIdx=actAlarmInstanceIdx, xcvrHistPMUASSInitialize=xcvrHistPMUASSInitialize, xcvrCrntPMOPRAvgValidity=xcvrCrntPMOPRAvgValidity, xcvrCrntPMSIZE65To127TimeStamp=xcvrCrntPMSIZE65To127TimeStamp, geOpticalPwrReceivedMinClear=geOpticalPwrReceivedMinClear, geCrntPMSupplyVoltageValue=geCrntPMSupplyVoltageValue, vcnHistPMHPESValue=vcnHistPMHPESValue, stsnHistPMSlotIdx=stsnHistPMSlotIdx, snmpTrapRcvIdx=snmpTrapRcvIdx, stmnHistPMOTNAVGBERTimeStamp=stmnHistPMOTNAVGBERTimeStamp, xcvrCrntPMOPTMaxValue=xcvrCrntPMOPTMaxValue, pluggableInvRestartOpTable=pluggableInvRestartOpTable, xcvrHistPMFCSEInitialize=xcvrHistPMFCSEInitialize, stsnCrntPMESPValidity=stsnCrntPMESPValidity, stmnHistPMOPRValidity=stmnHistPMOPRValidity, oaCrntPMSSIOPRValue=oaCrntPMSSIOPRValue, feMediaRate=feMediaRate, netMgmtMediaRate=netMgmtMediaRate, slotInvPackTestDate=slotInvPackTestDate, ocnCrntPMOPTMinValidity=ocnCrntPMOPTMinValidity, geCrntPMTPFCTXInitialize=geCrntPMTPFCTXInitialize, ocnCrntPMSESLValidity=ocnCrntPMSESLValidity, slotInvSlotTypeIdx=slotInvSlotTypeIdx, ocnCrntPMSupplyVoltageTimeStamp=ocnCrntPMSupplyVoltageTimeStamp, ethL1IFCrntPMSupplyVoltageValue=ethL1IFCrntPMSupplyVoltageValue, ospfLsdbEntry=ospfLsdbEntry, pvxL2IFHistPMFRDRInitialize=pvxL2IFHistPMFRDRInitialize, xcvrOpticalPwrTransmittedMinClear=xcvrOpticalPwrTransmittedMinClear, geHistPMUSIZETimeStamp=geHistPMUSIZETimeStamp, geCrntPMMCSTValue=geCrntPMMCSTValue, ethL1IFHistPMOTNAVGBERInitialize=ethL1IFHistPMOTNAVGBERInitialize, briCrntPMOPRMaxInitialize=briCrntPMOPRMaxInitialize, pluggableInvCondNotifications=pluggableInvCondNotifications, ethL1IFHistPMOTUESValue=ethL1IFHistPMOTUESValue, ethL1IFHistPMOTUSESTimeStamp=ethL1IFHistPMOTUSESTimeStamp, oaCaseTempCond=oaCaseTempCond, ocnHistPMESLInitialize=ocnHistPMESLInitialize, ethL1IFHistPMOTNAVGBERValue=ethL1IFHistPMOTNAVGBERValue, geCrntPMTBYCRXInitialize=geCrntPMTBYCRXInitialize, geCrntPMOPRAvgValidity=geCrntPMOPRAvgValidity, xcvrHistPMOPTMaxValidity=xcvrHistPMOPTMaxValidity, xcvrCrntPMESValue=xcvrCrntPMESValue, ocnHistPMOPTAvgTimeStamp=ocnHistPMOPTAvgTimeStamp, geHistPMESInitialize=geHistPMESInitialize, vcgSlotIdx=vcgSlotIdx, actCondReportType=actCondReportType, slotInvHTThreshExceededClear=slotInvHTThreshExceededClear, xcvrGrid=xcvrGrid, fcHistPMOPRAvgTimeStamp=fcHistPMOPRAvgTimeStamp, ethIntfVendorPN1=ethIntfVendorPN1, ocnHistPMUNCRCDWValue=ocnHistPMUNCRCDWValue, ocnHistPMOPRMaxValue=ocnHistPMOPRMaxValue, oaHistPMLaser1CurrentValidity=oaHistPMLaser1CurrentValidity, geHistPMSIZE512To1023Value=geHistPMSIZE512To1023Value, ocnCrntPMSupplyVoltageValue=ocnCrntPMSupplyVoltageValue, evtDescription=evtDescription, stsnHistPMSESPTimeStamp=stsnHistPMSESPTimeStamp, pvxL2IFCrntPMSIZE512To1023TimeStamp=pvxL2IFCrntPMSIZE512To1023TimeStamp, oaHistPMLaser1CurrentTimeStamp=oaHistPMLaser1CurrentTimeStamp, xcvrCrntPMNBITCR64BitValue=xcvrCrntPMNBITCR64BitValue, ocnHistPMSupplyVoltageValidity=ocnHistPMSupplyVoltageValidity, cpCrntPMShelfIdx=cpCrntPMShelfIdx, shelfInvPwrFeedBFailClear=shelfInvPwrFeedBFailClear, xcvrLFClear=xcvrLFClear, ethL1IFHistPMSupplyVoltage2TimeStamp=ethL1IFHistPMSupplyVoltage2TimeStamp, stmnHistPMRSBBETimeStamp=stmnHistPMRSBBETimeStamp, briOpticalPwrTransmittedMaxTh=briOpticalPwrTransmittedMaxTh, stmnProtGrpProtTypeIdx=stmnProtGrpProtTypeIdx, pvxL2IFHistPMSIZE64Value=pvxL2IFHistPMSIZE64Value, latestTl1LogNum=latestTl1LogNum, ospfGeneralTable=ospfGeneralTable, ospfIfSwitchId=ospfIfSwitchId, xcvrHistPMOPRMaxTimeStamp=xcvrHistPMOPRMaxTimeStamp, geCrntPMSIZE256To511Value=geCrntPMSIZE256To511Value, ospfAreaId=ospfAreaId, ethL1IFHistPMNBITCRTimeStamp=ethL1IFHistPMNBITCRTimeStamp)
mibBuilder.exportSymbols("BTI-7000-MIB", ethL1IFCrntPMOPRValidity=ethL1IFCrntPMOPRValidity, xcvrProtGrpRowStatus=xcvrProtGrpRowStatus, stmnLpbkOpCmd=stmnLpbkOpCmd, stmnHistPMOTUSESValidity=stmnHistPMOTUSESValidity, pluggableInvSlotIdx=pluggableInvSlotIdx, vcgPortIdx=vcgPortIdx, ethL1IFCrntPMOTNBERValidity=ethL1IFCrntPMOTNBERValidity, amdHistPMVOATimeStamp=amdHistPMVOATimeStamp, ocnCrntPMUASLInitialize=ocnCrntPMUASLInitialize, ethL1IFCrntPMOTUSESValidity=ethL1IFCrntPMOTUSESValidity, stsnCrntPMCVPValidity=stsnCrntPMCVPValidity, stmnCrntPMOPRMinTimeStamp=stmnCrntPMOPRMinTimeStamp, stmnBER=stmnBER, pvxL2IFHistPMShelfIdx=pvxL2IFHistPMShelfIdx, oaCrntPMLaser1PowerValidity=oaCrntPMLaser1PowerValidity, stmnLineMapping=stmnLineMapping, oaOpticalPwrReceivedMinTh=oaOpticalPwrReceivedMinTh, stmnHistPMMSEBTimeStamp=stmnHistPMMSEBTimeStamp, stsnHistPMIntervalIdx=stsnHistPMIntervalIdx, fcCrntPMUASInitialize=fcCrntPMUASInitialize, fcLpbkOpTable=fcLpbkOpTable, envClFanClear=envClFanClear, xcvrCrntPMCVValue=xcvrCrntPMCVValue, stmnCrntPMMSBBEValidity=stmnCrntPMMSBBEValidity, fcPhyPMMon=fcPhyPMMon, xcvrCrntPMSESSValue=xcvrCrntPMSESSValue, xcvrCrntPMOTNAVGBERValue=xcvrCrntPMOTNAVGBERValue, slotInvOperations=slotInvOperations, ocnProtGrpProtSlotIdx=ocnProtGrpProtSlotIdx, DbBackupAndRestoreType=DbBackupAndRestoreType, xcvrCrntPMUNCRCDWTimeStamp=xcvrCrntPMUNCRCDWTimeStamp, xcvrProtSwEvtType=xcvrProtSwEvtType, geLossOfSyncCond=geLossOfSyncCond, stmnHistPMOPRMaxTimeStamp=stmnHistPMOPRMaxTimeStamp, cpDbRestoreInProgressCond=cpDbRestoreInProgressCond, briWavelength=briWavelength, ocnHistPMCVLTimeStamp=ocnHistPMCVLTimeStamp, stmnTypeIdx=stmnTypeIdx, ethIntfLagId=ethIntfLagId, stmnCrntPMOPTMaxInitialize=stmnCrntPMOPTMaxInitialize, stmnHistPMOTUEBInitialize=stmnHistPMOTUEBInitialize, stmnHistPMRSESTimeStamp=stmnHistPMRSESTimeStamp, lagCondNotifications=lagCondNotifications, xcvrCrntPMSupplyVoltageValue=xcvrCrntPMSupplyVoltageValue, ethL1IFCrntPMOPRTimeStamp=ethL1IFCrntPMOPRTimeStamp, amdHistPMSlotIdx=amdHistPMSlotIdx, stsnBERTh=stsnBERTh, ethL1IFHistPMLBCValue=ethL1IFHistPMLBCValue, ethL1IFHistPMINVBLKValue=ethL1IFHistPMINVBLKValue, ethL1IFHistPMESValidity=ethL1IFHistPMESValidity, stmnHistPMOTUOFSTimeStamp=stmnHistPMOTUOFSTimeStamp, xcvrCrntPMJABRValidity=xcvrCrntPMJABRValidity, xcvrHistPMNBYTCRValue=xcvrHistPMNBYTCRValue, xcvrHistPMOTUBBETimeStamp=xcvrHistPMOTUBBETimeStamp, geHistPMOPRMinValue=geHistPMOPRMinValue, fcHistPMSESTimeStamp=fcHistPMSESTimeStamp, xcvrHistPMTempTimeStamp=xcvrHistPMTempTimeStamp, oaCaseTempMaxShutdownTh=oaCaseTempMaxShutdownTh, cpHistPMIntervalIdx=cpHistPMIntervalIdx, fcHistPMTempTimeStamp=fcHistPMTempTimeStamp, ocnHistPMOPRMinValue=ocnHistPMOPRMinValue, stmnVendorPN1=stmnVendorPN1, stmnLossOfSignalCond=stmnLossOfSignalCond, ospfLsdbType=ospfLsdbType, geCrntPMUASValidity=geCrntPMUASValidity, ethL1IFCrntPMSupplyVoltage2Validity=ethL1IFCrntPMSupplyVoltage2Validity, fcCrntPMUASValidity=fcCrntPMUASValidity, stmnProtGrpTable=stmnProtGrpTable, cpDbRecoveryFailClear=cpDbRecoveryFailClear, ethL1IFCrntPMNBITCRInitialize=ethL1IFCrntPMNBITCRInitialize, stmnOpticalPwrTransmittedMaxCond=stmnOpticalPwrTransmittedMaxCond, protection=protection, envHiTempClear=envHiTempClear, ocnCrntPMOTUESValue=ocnCrntPMOTUESValue, envFuseClear=envFuseClear, shelfMissingClear=shelfMissingClear, stmnHistPMRSSESTimeStamp=stmnHistPMRSSESTimeStamp, xcvrLossOfFrameClear=xcvrLossOfFrameClear, swMemberCondNotifications=swMemberCondNotifications, pvxL2IFHistPMSIZEOver1518TimeStamp=pvxL2IFHistPMSIZEOver1518TimeStamp, pluggableInvConnectorType=pluggableInvConnectorType, stmnLpbkOpShelfIdx=stmnLpbkOpShelfIdx, ocnDCCTransparency=ocnDCCTransparency, ocnHistPMSEFSSTimeStamp=ocnHistPMSEFSSTimeStamp, geLpbkOpPortIdx=geLpbkOpPortIdx, envBatteryClear=envBatteryClear, shelfInvMfgDate=shelfInvMfgDate, slotInvDataSlotIdx=slotInvDataSlotIdx, briCrntPMOPRMinTimeStamp=briCrntPMOPRMinTimeStamp, briHistPMLBCValue=briHistPMLBCValue, stmnCrntPMMSSESInitialize=stmnCrntPMMSSESInitialize, vcnAlarmIndicationSignalClear=vcnAlarmIndicationSignalClear, fcOperStatQlfr=fcOperStatQlfr, xcvrHistPMOTUUASValidity=xcvrHistPMOTUUASValidity, briOpticalPwrReceivedMinClear=briOpticalPwrReceivedMinClear, stmnHistPMTempValidity=stmnHistPMTempValidity, xcvrHistPMOTUEBInitialize=xcvrHistPMOTUEBInitialize, amdHistPMLitChnValue=amdHistPMLitChnValue, oaCrntPMMSInsLossValidity=oaCrntPMMSInsLossValidity, ocnCrntPMCVSValue=ocnCrntPMCVSValue, ethL1IFHistPMOTUUASValidity=ethL1IFHistPMOTUUASValidity, geHistPMLBCTimeStamp=geHistPMLBCTimeStamp, xcvrProtGrpProtShelfIdx=xcvrProtGrpProtShelfIdx, fcLpbkOpShelfIdx=fcLpbkOpShelfIdx, pvxL2IntfIngressBandwidthProfile=pvxL2IntfIngressBandwidthProfile, envCondAttrTable=envCondAttrTable, geHistPMSIZE65To127Validity=geHistPMSIZE65To127Validity, xcvrHistPMOPRMaxInitialize=xcvrHistPMOPRMaxInitialize, ocnHistPMOTUUASTimeStamp=ocnHistPMOTUUASTimeStamp, geCrntPMFRGTValidity=geCrntPMFRGTValidity, xcvrCrntPMNBITCRInitialize=xcvrCrntPMNBITCRInitialize, geHistPMOPRMaxValue=geHistPMOPRMaxValue, xcvrLpbkOpTypeIdx=xcvrLpbkOpTypeIdx, stmnCrntPMOTUBBEValidity=stmnCrntPMOTUBBEValidity, geHistPMSIZEOver1518Validity=geHistPMSIZEOver1518Validity, olsLossOfSyncCond=olsLossOfSyncCond, passivePortLineIdx=passivePortLineIdx, briCondNotifications=briCondNotifications, oaHistPMLaser1TempTimeStamp=oaHistPMLaser1TempTimeStamp, xcvrHistPMLBCValidity=xcvrHistPMLBCValidity, geHistPMCVValidity=geHistPMCVValidity, fcLpbkOpPortIdx=fcLpbkOpPortIdx, stmnHistPMOPTValidity=stmnHistPMOPTValidity, xcvrLpbkOpSlotIdx=xcvrLpbkOpSlotIdx, geOpticalPwrTransmittedMinCond=geOpticalPwrTransmittedMinCond, ocnHistPMSESLInitialize=ocnHistPMSESLInitialize, gcc0ConfigSlotIdx=gcc0ConfigSlotIdx, ipExtIntfType=ipExtIntfType, pvxL2IntfCtrlFrmProfileName=pvxL2IntfCtrlFrmProfileName, xcvrHistPMRSEBValue=xcvrHistPMRSEBValue, olsLocalFaultCond=olsLocalFaultCond, fcOpticalPwrReceivedMinTh=fcOpticalPwrReceivedMinTh, ethIntfOpticalPwrTransmitted=ethIntfOpticalPwrTransmitted, ethL1IFCrntPMUASInitialize=ethL1IFCrntPMUASInitialize, geHistPMBCSTValidity=geHistPMBCSTValidity, geHistPMSupplyVoltageTimeStamp=geHistPMSupplyVoltageTimeStamp, xcvrCrntPMOTUBBETimeStamp=xcvrCrntPMOTUBBETimeStamp, ethIntfCustom1=ethIntfCustom1, oaHistPMEffectiveGainValue=oaHistPMEffectiveGainValue, gePayloadMismatchCond=gePayloadMismatchCond, xcvrHistPMSIZE64Validity=xcvrHistPMSIZE64Validity, oaHistPMEffectiveGainTimeStamp=oaHistPMEffectiveGainTimeStamp, gePMThresholdCVValue=gePMThresholdCVValue, stmnProtGrpId=stmnProtGrpId, eventNotifCtrl=eventNotifCtrl, xcvrCrntPMFCSETimeStamp=xcvrCrntPMFCSETimeStamp, ocnHistPMOTUESValue=ocnHistPMOTUESValue, xcvrHistPMOPTMinValidity=xcvrHistPMOPTMinValidity, xcvrLpbkOpEntry=xcvrLpbkOpEntry, ethL1IFCrntPMUNCRCDWInitialize=ethL1IFCrntPMUNCRCDWInitialize, briStatusChangeEvt=briStatusChangeEvt, pluggableInvFailClear=pluggableInvFailClear, vcnLockoutProtectionCond=vcnLockoutProtectionCond, geHistPMSIZE64Validity=geHistPMSIZE64Validity, xcvrCrntPMFRGTValidity=xcvrCrntPMFRGTValidity, stmnHistPMRSESValidity=stmnHistPMRSESValidity, briPhyPMMon=briPhyPMMon, ethL1IFCrntPMTempValidity=ethL1IFCrntPMTempValidity, stmnHistPMUNCRCDWTimeStamp=stmnHistPMUNCRCDWTimeStamp, stmnHistPMOTUBBETimeStamp=stmnHistPMOTUBBETimeStamp, vcnForcedSwitchToProtectionCond=vcnForcedSwitchToProtectionCond, ocnOpticalPwrReceivedMinCond=ocnOpticalPwrReceivedMinCond, stsnCrntPMPortIdx=stsnCrntPMPortIdx, xcvrHistPMOPTValidity=xcvrHistPMOPTValidity, envRectLoCond=envRectLoCond, stsnXCRowStatus=stsnXCRowStatus, briHistPMShelfIdx=briHistPMShelfIdx, cpSynchronizationSecProtStatQlfr=cpSynchronizationSecProtStatQlfr, vcnXCSrcShelfIdx=vcnXCSrcShelfIdx, pvxL2IFHistPMSIZE128To255Value=pvxL2IFHistPMSIZE128To255Value, xcvrHistPMFRDRValidity=xcvrHistPMFRDRValidity, geCrntPMTempValue=geCrntPMTempValue, ethL1IFHistPMOPTMinValidity=ethL1IFHistPMOPTMinValidity, ipExtIntfAddressType=ipExtIntfAddressType, cpSoftwareBankAFailClear=cpSoftwareBankAFailClear, ethL1IFHistPMOPTAvgTimeStamp=ethL1IFHistPMOPTAvgTimeStamp, cpOperations=cpOperations, pvxL2IFHistPMSIZE1024To1518Validity=pvxL2IFHistPMSIZE1024To1518Validity, ocnPMThresholdESLValue=ocnPMThresholdESLValue, fcAutoEnableTimer=fcAutoEnableTimer, xcvrCrntPMOPRValue=xcvrCrntPMOPRValue, ocnHistPMESSValidity=ocnHistPMESSValidity, stmnDCCTransparency=stmnDCCTransparency, ocnHistPMCVLValidity=ocnHistPMCVLValidity, gcc0ConfigShelfIdx=gcc0ConfigShelfIdx, dbBackupAndRestoreCheckAlm=dbBackupAndRestoreCheckAlm, envExplGsCond=envExplGsCond, pvxL2IFCrntPMTBYCTXTimeStamp=pvxL2IFCrntPMTBYCTXTimeStamp, shelfInvExpansionShelfCommLOSCond=shelfInvExpansionShelfCommLOSCond, pvxL2IFHistPMSIZEOver1518Initialize=pvxL2IFHistPMSIZEOver1518Initialize, xcvrHistPMSIZEOver1518Value=xcvrHistPMSIZEOver1518Value, pluggableInvMinBitRate=pluggableInvMinBitRate, oscIPMask=oscIPMask, oaCrntPMCaseTempValidity=oaCrntPMCaseTempValidity, stsnHistPMSESPValue=stsnHistPMSESPValue, amdSlotIdx=amdSlotIdx, oaCrntPMOBRTimeStamp=oaCrntPMOBRTimeStamp, neTimeZone=neTimeZone, oaHistPMMSInsLossValue=oaHistPMMSInsLossValue, vcnHistPMTable=vcnHistPMTable, xcvrCrntPMNBITCR64BitValidity=xcvrCrntPMNBITCR64BitValidity, networkNeighborTable=networkNeighborTable, oaCrntPMVOAValue=oaCrntPMVOAValue, xcvrCrntPMUASSValidity=xcvrCrntPMUASSValidity, oaLaserMinTempShutdownCond=oaLaserMinTempShutdownCond, ocnOperations=ocnOperations, fcHistPMSESValue=fcHistPMSESValue, DbBackupAndRestoreCmd=DbBackupAndRestoreCmd, oaOpticalPwrTransmittedMinCond=oaOpticalPwrTransmittedMinCond, pvxObjects=pvxObjects, vcnPMThresholdByPortTable=vcnPMThresholdByPortTable, envPumpClear=envPumpClear, stmnEntry=stmnEntry, xcvrCrntPMNBITCRValidity=xcvrCrntPMNBITCRValidity, pvxL2IFCrntPMOSIZEValue=pvxL2IFCrntPMOSIZEValue, pluggableInvVendorName=pluggableInvVendorName, amdEntry=amdEntry, ocnPMThresholdOTUESValue=ocnPMThresholdOTUESValue, geCrntPMTFRCRXValidity=geCrntPMTFRCRXValidity, stmnHistPMRSSESValue=stmnHistPMRSSESValue, geHistPMPortIdx=geHistPMPortIdx, pvxL2IFCrntPMUSIZETimeStamp=pvxL2IFCrntPMUSIZETimeStamp, cpCrntPMCpTypeIdx=cpCrntPMCpTypeIdx, ocnHistPMSupplyVoltageValue=ocnHistPMSupplyVoltageValue, slotInvPackRev=slotInvPackRev, xcvrCrntPMSIZE256To511Value=xcvrCrntPMSIZE256To511Value, snmpTrapRcvEntry=snmpTrapRcvEntry, pvxL2IFCrntPMBCSTValidity=pvxL2IFCrntPMBCSTValidity, passivePortTypeIdx=passivePortTypeIdx, stmnCrntPMOPTTimeStamp=stmnCrntPMOPTTimeStamp, ocnCrntPMNBITCRValidity=ocnCrntPMNBITCRValidity, pvxL2IFHistPMSwitchIdx=pvxL2IFHistPMSwitchIdx, fcHistPMOPRMinInitialize=fcHistPMOPRMinInitialize, ethL1IFHistPMOTNBERInitialize=ethL1IFHistPMOTNBERInitialize, neAutoDeProv=neAutoDeProv, xcvrCrntPMOTUBBEValue=xcvrCrntPMOTUBBEValue, xcvrCrntPMFRGTTimeStamp=xcvrCrntPMFRGTTimeStamp, ethL1IFCrntPMIntervalTypeIdx=ethL1IFCrntPMIntervalTypeIdx, envLwFuelClear=envLwFuelClear, vcnHistPMHPUASInitialize=vcnHistPMHPUASInitialize, ipExtIntfProxyARPStatus=ipExtIntfProxyARPStatus, oaHistPMIntervalTypeIdx=oaHistPMIntervalTypeIdx, vcnPMThresholdByPortTypeIdx=vcnPMThresholdByPortTypeIdx, shelfInvConfig=shelfInvConfig, ocnCrntPMOTNBERValue=ocnCrntPMOTNBERValue, oscSfpMissingCond=oscSfpMissingCond, ocnHistPMSEFSSValue=ocnHistPMSEFSSValue, dbBackupAndRestoreFilename=dbBackupAndRestoreFilename, pvxL2IntfPvid=pvxL2IntfPvid, geCrntPMOPTMaxValidity=geCrntPMOPTMaxValidity, xcvrHistPMOTUESTimeStamp=xcvrHistPMOTUESTimeStamp, ocnProtSwOpTable=ocnProtSwOpTable, xcvrOpticalPwrReceivedMinClear=xcvrOpticalPwrReceivedMinClear, xcvrHistPMSESSInitialize=xcvrHistPMSESSInitialize)
mibBuilder.exportSymbols("BTI-7000-MIB", fcCrntPMOPTAvgInitialize=fcCrntPMOPTAvgInitialize, oaCustom3=oaCustom3, envRectHiCond=envRectHiCond, xcvrHistPMSEFSSInitialize=xcvrHistPMSEFSSInitialize, xcvrCrntPMFRGTInitialize=xcvrCrntPMFRGTInitialize, stmnLoopbackCond=stmnLoopbackCond, stsnProtSwOpIdx=stsnProtSwOpIdx, oaLaserTempMaxShutdownTh=oaLaserTempMaxShutdownTh, ethL1IFCrntPMOTUEBValue=ethL1IFCrntPMOTUEBValue, xcvrRemoteId=xcvrRemoteId, geCrntPMSIZEOver1518TimeStamp=geCrntPMSIZEOver1518TimeStamp, ethL1IFCrntPMSupplyVoltageTimeStamp=ethL1IFCrntPMSupplyVoltageTimeStamp, vcnCrntPMHPBBEValue=vcnCrntPMHPBBEValue, geHistPMFCSEInitialize=geHistPMFCSEInitialize, ocnHistPMOTUUASInitialize=ocnHistPMOTUUASInitialize, ospfIfEntry=ospfIfEntry, xcvrHistPMOPRMaxValidity=xcvrHistPMOPRMaxValidity, dataCommsPingCmd=dataCommsPingCmd, tcaDateAndTime=tcaDateAndTime, amdCrntPMSlotIdx=amdCrntPMSlotIdx, envHiWindClear=envHiWindClear, ethL1IFCrntPMNBITCR64BitValue=ethL1IFCrntPMNBITCR64BitValue, xcvrCrntPMSIZE65To127Validity=xcvrCrntPMSIZE65To127Validity, ethL1IFCrntPMOPTAvgTimeStamp=ethL1IFCrntPMOPTAvgTimeStamp, ethL1IFCrntPMOTUUASInitialize=ethL1IFCrntPMOTUUASInitialize, xcvrCrntPMUASInitialize=xcvrCrntPMUASInitialize, xcvrHistPMESSValue=xcvrHistPMESSValue, pluggableInvRestartOpCmd=pluggableInvRestartOpCmd, ocnLossOfFrameCond=ocnLossOfFrameCond, pvxL2IFHistPMFRGTTimeStamp=pvxL2IFHistPMFRGTTimeStamp, fcHistPMSlotIdx=fcHistPMSlotIdx, xcvrOpticalPwrTransmittedMaxTh=xcvrOpticalPwrTransmittedMaxTh, geId1=geId1, cpUpgradeResult=cpUpgradeResult, pvxL2IFCrntPMPortIdx=pvxL2IFCrntPMPortIdx, pvxL2IFCrntPMTPFCRXTimeStamp=pvxL2IFCrntPMTPFCRXTimeStamp, pvxL2IFHistPMSIZE65To127TimeStamp=pvxL2IFHistPMSIZE65To127TimeStamp, xcvrCrntPMRSESValue=xcvrCrntPMRSESValue, geCrntPMSIZE65To127Validity=geCrntPMSIZE65To127Validity, xcvrPMThresholdESSValue=xcvrPMThresholdESSValue, xcvrHistPMSIZE64TimeStamp=xcvrHistPMSIZE64TimeStamp, oscRowStatus=oscRowStatus, ocnHistPMTempValidity=ocnHistPMTempValidity, stmnHistPMOPRMaxInitialize=stmnHistPMOPRMaxInitialize, ethL1IFCrntPMOPTAvgInitialize=ethL1IFCrntPMOPTAvgInitialize, xcvrHistPMRSSESValue=xcvrHistPMRSSESValue, xcvrHistPMOTUEBValue=xcvrHistPMOTUEBValue, ethL1IFCrntPMNBYTCR64BitValue=ethL1IFCrntPMNBYTCR64BitValue, vcnXCVcnTypeIdx=vcnXCVcnTypeIdx, fcHistPMSESValidity=fcHistPMSESValidity, vcnLossOfPointerCond=vcnLossOfPointerCond, xcvrHistPMTypeIdx=xcvrHistPMTypeIdx, xcvrHistPMOSIZETimeStamp=xcvrHistPMOSIZETimeStamp, xcvrCrntPMSESInitialize=xcvrCrntPMSESInitialize, pvxL2IFCrntPMTFRCRXInitialize=pvxL2IFCrntPMTFRCRXInitialize, netMgmtEntry=netMgmtEntry, ntpClientAssocRowStatus=ntpClientAssocRowStatus, xcvrCrntPMNBITCRTimeStamp=xcvrCrntPMNBITCRTimeStamp, stmnPMThresholdSlotIdx=stmnPMThresholdSlotIdx, pluggableInvCommClear=pluggableInvCommClear, stmnHistPMOPRMinValidity=stmnHistPMOPRMinValidity, ethL1IFCrntPMINVBLKInitialize=ethL1IFCrntPMINVBLKInitialize, ocnPMThresholdTypeIdx=ocnPMThresholdTypeIdx, ethL1IFHistPMNBITCR64BitValidity=ethL1IFHistPMNBITCR64BitValidity, dbBackupAndRestoreResult=dbBackupAndRestoreResult, ocnPMThresholdIntervalTypeIdx=ocnPMThresholdIntervalTypeIdx, serialEntry=serialEntry, stsnXCStsnTypeIdx=stsnXCStsnTypeIdx, xcvrCrntPMCVValidity=xcvrCrntPMCVValidity, ethL1IFHistPMOPTMinValue=ethL1IFHistPMOPTMinValue, ethL1IFHistPMOTUESInitialize=ethL1IFHistPMOTUESInitialize, miscellaneous=miscellaneous, geHistPMFRDRValue=geHistPMFRDRValue, stmnPMThresholdTypeIdx=stmnPMThresholdTypeIdx, stsnIdx=stsnIdx, pvxL2IFHistPMTPFCRXTimeStamp=pvxL2IFHistPMTPFCRXTimeStamp, stmnHistPMMSUASInitialize=stmnHistPMMSUASInitialize, xcvrCrntPMSIZE512To1023Value=xcvrCrntPMSIZE512To1023Value, oaHistPMEntry=oaHistPMEntry, ospfLsdbAge=ospfLsdbAge, cpHistPMShelfIdx=cpHistPMShelfIdx, xcvrXCSrcSlotIdx=xcvrXCSrcSlotIdx, stsnLossOfPointerClear=stsnLossOfPointerClear, xcvrCrntPMINVBLKInitialize=xcvrCrntPMINVBLKInitialize, stmnCrntPMOTUUASTimeStamp=stmnCrntPMOTUUASTimeStamp, briCrntPMOPRMinInitialize=briCrntPMOPRMinInitialize, stmnHistPMOPRTimeStamp=stmnHistPMOPRTimeStamp, stmnCrntPMSupplyVoltageTimeStamp=stmnCrntPMSupplyVoltageTimeStamp, cpSoftwareBankBFailClear=cpSoftwareBankBFailClear, stmnHistPMNBITCR64BitValidity=stmnHistPMNBITCR64BitValidity, ethL1IFHistPMNBYTCR64BitValue=ethL1IFHistPMNBYTCR64BitValue, fcCrntPMOPTValue=fcCrntPMOPTValue, pvxL2IFPMThresholdFRDRValue=pvxL2IFPMThresholdFRDRValue, xcvrCrntPMOTUUASValue=xcvrCrntPMOTUUASValue, oaHistPMOBRValue=oaHistPMOBRValue, fcStatusChangeEvt=fcStatusChangeEvt, fcCrntPMOPTValidity=fcCrntPMOPTValidity, geCrntPMESValue=geCrntPMESValue, ethL1IFHistPMOTUESValidity=ethL1IFHistPMOTUESValidity, xcvrPMThresholdCVValue=xcvrPMThresholdCVValue, xcvrBackwardDefectIndicatorCond=xcvrBackwardDefectIndicatorCond, briTxLockingClear=briTxLockingClear, stsnCrntPMEntry=stsnCrntPMEntry, geLossOfAlignmentCond=geLossOfAlignmentCond, xcvrPEC=xcvrPEC, vcnLockoutWorkingCond=vcnLockoutWorkingCond, pvxL2IFCrntPMFRDRValidity=pvxL2IFCrntPMFRDRValidity, slotInvHTASUnsupportedClear=slotInvHTASUnsupportedClear, odunCondNotifications=odunCondNotifications, vcnHistPMHPEBInitialize=vcnHistPMHPEBInitialize, oaRemoteId=oaRemoteId, xcvrHistPMRSUASTimeStamp=xcvrHistPMRSUASTimeStamp, oaCrntPMLaser1PowerValue=oaCrntPMLaser1PowerValue, fcLpbkOpEntry=fcLpbkOpEntry, ethL1IFCrntPMOTUOFSValue=ethL1IFCrntPMOTUOFSValue, cpCheckUpgradeResultEvt=cpCheckUpgradeResultEvt, stmnCrntPMTempTimeStamp=stmnCrntPMTempTimeStamp, pvxL2IFCrntPMTBYCTXInitialize=pvxL2IFCrntPMTBYCTXInitialize, geHistPMOPRTimeStamp=geHistPMOPRTimeStamp, ethL1IFHistPMSupplyVoltage2Validity=ethL1IFHistPMSupplyVoltage2Validity, pvxL2IFCrntPMOSIZETimeStamp=pvxL2IFCrntPMOSIZETimeStamp, ocnHistPMOPTValue=ocnHistPMOPTValue, geCrntPMTBYCRXValidity=geCrntPMTBYCRXValidity, geHistPMLBCValue=geHistPMLBCValue, pvxL2IFCrntPMSIZE1024To1518Value=pvxL2IFCrntPMSIZE1024To1518Value, ocnHistPMSESLTimeStamp=ocnHistPMSESLTimeStamp, shelfInvMissingCond=shelfInvMissingCond, stmnEvtNotifications=stmnEvtNotifications, xcvrSlotIdx=xcvrSlotIdx, xcvrCustom2=xcvrCustom2, xcvrPMThresholdIntervalTypeIdx=xcvrPMThresholdIntervalTypeIdx, ocnCrntPMOTUEBTimeStamp=ocnCrntPMOTUEBTimeStamp, ocnHistPMOTUESTimeStamp=ocnHistPMOTUESTimeStamp, pvxL2IFPMThresholdSwitchIdx=pvxL2IFPMThresholdSwitchIdx, xcvrHistPMOTNAVGBERValue=xcvrHistPMOTNAVGBERValue, oaOpticalPwrTransmittedMaxTh=oaOpticalPwrTransmittedMaxTh, pluggableInvNomBitRate=pluggableInvNomBitRate, actAlarmNotifIdx=actAlarmNotifIdx, geLpbkOpEntry=geLpbkOpEntry, amdCrntPMOPTTimeStamp=amdCrntPMOPTTimeStamp, pvxL2IFHistPMSIZE512To1023Value=pvxL2IFHistPMSIZE512To1023Value, ocnForcedSwitchToProtectionCond=ocnForcedSwitchToProtectionCond, ethL1IFCrntPMOTUESTimeStamp=ethL1IFCrntPMOTUESTimeStamp, mstpCondNotifications=mstpCondNotifications, geHistPMFRGTValidity=geHistPMFRGTValidity, briCrntPMOPRAvgValue=briCrntPMOPRAvgValue, tl1LogType=tl1LogType, stmnOpticalPwrTransmittedMaxClear=stmnOpticalPwrTransmittedMaxClear, stmnHistPMRSUASValue=stmnHistPMRSUASValue, fcCrntPMSESValidity=fcCrntPMSESValidity, ethL1IFHistPMUASValue=ethL1IFHistPMUASValue, ethL1IFHistPMOPTAvgValidity=ethL1IFHistPMOPTAvgValidity, stmnCrntPMRSUASValidity=stmnCrntPMRSUASValidity, stmnHistPMTempValue=stmnHistPMTempValue, xcvrProtSwOpSlotIdx=xcvrProtSwOpSlotIdx, oaCondNotifications=oaCondNotifications, oaOpticalBackReflection=oaOpticalBackReflection, xcvrCrntPMRSOFSInitialize=xcvrCrntPMRSOFSInitialize, xcvrPMThresholdFRGTValue=xcvrPMThresholdFRGTValue, amdId2=amdId2, ethL1IFCrntPMNBITCR64BitTimeStamp=ethL1IFCrntPMNBITCR64BitTimeStamp, stmnProtSwOpTable=stmnProtSwOpTable, fcPMThresholdPortIdx=fcPMThresholdPortIdx, condServiceAffecting=condServiceAffecting, fcCrntPMESValue=fcCrntPMESValue, xcvrHistPMSIZE64Value=xcvrHistPMSIZE64Value, shelfInvTestLoc=shelfInvTestLoc, geHistPMTPFCRXTimeStamp=geHistPMTPFCRXTimeStamp, xcvrHistPMOPTAvgValidity=xcvrHistPMOPTAvgValidity, oaSSIOpticalPwrReceived=oaSSIOpticalPwrReceived, geCrntPMUSIZEValue=geCrntPMUSIZEValue, geHistPMFRDRTimeStamp=geHistPMFRDRTimeStamp, slotInvUpgradeFailureClear=slotInvUpgradeFailureClear, stsnLossOfPointerCond=stsnLossOfPointerCond, vcnXCSrcIdx=vcnXCSrcIdx, ocnCrntPMOTUESValidity=ocnCrntPMOTUESValidity, ocnHistPMSEFSSInitialize=ocnHistPMSEFSSInitialize, stmnCrntPMNBITCR64BitTimeStamp=stmnCrntPMNBITCR64BitTimeStamp, xcvrRFICond=xcvrRFICond, dbChangeSecuEvt=dbChangeSecuEvt, slotInvUnsupportedPackCond=slotInvUnsupportedPackCond, geHistPMSIZE256To511Value=geHistPMSIZE256To511Value, fcOpticalPwrTransmittedMinTh=fcOpticalPwrTransmittedMinTh, geCrntPMSIZE512To1023Validity=geCrntPMSIZE512To1023Validity, xcvrHistPMSIZE64Initialize=xcvrHistPMSIZE64Initialize, ocnHistPMOTUBBEValue=ocnHistPMOTUBBEValue, ethL1IFHistPMOPRValidity=ethL1IFHistPMOPRValidity, oaOOBRSDOpShelfIdx=oaOOBRSDOpShelfIdx, odunSlotIdx=odunSlotIdx, oaHistPMLaser2CurrentValidity=oaHistPMLaser2CurrentValidity, ethL1IFHistPMOTUBBEInitialize=ethL1IFHistPMOTUBBEInitialize, xcvrPMThresholdSlotIdx=xcvrPMThresholdSlotIdx, stsnPortIdx=stsnPortIdx, xcvrCrntPMOTUUASInitialize=xcvrCrntPMOTUUASInitialize, vcgShelfIdx=vcgShelfIdx, stmnCrntPMSupplyVoltage2Value=stmnCrntPMSupplyVoltage2Value, geCrntPMOPRMaxTimeStamp=geCrntPMOPRMaxTimeStamp, geCrntPMSIZE128To255Initialize=geCrntPMSIZE128To255Initialize, envCondAttrDescription=envCondAttrDescription, stsnProtSwOpPortIdx=stsnProtSwOpPortIdx, vcnPMThresholdByPortSlotIdx=vcnPMThresholdByPortSlotIdx, geCrntPMOPRValidity=geCrntPMOPRValidity, pvxL2IFHistPMTFRCRXValue=pvxL2IFHistPMTFRCRXValue, ethL1IFHistPMOPRMaxInitialize=ethL1IFHistPMOPRMaxInitialize, pvxL2IFHistPMMCSTValidity=pvxL2IFHistPMMCSTValidity, briCrntPMOPRValue=briCrntPMOPRValue, xcvrHistPMINVBLKInitialize=xcvrHistPMINVBLKInitialize, stsnProtSwOpSlotIdx=stsnProtSwOpSlotIdx, ocnCrntPMOPRAvgInitialize=ocnCrntPMOPRAvgInitialize, vcnBER=vcnBER, stsnUnequippedClear=stsnUnequippedClear, oaHistPMOBRTimeStamp=oaHistPMOBRTimeStamp, vcnPMThresholdByPortHPUASValue=vcnPMThresholdByPortHPUASValue, geCrntPMSIZEOver1518Validity=geCrntPMSIZEOver1518Validity, xcvrHistPMBCSTValidity=xcvrHistPMBCSTValidity, xcvrCrntPMFRDRInitialize=xcvrCrntPMFRDRInitialize, envCpMinorClear=envCpMinorClear, xcvrCrntPMRSSESTimeStamp=xcvrCrntPMRSSESTimeStamp, ocnHistPMOTUOFSInitialize=ocnHistPMOTUOFSInitialize, ocnHistPMOPRMinInitialize=ocnHistPMOPRMinInitialize, geCrntPMUSIZEValidity=geCrntPMUSIZEValidity, amdShelfIdx=amdShelfIdx, briVendorPN3=briVendorPN3, xcvrPMThresholdTypeIdx=xcvrPMThresholdTypeIdx, ipExtIntfBroadcastAddress=ipExtIntfBroadcastAddress, xcvrHistPMSIZE65To127Value=xcvrHistPMSIZE65To127Value, slotInvUnknownCond=slotInvUnknownCond, feId1=feId1, ntpAssocSrvrNotRespondingClear=ntpAssocSrvrNotRespondingClear, xcvrHistPMOTUBBEValue=xcvrHistPMOTUBBEValue, pluggableInvVendorSerialNum=pluggableInvVendorSerialNum, ethL1IFHistPMOPRMinValue=ethL1IFHistPMOPRMinValue, amdOpticalPwrReceivedMinClear=amdOpticalPwrReceivedMinClear, stmnCrntPMOPTAvgValidity=stmnCrntPMOPTAvgValidity, stmnHistPMNBYTCR64BitValidity=stmnHistPMNBYTCR64BitValidity, fcCrntPMOPRValue=fcCrntPMOPRValue, ethL1IFCrntPMSESTimeStamp=ethL1IFCrntPMSESTimeStamp, xcvrCrntPMRSUASValidity=xcvrCrntPMRSUASValidity, oaOperStatus=oaOperStatus, xcvrHistPMCVSTimeStamp=xcvrHistPMCVSTimeStamp, oaOpticalPwrReceivedMaxTh=oaOpticalPwrReceivedMaxTh, olsSignalDegradeCond=olsSignalDegradeCond, pvxL2IFHistPMOSIZEValue=pvxL2IFHistPMOSIZEValue, ocnTable=ocnTable, olCondNotifications=olCondNotifications, stsnHistPMSESPInitialize=stsnHistPMSESPInitialize, xcvrCrntPMOPTMaxTimeStamp=xcvrCrntPMOPTMaxTimeStamp, stmnLockoutWorkingCond=stmnLockoutWorkingCond, olsSFPMissingCond=olsSFPMissingCond, vcnXCProtSlotNum=vcnXCProtSlotNum, ethL1IFCrntPMOPTAvgValue=ethL1IFCrntPMOPTAvgValue, xcvrCustom1=xcvrCustom1, gePMThresholdTable=gePMThresholdTable, pvxL2IFHistPMTPFCTXTimeStamp=pvxL2IFHistPMTPFCTXTimeStamp)
mibBuilder.exportSymbols("BTI-7000-MIB", xcvrWavelengthNotAchievableClear=xcvrWavelengthNotAchievableClear, olsOpticalPwrReceivedMinCond=olsOpticalPwrReceivedMinCond, ocnCrntPMNBYTCR64BitInitialize=ocnCrntPMNBYTCR64BitInitialize, geLpbkOpTable=geLpbkOpTable, ocnCrntPMOTNBERTimeStamp=ocnCrntPMOTNBERTimeStamp, envHiTempCond=envHiTempCond, ethL1IFCrntPMINVBLKValue=ethL1IFCrntPMINVBLKValue, geHistPMUSIZEValue=geHistPMUSIZEValue, feRemoteId=feRemoteId, vcnXCDestIdx=vcnXCDestIdx, xcvrPMThresholdSESSValue=xcvrPMThresholdSESSValue, geHistPMTFRCTXValidity=geHistPMTFRCTXValidity, fcCrntPMOPTMinInitialize=fcCrntPMOPTMinInitialize, briHistPMEntry=briHistPMEntry, fcLpbkOpSlotIdx=fcLpbkOpSlotIdx, ethIntfLldpRemChassisIdSubtype=ethIntfLldpRemChassisIdSubtype, ospfIfTransitDelay=ospfIfTransitDelay, snmpTrapRcvTable=snmpTrapRcvTable, olsBackwardDefectIndicatorClear=olsBackwardDefectIndicatorClear, cpEntry=cpEntry, ocnProtSwOpIdx=ocnProtSwOpIdx, vcnPMThresholdByPortIdx=vcnPMThresholdByPortIdx, geOpticalPwrReceivedMinTh=geOpticalPwrReceivedMinTh, olsBackwardDefectIndicatorCond=olsBackwardDefectIndicatorCond, ocnCrntPMOTUBBEValidity=ocnCrntPMOTUBBEValidity, stmnHistPMEntry=stmnHistPMEntry, stmnHistPMRSBBEInitialize=stmnHistPMRSBBEInitialize, vcnCrntPMHPUASValue=vcnCrntPMHPUASValue, ethL1IFCrntPMNBYTCRInitialize=ethL1IFCrntPMNBYTCRInitialize, snmpTrapRcvTTL=snmpTrapRcvTTL, briCrntPMLBCValue=briCrntPMLBCValue, stmnCrntPMIntervalTypeIdx=stmnCrntPMIntervalTypeIdx, briOpticalPwrReceivedMinTh=briOpticalPwrReceivedMinTh, xcvrOperStatQlfr=xcvrOperStatQlfr, feDuplex=feDuplex, xcvrCrntPMOPRMaxValue=xcvrCrntPMOPRMaxValue, stmnHistPMOPTMinInitialize=stmnHistPMOPTMinInitialize, ethL1IFHistPMOPRValue=ethL1IFHistPMOPRValue, netMgmtDuplex=netMgmtDuplex, geCrntPMMCSTTimeStamp=geCrntPMMCSTTimeStamp, stmnHistPMNBITCRValidity=stmnHistPMNBITCRValidity, cpSynchronizationTimingMode=cpSynchronizationTimingMode, stmnCrntPMOTNAVGBERValidity=stmnCrntPMOTNAVGBERValidity, ethL1IFHistPMNBITCRInitialize=ethL1IFHistPMNBITCRInitialize, shelfInvShortName=shelfInvShortName, oscIPBcast=oscIPBcast, ocnPMThresholdESSValue=ocnPMThresholdESSValue, briCrntPMOPTValidity=briCrntPMOPTValidity, geCrntPMTFRCTXTimeStamp=geCrntPMTFRCTXTimeStamp, geHistPMSIZE512To1023Validity=geHistPMSIZE512To1023Validity, fcCrntPMOPRAvgTimeStamp=fcCrntPMOPRAvgTimeStamp, ntpClientAssocIdx=ntpClientAssocIdx, ocnHistPMSupplyVoltage2TimeStamp=ocnHistPMSupplyVoltage2TimeStamp, pvxL2IFCrntPMTable=pvxL2IFCrntPMTable, xcvrHistPMSESTimeStamp=xcvrHistPMSESTimeStamp, stmnHistPMUNCRCDWValue=stmnHistPMUNCRCDWValue, ocnCrntPMNBITCR64BitTimeStamp=ocnCrntPMNBITCR64BitTimeStamp, vcnCrntPMTypeIdx=vcnCrntPMTypeIdx, pvxLldpEvtNotifications=pvxLldpEvtNotifications, pvxL2IFCrntPMSIZE128To255Initialize=pvxL2IFCrntPMSIZE128To255Initialize, ospfIdx=ospfIdx, geShelfIdx=geShelfIdx, geTcaEvt=geTcaEvt, xcvrHistPMUASTimeStamp=xcvrHistPMUASTimeStamp, ethL1IFCrntPMOPRMinValue=ethL1IFCrntPMOPRMinValue, pvxL2IFCrntPMSIZE64Validity=pvxL2IFCrntPMSIZE64Validity, xcvrCrntPMOPTMinValue=xcvrCrntPMOPTMinValue, cpUpgradeTransferResultEvt=cpUpgradeTransferResultEvt, xcvrHistPMRSEBTimeStamp=xcvrHistPMRSEBTimeStamp, xcvrProtGrpId=xcvrProtGrpId, ntpClientSyncState=ntpClientSyncState, stmnLockoutProtectionClear=stmnLockoutProtectionClear, stmnHistPMOPRMinInitialize=stmnHistPMOPRMinInitialize, oscStatusChangeEvt=oscStatusChangeEvt, netMgmtOperStatus=netMgmtOperStatus, ocnHistPMOPRMinTimeStamp=ocnHistPMOPRMinTimeStamp, geCrntPMSESInitialize=geCrntPMSESInitialize, oaCrntPMVOAValidity=oaCrntPMVOAValidity, ocnHistPMCVLValue=ocnHistPMCVLValue, vcnCrntPMHPEBInitialize=vcnCrntPMHPEBInitialize, briCrntPMOPTMaxTimeStamp=briCrntPMOPTMaxTimeStamp, briHistPMOPTMaxInitialize=briHistPMOPTMaxInitialize, stsnXCDestShelfIdx=stsnXCDestShelfIdx, oaCrntPMLaser2PowerTimeStamp=oaCrntPMLaser2PowerTimeStamp, xcvrLpbkOpCmd=xcvrLpbkOpCmd, ocnHistPMOTUESInitialize=ocnHistPMOTUESInitialize, fcXcvrMismatchCond=fcXcvrMismatchCond, xcvrHistPMSIZE512To1023Validity=xcvrHistPMSIZE512To1023Validity, geCrntPMESTimeStamp=geCrntPMESTimeStamp, ocnTcaEvt=ocnTcaEvt, xcvrCrntPMSIZE65To127Value=xcvrCrntPMSIZE65To127Value, condObjectType=condObjectType, briHistPMLBCTimeStamp=briHistPMLBCTimeStamp, stmnHistPMUNCRCDWInitialize=stmnHistPMUNCRCDWInitialize, ocnCrntPMOTUUASTimeStamp=ocnCrntPMOTUUASTimeStamp, oaAmplifierConditioningClear=oaAmplifierConditioningClear, geHistPMFRGTValue=geHistPMFRGTValue, pvxL2IntfDefaultPriority=pvxL2IntfDefaultPriority, stmnCrntPMOPTAvgValue=stmnCrntPMOPTAvgValue, stmnLossOfFrameCond=stmnLossOfFrameCond, stsnProtSwEvtType=stsnProtSwEvtType, pvxL2IFCrntPMFRGTTimeStamp=pvxL2IFCrntPMFRGTTimeStamp, xcvrOpticalPwrReceived=xcvrOpticalPwrReceived, stsnCrntPMFCPTimeStamp=stsnCrntPMFCPTimeStamp, ethL1IFPMThresholdSlotIdx=ethL1IFPMThresholdSlotIdx, ethL1IFPMThresholdPortIdx=ethL1IFPMThresholdPortIdx, stmnCrntPMNBYTCR64BitInitialize=stmnCrntPMNBYTCR64BitInitialize, stmnHistPMOPTMaxValue=stmnHistPMOPTMaxValue, passivePortGrid=passivePortGrid, xcvrCrntPMOSIZEValue=xcvrCrntPMOSIZEValue, stmnCrntPMNBITCR64BitInitialize=stmnCrntPMNBITCR64BitInitialize, pvxL2IFPMThresholdShelfIdx=pvxL2IFPMThresholdShelfIdx, dbChangeOID=dbChangeOID, ocnCrntPMOTUUASValidity=ocnCrntPMOTUUASValidity, xcvrHistPMFRGTValue=xcvrHistPMFRGTValue, tl1UserTable=tl1UserTable, geLossOfAlignmentClear=geLossOfAlignmentClear, pluggableInvUnknownClear=pluggableInvUnknownClear, cpCustom3=cpCustom3, briCustom1=briCustom1, actAlarmDescription=actAlarmDescription, xcvrCrntPMOTUSESValidity=xcvrCrntPMOTUSESValidity, xcvrCrntPMOPTMinValidity=xcvrCrntPMOPTMinValidity, snmpTrapRcvPort=snmpTrapRcvPort, ospfIfTable=ospfIfTable, briXcvrMismatchClear=briXcvrMismatchClear, ocnCrntPMOPTTimeStamp=ocnCrntPMOPTTimeStamp, fcLossOfSignalClear=fcLossOfSignalClear, stmnCrntPMOTUSESInitialize=stmnCrntPMOTUSESInitialize, cpSynchronizationSecRefBasicSSM=cpSynchronizationSecRefBasicSSM, pvxL2IFHistPMTBYCTXValue=pvxL2IFHistPMTBYCTXValue, ocnForcedSwitchToWorkingCond=ocnForcedSwitchToWorkingCond, swUpgradeFtpPswd=swUpgradeFtpPswd, geRowStatus=geRowStatus, geVendorPN1=geVendorPN1, fcWavelength=fcWavelength, xcvrHistPMOTUBBEValidity=xcvrHistPMOTUBBEValidity, stsnPMThresholdByPortSlotIdx=stsnPMThresholdByPortSlotIdx, gePMThresholdFCSEValue=gePMThresholdFCSEValue, ethL1IFCrntPMUASValue=ethL1IFCrntPMUASValue, stmnLockoutWorkingClear=stmnLockoutWorkingClear, vcnPMThresholdByPortHPESValue=vcnPMThresholdByPortHPESValue, fcCrntPMSupplyVoltageTimeStamp=fcCrntPMSupplyVoltageTimeStamp, ocnOpticalPwrTransmittedMaxCond=ocnOpticalPwrTransmittedMaxCond, ocnHistPMESLValue=ocnHistPMESLValue, pvxL2IFHistPMFRGTValidity=pvxL2IFHistPMFRGTValidity, ethL1IFCrntPMSupplyVoltageValidity=ethL1IFCrntPMSupplyVoltageValidity, ocnHistPMOTUOFSValue=ocnHistPMOTUOFSValue, cpAdminStatus=cpAdminStatus, ethL1IFCrntPMOPRAvgInitialize=ethL1IFCrntPMOPRAvgInitialize, ocnLineMapping=ocnLineMapping, oaCrntPMSSIOPRValidity=oaCrntPMSSIOPRValidity, passivePortShelfIdx=passivePortShelfIdx, fcCrntPMUASValue=fcCrntPMUASValue, stmnProtSwOpIdx=stmnProtSwOpIdx, slotInvSWVersion=slotInvSWVersion, stmnProtGrpWorkTypeIdx=stmnProtGrpWorkTypeIdx, pvxL2IntfShelfIdx=pvxL2IntfShelfIdx, oscCustom1=oscCustom1, ocnCrntPMOTUBBEInitialize=ocnCrntPMOTUBBEInitialize, oaGrid=oaGrid, ospfAdminStat=ospfAdminStat, pvxBridge=pvxBridge, olsSignalDegradeClear=olsSignalDegradeClear, ocnCrntPMOPRMinInitialize=ocnCrntPMOPRMinInitialize, pvxL2IFCrntPMTPFCTXTimeStamp=pvxL2IFCrntPMTPFCTXTimeStamp, xcvrCrntPMESSInitialize=xcvrCrntPMESSInitialize, xcvrCrntPMUSIZEInitialize=xcvrCrntPMUSIZEInitialize, xcvrHistPMSIZE256To511TimeStamp=xcvrHistPMSIZE256To511TimeStamp, geLpbkOpShelfIdx=geLpbkOpShelfIdx, vcnSignalDegradeClear=vcnSignalDegradeClear, briVendorPN2=briVendorPN2, stmnHistPMOPTAvgTimeStamp=stmnHistPMOPTAvgTimeStamp, fcShelfIdx=fcShelfIdx, amdHistPMTypeIdx=amdHistPMTypeIdx, ocnBERTh=ocnBERTh, slotInvCoolingUnitFailClear=slotInvCoolingUnitFailClear, ocnPMThresholdCVSValue=ocnPMThresholdCVSValue, stsnCrntPMIdx=stsnCrntPMIdx, pvxL2IFCrntPMTPFCTXValidity=pvxL2IFCrntPMTPFCTXValidity, xcvrOTNPayloadMismatchClear=xcvrOTNPayloadMismatchClear, pvxL2IFPMThresholdUSIZEValue=pvxL2IFPMThresholdUSIZEValue, tl1IpLockoutCond=tl1IpLockoutCond, stsnForcedSwitchToWorkingCond=stsnForcedSwitchToWorkingCond, xcvrReceivedTraceLabel=xcvrReceivedTraceLabel, xcvrCrntPMSEFSSTimeStamp=xcvrCrntPMSEFSSTimeStamp, oaHistPMCaseTempValidity=oaHistPMCaseTempValidity, fcCrntPMCVInitialize=fcCrntPMCVInitialize, xcvrHistPMNBITCRTimeStamp=xcvrHistPMNBITCRTimeStamp, geHistPMTFRCTXInitialize=geHistPMTFRCTXInitialize, xcvrCrntPMOTUEBValidity=xcvrCrntPMOTUEBValidity, dbBackupAndRestoreInvokeFilename=dbBackupAndRestoreInvokeFilename, xcvrHistPMSIZE128To255Value=xcvrHistPMSIZE128To255Value, stmnCrntPMMSSESValue=stmnCrntPMMSSESValue, cpRestartOpSlotIdx=cpRestartOpSlotIdx, snmpTrapRcvRowStatus=snmpTrapRcvRowStatus, geCrntPMSIZE256To511Validity=geCrntPMSIZE256To511Validity, pluggableInvTxDisableImpl=pluggableInvTxDisableImpl, pvxL2IFCrntPMSlotIdx=pvxL2IFCrntPMSlotIdx, fcPMThresholdESValue=fcPMThresholdESValue, xcvrCrntPMINVBLKValidity=xcvrCrntPMINVBLKValidity, briCrntPMOPTAvgInitialize=briCrntPMOPTAvgInitialize, oaOOBRSDOpEntry=oaOOBRSDOpEntry, briCrntPMOPRMaxValue=briCrntPMOPRMaxValue, xcvrHistPMCVInitialize=xcvrHistPMCVInitialize, ethL1IFHistPMOTUOFSTimeStamp=ethL1IFHistPMOTUOFSTimeStamp, vcgXCDestSlotIdx=vcgXCDestSlotIdx, pluggableInvMissingCond=pluggableInvMissingCond, fcCrntPMSESTimeStamp=fcCrntPMSESTimeStamp, ocnCrntPMOPRMaxValidity=ocnCrntPMOPRMaxValidity, oaOOBRSDOpSlotIdx=oaOOBRSDOpSlotIdx, oaLaserStatus=oaLaserStatus, fcOpticalPwrReceived=fcOpticalPwrReceived, ocnHistPMTempTimeStamp=ocnHistPMTempTimeStamp, ethL1IFCrntPMOTUUASTimeStamp=ethL1IFCrntPMOTUUASTimeStamp, setErrorInfo=setErrorInfo, neActiveGateway=neActiveGateway, pvxL2IntfSubPortNumber=pvxL2IntfSubPortNumber, olsOpticalPwrTransmittedMinCond=olsOpticalPwrTransmittedMinCond, vcgXCProtSlotNum=vcgXCProtSlotNum, ocnCrntPMIntervalTypeIdx=ocnCrntPMIntervalTypeIdx, xcvrHistPMRSOFSInitialize=xcvrHistPMRSOFSInitialize, stmnHistPMRSBBEValidity=stmnHistPMRSBBEValidity, geLoopbackCond=geLoopbackCond, stmnHistPMOPRAvgValue=stmnHistPMOPRAvgValue, cpStorageCardFailCond=cpStorageCardFailCond, ethL1IFHistPMPortIdx=ethL1IFHistPMPortIdx, xcvrLpbkOpShelfIdx=xcvrLpbkOpShelfIdx, xcvrCrntPMSIZEOver1518Value=xcvrCrntPMSIZEOver1518Value, xcvrHistPMESSValidity=xcvrHistPMESSValidity, stmnCrntPMOTNAVGBERInitialize=stmnCrntPMOTNAVGBERInitialize, ntpClientPollingRate=ntpClientPollingRate, ocnHistPMOPRAvgInitialize=ocnHistPMOPRAvgInitialize, xcvrPMThresholdFCSEValue=xcvrPMThresholdFCSEValue, ethL1IFCrntPMOPTValidity=ethL1IFCrntPMOPTValidity, ethL1IFHistPMOTUBBEValue=ethL1IFHistPMOTUBBEValue, xcvrLossOfSyncClear=xcvrLossOfSyncClear, briHistPMIntervalTypeIdx=briHistPMIntervalTypeIdx, amdCrntPMVOATimeStamp=amdCrntPMVOATimeStamp, stmnOpticalPwrReceivedMinCond=stmnOpticalPwrReceivedMinCond, ocnHistPMNBYTCR64BitValue=ocnHistPMNBYTCR64BitValue, slotInvPwrFeedAFuseFailCond=slotInvPwrFeedAFuseFailCond, briCrntPMLBCValidity=briCrntPMLBCValidity, ocnHistPMOPTAvgValue=ocnHistPMOPTAvgValue, briHistPMTable=briHistPMTable, xcvrHistPMOTUSESValue=xcvrHistPMOTUSESValue, vcnSignalDegradeCond=vcnSignalDegradeCond, xcvrHistPMNBITCRValue=xcvrHistPMNBITCRValue, stmnPMThresholdMSESValue=stmnPMThresholdMSESValue, geCrntPMOPTMinValue=geCrntPMOPTMinValue, xcvrCrntPMSIZE1024To1518TimeStamp=xcvrCrntPMSIZE1024To1518TimeStamp, stmnLpbkOpTypeIdx=stmnLpbkOpTypeIdx, oaHistPMSlotIdx=oaHistPMSlotIdx, ocnCrntPMOTUUASValue=ocnCrntPMOTUUASValue)
mibBuilder.exportSymbols("BTI-7000-MIB", xcvrCrntPMTypeIdx=xcvrCrntPMTypeIdx, vcnCrntPMHPSESValue=vcnCrntPMHPSESValue, ethL1IFCrntPMOPRMinTimeStamp=ethL1IFCrntPMOPRMinTimeStamp, pvxL2IFCrntPMFCSEValidity=pvxL2IFCrntPMFCSEValidity, ocnHistPMSESSValidity=ocnHistPMSESSValidity, xcvrCrntPMSIZE512To1023Initialize=xcvrCrntPMSIZE512To1023Initialize, ocnHistPMOPTMinTimeStamp=ocnHistPMOPTMinTimeStamp, fcCrntPMESInitialize=fcCrntPMESInitialize, stmnLpbkOpTable=stmnLpbkOpTable, briXcvrMismatchCond=briXcvrMismatchCond, geOperStatQlfr=geOperStatQlfr, gcc0ConfigTable=gcc0ConfigTable, briCrntPMSupplyVoltageValidity=briCrntPMSupplyVoltageValidity, amdCrntPMPortIdx=amdCrntPMPortIdx, ocnCrntPMOTUBBETimeStamp=ocnCrntPMOTUBBETimeStamp, ocnCrntPMCVSValidity=ocnCrntPMCVSValidity, geHistPMUSIZEInitialize=geHistPMUSIZEInitialize, xcvrHistPMSIZEOver1518Validity=xcvrHistPMSIZEOver1518Validity, xcvrAdminStatus=xcvrAdminStatus, ethL1IFCrntPMOTUUASValidity=ethL1IFCrntPMOTUUASValidity, passivePortId1=passivePortId1, oaHistPMVOAValidity=oaHistPMVOAValidity, xcvrHistPMOPTMinInitialize=xcvrHistPMOPTMinInitialize, dataCommsPingTable=dataCommsPingTable, xcvrHistPMRSUASValue=xcvrHistPMRSUASValue, fcHistPMOPRAvgValidity=fcHistPMOPRAvgValidity, xcvrProtocol=xcvrProtocol, amdTPLNAClear=amdTPLNAClear, ocnHistPMOPTMaxTimeStamp=ocnHistPMOPTMaxTimeStamp, xcvrCrntPMSESValidity=xcvrCrntPMSESValidity, shelfInvTempMaxCond=shelfInvTempMaxCond, xcvrShelfIdx=xcvrShelfIdx, stmnCrntPMOTUEBInitialize=stmnCrntPMOTUEBInitialize, xcvrCrntPMOPRAvgValue=xcvrCrntPMOPRAvgValue, ocnHistPMIntervalTypeIdx=ocnHistPMIntervalTypeIdx, geHistPMESTimeStamp=geHistPMESTimeStamp, ethL1IFHistPMNBYTCRInitialize=ethL1IFHistPMNBYTCRInitialize, fcLossOfSequenceCond=fcLossOfSequenceCond, gePMThresholdSlotIdx=gePMThresholdSlotIdx, briHistPMOPRTimeStamp=briHistPMOPRTimeStamp, xcvrCrntPMRSBBETimeStamp=xcvrCrntPMRSBBETimeStamp, envGenericCond=envGenericCond, fcHistPMCVValidity=fcHistPMCVValidity, geMACAddr=geMACAddr, ethL1IFHistPMOTUEBTimeStamp=ethL1IFHistPMOTUEBTimeStamp, ocnHistPMCVSInitialize=ocnHistPMCVSInitialize, amdHistPMLineIdx=amdHistPMLineIdx, notificationObjects=notificationObjects, amdOpticalAttenuationTarget=amdOpticalAttenuationTarget, fcRate=fcRate, ocnCrntPMSESSValidity=ocnCrntPMSESSValidity, stmnProtSwEvtType=stmnProtSwEvtType, geHistPMSIZE1024To1518Initialize=geHistPMSIZE1024To1518Initialize, vcnHistPMHPEBTimeStamp=vcnHistPMHPEBTimeStamp, stsnXCSrcShelfIdx=stsnXCSrcShelfIdx, pvxSlaMsmtEvtNotifications=pvxSlaMsmtEvtNotifications, ocnAdminStatus=ocnAdminStatus, odunTypeIdx=odunTypeIdx, geCrntPMSIZE1024To1518Validity=geCrntPMSIZE1024To1518Validity, ocnBER=ocnBER, xcvrCrntPMOPTMaxInitialize=xcvrCrntPMOPTMaxInitialize, pvxL2IFHistPMTFRCTXTimeStamp=pvxL2IFHistPMTFRCTXTimeStamp, oaTypeIdx=oaTypeIdx, xcvrPMThresholdOTUEBValue=xcvrPMThresholdOTUEBValue, xcvrOpenConnectionIndicatorCond=xcvrOpenConnectionIndicatorCond, neFPDetect=neFPDetect, fcOpticalPwrReceivedMaxCond=fcOpticalPwrReceivedMaxCond, fcCrntPMSupplyVoltageValue=fcCrntPMSupplyVoltageValue, xcvrHistPMRSSESValidity=xcvrHistPMRSSESValidity, envAirCondClear=envAirCondClear, passivePortRowStatus=passivePortRowStatus, ethL1IFHistPMOTUUASTimeStamp=ethL1IFHistPMOTUUASTimeStamp, briCrntPMEntry=briCrntPMEntry, ocnHistPMUNCRCDWTimeStamp=ocnHistPMUNCRCDWTimeStamp, xcvrCrntPMEntry=xcvrCrntPMEntry, ocnVendorPN1=ocnVendorPN1, ethL1IFHistPMOPTValidity=ethL1IFHistPMOPTValidity, briCrntPMTempValue=briCrntPMTempValue, passivePortEntry=passivePortEntry, stsnHistPMESPValidity=stsnHistPMESPValidity, xcvrPMThresholdOTUUASValue=xcvrPMThresholdOTUUASValue, geHistPMOSIZETimeStamp=geHistPMOSIZETimeStamp, cpRestartOpShelfIdx=cpRestartOpShelfIdx, xcvrPMThresholdUSIZEValue=xcvrPMThresholdUSIZEValue, geVendorPN2=geVendorPN2, geHistPMSIZEOver1518Value=geHistPMSIZEOver1518Value, envCpMinorCond=envCpMinorCond, oaHistPMLaser2CurrentTimeStamp=oaHistPMLaser2CurrentTimeStamp, ocnOpticalPwrTransmittedMaxClear=ocnOpticalPwrTransmittedMaxClear, stmnHistPMMSEBValue=stmnHistPMMSEBValue, oaLaser2Current=oaLaser2Current, pvxL2IFHistPMSIZEOver1518Validity=pvxL2IFHistPMSIZEOver1518Validity, swUpgradeInvokeRelNum=swUpgradeInvokeRelNum, xcvrBackwardDefectIndicatorClear=xcvrBackwardDefectIndicatorClear, geVendorPN3=geVendorPN3, fcCustom1=fcCustom1, geCrntPMCVTimeStamp=geCrntPMCVTimeStamp, amdTALNAClear=amdTALNAClear, stmnHistPMMSBBEInitialize=stmnHistPMMSBBEInitialize, vcgXCProtNum=vcgXCProtNum, fcCrntPMTempValue=fcCrntPMTempValue, pluggableInvRestartOpShelfIdx=pluggableInvRestartOpShelfIdx, xcvrCrntPMUASSTimeStamp=xcvrCrntPMUASSTimeStamp, xcvrCrntPMOPTValue=xcvrCrntPMOPTValue, xcvrHistPMEntry=xcvrHistPMEntry, amdHistPMOPTValue=amdHistPMOPTValue, stmnPortIdx=stmnPortIdx, shelfInvMfgLoc=shelfInvMfgLoc, gePMThresholdUASValue=gePMThresholdUASValue, stsnLockoutWorkingClear=stsnLockoutWorkingClear, xcvrCrntPMRSESTimeStamp=xcvrCrntPMRSESTimeStamp, olsOpticalPwrTransmittedMaxCond=olsOpticalPwrTransmittedMaxCond, briOpticalPwrReceivedMaxTh=briOpticalPwrReceivedMaxTh, stmnPMThresholdShelfIdx=stmnPMThresholdShelfIdx, cpDbRecoveryFailCond=cpDbRecoveryFailCond, stmnForcedSwitchToProtectionCond=stmnForcedSwitchToProtectionCond, pvxL2IFPMThresholdPortIdx=pvxL2IFPMThresholdPortIdx, vcnTcaEvt=vcnTcaEvt, briLossOfMultiframeCond=briLossOfMultiframeCond, shelfInvExpansionShelfCommLinkDownClear=shelfInvExpansionShelfCommLinkDownClear, stmnCrntPMTable=stmnCrntPMTable, stmnHistPMRSOFSValidity=stmnHistPMRSOFSValidity, pvxL2PortCondNotifications=pvxL2PortCondNotifications, amdActAutoEnableTimer=amdActAutoEnableTimer, xcvrAlarmIndicationSignalCond=xcvrAlarmIndicationSignalCond, ocnPEC=ocnPEC, xcvrCrntPMOPRMinInitialize=xcvrCrntPMOPRMinInitialize, stmnHistPMNBYTCR64BitValue=stmnHistPMNBYTCR64BitValue, geHistPMTBYCTXInitialize=geHistPMTBYCTXInitialize, ethL1IFCrntPMUNCRCDWTimeStamp=ethL1IFCrntPMUNCRCDWTimeStamp, stmnHistPMOTUUASValue=stmnHistPMOTUUASValue, fcFiberType=fcFiberType, oaCrntPMMSInsLossValue=oaCrntPMMSInsLossValue, briFiberType=briFiberType, slotInvDspCommClear=slotInvDspCommClear, fcLossOfAlignmentClear=fcLossOfAlignmentClear, fcHistPMOPTMinTimeStamp=fcHistPMOPTMinTimeStamp, pvxL2IFCrntPMSIZE1024To1518Validity=pvxL2IFCrntPMSIZE1024To1518Validity, pvxL2IFCrntPMTBYCRXValidity=pvxL2IFCrntPMTBYCRXValidity, xcvrXCDestShelfIdx=xcvrXCDestShelfIdx, xcvrCrntPMTFRCRXValue=xcvrCrntPMTFRCRXValue, cpSoftwareBankAFailCond=cpSoftwareBankAFailCond, xcvrLockoutProtectionClear=xcvrLockoutProtectionClear, stmnCrntPMOPTMaxValue=stmnCrntPMOPTMaxValue, stmnHistPMNBITCRValue=stmnHistPMNBITCRValue, ocnLaserStatus=ocnLaserStatus, ocnTransparencyChannel=ocnTransparencyChannel, serialPortIdx=serialPortIdx, vcnHistPMHPBBETimeStamp=vcnHistPMHPBBETimeStamp, tl1LogMsgCode=tl1LogMsgCode, ocnStatusChangeEvt=ocnStatusChangeEvt, slotInvMissingCond=slotInvMissingCond, ospfIfRtrPriority=ospfIfRtrPriority, pvxL2IFCrntPMTPFCTXValue=pvxL2IFCrntPMTPFCTXValue, ocnPMThresholdOTUSESValue=ocnPMThresholdOTUSESValue, stmnForcedSwitchToWorkingClear=stmnForcedSwitchToWorkingClear, fcHistPMOPRMinValidity=fcHistPMOPRMinValidity, pvxL2IntfIsUNI=pvxL2IntfIsUNI, geHistPMIntervalTypeIdx=geHistPMIntervalTypeIdx, stmnCrntPMSupplyVoltageValidity=stmnCrntPMSupplyVoltageValidity, pvxL2IFHistPMFCSEInitialize=pvxL2IFHistPMFCSEInitialize, xcvrCrntPMSlotIdx=xcvrCrntPMSlotIdx, xcvrHistPMCVSValue=xcvrHistPMCVSValue, geCrntPMTPFCTXTimeStamp=geCrntPMTPFCTXTimeStamp, dataCommsPingCpTypeIdx=dataCommsPingCpTypeIdx, fcHistPMSupplyVoltageTimeStamp=fcHistPMSupplyVoltageTimeStamp, gePayloadMismatchClear=gePayloadMismatchClear, pvxL2IFCrntPMFRGTInitialize=pvxL2IFCrntPMFRGTInitialize, pvxL2IFHistPMTPFCTXValue=pvxL2IFHistPMTPFCTXValue, stmnLpbkOpSlotIdx=stmnLpbkOpSlotIdx, xcvrProtSwitchEvt=xcvrProtSwitchEvt, ospfRowStatus=ospfRowStatus, ospfNbrIpAddr=ospfNbrIpAddr, oaHistPMOPRValue=oaHistPMOPRValue, amdCrntPMLitChnTimeStamp=amdCrntPMLitChnTimeStamp, slotInvUpgradeFailureCond=slotInvUpgradeFailureCond, oaHistPMSSIOPRTimeStamp=oaHistPMSSIOPRTimeStamp, fcHistPMOPTMaxInitialize=fcHistPMOPTMaxInitialize, oaCrntPMOPRValidity=oaCrntPMOPRValidity, stsnHistPMIdx=stsnHistPMIdx, pluggableInvLOSImpl=pluggableInvLOSImpl, stmnPEC=stmnPEC, pvxL2IFHistPMBCSTTimeStamp=pvxL2IFHistPMBCSTTimeStamp, envLwBatvgClear=envLwBatvgClear, xcvrHistPMCVValidity=xcvrHistPMCVValidity, xcvrCrntPMNBYTCRTimeStamp=xcvrCrntPMNBYTCRTimeStamp, stsnXCProtPortNum=stsnXCProtPortNum, xcvrCrntPMRSBBEInitialize=xcvrCrntPMRSBBEInitialize, xcvrHistPMLBCValue=xcvrHistPMLBCValue, fcLossOfSignalCond=fcLossOfSignalCond, stsnHistPMCVPInitialize=stsnHistPMCVPInitialize, ethL1IFHistPMSupplyVoltageValidity=ethL1IFHistPMSupplyVoltageValidity, vcgXCRowStatus=vcgXCRowStatus, geHistPMTBYCRXTimeStamp=geHistPMTBYCRXTimeStamp, ethL1IFCrntPMSlotIdx=ethL1IFCrntPMSlotIdx, ocnCrntPMNBYTCRValue=ocnCrntPMNBYTCRValue, vcnHistPMSlotIdx=vcnHistPMSlotIdx, ethL1IFHistPMUNCRCDWInitialize=ethL1IFHistPMUNCRCDWInitialize, stsnXCProtTypeNum=stsnXCProtTypeNum, envVentnClear=envVentnClear, xcvrCrntPMOPRMinValidity=xcvrCrntPMOPRMinValidity, xcvrRemoteFaultCond=xcvrRemoteFaultCond, ocnCrntPMNBYTCRValidity=ocnCrntPMNBYTCRValidity, geCrntPMPortIdx=geCrntPMPortIdx, vcnForcedSwitchToWorkingCond=vcnForcedSwitchToWorkingCond, fcOpticalPwrTransmittedMinCond=fcOpticalPwrTransmittedMinCond, stmnCrntPMRSOFSInitialize=stmnCrntPMRSOFSInitialize, ntpcCondNotifications=ntpcCondNotifications, feCustom1=feCustom1, geLossOfMultiframeCond=geLossOfMultiframeCond, stmnPMThresholdRSOFSValue=stmnPMThresholdRSOFSValue, ocnCrntPMUNCRCDWValue=ocnCrntPMUNCRCDWValue, geCrntPMOPRMinValidity=geCrntPMOPRMinValidity, briCrntPMSupplyVoltageTimeStamp=briCrntPMSupplyVoltageTimeStamp, xcvrLockoutWorkingCond=xcvrLockoutWorkingCond, ocnCrntPMOPRMaxValue=ocnCrntPMOPRMaxValue, ocnLoopbackClear=ocnLoopbackClear, cpOperStatus=cpOperStatus, geHistPMBCSTTimeStamp=geHistPMBCSTTimeStamp, ocnEntry=ocnEntry, xcvrHistPMINVBLKValue=xcvrHistPMINVBLKValue, shelfInvTable=shelfInvTable, xcvrXCDestTypeIdx=xcvrXCDestTypeIdx, xcvrHistPMRSESInitialize=xcvrHistPMRSESInitialize, stmnCondNotifications=stmnCondNotifications, pluggableInvMaxBitRate=pluggableInvMaxBitRate, xcvrPMThresholdRSOFSValue=xcvrPMThresholdRSOFSValue, olsTemperatureMaxCond=olsTemperatureMaxCond, slotInvUpgradeInProgressClear=slotInvUpgradeInProgressClear, ocnCrntPMUASSInitialize=ocnCrntPMUASSInitialize, fcCrntPMOPTTimeStamp=fcCrntPMOPTTimeStamp, fcLossOfSyncClear=fcLossOfSyncClear, xcvrHistPMOTNBERValidity=xcvrHistPMOTNBERValidity, briHistPMLBCValidity=briHistPMLBCValidity, pvxL2IFHistPMOSIZEInitialize=pvxL2IFHistPMOSIZEInitialize, cpInvalidProvClear=cpInvalidProvClear, stmnCrntPMRSOFSValue=stmnCrntPMRSOFSValue, neNum=neNum, oaMSInsertionLoss=oaMSInsertionLoss, netMgmtSpeed=netMgmtSpeed, shelfInvUnpluginEvt=shelfInvUnpluginEvt, xcvrCrntPMNBITCR64BitTimeStamp=xcvrCrntPMNBITCR64BitTimeStamp, ocnProtGrpWorkTypeIdx=ocnProtGrpWorkTypeIdx, xcvrCrntPMUNCRCDWValue=xcvrCrntPMUNCRCDWValue, amdHistPMOPRValidity=amdHistPMOPRValidity, stmnCrntPMNBYTCRValidity=stmnCrntPMNBYTCRValidity, ethIntfOpticalPwrTransmittedMinTh=ethIntfOpticalPwrTransmittedMinTh, geAutoEnableTimer=geAutoEnableTimer, stmnCrntPMNBYTCR64BitTimeStamp=stmnCrntPMNBYTCR64BitTimeStamp, fcRemotePathFailureClear=fcRemotePathFailureClear, cpSynchronizationEvtNotifications=cpSynchronizationEvtNotifications, geCrntPMJABRValidity=geCrntPMJABRValidity, neAutoEnabledTimer=neAutoEnabledTimer, fcGfpMode=fcGfpMode)
mibBuilder.exportSymbols("BTI-7000-MIB", ocnCrntPMSEFSSValidity=ocnCrntPMSEFSSValidity, geCrntPMOPRMaxValue=geCrntPMOPRMaxValue, stmnCrntPMOTUUASValidity=stmnCrntPMOTUUASValidity, slotInvCommCond=slotInvCommCond, fcHistPMOPRMinValue=fcHistPMOPRMinValue, stmnHistPMMSESValidity=stmnHistPMMSESValidity, geHistPMTBYCTXValue=geHistPMTBYCTXValue, geLpbkOpCmd=geLpbkOpCmd, ocnHistPMSESLValidity=ocnHistPMSESLValidity, vcnUnequippedCond=vcnUnequippedCond, ospfNbrRtrId=ospfNbrRtrId, stmnHistPMMSESInitialize=stmnHistPMMSESInitialize, ocnPMThresholdOTUBBEValue=ocnPMThresholdOTUBBEValue, ethL1IFCrntPMESInitialize=ethL1IFCrntPMESInitialize, stmnPMThresholdRSESValue=stmnPMThresholdRSESValue, neSecGateway=neSecGateway, odunXCProtSlotNum=odunXCProtSlotNum, stmnProtGrpProtSlotIdx=stmnProtGrpProtSlotIdx, cpDegradeCond=cpDegradeCond, briLpbkOpPortIdx=briLpbkOpPortIdx, oaCrntPMLaser1CurrentValue=oaCrntPMLaser1CurrentValue, geFlowControl=geFlowControl, geCrntPMTPFCTXValidity=geCrntPMTPFCTXValidity, vcnPMThresholdByPortHPBBEValue=vcnPMThresholdByPortHPBBEValue, ocnCrntPMOPRTimeStamp=ocnCrntPMOPRTimeStamp, ocnTOHTransparency=ocnTOHTransparency, stsnProtSwOpTypeIdx=stsnProtSwOpTypeIdx, oaAdminStatus=oaAdminStatus, xcvrPMThresholdTable=xcvrPMThresholdTable, briHistPMOPTMaxTimeStamp=briHistPMOPTMaxTimeStamp, swUpgradeFtpUser=swUpgradeFtpUser, xcvrXCTable=xcvrXCTable, briRemoteId=briRemoteId, gcc0ConfigEntry=gcc0ConfigEntry, ospfIfHelloInterval=ospfIfHelloInterval, stmnHistPMNBITCR64BitValue=stmnHistPMNBITCR64BitValue, briHistPMSlotIdx=briHistPMSlotIdx, ocnHistPMUASSInitialize=ocnHistPMUASSInitialize, stmnHistPMNBYTCR64BitInitialize=stmnHistPMNBYTCR64BitInitialize, snmpTrapRcvIPAddr=snmpTrapRcvIPAddr, stsnTypeIdx=stsnTypeIdx, stmnCrntPMRSOFSTimeStamp=stmnCrntPMRSOFSTimeStamp, vcnHistPMShelfIdx=vcnHistPMShelfIdx, xcvrCrntPMOPRMaxTimeStamp=xcvrCrntPMOPRMaxTimeStamp, xcvrCrntPMOTUEBInitialize=xcvrCrntPMOTUEBInitialize, dbBackupAndRestoreCheckSysName=dbBackupAndRestoreCheckSysName, cpDbInvokeResultEvt=cpDbInvokeResultEvt, envRectHiClear=envRectHiClear, ocnCrntPMOTUOFSValue=ocnCrntPMOTUOFSValue, xcvrHistPMOPTMaxInitialize=xcvrHistPMOPTMaxInitialize, geHistPMOPTMaxTimeStamp=geHistPMOPTMaxTimeStamp, shelfInvPwrFeedAFailCond=shelfInvPwrFeedAFailCond, stmnCrntPMOTUOFSValidity=stmnCrntPMOTUOFSValidity, fcHistPMOPRAvgValue=fcHistPMOPRAvgValue, cpUpgradeFailCond=cpUpgradeFailCond, ocnCrntPMOPRMaxTimeStamp=ocnCrntPMOPRMaxTimeStamp, ocnCrntPMLBCValidity=ocnCrntPMLBCValidity, geHistPMOPRMinInitialize=geHistPMOPRMinInitialize, stmnXcvrMismatchCond=stmnXcvrMismatchCond, fcCrntPMLBCValidity=fcCrntPMLBCValidity, cpFanFeedFailClear=cpFanFeedFailClear, briOpticalPwrTransmittedMaxCond=briOpticalPwrTransmittedMaxCond, xcvrOpticalPwrTransmitted=xcvrOpticalPwrTransmitted, fcCrntPMOPRMaxInitialize=fcCrntPMOPRMaxInitialize, ethL1IFCrntPMUNCRCDWValue=ethL1IFCrntPMUNCRCDWValue, ethL1IFPMThresholdOTUUASValue=ethL1IFPMThresholdOTUUASValue, xcvrOpticalPwrTransmittedMaxClear=xcvrOpticalPwrTransmittedMaxClear, stmnOpticalPwrReceivedMaxTh=stmnOpticalPwrReceivedMaxTh, ethL1IFHistPMOTUOFSValidity=ethL1IFHistPMOTUOFSValidity, ethIntfFPSD=ethIntfFPSD, actCondInstanceIdx=actCondInstanceIdx, pvxL2IFCrntPMSIZE65To127TimeStamp=pvxL2IFCrntPMSIZE65To127TimeStamp, ospfIfRtrDeadInterval=ospfIfRtrDeadInterval, olsLossOfSyncClear=olsLossOfSyncClear, ospfIfShelfIdx=ospfIfShelfIdx, slotInvHiTempAutoShutdownClear=slotInvHiTempAutoShutdownClear, ocnCrntPMOTNBERInitialize=ocnCrntPMOTNBERInitialize, stsnXCEntry=stsnXCEntry, ocnCrntPMOPRAvgTimeStamp=ocnCrntPMOPRAvgTimeStamp, xcvrOpticalPwrTransmittedMinTh=xcvrOpticalPwrTransmittedMinTh, oaCrntPMOPTValidity=oaCrntPMOPTValidity, stmnCrntPMMSBBEInitialize=stmnCrntPMMSBBEInitialize, stmnCrntPMRSUASTimeStamp=stmnCrntPMRSUASTimeStamp, stmnHistPMUNCRCDWValidity=stmnHistPMUNCRCDWValidity, passivePortRemoteId=passivePortRemoteId, ocnHistPMSEFSSValidity=ocnHistPMSEFSSValidity, cpHistPMTempValue=cpHistPMTempValue, xcvrProtGrpProtIdx=xcvrProtGrpProtIdx, pvxL2IFHistPMTBYCRXInitialize=pvxL2IFHistPMTBYCRXInitialize, ocnProtGrpTable=ocnProtGrpTable, oaCrntPMEffectiveGainTimeStamp=oaCrntPMEffectiveGainTimeStamp, stmnCrntPMOPTMinValue=stmnCrntPMOPTMinValue, pvxL2IFHistPMSIZE65To127Validity=pvxL2IFHistPMSIZE65To127Validity, oscSpeed=oscSpeed, vcnCrntPMIdx=vcnCrntPMIdx, xcvrCrntPMOPTValidity=xcvrCrntPMOPTValidity, ethL1IFCrntPMOPRValue=ethL1IFCrntPMOPRValue, slotInvFailClear=slotInvFailClear, geCrntPMMCSTInitialize=geCrntPMMCSTInitialize, geCrntPMOSIZEValue=geCrntPMOSIZEValue, cpHistPMCpTypeIdx=cpHistPMCpTypeIdx, xcvrHistPMOTUOFSInitialize=xcvrHistPMOTUOFSInitialize, stsnHistPMIntervalTypeIdx=stsnHistPMIntervalTypeIdx, geHistPMOPTValue=geHistPMOPTValue, ocnOpticalPwrTransmitted=ocnOpticalPwrTransmitted, oaHistPMOaTypeIdx=oaHistPMOaTypeIdx, xcvrCrntPMESSValidity=xcvrCrntPMESSValidity, stmnCrntPMEntry=stmnCrntPMEntry, stmnCrntPMOPRMinInitialize=stmnCrntPMOPRMinInitialize, xcvrHistPMRSSESInitialize=xcvrHistPMRSSESInitialize, xcvrCrntPMLBCTimeStamp=xcvrCrntPMLBCTimeStamp, vcnCrntPMEntry=vcnCrntPMEntry, xcvrHistPMMCSTInitialize=xcvrHistPMMCSTInitialize, pvxL2IntfBcastLimit=pvxL2IntfBcastLimit, shelfType=shelfType, cpUpgradeStage=cpUpgradeStage, xcvrHistPMRSOFSValidity=xcvrHistPMRSOFSValidity, vcnCrntPMHPEBValidity=vcnCrntPMHPEBValidity, olsOpticalPwrTransmittedMaxClear=olsOpticalPwrTransmittedMaxClear, stsnXCSrcSlotIdx=stsnXCSrcSlotIdx, tcaIntervalType=tcaIntervalType, pluggableInvSlotTypeIdx=pluggableInvSlotTypeIdx, ocnCrntPMUASLTimeStamp=ocnCrntPMUASLTimeStamp, ocnOpticalPwrTransmittedMinTh=ocnOpticalPwrTransmittedMinTh, oaLaser1Current=oaLaser1Current, xcvrHistPMOPRMinValue=xcvrHistPMOPRMinValue, xcvrPMThresholdRSUASValue=xcvrPMThresholdRSUASValue, stsnHistPMESPTimeStamp=stsnHistPMESPTimeStamp, ocnCrntPMOPTAvgInitialize=ocnCrntPMOPTAvgInitialize, ethIntfMTU=ethIntfMTU, oaCustom1=oaCustom1, stmnCrntPMSupplyVoltageValue=stmnCrntPMSupplyVoltageValue, stmnHistPMOPTAvgValue=stmnHistPMOPTAvgValue, ethL1IFCrntPMEntry=ethL1IFCrntPMEntry, ospfNbrTable=ospfNbrTable, vcnProtSwitchEvt=vcnProtSwitchEvt, ocnCrntPMSlotIdx=ocnCrntPMSlotIdx, geCrntPMCVInitialize=geCrntPMCVInitialize, serialParity=serialParity, ocnCrntPMOPTMaxTimeStamp=ocnCrntPMOPTMaxTimeStamp, briHistPMTempValue=briHistPMTempValue, xcvrHistPMUASValidity=xcvrHistPMUASValidity, vcgTable=vcgTable, stmnHistPMNBITCR64BitTimeStamp=stmnHistPMNBITCR64BitTimeStamp, oaCrntPMTable=oaCrntPMTable, oscOperStatQlfr=oscOperStatQlfr, xcvrProtGrpProtSlotIdx=xcvrProtGrpProtSlotIdx, ocnCrntPMOPTAvgTimeStamp=ocnCrntPMOPTAvgTimeStamp, odunOpenConnectionIndicatorClear=odunOpenConnectionIndicatorClear, xcvrForcedSwitchToWorkingCond=xcvrForcedSwitchToWorkingCond, ocnOpticalPwrReceivedMaxCond=ocnOpticalPwrReceivedMaxCond, shelfInvChassisCLEI=shelfInvChassisCLEI, oscMACAddr=oscMACAddr, pluggableInvUnsupportedCond=pluggableInvUnsupportedCond, xcvrPMThresholdJABRValue=xcvrPMThresholdJABRValue, stsnCrntPMFCPInitialize=stsnCrntPMFCPInitialize, stsnXCDestIdx=stsnXCDestIdx, cpSoftwareBankBFailCond=cpSoftwareBankBFailCond, gcc0ConfigCpTypeIdx=gcc0ConfigCpTypeIdx, oaCrntPMLaser2CurrentTimeStamp=oaCrntPMLaser2CurrentTimeStamp, stsnHistPMFCPValidity=stsnHistPMFCPValidity, oaOOBRSDOpIdx=oaOOBRSDOpIdx, pvxL2IntfDlfLimit=pvxL2IntfDlfLimit, stsnUnequippedCond=stsnUnequippedCond, xcvrMismatchClear=xcvrMismatchClear, amdLineIdx=amdLineIdx, geHistPMIntervalIdx=geHistPMIntervalIdx, stmnCrntPMOTUBBEValue=stmnCrntPMOTUBBEValue, xcvrCrntPMCVSInitialize=xcvrCrntPMCVSInitialize, shelfInvExpansionShelfCommDeviceUnsupportedCond=shelfInvExpansionShelfCommDeviceUnsupportedCond, stsnHistPMUASPInitialize=stsnHistPMUASPInitialize, vcnOperations=vcnOperations, stsnHistPMEntry=stsnHistPMEntry, stmnHistPMSlotIdx=stmnHistPMSlotIdx, fcVendorPN3=fcVendorPN3, stmnHistPMMSBBEValidity=stmnHistPMMSBBEValidity, vcgRowStatus=vcgRowStatus, gePMThresholdFRGTValue=gePMThresholdFRGTValue, pvxL2IFCrntPMTFRCRXValue=pvxL2IFCrntPMTFRCRXValue, pvxL2IFHistPMFCSEValue=pvxL2IFHistPMFCSEValue, stmnCrntPMOTUESValue=stmnCrntPMOTUESValue, briHistPMPortIdx=briHistPMPortIdx, vcnConcatMismatchCond=vcnConcatMismatchCond, envFireClear=envFireClear, slotInvPackMfgDate=slotInvPackMfgDate, xcvrHistPMOTNAVGBERValidity=xcvrHistPMOTNAVGBERValidity, stsnHistPMUASPValidity=stsnHistPMUASPValidity, cpDbDeletionInProgressCond=cpDbDeletionInProgressCond, oaCrntPMOBRValidity=oaCrntPMOBRValidity, passivePortId2=passivePortId2, ocnCrntPMShelfIdx=ocnCrntPMShelfIdx, ocnCrntPMOPRMinTimeStamp=ocnCrntPMOPRMinTimeStamp, geHistPMSIZE64Initialize=geHistPMSIZE64Initialize, xcvrHistPMRSESValue=xcvrHistPMRSESValue, stsnHistPMTypeIdx=stsnHistPMTypeIdx, swUpgradeFileTransferType=swUpgradeFileTransferType, ocnCrntPMEntry=ocnCrntPMEntry, stmnCrntPMRSESTimeStamp=stmnCrntPMRSESTimeStamp, geHistPMSESValue=geHistPMSESValue, vcnHistPMHPEBValidity=vcnHistPMHPEBValidity, fcCrntPMOPTAvgValidity=fcCrntPMOPTAvgValidity, geHistPMFRGTTimeStamp=geHistPMFRGTTimeStamp, cpDbRestoreTransferResultEvt=cpDbRestoreTransferResultEvt, bti7000Mib=bti7000Mib, briCrntPMOPRMinValidity=briCrntPMOPRMinValidity, odunXCSrcShelfIdx=odunXCSrcShelfIdx, geCrntPMOPRAvgInitialize=geCrntPMOPRAvgInitialize, envAirComprClear=envAirComprClear, vcnCrntPMHPESInitialize=vcnCrntPMHPESInitialize, ethL1IFHistPMOPRMinInitialize=ethL1IFHistPMOPRMinInitialize, geCrntPMSIZE1024To1518TimeStamp=geCrntPMSIZE1024To1518TimeStamp, ethL1IFHistPMEntry=ethL1IFHistPMEntry, fcHistPMSESInitialize=fcHistPMSESInitialize, pvxL2IFCrntPMBCSTTimeStamp=pvxL2IFCrntPMBCSTTimeStamp, oaBackReflectionSafetyTh=oaBackReflectionSafetyTh, xcvrHistPMSIZE512To1023TimeStamp=xcvrHistPMSIZE512To1023TimeStamp, geHistPMTPFCTXTimeStamp=geHistPMTPFCTXTimeStamp, ocnProtGrpEntry=ocnProtGrpEntry, geHistPMOPRValidity=geHistPMOPRValidity, briVendorPN1=briVendorPN1, oaOpticalPwrReceived=oaOpticalPwrReceived, stmnId1=stmnId1, ethL1IFHistPMSESValue=ethL1IFHistPMSESValue, ocnOTNPayloadMismatchCond=ocnOTNPayloadMismatchCond, xcvrWavelength=xcvrWavelength, ocnHistPMOTUSESTimeStamp=ocnHistPMOTUSESTimeStamp, oscSfpMissingClear=oscSfpMissingClear, briEntry=briEntry, xcvrCrntPMRSEBValidity=xcvrCrntPMRSEBValidity, stsnTable=stsnTable, oaCrntPMLaser2TempTimeStamp=oaCrntPMLaser2TempTimeStamp, stmnCrntPMOTUESInitialize=stmnCrntPMOTUESInitialize, ipExtIntfOperStatus=ipExtIntfOperStatus, evtNotificationObjects=evtNotificationObjects, oaSSIOpticalPwrReceivedMaxCond=oaSSIOpticalPwrReceivedMaxCond, xcvrTraceMismatchCond=xcvrTraceMismatchCond, ipExtIntfRowStatus=ipExtIntfRowStatus, envRectCond=envRectCond, xcvrCrntPMNBITCR64BitInitialize=xcvrCrntPMNBITCR64BitInitialize, ocnHistPMLBCValidity=ocnHistPMLBCValidity, slotInvDataRecordIdx=slotInvDataRecordIdx, xcvrHistPMCVTimeStamp=xcvrHistPMCVTimeStamp, stmnPMThresholdRSUASValue=stmnPMThresholdRSUASValue, envAttrUnsupportedCond=envAttrUnsupportedCond, xcvrCrntPMOTUESValue=xcvrCrntPMOTUESValue, pvxL2IFHistPMUSIZEValue=pvxL2IFHistPMUSIZEValue, ethL1IFCrntPMOPTMinValue=ethL1IFCrntPMOPTMinValue, olsOpticalPwrReceivedMinClear=olsOpticalPwrReceivedMinClear, actCondDescription=actCondDescription, briRowStatus=briRowStatus, feEntry=feEntry, ocnHistPMNBYTCRInitialize=ocnHistPMNBYTCRInitialize, neAutoProv=neAutoProv, dataCommsPingAddress=dataCommsPingAddress)
mibBuilder.exportSymbols("BTI-7000-MIB", pvxL2IFHistPMFRDRValidity=pvxL2IFHistPMFRDRValidity, ocnHistPMOTUSESInitialize=ocnHistPMOTUSESInitialize, xcvrProtGrpProtTypeIdx=xcvrProtGrpProtTypeIdx, cpSynchronizationSecRefProtStatus=cpSynchronizationSecRefProtStatus, pluggableInvRestartOpTypeIdx=pluggableInvRestartOpTypeIdx, geHistPMFCSETimeStamp=geHistPMFCSETimeStamp, pluggableInvUnsupportedClear=pluggableInvUnsupportedClear, ethL1IFHistPMCVValidity=ethL1IFHistPMCVValidity, SwUpgradeFileTransferType=SwUpgradeFileTransferType, ocnCrntPMSupplyVoltageValidity=ocnCrntPMSupplyVoltageValidity, ethL1IFPMThresholdSESValue=ethL1IFPMThresholdSESValue, pvxL2IFCrntPMTFRCTXValue=pvxL2IFCrntPMTFRCTXValue, neEvtNotifications=neEvtNotifications, gePMThresholdPortIdx=gePMThresholdPortIdx, pvxL2IFCrntPMMCSTValue=pvxL2IFCrntPMMCSTValue, ethL1IFHistPMOTUSESValidity=ethL1IFHistPMOTUSESValidity, xcvrHistPMSIZEOver1518TimeStamp=xcvrHistPMSIZEOver1518TimeStamp, stsnOperations=stsnOperations, ethL1IFCrntPMOPTAvgValidity=ethL1IFCrntPMOPTAvgValidity, pvxL2IFHistPMTBYCRXTimeStamp=pvxL2IFHistPMTBYCRXTimeStamp, ethL1IFPMThresholdPortTypeIdx=ethL1IFPMThresholdPortTypeIdx, vcnHistPMIntervalTypeIdx=vcnHistPMIntervalTypeIdx, neSiteNum=neSiteNum, briPortIdx=briPortIdx, oaCrntPMLaser2CurrentValue=oaCrntPMLaser2CurrentValue, geHistPMBCSTValue=geHistPMBCSTValue, ethL1IFCrntPMCVValue=ethL1IFCrntPMCVValue, geCrntPMOPTMaxTimeStamp=geCrntPMOPTMaxTimeStamp, stmnHistPMNBYTCRValue=stmnHistPMNBYTCRValue, ocnRemoteId=ocnRemoteId, vcnPortIdx=vcnPortIdx, fcHistPMTempValue=fcHistPMTempValue, briHistPMOPRMinValidity=briHistPMOPRMinValidity, pluggableInvMfgDate=pluggableInvMfgDate, pvxL2IntfAllowedFrames=pvxL2IntfAllowedFrames, xcvrXCRowStatus=xcvrXCRowStatus, xcvrHistPMSIZE512To1023Initialize=xcvrHistPMSIZE512To1023Initialize, briOpticalPwrTransmitted=briOpticalPwrTransmitted, ocnCrntPMESSValue=ocnCrntPMESSValue, stmnHistPMOPRAvgInitialize=stmnHistPMOPRAvgInitialize, geHistPMTBYCRXValidity=geHistPMTBYCRXValidity, xcvrHistPMTempValue=xcvrHistPMTempValue, ethL1IFCrntPMSupplyVoltage2Value=ethL1IFCrntPMSupplyVoltage2Value, ocnCrntPMLBCTimeStamp=ocnCrntPMLBCTimeStamp, odunPayloadMismatchCond=odunPayloadMismatchCond, xcvrCrntPMRSOFSTimeStamp=xcvrCrntPMRSOFSTimeStamp, xcvrHistPMSIZE65To127Initialize=xcvrHistPMSIZE65To127Initialize, neGateway=neGateway, pvxL2IFCrntPMTBYCRXValue=pvxL2IFCrntPMTBYCRXValue, stmnCrntPMOPTAvgTimeStamp=stmnCrntPMOPTAvgTimeStamp, stsnAlarmIndicationSignalCond=stsnAlarmIndicationSignalCond, xcvrCrntPMSupplyVoltage2Value=xcvrCrntPMSupplyVoltage2Value, stmnAutoEnableTimer=stmnAutoEnableTimer, xcvrHistPMRSESTimeStamp=xcvrHistPMRSESTimeStamp, fcCrntPMTempValidity=fcCrntPMTempValidity, swUpgrade=swUpgrade, pvxL2EvtNotifications=pvxL2EvtNotifications, xcvrHistPMNBYTCR64BitInitialize=xcvrHistPMNBYTCR64BitInitialize, pvxL2IFCrntPMPortTypeIdx=pvxL2IFCrntPMPortTypeIdx, stmnStatusChangeEvt=stmnStatusChangeEvt, stmnPMThresholdMSSESValue=stmnPMThresholdMSSESValue, cpCrntPMSlotIdx=cpCrntPMSlotIdx, vcnProtSwOpPortIdx=vcnProtSwOpPortIdx, fcLossOfAlignmentCond=fcLossOfAlignmentCond, geCrntPMESValidity=geCrntPMESValidity, ocnCrntPMOPTValidity=ocnCrntPMOPTValidity, gcc0ConfigOperStatus=gcc0ConfigOperStatus, stmnProtGrpProtShelfIdx=stmnProtGrpProtShelfIdx, briCrntPMSupplyVoltageValue=briCrntPMSupplyVoltageValue, cpEvtNotifications=cpEvtNotifications, briLossOfSignalCond=briLossOfSignalCond, oaCrntPMVOATimeStamp=oaCrntPMVOATimeStamp, vcnCrntPMHPBBEInitialize=vcnCrntPMHPBBEInitialize, condNotifCtrl=condNotifCtrl, ethIntfPEC=ethIntfPEC, xcvrPMThresholdOTUSESValue=xcvrPMThresholdOTUSESValue, xcvrHistPMUNCRCDWTimeStamp=xcvrHistPMUNCRCDWTimeStamp, xcvrCrntPMUASTimeStamp=xcvrCrntPMUASTimeStamp, fcHistPMOPTValidity=fcHistPMOPTValidity, oscType=oscType, dataCommsOperations=dataCommsOperations, ocnHistPMUNCRCDWInitialize=ocnHistPMUNCRCDWInitialize, shelfInvPwrBrownoutCond=shelfInvPwrBrownoutCond, ipExtIntfSpeed=ipExtIntfSpeed, ocnHistPMSESSTimeStamp=ocnHistPMSESSTimeStamp, ethL1IFHistPMESInitialize=ethL1IFHistPMESInitialize, amdAdminStatus=amdAdminStatus, olEvtNotifications=olEvtNotifications, cpHistPMSlotIdx=cpHistPMSlotIdx, fcPMThresholdCVValue=fcPMThresholdCVValue, vcnXCSrcPortIdx=vcnXCSrcPortIdx, geMTU=geMTU, envHiAirCond=envHiAirCond, xcvrHistPMNBYTCR64BitTimeStamp=xcvrHistPMNBYTCR64BitTimeStamp, oaHistPMIntervalIdx=oaHistPMIntervalIdx, xcvrPMThresholdINVBLKValue=xcvrPMThresholdINVBLKValue, xcvrHistPMOTUOFSTimeStamp=xcvrHistPMOTUOFSTimeStamp, odunPayloadMismatchClear=odunPayloadMismatchClear, xcvrHistPMESTimeStamp=xcvrHistPMESTimeStamp, pvxL2IntfMACAddr=pvxL2IntfMACAddr, neSWVersion=neSWVersion, stmnHistPMRSOFSInitialize=stmnHistPMRSOFSInitialize, xcvrHistPMSEFSSValue=xcvrHistPMSEFSSValue, actCondDateAndTime=actCondDateAndTime, pvxL2IFCrntPMSIZEOver1518TimeStamp=pvxL2IFCrntPMSIZEOver1518TimeStamp, xcvrPMThresholdFRDRValue=xcvrPMThresholdFRDRValue, xcvrCrntPMOTUUASTimeStamp=xcvrCrntPMOTUUASTimeStamp, mstpNotificationObjects=mstpNotificationObjects, geCrntPMSIZE64TimeStamp=geCrntPMSIZE64TimeStamp, setErrorCode=setErrorCode, xcvrCrntPMMCSTValidity=xcvrCrntPMMCSTValidity, stmnHistPMOPTMaxTimeStamp=stmnHistPMOPTMaxTimeStamp, ethPortCondNotifications=ethPortCondNotifications, ethL1IFCrntPMPortTypeIdx=ethL1IFCrntPMPortTypeIdx, geLpbkOpSlotIdx=geLpbkOpSlotIdx, geHistPMOPTMaxValidity=geHistPMOPTMaxValidity, stmnTable=stmnTable, ethL1IFPMThresholdIntervalTypeIdx=ethL1IFPMThresholdIntervalTypeIdx, pluggableInvMismatchCond=pluggableInvMismatchCond, vcnHistPMHPBBEValidity=vcnHistPMHPBBEValidity, envEngOprgCond=envEngOprgCond, vcnPMThresholdByPortHPSESValue=vcnPMThresholdByPortHPSESValue, tcaThreshold=tcaThreshold, slotInvUpgradeInProgressCond=slotInvUpgradeInProgressCond, ocnLossOfPrimaryTimingReferenceClear=ocnLossOfPrimaryTimingReferenceClear, geCrntPMFCSEInitialize=geCrntPMFCSEInitialize, oaBackReflectionSafetyOverrideCond=oaBackReflectionSafetyOverrideCond, fcPMThresholdShelfIdx=fcPMThresholdShelfIdx, feMACAddr=feMACAddr, xcvrForcedSwitchToWorkingClear=xcvrForcedSwitchToWorkingClear, oaCrntPMLaser1TempTimeStamp=oaCrntPMLaser1TempTimeStamp, ocnHistPMOTUEBValue=ocnHistPMOTUEBValue, vcnHistPMIdx=vcnHistPMIdx, briCrntPMPortIdx=briCrntPMPortIdx, xcvrCrntPMOPTMaxValidity=xcvrCrntPMOPTMaxValidity, pvxL2IFHistPMPortIdx=pvxL2IFHistPMPortIdx, stmnHistPMOPRMaxValue=stmnHistPMOPRMaxValue, ocnCrntPMOTUEBValue=ocnCrntPMOTUEBValue, ethIntfOpticalPwrTransmittedMaxTh=ethIntfOpticalPwrTransmittedMaxTh, xcvrCrntPMUSIZETimeStamp=xcvrCrntPMUSIZETimeStamp, stmnCrntPMOTNBERTimeStamp=stmnCrntPMOTNBERTimeStamp, pluggableInvDDiagImpl=pluggableInvDDiagImpl, ntpNewTimeAndDate=ntpNewTimeAndDate, stmnWavelengthNotAchievableCond=stmnWavelengthNotAchievableCond, ipExtIntfCmdPrimaryState=ipExtIntfCmdPrimaryState, pvxL2IFHistPMFCSEValidity=pvxL2IFHistPMFCSEValidity, ocnCrntPMUNCRCDWValidity=ocnCrntPMUNCRCDWValidity, xcvrSignalDegradeCond=xcvrSignalDegradeCond, pvxL2IFCrntPMSIZE65To127Value=pvxL2IFCrntPMSIZE65To127Value, amdWavelength=amdWavelength, pvxL2IFHistPMSIZE64Initialize=pvxL2IFHistPMSIZE64Initialize, oaOpticalPwrReceivedMinClear=oaOpticalPwrReceivedMinClear, vcnCrntPMHPUASValidity=vcnCrntPMHPUASValidity, ocnHistPMUASSValidity=ocnHistPMUASSValidity, shelfInvExpansionShelfCommDeviceUnsupportedClear=shelfInvExpansionShelfCommDeviceUnsupportedClear, slotInvHTASUnsupportedCond=slotInvHTASUnsupportedCond, pvxL2IFCrntPMSIZE512To1023Initialize=pvxL2IFCrntPMSIZE512To1023Initialize, slotInvShelfIdx=slotInvShelfIdx, envHiWindCond=envHiWindCond, xcvrHistPMRSSESTimeStamp=xcvrHistPMRSSESTimeStamp, amdHistPMVOAValidity=amdHistPMVOAValidity, fcCrntPMESTimeStamp=fcCrntPMESTimeStamp, pvxL2IFHistPMEntry=pvxL2IFHistPMEntry, pvxL2IntfEntry=pvxL2IntfEntry, xcvrHistPMJABRValidity=xcvrHistPMJABRValidity, cpUpgradeInProgressCond=cpUpgradeInProgressCond, stmnLockoutProtectionCond=stmnLockoutProtectionCond, feMTU=feMTU, geHistPMSIZE256To511Initialize=geHistPMSIZE256To511Initialize, pvxL2IFHistPMTBYCTXTimeStamp=pvxL2IFHistPMTBYCTXTimeStamp, mstpEvtNotifications=mstpEvtNotifications, shelfOperStatus=shelfOperStatus, xcvrHistPMESValidity=xcvrHistPMESValidity, ethL1IFCrntPMOPRMaxValidity=ethL1IFCrntPMOPRMaxValidity, setErrorDesc=setErrorDesc, xcvrHistPMSESSValue=xcvrHistPMSESSValue, stmnHistPMRSBBEValue=stmnHistPMRSBBEValue, odunPortIdx=odunPortIdx, ocnHistPMUASLTimeStamp=ocnHistPMUASLTimeStamp, pvxL2IFCrntPMSIZE256To511Value=pvxL2IFCrntPMSIZE256To511Value, geLossOfMultiframeClear=geLossOfMultiframeClear, vcnCrntPMHPESValidity=vcnCrntPMHPESValidity, stsnPMThresholdByPortESPValue=stsnPMThresholdByPortESPValue, shelfInvDiscoveredShelfNum=shelfInvDiscoveredShelfNum, ethL1IFCrntPMNBYTCRValue=ethL1IFCrntPMNBYTCRValue, stmnSignalDegradeClear=stmnSignalDegradeClear, fcId1=fcId1, oaWavelength=oaWavelength, stmnCrntPMMSESInitialize=stmnCrntPMMSESInitialize, oaOOBRSDOpTimer=oaOOBRSDOpTimer, geCrntPMJABRTimeStamp=geCrntPMJABRTimeStamp, ocnHistPMESSInitialize=ocnHistPMESSInitialize, pvxL2IFHistPMSIZE1024To1518Value=pvxL2IFHistPMSIZE1024To1518Value, ocnHistPMSESLValue=ocnHistPMSESLValue, xcvrCrntPMBCSTTimeStamp=xcvrCrntPMBCSTTimeStamp, vcgType=vcgType, gePEC=gePEC, geOperations=geOperations, ocnPMThresholdCVLValue=ocnPMThresholdCVLValue, geHistPMShelfIdx=geHistPMShelfIdx, xcvrCrntPMUNCRCDWValidity=xcvrCrntPMUNCRCDWValidity, geCrntPMOPTMaxValue=geCrntPMOPTMaxValue, ethL1IFPMThresholdUASValue=ethL1IFPMThresholdUASValue, fcOperations=fcOperations, pvxL2IFHistPMMCSTInitialize=pvxL2IFHistPMMCSTInitialize, networkElement=networkElement, geEntry=geEntry, ocnOpticalPwrReceivedMinClear=ocnOpticalPwrReceivedMinClear, xcvrLossOfSyncCond=xcvrLossOfSyncCond, geHistPMOPTValidity=geHistPMOPTValidity, geHistPMOPTAvgValue=geHistPMOPTAvgValue, dbBackupAndRestoreAddress=dbBackupAndRestoreAddress, geHistPMSIZE65To127TimeStamp=geHistPMSIZE65To127TimeStamp, ocnCustom1=ocnCustom1, geTable=geTable, envRectClear=envRectClear, fcHistPMIntervalIdx=fcHistPMIntervalIdx, xcvrPMThresholdOTUBBEValue=xcvrPMThresholdOTUBBEValue, vcnHistPMPortIdx=vcnHistPMPortIdx, oaOpticalPwrReceivedMinCond=oaOpticalPwrReceivedMinCond, ocnPMThresholdTable=ocnPMThresholdTable, envIntruderCond=envIntruderCond, oaCrntPMCaseTempTimeStamp=oaCrntPMCaseTempTimeStamp, ocnCrntPMNBYTCR64BitValidity=ocnCrntPMNBYTCR64BitValidity, geHistPMMCSTTimeStamp=geHistPMMCSTTimeStamp, passivePortTable=passivePortTable, ethL1IFCrntPMOPRMaxValue=ethL1IFCrntPMOPRMaxValue, cpConnectorMismatchClear=cpConnectorMismatchClear, ntpcEvtNotifications=ntpcEvtNotifications, fcCrntPMUASTimeStamp=fcCrntPMUASTimeStamp, stmnHistPMOTUSESInitialize=stmnHistPMOTUSESInitialize, stmnCrntPMMSBBETimeStamp=stmnCrntPMMSBBETimeStamp, xcvrCrntPMFCSEInitialize=xcvrCrntPMFCSEInitialize, envLwWtrClear=envLwWtrClear, briHistPMOPTTimeStamp=briHistPMOPTTimeStamp, pluggableInvVendorOUI=pluggableInvVendorOUI, xcvrLossOfSignalClear=xcvrLossOfSignalClear, stmnHistPMOPTMaxValidity=stmnHistPMOPTMaxValidity, stmnHistPMMSESValue=stmnHistPMMSESValue, ocnLockoutWorkingClear=ocnLockoutWorkingClear, geCrntPMTBYCTXTimeStamp=geCrntPMTBYCTXTimeStamp, xcvrTempMaxClear=xcvrTempMaxClear, amdOpticalPwrReceivedMinCond=amdOpticalPwrReceivedMinCond, stsnSignalDegradeCond=stsnSignalDegradeCond, ocnLpbkOpTable=ocnLpbkOpTable, xcvrCrntPMOTUSESTimeStamp=xcvrCrntPMOTUSESTimeStamp, geCrntPMOPTAvgTimeStamp=geCrntPMOPTAvgTimeStamp, xcvrHistPMNBITCR64BitValue=xcvrHistPMNBITCR64BitValue, cpCrntPMTempTimeStamp=cpCrntPMTempTimeStamp, ocnLossOfPrimaryTimingReferenceCond=ocnLossOfPrimaryTimingReferenceCond, odunXCDestPortIdx=odunXCDestPortIdx, geCrntPMSIZE65To127TimeStamp=geCrntPMSIZE65To127TimeStamp, geHistPMTPFCTXValidity=geHistPMTPFCTXValidity, tl1LogTypeSpecificLogNum=tl1LogTypeSpecificLogNum)
mibBuilder.exportSymbols("BTI-7000-MIB", condNotifDefaultSeverity=condNotifDefaultSeverity, cpUpgradeStageResultEvt=cpUpgradeStageResultEvt, netMgmtCustom1=netMgmtCustom1, serialTable=serialTable, ocnHistPMUNCRCDWValidity=ocnHistPMUNCRCDWValidity, ethL1IFHistPMSESInitialize=ethL1IFHistPMSESInitialize, geCrntPMSIZE512To1023TimeStamp=geCrntPMSIZE512To1023TimeStamp, tl1LogIdx=tl1LogIdx, ethL1IFHistPMOPTAvgValue=ethL1IFHistPMOPTAvgValue, slotInvCoolingUnitMismatchCond=slotInvCoolingUnitMismatchCond, amdCrntPMIntervalTypeIdx=amdCrntPMIntervalTypeIdx, ethL1IFHistPMSESValidity=ethL1IFHistPMSESValidity, ocnHistPMNBYTCRValidity=ocnHistPMNBYTCRValidity, xcvrXCSrcIdx=xcvrXCSrcIdx, briLpbkOpCmd=briLpbkOpCmd, ntpClientAssocTable=ntpClientAssocTable, briOperations=briOperations, xcvrCrntPMOTUESTimeStamp=xcvrCrntPMOTUESTimeStamp, tcaValue=tcaValue, ocnWavelengthNotAchievableCond=ocnWavelengthNotAchievableCond, shelfStatusChangeEvt=shelfStatusChangeEvt, ocnPhyPMMon=ocnPhyPMMon, stmnCrntPMOTUEBTimeStamp=stmnCrntPMOTUEBTimeStamp, geHistPMTempValue=geHistPMTempValue, ethL1IFHistPMNBITCRValue=ethL1IFHistPMNBITCRValue, xcvrHistPMNBITCRInitialize=xcvrHistPMNBITCRInitialize, xcvrCrntPMRSOFSValidity=xcvrCrntPMRSOFSValidity, ethL1IFHistPMOPRMinTimeStamp=ethL1IFHistPMOPRMinTimeStamp, xcvrHistPMLBCTimeStamp=xcvrHistPMLBCTimeStamp, vcgXCDestIdx=vcgXCDestIdx, xcvrHistPMJABRInitialize=xcvrHistPMJABRInitialize, xcvrHistPMOPTValue=xcvrHistPMOPTValue, ipExtIntfMACAddr=ipExtIntfMACAddr, geHistPMJABRInitialize=geHistPMJABRInitialize, pvxL2IntfTrustIncomingDscp=pvxL2IntfTrustIncomingDscp, ethL1IFHistPMOTUEBInitialize=ethL1IFHistPMOTUEBInitialize, xcvrCrntPMSIZE1024To1518Validity=xcvrCrntPMSIZE1024To1518Validity, stmnHistPMTempTimeStamp=stmnHistPMTempTimeStamp, stmnPMThresholdPortIdx=stmnPMThresholdPortIdx, ntpClient=ntpClient, envGenCond=envGenCond, stmnHistPMSupplyVoltage2Validity=stmnHistPMSupplyVoltage2Validity, xcvrCrntPMNBYTCRInitialize=xcvrCrntPMNBYTCRInitialize, shelfInvRev=shelfInvRev, fcActAutoEnableTimer=fcActAutoEnableTimer, xcvrCrntPMOTUESInitialize=xcvrCrntPMOTUESInitialize, xcvrCrntPMNBYTCR64BitValidity=xcvrCrntPMNBYTCR64BitValidity, xcvrHistPMOTUESValue=xcvrHistPMOTUESValue, pvxL2IFTcaEvt=pvxL2IFTcaEvt, shelfInvExpansionShelfIdMismatchClear=shelfInvExpansionShelfIdMismatchClear, pvxL2IFCrntPMFRDRTimeStamp=pvxL2IFCrntPMFRDRTimeStamp, xcvrCrntPMOPTTimeStamp=xcvrCrntPMOPTTimeStamp, ocnProtSwOpCmd=ocnProtSwOpCmd, ethL1IFPMThresholdTable=ethL1IFPMThresholdTable, condDateAndTime=condDateAndTime, briOpticalPwrTransmittedMinClear=briOpticalPwrTransmittedMinClear, oaHistPMLaser2CurrentValue=oaHistPMLaser2CurrentValue, geHistPMTPFCTXValue=geHistPMTPFCTXValue, pvxL2IFPMThresholdSlotIdx=pvxL2IFPMThresholdSlotIdx, xcvrCrntPMFCSEValue=xcvrCrntPMFCSEValue, swUpgradeAddress=swUpgradeAddress, vcgXCProtPortNum=vcgXCProtPortNum, xcvrSignalDegradeClear=xcvrSignalDegradeClear, ocnHistPMTable=ocnHistPMTable, xcvrHistPMUASSValue=xcvrHistPMUASSValue, stmnTOHTransparency=stmnTOHTransparency, passivePortNumChannels=passivePortNumChannels, stmnHistPMOPTMinTimeStamp=stmnHistPMOPTMinTimeStamp, xcvrCrntPMTempValue=xcvrCrntPMTempValue, envExplGsClear=envExplGsClear, xcvrCrntPMOTUUASValidity=xcvrCrntPMOTUUASValidity, xcvrHistPMUASSValidity=xcvrHistPMUASSValidity, oaSSIOpticalPwrReceivedMaxClear=oaSSIOpticalPwrReceivedMaxClear, condReportType=condReportType, neAutoDST=neAutoDST, fcCrntPMSESValue=fcCrntPMSESValue, pvxL2IFHistPMSIZE65To127Initialize=pvxL2IFHistPMSIZE65To127Initialize, ethIntfMirrorConfig=ethIntfMirrorConfig, geHistPMSupplyVoltageValue=geHistPMSupplyVoltageValue, stmnCrntPMOPTMinValidity=stmnCrntPMOPTMinValidity, vcnCrntPMHPSESInitialize=vcnCrntPMHPSESInitialize, xcvrLossOfSignalCond=xcvrLossOfSignalCond, geCrntPMOPRMaxValidity=geCrntPMOPRMaxValidity, fcHistPMTempValidity=fcHistPMTempValidity, ethL1IFCrntPMNBITCR64BitValidity=ethL1IFCrntPMNBITCR64BitValidity, xcvrHistPMOTUUASValue=xcvrHistPMOTUUASValue, ethL1IFHistPMCVInitialize=ethL1IFHistPMCVInitialize, vcnXCDestSlotIdx=vcnXCDestSlotIdx, xcvrCrntPMFRDRTimeStamp=xcvrCrntPMFRDRTimeStamp, dataCommsPingEntry=dataCommsPingEntry, pluggableInvPluginEvt=pluggableInvPluginEvt, stmnCrntPMRSEBTimeStamp=stmnCrntPMRSEBTimeStamp, ethL1IFCrntPMNBYTCR64BitInitialize=ethL1IFCrntPMNBYTCR64BitInitialize, ocnXcvrMismatchCond=ocnXcvrMismatchCond, stmnAlarmIndicationSignalCond=stmnAlarmIndicationSignalCond, tl1LogTable=tl1LogTable, gePMThresholdUSIZEValue=gePMThresholdUSIZEValue, geHistPMESValidity=geHistPMESValidity, pvxL2IFHistPMFRDRTimeStamp=pvxL2IFHistPMFRDRTimeStamp, amdCrntPMOPTValidity=amdCrntPMOPTValidity, ocnLpbkOpSlotIdx=ocnLpbkOpSlotIdx, xcvrCrntPMTBYCRXInitialize=xcvrCrntPMTBYCRXInitialize, ocnCrntPMSupplyVoltage2Validity=ocnCrntPMSupplyVoltage2Validity, fcHistPMOPTAvgValue=fcHistPMOPTAvgValue, geCrntPMSIZEOver1518Value=geCrntPMSIZEOver1518Value, geCrntPMCVValue=geCrntPMCVValue, briHistPMOPRMinTimeStamp=briHistPMOPRMinTimeStamp, stmnCrntPMOTUBBETimeStamp=stmnCrntPMOTUBBETimeStamp, xcvrCrntPMSIZE128To255Initialize=xcvrCrntPMSIZE128To255Initialize, briCrntPMOPTMinInitialize=briCrntPMOPTMinInitialize, ocnHistPMOPTMinValue=ocnHistPMOPTMinValue, oaDspCommCond=oaDspCommCond, geCrntPMSIZEOver1518Initialize=geCrntPMSIZEOver1518Initialize, ocnCrntPMUASLValue=ocnCrntPMUASLValue, stmnCrntPMOPRMinValidity=stmnCrntPMOPRMinValidity, fcRowStatus=fcRowStatus, oaCrntPMLaser1CurrentTimeStamp=oaCrntPMLaser1CurrentTimeStamp, ethL1IFCrntPMOTNBERValue=ethL1IFCrntPMOTNBERValue, ethL1IFCrntPMOTUUASValue=ethL1IFCrntPMOTUUASValue, xcvrCrntPMUSIZEValue=xcvrCrntPMUSIZEValue, stmnHistPMOPTAvgValidity=stmnHistPMOPTAvgValidity, amdOpticalPwrTransmittedTarget=amdOpticalPwrTransmittedTarget, ocnHistPMSESSValue=ocnHistPMSESSValue, geCrntPMSIZE1024To1518Value=geCrntPMSIZE1024To1518Value, xcvrCrntPMCVInitialize=xcvrCrntPMCVInitialize, pvxL2IFCrntPMFRDRValue=pvxL2IFCrntPMFRDRValue, stsnXCType=stsnXCType, ospfIfAdminStat=ospfIfAdminStat, stmnCrntPMRSSESValue=stmnCrntPMRSSESValue, ocnCrntPMCVSInitialize=ocnCrntPMCVSInitialize, xcvrCrntPMNBYTCR64BitTimeStamp=xcvrCrntPMNBYTCR64BitTimeStamp, stmnLossOfSignalClear=stmnLossOfSignalClear, stmnProtGrpRowStatus=stmnProtGrpRowStatus, geCrntPMOPRAvgTimeStamp=geCrntPMOPRAvgTimeStamp, ocnTypeIdx=ocnTypeIdx, shelfInvExpectedShelfNum=shelfInvExpectedShelfNum, xcvrRFIClear=xcvrRFIClear, ocnProtGrpProtShelfIdx=ocnProtGrpProtShelfIdx, pluggableInvPEC=pluggableInvPEC, briHistPMIntervalIdx=briHistPMIntervalIdx, slotInvUpgradeStage=slotInvUpgradeStage, pluggableInvVendorPartNum=pluggableInvVendorPartNum, xcvrLaserStatus=xcvrLaserStatus, oscEntry=oscEntry, ocnHistPMOTNAVGBERTimeStamp=ocnHistPMOTNAVGBERTimeStamp, pvxL2IFCrntPMSIZE512To1023Validity=pvxL2IFCrntPMSIZE512To1023Validity, oscShelfIdx=oscShelfIdx, oaEffectiveGain=oaEffectiveGain, ocnHistPMOPTMinValidity=ocnHistPMOPTMinValidity, stsnCrntPMUASPValidity=stsnCrntPMUASPValidity, ocnHistPMUASLValue=ocnHistPMUASLValue, pvxSUniEvtNotifications=pvxSUniEvtNotifications, fcCrntPMCVTimeStamp=fcCrntPMCVTimeStamp, ocnCrntPMUASSTimeStamp=ocnCrntPMUASSTimeStamp, pvxL2IFCrntPMBCSTInitialize=pvxL2IFCrntPMBCSTInitialize, ethIntfLinkStatus=ethIntfLinkStatus, ocnCrntPMOPRMinValue=ocnCrntPMOPRMinValue, vcnHistPMHPUASValidity=vcnHistPMHPUASValidity, geHistPMSESValidity=geHistPMSESValidity, ntpClientStratum=ntpClientStratum, xcvrCrntPMSEFSSValue=xcvrCrntPMSEFSSValue, stmnOperStatQlfr=stmnOperStatQlfr, pluggableInvMedia=pluggableInvMedia, stmnPMThresholdRSBBEValue=stmnPMThresholdRSBBEValue, xcvrHistPMSupplyVoltageValue=xcvrHistPMSupplyVoltageValue, ocnHistPMOTUEBInitialize=ocnHistPMOTUEBInitialize, actAlarmTableEntryIdx=actAlarmTableEntryIdx, ocnCrntPMOTUESTimeStamp=ocnCrntPMOTUESTimeStamp, PYSNMP_MODULE_ID=bti7000Mib, stmnCrntPMOPRMaxTimeStamp=stmnCrntPMOPRMaxTimeStamp, vcnHistPMHPBBEValue=vcnHistPMHPBBEValue, pvxL2IFCrntPMSIZE128To255TimeStamp=pvxL2IFCrntPMSIZE128To255TimeStamp, stmnVendorPN3=stmnVendorPN3, ocnCrntPMNBYTCRInitialize=ocnCrntPMNBYTCRInitialize, slotInvPowerFailClear=slotInvPowerFailClear, ethL1IFCrntPMTempValue=ethL1IFCrntPMTempValue, xcvrPhyPMMon=xcvrPhyPMMon, xcvrHistPMRSBBEInitialize=xcvrHistPMRSBBEInitialize, ocnHistPMUASLInitialize=ocnHistPMUASLInitialize, ocnCrntPMESLValue=ocnCrntPMESLValue, geHistPMOPTTimeStamp=geHistPMOPTTimeStamp, adminEvtNotifications=adminEvtNotifications, ethL1IFHistPMTempTimeStamp=ethL1IFHistPMTempTimeStamp, pvxL2IFCrntPMSIZE256To511TimeStamp=pvxL2IFCrntPMSIZE256To511TimeStamp, pluggableInvWavelengthMin=pluggableInvWavelengthMin, ethL1IFCrntPMCVValidity=ethL1IFCrntPMCVValidity, stmnOpticalPwrTransmittedMaxTh=stmnOpticalPwrTransmittedMaxTh, oaCrntPMMSInsLossTimeStamp=oaCrntPMMSInsLossTimeStamp, amdHistPMIntervalTypeIdx=amdHistPMIntervalTypeIdx, xcvrHistPMTFRCRXInitialize=xcvrHistPMTFRCRXInitialize, gePMThresholdIntervalTypeIdx=gePMThresholdIntervalTypeIdx, ocnProtGrpWorkSlotIdx=ocnProtGrpWorkSlotIdx, geHistPMOPTMaxInitialize=geHistPMOPTMaxInitialize, oaAmplifierConditioningCond=oaAmplifierConditioningCond, ocnLossOfSecondaryTimingReferenceCond=ocnLossOfSecondaryTimingReferenceCond, stmnCrntPMUNCRCDWInitialize=stmnCrntPMUNCRCDWInitialize, cpConnectorMismatchCond=cpConnectorMismatchCond, pluggableInvFailCond=pluggableInvFailCond, passivePortWavelength=passivePortWavelength, briHistPMOPTMaxValidity=briHistPMOPTMaxValidity, geOpticalPwrTransmittedMinClear=geOpticalPwrTransmittedMinClear, stmnPMThresholdRSSESValue=stmnPMThresholdRSSESValue, oaCrntPMLaser2CurrentValidity=oaCrntPMLaser2CurrentValidity, xcvrHistPMSIZE1024To1518TimeStamp=xcvrHistPMSIZE1024To1518TimeStamp, ocnCrntPMOTUEBInitialize=ocnCrntPMOTUEBInitialize, ethL1IFHistPMShelfIdx=ethL1IFHistPMShelfIdx, ntpAssocAuthenFailedCond=ntpAssocAuthenFailedCond, xcvrCrntPMNBYTCR64BitValue=xcvrCrntPMNBYTCR64BitValue, stmnCrntPMOPRTimeStamp=stmnCrntPMOPRTimeStamp, stsnHistPMCVPTimeStamp=stsnHistPMCVPTimeStamp, gePMThresholdJABRValue=gePMThresholdJABRValue, ethL1IFCrntPMNBYTCR64BitTimeStamp=ethL1IFCrntPMNBYTCR64BitTimeStamp, ethL1IFCrntPMOPTMinTimeStamp=ethL1IFCrntPMOPTMinTimeStamp, ocnCrntPMSESLInitialize=ocnCrntPMSESLInitialize, ocnCrntPMOPRMinValidity=ocnCrntPMOPRMinValidity, xcvrHistPMSIZE256To511Value=xcvrHistPMSIZE256To511Value, amdHistPMVOAValue=amdHistPMVOAValue, pvxL2IFHistPMBCSTInitialize=pvxL2IFHistPMBCSTInitialize, geBandwidthMismatchClear=geBandwidthMismatchClear, ethIntfBouncingStateChangeCount=ethIntfBouncingStateChangeCount, ocnLpbkOpCmd=ocnLpbkOpCmd, briCrntPMLBCTimeStamp=briCrntPMLBCTimeStamp, dataCommsPingSlotIdx=dataCommsPingSlotIdx, condSeverity=condSeverity, olsAlarmIndicationSignalClear=olsAlarmIndicationSignalClear, passivePortCustom2=passivePortCustom2, ipExtIntfSecondaryState=ipExtIntfSecondaryState, odunXCType=odunXCType, xcvrCrntPMOPTAvgInitialize=xcvrCrntPMOPTAvgInitialize, ocnCrntPMOPRMaxInitialize=ocnCrntPMOPRMaxInitialize, geOpticalPwrTransmittedMaxClear=geOpticalPwrTransmittedMaxClear, envAirDryrCond=envAirDryrCond, oaOperations=oaOperations, vcnHistPMHPESInitialize=vcnHistPMHPESInitialize, stmnHistPMIntervalIdx=stmnHistPMIntervalIdx, odunXCDestShelfIdx=odunXCDestShelfIdx, oaHistPMOPTValidity=oaHistPMOPTValidity, stmnCrntPMOPRValue=stmnCrntPMOPRValue, ethL1IFHistPMOTUOFSValue=ethL1IFHistPMOTUOFSValue, stmnProtSwOpCmd=stmnProtSwOpCmd, vcnTypeIdx=vcnTypeIdx, equipment=equipment, condNotifSeverity=condNotifSeverity, fcXcvrMismatchClear=fcXcvrMismatchClear, fcCrntPMOPTMaxTimeStamp=fcCrntPMOPTMaxTimeStamp, ocnCondNotifications=ocnCondNotifications, networkNeighborRowStatus=networkNeighborRowStatus, pluggableInvEntry=pluggableInvEntry, stmnActAutoEnableTimer=stmnActAutoEnableTimer, shelfMissingCond=shelfMissingCond, stmnPMThresholdUNCRCDWValue=stmnPMThresholdUNCRCDWValue, xcvrPMThresholdOSIZEValue=xcvrPMThresholdOSIZEValue, ocnHistPMNBYTCR64BitInitialize=ocnHistPMNBYTCR64BitInitialize, ipExtIntfLastChange=ipExtIntfLastChange)
mibBuilder.exportSymbols("BTI-7000-MIB", xcvrCrntPMSIZE256To511Validity=xcvrCrntPMSIZE256To511Validity, amdOpticalPwrReceived=amdOpticalPwrReceived, geCrntPMOPTTimeStamp=geCrntPMOPTTimeStamp, actAlarmServiceAffecting=actAlarmServiceAffecting, oaOpticalPwrReceivedMaxCond=oaOpticalPwrReceivedMaxCond, geHistPMUASValidity=geHistPMUASValidity, xcvrCrntPMRSEBTimeStamp=xcvrCrntPMRSEBTimeStamp, ospfNbrState=ospfNbrState, stmnCrntPMRSOFSValidity=stmnCrntPMRSOFSValidity, geXcvrMismatchCond=geXcvrMismatchCond, ethL1IFTcaEvt=ethL1IFTcaEvt, xcvrHistPMOTUESValidity=xcvrHistPMOTUESValidity, oaOperStatQlfr=oaOperStatQlfr, stmnHistPMOPRMaxValidity=stmnHistPMOPRMaxValidity, pvxL2IFHistPMTBYCTXInitialize=pvxL2IFHistPMTBYCTXInitialize, geHistPMUSIZEValidity=geHistPMUSIZEValidity, ocnLossOfSignalClear=ocnLossOfSignalClear, pvxL2IFCrntPMSIZE512To1023Value=pvxL2IFCrntPMSIZE512To1023Value, envEngineCond=envEngineCond, xcvrHistPMSIZE1024To1518Validity=xcvrHistPMSIZE1024To1518Validity, xcvrPMThresholdOTUOFSValue=xcvrPMThresholdOTUOFSValue, xcvrCrntPMSESSInitialize=xcvrCrntPMSESSInitialize, vcgTimeSlotIndices=vcgTimeSlotIndices, stmnHistPMRSOFSTimeStamp=stmnHistPMRSOFSTimeStamp, passivePortCustom1=passivePortCustom1, xcvrTraceMismatchClear=xcvrTraceMismatchClear, oaCrntPMOPTTimeStamp=oaCrntPMOPTTimeStamp, geHistPMJABRTimeStamp=geHistPMJABRTimeStamp, ethL1IFCrntPMOTUBBEValidity=ethL1IFCrntPMOTUBBEValidity, cpRestartOpTable=cpRestartOpTable, xcvrCrntPMOTNAVGBERTimeStamp=xcvrCrntPMOTNAVGBERTimeStamp, ipExtIntfPrimaryState=ipExtIntfPrimaryState, xcvrCrntPMCVSTimeStamp=xcvrCrntPMCVSTimeStamp, xcvrCrntPMTFRCRXTimeStamp=xcvrCrntPMTFRCRXTimeStamp, stmnHistPMOTUSESValue=stmnHistPMOTUSESValue, ocnCrntPMOTUSESTimeStamp=ocnCrntPMOTUSESTimeStamp, pluggableInvRestartOpPortIdx=pluggableInvRestartOpPortIdx, stsnCrntPMUASPInitialize=stsnCrntPMUASPInitialize, stmnHistPMOTUBBEValue=stmnHistPMOTUBBEValue, cpSynchronizationSecRefSrcPortNum=cpSynchronizationSecRefSrcPortNum, stmnHistPMRSUASInitialize=stmnHistPMRSUASInitialize, stmnCrntPMNBITCRValidity=stmnCrntPMNBITCRValidity, amdHistPMLitChnValidity=amdHistPMLitChnValidity, stmnCrntPMOTUSESValue=stmnCrntPMOTUSESValue, pvxL2IFHistPMSlotIdx=pvxL2IFHistPMSlotIdx, actAlarmReportType=actAlarmReportType, envAirDryrClear=envAirDryrClear, ocnCrntPMTempTimeStamp=ocnCrntPMTempTimeStamp, fcCrntPMOPRAvgValidity=fcCrntPMOPRAvgValidity, ethL1IFHistPMOPRAvgTimeStamp=ethL1IFHistPMOPRAvgTimeStamp, geHistPMTBYCTXTimeStamp=geHistPMTBYCTXTimeStamp, ocnProtGrpProtTypeIdx=ocnProtGrpProtTypeIdx, fcHistPMUASInitialize=fcHistPMUASInitialize, ethL1IFHistPMOPRMinValidity=ethL1IFHistPMOPRMinValidity, slotInvPackCLEI=slotInvPackCLEI, dbChangeNotificationsObjects=dbChangeNotificationsObjects, stsnForcedSwitchToProtectionCond=stsnForcedSwitchToProtectionCond, oaSlotIdx=oaSlotIdx, xcvrHistPMSIZE1024To1518Initialize=xcvrHistPMSIZE1024To1518Initialize, geHistPMMCSTValidity=geHistPMMCSTValidity, cpShelfIdx=cpShelfIdx, xcvrCrntPMSIZE256To511Initialize=xcvrCrntPMSIZE256To511Initialize, xcvrHistPMSIZE256To511Validity=xcvrHistPMSIZE256To511Validity, actAlarmEntry=actAlarmEntry, ospfVersionNumber=ospfVersionNumber, pvxL2IntfSlotIdx=pvxL2IntfSlotIdx, fcOpticalPwrTransmittedMinClear=fcOpticalPwrTransmittedMinClear, ocnWavelengthNotAchievableClear=ocnWavelengthNotAchievableClear, cpDbBackupResultEvt=cpDbBackupResultEvt, xcvrCrntPMRSSESInitialize=xcvrCrntPMRSSESInitialize, xcvrAlarmIndicationSignalClear=xcvrAlarmIndicationSignalClear, ethIntfRowStatus=ethIntfRowStatus, xcvrCrntPMUASValue=xcvrCrntPMUASValue, ocnHistPMNBITCR64BitInitialize=ocnHistPMNBITCR64BitInitialize, briLpbkOpShelfIdx=briLpbkOpShelfIdx, pvxL2IFHistPMTFRCTXInitialize=pvxL2IFHistPMTFRCTXInitialize, briCrntPMOPTAvgValue=briCrntPMOPTAvgValue, xcvrProtSwOpShelfIdx=xcvrProtSwOpShelfIdx, geHistPMOPRAvgTimeStamp=geHistPMOPRAvgTimeStamp, vcnCrntPMHPEBValue=vcnCrntPMHPEBValue, fcHistPMESValidity=fcHistPMESValidity, briHistPMOPTAvgValue=briHistPMOPTAvgValue, ocnHistPMOTUESValidity=ocnHistPMOTUESValidity, pvxL2IFCrntPMTPFCRXValidity=pvxL2IFCrntPMTPFCRXValidity, ocnProtSwitchEvt=ocnProtSwitchEvt, xcvrCustom3=xcvrCustom3, ethIntfId1=ethIntfId1, stmnHistPMSupplyVoltage2TimeStamp=stmnHistPMSupplyVoltage2TimeStamp, pluggableInvType=pluggableInvType, slotInvUpgradeStageResultEvt=slotInvUpgradeStageResultEvt, pvxL2IFCrntPMBCSTValue=pvxL2IFCrntPMBCSTValue, vcnShelfIdx=vcnShelfIdx, ethL1IFHistPMINVBLKValidity=ethL1IFHistPMINVBLKValidity, xcvrHistPMOPRAvgValue=xcvrHistPMOPRAvgValue, geHistPMOPRAvgInitialize=geHistPMOPRAvgInitialize, xcvrIdx=xcvrIdx, fcEvtNotifications=fcEvtNotifications, fcHistPMShelfIdx=fcHistPMShelfIdx, stsnPMThresholdByPortIntervalTypeIdx=stsnPMThresholdByPortIntervalTypeIdx, briLpbkOpEntry=briLpbkOpEntry, vcnProtSwOpTable=vcnProtSwOpTable, cpUpgradeInProgressClear=cpUpgradeInProgressClear, xcvrPMThresholdRSESValue=xcvrPMThresholdRSESValue, geHistPMLBCValidity=geHistPMLBCValidity, envFireCond=envFireCond, fcCrntPMLBCValue=fcCrntPMLBCValue, envLwHumCond=envLwHumCond, vcnHistPMHPSESValue=vcnHistPMHPSESValue, evtCodeType=evtCodeType, xcvrHistPMRSUASValidity=xcvrHistPMRSUASValidity, vcnHistPMHPBBEInitialize=vcnHistPMHPBBEInitialize, oaHistPMOaIdx=oaHistPMOaIdx, oaPwrSetting=oaPwrSetting, oaHistPMSSIOPRValidity=oaHistPMSSIOPRValidity, xcvrHistPMOTUOFSValidity=xcvrHistPMOTUOFSValidity, geCrntPMFRDRInitialize=geCrntPMFRDRInitialize, ethL1IFHistPMOPRAvgInitialize=ethL1IFHistPMOPRAvgInitialize, xcvrPMThresholdIdx=xcvrPMThresholdIdx, ethL1IFHistPMOTUEBValue=ethL1IFHistPMOTUEBValue, vcnProtSwOpIdx=vcnProtSwOpIdx, geLoopbackClear=geLoopbackClear, stmnCrntPMOTUUASValue=stmnCrntPMOTUUASValue, pvxL2IFCrntPMSIZE64Initialize=pvxL2IFCrntPMSIZE64Initialize, oaHistPMLaser1PowerValidity=oaHistPMLaser1PowerValidity, xcvrHistPMSEFSSValidity=xcvrHistPMSEFSSValidity, pvxL2IFHistPMSIZE512To1023Validity=pvxL2IFHistPMSIZE512To1023Validity, stmnCrntPMRSSESTimeStamp=stmnCrntPMRSSESTimeStamp, stmnCrntPMSupplyVoltage2TimeStamp=stmnCrntPMSupplyVoltage2TimeStamp, stsnXCProtSlotNum=stsnXCProtSlotNum, ocnHistPMESLTimeStamp=ocnHistPMESLTimeStamp, ocnProtGrpId=ocnProtGrpId, oaMSInsertionLossCond=oaMSInsertionLossCond, geCrntPMFRDRValidity=geCrntPMFRDRValidity, vcgXCSrcSlotIdx=vcgXCSrcSlotIdx, stmnProtSwOpTypeIdx=stmnProtSwOpTypeIdx, xcvrForcedSwitchToProtectionCond=xcvrForcedSwitchToProtectionCond, ethL1IFPMThresholdOTUEBValue=ethL1IFPMThresholdOTUEBValue, shelfConfigurationMismatchCond=shelfConfigurationMismatchCond, briHistPMSupplyVoltageValidity=briHistPMSupplyVoltageValidity, xcvrCrntPMSIZEOver1518Validity=xcvrCrntPMSIZEOver1518Validity, ocnHistPMOPTAvgValidity=ocnHistPMOPTAvgValidity, gePortIdx=gePortIdx, xcvrHistPMOTUUASTimeStamp=xcvrHistPMOTUUASTimeStamp, ethL1IFCrntPMSESValue=ethL1IFCrntPMSESValue, briHistPMOPRMaxValidity=briHistPMOPRMaxValidity, actAlarmSeverity=actAlarmSeverity, pvxL2IFCrntPMSIZEOver1518Value=pvxL2IFCrntPMSIZEOver1518Value, fcHistPMPortIdx=fcHistPMPortIdx, xcvrOpticalPwrTransmittedMinCond=xcvrOpticalPwrTransmittedMinCond, ocnShelfIdx=ocnShelfIdx, geCrntPMUASInitialize=geCrntPMUASInitialize, fcOpticalPwrTransmittedMaxCond=fcOpticalPwrTransmittedMaxCond, slotInvMissingClear=slotInvMissingClear, vcnPMThresholdByPortShelfIdx=vcnPMThresholdByPortShelfIdx, briAdminStatus=briAdminStatus, xcvrTraceLabel=xcvrTraceLabel, ethL1IFCrntPMOPTMaxValue=ethL1IFCrntPMOPTMaxValue, geFiberType=geFiberType, oaCrntPMOPTValue=oaCrntPMOPTValue, ethL1IFCrntPMOPRMinInitialize=ethL1IFCrntPMOPRMinInitialize, stmnHistPMOPRValue=stmnHistPMOPRValue, pvxL2IFCrntPMSwitchIdx=pvxL2IFCrntPMSwitchIdx, pluggableInvCLEI=pluggableInvCLEI, neCondNotifications=neCondNotifications, ocnCrntPMSEFSSTimeStamp=ocnCrntPMSEFSSTimeStamp, xcvrHistPMNBITCRValidity=xcvrHistPMNBITCRValidity, stsnCrntPMShelfIdx=stsnCrntPMShelfIdx, fcHistPMTable=fcHistPMTable, pvxL2IFHistPMBCSTValue=pvxL2IFHistPMBCSTValue, ocnCrntPMOPTMinTimeStamp=ocnCrntPMOPTMinTimeStamp, geCrntPMUASValue=geCrntPMUASValue, geHistPMESValue=geHistPMESValue, vcnXCTable=vcnXCTable, stsnHistPMESPInitialize=stsnHistPMESPInitialize, stsnEvtNotifications=stsnEvtNotifications, ocnLockoutWorkingCond=ocnLockoutWorkingCond, ethIntfLaserStatus=ethIntfLaserStatus, oaCrntPMIntervalTypeIdx=oaCrntPMIntervalTypeIdx, ocnHistPMUASLValidity=ocnHistPMUASLValidity, oaLaser2Power=oaLaser2Power, shelfInvName=shelfInvName, geCrntPMSIZE64Validity=geCrntPMSIZE64Validity, cpMismatchCond=cpMismatchCond, ocnCrntPMOTUOFSTimeStamp=ocnCrntPMOTUOFSTimeStamp, cpUpgradeFailClear=cpUpgradeFailClear, envCondAttrSeverity=envCondAttrSeverity, pluggableInvOperations=pluggableInvOperations, stmnProtGrpEntry=stmnProtGrpEntry, stsnHistPMFCPTimeStamp=stsnHistPMFCPTimeStamp, geCrntPMSIZE64Value=geCrntPMSIZE64Value, geCrntPMSIZE64Initialize=geCrntPMSIZE64Initialize, ntpTimeAndDateUpdateEvt=ntpTimeAndDateUpdateEvt, xcvrHistPMMCSTTimeStamp=xcvrHistPMMCSTTimeStamp, cpId=cpId, stmnHistPMSupplyVoltageTimeStamp=stmnHistPMSupplyVoltageTimeStamp, xcvrCrntPMSIZE65To127Initialize=xcvrCrntPMSIZE65To127Initialize, xcvrCrntPMRSESValidity=xcvrCrntPMRSESValidity, cpCrntPMTable=cpCrntPMTable, pvxL2IntfAdminStatus=pvxL2IntfAdminStatus, ethIntfOpticalPwrReceivedMaxTh=ethIntfOpticalPwrReceivedMaxTh, netMgmtMTU=netMgmtMTU, geHistPMUASInitialize=geHistPMUASInitialize, ocnPMThresholdUASSValue=ocnPMThresholdUASSValue, ethL1IFHistPMSupplyVoltageValue=ethL1IFHistPMSupplyVoltageValue, stmnCrntPMOPRAvgValue=stmnCrntPMOPRAvgValue, xcvrCrntPMOTUSESValue=xcvrCrntPMOTUSESValue, slotInvHiTempAutoShutdownCond=slotInvHiTempAutoShutdownCond, stmnCrntPMMSUASValidity=stmnCrntPMMSUASValidity, xcvrCrntPMLBCValidity=xcvrCrntPMLBCValidity, ethL1IFCrntPMOTNBERInitialize=ethL1IFCrntPMOTNBERInitialize, shelfInvUSI=shelfInvUSI, envLwHumClear=envLwHumClear, xcvrHistPMOTUOFSValue=xcvrHistPMOTUOFSValue, oaStatusChangeEvt=oaStatusChangeEvt, netMgmtOperStatQlfr=netMgmtOperStatQlfr, amdOperStatus=amdOperStatus, pvxL2IFCrntPMSIZE256To511Validity=pvxL2IFCrntPMSIZE256To511Validity, briOpticalPwrReceivedMinCond=briOpticalPwrReceivedMinCond, ocnHistPMOPRMaxValidity=ocnHistPMOPRMaxValidity, pvxESrvcBWPrflEvtNotifications=pvxESrvcBWPrflEvtNotifications, xcvrCrntPMFCSEValidity=xcvrCrntPMFCSEValidity, vcnCrntPMHPSESTimeStamp=vcnCrntPMHPSESTimeStamp, geHistPMBCSTInitialize=geHistPMBCSTInitialize, pvxL2IFCrntPMSIZE128To255Validity=pvxL2IFCrntPMSIZE128To255Validity, ospfNbrOptions=ospfNbrOptions, geCrntPMOPTAvgInitialize=geCrntPMOPTAvgInitialize, fcOpticalPwrTransmittedMaxClear=fcOpticalPwrTransmittedMaxClear, stsnProtSwOpShelfIdx=stsnProtSwOpShelfIdx, vcnCrntPMHPBBETimeStamp=vcnCrntPMHPBBETimeStamp, ospfAreaBdrRtrStatus=ospfAreaBdrRtrStatus, geCrntPMTPFCRXValue=geCrntPMTPFCRXValue, oaRowStatus=oaRowStatus, ocnCrntPMOTNBERValidity=ocnCrntPMOTNBERValidity, ocnProtGrpWorkShelfIdx=ocnProtGrpWorkShelfIdx, fcCrntPMOPRValidity=fcCrntPMOPRValidity, stmnHistPMPortIdx=stmnHistPMPortIdx, ospfIfStatus=ospfIfStatus, pvxL2IFHistPMTPFCRXValue=pvxL2IFHistPMTPFCRXValue, briCrntPMOPTMaxInitialize=briCrntPMOPTMaxInitialize, geCrntPMUSIZEInitialize=geCrntPMUSIZEInitialize, cpSynchronizationSlotIdx=cpSynchronizationSlotIdx, geOpticalPwrTransmittedMinTh=geOpticalPwrTransmittedMinTh, ethIntfFiberType=ethIntfFiberType, ocnHistPMCVLInitialize=ocnHistPMCVLInitialize, xcvrCrntPMSIZE64Value=xcvrCrntPMSIZE64Value, stmnCrntPMRSSESValidity=stmnCrntPMRSSESValidity, ethL1IFHistPMNBYTCR64BitTimeStamp=ethL1IFHistPMNBYTCR64BitTimeStamp, ethL1IFHistPMUASInitialize=ethL1IFHistPMUASInitialize, ocnLossOfSecondaryTimingReferenceClear=ocnLossOfSecondaryTimingReferenceClear, xcvrHistPMFRDRTimeStamp=xcvrHistPMFRDRTimeStamp, xcvrHistPMOPRMinTimeStamp=xcvrHistPMOPRMinTimeStamp, xcvrProtSwOpEntry=xcvrProtSwOpEntry, geHistPMOPTMaxValue=geHistPMOPTMaxValue, xcvrLoopbackClear=xcvrLoopbackClear)
mibBuilder.exportSymbols("BTI-7000-MIB", ocnHistPMLBCTimeStamp=ocnHistPMLBCTimeStamp, geCrntPMFRGTTimeStamp=geCrntPMFRGTTimeStamp, stmnPMThresholdOTUESValue=stmnPMThresholdOTUESValue, stmnPMThresholdMSBBEValue=stmnPMThresholdMSBBEValue, pvxL2IntfPCPCodingProfName=pvxL2IntfPCPCodingProfName, olsOpticalPwrReceivedMaxClear=olsOpticalPwrReceivedMaxClear, geHistPMOSIZEValue=geHistPMOSIZEValue, geCrntPMOSIZEValidity=geCrntPMOSIZEValidity, xcvrHistPMESSTimeStamp=xcvrHistPMESSTimeStamp, briCrntPMOPRAvgValidity=briCrntPMOPRAvgValidity, briLossOfSequenceClear=briLossOfSequenceClear, amdCrntPMLineIdx=amdCrntPMLineIdx, briLoopbackCond=briLoopbackCond, briBandwidthMismatchClear=briBandwidthMismatchClear, stmnHistPMSupplyVoltage2Value=stmnHistPMSupplyVoltage2Value, geCrntPMTBYCTXValidity=geCrntPMTBYCTXValidity, vcnHistPMHPEBValue=vcnHistPMHPEBValue, geCrntPMSupplyVoltageTimeStamp=geCrntPMSupplyVoltageTimeStamp, xcvrCrntPMRSSESValidity=xcvrCrntPMRSSESValidity, amdStatusChangeEvt=amdStatusChangeEvt, ocnHistPMOTNAVGBERValidity=ocnHistPMOTNAVGBERValidity, vcnCrntPMHPEBTimeStamp=vcnCrntPMHPEBTimeStamp, shelfInvTestDate=shelfInvTestDate, ntpRefStratum=ntpRefStratum, stmnProtGrpWorkSlotIdx=stmnProtGrpWorkSlotIdx, stmnHistPMOTUOFSValidity=stmnHistPMOTUOFSValidity, geHistPMTempTimeStamp=geHistPMTempTimeStamp, ocnProtSwOpEntry=ocnProtSwOpEntry, ocnCrntPMNBYTCRTimeStamp=ocnCrntPMNBYTCRTimeStamp, ocnCrntPMNBITCRTimeStamp=ocnCrntPMNBITCRTimeStamp, ethL1IFHistPMOPTMaxTimeStamp=ethL1IFHistPMOPTMaxTimeStamp, amdTPLNACond=amdTPLNACond, xcvrPMThresholdCVSValue=xcvrPMThresholdCVSValue, stmnCrntPMNBYTCR64BitValidity=stmnCrntPMNBYTCR64BitValidity, fcCrntPMOPRMaxTimeStamp=fcCrntPMOPRMaxTimeStamp, stmnProtGrpWorkPortIdx=stmnProtGrpWorkPortIdx, geHistPMCVTimeStamp=geHistPMCVTimeStamp, tl1UserLockoutCond=tl1UserLockoutCond, xcvrCrntPMFRGTValue=xcvrCrntPMFRGTValue, cpSynchronizationSwitchEvt=cpSynchronizationSwitchEvt, pvxL2IFCrntPMEntry=pvxL2IFCrntPMEntry, pvxL2IFPMThresholdEntry=pvxL2IFPMThresholdEntry, pvxL2IntfUseDei=pvxL2IntfUseDei, fcLoopbackClear=fcLoopbackClear, pvxL2IFCrntPMSIZE65To127Validity=pvxL2IFCrntPMSIZE65To127Validity, amdHistPMLitChnTimeStamp=amdHistPMLitChnTimeStamp, briHistPMOPRMaxTimeStamp=briHistPMOPRMaxTimeStamp, odunXCOdunTypeIdx=odunXCOdunTypeIdx, xcvrHistPMSIZE128To255Validity=xcvrHistPMSIZE128To255Validity, ethL1IFCrntPMOTNAVGBERValue=ethL1IFCrntPMOTNAVGBERValue, tl1IpLockoutClear=tl1IpLockoutClear, ethL1IFCrntPMSupplyVoltage2TimeStamp=ethL1IFCrntPMSupplyVoltage2TimeStamp, ocnHistPMOPTValidity=ocnHistPMOPTValidity, neDateAndTime=neDateAndTime, oscMTU=oscMTU, ocnLpbkOpEntry=ocnLpbkOpEntry, envCpMajorClear=envCpMajorClear, stmnHistPMNBYTCRInitialize=stmnHistPMNBYTCRInitialize, xcvrCrntPMTBYCRXTimeStamp=xcvrCrntPMTBYCRXTimeStamp, stmnHistPMOTNBERTimeStamp=stmnHistPMOTNBERTimeStamp, ethL1IFPMThresholdINVBLKValue=ethL1IFPMThresholdINVBLKValue, shelfInvCondNotifications=shelfInvCondNotifications, olsOTUTrailTraceMismatchCond=olsOTUTrailTraceMismatchCond, fcCrntPMShelfIdx=fcCrntPMShelfIdx, stmnOpticalPwrTransmitted=stmnOpticalPwrTransmitted, oaHistPMLaser2TempValidity=oaHistPMLaser2TempValidity, oaCrntPMOaTypeIdx=oaCrntPMOaTypeIdx, geCrntPMSlotIdx=geCrntPMSlotIdx, envCpMajorCond=envCpMajorCond, shelfInvType=shelfInvType, geCrntPMTFRCTXValue=geCrntPMTFRCTXValue, ethIntfLpbkOpCmd=ethIntfLpbkOpCmd, ethL1IFHistPMOPTMaxValue=ethL1IFHistPMOPTMaxValue, pvxL2IFHistPMSIZE1024To1518Initialize=pvxL2IFHistPMSIZE1024To1518Initialize, envCondAttrCodeType=envCondAttrCodeType, geHistPMOPRAvgValue=geHistPMOPRAvgValue, geCrntPMSIZE65To127Value=geCrntPMSIZE65To127Value, briCrntPMTempValidity=briCrntPMTempValidity, oaBackReflectionSafetyCond=oaBackReflectionSafetyCond, ntpClientRefIPAddr=ntpClientRefIPAddr, fcHistPMOPRTimeStamp=fcHistPMOPRTimeStamp, geHistPMTBYCTXValidity=geHistPMTBYCTXValidity, oaCaseTempShutdownCond=oaCaseTempShutdownCond, stsnHistPMUASPTimeStamp=stsnHistPMUASPTimeStamp, dbChangeSeqNum=dbChangeSeqNum, stmnOpticalPwrReceivedMaxCond=stmnOpticalPwrReceivedMaxCond, pluggableInvEncoding=pluggableInvEncoding, stmnCrntPMRSUASValue=stmnCrntPMRSUASValue, fcCrntPMOPRMaxValidity=fcCrntPMOPRMaxValidity, stsnConcatMismatchCond=stsnConcatMismatchCond, ethL1IFPMThresholdUNCRCDWValue=ethL1IFPMThresholdUNCRCDWValue, envLwWtrCond=envLwWtrCond, ocnCrntPMNBITCRInitialize=ocnCrntPMNBITCRInitialize, ospfIfAreaId=ospfIfAreaId, envHiHumClear=envHiHumClear, ocnCrntPMESLTimeStamp=ocnCrntPMESLTimeStamp, fcHistPMOPRMaxValue=fcHistPMOPRMaxValue, slotInvPwrFeedBFuseFailClear=slotInvPwrFeedBFuseFailClear, xcvrCrntPMOPRAvgTimeStamp=xcvrCrntPMOPRAvgTimeStamp, oaLaserMaxTempShutdownCond=oaLaserMaxTempShutdownCond, notificationControl=notificationControl, pvxL2IFHistPMUSIZEValidity=pvxL2IFHistPMUSIZEValidity, topology=topology, xcvrPMThresholdRSBBEValue=xcvrPMThresholdRSBBEValue, ospfLsdbRouterId=ospfLsdbRouterId, xcvrCrntPMOTUOFSValidity=xcvrCrntPMOTUOFSValidity, xcvrHistPMTempValidity=xcvrHistPMTempValidity, ocnProtSwEvtType=ocnProtSwEvtType, stmnCrntPMOTUEBValue=stmnCrntPMOTUEBValue, fcCrntPMOPRMinInitialize=fcCrntPMOPRMinInitialize, fcHistPMEntry=fcHistPMEntry, ethL1IFPMThresholdEntry=ethL1IFPMThresholdEntry, briLossOfMultiframeClear=briLossOfMultiframeClear, xcvrMissingCond=xcvrMissingCond, vcnXCDestShelfIdx=vcnXCDestShelfIdx, amdGrid=amdGrid, briOperStatus=briOperStatus, pvxL2IFHistPMSIZE512To1023TimeStamp=pvxL2IFHistPMSIZE512To1023TimeStamp, ethL1IFHistPMNBYTCRTimeStamp=ethL1IFHistPMNBYTCRTimeStamp, ntpAssocSrvrNotReachableClear=ntpAssocSrvrNotReachableClear, xcvrCrntPMOPTMinTimeStamp=xcvrCrntPMOPTMinTimeStamp, stmnProtSwOpEntry=stmnProtSwOpEntry, ethL1IFHistPMCVTimeStamp=ethL1IFHistPMCVTimeStamp, ospfIfSlotIdx=ospfIfSlotIdx, stmnHistPMOTNBERInitialize=stmnHistPMOTNBERInitialize, fcCrntPMOPRAvgInitialize=fcCrntPMOPRAvgInitialize, envPowerCond=envPowerCond, pvxL2IFHistPMFRDRValue=pvxL2IFHistPMFRDRValue, pvxL2IFHistPMSIZE128To255Initialize=pvxL2IFHistPMSIZE128To255Initialize, ethL1IFCrntPMCVInitialize=ethL1IFCrntPMCVInitialize, ocnHistPMEntry=ocnHistPMEntry, ocnHistPMSESSInitialize=ocnHistPMSESSInitialize, stmnCrntPMRSEBValue=stmnCrntPMRSEBValue, ocnProtGrpProtPortIdx=ocnProtGrpProtPortIdx, slotInvTable=slotInvTable, xcvrOpticalPwrReceivedMinCond=xcvrOpticalPwrReceivedMinCond, xcvrHistPMIntervalIdx=xcvrHistPMIntervalIdx, briHistPMOPTMinTimeStamp=briHistPMOPTMinTimeStamp, stsnCrntPMIntervalTypeIdx=stsnCrntPMIntervalTypeIdx, xcvrCrntPMSIZE128To255TimeStamp=xcvrCrntPMSIZE128To255TimeStamp, briAutoEnableTimer=briAutoEnableTimer, amdHistPMShelfIdx=amdHistPMShelfIdx, stmnCrntPMOPTValidity=stmnCrntPMOPTValidity, opticalLayer=opticalLayer, xcvrTcaEvt=xcvrTcaEvt, oscIdx=oscIdx, briOpticalPwrTransmittedMinCond=briOpticalPwrTransmittedMinCond, oaHistPMOPRValidity=oaHistPMOPRValidity, briHistPMOPRAvgTimeStamp=briHistPMOPRAvgTimeStamp, slotInvFailCond=slotInvFailCond, fcBandwidthMismatchCond=fcBandwidthMismatchCond, pvxL2IntfPortTypeIdx=pvxL2IntfPortTypeIdx, xcvrCrntPMFRDRValidity=xcvrCrntPMFRDRValidity, stmnCrntPMMSUASTimeStamp=stmnCrntPMMSUASTimeStamp, ethL1IFCrntPMPortIdx=ethL1IFCrntPMPortIdx, ethL1IFCrntPMOTUOFSTimeStamp=ethL1IFCrntPMOTUOFSTimeStamp, olsOTNPayloadMismatchClear=olsOTNPayloadMismatchClear, stsnBER=stsnBER, actAlarmDateAndTime=actAlarmDateAndTime, slotInvUnsupportedPackClear=slotInvUnsupportedPackClear, ethL1IFPMThresholdShelfIdx=ethL1IFPMThresholdShelfIdx, shelfInvDiscoveredMSISerialNum=shelfInvDiscoveredMSISerialNum, pluggableInvReach=pluggableInvReach, vcnHistPMHPUASTimeStamp=vcnHistPMHPUASTimeStamp, slotInvPackPEC=slotInvPackPEC, ethL1IFHistPMNBITCR64BitValue=ethL1IFHistPMNBITCR64BitValue, geCrntPMFRDRValue=geCrntPMFRDRValue, xcvrHistPMSEFSSTimeStamp=xcvrHistPMSEFSSTimeStamp, stsnLockoutProtectionCond=stsnLockoutProtectionCond, ocnProtSwOpShelfIdx=ocnProtSwOpShelfIdx, ocnLossOfSignalCond=ocnLossOfSignalCond, xcvrHistPMSESValidity=xcvrHistPMSESValidity, fcCrntPMESValidity=fcCrntPMESValidity, pvxL2IFHistPMMCSTValue=pvxL2IFHistPMMCSTValue, xcvrCrntPMESInitialize=xcvrCrntPMESInitialize, fcCrntPMOPTMinValidity=fcCrntPMOPTMinValidity, ocnCrntPMOTUOFSInitialize=ocnCrntPMOTUOFSInitialize, fcHistPMESTimeStamp=fcHistPMESTimeStamp, oaAutoEnableTimer=oaAutoEnableTimer, cpRowStatus=cpRowStatus, xcvrCrntPMIdx=xcvrCrntPMIdx, geHistPMSupplyVoltageValidity=geHistPMSupplyVoltageValidity, oaHistPMMSInsLossTimeStamp=oaHistPMMSInsLossTimeStamp, geHistPMMCSTValue=geHistPMMCSTValue, vcgXCDestShelfIdx=vcgXCDestShelfIdx, xcvrHistPMSESSTimeStamp=xcvrHistPMSESSTimeStamp, xcvrCrntPMSESValue=xcvrCrntPMSESValue, stsnCondNotifications=stsnCondNotifications, cpSynchronizationPrimProtStatQlfr=cpSynchronizationPrimProtStatQlfr, ocnCrntPMOPTMaxValue=ocnCrntPMOPTMaxValue, ethL1IFCrntPMOPTValue=ethL1IFCrntPMOPTValue, fcVendorPN1=fcVendorPN1, xcvrLossOfLockClear=xcvrLossOfLockClear, pvxL2IFCrntPMOSIZEValidity=pvxL2IFCrntPMOSIZEValidity, ocnForcedSwitchToProtectionClear=ocnForcedSwitchToProtectionClear, pvxLldpRemTablesChangeEvt=pvxLldpRemTablesChangeEvt, stmnHistPMIntervalTypeIdx=stmnHistPMIntervalTypeIdx, shelfInvExpectedNEName=shelfInvExpectedNEName, vcnCrntPMHPUASTimeStamp=vcnCrntPMHPUASTimeStamp, xcvrSDBERTh=xcvrSDBERTh, ethL1IFHistPMIntervalTypeIdx=ethL1IFHistPMIntervalTypeIdx, oaOpticalPwrTransmittedMaxClear=oaOpticalPwrTransmittedMaxClear, stmnLossOfSecondaryTimingReferenceClear=stmnLossOfSecondaryTimingReferenceClear, xcvrCrntPMNBYTCRValidity=xcvrCrntPMNBYTCRValidity, ocnHistPMOPRTimeStamp=ocnHistPMOPRTimeStamp, xcvrHistPMSlotIdx=xcvrHistPMSlotIdx, vcnXCProtPortNum=vcnXCProtPortNum, oaOOBRSDOpCmd=oaOOBRSDOpCmd, xcvrCrntPMOPTAvgTimeStamp=xcvrCrntPMOPTAvgTimeStamp, xcvrRowStatus=xcvrRowStatus, fcTcaEvt=fcTcaEvt, netMgmtIPBcast=netMgmtIPBcast, xcvrHistPMOSIZEValidity=xcvrHistPMOSIZEValidity, fcCrntPMOPRAvgValue=fcCrntPMOPRAvgValue, ocnCrntPMLBCValue=ocnCrntPMLBCValue, ethL1IFCrntPMOPTMaxInitialize=ethL1IFCrntPMOPTMaxInitialize, stmnHistPMMSEBInitialize=stmnHistPMMSEBInitialize, stsnProtSwOpEntry=stsnProtSwOpEntry, vcnHistPMIntervalIdx=vcnHistPMIntervalIdx, ocnHistPMNBYTCR64BitValidity=ocnHistPMNBYTCR64BitValidity, xcvrCrntPMSIZE512To1023Validity=xcvrCrntPMSIZE512To1023Validity, stmnHistPMSupplyVoltageValue=stmnHistPMSupplyVoltageValue, geCrntPMTFRCRXTimeStamp=geCrntPMTFRCRXTimeStamp, cpSynchronizationTable=cpSynchronizationTable, pvxL2IFHistPMTBYCTXValidity=pvxL2IFHistPMTBYCTXValidity, amdHistPMOPTValidity=amdHistPMOPTValidity, xcvrHistPMOPRAvgTimeStamp=xcvrHistPMOPRAvgTimeStamp, stmnPMThresholdOTUEBValue=stmnPMThresholdOTUEBValue, stmnHistPMOPTMinValidity=stmnHistPMOPTMinValidity, xcvrLoopbackCond=xcvrLoopbackCond, stsnHistPMTable=stsnHistPMTable, xcvrHistPMTable=xcvrHistPMTable, briCrntPMOPRTimeStamp=briCrntPMOPRTimeStamp, fcPMThresholdSlotIdx=fcPMThresholdSlotIdx, trapSeqNum=trapSeqNum, shelfInvChassisPEC=shelfInvChassisPEC, xcvrOpticalPwrReceivedMaxTh=xcvrOpticalPwrReceivedMaxTh, xcvrCrntPMUASSInitialize=xcvrCrntPMUASSInitialize, xcvrHistPMSIZE65To127Validity=xcvrHistPMSIZE65To127Validity, ocnCrntPMOPRAvgValidity=ocnCrntPMOPRAvgValidity, ethL1IFCrntPMOPTTimeStamp=ethL1IFCrntPMOPTTimeStamp, xcvrCrntPMRSEBValue=xcvrCrntPMRSEBValue, ethIntfLldpRemPortIdSubtype=ethIntfLldpRemPortIdSubtype, xcvrCrntPMTempValidity=xcvrCrntPMTempValidity, ethL1IFHistPMTable=ethL1IFHistPMTable, ocnLpbkOpShelfIdx=ocnLpbkOpShelfIdx, geCrntPMTBYCRXTimeStamp=geCrntPMTBYCRXTimeStamp, amdTable=amdTable, stsnTcaEvt=stsnTcaEvt, geHistPMTFRCRXTimeStamp=geHistPMTFRCRXTimeStamp, cpSlotIdx=cpSlotIdx, pvxL2IFHistPMIntervalTypeIdx=pvxL2IFHistPMIntervalTypeIdx, vcnXCType=vcnXCType, xcvrForcedSwitchToProtectionClear=xcvrForcedSwitchToProtectionClear)
mibBuilder.exportSymbols("BTI-7000-MIB", stsnConcatMismatchClear=stsnConcatMismatchClear, ethL1IFHistPMTempValidity=ethL1IFHistPMTempValidity, stmnCrntPMOPTMinTimeStamp=stmnCrntPMOPTMinTimeStamp, ocnHistPMOTNBERInitialize=ocnHistPMOTNBERInitialize, briCrntPMOPTMinValidity=briCrntPMOPTMinValidity, geHistPMTPFCRXInitialize=geHistPMTPFCRXInitialize, ipExtInterfaceTableEntry=ipExtInterfaceTableEntry, ethL1IFHistPMSlotIdx=ethL1IFHistPMSlotIdx, netMgmtStatusChangeEvt=netMgmtStatusChangeEvt, geHistPMSIZE128To255Validity=geHistPMSIZE128To255Validity, ocnId1=ocnId1, shelfInvExpectedIPAddress=shelfInvExpectedIPAddress, stsnCrntPMCVPTimeStamp=stsnCrntPMCVPTimeStamp, ocnLockoutProtectionClear=ocnLockoutProtectionClear, geCrntPMOPRMinTimeStamp=geCrntPMOPRMinTimeStamp, shelfDiscConfig=shelfDiscConfig, vcnPMThresholdByPortEntry=vcnPMThresholdByPortEntry, ethIntfErrorCorrection=ethIntfErrorCorrection, stmnPhyPMMon=stmnPhyPMMon, amdAutoEnableTimer=amdAutoEnableTimer, stmnOpticalPwrReceived=stmnOpticalPwrReceived, ipExtIntfNumberedStatus=ipExtIntfNumberedStatus, oaDspCommClear=oaDspCommClear, slotInvVersionMismatchCond=slotInvVersionMismatchCond, ethL1IFHistPMOPRTimeStamp=ethL1IFHistPMOPRTimeStamp, oaBackReflectionHighThresholdCond=oaBackReflectionHighThresholdCond, ethIntfSpeed=ethIntfSpeed, pvxL2IFCrntPMTBYCRXTimeStamp=pvxL2IFCrntPMTBYCRXTimeStamp, pvxL2IFHistPMTBYCRXValidity=pvxL2IFHistPMTBYCRXValidity, ethL1IFCrntPMOTUESInitialize=ethL1IFCrntPMOTUESInitialize, envBatteryCond=envBatteryCond, geHistPMFCSEValidity=geHistPMFCSEValidity, fcOpticalPwrReceivedMinClear=fcOpticalPwrReceivedMinClear, odunXCProtPortNum=odunXCProtPortNum, envPowerClear=envPowerClear, xcvrCrntPMOPRMinValue=xcvrCrntPMOPRMinValue, pvxL2IFHistPMFRGTValue=pvxL2IFHistPMFRGTValue, xcvrReceivedLockoutCond=xcvrReceivedLockoutCond, olsSFPMissingClear=olsSFPMissingClear, amdPortIdx=amdPortIdx, ethIntfOpticalPwrReceived=ethIntfOpticalPwrReceived, ethL1IFHistPMOPTMinTimeStamp=ethL1IFHistPMOPTMinTimeStamp, pvxL2IFHistPMBCSTValidity=pvxL2IFHistPMBCSTValidity, ethL1IFCrntPMOPTMinValidity=ethL1IFCrntPMOPTMinValidity, netMgmtIPMask=netMgmtIPMask, ocnHistPMNBITCRInitialize=ocnHistPMNBITCRInitialize, geCrntPMOPTMinValidity=geCrntPMOPTMinValidity, vcnIdx=vcnIdx, briLaserStatus=briLaserStatus, pvxL2IFPMThresholdTable=pvxL2IFPMThresholdTable, xcvrHistPMOTUUASInitialize=xcvrHistPMOTUUASInitialize, xcvrPMThresholdUASSValue=xcvrPMThresholdUASSValue, vcnHistPMHPESTimeStamp=vcnHistPMHPESTimeStamp, ethL1IFCrntPMOTUESValue=ethL1IFCrntPMOTUESValue, briCrntPMIntervalTypeIdx=briCrntPMIntervalTypeIdx, xcvrXCSrcTypeIdx=xcvrXCSrcTypeIdx, xcvrRemoteFaultClear=xcvrRemoteFaultClear, stmnTransparencyChannel=stmnTransparencyChannel, xcvrCrntPMUASValidity=xcvrCrntPMUASValidity, neHTAutoShutdown=neHTAutoShutdown, xcvrXCEntry=xcvrXCEntry, oaEvtNotifications=oaEvtNotifications, fcCrntPMPortIdx=fcCrntPMPortIdx, vcnXCSrcSlotIdx=vcnXCSrcSlotIdx, amdCrntPMShelfIdx=amdCrntPMShelfIdx, oaVariableOpticalAttenuation=oaVariableOpticalAttenuation, stmnHistPMOTUEBValidity=stmnHistPMOTUEBValidity, geHistPMOPTAvgInitialize=geHistPMOPTAvgInitialize, stmnBERTh=stmnBERTh, stmnHistPMOTUESInitialize=stmnHistPMOTUESInitialize, pvxL2IFCrntPMFCSEInitialize=pvxL2IFCrntPMFCSEInitialize, ethL1IFStatusChangeEvt=ethL1IFStatusChangeEvt, stmnLossOfPrimaryTimingReferenceClear=stmnLossOfPrimaryTimingReferenceClear, ethIntfPhyPMMon=ethIntfPhyPMMon, ocnCrntPMUNCRCDWTimeStamp=ocnCrntPMUNCRCDWTimeStamp, ntpAssocSrvrNotRespondingCond=ntpAssocSrvrNotRespondingCond, stmnHistPMRSSESInitialize=stmnHistPMRSSESInitialize, fcLossOfMultiframeClear=fcLossOfMultiframeClear, xcvrCrntPMSESSValidity=xcvrCrntPMSESSValidity, slotInvDataEntry=slotInvDataEntry, ocnHistPMCVSValue=ocnHistPMCVSValue, pvxL2IntfType=pvxL2IntfType, stsnCrntPMSESPTimeStamp=stsnCrntPMSESPTimeStamp, cpHistPMTempTimeStamp=cpHistPMTempTimeStamp, briTxLockingCond=briTxLockingCond, stmnCrntPMTempValue=stmnCrntPMTempValue, xcvrCrntPMSIZE64Initialize=xcvrCrntPMSIZE64Initialize, xcvrExpectedTraceLabel=xcvrExpectedTraceLabel, xcvrHistPMRSEBInitialize=xcvrHistPMRSEBInitialize, olsRemoteFaultCond=olsRemoteFaultCond, slotInvTempShutdownTh=slotInvTempShutdownTh, stmnHistPMMSSESInitialize=stmnHistPMMSSESInitialize, ethL1IFCrntPMOPRAvgTimeStamp=ethL1IFCrntPMOPRAvgTimeStamp, briLossOfAlignmentClear=briLossOfAlignmentClear, olsLoopbackClear=olsLoopbackClear)
