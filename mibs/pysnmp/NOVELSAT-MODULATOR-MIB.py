#
# PySNMP MIB module NOVELSAT-MODULATOR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NOVELSAT-MODULATOR-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:14:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
nsRoot, = mibBuilder.importSymbols("NOVELSAT-ROOT-MIB", "nsRoot")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Gauge32, ObjectIdentity, iso, Bits, TimeTicks, Counter64, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Counter32, Unsigned32, ModuleIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Gauge32", "ObjectIdentity", "iso", "Bits", "TimeTicks", "Counter64", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Counter32", "Unsigned32", "ModuleIdentity", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
nsModulator = ModuleIdentity((1, 3, 6, 1, 4, 1, 37576, 3))
nsModulator.setRevisions(('2010-09-12 15:00',))
if mibBuilder.loadTexts: nsModulator.setLastUpdated('201009121500Z')
if mibBuilder.loadTexts: nsModulator.setOrganization('Novelsat')
nsModConfig = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 3, 1))
if mibBuilder.loadTexts: nsModConfig.setStatus('current')
nsModConfigLine = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1))
if mibBuilder.loadTexts: nsModConfigLine.setStatus('current')
nsModConfigLineTXStatus = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineTXStatus.setStatus('current')
nsModConfigLineMode = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 255))).clone(namedValues=NamedValues(("dvbs", 0), ("dsng", 1), ("dvbs2", 2), ("ns3", 3), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineMode.setStatus('current')
nsModConfigLineChPriority = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("equal", 0), ("ch1", 1), ("ch2", 2), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineChPriority.setStatus('current')
nsModConfigLineRollOff = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("rollOff005", 0), ("rollOff010", 1), ("rollOff015", 2), ("rollOff020", 3), ("rollOff025", 4), ("rollOff035", 5), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineRollOff.setStatus('current')
nsModConfigLineSineStatus = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineSineStatus.setStatus('current')
nsModConfigLineRFFreq = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineRFFreq.setStatus('current')
nsModConfigLineSymbolRate = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50000, 72000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineSymbolRate.setStatus('current')
nsModConfigLinePower = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-3000, 0))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLinePower.setStatus('current')
nsModConfigLineGoldSeq = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 262141))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineGoldSeq.setStatus('current')
nsModConfigLineDualChState = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("dual", 0), ("single", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineDualChState.setStatus('current')
nsModConfigLineBitRate = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineBitRate.setStatus('current')
nsModConfigLinePowerUpTXState = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLinePowerUpTXState.setStatus('current')
nsModConfigLineAcmMode = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 255))).clone(namedValues=NamedValues(("disable", 0), ("enableCh1", 1), ("enableCh2", 2), ("enableCh1Ch2", 3), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineAcmMode.setStatus('current')
nsModConfigLineOutputLevelMode = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("constantPower", 0), ("constantEnvelope", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineOutputLevelMode.setStatus('current')
nsModConfigLineChannel1Bandwidth = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineChannel1Bandwidth.setStatus('current')
nsModConfigLineChannel2Bandwidth = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineChannel2Bandwidth.setStatus('current')
nsModConfigLineSpectrumInvert = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineSpectrumInvert.setStatus('current')
nsModConfigLineRecommendedBitRate = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModConfigLineRecommendedBitRate.setStatus('current')
nsModConfigLineLOFreq = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4000000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineLOFreq.setStatus('current')
nsModConfigLineAcmUseManagementIp = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineAcmUseManagementIp.setStatus('current')
nsModConfigLineAcmIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 22), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineAcmIpAddress.setStatus('current')
nsModConfigLineAcmIpNetmask = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 23), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineAcmIpNetmask.setStatus('current')
nsModConfigLineAupcMode = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineAupcMode.setStatus('current')
nsModConfigLineAupcSatRxFreq = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 40000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineAupcSatRxFreq.setStatus('current')
nsModConfigLineAupcSatRxPolarity = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 255))).clone(namedValues=NamedValues(("vertical", 0), ("horizontal", 1), ("circular-left", 2), ("circular-right", 3), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineAupcSatRxPolarity.setStatus('current')
nsModConfigLineAupcSatTxFreq = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 40000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineAupcSatTxFreq.setStatus('current')
nsModConfigLineAupcSatTxPolarity = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 255))).clone(namedValues=NamedValues(("vertical", 0), ("horizontal", 1), ("circular-left", 2), ("circular-right", 3), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineAupcSatTxPolarity.setStatus('current')
nsModConfigLineAupcMaxGain = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineAupcMaxGain.setStatus('current')
nsModConfigLineAupcMaxAttn = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineAupcMaxAttn.setStatus('current')
nsModConfigChannel = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 3, 1, 2))
if mibBuilder.loadTexts: nsModConfigChannel.setStatus('current')
nsModConfigChannelTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 3, 1, 2, 1), )
if mibBuilder.loadTexts: nsModConfigChannelTable.setStatus('current')
nsModConfigChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 3, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: nsModConfigChannelEntry.setStatus('current')
nsModConfigChStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigChStatus.setStatus('current')
nsModConfigChSource = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 255))).clone(namedValues=NamedValues(("gbeA", 0), ("gbeB", 1), ("asi1", 2), ("asi2", 3), ("gigE", 4), ("disable", 5), ("g703", 6), ("test1", 7), ("test2", 8), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigChSource.setStatus('current')
nsModConfigChNPD = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("none", 0), ("addition", 1), ("deletion", 2), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigChNPD.setStatus('current')
nsModConfigChFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("normal", 0), ("short", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigChFrameSize.setStatus('current')
nsModConfigChModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 255))).clone(namedValues=NamedValues(("modulationBpsk", 0), ("modulationQpsk", 1), ("modulation8Psk", 2), ("modulation16Qam", 3), ("modulation16Apsk", 4), ("modulation32Apsk", 5), ("modulation64Apsk", 6), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigChModulation.setStatus('current')
nsModConfigChFECRate = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 255))).clone(namedValues=NamedValues(("fec1Div5", 0), ("fec1Div4", 1), ("fec1Div3", 2), ("fec2Div5", 3), ("fec13Div30", 4), ("fec4Div9", 5), ("fec7Div15", 6), ("fec22Div45", 7), ("fec1Div2", 8), ("fec8Div15", 9), ("fec5Div9", 10), ("fec17Div30", 11), ("fec3Div5", 12), ("fec28Div45", 13), ("fec19Div30", 14), ("fec2Div3", 15), ("fec32Div45", 16), ("fec11Div15", 17), ("fec3Div4", 18), ("fec7Div9", 19), ("fec4Div5", 20), ("fec37Div45", 21), ("fec5Div6", 22), ("fec7Div8", 23), ("fec8Div9", 24), ("fec9Div10", 25), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigChFECRate.setStatus('current')
nsModConfigChPilot = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("pilotNo", 0), ("pilot8Slots", 1), ("pilot16Slots", 2), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigChPilot.setStatus('current')
nsModConfigChISSY = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("issyDisabled", 0), ("issy2Bytes", 1), ("issy3Bytes", 2), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigChISSY.setStatus('current')
nsModConfigChStreamFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 255))).clone(namedValues=NamedValues(("transport188", 0), ("transport204", 1), ("genericPacketsized", 2), ("genericContinuous", 3), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigChStreamFormat.setStatus('current')
nsModConfigChPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigChPacketSize.setStatus('current')
nsModConfigChSyncByte = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigChSyncByte.setStatus('current')
nsModConfigChIsi = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigChIsi.setStatus('current')
nsModConfigChPCRRestamping = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigChPCRRestamping.setStatus('current')
nsModConfigChMpegProcessingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 255))).clone(namedValues=NamedValues(("off", 0), ("dataAdjust", 1), ("symbolAdjust", 2), ("partialDataAdjust", 3), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigChMpegProcessingMode.setStatus('current')
nsModConfigChBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 2, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigChBitRate.setStatus('current')
nsModConfigChBitRatePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModConfigChBitRatePercent.setStatus('current')
nsModConfigChTSProtect = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigChTSProtect.setStatus('current')
nsModConfigInterface = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 3, 1, 3))
if mibBuilder.loadTexts: nsModConfigInterface.setStatus('current')
nsModConfigInterfaceTestTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 3, 1, 3, 1), )
if mibBuilder.loadTexts: nsModConfigInterfaceTestTable.setStatus('current')
nsModConfigInterfaceTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 3, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: nsModConfigInterfaceTestEntry.setStatus('current')
nsModConfigInterfaceTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 255))).clone(namedValues=NamedValues(("pattern2Pwr7Neg1", 0), ("pattern2Pwr9Neg1", 1), ("pattern2Pwr11Neg1", 2), ("pattern2Pwr15Neg1", 3), ("pattern2Pwr20Neg1", 4), ("pattern2Pwr23Neg1", 5), ("pattern2Pwr29Neg1", 6), ("pattern2Pwr31Neg1", 7), ("patternAllZeros", 8), ("patternAllOnes", 9), ("patternBitAlternate", 10), ("pattern2BitAlternate", 11), ("pattern7Ones", 12), ("pattern7Zeros", 13), ("pattern6Ones", 14), ("pattern6Zeros", 15), ("pattern55AA", 16), ("pattern6699", 17), ("patternC33C", 18), ("pattern00FF", 19), ("patternSAWTOOTH", 20), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigInterfaceTestPattern.setStatus('current')
nsModConfigInterfaceTestInvert = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigInterfaceTestInvert.setStatus('current')
nsModConfigInterfaceASITable = MibTable((1, 3, 6, 1, 4, 1, 37576, 3, 1, 3, 2), )
if mibBuilder.loadTexts: nsModConfigInterfaceASITable.setStatus('current')
nsModConfigInterfaceASIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 3, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: nsModConfigInterfaceASIEntry.setStatus('current')
nsModConfigInterfaceASIDataOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("lsb", 0), ("msb", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigInterfaceASIDataOrder.setStatus('current')
nsModConfigInterfaceEthernetTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 3, 1, 3, 3), )
if mibBuilder.loadTexts: nsModConfigInterfaceEthernetTable.setStatus('current')
nsModConfigInterfaceEthernetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 3, 1, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: nsModConfigInterfaceEthernetEntry.setStatus('current')
nsModConfigInterfaceEthernetAutoNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigInterfaceEthernetAutoNegotiation.setStatus('current')
nsModConfigInterfaceEthernetSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("speed10", 0), ("speed100", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigInterfaceEthernetSpeed.setStatus('current')
nsModConfigInterfaceEthernetDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("half", 0), ("full", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigInterfaceEthernetDuplex.setStatus('current')
nsModConfigInterfaceEthernetEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 255))).clone(namedValues=NamedValues(("raw", 0), ("nspe", 1), ("gse", 2), ("ule", 3), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigInterfaceEthernetEncapsulation.setStatus('current')
nsModConfigInterfaceEthernetPid = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 8191))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigInterfaceEthernetPid.setStatus('current')
nsModConfigInterfaceGigETable = MibTable((1, 3, 6, 1, 4, 1, 37576, 3, 1, 3, 4), )
if mibBuilder.loadTexts: nsModConfigInterfaceGigETable.setStatus('current')
nsModConfigInterfaceGigEEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 3, 1, 3, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: nsModConfigInterfaceGigEEntry.setStatus('current')
nsModConfigInterfaceGigEAutoNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigInterfaceGigEAutoNegotiation.setStatus('current')
nsModConfigInterfaceGigESpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("speed10", 0), ("speed100", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigInterfaceGigESpeed.setStatus('current')
nsModConfigInterfaceGigEDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("half", 0), ("full", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigInterfaceGigEDuplex.setStatus('current')
nsModConfigInterfaceGigEPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("rj45", 0), ("sfp", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigInterfaceGigEPortType.setStatus('current')
nsModConfigCid = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 3, 1, 4))
if mibBuilder.loadTexts: nsModConfigCid.setStatus('current')
nsModConfigCidState = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigCidState.setStatus('current')
nsModConfigCidLatitude = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigCidLatitude.setStatus('current')
nsModConfigCidLongitude = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigCidLongitude.setStatus('current')
nsModConfigCidPhone = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigCidPhone.setStatus('current')
nsModConfigCidExtension = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigCidExtension.setStatus('current')
nsModConfigCidUsertext = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 4, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigCidUsertext.setStatus('current')
nsModMonitor = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 3, 2))
if mibBuilder.loadTexts: nsModMonitor.setStatus('current')
nsModMonitorInterface = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 3, 2, 1))
if mibBuilder.loadTexts: nsModMonitorInterface.setStatus('current')
nsModMonitorInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 3, 2, 1, 1), )
if mibBuilder.loadTexts: nsModMonitorInterfaceTable.setStatus('current')
nsModMonitorInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 3, 2, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: nsModMonitorInterfaceEntry.setStatus('current')
nsModMonitorInterfaceDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorInterfaceDataRate.setStatus('current')
nsModMonitorInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("notLocked", 0), ("locked", 1), ("inactive", 2), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorInterfaceStatus.setStatus('current')
nsModMonitorInterfaceChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("none", 0), ("channel-1", 1), ("channel-2", 2), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorInterfaceChannel.setStatus('current')
nsModMonitorInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorInterfaceName.setStatus('current')
nsModMonitorSystem = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 3, 2, 2))
if mibBuilder.loadTexts: nsModMonitorSystem.setStatus('current')
nsModMonitorSystemBoardTmp = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorSystemBoardTmp.setStatus('current')
nsModMonitorSystem10MHrzClkSource = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("internal", 0), ("external", 1), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorSystem10MHrzClkSource.setStatus('current')
nsModMonitorSystemRefClkOut = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorSystemRefClkOut.setStatus('current')
nsModMonitorSystemTxPortClk = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("off", 0), ("lband", 1), ("buc", 2), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorSystemTxPortClk.setStatus('current')
nsModMonitorEthernet = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 3, 2, 3))
if mibBuilder.loadTexts: nsModMonitorEthernet.setStatus('current')
nsModMonitorEthernetTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 3, 2, 3, 1), )
if mibBuilder.loadTexts: nsModMonitorEthernetTable.setStatus('current')
nsModMonitorEthernetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 3, 2, 3, 1, 1), ).setIndexNames((0, "NOVELSAT-MODULATOR-MIB", "nsModMonitorEthernetStatisticsNumber"))
if mibBuilder.loadTexts: nsModMonitorEthernetEntry.setStatus('current')
nsModMonitorEthernetStatisticsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 3, 1, 1, 1), Counter32())
if mibBuilder.loadTexts: nsModMonitorEthernetStatisticsNumber.setStatus('current')
nsModMonitorEthernetStatisticsName = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorEthernetStatisticsName.setStatus('current')
nsModMonitorEthernetStatisticsValueA = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorEthernetStatisticsValueA.setStatus('current')
nsModMonitorEthernetStatisticsValueB = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorEthernetStatisticsValueB.setStatus('current')
nsModMonitorAcm = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 3, 2, 4))
if mibBuilder.loadTexts: nsModMonitorAcm.setStatus('current')
nsModMonitorAcmTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 3, 2, 4, 1), )
if mibBuilder.loadTexts: nsModMonitorAcmTable.setStatus('current')
nsModMonitorAcmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 3, 2, 4, 1, 1), ).setIndexNames((0, "NOVELSAT-MODULATOR-MIB", "nsModMonitorAcmStatisticsNumber"))
if mibBuilder.loadTexts: nsModMonitorAcmEntry.setStatus('current')
nsModMonitorAcmStatisticsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 4, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsNumber.setStatus('current')
nsModMonitorAcmStatisticsClientIp = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 4, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsClientIp.setStatus('current')
nsModMonitorAcmStatisticsClientName = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsClientName.setStatus('current')
nsModMonitorAcmStatisticsClientSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsClientSnr.setStatus('current')
nsModMonitorAcmStatisticsClientMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsClientMargin.setStatus('current')
nsModMonitorAcmStatisticsChannelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("channel-1", 0), ("channel-2", 1), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsChannelNum.setStatus('current')
nsModMonitorAcmStatisticsLineMode = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 255))).clone(namedValues=NamedValues(("dvbs", 0), ("dsng", 1), ("dvbs2", 2), ("ns3", 3), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsLineMode.setStatus('current')
nsModMonitorAcmStatisticsModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 255))).clone(namedValues=NamedValues(("modulationBpsk", 0), ("modulationQpsk", 1), ("modulation8Psk", 2), ("modulation16Qam", 3), ("modulation16Apsk", 4), ("modulation32Apsk", 5), ("modulation64Apsk", 6), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsModulation.setStatus('current')
nsModMonitorAcmStatisticsFecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 255))).clone(namedValues=NamedValues(("fec1Div5", 0), ("fec1Div4", 1), ("fec1Div3", 2), ("fec2Div5", 3), ("fec13Div30", 4), ("fec4Div9", 5), ("fec7Div15", 6), ("fec22Div45", 7), ("fec1Div2", 8), ("fec8Div15", 9), ("fec5Div9", 10), ("fec17Div30", 11), ("fec3Div5", 12), ("fec28Div45", 13), ("fec19Div30", 14), ("fec2Div3", 15), ("fec32Div45", 16), ("fec11Div15", 17), ("fec3Div4", 18), ("fec7Div9", 19), ("fec4Div5", 20), ("fec37Div45", 21), ("fec5Div6", 22), ("fec7Div8", 23), ("fec8Div9", 24), ("fec9Div10", 25), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsFecRate.setStatus('current')
nsModMonitorAcmStatisticsFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("normal", 0), ("short", 1), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsFrameSize.setStatus('current')
nsModMonitorAcmStatisticsPilot = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("pilotNo", 0), ("pilot16Slots", 1), ("pilot8Slots", 2), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsPilot.setStatus('current')
nsModMonitorAcmStatisticsIsLocked = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsIsLocked.setStatus('current')
nsModMonitorAcmStatisticsIsWorstCase = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsIsWorstCase.setStatus('current')
nsModMonitorAcmStatisticsState = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 255))).clone(namedValues=NamedValues(("active", 0), ("progress", 1), ("lost", 2), ("idle", 3), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsState.setStatus('current')
nsModMonitorAcmStatisticsGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 4, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsGroup.setStatus('current')
nsModMonitorAcmStatisticsClrCmd = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 2, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("none", 0), ("execute", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsClrCmd.setStatus('current')
nsModMonitorAupc = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 3, 2, 5))
if mibBuilder.loadTexts: nsModMonitorAupc.setStatus('current')
nsModMonitorAupcCurrentPower = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 2, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorAupcCurrentPower.setStatus('current')
nsModMonitorAupcMinimalPower = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 2, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorAupcMinimalPower.setStatus('current')
nsModMonitorAupcMaximalPower = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 2, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorAupcMaximalPower.setStatus('current')
nsModMonitorAupcAveragePower = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 2, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorAupcAveragePower.setStatus('current')
nsModMonitorAupcEstimatedUplinkAttn = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 2, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorAupcEstimatedUplinkAttn.setStatus('current')
nsModMonitorAupcEstimatedDownlinkAttn = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 2, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorAupcEstimatedDownlinkAttn.setStatus('current')
nsModMonitorAupcResetAvgCmd = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 2, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("none", 0), ("execute", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModMonitorAupcResetAvgCmd.setStatus('current')
mibBuilder.exportSymbols("NOVELSAT-MODULATOR-MIB", nsModMonitorAupcAveragePower=nsModMonitorAupcAveragePower, nsModConfigCidLongitude=nsModConfigCidLongitude, nsModConfigLineLOFreq=nsModConfigLineLOFreq, nsModMonitorAupcMinimalPower=nsModMonitorAupcMinimalPower, nsModConfigChSource=nsModConfigChSource, nsModMonitorSystem10MHrzClkSource=nsModMonitorSystem10MHrzClkSource, nsModConfigLineAupcSatRxPolarity=nsModConfigLineAupcSatRxPolarity, nsModMonitor=nsModMonitor, nsModMonitorAcmStatisticsState=nsModMonitorAcmStatisticsState, nsModConfigLineSineStatus=nsModConfigLineSineStatus, nsModConfigInterfaceGigETable=nsModConfigInterfaceGigETable, nsModMonitorAcmStatisticsIsWorstCase=nsModMonitorAcmStatisticsIsWorstCase, nsModMonitorAcmStatisticsChannelNum=nsModMonitorAcmStatisticsChannelNum, nsModConfigInterfaceGigEEntry=nsModConfigInterfaceGigEEntry, nsModConfigCidLatitude=nsModConfigCidLatitude, nsModMonitorAupc=nsModMonitorAupc, nsModConfigChannel=nsModConfigChannel, nsModConfigChBitRate=nsModConfigChBitRate, nsModConfigCidExtension=nsModConfigCidExtension, nsModConfigInterfaceEthernetAutoNegotiation=nsModConfigInterfaceEthernetAutoNegotiation, nsModMonitorEthernetEntry=nsModMonitorEthernetEntry, nsModMonitorAupcEstimatedUplinkAttn=nsModMonitorAupcEstimatedUplinkAttn, nsModConfigInterfaceEthernetPid=nsModConfigInterfaceEthernetPid, nsModMonitorSystem=nsModMonitorSystem, nsModConfigLineAcmUseManagementIp=nsModConfigLineAcmUseManagementIp, nsModMonitorAcmStatisticsClientSnr=nsModMonitorAcmStatisticsClientSnr, nsModConfigLineAupcMaxGain=nsModConfigLineAupcMaxGain, nsModConfigLineAupcSatRxFreq=nsModConfigLineAupcSatRxFreq, nsModMonitorAcmStatisticsNumber=nsModMonitorAcmStatisticsNumber, nsModConfigLineAupcSatTxPolarity=nsModConfigLineAupcSatTxPolarity, nsModMonitorAupcMaximalPower=nsModMonitorAupcMaximalPower, nsModConfigChSyncByte=nsModConfigChSyncByte, nsModConfigInterfaceGigESpeed=nsModConfigInterfaceGigESpeed, nsModMonitorSystemBoardTmp=nsModMonitorSystemBoardTmp, nsModConfigChIsi=nsModConfigChIsi, nsModConfigLineSymbolRate=nsModConfigLineSymbolRate, nsModMonitorAcmStatisticsClientName=nsModMonitorAcmStatisticsClientName, nsModConfigInterfaceTestTable=nsModConfigInterfaceTestTable, nsModConfigLineRollOff=nsModConfigLineRollOff, nsModConfigLineRFFreq=nsModConfigLineRFFreq, nsModMonitorInterfaceChannel=nsModMonitorInterfaceChannel, nsModConfigCid=nsModConfigCid, nsModConfigLineAcmIpNetmask=nsModConfigLineAcmIpNetmask, nsModConfigInterfaceTestPattern=nsModConfigInterfaceTestPattern, nsModConfigInterfaceASITable=nsModConfigInterfaceASITable, nsModConfigChPilot=nsModConfigChPilot, nsModConfigLineDualChState=nsModConfigLineDualChState, nsModConfigChMpegProcessingMode=nsModConfigChMpegProcessingMode, nsModMonitorAupcEstimatedDownlinkAttn=nsModMonitorAupcEstimatedDownlinkAttn, nsModConfigChModulation=nsModConfigChModulation, nsModConfigLineSpectrumInvert=nsModConfigLineSpectrumInvert, nsModConfigLineBitRate=nsModConfigLineBitRate, nsModMonitorInterfaceDataRate=nsModMonitorInterfaceDataRate, nsModMonitorEthernetStatisticsValueA=nsModMonitorEthernetStatisticsValueA, nsModConfigLineAupcMaxAttn=nsModConfigLineAupcMaxAttn, nsModMonitorEthernetTable=nsModMonitorEthernetTable, nsModConfigInterfaceEthernetEntry=nsModConfigInterfaceEthernetEntry, nsModConfigInterfaceEthernetEncapsulation=nsModConfigInterfaceEthernetEncapsulation, PYSNMP_MODULE_ID=nsModulator, nsModConfigChNPD=nsModConfigChNPD, nsModConfigInterfaceEthernetDuplex=nsModConfigInterfaceEthernetDuplex, nsModConfigCidUsertext=nsModConfigCidUsertext, nsModConfigInterfaceEthernetTable=nsModConfigInterfaceEthernetTable, nsModConfigInterfaceTestEntry=nsModConfigInterfaceTestEntry, nsModMonitorAcmStatisticsFecRate=nsModMonitorAcmStatisticsFecRate, nsModConfigLineAcmIpAddress=nsModConfigLineAcmIpAddress, nsModConfigChPCRRestamping=nsModConfigChPCRRestamping, nsModMonitorAcmStatisticsClientMargin=nsModMonitorAcmStatisticsClientMargin, nsModMonitorInterfaceName=nsModMonitorInterfaceName, nsModMonitorInterfaceEntry=nsModMonitorInterfaceEntry, nsModMonitorAcmStatisticsModulation=nsModMonitorAcmStatisticsModulation, nsModConfigLineChPriority=nsModConfigLineChPriority, nsModConfig=nsModConfig, nsModMonitorAcmTable=nsModMonitorAcmTable, nsModMonitorAcmStatisticsClrCmd=nsModMonitorAcmStatisticsClrCmd, nsModMonitorAcmStatisticsIsLocked=nsModMonitorAcmStatisticsIsLocked, nsModMonitorEthernetStatisticsNumber=nsModMonitorEthernetStatisticsNumber, nsModConfigChStatus=nsModConfigChStatus, nsModConfigLineGoldSeq=nsModConfigLineGoldSeq, nsModMonitorEthernetStatisticsValueB=nsModMonitorEthernetStatisticsValueB, nsModConfigLineTXStatus=nsModConfigLineTXStatus, nsModConfigInterfaceEthernetSpeed=nsModConfigInterfaceEthernetSpeed, nsModulator=nsModulator, nsModConfigInterfaceGigEPortType=nsModConfigInterfaceGigEPortType, nsModConfigLineRecommendedBitRate=nsModConfigLineRecommendedBitRate, nsModMonitorSystemRefClkOut=nsModMonitorSystemRefClkOut, nsModMonitorAupcCurrentPower=nsModMonitorAupcCurrentPower, nsModConfigChFECRate=nsModConfigChFECRate, nsModMonitorEthernet=nsModMonitorEthernet, nsModConfigInterfaceGigEDuplex=nsModConfigInterfaceGigEDuplex, nsModConfigLineMode=nsModConfigLineMode, nsModConfigLine=nsModConfigLine, nsModConfigLineAupcMode=nsModConfigLineAupcMode, nsModConfigLineChannel2Bandwidth=nsModConfigLineChannel2Bandwidth, nsModConfigLinePower=nsModConfigLinePower, nsModConfigLineAupcSatTxFreq=nsModConfigLineAupcSatTxFreq, nsModMonitorInterface=nsModMonitorInterface, nsModConfigInterfaceTestInvert=nsModConfigInterfaceTestInvert, nsModConfigLineChannel1Bandwidth=nsModConfigLineChannel1Bandwidth, nsModMonitorAcmStatisticsGroup=nsModMonitorAcmStatisticsGroup, nsModMonitorInterfaceTable=nsModMonitorInterfaceTable, nsModConfigChISSY=nsModConfigChISSY, nsModConfigChPacketSize=nsModConfigChPacketSize, nsModConfigLineAcmMode=nsModConfigLineAcmMode, nsModConfigCidPhone=nsModConfigCidPhone, nsModMonitorAupcResetAvgCmd=nsModMonitorAupcResetAvgCmd, nsModConfigChannelTable=nsModConfigChannelTable, nsModMonitorAcm=nsModMonitorAcm, nsModConfigInterfaceASIEntry=nsModConfigInterfaceASIEntry, nsModMonitorAcmStatisticsClientIp=nsModMonitorAcmStatisticsClientIp, nsModMonitorEthernetStatisticsName=nsModMonitorEthernetStatisticsName, nsModConfigChBitRatePercent=nsModConfigChBitRatePercent, nsModMonitorAcmStatisticsPilot=nsModMonitorAcmStatisticsPilot, nsModMonitorInterfaceStatus=nsModMonitorInterfaceStatus, nsModMonitorAcmStatisticsLineMode=nsModMonitorAcmStatisticsLineMode, nsModMonitorSystemTxPortClk=nsModMonitorSystemTxPortClk, nsModConfigChTSProtect=nsModConfigChTSProtect, nsModMonitorAcmEntry=nsModMonitorAcmEntry, nsModConfigInterface=nsModConfigInterface, nsModConfigLinePowerUpTXState=nsModConfigLinePowerUpTXState, nsModConfigChStreamFormat=nsModConfigChStreamFormat, nsModConfigChFrameSize=nsModConfigChFrameSize, nsModConfigInterfaceASIDataOrder=nsModConfigInterfaceASIDataOrder, nsModConfigChannelEntry=nsModConfigChannelEntry, nsModConfigInterfaceGigEAutoNegotiation=nsModConfigInterfaceGigEAutoNegotiation, nsModConfigCidState=nsModConfigCidState, nsModMonitorAcmStatisticsFrameSize=nsModMonitorAcmStatisticsFrameSize, nsModConfigLineOutputLevelMode=nsModConfigLineOutputLevelMode)
