#
# PySNMP MIB module BD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BD-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:19:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
bcsiModules, fcSwitch = mibBuilder.importSymbols("Brocade-REG-MIB", "bcsiModules", "fcSwitch")
SwPortIndex, = mibBuilder.importSymbols("Brocade-TC", "SwPortIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Integer32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Gauge32, NotificationType, TimeTicks, Counter32, MibIdentifier, iso, Bits, ModuleIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Integer32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Gauge32", "NotificationType", "TimeTicks", "Counter32", "MibIdentifier", "iso", "Bits", "ModuleIdentity", "Unsigned32")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
swVfId, = mibBuilder.importSymbols("SW-MIB", "swVfId")
bd = ModuleIdentity((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 51))
if mibBuilder.loadTexts: bd.setLastUpdated('200907281830Z')
if mibBuilder.loadTexts: bd.setOrganization('Brocade Communications Systems, Inc.,')
class BdType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("congestion", 1), ("latency", 2))

bdTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 51, 0))
if mibBuilder.loadTexts: bdTraps.setStatus('current')
bdConfig = ObjectIdentity((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 51, 1))
if mibBuilder.loadTexts: bdConfig.setStatus('current')
bdStats = ObjectIdentity((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 51, 2))
if mibBuilder.loadTexts: bdStats.setStatus('current')
bdStatus = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 51, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdStatus.setStatus('current')
bdLThreshold = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 51, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdLThreshold.setStatus('current')
bdCThreshold = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 51, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdCThreshold.setStatus('current')
bdQTime = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 51, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: bdQTime.setStatus('current')
bdWinAvgTime = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 51, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: bdWinAvgTime.setStatus('current')
bdThreshold = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 51, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bdThreshold.setStatus('current')
nBdType = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 51, 1, 7), BdType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: nBdType.setStatus('current')
bdNumOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 51, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdNumOfEntries.setStatus('current')
bdStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 51, 2, 2), )
if mibBuilder.loadTexts: bdStatsTable.setStatus('current')
bdStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 51, 2, 2, 1), ).setIndexNames((0, "BD-MIB", "userPortNumber"), (0, "BD-MIB", "bdType"), (0, "BD-MIB", "bdSampleTime"))
if mibBuilder.loadTexts: bdStatsEntry.setStatus('current')
userPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 51, 2, 2, 1, 1), SwPortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userPortNumber.setStatus('current')
bdSampleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 51, 2, 2, 1, 2), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: bdSampleTime.setStatus('current')
bdType = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 51, 2, 2, 1, 3), BdType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdType.setStatus('current')
bdStatsValue10SecsSample = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 51, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdStatsValue10SecsSample.setStatus('current')
bdStatsValue60SecsSample = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 51, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdStatsValue60SecsSample.setStatus('current')
bdStatsValue300SecsSample = MibTableColumn((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 51, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdStatsValue300SecsSample.setStatus('current')
bdAggrStats = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 51, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bdAggrStats.setStatus('current')
bdAbsoluteValue = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 51, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bdAbsoluteValue.setStatus('current')
bdAvgFrameSize = MibScalar((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 51, 2, 5), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bdAvgFrameSize.setStatus('current')
bdTrap = NotificationType((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 51, 0, 1)).setObjects(("BD-MIB", "userPortNumber"), ("BD-MIB", "bdWinAvgTime"), ("BD-MIB", "nBdType"), ("BD-MIB", "bdThreshold"), ("BD-MIB", "bdAggrStats"), ("BD-MIB", "bdAbsoluteValue"), ("SW-MIB", "swVfId"), ("BD-MIB", "bdAvgFrameSize"))
if mibBuilder.loadTexts: bdTrap.setStatus('current')
bdClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 1588, 2, 1, 1, 51, 0, 2)).setObjects(("BD-MIB", "userPortNumber"), ("BD-MIB", "bdWinAvgTime"), ("BD-MIB", "nBdType"), ("BD-MIB", "bdThreshold"), ("BD-MIB", "bdAggrStats"), ("BD-MIB", "bdAbsoluteValue"), ("SW-MIB", "swVfId"), ("BD-MIB", "bdAvgFrameSize"))
if mibBuilder.loadTexts: bdClearTrap.setStatus('current')
mibBuilder.exportSymbols("BD-MIB", bdStatus=bdStatus, BdType=BdType, bdTrap=bdTrap, bdWinAvgTime=bdWinAvgTime, bdCThreshold=bdCThreshold, bdThreshold=bdThreshold, bdClearTrap=bdClearTrap, bdType=bdType, bdAvgFrameSize=bdAvgFrameSize, bdStatsTable=bdStatsTable, bdSampleTime=bdSampleTime, bdLThreshold=bdLThreshold, nBdType=nBdType, bdStatsValue300SecsSample=bdStatsValue300SecsSample, bdAggrStats=bdAggrStats, bdStatsValue10SecsSample=bdStatsValue10SecsSample, bdTraps=bdTraps, bdAbsoluteValue=bdAbsoluteValue, bdStats=bdStats, bdStatsValue60SecsSample=bdStatsValue60SecsSample, bdConfig=bdConfig, bdNumOfEntries=bdNumOfEntries, userPortNumber=userPortNumber, PYSNMP_MODULE_ID=bd, bd=bd, bdStatsEntry=bdStatsEntry, bdQTime=bdQTime)
