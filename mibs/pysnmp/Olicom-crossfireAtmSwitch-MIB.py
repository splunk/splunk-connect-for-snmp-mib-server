#
# PySNMP MIB module Olicom-crossfireAtmSwitch-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Olicom-crossfireAtmSwitch-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:26:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ocmibsCrossfireAtmMIB, controlTime = mibBuilder.importSymbols("Olicom-MIB", "ocmibsCrossfireAtmMIB", "controlTime")
MacAddress, = mibBuilder.importSymbols("RFC1231-MIB", "MacAddress")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, NotificationType, Counter32, Integer32, NotificationType, enterprises, Counter64, ModuleIdentity, IpAddress, iso, ObjectIdentity, TimeTicks, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "NotificationType", "Counter32", "Integer32", "NotificationType", "enterprises", "Counter64", "ModuleIdentity", "IpAddress", "iso", "ObjectIdentity", "TimeTicks", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class AtmAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(20, 20)
    fixedLength = 20

olicom = MibIdentifier((1, 3, 6, 1, 4, 1, 285))
ocmibs = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2))
ocmibsCrossfireAtmMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6))
crossfireAtmInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 1))
crossfireAtmConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 2))
crossfireAtmStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 3))
crossfireAtmStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 4))
crossfireAtmTrapControl = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 5))
crossfireAtmTest = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 6))
crossfirexlx = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 7))
infoProcessorModule = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 1))
infoFeatureModule = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 2))
infoXModule = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 3))
infoIfIndex = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 4))
termRestartInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 5))
infoProcessorModuleHwProductId = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoProcessorModuleHwProductId.setStatus('mandatory')
infoProcessorModuleHwVersion = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoProcessorModuleHwVersion.setStatus('mandatory')
infoProcessorModuleHwEcoLevel = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoProcessorModuleHwEcoLevel.setStatus('mandatory')
infoProcessorModuleHwSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoProcessorModuleHwSerialNumber.setStatus('mandatory')
infoProcessorModuleHwOptionTable = MibTable((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 1, 5), )
if mibBuilder.loadTexts: infoProcessorModuleHwOptionTable.setStatus('mandatory')
infoProcessorModuleHwOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 1, 5, 1), ).setIndexNames((0, "Olicom-crossfireAtmSwitch-MIB", "infoProcessorModuleHwOptionNo"))
if mibBuilder.loadTexts: infoProcessorModuleHwOptionEntry.setStatus('mandatory')
infoProcessorModuleHwOptionNo = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoProcessorModuleHwOptionNo.setStatus('mandatory')
infoProcessorModuleHwOption = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 1, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoProcessorModuleHwOption.setStatus('mandatory')
infoFeatureModuleHwProductId = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoFeatureModuleHwProductId.setStatus('mandatory')
infoFeatureModuleHwVersion = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoFeatureModuleHwVersion.setStatus('mandatory')
infoFeatureModuleHwEcoLevel = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoFeatureModuleHwEcoLevel.setStatus('mandatory')
infoFeatureModuleHwSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoFeatureModuleHwSerialNumber.setStatus('mandatory')
infoFeatureModuleHwOptionTable = MibTable((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 2, 5), )
if mibBuilder.loadTexts: infoFeatureModuleHwOptionTable.setStatus('mandatory')
infoFeatureModuleHwOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 2, 5, 1), ).setIndexNames((0, "Olicom-crossfireAtmSwitch-MIB", "infoFeatureModuleHwOptionNo"))
if mibBuilder.loadTexts: infoFeatureModuleHwOptionEntry.setStatus('mandatory')
infoFeatureModuleHwOptionNo = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoFeatureModuleHwOptionNo.setStatus('mandatory')
infoFeatureModuleHwOption = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 2, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoFeatureModuleHwOption.setStatus('mandatory')
infoXModuleTable = MibTable((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 3, 1), )
if mibBuilder.loadTexts: infoXModuleTable.setStatus('mandatory')
infoXModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 3, 1, 1), ).setIndexNames((0, "Olicom-crossfireAtmSwitch-MIB", "infoXModuleSlotIndex"))
if mibBuilder.loadTexts: infoXModuleEntry.setStatus('mandatory')
infoXModuleSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoXModuleSlotIndex.setStatus('mandatory')
infoXModuleHwProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoXModuleHwProductId.setStatus('mandatory')
infoXModuleHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoXModuleHwVersion.setStatus('mandatory')
infoXModuleHwEcoLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 3, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoXModuleHwEcoLevel.setStatus('mandatory')
infoXModuleHwSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 3, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoXModuleHwSerialNumber.setStatus('mandatory')
infoXModuleHwOptionTable = MibTable((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 3, 2), )
if mibBuilder.loadTexts: infoXModuleHwOptionTable.setStatus('mandatory')
infoXModuleHwOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 3, 2, 1), ).setIndexNames((0, "Olicom-crossfireAtmSwitch-MIB", "infoXModuleHwOptionSlotIndex"), (0, "Olicom-crossfireAtmSwitch-MIB", "infoXModuleHwOptionNo"))
if mibBuilder.loadTexts: infoXModuleHwOptionEntry.setStatus('mandatory')
infoXModuleHwOptionSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoXModuleHwOptionSlotIndex.setStatus('mandatory')
infoXModuleHwOptionNo = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoXModuleHwOptionNo.setStatus('mandatory')
infoXModuleHwOption = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoXModuleHwOption.setStatus('mandatory')
infoIfIndexLan = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoIfIndexLan.setStatus('mandatory')
infoIfIndexSlip = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoIfIndexSlip.setStatus('mandatory')
infoIfIndexElan = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoIfIndexElan.setStatus('mandatory')
infoIfIndexClassicalIp = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoIfIndexClassicalIp.setStatus('mandatory')
infoIfIndexRfc1483Bridged = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoIfIndexRfc1483Bridged.setStatus('mandatory')
infoIfIndexRfc1483Routed = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoIfIndexRfc1483Routed.setStatus('mandatory')
infoIfIndexAtmNode = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: infoIfIndexAtmNode.setStatus('mandatory')
termRestartInfoRestartTime = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: termRestartInfoRestartTime.setStatus('mandatory')
termRestartInfoSwSection1StatusWord = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: termRestartInfoSwSection1StatusWord.setStatus('mandatory')
termRestartInfoSwSection2StatusWord = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: termRestartInfoSwSection2StatusWord.setStatus('mandatory')
termRestartInfoSwImageLoaded = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("image1", 1), ("image2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: termRestartInfoSwImageLoaded.setStatus('mandatory')
termRestartInfoFutureTestMode = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: termRestartInfoFutureTestMode.setStatus('mandatory')
termRestartInfoBootpExecuted = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: termRestartInfoBootpExecuted.setStatus('mandatory')
termRestartInfoReloadTime = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: termRestartInfoReloadTime.setStatus('mandatory')
termRestartInfoBootpReason = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noSw", 1), ("chksumError", 2), ("invalidSwStatus", 3), ("pushButtons", 4), ("undefined", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: termRestartInfoBootpReason.setStatus('mandatory')
termRestartInfoServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 5, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: termRestartInfoServerIpAddress.setStatus('mandatory')
termRestartInfoServerMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 5, 10), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: termRestartInfoServerMacAddress.setStatus('mandatory')
termRestartInfoFileName = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 5, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: termRestartInfoFileName.setStatus('mandatory')
termRestartInfoBbsramTerminationTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 5, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: termRestartInfoBbsramTerminationTimestamp.setStatus('mandatory')
termRestartInfoTerminationReason = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 5, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("controlled", 2), ("controlledHalt", 3), ("fatal", 4), ("watchdog", 5), ("temperatureAlarm", 6), ("psuFailure", 7), ("featureModuleRemoved", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: termRestartInfoTerminationReason.setStatus('mandatory')
termRestartInfoRestartReason = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 5, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("reset", 1), ("default", 2), ("resetDefault", 3), ("watchdog", 4), ("fatal", 5), ("controlled", 6), ("coldStart", 7), ("unknown", 8), ("featureModuleRemoved", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: termRestartInfoRestartReason.setStatus('mandatory')
termRestartInfoHwReconfigState = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 5, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("totalReconfig", 1), ("partialReconfig", 2), ("noReconfig", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: termRestartInfoHwReconfigState.setStatus('mandatory')
termRestartInfoBbsram = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 1, 5, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(50, 50)).setFixedLength(50)).setMaxAccess("readonly")
if mibBuilder.loadTexts: termRestartInfoBbsram.setStatus('mandatory')
configAddressing = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 1))
configClocking = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 2))
configLane = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 3))
configMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 4))
configTm = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 6))
configTrafficDescr = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 7))
configServiceReg = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 8))
configSar = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 9))
configXModule = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 10))
configFeatureModule = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 11))
configCommonEPort = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 12))
configEPort = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13))
configCpuQ = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 14))
configCommonIPort = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 15))
configIPort = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 16))
configPvpPvc = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 17))
configSvpSvc = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 18))
configCommonSignalling = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 19))
configIisp = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 20))
configIpArp = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 21))
configQosClass = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 22))
configSerial = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 23))
configOam = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 24))
configTest = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 25))
configPriorityBuffer = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 26))
configSwitchAddrPrefixType = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(57, 69, 71))).clone(namedValues=NamedValues(("dcc", 57), ("iso", 69), ("icd", 71)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSwitchAddrPrefixType.setStatus('mandatory')
configSwitchAddrPrefixSize = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSwitchAddrPrefixSize.setStatus('mandatory')
configSwitchAddrAtmPrefix = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSwitchAddrAtmPrefix.setStatus('mandatory')
configSwitchAddrAtmAddress = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 1, 4), AtmAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configSwitchAddrAtmAddress.setStatus('mandatory')
configNetworkClockSource = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configNetworkClockSource.setStatus('mandatory')
configNetworkClockEPortIndex = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configNetworkClockEPortIndex.setStatus('mandatory')
configLaneControlAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configLaneControlAdminStatus.setStatus('mandatory')
configLaneControlLecsAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configLaneControlLecsAdminStatus.setStatus('mandatory')
configLaneControlLesBusAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configLaneControlLesBusAdminStatus.setStatus('mandatory')
configMonitorEPortAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configMonitorEPortAdminStatus.setStatus('mandatory')
configMonitorEPortIPortSlotIndex = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configMonitorEPortIPortSlotIndex.setStatus('mandatory')
configMonitorEPortIPortRIndex = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configMonitorEPortIPortRIndex.setStatus('mandatory')
configMonitorEPortDirection = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rx", 1), ("tx", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configMonitorEPortDirection.setStatus('mandatory')
configTmControlMode = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("efci", 1), ("er", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configTmControlMode.setStatus('mandatory')
configTmControlEarlyPacketDiscardAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configTmControlEarlyPacketDiscardAdminStatus.setStatus('mandatory')
configTmControlVbrTrafficAllocation = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strictAllocation", 1), ("overSubscribe", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configTmControlVbrTrafficAllocation.setStatus('mandatory')
configTmControlErTuningAlpha = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 6, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configTmControlErTuningAlpha.setStatus('mandatory')
configTmControlErTuningBeta = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 6, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configTmControlErTuningBeta.setStatus('mandatory')
configTmControlErTuningGamma = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 6, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configTmControlErTuningGamma.setStatus('mandatory')
configTmControlErTuningDelta = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 6, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configTmControlErTuningDelta.setStatus('mandatory')
configTmControlErTuningLambda = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 6, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configTmControlErTuningLambda.setStatus('mandatory')
configTmControlErTuningTau = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 6, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configTmControlErTuningTau.setStatus('mandatory')
configTmControlErTuningPhi = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 6, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configTmControlErTuningPhi.setStatus('mandatory')
configTmControlErTuningPsi = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 6, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configTmControlErTuningPsi.setStatus('mandatory')
configTmServiceClassMapTable = MibTable((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 6, 12), )
if mibBuilder.loadTexts: configTmServiceClassMapTable.setStatus('mandatory')
configTmServiceClassMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 6, 12, 1), ).setIndexNames((0, "Olicom-crossfireAtmSwitch-MIB", "configTmServiceClassMapServiceClass"))
if mibBuilder.loadTexts: configTmServiceClassMapEntry.setStatus('mandatory')
configTmServiceClassMapServiceClass = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 6, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("cbr", 2), ("rtVbr", 3), ("nrtVbr", 4), ("abr", 5), ("ubr", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configTmServiceClassMapServiceClass.setStatus('mandatory')
configTmServiceClassMapSchedulingQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 6, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configTmServiceClassMapSchedulingQueue.setStatus('mandatory')
trafficDescriptorTableNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficDescriptorTableNextIndex.setStatus('mandatory')
trafficDescriptorTable = MibTable((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 7, 2), )
if mibBuilder.loadTexts: trafficDescriptorTable.setStatus('mandatory')
trafficDescriptorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 7, 2, 1), ).setIndexNames((0, "Olicom-crossfireAtmSwitch-MIB", "trafficDescriptorIndex"))
if mibBuilder.loadTexts: trafficDescriptorEntry.setStatus('mandatory')
trafficDescriptorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficDescriptorIndex.setStatus('mandatory')
trafficDescriptorCreationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("switchedConnection", 1), ("management", 2), ("default", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficDescriptorCreationMode.setStatus('mandatory')
trafficDescriptorServiceClass = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("cbr", 2), ("rtVbr", 3), ("nrtVbr", 4), ("abr", 5), ("ubr", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficDescriptorServiceClass.setStatus('mandatory')
trafficDescriptorPcr01 = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 7, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficDescriptorPcr01.setStatus('mandatory')
trafficDescriptorPcr0 = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 7, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficDescriptorPcr0.setStatus('mandatory')
trafficDescriptorScr01 = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 7, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficDescriptorScr01.setStatus('mandatory')
trafficDescriptorScr0 = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 7, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficDescriptorScr0.setStatus('mandatory')
trafficDescriptorMbs01 = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 7, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficDescriptorMbs01.setStatus('mandatory')
trafficDescriptorMbs0 = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 7, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficDescriptorMbs0.setStatus('mandatory')
trafficDescriptorTaggingFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noTagging", 1), ("tagging", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficDescriptorTaggingFlag.setStatus('mandatory')
trafficDescriptorFrameDiscardFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 7, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noDiscard", 1), ("discard", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficDescriptorFrameDiscardFlag.setStatus('mandatory')
trafficDescriptorBestEffortFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 7, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noBestEffort", 1), ("bestEffort", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficDescriptorBestEffortFlag.setStatus('mandatory')
trafficDescriptorMcr = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 7, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficDescriptorMcr.setStatus('mandatory')
trafficDescriptorAbrIcr = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 7, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficDescriptorAbrIcr.setStatus('mandatory')
trafficDescriptorAbrTbe = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 7, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficDescriptorAbrTbe.setStatus('mandatory')
trafficDescriptorAbrFrtt = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 7, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficDescriptorAbrFrtt.setStatus('mandatory')
trafficDescriptorAbrRif = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 7, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("rifOneOver32768", 1), ("rifOneOver16384", 2), ("rifOneOver8192", 3), ("rifOneOver4096", 4), ("rifOneOver2048", 5), ("rifOneOver1024", 6), ("rifOneOver512", 7), ("rifOneOver256", 8), ("rifOneOver128", 9), ("rifOneOver64", 10), ("rifOneOver32", 11), ("rifOneOver16", 12), ("rifOneOver8", 13), ("rifOneOver4", 14), ("rifOneOver2", 15), ("rifOne", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficDescriptorAbrRif.setStatus('mandatory')
trafficDescriptorAbrRdf = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 7, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("rdfOneOver32768", 1), ("rdfOneOver16384", 2), ("rdfOneOver8192", 3), ("rdfOneOver4096", 4), ("rdfOneOver2048", 5), ("rdfOneOver1024", 6), ("rdfOneOver512", 7), ("rdfOneOver256", 8), ("rdfOneOver128", 9), ("rdfOneOver64", 10), ("rdfOneOver32", 11), ("rdfOneOver16", 12), ("rdfOneOver8", 13), ("rdfOneOver4", 14), ("rdfOneOver2", 15), ("rdfOne", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficDescriptorAbrRdf.setStatus('mandatory')
trafficDescriptorAbrNrm = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 7, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("nrm2", 1), ("nrm4", 2), ("nrm8", 3), ("nrm16", 4), ("nrm32", 5), ("nrm64", 6), ("nrm128", 7), ("nrm256", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficDescriptorAbrNrm.setStatus('mandatory')
trafficDescriptorAbrTrm = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 7, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("trm0Point78125", 1), ("trm1Point5625", 2), ("trm3Point125", 3), ("trm6Point25", 4), ("trm12Point5", 5), ("trm25", 6), ("trm50", 7), ("trm100", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficDescriptorAbrTrm.setStatus('mandatory')
trafficDescriptorAbrCdf = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 7, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("cdf0", 1), ("cdfOneOver64", 2), ("cdfOneOver32", 3), ("cdfOneOver16", 4), ("cdfOneOver8", 5), ("cdfOneOver4", 6), ("cdfOneOver2", 7), ("cdfOne", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficDescriptorAbrCdf.setStatus('mandatory')
trafficDescriptorAbrAdtf = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 7, 2, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficDescriptorAbrAdtf.setStatus('mandatory')
trafficDescriptorTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 7, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficDescriptorTrafficType.setStatus('mandatory')
trafficDescriptorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 7, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficDescriptorRowStatus.setStatus('mandatory')
trafficDescriptorCtd = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 7, 2, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficDescriptorCtd.setStatus('mandatory')
trafficDescriptorCdv = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 7, 2, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficDescriptorCdv.setStatus('mandatory')
trafficDescriptorLogClr = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 7, 2, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficDescriptorLogClr.setStatus('mandatory')
configIlmiServiceRegistryTable = MibTable((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 8, 1), )
if mibBuilder.loadTexts: configIlmiServiceRegistryTable.setStatus('mandatory')
configIlmiServiceRegistryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 8, 1, 1), ).setIndexNames((0, "Olicom-crossfireAtmSwitch-MIB", "configIlmiServiceRegistryServiceId"), (0, "Olicom-crossfireAtmSwitch-MIB", "configIlmiServiceRegistryAddressIndex"))
if mibBuilder.loadTexts: configIlmiServiceRegistryEntry.setStatus('mandatory')
configIlmiServiceRegistryAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configIlmiServiceRegistryAddressIndex.setStatus('mandatory')
configIlmiServiceRegistryServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 8, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configIlmiServiceRegistryServiceId.setStatus('mandatory')
configIlmiServiceRegistryAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 8, 1, 1, 3), AtmAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configIlmiServiceRegistryAtmAddress.setStatus('mandatory')
configIlmiServiceRegistryParm1 = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 8, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configIlmiServiceRegistryParm1.setStatus('mandatory')
configIlmiServiceRegistryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configIlmiServiceRegistryRowStatus.setStatus('mandatory')
configSarMuxFillThreshold = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSarMuxFillThreshold.setStatus('mandatory')
configSarMuxSarVpi = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSarMuxSarVpi.setStatus('mandatory')
configSarEmptyCellHandling = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("unassigned", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSarEmptyCellHandling.setStatus('mandatory')
configXModuleTable = MibTable((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 10, 1), )
if mibBuilder.loadTexts: configXModuleTable.setStatus('mandatory')
configXModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 10, 1, 1), ).setIndexNames((0, "Olicom-crossfireAtmSwitch-MIB", "configXModuleSlotIndex"))
if mibBuilder.loadTexts: configXModuleEntry.setStatus('mandatory')
configXModuleSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configXModuleSlotIndex.setStatus('mandatory')
configXModuleAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configXModuleAdminStatus.setStatus('mandatory')
configFeatureModuleAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configFeatureModuleAdminStatus.setStatus('mandatory')
configCommonEPortIlmiAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("full", 1), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonEPortIlmiAdminStatus.setStatus('mandatory')
configCommonEPortAddrRegistrationAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonEPortAddrRegistrationAdminStatus.setStatus('mandatory')
configCommonEPortMaxVpcs = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 12, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonEPortMaxVpcs.setStatus('mandatory')
configCommonEPortMaxVccs = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 12, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonEPortMaxVccs.setStatus('mandatory')
configCommonEPortMaxVpiBits = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 12, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonEPortMaxVpiBits.setStatus('mandatory')
configCommonEPortMaxVciBits = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 12, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonEPortMaxVciBits.setStatus('mandatory')
configCommonEPortUniType = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 12, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("public", 1), ("private", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonEPortUniType.setStatus('mandatory')
configCommonEPortUniVersion = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 12, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("version3point0", 2), ("version3point1", 3), ("version4point0", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonEPortUniVersion.setStatus('mandatory')
configCommonEPortDeviceType = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 12, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("user", 1), ("node", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonEPortDeviceType.setStatus('mandatory')
configCommonEPortIlmiVersion = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 12, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unsupported", 1), ("version4point0", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonEPortIlmiVersion.setStatus('mandatory')
configCommonEPortNniSigVersion = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 12, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unsupported", 1), ("iisp", 2), ("pnniVersion1point0", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonEPortNniSigVersion.setStatus('mandatory')
configCommonEPortSignallingVpi = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 12, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonEPortSignallingVpi.setStatus('mandatory')
configCommonEPortSignallingVci = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 12, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonEPortSignallingVci.setStatus('mandatory')
configCommonEPortIlmiVpi = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 12, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonEPortIlmiVpi.setStatus('mandatory')
configCommonEPortIlmiVci = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 12, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonEPortIlmiVci.setStatus('mandatory')
configCommonEPortLecsVpi = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 12, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonEPortLecsVpi.setStatus('mandatory')
configCommonEPortLecsVci = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 12, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonEPortLecsVci.setStatus('mandatory')
configCommonEPortPnniVpi = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 12, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonEPortPnniVpi.setStatus('mandatory')
configCommonEPortPnniVci = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 12, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonEPortPnniVci.setStatus('mandatory')
configCommonEPortAbrBandwidthAllocation = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 12, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonEPortAbrBandwidthAllocation.setStatus('mandatory')
configCommonEPortVbrRtBandwidthAllocation = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 12, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonEPortVbrRtBandwidthAllocation.setStatus('mandatory')
configCommonEPortVbrNrtBandwidthAllocation = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 12, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonEPortVbrNrtBandwidthAllocation.setStatus('mandatory')
configCommonEPortCbrBandwidthAllocation = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 12, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonEPortCbrBandwidthAllocation.setStatus('mandatory')
configStaticEPortIlmiPollFrequency = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 12, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configStaticEPortIlmiPollFrequency.setStatus('mandatory')
configStaticEPortIlmiPollRetries = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 12, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configStaticEPortIlmiPollRetries.setStatus('mandatory')
configStaticEPortMaxTransientPhyFailureTime = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 12, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configStaticEPortMaxTransientPhyFailureTime.setStatus('mandatory')
configStaticEPortMaxPhyFailuresPerMinute = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 12, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configStaticEPortMaxPhyFailuresPerMinute.setStatus('deprecated')
configCommonEPortLinkDelay = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 12, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonEPortLinkDelay.setStatus('mandatory')
configCommonEPortTransientPhyOffTime = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 12, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonEPortTransientPhyOffTime.setStatus('deprecated')
configCommonEPortTransientPhyWindowTime = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 12, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonEPortTransientPhyWindowTime.setStatus('deprecated')
configCommonEPortTransientPhyDisconnectCount = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 12, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonEPortTransientPhyDisconnectCount.setStatus('mandatory')
configCommonEPortTransientPhyDisconnectTimer = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 12, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonEPortTransientPhyDisconnectTimer.setStatus('mandatory')
configCommonEPortDefaultSigVersion = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 12, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("uni", 1), ("pnni", 2), ("iispNetworkSide", 3), ("iispUserSide", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonEPortDefaultSigVersion.setStatus('mandatory')
configCommonEPortMaxSvpcVpi = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 12, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonEPortMaxSvpcVpi.setStatus('mandatory')
configCommonEPortMaxSvccVpi = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 12, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonEPortMaxSvccVpi.setStatus('mandatory')
configCommonEPortMinSvccVci = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 12, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonEPortMinSvccVci.setStatus('mandatory')
configEPortScratchPadScratchPadStatus = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notReady", 1), ("copy", 2), ("copied", 3), ("updateAndGo", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configEPortScratchPadScratchPadStatus.setStatus('mandatory')
configEPortScratchPadEPortIndex = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configEPortScratchPadEPortIndex.setStatus('mandatory')
configEPortScratchPadIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configEPortScratchPadIpAddress.setStatus('mandatory')
configEPortScratchPadActionStatus = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2), ("notPossible", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configEPortScratchPadActionStatus.setStatus('mandatory')
configEPortScratchPadHwConfigTxClocking = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("network", 1), ("local", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configEPortScratchPadHwConfigTxClocking.setStatus('mandatory')
configEPortScratchPadHwConfigSonetSdh = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sonet", 1), ("sdh", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configEPortScratchPadHwConfigSonetSdh.setStatus('mandatory')
configEPortScratchPadUseCommonEPortConfig = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configEPortScratchPadUseCommonEPortConfig.setStatus('mandatory')
configEPortScratchPadLoopback = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("line", 2), ("payload", 3), ("diag", 4), ("externalLine", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configEPortScratchPadLoopback.setStatus('mandatory')
configEPortScratchPadIlmiConfigIlmiAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("full", 1), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configEPortScratchPadIlmiConfigIlmiAdminStatus.setStatus('mandatory')
configEPortScratchPadIlmiConfigAddrRegistrationAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configEPortScratchPadIlmiConfigAddrRegistrationAdminStatus.setStatus('mandatory')
configEPortScratchPadIlmiConfigMaxVpcs = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configEPortScratchPadIlmiConfigMaxVpcs.setStatus('mandatory')
configEPortScratchPadIlmiConfigMaxVccs = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configEPortScratchPadIlmiConfigMaxVccs.setStatus('mandatory')
configEPortScratchPadIlmiConfigMaxVpiBits = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configEPortScratchPadIlmiConfigMaxVpiBits.setStatus('mandatory')
configEPortScratchPadIlmiConfigMaxVciBits = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configEPortScratchPadIlmiConfigMaxVciBits.setStatus('mandatory')
configEPortScratchPadIlmiConfigUniType = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("public", 1), ("private", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configEPortScratchPadIlmiConfigUniType.setStatus('mandatory')
configEPortScratchPadIlmiConfigUniVersion = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("version3point0", 2), ("version3point1", 3), ("version4point0", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configEPortScratchPadIlmiConfigUniVersion.setStatus('mandatory')
configEPortScratchPadIlmiConfigDeviceType = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("user", 1), ("node", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configEPortScratchPadIlmiConfigDeviceType.setStatus('mandatory')
configEPortScratchPadIlmiConfigIlmiVersion = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unsupported", 1), ("version4point0", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configEPortScratchPadIlmiConfigIlmiVersion.setStatus('mandatory')
configEPortScratchPadIlmiConfigNniSigVersion = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unsupported", 1), ("iisp", 2), ("pnniVersion1point0", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configEPortScratchPadIlmiConfigNniSigVersion.setStatus('mandatory')
configEPortScratchPadIlmiConfigSignallingVpi = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configEPortScratchPadIlmiConfigSignallingVpi.setStatus('mandatory')
configEPortScratchPadIlmiConfigSignallingVci = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configEPortScratchPadIlmiConfigSignallingVci.setStatus('mandatory')
configEPortScratchPadIlmiConfigIlmiVpi = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configEPortScratchPadIlmiConfigIlmiVpi.setStatus('mandatory')
configEPortScratchPadIlmiConfigIlmiVci = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configEPortScratchPadIlmiConfigIlmiVci.setStatus('mandatory')
configEPortScratchPadIlmiConfigLecsVpi = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configEPortScratchPadIlmiConfigLecsVpi.setStatus('mandatory')
configEPortScratchPadIlmiConfigLecsVci = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configEPortScratchPadIlmiConfigLecsVci.setStatus('mandatory')
configEPortScratchPadIlmiConfigPnniVpi = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configEPortScratchPadIlmiConfigPnniVpi.setStatus('mandatory')
configEPortScratchPadIlmiConfigPnniVci = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configEPortScratchPadIlmiConfigPnniVci.setStatus('mandatory')
configEPortScratchPadAbrBandwidthAllocation = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configEPortScratchPadAbrBandwidthAllocation.setStatus('mandatory')
configEPortScratchPadVbrRtBandwidthAllocation = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configEPortScratchPadVbrRtBandwidthAllocation.setStatus('mandatory')
configEPortScratchPadVbrNrtBandwidthAllocation = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configEPortScratchPadVbrNrtBandwidthAllocation.setStatus('mandatory')
configEPortScratchPadCbrBandwidthAllocation = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configEPortScratchPadCbrBandwidthAllocation.setStatus('mandatory')
configEPortScratchPadLinkDelay = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configEPortScratchPadLinkDelay.setStatus('mandatory')
configEPortScratchPadTransientPhyOffTime = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configEPortScratchPadTransientPhyOffTime.setStatus('deprecated')
configEPortScratchPadTransientPhyWindowTime = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configEPortScratchPadTransientPhyWindowTime.setStatus('deprecated')
configEPortScratchPadTransientPhyDisconnectCount = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configEPortScratchPadTransientPhyDisconnectCount.setStatus('mandatory')
configEPortScratchPadTransientPhyDisconnectTimer = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configEPortScratchPadTransientPhyDisconnectTimer.setStatus('mandatory')
configEPortScratchPadBandwidthLimit = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configEPortScratchPadBandwidthLimit.setStatus('mandatory')
configEPortScratchPadDefaultSigVersion = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("uni", 1), ("pnni", 2), ("iispNetworkSide", 3), ("iispUserSide", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configEPortScratchPadDefaultSigVersion.setStatus('mandatory')
configEPortScratchPadIlmiConfigMaxSvpcVpi = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configEPortScratchPadIlmiConfigMaxSvpcVpi.setStatus('mandatory')
configEPortScratchPadIlmiConfigMaxSvccVpi = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configEPortScratchPadIlmiConfigMaxSvccVpi.setStatus('mandatory')
configEPortScratchPadIlmiConfigMinSvccVci = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configEPortScratchPadIlmiConfigMinSvccVci.setStatus('mandatory')
configEPortTable = MibTable((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 38), )
if mibBuilder.loadTexts: configEPortTable.setStatus('mandatory')
configEPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 38, 1), ).setIndexNames((0, "Olicom-crossfireAtmSwitch-MIB", "configEPortIfIndex"))
if mibBuilder.loadTexts: configEPortEntry.setStatus('mandatory')
configEPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 38, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configEPortIfIndex.setStatus('mandatory')
configEPortHwConfigTxClocking = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 38, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("network", 1), ("local", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configEPortHwConfigTxClocking.setStatus('mandatory')
configEPortHwConfigSonetSdh = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 38, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sonet", 1), ("sdh", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configEPortHwConfigSonetSdh.setStatus('mandatory')
configEPortUseCommonEPortConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 38, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configEPortUseCommonEPortConfig.setStatus('mandatory')
configEPortLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 38, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("line", 2), ("payload", 3), ("diag", 4), ("externalLine", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configEPortLoopback.setStatus('mandatory')
configEPortIlmiConfigIlmiAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 38, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("full", 1), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configEPortIlmiConfigIlmiAdminStatus.setStatus('mandatory')
configEPortIlmiConfigAddrRegistrationAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 38, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("unsupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configEPortIlmiConfigAddrRegistrationAdminStatus.setStatus('mandatory')
configEPortIlmiConfigMaxVpcs = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 38, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configEPortIlmiConfigMaxVpcs.setStatus('mandatory')
configEPortIlmiConfigMaxVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 38, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configEPortIlmiConfigMaxVccs.setStatus('mandatory')
configEPortIlmiConfigMaxVpiBits = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 38, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configEPortIlmiConfigMaxVpiBits.setStatus('mandatory')
configEPortIlmiConfigMaxVciBits = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 38, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configEPortIlmiConfigMaxVciBits.setStatus('mandatory')
configEPortIlmiConfigUniType = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 38, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("public", 1), ("private", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configEPortIlmiConfigUniType.setStatus('mandatory')
configEPortIlmiConfigUniVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 38, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("version3point0", 2), ("version3point1", 3), ("version4point0", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configEPortIlmiConfigUniVersion.setStatus('mandatory')
configEPortIlmiConfigDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 38, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("user", 1), ("node", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configEPortIlmiConfigDeviceType.setStatus('mandatory')
configEPortIlmiConfigIlmiVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 38, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unsupported", 1), ("version4point0", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configEPortIlmiConfigIlmiVersion.setStatus('mandatory')
configEPortIlmiConfigNniSigVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 38, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unsupported", 1), ("iisp", 2), ("pnniVersion1point0", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configEPortIlmiConfigNniSigVersion.setStatus('mandatory')
configEPortIlmiConfigSignallingVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 38, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configEPortIlmiConfigSignallingVpi.setStatus('mandatory')
configEPortIlmiConfigSignallingVci = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 38, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configEPortIlmiConfigSignallingVci.setStatus('mandatory')
configEPortIlmiConfigIlmiVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 38, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configEPortIlmiConfigIlmiVpi.setStatus('mandatory')
configEPortIlmiConfigIlmiVci = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 38, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configEPortIlmiConfigIlmiVci.setStatus('mandatory')
configEPortIlmiConfigLecsVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 38, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configEPortIlmiConfigLecsVpi.setStatus('mandatory')
configEPortIlmiConfigLecsVci = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 38, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configEPortIlmiConfigLecsVci.setStatus('mandatory')
configEPortIlmiConfigPnniVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 38, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configEPortIlmiConfigPnniVpi.setStatus('mandatory')
configEPortIlmiConfigPnniVci = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 38, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configEPortIlmiConfigPnniVci.setStatus('mandatory')
configEPortAbrBandwidthAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 38, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configEPortAbrBandwidthAllocation.setStatus('mandatory')
configEPortVbrRtBandwidthAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 38, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configEPortVbrRtBandwidthAllocation.setStatus('mandatory')
configEPortVbrNrtBandwidthAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 38, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configEPortVbrNrtBandwidthAllocation.setStatus('mandatory')
configEPortCbrBandwidthAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 38, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configEPortCbrBandwidthAllocation.setStatus('mandatory')
configEPortLinkDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 38, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configEPortLinkDelay.setStatus('mandatory')
configEPortTransientPhyOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 38, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configEPortTransientPhyOffTime.setStatus('deprecated')
configEPortTransientPhyWindowTime = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 38, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configEPortTransientPhyWindowTime.setStatus('deprecated')
configEPortTransientPhyDisconnectCount = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 38, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configEPortTransientPhyDisconnectCount.setStatus('mandatory')
configEPortTransientPhyDisconnectTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 38, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configEPortTransientPhyDisconnectTimer.setStatus('mandatory')
configEPortBandwidthLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 38, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configEPortBandwidthLimit.setStatus('mandatory')
configEPortDefaultSigVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 38, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("uni", 1), ("pnni", 2), ("iispNetworkSide", 3), ("iispUserSide", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configEPortDefaultSigVersion.setStatus('mandatory')
configEPortIlmiConfigMaxSvpcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 38, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configEPortIlmiConfigMaxSvpcVpi.setStatus('mandatory')
configEPortIlmiConfigMaxSvccVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 38, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configEPortIlmiConfigMaxSvccVpi.setStatus('mandatory')
configEPortIlmiConfigMinSvccVci = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 13, 38, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configEPortIlmiConfigMinSvccVci.setStatus('mandatory')
configCpuPortCpuQueueSize = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 14, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCpuPortCpuQueueSize.setStatus('mandatory')
configCpuPortResetQueueSize = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 14, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCpuPortResetQueueSize.setStatus('mandatory')
configCommonIPortQueueTable = MibTable((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 15, 1), )
if mibBuilder.loadTexts: configCommonIPortQueueTable.setStatus('mandatory')
configCommonIPortQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 15, 1, 1), ).setIndexNames((0, "Olicom-crossfireAtmSwitch-MIB", "configCommonIPortQueueIndex"))
if mibBuilder.loadTexts: configCommonIPortQueueEntry.setStatus('mandatory')
configCommonIPortQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configCommonIPortQueueIndex.setStatus('mandatory')
configCommonIPortEfciTaggingAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonIPortEfciTaggingAdminStatus.setStatus('mandatory')
configCommonIPortClpDiscardAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonIPortClpDiscardAdminStatus.setStatus('mandatory')
configCommonIPortEfciTaggingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 15, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("oneEighth", 1), ("oneFourth", 2), ("oneHalf", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonIPortEfciTaggingThreshold.setStatus('mandatory')
configCommonIPortClpDiscardThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 15, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("oneEighth", 1), ("oneFourth", 2), ("oneHalf", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonIPortClpDiscardThreshold.setStatus('mandatory')
configCommonIPortQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 15, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonIPortQueueSize.setStatus('mandatory')
configCommonIPortLogClr = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 15, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonIPortLogClr.setStatus('mandatory')
configCommonIPortCdv = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 15, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonIPortCdv.setStatus('mandatory')
configPriorityBufferTable = MibTable((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 26, 1), )
if mibBuilder.loadTexts: configPriorityBufferTable.setStatus('mandatory')
configPriorityBufferEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 26, 1, 1), ).setIndexNames((0, "Olicom-crossfireAtmSwitch-MIB", "configPriorityBufferIndex"))
if mibBuilder.loadTexts: configPriorityBufferEntry.setStatus('mandatory')
configPriorityBufferIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 26, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configPriorityBufferIndex.setStatus('mandatory')
configPriorityBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 26, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configPriorityBufferSize.setStatus('mandatory')
configIPortScratchPadScratchPadStatus = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notReady", 1), ("copy", 2), ("copied", 3), ("updateAndGo", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configIPortScratchPadScratchPadStatus.setStatus('mandatory')
configIPortScratchPadSlotIndex = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 16, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configIPortScratchPadSlotIndex.setStatus('mandatory')
configIPortScratchPadIPortRIndex = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 16, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configIPortScratchPadIPortRIndex.setStatus('mandatory')
configIPortScratchPadIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 16, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configIPortScratchPadIpAddress.setStatus('mandatory')
configIPortScratchPadActionStatus = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 16, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2), ("notPossible", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configIPortScratchPadActionStatus.setStatus('mandatory')
configIPortScratchPadUseCommonIPortConfig = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 16, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configIPortScratchPadUseCommonIPortConfig.setStatus('mandatory')
configIPortScratchPadQueueTable = MibTable((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 16, 7), )
if mibBuilder.loadTexts: configIPortScratchPadQueueTable.setStatus('mandatory')
configIPortScratchPadQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 16, 7, 1), ).setIndexNames((0, "Olicom-crossfireAtmSwitch-MIB", "configIPortScratchPadQueueQueueIndex"))
if mibBuilder.loadTexts: configIPortScratchPadQueueEntry.setStatus('mandatory')
configIPortScratchPadQueueQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 16, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configIPortScratchPadQueueQueueIndex.setStatus('mandatory')
configIPortScratchPadQueueEfciTaggingAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 16, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configIPortScratchPadQueueEfciTaggingAdminStatus.setStatus('mandatory')
configIPortScratchPadQueueClpDiscardAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 16, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configIPortScratchPadQueueClpDiscardAdminStatus.setStatus('mandatory')
configIPortScratchPadQueueEfciTaggingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 16, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("oneEighth", 1), ("oneFourth", 2), ("oneHalf", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configIPortScratchPadQueueEfciTaggingThreshold.setStatus('mandatory')
configIPortScratchPadQueueClpDiscardThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 16, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("oneEighth", 1), ("oneFourth", 2), ("oneHalf", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configIPortScratchPadQueueClpDiscardThreshold.setStatus('mandatory')
configIPortScratchPadQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 16, 7, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configIPortScratchPadQueueSize.setStatus('mandatory')
configIPortScratchPadQueueLogClr = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 16, 7, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configIPortScratchPadQueueLogClr.setStatus('mandatory')
configIPortScratchPadQueueCdv = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 16, 7, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configIPortScratchPadQueueCdv.setStatus('mandatory')
configIPortTable = MibTable((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 16, 8), )
if mibBuilder.loadTexts: configIPortTable.setStatus('mandatory')
configIPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 16, 8, 1), ).setIndexNames((0, "Olicom-crossfireAtmSwitch-MIB", "configIPortSlotIndex"), (0, "Olicom-crossfireAtmSwitch-MIB", "configIPortRIndex"))
if mibBuilder.loadTexts: configIPortEntry.setStatus('mandatory')
configIPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 16, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configIPortSlotIndex.setStatus('mandatory')
configIPortRIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 16, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configIPortRIndex.setStatus('mandatory')
configIPortUseCommonIPortConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 16, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configIPortUseCommonIPortConfig.setStatus('mandatory')
configIPortQueueTable = MibTable((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 16, 9), )
if mibBuilder.loadTexts: configIPortQueueTable.setStatus('mandatory')
configIPortQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 16, 9, 1), ).setIndexNames((0, "Olicom-crossfireAtmSwitch-MIB", "configIPortQueueSlotIndex"), (0, "Olicom-crossfireAtmSwitch-MIB", "configIPortQueueRIndex"), (0, "Olicom-crossfireAtmSwitch-MIB", "configIPortQueueQueueIndex"))
if mibBuilder.loadTexts: configIPortQueueEntry.setStatus('mandatory')
configIPortQueueSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 16, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configIPortQueueSlotIndex.setStatus('mandatory')
configIPortQueueRIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 16, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configIPortQueueRIndex.setStatus('mandatory')
configIPortQueueQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 16, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configIPortQueueQueueIndex.setStatus('mandatory')
configIPortQueueEfciTaggingAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 16, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configIPortQueueEfciTaggingAdminStatus.setStatus('mandatory')
configIPortQueueClpDiscardAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 16, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configIPortQueueClpDiscardAdminStatus.setStatus('mandatory')
configIPortQueueEfciTaggingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 16, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("oneEighth", 1), ("oneFourth", 2), ("oneHalf", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configIPortQueueEfciTaggingThreshold.setStatus('mandatory')
configIPortQueueClpDiscardThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 16, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("oneEighth", 1), ("oneFourth", 2), ("oneHalf", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configIPortQueueClpDiscardThreshold.setStatus('mandatory')
configIPortQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 16, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configIPortQueueSize.setStatus('mandatory')
configIPortQueueLogClr = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 16, 9, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configIPortQueueLogClr.setStatus('mandatory')
configIPortQueueCdv = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 16, 9, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configIPortQueueCdv.setStatus('mandatory')
pvpSetupTableNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 17, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvpSetupTableNextIndex.setStatus('mandatory')
pvpSetupTable = MibTable((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 17, 2), )
if mibBuilder.loadTexts: pvpSetupTable.setStatus('mandatory')
pvpSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 17, 2, 1), ).setIndexNames((0, "Olicom-crossfireAtmSwitch-MIB", "pvpSetupIndex"))
if mibBuilder.loadTexts: pvpSetupEntry.setStatus('mandatory')
pvpSetupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 17, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvpSetupIndex.setStatus('mandatory')
pvpSetupApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 17, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("transitVp", 1), ("softPvpOriginatorVpl", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvpSetupApplication.setStatus('mandatory')
pvpSetupLowEPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 17, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvpSetupLowEPortIndex.setStatus('mandatory')
pvpSetupLowVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 17, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvpSetupLowVpi.setStatus('mandatory')
pvpSetupHighEPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 17, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvpSetupHighEPortIndex.setStatus('mandatory')
pvpSetupHighVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 17, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvpSetupHighVpi.setStatus('mandatory')
pvpSetupVpCrossConnectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 17, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvpSetupVpCrossConnectIndex.setStatus('mandatory')
pvpSetupL2HTrafficDescriptorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 17, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvpSetupL2HTrafficDescriptorIndex.setStatus('mandatory')
pvpSetupH2LTrafficDescriptorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 17, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvpSetupH2LTrafficDescriptorIndex.setStatus('mandatory')
pvpSetupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 17, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvpSetupRowStatus.setStatus('mandatory')
pvcSetupTableNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 17, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcSetupTableNextIndex.setStatus('mandatory')
pvcSetupTable = MibTable((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 17, 4), )
if mibBuilder.loadTexts: pvcSetupTable.setStatus('mandatory')
pvcSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 17, 4, 1), ).setIndexNames((0, "Olicom-crossfireAtmSwitch-MIB", "pvcSetupIndex"))
if mibBuilder.loadTexts: pvcSetupEntry.setStatus('mandatory')
pvcSetupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 17, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcSetupIndex.setStatus('mandatory')
pvcSetupApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 17, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("transitVc", 1), ("softPvcOriginatorVcl", 2), ("classicalIpArpSrvVcl", 3), ("lesCntrlDirectVcl", 4), ("busMcastSendVcl", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcSetupApplication.setStatus('mandatory')
pvcSetupLowEPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 17, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcSetupLowEPortIndex.setStatus('mandatory')
pvcSetupLowVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 17, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcSetupLowVpi.setStatus('mandatory')
pvcSetupLowVci = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 17, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcSetupLowVci.setStatus('mandatory')
pvcSetupHighEPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 17, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcSetupHighEPortIndex.setStatus('mandatory')
pvcSetupHighVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 17, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcSetupHighVpi.setStatus('mandatory')
pvcSetupHighVci = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 17, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcSetupHighVci.setStatus('mandatory')
pvcSetupVcCrossConnectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 17, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcSetupVcCrossConnectIndex.setStatus('mandatory')
pvcSetupL2HTrafficDescriptorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 17, 4, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcSetupL2HTrafficDescriptorIndex.setStatus('mandatory')
pvcSetupH2LTrafficDescriptorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 17, 4, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcSetupH2LTrafficDescriptorIndex.setStatus('mandatory')
pvcSetupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 17, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcSetupRowStatus.setStatus('mandatory')
svpSetupTableNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 18, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svpSetupTableNextIndex.setStatus('mandatory')
svpSetupTable = MibTable((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 18, 2), )
if mibBuilder.loadTexts: svpSetupTable.setStatus('mandatory')
svpSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 18, 2, 1), ).setIndexNames((0, "Olicom-crossfireAtmSwitch-MIB", "svpSetupIndex"))
if mibBuilder.loadTexts: svpSetupEntry.setStatus('mandatory')
svpSetupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 18, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svpSetupIndex.setStatus('mandatory')
svpSetupApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 18, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("tunnel", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svpSetupApplication.setStatus('mandatory')
svpSetupEPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 18, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svpSetupEPortIndex.setStatus('mandatory')
svpSetupPreferredVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 18, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svpSetupPreferredVpi.setStatus('mandatory')
svpSetupTermAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 18, 2, 1, 5), AtmAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svpSetupTermAtmAddr.setStatus('mandatory')
svpSetupVpCrossConnectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 18, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svpSetupVpCrossConnectIndex.setStatus('mandatory')
svpSetupTxTrafficDescriptorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 18, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svpSetupTxTrafficDescriptorIndex.setStatus('mandatory')
svpSetupRxTrafficDescriptorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 18, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svpSetupRxTrafficDescriptorIndex.setStatus('mandatory')
svpSetupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 18, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svpSetupRowStatus.setStatus('mandatory')
svcSetupTableNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 18, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSetupTableNextIndex.setStatus('mandatory')
svcSetupTable = MibTable((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 18, 4), )
if mibBuilder.loadTexts: svcSetupTable.setStatus('mandatory')
svcSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 18, 4, 1), ).setIndexNames((0, "Olicom-crossfireAtmSwitch-MIB", "svcSetupIndex"))
if mibBuilder.loadTexts: svcSetupEntry.setStatus('mandatory')
svcSetupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 18, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSetupIndex.setStatus('mandatory')
svcSetupApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 18, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("classicalIpArpSrv", 1), ("lecsConfigDirectSvc", 2), ("lesCntrlDirectSvc", 3), ("busMcastSendSvc", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSetupApplication.setStatus('mandatory')
svcSetupTermAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 18, 4, 1, 3), AtmAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcSetupTermAtmAddr.setStatus('mandatory')
svcSetupVcCrossConnectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 18, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcSetupVcCrossConnectIndex.setStatus('mandatory')
svcSetupTxTrafficDescriptorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 18, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcSetupTxTrafficDescriptorIndex.setStatus('mandatory')
svcSetupRxTrafficDescriptorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 18, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcSetupRxTrafficDescriptorIndex.setStatus('mandatory')
svcSetupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 18, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcSetupRowStatus.setStatus('mandatory')
configCommonSignallingMaxTunnels = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 19, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonSignallingMaxTunnels.setStatus('mandatory')
configCommonSignallingMaxSaps = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 19, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 511))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonSignallingMaxSaps.setStatus('mandatory')
configCommonSignallingMaxPvcs = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 19, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonSignallingMaxPvcs.setStatus('obsolete')
configCommonSignallingMaxSvcs = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 19, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16384))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonSignallingMaxSvcs.setStatus('mandatory')
configCommonSignallingMaxConManStevs = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 19, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonSignallingMaxConManStevs.setStatus('obsolete')
configCommonSignallingMaxSigProtStevs = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 19, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonSignallingMaxSigProtStevs.setStatus('mandatory')
configCommonSignallingT301 = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 19, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonSignallingT301.setStatus('mandatory')
configCommonSignallingT302 = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 19, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonSignallingT302.setStatus('mandatory')
configCommonSignallingT303 = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 19, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonSignallingT303.setStatus('mandatory')
configCommonSignallingT304 = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 19, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonSignallingT304.setStatus('mandatory')
configCommonSignallingT306 = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 19, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonSignallingT306.setStatus('mandatory')
configCommonSignallingT308 = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 19, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonSignallingT308.setStatus('mandatory')
configCommonSignallingT309 = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 19, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonSignallingT309.setStatus('mandatory')
configCommonSignallingT310 = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 19, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonSignallingT310.setStatus('mandatory')
configCommonSignallingT313 = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 19, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonSignallingT313.setStatus('mandatory')
configCommonSignallingT316 = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 19, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonSignallingT316.setStatus('mandatory')
configCommonSignallingT317 = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 19, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonSignallingT317.setStatus('mandatory')
configCommonSignallingT322 = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 19, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonSignallingT322.setStatus('mandatory')
configCommonSignallingT331 = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 19, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonSignallingT331.setStatus('mandatory')
configCommonSignallingT333 = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 19, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonSignallingT333.setStatus('obsolete')
configCommonSignallingT397 = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 19, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonSignallingT397.setStatus('mandatory')
configCommonSignallingT398 = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 19, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonSignallingT398.setStatus('mandatory')
configCommonSignallingT399 = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 19, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonSignallingT399.setStatus('mandatory')
configCommonSignallingPtmpMaxLeafs = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 19, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16384))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonSignallingPtmpMaxLeafs.setStatus('mandatory')
configCommonSignallingPtmpMaxLeafOperations = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 19, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonSignallingPtmpMaxLeafOperations.setStatus('mandatory')
configCommonSignallingPtmpMaxLeafsDropByClear = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 19, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonSignallingPtmpMaxLeafsDropByClear.setStatus('mandatory')
configCommonSignallingPtmpMaxP2mpSvcs = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 19, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonSignallingPtmpMaxP2mpSvcs.setStatus('mandatory')
configCommonSscopMaxSaps = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 19, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonSscopMaxSaps.setStatus('obsolete')
configCommonSscopMaxLinks = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 19, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonSscopMaxLinks.setStatus('obsolete')
configCommonSscopMaxRcvWinSize = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 19, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonSscopMaxRcvWinSize.setStatus('mandatory')
configCommonSscopMaxCc = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 19, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonSscopMaxCc.setStatus('mandatory')
configCommonSscopMaxPd = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 19, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonSscopMaxPd.setStatus('mandatory')
configCommonSscopMaxStat = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 19, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonSscopMaxStat.setStatus('mandatory')
configCommonSscopTimerPoll = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 19, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonSscopTimerPoll.setStatus('mandatory')
configCommonSscopTimerNoResponse = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 19, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonSscopTimerNoResponse.setStatus('mandatory')
configCommonSscopTimerKeepAlive = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 19, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonSscopTimerKeepAlive.setStatus('mandatory')
configCommonSscopTimerIdle = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 19, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonSscopTimerIdle.setStatus('mandatory')
configCommonSscopTimerCc = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 19, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonSscopTimerCc.setStatus('mandatory')
configCommonSscopMaxSduSize = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 19, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 16384))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonSscopMaxSduSize.setStatus('mandatory')
configCommonSscopMaxUuSize = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 19, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 16384))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configCommonSscopMaxUuSize.setStatus('mandatory')
configNextHopRoutingTableNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 20, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configNextHopRoutingTableNextIndex.setStatus('mandatory')
configNextHopRoutingTable = MibTable((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 20, 2), )
if mibBuilder.loadTexts: configNextHopRoutingTable.setStatus('mandatory')
configNextHopRoutingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 20, 2, 1), ).setIndexNames((0, "Olicom-crossfireAtmSwitch-MIB", "configNextHopRoutingIndex"))
if mibBuilder.loadTexts: configNextHopRoutingEntry.setStatus('mandatory')
configNextHopRoutingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 20, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configNextHopRoutingIndex.setStatus('mandatory')
configNextHopRoutingAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 20, 2, 1, 2), AtmAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configNextHopRoutingAtmAddress.setStatus('mandatory')
configNextHopRoutingAddressLength = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 20, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configNextHopRoutingAddressLength.setStatus('mandatory')
configNextHopRoutingEPort = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 20, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configNextHopRoutingEPort.setStatus('mandatory')
configNextHopRoutingSignallingType = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 20, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("userSide", 1), ("networkSide", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configNextHopRoutingSignallingType.setStatus('obsolete')
configNextHopRoutingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 20, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configNextHopRoutingRowStatus.setStatus('mandatory')
atmIpArpTable = MibTable((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 21, 1), )
if mibBuilder.loadTexts: atmIpArpTable.setStatus('mandatory')
atmIpArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 21, 1, 1), ).setIndexNames((0, "Olicom-crossfireAtmSwitch-MIB", "atmIpArpServerIndex"), (0, "Olicom-crossfireAtmSwitch-MIB", "atmIpArpIpAddress"))
if mibBuilder.loadTexts: atmIpArpEntry.setStatus('mandatory')
atmIpArpServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 21, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIpArpServerIndex.setStatus('mandatory')
atmIpArpIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 21, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIpArpIpAddress.setStatus('mandatory')
atmIpArpAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 21, 1, 1, 3), AtmAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIpArpAtmAddress.setStatus('mandatory')
atmIpArpType = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 21, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("dynamic", 3), ("static", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIpArpType.setStatus('mandatory')
configIpArpServerTableNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 21, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configIpArpServerTableNextIndex.setStatus('mandatory')
configIpArpServerTable = MibTable((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 21, 3), )
if mibBuilder.loadTexts: configIpArpServerTable.setStatus('mandatory')
configIpArpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 21, 3, 1), ).setIndexNames((0, "Olicom-crossfireAtmSwitch-MIB", "configIpArpServerIndex"))
if mibBuilder.loadTexts: configIpArpServerEntry.setStatus('mandatory')
configIpArpServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 21, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configIpArpServerIndex.setStatus('mandatory')
configIpArpServerAtmAddressSpec = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 21, 3, 1, 2), AtmAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configIpArpServerAtmAddressSpec.setStatus('mandatory')
configIpArpServerAtmAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 21, 3, 1, 3), AtmAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configIpArpServerAtmAddressMask.setStatus('mandatory')
configIpArpServerAtmAddressActual = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 21, 3, 1, 4), AtmAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configIpArpServerAtmAddressActual.setStatus('mandatory')
configIpArpServerIpSubnetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 21, 3, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configIpArpServerIpSubnetAddress.setStatus('mandatory')
configIpArpServerIpSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 21, 3, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configIpArpServerIpSubnetMask.setStatus('mandatory')
configIpArpServerAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 21, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configIpArpServerAdminStatus.setStatus('mandatory')
configIpArpServerOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 21, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configIpArpServerOperStatus.setStatus('mandatory')
configIpArpServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 21, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configIpArpServerRowStatus.setStatus('mandatory')
configClipArpServer = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 21, 4), AtmAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configClipArpServer.setStatus('mandatory')
qosClassTable = MibTable((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 22, 1), )
if mibBuilder.loadTexts: qosClassTable.setStatus('mandatory')
qosClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 22, 1, 1), ).setIndexNames((0, "Olicom-crossfireAtmSwitch-MIB", "qosClassClass"))
if mibBuilder.loadTexts: qosClassEntry.setStatus('mandatory')
qosClassClass = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 22, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosClassClass.setStatus('mandatory')
qosClassCtd = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 22, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosClassCtd.setStatus('mandatory')
qosClassCdv = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 22, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosClassCdv.setStatus('mandatory')
qosClassLogClr = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 22, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosClassLogClr.setStatus('mandatory')
configSerialObmSlip = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 23, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("obm", 2), ("slip", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSerialObmSlip.setStatus('mandatory')
ifMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 24, 1))
atmTESTMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 24, 2))
ifTestTable = MibTable((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 24, 1, 3), )
if mibBuilder.loadTexts: ifTestTable.setStatus('mandatory')
ifTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 24, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ifTestEntry.setStatus('mandatory')
ifTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 24, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifTestId.setStatus('mandatory')
ifTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 24, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notInUse", 1), ("inUse", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifTestStatus.setStatus('mandatory')
ifTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 24, 1, 3, 1, 3), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifTestType.setStatus('mandatory')
ifTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 24, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("success", 2), ("inProgress", 3), ("notSupported", 4), ("unAbleToRun", 5), ("aborted", 6), ("failed", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifTestResult.setStatus('mandatory')
ifTestCode = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 24, 1, 3, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifTestCode.setStatus('mandatory')
ifTestOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 24, 1, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifTestOwner.setStatus('mandatory')
atmLoopbackTestGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 24, 2, 1))
atmLoopbackTestTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 24, 2, 1, 4))
atmLoopbackVpE2e = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 24, 2, 1, 4, 1))
atmLoopbackVcE2e = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 24, 2, 1, 4, 2))
atmLoopbackVpSegment = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 24, 2, 1, 4, 3))
atmLoopbackVcSegment = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 24, 2, 1, 4, 4))
controlDeleteCode = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 25, 1), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: controlDeleteCode.setStatus('optional')
controlDeleteConfig = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 2, 25, 2), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: controlDeleteConfig.setStatus('optional')
statusBasicHw = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 1))
statusProcessorModule = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 2))
statusFeatureModule = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 3))
statusXModule = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 4))
statusEPort = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 6))
statusVpcVcc = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 7))
statusFatalLog = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 8))
statusHwChassisCurrentXModules = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusHwChassisCurrentXModules.setStatus('mandatory')
statusHwChassisCurrentEPorts = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusHwChassisCurrentEPorts.setStatus('mandatory')
statusHwChassisUpsOperState = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("operational", 1), ("inUse", 2), ("failed", 3), ("notPresent", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusHwChassisUpsOperState.setStatus('mandatory')
statusHwChassisSwitchingSystemSize = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusHwChassisSwitchingSystemSize.setStatus('mandatory')
statusHwChassisCellBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusHwChassisCellBufferSize.setStatus('mandatory')
statusCurrentTemperatureConditionState = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("highDecreasing", 2), ("normalIncreasing", 3), ("high", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusCurrentTemperatureConditionState.setStatus('mandatory')
statusCurrentTemperatureGauge = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusCurrentTemperatureGauge.setStatus('mandatory')
statusCurrentTemperatureLatch = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statusCurrentTemperatureLatch.setStatus('mandatory')
statusCurrentTemperatureLatchTime = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusCurrentTemperatureLatchTime.setStatus('mandatory')
statusFanOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inService", 1), ("outOfService", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusFanOperStatus.setStatus('mandatory')
statusPsuStatusTable = MibTable((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 1, 11), )
if mibBuilder.loadTexts: statusPsuStatusTable.setStatus('mandatory')
statusPsuStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 1, 11, 1), ).setIndexNames((0, "Olicom-crossfireAtmSwitch-MIB", "statusPsuIndex"))
if mibBuilder.loadTexts: statusPsuStatusEntry.setStatus('mandatory')
statusPsuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusPsuIndex.setStatus('mandatory')
statusPsuOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inService", 1), ("outOfService", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusPsuOperStatus.setStatus('mandatory')
statusProcessorModuleStatusLed = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("flash", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusProcessorModuleStatusLed.setStatus('mandatory')
statusProcessorModuleFaultLed = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("flash", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusProcessorModuleFaultLed.setStatus('mandatory')
statusFeatureModuleOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inService", 1), ("outOfService", 2), ("testing", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusFeatureModuleOperStatus.setStatus('mandatory')
statusFeatureModuleStatusLed = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("flash", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusFeatureModuleStatusLed.setStatus('mandatory')
statusXModuleTable = MibTable((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 4, 1), )
if mibBuilder.loadTexts: statusXModuleTable.setStatus('mandatory')
statusXModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 4, 1, 1), ).setIndexNames((0, "Olicom-crossfireAtmSwitch-MIB", "statusXModuleSlotIndex"))
if mibBuilder.loadTexts: statusXModuleEntry.setStatus('mandatory')
statusXModuleSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusXModuleSlotIndex.setStatus('mandatory')
statusXModuleOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("inService", 2), ("slave", 3), ("failed", 4), ("lost", 5), ("disabledChanged", 6), ("disabledReplaced", 7), ("disabledByManagement", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusXModuleOperStatus.setStatus('mandatory')
statusXModuleNoOfSlotsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusXModuleNoOfSlotsUsed.setStatus('mandatory')
statusXModuleIPort1SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusXModuleIPort1SlotIndex.setStatus('mandatory')
statusXModuleIPort1RIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusXModuleIPort1RIndex.setStatus('mandatory')
statusXModuleIPort2SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusXModuleIPort2SlotIndex.setStatus('mandatory')
statusXModuleIPort2RIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusXModuleIPort2RIndex.setStatus('mandatory')
statusXModuleIPort3SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusXModuleIPort3SlotIndex.setStatus('mandatory')
statusXModuleIPort3RIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusXModuleIPort3RIndex.setStatus('mandatory')
statusXModuleIPort4SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusXModuleIPort4SlotIndex.setStatus('mandatory')
statusXModuleIPort4RIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusXModuleIPort4RIndex.setStatus('mandatory')
statusEPortTable = MibTable((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 6, 1), )
if mibBuilder.loadTexts: statusEPortTable.setStatus('mandatory')
statusEPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 6, 1, 1), ).setIndexNames((0, "Olicom-crossfireAtmSwitch-MIB", "statusEPortIfIndex"))
if mibBuilder.loadTexts: statusEPortEntry.setStatus('mandatory')
statusEPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusEPortIfIndex.setStatus('mandatory')
statusEPortXModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusEPortXModuleIndex.setStatus('mandatory')
statusEPortRIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusEPortRIndex.setStatus('mandatory')
statusEPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusEPortOperStatus.setStatus('mandatory')
statusEPortPhyState = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("offlineDisabled", 1), ("offlineRestart", 2), ("onlineOk", 3), ("onlineTransPhyFault", 4), ("onlineSignalLoss", 5), ("onlineNoRxSync", 6), ("onlineAutoDisable", 7), ("onlineTesting", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusEPortPhyState.setStatus('mandatory')
statusEPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("utp25", 2), ("mmf155", 3), ("utp155", 4), ("mmf622", 5), ("smf155", 6), ("smf622", 7), ("ds3", 8), ("vpTunnel", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusEPortType.setStatus('mandatory')
statusEPortRxSyncLedState = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("flash", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusEPortRxSyncLedState.setStatus('mandatory')
statusEPortSignalLossLedState = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("flash", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusEPortSignalLossLedState.setStatus('mandatory')
statusEPortPhyPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 6, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusEPortPhyPortIndex.setStatus('mandatory')
statusEPortLoopbackState = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusEPortLoopbackState.setStatus('mandatory')
statusEPortLoopbackErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 6, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusEPortLoopbackErrorCode.setStatus('mandatory')
statusEPortIlmiState = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("stopped", 1), ("linkFailing", 2), ("establishing", 3), ("configuring", 4), ("retrieving", 5), ("registering", 6), ("verifying", 7), ("cleanUp", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusEPortIlmiState.setStatus('mandatory')
statusEPortAdjInfoTransmissionType = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 6, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusEPortAdjInfoTransmissionType.setStatus('mandatory')
statusEPortAdjInfoMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 6, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusEPortAdjInfoMediaType.setStatus('mandatory')
statusEPortAdjInfoIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 6, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusEPortAdjInfoIfName.setStatus('mandatory')
statusEPortAdjInfoSystemIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 6, 1, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusEPortAdjInfoSystemIdentifier.setStatus('mandatory')
statusEPortAdjInfoMaxVpcs = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 6, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusEPortAdjInfoMaxVpcs.setStatus('mandatory')
statusEPortAdjInfoMaxVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 6, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusEPortAdjInfoMaxVccs.setStatus('mandatory')
statusEPortAdjInfoMaxVpiBits = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 6, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusEPortAdjInfoMaxVpiBits.setStatus('mandatory')
statusEPortAdjInfoMaxVciBits = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 6, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusEPortAdjInfoMaxVciBits.setStatus('mandatory')
statusEPortAdjInfoUniType = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 6, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("public", 1), ("private", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusEPortAdjInfoUniType.setStatus('mandatory')
statusEPortAdjInfoUniVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 6, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("version2point0", 1), ("version3point0", 2), ("version3point1", 3), ("version4point0", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusEPortAdjInfoUniVersion.setStatus('mandatory')
statusEPortAdjInfoDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 6, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("user", 1), ("node", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusEPortAdjInfoDeviceType.setStatus('mandatory')
statusEPortAdjInfoIlmiVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 6, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unsupported", 1), ("version4point0", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusEPortAdjInfoIlmiVersion.setStatus('mandatory')
statusEPortAdjInfoNniSigVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 6, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unsupported", 1), ("iisp", 2), ("pnniVersion1point0", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusEPortAdjInfoNniSigVersion.setStatus('mandatory')
statusEPortAutoconfigMaxVpcs = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 6, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusEPortAutoconfigMaxVpcs.setStatus('mandatory')
statusEPortAutoconfigMaxVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 6, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusEPortAutoconfigMaxVccs.setStatus('mandatory')
statusEPortAutoconfigMaxVpiBits = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 6, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusEPortAutoconfigMaxVpiBits.setStatus('mandatory')
statusEPortAutoconfigMaxVciBits = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 6, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusEPortAutoconfigMaxVciBits.setStatus('mandatory')
statusEPortAutoconfigUniVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 6, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 1), ("version3point0", 2), ("version3point1", 3), ("version4point0", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusEPortAutoconfigUniVersion.setStatus('mandatory')
statusEPortAutoconfigDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 6, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("user", 1), ("node", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusEPortAutoconfigDeviceType.setStatus('mandatory')
statusEPortAutoconfigDerivedInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 6, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 1), ("publicUni", 2), ("privateUni", 3), ("privateNni", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusEPortAutoconfigDerivedInterfaceType.setStatus('mandatory')
statusEPortAutoconfigMaxSvpcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 6, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusEPortAutoconfigMaxSvpcVpi.setStatus('mandatory')
statusEPortAutoconfigMaxSvccVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 6, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusEPortAutoconfigMaxSvccVpi.setStatus('mandatory')
statusEPortAutoconfigMinSvccVci = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 6, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusEPortAutoconfigMinSvccVci.setStatus('mandatory')
statusEPortAdjInfoMaxSvpcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 6, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusEPortAdjInfoMaxSvpcVpi.setStatus('mandatory')
statusEPortAdjInfoMaxSvccVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 6, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusEPortAdjInfoMaxSvccVpi.setStatus('mandatory')
statusEPortAdjInfoMinSvccVci = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 6, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusEPortAdjInfoMinSvccVci.setStatus('mandatory')
vpcExtensionTable = MibTable((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 7, 1), )
if mibBuilder.loadTexts: vpcExtensionTable.setStatus('mandatory')
vpcExtensionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 7, 1, 1), ).setIndexNames((0, "Olicom-crossfireAtmSwitch-MIB", "vpcExtensionIndex"))
if mibBuilder.loadTexts: vpcExtensionEntry.setStatus('mandatory')
vpcExtensionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpcExtensionIndex.setStatus('mandatory')
vpcExtensionVpCrossConnectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpcExtensionVpCrossConnectIndex.setStatus('mandatory')
vpcExtensionOrigAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 7, 1, 1, 3), AtmAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpcExtensionOrigAtmAddr.setStatus('mandatory')
vpcExtensionTermAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 7, 1, 1, 4), AtmAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpcExtensionTermAtmAddr.setStatus('mandatory')
vpcExtensionCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 7, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpcExtensionCapabilities.setStatus('mandatory')
vccExtensionTable = MibTable((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 7, 2), )
if mibBuilder.loadTexts: vccExtensionTable.setStatus('mandatory')
vccExtensionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 7, 2, 1), ).setIndexNames((0, "Olicom-crossfireAtmSwitch-MIB", "vccExtensionIndex"))
if mibBuilder.loadTexts: vccExtensionEntry.setStatus('mandatory')
vccExtensionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vccExtensionIndex.setStatus('mandatory')
vccExtensionVcCrossConnectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vccExtensionVcCrossConnectIndex.setStatus('mandatory')
vccExtensionOrigAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 7, 2, 1, 3), AtmAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vccExtensionOrigAtmAddr.setStatus('mandatory')
vccExtensionTermAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 7, 2, 1, 4), AtmAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vccExtensionTermAtmAddr.setStatus('mandatory')
vccExtensionCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 7, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vccExtensionCapabilities.setStatus('mandatory')
vccExtensionEarlyPacketDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vccExtensionEarlyPacketDiscard.setStatus('mandatory')
statusFatalStatUsed = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusFatalStatUsed.setStatus('mandatory')
statusFatalStatFree = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusFatalStatFree.setStatus('mandatory')
statusFatalStatOverflow = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusFatalStatOverflow.setStatus('mandatory')
statusFatalStatMaxDumpLength = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusFatalStatMaxDumpLength.setStatus('mandatory')
statusFatalTable = MibTable((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 8, 5), )
if mibBuilder.loadTexts: statusFatalTable.setStatus('mandatory')
statusFatalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 8, 5, 1), ).setIndexNames((0, "Olicom-crossfireAtmSwitch-MIB", "statusFatalIndex"))
if mibBuilder.loadTexts: statusFatalEntry.setStatus('mandatory')
statusFatalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 8, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusFatalIndex.setStatus('mandatory')
statusFatalSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 8, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusFatalSerial.setStatus('mandatory')
statusFatalTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 8, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusFatalTimestamp.setStatus('mandatory')
statusFatalTimeString = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 8, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusFatalTimeString.setStatus('mandatory')
statusFatalSource = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 8, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusFatalSource.setStatus('mandatory')
statusFatalLine = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 8, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusFatalLine.setStatus('mandatory')
statusFatalOriginalDumpSize = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 8, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusFatalOriginalDumpSize.setStatus('mandatory')
statusFatalDumpSize = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 8, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusFatalDumpSize.setStatus('mandatory')
statusFatalDump = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 3, 8, 5, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusFatalDump.setStatus('mandatory')
statisticsGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 4, 1))
statisticsCpuPort = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 4, 2))
statisticsEPort = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 4, 3))
statisticsIPort = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 4, 4))
statsGlobalCongestionState = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("highDecreasing", 2), ("normalIncreasing", 3), ("high", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsGlobalCongestionState.setStatus('mandatory')
statsGlobalCongestionDiscardCellRate = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 4, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsGlobalCongestionDiscardCellRate.setStatus('mandatory')
statsGlobalCongestionDiscardCellCounter = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsGlobalCongestionDiscardCellCounter.setStatus('mandatory')
statsGlobalCongestionDiscardCellLatch = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statsGlobalCongestionDiscardCellLatch.setStatus('mandatory')
statsGlobalCongestionDiscardCellLatchTime = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 4, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsGlobalCongestionDiscardCellLatchTime.setStatus('mandatory')
statsInvalidCellRateState = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("highDecreasing", 2), ("normalIncreasing", 3), ("high", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsInvalidCellRateState.setStatus('mandatory')
statsInvalidCellRate = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 4, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsInvalidCellRate.setStatus('mandatory')
statsInvalidCellCounter = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsInvalidCellCounter.setStatus('mandatory')
statsInvalidCellLatch = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statsInvalidCellLatch.setStatus('mandatory')
statsInvalidCellLatchTime = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 4, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsInvalidCellLatchTime.setStatus('mandatory')
statsCpuPortCongestionState = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("highDecreasing", 2), ("normalIncreasing", 3), ("high", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsCpuPortCongestionState.setStatus('mandatory')
statsCpuPortDiscardCellRate = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 4, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsCpuPortDiscardCellRate.setStatus('mandatory')
statsCpuPortDiscardCellCounter = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 4, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsCpuPortDiscardCellCounter.setStatus('mandatory')
statsCpuPortDiscardCellLatch = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 4, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statsCpuPortDiscardCellLatch.setStatus('mandatory')
statsCpuPortDiscardCellLatchTime = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 4, 2, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsCpuPortDiscardCellLatchTime.setStatus('mandatory')
statsEportTable = MibTable((1, 3, 6, 1, 4, 1, 285, 2, 6, 4, 3, 1), )
if mibBuilder.loadTexts: statsEportTable.setStatus('mandatory')
statsEportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 2, 6, 4, 3, 1, 1), ).setIndexNames((0, "Olicom-crossfireAtmSwitch-MIB", "statsEPortIfIndex"))
if mibBuilder.loadTexts: statsEportEntry.setStatus('mandatory')
statsEPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 4, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsEPortIfIndex.setStatus('mandatory')
statsEPortHecErrorRateConditionState = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("highDecreasing", 2), ("normalIncreasing", 3), ("high", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsEPortHecErrorRateConditionState.setStatus('mandatory')
statsEPortRxHecErrorCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 4, 3, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsEPortRxHecErrorCellRate.setStatus('mandatory')
statsEPortRxHecErrorCellCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 4, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsEPortRxHecErrorCellCounter.setStatus('mandatory')
statsEPortRxHecErrorCellLatch = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statsEPortRxHecErrorCellLatch.setStatus('mandatory')
statsEPortRxHecErrorCellLatchTime = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 4, 3, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsEPortRxHecErrorCellLatchTime.setStatus('mandatory')
statsIPortTable = MibTable((1, 3, 6, 1, 4, 1, 285, 2, 6, 4, 4, 1), )
if mibBuilder.loadTexts: statsIPortTable.setStatus('mandatory')
statsIPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 2, 6, 4, 4, 1, 1), ).setIndexNames((0, "Olicom-crossfireAtmSwitch-MIB", "statsIPortSlotIndex"), (0, "Olicom-crossfireAtmSwitch-MIB", "statsIPortRIndex"))
if mibBuilder.loadTexts: statsIPortEntry.setStatus('mandatory')
statsIPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 4, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsIPortSlotIndex.setStatus('mandatory')
statsIPortRIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 4, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsIPortRIndex.setStatus('mandatory')
statsIPortRxCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 4, 4, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsIPortRxCellRate.setStatus('mandatory')
statsIPortTxCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 4, 4, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsIPortTxCellRate.setStatus('mandatory')
statsIPortTxParityErrorCellCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 4, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsIPortTxParityErrorCellCounter.setStatus('mandatory')
statsQueueCongestionTable = MibTable((1, 3, 6, 1, 4, 1, 285, 2, 6, 4, 4, 2), )
if mibBuilder.loadTexts: statsQueueCongestionTable.setStatus('mandatory')
statsQueueCongestionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 2, 6, 4, 4, 2, 1), ).setIndexNames((0, "Olicom-crossfireAtmSwitch-MIB", "statsQueueCongestionSlotIndex"), (0, "Olicom-crossfireAtmSwitch-MIB", "statsQueueCongestionIPortRIndex"), (0, "Olicom-crossfireAtmSwitch-MIB", "statsQueueCongestionQueueIndex"))
if mibBuilder.loadTexts: statsQueueCongestionEntry.setStatus('mandatory')
statsQueueCongestionSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 4, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsQueueCongestionSlotIndex.setStatus('mandatory')
statsQueueCongestionIPortRIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 4, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsQueueCongestionIPortRIndex.setStatus('mandatory')
statsQueueCongestionQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 4, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsQueueCongestionQueueIndex.setStatus('mandatory')
statsQueueCongestionConditionState = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 4, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("highDecreasing", 2), ("normalIncreasing", 3), ("high", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsQueueCongestionConditionState.setStatus('mandatory')
statsQueueCongestionCellsInQueueGauge = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 4, 4, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsQueueCongestionCellsInQueueGauge.setStatus('mandatory')
statsQueueCongestionCellsInQueueLatch = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 4, 4, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statsQueueCongestionCellsInQueueLatch.setStatus('mandatory')
statsQueueCongestionCellsInQueueLatchTime = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 4, 4, 2, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsQueueCongestionCellsInQueueLatchTime.setStatus('mandatory')
fhTrapFrequencyCntrlFrequency = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fhTrapFrequencyCntrlFrequency.setStatus('mandatory')
fhTrapFrequencyCntrlMaxTraps = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fhTrapFrequencyCntrlMaxTraps.setStatus('mandatory')
fhTrapDashboardControlTable = MibTable((1, 3, 6, 1, 4, 1, 285, 2, 6, 5, 3), )
if mibBuilder.loadTexts: fhTrapDashboardControlTable.setStatus('mandatory')
fhTrapDashboardControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 2, 6, 5, 3, 1), ).setIndexNames((0, "Olicom-crossfireAtmSwitch-MIB", "fhTrapDashboardControlTrapTypeIndex"))
if mibBuilder.loadTexts: fhTrapDashboardControlEntry.setStatus('mandatory')
fhTrapDashboardControlTrapTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("globalCongestion", 1), ("globalInvalidCellRate", 2), ("cpuPortCongestion", 3), ("iPortCongestion", 4), ("ePortHecErrorRate", 5), ("temperatureWarning", 6), ("psuMonitor", 7), ("fanMonitor", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fhTrapDashboardControlTrapTypeIndex.setStatus('mandatory')
fhTrapDashboardControlFrequencyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("oneShot", 1), ("forever", 2), ("upToMax", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fhTrapDashboardControlFrequencyMode.setStatus('mandatory')
fhTrapDashboardControlThresholdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 5, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fhTrapDashboardControlThresholdLow.setStatus('mandatory')
fhTrapDashboardControlThresholdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 5, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fhTrapDashboardControlThresholdHigh.setStatus('mandatory')
fhTrapDashboardControlSamplingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fhTrapDashboardControlSamplingInterval.setStatus('mandatory')
fhTrapDashboardControlNoSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fhTrapDashboardControlNoSamples.setStatus('mandatory')
temperatureCriticalTrapThreshold = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureCriticalTrapThreshold.setStatus('mandatory')
restart = NotificationType((1, 3, 6, 1, 4, 1, 285, 2, 6) + (0,1)).setObjects(("Olicom-crossfireAtmSwitch-MIB", "termRestartInfoRestartTime"), ("Olicom-crossfireAtmSwitch-MIB", "termRestartInfoRestartReason"), ("Olicom-crossfireAtmSwitch-MIB", "termRestartInfoTerminationReason"), ("Olicom-crossfireAtmSwitch-MIB", "termRestartInfoBbsram"))
globalCongestionTrap = NotificationType((1, 3, 6, 1, 4, 1, 285, 2, 6) + (0,3)).setObjects(("Olicom-crossfireAtmSwitch-MIB", "statsGlobalCongestionState"), ("Olicom-crossfireAtmSwitch-MIB", "statsGlobalCongestionDiscardCellRate"), ("Olicom-MIB", "controlTime"))
globalInvalidCellRateTrap = NotificationType((1, 3, 6, 1, 4, 1, 285, 2, 6) + (0,4)).setObjects(("Olicom-crossfireAtmSwitch-MIB", "statsInvalidCellRateState"), ("Olicom-crossfireAtmSwitch-MIB", "statsInvalidCellRate"), ("Olicom-MIB", "controlTime"))
cpuPortCongestionTrap = NotificationType((1, 3, 6, 1, 4, 1, 285, 2, 6) + (0,5)).setObjects(("Olicom-crossfireAtmSwitch-MIB", "statsCpuPortCongestionState"), ("Olicom-MIB", "controlTime"))
queueCongestionTrap = NotificationType((1, 3, 6, 1, 4, 1, 285, 2, 6) + (0,6)).setObjects(("Olicom-crossfireAtmSwitch-MIB", "statsQueueCongestionSlotIndex"), ("Olicom-crossfireAtmSwitch-MIB", "statsQueueCongestionIPortRIndex"), ("Olicom-crossfireAtmSwitch-MIB", "statsQueueCongestionQueueIndex"), ("Olicom-crossfireAtmSwitch-MIB", "statsQueueCongestionConditionState"), ("Olicom-MIB", "controlTime"))
ePortHecErrorRateTrap = NotificationType((1, 3, 6, 1, 4, 1, 285, 2, 6) + (0,7)).setObjects(("Olicom-crossfireAtmSwitch-MIB", "statsEPortIfIndex"), ("Olicom-crossfireAtmSwitch-MIB", "statusEPortXModuleIndex"), ("Olicom-crossfireAtmSwitch-MIB", "statusEPortRIndex"), ("Olicom-crossfireAtmSwitch-MIB", "statsEPortHecErrorRateConditionState"), ("Olicom-crossfireAtmSwitch-MIB", "statsEPortRxHecErrorCellRate"), ("Olicom-MIB", "controlTime"))
iPortTxParityErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 285, 2, 6) + (0,8)).setObjects(("Olicom-crossfireAtmSwitch-MIB", "statsIPortSlotIndex"), ("Olicom-crossfireAtmSwitch-MIB", "statsIPortRIndex"), ("Olicom-crossfireAtmSwitch-MIB", "statsIPortTxParityErrorCellCounter"))
ePortAutoDisabled = NotificationType((1, 3, 6, 1, 4, 1, 285, 2, 6) + (0,9)).setObjects(("Olicom-crossfireAtmSwitch-MIB", "statusEPortIfIndex"), ("Olicom-MIB", "controlTime"))
featureModuleStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 285, 2, 6) + (0,10)).setObjects(("Olicom-crossfireAtmSwitch-MIB", "statusFeatureModuleOperStatus"), ("Olicom-MIB", "controlTime"))
xModuleStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 285, 2, 6) + (0,11)).setObjects(("Olicom-crossfireAtmSwitch-MIB", "statusXModuleSlotIndex"), ("Olicom-crossfireAtmSwitch-MIB", "statusXModuleOperStatus"), ("Olicom-MIB", "controlTime"))
temperatureWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 285, 2, 6) + (0,12)).setObjects(("Olicom-crossfireAtmSwitch-MIB", "statusCurrentTemperatureConditionState"), ("Olicom-crossfireAtmSwitch-MIB", "statusCurrentTemperatureGauge"), ("Olicom-MIB", "controlTime"))
fanFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 285, 2, 6) + (0,13)).setObjects(("Olicom-crossfireAtmSwitch-MIB", "statusFanOperStatus"), ("Olicom-crossfireAtmSwitch-MIB", "statusCurrentTemperatureGauge"), ("Olicom-MIB", "controlTime"))
psuFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 285, 2, 6) + (0,14)).setObjects(("Olicom-crossfireAtmSwitch-MIB", "statusPsuIndex"), ("Olicom-crossfireAtmSwitch-MIB", "statusPsuOperStatus"), ("Olicom-MIB", "controlTime"))
temperatureCriticalTrap = NotificationType((1, 3, 6, 1, 4, 1, 285, 2, 6) + (0,15)).setObjects(("Olicom-crossfireAtmSwitch-MIB", "statusCurrentTemperatureConditionState"), ("Olicom-crossfireAtmSwitch-MIB", "statusCurrentTemperatureGauge"), ("Olicom-MIB", "controlTime"))
oamFlowNoResponseTrap = NotificationType((1, 3, 6, 1, 4, 1, 285, 2, 6) + (0,16)).setObjects(("IF-MIB", "ifIndex"), ("Olicom-MIB", "controlTime"))
ocCNNI = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3))
ocDsx3 = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 4))
ocCNNIMonSimple = MibTable((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 1), )
if mibBuilder.loadTexts: ocCNNIMonSimple.setStatus('optional')
ocCNNIMonSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 1, 1), ).setIndexNames((0, "Olicom-crossfireAtmSwitch-MIB", "ocCNNIApplID"))
if mibBuilder.loadTexts: ocCNNIMonSEntry.setStatus('optional')
ocCNNIRoutingTableChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocCNNIRoutingTableChanged.setStatus('optional')
ocCNNINeighborTableChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocCNNINeighborTableChanged.setStatus('optional')
ocCNNILineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocCNNILineStatus.setStatus('optional')
ocCNNIMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocCNNIMACAddress.setStatus('optional')
ocCNNIMode = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocCNNIMode.setStatus('optional')
ocCNNIProtocolVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocCNNIProtocolVersion.setStatus('optional')
ocCNNIApplID = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocCNNIApplID.setStatus('optional')
ocCNNIMonTables = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 2))
ocCNNIRoutingTable = MibTable((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 2, 1), )
if mibBuilder.loadTexts: ocCNNIRoutingTable.setStatus('optional')
ocCNNIRoutingTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 2, 1, 1), ).setIndexNames((0, "Olicom-crossfireAtmSwitch-MIB", "ocCNNIApplID"), (0, "Olicom-crossfireAtmSwitch-MIB", "ocCNNIAddress"))
if mibBuilder.loadTexts: ocCNNIRoutingTableEntry.setStatus('optional')
ocCNNIAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 2, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocCNNIAddress.setStatus('optional')
ocCNNIRoutingTableData = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocCNNIRoutingTableData.setStatus('optional')
ocCNNIAddressAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocCNNIAddressAlias.setStatus('optional')
ocCNNINeighborTable = MibTable((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 2, 2), )
if mibBuilder.loadTexts: ocCNNINeighborTable.setStatus('optional')
ocCNNINeighborTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 2, 2, 1), ).setIndexNames((0, "Olicom-crossfireAtmSwitch-MIB", "ocCNNIApplID"), (0, "Olicom-crossfireAtmSwitch-MIB", "ocCNNIPort"))
if mibBuilder.loadTexts: ocCNNINeighborTableEntry.setStatus('optional')
ocCNNIPort = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocCNNIPort.setStatus('optional')
ocCNNINeighborTableData = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 2, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocCNNINeighborTableData.setStatus('optional')
ocCNNITrapClientTable = MibTable((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 2, 3), )
if mibBuilder.loadTexts: ocCNNITrapClientTable.setStatus('optional')
ocCNNITrapClientTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 2, 3, 1), ).setIndexNames((0, "Olicom-crossfireAtmSwitch-MIB", "ocCNNIApplID"), (0, "Olicom-crossfireAtmSwitch-MIB", "ocCNNITrapClientAddress"))
if mibBuilder.loadTexts: ocCNNITrapClientTableEntry.setStatus('optional')
ocCNNITrapClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 2, 3, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocCNNITrapClientIndex.setStatus('optional')
ocCNNITrapClientAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 2, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocCNNITrapClientAddress.setStatus('optional')
ocCNNITrapClientCommName = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 2, 3, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocCNNITrapClientCommName.setStatus('optional')
ocCNNIConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 3))
ocCNNIConfigMethod = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("first", 0), ("best", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocCNNIConfigMethod.setStatus('optional')
ocCNNIConfigAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocCNNIConfigAlgorithm.setStatus('optional')
ocCNNIPortConfig = MibTable((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 4), )
if mibBuilder.loadTexts: ocCNNIPortConfig.setStatus('optional')
ocCNNIPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 4, 1), ).setIndexNames((0, "Olicom-crossfireAtmSwitch-MIB", "ocCNNIPort"))
if mibBuilder.loadTexts: ocCNNIPortEntry.setStatus('optional')
ocCNNIPortProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cnni", 0), ("pnni", 1), ("none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocCNNIPortProtocol.setStatus('optional')
ocCNNIPortBorder = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocCNNIPortBorder.setStatus('optional')
ocCNNIPortAutoreroute = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocCNNIPortAutoreroute.setStatus('optional')
ocCNNIPortReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocCNNIPortReroute.setStatus('optional')
ocCNNIPortAssign = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocCNNIPortAssign.setStatus('optional')
ocCNNIGlobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 5))
ocCNNIGlobalStatsTotal = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocCNNIGlobalStatsTotal.setStatus('optional')
ocCNNIGlobalStatsCreated = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocCNNIGlobalStatsCreated.setStatus('optional')
ocCNNIGlobalStatsOneWay = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocCNNIGlobalStatsOneWay.setStatus('optional')
ocCNNIGlobalStatsConnected = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocCNNIGlobalStatsConnected.setStatus('optional')
ocCNNIGlobalStatsBrokenLeaf = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocCNNIGlobalStatsBrokenLeaf.setStatus('optional')
ocCNNIGlobalStatsBrokenRoot = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocCNNIGlobalStatsBrokenRoot.setStatus('optional')
ocCNNIGlobalStatsRerouteWaiting = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocCNNIGlobalStatsRerouteWaiting.setStatus('optional')
ocCNNIAddrStats = MibTable((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 6), )
if mibBuilder.loadTexts: ocCNNIAddrStats.setStatus('optional')
ocCNNIAddrStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 6, 1), ).setIndexNames((0, "Olicom-crossfireAtmSwitch-MIB", "ocCNNIAddress"))
if mibBuilder.loadTexts: ocCNNIAddrStatsEntry.setStatus('optional')
ocCNNIAddrStatsToTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocCNNIAddrStatsToTotal.setStatus('optional')
ocCNNIAddrStatsToCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocCNNIAddrStatsToCreated.setStatus('optional')
ocCNNIAddrStatsToOneWay = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocCNNIAddrStatsToOneWay.setStatus('optional')
ocCNNIAddrStatsToConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocCNNIAddrStatsToConnected.setStatus('optional')
ocCNNIAddrStatsToBrokenLeaf = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocCNNIAddrStatsToBrokenLeaf.setStatus('optional')
ocCNNIAddrStatsToBrokenRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocCNNIAddrStatsToBrokenRoot.setStatus('optional')
ocCNNIAddrStatsToRerouteWaiting = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocCNNIAddrStatsToRerouteWaiting.setStatus('optional')
ocCNNIAddrStatsFromTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocCNNIAddrStatsFromTotal.setStatus('optional')
ocCNNIAddrStatsFromCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocCNNIAddrStatsFromCreated.setStatus('optional')
ocCNNIAddrStatsFromOneWay = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocCNNIAddrStatsFromOneWay.setStatus('optional')
ocCNNIAddrStatsFromConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocCNNIAddrStatsFromConnected.setStatus('optional')
ocCNNIAddrStatsFromBrokenLeaf = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocCNNIAddrStatsFromBrokenLeaf.setStatus('optional')
ocCNNIAddrStatsFromBrokenRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocCNNIAddrStatsFromBrokenRoot.setStatus('optional')
ocCNNIAddrStatsFromRerouteWaiting = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocCNNIAddrStatsFromRerouteWaiting.setStatus('optional')
ocCNNIAliasTable = MibTable((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 7), )
if mibBuilder.loadTexts: ocCNNIAliasTable.setStatus('optional')
ocCNNIAliasTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 7, 1), ).setIndexNames((0, "Olicom-crossfireAtmSwitch-MIB", "ocCNNIAddress"))
if mibBuilder.loadTexts: ocCNNIAliasTableEntry.setStatus('optional')
ocCNNIAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 7, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocCNNIAlias.setStatus('optional')
ocCNNIConnDB = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 8))
ocCNNIFilterAssignID = MibScalar((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocCNNIFilterAssignID.setStatus('optional')
ocCNNIFilterTable = MibTable((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 8, 2), )
if mibBuilder.loadTexts: ocCNNIFilterTable.setStatus('optional')
ocCNNIFilterTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 8, 2, 1), ).setIndexNames((0, "Olicom-crossfireAtmSwitch-MIB", "ocCNNIFilterID"))
if mibBuilder.loadTexts: ocCNNIFilterTableEntry.setStatus('optional')
ocCNNIFilterID = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocCNNIFilterID.setStatus('optional')
ocCNNIFilterTypePres = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notpresent", 0), ("present", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocCNNIFilterTypePres.setStatus('optional')
ocCNNIFilterTypeData = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("pointtopoint", 0), ("pointtomulitpoint", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocCNNIFilterTypeData.setStatus('optional')
ocCNNIFilterInPortPres = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notpresent", 0), ("present", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocCNNIFilterInPortPres.setStatus('optional')
ocCNNIFilterInPortData = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 8, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocCNNIFilterInPortData.setStatus('optional')
ocCNNIFilterOutPortPres = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notpresent", 0), ("present", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocCNNIFilterOutPortPres.setStatus('optional')
ocCNNIFilterOutPortData = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 8, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocCNNIFilterOutPortData.setStatus('optional')
ocCNNIFilterCgPtyPres = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 8, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notpresent", 0), ("present", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocCNNIFilterCgPtyPres.setStatus('optional')
ocCNNIFilterCgPtyData = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 8, 2, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocCNNIFilterCgPtyData.setStatus('optional')
ocCNNIFilterCdPtyPres = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 8, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notpresent", 0), ("present", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocCNNIFilterCdPtyPres.setStatus('optional')
ocCNNIFilterCdPtyData = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 8, 2, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocCNNIFilterCdPtyData.setStatus('optional')
ocCNNIFilterStatePres = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 8, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notpresent", 0), ("present", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocCNNIFilterStatePres.setStatus('optional')
ocCNNIFilterStateData = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 8, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("created", 0), ("oneway", 1), ("connected", 2), ("brokenroot", 3), ("brokenleaf", 4), ("reroutewaiting", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocCNNIFilterStateData.setStatus('optional')
ocCNNISessTable = MibTable((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 8, 3), )
if mibBuilder.loadTexts: ocCNNISessTable.setStatus('optional')
ocCNNISessTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 8, 3, 1), ).setIndexNames((0, "Olicom-crossfireAtmSwitch-MIB", "ocCNNIFilterID"), (0, "Olicom-crossfireAtmSwitch-MIB", "ocCNNISessID"))
if mibBuilder.loadTexts: ocCNNISessTableEntry.setStatus('optional')
ocCNNISessID = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocCNNISessID.setStatus('optional')
ocCNNISessDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("pointtopoint", 0), ("pointtomulitpoint", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocCNNISessDataType.setStatus('optional')
ocCNNISessDataInPort = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 8, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocCNNISessDataInPort.setStatus('optional')
ocCNNISessDataOutPort = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 8, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocCNNISessDataOutPort.setStatus('optional')
ocCNNISessDataCgPty = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 8, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocCNNISessDataCgPty.setStatus('optional')
ocCNNISessDataCdPty = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 8, 3, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocCNNISessDataCdPty.setStatus('optional')
ocCNNISessDataState = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 3, 8, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("created", 0), ("oneway", 1), ("connected", 2), ("brokenroot", 3), ("brokenleaf", 4), ("reroutewaiting", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocCNNISessDataState.setStatus('optional')
ocDsx3MIBObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 4, 1))
ocDsx3ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 4, 1, 1), )
if mibBuilder.loadTexts: ocDsx3ConfigTable.setStatus('mandatory')
ocDsx3ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 4, 1, 1, 1), ).setIndexNames((0, "Olicom-crossfireAtmSwitch-MIB", "dsx3LineIndex"))
if mibBuilder.loadTexts: ocDsx3ConfigEntry.setStatus('mandatory')
ocDsx3Xor55 = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocDsx3Xor55.setStatus('mandatory')
ocDsx3Scrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocDsx3Scrambling.setStatus('mandatory')
ocDsx3Delineation = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hec", 1), ("plcp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocDsx3Delineation.setStatus('mandatory')
ocDsx3HcsPassThru = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocDsx3HcsPassThru.setStatus('mandatory')
ocDsx3Ext8kRefClk = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 4, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled-master", 1), ("disabled", 2), ("slave", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocDsx3Ext8kRefClk.setStatus('mandatory')
ocDsx3ShortCable = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 4, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocDsx3ShortCable.setStatus('mandatory')
ocDsx3CntHcsCorrectedErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 4, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocDsx3CntHcsCorrectedErrs.setStatus('mandatory')
ocDsx3SuniPdhTable = MibTable((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 4, 1, 2), )
if mibBuilder.loadTexts: ocDsx3SuniPdhTable.setStatus('mandatory')
ocDsx3SuniPdhEntry = MibTableRow((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 4, 1, 2, 1), ).setIndexNames((0, "Olicom-crossfireAtmSwitch-MIB", "dsx3LineIndex"))
if mibBuilder.loadTexts: ocDsx3SuniPdhEntry.setStatus('mandatory')
ocDsx3SuniPmonLcv = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 4, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocDsx3SuniPmonLcv.setStatus('mandatory')
ocDsx3SuniPmonFerr = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 4, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocDsx3SuniPmonFerr.setStatus('mandatory')
ocDsx3SuniPmonExzs = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 4, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocDsx3SuniPmonExzs.setStatus('mandatory')
ocDsx3SuniPmonPeec = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 4, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocDsx3SuniPmonPeec.setStatus('mandatory')
ocDsx3SuniPmonPpec = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 4, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocDsx3SuniPmonPpec.setStatus('mandatory')
ocDsx3SuniPmonFebeErr = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 4, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocDsx3SuniPmonFebeErr.setStatus('mandatory')
ocDsx3SuniB1Bip8Err = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 4, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocDsx3SuniB1Bip8Err.setStatus('mandatory')
ocDsx3SuniCppmFrameErr = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 4, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocDsx3SuniCppmFrameErr.setStatus('mandatory')
ocDsx3SuniCppmFebeErr = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 4, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocDsx3SuniCppmFebeErr.setStatus('mandatory')
ocDsx3SuniCppmHcsErr = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 4, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocDsx3SuniCppmHcsErr.setStatus('mandatory')
ocDsx3SuniCppmRcvCells = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 4, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocDsx3SuniCppmRcvCells.setStatus('mandatory')
ocDsx3SuniCppmXmtCells = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 4, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocDsx3SuniCppmXmtCells.setStatus('mandatory')
ocDsx3SuniCppmIdleCells = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 4, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocDsx3SuniCppmIdleCells.setStatus('mandatory')
ocDsx3SuniCppmMegaRcvCells = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 4, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocDsx3SuniCppmMegaRcvCells.setStatus('mandatory')
ocDsx3SuniCppmMegaXmtCells = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 4, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocDsx3SuniCppmMegaXmtCells.setStatus('mandatory')
ocDsx3SuniCppmMegaIdleCells = MibTableColumn((1, 3, 6, 1, 4, 1, 285, 2, 6, 7, 4, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocDsx3SuniCppmMegaIdleCells.setStatus('mandatory')
mibBuilder.exportSymbols("Olicom-crossfireAtmSwitch-MIB", statusFatalStatFree=statusFatalStatFree, statsQueueCongestionEntry=statsQueueCongestionEntry, ocDsx3ConfigTable=ocDsx3ConfigTable, configTmControlErTuningGamma=configTmControlErTuningGamma, pvcSetupVcCrossConnectIndex=pvcSetupVcCrossConnectIndex, infoProcessorModuleHwOption=infoProcessorModuleHwOption, statusEPortAdjInfoSystemIdentifier=statusEPortAdjInfoSystemIdentifier, statusEPortAutoconfigMaxVciBits=statusEPortAutoconfigMaxVciBits, configTmControlErTuningLambda=configTmControlErTuningLambda, configCommonSscopMaxRcvWinSize=configCommonSscopMaxRcvWinSize, configIpArpServerAtmAddressActual=configIpArpServerAtmAddressActual, trafficDescriptorCreationMode=trafficDescriptorCreationMode, configIPortScratchPadQueueCdv=configIPortScratchPadQueueCdv, configCommonEPortCbrBandwidthAllocation=configCommonEPortCbrBandwidthAllocation, statusEPortPhyPortIndex=statusEPortPhyPortIndex, configEPortScratchPadTransientPhyOffTime=configEPortScratchPadTransientPhyOffTime, ocCNNITrapClientTableEntry=ocCNNITrapClientTableEntry, ocDsx3SuniPdhTable=ocDsx3SuniPdhTable, configEPortIfIndex=configEPortIfIndex, infoFeatureModuleHwSerialNumber=infoFeatureModuleHwSerialNumber, statusProcessorModuleFaultLed=statusProcessorModuleFaultLed, configEPortScratchPadEPortIndex=configEPortScratchPadEPortIndex, configCommonSscopMaxLinks=configCommonSscopMaxLinks, statsEPortHecErrorRateConditionState=statsEPortHecErrorRateConditionState, svcSetupTableNextIndex=svcSetupTableNextIndex, controlDeleteCode=controlDeleteCode, atmLoopbackVcSegment=atmLoopbackVcSegment, configCommonSignallingMaxConManStevs=configCommonSignallingMaxConManStevs, svpSetupRowStatus=svpSetupRowStatus, pvpSetupTableNextIndex=pvpSetupTableNextIndex, ocCNNIRoutingTableChanged=ocCNNIRoutingTableChanged, pvpSetupHighEPortIndex=pvpSetupHighEPortIndex, configEPortLinkDelay=configEPortLinkDelay, ocCNNIAddrStatsToBrokenLeaf=ocCNNIAddrStatsToBrokenLeaf, ocCNNIAddrStatsFromOneWay=ocCNNIAddrStatsFromOneWay, statusFatalSource=statusFatalSource, statusEPortAdjInfoIfName=statusEPortAdjInfoIfName, configEPortUseCommonEPortConfig=configEPortUseCommonEPortConfig, configCommonEPortMaxVpiBits=configCommonEPortMaxVpiBits, configEPortIlmiConfigMaxSvpcVpi=configEPortIlmiConfigMaxSvpcVpi, configCommonEPortTransientPhyWindowTime=configCommonEPortTransientPhyWindowTime, pvcSetupLowVpi=pvcSetupLowVpi, atmIpArpEntry=atmIpArpEntry, statusPsuOperStatus=statusPsuOperStatus, configPriorityBufferSize=configPriorityBufferSize, configCommonSignallingPtmpMaxP2mpSvcs=configCommonSignallingPtmpMaxP2mpSvcs, statusVpcVcc=statusVpcVcc, infoProcessorModule=infoProcessorModule, statusXModuleIPort1SlotIndex=statusXModuleIPort1SlotIndex, ocCNNIFilterTableEntry=ocCNNIFilterTableEntry, AtmAddress=AtmAddress, ocCNNIGlobalStatsRerouteWaiting=ocCNNIGlobalStatsRerouteWaiting, configCommonSignallingT309=configCommonSignallingT309, restart=restart, ocCNNIMode=ocCNNIMode, trafficDescriptorTableNextIndex=trafficDescriptorTableNextIndex, infoProcessorModuleHwOptionNo=infoProcessorModuleHwOptionNo, configCommonSignallingMaxSigProtStevs=configCommonSignallingMaxSigProtStevs, statusFatalStatOverflow=statusFatalStatOverflow, trafficDescriptorCdv=trafficDescriptorCdv, ocCNNIAddrStatsToConnected=ocCNNIAddrStatsToConnected, svpSetupTxTrafficDescriptorIndex=svpSetupTxTrafficDescriptorIndex, configIPortEntry=configIPortEntry, ocCNNIAliasTableEntry=ocCNNIAliasTableEntry, configCommonEPortIlmiVpi=configCommonEPortIlmiVpi, statusFatalStatUsed=statusFatalStatUsed, trafficDescriptorTaggingFlag=trafficDescriptorTaggingFlag, statusXModuleIPort1RIndex=statusXModuleIPort1RIndex, ocDsx3SuniPmonExzs=ocDsx3SuniPmonExzs, configCommonEPortMaxVccs=configCommonEPortMaxVccs, ocDsx3MIBObjs=ocDsx3MIBObjs, ocCNNIGlobalStatsBrokenLeaf=ocCNNIGlobalStatsBrokenLeaf, ocCNNIPortReroute=ocCNNIPortReroute, ocCNNIPort=ocCNNIPort, ocCNNIPortConfig=ocCNNIPortConfig, configCommonEPortUniType=configCommonEPortUniType, fhTrapDashboardControlFrequencyMode=fhTrapDashboardControlFrequencyMode, statusHwChassisCurrentXModules=statusHwChassisCurrentXModules, statusEPortRxSyncLedState=statusEPortRxSyncLedState, configEPortScratchPadIlmiConfigIlmiAdminStatus=configEPortScratchPadIlmiConfigIlmiAdminStatus, configEPortIlmiConfigPnniVpi=configEPortIlmiConfigPnniVpi, configEPortScratchPadIlmiConfigLecsVpi=configEPortScratchPadIlmiConfigLecsVpi, configEPortIlmiConfigUniVersion=configEPortIlmiConfigUniVersion, fhTrapFrequencyCntrlFrequency=fhTrapFrequencyCntrlFrequency, statsQueueCongestionCellsInQueueLatch=statsQueueCongestionCellsInQueueLatch, vpcExtensionTable=vpcExtensionTable, ocCNNISessDataCgPty=ocCNNISessDataCgPty, configCommonSignallingT306=configCommonSignallingT306, configIPortQueueRIndex=configIPortQueueRIndex, configPriorityBuffer=configPriorityBuffer, svpSetupIndex=svpSetupIndex, termRestartInfo=termRestartInfo, pvpSetupTable=pvpSetupTable, infoIfIndexLan=infoIfIndexLan, qosClassCtd=qosClassCtd, fhTrapDashboardControlNoSamples=fhTrapDashboardControlNoSamples, configCommonEPortPnniVci=configCommonEPortPnniVci, infoXModuleHwOptionSlotIndex=infoXModuleHwOptionSlotIndex, configEPortScratchPadIlmiConfigIlmiVersion=configEPortScratchPadIlmiConfigIlmiVersion, statusEPortXModuleIndex=statusEPortXModuleIndex, vpcExtensionEntry=vpcExtensionEntry, pvpSetupHighVpi=pvpSetupHighVpi, ocDsx3SuniPdhEntry=ocDsx3SuniPdhEntry, statsCpuPortDiscardCellLatch=statsCpuPortDiscardCellLatch, configLaneControlLecsAdminStatus=configLaneControlLecsAdminStatus, statsEPortRxHecErrorCellRate=statsEPortRxHecErrorCellRate, configEPortIlmiConfigUniType=configEPortIlmiConfigUniType, svpSetupTable=svpSetupTable, statusProcessorModule=statusProcessorModule, infoFeatureModuleHwProductId=infoFeatureModuleHwProductId, statusHwChassisCurrentEPorts=statusHwChassisCurrentEPorts, configEPortTable=configEPortTable, statisticsIPort=statisticsIPort, crossfireAtmTrapControl=crossfireAtmTrapControl, statsEportTable=statsEportTable, configCommonIPortLogClr=configCommonIPortLogClr, configCommonSscopTimerKeepAlive=configCommonSscopTimerKeepAlive, configCommonEPortAbrBandwidthAllocation=configCommonEPortAbrBandwidthAllocation, infoIfIndexSlip=infoIfIndexSlip, configCommonEPortIlmiVersion=configCommonEPortIlmiVersion, configEPortScratchPadIlmiConfigMaxVpcs=configEPortScratchPadIlmiConfigMaxVpcs, configStaticEPortIlmiPollFrequency=configStaticEPortIlmiPollFrequency, configIpArpServerAdminStatus=configIpArpServerAdminStatus, infoProcessorModuleHwOptionTable=infoProcessorModuleHwOptionTable, configIpArpServerOperStatus=configIpArpServerOperStatus, statsQueueCongestionIPortRIndex=statsQueueCongestionIPortRIndex, infoProcessorModuleHwEcoLevel=infoProcessorModuleHwEcoLevel, configSarEmptyCellHandling=configSarEmptyCellHandling, configIpArpServerRowStatus=configIpArpServerRowStatus, atmLoopbackTestTypes=atmLoopbackTestTypes, ocCNNIAddrStatsToTotal=ocCNNIAddrStatsToTotal, statusXModuleSlotIndex=statusXModuleSlotIndex, configSerialObmSlip=configSerialObmSlip, vccExtensionOrigAtmAddr=vccExtensionOrigAtmAddr, configSwitchAddrPrefixType=configSwitchAddrPrefixType, statusEPortAdjInfoMaxVpcs=statusEPortAdjInfoMaxVpcs, configCpuQ=configCpuQ, vccExtensionVcCrossConnectIndex=vccExtensionVcCrossConnectIndex, atmLoopbackVpSegment=atmLoopbackVpSegment, configIPortScratchPadQueueLogClr=configIPortScratchPadQueueLogClr, termRestartInfoServerMacAddress=termRestartInfoServerMacAddress, ocCNNIMonSimple=ocCNNIMonSimple, configEPortScratchPadLinkDelay=configEPortScratchPadLinkDelay, configIPortQueueCdv=configIPortQueueCdv, configIPort=configIPort, trafficDescriptorAbrTbe=trafficDescriptorAbrTbe, statusHwChassisCellBufferSize=statusHwChassisCellBufferSize, pvpSetupEntry=pvpSetupEntry, crossfireAtmTest=crossfireAtmTest, ocDsx3=ocDsx3, svcSetupApplication=svcSetupApplication, configIpArpServerTable=configIpArpServerTable, pvcSetupLowEPortIndex=pvcSetupLowEPortIndex, statusEPortEntry=statusEPortEntry, ifTestResult=ifTestResult, configEPortBandwidthLimit=configEPortBandwidthLimit, configIPortScratchPadIpAddress=configIPortScratchPadIpAddress, configCommonSignallingT331=configCommonSignallingT331, configCommonSignallingMaxSaps=configCommonSignallingMaxSaps, pvcSetupIndex=pvcSetupIndex, infoProcessorModuleHwProductId=infoProcessorModuleHwProductId, ocCNNIAddress=ocCNNIAddress, crossfireAtmConfiguration=crossfireAtmConfiguration, infoXModuleHwOptionTable=infoXModuleHwOptionTable, statusFatalTimeString=statusFatalTimeString, configTmControlErTuningBeta=configTmControlErTuningBeta, ocDsx3SuniCppmMegaXmtCells=ocDsx3SuniCppmMegaXmtCells, configCommonEPortIlmiAdminStatus=configCommonEPortIlmiAdminStatus, configCommonSignalling=configCommonSignalling, configLaneControlAdminStatus=configLaneControlAdminStatus, fhTrapDashboardControlTable=fhTrapDashboardControlTable, configCommonSignallingMaxSvcs=configCommonSignallingMaxSvcs, configPriorityBufferTable=configPriorityBufferTable, configCommonSscopMaxPd=configCommonSscopMaxPd, ocCNNITrapClientTable=ocCNNITrapClientTable, pvpSetupApplication=pvpSetupApplication, configIPortRIndex=configIPortRIndex, ocCNNIPortEntry=ocCNNIPortEntry, ocCNNIFilterInPortPres=ocCNNIFilterInPortPres, infoXModuleHwProductId=infoXModuleHwProductId, configIPortQueueLogClr=configIPortQueueLogClr, statsCpuPortDiscardCellLatchTime=statsCpuPortDiscardCellLatchTime, configEPortIlmiConfigPnniVci=configEPortIlmiConfigPnniVci, statusEPortOperStatus=statusEPortOperStatus, featureModuleStatusChange=featureModuleStatusChange, ifMIBObjects=ifMIBObjects, pvcSetupEntry=pvcSetupEntry, ocmibs=ocmibs, configPriorityBufferIndex=configPriorityBufferIndex, configCommonIPortEfciTaggingAdminStatus=configCommonIPortEfciTaggingAdminStatus, configNextHopRoutingAtmAddress=configNextHopRoutingAtmAddress, termRestartInfoRestartReason=termRestartInfoRestartReason, configCommonSscopTimerPoll=configCommonSscopTimerPoll, ocDsx3SuniCppmFebeErr=ocDsx3SuniCppmFebeErr, infoProcessorModuleHwSerialNumber=infoProcessorModuleHwSerialNumber, configCommonSignallingT301=configCommonSignallingT301, statsEPortRxHecErrorCellLatchTime=statsEPortRxHecErrorCellLatchTime, ocDsx3SuniPmonPeec=ocDsx3SuniPmonPeec, configIpArpServerIpSubnetMask=configIpArpServerIpSubnetMask, pvpSetupL2HTrafficDescriptorIndex=pvpSetupL2HTrafficDescriptorIndex, configIpArpServerAtmAddressSpec=configIpArpServerAtmAddressSpec, configTmControlErTuningPhi=configTmControlErTuningPhi, atmIpArpServerIndex=atmIpArpServerIndex, configTrafficDescr=configTrafficDescr, infoFeatureModuleHwEcoLevel=infoFeatureModuleHwEcoLevel, configCommonEPortTransientPhyDisconnectCount=configCommonEPortTransientPhyDisconnectCount, statusHwChassisSwitchingSystemSize=statusHwChassisSwitchingSystemSize, statusEPortAdjInfoMaxVciBits=statusEPortAdjInfoMaxVciBits, configCommonEPort=configCommonEPort, configIpArpServerIndex=configIpArpServerIndex, pvcSetupHighVci=pvcSetupHighVci, configCommonSignallingMaxPvcs=configCommonSignallingMaxPvcs, ocCNNIFilterAssignID=ocCNNIFilterAssignID, configFeatureModuleAdminStatus=configFeatureModuleAdminStatus, statsQueueCongestionQueueIndex=statsQueueCongestionQueueIndex, svcSetupRowStatus=svcSetupRowStatus, statusCurrentTemperatureLatchTime=statusCurrentTemperatureLatchTime, configEPortEntry=configEPortEntry, statsGlobalCongestionDiscardCellLatchTime=statsGlobalCongestionDiscardCellLatchTime, configCommonSscopTimerNoResponse=configCommonSscopTimerNoResponse, ocDsx3SuniCppmFrameErr=ocDsx3SuniCppmFrameErr, configEPortIlmiConfigIlmiAdminStatus=configEPortIlmiConfigIlmiAdminStatus, configSvpSvc=configSvpSvc, globalInvalidCellRateTrap=globalInvalidCellRateTrap, statusEPortAdjInfoNniSigVersion=statusEPortAdjInfoNniSigVersion, ocCNNIFilterOutPortData=ocCNNIFilterOutPortData, statusEPortAdjInfoDeviceType=statusEPortAdjInfoDeviceType, ocCNNIPortProtocol=ocCNNIPortProtocol, configEPort=configEPort, ocDsx3SuniCppmIdleCells=ocDsx3SuniCppmIdleCells, configSarMuxSarVpi=configSarMuxSarVpi, statusXModuleTable=statusXModuleTable, trafficDescriptorCtd=trafficDescriptorCtd, configOam=configOam, configEPortScratchPadIpAddress=configEPortScratchPadIpAddress, configEPortVbrRtBandwidthAllocation=configEPortVbrRtBandwidthAllocation, statusFeatureModuleOperStatus=statusFeatureModuleOperStatus, ocCNNIConfig=ocCNNIConfig, pvcSetupHighEPortIndex=pvcSetupHighEPortIndex, svpSetupTermAtmAddr=svpSetupTermAtmAddr, statusEPortAdjInfoMinSvccVci=statusEPortAdjInfoMinSvccVci, ocDsx3SuniPmonPpec=ocDsx3SuniPmonPpec, configEPortIlmiConfigLecsVci=configEPortIlmiConfigLecsVci, crossfireAtmInfo=crossfireAtmInfo, configIisp=configIisp, statusProcessorModuleStatusLed=statusProcessorModuleStatusLed, trafficDescriptorTrafficType=trafficDescriptorTrafficType, configCommonIPortClpDiscardAdminStatus=configCommonIPortClpDiscardAdminStatus, statusEPortAdjInfoMediaType=statusEPortAdjInfoMediaType, configXModuleEntry=configXModuleEntry, qosClassCdv=qosClassCdv, configCommonSignallingT316=configCommonSignallingT316, qosClassEntry=qosClassEntry, vpcExtensionCapabilities=vpcExtensionCapabilities)
mibBuilder.exportSymbols("Olicom-crossfireAtmSwitch-MIB", fhTrapDashboardControlThresholdHigh=fhTrapDashboardControlThresholdHigh, statusEPortAutoconfigMaxVpiBits=statusEPortAutoconfigMaxVpiBits, configEPortScratchPadLoopback=configEPortScratchPadLoopback, vccExtensionTable=vccExtensionTable, configCommonSignallingT317=configCommonSignallingT317, statsIPortTxParityErrorCellCounter=statsIPortTxParityErrorCellCounter, temperatureWarningTrap=temperatureWarningTrap, configIPortUseCommonIPortConfig=configIPortUseCommonIPortConfig, pvpSetupRowStatus=pvpSetupRowStatus, vpcExtensionOrigAtmAddr=vpcExtensionOrigAtmAddr, statsGlobalCongestionDiscardCellRate=statsGlobalCongestionDiscardCellRate, infoIfIndex=infoIfIndex, ocmibsCrossfireAtmMIB=ocmibsCrossfireAtmMIB, configCommonSscopMaxSduSize=configCommonSscopMaxSduSize, statisticsCpuPort=statisticsCpuPort, ocCNNIAddrStats=ocCNNIAddrStats, trafficDescriptorPcr0=trafficDescriptorPcr0, pvcSetupTableNextIndex=pvcSetupTableNextIndex, ocCNNIProtocolVersion=ocCNNIProtocolVersion, statusXModuleNoOfSlotsUsed=statusXModuleNoOfSlotsUsed, infoXModuleHwOptionEntry=infoXModuleHwOptionEntry, statusEPortLoopbackState=statusEPortLoopbackState, pvpSetupH2LTrafficDescriptorIndex=pvpSetupH2LTrafficDescriptorIndex, statusFatalDumpSize=statusFatalDumpSize, crossfireAtmStatistics=crossfireAtmStatistics, configCommonSignallingT308=configCommonSignallingT308, configTmServiceClassMapServiceClass=configTmServiceClassMapServiceClass, configIPortScratchPadQueueEntry=configIPortScratchPadQueueEntry, qosClassLogClr=qosClassLogClr, statsCpuPortCongestionState=statsCpuPortCongestionState, statsIPortSlotIndex=statsIPortSlotIndex, termRestartInfoBootpReason=termRestartInfoBootpReason, configIpArp=configIpArp, infoFeatureModuleHwOptionNo=infoFeatureModuleHwOptionNo, statusFatalIndex=statusFatalIndex, configCommonSignallingPtmpMaxLeafs=configCommonSignallingPtmpMaxLeafs, vccExtensionEarlyPacketDiscard=vccExtensionEarlyPacketDiscard, configEPortScratchPadHwConfigTxClocking=configEPortScratchPadHwConfigTxClocking, ePortHecErrorRateTrap=ePortHecErrorRateTrap, svpSetupEntry=svpSetupEntry, termRestartInfoFutureTestMode=termRestartInfoFutureTestMode, statsCpuPortDiscardCellCounter=statsCpuPortDiscardCellCounter, trafficDescriptorLogClr=trafficDescriptorLogClr, infoIfIndexElan=infoIfIndexElan, trafficDescriptorMbs0=trafficDescriptorMbs0, statusEPortAutoconfigMaxVpcs=statusEPortAutoconfigMaxVpcs, fhTrapFrequencyCntrlMaxTraps=fhTrapFrequencyCntrlMaxTraps, configEPortIlmiConfigDeviceType=configEPortIlmiConfigDeviceType, statusCurrentTemperatureLatch=statusCurrentTemperatureLatch, qosClassTable=qosClassTable, configCommonSignallingT302=configCommonSignallingT302, configEPortIlmiConfigIlmiVersion=configEPortIlmiConfigIlmiVersion, ifTestType=ifTestType, statusFatalOriginalDumpSize=statusFatalOriginalDumpSize, configCommonSignallingPtmpMaxLeafOperations=configCommonSignallingPtmpMaxLeafOperations, ocDsx3SuniPmonFebeErr=ocDsx3SuniPmonFebeErr, configIPortScratchPadSlotIndex=configIPortScratchPadSlotIndex, statsEPortIfIndex=statsEPortIfIndex, ocCNNIFilterOutPortPres=ocCNNIFilterOutPortPres, configCommonIPortEfciTaggingThreshold=configCommonIPortEfciTaggingThreshold, controlDeleteConfig=controlDeleteConfig, configIPortScratchPadActionStatus=configIPortScratchPadActionStatus, statusFatalDump=statusFatalDump, configSar=configSar, ocCNNIFilterCgPtyPres=ocCNNIFilterCgPtyPres, svcSetupTable=svcSetupTable, configIPortQueueClpDiscardAdminStatus=configIPortQueueClpDiscardAdminStatus, configCommonSignallingT399=configCommonSignallingT399, termRestartInfoTerminationReason=termRestartInfoTerminationReason, configCommonEPortAddrRegistrationAdminStatus=configCommonEPortAddrRegistrationAdminStatus, svcSetupIndex=svcSetupIndex, svpSetupTableNextIndex=svpSetupTableNextIndex, pvcSetupH2LTrafficDescriptorIndex=pvcSetupH2LTrafficDescriptorIndex, configCommonEPortTransientPhyOffTime=configCommonEPortTransientPhyOffTime, configTmServiceClassMapSchedulingQueue=configTmServiceClassMapSchedulingQueue, configEPortScratchPadIlmiConfigNniSigVersion=configEPortScratchPadIlmiConfigNniSigVersion, pvcSetupHighVpi=pvcSetupHighVpi, statsInvalidCellRate=statsInvalidCellRate, configSwitchAddrPrefixSize=configSwitchAddrPrefixSize, fanFailureTrap=fanFailureTrap, ocCNNIFilterTypePres=ocCNNIFilterTypePres, ifTestCode=ifTestCode, configMonitorEPortIPortSlotIndex=configMonitorEPortIPortSlotIndex, configXModuleSlotIndex=configXModuleSlotIndex, ocDsx3SuniCppmRcvCells=ocDsx3SuniCppmRcvCells, statusEPortIlmiState=statusEPortIlmiState, infoXModuleHwVersion=infoXModuleHwVersion, configIPortScratchPadUseCommonIPortConfig=configIPortScratchPadUseCommonIPortConfig, pvcSetupApplication=pvcSetupApplication, trafficDescriptorScr01=trafficDescriptorScr01, configNextHopRoutingRowStatus=configNextHopRoutingRowStatus, configClocking=configClocking, ocDsx3Xor55=ocDsx3Xor55, termRestartInfoBbsramTerminationTimestamp=termRestartInfoBbsramTerminationTimestamp, ePortAutoDisabled=ePortAutoDisabled, infoXModuleEntry=infoXModuleEntry, statisticsEPort=statisticsEPort, fhTrapDashboardControlTrapTypeIndex=fhTrapDashboardControlTrapTypeIndex, configCommonEPortDeviceType=configCommonEPortDeviceType, configTmControlErTuningTau=configTmControlErTuningTau, termRestartInfoSwSection2StatusWord=termRestartInfoSwSection2StatusWord, configCommonEPortUniVersion=configCommonEPortUniVersion, statsEPortRxHecErrorCellCounter=statsEPortRxHecErrorCellCounter, ocCNNIAddrStatsFromConnected=ocCNNIAddrStatsFromConnected, configCommonSscopMaxSaps=configCommonSscopMaxSaps, statsQueueCongestionCellsInQueueLatchTime=statsQueueCongestionCellsInQueueLatchTime, configEPortCbrBandwidthAllocation=configEPortCbrBandwidthAllocation, statusFatalTimestamp=statusFatalTimestamp, ocCNNIAddrStatsFromBrokenRoot=ocCNNIAddrStatsFromBrokenRoot, ocCNNIRoutingTableEntry=ocCNNIRoutingTableEntry, statusEPortAdjInfoMaxVpiBits=statusEPortAdjInfoMaxVpiBits, configIPortQueueEntry=configIPortQueueEntry, configEPortScratchPadIlmiConfigAddrRegistrationAdminStatus=configEPortScratchPadIlmiConfigAddrRegistrationAdminStatus, configCommonEPortLecsVci=configCommonEPortLecsVci, pvcSetupTable=pvcSetupTable, configIlmiServiceRegistryRowStatus=configIlmiServiceRegistryRowStatus, ocCNNIAddrStatsToOneWay=ocCNNIAddrStatsToOneWay, statusEPortAdjInfoIlmiVersion=statusEPortAdjInfoIlmiVersion, configEPortScratchPadIlmiConfigPnniVci=configEPortScratchPadIlmiConfigPnniVci, statsQueueCongestionConditionState=statsQueueCongestionConditionState, statusPsuStatusEntry=statusPsuStatusEntry, configSwitchAddrAtmAddress=configSwitchAddrAtmAddress, configEPortScratchPadIlmiConfigIlmiVpi=configEPortScratchPadIlmiConfigIlmiVpi, configCommonIPortQueueIndex=configCommonIPortQueueIndex, configTmControlErTuningAlpha=configTmControlErTuningAlpha, configEPortScratchPadTransientPhyDisconnectTimer=configEPortScratchPadTransientPhyDisconnectTimer, svpSetupPreferredVpi=svpSetupPreferredVpi, configSwitchAddrAtmPrefix=configSwitchAddrAtmPrefix, ocDsx3Ext8kRefClk=ocDsx3Ext8kRefClk, ocCNNILineStatus=ocCNNILineStatus, configCommonEPortLecsVpi=configCommonEPortLecsVpi, statusEPortPhyState=statusEPortPhyState, infoFeatureModuleHwOptionEntry=infoFeatureModuleHwOptionEntry, atmIpArpTable=atmIpArpTable, termRestartInfoReloadTime=termRestartInfoReloadTime, configTmServiceClassMapEntry=configTmServiceClassMapEntry, configClipArpServer=configClipArpServer, configIPortQueueQueueIndex=configIPortQueueQueueIndex, ifTestId=ifTestId, infoFeatureModuleHwOption=infoFeatureModuleHwOption, configIPortScratchPadQueueTable=configIPortScratchPadQueueTable, configEPortScratchPadHwConfigSonetSdh=configEPortScratchPadHwConfigSonetSdh, statsQueueCongestionCellsInQueueGauge=statsQueueCongestionCellsInQueueGauge, configCommonSscopTimerIdle=configCommonSscopTimerIdle, configTm=configTm, configEPortScratchPadAbrBandwidthAllocation=configEPortScratchPadAbrBandwidthAllocation, ocCNNI=ocCNNI, configEPortScratchPadUseCommonEPortConfig=configEPortScratchPadUseCommonEPortConfig, ocCNNISessDataOutPort=ocCNNISessDataOutPort, configSerial=configSerial, configCommonEPortLinkDelay=configCommonEPortLinkDelay, infoProcessorModuleHwVersion=infoProcessorModuleHwVersion, configLaneControlLesBusAdminStatus=configLaneControlLesBusAdminStatus, statsQueueCongestionSlotIndex=statsQueueCongestionSlotIndex, configCpuPortCpuQueueSize=configCpuPortCpuQueueSize, configCommonSignallingT310=configCommonSignallingT310, statsGlobalCongestionDiscardCellCounter=statsGlobalCongestionDiscardCellCounter, globalCongestionTrap=globalCongestionTrap, configXModule=configXModule, configNextHopRoutingAddressLength=configNextHopRoutingAddressLength, configEPortTransientPhyDisconnectCount=configEPortTransientPhyDisconnectCount, configEPortIlmiConfigIlmiVpi=configEPortIlmiConfigIlmiVpi, ocCNNIFilterCdPtyData=ocCNNIFilterCdPtyData, ocDsx3HcsPassThru=ocDsx3HcsPassThru, ocCNNISessDataType=ocCNNISessDataType, configIlmiServiceRegistryTable=configIlmiServiceRegistryTable, ocCNNIAddrStatsToRerouteWaiting=ocCNNIAddrStatsToRerouteWaiting, configStaticEPortMaxPhyFailuresPerMinute=configStaticEPortMaxPhyFailuresPerMinute, configEPortScratchPadIlmiConfigMaxVccs=configEPortScratchPadIlmiConfigMaxVccs, configEPortAbrBandwidthAllocation=configEPortAbrBandwidthAllocation, infoXModuleHwOption=infoXModuleHwOption, configCommonEPortSignallingVci=configCommonEPortSignallingVci, statsInvalidCellRateState=statsInvalidCellRateState, statusFeatureModule=statusFeatureModule, ocDsx3ShortCable=ocDsx3ShortCable, infoIfIndexRfc1483Routed=infoIfIndexRfc1483Routed, statsGlobalCongestionState=statsGlobalCongestionState, configEPortScratchPadIlmiConfigMaxVpiBits=configEPortScratchPadIlmiConfigMaxVpiBits, statusEPortAutoconfigDeviceType=statusEPortAutoconfigDeviceType, configCommonEPortVbrRtBandwidthAllocation=configCommonEPortVbrRtBandwidthAllocation, ocCNNIAddrStatsEntry=ocCNNIAddrStatsEntry, statusXModule=statusXModule, configIPortScratchPadQueueClpDiscardThreshold=configIPortScratchPadQueueClpDiscardThreshold, configNextHopRoutingSignallingType=configNextHopRoutingSignallingType, statsIPortEntry=statsIPortEntry, ocDsx3SuniCppmXmtCells=ocDsx3SuniCppmXmtCells, configNetworkClockEPortIndex=configNetworkClockEPortIndex, svcSetupVcCrossConnectIndex=svcSetupVcCrossConnectIndex, configCommonEPortPnniVpi=configCommonEPortPnniVpi, vpcExtensionVpCrossConnectIndex=vpcExtensionVpCrossConnectIndex, svcSetupTxTrafficDescriptorIndex=svcSetupTxTrafficDescriptorIndex, ifTestEntry=ifTestEntry, configEPortScratchPadIlmiConfigSignallingVci=configEPortScratchPadIlmiConfigSignallingVci, configIPortQueueSize=configIPortQueueSize, statusXModuleIPort2SlotIndex=statusXModuleIPort2SlotIndex, configCommonEPortDefaultSigVersion=configCommonEPortDefaultSigVersion, configEPortScratchPadIlmiConfigLecsVci=configEPortScratchPadIlmiConfigLecsVci, configEPortIlmiConfigIlmiVci=configEPortIlmiConfigIlmiVci, cpuPortCongestionTrap=cpuPortCongestionTrap, configEPortLoopback=configEPortLoopback, atmLoopbackVpE2e=atmLoopbackVpE2e, ifTestOwner=ifTestOwner, ocDsx3SuniB1Bip8Err=ocDsx3SuniB1Bip8Err, trafficDescriptorAbrRdf=trafficDescriptorAbrRdf, configIpArpServerTableNextIndex=configIpArpServerTableNextIndex, configIpArpServerEntry=configIpArpServerEntry, configCommonEPortNniSigVersion=configCommonEPortNniSigVersion, statusEPortAdjInfoUniType=statusEPortAdjInfoUniType, ocCNNITrapClientIndex=ocCNNITrapClientIndex, pvpSetupVpCrossConnectIndex=pvpSetupVpCrossConnectIndex, configXModuleTable=configXModuleTable, pvcSetupL2HTrafficDescriptorIndex=pvcSetupL2HTrafficDescriptorIndex, ocCNNIFilterCdPtyPres=ocCNNIFilterCdPtyPres, configStaticEPortMaxTransientPhyFailureTime=configStaticEPortMaxTransientPhyFailureTime, ocCNNISessTableEntry=ocCNNISessTableEntry, configEPortScratchPadVbrNrtBandwidthAllocation=configEPortScratchPadVbrNrtBandwidthAllocation, trafficDescriptorBestEffortFlag=trafficDescriptorBestEffortFlag, configEPortIlmiConfigMaxSvccVpi=configEPortIlmiConfigMaxSvccVpi, infoXModule=infoXModule, configEPortScratchPadIlmiConfigDeviceType=configEPortScratchPadIlmiConfigDeviceType, configEPortScratchPadIlmiConfigMaxVciBits=configEPortScratchPadIlmiConfigMaxVciBits, ocCNNIAddrStatsFromTotal=ocCNNIAddrStatsFromTotal, configEPortScratchPadIlmiConfigMaxSvccVpi=configEPortScratchPadIlmiConfigMaxSvccVpi, ocDsx3ConfigEntry=ocDsx3ConfigEntry, ocDsx3SuniCppmHcsErr=ocDsx3SuniCppmHcsErr, ocDsx3CntHcsCorrectedErrs=ocDsx3CntHcsCorrectedErrs, configEPortIlmiConfigSignallingVpi=configEPortIlmiConfigSignallingVpi, configCommonEPortIlmiVci=configCommonEPortIlmiVci, ocCNNIFilterStatePres=ocCNNIFilterStatePres, statusBasicHw=statusBasicHw, statusPsuStatusTable=statusPsuStatusTable, ocDsx3SuniPmonFerr=ocDsx3SuniPmonFerr, fhTrapDashboardControlSamplingInterval=fhTrapDashboardControlSamplingInterval, ocDsx3SuniCppmMegaRcvCells=ocDsx3SuniCppmMegaRcvCells, ocCNNINeighborTableData=ocCNNINeighborTableData, configTmControlErTuningDelta=configTmControlErTuningDelta, statsIPortTxCellRate=statsIPortTxCellRate, infoXModuleHwEcoLevel=infoXModuleHwEcoLevel, ocCNNIFilterInPortData=ocCNNIFilterInPortData, configEPortIlmiConfigAddrRegistrationAdminStatus=configEPortIlmiConfigAddrRegistrationAdminStatus, atmIpArpType=atmIpArpType, statusEPortSignalLossLedState=statusEPortSignalLossLedState, ocCNNIConfigAlgorithm=ocCNNIConfigAlgorithm, infoFeatureModule=infoFeatureModule, iPortTxParityErrorTrap=iPortTxParityErrorTrap, configPriorityBufferEntry=configPriorityBufferEntry, statsQueueCongestionTable=statsQueueCongestionTable, ocCNNIConnDB=ocCNNIConnDB, ocCNNIPortBorder=ocCNNIPortBorder, configEPortScratchPadIlmiConfigIlmiVci=configEPortScratchPadIlmiConfigIlmiVci, statusCurrentTemperatureConditionState=statusCurrentTemperatureConditionState, ocCNNIPortAutoreroute=ocCNNIPortAutoreroute, ocCNNIGlobalStatsCreated=ocCNNIGlobalStatsCreated, statusXModuleEntry=statusXModuleEntry)
mibBuilder.exportSymbols("Olicom-crossfireAtmSwitch-MIB", ocCNNIAddrStatsFromCreated=ocCNNIAddrStatsFromCreated, configQosClass=configQosClass, statusEPortTable=statusEPortTable, configEPortScratchPadIlmiConfigUniVersion=configEPortScratchPadIlmiConfigUniVersion, ocCNNIMonSEntry=ocCNNIMonSEntry, termRestartInfoFileName=termRestartInfoFileName, ocDsx3SuniPmonLcv=ocDsx3SuniPmonLcv, statusFatalLog=statusFatalLog, ocCNNIConfigMethod=ocCNNIConfigMethod, statusEPortAutoconfigMinSvccVci=statusEPortAutoconfigMinSvccVci, statusEPortAutoconfigMaxSvccVpi=statusEPortAutoconfigMaxSvccVpi, configIlmiServiceRegistryAtmAddress=configIlmiServiceRegistryAtmAddress, statsInvalidCellLatch=statsInvalidCellLatch, ocCNNIAliasTable=ocCNNIAliasTable, statusHwChassisUpsOperState=statusHwChassisUpsOperState, fhTrapDashboardControlThresholdLow=fhTrapDashboardControlThresholdLow, configEPortTransientPhyWindowTime=configEPortTransientPhyWindowTime, configTmControlEarlyPacketDiscardAdminStatus=configTmControlEarlyPacketDiscardAdminStatus, ocCNNIFilterTypeData=ocCNNIFilterTypeData, infoFeatureModuleHwOptionTable=infoFeatureModuleHwOptionTable, ocCNNISessID=ocCNNISessID, configIlmiServiceRegistryServiceId=configIlmiServiceRegistryServiceId, infoXModuleHwSerialNumber=infoXModuleHwSerialNumber, vccExtensionEntry=vccExtensionEntry, atmLoopbackTestGroup=atmLoopbackTestGroup, ocCNNIAlias=ocCNNIAlias, ocCNNINeighborTableEntry=ocCNNINeighborTableEntry, configEPortScratchPadVbrRtBandwidthAllocation=configEPortScratchPadVbrRtBandwidthAllocation, pvpSetupLowVpi=pvpSetupLowVpi, configCommonIPortCdv=configCommonIPortCdv, vccExtensionIndex=vccExtensionIndex, configEPortIlmiConfigNniSigVersion=configEPortIlmiConfigNniSigVersion, statusEPortAutoconfigMaxSvpcVpi=statusEPortAutoconfigMaxSvpcVpi, ocCNNISessTable=ocCNNISessTable, ocCNNISessDataInPort=ocCNNISessDataInPort, trafficDescriptorAbrRif=trafficDescriptorAbrRif, configEPortScratchPadCbrBandwidthAllocation=configEPortScratchPadCbrBandwidthAllocation, trafficDescriptorIndex=trafficDescriptorIndex, configIPortQueueClpDiscardThreshold=configIPortQueueClpDiscardThreshold, svpSetupVpCrossConnectIndex=svpSetupVpCrossConnectIndex, configIPortQueueEfciTaggingThreshold=configIPortQueueEfciTaggingThreshold, configEPortScratchPadIlmiConfigMaxSvpcVpi=configEPortScratchPadIlmiConfigMaxSvpcVpi, ocCNNISessDataState=ocCNNISessDataState, configCommonSignallingT313=configCommonSignallingT313, configIPortQueueEfciTaggingAdminStatus=configIPortQueueEfciTaggingAdminStatus, configEPortDefaultSigVersion=configEPortDefaultSigVersion, configCpuPortResetQueueSize=configCpuPortResetQueueSize, trafficDescriptorTable=trafficDescriptorTable, configTest=configTest, trafficDescriptorFrameDiscardFlag=trafficDescriptorFrameDiscardFlag, statusXModuleIPort3SlotIndex=statusXModuleIPort3SlotIndex, svpSetupRxTrafficDescriptorIndex=svpSetupRxTrafficDescriptorIndex, statusEPortLoopbackErrorCode=statusEPortLoopbackErrorCode, configCommonSignallingT322=configCommonSignallingT322, temperatureCriticalTrapThreshold=temperatureCriticalTrapThreshold, configIlmiServiceRegistryEntry=configIlmiServiceRegistryEntry, ocCNNINeighborTableChanged=ocCNNINeighborTableChanged, configIPortScratchPadQueueSize=configIPortScratchPadQueueSize, configEPortScratchPadIlmiConfigMinSvccVci=configEPortScratchPadIlmiConfigMinSvccVci, configEPortHwConfigTxClocking=configEPortHwConfigTxClocking, configEPortIlmiConfigMaxVccs=configEPortIlmiConfigMaxVccs, ocCNNISessDataCdPty=ocCNNISessDataCdPty, configCommonEPortMinSvccVci=configCommonEPortMinSvccVci, termRestartInfoRestartTime=termRestartInfoRestartTime, trafficDescriptorAbrAdtf=trafficDescriptorAbrAdtf, statusEPortAutoconfigUniVersion=statusEPortAutoconfigUniVersion, configEPortHwConfigSonetSdh=configEPortHwConfigSonetSdh, configEPortScratchPadBandwidthLimit=configEPortScratchPadBandwidthLimit, statusXModuleIPort4RIndex=statusXModuleIPort4RIndex, configMonitorEPortAdminStatus=configMonitorEPortAdminStatus, configCommonEPortSignallingVpi=configCommonEPortSignallingVpi, trafficDescriptorRowStatus=trafficDescriptorRowStatus, atmIpArpIpAddress=atmIpArpIpAddress, termRestartInfoBbsram=termRestartInfoBbsram, statusFatalSerial=statusFatalSerial, temperatureCriticalTrap=temperatureCriticalTrap, infoXModuleSlotIndex=infoXModuleSlotIndex, trafficDescriptorScr0=trafficDescriptorScr0, configEPortIlmiConfigSignallingVci=configEPortIlmiConfigSignallingVci, ocCNNIRoutingTableData=ocCNNIRoutingTableData, trafficDescriptorAbrCdf=trafficDescriptorAbrCdf, configSarMuxFillThreshold=configSarMuxFillThreshold, configIPortScratchPadIPortRIndex=configIPortScratchPadIPortRIndex, configIPortScratchPadScratchPadStatus=configIPortScratchPadScratchPadStatus, infoXModuleTable=infoXModuleTable, configIPortScratchPadQueueEfciTaggingThreshold=configIPortScratchPadQueueEfciTaggingThreshold, configCommonEPortTransientPhyDisconnectTimer=configCommonEPortTransientPhyDisconnectTimer, configEPortScratchPadDefaultSigVersion=configEPortScratchPadDefaultSigVersion, statsIPortRxCellRate=statsIPortRxCellRate, configTmControlVbrTrafficAllocation=configTmControlVbrTrafficAllocation, configEPortIlmiConfigMaxVciBits=configEPortIlmiConfigMaxVciBits, configIPortScratchPadQueueQueueIndex=configIPortScratchPadQueueQueueIndex, statsInvalidCellCounter=statsInvalidCellCounter, vccExtensionCapabilities=vccExtensionCapabilities, statsCpuPortDiscardCellRate=statsCpuPortDiscardCellRate, ocCNNIPortAssign=ocCNNIPortAssign, ifTestStatus=ifTestStatus, svpSetupApplication=svpSetupApplication, queueCongestionTrap=queueCongestionTrap, olicom=olicom, configEPortIlmiConfigMaxVpiBits=configEPortIlmiConfigMaxVpiBits, statusEPortIfIndex=statusEPortIfIndex, infoProcessorModuleHwOptionEntry=infoProcessorModuleHwOptionEntry, statusEPortAutoconfigDerivedInterfaceType=statusEPortAutoconfigDerivedInterfaceType, configIPortQueueTable=configIPortQueueTable, statusFatalLine=statusFatalLine, termRestartInfoBootpExecuted=termRestartInfoBootpExecuted, configIPortTable=configIPortTable, statusEPortType=statusEPortType, statusEPortAdjInfoMaxSvccVpi=statusEPortAdjInfoMaxSvccVpi, configMonitoring=configMonitoring, crossfirexlx=crossfirexlx, statusFatalStatMaxDumpLength=statusFatalStatMaxDumpLength, statusXModuleIPort2RIndex=statusXModuleIPort2RIndex, configEPortTransientPhyDisconnectTimer=configEPortTransientPhyDisconnectTimer, ocDsx3Scrambling=ocDsx3Scrambling, configEPortScratchPadTransientPhyDisconnectCount=configEPortScratchPadTransientPhyDisconnectCount, configMonitorEPortIPortRIndex=configMonitorEPortIPortRIndex, statsIPortTable=statsIPortTable, infoFeatureModuleHwVersion=infoFeatureModuleHwVersion, configServiceReg=configServiceReg, configIPortSlotIndex=configIPortSlotIndex, statusEPort=statusEPort, configEPortScratchPadScratchPadStatus=configEPortScratchPadScratchPadStatus, statusPsuIndex=statusPsuIndex, qosClassClass=qosClassClass, configEPortScratchPadTransientPhyWindowTime=configEPortScratchPadTransientPhyWindowTime, trafficDescriptorEntry=trafficDescriptorEntry, ocCNNIAddrStatsFromRerouteWaiting=ocCNNIAddrStatsFromRerouteWaiting, termRestartInfoHwReconfigState=termRestartInfoHwReconfigState, configIPortScratchPadQueueClpDiscardAdminStatus=configIPortScratchPadQueueClpDiscardAdminStatus, statusFatalEntry=statusFatalEntry, configCommonEPortMaxVciBits=configCommonEPortMaxVciBits, statusXModuleIPort4SlotIndex=statusXModuleIPort4SlotIndex, pvcSetupLowVci=pvcSetupLowVci, ocCNNIFilterStateData=ocCNNIFilterStateData, configCommonEPortMaxVpcs=configCommonEPortMaxVpcs, ocCNNIFilterID=ocCNNIFilterID, configCommonSignallingPtmpMaxLeafsDropByClear=configCommonSignallingPtmpMaxLeafsDropByClear, ocCNNITrapClientAddress=ocCNNITrapClientAddress, fhTrapDashboardControlEntry=fhTrapDashboardControlEntry, ifTestTable=ifTestTable, infoIfIndexRfc1483Bridged=infoIfIndexRfc1483Bridged, configCommonSscopMaxCc=configCommonSscopMaxCc, configEPortScratchPadIlmiConfigUniType=configEPortScratchPadIlmiConfigUniType, statusFatalTable=statusFatalTable, configIPortQueueSlotIndex=configIPortQueueSlotIndex, configXModuleAdminStatus=configXModuleAdminStatus, configCommonSignallingT397=configCommonSignallingT397, configEPortVbrNrtBandwidthAllocation=configEPortVbrNrtBandwidthAllocation, ocCNNIAddrStatsToBrokenRoot=ocCNNIAddrStatsToBrokenRoot, configTmServiceClassMapTable=configTmServiceClassMapTable, statusFanOperStatus=statusFanOperStatus, statusEPortAdjInfoMaxSvpcVpi=statusEPortAdjInfoMaxSvpcVpi, ocCNNIGlobalStatsConnected=ocCNNIGlobalStatsConnected, configIlmiServiceRegistryAddressIndex=configIlmiServiceRegistryAddressIndex, configLane=configLane, configCommonSignallingT304=configCommonSignallingT304, statusEPortAdjInfoMaxVccs=statusEPortAdjInfoMaxVccs, configTmControlErTuningPsi=configTmControlErTuningPsi, configEPortTransientPhyOffTime=configEPortTransientPhyOffTime, configMonitorEPortDirection=configMonitorEPortDirection, configTmControlMode=configTmControlMode, configCommonSscopMaxStat=configCommonSscopMaxStat, atmLoopbackVcE2e=atmLoopbackVcE2e, statsIPortRIndex=statsIPortRIndex, statisticsGlobal=statisticsGlobal, configNextHopRoutingEntry=configNextHopRoutingEntry, configEPortScratchPadActionStatus=configEPortScratchPadActionStatus, statusEPortAdjInfoUniVersion=statusEPortAdjInfoUniVersion, ocCNNIFilterTable=ocCNNIFilterTable, pvpSetupLowEPortIndex=pvpSetupLowEPortIndex, svcSetupRxTrafficDescriptorIndex=svcSetupRxTrafficDescriptorIndex, ocCNNIFilterCgPtyData=ocCNNIFilterCgPtyData, svpSetupEPortIndex=svpSetupEPortIndex, atmTESTMIBObjects=atmTESTMIBObjects, vpcExtensionTermAtmAddr=vpcExtensionTermAtmAddr, crossfireAtmStatus=crossfireAtmStatus, trafficDescriptorAbrFrtt=trafficDescriptorAbrFrtt, trafficDescriptorAbrIcr=trafficDescriptorAbrIcr, configAddressing=configAddressing, atmIpArpAtmAddress=atmIpArpAtmAddress, ocCNNIGlobalStatsTotal=ocCNNIGlobalStatsTotal, configCommonEPortVbrNrtBandwidthAllocation=configCommonEPortVbrNrtBandwidthAllocation, pvcSetupRowStatus=pvcSetupRowStatus, configCommonSscopTimerCc=configCommonSscopTimerCc, svcSetupEntry=svcSetupEntry, configCommonSignallingT303=configCommonSignallingT303, configCommonIPortQueueEntry=configCommonIPortQueueEntry, ocCNNIAddrStatsToCreated=ocCNNIAddrStatsToCreated, statusCurrentTemperatureGauge=statusCurrentTemperatureGauge, configNextHopRoutingEPort=configNextHopRoutingEPort, oamFlowNoResponseTrap=oamFlowNoResponseTrap, configNextHopRoutingTableNextIndex=configNextHopRoutingTableNextIndex, trafficDescriptorPcr01=trafficDescriptorPcr01, configCommonSignallingT333=configCommonSignallingT333, xModuleStatusChange=xModuleStatusChange, configIpArpServerIpSubnetAddress=configIpArpServerIpSubnetAddress, trafficDescriptorServiceClass=trafficDescriptorServiceClass, configCommonSscopMaxUuSize=configCommonSscopMaxUuSize, configCommonIPortClpDiscardThreshold=configCommonIPortClpDiscardThreshold, termRestartInfoServerIpAddress=termRestartInfoServerIpAddress, infoIfIndexClassicalIp=infoIfIndexClassicalIp, infoXModuleHwOptionNo=infoXModuleHwOptionNo, psuFailureTrap=psuFailureTrap, statsEportEntry=statsEportEntry, statusXModuleIPort3RIndex=statusXModuleIPort3RIndex, statusFeatureModuleStatusLed=statusFeatureModuleStatusLed, configNetworkClockSource=configNetworkClockSource, configIlmiServiceRegistryParm1=configIlmiServiceRegistryParm1, configEPortScratchPadIlmiConfigPnniVpi=configEPortScratchPadIlmiConfigPnniVpi, configStaticEPortIlmiPollRetries=configStaticEPortIlmiPollRetries, trafficDescriptorAbrTrm=trafficDescriptorAbrTrm, configIPortScratchPadQueueEfciTaggingAdminStatus=configIPortScratchPadQueueEfciTaggingAdminStatus, configCommonSignallingT398=configCommonSignallingT398, configNextHopRoutingTable=configNextHopRoutingTable, configEPortScratchPadIlmiConfigSignallingVpi=configEPortScratchPadIlmiConfigSignallingVpi, trafficDescriptorAbrNrm=trafficDescriptorAbrNrm, statusEPortAdjInfoTransmissionType=statusEPortAdjInfoTransmissionType, statsGlobalCongestionDiscardCellLatch=statsGlobalCongestionDiscardCellLatch, trafficDescriptorMcr=trafficDescriptorMcr, configCommonIPort=configCommonIPort, configCommonEPortMaxSvpcVpi=configCommonEPortMaxSvpcVpi, configEPortIlmiConfigMinSvccVci=configEPortIlmiConfigMinSvccVci, configIpArpServerAtmAddressMask=configIpArpServerAtmAddressMask, ocCNNINeighborTable=ocCNNINeighborTable, vpcExtensionIndex=vpcExtensionIndex, svcSetupTermAtmAddr=svcSetupTermAtmAddr, statsInvalidCellLatchTime=statsInvalidCellLatchTime, statsEPortRxHecErrorCellLatch=statsEPortRxHecErrorCellLatch, ocCNNIRoutingTable=ocCNNIRoutingTable, configCommonEPortMaxSvccVpi=configCommonEPortMaxSvccVpi, ocCNNIMACAddress=ocCNNIMACAddress, configFeatureModule=configFeatureModule, configEPortIlmiConfigMaxVpcs=configEPortIlmiConfigMaxVpcs, termRestartInfoSwSection1StatusWord=termRestartInfoSwSection1StatusWord, ocCNNIGlobalStatsOneWay=ocCNNIGlobalStatsOneWay, ocCNNIMonTables=ocCNNIMonTables, trafficDescriptorMbs01=trafficDescriptorMbs01, configNextHopRoutingIndex=configNextHopRoutingIndex, ocCNNIGlobalStatsBrokenRoot=ocCNNIGlobalStatsBrokenRoot, ocCNNIAddrStatsFromBrokenLeaf=ocCNNIAddrStatsFromBrokenLeaf, infoIfIndexAtmNode=infoIfIndexAtmNode, statusEPortRIndex=statusEPortRIndex, configCommonIPortQueueSize=configCommonIPortQueueSize, ocCNNIGlobalStats=ocCNNIGlobalStats, ocCNNITrapClientCommName=ocCNNITrapClientCommName, statusXModuleOperStatus=statusXModuleOperStatus, pvpSetupIndex=pvpSetupIndex, vccExtensionTermAtmAddr=vccExtensionTermAtmAddr, ocCNNIAddressAlias=ocCNNIAddressAlias, termRestartInfoSwImageLoaded=termRestartInfoSwImageLoaded, configCommonIPortQueueTable=configCommonIPortQueueTable, statusEPortAutoconfigMaxVccs=statusEPortAutoconfigMaxVccs)
mibBuilder.exportSymbols("Olicom-crossfireAtmSwitch-MIB", configEPortIlmiConfigLecsVpi=configEPortIlmiConfigLecsVpi, ocDsx3Delineation=ocDsx3Delineation, ocCNNIApplID=ocCNNIApplID, ocDsx3SuniCppmMegaIdleCells=ocDsx3SuniCppmMegaIdleCells, configPvpPvc=configPvpPvc, configCommonSignallingMaxTunnels=configCommonSignallingMaxTunnels)
