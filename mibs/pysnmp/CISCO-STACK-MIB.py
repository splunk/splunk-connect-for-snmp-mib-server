#
# PySNMP MIB module CISCO-STACK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-STACK-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:56:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
workgroup, = mibBuilder.importSymbols("CISCO-SMI", "workgroup")
VlanIndex, = mibBuilder.importSymbols("CISCO-VTP-MIB", "VlanIndex")
PhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "PhysicalIndex")
fddimibPORTSMTIndex, fddimibPORTIndex = mibBuilder.importSymbols("FDDI-SMT73-MIB", "fddimibPORTSMTIndex", "fddimibPORTIndex")
OwnerString, ifIndex, ifName = mibBuilder.importSymbols("IF-MIB", "OwnerString", "ifIndex", "ifName")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter32, Integer32, Gauge32, Unsigned32, iso, Bits, ModuleIdentity, TimeTicks, Counter64, ObjectIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter32", "Integer32", "Gauge32", "Unsigned32", "iso", "Bits", "ModuleIdentity", "TimeTicks", "Counter64", "ObjectIdentity", "IpAddress")
MacAddress, DisplayString, TextualConvention, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "TextualConvention", "TruthValue", "RowStatus")
ringStationMacAddress, = mibBuilder.importSymbols("TOKEN-RING-RMON-MIB", "ringStationMacAddress")
ciscoStackMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 5, 1))
ciscoStackMIB.setRevisions(('2014-03-03 00:00', '2012-06-16 00:00', '2010-02-01 00:00', '2007-12-12 00:00', '2007-05-29 00:00', '2007-05-25 00:00', '2007-03-30 00:00', '2005-10-28 00:00', '2005-04-27 00:00', '2004-05-14 00:00', '2004-01-15 00:00', '2003-05-29 00:00', '2003-05-05 00:00', '2002-09-24 00:00', '2001-06-11 00:00', '2001-04-11 00:00', '2000-10-10 00:00', '2000-05-16 00:00', '2000-02-02 00:00', '1999-09-30 00:00', '1999-03-26 00:00', '1999-02-12 00:00',))
if mibBuilder.loadTexts: ciscoStackMIB.setLastUpdated('201403030000Z')
if mibBuilder.loadTexts: ciscoStackMIB.setOrganization('Cisco Systems, Inc.')
adapterCard = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 2))
wsc1000sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 3))
wsc1100sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 4))
wsc1200sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 5))
wsc1400sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 6))
wsc5000sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 7))
wsc1600sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 8))
cpw1600sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 9))
wsc3000sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 10))
wsc2900sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 12))
cpw2200sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 13))
esStack = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 14))
wsc3200sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 15))
cpw1900sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 16))
wsc5500sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 17))
wsc1900sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 18))
cpw1220sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 19))
wsc2820sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 20))
cpw1420sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 21))
dcd = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 22))
wsc3100sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 23))
cpw1800sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 24))
cpw1601sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 25))
wsc3001sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 26))
cpw1220csysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 27))
wsc1900csysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 28))
wsc5002sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 29))
cpw1220isysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 30))
wsc1900isysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 31))
tsStack = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 32))
wsc3900sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 33))
wsc5505sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 34))
wsc2926sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 35))
wsc5509sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 36))
wsc3920sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 37))
wsc6006sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 38))
wsc6009sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 39))
wsc4003sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 40))
wsc4912gsysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 41))
wsc2948gsysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 42))
wsc6509sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 44))
wsc6506sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 45))
wsc4006sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 46))
wsc6509nebsysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 47))
wsc6knamsysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 48))
wsc2980gsysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 49))
wsc6513sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 50))
wsc2980gasysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 51))
cisco7603sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 53))
cisco7606sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 54))
cisco7609sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 55))
wsc6503sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 56))
wsc4503sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 58))
wsc4506sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 59))
cisco7613sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 60))
wsc6509nebasysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 61))
wsc2948ggetxsysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 62))
cisco7604sysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 63))
wsc6504esysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 64))
wsc1900LiteFxsysID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 175))
systemGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 1, 1))
chassisGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 1, 2))
moduleGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 1, 3))
portGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 1, 4))
tftpGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 1, 5))
brouterGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 1, 6))
filterGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 1, 7))
monitorGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 1, 8))
vlanGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 1, 9))
securityGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 1, 10))
tokenRingGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 1, 11))
multicastGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 1, 12))
dnsGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 1, 13))
syslogGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 1, 14))
ntpGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 1, 15))
tacacsGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 1, 16))
ipPermitListGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 1, 17))
portChannelGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 1, 18))
portCpbGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 1, 19))
portTopNGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 1, 20))
mdgGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 1, 21))
radiusGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 1, 22))
traceRouteGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 1, 24))
fileCopyGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 1, 25))
voiceGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 1, 26))
portJumboFrameGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 1, 27))
switchAccelerationGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 1, 28))
configGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 1, 29))
class VendorIdType(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(3, 3)
    fixedLength = 3

sysMgmtType = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("snmpV1", 2), ("smux", 3), ("snmpV2V1", 4), ("snmpV2cV1", 5), ("snmpV3V2cV1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMgmtType.setStatus('current')
sysIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpAddr.setStatus('deprecated')
sysNetMask = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysNetMask.setStatus('deprecated')
sysBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysBroadcast.setStatus('deprecated')
sysTrapReceiverTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 5), )
if mibBuilder.loadTexts: sysTrapReceiverTable.setStatus('deprecated')
sysTrapReceiverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 5, 1), ).setIndexNames((0, "CISCO-STACK-MIB", "sysTrapReceiverAddr"))
if mibBuilder.loadTexts: sysTrapReceiverEntry.setStatus('deprecated')
sysTrapReceiverType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapReceiverType.setStatus('deprecated')
sysTrapReceiverAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTrapReceiverAddr.setStatus('deprecated')
sysTrapReceiverComm = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapReceiverComm.setStatus('deprecated')
sysCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 6), )
if mibBuilder.loadTexts: sysCommunityTable.setStatus('deprecated')
sysCommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 6, 1), ).setIndexNames((0, "CISCO-STACK-MIB", "sysCommunityAccess"))
if mibBuilder.loadTexts: sysCommunityEntry.setStatus('deprecated')
sysCommunityAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("readOnly", 2), ("readWrite", 3), ("readWriteAll", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCommunityAccess.setStatus('deprecated')
sysCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCommunityString.setStatus('deprecated')
sysAttachType = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("dualAttach", 2), ("singleAttach", 3), ("nullAttach", 4), ("dualPrio", 5))).clone('dualAttach')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAttachType.setStatus('current')
sysTraffic = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTraffic.setStatus('current')
sysReset = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("reset", 2), ("resetMinDown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysReset.setStatus('deprecated')
sysBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(600, 1200, 2400, 4800, 9600, 19200, 38400))).clone(namedValues=NamedValues(("b600", 600), ("b1200", 1200), ("b2400", 2400), ("b4800", 4800), ("b9600", 9600), ("b19200", 19200), ("b38400", 38400))).clone('b9600')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysBaudRate.setStatus('current')
sysInsertMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("standard", 2), ("scheduled", 3), ("graceful", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysInsertMode.setStatus('current')
sysClearMacTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 12), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysClearMacTime.setStatus('deprecated')
sysClearPortTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 13), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysClearPortTime.setStatus('deprecated')
sysFddiRingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 14), )
if mibBuilder.loadTexts: sysFddiRingTable.setStatus('current')
sysFddiRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 14, 1), ).setIndexNames((0, "CISCO-STACK-MIB", "sysFddiRingSMTIndex"), (0, "CISCO-STACK-MIB", "sysFddiRingAddress"))
if mibBuilder.loadTexts: sysFddiRingEntry.setStatus('current')
sysFddiRingSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFddiRingSMTIndex.setStatus('current')
sysFddiRingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 14, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFddiRingAddress.setStatus('current')
sysFddiRingNext = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 14, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFddiRingNext.setStatus('current')
sysEnableModem = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysEnableModem.setStatus('current')
sysEnableRedirects = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysEnableRedirects.setStatus('current')
sysEnableRmon = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysEnableRmon.setStatus('current')
sysArpAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000)).clone(1200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysArpAgingTime.setStatus('current')
sysTrafficPeak = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTrafficPeak.setStatus('current')
sysTrafficPeakTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 20), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTrafficPeakTime.setStatus('current')
sysCommunityRwa = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCommunityRwa.setStatus('current')
sysCommunityRw = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCommunityRw.setStatus('current')
sysCommunityRo = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCommunityRo.setStatus('current')
sysEnableChassisTraps = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysEnableChassisTraps.setStatus('current')
sysEnableModuleTraps = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysEnableModuleTraps.setStatus('current')
sysEnableBridgeTraps = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("enabledForNewRootOnly", 3), ("enabledForTopoChangeOnly", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysEnableBridgeTraps.setStatus('deprecated')
sysIpVlan = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 27), VlanIndex().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpVlan.setStatus('current')
sysConfigChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 28), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysConfigChangeTime.setStatus('current')
sysEnableRepeaterTraps = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysEnableRepeaterTraps.setStatus('current')
sysBannerMotd = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysBannerMotd.setStatus('current')
sysEnableIpPermitTraps = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysEnableIpPermitTraps.setStatus('current')
sysTrafficMeterTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 32), )
if mibBuilder.loadTexts: sysTrafficMeterTable.setStatus('current')
sysTrafficMeterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 32, 1), ).setIndexNames((0, "CISCO-STACK-MIB", "sysTrafficMeterType"))
if mibBuilder.loadTexts: sysTrafficMeterEntry.setStatus('current')
sysTrafficMeterType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 32, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("systemSwitchingBus", 1), ("switchingBusA", 2), ("switchingBusB", 3), ("switchingBusC", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTrafficMeterType.setStatus('current')
sysTrafficMeter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 32, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTrafficMeter.setStatus('current')
sysTrafficMeterPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 32, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTrafficMeterPeak.setStatus('current')
sysTrafficMeterPeakTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 32, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysTrafficMeterPeakTime.setStatus('current')
sysEnableVmpsTraps = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysEnableVmpsTraps.setStatus('current')
sysConfigChangeInfo = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysConfigChangeInfo.setStatus('current')
sysEnableConfigTraps = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysEnableConfigTraps.setStatus('current')
sysConfigRegister = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 36), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2).clone(hexValue="010f")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConfigRegister.setStatus('current')
sysBootVariable = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysBootVariable.setStatus('current')
sysBootedImage = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBootedImage.setStatus('current')
sysEnableEntityTrap = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysEnableEntityTrap.setStatus('current')
sysEnableStpxTrap = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("enabledForInconOnly", 3), ("enabledForRootOnly", 4), ("enabledForLoopOnly", 5), ("enabledForInconRootOnly", 6), ("enabledForInconLoopOnly", 7), ("enabledForRootLoopOnly", 8))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysEnableStpxTrap.setStatus('deprecated')
sysExtendedRmonVlanModeEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysExtendedRmonVlanModeEnable.setStatus('current')
sysExtendedRmonNetflowPassword = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysExtendedRmonNetflowPassword.setStatus('current')
sysExtendedRmonNetflowEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysExtendedRmonNetflowEnable.setStatus('current')
sysExtendedRmonVlanAgentEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysExtendedRmonVlanAgentEnable.setStatus('current')
sysExtendedRmonEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("noNAMPresent", 3))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysExtendedRmonEnable.setStatus('current')
sysConsolePrimaryLoginAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tacacs", 1), ("radius", 2), ("local", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConsolePrimaryLoginAuthentication.setStatus('deprecated')
sysConsolePrimaryEnableAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tacacs", 1), ("radius", 2), ("local", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConsolePrimaryEnableAuthentication.setStatus('deprecated')
sysTelnetPrimaryLoginAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tacacs", 1), ("radius", 2), ("local", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTelnetPrimaryLoginAuthentication.setStatus('deprecated')
sysTelnetPrimaryEnableAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tacacs", 1), ("radius", 2), ("local", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTelnetPrimaryEnableAuthentication.setStatus('deprecated')
sysStartupConfigSource = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flashFileRecurring", 1), ("flashFileNonRecurring", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysStartupConfigSource.setStatus('current')
sysStartupConfigSourceFile = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 51), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysStartupConfigSourceFile.setStatus('current')
sysConfigSupervisorModuleNo = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConfigSupervisorModuleNo.setStatus('current')
sysStandbyPortEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysStandbyPortEnable.setStatus('current')
sysPortFastBpduGuard = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPortFastBpduGuard.setStatus('deprecated')
sysErrDisableTimeoutEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 55), Bits().clone(namedValues=NamedValues(("other", 0), ("udld", 1), ("duplexMismatch", 2), ("bpduPortGuard", 3), ("channelMisconfig", 4), ("crossBarFallBack", 5), ("gl2ptIngressLoop", 6), ("gl2ptThresholdExceed", 7), ("bcastSuppression", 8), ("arpInspectionRate", 9), ("noStaticInlinePwr", 10), ("camMonitor", 11), ("gl2ptCdpThresholdExceed", 12), ("gl2ptStpThresholdExceed", 13), ("gl2ptVtpThresholdExceed", 14), ("linkRxCrc", 15), ("linkTxCrc", 16), ("linkInErrors", 17), ("packetBufferError", 18), ("ethernetOam", 19), ("gl2ptEoamThresholdExceed", 20)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysErrDisableTimeoutEnable.setStatus('current')
sysErrDisableTimeoutInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 86400)).clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysErrDisableTimeoutInterval.setStatus('current')
sysTrafficMonitorHighWaterMark = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrafficMonitorHighWaterMark.setStatus('current')
sysHighAvailabilityEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 58), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysHighAvailabilityEnable.setStatus('current')
sysHighAvailabilityVersioningEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 59), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysHighAvailabilityVersioningEnable.setStatus('current')
sysHighAvailabilityOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("running", 1), ("notRunning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHighAvailabilityOperStatus.setStatus('current')
sysHighAvailabilityNotRunningReason = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 61), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHighAvailabilityNotRunningReason.setStatus('current')
sysExtendedRmonNetflowModuleMask = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 62), Bits().clone(namedValues=NamedValues(("module1", 0), ("module2", 1), ("module3", 2), ("module4", 3), ("module5", 4), ("module6", 5), ("module7", 6), ("module8", 7), ("module9", 8), ("module10", 9), ("module11", 10), ("module12", 11), ("module13", 12), ("module14", 13), ("module15", 14), ("module16", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysExtendedRmonNetflowModuleMask.setStatus('current')
sshPublicKeySize = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(512, 2048), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshPublicKeySize.setStatus('current')
sysMaxRmonMemory = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMaxRmonMemory.setStatus('current')
sysMacReductionAdminEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 65), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMacReductionAdminEnable.setStatus('current')
sysMacReductionOperEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 66), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMacReductionOperEnable.setStatus('current')
sysStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("minorFault", 3), ("majorFault", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatus.setStatus('current')
chassisSysType = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 45, 48, 51, 52, 54, 55, 56))).clone(namedValues=NamedValues(("other", 1), ("wsc1000", 3), ("wsc1001", 4), ("wsc1100", 5), ("wsc5000", 6), ("wsc2900", 7), ("wsc5500", 8), ("wsc5002", 9), ("wsc5505", 10), ("wsc1200", 11), ("wsc1400", 12), ("wsc2926", 13), ("wsc5509", 14), ("wsc6006", 15), ("wsc6009", 16), ("wsc4003", 17), ("wsc5500e", 18), ("wsc4912g", 19), ("wsc2948g", 20), ("wsc6509", 22), ("wsc6506", 23), ("wsc4006", 24), ("wsc6509NEB", 25), ("wsc2980g", 26), ("wsc6513", 27), ("wsc2980ga", 28), ("cisco7603", 30), ("cisco7606", 31), ("cisco7609", 32), ("wsc6503", 33), ("wsc6509NEBA", 34), ("wsc4507", 35), ("wsc4503", 36), ("wsc4506", 37), ("wsc65509", 38), ("cisco7613", 40), ("wsc2948ggetx", 41), ("cisco7604", 42), ("wsc6504e", 43), ("mec6524gs8s", 45), ("mec6524gt8s", 48), ("wsc6509ve", 51), ("cisco7603s", 52), ("c6880xle", 54), ("c6807xl", 55), ("c6880x", 56)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSysType.setStatus('current')
chassisBkplType = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("fddi", 2), ("fddiEthernet", 3), ("giga", 4), ("giga3", 5), ("giga3E", 6), ("giga12", 7), ("giga16", 8), ("giga40", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisBkplType.setStatus('current')
chassisPs1Type = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 63, 64, 105, 106, 150, 151, 152))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("w50", 3), ("w200", 4), ("w600", 5), ("w80", 6), ("w130", 7), ("wsc5008", 8), ("wsc5008a", 9), ("w175", 10), ("wsc5068", 11), ("wsc5508", 12), ("wsc5568", 13), ("wsc5508a", 14), ("w155", 15), ("w175pfc", 16), ("w175dc", 17), ("wsc5008b", 18), ("wsc5008c", 19), ("wsc5068b", 20), ("wscac1000", 21), ("wscac1300", 22), ("wscdc1000", 23), ("wscdc1360", 24), ("wsx4008", 25), ("wsc5518", 26), ("wsc5598", 27), ("w120", 28), ("externalPS", 29), ("wscac2500w", 30), ("wscdc2500w", 31), ("wsx4008dc", 32), ("wscac4000w", 33), ("pwr4000dc", 34), ("pwr950ac", 35), ("pwr950dc", 36), ("pwr1900ac", 37), ("pwr1900dc", 38), ("pwr1900ac6", 39), ("wsx4008ac650w", 42), ("wsx4008dc650w", 43), ("wscac3000w", 44), ("pwrc451000ac", 46), ("pwrc452800acv", 47), ("pwrc451300acv", 48), ("pwrc451400dcp", 49), ("wscdc3000w", 50), ("pwr1400ac", 51), ("w156", 52), ("wscac6000w", 53), ("pwr2700ac", 54), ("pwr2700dc", 55), ("wscac8700we", 58), ("pwr2700ac4", 59), ("pwr2700dc4", 60), ("pwr400dc", 63), ("pwr400ac", 64), ("pwr6000dc", 105), ("pwr1500dc", 106), ("c6880x3kwac", 150), ("c6880x3kwdc", 151), ("c6800xl3kwac", 152)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPs1Type.setStatus('current')
chassisPs1Status = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("minorFault", 3), ("majorFault", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPs1Status.setStatus('current')
chassisPs1TestResult = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPs1TestResult.setStatus('current')
chassisPs2Type = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 63, 64, 105, 106, 150, 151, 152))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("w50", 3), ("w200", 4), ("w600", 5), ("w80", 6), ("w130", 7), ("wsc5008", 8), ("wsc5008a", 9), ("w175", 10), ("wsc5068", 11), ("wsc5508", 12), ("wsc5568", 13), ("wsc5508a", 14), ("w155", 15), ("w175pfc", 16), ("w175dc", 17), ("wsc5008b", 18), ("wsc5008c", 19), ("wsc5068b", 20), ("wscac1000", 21), ("wscac1300", 22), ("wscdc1000", 23), ("wscdc1360", 24), ("wsx4008", 25), ("wsc5518", 26), ("wsc5598", 27), ("w120", 28), ("externalPS", 29), ("wscac2500w", 30), ("wscdc2500w", 31), ("wsx4008dc", 32), ("wscac4000w", 33), ("pwr4000dc", 34), ("pwr950ac", 35), ("pwr950dc", 36), ("pwr1900ac", 37), ("pwr1900dc", 38), ("pwr1900ac6", 39), ("wsx4008ac650w", 42), ("wsx4008dc650w", 43), ("wscac3000w", 44), ("pwrc451000ac", 46), ("pwrc452800acv", 47), ("pwrc451300acv", 48), ("pwrc451400dcp", 49), ("wscdc3000w", 50), ("pwr1400ac", 51), ("w156", 52), ("wscac6000w", 53), ("pwr2700ac", 54), ("pwr2700dc", 55), ("wscac8700we", 58), ("pwr2700ac4", 59), ("pwr2700dc4", 60), ("pwr400dc", 63), ("pwr400ac", 64), ("pwr6000dc", 105), ("pwr1500dc", 106), ("c6880x3kwac", 150), ("c6880x3kwdc", 151), ("c6800xl3kwac", 152)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPs2Type.setStatus('current')
chassisPs2Status = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("minorFault", 3), ("majorFault", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPs2Status.setStatus('current')
chassisPs2TestResult = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPs2TestResult.setStatus('current')
chassisFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("minorFault", 3), ("majorFault", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanStatus.setStatus('current')
chassisFanTestResult = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisFanTestResult.setStatus('current')
chassisMinorAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisMinorAlarm.setStatus('current')
chassisMajorAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisMajorAlarm.setStatus('current')
chassisTempAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisTempAlarm.setStatus('current')
chassisNumSlots = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisNumSlots.setStatus('current')
chassisSlotConfig = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSlotConfig.setStatus('current')
chassisModel = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisModel.setStatus('current')
chassisSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999999999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSerialNumber.setStatus('deprecated')
chassisComponentTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 18), )
if mibBuilder.loadTexts: chassisComponentTable.setStatus('deprecated')
chassisComponentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 18, 1), ).setIndexNames((0, "CISCO-STACK-MIB", "chassisComponentIndex"))
if mibBuilder.loadTexts: chassisComponentEntry.setStatus('deprecated')
chassisComponentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisComponentIndex.setStatus('deprecated')
chassisComponentType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27))).clone(namedValues=NamedValues(("unknown", 1), ("wsc6000cl", 2), ("wsc6000vtt", 3), ("wsc6000tempSensor", 4), ("wsc6513Clock", 5), ("clk7600", 6), ("ws9SlotFan", 7), ("fanMod9", 8), ("wsc6506eFan", 10), ("wsc6509eFan", 11), ("wsc6503eFan", 13), ("wsc6000vtte", 14), ("fanMod4Hs", 15), ("fan6524", 16), ("fanMod6Shs", 17), ("fanMod9Shs", 18), ("fanMod9St", 19), ("wsc6509veFan", 20), ("fanMod3Hs", 21), ("c6880xFan", 25), ("c6807xlFan", 26), ("c6800xl33vcon", 27)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisComponentType.setStatus('deprecated')
chassisComponentSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 18, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisComponentSerialNumber.setStatus('deprecated')
chassisComponentHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 18, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisComponentHwVersion.setStatus('deprecated')
chassisComponentModel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 18, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisComponentModel.setStatus('deprecated')
chassisSerialNumberString = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisSerialNumberString.setStatus('current')
chassisPs3Type = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 25, 32, 42, 43))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("wsx4008", 25), ("wsx4008dc", 32), ("wsx4008ac650w", 42), ("wsx4008dc650w", 43)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPs3Type.setStatus('current')
chassisPs3Status = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("minorFault", 3), ("majorFault", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPs3Status.setStatus('current')
chassisPs3TestResult = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPs3TestResult.setStatus('current')
chassisPEMInstalled = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 2, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisPEMInstalled.setStatus('current')
moduleTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1), )
if mibBuilder.loadTexts: moduleTable.setStatus('current')
moduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-STACK-MIB", "moduleIndex"))
if mibBuilder.loadTexts: moduleEntry.setStatus('current')
moduleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleIndex.setStatus('current')
moduleType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 61, 62, 65, 66, 67, 68, 69, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 88, 91, 92, 96, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 261, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 330, 331, 332, 334, 337, 339, 340, 341, 342, 343, 345, 346, 502, 503, 506, 507, 509, 510, 511, 512, 515, 516, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 625, 626, 627, 629, 633, 634, 903, 910, 911, 912, 913, 914, 915, 919, 920, 921, 923, 924, 925, 926, 927, 928, 929, 930, 936, 940, 946, 947), SingleValueConstraint(949, 950, 951, 1001, 1002, 1004, 1007, 1008, 1009, 1010, 1016, 1021, 1023, 1027, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1042, 1043, 1101, 1102, 1103, 1104, 1105, 1106, 1301, 1304, 1400, 1401, 1402, 1403, 1800, 1801, 1805))).clone(namedValues=NamedValues(("other", 1), ("empty", 2), ("wsc1000", 3), ("wsc1001", 4), ("wsc1100", 5), ("wsc1200", 11), ("wsc1400", 12), ("wsx1441", 13), ("wsx1444", 14), ("wsx1450", 15), ("wsx1483", 16), ("wsx1454", 17), ("wsx1455", 18), ("wsx1431", 19), ("wsx1465", 20), ("wsx1436", 21), ("wsx1434", 22), ("wsx5009", 23), ("wsx5013", 24), ("wsx5011", 25), ("wsx5010", 26), ("wsx5113", 27), ("wsx5101", 28), ("wsx5103", 29), ("wsx5104", 30), ("wsx5155", 32), ("wsx5154", 33), ("wsx5153", 34), ("wsx5111", 35), ("wsx5213", 36), ("wsx5020", 37), ("wsx5006", 38), ("wsx5005", 39), ("wsx5509", 40), ("wsx5506", 41), ("wsx5505", 42), ("wsx5156", 43), ("wsx5157", 44), ("wsx5158", 45), ("wsx5030", 46), ("wsx5114", 47), ("wsx5223", 48), ("wsx5224", 49), ("wsx5012", 50), ("wsx5302", 52), ("wsx5213a", 53), ("wsx5380", 54), ("wsx5201", 55), ("wsx5203", 56), ("wsx5530", 57), ("wsx5161", 61), ("wsx5162", 62), ("wsx5165", 65), ("wsx5166", 66), ("wsx5031", 67), ("wsx5410", 68), ("wsx5403", 69), ("wsx5201r", 73), ("wsx5225r", 74), ("wsx5014", 75), ("wsx5015", 76), ("wsx5236", 77), ("wsx5540", 78), ("wsx5234", 79), ("wsx5012a", 81), ("wsx5167", 82), ("wsx5239", 83), ("wsx5168", 84), ("wsx5305", 85), ("wsx5550", 87), ("wsf5541", 88), ("wsx5534", 91), ("wsx5536", 92), ("wsx5237", 96), ("wsx6ksup12ge", 200), ("wsx6408gbic", 201), ("wsx6224mmmt", 202), ("wsx6248rj45", 203), ("wsx6248tel", 204), ("wsx6302msm", 206), ("wsf6kmsfc", 207), ("wsx6024flmt", 208), ("wsx6101oc12mmf", 209), ("wsx6101oc12smf", 210), ("wsx6416gemt", 211), ("wsx61822pa", 212), ("osm2oc12AtmMM", 213), ("osm2oc12AtmSI", 214), ("osm4oc12PosMM", 216), ("osm4oc12PosSI", 217), ("osm4oc12PosSL", 218), ("wsx6ksup1a2ge", 219), ("wsx6302amsm", 220), ("wsx6416gbic", 221), ("wsx6224ammmt", 222), ("wsx6380nam", 223), ("wsx6248arj45", 224), ("wsx6248atel", 225), ("wsx6408agbic", 226), ("wsx6608t1", 229), ("wsx6608e1", 230), ("wsx6624fxs", 231), ("wsx6316getx", 233), ("wsf6kmsfc2", 234), ("wsx6324mmmt", 235), ("wsx6348rj45", 236), ("wsx6ksup22ge", 237), ("wsx6324sm", 238), ("wsx6516gbic", 239), ("osm4geWanGbic", 240), ("osm1oc48PosSS", 241), ("osm1oc48PosSI", 242), ("osm1oc48PosSL", 243), ("wsx6381ids", 244), ("wsc6500sfm", 245), ("osm16oc3PosMM", 246), ("osm16oc3PosSI", 247), ("osm16oc3PosSL", 248), ("osm2oc12PosMM", 249), ("osm2oc12PosSI", 250), ("osm2oc12PosSL", 251), ("wsx650210ge", 252), ("osm8oc3PosMM", 253), ("osm8oc3PosSI", 254), ("osm8oc3PosSL", 255), ("wsx6548rj45", 258), ("wsx6524mmmt", 259), ("wsx6066SlbApc", 260), ("wsx6516getx", 261), ("osm2oc48OneDptSS", 265), ("osm2oc48OneDptSI", 266), ("osm2oc48OneDptSL", 267), ("osm2oc48OneDptSSDual", 268), ("osm2oc48OneDptSIDual", 269), ("osm2oc48OneDptSLDual", 270), ("wsx6816gbic", 271), ("osm4choc12T3MM", 272), ("osm4choc12T3SI", 273), ("osm8choc12T3MM", 274), ("osm8choc12T3SI", 275), ("osm1choc48T3SS", 276), ("osm2choc48T3SS", 277), ("wsx6500sfm2", 278), ("osm1choc48T3SI", 279), ("osm2choc48T3SI", 280), ("wsx6348rj21", 281), ("wsx6548rj21", 282), ("wsSvcCmm", 284), ("wsx650110gex4", 285), ("osm4oc3PosSI", 286), ("osm4oc3PosMM", 289), ("wsSvcIdsm2", 290), ("wsSvcNam2", 291), ("wsSvcFwm1", 292), ("wsSvcCe1", 293), ("wsSvcSsl1", 294), ("osm8choc3DS0SI", 295), ("osm4choc3DS0SI", 296), ("osm1choc12T1SI", 297), ("wsx4012", 300), ("wsx4148rj", 301), ("wsx4232gbrj", 302), ("wsx4306gb", 303), ("wsx4418gb", 304), ("wsx44162gbtx", 305), ("wsx4912gb", 306), ("wsx2948gbrj", 307), ("wsx2948", 309), ("wsx4912", 310), ("wsx4424sxmt", 311), ("wsx4232rjxx", 312), ("wsx4148rj21", 313), ("wsx4124fxmt", 317), ("wsx4013", 318), ("wsx4232l3", 319), ("wsx4604gwy", 320), ("wsx44122Gbtx", 321), ("wsx2980", 322), ("wsx2980rj", 323), ("wsx2980gbrj", 324), ("wsx4019", 325), ("wsx4148rj45v", 326), ("wsx4424gbrj45", 330), ("wsx4148fxmt", 331), ("wsx4448gblx", 332), ("wsx4448gbrj45", 334), ("wsx4148lxmt", 337), ("wsx4548gbrj45", 339), ("wsx4548gbrj45v", 340), ("wsx4248rj21v", 341), ("wsx4302gb", 342), ("wsx4248rj45v", 343), ("wsx2948ggetx", 345), ("wsx2948ggetxgbrj", 346), ("wsx6516aGbic", 502), ("wsx6148getx", 503), ("wsx6148x2rj45", 506), ("wsx6196rj21", 507), ("wssup32ge3b", 509), ("wssup3210ge3b", 510), ("mec6524gs8s", 511), ("mec6524gt8s", 512), ("wssup32pge", 515), ("wssup32p10ge", 516), ("wssvcpisa32", 597), ("me6524msfc2a", 598), ("wsf6kmsfc2a", 599), ("osm12ct3T1", 600), ("osm12t3e3", 601), ("osm24t3e3", 602), ("osm4GeWanGbicPlus", 603), ("osm1choc12T3SI", 604), ("osm2choc12T3SI", 605), ("osm2oc12AtmMMPlus", 606), ("osm2oc12AtmSIPlus", 607), ("osm2oc12PosMMPlus", 608), ("osm2oc12PosSIPlus", 609), ("osm16oc3PosSIPlus", 610), ("osm1oc48PosSSPlus", 611), ("osm1oc48PosSIPlus", 612), ("osm1oc48PosSLPlus", 613), ("osm4oc3PosSIPlus", 614), ("osm8oc3PosSLPlus", 615), ("osm8oc3PosSIPlus", 616), ("osm4oc12PosSIPlus", 617), ("c7600Es4Tg3cxl", 618), ("c7600Es2Tg3cxl", 620), ("c76EsXt4Tg3cxl", 625), ("c76EsXt2Tg3cxl", 626), ("c7600Es4Tg3c", 627), ("c7600Es2Tg3c", 629), ("c76EsXt4Tg3c", 633), ("c76EsXt2Tg3c", 634), ("wsSvcIpSec1", 903), ("wsSvcMwam1", 910), ("wsSvcCsg1", 911), ("wsx6148rj45v", 912), ("wsx6148rj21v", 913), ("wsSvcNam1", 914), ("wsx6548getx", 915), ("wsSvcPsd1", 919), ("wsx6066SlbSk9", 920), ("wsx6148agetx", 921), ("wsx6148arj45", 923), ("wsSvcWlan1k9", 924), ("wsSvcAon1k9", 925), ("ace106500k9", 926), ("wsSvcWebVpnk9", 927), ("wsx6148FeSfp", 928), ("wsSvcAdm1k9", 929), ("wsSvcAgm1k9", 930), ("ace046500k9", 936), ("wsSvcSamiBb", 940), ("wsSvcWism2k9", 946), ("wsSvcAsaSm1", 947)) + NamedValues(("wsSvcNam3k9", 949), ("wsSvcAsaSm1k7", 950), ("wsSvcVse1k9", 951), ("wssup720", 1001), ("wssup720base", 1002), ("m7600Sip600", 1004), ("wsx6748getx", 1007), ("wsx670410ge", 1008), ("wsx6748sfp", 1009), ("wsx6724sfp", 1010), ("wsx670810ge", 1016), ("vss72010g", 1021), ("wsx6708a10ge", 1023), ("wsx671610ge", 1027), ("vssup2t10g", 1031), ("wsx6148ege45at", 1032), ("wsx671610t", 1033), ("wsx690810g", 1034), ("wsx690440g", 1035), ("wsx6148egetx", 1036), ("wsx6848tx", 1037), ("wsx6848sfp", 1039), ("wsx6824sfp", 1040), ("wsx681610ge", 1042), ("wsx681610t", 1043), ("wsx65822pa", 1101), ("m7600Sip200", 1102), ("m7600Sip400", 1103), ("c7600ssc400", 1104), ("c7600ssc600", 1105), ("esm2x10ge", 1106), ("c6800ia48td", 1301), ("c6800ia48fpd", 1304), ("c6880x16p10g", 1400), ("c6880x", 1401), ("c6880xle16p10g", 1402), ("c6880xle", 1403), ("rsp720", 1800), ("rsp720base", 1801), ("c7600msfc4", 1805)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleType.setStatus('current')
moduleSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999999999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSerialNumber.setStatus('deprecated')
moduleHwHiVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleHwHiVersion.setStatus('deprecated')
moduleHwLoVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleHwLoVersion.setStatus('deprecated')
moduleFwHiVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleFwHiVersion.setStatus('deprecated')
moduleFwLoVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleFwLoVersion.setStatus('deprecated')
moduleSwHiVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSwHiVersion.setStatus('deprecated')
moduleSwLoVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSwLoVersion.setStatus('deprecated')
moduleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("minorFault", 3), ("majorFault", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleStatus.setStatus('current')
moduleTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleTestResult.setStatus('current')
moduleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("reset", 2), ("enable", 3), ("disable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleAction.setStatus('current')
moduleName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleName.setStatus('current')
moduleNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleNumPorts.setStatus('current')
modulePortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modulePortStatus.setStatus('current')
moduleSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 8, 9, 100, 101, 102, 103, 104, 105, 106, 107, 200, 201, 202, 203, 205, 206, 207, 208, 213, 216, 217, 218, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241))).clone(namedValues=NamedValues(("other", 1), ("empty", 2), ("wsf5510", 3), ("wsf5511", 4), ("wsx5304", 6), ("wsf5520", 7), ("wsf5521", 8), ("wsf5531", 9), ("wsf6020", 100), ("wsf6020a", 101), ("wsf6kpfc", 102), ("wsf6kpfc2", 103), ("wsf6kvpwr", 104), ("wsf6kdfc", 105), ("wsf6kpfc2a", 106), ("wsf6kdfca", 107), ("vsp300dfc", 200), ("wsf6kpfc3a", 201), ("wsf6kdfc3a", 202), ("wsf6700dfc3a", 203), ("wsf6kdfc3bxl", 205), ("wsf6kpfc3bxl", 206), ("wsf6700dfc3bxl", 207), ("wsf6700cfc", 208), ("m7600pfc3c", 213), ("wsf6kpfc3b", 216), ("wsf6700dfc3b", 217), ("wsf6700dfc3c", 218), ("wsf6700dfc3cxl", 221), ("wsf6kdfc3b", 223), ("mec6524pfc3c", 224), ("sip600earl", 225), ("vsf6kpfc3cxl", 226), ("vsf6kpfc3c", 227), ("c7600esmdfc3cxl", 228), ("vsf6kpfc4", 229), ("c7600esmdfc3c", 230), ("wsf6kdfc4exl", 231), ("c7600Es3cxl", 232), ("c7600Es3c", 233), ("wsf6kdfc4e", 234), ("vsf6kpfc4xl", 235), ("wsf6kdfc4axl", 236), ("wsf6kdfc4a", 237), ("c6880xpfc", 238), ("c6880xlepfc", 239), ("c6880xdfc", 240), ("c6880xledfc", 241)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSubType.setStatus('current')
moduleModel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleModel.setStatus('current')
moduleHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleHwVersion.setStatus('current')
moduleFwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleFwVersion.setStatus('current')
moduleSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSwVersion.setStatus('current')
moduleStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("active", 2), ("standby", 3), ("error", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleStandbyStatus.setStatus('current')
moduleIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 22), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleIPAddress.setStatus('current')
moduleIPAddressVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 23), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleIPAddressVlan.setStatus('current')
moduleSubType2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 102, 103, 104, 105, 106, 107, 108, 109, 207, 234, 314, 315, 402, 403, 404, 405, 406, 410, 411, 597, 598, 599, 618, 620, 625, 626, 1001, 1005, 1026, 1701, 1805))).clone(namedValues=NamedValues(("other", 1), ("empty", 2), ("wsu5531", 3), ("wsu5533", 5), ("wsu5534", 6), ("wsu5535", 7), ("wsu5536", 8), ("wsu5537", 9), ("wsu5538", 10), ("wsu5539", 11), ("wsg6488", 102), ("wsg6489", 103), ("wsg6483", 104), ("wsg6485", 105), ("wsf6kFe48af", 106), ("wsf6kGe48af", 107), ("wsf6kVpwrGe", 108), ("wsf6kFe48x2af", 109), ("wsf6kmsfc", 207), ("wsf6kmsfc2", 234), ("wsu4504fxmt", 314), ("wsu4502gb", 315), ("wssvcidsupg", 402), ("wssvccmm6e1", 403), ("wssvccmm6t1", 404), ("wssvccmm24fxs", 405), ("wssvccmmact", 406), ("aceModExpnDc", 410), ("wsSvcAppProc1", 411), ("wssvcpisa32", 597), ("me6524msfc2a", 598), ("wsf6kmsfc2a", 599), ("c7600Es4Tg", 618), ("c7600Es2Tg", 620), ("c7600EsItu4TgLk", 625), ("c7600EsItu2TgLk", 626), ("wssup720", 1001), ("vsf6kmsfc5", 1005), ("vsf6kmsfc3", 1026), ("esm2x10ge", 1701), ("c7600msfc4", 1805)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSubType2.setStatus('current')
moduleSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSlotNum.setStatus('current')
moduleSerialNumberString = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSerialNumberString.setStatus('current')
moduleEntPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 27), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleEntPhysicalIndex.setStatus('current')
moduleAdditionalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 3, 1, 1, 28), Bits().clone(namedValues=NamedValues(("fruInstalled", 0), ("powerDenied", 1), ("faulty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAdditionalStatus.setStatus('current')
portTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1), )
if mibBuilder.loadTexts: portTable.setStatus('current')
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-STACK-MIB", "portModuleIndex"), (0, "CISCO-STACK-MIB", "portIndex"))
if mibBuilder.loadTexts: portEntry.setStatus('current')
portModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portModuleIndex.setStatus('current')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIndex.setStatus('current')
portCrossIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4080))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCrossIndex.setStatus('current')
portName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portName.setStatus('current')
portType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 113, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119))).clone(namedValues=NamedValues(("other", 1), ("cddi", 2), ("fddi", 3), ("tppmd", 4), ("mlt3", 5), ("sddi", 6), ("smf", 7), ("e10BaseT", 8), ("e10BaseF", 9), ("scf", 10), ("e100BaseTX", 11), ("e100BaseT4", 12), ("e100BaseF", 13), ("atmOc3mmf", 14), ("atmOc3smf", 15), ("atmOc3utp", 16), ("e100BaseFsm", 17), ("e10a100BaseTX", 18), ("mii", 19), ("vlanRouter", 20), ("remoteRouter", 21), ("tokenring", 22), ("atmOc12mmf", 23), ("atmOc12smf", 24), ("atmDs3", 25), ("tokenringMmf", 26), ("e1000BaseLX", 27), ("e1000BaseSX", 28), ("e1000BaseCX", 29), ("networkAnalysis", 30), ("e1000Empty", 31), ("e1000BaseLH", 32), ("e1000BaseT", 33), ("e1000UnsupportedGbic", 34), ("e1000BaseZX", 35), ("depi2", 36), ("t1", 37), ("e1", 38), ("fxs", 39), ("fxo", 40), ("transcoding", 41), ("conferencing", 42), ("atmOc12mm", 43), ("atmOc12smi", 44), ("atmOc12sml", 45), ("posOc12mm", 46), ("posOc12smi", 47), ("posOc12sml", 48), ("posOc48sms", 49), ("posOc48smi", 50), ("posOc48sml", 51), ("posOc3mm", 52), ("posOc3smi", 53), ("posOc3sml", 54), ("intrusionDetect", 55), ("e10GBaseCPX", 56), ("e10GBaseLX4", 57), ("e10GBaseEX4", 59), ("e10GEmpty", 60), ("e10a100a1000BaseT", 61), ("dptOc48mm", 62), ("dptOc48smi", 63), ("dptOc48sml", 64), ("e10GBaseLR", 65), ("chOc12smi", 66), ("chOc12mm", 67), ("chOc48ss", 68), ("chOc48smi", 69), ("e10GBaseSX4", 70), ("e10GBaseER", 71), ("contentEngine", 72), ("ssl", 73), ("firewall", 74), ("vpnIpSec", 75), ("ct3", 76), ("e1000BaseCwdm1470", 77), ("e1000BaseCwdm1490", 78), ("e1000BaseCwdm1510", 79), ("e1000BaseCwdm1530", 80), ("e1000BaseCwdm1550", 81), ("e1000BaseCwdm1570", 82), ("e1000BaseCwdm1590", 83), ("e1000BaseCwdm1610", 84), ("e1000BaseBT", 85), ("e1000BaseUnapproved", 86), ("chOc3smi", 87), ("mcr", 88), ("coe", 89), ("mwa", 90), ("psd", 91), ("e100BaseLX", 92), ("e10GBaseSR", 93), ("e10GBaseCX4", 94), ("e10GBaseWdm1550", 95), ("e10GBaseEdc1310", 96), ("e10GBaseSW", 97), ("e10GBaseLW", 98), ("e10GBaseEW", 99), ("lwa", 100), ("aons", 101), ("sslVpn", 102), ("e100BaseEmpty", 103), ("adsm", 104), ("agsm", 105), ("aces", 106), ("intrusionProtect", 109), ("e1000BaseSvc", 110), ("e10GBaseSvc", 111), ("e40GBaseEmpty", 113), ("e1000BaseUnknown", 1000), ("e10GBaseUnknown", 1001), ("e10GBaseUnapproved", 1002), ("e1000BaseWdmRxOnly", 1003), ("e1000BaseDwdm3033", 1004), ("e1000BaseDwdm3112", 1005), ("e1000BaseDwdm3190", 1006), ("e1000BaseDwdm3268", 1007), ("e1000BaseDwdm3425", 1008), ("e1000BaseDwdm3504", 1009), ("e1000BaseDwdm3582", 1010), ("e1000BaseDwdm3661", 1011), ("e1000BaseDwdm3819", 1012), ("e1000BaseDwdm3898", 1013), ("e1000BaseDwdm3977", 1014), ("e1000BaseDwdm4056", 1015), ("e1000BaseDwdm4214", 1016), ("e1000BaseDwdm4294", 1017), ("e1000BaseDwdm4373", 1018), ("e1000BaseDwdm4453", 1019), ("e1000BaseDwdm4612", 1020), ("e1000BaseDwdm4692", 1021), ("e1000BaseDwdm4772", 1022), ("e1000BaseDwdm4851", 1023), ("e1000BaseDwdm5012", 1024), ("e1000BaseDwdm5092", 1025), ("e1000BaseDwdm5172", 1026), ("e1000BaseDwdm5252", 1027), ("e1000BaseDwdm5413", 1028), ("e1000BaseDwdm5494", 1029), ("e1000BaseDwdm5575", 1030), ("e1000BaseDwdm5655", 1031), ("e1000BaseDwdm5817", 1032), ("e1000BaseDwdm5898", 1033), ("e1000BaseDwdm5979", 1034), ("e1000BaseDwdm6061", 1035), ("e10GBaseWdmRxOnly", 1036), ("e10GBaseDwdm3033", 1037), ("e10GBaseDwdm3112", 1038), ("e10GBaseDwdm3190", 1039), ("e10GBaseDwdm3268", 1040), ("e10GBaseDwdm3425", 1041), ("e10GBaseDwdm3504", 1042), ("e10GBaseDwdm3582", 1043), ("e10GBaseDwdm3661", 1044), ("e10GBaseDwdm3819", 1045), ("e10GBaseDwdm3898", 1046), ("e10GBaseDwdm3977", 1047), ("e10GBaseDwdm4056", 1048), ("e10GBaseDwdm4214", 1049), ("e10GBaseDwdm4294", 1050), ("e10GBaseDwdm4373", 1051), ("e10GBaseDwdm4453", 1052), ("e10GBaseDwdm4612", 1053), ("e10GBaseDwdm4692", 1054), ("e10GBaseDwdm4772", 1055), ("e10GBaseDwdm4851", 1056), ("e10GBaseDwdm5012", 1057), ("e10GBaseDwdm5092", 1058), ("e10GBaseDwdm5172", 1059), ("e10GBaseDwdm5252", 1060), ("e10GBaseDwdm5413", 1061), ("e10GBaseDwdm5494", 1062), ("e10GBaseDwdm5575", 1063), ("e10GBaseDwdm5655", 1064), ("e10GBaseDwdm5817", 1065), ("e10GBaseDwdm5898", 1066), ("e10GBaseDwdm5979", 1067), ("e10GBaseDwdm6061", 1068), ("e1000BaseBX10D", 1069), ("e1000BaseBX10U", 1070), ("e100BaseUnknown", 1071), ("e100BaseUnapproved", 1072), ("e100BaseSX", 1073), ("e100BaseBX10D", 1074), ("e100BaseBX10U", 1075), ("e10GBaseBad", 1076), ("e10GBaseZR", 1077), ("e100BaseEX", 1078), ("e100BaseZX", 1079), ("e10GBaseLRM", 1080), ("e10GBaseTPluggable", 1081), ("e10GBaseCU1M", 1082), ("e10GBaseCU3M", 1083), ("e10GBaseCU5M", 1084), ("e10GBaseCU7M", 1085), ("e10GBaseCUdot3M", 1086), ("e10GBaseCU2M", 1087), ("e10GBaseCU4M", 1088), ("e10GBaseCU6M", 1089), ("e10GBaseUSR", 1090), ("e10GBaseLRMSM", 1091), ("e1000BaseDwdm3346", 1092), ("e1000BaseDwdm3739", 1093), ("e1000BaseDwdm4134", 1094), ("e1000BaseDwdm4532", 1095), ("e1000BaseDwdm4931", 1096), ("e1000BaseDwdm5332", 1097), ("e1000BaseDwdm5736", 1098), ("e1000BaseDwdm6141", 1099), ("e40GBaseLR", 1100), ("e40GBaseSR", 1101), ("e40GBaseUnapproved", 1102), ("e10GBaseDwdm3347", 1104), ("e10GBaseDwdm3740", 1105), ("e10GBaseDwdm4135", 1106), ("e10GBaseDwdm4532", 1107), ("e10GBaseDwdm4932", 1108), ("e10GBaseDwdm5333", 1109), ("e10GBaseDwdm5736", 1110), ("e10GBaseDwdm6141", 1111), ("e10GBaseACU7M", 1112), ("e10GBaseACU10M", 1113), ("e1000BaseEXSMD", 1114), ("e1000BaseZXSMD", 1115), ("e1000BaseTE", 1116), ("e1000BaseSXMMD", 1117), ("e1000BaseLHSMD", 1118), ("e100BaseFXGE", 1119)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portType.setStatus('current')
portOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("minorFault", 3), ("majorFault", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOperStatus.setStatus('current')
portCrossGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCrossGroupIndex.setStatus('current')
portAdditionalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portAdditionalStatus.setStatus('current')
portAdminSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4000000, 10000000, 16000000, 45000000, 64000000, 100000000, 155000000, 400000000, 622000000, 1000000000, 1544000, 2000000, 2048000, 64000, 10))).clone(namedValues=NamedValues(("autoDetect", 1), ("autoDetect10100", 2), ("s4000000", 4000000), ("s10000000", 10000000), ("s16000000", 16000000), ("s45000000", 45000000), ("s64000000", 64000000), ("s100000000", 100000000), ("s155000000", 155000000), ("s400000000", 400000000), ("s622000000", 622000000), ("s1000000000", 1000000000), ("s1544000", 1544000), ("s2000000", 2000000), ("s2048000", 2048000), ("s64000", 64000), ("s10G", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portAdminSpeed.setStatus('current')
portDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("half", 1), ("full", 2), ("disagree", 3), ("auto", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDuplex.setStatus('current')
portIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIfIndex.setStatus('current')
portSpantreeFastStart = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSpantreeFastStart.setStatus('deprecated')
portAdminRxFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("desired", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portAdminRxFlowControl.setStatus('current')
portOperRxFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("disagree", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOperRxFlowControl.setStatus('current')
portAdminTxFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("desired", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portAdminTxFlowControl.setStatus('current')
portOperTxFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("disagree", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOperTxFlowControl.setStatus('current')
portMacControlTransmitFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMacControlTransmitFrames.setStatus('current')
portMacControlReceiveFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMacControlReceiveFrames.setStatus('current')
portMacControlPauseTransmitFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMacControlPauseTransmitFrames.setStatus('current')
portMacControlPauseReceiveFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMacControlPauseReceiveFrames.setStatus('current')
portMacControlUnknownProtocolFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMacControlUnknownProtocolFrames.setStatus('current')
portLinkFaultStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noFault", 1), ("nearEndFault", 2), ("nearEndConfigFail", 3), ("farEndDisable", 4), ("farEndFault", 5), ("farEndConfigFail", 6), ("notApplicable", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLinkFaultStatus.setStatus('current')
portAdditionalOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 23), Bits().clone(namedValues=NamedValues(("other", 0), ("connected", 1), ("standby", 2), ("faulty", 3), ("notConnected", 4), ("inactive", 5), ("shutdown", 6), ("dripDis", 7), ("disabled", 8), ("monitor", 9), ("errdisable", 10), ("linkFaulty", 11), ("onHook", 12), ("offHook", 13), ("reflector", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portAdditionalOperStatus.setStatus('current')
portInlinePowerDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInlinePowerDetect.setStatus('current')
portEntPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 25), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portEntPhysicalIndex.setStatus('current')
portErrDisableTimeOutEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 4, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portErrDisableTimeOutEnable.setStatus('current')
tftpHost = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpHost.setStatus('current')
tftpFile = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFile.setStatus('current')
tftpModule = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpModule.setStatus('current')
tftpAction = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("downloadConfig", 2), ("uploadConfig", 3), ("downloadSw", 4), ("uploadSw", 5), ("downloadFw", 6), ("uploadFw", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpAction.setStatus('current')
tftpResult = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("inProgress", 1), ("success", 2), ("noResponse", 3), ("tooManyRetries", 4), ("noBuffers", 5), ("noProcesses", 6), ("badChecksum", 7), ("badLength", 8), ("badFlash", 9), ("serverError", 10), ("userCanceled", 11), ("wrongCode", 12), ("fileNotFound", 13), ("invalidTftpHost", 14), ("invalidTftpModule", 15), ("accessViolation", 16), ("unknownStatus", 17), ("invalidStorageDevice", 18), ("insufficientSpaceOnStorageDevice", 19), ("insufficientDramSize", 20), ("incompatibleImage", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpResult.setStatus('current')
brouterEnableRip = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brouterEnableRip.setStatus('current')
brouterEnableSpantree = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brouterEnableSpantree.setStatus('current')
brouterEnableGiantCheck = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brouterEnableGiantCheck.setStatus('current')
brouterEnableIpFragmentation = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brouterEnableIpFragmentation.setStatus('current')
brouterEnableUnreachables = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brouterEnableUnreachables.setStatus('current')
brouterCamAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brouterCamAgingTime.setStatus('deprecated')
brouterCamMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("filtering", 1), ("forwarding", 2))).clone('filtering')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brouterCamMode.setStatus('current')
brouterIpxSnapToEther = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("snap", 1), ("ethernetII", 2), ("iso8023", 3), ("raw8023", 4))).clone('raw8023')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brouterIpxSnapToEther.setStatus('current')
brouterIpx8023RawToFddi = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 6))).clone(namedValues=NamedValues(("snap", 1), ("iso8022", 5), ("fddiRaw", 6))).clone('snap')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brouterIpx8023RawToFddi.setStatus('current')
brouterEthernetReceiveMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brouterEthernetReceiveMax.setStatus('current')
brouterEthernetTransmitMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brouterEthernetTransmitMax.setStatus('current')
brouterFddiReceiveMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512)).clone(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brouterFddiReceiveMax.setStatus('current')
brouterFddiTransmitMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512)).clone(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brouterFddiTransmitMax.setStatus('current')
brouterPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 14), )
if mibBuilder.loadTexts: brouterPortTable.setStatus('current')
brouterPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 14, 1), ).setIndexNames((0, "CISCO-STACK-MIB", "brouterPortModule"), (0, "CISCO-STACK-MIB", "brouterPort"))
if mibBuilder.loadTexts: brouterPortEntry.setStatus('current')
brouterPortModule = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brouterPortModule.setStatus('current')
brouterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brouterPort.setStatus('current')
brouterPortIpVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 14, 1, 3), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brouterPortIpVlan.setStatus('current')
brouterPortIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 14, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brouterPortIpAddr.setStatus('current')
brouterPortNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 14, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brouterPortNetMask.setStatus('current')
brouterPortBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 14, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brouterPortBroadcast.setStatus('current')
brouterPortBridgeVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 14, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brouterPortBridgeVlan.setStatus('current')
brouterPortIpHelpers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 14, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brouterPortIpHelpers.setStatus('current')
brouterIpx8022ToEther = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("snap", 1), ("ethernetII", 2), ("iso8023", 3), ("raw8023", 4))).clone('iso8023')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brouterIpx8022ToEther.setStatus('current')
brouterEnableTransitEncapsulation = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brouterEnableTransitEncapsulation.setStatus('current')
brouterEnableFddiCheck = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brouterEnableFddiCheck.setStatus('current')
brouterEnableAPaRT = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 6, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brouterEnableAPaRT.setStatus('current')
filterMacTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 1), )
if mibBuilder.loadTexts: filterMacTable.setStatus('current')
filterMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 1, 1), ).setIndexNames((0, "CISCO-STACK-MIB", "filterMacModule"), (0, "CISCO-STACK-MIB", "filterMacPort"), (0, "CISCO-STACK-MIB", "filterMacAddress"))
if mibBuilder.loadTexts: filterMacEntry.setStatus('current')
filterMacModule = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterMacModule.setStatus('current')
filterMacPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterMacPort.setStatus('current')
filterMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterMacAddress.setStatus('current')
filterMacType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("deny", 1), ("invalid", 2), ("permit", 3), ("permitSrc", 4), ("permitDst", 5), ("denySrc", 6), ("denyDst", 7), ("denySrcLearn", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterMacType.setStatus('current')
filterVendorTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 2), )
if mibBuilder.loadTexts: filterVendorTable.setStatus('current')
filterVendorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 2, 1), ).setIndexNames((0, "CISCO-STACK-MIB", "filterVendorModule"), (0, "CISCO-STACK-MIB", "filterVendorPort"), (0, "CISCO-STACK-MIB", "filterVendorId"))
if mibBuilder.loadTexts: filterVendorEntry.setStatus('current')
filterVendorModule = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterVendorModule.setStatus('current')
filterVendorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterVendorPort.setStatus('current')
filterVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 2, 1, 3), VendorIdType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterVendorId.setStatus('current')
filterVendorType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("deny", 1), ("invalid", 2), ("permit", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterVendorType.setStatus('current')
filterProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 3), )
if mibBuilder.loadTexts: filterProtocolTable.setStatus('current')
filterProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 3, 1), ).setIndexNames((0, "CISCO-STACK-MIB", "filterProtocolModule"), (0, "CISCO-STACK-MIB", "filterProtocolPort"), (0, "CISCO-STACK-MIB", "filterProtocolValue"))
if mibBuilder.loadTexts: filterProtocolEntry.setStatus('current')
filterProtocolModule = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterProtocolModule.setStatus('current')
filterProtocolPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterProtocolPort.setStatus('current')
filterProtocolValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterProtocolValue.setStatus('current')
filterProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("deny", 1), ("invalid", 2), ("permit", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterProtocolType.setStatus('current')
filterTestTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 4), )
if mibBuilder.loadTexts: filterTestTable.setStatus('current')
filterTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 4, 1), ).setIndexNames((0, "CISCO-STACK-MIB", "filterTestModule"), (0, "CISCO-STACK-MIB", "filterTestPort"), (0, "CISCO-STACK-MIB", "filterTestIndex"))
if mibBuilder.loadTexts: filterTestEntry.setStatus('current')
filterTestModule = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterTestModule.setStatus('current')
filterTestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterTestPort.setStatus('current')
filterTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterTestIndex.setStatus('current')
filterTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterTestType.setStatus('current')
filterTestOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4500))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterTestOffset.setStatus('current')
filterTestValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterTestValue.setStatus('current')
filterTestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterTestMask.setStatus('current')
filterPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 5), )
if mibBuilder.loadTexts: filterPortTable.setStatus('current')
filterPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 5, 1), ).setIndexNames((0, "CISCO-STACK-MIB", "filterPortModule"), (0, "CISCO-STACK-MIB", "filterPort"))
if mibBuilder.loadTexts: filterPortEntry.setStatus('current')
filterPortModule = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterPortModule.setStatus('current')
filterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterPort.setStatus('current')
filterPortComplex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterPortComplex.setStatus('current')
filterPortBroadcastThrottle = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 150000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterPortBroadcastThrottle.setStatus('current')
filterPortBroadcastThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterPortBroadcastThreshold.setStatus('current')
filterPortBroadcastDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterPortBroadcastDiscards.setStatus('current')
filterPortBroadcastThresholdFraction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setUnits('one-hundredths').setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterPortBroadcastThresholdFraction.setStatus('current')
filterPortSuppressionOption = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 5, 1, 8), Bits().clone(namedValues=NamedValues(("multicast", 0), ("unicast", 1), ("broadcast", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterPortSuppressionOption.setStatus('current')
filterPortSuppressionViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 7, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dropPackets", 1), ("errdisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterPortSuppressionViolation.setStatus('current')
monitorSourceModule = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: monitorSourceModule.setStatus('deprecated')
monitorSourcePort = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: monitorSourcePort.setStatus('deprecated')
monitorDestinationModule = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: monitorDestinationModule.setStatus('deprecated')
monitorDestinationPort = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: monitorDestinationPort.setStatus('deprecated')
monitorDirection = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("transmit", 1), ("receive", 2), ("transmitAndReceive", 3))).clone('transmitAndReceive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: monitorDirection.setStatus('deprecated')
monitorEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: monitorEnable.setStatus('deprecated')
monitorAdminSourcePorts = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 8, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: monitorAdminSourcePorts.setStatus('deprecated')
monitorOperSourcePorts = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 8, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorOperSourcePorts.setStatus('deprecated')
vlanTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 2), )
if mibBuilder.loadTexts: vlanTable.setStatus('deprecated')
vlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 2, 1), ).setIndexNames((0, "CISCO-STACK-MIB", "vlanIndex"))
if mibBuilder.loadTexts: vlanEntry.setStatus('deprecated')
vlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 2, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanIndex.setStatus('deprecated')
vlanSpantreeEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSpantreeEnable.setStatus('deprecated')
vlanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanIfIndex.setStatus('deprecated')
vlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 3), )
if mibBuilder.loadTexts: vlanPortTable.setStatus('current')
vlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 3, 1), ).setIndexNames((0, "CISCO-STACK-MIB", "vlanPortModule"), (0, "CISCO-STACK-MIB", "vlanPort"))
if mibBuilder.loadTexts: vlanPortEntry.setStatus('current')
vlanPortModule = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanPortModule.setStatus('current')
vlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanPort.setStatus('current')
vlanPortVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 3, 1, 3), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPortVlan.setStatus('current')
vlanPortIslVlansAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPortIslVlansAllowed.setStatus('current')
vlanPortSwitchLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("high", 2), ("notApplicable", 3))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPortSwitchLevel.setStatus('current')
vlanPortIslAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("desirable", 3), ("auto", 4), ("onNoNegotiate", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPortIslAdminStatus.setStatus('current')
vlanPortIslOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trunking", 1), ("notTrunking", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanPortIslOperStatus.setStatus('current')
vlanPortIslPriorityVlans = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPortIslPriorityVlans.setStatus('current')
vlanPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2))).clone('static')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPortAdminStatus.setStatus('current')
vlanPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2), ("shutdown", 3), ("vlanActiveFault", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanPortOperStatus.setStatus('current')
vlanPortAuxiliaryVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1000), ValueRangeConstraint(1025, 4094), ValueRangeConstraint(4095, 4095), ValueRangeConstraint(4096, 4096), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPortAuxiliaryVlan.setStatus('deprecated')
vmpsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 4), )
if mibBuilder.loadTexts: vmpsTable.setStatus('current')
vmpsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 4, 1), ).setIndexNames((0, "CISCO-STACK-MIB", "vmpsAddr"))
if mibBuilder.loadTexts: vmpsEntry.setStatus('current')
vmpsAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmpsAddr.setStatus('current')
vmpsType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("primary", 2), ("other", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vmpsType.setStatus('current')
vmpsAction = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("inProgress", 2), ("success", 3), ("noResponse", 4), ("noPrimaryVmps", 5), ("noDynamicPort", 6), ("noHostConnected", 7), ("reconfirm", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmpsAction.setStatus('current')
vmpsAccessed = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmpsAccessed.setStatus('current')
vlanTrunkMappingMax = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('entries').setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTrunkMappingMax.setStatus('current')
vlanTrunkMappingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 8), )
if mibBuilder.loadTexts: vlanTrunkMappingTable.setStatus('current')
vlanTrunkMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 8, 1), ).setIndexNames((0, "CISCO-STACK-MIB", "vlanTrunkMappingFromVlan"))
if mibBuilder.loadTexts: vlanTrunkMappingEntry.setStatus('current')
vlanTrunkMappingFromVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 8, 1, 1), VlanIndex())
if mibBuilder.loadTexts: vlanTrunkMappingFromVlan.setStatus('current')
vlanTrunkMappingToVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 8, 1, 2), VlanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanTrunkMappingToVlan.setStatus('current')
vlanTrunkMappingType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reservedToNonReserved", 1), ("dot1qToisl", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanTrunkMappingType.setStatus('current')
vlanTrunkMappingOper = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 8, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTrunkMappingOper.setStatus('current')
vlanTrunkMappingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 9, 8, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanTrunkMappingStatus.setStatus('current')
portSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 1, 10, 1), )
if mibBuilder.loadTexts: portSecurityTable.setStatus('current')
portSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 1, 10, 1, 1), ).setIndexNames((0, "CISCO-STACK-MIB", "portSecurityModuleIndex"), (0, "CISCO-STACK-MIB", "portSecurityPortIndex"))
if mibBuilder.loadTexts: portSecurityEntry.setStatus('current')
portSecurityModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecurityModuleIndex.setStatus('current')
portSecurityPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecurityPortIndex.setStatus('current')
portSecurityAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecurityAdminStatus.setStatus('current')
portSecurityOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notShutdown", 1), ("shutdown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecurityOperStatus.setStatus('current')
portSecurityLastSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 10, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecurityLastSrcAddr.setStatus('current')
portSecuritySecureSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 10, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecuritySecureSrcAddr.setStatus('current')
portSecurityMaxSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1025)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecurityMaxSrcAddr.setStatus('current')
portSecurityAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(10, 1440), ))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecurityAgingTime.setStatus('current')
portSecurityShutdownTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 10, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(10, 1440), ))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecurityShutdownTimeOut.setStatus('current')
portSecurityViolationPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restrict", 1), ("shutdown", 2))).clone('shutdown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecurityViolationPolicy.setStatus('current')
portSecurityExtTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 1, 10, 2), )
if mibBuilder.loadTexts: portSecurityExtTable.setStatus('current')
portSecurityExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 1, 10, 2, 1), ).setIndexNames((0, "CISCO-STACK-MIB", "portSecurityExtModuleIndex"), (0, "CISCO-STACK-MIB", "portSecurityExtPortIndex"), (0, "CISCO-STACK-MIB", "portSecurityExtSecureSrcAddr"))
if mibBuilder.loadTexts: portSecurityExtEntry.setStatus('current')
portSecurityExtModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecurityExtModuleIndex.setStatus('current')
portSecurityExtPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecurityExtPortIndex.setStatus('current')
portSecurityExtSecureSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 10, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecurityExtSecureSrcAddr.setStatus('current')
portSecurityExtControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portSecurityExtControlStatus.setStatus('current')
tokenRingPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 1), )
if mibBuilder.loadTexts: tokenRingPortTable.setStatus('current')
tokenRingPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 1, 1), ).setIndexNames((0, "CISCO-STACK-MIB", "tokenRingModuleIndex"), (0, "CISCO-STACK-MIB", "tokenRingPortIndex"))
if mibBuilder.loadTexts: tokenRingPortEntry.setStatus('current')
tokenRingModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingModuleIndex.setStatus('current')
tokenRingPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPortIndex.setStatus('current')
tokenRingPortSetACbits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokenRingPortSetACbits.setStatus('current')
tokenRingPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7))).clone(namedValues=NamedValues(("auto", 1), ("fdxCport", 2), ("fdxStation", 3), ("hdxCport", 4), ("hdxStation", 5), ("riro", 7))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokenRingPortMode.setStatus('current')
tokenRingPortEarlyTokenRel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokenRingPortEarlyTokenRel.setStatus('current')
tokenRingPortPriorityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokenRingPortPriorityThresh.setStatus('current')
tokenRingPortPriorityMinXmit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokenRingPortPriorityMinXmit.setStatus('current')
tokenRingPortCfgLossThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokenRingPortCfgLossThresh.setStatus('current')
tokenRingPortCfgLossInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokenRingPortCfgLossInterval.setStatus('current')
tokenRingDripDistCrfMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokenRingDripDistCrfMode.setStatus('current')
tokenRingDripAreReductionMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokenRingDripAreReductionMode.setStatus('current')
tokenRingDripLocalNodeID = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingDripLocalNodeID.setStatus('current')
tokenRingDripLastRevision = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingDripLastRevision.setStatus('current')
tokenRingDripLastChangedRevision = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingDripLastChangedRevision.setStatus('current')
tokenRingDripAdvertsReceived = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingDripAdvertsReceived.setStatus('current')
tokenRingDripAdvertsTransmitted = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingDripAdvertsTransmitted.setStatus('current')
tokenRingDripAdvertsProcessed = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingDripAdvertsProcessed.setStatus('current')
tokenRingDripInputQueueDrops = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingDripInputQueueDrops.setStatus('current')
tokenRingDripOutputQueueDrops = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingDripOutputQueueDrops.setStatus('current')
tokenRingDripLocalVlanStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 12), )
if mibBuilder.loadTexts: tokenRingDripLocalVlanStatusTable.setStatus('current')
tokenRingDripLocalVlanStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 12, 1), ).setIndexNames((0, "CISCO-STACK-MIB", "tokenRingDripVlan"))
if mibBuilder.loadTexts: tokenRingDripLocalVlanStatusEntry.setStatus('current')
tokenRingDripVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 12, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingDripVlan.setStatus('current')
tokenRingDripLocalPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingDripLocalPortStatus.setStatus('current')
tokenRingDripRemotePortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingDripRemotePortStatus.setStatus('current')
tokenRingDripRemotePortConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingDripRemotePortConfigured.setStatus('current')
tokenRingDripDistributedCrf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingDripDistributedCrf.setStatus('current')
tokenRingDripBackupCrf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingDripBackupCrf.setStatus('current')
tokenRingDripOwnerNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 12, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingDripOwnerNodeID.setStatus('current')
tokenRingPortSoftErrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 14), )
if mibBuilder.loadTexts: tokenRingPortSoftErrTable.setStatus('current')
tokenRingPortSoftErrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 14, 1), )
tokenRingPortEntry.registerAugmentions(("CISCO-STACK-MIB", "tokenRingPortSoftErrEntry"))
tokenRingPortSoftErrEntry.setIndexNames(*tokenRingPortEntry.getIndexNames())
if mibBuilder.loadTexts: tokenRingPortSoftErrEntry.setStatus('current')
tokenRingPortSoftErrThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokenRingPortSoftErrThresh.setStatus('current')
tokenRingPortSoftErrReportInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokenRingPortSoftErrReportInterval.setStatus('current')
tokenRingPortSoftErrResetCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noop", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokenRingPortSoftErrResetCounters.setStatus('current')
tokenRingPortSoftErrLastCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 14, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokenRingPortSoftErrLastCounterReset.setStatus('current')
tokenRingPortSoftErrEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 11, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tokenRingPortSoftErrEnable.setStatus('current')
mcastRouterTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 1, 12, 1), )
if mibBuilder.loadTexts: mcastRouterTable.setStatus('current')
mcastRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 1, 12, 1, 1), ).setIndexNames((0, "CISCO-STACK-MIB", "mcastRouterModuleIndex"), (0, "CISCO-STACK-MIB", "mcastRouterPortIndex"))
if mibBuilder.loadTexts: mcastRouterEntry.setStatus('current')
mcastRouterModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcastRouterModuleIndex.setStatus('current')
mcastRouterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcastRouterPortIndex.setStatus('current')
mcastRouterAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("routerPresent", 1), ("dynamic", 3))).clone('dynamic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcastRouterAdminStatus.setStatus('current')
mcastRouterOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("routerPresent", 1), ("noRouter", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcastRouterOperStatus.setStatus('current')
mcastEnableCgmp = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcastEnableCgmp.setStatus('current')
mcastEnableIgmp = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 12, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcastEnableIgmp.setStatus('current')
mcastEnableRgmp = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 12, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcastEnableRgmp.setStatus('current')
dnsEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsEnable.setStatus('current')
dnsServerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 1, 13, 2), )
if mibBuilder.loadTexts: dnsServerTable.setStatus('current')
dnsServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 1, 13, 2, 1), ).setIndexNames((0, "CISCO-STACK-MIB", "dnsServerAddr"))
if mibBuilder.loadTexts: dnsServerEntry.setStatus('current')
dnsServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 13, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsServerAddr.setStatus('current')
dnsServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 13, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("primary", 2), ("other", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dnsServerType.setStatus('current')
dnsDomainName = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 13, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsDomainName.setStatus('current')
syslogServerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 1, 14, 1), )
if mibBuilder.loadTexts: syslogServerTable.setStatus('current')
syslogServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 1, 14, 1, 1), ).setIndexNames((0, "CISCO-STACK-MIB", "syslogServerAddr"))
if mibBuilder.loadTexts: syslogServerEntry.setStatus('current')
syslogServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 14, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogServerAddr.setStatus('current')
syslogServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogServerType.setStatus('current')
syslogConsoleEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 14, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogConsoleEnable.setStatus('current')
syslogHostEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 14, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogHostEnable.setStatus('current')
syslogMessageControlTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 1, 14, 4), )
if mibBuilder.loadTexts: syslogMessageControlTable.setStatus('current')
syslogMessageControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 1, 14, 4, 1), ).setIndexNames((0, "CISCO-STACK-MIB", "syslogMessageFacility"))
if mibBuilder.loadTexts: syslogMessageControlEntry.setStatus('current')
syslogMessageFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 14, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47))).clone(namedValues=NamedValues(("cdp", 1), ("mcast", 2), ("dtp", 3), ("dvlan", 4), ("earl", 5), ("fddi", 6), ("ip", 7), ("pruning", 8), ("snmp", 9), ("spantree", 10), ("system", 11), ("tac", 12), ("tcp", 13), ("telnet", 14), ("tftp", 15), ("vtp", 16), ("vmps", 17), ("kernel", 18), ("filesys", 19), ("drip", 20), ("pagp", 21), ("mgmt", 22), ("mls", 23), ("protfilt", 24), ("security", 25), ("radius", 26), ("udld", 27), ("gvrp", 28), ("cops", 29), ("qos", 30), ("acl", 31), ("rsvp", 32), ("ld", 33), ("privatevlan", 34), ("ethc", 35), ("gl2pt", 36), ("callhome", 37), ("dhcpsnooping", 38), ("diags", 40), ("eou", 42), ("backup", 43), ("eoam", 44), ("webauth", 45), ("dom", 46), ("mvrp", 47)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogMessageFacility.setStatus('current')
syslogMessageSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 14, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emergencies", 1), ("alerts", 2), ("critical", 3), ("errors", 4), ("warnings", 5), ("notification", 6), ("informational", 7), ("debugging", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogMessageSeverity.setStatus('current')
syslogTimeStampOption = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 14, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogTimeStampOption.setStatus('current')
syslogTelnetEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 14, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogTelnetEnable.setStatus('current')
ntpBcastClient = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpBcastClient.setStatus('current')
ntpBcastDelay = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 15, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999999)).clone(3000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpBcastDelay.setStatus('current')
ntpClient = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 15, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpClient.setStatus('current')
ntpServerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 1, 15, 4), )
if mibBuilder.loadTexts: ntpServerTable.setStatus('current')
ntpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 1, 15, 4, 1), ).setIndexNames((0, "CISCO-STACK-MIB", "ntpServerAddress"))
if mibBuilder.loadTexts: ntpServerEntry.setStatus('current')
ntpServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 15, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpServerAddress.setStatus('current')
ntpServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 15, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpServerType.setStatus('current')
ntpServerPublicKey = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 15, 4, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpServerPublicKey.setStatus('current')
ntpSummertimeStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 15, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpSummertimeStatus.setStatus('current')
ntpSummerTimezoneName = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 15, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpSummerTimezoneName.setStatus('current')
ntpTimezoneName = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 15, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpTimezoneName.setStatus('current')
ntpTimezoneOffsetHour = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 15, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-12, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpTimezoneOffsetHour.setStatus('current')
ntpTimezoneOffsetMinute = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 15, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpTimezoneOffsetMinute.setStatus('current')
ntpAuthenticationEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 15, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpAuthenticationEnable.setStatus('current')
ntpAuthenticationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 1, 15, 11), )
if mibBuilder.loadTexts: ntpAuthenticationTable.setStatus('current')
ntpAuthenticationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 1, 15, 11, 1), ).setIndexNames((0, "CISCO-STACK-MIB", "ntpAuthenticationPublicKey"))
if mibBuilder.loadTexts: ntpAuthenticationEntry.setStatus('current')
ntpAuthenticationPublicKey = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 15, 11, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpAuthenticationPublicKey.setStatus('current')
ntpAuthenticationSecretKey = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 15, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpAuthenticationSecretKey.setStatus('current')
ntpAuthenticationTrustedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 15, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trusted", 1), ("untrusted", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpAuthenticationTrustedMode.setStatus('current')
ntpAuthenticationType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 15, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpAuthenticationType.setStatus('current')
tacacsLoginAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("enabledForTelnetOnly", 3), ("enabledForConsoleOnly", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsLoginAuthentication.setStatus('deprecated')
tacacsEnableAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 16, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("enabledForTelnetOnly", 3), ("enabledForConsoleOnly", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsEnableAuthentication.setStatus('deprecated')
tacacsLocalLoginAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 16, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("enabledForTelnetOnly", 3), ("enabledForConsoleOnly", 4))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsLocalLoginAuthentication.setStatus('deprecated')
tacacsLocalEnableAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 16, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("enabledForTelnetOnly", 3), ("enabledForConsoleOnly", 4))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsLocalEnableAuthentication.setStatus('deprecated')
tacacsNumLoginAttempts = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 16, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsNumLoginAttempts.setStatus('deprecated')
tacacsDirectedRequest = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 16, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsDirectedRequest.setStatus('current')
tacacsTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 16, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsTimeout.setStatus('deprecated')
tacacsAuthKey = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 16, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsAuthKey.setStatus('current')
tacacsServerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 1, 16, 9), )
if mibBuilder.loadTexts: tacacsServerTable.setStatus('current')
tacacsServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 1, 16, 9, 1), ).setIndexNames((0, "CISCO-STACK-MIB", "tacacsServerAddr"))
if mibBuilder.loadTexts: tacacsServerEntry.setStatus('current')
tacacsServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 16, 9, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacacsServerAddr.setStatus('current')
tacacsServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 16, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("primary", 2), ("other", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tacacsServerType.setStatus('current')
ipPermitEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("enabledForTelnetOnly", 3), ("enabledForSnmpOnly", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPermitEnable.setStatus('deprecated')
ipPermitListTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 1, 17, 2), )
if mibBuilder.loadTexts: ipPermitListTable.setStatus('current')
ipPermitListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 1, 17, 2, 1), ).setIndexNames((0, "CISCO-STACK-MIB", "ipPermitAddress"), (0, "CISCO-STACK-MIB", "ipPermitMask"))
if mibBuilder.loadTexts: ipPermitListEntry.setStatus('current')
ipPermitAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 17, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPermitAddress.setStatus('current')
ipPermitMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 17, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPermitMask.setStatus('current')
ipPermitType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 17, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipPermitType.setStatus('current')
ipPermitAccessType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 17, 2, 1, 4), Bits().clone(namedValues=NamedValues(("telnet", 0), ("snmp", 1), ("ssh", 2), ("http", 3))).clone(namedValues=NamedValues(("telnet", 0), ("snmp", 1), ("ssh", 2), ("http", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipPermitAccessType.setStatus('current')
ipPermitTelnetConnectLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 17, 2, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipPermitTelnetConnectLimit.setStatus('current')
ipPermitSshConnectLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 17, 2, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipPermitSshConnectLimit.setStatus('current')
ipPermitDeniedListTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 1, 17, 3), )
if mibBuilder.loadTexts: ipPermitDeniedListTable.setStatus('current')
ipPermitDeniedListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 1, 17, 3, 1), ).setIndexNames((0, "CISCO-STACK-MIB", "ipPermitDeniedAddress"))
if mibBuilder.loadTexts: ipPermitDeniedListEntry.setStatus('current')
ipPermitDeniedAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 17, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPermitDeniedAddress.setStatus('current')
ipPermitDeniedAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 17, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("telnet", 1), ("snmp", 2), ("ssh", 3), ("http", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPermitDeniedAccess.setStatus('current')
ipPermitDeniedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 17, 3, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPermitDeniedTime.setStatus('current')
ipPermitAccessTypeEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 17, 4), Bits().clone(namedValues=NamedValues(("telnet", 0), ("snmp", 1), ("ssh", 2), ("http", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPermitAccessTypeEnable.setStatus('current')
portChannelTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 1, 18, 1), )
if mibBuilder.loadTexts: portChannelTable.setStatus('deprecated')
portChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 1, 18, 1, 1), ).setIndexNames((0, "CISCO-STACK-MIB", "portChannelModuleIndex"), (0, "CISCO-STACK-MIB", "portChannelPortIndex"))
if mibBuilder.loadTexts: portChannelEntry.setStatus('deprecated')
portChannelModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 18, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portChannelModuleIndex.setStatus('deprecated')
portChannelPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 18, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portChannelPortIndex.setStatus('deprecated')
portChannelPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 18, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portChannelPorts.setStatus('deprecated')
portChannelAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 18, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("desirable", 3), ("auto", 4), ("desirableSilent", 5), ("autoSilent", 6))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portChannelAdminStatus.setStatus('deprecated')
portChannelOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 18, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("channelling", 1), ("notChannelling", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portChannelOperStatus.setStatus('deprecated')
portChannelNeighbourDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 18, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: portChannelNeighbourDeviceId.setStatus('deprecated')
portChannelNeighbourPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 18, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portChannelNeighbourPortId.setStatus('deprecated')
portChannelProtInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 18, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portChannelProtInPackets.setStatus('deprecated')
portChannelProtOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 18, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portChannelProtOutPackets.setStatus('deprecated')
portChannelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 18, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portChannelIfIndex.setStatus('deprecated')
portCpbTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 1, 19, 1), )
if mibBuilder.loadTexts: portCpbTable.setStatus('current')
portCpbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 1, 19, 1, 1), ).setIndexNames((0, "CISCO-STACK-MIB", "portCpbModuleIndex"), (0, "CISCO-STACK-MIB", "portCpbPortIndex"))
if mibBuilder.loadTexts: portCpbEntry.setStatus('current')
portCpbModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 19, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCpbModuleIndex.setStatus('current')
portCpbPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 19, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCpbPortIndex.setStatus('current')
portCpbSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 19, 1, 1, 3), Bits().clone(namedValues=NamedValues(("auto", 0), ("mbps4", 1), ("mbps10", 2), ("mbps16", 3), ("mbps45", 4), ("mbps100", 5), ("mbps155", 6), ("mbps400", 7), ("mbps622", 8), ("mbps1000", 9), ("mbps1dot544", 10), ("mbps2", 11), ("mbps2dot048", 12), ("kps64", 13), ("mbps10000", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCpbSpeed.setStatus('current')
portCpbDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 19, 1, 1, 4), Bits().clone(namedValues=NamedValues(("half", 0), ("full", 1), ("auto", 2), ("hdx", 3), ("fdx", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCpbDuplex.setStatus('current')
portCpbTrunkEncapsulationType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 19, 1, 1, 5), Bits().clone(namedValues=NamedValues(("lane", 0), ("dot10", 1), ("dot1Q", 2), ("isl", 3), ("negotiate", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCpbTrunkEncapsulationType.setStatus('current')
portCpbTrunkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 19, 1, 1, 6), Bits().clone(namedValues=NamedValues(("on", 0), ("off", 1), ("desirable", 2), ("auto", 3), ("onNoNegotiate", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCpbTrunkMode.setStatus('current')
portCpbChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 19, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCpbChannel.setStatus('current')
portCpbBroadcastSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 19, 1, 1, 8), Bits().clone(namedValues=NamedValues(("pps", 0), ("percentage", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCpbBroadcastSuppression.setStatus('current')
portCpbFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 19, 1, 1, 9), Bits().clone(namedValues=NamedValues(("receiveOff", 0), ("receiveOn", 1), ("receiveDesired", 2), ("sendOff", 3), ("sendOn", 4), ("sendDesired", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCpbFlowControl.setStatus('current')
portCpbSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 19, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCpbSecurity.setStatus('current')
portCpbVlanMembership = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 19, 1, 1, 11), Bits().clone(namedValues=NamedValues(("static", 0), ("dynamic", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCpbVlanMembership.setStatus('current')
portCpbPortfast = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 19, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCpbPortfast.setStatus('current')
portCpbUdld = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 19, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCpbUdld.setStatus('current')
portCpbInlinePower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 19, 1, 1, 14), Bits().clone(namedValues=NamedValues(("auto", 0), ("on", 1), ("off", 2), ("static", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCpbInlinePower.setStatus('current')
portCpbAuxiliaryVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 19, 1, 1, 15), Bits().clone(namedValues=NamedValues(("vlanNo", 0), ("untagged", 1), ("dot1p", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCpbAuxiliaryVlan.setStatus('current')
portCpbSpan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 19, 1, 1, 16), Bits().clone(namedValues=NamedValues(("source", 0), ("destination", 1), ("reflector", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCpbSpan.setStatus('current')
portCpbCosRewrite = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 19, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCpbCosRewrite.setStatus('current')
portCpbTosRewrite = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 19, 1, 1, 18), Bits().clone(namedValues=NamedValues(("dscp", 0), ("ipPrecedence", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCpbTosRewrite.setStatus('current')
portCpbCopsGrouping = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 19, 1, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCpbCopsGrouping.setStatus('current')
portCpbDot1x = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 19, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCpbDot1x.setStatus('current')
portCpbIgmpFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 19, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portCpbIgmpFilter.setStatus('current')
portTopNControlTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 1), )
if mibBuilder.loadTexts: portTopNControlTable.setStatus('current')
portTopNControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 1, 1), ).setIndexNames((0, "CISCO-STACK-MIB", "portTopNControlIndex"))
if mibBuilder.loadTexts: portTopNControlEntry.setStatus('current')
portTopNControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTopNControlIndex.setStatus('current')
portTopNRateBase = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("portTopNUtilization", 1), ("portTopNIOOctets", 2), ("portTopNIOPkts", 3), ("portTopNIOBroadcastPkts", 4), ("portTopNIOMulticastPkts", 5), ("portTopNInErrors", 6), ("portTopNBufferOverflow", 7))).clone('portTopNUtilization')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portTopNRateBase.setStatus('current')
portTopNType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("portTopNAllPorts", 1), ("portTopNEthernet", 2), ("portTopNFastEthernet", 3), ("portTopNGigaEthernet", 4), ("portTopNTokenRing", 5), ("portTopNFDDI", 6), ("portTopNAllEthernetPorts", 7), ("portTopN10GigaEthernet", 8))).clone('portTopNAllPorts')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portTopNType.setStatus('current')
portTopNMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("portTopNForeground", 1), ("portTopNBackground", 2))).clone('portTopNBackground')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portTopNMode.setStatus('current')
portTopNReportStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("progressing", 1), ("ready", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTopNReportStatus.setStatus('current')
portTopNDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(10, 999), )).clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portTopNDuration.setStatus('current')
portTopNTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTopNTimeRemaining.setStatus('current')
portTopNStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 1, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTopNStartTime.setStatus('current')
portTopNRequestedSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portTopNRequestedSize.setStatus('current')
portTopNGrantedSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTopNGrantedSize.setStatus('current')
portTopNOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 1, 1, 11), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portTopNOwner.setStatus('current')
portTopNStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portTopNStatus.setStatus('current')
portTopNTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 2), )
if mibBuilder.loadTexts: portTopNTable.setStatus('current')
portTopNEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 2, 1), ).setIndexNames((0, "CISCO-STACK-MIB", "portTopNControlIndex"), (0, "CISCO-STACK-MIB", "portTopNIndex"))
if mibBuilder.loadTexts: portTopNEntry.setStatus('current')
portTopNIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTopNIndex.setStatus('current')
portTopNModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTopNModuleNumber.setStatus('current')
portTopNPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTopNPortNumber.setStatus('current')
portTopNUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTopNUtilization.setStatus('current')
portTopNIOOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTopNIOOctets.setStatus('current')
portTopNIOPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTopNIOPkts.setStatus('current')
portTopNIOBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTopNIOBroadcast.setStatus('current')
portTopNIOMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTopNIOMulticast.setStatus('current')
portTopNInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTopNInErrors.setStatus('current')
portTopNBufferOverFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 20, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTopNBufferOverFlow.setStatus('current')
mdgGatewayTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 1, 21, 1), )
if mibBuilder.loadTexts: mdgGatewayTable.setStatus('current')
mdgGatewayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 1, 21, 1, 1), ).setIndexNames((0, "CISCO-STACK-MIB", "mdgGatewayAddr"))
if mibBuilder.loadTexts: mdgGatewayEntry.setStatus('current')
mdgGatewayAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 21, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdgGatewayAddr.setStatus('current')
mdgGatewayType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 21, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("primary", 2), ("other", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mdgGatewayType.setStatus('current')
radiusLoginAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 22, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("enabledForTelnetOnly", 3), ("enabledForConsoleOnly", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusLoginAuthentication.setStatus('deprecated')
radiusEnableAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 22, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("enabledForTelnetOnly", 3), ("enabledForConsoleOnly", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusEnableAuthentication.setStatus('deprecated')
radiusDeadtime = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 22, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusDeadtime.setStatus('current')
radiusAuthKey = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 22, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAuthKey.setStatus('current')
radiusTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 22, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusTimeout.setStatus('current')
radiusRetransmits = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 22, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusRetransmits.setStatus('current')
radiusServerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 1, 22, 7), )
if mibBuilder.loadTexts: radiusServerTable.setStatus('deprecated')
radiusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 1, 22, 7, 1), ).setIndexNames((0, "CISCO-STACK-MIB", "radiusServerAddr"))
if mibBuilder.loadTexts: radiusServerEntry.setStatus('deprecated')
radiusServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 22, 7, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusServerAddr.setStatus('deprecated')
radiusServerAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 22, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1812)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radiusServerAuthPort.setStatus('deprecated')
radiusServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 22, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("primary", 2), ("other", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radiusServerType.setStatus('deprecated')
traceRouteMaxQueries = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRouteMaxQueries.setStatus('current')
traceRouteQueryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 2), )
if mibBuilder.loadTexts: traceRouteQueryTable.setStatus('current')
traceRouteQueryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 2, 1), ).setIndexNames((0, "CISCO-STACK-MIB", "traceRouteQueryIndex"))
if mibBuilder.loadTexts: traceRouteQueryEntry.setStatus('current')
traceRouteQueryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRouteQueryIndex.setStatus('current')
traceRouteHost = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: traceRouteHost.setStatus('current')
traceRouteQueryDNSEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: traceRouteQueryDNSEnable.setStatus('current')
traceRouteQueryWaitingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: traceRouteQueryWaitingTime.setStatus('current')
traceRouteQueryInitTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: traceRouteQueryInitTTL.setStatus('current')
traceRouteQueryMaxTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: traceRouteQueryMaxTTL.setStatus('current')
traceRouteQueryUDPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(33434)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: traceRouteQueryUDPPort.setStatus('current')
traceRouteQueryPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: traceRouteQueryPacketCount.setStatus('current')
traceRouteQueryPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1420))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: traceRouteQueryPacketSize.setStatus('current')
traceRouteQueryTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: traceRouteQueryTOS.setStatus('current')
traceRouteQueryResult = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRouteQueryResult.setStatus('current')
traceRouteQueryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 2, 1, 22), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRouteQueryTime.setStatus('current')
traceRouteQueryOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 2, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: traceRouteQueryOwner.setStatus('current')
traceRouteQueryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: traceRouteQueryStatus.setStatus('current')
traceRouteDataTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 3), )
if mibBuilder.loadTexts: traceRouteDataTable.setStatus('current')
traceRouteDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 3, 1), ).setIndexNames((0, "CISCO-STACK-MIB", "traceRouteQueryIndex"), (0, "CISCO-STACK-MIB", "traceRouteDataIndex"))
if mibBuilder.loadTexts: traceRouteDataEntry.setStatus('current')
traceRouteDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRouteDataIndex.setStatus('current')
traceRouteDataGatewayName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRouteDataGatewayName.setStatus('current')
traceRouteDataGatewayIp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRouteDataGatewayIp.setStatus('current')
traceRouteDataRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRouteDataRtt.setStatus('current')
traceRouteDataHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRouteDataHopCount.setStatus('current')
traceRouteDataErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 24, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("icmpUnreachNet", 1), ("icmpUnreachHost", 2), ("icmpUnreachProtocol", 3), ("icmpUnreachPort", 4), ("icmpUnreachNeedFrag", 5), ("icmpUnreachSrcFail", 6), ("icmpUnreachNoNet", 7), ("icmpUnreachNoHost", 8), ("icmpUnreachHostIsolated", 9), ("icmpUnreachNetProhib", 10), ("icmpUnreachProhib", 11), ("icmpUnreachNetTos", 12), ("icmpUnreachHostTos", 13), ("icmpUnreachAdmin", 14), ("icmpUnreachHostPrec", 15), ("icmpUnreachPrecedence", 16), ("icmpUnknown", 17), ("icmpTimeOut", 18), ("icmpTTLExpired", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: traceRouteDataErrors.setStatus('current')
fileCopyProtocol = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tftp", 1), ("rcp", 2))).clone('tftp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyProtocol.setStatus('current')
fileCopyRemoteServer = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 25, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyRemoteServer.setStatus('current')
fileCopySrcFileName = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 25, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopySrcFileName.setStatus('current')
fileCopyDstFileName = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 25, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyDstFileName.setStatus('current')
fileCopyModuleNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 25, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyModuleNumber.setStatus('current')
fileCopyUserName = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 25, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyUserName.setStatus('current')
fileCopyAction = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 25, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("other", 1), ("copyConfigFromHostToRuntime", 2), ("copyConfigFromRuntimeToHost", 3), ("copyImageFromHostToFlash", 4), ("copyImageFromFlashToHost", 5), ("copyConfigFromFlashToRuntime", 8), ("copyConfigFromRuntimeToFlash", 9), ("copyConfigFileFromHostToFlash", 10), ("copyConfigFileFromFlashToHost", 11), ("copyTechReportFromRuntimeToHost", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyAction.setStatus('current')
fileCopyResult = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 25, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))).clone(namedValues=NamedValues(("inProgress", 1), ("success", 2), ("noResponse", 3), ("tooManyRetries", 4), ("noBuffers", 5), ("noProcesses", 6), ("badChecksum", 7), ("badLength", 8), ("badFlash", 9), ("serverError", 10), ("userCanceled", 11), ("wrongCode", 12), ("fileNotFound", 13), ("invalidHost", 14), ("invalidModule", 15), ("accessViolation", 16), ("unknownStatus", 17), ("invalidStorageDevice", 18), ("insufficientSpaceOnStorageDevice", 19), ("insufficientDramSize", 20), ("incompatibleImage", 21), ("rcpError", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileCopyResult.setStatus('current')
fileCopyResultRcpErrorMessage = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 25, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileCopyResultRcpErrorMessage.setStatus('current')
fileCopyRuntimeConfigPart = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 25, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("all", 1), ("nonDefault", 2))).clone('all')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyRuntimeConfigPart.setStatus('current')
voicePortIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 1, 26, 1), )
if mibBuilder.loadTexts: voicePortIfConfigTable.setStatus('current')
voicePortIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 1, 26, 1, 1), ).setIndexNames((0, "CISCO-STACK-MIB", "voicePortIfConfigModuleIndex"), (0, "CISCO-STACK-MIB", "voicePortIfConfigPortIndex"))
if mibBuilder.loadTexts: voicePortIfConfigEntry.setStatus('current')
voicePortIfConfigModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 26, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: voicePortIfConfigModuleIndex.setStatus('current')
voicePortIfConfigPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 26, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: voicePortIfConfigPortIndex.setStatus('current')
voicePortIfDHCPEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 26, 1, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voicePortIfDHCPEnabled.setStatus('current')
voicePortIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 26, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voicePortIfIpAddress.setStatus('current')
voicePortIfIpNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 26, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voicePortIfIpNetMask.setStatus('current')
voicePortIfTftpServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 26, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voicePortIfTftpServerAddress.setStatus('current')
voicePortIfGatewayAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 26, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voicePortIfGatewayAddress.setStatus('current')
voicePortIfDnsServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 26, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voicePortIfDnsServerAddress.setStatus('current')
voicePortIfDnsDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 26, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voicePortIfDnsDomain.setStatus('current')
voicePortIfOperDnsDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 26, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicePortIfOperDnsDomain.setStatus('current')
voicePortCallManagerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 1, 26, 2), )
if mibBuilder.loadTexts: voicePortCallManagerTable.setStatus('current')
voicePortCallManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 1, 26, 2, 1), ).setIndexNames((0, "CISCO-STACK-MIB", "voicePortModuleIndex"), (0, "CISCO-STACK-MIB", "voicePortIndex"), (0, "CISCO-STACK-MIB", "voicePortCallManagerIndex"))
if mibBuilder.loadTexts: voicePortCallManagerEntry.setStatus('current')
voicePortModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 26, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: voicePortModuleIndex.setStatus('current')
voicePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 26, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: voicePortIndex.setStatus('current')
voicePortCallManagerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 26, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: voicePortCallManagerIndex.setStatus('current')
voicePortCallManagerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 26, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicePortCallManagerIpAddr.setStatus('current')
voicePortOperDnsServerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 1, 26, 3), )
if mibBuilder.loadTexts: voicePortOperDnsServerTable.setStatus('current')
voicePortOperDnsServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 1, 26, 3, 1), ).setIndexNames((0, "CISCO-STACK-MIB", "voicePortDnsModuleIndex"), (0, "CISCO-STACK-MIB", "voicePortDnsPortIndex"), (0, "CISCO-STACK-MIB", "voicePortOperDnsServerIndex"))
if mibBuilder.loadTexts: voicePortOperDnsServerEntry.setStatus('current')
voicePortDnsModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 26, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: voicePortDnsModuleIndex.setStatus('current')
voicePortDnsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 26, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: voicePortDnsPortIndex.setStatus('current')
voicePortOperDnsServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 26, 3, 1, 3), Unsigned32())
if mibBuilder.loadTexts: voicePortOperDnsServerIndex.setStatus('current')
voicePortOperDnsServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 26, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicePortOperDnsServerIpAddr.setStatus('current')
voicePortOperDnsServerSource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 26, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fromDhcp", 1), ("fromPortConfig", 2), ("fromSystemConfig", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voicePortOperDnsServerSource.setStatus('current')
portJumboFrameTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 1, 27, 1), )
if mibBuilder.loadTexts: portJumboFrameTable.setStatus('current')
portJumboFrameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 1, 27, 1, 1), ).setIndexNames((0, "CISCO-STACK-MIB", "portJumboFrameModuleIndex"), (0, "CISCO-STACK-MIB", "portJumboFramePortIndex"))
if mibBuilder.loadTexts: portJumboFrameEntry.setStatus('current')
portJumboFrameModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 27, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portJumboFrameModuleIndex.setStatus('current')
portJumboFramePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 27, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portJumboFramePortIndex.setStatus('current')
portJumboFrameEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 27, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portJumboFrameEnable.setStatus('current')
switchAccelerationModuleTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 1, 28, 1), )
if mibBuilder.loadTexts: switchAccelerationModuleTable.setStatus('current')
switchAccelerationModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 1, 28, 1, 1), ).setIndexNames((0, "CISCO-STACK-MIB", "switchAccelerationModuleIndex"))
if mibBuilder.loadTexts: switchAccelerationModuleEntry.setStatus('current')
switchAccelerationModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 28, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchAccelerationModuleIndex.setStatus('current')
switchAccelerationModuleEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 1, 28, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchAccelerationModuleEnable.setStatus('current')
configMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 29, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("binary", 1), ("text", 2))).clone('binary')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configMode.setStatus('current')
configTextFileLocation = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 29, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configTextFileLocation.setStatus('current')
configWriteMem = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 29, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configWriteMem.setStatus('current')
configWriteMemStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 1, 29, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("inProgress", 1), ("succeeded", 2), ("resourceUnavailable", 3), ("badFileName", 4), ("someOtherError", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configWriteMemStatus.setStatus('current')
ciscoStackNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 0))
lerAlarmOn = NotificationType((1, 3, 6, 1, 4, 1, 9, 5, 0, 1)).setObjects(("FDDI-SMT73-MIB", "fddimibPORTSMTIndex"), ("FDDI-SMT73-MIB", "fddimibPORTIndex"))
if mibBuilder.loadTexts: lerAlarmOn.setStatus('current')
lerAlarmOff = NotificationType((1, 3, 6, 1, 4, 1, 9, 5, 0, 2)).setObjects(("FDDI-SMT73-MIB", "fddimibPORTSMTIndex"), ("FDDI-SMT73-MIB", "fddimibPORTIndex"))
if mibBuilder.loadTexts: lerAlarmOff.setStatus('current')
moduleUp = NotificationType((1, 3, 6, 1, 4, 1, 9, 5, 0, 3)).setObjects(("CISCO-STACK-MIB", "moduleIndex"), ("CISCO-STACK-MIB", "moduleType"))
if mibBuilder.loadTexts: moduleUp.setStatus('current')
moduleDown = NotificationType((1, 3, 6, 1, 4, 1, 9, 5, 0, 4)).setObjects(("CISCO-STACK-MIB", "moduleIndex"), ("CISCO-STACK-MIB", "moduleType"))
if mibBuilder.loadTexts: moduleDown.setStatus('current')
chassisAlarmOn = NotificationType((1, 3, 6, 1, 4, 1, 9, 5, 0, 5)).setObjects(("CISCO-STACK-MIB", "chassisTempAlarm"), ("CISCO-STACK-MIB", "chassisMinorAlarm"), ("CISCO-STACK-MIB", "chassisMajorAlarm"))
if mibBuilder.loadTexts: chassisAlarmOn.setStatus('current')
chassisAlarmOff = NotificationType((1, 3, 6, 1, 4, 1, 9, 5, 0, 6)).setObjects(("CISCO-STACK-MIB", "chassisTempAlarm"), ("CISCO-STACK-MIB", "chassisMinorAlarm"), ("CISCO-STACK-MIB", "chassisMajorAlarm"))
if mibBuilder.loadTexts: chassisAlarmOff.setStatus('current')
ipPermitDeniedTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 5, 0, 7)).setObjects(("CISCO-STACK-MIB", "ipPermitDeniedAddress"), ("CISCO-STACK-MIB", "ipPermitDeniedAccess"))
if mibBuilder.loadTexts: ipPermitDeniedTrap.setStatus('current')
sysConfigChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 5, 0, 9)).setObjects(("CISCO-STACK-MIB", "sysConfigChangeTime"), ("CISCO-STACK-MIB", "sysConfigChangeInfo"))
if mibBuilder.loadTexts: sysConfigChangeTrap.setStatus('current')
tokenRingSoftErrExceededTrap = NotificationType((1, 3, 6, 1, 4, 1, 9, 5, 0, 10)).setObjects(("TOKEN-RING-RMON-MIB", "ringStationMacAddress"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: tokenRingSoftErrExceededTrap.setStatus('current')
ciscoStackMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 1, 31))
ciscoStackMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 1))
ciscoStackMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2))
ciscoStackgMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 1, 1)).setObjects(("CISCO-STACK-MIB", "systemMiscGroup"), ("CISCO-STACK-MIB", "systemTrapGroup"), ("CISCO-STACK-MIB", "chassisGroup"), ("CISCO-STACK-MIB", "moduleGroup"), ("CISCO-STACK-MIB", "portGroup"), ("CISCO-STACK-MIB", "optionalSystemMiscGroup"), ("CISCO-STACK-MIB", "optionalSystemTrapGroup"), ("CISCO-STACK-MIB", "optionalChassisGroup"), ("CISCO-STACK-MIB", "optionalModuleGroup"), ("CISCO-STACK-MIB", "optionalPortGroup"), ("CISCO-STACK-MIB", "systemTrafficGroup"), ("CISCO-STACK-MIB", "systemFddiGroup"), ("CISCO-STACK-MIB", "systemRmonGroup"), ("CISCO-STACK-MIB", "authenticationGroup"), ("CISCO-STACK-MIB", "tftpGroup"), ("CISCO-STACK-MIB", "brouteEnableGroup"), ("CISCO-STACK-MIB", "filterGroup"), ("CISCO-STACK-MIB", "monitorGroup"), ("CISCO-STACK-MIB", "vlanGroup"), ("CISCO-STACK-MIB", "vmpsGroup"), ("CISCO-STACK-MIB", "tokenRingGroup"), ("CISCO-STACK-MIB", "mcastGroup"), ("CISCO-STACK-MIB", "dnsGroup"), ("CISCO-STACK-MIB", "syslogGroup"), ("CISCO-STACK-MIB", "ntpGroup"), ("CISCO-STACK-MIB", "ipPermitGroup"), ("CISCO-STACK-MIB", "mdgGatewayGroup"), ("CISCO-STACK-MIB", "traceRouteGroup"), ("CISCO-STACK-MIB", "ntpAuthenticationGroup"), ("CISCO-STACK-MIB", "tokenRingSoftErrorMonitorGroup"), ("CISCO-STACK-MIB", "portCpbGroup1"), ("CISCO-STACK-MIB", "portSecurityGroup1"), ("CISCO-STACK-MIB", "fileCopyGroup"), ("CISCO-STACK-MIB", "optionalSystemMiscGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoStackgMIBCompliance = ciscoStackgMIBCompliance.setStatus('deprecated')
ciscoStackgMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 1, 2)).setObjects(("CISCO-STACK-MIB", "systemMiscGroup"), ("CISCO-STACK-MIB", "systemTrapGroup"), ("CISCO-STACK-MIB", "chassisGroup"), ("CISCO-STACK-MIB", "moduleGroup"), ("CISCO-STACK-MIB", "portGroup"), ("CISCO-STACK-MIB", "optionalSystemMiscGroup"), ("CISCO-STACK-MIB", "optionalSystemTrapGroup"), ("CISCO-STACK-MIB", "optionalChassisGroup"), ("CISCO-STACK-MIB", "optionalModuleGroup"), ("CISCO-STACK-MIB", "optionalPortGroup"), ("CISCO-STACK-MIB", "systemTrafficGroup"), ("CISCO-STACK-MIB", "systemFddiGroup"), ("CISCO-STACK-MIB", "systemRmonGroup"), ("CISCO-STACK-MIB", "authenticationGroup"), ("CISCO-STACK-MIB", "tftpGroup"), ("CISCO-STACK-MIB", "brouteEnableGroup"), ("CISCO-STACK-MIB", "filterGroup"), ("CISCO-STACK-MIB", "monitorGroup"), ("CISCO-STACK-MIB", "vlanGroup"), ("CISCO-STACK-MIB", "vmpsGroup"), ("CISCO-STACK-MIB", "tokenRingGroup"), ("CISCO-STACK-MIB", "mcastGroup"), ("CISCO-STACK-MIB", "dnsGroup"), ("CISCO-STACK-MIB", "syslogGroup"), ("CISCO-STACK-MIB", "ntpGroup"), ("CISCO-STACK-MIB", "ipPermitGroup"), ("CISCO-STACK-MIB", "mdgGatewayGroup"), ("CISCO-STACK-MIB", "traceRouteGroup"), ("CISCO-STACK-MIB", "ntpAuthenticationGroup"), ("CISCO-STACK-MIB", "tokenRingSoftErrorMonitorGroup"), ("CISCO-STACK-MIB", "portCpbGroup1"), ("CISCO-STACK-MIB", "portSecurityGroup1"), ("CISCO-STACK-MIB", "fileCopyGroup"), ("CISCO-STACK-MIB", "optionalSystemMiscGroup1"), ("CISCO-STACK-MIB", "ipPermitGroup1"), ("CISCO-STACK-MIB", "optionalSystemMiscGroup2"), ("CISCO-STACK-MIB", "filterGroup1"), ("CISCO-STACK-MIB", "mcastGroup1"), ("CISCO-STACK-MIB", "portGroup1"), ("CISCO-STACK-MIB", "chassisGroup1"), ("CISCO-STACK-MIB", "moduleGroup1"), ("CISCO-STACK-MIB", "portCpbGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoStackgMIBCompliance2 = ciscoStackgMIBCompliance2.setStatus('deprecated')
ciscoStackgMIBCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 1, 3)).setObjects(("CISCO-STACK-MIB", "systemMiscGroup"), ("CISCO-STACK-MIB", "systemTrapGroup"), ("CISCO-STACK-MIB", "chassisGroup"), ("CISCO-STACK-MIB", "moduleGroup"), ("CISCO-STACK-MIB", "portGroup"), ("CISCO-STACK-MIB", "optionalSystemMiscGroup"), ("CISCO-STACK-MIB", "optionalSystemTrapGroup"), ("CISCO-STACK-MIB", "optionalChassisGroup"), ("CISCO-STACK-MIB", "optionalModuleGroup"), ("CISCO-STACK-MIB", "optionalPortGroup"), ("CISCO-STACK-MIB", "systemTrafficGroup"), ("CISCO-STACK-MIB", "systemFddiGroup"), ("CISCO-STACK-MIB", "systemRmonGroup"), ("CISCO-STACK-MIB", "authenticationGroup"), ("CISCO-STACK-MIB", "tftpGroup"), ("CISCO-STACK-MIB", "brouteEnableGroup"), ("CISCO-STACK-MIB", "filterGroup"), ("CISCO-STACK-MIB", "monitorGroup"), ("CISCO-STACK-MIB", "vlanGroup"), ("CISCO-STACK-MIB", "vmpsGroup"), ("CISCO-STACK-MIB", "tokenRingGroup"), ("CISCO-STACK-MIB", "mcastGroup"), ("CISCO-STACK-MIB", "dnsGroup"), ("CISCO-STACK-MIB", "syslogGroup"), ("CISCO-STACK-MIB", "ntpGroup"), ("CISCO-STACK-MIB", "ipPermitGroup"), ("CISCO-STACK-MIB", "mdgGatewayGroup"), ("CISCO-STACK-MIB", "traceRouteGroup"), ("CISCO-STACK-MIB", "ntpAuthenticationGroup"), ("CISCO-STACK-MIB", "tokenRingSoftErrorMonitorGroup"), ("CISCO-STACK-MIB", "portCpbGroup1"), ("CISCO-STACK-MIB", "portSecurityGroup1"), ("CISCO-STACK-MIB", "fileCopyGroup"), ("CISCO-STACK-MIB", "optionalSystemMiscGroup1"), ("CISCO-STACK-MIB", "ipPermitGroup1"), ("CISCO-STACK-MIB", "optionalSystemMiscGroup2"), ("CISCO-STACK-MIB", "filterGroup1"), ("CISCO-STACK-MIB", "mcastGroup1"), ("CISCO-STACK-MIB", "portGroup1"), ("CISCO-STACK-MIB", "chassisGroup1"), ("CISCO-STACK-MIB", "moduleGroup1"), ("CISCO-STACK-MIB", "portCpbGroup2"), ("CISCO-STACK-MIB", "voiceGroup"), ("CISCO-STACK-MIB", "moduleGroup2"), ("CISCO-STACK-MIB", "portCpbGroup3"), ("CISCO-STACK-MIB", "vlanGroup1"), ("CISCO-STACK-MIB", "portGroup2"), ("CISCO-STACK-MIB", "switchAccelerationModuleGroup"), ("CISCO-STACK-MIB", "optionalSystemMiscGroup3"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoStackgMIBCompliance3 = ciscoStackgMIBCompliance3.setStatus('deprecated')
ciscoStackgMIBCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 1, 4)).setObjects(("CISCO-STACK-MIB", "systemMiscGroup"), ("CISCO-STACK-MIB", "systemTrapGroup"), ("CISCO-STACK-MIB", "chassisGroup"), ("CISCO-STACK-MIB", "moduleGroup"), ("CISCO-STACK-MIB", "portGroup"), ("CISCO-STACK-MIB", "optionalSystemMiscGroup"), ("CISCO-STACK-MIB", "optionalSystemTrapGroup"), ("CISCO-STACK-MIB", "optionalChassisGroup"), ("CISCO-STACK-MIB", "optionalModuleGroup"), ("CISCO-STACK-MIB", "optionalPortGroup"), ("CISCO-STACK-MIB", "systemTrafficGroup"), ("CISCO-STACK-MIB", "systemFddiGroup"), ("CISCO-STACK-MIB", "systemRmonGroup"), ("CISCO-STACK-MIB", "authenticationGroup"), ("CISCO-STACK-MIB", "tftpGroup"), ("CISCO-STACK-MIB", "brouteEnableGroup"), ("CISCO-STACK-MIB", "filterGroup"), ("CISCO-STACK-MIB", "monitorGroup"), ("CISCO-STACK-MIB", "vlanGroup"), ("CISCO-STACK-MIB", "vmpsGroup"), ("CISCO-STACK-MIB", "tokenRingGroup"), ("CISCO-STACK-MIB", "mcastGroup"), ("CISCO-STACK-MIB", "dnsGroup"), ("CISCO-STACK-MIB", "syslogGroup"), ("CISCO-STACK-MIB", "ntpGroup"), ("CISCO-STACK-MIB", "ipPermitGroup"), ("CISCO-STACK-MIB", "mdgGatewayGroup"), ("CISCO-STACK-MIB", "traceRouteGroup"), ("CISCO-STACK-MIB", "ntpAuthenticationGroup"), ("CISCO-STACK-MIB", "tokenRingSoftErrorMonitorGroup"), ("CISCO-STACK-MIB", "portCpbGroup1"), ("CISCO-STACK-MIB", "portSecurityGroup1"), ("CISCO-STACK-MIB", "fileCopyGroup"), ("CISCO-STACK-MIB", "optionalSystemMiscGroup1"), ("CISCO-STACK-MIB", "ipPermitGroup1"), ("CISCO-STACK-MIB", "optionalSystemMiscGroup2"), ("CISCO-STACK-MIB", "filterGroup1"), ("CISCO-STACK-MIB", "mcastGroup1"), ("CISCO-STACK-MIB", "portGroup1"), ("CISCO-STACK-MIB", "chassisGroup1"), ("CISCO-STACK-MIB", "moduleGroup1"), ("CISCO-STACK-MIB", "portCpbGroup2"), ("CISCO-STACK-MIB", "voiceGroup"), ("CISCO-STACK-MIB", "moduleGroup2"), ("CISCO-STACK-MIB", "portCpbGroup3"), ("CISCO-STACK-MIB", "vlanGroup1"), ("CISCO-STACK-MIB", "portGroup2"), ("CISCO-STACK-MIB", "switchAccelerationModuleGroup"), ("CISCO-STACK-MIB", "optionalSystemMiscGroup3"), ("CISCO-STACK-MIB", "optionalSystemMiscGroup4"), ("CISCO-STACK-MIB", "vlanTrunkMappingGroup"), ("CISCO-STACK-MIB", "portJumboFrameGroup"), ("CISCO-STACK-MIB", "portCpbGroup4"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoStackgMIBCompliance4 = ciscoStackgMIBCompliance4.setStatus('deprecated')
ciscoStackgMIBCompliance5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 1, 5)).setObjects(("CISCO-STACK-MIB", "systemMiscGroup"), ("CISCO-STACK-MIB", "systemTrapGroup"), ("CISCO-STACK-MIB", "chassisGroup"), ("CISCO-STACK-MIB", "moduleGroup"), ("CISCO-STACK-MIB", "portGroup"), ("CISCO-STACK-MIB", "optionalSystemMiscGroup"), ("CISCO-STACK-MIB", "optionalSystemTrapGroup"), ("CISCO-STACK-MIB", "optionalChassisGroup"), ("CISCO-STACK-MIB", "optionalModuleGroup"), ("CISCO-STACK-MIB", "optionalPortGroup"), ("CISCO-STACK-MIB", "systemTrafficGroup"), ("CISCO-STACK-MIB", "systemFddiGroup"), ("CISCO-STACK-MIB", "systemRmonGroup"), ("CISCO-STACK-MIB", "tftpGroup"), ("CISCO-STACK-MIB", "brouteEnableGroup"), ("CISCO-STACK-MIB", "filterGroup"), ("CISCO-STACK-MIB", "vlanGroup"), ("CISCO-STACK-MIB", "vmpsGroup"), ("CISCO-STACK-MIB", "tokenRingGroup"), ("CISCO-STACK-MIB", "mcastGroup"), ("CISCO-STACK-MIB", "dnsGroup"), ("CISCO-STACK-MIB", "syslogGroup"), ("CISCO-STACK-MIB", "ntpGroup"), ("CISCO-STACK-MIB", "ipPermitGroup"), ("CISCO-STACK-MIB", "mdgGatewayGroup"), ("CISCO-STACK-MIB", "traceRouteGroup"), ("CISCO-STACK-MIB", "ntpAuthenticationGroup"), ("CISCO-STACK-MIB", "tokenRingSoftErrorMonitorGroup"), ("CISCO-STACK-MIB", "portCpbGroup1"), ("CISCO-STACK-MIB", "portSecurityGroup1"), ("CISCO-STACK-MIB", "fileCopyGroup"), ("CISCO-STACK-MIB", "optionalSystemMiscGroup1"), ("CISCO-STACK-MIB", "ipPermitGroup1"), ("CISCO-STACK-MIB", "optionalSystemMiscGroup2"), ("CISCO-STACK-MIB", "filterGroup1"), ("CISCO-STACK-MIB", "mcastGroup1"), ("CISCO-STACK-MIB", "portGroup1"), ("CISCO-STACK-MIB", "chassisGroup1"), ("CISCO-STACK-MIB", "moduleGroup1"), ("CISCO-STACK-MIB", "portCpbGroup2"), ("CISCO-STACK-MIB", "voiceGroup"), ("CISCO-STACK-MIB", "moduleGroup2"), ("CISCO-STACK-MIB", "portCpbGroup3"), ("CISCO-STACK-MIB", "portGroup2"), ("CISCO-STACK-MIB", "switchAccelerationModuleGroup"), ("CISCO-STACK-MIB", "optionalSystemMiscGroup3"), ("CISCO-STACK-MIB", "optionalSystemMiscGroup4"), ("CISCO-STACK-MIB", "vlanTrunkMappingGroup"), ("CISCO-STACK-MIB", "portJumboFrameGroup"), ("CISCO-STACK-MIB", "portCpbGroup4"), ("CISCO-STACK-MIB", "fileCopyGroup2"), ("CISCO-STACK-MIB", "systemRmonGroup2"), ("CISCO-STACK-MIB", "filterGroup2"), ("CISCO-STACK-MIB", "optionalSystemMiscGroup5"), ("CISCO-STACK-MIB", "syslogGroup2"), ("CISCO-STACK-MIB", "systemStatusGroup"), ("CISCO-STACK-MIB", "configurationGroup"), ("CISCO-STACK-MIB", "filterGroup3"), ("CISCO-STACK-MIB", "portGroup3"), ("CISCO-STACK-MIB", "portCpbGroup5"), ("CISCO-STACK-MIB", "authenticationGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoStackgMIBCompliance5 = ciscoStackgMIBCompliance5.setStatus('deprecated')
ciscoStackgMIBCompliance6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 1, 6)).setObjects(("CISCO-STACK-MIB", "systemMiscGroup1"), ("CISCO-STACK-MIB", "systemTrapGroup1"), ("CISCO-STACK-MIB", "chassisGroup"), ("CISCO-STACK-MIB", "moduleGroup"), ("CISCO-STACK-MIB", "portGroup4"), ("CISCO-STACK-MIB", "optionalSystemMiscGroup"), ("CISCO-STACK-MIB", "optionalSystemTrapGroup"), ("CISCO-STACK-MIB", "optionalChassisGroup1"), ("CISCO-STACK-MIB", "optionalModuleGroup"), ("CISCO-STACK-MIB", "optionalPortGroup1"), ("CISCO-STACK-MIB", "systemTrafficGroup"), ("CISCO-STACK-MIB", "systemFddiGroup"), ("CISCO-STACK-MIB", "systemRmonGroup"), ("CISCO-STACK-MIB", "tftpGroup"), ("CISCO-STACK-MIB", "brouteEnableGroup"), ("CISCO-STACK-MIB", "filterGroup"), ("CISCO-STACK-MIB", "vlanGroup2"), ("CISCO-STACK-MIB", "vmpsGroup"), ("CISCO-STACK-MIB", "tokenRingGroup"), ("CISCO-STACK-MIB", "mcastGroup"), ("CISCO-STACK-MIB", "dnsGroup"), ("CISCO-STACK-MIB", "syslogGroup"), ("CISCO-STACK-MIB", "ntpGroup"), ("CISCO-STACK-MIB", "ipPermitGroup2"), ("CISCO-STACK-MIB", "mdgGatewayGroup"), ("CISCO-STACK-MIB", "traceRouteGroup"), ("CISCO-STACK-MIB", "ntpAuthenticationGroup"), ("CISCO-STACK-MIB", "tokenRingSoftErrorMonitorGroup"), ("CISCO-STACK-MIB", "portCpbGroup1"), ("CISCO-STACK-MIB", "portSecurityGroup1"), ("CISCO-STACK-MIB", "fileCopyGroup"), ("CISCO-STACK-MIB", "optionalSystemMiscGroup1"), ("CISCO-STACK-MIB", "ipPermitGroup1"), ("CISCO-STACK-MIB", "optionalSystemMiscGroup6"), ("CISCO-STACK-MIB", "filterGroup1"), ("CISCO-STACK-MIB", "mcastGroup1"), ("CISCO-STACK-MIB", "portGroup1"), ("CISCO-STACK-MIB", "chassisGroup1"), ("CISCO-STACK-MIB", "moduleGroup1"), ("CISCO-STACK-MIB", "portCpbGroup2"), ("CISCO-STACK-MIB", "voiceGroup"), ("CISCO-STACK-MIB", "moduleGroup2"), ("CISCO-STACK-MIB", "portCpbGroup3"), ("CISCO-STACK-MIB", "portGroup2"), ("CISCO-STACK-MIB", "switchAccelerationModuleGroup"), ("CISCO-STACK-MIB", "optionalSystemMiscGroup3"), ("CISCO-STACK-MIB", "optionalSystemMiscGroup4"), ("CISCO-STACK-MIB", "vlanTrunkMappingGroup"), ("CISCO-STACK-MIB", "portJumboFrameGroup"), ("CISCO-STACK-MIB", "portCpbGroup4"), ("CISCO-STACK-MIB", "fileCopyGroup2"), ("CISCO-STACK-MIB", "systemRmonGroup2"), ("CISCO-STACK-MIB", "filterGroup2"), ("CISCO-STACK-MIB", "optionalSystemMiscGroup5"), ("CISCO-STACK-MIB", "syslogGroup2"), ("CISCO-STACK-MIB", "systemStatusGroup"), ("CISCO-STACK-MIB", "configurationGroup"), ("CISCO-STACK-MIB", "filterGroup3"), ("CISCO-STACK-MIB", "portGroup3"), ("CISCO-STACK-MIB", "portCpbGroup5"), ("CISCO-STACK-MIB", "authenticationGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoStackgMIBCompliance6 = ciscoStackgMIBCompliance6.setStatus('deprecated')
ciscoStackgMIBCompliance7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 1, 7)).setObjects(("CISCO-STACK-MIB", "systemMiscGroup1"), ("CISCO-STACK-MIB", "systemTrapGroup2"), ("CISCO-STACK-MIB", "chassisGroup"), ("CISCO-STACK-MIB", "moduleGroup"), ("CISCO-STACK-MIB", "portGroup4"), ("CISCO-STACK-MIB", "optionalSystemMiscGroup"), ("CISCO-STACK-MIB", "optionalChassisGroup1"), ("CISCO-STACK-MIB", "optionalModuleGroup"), ("CISCO-STACK-MIB", "optionalPortGroup1"), ("CISCO-STACK-MIB", "systemTrafficGroup"), ("CISCO-STACK-MIB", "systemFddiGroup"), ("CISCO-STACK-MIB", "systemRmonGroup"), ("CISCO-STACK-MIB", "tftpGroup"), ("CISCO-STACK-MIB", "brouteEnableGroup"), ("CISCO-STACK-MIB", "filterGroup"), ("CISCO-STACK-MIB", "vlanGroup2"), ("CISCO-STACK-MIB", "vmpsGroup"), ("CISCO-STACK-MIB", "tokenRingGroup"), ("CISCO-STACK-MIB", "mcastGroup"), ("CISCO-STACK-MIB", "dnsGroup"), ("CISCO-STACK-MIB", "syslogGroup"), ("CISCO-STACK-MIB", "ntpGroup"), ("CISCO-STACK-MIB", "ipPermitGroup2"), ("CISCO-STACK-MIB", "mdgGatewayGroup"), ("CISCO-STACK-MIB", "traceRouteGroup"), ("CISCO-STACK-MIB", "ntpAuthenticationGroup"), ("CISCO-STACK-MIB", "tokenRingSoftErrorMonitorGroup"), ("CISCO-STACK-MIB", "portCpbGroup1"), ("CISCO-STACK-MIB", "portSecurityGroup1"), ("CISCO-STACK-MIB", "fileCopyGroup"), ("CISCO-STACK-MIB", "optionalSystemMiscGroup1"), ("CISCO-STACK-MIB", "ipPermitGroup1"), ("CISCO-STACK-MIB", "optionalSystemMiscGroup6"), ("CISCO-STACK-MIB", "filterGroup1"), ("CISCO-STACK-MIB", "mcastGroup1"), ("CISCO-STACK-MIB", "portGroup1"), ("CISCO-STACK-MIB", "chassisGroup1"), ("CISCO-STACK-MIB", "moduleGroup1"), ("CISCO-STACK-MIB", "portCpbGroup2"), ("CISCO-STACK-MIB", "voiceGroup"), ("CISCO-STACK-MIB", "moduleGroup2"), ("CISCO-STACK-MIB", "portCpbGroup3"), ("CISCO-STACK-MIB", "portGroup2"), ("CISCO-STACK-MIB", "switchAccelerationModuleGroup"), ("CISCO-STACK-MIB", "optionalSystemMiscGroup3"), ("CISCO-STACK-MIB", "optionalSystemMiscGroup4"), ("CISCO-STACK-MIB", "vlanTrunkMappingGroup"), ("CISCO-STACK-MIB", "portJumboFrameGroup"), ("CISCO-STACK-MIB", "portCpbGroup4"), ("CISCO-STACK-MIB", "fileCopyGroup2"), ("CISCO-STACK-MIB", "systemRmonGroup2"), ("CISCO-STACK-MIB", "filterGroup2"), ("CISCO-STACK-MIB", "optionalSystemMiscGroup5"), ("CISCO-STACK-MIB", "syslogGroup2"), ("CISCO-STACK-MIB", "systemStatusGroup"), ("CISCO-STACK-MIB", "configurationGroup"), ("CISCO-STACK-MIB", "filterGroup3"), ("CISCO-STACK-MIB", "portGroup3"), ("CISCO-STACK-MIB", "portCpbGroup5"), ("CISCO-STACK-MIB", "optionalSystemTrapGroup1"), ("CISCO-STACK-MIB", "authenticationGroup2"), ("CISCO-STACK-MIB", "notificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoStackgMIBCompliance7 = ciscoStackgMIBCompliance7.setStatus('deprecated')
ciscoStackgMIBCompliance8 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 1, 8)).setObjects(("CISCO-STACK-MIB", "systemMiscGroup1"), ("CISCO-STACK-MIB", "systemTrapGroup2"), ("CISCO-STACK-MIB", "chassisGroup"), ("CISCO-STACK-MIB", "moduleGroup"), ("CISCO-STACK-MIB", "portGroup4"), ("CISCO-STACK-MIB", "optionalSystemMiscGroup"), ("CISCO-STACK-MIB", "optionalChassisGroup1"), ("CISCO-STACK-MIB", "optionalModuleGroup"), ("CISCO-STACK-MIB", "optionalPortGroup1"), ("CISCO-STACK-MIB", "systemTrafficGroup"), ("CISCO-STACK-MIB", "systemFddiGroup"), ("CISCO-STACK-MIB", "systemRmonGroup"), ("CISCO-STACK-MIB", "tftpGroup"), ("CISCO-STACK-MIB", "brouteEnableGroup"), ("CISCO-STACK-MIB", "filterGroup"), ("CISCO-STACK-MIB", "vlanGroup2"), ("CISCO-STACK-MIB", "vmpsGroup"), ("CISCO-STACK-MIB", "tokenRingGroup"), ("CISCO-STACK-MIB", "mcastGroup"), ("CISCO-STACK-MIB", "dnsGroup"), ("CISCO-STACK-MIB", "syslogGroup"), ("CISCO-STACK-MIB", "ntpGroup"), ("CISCO-STACK-MIB", "ipPermitGroup2"), ("CISCO-STACK-MIB", "mdgGatewayGroup"), ("CISCO-STACK-MIB", "traceRouteGroup"), ("CISCO-STACK-MIB", "ntpAuthenticationGroup"), ("CISCO-STACK-MIB", "tokenRingSoftErrorMonitorGroup"), ("CISCO-STACK-MIB", "portCpbGroup1"), ("CISCO-STACK-MIB", "portSecurityGroup1"), ("CISCO-STACK-MIB", "fileCopyGroup"), ("CISCO-STACK-MIB", "optionalSystemMiscGroup1"), ("CISCO-STACK-MIB", "ipPermitGroup1"), ("CISCO-STACK-MIB", "optionalSystemMiscGroup6"), ("CISCO-STACK-MIB", "filterGroup1"), ("CISCO-STACK-MIB", "mcastGroup1"), ("CISCO-STACK-MIB", "portGroup1"), ("CISCO-STACK-MIB", "chassisGroup1"), ("CISCO-STACK-MIB", "moduleGroup1"), ("CISCO-STACK-MIB", "portCpbGroup2"), ("CISCO-STACK-MIB", "voiceGroup"), ("CISCO-STACK-MIB", "moduleGroup2"), ("CISCO-STACK-MIB", "portCpbGroup3"), ("CISCO-STACK-MIB", "portGroup2"), ("CISCO-STACK-MIB", "switchAccelerationModuleGroup"), ("CISCO-STACK-MIB", "optionalSystemMiscGroup3"), ("CISCO-STACK-MIB", "optionalSystemMiscGroup4"), ("CISCO-STACK-MIB", "vlanTrunkMappingGroup"), ("CISCO-STACK-MIB", "portJumboFrameGroup"), ("CISCO-STACK-MIB", "portCpbGroup4"), ("CISCO-STACK-MIB", "fileCopyGroup2"), ("CISCO-STACK-MIB", "systemRmonGroup2"), ("CISCO-STACK-MIB", "filterGroup2"), ("CISCO-STACK-MIB", "optionalSystemMiscGroup5"), ("CISCO-STACK-MIB", "syslogGroup2"), ("CISCO-STACK-MIB", "systemStatusGroup"), ("CISCO-STACK-MIB", "configurationGroup"), ("CISCO-STACK-MIB", "filterGroup3"), ("CISCO-STACK-MIB", "portGroup3"), ("CISCO-STACK-MIB", "portCpbGroup5"), ("CISCO-STACK-MIB", "optionalSystemTrapGroup1"), ("CISCO-STACK-MIB", "authenticationGroup2"), ("CISCO-STACK-MIB", "notificationGroup"), ("CISCO-STACK-MIB", "ipPermitGroup3"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoStackgMIBCompliance8 = ciscoStackgMIBCompliance8.setStatus('current')
systemMiscGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 1)).setObjects(("CISCO-STACK-MIB", "sysMgmtType"), ("CISCO-STACK-MIB", "sysIpAddr"), ("CISCO-STACK-MIB", "sysNetMask"), ("CISCO-STACK-MIB", "sysBroadcast"), ("CISCO-STACK-MIB", "sysAttachType"), ("CISCO-STACK-MIB", "sysReset"), ("CISCO-STACK-MIB", "sysBaudRate"), ("CISCO-STACK-MIB", "sysInsertMode"), ("CISCO-STACK-MIB", "sysClearMacTime"), ("CISCO-STACK-MIB", "sysClearPortTime"), ("CISCO-STACK-MIB", "sysEnableModem"), ("CISCO-STACK-MIB", "sysEnableRedirects"), ("CISCO-STACK-MIB", "sysArpAgingTime"), ("CISCO-STACK-MIB", "sysCommunityRwa"), ("CISCO-STACK-MIB", "sysCommunityRw"), ("CISCO-STACK-MIB", "sysCommunityRo"), ("CISCO-STACK-MIB", "sysIpVlan"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemMiscGroup = systemMiscGroup.setStatus('deprecated')
systemTrapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 2)).setObjects(("CISCO-STACK-MIB", "sysTrapReceiverAddr"), ("CISCO-STACK-MIB", "sysTrapReceiverType"), ("CISCO-STACK-MIB", "sysTrapReceiverComm"), ("CISCO-STACK-MIB", "sysEnableChassisTraps"), ("CISCO-STACK-MIB", "sysEnableModuleTraps"), ("CISCO-STACK-MIB", "sysEnableBridgeTraps"), ("CISCO-STACK-MIB", "sysEnableRepeaterTraps"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemTrapGroup = systemTrapGroup.setStatus('deprecated')
chassisGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 3)).setObjects(("CISCO-STACK-MIB", "chassisSysType"), ("CISCO-STACK-MIB", "chassisBkplType"), ("CISCO-STACK-MIB", "chassisPs1Type"), ("CISCO-STACK-MIB", "chassisPs1Status"), ("CISCO-STACK-MIB", "chassisPs1TestResult"), ("CISCO-STACK-MIB", "chassisPs2Type"), ("CISCO-STACK-MIB", "chassisPs2Status"), ("CISCO-STACK-MIB", "chassisPs2TestResult"), ("CISCO-STACK-MIB", "chassisFanStatus"), ("CISCO-STACK-MIB", "chassisFanTestResult"), ("CISCO-STACK-MIB", "chassisMinorAlarm"), ("CISCO-STACK-MIB", "chassisMajorAlarm"), ("CISCO-STACK-MIB", "chassisTempAlarm"), ("CISCO-STACK-MIB", "chassisNumSlots"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chassisGroup = chassisGroup.setStatus('current')
moduleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 4)).setObjects(("CISCO-STACK-MIB", "moduleIndex"), ("CISCO-STACK-MIB", "moduleType"), ("CISCO-STACK-MIB", "moduleStatus"), ("CISCO-STACK-MIB", "moduleTestResult"), ("CISCO-STACK-MIB", "moduleAction"), ("CISCO-STACK-MIB", "moduleName"), ("CISCO-STACK-MIB", "moduleNumPorts"), ("CISCO-STACK-MIB", "modulePortStatus"), ("CISCO-STACK-MIB", "moduleSubType"), ("CISCO-STACK-MIB", "moduleSerialNumberString"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    moduleGroup = moduleGroup.setStatus('current')
portGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 5)).setObjects(("CISCO-STACK-MIB", "portModuleIndex"), ("CISCO-STACK-MIB", "portIndex"), ("CISCO-STACK-MIB", "portCrossIndex"), ("CISCO-STACK-MIB", "portName"), ("CISCO-STACK-MIB", "portType"), ("CISCO-STACK-MIB", "portOperStatus"), ("CISCO-STACK-MIB", "portCrossGroupIndex"), ("CISCO-STACK-MIB", "portAdditionalStatus"), ("CISCO-STACK-MIB", "portAdminSpeed"), ("CISCO-STACK-MIB", "portDuplex"), ("CISCO-STACK-MIB", "portIfIndex"), ("CISCO-STACK-MIB", "portSpantreeFastStart"), ("CISCO-STACK-MIB", "portAdminRxFlowControl"), ("CISCO-STACK-MIB", "portOperRxFlowControl"), ("CISCO-STACK-MIB", "portAdminTxFlowControl"), ("CISCO-STACK-MIB", "portOperTxFlowControl"), ("CISCO-STACK-MIB", "portMacControlTransmitFrames"), ("CISCO-STACK-MIB", "portMacControlReceiveFrames"), ("CISCO-STACK-MIB", "portMacControlPauseTransmitFrames"), ("CISCO-STACK-MIB", "portMacControlPauseReceiveFrames"), ("CISCO-STACK-MIB", "portMacControlUnknownProtocolFrames"), ("CISCO-STACK-MIB", "portLinkFaultStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    portGroup = portGroup.setStatus('deprecated')
optionalSystemMiscGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 6)).setObjects(("CISCO-STACK-MIB", "sysConfigChangeTime"), ("CISCO-STACK-MIB", "sysBannerMotd"), ("CISCO-STACK-MIB", "sysConfigChangeInfo"), ("CISCO-STACK-MIB", "sysConfigRegister"), ("CISCO-STACK-MIB", "sysBootVariable"), ("CISCO-STACK-MIB", "sysBootedImage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optionalSystemMiscGroup = optionalSystemMiscGroup.setStatus('current')
optionalSystemTrapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 7)).setObjects(("CISCO-STACK-MIB", "sysEnableIpPermitTraps"), ("CISCO-STACK-MIB", "sysEnableVmpsTraps"), ("CISCO-STACK-MIB", "sysEnableConfigTraps"), ("CISCO-STACK-MIB", "sysEnableEntityTrap"), ("CISCO-STACK-MIB", "sysEnableStpxTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optionalSystemTrapGroup = optionalSystemTrapGroup.setStatus('deprecated')
optionalChassisGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 8)).setObjects(("CISCO-STACK-MIB", "chassisPs1TestResult"), ("CISCO-STACK-MIB", "chassisPs2TestResult"), ("CISCO-STACK-MIB", "chassisFanTestResult"), ("CISCO-STACK-MIB", "chassisSlotConfig"), ("CISCO-STACK-MIB", "chassisModel"), ("CISCO-STACK-MIB", "chassisComponentIndex"), ("CISCO-STACK-MIB", "chassisComponentType"), ("CISCO-STACK-MIB", "chassisComponentSerialNumber"), ("CISCO-STACK-MIB", "chassisComponentHwVersion"), ("CISCO-STACK-MIB", "chassisComponentModel"), ("CISCO-STACK-MIB", "chassisSerialNumberString"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optionalChassisGroup = optionalChassisGroup.setStatus('deprecated')
optionalModuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 9)).setObjects(("CISCO-STACK-MIB", "moduleTestResult"), ("CISCO-STACK-MIB", "moduleModel"), ("CISCO-STACK-MIB", "moduleHwVersion"), ("CISCO-STACK-MIB", "moduleFwVersion"), ("CISCO-STACK-MIB", "moduleSwVersion"), ("CISCO-STACK-MIB", "moduleStandbyStatus"), ("CISCO-STACK-MIB", "moduleIPAddress"), ("CISCO-STACK-MIB", "moduleIPAddressVlan"), ("CISCO-STACK-MIB", "moduleSubType2"), ("CISCO-STACK-MIB", "moduleSlotNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optionalModuleGroup = optionalModuleGroup.setStatus('current')
optionalPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 10)).setObjects(("CISCO-STACK-MIB", "portSecurityModuleIndex"), ("CISCO-STACK-MIB", "portSecurityPortIndex"), ("CISCO-STACK-MIB", "portSecurityAdminStatus"), ("CISCO-STACK-MIB", "portSecurityOperStatus"), ("CISCO-STACK-MIB", "portSecurityLastSrcAddr"), ("CISCO-STACK-MIB", "portSecuritySecureSrcAddr"), ("CISCO-STACK-MIB", "portChannelModuleIndex"), ("CISCO-STACK-MIB", "portChannelPortIndex"), ("CISCO-STACK-MIB", "portChannelPorts"), ("CISCO-STACK-MIB", "portChannelAdminStatus"), ("CISCO-STACK-MIB", "portChannelOperStatus"), ("CISCO-STACK-MIB", "portChannelNeighbourDeviceId"), ("CISCO-STACK-MIB", "portChannelNeighbourPortId"), ("CISCO-STACK-MIB", "portChannelProtInPackets"), ("CISCO-STACK-MIB", "portChannelProtOutPackets"), ("CISCO-STACK-MIB", "portChannelIfIndex"), ("CISCO-STACK-MIB", "portCpbModuleIndex"), ("CISCO-STACK-MIB", "portCpbPortIndex"), ("CISCO-STACK-MIB", "portCpbSpeed"), ("CISCO-STACK-MIB", "portCpbDuplex"), ("CISCO-STACK-MIB", "portCpbTrunkEncapsulationType"), ("CISCO-STACK-MIB", "portCpbTrunkMode"), ("CISCO-STACK-MIB", "portCpbChannel"), ("CISCO-STACK-MIB", "portCpbBroadcastSuppression"), ("CISCO-STACK-MIB", "portCpbFlowControl"), ("CISCO-STACK-MIB", "portCpbSecurity"), ("CISCO-STACK-MIB", "portCpbVlanMembership"), ("CISCO-STACK-MIB", "portCpbPortfast"), ("CISCO-STACK-MIB", "portTopNControlIndex"), ("CISCO-STACK-MIB", "portTopNRateBase"), ("CISCO-STACK-MIB", "portTopNType"), ("CISCO-STACK-MIB", "portTopNMode"), ("CISCO-STACK-MIB", "portTopNReportStatus"), ("CISCO-STACK-MIB", "portTopNDuration"), ("CISCO-STACK-MIB", "portTopNTimeRemaining"), ("CISCO-STACK-MIB", "portTopNStartTime"), ("CISCO-STACK-MIB", "portTopNRequestedSize"), ("CISCO-STACK-MIB", "portTopNGrantedSize"), ("CISCO-STACK-MIB", "portTopNOwner"), ("CISCO-STACK-MIB", "portTopNStatus"), ("CISCO-STACK-MIB", "portTopNIndex"), ("CISCO-STACK-MIB", "portTopNModuleNumber"), ("CISCO-STACK-MIB", "portTopNPortNumber"), ("CISCO-STACK-MIB", "portTopNUtilization"), ("CISCO-STACK-MIB", "portTopNIOOctets"), ("CISCO-STACK-MIB", "portTopNIOPkts"), ("CISCO-STACK-MIB", "portTopNIOBroadcast"), ("CISCO-STACK-MIB", "portTopNIOMulticast"), ("CISCO-STACK-MIB", "portTopNInErrors"), ("CISCO-STACK-MIB", "portTopNBufferOverFlow"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optionalPortGroup = optionalPortGroup.setStatus('deprecated')
systemTrafficGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 11)).setObjects(("CISCO-STACK-MIB", "sysTrafficMeterType"), ("CISCO-STACK-MIB", "sysTraffic"), ("CISCO-STACK-MIB", "sysTrafficPeak"), ("CISCO-STACK-MIB", "sysTrafficPeakTime"), ("CISCO-STACK-MIB", "sysTrafficMeter"), ("CISCO-STACK-MIB", "sysTrafficMeterPeak"), ("CISCO-STACK-MIB", "sysTrafficMeterPeakTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemTrafficGroup = systemTrafficGroup.setStatus('current')
systemFddiGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 12)).setObjects(("CISCO-STACK-MIB", "sysFddiRingSMTIndex"), ("CISCO-STACK-MIB", "sysFddiRingAddress"), ("CISCO-STACK-MIB", "sysFddiRingNext"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemFddiGroup = systemFddiGroup.setStatus('current')
systemRmonGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 13)).setObjects(("CISCO-STACK-MIB", "sysEnableRmon"), ("CISCO-STACK-MIB", "sysExtendedRmonVlanModeEnable"), ("CISCO-STACK-MIB", "sysExtendedRmonNetflowPassword"), ("CISCO-STACK-MIB", "sysExtendedRmonNetflowEnable"), ("CISCO-STACK-MIB", "sysExtendedRmonVlanAgentEnable"), ("CISCO-STACK-MIB", "sysExtendedRmonEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemRmonGroup = systemRmonGroup.setStatus('current')
authenticationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 14)).setObjects(("CISCO-STACK-MIB", "sysConsolePrimaryLoginAuthentication"), ("CISCO-STACK-MIB", "sysConsolePrimaryEnableAuthentication"), ("CISCO-STACK-MIB", "sysTelnetPrimaryLoginAuthentication"), ("CISCO-STACK-MIB", "sysTelnetPrimaryEnableAuthentication"), ("CISCO-STACK-MIB", "tacacsLoginAuthentication"), ("CISCO-STACK-MIB", "tacacsEnableAuthentication"), ("CISCO-STACK-MIB", "tacacsLocalLoginAuthentication"), ("CISCO-STACK-MIB", "tacacsLocalEnableAuthentication"), ("CISCO-STACK-MIB", "tacacsNumLoginAttempts"), ("CISCO-STACK-MIB", "tacacsDirectedRequest"), ("CISCO-STACK-MIB", "tacacsTimeout"), ("CISCO-STACK-MIB", "tacacsAuthKey"), ("CISCO-STACK-MIB", "tacacsServerAddr"), ("CISCO-STACK-MIB", "tacacsServerType"), ("CISCO-STACK-MIB", "radiusLoginAuthentication"), ("CISCO-STACK-MIB", "radiusEnableAuthentication"), ("CISCO-STACK-MIB", "radiusDeadtime"), ("CISCO-STACK-MIB", "radiusAuthKey"), ("CISCO-STACK-MIB", "radiusTimeout"), ("CISCO-STACK-MIB", "radiusRetransmits"), ("CISCO-STACK-MIB", "radiusServerAddr"), ("CISCO-STACK-MIB", "radiusServerAuthPort"), ("CISCO-STACK-MIB", "radiusServerType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    authenticationGroup = authenticationGroup.setStatus('deprecated')
tftpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 15)).setObjects(("CISCO-STACK-MIB", "tftpHost"), ("CISCO-STACK-MIB", "tftpFile"), ("CISCO-STACK-MIB", "tftpModule"), ("CISCO-STACK-MIB", "tftpAction"), ("CISCO-STACK-MIB", "tftpResult"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tftpGroup = tftpGroup.setStatus('current')
brouteEnableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 16)).setObjects(("CISCO-STACK-MIB", "brouterPortModule"), ("CISCO-STACK-MIB", "brouterPort"), ("CISCO-STACK-MIB", "brouterEnableRip"), ("CISCO-STACK-MIB", "brouterEnableSpantree"), ("CISCO-STACK-MIB", "brouterEnableGiantCheck"), ("CISCO-STACK-MIB", "brouterEnableIpFragmentation"), ("CISCO-STACK-MIB", "brouterEnableUnreachables"), ("CISCO-STACK-MIB", "brouterCamMode"), ("CISCO-STACK-MIB", "brouterIpxSnapToEther"), ("CISCO-STACK-MIB", "brouterIpx8023RawToFddi"), ("CISCO-STACK-MIB", "brouterEthernetReceiveMax"), ("CISCO-STACK-MIB", "brouterEthernetTransmitMax"), ("CISCO-STACK-MIB", "brouterFddiReceiveMax"), ("CISCO-STACK-MIB", "brouterFddiTransmitMax"), ("CISCO-STACK-MIB", "brouterPortIpVlan"), ("CISCO-STACK-MIB", "brouterPortIpAddr"), ("CISCO-STACK-MIB", "brouterPortNetMask"), ("CISCO-STACK-MIB", "brouterPortBroadcast"), ("CISCO-STACK-MIB", "brouterPortBridgeVlan"), ("CISCO-STACK-MIB", "brouterPortIpHelpers"), ("CISCO-STACK-MIB", "brouterIpx8022ToEther"), ("CISCO-STACK-MIB", "brouterEnableTransitEncapsulation"), ("CISCO-STACK-MIB", "brouterEnableFddiCheck"), ("CISCO-STACK-MIB", "brouterEnableAPaRT"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    brouteEnableGroup = brouteEnableGroup.setStatus('current')
filterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 17)).setObjects(("CISCO-STACK-MIB", "filterMacModule"), ("CISCO-STACK-MIB", "filterMacPort"), ("CISCO-STACK-MIB", "filterMacAddress"), ("CISCO-STACK-MIB", "filterMacType"), ("CISCO-STACK-MIB", "filterVendorModule"), ("CISCO-STACK-MIB", "filterVendorPort"), ("CISCO-STACK-MIB", "filterVendorId"), ("CISCO-STACK-MIB", "filterVendorType"), ("CISCO-STACK-MIB", "filterProtocolModule"), ("CISCO-STACK-MIB", "filterProtocolPort"), ("CISCO-STACK-MIB", "filterProtocolValue"), ("CISCO-STACK-MIB", "filterProtocolType"), ("CISCO-STACK-MIB", "filterTestModule"), ("CISCO-STACK-MIB", "filterTestPort"), ("CISCO-STACK-MIB", "filterTestIndex"), ("CISCO-STACK-MIB", "filterTestType"), ("CISCO-STACK-MIB", "filterTestOffset"), ("CISCO-STACK-MIB", "filterTestValue"), ("CISCO-STACK-MIB", "filterTestMask"), ("CISCO-STACK-MIB", "filterPortModule"), ("CISCO-STACK-MIB", "filterPort"), ("CISCO-STACK-MIB", "filterPortComplex"), ("CISCO-STACK-MIB", "filterPortBroadcastThrottle"), ("CISCO-STACK-MIB", "filterPortBroadcastThreshold"), ("CISCO-STACK-MIB", "filterPortBroadcastDiscards"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    filterGroup = filterGroup.setStatus('current')
monitorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 18)).setObjects(("CISCO-STACK-MIB", "monitorSourceModule"), ("CISCO-STACK-MIB", "monitorSourcePort"), ("CISCO-STACK-MIB", "monitorDestinationModule"), ("CISCO-STACK-MIB", "monitorDestinationPort"), ("CISCO-STACK-MIB", "monitorDirection"), ("CISCO-STACK-MIB", "monitorEnable"), ("CISCO-STACK-MIB", "monitorAdminSourcePorts"), ("CISCO-STACK-MIB", "monitorOperSourcePorts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    monitorGroup = monitorGroup.setStatus('deprecated')
vlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 19)).setObjects(("CISCO-STACK-MIB", "vlanIndex"), ("CISCO-STACK-MIB", "vlanSpantreeEnable"), ("CISCO-STACK-MIB", "vlanIfIndex"), ("CISCO-STACK-MIB", "vlanPortModule"), ("CISCO-STACK-MIB", "vlanPort"), ("CISCO-STACK-MIB", "vlanPortVlan"), ("CISCO-STACK-MIB", "vlanPortIslVlansAllowed"), ("CISCO-STACK-MIB", "vlanPortSwitchLevel"), ("CISCO-STACK-MIB", "vlanPortIslAdminStatus"), ("CISCO-STACK-MIB", "vlanPortIslOperStatus"), ("CISCO-STACK-MIB", "vlanPortIslPriorityVlans"), ("CISCO-STACK-MIB", "vlanPortAdminStatus"), ("CISCO-STACK-MIB", "vlanPortOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vlanGroup = vlanGroup.setStatus('deprecated')
vmpsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 20)).setObjects(("CISCO-STACK-MIB", "vmpsAddr"), ("CISCO-STACK-MIB", "vmpsType"), ("CISCO-STACK-MIB", "vmpsAction"), ("CISCO-STACK-MIB", "vmpsAccessed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vmpsGroup = vmpsGroup.setStatus('current')
tokenRingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 21)).setObjects(("CISCO-STACK-MIB", "tokenRingModuleIndex"), ("CISCO-STACK-MIB", "tokenRingPortIndex"), ("CISCO-STACK-MIB", "tokenRingPortSetACbits"), ("CISCO-STACK-MIB", "tokenRingPortMode"), ("CISCO-STACK-MIB", "tokenRingPortEarlyTokenRel"), ("CISCO-STACK-MIB", "tokenRingPortPriorityThresh"), ("CISCO-STACK-MIB", "tokenRingPortPriorityMinXmit"), ("CISCO-STACK-MIB", "tokenRingPortCfgLossThresh"), ("CISCO-STACK-MIB", "tokenRingPortCfgLossInterval"), ("CISCO-STACK-MIB", "tokenRingDripDistCrfMode"), ("CISCO-STACK-MIB", "tokenRingDripAreReductionMode"), ("CISCO-STACK-MIB", "tokenRingDripLocalNodeID"), ("CISCO-STACK-MIB", "tokenRingDripLastRevision"), ("CISCO-STACK-MIB", "tokenRingDripLastChangedRevision"), ("CISCO-STACK-MIB", "tokenRingDripAdvertsReceived"), ("CISCO-STACK-MIB", "tokenRingDripAdvertsTransmitted"), ("CISCO-STACK-MIB", "tokenRingDripAdvertsProcessed"), ("CISCO-STACK-MIB", "tokenRingDripInputQueueDrops"), ("CISCO-STACK-MIB", "tokenRingDripOutputQueueDrops"), ("CISCO-STACK-MIB", "tokenRingDripVlan"), ("CISCO-STACK-MIB", "tokenRingDripLocalPortStatus"), ("CISCO-STACK-MIB", "tokenRingDripRemotePortStatus"), ("CISCO-STACK-MIB", "tokenRingDripRemotePortConfigured"), ("CISCO-STACK-MIB", "tokenRingDripDistributedCrf"), ("CISCO-STACK-MIB", "tokenRingDripBackupCrf"), ("CISCO-STACK-MIB", "tokenRingDripOwnerNodeID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tokenRingGroup = tokenRingGroup.setStatus('current')
mcastGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 22)).setObjects(("CISCO-STACK-MIB", "mcastRouterModuleIndex"), ("CISCO-STACK-MIB", "mcastRouterPortIndex"), ("CISCO-STACK-MIB", "mcastRouterAdminStatus"), ("CISCO-STACK-MIB", "mcastRouterOperStatus"), ("CISCO-STACK-MIB", "mcastEnableCgmp"), ("CISCO-STACK-MIB", "mcastEnableIgmp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mcastGroup = mcastGroup.setStatus('current')
dnsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 23)).setObjects(("CISCO-STACK-MIB", "dnsEnable"), ("CISCO-STACK-MIB", "dnsServerAddr"), ("CISCO-STACK-MIB", "dnsServerType"), ("CISCO-STACK-MIB", "dnsDomainName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dnsGroup = dnsGroup.setStatus('current')
syslogGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 24)).setObjects(("CISCO-STACK-MIB", "syslogServerAddr"), ("CISCO-STACK-MIB", "syslogServerType"), ("CISCO-STACK-MIB", "syslogConsoleEnable"), ("CISCO-STACK-MIB", "syslogHostEnable"), ("CISCO-STACK-MIB", "syslogMessageFacility"), ("CISCO-STACK-MIB", "syslogMessageSeverity"), ("CISCO-STACK-MIB", "syslogTimeStampOption"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    syslogGroup = syslogGroup.setStatus('current')
ntpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 25)).setObjects(("CISCO-STACK-MIB", "ntpBcastClient"), ("CISCO-STACK-MIB", "ntpBcastDelay"), ("CISCO-STACK-MIB", "ntpClient"), ("CISCO-STACK-MIB", "ntpServerAddress"), ("CISCO-STACK-MIB", "ntpServerType"), ("CISCO-STACK-MIB", "ntpSummertimeStatus"), ("CISCO-STACK-MIB", "ntpSummerTimezoneName"), ("CISCO-STACK-MIB", "ntpTimezoneName"), ("CISCO-STACK-MIB", "ntpTimezoneOffsetHour"), ("CISCO-STACK-MIB", "ntpTimezoneOffsetMinute"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntpGroup = ntpGroup.setStatus('current')
ipPermitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 26)).setObjects(("CISCO-STACK-MIB", "ipPermitAddress"), ("CISCO-STACK-MIB", "ipPermitMask"), ("CISCO-STACK-MIB", "ipPermitEnable"), ("CISCO-STACK-MIB", "ipPermitType"), ("CISCO-STACK-MIB", "ipPermitDeniedAddress"), ("CISCO-STACK-MIB", "ipPermitDeniedAccess"), ("CISCO-STACK-MIB", "ipPermitDeniedTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipPermitGroup = ipPermitGroup.setStatus('deprecated')
mdgGatewayGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 27)).setObjects(("CISCO-STACK-MIB", "mdgGatewayAddr"), ("CISCO-STACK-MIB", "mdgGatewayType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mdgGatewayGroup = mdgGatewayGroup.setStatus('current')
traceRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 28)).setObjects(("CISCO-STACK-MIB", "traceRouteMaxQueries"), ("CISCO-STACK-MIB", "traceRouteQueryIndex"), ("CISCO-STACK-MIB", "traceRouteHost"), ("CISCO-STACK-MIB", "traceRouteQueryDNSEnable"), ("CISCO-STACK-MIB", "traceRouteQueryWaitingTime"), ("CISCO-STACK-MIB", "traceRouteQueryInitTTL"), ("CISCO-STACK-MIB", "traceRouteQueryMaxTTL"), ("CISCO-STACK-MIB", "traceRouteQueryUDPPort"), ("CISCO-STACK-MIB", "traceRouteQueryPacketCount"), ("CISCO-STACK-MIB", "traceRouteQueryPacketSize"), ("CISCO-STACK-MIB", "traceRouteQueryTOS"), ("CISCO-STACK-MIB", "traceRouteQueryResult"), ("CISCO-STACK-MIB", "traceRouteQueryTime"), ("CISCO-STACK-MIB", "traceRouteQueryOwner"), ("CISCO-STACK-MIB", "traceRouteQueryStatus"), ("CISCO-STACK-MIB", "traceRouteDataIndex"), ("CISCO-STACK-MIB", "traceRouteDataGatewayName"), ("CISCO-STACK-MIB", "traceRouteDataGatewayIp"), ("CISCO-STACK-MIB", "traceRouteDataRtt"), ("CISCO-STACK-MIB", "traceRouteDataHopCount"), ("CISCO-STACK-MIB", "traceRouteDataErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    traceRouteGroup = traceRouteGroup.setStatus('current')
deprecatedObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 29)).setObjects(("CISCO-STACK-MIB", "sysCommunityAccess"), ("CISCO-STACK-MIB", "sysCommunityString"), ("CISCO-STACK-MIB", "moduleHwHiVersion"), ("CISCO-STACK-MIB", "moduleHwLoVersion"), ("CISCO-STACK-MIB", "moduleFwHiVersion"), ("CISCO-STACK-MIB", "moduleFwLoVersion"), ("CISCO-STACK-MIB", "moduleSwHiVersion"), ("CISCO-STACK-MIB", "moduleSwLoVersion"), ("CISCO-STACK-MIB", "brouterCamAgingTime"), ("CISCO-STACK-MIB", "chassisSerialNumber"), ("CISCO-STACK-MIB", "moduleSerialNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    deprecatedObjectGroup = deprecatedObjectGroup.setStatus('deprecated')
ntpAuthenticationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 30)).setObjects(("CISCO-STACK-MIB", "ntpServerPublicKey"), ("CISCO-STACK-MIB", "ntpAuthenticationEnable"), ("CISCO-STACK-MIB", "ntpAuthenticationPublicKey"), ("CISCO-STACK-MIB", "ntpAuthenticationSecretKey"), ("CISCO-STACK-MIB", "ntpAuthenticationTrustedMode"), ("CISCO-STACK-MIB", "ntpAuthenticationType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntpAuthenticationGroup = ntpAuthenticationGroup.setStatus('current')
tokenRingSoftErrorMonitorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 31)).setObjects(("CISCO-STACK-MIB", "tokenRingPortSoftErrThresh"), ("CISCO-STACK-MIB", "tokenRingPortSoftErrReportInterval"), ("CISCO-STACK-MIB", "tokenRingPortSoftErrResetCounters"), ("CISCO-STACK-MIB", "tokenRingPortSoftErrLastCounterReset"), ("CISCO-STACK-MIB", "tokenRingPortSoftErrEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tokenRingSoftErrorMonitorGroup = tokenRingSoftErrorMonitorGroup.setStatus('current')
portCpbGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 32)).setObjects(("CISCO-STACK-MIB", "portCpbUdld"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    portCpbGroup1 = portCpbGroup1.setStatus('current')
portSecurityGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 33)).setObjects(("CISCO-STACK-MIB", "portSecurityMaxSrcAddr"), ("CISCO-STACK-MIB", "portSecurityAgingTime"), ("CISCO-STACK-MIB", "portSecurityShutdownTimeOut"), ("CISCO-STACK-MIB", "portSecurityViolationPolicy"), ("CISCO-STACK-MIB", "portSecurityExtModuleIndex"), ("CISCO-STACK-MIB", "portSecurityExtPortIndex"), ("CISCO-STACK-MIB", "portSecurityExtSecureSrcAddr"), ("CISCO-STACK-MIB", "portSecurityExtControlStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    portSecurityGroup1 = portSecurityGroup1.setStatus('current')
fileCopyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 34)).setObjects(("CISCO-STACK-MIB", "fileCopyProtocol"), ("CISCO-STACK-MIB", "fileCopyRemoteServer"), ("CISCO-STACK-MIB", "fileCopySrcFileName"), ("CISCO-STACK-MIB", "fileCopyDstFileName"), ("CISCO-STACK-MIB", "fileCopyModuleNumber"), ("CISCO-STACK-MIB", "fileCopyUserName"), ("CISCO-STACK-MIB", "fileCopyAction"), ("CISCO-STACK-MIB", "fileCopyResult"), ("CISCO-STACK-MIB", "fileCopyResultRcpErrorMessage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fileCopyGroup = fileCopyGroup.setStatus('current')
optionalSystemMiscGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 35)).setObjects(("CISCO-STACK-MIB", "sysStartupConfigSource"), ("CISCO-STACK-MIB", "sysStartupConfigSourceFile"), ("CISCO-STACK-MIB", "sysConfigSupervisorModuleNo"), ("CISCO-STACK-MIB", "sysStandbyPortEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optionalSystemMiscGroup1 = optionalSystemMiscGroup1.setStatus('current')
ipPermitGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 36)).setObjects(("CISCO-STACK-MIB", "ipPermitAccessType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipPermitGroup1 = ipPermitGroup1.setStatus('current')
optionalSystemMiscGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 37)).setObjects(("CISCO-STACK-MIB", "sysPortFastBpduGuard"), ("CISCO-STACK-MIB", "sysErrDisableTimeoutEnable"), ("CISCO-STACK-MIB", "sysErrDisableTimeoutInterval"), ("CISCO-STACK-MIB", "sysTrafficMonitorHighWaterMark"), ("CISCO-STACK-MIB", "sysHighAvailabilityEnable"), ("CISCO-STACK-MIB", "sysHighAvailabilityVersioningEnable"), ("CISCO-STACK-MIB", "sysHighAvailabilityOperStatus"), ("CISCO-STACK-MIB", "sysHighAvailabilityNotRunningReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optionalSystemMiscGroup2 = optionalSystemMiscGroup2.setStatus('deprecated')
filterGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 38)).setObjects(("CISCO-STACK-MIB", "filterPortBroadcastThresholdFraction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    filterGroup1 = filterGroup1.setStatus('current')
mcastGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 39)).setObjects(("CISCO-STACK-MIB", "mcastEnableRgmp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mcastGroup1 = mcastGroup1.setStatus('current')
portGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 40)).setObjects(("CISCO-STACK-MIB", "portAdditionalOperStatus"), ("CISCO-STACK-MIB", "portEntPhysicalIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    portGroup1 = portGroup1.setStatus('current')
chassisGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 41)).setObjects(("CISCO-STACK-MIB", "chassisPs3Type"), ("CISCO-STACK-MIB", "chassisPs3Status"), ("CISCO-STACK-MIB", "chassisPs3TestResult"), ("CISCO-STACK-MIB", "chassisPEMInstalled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chassisGroup1 = chassisGroup1.setStatus('current')
moduleGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 42)).setObjects(("CISCO-STACK-MIB", "moduleEntPhysicalIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    moduleGroup1 = moduleGroup1.setStatus('current')
portCpbGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 43)).setObjects(("CISCO-STACK-MIB", "portCpbSpan"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    portCpbGroup2 = portCpbGroup2.setStatus('current')
voiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 44)).setObjects(("CISCO-STACK-MIB", "voicePortIfDHCPEnabled"), ("CISCO-STACK-MIB", "voicePortIfIpAddress"), ("CISCO-STACK-MIB", "voicePortIfIpNetMask"), ("CISCO-STACK-MIB", "voicePortIfTftpServerAddress"), ("CISCO-STACK-MIB", "voicePortIfGatewayAddress"), ("CISCO-STACK-MIB", "voicePortIfDnsServerAddress"), ("CISCO-STACK-MIB", "voicePortIfDnsDomain"), ("CISCO-STACK-MIB", "voicePortIfOperDnsDomain"), ("CISCO-STACK-MIB", "voicePortCallManagerIpAddr"), ("CISCO-STACK-MIB", "voicePortOperDnsServerIpAddr"), ("CISCO-STACK-MIB", "voicePortOperDnsServerSource"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    voiceGroup = voiceGroup.setStatus('current')
portGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 45)).setObjects(("CISCO-STACK-MIB", "portInlinePowerDetect"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    portGroup2 = portGroup2.setStatus('current')
vlanGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 46)).setObjects(("CISCO-STACK-MIB", "vlanPortAuxiliaryVlan"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vlanGroup1 = vlanGroup1.setStatus('deprecated')
portCpbGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 47)).setObjects(("CISCO-STACK-MIB", "portCpbInlinePower"), ("CISCO-STACK-MIB", "portCpbAuxiliaryVlan"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    portCpbGroup3 = portCpbGroup3.setStatus('current')
moduleGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 48)).setObjects(("CISCO-STACK-MIB", "moduleAdditionalStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    moduleGroup2 = moduleGroup2.setStatus('current')
switchAccelerationModuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 49)).setObjects(("CISCO-STACK-MIB", "switchAccelerationModuleIndex"), ("CISCO-STACK-MIB", "switchAccelerationModuleEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    switchAccelerationModuleGroup = switchAccelerationModuleGroup.setStatus('current')
optionalSystemMiscGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 50)).setObjects(("CISCO-STACK-MIB", "sysExtendedRmonNetflowModuleMask"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optionalSystemMiscGroup3 = optionalSystemMiscGroup3.setStatus('current')
optionalSystemMiscGroup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 51)).setObjects(("CISCO-STACK-MIB", "sshPublicKeySize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optionalSystemMiscGroup4 = optionalSystemMiscGroup4.setStatus('current')
vlanTrunkMappingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 52)).setObjects(("CISCO-STACK-MIB", "vlanTrunkMappingMax"), ("CISCO-STACK-MIB", "vlanTrunkMappingToVlan"), ("CISCO-STACK-MIB", "vlanTrunkMappingType"), ("CISCO-STACK-MIB", "vlanTrunkMappingOper"), ("CISCO-STACK-MIB", "vlanTrunkMappingStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vlanTrunkMappingGroup = vlanTrunkMappingGroup.setStatus('current')
portJumboFrameGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 53)).setObjects(("CISCO-STACK-MIB", "portJumboFrameModuleIndex"), ("CISCO-STACK-MIB", "portJumboFramePortIndex"), ("CISCO-STACK-MIB", "portJumboFrameEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    portJumboFrameGroup = portJumboFrameGroup.setStatus('current')
portCpbGroup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 54)).setObjects(("CISCO-STACK-MIB", "portCpbCosRewrite"), ("CISCO-STACK-MIB", "portCpbTosRewrite"), ("CISCO-STACK-MIB", "portCpbCopsGrouping"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    portCpbGroup4 = portCpbGroup4.setStatus('current')
fileCopyGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 55)).setObjects(("CISCO-STACK-MIB", "fileCopyRuntimeConfigPart"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fileCopyGroup2 = fileCopyGroup2.setStatus('current')
systemRmonGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 56)).setObjects(("CISCO-STACK-MIB", "sysMaxRmonMemory"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemRmonGroup2 = systemRmonGroup2.setStatus('current')
filterGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 57)).setObjects(("CISCO-STACK-MIB", "filterPortSuppressionOption"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    filterGroup2 = filterGroup2.setStatus('current')
optionalSystemMiscGroup5 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 58)).setObjects(("CISCO-STACK-MIB", "sysMacReductionAdminEnable"), ("CISCO-STACK-MIB", "sysMacReductionOperEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optionalSystemMiscGroup5 = optionalSystemMiscGroup5.setStatus('current')
syslogGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 59)).setObjects(("CISCO-STACK-MIB", "syslogTelnetEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    syslogGroup2 = syslogGroup2.setStatus('current')
systemStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 60)).setObjects(("CISCO-STACK-MIB", "sysStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemStatusGroup = systemStatusGroup.setStatus('current')
configurationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 61)).setObjects(("CISCO-STACK-MIB", "configMode"), ("CISCO-STACK-MIB", "configTextFileLocation"), ("CISCO-STACK-MIB", "configWriteMem"), ("CISCO-STACK-MIB", "configWriteMemStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    configurationGroup = configurationGroup.setStatus('current')
filterGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 62)).setObjects(("CISCO-STACK-MIB", "filterPortSuppressionViolation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    filterGroup3 = filterGroup3.setStatus('current')
portGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 63)).setObjects(("CISCO-STACK-MIB", "portErrDisableTimeOutEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    portGroup3 = portGroup3.setStatus('current')
portCpbGroup5 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 64)).setObjects(("CISCO-STACK-MIB", "portCpbDot1x"), ("CISCO-STACK-MIB", "portCpbIgmpFilter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    portCpbGroup5 = portCpbGroup5.setStatus('current')
authenticationGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 65)).setObjects(("CISCO-STACK-MIB", "tacacsDirectedRequest"), ("CISCO-STACK-MIB", "tacacsAuthKey"), ("CISCO-STACK-MIB", "tacacsServerAddr"), ("CISCO-STACK-MIB", "tacacsServerType"), ("CISCO-STACK-MIB", "radiusDeadtime"), ("CISCO-STACK-MIB", "radiusAuthKey"), ("CISCO-STACK-MIB", "radiusTimeout"), ("CISCO-STACK-MIB", "radiusRetransmits"), ("CISCO-STACK-MIB", "radiusServerAddr"), ("CISCO-STACK-MIB", "radiusServerAuthPort"), ("CISCO-STACK-MIB", "radiusServerType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    authenticationGroup1 = authenticationGroup1.setStatus('deprecated')
systemMiscGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 66)).setObjects(("CISCO-STACK-MIB", "sysMgmtType"), ("CISCO-STACK-MIB", "sysAttachType"), ("CISCO-STACK-MIB", "sysBaudRate"), ("CISCO-STACK-MIB", "sysInsertMode"), ("CISCO-STACK-MIB", "sysEnableModem"), ("CISCO-STACK-MIB", "sysEnableRedirects"), ("CISCO-STACK-MIB", "sysArpAgingTime"), ("CISCO-STACK-MIB", "sysCommunityRwa"), ("CISCO-STACK-MIB", "sysCommunityRw"), ("CISCO-STACK-MIB", "sysCommunityRo"), ("CISCO-STACK-MIB", "sysIpVlan"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemMiscGroup1 = systemMiscGroup1.setStatus('current')
systemTrapGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 67)).setObjects(("CISCO-STACK-MIB", "sysEnableChassisTraps"), ("CISCO-STACK-MIB", "sysEnableModuleTraps"), ("CISCO-STACK-MIB", "sysEnableBridgeTraps"), ("CISCO-STACK-MIB", "sysEnableRepeaterTraps"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemTrapGroup1 = systemTrapGroup1.setStatus('deprecated')
optionalSystemMiscGroup6 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 68)).setObjects(("CISCO-STACK-MIB", "sysErrDisableTimeoutEnable"), ("CISCO-STACK-MIB", "sysErrDisableTimeoutInterval"), ("CISCO-STACK-MIB", "sysTrafficMonitorHighWaterMark"), ("CISCO-STACK-MIB", "sysHighAvailabilityEnable"), ("CISCO-STACK-MIB", "sysHighAvailabilityVersioningEnable"), ("CISCO-STACK-MIB", "sysHighAvailabilityOperStatus"), ("CISCO-STACK-MIB", "sysHighAvailabilityNotRunningReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optionalSystemMiscGroup6 = optionalSystemMiscGroup6.setStatus('current')
optionalChassisGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 69)).setObjects(("CISCO-STACK-MIB", "chassisPs1TestResult"), ("CISCO-STACK-MIB", "chassisPs2TestResult"), ("CISCO-STACK-MIB", "chassisFanTestResult"), ("CISCO-STACK-MIB", "chassisSlotConfig"), ("CISCO-STACK-MIB", "chassisModel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optionalChassisGroup1 = optionalChassisGroup1.setStatus('current')
portGroup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 70)).setObjects(("CISCO-STACK-MIB", "portModuleIndex"), ("CISCO-STACK-MIB", "portIndex"), ("CISCO-STACK-MIB", "portCrossIndex"), ("CISCO-STACK-MIB", "portName"), ("CISCO-STACK-MIB", "portType"), ("CISCO-STACK-MIB", "portOperStatus"), ("CISCO-STACK-MIB", "portCrossGroupIndex"), ("CISCO-STACK-MIB", "portAdditionalStatus"), ("CISCO-STACK-MIB", "portAdminSpeed"), ("CISCO-STACK-MIB", "portDuplex"), ("CISCO-STACK-MIB", "portIfIndex"), ("CISCO-STACK-MIB", "portAdminRxFlowControl"), ("CISCO-STACK-MIB", "portOperRxFlowControl"), ("CISCO-STACK-MIB", "portAdminTxFlowControl"), ("CISCO-STACK-MIB", "portOperTxFlowControl"), ("CISCO-STACK-MIB", "portMacControlTransmitFrames"), ("CISCO-STACK-MIB", "portMacControlReceiveFrames"), ("CISCO-STACK-MIB", "portMacControlPauseTransmitFrames"), ("CISCO-STACK-MIB", "portMacControlPauseReceiveFrames"), ("CISCO-STACK-MIB", "portMacControlUnknownProtocolFrames"), ("CISCO-STACK-MIB", "portLinkFaultStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    portGroup4 = portGroup4.setStatus('current')
vlanGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 71)).setObjects(("CISCO-STACK-MIB", "vlanPortModule"), ("CISCO-STACK-MIB", "vlanPort"), ("CISCO-STACK-MIB", "vlanPortVlan"), ("CISCO-STACK-MIB", "vlanPortIslVlansAllowed"), ("CISCO-STACK-MIB", "vlanPortSwitchLevel"), ("CISCO-STACK-MIB", "vlanPortIslAdminStatus"), ("CISCO-STACK-MIB", "vlanPortIslOperStatus"), ("CISCO-STACK-MIB", "vlanPortIslPriorityVlans"), ("CISCO-STACK-MIB", "vlanPortAdminStatus"), ("CISCO-STACK-MIB", "vlanPortOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vlanGroup2 = vlanGroup2.setStatus('current')
ipPermitGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 72)).setObjects(("CISCO-STACK-MIB", "ipPermitAddress"), ("CISCO-STACK-MIB", "ipPermitMask"), ("CISCO-STACK-MIB", "ipPermitType"), ("CISCO-STACK-MIB", "ipPermitDeniedAddress"), ("CISCO-STACK-MIB", "ipPermitDeniedAccess"), ("CISCO-STACK-MIB", "ipPermitDeniedTime"), ("CISCO-STACK-MIB", "ipPermitAccessTypeEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipPermitGroup2 = ipPermitGroup2.setStatus('current')
optionalPortGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 73)).setObjects(("CISCO-STACK-MIB", "portSecurityModuleIndex"), ("CISCO-STACK-MIB", "portSecurityPortIndex"), ("CISCO-STACK-MIB", "portSecurityAdminStatus"), ("CISCO-STACK-MIB", "portSecurityOperStatus"), ("CISCO-STACK-MIB", "portSecurityLastSrcAddr"), ("CISCO-STACK-MIB", "portSecuritySecureSrcAddr"), ("CISCO-STACK-MIB", "portCpbModuleIndex"), ("CISCO-STACK-MIB", "portCpbPortIndex"), ("CISCO-STACK-MIB", "portCpbSpeed"), ("CISCO-STACK-MIB", "portCpbDuplex"), ("CISCO-STACK-MIB", "portCpbTrunkEncapsulationType"), ("CISCO-STACK-MIB", "portCpbTrunkMode"), ("CISCO-STACK-MIB", "portCpbChannel"), ("CISCO-STACK-MIB", "portCpbBroadcastSuppression"), ("CISCO-STACK-MIB", "portCpbFlowControl"), ("CISCO-STACK-MIB", "portCpbSecurity"), ("CISCO-STACK-MIB", "portCpbVlanMembership"), ("CISCO-STACK-MIB", "portCpbPortfast"), ("CISCO-STACK-MIB", "portTopNControlIndex"), ("CISCO-STACK-MIB", "portTopNRateBase"), ("CISCO-STACK-MIB", "portTopNType"), ("CISCO-STACK-MIB", "portTopNMode"), ("CISCO-STACK-MIB", "portTopNReportStatus"), ("CISCO-STACK-MIB", "portTopNDuration"), ("CISCO-STACK-MIB", "portTopNTimeRemaining"), ("CISCO-STACK-MIB", "portTopNStartTime"), ("CISCO-STACK-MIB", "portTopNRequestedSize"), ("CISCO-STACK-MIB", "portTopNGrantedSize"), ("CISCO-STACK-MIB", "portTopNOwner"), ("CISCO-STACK-MIB", "portTopNStatus"), ("CISCO-STACK-MIB", "portTopNIndex"), ("CISCO-STACK-MIB", "portTopNModuleNumber"), ("CISCO-STACK-MIB", "portTopNPortNumber"), ("CISCO-STACK-MIB", "portTopNUtilization"), ("CISCO-STACK-MIB", "portTopNIOOctets"), ("CISCO-STACK-MIB", "portTopNIOPkts"), ("CISCO-STACK-MIB", "portTopNIOBroadcast"), ("CISCO-STACK-MIB", "portTopNIOMulticast"), ("CISCO-STACK-MIB", "portTopNInErrors"), ("CISCO-STACK-MIB", "portTopNBufferOverFlow"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optionalPortGroup1 = optionalPortGroup1.setStatus('current')
optionalSystemTrapGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 74)).setObjects(("CISCO-STACK-MIB", "sysEnableIpPermitTraps"), ("CISCO-STACK-MIB", "sysEnableVmpsTraps"), ("CISCO-STACK-MIB", "sysEnableConfigTraps"), ("CISCO-STACK-MIB", "sysEnableEntityTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optionalSystemTrapGroup1 = optionalSystemTrapGroup1.setStatus('current')
authenticationGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 75)).setObjects(("CISCO-STACK-MIB", "tacacsDirectedRequest"), ("CISCO-STACK-MIB", "tacacsAuthKey"), ("CISCO-STACK-MIB", "tacacsServerAddr"), ("CISCO-STACK-MIB", "tacacsServerType"), ("CISCO-STACK-MIB", "radiusDeadtime"), ("CISCO-STACK-MIB", "radiusAuthKey"), ("CISCO-STACK-MIB", "radiusTimeout"), ("CISCO-STACK-MIB", "radiusRetransmits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    authenticationGroup2 = authenticationGroup2.setStatus('current')
systemTrapGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 76)).setObjects(("CISCO-STACK-MIB", "sysEnableChassisTraps"), ("CISCO-STACK-MIB", "sysEnableModuleTraps"), ("CISCO-STACK-MIB", "sysEnableRepeaterTraps"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemTrapGroup2 = systemTrapGroup2.setStatus('current')
notificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 77)).setObjects(("CISCO-STACK-MIB", "lerAlarmOn"), ("CISCO-STACK-MIB", "lerAlarmOff"), ("CISCO-STACK-MIB", "moduleUp"), ("CISCO-STACK-MIB", "moduleDown"), ("CISCO-STACK-MIB", "chassisAlarmOn"), ("CISCO-STACK-MIB", "chassisAlarmOff"), ("CISCO-STACK-MIB", "ipPermitDeniedTrap"), ("CISCO-STACK-MIB", "sysConfigChangeTrap"), ("CISCO-STACK-MIB", "tokenRingSoftErrExceededTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    notificationGroup = notificationGroup.setStatus('current')
ipPermitGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 1, 31, 2, 78)).setObjects(("CISCO-STACK-MIB", "ipPermitTelnetConnectLimit"), ("CISCO-STACK-MIB", "ipPermitSshConnectLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipPermitGroup3 = ipPermitGroup3.setStatus('current')
mibBuilder.exportSymbols("CISCO-STACK-MIB", mcastRouterOperStatus=mcastRouterOperStatus, sysConfigSupervisorModuleNo=sysConfigSupervisorModuleNo, tacacsDirectedRequest=tacacsDirectedRequest, portTopNStatus=portTopNStatus, ntpServerEntry=ntpServerEntry, voiceGrp=voiceGrp, brouterEnableGiantCheck=brouterEnableGiantCheck, sysAttachType=sysAttachType, optionalSystemMiscGroup3=optionalSystemMiscGroup3, filterProtocolTable=filterProtocolTable, portTopNIOMulticast=portTopNIOMulticast, sysBannerMotd=sysBannerMotd, sysEnableConfigTraps=sysEnableConfigTraps, sysEnableModem=sysEnableModem, portCpbSecurity=portCpbSecurity, tokenRingPortSoftErrTable=tokenRingPortSoftErrTable, chassisSerialNumberString=chassisSerialNumberString, voicePortModuleIndex=voicePortModuleIndex, cpw1601sysID=cpw1601sysID, voicePortDnsPortIndex=voicePortDnsPortIndex, filterTestValue=filterTestValue, portCpbBroadcastSuppression=portCpbBroadcastSuppression, radiusGrp=radiusGrp, portGroup4=portGroup4, vmpsEntry=vmpsEntry, systemRmonGroup=systemRmonGroup, sysCommunityString=sysCommunityString, traceRouteQueryIndex=traceRouteQueryIndex, moduleIPAddress=moduleIPAddress, ciscoStackgMIBCompliance5=ciscoStackgMIBCompliance5, portTopNControlTable=portTopNControlTable, sshPublicKeySize=sshPublicKeySize, traceRouteQueryUDPPort=traceRouteQueryUDPPort, systemTrapGroup1=systemTrapGroup1, portCpbInlinePower=portCpbInlinePower, radiusDeadtime=radiusDeadtime, sysTraffic=sysTraffic, ipPermitDeniedTime=ipPermitDeniedTime, vlanGroup1=vlanGroup1, tokenRingDripInputQueueDrops=tokenRingDripInputQueueDrops, sysMgmtType=sysMgmtType, portSecurityExtModuleIndex=portSecurityExtModuleIndex, moduleDown=moduleDown, tokenRingDripOwnerNodeID=tokenRingDripOwnerNodeID, ntpAuthenticationPublicKey=ntpAuthenticationPublicKey, portTopNRateBase=portTopNRateBase, portChannelModuleIndex=portChannelModuleIndex, sysTrapReceiverEntry=sysTrapReceiverEntry, tokenRingSoftErrorMonitorGroup=tokenRingSoftErrorMonitorGroup, optionalModuleGroup=optionalModuleGroup, voicePortCallManagerEntry=voicePortCallManagerEntry, dnsServerTable=dnsServerTable, portLinkFaultStatus=portLinkFaultStatus, portTopNGrp=portTopNGrp, sysConsolePrimaryEnableAuthentication=sysConsolePrimaryEnableAuthentication, moduleStandbyStatus=moduleStandbyStatus, tacacsTimeout=tacacsTimeout, brouterIpx8022ToEther=brouterIpx8022ToEther, tokenRingDripLastChangedRevision=tokenRingDripLastChangedRevision, chassisModel=chassisModel, ciscoStackgMIBCompliance7=ciscoStackgMIBCompliance7, filterProtocolPort=filterProtocolPort, vlanPortTable=vlanPortTable, voicePortIfDHCPEnabled=voicePortIfDHCPEnabled, portEntry=portEntry, cpw2200sysID=cpw2200sysID, cisco7606sysID=cisco7606sysID, portSecurityGroup1=portSecurityGroup1, filterGroup2=filterGroup2, cisco7609sysID=cisco7609sysID, radiusServerAddr=radiusServerAddr, ntpAuthenticationGroup=ntpAuthenticationGroup, portTopNIOBroadcast=portTopNIOBroadcast, sysConfigChangeTime=sysConfigChangeTime, dnsServerAddr=dnsServerAddr, systemMiscGroup=systemMiscGroup, wsc4912gsysID=wsc4912gsysID, portCrossIndex=portCrossIndex, tokenRingPortIndex=tokenRingPortIndex, ciscoStackgMIBCompliance2=ciscoStackgMIBCompliance2, sysTrapReceiverTable=sysTrapReceiverTable, brouterEnableAPaRT=brouterEnableAPaRT, ciscoStackMIB=ciscoStackMIB, mcastGroup=mcastGroup, traceRouteQueryTable=traceRouteQueryTable, moduleSlotNum=moduleSlotNum, chassisPs3Type=chassisPs3Type, optionalChassisGroup=optionalChassisGroup, vlanTrunkMappingMax=vlanTrunkMappingMax, traceRouteQueryInitTTL=traceRouteQueryInitTTL, optionalSystemMiscGroup5=optionalSystemMiscGroup5, chassisComponentHwVersion=chassisComponentHwVersion, portSecurityModuleIndex=portSecurityModuleIndex, traceRouteQueryTime=traceRouteQueryTime, moduleGroup1=moduleGroup1, brouterGrp=brouterGrp, portAdminSpeed=portAdminSpeed, tftpResult=tftpResult, wsc4506sysID=wsc4506sysID, brouterFddiTransmitMax=brouterFddiTransmitMax, wsc6504esysID=wsc6504esysID, chassisFanTestResult=chassisFanTestResult, brouterPortIpAddr=brouterPortIpAddr, wsc4006sysID=wsc4006sysID, tokenRingPortEarlyTokenRel=tokenRingPortEarlyTokenRel, moduleSwHiVersion=moduleSwHiVersion, mdgGatewayGroup=mdgGatewayGroup, portSecurityEntry=portSecurityEntry, mcastEnableIgmp=mcastEnableIgmp, portChannelNeighbourDeviceId=portChannelNeighbourDeviceId, portChannelNeighbourPortId=portChannelNeighbourPortId, filterProtocolType=filterProtocolType, ntpAuthenticationEnable=ntpAuthenticationEnable, ipPermitAccessType=ipPermitAccessType, voicePortDnsModuleIndex=voicePortDnsModuleIndex, voicePortOperDnsServerEntry=voicePortOperDnsServerEntry, portSecurityShutdownTimeOut=portSecurityShutdownTimeOut, brouterCamAgingTime=brouterCamAgingTime, wsc3200sysID=wsc3200sysID, brouterIpx8023RawToFddi=brouterIpx8023RawToFddi, chassisComponentIndex=chassisComponentIndex, chassisNumSlots=chassisNumSlots, moduleHwVersion=moduleHwVersion, chassisFanStatus=chassisFanStatus, brouterEnableSpantree=brouterEnableSpantree, chassisComponentTable=chassisComponentTable, tokenRingDripBackupCrf=tokenRingDripBackupCrf, portCpbUdld=portCpbUdld, syslogGroup2=syslogGroup2, sysTrafficMeterTable=sysTrafficMeterTable, sysTrapReceiverAddr=sysTrapReceiverAddr, ciscoStackNotificationsPrefix=ciscoStackNotificationsPrefix, portCpbSpan=portCpbSpan, sysTrafficMeterPeakTime=sysTrafficMeterPeakTime, optionalPortGroup=optionalPortGroup, fileCopyGroup2=fileCopyGroup2, portJumboFrameGrp=portJumboFrameGrp, tacacsNumLoginAttempts=tacacsNumLoginAttempts, vmpsGroup=vmpsGroup, brouterPortBroadcast=brouterPortBroadcast, ipPermitListEntry=ipPermitListEntry, traceRouteGrp=traceRouteGrp, portCpbTosRewrite=portCpbTosRewrite, portTopNIOOctets=portTopNIOOctets, traceRouteMaxQueries=traceRouteMaxQueries, portTopNUtilization=portTopNUtilization, fileCopyGroup=fileCopyGroup, vlanPortIslOperStatus=vlanPortIslOperStatus, tokenRingDripLocalNodeID=tokenRingDripLocalNodeID, portCpbAuxiliaryVlan=portCpbAuxiliaryVlan, cpw1220csysID=cpw1220csysID, configurationGroup=configurationGroup, cisco7604sysID=cisco7604sysID, portCrossGroupIndex=portCrossGroupIndex, wsc1200sysID=wsc1200sysID, cpw1600sysID=cpw1600sysID, sysEnableRepeaterTraps=sysEnableRepeaterTraps, chassisComponentType=chassisComponentType, brouterPortBridgeVlan=brouterPortBridgeVlan, tftpAction=tftpAction, sysTrafficPeak=sysTrafficPeak, switchAccelerationModuleEnable=switchAccelerationModuleEnable, monitorEnable=monitorEnable, ipPermitGroup=ipPermitGroup, chassisPEMInstalled=chassisPEMInstalled, vlanPortSwitchLevel=vlanPortSwitchLevel, tokenRingDripAdvertsTransmitted=tokenRingDripAdvertsTransmitted, ntpBcastClient=ntpBcastClient, portChannelPortIndex=portChannelPortIndex, vlanPortIslPriorityVlans=vlanPortIslPriorityVlans, moduleTable=moduleTable, tokenRingPortCfgLossInterval=tokenRingPortCfgLossInterval, sysIpVlan=sysIpVlan, portCpbFlowControl=portCpbFlowControl, moduleEntry=moduleEntry, ntpServerPublicKey=ntpServerPublicKey, portSecurityMaxSrcAddr=portSecurityMaxSrcAddr, vmpsType=vmpsType, mcastGroup1=mcastGroup1, filterMacAddress=filterMacAddress, tokenRingPortTable=tokenRingPortTable, chassisSerialNumber=chassisSerialNumber, portCpbSpeed=portCpbSpeed, voicePortOperDnsServerTable=voicePortOperDnsServerTable, configWriteMemStatus=configWriteMemStatus, filterTestModule=filterTestModule, filterVendorModule=filterVendorModule, systemRmonGroup2=systemRmonGroup2, filterGroup=filterGroup, vlanTrunkMappingEntry=vlanTrunkMappingEntry, portTopNStartTime=portTopNStartTime, vlanPortAuxiliaryVlan=vlanPortAuxiliaryVlan, notificationGroup=notificationGroup, dnsGrp=dnsGrp, filterVendorTable=filterVendorTable, dnsEnable=dnsEnable, portJumboFrameEntry=portJumboFrameEntry, monitorGrp=monitorGrp, portCpbChannel=portCpbChannel, monitorDirection=monitorDirection, portSecurityOperStatus=portSecurityOperStatus, portTopNModuleNumber=portTopNModuleNumber, tokenRingDripLocalVlanStatusTable=tokenRingDripLocalVlanStatusTable, tokenRingPortPriorityMinXmit=tokenRingPortPriorityMinXmit, portChannelEntry=portChannelEntry, sysCommunityRwa=sysCommunityRwa, tokenRingPortSetACbits=tokenRingPortSetACbits, filterMacTable=filterMacTable, traceRouteDataTable=traceRouteDataTable, sysErrDisableTimeoutInterval=sysErrDisableTimeoutInterval, moduleSerialNumberString=moduleSerialNumberString, configGrp=configGrp, sysTrafficMeterPeak=sysTrafficMeterPeak, mcastEnableRgmp=mcastEnableRgmp, wsc2948gsysID=wsc2948gsysID, chassisGrp=chassisGrp, mcastRouterAdminStatus=mcastRouterAdminStatus, portChannelPorts=portChannelPorts, portTopNRequestedSize=portTopNRequestedSize, wsc3001sysID=wsc3001sysID, brouterEnableFddiCheck=brouterEnableFddiCheck, portCpbCosRewrite=portCpbCosRewrite, filterTestType=filterTestType, tokenRingPortSoftErrLastCounterReset=tokenRingPortSoftErrLastCounterReset, tokenRingDripLocalPortStatus=tokenRingDripLocalPortStatus, monitorAdminSourcePorts=monitorAdminSourcePorts, ntpSummertimeStatus=ntpSummertimeStatus, sysConfigChangeInfo=sysConfigChangeInfo, portMacControlUnknownProtocolFrames=portMacControlUnknownProtocolFrames, sysEnableStpxTrap=sysEnableStpxTrap, filterGrp=filterGrp, filterTestEntry=filterTestEntry, vlanTrunkMappingType=vlanTrunkMappingType, vlanPortAdminStatus=vlanPortAdminStatus, brouterEthernetTransmitMax=brouterEthernetTransmitMax, vlanPortIslAdminStatus=vlanPortIslAdminStatus, mdgGatewayEntry=mdgGatewayEntry, portSecurityTable=portSecurityTable, wsc6506sysID=wsc6506sysID, ipPermitListGrp=ipPermitListGrp, dcd=dcd, tokenRingDripAdvertsReceived=tokenRingDripAdvertsReceived, portTopNControlIndex=portTopNControlIndex, portMacControlPauseReceiveFrames=portMacControlPauseReceiveFrames, sysClearMacTime=sysClearMacTime, moduleAction=moduleAction, moduleAdditionalStatus=moduleAdditionalStatus, ntpGroup=ntpGroup, vlanPortEntry=vlanPortEntry, ciscoStackgMIBCompliance8=ciscoStackgMIBCompliance8, vlanTrunkMappingGroup=vlanTrunkMappingGroup, filterTestOffset=filterTestOffset, ipPermitTelnetConnectLimit=ipPermitTelnetConnectLimit, sysFddiRingSMTIndex=sysFddiRingSMTIndex)
mibBuilder.exportSymbols("CISCO-STACK-MIB", filterPortSuppressionViolation=filterPortSuppressionViolation, voicePortIfTftpServerAddress=voicePortIfTftpServerAddress, ntpGrp=ntpGrp, sysEnableRmon=sysEnableRmon, portTopNDuration=portTopNDuration, dnsServerType=dnsServerType, sysTrapReceiverComm=sysTrapReceiverComm, sysHighAvailabilityEnable=sysHighAvailabilityEnable, syslogServerTable=syslogServerTable, wsc3900sysID=wsc3900sysID, chassisPs3Status=chassisPs3Status, portAdminTxFlowControl=portAdminTxFlowControl, vlanGrp=vlanGrp, ntpBcastDelay=ntpBcastDelay, filterMacEntry=filterMacEntry, chassisAlarmOff=chassisAlarmOff, fileCopyProtocol=fileCopyProtocol, ntpServerTable=ntpServerTable, radiusServerTable=radiusServerTable, tokenRingDripLastRevision=tokenRingDripLastRevision, sysHighAvailabilityOperStatus=sysHighAvailabilityOperStatus, wsc3000sysID=wsc3000sysID, chassisSlotConfig=chassisSlotConfig, tacacsEnableAuthentication=tacacsEnableAuthentication, ciscoStackMIBCompliances=ciscoStackMIBCompliances, fileCopyResultRcpErrorMessage=fileCopyResultRcpErrorMessage, sysConfigChangeTrap=sysConfigChangeTrap, sysClearPortTime=sysClearPortTime, portCpbCopsGrouping=portCpbCopsGrouping, switchAccelerationModuleTable=switchAccelerationModuleTable, brouterPortIpHelpers=brouterPortIpHelpers, monitorGroup=monitorGroup, tokenRingDripOutputQueueDrops=tokenRingDripOutputQueueDrops, filterPortSuppressionOption=filterPortSuppressionOption, wsc2900sysID=wsc2900sysID, moduleEntPhysicalIndex=moduleEntPhysicalIndex, ntpAuthenticationTable=ntpAuthenticationTable, voicePortIfConfigModuleIndex=voicePortIfConfigModuleIndex, sysBroadcast=sysBroadcast, traceRouteQueryStatus=traceRouteQueryStatus, vlanPortOperStatus=vlanPortOperStatus, brouterEnableRip=brouterEnableRip, syslogMessageFacility=syslogMessageFacility, optionalSystemMiscGroup2=optionalSystemMiscGroup2, switchAccelerationModuleIndex=switchAccelerationModuleIndex, voicePortIfConfigTable=voicePortIfConfigTable, sysIpAddr=sysIpAddr, wsc6knamsysID=wsc6knamsysID, portGrp=portGrp, ntpServerAddress=ntpServerAddress, configWriteMem=configWriteMem, voicePortCallManagerIpAddr=voicePortCallManagerIpAddr, systemTrapGroup2=systemTrapGroup2, radiusAuthKey=radiusAuthKey, portSecurityAdminStatus=portSecurityAdminStatus, voicePortIfDnsServerAddress=voicePortIfDnsServerAddress, wsc1900sysID=wsc1900sysID, portTopNIndex=portTopNIndex, filterProtocolValue=filterProtocolValue, authenticationGroup1=authenticationGroup1, sysTrafficMeter=sysTrafficMeter, vlanPortVlan=vlanPortVlan, vlanPort=vlanPort, voicePortIfIpNetMask=voicePortIfIpNetMask, portOperRxFlowControl=portOperRxFlowControl, esStack=esStack, portCpbDuplex=portCpbDuplex, portJumboFramePortIndex=portJumboFramePortIndex, sysTelnetPrimaryEnableAuthentication=sysTelnetPrimaryEnableAuthentication, syslogMessageControlTable=syslogMessageControlTable, ipPermitAccessTypeEnable=ipPermitAccessTypeEnable, wsc4003sysID=wsc4003sysID, filterVendorId=filterVendorId, sysConsolePrimaryLoginAuthentication=sysConsolePrimaryLoginAuthentication, traceRouteQueryResult=traceRouteQueryResult, portSecurityViolationPolicy=portSecurityViolationPolicy, portType=portType, tftpGroup=tftpGroup, portChannelProtInPackets=portChannelProtInPackets, wsc2980gsysID=wsc2980gsysID, mdgGrp=mdgGrp, chassisSysType=chassisSysType, tokenRingPortPriorityThresh=tokenRingPortPriorityThresh, syslogHostEnable=syslogHostEnable, traceRouteQueryPacketCount=traceRouteQueryPacketCount, vmpsAccessed=vmpsAccessed, traceRouteQueryOwner=traceRouteQueryOwner, brouterEnableIpFragmentation=brouterEnableIpFragmentation, wsc5002sysID=wsc5002sysID, wsc5500sysID=wsc5500sysID, portCpbGroup2=portCpbGroup2, filterPort=filterPort, portChannelTable=portChannelTable, filterGroup1=filterGroup1, syslogTelnetEnable=syslogTelnetEnable, moduleSwLoVersion=moduleSwLoVersion, wsc5000sysID=wsc5000sysID, tokenRingDripRemotePortStatus=tokenRingDripRemotePortStatus, moduleModel=moduleModel, filterGroup3=filterGroup3, sysStartupConfigSource=sysStartupConfigSource, monitorSourceModule=monitorSourceModule, tokenRingPortSoftErrEnable=tokenRingPortSoftErrEnable, voicePortCallManagerIndex=voicePortCallManagerIndex, optionalSystemMiscGroup1=optionalSystemMiscGroup1, portCpbGroup5=portCpbGroup5, traceRouteQueryMaxTTL=traceRouteQueryMaxTTL, portJumboFrameTable=portJumboFrameTable, portSecurityAgingTime=portSecurityAgingTime, portJumboFrameModuleIndex=portJumboFrameModuleIndex, wsc5509sysID=wsc5509sysID, wsc6006sysID=wsc6006sysID, tacacsGrp=tacacsGrp, brouterPortEntry=brouterPortEntry, wsc6509nebasysID=wsc6509nebasysID, chassisBkplType=chassisBkplType, moduleStatus=moduleStatus, voicePortOperDnsServerSource=voicePortOperDnsServerSource, filterTestMask=filterTestMask, portTopNIOPkts=portTopNIOPkts, portGroup=portGroup, sysEnableEntityTrap=sysEnableEntityTrap, chassisComponentModel=chassisComponentModel, filterTestIndex=filterTestIndex, traceRouteDataHopCount=traceRouteDataHopCount, PYSNMP_MODULE_ID=ciscoStackMIB, cpw1220sysID=cpw1220sysID, chassisTempAlarm=chassisTempAlarm, vlanPortIslVlansAllowed=vlanPortIslVlansAllowed, ipPermitDeniedAddress=ipPermitDeniedAddress, chassisMajorAlarm=chassisMajorAlarm, portAdditionalStatus=portAdditionalStatus, wsc1900LiteFxsysID=wsc1900LiteFxsysID, traceRouteDataEntry=traceRouteDataEntry, sysCommunityTable=sysCommunityTable, filterPortComplex=filterPortComplex, chassisMinorAlarm=chassisMinorAlarm, tokenRingDripDistributedCrf=tokenRingDripDistributedCrf, wsc2980gasysID=wsc2980gasysID, voicePortIfDnsDomain=voicePortIfDnsDomain, portChannelAdminStatus=portChannelAdminStatus, portCpbTrunkMode=portCpbTrunkMode, portJumboFrameGroup=portJumboFrameGroup, dnsServerEntry=dnsServerEntry, voicePortIfConfigPortIndex=voicePortIfConfigPortIndex, dnsGroup=dnsGroup, portErrDisableTimeOutEnable=portErrDisableTimeOutEnable, ipPermitDeniedAccess=ipPermitDeniedAccess, configTextFileLocation=configTextFileLocation, portGroup3=portGroup3, wsc6509sysID=wsc6509sysID, ciscoStackgMIBCompliance=ciscoStackgMIBCompliance, multicastGrp=multicastGrp, vlanTable=vlanTable, traceRouteDataGatewayName=traceRouteDataGatewayName, portMacControlReceiveFrames=portMacControlReceiveFrames, wsc2926sysID=wsc2926sysID, portSecurityPortIndex=portSecurityPortIndex, filterPortEntry=filterPortEntry, sysTrafficMeterType=sysTrafficMeterType, fileCopySrcFileName=fileCopySrcFileName, wsc1900isysID=wsc1900isysID, portChannelGrp=portChannelGrp, chassisPs2TestResult=chassisPs2TestResult, portTopNPortNumber=portTopNPortNumber, systemMiscGroup1=systemMiscGroup1, mcastRouterPortIndex=mcastRouterPortIndex, fileCopyRuntimeConfigPart=fileCopyRuntimeConfigPart, syslogGroup=syslogGroup, ntpAuthenticationType=ntpAuthenticationType, voicePortIfGatewayAddress=voicePortIfGatewayAddress, moduleGrp=moduleGrp, sysStatus=sysStatus, voicePortIfIpAddress=voicePortIfIpAddress, mcastRouterEntry=mcastRouterEntry, portChannelProtOutPackets=portChannelProtOutPackets, tokenRingPortMode=tokenRingPortMode, sysFddiRingNext=sysFddiRingNext, moduleIPAddressVlan=moduleIPAddressVlan, voicePortIfConfigEntry=voicePortIfConfigEntry, sysExtendedRmonNetflowPassword=sysExtendedRmonNetflowPassword, ciscoStackMIBConformance=ciscoStackMIBConformance, portSecurityLastSrcAddr=portSecurityLastSrcAddr, portAdminRxFlowControl=portAdminRxFlowControl, portCpbPortIndex=portCpbPortIndex, vmpsTable=vmpsTable, ciscoStackMIBGroups=ciscoStackMIBGroups, ntpTimezoneOffsetMinute=ntpTimezoneOffsetMinute, sysCommunityEntry=sysCommunityEntry, sysTrafficMonitorHighWaterMark=sysTrafficMonitorHighWaterMark, portInlinePowerDetect=portInlinePowerDetect, moduleUp=moduleUp, portMacControlTransmitFrames=portMacControlTransmitFrames, sysNetMask=sysNetMask, syslogGrp=syslogGrp, portDuplex=portDuplex, tacacsLoginAuthentication=tacacsLoginAuthentication, portCpbGroup3=portCpbGroup3, tokenRingDripLocalVlanStatusEntry=tokenRingDripLocalVlanStatusEntry, sysPortFastBpduGuard=sysPortFastBpduGuard, securityGrp=securityGrp, sysExtendedRmonEnable=sysExtendedRmonEnable, wsc2820sysID=wsc2820sysID, wsc3920sysID=wsc3920sysID, brouteEnableGroup=brouteEnableGroup, fileCopyRemoteServer=fileCopyRemoteServer, portEntPhysicalIndex=portEntPhysicalIndex, ntpSummerTimezoneName=ntpSummerTimezoneName, optionalSystemMiscGroup6=optionalSystemMiscGroup6, portJumboFrameEnable=portJumboFrameEnable, chassisPs2Status=chassisPs2Status, traceRouteQueryTOS=traceRouteQueryTOS, filterPortBroadcastDiscards=filterPortBroadcastDiscards, sysStandbyPortEnable=sysStandbyPortEnable, ipPermitDeniedListEntry=ipPermitDeniedListEntry, tsStack=tsStack, filterPortTable=filterPortTable, ipPermitEnable=ipPermitEnable, brouterPortNetMask=brouterPortNetMask, moduleHwHiVersion=moduleHwHiVersion, portTopNType=portTopNType, sysFddiRingTable=sysFddiRingTable, wsc1100sysID=wsc1100sysID, portSpantreeFastStart=portSpantreeFastStart, portTopNControlEntry=portTopNControlEntry, tokenRingPortSoftErrReportInterval=tokenRingPortSoftErrReportInterval, cpw1420sysID=cpw1420sysID, sysStartupConfigSourceFile=sysStartupConfigSourceFile, cisco7613sysID=cisco7613sysID, filterProtocolModule=filterProtocolModule, tokenRingDripDistCrfMode=tokenRingDripDistCrfMode, tokenRingPortSoftErrThresh=tokenRingPortSoftErrThresh, ipPermitDeniedListTable=ipPermitDeniedListTable, chassisAlarmOn=chassisAlarmOn, portTopNTimeRemaining=portTopNTimeRemaining, radiusServerEntry=radiusServerEntry, tokenRingPortSoftErrEntry=tokenRingPortSoftErrEntry, sysEnableVmpsTraps=sysEnableVmpsTraps, filterMacType=filterMacType, moduleHwLoVersion=moduleHwLoVersion, portTopNEntry=portTopNEntry, moduleType=moduleType, fileCopyResult=fileCopyResult, traceRouteQueryDNSEnable=traceRouteQueryDNSEnable, sysMacReductionAdminEnable=sysMacReductionAdminEnable, tokenRingSoftErrExceededTrap=tokenRingSoftErrExceededTrap, vlanTrunkMappingToVlan=vlanTrunkMappingToVlan, wsc1000sysID=wsc1000sysID, sysBaudRate=sysBaudRate, sysEnableRedirects=sysEnableRedirects, brouterPortModule=brouterPortModule, fileCopyUserName=fileCopyUserName, systemTrapGroup=systemTrapGroup, brouterPort=brouterPort)
mibBuilder.exportSymbols("CISCO-STACK-MIB", ipPermitGroup2=ipPermitGroup2, chassisComponentEntry=chassisComponentEntry, portAdditionalOperStatus=portAdditionalOperStatus, sysExtendedRmonVlanModeEnable=sysExtendedRmonVlanModeEnable, tftpGrp=tftpGrp, tftpFile=tftpFile, vlanSpantreeEnable=vlanSpantreeEnable, moduleFwVersion=moduleFwVersion, traceRouteDataRtt=traceRouteDataRtt, sysErrDisableTimeoutEnable=sysErrDisableTimeoutEnable, ipPermitSshConnectLimit=ipPermitSshConnectLimit, systemGrp=systemGrp, ciscoStackgMIBCompliance3=ciscoStackgMIBCompliance3, sysTrapReceiverType=sysTrapReceiverType, mcastEnableCgmp=mcastEnableCgmp, voicePortOperDnsServerIndex=voicePortOperDnsServerIndex, lerAlarmOff=lerAlarmOff, filterPortBroadcastThreshold=filterPortBroadcastThreshold, filterProtocolEntry=filterProtocolEntry, filterPortBroadcastThresholdFraction=filterPortBroadcastThresholdFraction, sysExtendedRmonVlanAgentEnable=sysExtendedRmonVlanAgentEnable, tacacsServerEntry=tacacsServerEntry, adapterCard=adapterCard, ntpServerType=ntpServerType, moduleSubType2=moduleSubType2, brouterEnableTransitEncapsulation=brouterEnableTransitEncapsulation, sysHighAvailabilityVersioningEnable=sysHighAvailabilityVersioningEnable, vlanTrunkMappingStatus=vlanTrunkMappingStatus, portTopNGrantedSize=portTopNGrantedSize, systemTrafficGroup=systemTrafficGroup, portName=portName, sysExtendedRmonNetflowEnable=sysExtendedRmonNetflowEnable, VendorIdType=VendorIdType, vlanGroup2=vlanGroup2, tokenRingDripVlan=tokenRingDripVlan, radiusServerType=radiusServerType, vlanIndex=vlanIndex, monitorDestinationPort=monitorDestinationPort, portTopNTable=portTopNTable, mcastRouterModuleIndex=mcastRouterModuleIndex, switchAccelerationGrp=switchAccelerationGrp, chassisPs1Status=chassisPs1Status, sysCommunityRw=sysCommunityRw, fileCopyModuleNumber=fileCopyModuleNumber, radiusTimeout=radiusTimeout, chassisPs3TestResult=chassisPs3TestResult, moduleSerialNumber=moduleSerialNumber, wsc4503sysID=wsc4503sysID, monitorDestinationModule=monitorDestinationModule, wsc1600sysID=wsc1600sysID, portCpbGroup1=portCpbGroup1, syslogServerEntry=syslogServerEntry, ipPermitListTable=ipPermitListTable, chassisPs1TestResult=chassisPs1TestResult, switchAccelerationModuleEntry=switchAccelerationModuleEntry, ntpAuthenticationEntry=ntpAuthenticationEntry, portIndex=portIndex, tacacsAuthKey=tacacsAuthKey, portGroup2=portGroup2, tokenRingPortEntry=tokenRingPortEntry, sysFddiRingAddress=sysFddiRingAddress, syslogConsoleEnable=syslogConsoleEnable, brouterIpxSnapToEther=brouterIpxSnapToEther, filterMacModule=filterMacModule, brouterCamMode=brouterCamMode, voicePortIfOperDnsDomain=voicePortIfOperDnsDomain, portOperStatus=portOperStatus, tftpHost=tftpHost, sysTrafficPeakTime=sysTrafficPeakTime, moduleSwVersion=moduleSwVersion, sysReset=sysReset, optionalSystemTrapGroup1=optionalSystemTrapGroup1, sysBootVariable=sysBootVariable, syslogServerType=syslogServerType, syslogTimeStampOption=syslogTimeStampOption, fileCopyAction=fileCopyAction, moduleGroup2=moduleGroup2, tacacsLocalEnableAuthentication=tacacsLocalEnableAuthentication, ipPermitGroup1=ipPermitGroup1, portTopNBufferOverFlow=portTopNBufferOverFlow, voicePortOperDnsServerIpAddr=voicePortOperDnsServerIpAddr, sysEnableBridgeTraps=sysEnableBridgeTraps, ipPermitType=ipPermitType, filterPortBroadcastThrottle=filterPortBroadcastThrottle, modulePortStatus=modulePortStatus, vlanEntry=vlanEntry, voicePortIndex=voicePortIndex, tokenRingDripRemotePortConfigured=tokenRingDripRemotePortConfigured, sysEnableModuleTraps=sysEnableModuleTraps, cpw1900sysID=cpw1900sysID, sysArpAgingTime=sysArpAgingTime, moduleTestResult=moduleTestResult, vlanGroup=vlanGroup, tokenRingDripAreReductionMode=tokenRingDripAreReductionMode, portSecuritySecureSrcAddr=portSecuritySecureSrcAddr, cisco7603sysID=cisco7603sysID, sysCommunityAccess=sysCommunityAccess, ntpClient=ntpClient, portCpbEntry=portCpbEntry, portTopNInErrors=portTopNInErrors, configMode=configMode, wsc3100sysID=wsc3100sysID, ntpAuthenticationSecretKey=ntpAuthenticationSecretKey, radiusEnableAuthentication=radiusEnableAuthentication, portCpbGroup4=portCpbGroup4, tacacsLocalLoginAuthentication=tacacsLocalLoginAuthentication, radiusServerAuthPort=radiusServerAuthPort, wsc1400sysID=wsc1400sysID, sysHighAvailabilityNotRunningReason=sysHighAvailabilityNotRunningReason, traceRouteQueryEntry=traceRouteQueryEntry, ipPermitDeniedTrap=ipPermitDeniedTrap, wsc1900csysID=wsc1900csysID, portModuleIndex=portModuleIndex, vmpsAction=vmpsAction, moduleFwLoVersion=moduleFwLoVersion, systemStatusGroup=systemStatusGroup, moduleName=moduleName, vlanIfIndex=vlanIfIndex, sysInsertMode=sysInsertMode, fileCopyDstFileName=fileCopyDstFileName, chassisPs1Type=chassisPs1Type, portTable=portTable, vlanTrunkMappingOper=vlanTrunkMappingOper, brouterPortTable=brouterPortTable, sysEnableChassisTraps=sysEnableChassisTraps, filterMacPort=filterMacPort, mcastRouterTable=mcastRouterTable, sysTrafficMeterEntry=sysTrafficMeterEntry, portSecurityExtSecureSrcAddr=portSecurityExtSecureSrcAddr, moduleNumPorts=moduleNumPorts, voiceGroup=voiceGroup, mdgGatewayAddr=mdgGatewayAddr, filterTestPort=filterTestPort, portTopNMode=portTopNMode, portChannelIfIndex=portChannelIfIndex, voicePortCallManagerTable=voicePortCallManagerTable, brouterEthernetReceiveMax=brouterEthernetReceiveMax, portCpbModuleIndex=portCpbModuleIndex, ntpTimezoneOffsetHour=ntpTimezoneOffsetHour, moduleIndex=moduleIndex, sysBootedImage=sysBootedImage, syslogMessageControlEntry=syslogMessageControlEntry, optionalPortGroup1=optionalPortGroup1, tokenRingDripAdvertsProcessed=tokenRingDripAdvertsProcessed, ipPermitMask=ipPermitMask, tacacsServerType=tacacsServerType, wsc5505sysID=wsc5505sysID, portCpbTable=portCpbTable, tokenRingGroup=tokenRingGroup, filterVendorEntry=filterVendorEntry, filterPortModule=filterPortModule, radiusRetransmits=radiusRetransmits, sysTelnetPrimaryLoginAuthentication=sysTelnetPrimaryLoginAuthentication, portSecurityExtEntry=portSecurityExtEntry, chassisGroup1=chassisGroup1, wsc6009sysID=wsc6009sysID, ciscoStackgMIBCompliance6=ciscoStackgMIBCompliance6, portSecurityExtControlStatus=portSecurityExtControlStatus, tokenRingModuleIndex=tokenRingModuleIndex, systemFddiGroup=systemFddiGroup, traceRouteGroup=traceRouteGroup, monitorOperSourcePorts=monitorOperSourcePorts, chassisComponentSerialNumber=chassisComponentSerialNumber, portGroup1=portGroup1, portOperTxFlowControl=portOperTxFlowControl, authenticationGroup2=authenticationGroup2, optionalSystemMiscGroup=optionalSystemMiscGroup, vlanTrunkMappingFromVlan=vlanTrunkMappingFromVlan, mdgGatewayTable=mdgGatewayTable, monitorSourcePort=monitorSourcePort, tokenRingPortCfgLossThresh=tokenRingPortCfgLossThresh, portSecurityExtTable=portSecurityExtTable, ciscoStackgMIBCompliance4=ciscoStackgMIBCompliance4, portCpbGrp=portCpbGrp, wsc6503sysID=wsc6503sysID, wsc6513sysID=wsc6513sysID, portSecurityExtPortIndex=portSecurityExtPortIndex, mdgGatewayType=mdgGatewayType, authenticationGroup=authenticationGroup, chassisGroup=chassisGroup, portMacControlPauseTransmitFrames=portMacControlPauseTransmitFrames, brouterFddiReceiveMax=brouterFddiReceiveMax, tftpModule=tftpModule, wsc2948ggetxsysID=wsc2948ggetxsysID, syslogMessageSeverity=syslogMessageSeverity, sysMacReductionOperEnable=sysMacReductionOperEnable, wsc6509nebsysID=wsc6509nebsysID, sysExtendedRmonNetflowModuleMask=sysExtendedRmonNetflowModuleMask, vlanPortModule=vlanPortModule, traceRouteHost=traceRouteHost, traceRouteDataErrors=traceRouteDataErrors, tokenRingGrp=tokenRingGrp, optionalSystemMiscGroup4=optionalSystemMiscGroup4, sysCommunityRo=sysCommunityRo, vmpsAddr=vmpsAddr, sysMaxRmonMemory=sysMaxRmonMemory, tokenRingPortSoftErrResetCounters=tokenRingPortSoftErrResetCounters, ipPermitAddress=ipPermitAddress, traceRouteDataGatewayIp=traceRouteDataGatewayIp, fileCopyGrp=fileCopyGrp, moduleFwHiVersion=moduleFwHiVersion, portCpbPortfast=portCpbPortfast, sysFddiRingEntry=sysFddiRingEntry, cpw1220isysID=cpw1220isysID, deprecatedObjectGroup=deprecatedObjectGroup, sysEnableIpPermitTraps=sysEnableIpPermitTraps, switchAccelerationModuleGroup=switchAccelerationModuleGroup, traceRouteQueryPacketSize=traceRouteQueryPacketSize, lerAlarmOn=lerAlarmOn, portCpbVlanMembership=portCpbVlanMembership, portTopNOwner=portTopNOwner, portIfIndex=portIfIndex, tacacsServerTable=tacacsServerTable, filterVendorType=filterVendorType, filterTestTable=filterTestTable, traceRouteQueryWaitingTime=traceRouteQueryWaitingTime, vlanTrunkMappingTable=vlanTrunkMappingTable, filterVendorPort=filterVendorPort, ntpAuthenticationTrustedMode=ntpAuthenticationTrustedMode, radiusLoginAuthentication=radiusLoginAuthentication, traceRouteDataIndex=traceRouteDataIndex, optionalSystemTrapGroup=optionalSystemTrapGroup, moduleGroup=moduleGroup, portTopNReportStatus=portTopNReportStatus, cpw1800sysID=cpw1800sysID, optionalChassisGroup1=optionalChassisGroup1, tacacsServerAddr=tacacsServerAddr, ntpTimezoneName=ntpTimezoneName, portChannelOperStatus=portChannelOperStatus, ipPermitGroup3=ipPermitGroup3, portCpbTrunkEncapsulationType=portCpbTrunkEncapsulationType, chassisPs2Type=chassisPs2Type, portCpbIgmpFilter=portCpbIgmpFilter, sysConfigRegister=sysConfigRegister, dnsDomainName=dnsDomainName, brouterPortIpVlan=brouterPortIpVlan, portCpbDot1x=portCpbDot1x, brouterEnableUnreachables=brouterEnableUnreachables, moduleSubType=moduleSubType, syslogServerAddr=syslogServerAddr)
