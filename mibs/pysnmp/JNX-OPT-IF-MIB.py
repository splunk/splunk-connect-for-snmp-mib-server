#
# PySNMP MIB module JNX-OPT-IF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JNX-OPT-IF-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:47:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
jnxoptIfMibRoot, = mibBuilder.importSymbols("JUNIPER-SMI", "jnxoptIfMibRoot")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibIdentifier, iso, ObjectIdentity, Counter32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Gauge32, Integer32, TimeTicks, Bits, Counter64, Unsigned32, transmission, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "iso", "ObjectIdentity", "Counter32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Gauge32", "Integer32", "TimeTicks", "Bits", "Counter64", "Unsigned32", "transmission", "ModuleIdentity")
RowPointer, RowStatus, DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowPointer", "RowStatus", "DisplayString", "TruthValue", "TextualConvention")
jnxoptIfMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1))
jnxoptIfMibModule.setRevisions(('2003-08-13 00:00',))
if mibBuilder.loadTexts: jnxoptIfMibModule.setLastUpdated('200308130000Z')
if mibBuilder.loadTexts: jnxoptIfMibModule.setOrganization('IETF AToM MIB Working Group')
class JnxoptIfAcTI(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(64, 64)
    fixedLength = 64

class JnxoptIfBitRateK(TextualConvention, Integer32):
    status = 'current'

class JnxoptIfDEGM(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(2, 10)

class JnxoptIfDEGThr(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 100)

class JnxoptIfDirectionality(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("sink", 1), ("source", 2), ("bidirectional", 3))

class JnxoptIfSinkOrSource(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("sink", 1), ("source", 2))

class JnxoptIfExDAPI(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

class JnxoptIfExSAPI(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

class JnxoptIfIntervalNumber(TextualConvention, Unsigned32):
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 96)

class JnxoptIfTIMDetMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("off", 1), ("dapi", 2), ("sapi", 3), ("both", 4))

class JnxoptIfTxTI(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(64, 64)
    fixedLength = 64

jnxoptIfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1))
jnxoptIfConfs = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2))
jnxoptIfOTMn = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 1))
jnxoptIfPerfMon = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 2))
jnxoptIfOTSn = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3))
jnxoptIfOMSn = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4))
jnxoptIfOChGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5))
jnxoptIfOCh = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6))
jnxoptIfOTUk = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 7))
jnxoptIfODUk = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8))
jnxoptIfODUkT = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9))
jnxoptIfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1))
jnxoptIfCompl = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 2))
jnxoptIfOTMnTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 1, 1), )
if mibBuilder.loadTexts: jnxoptIfOTMnTable.setStatus('current')
jnxoptIfOTMnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOTMnEntry.setStatus('current')
jnxoptIfOTMnOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTMnOrder.setStatus('current')
jnxoptIfOTMnReduced = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 1, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTMnReduced.setStatus('current')
jnxoptIfOTMnBitRates = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 1, 1, 1, 3), Bits().clone(namedValues=NamedValues(("bitRateK1", 0), ("bitRateK2", 1), ("bitRateK3", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTMnBitRates.setStatus('current')
jnxoptIfOTMnInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 1, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTMnInterfaceType.setStatus('current')
jnxoptIfOTMnTcmMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTMnTcmMax.setStatus('current')
jnxoptIfOTMnOpticalReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("intraOffice", 1), ("shortHaul", 2), ("longHaul", 3), ("veryLongHaul", 4), ("ultraLongHaul", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTMnOpticalReach.setStatus('current')
jnxoptIfPerfMonIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 2, 1), )
if mibBuilder.loadTexts: jnxoptIfPerfMonIntervalTable.setStatus('current')
jnxoptIfPerfMonIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfPerfMonIntervalEntry.setStatus('current')
jnxoptIfPerfMonCurrentTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 2, 1, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfPerfMonCurrentTimeElapsed.setStatus('current')
jnxoptIfPerfMonCurDayTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 2, 1, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfPerfMonCurDayTimeElapsed.setStatus('current')
jnxoptIfPerfMonIntervalNumIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfPerfMonIntervalNumIntervals.setStatus('current')
jnxoptIfPerfMonIntervalNumInvalidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 2, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfPerfMonIntervalNumInvalidIntervals.setStatus('current')
jnxoptIfOTSnConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 1), )
if mibBuilder.loadTexts: jnxoptIfOTSnConfigTable.setStatus('current')
jnxoptIfOTSnConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOTSnConfigEntry.setStatus('current')
jnxoptIfOTSnDirectionality = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 1, 1, 1), JnxoptIfDirectionality()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnDirectionality.setStatus('current')
jnxoptIfOTSnAprStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnAprStatus.setStatus('current')
jnxoptIfOTSnAprControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 1, 1, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTSnAprControl.setStatus('current')
jnxoptIfOTSnTraceIdentifierTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 1, 1, 4), JnxoptIfTxTI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTSnTraceIdentifierTransmitted.setStatus('current')
jnxoptIfOTSnDAPIExpected = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 1, 1, 5), JnxoptIfExDAPI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTSnDAPIExpected.setStatus('current')
jnxoptIfOTSnSAPIExpected = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 1, 1, 6), JnxoptIfExSAPI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTSnSAPIExpected.setStatus('current')
jnxoptIfOTSnTraceIdentifierAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 1, 1, 7), JnxoptIfAcTI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnTraceIdentifierAccepted.setStatus('current')
jnxoptIfOTSnTIMDetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 1, 1, 8), JnxoptIfTIMDetMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTSnTIMDetMode.setStatus('current')
jnxoptIfOTSnTIMActEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 1, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTSnTIMActEnabled.setStatus('current')
jnxoptIfOTSnCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 1, 1, 10), Bits().clone(namedValues=NamedValues(("bdiP", 0), ("bdiO", 1), ("bdi", 2), ("tim", 3), ("losP", 4), ("losO", 5), ("los", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnCurrentStatus.setStatus('current')
jnxoptIfOTSnSinkCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 2), )
if mibBuilder.loadTexts: jnxoptIfOTSnSinkCurrentTable.setStatus('current')
jnxoptIfOTSnSinkCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOTSnSinkCurrentEntry.setStatus('current')
jnxoptIfOTSnSinkCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 2, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkCurrentSuspectedFlag.setStatus('current')
jnxoptIfOTSnSinkCurrentInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 2, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkCurrentInputPower.setStatus('current')
jnxoptIfOTSnSinkCurrentLowInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 2, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkCurrentLowInputPower.setStatus('current')
jnxoptIfOTSnSinkCurrentHighInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 2, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkCurrentHighInputPower.setStatus('current')
jnxoptIfOTSnSinkCurrentLowerInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 2, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkCurrentLowerInputPowerThreshold.setStatus('current')
jnxoptIfOTSnSinkCurrentUpperInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 2, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkCurrentUpperInputPowerThreshold.setStatus('current')
jnxoptIfOTSnSinkCurrentOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 2, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkCurrentOutputPower.setStatus('current')
jnxoptIfOTSnSinkCurrentLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 2, 1, 8), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkCurrentLowOutputPower.setStatus('current')
jnxoptIfOTSnSinkCurrentHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 2, 1, 9), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkCurrentHighOutputPower.setStatus('current')
jnxoptIfOTSnSinkCurrentLowerOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 2, 1, 10), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkCurrentLowerOutputPowerThreshold.setStatus('current')
jnxoptIfOTSnSinkCurrentUpperOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 2, 1, 11), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkCurrentUpperOutputPowerThreshold.setStatus('current')
jnxoptIfOTSnSinkIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 3), )
if mibBuilder.loadTexts: jnxoptIfOTSnSinkIntervalTable.setStatus('current')
jnxoptIfOTSnSinkIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkIntervalNumber"))
if mibBuilder.loadTexts: jnxoptIfOTSnSinkIntervalEntry.setStatus('current')
jnxoptIfOTSnSinkIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 3, 1, 1), JnxoptIfIntervalNumber())
if mibBuilder.loadTexts: jnxoptIfOTSnSinkIntervalNumber.setStatus('current')
jnxoptIfOTSnSinkIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkIntervalSuspectedFlag.setStatus('current')
jnxoptIfOTSnSinkIntervalLastInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 3, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkIntervalLastInputPower.setStatus('current')
jnxoptIfOTSnSinkIntervalLowInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 3, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkIntervalLowInputPower.setStatus('current')
jnxoptIfOTSnSinkIntervalHighInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 3, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkIntervalHighInputPower.setStatus('current')
jnxoptIfOTSnSinkIntervalLastOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 3, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkIntervalLastOutputPower.setStatus('current')
jnxoptIfOTSnSinkIntervalLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 3, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkIntervalLowOutputPower.setStatus('current')
jnxoptIfOTSnSinkIntervalHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 3, 1, 8), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkIntervalHighOutputPower.setStatus('current')
jnxoptIfOTSnSinkCurDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 4), )
if mibBuilder.loadTexts: jnxoptIfOTSnSinkCurDayTable.setStatus('current')
jnxoptIfOTSnSinkCurDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOTSnSinkCurDayEntry.setStatus('current')
jnxoptIfOTSnSinkCurDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 4, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkCurDaySuspectedFlag.setStatus('current')
jnxoptIfOTSnSinkCurDayLowInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 4, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkCurDayLowInputPower.setStatus('current')
jnxoptIfOTSnSinkCurDayHighInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 4, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkCurDayHighInputPower.setStatus('current')
jnxoptIfOTSnSinkCurDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 4, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkCurDayLowOutputPower.setStatus('current')
jnxoptIfOTSnSinkCurDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 4, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkCurDayHighOutputPower.setStatus('current')
jnxoptIfOTSnSinkPrevDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 5), )
if mibBuilder.loadTexts: jnxoptIfOTSnSinkPrevDayTable.setStatus('current')
jnxoptIfOTSnSinkPrevDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOTSnSinkPrevDayEntry.setStatus('current')
jnxoptIfOTSnSinkPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 5, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkPrevDaySuspectedFlag.setStatus('current')
jnxoptIfOTSnSinkPrevDayLastInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 5, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkPrevDayLastInputPower.setStatus('current')
jnxoptIfOTSnSinkPrevDayLowInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 5, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkPrevDayLowInputPower.setStatus('current')
jnxoptIfOTSnSinkPrevDayHighInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 5, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkPrevDayHighInputPower.setStatus('current')
jnxoptIfOTSnSinkPrevDayLastOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 5, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkPrevDayLastOutputPower.setStatus('current')
jnxoptIfOTSnSinkPrevDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 5, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkPrevDayLowOutputPower.setStatus('current')
jnxoptIfOTSnSinkPrevDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 5, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSinkPrevDayHighOutputPower.setStatus('current')
jnxoptIfOTSnSrcCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 6), )
if mibBuilder.loadTexts: jnxoptIfOTSnSrcCurrentTable.setStatus('current')
jnxoptIfOTSnSrcCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOTSnSrcCurrentEntry.setStatus('current')
jnxoptIfOTSnSrcCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 6, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcCurrentSuspectedFlag.setStatus('current')
jnxoptIfOTSnSrcCurrentOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 6, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcCurrentOutputPower.setStatus('current')
jnxoptIfOTSnSrcCurrentLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 6, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcCurrentLowOutputPower.setStatus('current')
jnxoptIfOTSnSrcCurrentHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 6, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcCurrentHighOutputPower.setStatus('current')
jnxoptIfOTSnSrcCurrentLowerOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 6, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcCurrentLowerOutputPowerThreshold.setStatus('current')
jnxoptIfOTSnSrcCurrentUpperOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 6, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcCurrentUpperOutputPowerThreshold.setStatus('current')
jnxoptIfOTSnSrcCurrentInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 6, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcCurrentInputPower.setStatus('current')
jnxoptIfOTSnSrcCurrentLowInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 6, 1, 8), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcCurrentLowInputPower.setStatus('current')
jnxoptIfOTSnSrcCurrentHighInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 6, 1, 9), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcCurrentHighInputPower.setStatus('current')
jnxoptIfOTSnSrcCurrentLowerInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 6, 1, 10), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcCurrentLowerInputPowerThreshold.setStatus('current')
jnxoptIfOTSnSrcCurrentUpperInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 6, 1, 11), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcCurrentUpperInputPowerThreshold.setStatus('current')
jnxoptIfOTSnSrcIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 7), )
if mibBuilder.loadTexts: jnxoptIfOTSnSrcIntervalTable.setStatus('current')
jnxoptIfOTSnSrcIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcIntervalNumber"))
if mibBuilder.loadTexts: jnxoptIfOTSnSrcIntervalEntry.setStatus('current')
jnxoptIfOTSnSrcIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 7, 1, 1), JnxoptIfIntervalNumber())
if mibBuilder.loadTexts: jnxoptIfOTSnSrcIntervalNumber.setStatus('current')
jnxoptIfOTSnSrcIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 7, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcIntervalSuspectedFlag.setStatus('current')
jnxoptIfOTSnSrcIntervalLastOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 7, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcIntervalLastOutputPower.setStatus('current')
jnxoptIfOTSnSrcIntervalLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 7, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcIntervalLowOutputPower.setStatus('current')
jnxoptIfOTSnSrcIntervalHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 7, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcIntervalHighOutputPower.setStatus('current')
jnxoptIfOTSnSrcIntervalLastInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 7, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcIntervalLastInputPower.setStatus('current')
jnxoptIfOTSnSrcIntervalLowInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 7, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcIntervalLowInputPower.setStatus('current')
jnxoptIfOTSnSrcIntervalHighInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 7, 1, 8), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcIntervalHighInputPower.setStatus('current')
jnxoptIfOTSnSrcCurDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 8), )
if mibBuilder.loadTexts: jnxoptIfOTSnSrcCurDayTable.setStatus('current')
jnxoptIfOTSnSrcCurDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOTSnSrcCurDayEntry.setStatus('current')
jnxoptIfOTSnSrcCurDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 8, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcCurDaySuspectedFlag.setStatus('current')
jnxoptIfOTSnSrcCurDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 8, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcCurDayLowOutputPower.setStatus('current')
jnxoptIfOTSnSrcCurDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 8, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcCurDayHighOutputPower.setStatus('current')
jnxoptIfOTSnSrcCurDayLowInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 8, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcCurDayLowInputPower.setStatus('current')
jnxoptIfOTSnSrcCurDayHighInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 8, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcCurDayHighInputPower.setStatus('current')
jnxoptIfOTSnSrcPrevDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 9), )
if mibBuilder.loadTexts: jnxoptIfOTSnSrcPrevDayTable.setStatus('current')
jnxoptIfOTSnSrcPrevDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOTSnSrcPrevDayEntry.setStatus('current')
jnxoptIfOTSnSrcPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 9, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcPrevDaySuspectedFlag.setStatus('current')
jnxoptIfOTSnSrcPrevDayLastOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 9, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcPrevDayLastOutputPower.setStatus('current')
jnxoptIfOTSnSrcPrevDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 9, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcPrevDayLowOutputPower.setStatus('current')
jnxoptIfOTSnSrcPrevDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 9, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcPrevDayHighOutputPower.setStatus('current')
jnxoptIfOTSnSrcPrevDayLastInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 9, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcPrevDayLastInputPower.setStatus('current')
jnxoptIfOTSnSrcPrevDayLowInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 9, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcPrevDayLowInputPower.setStatus('current')
jnxoptIfOTSnSrcPrevDayHighInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 3, 9, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTSnSrcPrevDayHighInputPower.setStatus('current')
jnxoptIfOMSnConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 1), )
if mibBuilder.loadTexts: jnxoptIfOMSnConfigTable.setStatus('current')
jnxoptIfOMSnConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOMSnConfigEntry.setStatus('current')
jnxoptIfOMSnDirectionality = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 1, 1, 1), JnxoptIfDirectionality()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnDirectionality.setStatus('current')
jnxoptIfOMSnCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 1, 1, 2), Bits().clone(namedValues=NamedValues(("ssfP", 0), ("ssfO", 1), ("ssf", 2), ("bdiP", 3), ("bdiO", 4), ("bdi", 5), ("losP", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnCurrentStatus.setStatus('current')
jnxoptIfOMSnSinkCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 2), )
if mibBuilder.loadTexts: jnxoptIfOMSnSinkCurrentTable.setStatus('current')
jnxoptIfOMSnSinkCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOMSnSinkCurrentEntry.setStatus('current')
jnxoptIfOMSnSinkCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 2, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkCurrentSuspectedFlag.setStatus('current')
jnxoptIfOMSnSinkCurrentAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 2, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkCurrentAggregatedInputPower.setStatus('current')
jnxoptIfOMSnSinkCurrentLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 2, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkCurrentLowAggregatedInputPower.setStatus('current')
jnxoptIfOMSnSinkCurrentHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 2, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkCurrentHighAggregatedInputPower.setStatus('current')
jnxoptIfOMSnSinkCurrentLowerInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 2, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkCurrentLowerInputPowerThreshold.setStatus('current')
jnxoptIfOMSnSinkCurrentUpperInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 2, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkCurrentUpperInputPowerThreshold.setStatus('current')
jnxoptIfOMSnSinkCurrentOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 2, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkCurrentOutputPower.setStatus('current')
jnxoptIfOMSnSinkCurrentLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 2, 1, 8), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkCurrentLowOutputPower.setStatus('current')
jnxoptIfOMSnSinkCurrentHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 2, 1, 9), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkCurrentHighOutputPower.setStatus('current')
jnxoptIfOMSnSinkCurrentLowerOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 2, 1, 10), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkCurrentLowerOutputPowerThreshold.setStatus('current')
jnxoptIfOMSnSinkCurrentUpperOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 2, 1, 11), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkCurrentUpperOutputPowerThreshold.setStatus('current')
jnxoptIfOMSnSinkIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 3), )
if mibBuilder.loadTexts: jnxoptIfOMSnSinkIntervalTable.setStatus('current')
jnxoptIfOMSnSinkIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkIntervalNumber"))
if mibBuilder.loadTexts: jnxoptIfOMSnSinkIntervalEntry.setStatus('current')
jnxoptIfOMSnSinkIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 3, 1, 1), JnxoptIfIntervalNumber())
if mibBuilder.loadTexts: jnxoptIfOMSnSinkIntervalNumber.setStatus('current')
jnxoptIfOMSnSinkIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkIntervalSuspectedFlag.setStatus('current')
jnxoptIfOMSnSinkIntervalLastAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 3, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkIntervalLastAggregatedInputPower.setStatus('current')
jnxoptIfOMSnSinkIntervalLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 3, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkIntervalLowAggregatedInputPower.setStatus('current')
jnxoptIfOMSnSinkIntervalHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 3, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkIntervalHighAggregatedInputPower.setStatus('current')
jnxoptIfOMSnSinkIntervalLastOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 3, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkIntervalLastOutputPower.setStatus('current')
jnxoptIfOMSnSinkIntervalLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 3, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkIntervalLowOutputPower.setStatus('current')
jnxoptIfOMSnSinkIntervalHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 3, 1, 8), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkIntervalHighOutputPower.setStatus('current')
jnxoptIfOMSnSinkCurDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 4), )
if mibBuilder.loadTexts: jnxoptIfOMSnSinkCurDayTable.setStatus('current')
jnxoptIfOMSnSinkCurDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOMSnSinkCurDayEntry.setStatus('current')
jnxoptIfOMSnSinkCurDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 4, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkCurDaySuspectedFlag.setStatus('current')
jnxoptIfOMSnSinkCurDayLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 4, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkCurDayLowAggregatedInputPower.setStatus('current')
jnxoptIfOMSnSinkCurDayHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 4, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkCurDayHighAggregatedInputPower.setStatus('current')
jnxoptIfOMSnSinkCurDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 4, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkCurDayLowOutputPower.setStatus('current')
jnxoptIfOMSnSinkCurDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 4, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkCurDayHighOutputPower.setStatus('current')
jnxoptIfOMSnSinkPrevDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 5), )
if mibBuilder.loadTexts: jnxoptIfOMSnSinkPrevDayTable.setStatus('current')
jnxoptIfOMSnSinkPrevDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOMSnSinkPrevDayEntry.setStatus('current')
jnxoptIfOMSnSinkPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 5, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkPrevDaySuspectedFlag.setStatus('current')
jnxoptIfOMSnSinkPrevDayLastAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 5, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkPrevDayLastAggregatedInputPower.setStatus('current')
jnxoptIfOMSnSinkPrevDayLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 5, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkPrevDayLowAggregatedInputPower.setStatus('current')
jnxoptIfOMSnSinkPrevDayHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 5, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkPrevDayHighAggregatedInputPower.setStatus('current')
jnxoptIfOMSnSinkPrevDayLastOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 5, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkPrevDayLastOutputPower.setStatus('current')
jnxoptIfOMSnSinkPrevDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 5, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkPrevDayLowOutputPower.setStatus('current')
jnxoptIfOMSnSinkPrevDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 5, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSinkPrevDayHighOutputPower.setStatus('current')
jnxoptIfOMSnSrcCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 6), )
if mibBuilder.loadTexts: jnxoptIfOMSnSrcCurrentTable.setStatus('current')
jnxoptIfOMSnSrcCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOMSnSrcCurrentEntry.setStatus('current')
jnxoptIfOMSnSrcCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 6, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcCurrentSuspectedFlag.setStatus('current')
jnxoptIfOMSnSrcCurrentOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 6, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcCurrentOutputPower.setStatus('current')
jnxoptIfOMSnSrcCurrentLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 6, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcCurrentLowOutputPower.setStatus('current')
jnxoptIfOMSnSrcCurrentHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 6, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcCurrentHighOutputPower.setStatus('current')
jnxoptIfOMSnSrcCurrentLowerOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 6, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcCurrentLowerOutputPowerThreshold.setStatus('current')
jnxoptIfOMSnSrcCurrentUpperOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 6, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcCurrentUpperOutputPowerThreshold.setStatus('current')
jnxoptIfOMSnSrcCurrentAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 6, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcCurrentAggregatedInputPower.setStatus('current')
jnxoptIfOMSnSrcCurrentLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 6, 1, 8), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcCurrentLowAggregatedInputPower.setStatus('current')
jnxoptIfOMSnSrcCurrentHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 6, 1, 9), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcCurrentHighAggregatedInputPower.setStatus('current')
jnxoptIfOMSnSrcCurrentLowerInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 6, 1, 10), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcCurrentLowerInputPowerThreshold.setStatus('current')
jnxoptIfOMSnSrcCurrentUpperInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 6, 1, 11), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcCurrentUpperInputPowerThreshold.setStatus('current')
jnxoptIfOMSnSrcIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 7), )
if mibBuilder.loadTexts: jnxoptIfOMSnSrcIntervalTable.setStatus('current')
jnxoptIfOMSnSrcIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcIntervalNumber"))
if mibBuilder.loadTexts: jnxoptIfOMSnSrcIntervalEntry.setStatus('current')
jnxoptIfOMSnSrcIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 7, 1, 1), JnxoptIfIntervalNumber())
if mibBuilder.loadTexts: jnxoptIfOMSnSrcIntervalNumber.setStatus('current')
jnxoptIfOMSnSrcIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 7, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcIntervalSuspectedFlag.setStatus('current')
jnxoptIfOMSnSrcIntervalLastOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 7, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcIntervalLastOutputPower.setStatus('current')
jnxoptIfOMSnSrcIntervalLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 7, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcIntervalLowOutputPower.setStatus('current')
jnxoptIfOMSnSrcIntervalHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 7, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcIntervalHighOutputPower.setStatus('current')
jnxoptIfOMSnSrcIntervalLastAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 7, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcIntervalLastAggregatedInputPower.setStatus('current')
jnxoptIfOMSnSrcIntervalLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 7, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcIntervalLowAggregatedInputPower.setStatus('current')
jnxoptIfOMSnSrcIntervalHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 7, 1, 8), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcIntervalHighAggregatedInputPower.setStatus('current')
jnxoptIfOMSnSrcCurDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 8), )
if mibBuilder.loadTexts: jnxoptIfOMSnSrcCurDayTable.setStatus('current')
jnxoptIfOMSnSrcCurDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOMSnSrcCurDayEntry.setStatus('current')
jnxoptIfOMSnSrcCurDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 8, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcCurDaySuspectedFlag.setStatus('current')
jnxoptIfOMSnSrcCurDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 8, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcCurDayLowOutputPower.setStatus('current')
jnxoptIfOMSnSrcCurDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 8, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcCurDayHighOutputPower.setStatus('current')
jnxoptIfOMSnSrcCurDayLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 8, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcCurDayLowAggregatedInputPower.setStatus('current')
jnxoptIfOMSnSrcCurDayHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 8, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcCurDayHighAggregatedInputPower.setStatus('current')
jnxoptIfOMSnSrcPrevDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 9), )
if mibBuilder.loadTexts: jnxoptIfOMSnSrcPrevDayTable.setStatus('current')
jnxoptIfOMSnSrcPrevDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOMSnSrcPrevDayEntry.setStatus('current')
jnxoptIfOMSnSrcPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 9, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcPrevDaySuspectedFlag.setStatus('current')
jnxoptIfOMSnSrcPrevDayLastOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 9, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcPrevDayLastOutputPower.setStatus('current')
jnxoptIfOMSnSrcPrevDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 9, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcPrevDayLowOutputPower.setStatus('current')
jnxoptIfOMSnSrcPrevDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 9, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcPrevDayHighOutputPower.setStatus('current')
jnxoptIfOMSnSrcPrevDayLastAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 9, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcPrevDayLastAggregatedInputPower.setStatus('current')
jnxoptIfOMSnSrcPrevDayLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 9, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcPrevDayLowAggregatedInputPower.setStatus('current')
jnxoptIfOMSnSrcPrevDayHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 4, 9, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOMSnSrcPrevDayHighAggregatedInputPower.setStatus('current')
jnxoptIfOChGroupConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 1), )
if mibBuilder.loadTexts: jnxoptIfOChGroupConfigTable.setStatus('current')
jnxoptIfOChGroupConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOChGroupConfigEntry.setStatus('current')
jnxoptIfOChGroupDirectionality = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 1, 1, 1), JnxoptIfDirectionality()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupDirectionality.setStatus('current')
jnxoptIfOChGroupSinkCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 2), )
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkCurrentTable.setStatus('current')
jnxoptIfOChGroupSinkCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkCurrentEntry.setStatus('current')
jnxoptIfOChGroupSinkCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 2, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkCurrentSuspectedFlag.setStatus('current')
jnxoptIfOChGroupSinkCurrentAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 2, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkCurrentAggregatedInputPower.setStatus('current')
jnxoptIfOChGroupSinkCurrentLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 2, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkCurrentLowAggregatedInputPower.setStatus('current')
jnxoptIfOChGroupSinkCurrentHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 2, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkCurrentHighAggregatedInputPower.setStatus('current')
jnxoptIfOChGroupSinkCurrentLowerInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 2, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkCurrentLowerInputPowerThreshold.setStatus('current')
jnxoptIfOChGroupSinkCurrentUpperInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 2, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkCurrentUpperInputPowerThreshold.setStatus('current')
jnxoptIfOChGroupSinkCurrentOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 2, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkCurrentOutputPower.setStatus('current')
jnxoptIfOChGroupSinkCurrentLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 2, 1, 8), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkCurrentLowOutputPower.setStatus('current')
jnxoptIfOChGroupSinkCurrentHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 2, 1, 9), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkCurrentHighOutputPower.setStatus('current')
jnxoptIfOChGroupSinkCurrentLowerOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 2, 1, 10), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkCurrentLowerOutputPowerThreshold.setStatus('current')
jnxoptIfOChGroupSinkCurrentUpperOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 2, 1, 11), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkCurrentUpperOutputPowerThreshold.setStatus('current')
jnxoptIfOChGroupSinkIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 3), )
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkIntervalTable.setStatus('current')
jnxoptIfOChGroupSinkIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkIntervalNumber"))
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkIntervalEntry.setStatus('current')
jnxoptIfOChGroupSinkIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 3, 1, 1), JnxoptIfIntervalNumber())
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkIntervalNumber.setStatus('current')
jnxoptIfOChGroupSinkIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkIntervalSuspectedFlag.setStatus('current')
jnxoptIfOChGroupSinkIntervalLastAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 3, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkIntervalLastAggregatedInputPower.setStatus('current')
jnxoptIfOChGroupSinkIntervalLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 3, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkIntervalLowAggregatedInputPower.setStatus('current')
jnxoptIfOChGroupSinkIntervalHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 3, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkIntervalHighAggregatedInputPower.setStatus('current')
jnxoptIfOChGroupSinkIntervalLastOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 3, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkIntervalLastOutputPower.setStatus('current')
jnxoptIfOChGroupSinkIntervalLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 3, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkIntervalLowOutputPower.setStatus('current')
jnxoptIfOChGroupSinkIntervalHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 3, 1, 8), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkIntervalHighOutputPower.setStatus('current')
jnxoptIfOChGroupSinkCurDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 4), )
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkCurDayTable.setStatus('current')
jnxoptIfOChGroupSinkCurDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkCurDayEntry.setStatus('current')
jnxoptIfOChGroupSinkCurDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 4, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkCurDaySuspectedFlag.setStatus('current')
jnxoptIfOChGroupSinkCurDayLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 4, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkCurDayLowAggregatedInputPower.setStatus('current')
jnxoptIfOChGroupSinkCurDayHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 4, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkCurDayHighAggregatedInputPower.setStatus('current')
jnxoptIfOChGroupSinkCurDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 4, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkCurDayLowOutputPower.setStatus('current')
jnxoptIfOChGroupSinkCurDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 4, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkCurDayHighOutputPower.setStatus('current')
jnxoptIfOChGroupSinkPrevDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 5), )
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkPrevDayTable.setStatus('current')
jnxoptIfOChGroupSinkPrevDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkPrevDayEntry.setStatus('current')
jnxoptIfOChGroupSinkPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 5, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkPrevDaySuspectedFlag.setStatus('current')
jnxoptIfOChGroupSinkPrevDayLastAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 5, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkPrevDayLastAggregatedInputPower.setStatus('current')
jnxoptIfOChGroupSinkPrevDayLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 5, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkPrevDayLowAggregatedInputPower.setStatus('current')
jnxoptIfOChGroupSinkPrevDayHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 5, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkPrevDayHighAggregatedInputPower.setStatus('current')
jnxoptIfOChGroupSinkPrevDayLastOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 5, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkPrevDayLastOutputPower.setStatus('current')
jnxoptIfOChGroupSinkPrevDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 5, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkPrevDayLowOutputPower.setStatus('current')
jnxoptIfOChGroupSinkPrevDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 5, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSinkPrevDayHighOutputPower.setStatus('current')
jnxoptIfOChGroupSrcCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 6), )
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcCurrentTable.setStatus('current')
jnxoptIfOChGroupSrcCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcCurrentEntry.setStatus('current')
jnxoptIfOChGroupSrcCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 6, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcCurrentSuspectedFlag.setStatus('current')
jnxoptIfOChGroupSrcCurrentOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 6, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcCurrentOutputPower.setStatus('current')
jnxoptIfOChGroupSrcCurrentLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 6, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcCurrentLowOutputPower.setStatus('current')
jnxoptIfOChGroupSrcCurrentHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 6, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcCurrentHighOutputPower.setStatus('current')
jnxoptIfOChGroupSrcCurrentLowerOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 6, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcCurrentLowerOutputPowerThreshold.setStatus('current')
jnxoptIfOChGroupSrcCurrentUpperOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 6, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcCurrentUpperOutputPowerThreshold.setStatus('current')
jnxoptIfOChGroupSrcCurrentAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 6, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcCurrentAggregatedInputPower.setStatus('current')
jnxoptIfOChGroupSrcCurrentLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 6, 1, 8), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcCurrentLowAggregatedInputPower.setStatus('current')
jnxoptIfOChGroupSrcCurrentHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 6, 1, 9), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcCurrentHighAggregatedInputPower.setStatus('current')
jnxoptIfOChGroupSrcCurrentLowerInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 6, 1, 10), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcCurrentLowerInputPowerThreshold.setStatus('current')
jnxoptIfOChGroupSrcCurrentUpperInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 6, 1, 11), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcCurrentUpperInputPowerThreshold.setStatus('current')
jnxoptIfOChGroupSrcIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 7), )
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcIntervalTable.setStatus('current')
jnxoptIfOChGroupSrcIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcIntervalNumber"))
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcIntervalEntry.setStatus('current')
jnxoptIfOChGroupSrcIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 7, 1, 1), JnxoptIfIntervalNumber())
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcIntervalNumber.setStatus('current')
jnxoptIfOChGroupSrcIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 7, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcIntervalSuspectedFlag.setStatus('current')
jnxoptIfOChGroupSrcIntervalLastOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 7, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcIntervalLastOutputPower.setStatus('current')
jnxoptIfOChGroupSrcIntervalLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 7, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcIntervalLowOutputPower.setStatus('current')
jnxoptIfOChGroupSrcIntervalHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 7, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcIntervalHighOutputPower.setStatus('current')
jnxoptIfOChGroupSrcIntervalLastAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 7, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcIntervalLastAggregatedInputPower.setStatus('current')
jnxoptIfOChGroupSrcIntervalLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 7, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcIntervalLowAggregatedInputPower.setStatus('current')
jnxoptIfOChGroupSrcIntervalHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 7, 1, 8), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcIntervalHighAggregatedInputPower.setStatus('current')
jnxoptIfOChGroupSrcCurDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 8), )
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcCurDayTable.setStatus('current')
jnxoptIfOChGroupSrcCurDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcCurDayEntry.setStatus('current')
jnxoptIfOChGroupSrcCurDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 8, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcCurDaySuspectedFlag.setStatus('current')
jnxoptIfOChGroupSrcCurDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 8, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcCurDayLowOutputPower.setStatus('current')
jnxoptIfOChGroupSrcCurDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 8, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcCurDayHighOutputPower.setStatus('current')
jnxoptIfOChGroupSrcCurDayLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 8, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcCurDayLowAggregatedInputPower.setStatus('current')
jnxoptIfOChGroupSrcCurDayHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 8, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcCurDayHighAggregatedInputPower.setStatus('current')
jnxoptIfOChGroupSrcPrevDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 9), )
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcPrevDayTable.setStatus('current')
jnxoptIfOChGroupSrcPrevDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcPrevDayEntry.setStatus('current')
jnxoptIfOChGroupSrcPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 9, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcPrevDaySuspectedFlag.setStatus('current')
jnxoptIfOChGroupSrcPrevDayLastOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 9, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcPrevDayLastOutputPower.setStatus('current')
jnxoptIfOChGroupSrcPrevDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 9, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcPrevDayLowOutputPower.setStatus('current')
jnxoptIfOChGroupSrcPrevDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 9, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcPrevDayHighOutputPower.setStatus('current')
jnxoptIfOChGroupSrcPrevDayLastAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 9, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcPrevDayLastAggregatedInputPower.setStatus('current')
jnxoptIfOChGroupSrcPrevDayLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 9, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcPrevDayLowAggregatedInputPower.setStatus('current')
jnxoptIfOChGroupSrcPrevDayHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 5, 9, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChGroupSrcPrevDayHighAggregatedInputPower.setStatus('current')
jnxoptIfOChConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 1), )
if mibBuilder.loadTexts: jnxoptIfOChConfigTable.setStatus('current')
jnxoptIfOChConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOChConfigEntry.setStatus('current')
jnxoptIfOChDirectionality = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 1, 1, 1), JnxoptIfDirectionality()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChDirectionality.setStatus('current')
jnxoptIfOChCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 1, 1, 2), Bits().clone(namedValues=NamedValues(("losP", 0), ("los", 1), ("oci", 2), ("ssfP", 3), ("ssfO", 4), ("ssf", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChCurrentStatus.setStatus('current')
jnxoptIfOChSinkCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 2), )
if mibBuilder.loadTexts: jnxoptIfOChSinkCurrentTable.setStatus('current')
jnxoptIfOChSinkCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOChSinkCurrentEntry.setStatus('current')
jnxoptIfOChSinkCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 2, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkCurrentSuspectedFlag.setStatus('current')
jnxoptIfOChSinkCurrentInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 2, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkCurrentInputPower.setStatus('current')
jnxoptIfOChSinkCurrentLowInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 2, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkCurrentLowInputPower.setStatus('current')
jnxoptIfOChSinkCurrentHighInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 2, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkCurrentHighInputPower.setStatus('current')
jnxoptIfOChSinkCurrentLowerInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 2, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOChSinkCurrentLowerInputPowerThreshold.setStatus('current')
jnxoptIfOChSinkCurrentUpperInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 2, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOChSinkCurrentUpperInputPowerThreshold.setStatus('current')
jnxoptIfOChSinkIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 3), )
if mibBuilder.loadTexts: jnxoptIfOChSinkIntervalTable.setStatus('current')
jnxoptIfOChSinkIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-MIB", "jnxoptIfOChSinkIntervalNumber"))
if mibBuilder.loadTexts: jnxoptIfOChSinkIntervalEntry.setStatus('current')
jnxoptIfOChSinkIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 3, 1, 1), JnxoptIfIntervalNumber())
if mibBuilder.loadTexts: jnxoptIfOChSinkIntervalNumber.setStatus('current')
jnxoptIfOChSinkIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkIntervalSuspectedFlag.setStatus('current')
jnxoptIfOChSinkIntervalLastInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 3, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkIntervalLastInputPower.setStatus('current')
jnxoptIfOChSinkIntervalLowInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 3, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkIntervalLowInputPower.setStatus('current')
jnxoptIfOChSinkIntervalHighInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 3, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkIntervalHighInputPower.setStatus('current')
jnxoptIfOChSinkCurDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 4), )
if mibBuilder.loadTexts: jnxoptIfOChSinkCurDayTable.setStatus('current')
jnxoptIfOChSinkCurDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOChSinkCurDayEntry.setStatus('current')
jnxoptIfOChSinkCurDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 4, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkCurDaySuspectedFlag.setStatus('current')
jnxoptIfOChSinkCurDayLowInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 4, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkCurDayLowInputPower.setStatus('current')
jnxoptIfOChSinkCurDayHighInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 4, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkCurDayHighInputPower.setStatus('current')
jnxoptIfOChSinkPrevDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 5), )
if mibBuilder.loadTexts: jnxoptIfOChSinkPrevDayTable.setStatus('current')
jnxoptIfOChSinkPrevDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOChSinkPrevDayEntry.setStatus('current')
jnxoptIfOChSinkPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 5, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkPrevDaySuspectedFlag.setStatus('current')
jnxoptIfOChSinkPrevDayLastInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 5, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkPrevDayLastInputPower.setStatus('current')
jnxoptIfOChSinkPrevDayLowInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 5, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkPrevDayLowInputPower.setStatus('current')
jnxoptIfOChSinkPrevDayHighInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 5, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkPrevDayHighInputPower.setStatus('current')
jnxoptIfOChSrcCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 6), )
if mibBuilder.loadTexts: jnxoptIfOChSrcCurrentTable.setStatus('current')
jnxoptIfOChSrcCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOChSrcCurrentEntry.setStatus('current')
jnxoptIfOChSrcCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 6, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcCurrentSuspectedFlag.setStatus('current')
jnxoptIfOChSrcCurrentOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 6, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcCurrentOutputPower.setStatus('current')
jnxoptIfOChSrcCurrentLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 6, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcCurrentLowOutputPower.setStatus('current')
jnxoptIfOChSrcCurrentHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 6, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcCurrentHighOutputPower.setStatus('current')
jnxoptIfOChSrcCurrentLowerOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 6, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOChSrcCurrentLowerOutputPowerThreshold.setStatus('current')
jnxoptIfOChSrcCurrentUpperOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 6, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOChSrcCurrentUpperOutputPowerThreshold.setStatus('current')
jnxoptIfOChSrcIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 7), )
if mibBuilder.loadTexts: jnxoptIfOChSrcIntervalTable.setStatus('current')
jnxoptIfOChSrcIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-MIB", "jnxoptIfOChSrcIntervalNumber"))
if mibBuilder.loadTexts: jnxoptIfOChSrcIntervalEntry.setStatus('current')
jnxoptIfOChSrcIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 7, 1, 1), JnxoptIfIntervalNumber())
if mibBuilder.loadTexts: jnxoptIfOChSrcIntervalNumber.setStatus('current')
jnxoptIfOChSrcIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 7, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcIntervalSuspectedFlag.setStatus('current')
jnxoptIfOChSrcIntervalLastOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 7, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcIntervalLastOutputPower.setStatus('current')
jnxoptIfOChSrcIntervalLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 7, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcIntervalLowOutputPower.setStatus('current')
jnxoptIfOChSrcIntervalHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 7, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcIntervalHighOutputPower.setStatus('current')
jnxoptIfOChSrcCurDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 8), )
if mibBuilder.loadTexts: jnxoptIfOChSrcCurDayTable.setStatus('current')
jnxoptIfOChSrcCurDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOChSrcCurDayEntry.setStatus('current')
jnxoptIfOChSrcCurDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 8, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcCurDaySuspectedFlag.setStatus('current')
jnxoptIfOChSrcCurDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 8, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcCurDayLowOutputPower.setStatus('current')
jnxoptIfOChSrcCurDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 8, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcCurDayHighOutputPower.setStatus('current')
jnxoptIfOChSrcPrevDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 9), )
if mibBuilder.loadTexts: jnxoptIfOChSrcPrevDayTable.setStatus('current')
jnxoptIfOChSrcPrevDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOChSrcPrevDayEntry.setStatus('current')
jnxoptIfOChSrcPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 9, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcPrevDaySuspectedFlag.setStatus('current')
jnxoptIfOChSrcPrevDayLastOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 9, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcPrevDayLastOutputPower.setStatus('current')
jnxoptIfOChSrcPrevDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 9, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcPrevDayLowOutputPower.setStatus('current')
jnxoptIfOChSrcPrevDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 6, 9, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcPrevDayHighOutputPower.setStatus('current')
jnxoptIfOTUkConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 7, 1), )
if mibBuilder.loadTexts: jnxoptIfOTUkConfigTable.setStatus('current')
jnxoptIfOTUkConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 7, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOTUkConfigEntry.setStatus('current')
jnxoptIfOTUkDirectionality = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 7, 1, 1, 1), JnxoptIfDirectionality()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTUkDirectionality.setStatus('current')
jnxoptIfOTUkBitRateK = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 7, 1, 1, 2), JnxoptIfBitRateK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTUkBitRateK.setStatus('current')
jnxoptIfOTUkTraceIdentifierTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 7, 1, 1, 3), JnxoptIfTxTI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTUkTraceIdentifierTransmitted.setStatus('current')
jnxoptIfOTUkDAPIExpected = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 7, 1, 1, 4), JnxoptIfExDAPI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTUkDAPIExpected.setStatus('current')
jnxoptIfOTUkSAPIExpected = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 7, 1, 1, 5), JnxoptIfExSAPI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTUkSAPIExpected.setStatus('current')
jnxoptIfOTUkTraceIdentifierAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 7, 1, 1, 6), JnxoptIfAcTI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTUkTraceIdentifierAccepted.setStatus('current')
jnxoptIfOTUkTIMDetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 7, 1, 1, 7), JnxoptIfTIMDetMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTUkTIMDetMode.setStatus('current')
jnxoptIfOTUkTIMActEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 7, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTUkTIMActEnabled.setStatus('current')
jnxoptIfOTUkDEGThr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 7, 1, 1, 9), JnxoptIfDEGThr()).setUnits('percentage').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTUkDEGThr.setStatus('current')
jnxoptIfOTUkDEGM = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 7, 1, 1, 10), JnxoptIfDEGM()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTUkDEGM.setStatus('current')
jnxoptIfOTUkSinkAdaptActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 7, 1, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTUkSinkAdaptActive.setStatus('current')
jnxoptIfOTUkSourceAdaptActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 7, 1, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTUkSourceAdaptActive.setStatus('current')
jnxoptIfOTUkSinkFECEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 7, 1, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTUkSinkFECEnabled.setStatus('current')
jnxoptIfOTUkCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 7, 1, 1, 14), Bits().clone(namedValues=NamedValues(("tim", 0), ("deg", 1), ("bdi", 2), ("ssf", 3), ("lof", 4), ("ais", 5), ("lom", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTUkCurrentStatus.setStatus('current')
jnxoptIfGCC0ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 7, 2), )
if mibBuilder.loadTexts: jnxoptIfGCC0ConfigTable.setStatus('current')
jnxoptIfGCC0ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 7, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-MIB", "jnxoptIfGCC0Directionality"))
if mibBuilder.loadTexts: jnxoptIfGCC0ConfigEntry.setStatus('current')
jnxoptIfGCC0Directionality = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 7, 2, 1, 1), JnxoptIfDirectionality())
if mibBuilder.loadTexts: jnxoptIfGCC0Directionality.setStatus('current')
jnxoptIfGCC0Application = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 7, 2, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfGCC0Application.setStatus('current')
jnxoptIfGCC0RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 7, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfGCC0RowStatus.setStatus('current')
jnxoptIfODUkConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 1), )
if mibBuilder.loadTexts: jnxoptIfODUkConfigTable.setStatus('current')
jnxoptIfODUkConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfODUkConfigEntry.setStatus('current')
jnxoptIfODUkDirectionality = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 1, 1, 1), JnxoptIfDirectionality()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfODUkDirectionality.setStatus('current')
jnxoptIfODUkBitRateK = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 1, 1, 2), JnxoptIfBitRateK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfODUkBitRateK.setStatus('current')
jnxoptIfODUkTcmFieldsInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 1, 1, 3), Bits().clone(namedValues=NamedValues(("tcmField1", 0), ("tcmField2", 1), ("tcmField3", 2), ("tcmField4", 3), ("tcmField5", 4), ("tcmField6", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfODUkTcmFieldsInUse.setStatus('current')
jnxoptIfODUkPositionSeqCurrentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfODUkPositionSeqCurrentSize.setStatus('current')
jnxoptIfODUkTtpPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfODUkTtpPresent.setStatus('current')
jnxoptIfODUkTtpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 2), )
if mibBuilder.loadTexts: jnxoptIfODUkTtpConfigTable.setStatus('current')
jnxoptIfODUkTtpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfODUkTtpConfigEntry.setStatus('current')
jnxoptIfODUkTtpTraceIdentifierTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 2, 1, 1), JnxoptIfTxTI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfODUkTtpTraceIdentifierTransmitted.setStatus('current')
jnxoptIfODUkTtpDAPIExpected = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 2, 1, 2), JnxoptIfExDAPI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfODUkTtpDAPIExpected.setStatus('current')
jnxoptIfODUkTtpSAPIExpected = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 2, 1, 3), JnxoptIfExSAPI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfODUkTtpSAPIExpected.setStatus('current')
jnxoptIfODUkTtpTraceIdentifierAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 2, 1, 4), JnxoptIfAcTI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfODUkTtpTraceIdentifierAccepted.setStatus('current')
jnxoptIfODUkTtpTIMDetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 2, 1, 5), JnxoptIfTIMDetMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfODUkTtpTIMDetMode.setStatus('current')
jnxoptIfODUkTtpTIMActEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 2, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfODUkTtpTIMActEnabled.setStatus('current')
jnxoptIfODUkTtpDEGThr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 2, 1, 7), JnxoptIfDEGThr()).setUnits('percentage').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfODUkTtpDEGThr.setStatus('current')
jnxoptIfODUkTtpDEGM = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 2, 1, 8), JnxoptIfDEGM()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfODUkTtpDEGM.setStatus('current')
jnxoptIfODUkTtpCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 2, 1, 9), Bits().clone(namedValues=NamedValues(("oci", 0), ("lck", 1), ("tim", 2), ("deg", 3), ("bdi", 4), ("ssf", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfODUkTtpCurrentStatus.setStatus('current')
jnxoptIfODUkPositionSeqTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 3), )
if mibBuilder.loadTexts: jnxoptIfODUkPositionSeqTable.setStatus('current')
jnxoptIfODUkPositionSeqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-MIB", "jnxoptIfODUkPositionSeqIndex"))
if mibBuilder.loadTexts: jnxoptIfODUkPositionSeqEntry.setStatus('current')
jnxoptIfODUkPositionSeqIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: jnxoptIfODUkPositionSeqIndex.setStatus('current')
jnxoptIfODUkPositionSeqPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfODUkPositionSeqPosition.setStatus('current')
jnxoptIfODUkPositionSeqPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 3, 1, 3), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfODUkPositionSeqPointer.setStatus('current')
jnxoptIfODUkNimConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 4), )
if mibBuilder.loadTexts: jnxoptIfODUkNimConfigTable.setStatus('current')
jnxoptIfODUkNimConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-MIB", "jnxoptIfODUkNimDirectionality"))
if mibBuilder.loadTexts: jnxoptIfODUkNimConfigEntry.setStatus('current')
jnxoptIfODUkNimDirectionality = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 4, 1, 1), JnxoptIfSinkOrSource())
if mibBuilder.loadTexts: jnxoptIfODUkNimDirectionality.setStatus('current')
jnxoptIfODUkNimDAPIExpected = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 4, 1, 2), JnxoptIfExDAPI()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkNimDAPIExpected.setStatus('current')
jnxoptIfODUkNimSAPIExpected = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 4, 1, 3), JnxoptIfExSAPI()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkNimSAPIExpected.setStatus('current')
jnxoptIfODUkNimTraceIdentifierAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 4, 1, 4), JnxoptIfAcTI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfODUkNimTraceIdentifierAccepted.setStatus('current')
jnxoptIfODUkNimTIMDetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 4, 1, 5), JnxoptIfTIMDetMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkNimTIMDetMode.setStatus('current')
jnxoptIfODUkNimTIMActEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 4, 1, 6), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkNimTIMActEnabled.setStatus('current')
jnxoptIfODUkNimDEGThr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 4, 1, 7), JnxoptIfDEGThr()).setUnits('percentage').setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkNimDEGThr.setStatus('current')
jnxoptIfODUkNimDEGM = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 4, 1, 8), JnxoptIfDEGM()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkNimDEGM.setStatus('current')
jnxoptIfODUkNimCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 4, 1, 9), Bits().clone(namedValues=NamedValues(("oci", 0), ("lck", 1), ("tim", 2), ("deg", 3), ("bdi", 4), ("ssf", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfODUkNimCurrentStatus.setStatus('current')
jnxoptIfODUkNimRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 4, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkNimRowStatus.setStatus('current')
jnxoptIfGCC12ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 5), )
if mibBuilder.loadTexts: jnxoptIfGCC12ConfigTable.setStatus('current')
jnxoptIfGCC12ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-MIB", "jnxoptIfGCC12Codirectional"), (0, "JNX-OPT-IF-MIB", "jnxoptIfGCC12GCCAccess"))
if mibBuilder.loadTexts: jnxoptIfGCC12ConfigEntry.setStatus('current')
jnxoptIfGCC12Codirectional = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 5, 1, 1), TruthValue())
if mibBuilder.loadTexts: jnxoptIfGCC12Codirectional.setStatus('current')
jnxoptIfGCC12GCCAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("gcc1", 1), ("gcc2", 2), ("gcc1and2", 3))))
if mibBuilder.loadTexts: jnxoptIfGCC12GCCAccess.setStatus('current')
jnxoptIfGCC12GCCPassThrough = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 5, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfGCC12GCCPassThrough.setStatus('current')
jnxoptIfGCC12Application = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 5, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfGCC12Application.setStatus('current')
jnxoptIfGCC12RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 8, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfGCC12RowStatus.setStatus('current')
jnxoptIfODUkTConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 1), )
if mibBuilder.loadTexts: jnxoptIfODUkTConfigTable.setStatus('current')
jnxoptIfODUkTConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-MIB", "jnxoptIfODUkTTcmField"), (0, "JNX-OPT-IF-MIB", "jnxoptIfODUkTCodirectional"))
if mibBuilder.loadTexts: jnxoptIfODUkTConfigEntry.setStatus('current')
jnxoptIfODUkTTcmField = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: jnxoptIfODUkTTcmField.setStatus('current')
jnxoptIfODUkTCodirectional = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 1, 1, 2), TruthValue())
if mibBuilder.loadTexts: jnxoptIfODUkTCodirectional.setStatus('current')
jnxoptIfODUkTTraceIdentifierTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 1, 1, 3), JnxoptIfTxTI()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkTTraceIdentifierTransmitted.setStatus('current')
jnxoptIfODUkTDAPIExpected = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 1, 1, 4), JnxoptIfExDAPI()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkTDAPIExpected.setStatus('current')
jnxoptIfODUkTSAPIExpected = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 1, 1, 5), JnxoptIfExSAPI()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkTSAPIExpected.setStatus('current')
jnxoptIfODUkTTraceIdentifierAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 1, 1, 6), JnxoptIfAcTI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfODUkTTraceIdentifierAccepted.setStatus('current')
jnxoptIfODUkTTIMDetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 1, 1, 7), JnxoptIfTIMDetMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkTTIMDetMode.setStatus('current')
jnxoptIfODUkTTIMActEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 1, 1, 8), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkTTIMActEnabled.setStatus('current')
jnxoptIfODUkTDEGThr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 1, 1, 9), JnxoptIfDEGThr()).setUnits('percentage').setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkTDEGThr.setStatus('current')
jnxoptIfODUkTDEGM = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 1, 1, 10), JnxoptIfDEGM()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkTDEGM.setStatus('current')
jnxoptIfODUkTSinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("operational", 1), ("monitor", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkTSinkMode.setStatus('current')
jnxoptIfODUkTSinkLockSignalAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("locked", 1), ("normal", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkTSinkLockSignalAdminState.setStatus('current')
jnxoptIfODUkTSourceLockSignalAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("locked", 1), ("normal", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkTSourceLockSignalAdminState.setStatus('current')
jnxoptIfODUkTCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 1, 1, 14), Bits().clone(namedValues=NamedValues(("oci", 0), ("lck", 1), ("tim", 2), ("deg", 3), ("bdi", 4), ("ssf", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfODUkTCurrentStatus.setStatus('current')
jnxoptIfODUkTRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 1, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkTRowStatus.setStatus('current')
jnxoptIfODUkTNimConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 2), )
if mibBuilder.loadTexts: jnxoptIfODUkTNimConfigTable.setStatus('current')
jnxoptIfODUkTNimConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-MIB", "jnxoptIfODUkTNimTcmField"), (0, "JNX-OPT-IF-MIB", "jnxoptIfODUkTNimDirectionality"))
if mibBuilder.loadTexts: jnxoptIfODUkTNimConfigEntry.setStatus('current')
jnxoptIfODUkTNimTcmField = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: jnxoptIfODUkTNimTcmField.setStatus('current')
jnxoptIfODUkTNimDirectionality = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 2, 1, 2), JnxoptIfSinkOrSource())
if mibBuilder.loadTexts: jnxoptIfODUkTNimDirectionality.setStatus('current')
jnxoptIfODUkTNimDAPIExpected = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 2, 1, 3), JnxoptIfExDAPI()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkTNimDAPIExpected.setStatus('current')
jnxoptIfODUkTNimSAPIExpected = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 2, 1, 4), JnxoptIfExSAPI()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkTNimSAPIExpected.setStatus('current')
jnxoptIfODUkTNimTraceIdentifierAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 2, 1, 5), JnxoptIfAcTI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfODUkTNimTraceIdentifierAccepted.setStatus('current')
jnxoptIfODUkTNimTIMDetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 2, 1, 6), JnxoptIfTIMDetMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkTNimTIMDetMode.setStatus('current')
jnxoptIfODUkTNimTIMActEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 2, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkTNimTIMActEnabled.setStatus('current')
jnxoptIfODUkTNimDEGThr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 2, 1, 8), JnxoptIfDEGThr()).setUnits('percentage').setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkTNimDEGThr.setStatus('current')
jnxoptIfODUkTNimDEGM = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 2, 1, 9), JnxoptIfDEGM()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkTNimDEGM.setStatus('current')
jnxoptIfODUkTNimCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 2, 1, 10), Bits().clone(namedValues=NamedValues(("oci", 0), ("lck", 1), ("tim", 2), ("deg", 3), ("bdi", 4), ("ssf", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfODUkTNimCurrentStatus.setStatus('current')
jnxoptIfODUkTNimRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 1, 9, 2, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxoptIfODUkTNimRowStatus.setStatus('current')
jnxoptIfOTMnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 1)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfOTMnOrder"), ("JNX-OPT-IF-MIB", "jnxoptIfOTMnReduced"), ("JNX-OPT-IF-MIB", "jnxoptIfOTMnBitRates"), ("JNX-OPT-IF-MIB", "jnxoptIfOTMnInterfaceType"), ("JNX-OPT-IF-MIB", "jnxoptIfOTMnTcmMax"), ("JNX-OPT-IF-MIB", "jnxoptIfOTMnOpticalReach"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfOTMnGroup = jnxoptIfOTMnGroup.setStatus('current')
jnxoptIfPerfMonGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 2)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfPerfMonCurrentTimeElapsed"), ("JNX-OPT-IF-MIB", "jnxoptIfPerfMonCurDayTimeElapsed"), ("JNX-OPT-IF-MIB", "jnxoptIfPerfMonIntervalNumIntervals"), ("JNX-OPT-IF-MIB", "jnxoptIfPerfMonIntervalNumInvalidIntervals"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfPerfMonGroup = jnxoptIfPerfMonGroup.setStatus('current')
jnxoptIfOTSnCommonGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 3)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfOTSnDirectionality"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfOTSnCommonGroup = jnxoptIfOTSnCommonGroup.setStatus('current')
jnxoptIfOTSnSourceGroupFull = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 4)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfOTSnTraceIdentifierTransmitted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfOTSnSourceGroupFull = jnxoptIfOTSnSourceGroupFull.setStatus('current')
jnxoptIfOTSnAPRStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 5)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfOTSnAprStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfOTSnAPRStatusGroup = jnxoptIfOTSnAPRStatusGroup.setStatus('current')
jnxoptIfOTSnAPRControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 6)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfOTSnAprControl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfOTSnAPRControlGroup = jnxoptIfOTSnAPRControlGroup.setStatus('current')
jnxoptIfOTSnSinkGroupBasic = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 7)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfOTSnCurrentStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfOTSnSinkGroupBasic = jnxoptIfOTSnSinkGroupBasic.setStatus('current')
jnxoptIfOTSnSinkGroupFull = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 8)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfOTSnDAPIExpected"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSAPIExpected"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnTraceIdentifierAccepted"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnTIMDetMode"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnTIMActEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfOTSnSinkGroupFull = jnxoptIfOTSnSinkGroupFull.setStatus('current')
jnxoptIfOTSnSinkPreOtnPMGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 9)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkCurrentSuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkCurrentInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkCurrentLowInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkCurrentHighInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkCurrentOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkCurrentLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkCurrentHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkIntervalSuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkIntervalLastInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkIntervalLowInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkIntervalHighInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkIntervalLastOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkIntervalLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkIntervalHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkCurDaySuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkCurDayLowInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkCurDayHighInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkCurDayLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkCurDayHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkPrevDaySuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkPrevDayLastInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkPrevDayLowInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkPrevDayHighInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkPrevDayLastOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkPrevDayLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkPrevDayHighOutputPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfOTSnSinkPreOtnPMGroup = jnxoptIfOTSnSinkPreOtnPMGroup.setStatus('current')
jnxoptIfOTSnSinkPreOtnPMThresholdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 10)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkCurrentLowerInputPowerThreshold"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkCurrentUpperInputPowerThreshold"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkCurrentLowerOutputPowerThreshold"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkCurrentUpperOutputPowerThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfOTSnSinkPreOtnPMThresholdGroup = jnxoptIfOTSnSinkPreOtnPMThresholdGroup.setStatus('current')
jnxoptIfOTSnSourcePreOtnPMGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 11)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcCurrentSuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcCurrentOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcCurrentLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcCurrentHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcCurrentInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcCurrentLowInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcCurrentHighInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcIntervalSuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcIntervalLastOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcIntervalLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcIntervalHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcIntervalLastInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcIntervalLowInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcIntervalHighInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcCurDaySuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcCurDayLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcCurDayHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcCurDayLowInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcCurDayHighInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcPrevDaySuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcPrevDayLastOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcPrevDayLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcPrevDayHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcPrevDayLastInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcPrevDayLowInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcPrevDayHighInputPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfOTSnSourcePreOtnPMGroup = jnxoptIfOTSnSourcePreOtnPMGroup.setStatus('current')
jnxoptIfOTSnSourcePreOtnPMThresholdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 12)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcCurrentLowerOutputPowerThreshold"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcCurrentUpperOutputPowerThreshold"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcCurrentLowerInputPowerThreshold"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSrcCurrentUpperInputPowerThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfOTSnSourcePreOtnPMThresholdGroup = jnxoptIfOTSnSourcePreOtnPMThresholdGroup.setStatus('current')
jnxoptIfOMSnCommonGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 13)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfOMSnDirectionality"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfOMSnCommonGroup = jnxoptIfOMSnCommonGroup.setStatus('current')
jnxoptIfOMSnSinkGroupBasic = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 14)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfOMSnCurrentStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfOMSnSinkGroupBasic = jnxoptIfOMSnSinkGroupBasic.setStatus('current')
jnxoptIfOMSnSinkPreOtnPMGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 15)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkCurrentSuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkCurrentAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkCurrentLowAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkCurrentHighAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkCurrentOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkCurrentLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkCurrentHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkIntervalSuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkIntervalLastAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkIntervalLowAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkIntervalHighAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkIntervalLastOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkIntervalLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkIntervalHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkCurDaySuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkCurDayLowAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkCurDayHighAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkCurDayLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkCurDayHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkPrevDaySuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkPrevDayLastAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkPrevDayLowAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkPrevDayHighAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkPrevDayLastOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkPrevDayLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkPrevDayHighOutputPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfOMSnSinkPreOtnPMGroup = jnxoptIfOMSnSinkPreOtnPMGroup.setStatus('current')
jnxoptIfOMSnSinkPreOtnPMThresholdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 16)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkCurrentLowerInputPowerThreshold"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkCurrentUpperInputPowerThreshold"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkCurrentLowerOutputPowerThreshold"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkCurrentUpperOutputPowerThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfOMSnSinkPreOtnPMThresholdGroup = jnxoptIfOMSnSinkPreOtnPMThresholdGroup.setStatus('current')
jnxoptIfOMSnSourcePreOtnPMGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 17)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcCurrentSuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcCurrentOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcCurrentLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcCurrentHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcCurrentAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcCurrentLowAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcCurrentHighAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcIntervalSuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcIntervalLastOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcIntervalLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcIntervalHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcIntervalLastAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcIntervalLowAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcIntervalHighAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcCurDaySuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcCurDayLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcCurDayHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcCurDayLowAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcCurDayHighAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcPrevDaySuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcPrevDayLastOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcPrevDayLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcPrevDayHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcPrevDayLastAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcPrevDayLowAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcPrevDayHighAggregatedInputPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfOMSnSourcePreOtnPMGroup = jnxoptIfOMSnSourcePreOtnPMGroup.setStatus('current')
jnxoptIfOMSnSourcePreOtnPMThresholdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 18)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcCurrentLowerOutputPowerThreshold"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcCurrentUpperOutputPowerThreshold"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcCurrentLowerInputPowerThreshold"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSrcCurrentUpperInputPowerThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfOMSnSourcePreOtnPMThresholdGroup = jnxoptIfOMSnSourcePreOtnPMThresholdGroup.setStatus('current')
jnxoptIfOChGroupCommonGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 19)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfOChGroupDirectionality"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfOChGroupCommonGroup = jnxoptIfOChGroupCommonGroup.setStatus('current')
jnxoptIfOChGroupSinkPreOtnPMGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 20)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkCurrentSuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkCurrentAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkCurrentLowAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkCurrentHighAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkCurrentOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkCurrentLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkCurrentHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkIntervalSuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkIntervalLastAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkIntervalLowAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkIntervalHighAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkIntervalLastOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkIntervalLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkIntervalHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkCurDaySuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkCurDayLowAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkCurDayHighAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkCurDayLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkCurDayHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkPrevDaySuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkPrevDayLastAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkPrevDayLowAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkPrevDayHighAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkPrevDayLastOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkPrevDayLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkPrevDayHighOutputPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfOChGroupSinkPreOtnPMGroup = jnxoptIfOChGroupSinkPreOtnPMGroup.setStatus('current')
jnxoptIfOChGroupSinkPreOtnPMThresholdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 21)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkCurrentLowerInputPowerThreshold"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkCurrentUpperInputPowerThreshold"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkCurrentLowerOutputPowerThreshold"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkCurrentUpperOutputPowerThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfOChGroupSinkPreOtnPMThresholdGroup = jnxoptIfOChGroupSinkPreOtnPMThresholdGroup.setStatus('current')
jnxoptIfOChGroupSourcePreOtnPMGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 22)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcCurrentSuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcCurrentOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcCurrentLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcCurrentHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcCurrentAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcCurrentLowAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcCurrentHighAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcIntervalSuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcIntervalLastOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcIntervalLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcIntervalHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcIntervalLastAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcIntervalLowAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcIntervalHighAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcCurDaySuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcCurDayLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcCurDayHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcCurDayLowAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcCurDayHighAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcPrevDaySuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcPrevDayLastOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcPrevDayLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcPrevDayHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcPrevDayLastAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcPrevDayLowAggregatedInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcPrevDayHighAggregatedInputPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfOChGroupSourcePreOtnPMGroup = jnxoptIfOChGroupSourcePreOtnPMGroup.setStatus('current')
jnxoptIfOChGroupSourcePreOtnPMThresholdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 23)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcCurrentLowerOutputPowerThreshold"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcCurrentUpperOutputPowerThreshold"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcCurrentLowerInputPowerThreshold"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSrcCurrentUpperInputPowerThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfOChGroupSourcePreOtnPMThresholdGroup = jnxoptIfOChGroupSourcePreOtnPMThresholdGroup.setStatus('current')
jnxoptIfOChCommonGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 24)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfOChDirectionality"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfOChCommonGroup = jnxoptIfOChCommonGroup.setStatus('current')
jnxoptIfOChSinkGroupBasic = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 25)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfOChCurrentStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfOChSinkGroupBasic = jnxoptIfOChSinkGroupBasic.setStatus('current')
jnxoptIfOChSinkPreOtnPMGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 26)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfOChSinkCurrentSuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSinkCurrentInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSinkCurrentLowInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSinkCurrentHighInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSinkIntervalSuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSinkIntervalLastInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSinkIntervalLowInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSinkIntervalHighInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSinkCurDaySuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSinkCurDayLowInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSinkCurDayHighInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSinkPrevDaySuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSinkPrevDayLastInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSinkPrevDayLowInputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSinkPrevDayHighInputPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfOChSinkPreOtnPMGroup = jnxoptIfOChSinkPreOtnPMGroup.setStatus('current')
jnxoptIfOChSinkPreOtnPMThresholdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 27)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfOChSinkCurrentLowerInputPowerThreshold"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSinkCurrentUpperInputPowerThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfOChSinkPreOtnPMThresholdGroup = jnxoptIfOChSinkPreOtnPMThresholdGroup.setStatus('current')
jnxoptIfOChSourcePreOtnPMGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 28)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfOChSrcCurrentSuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSrcCurrentOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSrcCurrentLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSrcCurrentHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSrcIntervalSuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSrcIntervalLastOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSrcIntervalLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSrcIntervalHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSrcCurDaySuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSrcCurDayLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSrcCurDayHighOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSrcPrevDaySuspectedFlag"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSrcPrevDayLastOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSrcPrevDayLowOutputPower"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSrcPrevDayHighOutputPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfOChSourcePreOtnPMGroup = jnxoptIfOChSourcePreOtnPMGroup.setStatus('current')
jnxoptIfOChSourcePreOtnPMThresholdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 29)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfOChSrcCurrentLowerOutputPowerThreshold"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSrcCurrentUpperOutputPowerThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfOChSourcePreOtnPMThresholdGroup = jnxoptIfOChSourcePreOtnPMThresholdGroup.setStatus('current')
jnxoptIfOTUkCommonGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 30)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfOTUkDirectionality"), ("JNX-OPT-IF-MIB", "jnxoptIfOTUkBitRateK"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfOTUkCommonGroup = jnxoptIfOTUkCommonGroup.setStatus('current')
jnxoptIfOTUkSourceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 31)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfOTUkTraceIdentifierTransmitted"), ("JNX-OPT-IF-MIB", "jnxoptIfOTUkSourceAdaptActive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfOTUkSourceGroup = jnxoptIfOTUkSourceGroup.setStatus('current')
jnxoptIfOTUkSinkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 32)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfOTUkDAPIExpected"), ("JNX-OPT-IF-MIB", "jnxoptIfOTUkSAPIExpected"), ("JNX-OPT-IF-MIB", "jnxoptIfOTUkTraceIdentifierAccepted"), ("JNX-OPT-IF-MIB", "jnxoptIfOTUkTIMDetMode"), ("JNX-OPT-IF-MIB", "jnxoptIfOTUkTIMActEnabled"), ("JNX-OPT-IF-MIB", "jnxoptIfOTUkDEGThr"), ("JNX-OPT-IF-MIB", "jnxoptIfOTUkDEGM"), ("JNX-OPT-IF-MIB", "jnxoptIfOTUkSinkAdaptActive"), ("JNX-OPT-IF-MIB", "jnxoptIfOTUkSinkFECEnabled"), ("JNX-OPT-IF-MIB", "jnxoptIfOTUkCurrentStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfOTUkSinkGroup = jnxoptIfOTUkSinkGroup.setStatus('current')
jnxoptIfGCC0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 33)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfGCC0Application"), ("JNX-OPT-IF-MIB", "jnxoptIfGCC0RowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfGCC0Group = jnxoptIfGCC0Group.setStatus('current')
jnxoptIfODUkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 34)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfODUkDirectionality"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkBitRateK"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTcmFieldsInUse"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkPositionSeqCurrentSize"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkPositionSeqPosition"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkPositionSeqPointer"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTtpPresent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfODUkGroup = jnxoptIfODUkGroup.setStatus('current')
jnxoptIfODUkTtpSourceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 35)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfODUkTtpTraceIdentifierTransmitted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfODUkTtpSourceGroup = jnxoptIfODUkTtpSourceGroup.setStatus('current')
jnxoptIfODUkTtpSinkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 36)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfODUkTtpDAPIExpected"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTtpSAPIExpected"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTtpTraceIdentifierAccepted"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTtpTIMDetMode"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTtpTIMActEnabled"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTtpDEGThr"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTtpDEGM"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTtpCurrentStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfODUkTtpSinkGroup = jnxoptIfODUkTtpSinkGroup.setStatus('current')
jnxoptIfODUkNimGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 37)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfODUkNimDAPIExpected"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkNimSAPIExpected"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkNimTraceIdentifierAccepted"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkNimTIMDetMode"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkNimTIMActEnabled"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkNimDEGThr"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkNimDEGM"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkNimCurrentStatus"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkNimRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfODUkNimGroup = jnxoptIfODUkNimGroup.setStatus('current')
jnxoptIfGCC12Group = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 38)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfGCC12GCCPassThrough"), ("JNX-OPT-IF-MIB", "jnxoptIfGCC12Application"), ("JNX-OPT-IF-MIB", "jnxoptIfGCC12RowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfGCC12Group = jnxoptIfGCC12Group.setStatus('current')
jnxoptIfODUkTCommonGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 39)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfODUkTRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfODUkTCommonGroup = jnxoptIfODUkTCommonGroup.setStatus('current')
jnxoptIfODUkTSourceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 40)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfODUkTTraceIdentifierTransmitted"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTSourceLockSignalAdminState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfODUkTSourceGroup = jnxoptIfODUkTSourceGroup.setStatus('current')
jnxoptIfODUkTSinkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 41)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfODUkTDAPIExpected"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTSAPIExpected"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTTraceIdentifierAccepted"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTTIMDetMode"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTTIMActEnabled"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTDEGThr"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTDEGM"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTCurrentStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfODUkTSinkGroup = jnxoptIfODUkTSinkGroup.setStatus('current')
jnxoptIfODUkTSinkGroupCtp = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 42)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfODUkTSinkMode"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTSinkLockSignalAdminState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfODUkTSinkGroupCtp = jnxoptIfODUkTSinkGroupCtp.setStatus('current')
jnxoptIfODUkTNimGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 1, 43)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfODUkTNimDAPIExpected"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTNimSAPIExpected"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTNimTraceIdentifierAccepted"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTNimTIMDetMode"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTNimTIMActEnabled"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTNimDEGThr"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTNimDEGM"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTNimCurrentStatus"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTNimRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfODUkTNimGroup = jnxoptIfODUkTNimGroup.setStatus('current')
jnxoptIfOtnConfigCompl = ModuleCompliance((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 2, 1)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfOTMnGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnCommonGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSourceGroupFull"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnAPRStatusGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnAPRControlGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkGroupBasic"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkGroupFull"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnCommonGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkGroupBasic"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupCommonGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOChCommonGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSinkGroupBasic"), ("JNX-OPT-IF-MIB", "jnxoptIfOTUkCommonGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOTUkSourceGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOTUkSinkGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfGCC0Group"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTtpSourceGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTtpSinkGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkNimGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfGCC12Group"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTCommonGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTSourceGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTSinkGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTSinkGroupCtp"), ("JNX-OPT-IF-MIB", "jnxoptIfODUkTNimGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfOtnConfigCompl = jnxoptIfOtnConfigCompl.setStatus('current')
jnxoptIfPreOtnPMCompl = ModuleCompliance((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 2, 2, 2)).setObjects(("JNX-OPT-IF-MIB", "jnxoptIfPerfMonGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkPreOtnPMGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSinkPreOtnPMThresholdGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSourcePreOtnPMGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOTSnSourcePreOtnPMThresholdGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkPreOtnPMGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSinkPreOtnPMThresholdGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSourcePreOtnPMGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOMSnSourcePreOtnPMThresholdGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkPreOtnPMGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSinkPreOtnPMThresholdGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSourcePreOtnPMGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOChGroupSourcePreOtnPMThresholdGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSinkPreOtnPMGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSinkPreOtnPMThresholdGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSourcePreOtnPMGroup"), ("JNX-OPT-IF-MIB", "jnxoptIfOChSourcePreOtnPMThresholdGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxoptIfPreOtnPMCompl = jnxoptIfPreOtnPMCompl.setStatus('current')
mibBuilder.exportSymbols("JNX-OPT-IF-MIB", jnxoptIfOTSnSinkPrevDayLastOutputPower=jnxoptIfOTSnSinkPrevDayLastOutputPower, jnxoptIfOMSnSrcCurDayTable=jnxoptIfOMSnSrcCurDayTable, jnxoptIfOTSnAPRStatusGroup=jnxoptIfOTSnAPRStatusGroup, jnxoptIfOMSnSinkIntervalLowAggregatedInputPower=jnxoptIfOMSnSinkIntervalLowAggregatedInputPower, jnxoptIfOTSnSrcCurDayHighOutputPower=jnxoptIfOTSnSrcCurDayHighOutputPower, jnxoptIfOMSnSinkCurrentOutputPower=jnxoptIfOMSnSinkCurrentOutputPower, jnxoptIfODUkNimCurrentStatus=jnxoptIfODUkNimCurrentStatus, jnxoptIfOMSnSrcPrevDayLastOutputPower=jnxoptIfOMSnSrcPrevDayLastOutputPower, jnxoptIfOTUkSinkFECEnabled=jnxoptIfOTUkSinkFECEnabled, jnxoptIfOTSnSrcIntervalLowInputPower=jnxoptIfOTSnSrcIntervalLowInputPower, jnxoptIfOTSnSrcCurDaySuspectedFlag=jnxoptIfOTSnSrcCurDaySuspectedFlag, jnxoptIfGCC0Application=jnxoptIfGCC0Application, jnxoptIfOMSnSrcCurrentHighAggregatedInputPower=jnxoptIfOMSnSrcCurrentHighAggregatedInputPower, jnxoptIfODUkPositionSeqPosition=jnxoptIfODUkPositionSeqPosition, jnxoptIfOTUkSinkGroup=jnxoptIfOTUkSinkGroup, jnxoptIfODUkTNimDAPIExpected=jnxoptIfODUkTNimDAPIExpected, jnxoptIfOTSnTraceIdentifierTransmitted=jnxoptIfOTSnTraceIdentifierTransmitted, jnxoptIfOMSnSinkIntervalLastAggregatedInputPower=jnxoptIfOMSnSinkIntervalLastAggregatedInputPower, jnxoptIfOChSrcCurDayHighOutputPower=jnxoptIfOChSrcCurDayHighOutputPower, jnxoptIfObjects=jnxoptIfObjects, jnxoptIfOChGroupSrcCurrentLowOutputPower=jnxoptIfOChGroupSrcCurrentLowOutputPower, jnxoptIfOTUkTraceIdentifierTransmitted=jnxoptIfOTUkTraceIdentifierTransmitted, jnxoptIfODUkTSAPIExpected=jnxoptIfODUkTSAPIExpected, jnxoptIfOChGroupSrcCurrentHighOutputPower=jnxoptIfOChGroupSrcCurrentHighOutputPower, jnxoptIfOChGroupSinkPrevDaySuspectedFlag=jnxoptIfOChGroupSinkPrevDaySuspectedFlag, jnxoptIfOChGroupSrcCurDayLowAggregatedInputPower=jnxoptIfOChGroupSrcCurDayLowAggregatedInputPower, jnxoptIfODUkTtpSAPIExpected=jnxoptIfODUkTtpSAPIExpected, jnxoptIfOTSnSinkCurrentLowerOutputPowerThreshold=jnxoptIfOTSnSinkCurrentLowerOutputPowerThreshold, jnxoptIfODUkT=jnxoptIfODUkT, jnxoptIfOChSrcCurrentEntry=jnxoptIfOChSrcCurrentEntry, JnxoptIfDEGM=JnxoptIfDEGM, jnxoptIfODUkTSinkLockSignalAdminState=jnxoptIfODUkTSinkLockSignalAdminState, jnxoptIfODUkNimTraceIdentifierAccepted=jnxoptIfODUkNimTraceIdentifierAccepted, jnxoptIfOChSourcePreOtnPMThresholdGroup=jnxoptIfOChSourcePreOtnPMThresholdGroup, jnxoptIfOTSnSinkCurrentInputPower=jnxoptIfOTSnSinkCurrentInputPower, jnxoptIfPerfMonIntervalTable=jnxoptIfPerfMonIntervalTable, jnxoptIfGCC12Group=jnxoptIfGCC12Group, jnxoptIfOTSnSourcePreOtnPMGroup=jnxoptIfOTSnSourcePreOtnPMGroup, jnxoptIfOTSnSinkPrevDayEntry=jnxoptIfOTSnSinkPrevDayEntry, jnxoptIfOChGroupSrcIntervalSuspectedFlag=jnxoptIfOChGroupSrcIntervalSuspectedFlag, jnxoptIfGCC0Group=jnxoptIfGCC0Group, jnxoptIfOMSnSinkPrevDayEntry=jnxoptIfOMSnSinkPrevDayEntry, jnxoptIfOTUkBitRateK=jnxoptIfOTUkBitRateK, jnxoptIfOChGroupSinkCurrentLowOutputPower=jnxoptIfOChGroupSinkCurrentLowOutputPower, jnxoptIfODUkTtpCurrentStatus=jnxoptIfODUkTtpCurrentStatus, jnxoptIfOTSnSinkIntervalLastOutputPower=jnxoptIfOTSnSinkIntervalLastOutputPower, jnxoptIfOChGroupSrcCurrentUpperOutputPowerThreshold=jnxoptIfOChGroupSrcCurrentUpperOutputPowerThreshold, jnxoptIfOTSnSrcPrevDayEntry=jnxoptIfOTSnSrcPrevDayEntry, jnxoptIfODUkDirectionality=jnxoptIfODUkDirectionality, jnxoptIfOTMnOrder=jnxoptIfOTMnOrder, jnxoptIfOTSnTIMActEnabled=jnxoptIfOTSnTIMActEnabled, jnxoptIfOChSinkIntervalNumber=jnxoptIfOChSinkIntervalNumber, jnxoptIfODUkTSourceGroup=jnxoptIfODUkTSourceGroup, jnxoptIfOMSnSrcIntervalHighAggregatedInputPower=jnxoptIfOMSnSrcIntervalHighAggregatedInputPower, jnxoptIfODUkNimDEGM=jnxoptIfODUkNimDEGM, jnxoptIfOTSnAPRControlGroup=jnxoptIfOTSnAPRControlGroup, jnxoptIfOChSinkCurrentUpperInputPowerThreshold=jnxoptIfOChSinkCurrentUpperInputPowerThreshold, jnxoptIfODUkTSinkMode=jnxoptIfODUkTSinkMode, jnxoptIfOTSnSinkPreOtnPMThresholdGroup=jnxoptIfOTSnSinkPreOtnPMThresholdGroup, jnxoptIfGCC12RowStatus=jnxoptIfGCC12RowStatus, jnxoptIfOTSnSrcCurrentSuspectedFlag=jnxoptIfOTSnSrcCurrentSuspectedFlag, jnxoptIfOChSinkPrevDayLastInputPower=jnxoptIfOChSinkPrevDayLastInputPower, jnxoptIfOChSinkCurDayEntry=jnxoptIfOChSinkCurDayEntry, jnxoptIfPerfMonIntervalNumInvalidIntervals=jnxoptIfPerfMonIntervalNumInvalidIntervals, jnxoptIfGCC0ConfigEntry=jnxoptIfGCC0ConfigEntry, jnxoptIfOMSnSinkPrevDayLowAggregatedInputPower=jnxoptIfOMSnSinkPrevDayLowAggregatedInputPower, jnxoptIfODUkTtpTIMDetMode=jnxoptIfODUkTtpTIMDetMode, jnxoptIfOMSnSrcCurDayEntry=jnxoptIfOMSnSrcCurDayEntry, jnxoptIfGCC0RowStatus=jnxoptIfGCC0RowStatus, jnxoptIfODUkTNimDirectionality=jnxoptIfODUkTNimDirectionality, jnxoptIfOMSnSrcCurrentLowerOutputPowerThreshold=jnxoptIfOMSnSrcCurrentLowerOutputPowerThreshold, jnxoptIfOChGroupSinkCurDayLowOutputPower=jnxoptIfOChGroupSinkCurDayLowOutputPower, jnxoptIfOTSnSinkGroupBasic=jnxoptIfOTSnSinkGroupBasic, jnxoptIfOChSrcCurrentHighOutputPower=jnxoptIfOChSrcCurrentHighOutputPower, jnxoptIfOTSnSrcPrevDayLastInputPower=jnxoptIfOTSnSrcPrevDayLastInputPower, jnxoptIfOMSnSrcCurrentLowAggregatedInputPower=jnxoptIfOMSnSrcCurrentLowAggregatedInputPower, jnxoptIfODUkTtpDEGM=jnxoptIfODUkTtpDEGM, jnxoptIfODUkPositionSeqCurrentSize=jnxoptIfODUkPositionSeqCurrentSize, jnxoptIfOMSnSrcCurrentLowerInputPowerThreshold=jnxoptIfOMSnSrcCurrentLowerInputPowerThreshold, jnxoptIfOTSnSinkCurrentLowerInputPowerThreshold=jnxoptIfOTSnSinkCurrentLowerInputPowerThreshold, jnxoptIfOTSnSrcCurrentTable=jnxoptIfOTSnSrcCurrentTable, jnxoptIfOChGroupSrcIntervalHighAggregatedInputPower=jnxoptIfOChGroupSrcIntervalHighAggregatedInputPower, jnxoptIfOChGroupSrcPrevDayLastAggregatedInputPower=jnxoptIfOChGroupSrcPrevDayLastAggregatedInputPower, JnxoptIfExSAPI=JnxoptIfExSAPI, jnxoptIfODUkTTIMActEnabled=jnxoptIfODUkTTIMActEnabled, jnxoptIfOTSnSrcCurDayTable=jnxoptIfOTSnSrcCurDayTable, jnxoptIfOChSrcCurDayEntry=jnxoptIfOChSrcCurDayEntry, jnxoptIfOTSnSinkCurDayEntry=jnxoptIfOTSnSinkCurDayEntry, jnxoptIfOChGroupSourcePreOtnPMThresholdGroup=jnxoptIfOChGroupSourcePreOtnPMThresholdGroup, jnxoptIfOChGroupSinkIntervalHighAggregatedInputPower=jnxoptIfOChGroupSinkIntervalHighAggregatedInputPower, jnxoptIfOTUkDEGThr=jnxoptIfOTUkDEGThr, jnxoptIfGCC12ConfigTable=jnxoptIfGCC12ConfigTable, jnxoptIfOChConfigTable=jnxoptIfOChConfigTable, jnxoptIfOChGroupSrcPrevDayLastOutputPower=jnxoptIfOChGroupSrcPrevDayLastOutputPower, jnxoptIfOMSnSrcCurrentUpperOutputPowerThreshold=jnxoptIfOMSnSrcCurrentUpperOutputPowerThreshold, jnxoptIfOChGroupSrcPrevDayEntry=jnxoptIfOChGroupSrcPrevDayEntry, jnxoptIfOChSinkCurrentLowInputPower=jnxoptIfOChSinkCurrentLowInputPower, jnxoptIfOTUkDEGM=jnxoptIfOTUkDEGM, jnxoptIfOTSnSinkCurrentOutputPower=jnxoptIfOTSnSinkCurrentOutputPower, jnxoptIfOMSnSourcePreOtnPMThresholdGroup=jnxoptIfOMSnSourcePreOtnPMThresholdGroup, jnxoptIfOMSnSrcPrevDayHighOutputPower=jnxoptIfOMSnSrcPrevDayHighOutputPower, jnxoptIfGCC12Codirectional=jnxoptIfGCC12Codirectional, jnxoptIfOChGroupSrcCurrentLowerOutputPowerThreshold=jnxoptIfOChGroupSrcCurrentLowerOutputPowerThreshold, jnxoptIfOTUkSourceGroup=jnxoptIfOTUkSourceGroup, JnxoptIfDEGThr=JnxoptIfDEGThr, jnxoptIfOTMnEntry=jnxoptIfOTMnEntry, jnxoptIfOTSnSrcCurrentUpperInputPowerThreshold=jnxoptIfOTSnSrcCurrentUpperInputPowerThreshold, JnxoptIfSinkOrSource=JnxoptIfSinkOrSource, jnxoptIfOMSnSinkPrevDayLastAggregatedInputPower=jnxoptIfOMSnSinkPrevDayLastAggregatedInputPower, jnxoptIfOChSrcCurrentLowOutputPower=jnxoptIfOChSrcCurrentLowOutputPower, jnxoptIfOMSnSinkPrevDayLastOutputPower=jnxoptIfOMSnSinkPrevDayLastOutputPower, jnxoptIfOTSnSrcIntervalSuspectedFlag=jnxoptIfOTSnSrcIntervalSuspectedFlag, jnxoptIfODUkConfigTable=jnxoptIfODUkConfigTable, jnxoptIfODUkPositionSeqIndex=jnxoptIfODUkPositionSeqIndex, jnxoptIfOMSnSinkCurrentLowerInputPowerThreshold=jnxoptIfOMSnSinkCurrentLowerInputPowerThreshold, jnxoptIfOChSrcIntervalNumber=jnxoptIfOChSrcIntervalNumber, jnxoptIfOChSinkCurrentHighInputPower=jnxoptIfOChSinkCurrentHighInputPower, jnxoptIfOChGroupSinkCurrentLowAggregatedInputPower=jnxoptIfOChGroupSinkCurrentLowAggregatedInputPower, jnxoptIfOtnConfigCompl=jnxoptIfOtnConfigCompl, jnxoptIfOChGroupSinkPrevDayLowOutputPower=jnxoptIfOChGroupSinkPrevDayLowOutputPower, jnxoptIfOChGroupSinkCurrentHighAggregatedInputPower=jnxoptIfOChGroupSinkCurrentHighAggregatedInputPower, jnxoptIfOChSrcCurrentLowerOutputPowerThreshold=jnxoptIfOChSrcCurrentLowerOutputPowerThreshold, jnxoptIfOTSnSinkCurDayLowOutputPower=jnxoptIfOTSnSinkCurDayLowOutputPower, jnxoptIfOTSnSrcCurrentHighInputPower=jnxoptIfOTSnSrcCurrentHighInputPower, jnxoptIfOChSrcPrevDaySuspectedFlag=jnxoptIfOChSrcPrevDaySuspectedFlag, jnxoptIfODUkTRowStatus=jnxoptIfODUkTRowStatus, jnxoptIfOChSinkCurrentLowerInputPowerThreshold=jnxoptIfOChSinkCurrentLowerInputPowerThreshold, jnxoptIfODUkTNimDEGM=jnxoptIfODUkTNimDEGM, jnxoptIfOChSinkCurrentSuspectedFlag=jnxoptIfOChSinkCurrentSuspectedFlag, jnxoptIfOChGroup=jnxoptIfOChGroup, jnxoptIfODUkNimDEGThr=jnxoptIfODUkNimDEGThr, jnxoptIfOTSnSinkCurrentUpperOutputPowerThreshold=jnxoptIfOTSnSinkCurrentUpperOutputPowerThreshold, jnxoptIfOTSnSrcCurrentLowerOutputPowerThreshold=jnxoptIfOTSnSrcCurrentLowerOutputPowerThreshold, jnxoptIfOMSnSinkCurrentHighOutputPower=jnxoptIfOMSnSinkCurrentHighOutputPower, jnxoptIfCompl=jnxoptIfCompl, jnxoptIfODUkConfigEntry=jnxoptIfODUkConfigEntry, jnxoptIfOChSrcPrevDayLastOutputPower=jnxoptIfOChSrcPrevDayLastOutputPower, jnxoptIfOTSnSinkIntervalLowOutputPower=jnxoptIfOTSnSinkIntervalLowOutputPower, jnxoptIfOMSnSinkCurDayHighAggregatedInputPower=jnxoptIfOMSnSinkCurDayHighAggregatedInputPower, jnxoptIfOTSnSinkCurDayTable=jnxoptIfOTSnSinkCurDayTable, jnxoptIfOTSnSrcCurrentInputPower=jnxoptIfOTSnSrcCurrentInputPower, jnxoptIfOTSnDAPIExpected=jnxoptIfOTSnDAPIExpected, jnxoptIfOMSnSrcCurrentSuspectedFlag=jnxoptIfOMSnSrcCurrentSuspectedFlag, jnxoptIfOChConfigEntry=jnxoptIfOChConfigEntry, jnxoptIfOTSnSinkCurDayHighOutputPower=jnxoptIfOTSnSinkCurDayHighOutputPower, jnxoptIfOMSnSinkCurDaySuspectedFlag=jnxoptIfOMSnSinkCurDaySuspectedFlag, jnxoptIfOTUkSinkAdaptActive=jnxoptIfOTUkSinkAdaptActive, jnxoptIfOChSinkPrevDayLowInputPower=jnxoptIfOChSinkPrevDayLowInputPower, jnxoptIfOChGroupSinkCurrentLowerInputPowerThreshold=jnxoptIfOChGroupSinkCurrentLowerInputPowerThreshold, jnxoptIfOTUkTIMActEnabled=jnxoptIfOTUkTIMActEnabled, jnxoptIfODUkTtpDEGThr=jnxoptIfODUkTtpDEGThr, jnxoptIfOTSnSinkCurrentHighOutputPower=jnxoptIfOTSnSinkCurrentHighOutputPower, jnxoptIfODUkTConfigEntry=jnxoptIfODUkTConfigEntry, jnxoptIfOTMnGroup=jnxoptIfOTMnGroup, JnxoptIfAcTI=JnxoptIfAcTI, jnxoptIfOTSnSinkCurrentHighInputPower=jnxoptIfOTSnSinkCurrentHighInputPower, jnxoptIfOChSrcCurDaySuspectedFlag=jnxoptIfOChSrcCurDaySuspectedFlag, jnxoptIfOMSnSrcIntervalSuspectedFlag=jnxoptIfOMSnSrcIntervalSuspectedFlag, jnxoptIfOTUkConfigTable=jnxoptIfOTUkConfigTable, jnxoptIfGCC12Application=jnxoptIfGCC12Application, jnxoptIfODUkPositionSeqTable=jnxoptIfODUkPositionSeqTable, jnxoptIfOChGroupSinkIntervalEntry=jnxoptIfOChGroupSinkIntervalEntry, jnxoptIfOTSnTraceIdentifierAccepted=jnxoptIfOTSnTraceIdentifierAccepted, jnxoptIfOChGroupSinkCurrentSuspectedFlag=jnxoptIfOChGroupSinkCurrentSuspectedFlag, jnxoptIfOChSinkCurDayLowInputPower=jnxoptIfOChSinkCurDayLowInputPower, jnxoptIfOTSnSrcCurrentHighOutputPower=jnxoptIfOTSnSrcCurrentHighOutputPower, jnxoptIfOChSrcCurrentTable=jnxoptIfOChSrcCurrentTable, jnxoptIfODUkTNimDEGThr=jnxoptIfODUkTNimDEGThr, jnxoptIfOChGroupSrcIntervalEntry=jnxoptIfOChGroupSrcIntervalEntry, jnxoptIfODUkNimTIMDetMode=jnxoptIfODUkNimTIMDetMode, jnxoptIfOMSnSinkIntervalHighOutputPower=jnxoptIfOMSnSinkIntervalHighOutputPower, jnxoptIfOTSnSrcPrevDayTable=jnxoptIfOTSnSrcPrevDayTable, jnxoptIfOMSnSrcCurDayLowAggregatedInputPower=jnxoptIfOMSnSrcCurDayLowAggregatedInputPower, jnxoptIfODUkNimDirectionality=jnxoptIfODUkNimDirectionality, jnxoptIfPerfMonGroup=jnxoptIfPerfMonGroup, jnxoptIfOChGroupSinkCurrentLowerOutputPowerThreshold=jnxoptIfOChGroupSinkCurrentLowerOutputPowerThreshold, jnxoptIfODUkNimConfigTable=jnxoptIfODUkNimConfigTable, jnxoptIfPerfMonIntervalEntry=jnxoptIfPerfMonIntervalEntry, jnxoptIfOMSnSrcCurrentAggregatedInputPower=jnxoptIfOMSnSrcCurrentAggregatedInputPower, jnxoptIfOTUkTIMDetMode=jnxoptIfOTUkTIMDetMode, jnxoptIfOTSnSinkPrevDayTable=jnxoptIfOTSnSinkPrevDayTable, jnxoptIfOTSnSrcCurrentEntry=jnxoptIfOTSnSrcCurrentEntry, jnxoptIfOChGroupSrcIntervalNumber=jnxoptIfOChGroupSrcIntervalNumber, jnxoptIfOChSinkCurDaySuspectedFlag=jnxoptIfOChSinkCurDaySuspectedFlag, jnxoptIfOMSnSinkPreOtnPMThresholdGroup=jnxoptIfOMSnSinkPreOtnPMThresholdGroup, jnxoptIfOChGroupSrcCurDayTable=jnxoptIfOChGroupSrcCurDayTable, jnxoptIfOMSnSrcIntervalLowAggregatedInputPower=jnxoptIfOMSnSrcIntervalLowAggregatedInputPower, jnxoptIfOChGroupSrcCurrentLowAggregatedInputPower=jnxoptIfOChGroupSrcCurrentLowAggregatedInputPower, jnxoptIfOChGroupSinkCurrentUpperInputPowerThreshold=jnxoptIfOChGroupSinkCurrentUpperInputPowerThreshold, jnxoptIfOTSnSinkIntervalHighOutputPower=jnxoptIfOTSnSinkIntervalHighOutputPower, jnxoptIfODUkTNimRowStatus=jnxoptIfODUkTNimRowStatus, jnxoptIfGCC12GCCPassThrough=jnxoptIfGCC12GCCPassThrough, jnxoptIfODUkTNimTIMActEnabled=jnxoptIfODUkTNimTIMActEnabled, jnxoptIfOTSnSrcIntervalLastOutputPower=jnxoptIfOTSnSrcIntervalLastOutputPower, jnxoptIfOMSnConfigEntry=jnxoptIfOMSnConfigEntry, jnxoptIfOMSnSrcIntervalLowOutputPower=jnxoptIfOMSnSrcIntervalLowOutputPower, jnxoptIfODUkPositionSeqPointer=jnxoptIfODUkPositionSeqPointer, jnxoptIfOTSnSrcIntervalLastInputPower=jnxoptIfOTSnSrcIntervalLastInputPower, jnxoptIfOTMn=jnxoptIfOTMn, jnxoptIfOChGroupSinkPrevDayLowAggregatedInputPower=jnxoptIfOChGroupSinkPrevDayLowAggregatedInputPower, jnxoptIfODUkTtpConfigEntry=jnxoptIfODUkTtpConfigEntry, jnxoptIfOMSnSrcIntervalNumber=jnxoptIfOMSnSrcIntervalNumber, jnxoptIfOChGroupSinkIntervalNumber=jnxoptIfOChGroupSinkIntervalNumber, jnxoptIfOChSinkPrevDayHighInputPower=jnxoptIfOChSinkPrevDayHighInputPower, jnxoptIfOTSnSrcCurDayEntry=jnxoptIfOTSnSrcCurDayEntry, jnxoptIfODUkNimTIMActEnabled=jnxoptIfODUkNimTIMActEnabled, jnxoptIfOChSrcCurDayLowOutputPower=jnxoptIfOChSrcCurDayLowOutputPower, jnxoptIfOChGroupSrcCurrentUpperInputPowerThreshold=jnxoptIfOChGroupSrcCurrentUpperInputPowerThreshold, jnxoptIfOTSnSrcCurDayLowOutputPower=jnxoptIfOTSnSrcCurDayLowOutputPower, jnxoptIfOMSnSinkPrevDayLowOutputPower=jnxoptIfOMSnSinkPrevDayLowOutputPower, jnxoptIfOTMnTable=jnxoptIfOTMnTable, jnxoptIfODUkPositionSeqEntry=jnxoptIfODUkPositionSeqEntry, jnxoptIfOMSnSinkPrevDayHighOutputPower=jnxoptIfOMSnSinkPrevDayHighOutputPower, jnxoptIfOTSnSourceGroupFull=jnxoptIfOTSnSourceGroupFull, jnxoptIfOTSnSinkCurDaySuspectedFlag=jnxoptIfOTSnSinkCurDaySuspectedFlag, jnxoptIfOChSrcPrevDayTable=jnxoptIfOChSrcPrevDayTable, jnxoptIfOChSinkIntervalTable=jnxoptIfOChSinkIntervalTable, jnxoptIfODUkNimRowStatus=jnxoptIfODUkNimRowStatus, jnxoptIfODUkTTraceIdentifierTransmitted=jnxoptIfODUkTTraceIdentifierTransmitted, jnxoptIfOTSnTIMDetMode=jnxoptIfOTSnTIMDetMode, jnxoptIfOMSnSrcPrevDayLowAggregatedInputPower=jnxoptIfOMSnSrcPrevDayLowAggregatedInputPower, jnxoptIfOChSrcCurrentUpperOutputPowerThreshold=jnxoptIfOChSrcCurrentUpperOutputPowerThreshold, JnxoptIfExDAPI=JnxoptIfExDAPI, jnxoptIfOTSnSinkGroupFull=jnxoptIfOTSnSinkGroupFull, jnxoptIfOChGroupSrcIntervalLastOutputPower=jnxoptIfOChGroupSrcIntervalLastOutputPower, jnxoptIfOChGroupSourcePreOtnPMGroup=jnxoptIfOChGroupSourcePreOtnPMGroup, jnxoptIfODUkNimConfigEntry=jnxoptIfODUkNimConfigEntry, jnxoptIfOMSnSinkCurrentLowOutputPower=jnxoptIfOMSnSinkCurrentLowOutputPower, jnxoptIfOChGroupSrcCurrentSuspectedFlag=jnxoptIfOChGroupSrcCurrentSuspectedFlag, jnxoptIfOTSnSrcPrevDayLowOutputPower=jnxoptIfOTSnSrcPrevDayLowOutputPower, jnxoptIfOMSnSinkCurrentUpperInputPowerThreshold=jnxoptIfOMSnSinkCurrentUpperInputPowerThreshold, jnxoptIfOTUkDirectionality=jnxoptIfOTUkDirectionality, JnxoptIfTIMDetMode=JnxoptIfTIMDetMode, jnxoptIfOTSnSinkIntervalSuspectedFlag=jnxoptIfOTSnSinkIntervalSuspectedFlag, jnxoptIfOTSnSrcCurrentLowerInputPowerThreshold=jnxoptIfOTSnSrcCurrentLowerInputPowerThreshold, jnxoptIfOChGroupSrcIntervalHighOutputPower=jnxoptIfOChGroupSrcIntervalHighOutputPower, jnxoptIfOTSnSinkPrevDayLastInputPower=jnxoptIfOTSnSinkPrevDayLastInputPower, jnxoptIfOChGroupSrcPrevDayLowAggregatedInputPower=jnxoptIfOChGroupSrcPrevDayLowAggregatedInputPower, jnxoptIfOChGroupSrcCurDayHighAggregatedInputPower=jnxoptIfOChGroupSrcCurDayHighAggregatedInputPower, jnxoptIfOChSrcIntervalTable=jnxoptIfOChSrcIntervalTable, jnxoptIfOChGroupSinkCurrentEntry=jnxoptIfOChGroupSinkCurrentEntry, jnxoptIfOMSnSinkPrevDayTable=jnxoptIfOMSnSinkPrevDayTable, jnxoptIfOChSrcIntervalEntry=jnxoptIfOChSrcIntervalEntry, jnxoptIfOTSnSinkIntervalLowInputPower=jnxoptIfOTSnSinkIntervalLowInputPower, jnxoptIfOTSnAprControl=jnxoptIfOTSnAprControl, jnxoptIfGCC0Directionality=jnxoptIfGCC0Directionality, jnxoptIfOChGroupSrcPrevDayHighOutputPower=jnxoptIfOChGroupSrcPrevDayHighOutputPower, jnxoptIfOTSnSrcIntervalHighInputPower=jnxoptIfOTSnSrcIntervalHighInputPower, jnxoptIfOMSnDirectionality=jnxoptIfOMSnDirectionality, jnxoptIfOMSnSinkCurrentAggregatedInputPower=jnxoptIfOMSnSinkCurrentAggregatedInputPower, jnxoptIfOTSnSrcCurrentLowInputPower=jnxoptIfOTSnSrcCurrentLowInputPower, jnxoptIfOChSrcIntervalSuspectedFlag=jnxoptIfOChSrcIntervalSuspectedFlag, jnxoptIfOChGroupConfigTable=jnxoptIfOChGroupConfigTable, jnxoptIfOMSnSrcCurrentOutputPower=jnxoptIfOMSnSrcCurrentOutputPower)
mibBuilder.exportSymbols("JNX-OPT-IF-MIB", jnxoptIfOTSnSinkIntervalNumber=jnxoptIfOTSnSinkIntervalNumber, jnxoptIfOTSnSAPIExpected=jnxoptIfOTSnSAPIExpected, jnxoptIfOCh=jnxoptIfOCh, jnxoptIfOChGroupSinkIntervalLastOutputPower=jnxoptIfOChGroupSinkIntervalLastOutputPower, jnxoptIfODUkNimDAPIExpected=jnxoptIfODUkNimDAPIExpected, JnxoptIfDirectionality=JnxoptIfDirectionality, jnxoptIfOMSnSrcIntervalHighOutputPower=jnxoptIfOMSnSrcIntervalHighOutputPower, jnxoptIfOChGroupSinkPrevDayTable=jnxoptIfOChGroupSinkPrevDayTable, jnxoptIfOMSnSinkIntervalTable=jnxoptIfOMSnSinkIntervalTable, jnxoptIfOChGroupSinkIntervalHighOutputPower=jnxoptIfOChGroupSinkIntervalHighOutputPower, jnxoptIfOChGroupSrcCurrentHighAggregatedInputPower=jnxoptIfOChGroupSrcCurrentHighAggregatedInputPower, jnxoptIfODUkTcmFieldsInUse=jnxoptIfODUkTcmFieldsInUse, jnxoptIfGroups=jnxoptIfGroups, jnxoptIfOTSnSrcPrevDayHighInputPower=jnxoptIfOTSnSrcPrevDayHighInputPower, jnxoptIfOTSnSrcIntervalLowOutputPower=jnxoptIfOTSnSrcIntervalLowOutputPower, jnxoptIfOChSinkPrevDayEntry=jnxoptIfOChSinkPrevDayEntry, jnxoptIfOTUkCommonGroup=jnxoptIfOTUkCommonGroup, jnxoptIfOChGroupSinkPreOtnPMGroup=jnxoptIfOChGroupSinkPreOtnPMGroup, jnxoptIfOMSnSinkPreOtnPMGroup=jnxoptIfOMSnSinkPreOtnPMGroup, jnxoptIfOMSnCurrentStatus=jnxoptIfOMSnCurrentStatus, jnxoptIfOMSnSrcCurrentHighOutputPower=jnxoptIfOMSnSrcCurrentHighOutputPower, jnxoptIfOChGroupSinkCurDayTable=jnxoptIfOChGroupSinkCurDayTable, jnxoptIfOChGroupSinkPrevDayHighOutputPower=jnxoptIfOChGroupSinkPrevDayHighOutputPower, JnxoptIfBitRateK=JnxoptIfBitRateK, jnxoptIfODUkTSinkGroup=jnxoptIfODUkTSinkGroup, jnxoptIfOTMnOpticalReach=jnxoptIfOTMnOpticalReach, jnxoptIfOTUkConfigEntry=jnxoptIfOTUkConfigEntry, jnxoptIfOTSnSrcCurrentLowOutputPower=jnxoptIfOTSnSrcCurrentLowOutputPower, jnxoptIfOChSrcCurrentSuspectedFlag=jnxoptIfOChSrcCurrentSuspectedFlag, jnxoptIfODUkTDEGThr=jnxoptIfODUkTDEGThr, jnxoptIfOMSnSinkIntervalLastOutputPower=jnxoptIfOMSnSinkIntervalLastOutputPower, jnxoptIfOTSnSinkPrevDayHighOutputPower=jnxoptIfOTSnSinkPrevDayHighOutputPower, jnxoptIfODUkTSourceLockSignalAdminState=jnxoptIfODUkTSourceLockSignalAdminState, jnxoptIfOTSnSinkCurrentLowInputPower=jnxoptIfOTSnSinkCurrentLowInputPower, jnxoptIfOMSnSinkPrevDaySuspectedFlag=jnxoptIfOMSnSinkPrevDaySuspectedFlag, jnxoptIfOTSnSourcePreOtnPMThresholdGroup=jnxoptIfOTSnSourcePreOtnPMThresholdGroup, jnxoptIfOChSinkIntervalLastInputPower=jnxoptIfOChSinkIntervalLastInputPower, jnxoptIfOTMnTcmMax=jnxoptIfOTMnTcmMax, jnxoptIfODUkTCommonGroup=jnxoptIfODUkTCommonGroup, jnxoptIfOChGroupSinkCurrentAggregatedInputPower=jnxoptIfOChGroupSinkCurrentAggregatedInputPower, jnxoptIfPreOtnPMCompl=jnxoptIfPreOtnPMCompl, jnxoptIfOChDirectionality=jnxoptIfOChDirectionality, jnxoptIfOTSnSinkCurrentTable=jnxoptIfOTSnSinkCurrentTable, jnxoptIfODUkTNimTIMDetMode=jnxoptIfODUkTNimTIMDetMode, jnxoptIfPerfMonIntervalNumIntervals=jnxoptIfPerfMonIntervalNumIntervals, jnxoptIfOMSnSinkIntervalLowOutputPower=jnxoptIfOMSnSinkIntervalLowOutputPower, jnxoptIfOMSnSinkCurrentLowAggregatedInputPower=jnxoptIfOMSnSinkCurrentLowAggregatedInputPower, jnxoptIfODUkTtpSourceGroup=jnxoptIfODUkTtpSourceGroup, jnxoptIfOMSnSrcCurDayHighAggregatedInputPower=jnxoptIfOMSnSrcCurDayHighAggregatedInputPower, jnxoptIfOChGroupSrcPrevDaySuspectedFlag=jnxoptIfOChGroupSrcPrevDaySuspectedFlag, jnxoptIfOMSnSrcCurDaySuspectedFlag=jnxoptIfOMSnSrcCurDaySuspectedFlag, jnxoptIfPerfMon=jnxoptIfPerfMon, jnxoptIfODUkTtpConfigTable=jnxoptIfODUkTtpConfigTable, jnxoptIfOChGroupSinkCurDaySuspectedFlag=jnxoptIfOChGroupSinkCurDaySuspectedFlag, jnxoptIfOTSnConfigTable=jnxoptIfOTSnConfigTable, jnxoptIfOMSnSinkCurrentHighAggregatedInputPower=jnxoptIfOMSnSinkCurrentHighAggregatedInputPower, jnxoptIfOMSnSrcCurrentLowOutputPower=jnxoptIfOMSnSrcCurrentLowOutputPower, jnxoptIfODUkNimSAPIExpected=jnxoptIfODUkNimSAPIExpected, jnxoptIfOMSnSinkPrevDayHighAggregatedInputPower=jnxoptIfOMSnSinkPrevDayHighAggregatedInputPower, jnxoptIfOTMnInterfaceType=jnxoptIfOTMnInterfaceType, jnxoptIfOTSnSinkCurDayHighInputPower=jnxoptIfOTSnSinkCurDayHighInputPower, jnxoptIfOTSnSrcPrevDaySuspectedFlag=jnxoptIfOTSnSrcPrevDaySuspectedFlag, jnxoptIfOChGroupSinkPrevDayLastOutputPower=jnxoptIfOChGroupSinkPrevDayLastOutputPower, jnxoptIfGCC0ConfigTable=jnxoptIfGCC0ConfigTable, jnxoptIfODUkGroup=jnxoptIfODUkGroup, jnxoptIfOChSinkCurrentInputPower=jnxoptIfOChSinkCurrentInputPower, jnxoptIfOChGroupSrcCurDayHighOutputPower=jnxoptIfOChGroupSrcCurDayHighOutputPower, jnxoptIfODUkTConfigTable=jnxoptIfODUkTConfigTable, jnxoptIfOTSnSinkCurrentSuspectedFlag=jnxoptIfOTSnSinkCurrentSuspectedFlag, jnxoptIfOChGroupCommonGroup=jnxoptIfOChGroupCommonGroup, jnxoptIfOMSnSrcIntervalTable=jnxoptIfOMSnSrcIntervalTable, jnxoptIfOMSnSrcPrevDayTable=jnxoptIfOMSnSrcPrevDayTable, jnxoptIfOChGroupSrcPrevDayLowOutputPower=jnxoptIfOChGroupSrcPrevDayLowOutputPower, jnxoptIfOChGroupSinkPrevDayLastAggregatedInputPower=jnxoptIfOChGroupSinkPrevDayLastAggregatedInputPower, jnxoptIfOTSnSinkPrevDaySuspectedFlag=jnxoptIfOTSnSinkPrevDaySuspectedFlag, jnxoptIfOChGroupSrcCurrentAggregatedInputPower=jnxoptIfOChGroupSrcCurrentAggregatedInputPower, jnxoptIfOTUkDAPIExpected=jnxoptIfOTUkDAPIExpected, jnxoptIfODUk=jnxoptIfODUk, jnxoptIfOMSnSrcCurrentEntry=jnxoptIfOMSnSrcCurrentEntry, jnxoptIfOChGroupSrcCurrentEntry=jnxoptIfOChGroupSrcCurrentEntry, jnxoptIfODUkTtpPresent=jnxoptIfODUkTtpPresent, jnxoptIfOChSrcPrevDayLowOutputPower=jnxoptIfOChSrcPrevDayLowOutputPower, jnxoptIfOMSnSinkCurDayTable=jnxoptIfOMSnSinkCurDayTable, jnxoptIfOTUkSourceAdaptActive=jnxoptIfOTUkSourceAdaptActive, jnxoptIfODUkTtpSinkGroup=jnxoptIfODUkTtpSinkGroup, jnxoptIfOTSnSinkIntervalTable=jnxoptIfOTSnSinkIntervalTable, jnxoptIfOChSinkCurrentEntry=jnxoptIfOChSinkCurrentEntry, jnxoptIfOChSrcIntervalLowOutputPower=jnxoptIfOChSrcIntervalLowOutputPower, jnxoptIfODUkTtpDAPIExpected=jnxoptIfODUkTtpDAPIExpected, jnxoptIfOMSnSinkIntervalNumber=jnxoptIfOMSnSinkIntervalNumber, jnxoptIfODUkTTraceIdentifierAccepted=jnxoptIfODUkTTraceIdentifierAccepted, jnxoptIfOTSnSrcCurDayHighInputPower=jnxoptIfOTSnSrcCurDayHighInputPower, jnxoptIfOChGroupSinkCurrentHighOutputPower=jnxoptIfOChGroupSinkCurrentHighOutputPower, jnxoptIfOChSrcIntervalHighOutputPower=jnxoptIfOChSrcIntervalHighOutputPower, jnxoptIfOChGroupSinkIntervalLowAggregatedInputPower=jnxoptIfOChGroupSinkIntervalLowAggregatedInputPower, jnxoptIfODUkTDAPIExpected=jnxoptIfODUkTDAPIExpected, jnxoptIfOChSinkCurrentTable=jnxoptIfOChSinkCurrentTable, jnxoptIfOChGroupSrcIntervalLastAggregatedInputPower=jnxoptIfOChGroupSrcIntervalLastAggregatedInputPower, jnxoptIfOChSinkIntervalLowInputPower=jnxoptIfOChSinkIntervalLowInputPower, jnxoptIfOTSnSrcPrevDayHighOutputPower=jnxoptIfOTSnSrcPrevDayHighOutputPower, jnxoptIfOTSnSrcPrevDayLowInputPower=jnxoptIfOTSnSrcPrevDayLowInputPower, jnxoptIfOChGroupSinkIntervalLowOutputPower=jnxoptIfOChGroupSinkIntervalLowOutputPower, jnxoptIfOChSinkIntervalHighInputPower=jnxoptIfOChSinkIntervalHighInputPower, jnxoptIfOTSnSrcIntervalEntry=jnxoptIfOTSnSrcIntervalEntry, jnxoptIfOTSnSinkPrevDayLowOutputPower=jnxoptIfOTSnSinkPrevDayLowOutputPower, jnxoptIfOTSnSrcCurrentUpperOutputPowerThreshold=jnxoptIfOTSnSrcCurrentUpperOutputPowerThreshold, jnxoptIfOChGroupSrcCurDaySuspectedFlag=jnxoptIfOChGroupSrcCurDaySuspectedFlag, jnxoptIfOChGroupSrcCurDayLowOutputPower=jnxoptIfOChGroupSrcCurDayLowOutputPower, jnxoptIfOMSnSinkCurrentSuspectedFlag=jnxoptIfOMSnSinkCurrentSuspectedFlag, jnxoptIfOChCommonGroup=jnxoptIfOChCommonGroup, jnxoptIfOMSnSinkCurrentLowerOutputPowerThreshold=jnxoptIfOMSnSinkCurrentLowerOutputPowerThreshold, jnxoptIfOTSnSinkCurrentEntry=jnxoptIfOTSnSinkCurrentEntry, jnxoptIfOTUk=jnxoptIfOTUk, jnxoptIfOMSnSinkIntervalHighAggregatedInputPower=jnxoptIfOMSnSinkIntervalHighAggregatedInputPower, jnxoptIfODUkTNimConfigEntry=jnxoptIfODUkTNimConfigEntry, jnxoptIfOChGroupSrcIntervalTable=jnxoptIfOChGroupSrcIntervalTable, jnxoptIfODUkTTcmField=jnxoptIfODUkTTcmField, jnxoptIfODUkTtpTraceIdentifierAccepted=jnxoptIfODUkTtpTraceIdentifierAccepted, jnxoptIfOMSnSrcCurDayHighOutputPower=jnxoptIfOMSnSrcCurDayHighOutputPower, jnxoptIfOChGroupSrcIntervalLowOutputPower=jnxoptIfOChGroupSrcIntervalLowOutputPower, jnxoptIfPerfMonCurrentTimeElapsed=jnxoptIfPerfMonCurrentTimeElapsed, jnxoptIfConfs=jnxoptIfConfs, jnxoptIfOChGroupSinkPrevDayEntry=jnxoptIfOChGroupSinkPrevDayEntry, jnxoptIfODUkTTIMDetMode=jnxoptIfODUkTTIMDetMode, jnxoptIfOChGroupSrcPrevDayTable=jnxoptIfOChGroupSrcPrevDayTable, jnxoptIfOTSnAprStatus=jnxoptIfOTSnAprStatus, jnxoptIfOChSinkCurDayHighInputPower=jnxoptIfOChSinkCurDayHighInputPower, jnxoptIfOChGroupSinkIntervalTable=jnxoptIfOChGroupSinkIntervalTable, jnxoptIfOTSnSinkPreOtnPMGroup=jnxoptIfOTSnSinkPreOtnPMGroup, JnxoptIfIntervalNumber=JnxoptIfIntervalNumber, jnxoptIfOChGroupSinkCurDayHighOutputPower=jnxoptIfOChGroupSinkCurDayHighOutputPower, jnxoptIfOMSnSrcIntervalLastOutputPower=jnxoptIfOMSnSrcIntervalLastOutputPower, jnxoptIfOTSnDirectionality=jnxoptIfOTSnDirectionality, jnxoptIfOMSnSourcePreOtnPMGroup=jnxoptIfOMSnSourcePreOtnPMGroup, jnxoptIfODUkTSinkGroupCtp=jnxoptIfODUkTSinkGroupCtp, jnxoptIfOChSinkPreOtnPMGroup=jnxoptIfOChSinkPreOtnPMGroup, jnxoptIfPerfMonCurDayTimeElapsed=jnxoptIfPerfMonCurDayTimeElapsed, jnxoptIfOChGroupSrcCurDayEntry=jnxoptIfOChGroupSrcCurDayEntry, jnxoptIfODUkTNimTraceIdentifierAccepted=jnxoptIfODUkTNimTraceIdentifierAccepted, jnxoptIfOChSrcCurrentOutputPower=jnxoptIfOChSrcCurrentOutputPower, jnxoptIfOTSnSinkIntervalLastInputPower=jnxoptIfOTSnSinkIntervalLastInputPower, jnxoptIfOMSnSrcCurrentTable=jnxoptIfOMSnSrcCurrentTable, jnxoptIfOTMnReduced=jnxoptIfOTMnReduced, jnxoptIfOChGroupSrcCurrentTable=jnxoptIfOChGroupSrcCurrentTable, jnxoptIfOChSinkGroupBasic=jnxoptIfOChSinkGroupBasic, jnxoptIfOTSnSinkCurrentUpperInputPowerThreshold=jnxoptIfOTSnSinkCurrentUpperInputPowerThreshold, jnxoptIfOMSnSrcPrevDayLastAggregatedInputPower=jnxoptIfOMSnSrcPrevDayLastAggregatedInputPower, jnxoptIfOMSnSrcCurrentUpperInputPowerThreshold=jnxoptIfOMSnSrcCurrentUpperInputPowerThreshold, jnxoptIfOChGroupSinkCurDayHighAggregatedInputPower=jnxoptIfOChGroupSinkCurDayHighAggregatedInputPower, jnxoptIfOTUkSAPIExpected=jnxoptIfOTUkSAPIExpected, jnxoptIfODUkTNimTcmField=jnxoptIfODUkTNimTcmField, jnxoptIfOMSnSrcPrevDaySuspectedFlag=jnxoptIfOMSnSrcPrevDaySuspectedFlag, jnxoptIfOMSnSrcCurDayLowOutputPower=jnxoptIfOMSnSrcCurDayLowOutputPower, jnxoptIfODUkTtpTraceIdentifierTransmitted=jnxoptIfODUkTtpTraceIdentifierTransmitted, jnxoptIfOMSnConfigTable=jnxoptIfOMSnConfigTable, jnxoptIfODUkTNimCurrentStatus=jnxoptIfODUkTNimCurrentStatus, jnxoptIfOChSinkCurDayTable=jnxoptIfOChSinkCurDayTable, jnxoptIfOChSinkPrevDaySuspectedFlag=jnxoptIfOChSinkPrevDaySuspectedFlag, jnxoptIfOTSnSrcPrevDayLastOutputPower=jnxoptIfOTSnSrcPrevDayLastOutputPower, jnxoptIfOChCurrentStatus=jnxoptIfOChCurrentStatus, jnxoptIfOMSnSrcPrevDayLowOutputPower=jnxoptIfOMSnSrcPrevDayLowOutputPower, jnxoptIfOTSnSrcCurrentOutputPower=jnxoptIfOTSnSrcCurrentOutputPower, jnxoptIfOChGroupSrcCurrentOutputPower=jnxoptIfOChGroupSrcCurrentOutputPower, jnxoptIfOChSinkPrevDayTable=jnxoptIfOChSinkPrevDayTable, jnxoptIfODUkTCodirectional=jnxoptIfODUkTCodirectional, jnxoptIfOChSinkIntervalEntry=jnxoptIfOChSinkIntervalEntry, jnxoptIfOTSnSrcCurDayLowInputPower=jnxoptIfOTSnSrcCurDayLowInputPower, jnxoptIfOChGroupSinkCurDayLowAggregatedInputPower=jnxoptIfOChGroupSinkCurDayLowAggregatedInputPower, jnxoptIfOMSnSinkCurDayLowOutputPower=jnxoptIfOMSnSinkCurDayLowOutputPower, jnxoptIfOChSrcCurDayTable=jnxoptIfOChSrcCurDayTable, jnxoptIfGCC12GCCAccess=jnxoptIfGCC12GCCAccess, jnxoptIfOChSrcPrevDayEntry=jnxoptIfOChSrcPrevDayEntry, jnxoptIfOChGroupSrcCurrentLowerInputPowerThreshold=jnxoptIfOChGroupSrcCurrentLowerInputPowerThreshold, jnxoptIfODUkBitRateK=jnxoptIfODUkBitRateK, jnxoptIfOTSnSinkCurrentLowOutputPower=jnxoptIfOTSnSinkCurrentLowOutputPower, jnxoptIfOTSnCommonGroup=jnxoptIfOTSnCommonGroup, jnxoptIfODUkTCurrentStatus=jnxoptIfODUkTCurrentStatus, jnxoptIfOChSrcIntervalLastOutputPower=jnxoptIfOChSrcIntervalLastOutputPower, jnxoptIfOChSinkPreOtnPMThresholdGroup=jnxoptIfOChSinkPreOtnPMThresholdGroup, jnxoptIfOMSn=jnxoptIfOMSn, jnxoptIfOChGroupSinkCurDayEntry=jnxoptIfOChGroupSinkCurDayEntry, jnxoptIfOTSnSinkCurDayLowInputPower=jnxoptIfOTSnSinkCurDayLowInputPower, jnxoptIfOTUkTraceIdentifierAccepted=jnxoptIfOTUkTraceIdentifierAccepted, jnxoptIfODUkTtpTIMActEnabled=jnxoptIfODUkTtpTIMActEnabled, jnxoptIfOMSnSinkGroupBasic=jnxoptIfOMSnSinkGroupBasic, jnxoptIfOChGroupSinkPreOtnPMThresholdGroup=jnxoptIfOChGroupSinkPreOtnPMThresholdGroup, jnxoptIfODUkTNimGroup=jnxoptIfODUkTNimGroup, jnxoptIfODUkTDEGM=jnxoptIfODUkTDEGM, jnxoptIfOChGroupSinkPrevDayHighAggregatedInputPower=jnxoptIfOChGroupSinkPrevDayHighAggregatedInputPower, jnxoptIfOTSn=jnxoptIfOTSn, PYSNMP_MODULE_ID=jnxoptIfMibModule, jnxoptIfOTSnSinkIntervalEntry=jnxoptIfOTSnSinkIntervalEntry, jnxoptIfMibModule=jnxoptIfMibModule, jnxoptIfOMSnSinkCurrentEntry=jnxoptIfOMSnSinkCurrentEntry, jnxoptIfOMSnSrcPrevDayEntry=jnxoptIfOMSnSrcPrevDayEntry, jnxoptIfOTSnSinkPrevDayLowInputPower=jnxoptIfOTSnSinkPrevDayLowInputPower, jnxoptIfOChGroupSrcIntervalLowAggregatedInputPower=jnxoptIfOChGroupSrcIntervalLowAggregatedInputPower, jnxoptIfOChSourcePreOtnPMGroup=jnxoptIfOChSourcePreOtnPMGroup, jnxoptIfOTUkCurrentStatus=jnxoptIfOTUkCurrentStatus, jnxoptIfOChGroupConfigEntry=jnxoptIfOChGroupConfigEntry, jnxoptIfOChGroupSinkIntervalLastAggregatedInputPower=jnxoptIfOChGroupSinkIntervalLastAggregatedInputPower, jnxoptIfODUkNimGroup=jnxoptIfODUkNimGroup, JnxoptIfTxTI=JnxoptIfTxTI, jnxoptIfOChGroupSrcPrevDayHighAggregatedInputPower=jnxoptIfOChGroupSrcPrevDayHighAggregatedInputPower, jnxoptIfOMSnSinkCurDayHighOutputPower=jnxoptIfOMSnSinkCurDayHighOutputPower, jnxoptIfOChSrcPrevDayHighOutputPower=jnxoptIfOChSrcPrevDayHighOutputPower, jnxoptIfODUkTNimSAPIExpected=jnxoptIfODUkTNimSAPIExpected, jnxoptIfOMSnSinkCurDayEntry=jnxoptIfOMSnSinkCurDayEntry, jnxoptIfGCC12ConfigEntry=jnxoptIfGCC12ConfigEntry, jnxoptIfOTSnSinkIntervalHighInputPower=jnxoptIfOTSnSinkIntervalHighInputPower, jnxoptIfOMSnSrcPrevDayHighAggregatedInputPower=jnxoptIfOMSnSrcPrevDayHighAggregatedInputPower, jnxoptIfOMSnSinkIntervalSuspectedFlag=jnxoptIfOMSnSinkIntervalSuspectedFlag, jnxoptIfOTSnSrcIntervalNumber=jnxoptIfOTSnSrcIntervalNumber, jnxoptIfOTSnSrcIntervalHighOutputPower=jnxoptIfOTSnSrcIntervalHighOutputPower, jnxoptIfODUkTNimConfigTable=jnxoptIfODUkTNimConfigTable, jnxoptIfOTSnSrcIntervalTable=jnxoptIfOTSnSrcIntervalTable, jnxoptIfOTSnSinkPrevDayHighInputPower=jnxoptIfOTSnSinkPrevDayHighInputPower, jnxoptIfOChGroupDirectionality=jnxoptIfOChGroupDirectionality, jnxoptIfOTMnBitRates=jnxoptIfOTMnBitRates, jnxoptIfOTSnConfigEntry=jnxoptIfOTSnConfigEntry, jnxoptIfOChGroupSinkCurrentTable=jnxoptIfOChGroupSinkCurrentTable, jnxoptIfOChSinkIntervalSuspectedFlag=jnxoptIfOChSinkIntervalSuspectedFlag, jnxoptIfOMSnSinkCurrentTable=jnxoptIfOMSnSinkCurrentTable, jnxoptIfOMSnSrcIntervalEntry=jnxoptIfOMSnSrcIntervalEntry, jnxoptIfOMSnSinkCurrentUpperOutputPowerThreshold=jnxoptIfOMSnSinkCurrentUpperOutputPowerThreshold, jnxoptIfOTSnCurrentStatus=jnxoptIfOTSnCurrentStatus, jnxoptIfOMSnSinkCurDayLowAggregatedInputPower=jnxoptIfOMSnSinkCurDayLowAggregatedInputPower, jnxoptIfOChGroupSinkIntervalSuspectedFlag=jnxoptIfOChGroupSinkIntervalSuspectedFlag, jnxoptIfOMSnCommonGroup=jnxoptIfOMSnCommonGroup, jnxoptIfOMSnSrcIntervalLastAggregatedInputPower=jnxoptIfOMSnSrcIntervalLastAggregatedInputPower, jnxoptIfOMSnSinkIntervalEntry=jnxoptIfOMSnSinkIntervalEntry, jnxoptIfOChGroupSinkCurrentUpperOutputPowerThreshold=jnxoptIfOChGroupSinkCurrentUpperOutputPowerThreshold, jnxoptIfOChGroupSinkCurrentOutputPower=jnxoptIfOChGroupSinkCurrentOutputPower)
