#
# PySNMP MIB module JUNIPER-VIRTUALCHASSIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-VIRTUALCHASSIS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:50:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
jnxExVirtualChassis, = mibBuilder.importSymbols("JUNIPER-EX-SMI", "jnxExVirtualChassis")
JnxChassisId, = mibBuilder.importSymbols("JUNIPER-MIB", "JnxChassisId")
jnxVccpNotifications, = mibBuilder.importSymbols("JUNIPER-SMI", "jnxVccpNotifications")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, MibIdentifier, Counter32, NotificationType, Integer32, IpAddress, Unsigned32, Bits, Gauge32, ModuleIdentity, iso, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "MibIdentifier", "Counter32", "NotificationType", "Integer32", "IpAddress", "Unsigned32", "Bits", "Gauge32", "ModuleIdentity", "iso", "ObjectIdentity")
TextualConvention, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "MacAddress")
jnxVirtualChassisMemberMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1))
jnxVirtualChassisMemberMIB.setRevisions(('2010-07-13 00:00', '2010-10-14 00:00',))
if mibBuilder.loadTexts: jnxVirtualChassisMemberMIB.setLastUpdated('201010140000Z')
if mibBuilder.loadTexts: jnxVirtualChassisMemberMIB.setOrganization('Juniper Networks, Inc.')
jnxVirtualChassisMemberTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 1), )
if mibBuilder.loadTexts: jnxVirtualChassisMemberTable.setStatus('current')
jnxVirtualChassisMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 1, 1), ).setIndexNames((0, "JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisMemberId"))
if mibBuilder.loadTexts: jnxVirtualChassisMemberEntry.setStatus('current')
jnxVirtualChassisMemberId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)))
if mibBuilder.loadTexts: jnxVirtualChassisMemberId.setStatus('current')
jnxVirtualChassisMemberSerialnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisMemberSerialnumber.setStatus('current')
jnxVirtualChassisMemberRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("backup", 2), ("linecard", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisMemberRole.setStatus('current')
jnxVirtualChassisMemberMacAddBase = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisMemberMacAddBase.setStatus('current')
jnxVirtualChassisMemberSWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisMemberSWVersion.setStatus('current')
jnxVirtualChassisMemberPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisMemberPriority.setStatus('current')
jnxVirtualChassisMemberUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisMemberUptime.setStatus('current')
jnxVirtualChassisMemberModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisMemberModel.setStatus('current')
jnxVirtualChassisMemberLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisMemberLocation.setStatus('current')
jnxVirtualChassisPortTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2), )
if mibBuilder.loadTexts: jnxVirtualChassisPortTable.setStatus('current')
jnxVirtualChassisPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1), ).setIndexNames((0, "JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisFpcId"), (0, "JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisPortName"))
if mibBuilder.loadTexts: jnxVirtualChassisPortEntry.setStatus('current')
jnxVirtualChassisFpcId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)))
if mibBuilder.loadTexts: jnxVirtualChassisFpcId.setStatus('current')
jnxVirtualChassisPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127)))
if mibBuilder.loadTexts: jnxVirtualChassisPortName.setStatus('current')
jnxVirtualChassisPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortAdminStatus.setStatus('current')
jnxVirtualChassisPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortOperStatus.setStatus('current')
jnxVirtualChassisPortInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortInPkts.setStatus('current')
jnxVirtualChassisPortOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortOutPkts.setStatus('current')
jnxVirtualChassisPortInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortInOctets.setStatus('current')
jnxVirtualChassisPortOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortOutOctets.setStatus('current')
jnxVirtualChassisPortInMcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortInMcasts.setStatus('current')
jnxVirtualChassisPortOutMcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortOutMcasts.setStatus('current')
jnxVirtualChassisPortInPkts1secRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortInPkts1secRate.setStatus('current')
jnxVirtualChassisPortOutPkts1secRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortOutPkts1secRate.setStatus('current')
jnxVirtualChassisPortInOctets1secRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortInOctets1secRate.setStatus('current')
jnxVirtualChassisPortOutOctets1secRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortOutOctets1secRate.setStatus('current')
jnxVirtualChassisPortCarrierTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortCarrierTrans.setStatus('current')
jnxVirtualChassisPortInCRCAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortInCRCAlignErrors.setStatus('current')
jnxVirtualChassisPortOutCRCAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortOutCRCAlignErrors.setStatus('current')
jnxVirtualChassisPortUndersizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortUndersizePkts.setStatus('current')
jnxVirtualChassisPortCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 4, 1, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxVirtualChassisPortCollisions.setStatus('current')
jnxVccpNotificationsPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 4, 14, 0))
if mibBuilder.loadTexts: jnxVccpNotificationsPrefix.setStatus('current')
jnxVccpPortUp = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 14, 0, 1)).setObjects(("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisPortAdminStatus"), ("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisPortOperStatus"), ("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisMemberModel"), ("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisMemberLocation"))
if mibBuilder.loadTexts: jnxVccpPortUp.setStatus('current')
jnxVccpPortDown = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 14, 0, 2)).setObjects(("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisPortAdminStatus"), ("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisPortOperStatus"), ("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisMemberModel"), ("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisMemberLocation"))
if mibBuilder.loadTexts: jnxVccpPortDown.setStatus('current')
jnxVccpMemberUp = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 14, 0, 3)).setObjects(("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisMemberSerialnumber"), ("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisMemberRole"), ("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisMemberModel"), ("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisMemberLocation"))
if mibBuilder.loadTexts: jnxVccpMemberUp.setStatus('current')
jnxVccpMemberDown = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 14, 0, 4)).setObjects(("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisMemberSerialnumber"), ("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisMemberRole"), ("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisMemberModel"), ("JUNIPER-VIRTUALCHASSIS-MIB", "jnxVirtualChassisMemberLocation"))
if mibBuilder.loadTexts: jnxVccpMemberDown.setStatus('current')
mibBuilder.exportSymbols("JUNIPER-VIRTUALCHASSIS-MIB", jnxVirtualChassisMemberEntry=jnxVirtualChassisMemberEntry, jnxVirtualChassisMemberPriority=jnxVirtualChassisMemberPriority, jnxVirtualChassisPortOperStatus=jnxVirtualChassisPortOperStatus, jnxVccpPortUp=jnxVccpPortUp, jnxVirtualChassisMemberSWVersion=jnxVirtualChassisMemberSWVersion, jnxVirtualChassisPortTable=jnxVirtualChassisPortTable, jnxVirtualChassisPortEntry=jnxVirtualChassisPortEntry, jnxVccpMemberUp=jnxVccpMemberUp, jnxVirtualChassisPortInCRCAlignErrors=jnxVirtualChassisPortInCRCAlignErrors, jnxVirtualChassisPortCarrierTrans=jnxVirtualChassisPortCarrierTrans, jnxVirtualChassisMemberRole=jnxVirtualChassisMemberRole, jnxVirtualChassisPortOutPkts1secRate=jnxVirtualChassisPortOutPkts1secRate, jnxVirtualChassisPortUndersizePkts=jnxVirtualChassisPortUndersizePkts, jnxVirtualChassisPortOutCRCAlignErrors=jnxVirtualChassisPortOutCRCAlignErrors, jnxVirtualChassisMemberId=jnxVirtualChassisMemberId, jnxVirtualChassisPortInMcasts=jnxVirtualChassisPortInMcasts, jnxVccpNotificationsPrefix=jnxVccpNotificationsPrefix, jnxVirtualChassisPortInOctets1secRate=jnxVirtualChassisPortInOctets1secRate, jnxVirtualChassisPortOutPkts=jnxVirtualChassisPortOutPkts, jnxVirtualChassisPortCollisions=jnxVirtualChassisPortCollisions, jnxVccpPortDown=jnxVccpPortDown, jnxVirtualChassisPortOutMcasts=jnxVirtualChassisPortOutMcasts, jnxVirtualChassisMemberUptime=jnxVirtualChassisMemberUptime, jnxVirtualChassisPortInPkts=jnxVirtualChassisPortInPkts, jnxVirtualChassisPortInPkts1secRate=jnxVirtualChassisPortInPkts1secRate, jnxVirtualChassisPortOutOctets1secRate=jnxVirtualChassisPortOutOctets1secRate, jnxVirtualChassisPortInOctets=jnxVirtualChassisPortInOctets, jnxVirtualChassisMemberMacAddBase=jnxVirtualChassisMemberMacAddBase, jnxVirtualChassisFpcId=jnxVirtualChassisFpcId, jnxVirtualChassisMemberSerialnumber=jnxVirtualChassisMemberSerialnumber, jnxVirtualChassisPortAdminStatus=jnxVirtualChassisPortAdminStatus, PYSNMP_MODULE_ID=jnxVirtualChassisMemberMIB, jnxVirtualChassisPortOutOctets=jnxVirtualChassisPortOutOctets, jnxVirtualChassisPortName=jnxVirtualChassisPortName, jnxVirtualChassisMemberMIB=jnxVirtualChassisMemberMIB, jnxVirtualChassisMemberLocation=jnxVirtualChassisMemberLocation, jnxVccpMemberDown=jnxVccpMemberDown, jnxVirtualChassisMemberModel=jnxVirtualChassisMemberModel, jnxVirtualChassisMemberTable=jnxVirtualChassisMemberTable)
