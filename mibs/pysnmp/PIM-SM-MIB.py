#
# PySNMP MIB module PIM-SM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PIM-SM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:31:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
dlink_common_mgmt, = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "dlink-common-mgmt")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Gauge32, TimeTicks, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Counter32, ObjectIdentity, ModuleIdentity, IpAddress, MibIdentifier, NotificationType, Integer32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Gauge32", "TimeTicks", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Counter32", "ObjectIdentity", "ModuleIdentity", "IpAddress", "MibIdentifier", "NotificationType", "Integer32", "Counter64")
TruthValue, RowStatus, MacAddress, DisplayString, TextualConvention, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "MacAddress", "DisplayString", "TextualConvention", "PhysAddress")
swPimSmMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 12, 52))
if mibBuilder.loadTexts: swPimSmMIB.setLastUpdated('0711270000Z')
if mibBuilder.loadTexts: swPimSmMIB.setOrganization('D-Link Corp.')
swPimSmCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 52, 1))
swPimSmInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 52, 2))
swPimSmMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 52, 3))
swPimSmGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 52, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("other", 0), ("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPimSmGlobalState.setStatus('current')
swPimRegisterProbeTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 52, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPimRegisterProbeTime.setStatus('current')
swPimRegisterSuppressionTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 52, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPimRegisterSuppressionTime.setStatus('current')
swPimInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 52, 2, 3), )
if mibBuilder.loadTexts: swPimInfoTable.setStatus('current')
swPimInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 52, 2, 3, 1), ).setIndexNames((0, "PIM-SM-MIB", "swPimInfoInterface"))
if mibBuilder.loadTexts: swPimInfoEntry.setStatus('current')
swPimInfoInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 2, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: swPimInfoInterface.setStatus('current')
swPimInfoAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 2, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPimInfoAddress.setStatus('current')
swPimInfoNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 2, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPimInfoNetMask.setStatus('current')
swPimInfoDesignatedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 2, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPimInfoDesignatedRouter.setStatus('current')
swPimInfoHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 18724)).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPimInfoHelloInterval.setStatus('current')
swPimInfoJoinPruneInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 18724))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPimInfoJoinPruneInterval.setStatus('current')
swPimInfoDRPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 2, 3, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967294))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPimInfoDRPriority.setStatus('current')
swPimInfoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dense", 1), ("sparse", 2), ("sparseDense", 3))).clone('dense')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPimInfoMode.setStatus('current')
swPimInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPimInfoState.setStatus('current')
swPimCbsrInfoMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 1))
swpimCbsrBootStrapPeriod = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swpimCbsrBootStrapPeriod.setStatus('current')
swPimCbsrHashMaskLen = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPimCbsrHashMaskLen.setStatus('current')
swPimCbsrTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 1, 3), )
if mibBuilder.loadTexts: swPimCbsrTable.setStatus('current')
swPimCbsrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 1, 3, 1), ).setIndexNames((0, "PIM-SM-MIB", "swPimCbsrInterface"))
if mibBuilder.loadTexts: swPimCbsrEntry.setStatus('current')
swPimCbsrInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 1, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: swPimCbsrInterface.setStatus('current')
swPimCbsrIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 1, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPimCbsrIpAddress.setStatus('current')
swPimCbsrSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 1, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPimCbsrSubnetMask.setStatus('current')
swPimCbsrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPimCbsrPriority.setStatus('current')
swPimCandidateRPMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 2))
swPimCandidateRPHoldtime = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPimCandidateRPHoldtime.setStatus('current')
swPimCandidateRPPriority = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPimCandidateRPPriority.setStatus('current')
swPimCandidateRPWildcardPrefixCnt = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPimCandidateRPWildcardPrefixCnt.setStatus('current')
swPimCandidateRPTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 2, 4), )
if mibBuilder.loadTexts: swPimCandidateRPTable.setStatus('current')
swPimCandidateRPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 2, 4, 1), ).setIndexNames((0, "PIM-SM-MIB", "swPimCandidateRPGroupAddress"), (0, "PIM-SM-MIB", "swPimCandidateRPGroupMask"))
if mibBuilder.loadTexts: swPimCandidateRPEntry.setStatus('current')
swPimCandidateRPGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 2, 4, 1, 1), IpAddress())
if mibBuilder.loadTexts: swPimCandidateRPGroupAddress.setStatus('current')
swPimCandidateRPGroupMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 2, 4, 1, 2), IpAddress())
if mibBuilder.loadTexts: swPimCandidateRPGroupMask.setStatus('current')
swPimCandidateRPInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 2, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPimCandidateRPInterface.setStatus('current')
swPimCandidateRPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 2, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPimCandidateRPRowStatus.setStatus('current')
swPimNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 3), )
if mibBuilder.loadTexts: swPimNeighborTable.setStatus('current')
swPimNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 3, 1), ).setIndexNames((0, "PIM-SM-MIB", "swPimNeighborAddress"))
if mibBuilder.loadTexts: swPimNeighborEntry.setStatus('current')
swPimNeighborAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: swPimNeighborAddress.setStatus('current')
swPimNeighborIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 3, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPimNeighborIfIndex.setStatus('current')
swPimNeighborExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 3, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPimNeighborExpiryTime.setStatus('current')
swPimSptMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 4))
swPimLastHopSptSwitchover = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("never", 1), ("immediately", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPimLastHopSptSwitchover.setStatus('current')
swPimRegChksumIncDataTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 5), )
if mibBuilder.loadTexts: swPimRegChksumIncDataTable.setStatus('current')
swPimRegChksumIncDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 5, 1), ).setIndexNames((0, "PIM-SM-MIB", "swL3SwPimRegChksumIncDataRpAddr"))
if mibBuilder.loadTexts: swPimRegChksumIncDataEntry.setStatus('current')
swL3SwPimRegChksumIncDataRpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 5, 1, 1), IpAddress())
if mibBuilder.loadTexts: swL3SwPimRegChksumIncDataRpAddr.setStatus('current')
swL3SwPimRegChksumIncDataState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL3SwPimRegChksumIncDataState.setStatus('current')
swPimStaticRPTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 6), )
if mibBuilder.loadTexts: swPimStaticRPTable.setStatus('current')
swPimStaticRPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 6, 1), ).setIndexNames((0, "PIM-SM-MIB", "swPimStaticRPGroupAddress"), (0, "PIM-SM-MIB", "swPimStaticRPGroupMask"), (0, "PIM-SM-MIB", "swPimStaticRPAddress"))
if mibBuilder.loadTexts: swPimStaticRPEntry.setStatus('current')
swPimStaticRPGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: swPimStaticRPGroupAddress.setStatus('current')
swPimStaticRPGroupMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 6, 1, 2), IpAddress())
if mibBuilder.loadTexts: swPimStaticRPGroupMask.setStatus('current')
swPimStaticRPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 6, 1, 3), IpAddress())
if mibBuilder.loadTexts: swPimStaticRPAddress.setStatus('current')
swPimStaticRPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 6, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPimStaticRPRowStatus.setStatus('current')
swPimIpMRouteTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 7), )
if mibBuilder.loadTexts: swPimIpMRouteTable.setStatus('current')
swPimIpMRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 7, 1), ).setIndexNames((0, "PIM-SM-MIB", "swPimIpMRouteGroup"), (0, "PIM-SM-MIB", "swPimIpMRouteSource"), (0, "PIM-SM-MIB", "swPimIpMRouteSourceMask"))
if mibBuilder.loadTexts: swPimIpMRouteEntry.setStatus('current')
swPimIpMRouteGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 7, 1, 1), IpAddress())
if mibBuilder.loadTexts: swPimIpMRouteGroup.setStatus('current')
swPimIpMRouteSource = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 7, 1, 2), IpAddress())
if mibBuilder.loadTexts: swPimIpMRouteSource.setStatus('current')
swPimIpMRouteSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 7, 1, 3), IpAddress())
if mibBuilder.loadTexts: swPimIpMRouteSourceMask.setStatus('current')
swPimIpMRouteUpstreamAssertTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 7, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPimIpMRouteUpstreamAssertTimer.setStatus('current')
swPimIpMRouteAssertMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPimIpMRouteAssertMetric.setStatus('current')
swPimIpMRouteAssertMetricPref = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPimIpMRouteAssertMetricPref.setStatus('current')
swPimIpMRouteAssertRPTBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 7, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPimIpMRouteAssertRPTBit.setStatus('current')
swPimIpMRouteFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 7, 1, 8), Bits().clone(namedValues=NamedValues(("rpt", 0), ("spt", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPimIpMRouteFlags.setStatus('current')
swPimIpMRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 7, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPimIpMRouteType.setStatus('current')
swPimRPSetMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 8))
swPimRPSetBootstrapRouter = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 8, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPimRPSetBootstrapRouter.setStatus('current')
swPimRPSetTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 8, 2), )
if mibBuilder.loadTexts: swPimRPSetTable.setStatus('current')
swPimRPSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 8, 2, 1), ).setIndexNames((0, "PIM-SM-MIB", "swPimRPSetComponent"), (0, "PIM-SM-MIB", "swPimRPSetGroupAddress"), (0, "PIM-SM-MIB", "swPimRPSetGroupMask"), (0, "PIM-SM-MIB", "swPimRPSetAddress"))
if mibBuilder.loadTexts: swPimRPSetEntry.setStatus('current')
swPimRPSetComponent = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: swPimRPSetComponent.setStatus('current')
swPimRPSetGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 8, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: swPimRPSetGroupAddress.setStatus('current')
swPimRPSetGroupMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 8, 2, 1, 3), IpAddress())
if mibBuilder.loadTexts: swPimRPSetGroupMask.setStatus('current')
swPimRPSetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 8, 2, 1, 4), IpAddress())
if mibBuilder.loadTexts: swPimRPSetAddress.setStatus('current')
swPimRPSetType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 52, 3, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("static", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPimRPSetType.setStatus('current')
mibBuilder.exportSymbols("PIM-SM-MIB", swPimSmGlobalState=swPimSmGlobalState, swPimCbsrEntry=swPimCbsrEntry, swPimInfoEntry=swPimInfoEntry, swPimCandidateRPTable=swPimCandidateRPTable, swPimStaticRPEntry=swPimStaticRPEntry, swPimIpMRouteSource=swPimIpMRouteSource, swPimCbsrInterface=swPimCbsrInterface, swPimInfoState=swPimInfoState, swPimIpMRouteFlags=swPimIpMRouteFlags, swPimIpMRouteAssertMetricPref=swPimIpMRouteAssertMetricPref, swPimRPSetAddress=swPimRPSetAddress, swPimIpMRouteGroup=swPimIpMRouteGroup, swPimIpMRouteSourceMask=swPimIpMRouteSourceMask, swPimRPSetComponent=swPimRPSetComponent, swPimRegisterProbeTime=swPimRegisterProbeTime, swPimStaticRPRowStatus=swPimStaticRPRowStatus, swPimIpMRouteTable=swPimIpMRouteTable, swPimRPSetGroupAddress=swPimRPSetGroupAddress, swPimInfoDesignatedRouter=swPimInfoDesignatedRouter, swPimInfoJoinPruneInterval=swPimInfoJoinPruneInterval, swpimCbsrBootStrapPeriod=swpimCbsrBootStrapPeriod, swPimIpMRouteAssertRPTBit=swPimIpMRouteAssertRPTBit, swPimRegisterSuppressionTime=swPimRegisterSuppressionTime, swPimInfoDRPriority=swPimInfoDRPriority, swPimCbsrInfoMgmt=swPimCbsrInfoMgmt, swPimStaticRPGroupMask=swPimStaticRPGroupMask, swPimRegChksumIncDataTable=swPimRegChksumIncDataTable, swPimIpMRouteType=swPimIpMRouteType, PYSNMP_MODULE_ID=swPimSmMIB, swPimSmCtrl=swPimSmCtrl, swPimSptMgmt=swPimSptMgmt, swPimSmMIB=swPimSmMIB, swPimCandidateRPInterface=swPimCandidateRPInterface, swPimNeighborTable=swPimNeighborTable, swPimCbsrIpAddress=swPimCbsrIpAddress, swPimRegChksumIncDataEntry=swPimRegChksumIncDataEntry, swPimIpMRouteAssertMetric=swPimIpMRouteAssertMetric, swPimCandidateRPPriority=swPimCandidateRPPriority, swPimCandidateRPGroupAddress=swPimCandidateRPGroupAddress, swPimRPSetEntry=swPimRPSetEntry, swPimNeighborAddress=swPimNeighborAddress, swL3SwPimRegChksumIncDataRpAddr=swL3SwPimRegChksumIncDataRpAddr, swPimInfoAddress=swPimInfoAddress, swPimStaticRPTable=swPimStaticRPTable, swPimIpMRouteUpstreamAssertTimer=swPimIpMRouteUpstreamAssertTimer, swPimLastHopSptSwitchover=swPimLastHopSptSwitchover, swPimIpMRouteEntry=swPimIpMRouteEntry, swPimSmMgmt=swPimSmMgmt, swPimRPSetTable=swPimRPSetTable, swPimCandidateRPWildcardPrefixCnt=swPimCandidateRPWildcardPrefixCnt, swPimInfoMode=swPimInfoMode, swPimCandidateRPHoldtime=swPimCandidateRPHoldtime, swPimCandidateRPRowStatus=swPimCandidateRPRowStatus, swPimNeighborEntry=swPimNeighborEntry, swPimInfoInterface=swPimInfoInterface, swPimCbsrTable=swPimCbsrTable, swPimCandidateRPEntry=swPimCandidateRPEntry, swPimCandidateRPGroupMask=swPimCandidateRPGroupMask, swPimStaticRPAddress=swPimStaticRPAddress, swPimCbsrSubnetMask=swPimCbsrSubnetMask, swPimInfoTable=swPimInfoTable, swPimCandidateRPMgmt=swPimCandidateRPMgmt, swPimNeighborExpiryTime=swPimNeighborExpiryTime, swPimRPSetType=swPimRPSetType, swPimRPSetGroupMask=swPimRPSetGroupMask, swPimNeighborIfIndex=swPimNeighborIfIndex, swPimRPSetMgmt=swPimRPSetMgmt, swPimRPSetBootstrapRouter=swPimRPSetBootstrapRouter, swPimInfoNetMask=swPimInfoNetMask, swL3SwPimRegChksumIncDataState=swL3SwPimRegChksumIncDataState, swPimStaticRPGroupAddress=swPimStaticRPGroupAddress, swPimCbsrPriority=swPimCbsrPriority, swPimInfoHelloInterval=swPimInfoHelloInterval, swPimCbsrHashMaskLen=swPimCbsrHashMaskLen, swPimSmInfo=swPimSmInfo)
