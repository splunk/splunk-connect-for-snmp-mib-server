#
# PySNMP MIB module SML-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SML-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:59:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, NotificationType, IpAddress, Gauge32, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, iso, Unsigned32, Counter64, Bits, Integer32, Counter32, ObjectIdentity, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "NotificationType", "IpAddress", "Gauge32", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "iso", "Unsigned32", "Counter64", "Bits", "Integer32", "Counter32", "ObjectIdentity", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class UShortReal(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class CimDateTime(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(24, 24)
    fixedLength = 24

class UINT64(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class UINT32(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class UINT16(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2))
ibmProd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6))
ibm3584 = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 182))
smlRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 182, 3))
smlMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smlMibVersion.setStatus('mandatory')
smlCimVersion = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smlCimVersion.setStatus('mandatory')
productGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 3))
product_Name = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("product-Name").setMaxAccess("readonly")
if mibBuilder.loadTexts: product_Name.setStatus('mandatory')
product_IdentifyingNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("product-IdentifyingNumber").setMaxAccess("readonly")
if mibBuilder.loadTexts: product_IdentifyingNumber.setStatus('mandatory')
product_Vendor = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("product-Vendor").setMaxAccess("readonly")
if mibBuilder.loadTexts: product_Vendor.setStatus('mandatory')
product_Version = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("product-Version").setMaxAccess("readonly")
if mibBuilder.loadTexts: product_Version.setStatus('mandatory')
chassisGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 4))
chassis_Manufacturer = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("chassis-Manufacturer").setMaxAccess("readonly")
if mibBuilder.loadTexts: chassis_Manufacturer.setStatus('mandatory')
chassis_Model = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setLabel("chassis-Model").setMaxAccess("readonly")
if mibBuilder.loadTexts: chassis_Model.setStatus('mandatory')
chassis_SerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setLabel("chassis-SerialNumber").setMaxAccess("readonly")
if mibBuilder.loadTexts: chassis_SerialNumber.setStatus('mandatory')
chassis_LockPresent = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("true", 1), ("false", 2)))).setLabel("chassis-LockPresent").setMaxAccess("readonly")
if mibBuilder.loadTexts: chassis_LockPresent.setStatus('mandatory')
chassis_SecurityBreach = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("other", 1), ("noBreach", 2), ("breachAttempted", 3)))).setLabel("chassis-SecurityBreach").setMaxAccess("readonly")
if mibBuilder.loadTexts: chassis_SecurityBreach.setStatus('mandatory')
chassis_IsLocked = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("true", 1), ("false", 2)))).setLabel("chassis-IsLocked").setMaxAccess("readonly")
if mibBuilder.loadTexts: chassis_IsLocked.setStatus('mandatory')
storageLibraryGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 5))
storageLibrary_Name = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("storageLibrary-Name").setMaxAccess("readonly")
if mibBuilder.loadTexts: storageLibrary_Name.setStatus('mandatory')
storageLibrary_Description = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("storageLibrary-Description").setMaxAccess("readonly")
if mibBuilder.loadTexts: storageLibrary_Description.setStatus('mandatory')
storageLibrary_Caption = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setLabel("storageLibrary-Caption").setMaxAccess("readonly")
if mibBuilder.loadTexts: storageLibrary_Caption.setStatus('mandatory')
storageLibrary_Status = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 5, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setLabel("storageLibrary-Status").setMaxAccess("readonly")
if mibBuilder.loadTexts: storageLibrary_Status.setStatus('mandatory')
storageLibrary_InstallDate = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 5, 5), CimDateTime()).setLabel("storageLibrary-InstallDate").setMaxAccess("readonly")
if mibBuilder.loadTexts: storageLibrary_InstallDate.setStatus('mandatory')
mediaAccessDeviceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 6))
numberOfMediaAccessDevices = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfMediaAccessDevices.setStatus('mandatory')
mediaAccessDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 6, 2), )
if mibBuilder.loadTexts: mediaAccessDeviceTable.setStatus('mandatory')
mediaAccessDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 6, 2, 1), ).setIndexNames((0, "SML-MIB", "mediaAccessDeviceIndex"))
if mibBuilder.loadTexts: mediaAccessDeviceEntry.setStatus('mandatory')
mediaAccessDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 6, 2, 1, 1), UINT32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaAccessDeviceIndex.setStatus('mandatory')
mediaAccessDeviceObjectType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("wormDrive", 1), ("magnetoOpticalDrive", 2), ("tapeDrive", 3), ("dvdDrive", 4), ("cdromDrive", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaAccessDeviceObjectType.setStatus('mandatory')
mediaAccessDevice_Name = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 6, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("mediaAccessDevice-Name").setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaAccessDevice_Name.setStatus('mandatory')
mediaAccessDevice_Status = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 6, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setLabel("mediaAccessDevice-Status").setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaAccessDevice_Status.setStatus('mandatory')
mediaAccessDevice_Availability = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("unknown", 0), ("other", 1), ("runningFullPower", 2), ("warning", 3), ("inTest", 4), ("notApplicable", 5), ("powerOff", 6), ("offLine", 7), ("offDuty", 8), ("degraded", 9), ("notInstalled", 10), ("installError", 11), ("powerSaveUnknown", 12), ("powerSaveLowPowerMode", 13), ("powerSaveStandby", 14), ("powerCycle", 15), ("powerSaveWarning", 16), ("paused", 17), ("notReady", 18)))).setLabel("mediaAccessDevice-Availability").setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaAccessDevice_Availability.setStatus('mandatory')
mediaAccessDevice_NeedsCleaning = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("true", 1), ("false", 2)))).setLabel("mediaAccessDevice-NeedsCleaning").setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaAccessDevice_NeedsCleaning.setStatus('mandatory')
physicalMediaGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 7))
numberOfPhysicalMedias = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfPhysicalMedias.setStatus('mandatory')
physicalMediaTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 7, 2), )
if mibBuilder.loadTexts: physicalMediaTable.setStatus('mandatory')
physicalMediaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 7, 2, 1), ).setIndexNames((0, "SML-MIB", "physicalMediaIndex"))
if mibBuilder.loadTexts: physicalMediaEntry.setStatus('mandatory')
physicalMediaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 7, 2, 1, 1), UINT32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMediaIndex.setStatus('mandatory')
physicalMediaObjectType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tape", 0), ("other", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMediaObjectType.setStatus('mandatory')
physicalMedia_Removable = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("true", 1), ("false", 2)))).setLabel("physicalMedia-Removable").setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMedia_Removable.setStatus('mandatory')
physicalMedia_Replaceable = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("true", 1), ("false", 2)))).setLabel("physicalMedia-Replaceable").setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMedia_Replaceable.setStatus('mandatory')
physicalMedia_HotSwappable = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("true", 1), ("false", 2)))).setLabel("physicalMedia-HotSwappable").setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMedia_HotSwappable.setStatus('mandatory')
physicalMedia_Capacity = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 7, 2, 1, 6), UINT64()).setLabel("physicalMedia-Capacity").setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMedia_Capacity.setStatus('mandatory')
physicalMedia_MediaType = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59))).clone(namedValues=NamedValues(("unknown", 0), ("other", 1), ("tape", 2), ("qic", 3), ("ait", 4), ("dtf", 5), ("dat", 6), ("eightmmTape", 7), ("nineteenmmTape", 8), ("dlt", 9), ("halfInchMO", 10), ("catridgeDisk", 11), ("jazDisk", 12), ("zipDisk", 13), ("syQuestDisk", 14), ("winchesterDisk", 15), ("cdRom", 16), ("cdRomXA", 17), ("cdI", 18), ("cdRecordable", 19), ("dvd", 20), ("dvdRWPlus", 21), ("dvdRAM", 22), ("dvdROM", 23), ("dvdVideo", 24), ("divx", 25), ("cdRW", 26), ("cdDA", 27), ("cdPlus", 28), ("dvdRecordable", 29), ("dvdRW", 30), ("dvdAudio", 31), ("dvd5", 32), ("dvd9", 33), ("dvd10", 34), ("dvd18", 35), ("moRewriteable", 36), ("moWriteOnce", 37), ("moLIMDOW", 38), ("phaseChangeWO", 39), ("phaseChangeRewriteable", 40), ("phaseChangeDualRewriteable", 41), ("ablativeWriteOnce", 42), ("nearField", 43), ("miniQic", 44), ("travan", 45), ("eightmmMetal", 46), ("eightmmAdvanced", 47), ("nctp", 48), ("ltoUltrium", 49), ("ltoAccelis", 50), ("tape9Track", 51), ("tape18Track", 52), ("tape36Track", 53), ("magstar3590", 54), ("magstarMP", 55), ("d2Tape", 56), ("dstSmall", 57), ("dstMedium", 58), ("dstLarge", 59)))).setLabel("physicalMedia-MediaType").setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMedia_MediaType.setStatus('mandatory')
physicalMedia_MediaDescription = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 7, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("physicalMedia-MediaDescription").setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMedia_MediaDescription.setStatus('mandatory')
physicalMedia_CleanerMedia = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("true", 1), ("false", 2)))).setLabel("physicalMedia-CleanerMedia").setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMedia_CleanerMedia.setStatus('mandatory')
physicalMedia_DualSided = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("true", 1), ("false", 2)))).setLabel("physicalMedia-DualSided").setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMedia_DualSided.setStatus('mandatory')
physicalMedia_PhysicalLabel = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 7, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("physicalMedia-PhysicalLabel").setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalMedia_PhysicalLabel.setStatus('mandatory')
physicalPackageGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 8))
numberOfPhysicalPackages = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfPhysicalPackages.setStatus('mandatory')
physicalPackageTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 8, 2), )
if mibBuilder.loadTexts: physicalPackageTable.setStatus('mandatory')
physicalPackageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 8, 2, 1), ).setIndexNames((0, "SML-MIB", "physicalPackageIndex"))
if mibBuilder.loadTexts: physicalPackageEntry.setStatus('mandatory')
physicalPackageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 8, 2, 1, 1), UINT32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPackageIndex.setStatus('mandatory')
physicalPackage_Manufacturer = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 8, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("physicalPackage-Manufacturer").setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPackage_Manufacturer.setStatus('mandatory')
physicalPackage_Model = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 8, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setLabel("physicalPackage-Model").setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPackage_Model.setStatus('mandatory')
physicalPackage_SerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 8, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setLabel("physicalPackage-SerialNumber").setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPackage_SerialNumber.setStatus('mandatory')
physicalPackage_Realizes_MediaAccessDeviceIndex = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 8, 2, 1, 5), Integer32()).setLabel("physicalPackage-Realizes-MediaAccessDeviceIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPackage_Realizes_MediaAccessDeviceIndex.setStatus('mandatory')
softwareElementGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 9))
numberOfSoftwareElements = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfSoftwareElements.setStatus('mandatory')
softwareElementTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 9, 2), )
if mibBuilder.loadTexts: softwareElementTable.setStatus('mandatory')
softwareElementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 9, 2, 1), ).setIndexNames((0, "SML-MIB", "softwareElementIndex"))
if mibBuilder.loadTexts: softwareElementEntry.setStatus('mandatory')
softwareElementIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 9, 2, 1, 1), UINT32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareElementIndex.setStatus('mandatory')
softwareElement_Name = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 9, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("softwareElement-Name").setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareElement_Name.setStatus('mandatory')
softwareElement_Version = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 9, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("softwareElement-Version").setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareElement_Version.setStatus('mandatory')
softwareElement_SoftwareElementID = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 9, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("softwareElement-SoftwareElementID").setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareElement_SoftwareElementID.setStatus('mandatory')
softwareElement_Manufacturer = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 9, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setLabel("softwareElement-Manufacturer").setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareElement_Manufacturer.setStatus('mandatory')
softwareElement_BuildNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 9, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setLabel("softwareElement-BuildNumber").setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareElement_BuildNumber.setStatus('mandatory')
softwareElement_SerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 9, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setLabel("softwareElement-SerialNumber").setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareElement_SerialNumber.setStatus('mandatory')
softwareElement_CodeSet = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 9, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setLabel("softwareElement-CodeSet").setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareElement_CodeSet.setStatus('mandatory')
softwareElement_IdentificationCode = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 9, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setLabel("softwareElement-IdentificationCode").setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareElement_IdentificationCode.setStatus('mandatory')
softwareElement_LanguageEdition = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 9, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setLabel("softwareElement-LanguageEdition").setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareElement_LanguageEdition.setStatus('mandatory')
softwareElement_Associations = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 9, 2, 1, 11), ObjectIdentifier()).setLabel("softwareElement-Associations")
if mibBuilder.loadTexts: softwareElement_Associations.setStatus('mandatory')
softwareElement_DeviceSoftware_LogicalDeviceAssociation_ObjectT = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 9, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("mediaAccessDevice", 0), ("storageLibrary", 1), ("other", 2)))).setLabel("softwareElement-DeviceSoftware-LogicalDeviceAssociation-ObjectT").setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareElement_DeviceSoftware_LogicalDeviceAssociation_ObjectT.setStatus('mandatory')
softwareElement_DeviceSoftware_LogicalDeviceAssociationId = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 9, 2, 1, 13), Integer32()).setLabel("softwareElement-DeviceSoftware-LogicalDeviceAssociationId").setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareElement_DeviceSoftware_LogicalDeviceAssociationId.setStatus('mandatory')
endOfSmlMib = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 182, 3, 10), ObjectIdentifier())
if mibBuilder.loadTexts: endOfSmlMib.setStatus('mandatory')
mibBuilder.exportSymbols("SML-MIB", physicalPackage_SerialNumber=physicalPackage_SerialNumber, numberOfMediaAccessDevices=numberOfMediaAccessDevices, physicalMediaTable=physicalMediaTable, storageLibrary_Status=storageLibrary_Status, softwareElement_Name=softwareElement_Name, physicalMedia_Replaceable=physicalMedia_Replaceable, physicalMedia_CleanerMedia=physicalMedia_CleanerMedia, product_Version=product_Version, softwareElementGroup=softwareElementGroup, numberOfPhysicalMedias=numberOfPhysicalMedias, mediaAccessDevice_NeedsCleaning=mediaAccessDevice_NeedsCleaning, physicalMediaGroup=physicalMediaGroup, storageLibrary_Description=storageLibrary_Description, ibm=ibm, UINT32=UINT32, product_IdentifyingNumber=product_IdentifyingNumber, productGroup=productGroup, physicalPackage_Model=physicalPackage_Model, softwareElementTable=softwareElementTable, mediaAccessDeviceEntry=mediaAccessDeviceEntry, softwareElement_Associations=softwareElement_Associations, UINT16=UINT16, mediaAccessDeviceTable=mediaAccessDeviceTable, softwareElementEntry=softwareElementEntry, endOfSmlMib=endOfSmlMib, chassis_Model=chassis_Model, softwareElement_BuildNumber=softwareElement_BuildNumber, physicalMedia_DualSided=physicalMedia_DualSided, physicalPackageTable=physicalPackageTable, smlMibVersion=smlMibVersion, ibmProd=ibmProd, physicalPackageEntry=physicalPackageEntry, softwareElement_IdentificationCode=softwareElement_IdentificationCode, chassis_Manufacturer=chassis_Manufacturer, softwareElement_DeviceSoftware_LogicalDeviceAssociationId=softwareElement_DeviceSoftware_LogicalDeviceAssociationId, physicalMedia_Capacity=physicalMedia_Capacity, softwareElement_Manufacturer=softwareElement_Manufacturer, physicalPackage_Manufacturer=physicalPackage_Manufacturer, storageLibrary_InstallDate=storageLibrary_InstallDate, physicalMedia_MediaDescription=physicalMedia_MediaDescription, numberOfSoftwareElements=numberOfSoftwareElements, physicalMediaEntry=physicalMediaEntry, chassis_LockPresent=chassis_LockPresent, chassisGroup=chassisGroup, physicalMedia_Removable=physicalMedia_Removable, UINT64=UINT64, storageLibraryGroup=storageLibraryGroup, smlRoot=smlRoot, physicalPackageIndex=physicalPackageIndex, chassis_SecurityBreach=chassis_SecurityBreach, softwareElement_SoftwareElementID=softwareElement_SoftwareElementID, mediaAccessDeviceObjectType=mediaAccessDeviceObjectType, product_Name=product_Name, mediaAccessDevice_Name=mediaAccessDevice_Name, mediaAccessDevice_Status=mediaAccessDevice_Status, softwareElement_CodeSet=softwareElement_CodeSet, storageLibrary_Name=storageLibrary_Name, softwareElement_DeviceSoftware_LogicalDeviceAssociation_ObjectT=softwareElement_DeviceSoftware_LogicalDeviceAssociation_ObjectT, softwareElement_SerialNumber=softwareElement_SerialNumber, physicalMediaObjectType=physicalMediaObjectType, physicalMediaIndex=physicalMediaIndex, mediaAccessDevice_Availability=mediaAccessDevice_Availability, physicalPackage_Realizes_MediaAccessDeviceIndex=physicalPackage_Realizes_MediaAccessDeviceIndex, mediaAccessDeviceIndex=mediaAccessDeviceIndex, numberOfPhysicalPackages=numberOfPhysicalPackages, storageLibrary_Caption=storageLibrary_Caption, product_Vendor=product_Vendor, softwareElementIndex=softwareElementIndex, UShortReal=UShortReal, smlCimVersion=smlCimVersion, ibm3584=ibm3584, CimDateTime=CimDateTime, physicalPackageGroup=physicalPackageGroup, softwareElement_LanguageEdition=softwareElement_LanguageEdition, mediaAccessDeviceGroup=mediaAccessDeviceGroup, physicalMedia_HotSwappable=physicalMedia_HotSwappable, physicalMedia_MediaType=physicalMedia_MediaType, physicalMedia_PhysicalLabel=physicalMedia_PhysicalLabel, chassis_SerialNumber=chassis_SerialNumber, chassis_IsLocked=chassis_IsLocked, softwareElement_Version=softwareElement_Version)
