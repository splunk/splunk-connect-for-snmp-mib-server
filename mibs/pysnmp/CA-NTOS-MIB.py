#
# PySNMP MIB module CA-NTOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CA-NTOS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:26:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, Integer32, IpAddress, enterprises, Bits, Unsigned32, NotificationType, Gauge32, NotificationType, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, TimeTicks, ObjectIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Integer32", "IpAddress", "enterprises", "Bits", "Unsigned32", "NotificationType", "Gauge32", "NotificationType", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "TimeTicks", "ObjectIdentity", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cai = MibIdentifier((1, 3, 6, 1, 4, 1, 791))
caiSysMgr = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2))
agentWorks = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9))
nt = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 2))
caiNtOs = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2))
ntConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2))
ntStatusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3))
ntPollGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 4))
ntAvailableGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 5))
ntGeneralConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 2))
ntAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntAgentVersion.setStatus('mandatory')
ntAgentColdStartTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntAgentColdStartTimestamp.setStatus('mandatory')
ntAgentWarmStartTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntAgentWarmStartTimestamp.setStatus('mandatory')
ntFilesystemPollTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntFilesystemPollTimestamp.setStatus('mandatory')
ntFilePollTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntFilePollTimestamp.setStatus('mandatory')
ntProcessPollTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntProcessPollTimestamp.setStatus('mandatory')
ntServicePollTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntServicePollTimestamp.setStatus('mandatory')
ntPrinterPollTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 2, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntPrinterPollTimestamp.setStatus('mandatory')
ntMemoryPollTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 2, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntMemoryPollTimestamp.setStatus('mandatory')
ntProcessorPollTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 2, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntProcessorPollTimestamp.setStatus('mandatory')
ntRegistryPollTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 2, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntRegistryPollTimestamp.setStatus('mandatory')
ntLogPollTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 2, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntLogPollTimestamp.setStatus('mandatory')
ntFileSystemConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 3))
ntFSPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntFSPollInterval.setStatus('mandatory')
ntDefFSWarnThresh = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntDefFSWarnThresh.setStatus('mandatory')
ntDefFSCriticalThresh = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntDefFSCriticalThresh.setStatus('mandatory')
ntDefFSDelta = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntDefFSDelta.setStatus('mandatory')
ntFSMonitored = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntFSMonitored.setStatus('mandatory')
ntFSAdd = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 3, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntFSAdd.setStatus('mandatory')
ntFSRemove = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 3, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntFSRemove.setStatus('mandatory')
ntFileConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 4))
ntFilePollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntFilePollInterval.setStatus('mandatory')
ntDefFileSizeWarning = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntDefFileSizeWarning.setStatus('mandatory')
ntDefFileSizeCritical = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntDefFileSizeCritical.setStatus('mandatory')
ntDefFileSizeChangeFlag = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntDefFileSizeChangeFlag.setStatus('mandatory')
ntDefFileSizeChange = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntDefFileSizeChange.setStatus('mandatory')
ntDefFileTimestampFlag = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntDefFileTimestampFlag.setStatus('mandatory')
ntFilesMonitored = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntFilesMonitored.setStatus('mandatory')
ntFileAdd = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 4, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntFileAdd.setStatus('mandatory')
ntFileRemove = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 4, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntFileRemove.setStatus('mandatory')
ntProcessConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 5))
ntProcPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntProcPollInterval.setStatus('mandatory')
ntDefProcAlertLevel = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-monitored", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntDefProcAlertLevel.setStatus('mandatory')
ntDefProcExist = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alert-if-exist", 1), ("alert-if-not-exist", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntDefProcExist.setStatus('mandatory')
ntDefProcInstanceAlert = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntDefProcInstanceAlert.setStatus('mandatory')
ntDefProcThreadAlert = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("above", 2), ("below", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntDefProcThreadAlert.setStatus('mandatory')
ntProcessesMonitored = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntProcessesMonitored.setStatus('mandatory')
ntProcAdd = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 5, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntProcAdd.setStatus('mandatory')
ntProcRemove = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 5, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntProcRemove.setStatus('mandatory')
ntServiceConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 6))
ntServPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntServPollInterval.setStatus('mandatory')
ntDefServAlertOn = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("active", 2), ("inactive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntDefServAlertOn.setStatus('mandatory')
ntServicesMonitored = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntServicesMonitored.setStatus('mandatory')
ntServiceAdd = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 6, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntServiceAdd.setStatus('mandatory')
ntServiceRemove = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 6, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntServiceRemove.setStatus('mandatory')
ntPrinterConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 7))
ntPrinterPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntPrinterPollInterval.setStatus('mandatory')
ntDefPrintEventMonitor = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntDefPrintEventMonitor.setStatus('mandatory')
ntDefPrinterQFlag = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntDefPrinterQFlag.setStatus('mandatory')
ntDefPrinterQWarning = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 7, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntDefPrinterQWarning.setStatus('mandatory')
ntDefPrinterQCritical = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 7, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntDefPrinterQCritical.setStatus('mandatory')
ntPrintersMonitored = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntPrintersMonitored.setStatus('mandatory')
ntPrinterAdd = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 7, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntPrinterAdd.setStatus('mandatory')
ntPrinterRemove = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 7, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntPrinterRemove.setStatus('mandatory')
ntMemoryConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 8))
ntMemPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 8, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntMemPollInterval.setStatus('mandatory')
ntDefMemLoadWarning = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 8, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntDefMemLoadWarning.setStatus('mandatory')
ntDefMemLoadCritical = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 8, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntDefMemLoadCritical.setStatus('mandatory')
ntDefMemLoadCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 8, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntDefMemLoadCount.setStatus('mandatory')
ntDefMemPhysWarning = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 8, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntDefMemPhysWarning.setStatus('mandatory')
ntDefMemPhysCritical = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 8, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntDefMemPhysCritical.setStatus('mandatory')
ntDefMemPhysCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 8, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntDefMemPhysCount.setStatus('mandatory')
ntDefMemSwapWarning = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 8, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntDefMemSwapWarning.setStatus('mandatory')
ntDefMemSwapCritical = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 8, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntDefMemSwapCritical.setStatus('mandatory')
ntDefMemSwapCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 8, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntDefMemSwapCount.setStatus('mandatory')
ntProcessorConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 9))
ntCPUPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 9, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntCPUPollInterval.setStatus('mandatory')
ntDefCPUWarning = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 9, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntDefCPUWarning.setStatus('mandatory')
ntDefCPUCritical = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 9, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntDefCPUCritical.setStatus('mandatory')
ntDefCPUCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 9, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntDefCPUCount.setStatus('mandatory')
ntCPUsMonitored = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 9, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntCPUsMonitored.setStatus('mandatory')
ntRegistryConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 10))
ntRegPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 10, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntRegPollInterval.setStatus('mandatory')
ntDefRegMonitorLevel = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("change", 2), ("thresholds", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntDefRegMonitorLevel.setStatus('mandatory')
ntDefRegWarning = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 10, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntDefRegWarning.setStatus('mandatory')
ntDefRegCritical = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 10, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntDefRegCritical.setStatus('mandatory')
ntRegLeavesMonitored = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 10, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntRegLeavesMonitored.setStatus('mandatory')
ntRegistryLeafAdd = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 10, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntRegistryLeafAdd.setStatus('mandatory')
ntRegistryLeafRemove = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 10, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntRegistryLeafRemove.setStatus('mandatory')
ntEventLogConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 11))
ntLogPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntLogPollInterval.setStatus('mandatory')
ntLogApplicationCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntLogApplicationCount.setStatus('mandatory')
ntLogSecurityCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 11, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntLogSecurityCount.setStatus('mandatory')
ntLogSystemCount = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 11, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntLogSystemCount.setStatus('mandatory')
ntDefLogMonitorLevel = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 11, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntDefLogMonitorLevel.setStatus('mandatory')
ntLogsMonitored = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 11, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntLogsMonitored.setStatus('mandatory')
ntLogAdd = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 2, 11, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntLogAdd.setStatus('mandatory')
ntStatusSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 2))
ntStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatus.setStatus('mandatory')
ntTotalWarning = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntTotalWarning.setStatus('mandatory')
ntTotalCritical = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntTotalCritical.setStatus('mandatory')
ntFSWarnStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntFSWarnStatus.setStatus('mandatory')
ntFSCriticalStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntFSCriticalStatus.setStatus('mandatory')
ntFileWarnStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntFileWarnStatus.setStatus('mandatory')
ntFileCriticalStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntFileCriticalStatus.setStatus('mandatory')
ntProcessWarnStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntProcessWarnStatus.setStatus('mandatory')
ntProcessCriticalStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntProcessCriticalStatus.setStatus('mandatory')
ntServicesWarnStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntServicesWarnStatus.setStatus('mandatory')
ntServicesCriticalStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntServicesCriticalStatus.setStatus('mandatory')
ntPrintWarnStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntPrintWarnStatus.setStatus('mandatory')
ntPrintCriticalStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntPrintCriticalStatus.setStatus('mandatory')
ntMemoryWarnStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntMemoryWarnStatus.setStatus('mandatory')
ntMemoryCriticalStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntMemoryCriticalStatus.setStatus('mandatory')
ntProcessorWarnStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 2, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntProcessorWarnStatus.setStatus('mandatory')
ntProcessorCriticalStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 2, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntProcessorCriticalStatus.setStatus('mandatory')
ntRegistryWarnStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 2, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntRegistryWarnStatus.setStatus('mandatory')
ntRegistryCriticalStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 2, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntRegistryCriticalStatus.setStatus('mandatory')
ntEventLogWarnStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 2, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntEventLogWarnStatus.setStatus('mandatory')
ntEventLogCriticalStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 2, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntEventLogCriticalStatus.setStatus('mandatory')
ntFilesystemStTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 3), )
if mibBuilder.loadTexts: ntFilesystemStTable.setStatus('mandatory')
ntFilesystemStTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 3, 2), ).setIndexNames((0, "CA-NTOS-MIB", "ntStatusFSDriveLetter"))
if mibBuilder.loadTexts: ntFilesystemStTableEntry.setStatus('mandatory')
ntStatusFSDriveLetter = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 3, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusFSDriveLetter.setStatus('mandatory')
ntStatusFSDriveLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 3, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusFSDriveLabel.setStatus('mandatory')
ntStatusFSDriveType = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 3, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusFSDriveType.setStatus('mandatory')
ntStatusFSDriveFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 3, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusFSDriveFormat.setStatus('mandatory')
ntStatusFSTotalCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 3, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusFSTotalCapacity.setStatus('mandatory')
ntStatusFSUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 3, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusFSUtilization.setStatus('mandatory')
ntStatusFSFree = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 3, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusFSFree.setStatus('mandatory')
ntStatusFSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 3, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ok", 1), ("warning", 2), ("critical", 3), ("down", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusFSStatus.setStatus('mandatory')
ntStatusFSPcntWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 3, 2, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusFSPcntWarn.setStatus('mandatory')
ntStatusFSPcntCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 3, 2, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusFSPcntCritical.setStatus('mandatory')
ntStatusFSKByteWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 3, 2, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusFSKByteWarn.setStatus('mandatory')
ntStatusFSKByteCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 3, 2, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusFSKByteCritical.setStatus('mandatory')
ntStatusFSAvgUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 3, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusFSAvgUtil.setStatus('mandatory')
ntStatusFSMinUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 3, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusFSMinUtil.setStatus('mandatory')
ntStatusFSMaxUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 3, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusFSMaxUtil.setStatus('mandatory')
ntStatusFSUtilDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 3, 2, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusFSUtilDelta.setStatus('mandatory')
ntStatusFSDeltaLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 3, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusFSDeltaLevel.setStatus('mandatory')
ntStatusFSDeltaThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 3, 2, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusFSDeltaThreshold.setStatus('mandatory')
ntStatusFSDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 3, 2, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusFSDescription.setStatus('mandatory')
ntFileStTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 4), )
if mibBuilder.loadTexts: ntFileStTable.setStatus('mandatory')
ntFileStTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 4, 2), ).setIndexNames((0, "CA-NTOS-MIB", "ntStatusFileName"))
if mibBuilder.loadTexts: ntFileStTableEntry.setStatus('mandatory')
ntStatusFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 4, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusFileName.setStatus('mandatory')
ntStatusFileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 4, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("warning", 2), ("critical", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusFileStatus.setStatus('mandatory')
ntStatusFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 4, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusFileSize.setStatus('mandatory')
ntStatusFileSizeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 4, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusFileSizeStatus.setStatus('mandatory')
ntStatusFileSizeWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 4, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusFileSizeWarning.setStatus('mandatory')
ntStatusFileSizeCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 4, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusFileSizeCritical.setStatus('mandatory')
ntStatusFileTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 4, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusFileTimestamp.setStatus('mandatory')
ntStatusFileTimestampFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 4, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusFileTimestampFlag.setStatus('mandatory')
ntStatusFileTimestampStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 4, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ok", 1), ("warning", 2), ("critical", 3), ("not-monitored", 4), ("reset", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusFileTimestampStatus.setStatus('mandatory')
ntStatusFileSizeChFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 4, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusFileSizeChFlag.setStatus('mandatory')
ntStatusFileSizeCh = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 4, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusFileSizeCh.setStatus('mandatory')
ntStatusFileSizeChState = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 4, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ok", 1), ("warning", 2), ("critical", 3), ("not-monitored", 4), ("reset", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusFileSizeChState.setStatus('mandatory')
ntStatusFileSizeChBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 4, 2, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusFileSizeChBytes.setStatus('mandatory')
ntStatusFileMinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 4, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusFileMinSize.setStatus('mandatory')
ntStatusFileMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 4, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusFileMaxSize.setStatus('mandatory')
ntStatusFileAvgSize = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 4, 2, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusFileAvgSize.setStatus('mandatory')
ntStatusFileDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 4, 2, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusFileDescription.setStatus('mandatory')
ntStatusFileSizeBase = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 4, 2, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusFileSizeBase.setStatus('mandatory')
ntProcessStTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 5), )
if mibBuilder.loadTexts: ntProcessStTable.setStatus('mandatory')
ntProcessStTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 5, 2), ).setIndexNames((0, "CA-NTOS-MIB", "ntStatusProcName"))
if mibBuilder.loadTexts: ntProcessStTableEntry.setStatus('mandatory')
ntStatusProcName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 5, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusProcName.setStatus('mandatory')
ntStatusProcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 5, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusProcStatus.setStatus('mandatory')
ntStatusProcAlertLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 5, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusProcAlertLevel.setStatus('mandatory')
ntStatusProcExist = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 5, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alert-if-exist", 1), ("alert-if-not-exist", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusProcExist.setStatus('mandatory')
ntStatusProcInst = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 5, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusProcInst.setStatus('mandatory')
ntStatusProcInstMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 5, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusProcInstMonitor.setStatus('mandatory')
ntStatusProcInstWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 5, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusProcInstWarning.setStatus('mandatory')
ntStatusProcInstCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 5, 2, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusProcInstCritical.setStatus('mandatory')
ntStatusProcThd = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 5, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusProcThd.setStatus('mandatory')
ntStatusProcThdMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 5, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("above", 2), ("below", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusProcThdMonitor.setStatus('mandatory')
ntStatusProcThdRef = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 5, 2, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusProcThdRef.setStatus('mandatory')
ntStatusProcThdMax = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 5, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusProcThdMax.setStatus('mandatory')
ntStatusProcThdMin = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 5, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusProcThdMin.setStatus('mandatory')
ntStatusProcDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 5, 2, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusProcDescription.setStatus('mandatory')
ntServiceStTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 6), )
if mibBuilder.loadTexts: ntServiceStTable.setStatus('mandatory')
ntServiceStTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 6, 2), ).setIndexNames((0, "CA-NTOS-MIB", "ntStatusServName"))
if mibBuilder.loadTexts: ntServiceStTableEntry.setStatus('mandatory')
ntStatusServName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 6, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusServName.setStatus('mandatory')
ntStatusServDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 6, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusServDescription.setStatus('mandatory')
ntStatusServState = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 6, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("stopped", 1), ("start-pending", 2), ("stop-pending", 3), ("running", 4), ("continue-pending", 5), ("pause-pending", 6), ("paused", 7), ("unknown", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusServState.setStatus('mandatory')
ntStatusServStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 6, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ok", 1), ("warning", 2), ("critical", 3), ("down", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusServStatus.setStatus('mandatory')
ntStatusServAlertOn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 6, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("active", 2), ("inactive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusServAlertOn.setStatus('mandatory')
ntPrinterStTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 7), )
if mibBuilder.loadTexts: ntPrinterStTable.setStatus('mandatory')
ntStatusPrintTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 7, 2), ).setIndexNames((0, "CA-NTOS-MIB", "ntStatusPrintName"))
if mibBuilder.loadTexts: ntStatusPrintTableEntry.setStatus('mandatory')
ntStatusPrintName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 7, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusPrintName.setStatus('mandatory')
ntStatusPrintStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 7, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusPrintStatus.setStatus('mandatory')
ntStatusPrintEventMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 7, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusPrintEventMonitor.setStatus('mandatory')
ntStatusPrintEventStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 7, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusPrintEventStatus.setStatus('mandatory')
ntStatusPrintEventDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 7, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusPrintEventDescription.setStatus('mandatory')
ntStatusPrintQFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 7, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusPrintQFlag.setStatus('mandatory')
ntStatusPrintQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 7, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusPrintQueue.setStatus('mandatory')
ntStatusPrintQStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 7, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusPrintQStatus.setStatus('mandatory')
ntStatusPrintQWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 7, 2, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusPrintQWarning.setStatus('mandatory')
ntStatusPrintQCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 7, 2, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusPrintQCritical.setStatus('mandatory')
ntStatusPrintQMax = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 7, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusPrintQMax.setStatus('mandatory')
ntStatusPrintDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 7, 2, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusPrintDescription.setStatus('mandatory')
ntMemorySt = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 8))
ntStatusMemLoad = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusMemLoad.setStatus('mandatory')
ntStatusMemLoadStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusMemLoadStatus.setStatus('mandatory')
ntStatusMemLoadAvg = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusMemLoadAvg.setStatus('mandatory')
ntStatusMemLoadMax = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusMemLoadMax.setStatus('mandatory')
ntStatusMemLoadMin = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 8, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusMemLoadMin.setStatus('mandatory')
ntStatusMemPhysTotal = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 8, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusMemPhysTotal.setStatus('mandatory')
ntStatusMemPhys = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 8, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusMemPhys.setStatus('mandatory')
ntStatusMemPhysStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 8, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusMemPhysStatus.setStatus('mandatory')
ntStatusMemPhysAvg = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 8, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusMemPhysAvg.setStatus('mandatory')
ntStatusMemPhysMax = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 8, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusMemPhysMax.setStatus('mandatory')
ntStatusMemPhysMin = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 8, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusMemPhysMin.setStatus('mandatory')
ntStatusMemSwapTotal = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 8, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusMemSwapTotal.setStatus('mandatory')
ntStatusMemSwap = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 8, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusMemSwap.setStatus('mandatory')
ntStatusMemSwapStatus = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 8, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusMemSwapStatus.setStatus('mandatory')
ntStatusMemSwapAvg = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 8, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusMemSwapAvg.setStatus('mandatory')
ntStatusMemSwapMax = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 8, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusMemSwapMax.setStatus('mandatory')
ntStatusMemSwapMin = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 8, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusMemSwapMin.setStatus('mandatory')
ntProcessorStTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 9), )
if mibBuilder.loadTexts: ntProcessorStTable.setStatus('mandatory')
ntProcessorStTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 9, 2), ).setIndexNames((0, "CA-NTOS-MIB", "ntStatusCPUNumber"))
if mibBuilder.loadTexts: ntProcessorStTableEntry.setStatus('mandatory')
ntStatusCPUNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 9, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusCPUNumber.setStatus('mandatory')
ntStatusCPUStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 9, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("warning", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusCPUStatus.setStatus('mandatory')
ntStatusCPUTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 9, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusCPUTotal.setStatus('mandatory')
ntStatusCPUWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 9, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusCPUWarning.setStatus('mandatory')
ntStatusCPUCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 9, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusCPUCritical.setStatus('mandatory')
ntStatusCPUCount = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 9, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusCPUCount.setStatus('mandatory')
ntStatusCPUAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 9, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusCPUAvg.setStatus('mandatory')
ntStatusCPUMax = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 9, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusCPUMax.setStatus('mandatory')
ntStatusCPUMin = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 9, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusCPUMin.setStatus('mandatory')
ntStatusCPUDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 9, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusCPUDelta.setStatus('mandatory')
ntStatusCPUDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 9, 2, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusCPUDescription.setStatus('mandatory')
ntRegistryStTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 10), )
if mibBuilder.loadTexts: ntRegistryStTable.setStatus('mandatory')
ntRegistryStTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 10, 2), ).setIndexNames((0, "CA-NTOS-MIB", "ntStatusRegHandle"), (0, "CA-NTOS-MIB", "ntStatusRegKey"), (0, "CA-NTOS-MIB", "ntStatusRegLeaf"))
if mibBuilder.loadTexts: ntRegistryStTableEntry.setStatus('mandatory')
ntStatusRegHandle = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 10, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("hkey-local-machine", 1), ("hkey-current-user", 2), ("hkey-users", 3), ("hkey-classes-root", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusRegHandle.setStatus('mandatory')
ntStatusRegKey = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 10, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusRegKey.setStatus('mandatory')
ntStatusRegLeaf = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 10, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusRegLeaf.setStatus('mandatory')
ntStatusRegDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 10, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("integer", 1), ("string", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusRegDataType.setStatus('mandatory')
ntStatusRegValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 10, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusRegValue.setStatus('mandatory')
ntStatusRegPrevValue = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 10, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusRegPrevValue.setStatus('mandatory')
ntStatusRegStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 10, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("warning", 2), ("critical", 3), ("reset", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusRegStatus.setStatus('mandatory')
ntStatusRegAvgTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 10, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusRegAvgTicks.setStatus('optional')
ntStatusRegAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 10, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusRegAvg.setStatus('optional')
ntStatusRegMax = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 10, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusRegMax.setStatus('optional')
ntStatusRegMin = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 10, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusRegMin.setStatus('optional')
ntStatusRegMonitorLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 10, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("change", 2), ("thresholds", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusRegMonitorLevel.setStatus('mandatory')
ntStatusRegWarning = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 10, 2, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusRegWarning.setStatus('mandatory')
ntStatusRegCritical = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 10, 2, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusRegCritical.setStatus('mandatory')
ntEventLogStTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 11), )
if mibBuilder.loadTexts: ntEventLogStTable.setStatus('mandatory')
ntEventLogStTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 11, 2), )
if mibBuilder.loadTexts: ntEventLogStTableEntry.setStatus('mandatory')
ntStatusLogLogs = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 11, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusLogLogs.setStatus('mandatory')
ntStatusLogSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 11, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusLogSeverity.setStatus('mandatory')
ntStatusLogSource = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 11, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusLogSource.setStatus('mandatory')
ntStatusLogEventID = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 11, 2, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusLogEventID.setStatus('mandatory')
ntStatusLogUser = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 11, 2, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusLogUser.setStatus('mandatory')
ntStatusLogComputer = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 11, 2, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusLogComputer.setStatus('mandatory')
ntStatusLogStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 11, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("warning", 2), ("critical", 3), ("reset", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusLogStatus.setStatus('mandatory')
ntStatusLogAlertOn = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 11, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("do-not-monitor", 1), ("warning", 2), ("critical", 3), ("remove-watcher", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusLogAlertOn.setStatus('mandatory')
ntStatusLogStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 11, 2, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusLogStartTime.setStatus('mandatory')
ntStatusLogStartTimeInText = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 11, 2, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusLogStartTimeInText.setStatus('mandatory')
ntStatusLogAppLogMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 11, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusLogAppLogMatches.setStatus('mandatory')
ntStatusLogAppLogLastMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 11, 2, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusLogAppLogLastMatch.setStatus('mandatory')
ntStatusLogSecLogMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 11, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusLogSecLogMatches.setStatus('mandatory')
ntStatusLogSecLogLastMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 11, 2, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusLogSecLogLastMatch.setStatus('mandatory')
ntStatusLogSysLogMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 11, 2, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusLogSysLogMatches.setStatus('mandatory')
ntStatusLogSysLogLastMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 11, 2, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusLogSysLogLastMatch.setStatus('mandatory')
ntStatusLogWatcherIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 11, 2, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntStatusLogWatcherIndex.setStatus('mandatory')
ntStatusLogDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 3, 11, 2, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntStatusLogDescription.setStatus('mandatory')
ntFilesystemPollTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 4, 2), )
if mibBuilder.loadTexts: ntFilesystemPollTable.setStatus('mandatory')
ntFilesystemPollTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 4, 2, 2), ).setIndexNames((0, "CA-NTOS-MIB", "ntFsysDriveLetter"))
if mibBuilder.loadTexts: ntFilesystemPollTableEntry.setStatus('mandatory')
ntFsysDriveLetter = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 4, 2, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntFsysDriveLetter.setStatus('mandatory')
ntFsysTotalCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 4, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntFsysTotalCapacity.setStatus('mandatory')
ntFsysFree = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 4, 2, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntFsysFree.setStatus('mandatory')
ntFsysUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 4, 2, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntFsysUtilization.setStatus('mandatory')
ntFsysLastUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 4, 2, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntFsysLastUtilization.setStatus('mandatory')
ntFsysAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 4, 2, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntFsysAverage.setStatus('mandatory')
ntFsysAvgTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 4, 2, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntFsysAvgTicks.setStatus('mandatory')
ntFilePollTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 4, 3), )
if mibBuilder.loadTexts: ntFilePollTable.setStatus('mandatory')
ntFilePollTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 4, 3, 2), ).setIndexNames((0, "CA-NTOS-MIB", "ntFileName"))
if mibBuilder.loadTexts: ntFilePollTableEntry.setStatus('mandatory')
ntFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 4, 3, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntFileName.setStatus('mandatory')
ntFileTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 4, 3, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntFileTimestamp.setStatus('mandatory')
ntFileRefTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 4, 3, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntFileRefTimestamp.setStatus('mandatory')
ntFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 4, 3, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntFileSize.setStatus('mandatory')
ntFileSizeChangeReference = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 4, 3, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntFileSizeChangeReference.setStatus('mandatory')
ntFileSizeChangeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 4, 3, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntFileSizeChangeCount.setStatus('mandatory')
ntFileSizeAvgTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 4, 3, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntFileSizeAvgTicks.setStatus('mandatory')
ntProcessPollTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 4, 4), )
if mibBuilder.loadTexts: ntProcessPollTable.setStatus('mandatory')
ntProcessPollTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 4, 4, 2), ).setIndexNames((0, "CA-NTOS-MIB", "ntProcessName"))
if mibBuilder.loadTexts: ntProcessPollTableEntry.setStatus('mandatory')
ntProcessName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 4, 4, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntProcessName.setStatus('mandatory')
ntProcessInstCount = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 4, 4, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntProcessInstCount.setStatus('mandatory')
ntProcessMaxThread = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 4, 4, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntProcessMaxThread.setStatus('mandatory')
ntProcessMinThread = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 4, 4, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntProcessMinThread.setStatus('mandatory')
ntProcessorPollTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 4, 5), )
if mibBuilder.loadTexts: ntProcessorPollTable.setStatus('mandatory')
ntProcessorPollTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 4, 5, 2), ).setIndexNames((0, "CA-NTOS-MIB", "ntCPUNumber"))
if mibBuilder.loadTexts: ntProcessorPollTableEntry.setStatus('mandatory')
ntCPUNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 4, 5, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntCPUNumber.setStatus('mandatory')
ntCPUDPCTime = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 4, 5, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntCPUDPCTime.setStatus('mandatory')
ntCPUInterruptTime = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 4, 5, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntCPUInterruptTime.setStatus('mandatory')
ntCPUPrivilegedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 4, 5, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntCPUPrivilegedTime.setStatus('mandatory')
ntCPUProcessorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 4, 5, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntCPUProcessorTime.setStatus('mandatory')
ntCPUUserTime = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 4, 5, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntCPUUserTime.setStatus('mandatory')
ntCPUTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 4, 5, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntCPUTicks.setStatus('mandatory')
ntCPUCountsSoFar = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 4, 5, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntCPUCountsSoFar.setStatus('mandatory')
ntLogPollTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 4, 6), )
if mibBuilder.loadTexts: ntLogPollTable.setStatus('mandatory')
ntLogPollTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 4, 6, 1), )
if mibBuilder.loadTexts: ntLogPollTableEntry.setStatus('mandatory')
ntLogAppStart = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 4, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntLogAppStart.setStatus('mandatory')
ntLogSecStart = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 4, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntLogSecStart.setStatus('mandatory')
ntLogSysStart = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 4, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntLogSysStart.setStatus('mandatory')
ntLogAppLast = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 4, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntLogAppLast.setStatus('mandatory')
ntLogSecLast = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 4, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntLogSecLast.setStatus('mandatory')
ntLogSysLast = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 4, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntLogSysLast.setStatus('mandatory')
ntAvailConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 5, 1))
ntAvailFSPeriod = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 5, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntAvailFSPeriod.setStatus('mandatory')
ntAvailFSPollTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntAvailFSPollTimestamp.setStatus('mandatory')
ntAvailProcPeriod = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 5, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntAvailProcPeriod.setStatus('mandatory')
ntAvailProcTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntAvailProcTimestamp.setStatus('mandatory')
ntAvailServPeriod = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 5, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntAvailServPeriod.setStatus('mandatory')
ntAvailServPollTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntAvailServPollTimestamp.setStatus('mandatory')
ntAvailPrinterPeriod = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 5, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntAvailPrinterPeriod.setStatus('mandatory')
ntAvailPrinterPollTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 5, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntAvailPrinterPollTimestamp.setStatus('mandatory')
ntAvailFSTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 5, 2), )
if mibBuilder.loadTexts: ntAvailFSTable.setStatus('mandatory')
ntAvailFSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 5, 2, 1), ).setIndexNames((0, "CA-NTOS-MIB", "ntAvailFSDriveLetter"))
if mibBuilder.loadTexts: ntAvailFSEntry.setStatus('mandatory')
ntAvailFSDriveLetter = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 5, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntAvailFSDriveLetter.setStatus('mandatory')
ntAvailFSDriveLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 5, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntAvailFSDriveLabel.setStatus('mandatory')
ntAvailFSDriveType = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 5, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntAvailFSDriveType.setStatus('mandatory')
ntAvailProcTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 5, 3), )
if mibBuilder.loadTexts: ntAvailProcTable.setStatus('mandatory')
ntAvailProcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 5, 3, 1), ).setIndexNames((0, "CA-NTOS-MIB", "ntAvailProcessName"))
if mibBuilder.loadTexts: ntAvailProcEntry.setStatus('mandatory')
ntAvailProcessName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 5, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntAvailProcessName.setStatus('mandatory')
ntAvailServiceTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 5, 4), )
if mibBuilder.loadTexts: ntAvailServiceTable.setStatus('mandatory')
ntAvailServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 5, 4, 1), ).setIndexNames((0, "CA-NTOS-MIB", "ntAvailServiceName"))
if mibBuilder.loadTexts: ntAvailServiceEntry.setStatus('mandatory')
ntAvailServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 5, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntAvailServiceName.setStatus('mandatory')
ntAvailServiceDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 5, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntAvailServiceDescr.setStatus('mandatory')
ntAvailServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("stopped", 1), ("start-pending", 2), ("stop-pending", 3), ("running", 4), ("continue-pending", 5), ("pause-pending", 6), ("paused", 7), ("unknown", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntAvailServiceStatus.setStatus('mandatory')
ntAvailPrinterTable = MibTable((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 5, 5), )
if mibBuilder.loadTexts: ntAvailPrinterTable.setStatus('mandatory')
ntAvailPrinterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 5, 5, 1), ).setIndexNames((0, "CA-NTOS-MIB", "ntAvailPrinterName"))
if mibBuilder.loadTexts: ntAvailPrinterEntry.setStatus('mandatory')
ntAvailPrinterName = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 5, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntAvailPrinterName.setStatus('mandatory')
ntAvailPrinterDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 5, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntAvailPrinterDescr.setStatus('mandatory')
ntAvailPrinterType = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 5, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntAvailPrinterType.setStatus('mandatory')
ntAvailPrinterLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2, 5, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntAvailPrinterLocation.setStatus('mandatory')
ntFSUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2) + (0,1))
ntFSok = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2) + (0,2))
ntFSwarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2) + (0,3))
ntFScritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2) + (0,4))
ntFileUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2) + (0,5))
ntFileok = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2) + (0,6))
ntFilewarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2) + (0,7))
ntFilecritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2) + (0,8))
ntProcessUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2) + (0,9))
ntProcessok = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2) + (0,10))
ntProcesswarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2) + (0,11))
ntProcesscritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2) + (0,12))
ntServiceUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2) + (0,13))
ntServiceok = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2) + (0,14))
ntServicewarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2) + (0,15))
ntServicecritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2) + (0,16))
ntPrinterUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2) + (0,17))
ntPrinterok = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2) + (0,18))
ntPrinterwarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2) + (0,19))
ntPrintercritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2) + (0,20))
ntCPUUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2) + (0,21))
ntCPUok = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2) + (0,22))
ntCPUwarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2) + (0,23))
ntCPUcritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2) + (0,24))
ntMemLoadok = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2) + (0,25))
ntMemLoadwarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2) + (0,26))
ntMemLoadcritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2) + (0,27))
ntMemPhysok = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2) + (0,28))
ntMemPhyswarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2) + (0,29))
ntMemPhyscritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2) + (0,30))
ntMemSwapok = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2) + (0,31))
ntMemSwapwarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2) + (0,32))
ntMemSwapcritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2) + (0,33))
ntRegUnknown = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2) + (0,34))
ntRegOK = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2) + (0,35))
ntRegwarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2) + (0,36))
ntRegcritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2) + (0,37))
ntLogOK = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2) + (0,38))
ntLogwarning = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2) + (0,39))
ntLogcritical = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2) + (0,40))
ntAdd = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2) + (0,41))
ntRemove = NotificationType((1, 3, 6, 1, 4, 1, 791, 2, 9, 2, 2) + (0,42))
mibBuilder.exportSymbols("CA-NTOS-MIB", ntAvailProcTable=ntAvailProcTable, ntFileRemove=ntFileRemove, ntLogPollTimestamp=ntLogPollTimestamp, ntStatusPrintQWarning=ntStatusPrintQWarning, ntStatusMemSwapAvg=ntStatusMemSwapAvg, ntLogPollTable=ntLogPollTable, ntDefFileSizeChangeFlag=ntDefFileSizeChangeFlag, ntRegUnknown=ntRegUnknown, ntStatusFSPcntCritical=ntStatusFSPcntCritical, ntConfigGroup=ntConfigGroup, ntDefPrinterQFlag=ntDefPrinterQFlag, ntEventLogWarnStatus=ntEventLogWarnStatus, ntStatusFSMinUtil=ntStatusFSMinUtil, ntPrinterUnknown=ntPrinterUnknown, ntPrinterAdd=ntPrinterAdd, ntDefCPUCount=ntDefCPUCount, ntPrinterConfig=ntPrinterConfig, ntServiceok=ntServiceok, cai=cai, ntDefProcInstanceAlert=ntDefProcInstanceAlert, ntProcessorPollTable=ntProcessorPollTable, ntFileName=ntFileName, ntStatusFSTotalCapacity=ntStatusFSTotalCapacity, ntStatusProcAlertLevel=ntStatusProcAlertLevel, ntStatusLogSeverity=ntStatusLogSeverity, ntStatusFileSizeBase=ntStatusFileSizeBase, ntFileRefTimestamp=ntFileRefTimestamp, ntProcessWarnStatus=ntProcessWarnStatus, ntCPUUserTime=ntCPUUserTime, ntCPUPollInterval=ntCPUPollInterval, ntServicecritical=ntServicecritical, ntProcessPollTable=ntProcessPollTable, ntPrinterStTable=ntPrinterStTable, ntStatusRegKey=ntStatusRegKey, ntStatusPrintStatus=ntStatusPrintStatus, ntStatusLogStartTime=ntStatusLogStartTime, ntFileConfig=ntFileConfig, ntFileSizeAvgTicks=ntFileSizeAvgTicks, ntStatusFileSizeCh=ntStatusFileSizeCh, ntStatusLogSysLogLastMatch=ntStatusLogSysLogLastMatch, ntProcessCriticalStatus=ntProcessCriticalStatus, ntProcessorPollTimestamp=ntProcessorPollTimestamp, ntFileStTableEntry=ntFileStTableEntry, ntProcessStTable=ntProcessStTable, ntAvailFSEntry=ntAvailFSEntry, ntEventLogStTableEntry=ntEventLogStTableEntry, ntGeneralConfig=ntGeneralConfig, ntStatusLogSecLogLastMatch=ntStatusLogSecLogLastMatch, ntDefPrinterQCritical=ntDefPrinterQCritical, ntCPUNumber=ntCPUNumber, ntFilePollTimestamp=ntFilePollTimestamp, ntProcRemove=ntProcRemove, ntStatusFSFree=ntStatusFSFree, ntAvailFSDriveLetter=ntAvailFSDriveLetter, ntStatusPrintName=ntStatusPrintName, ntAvailPrinterDescr=ntAvailPrinterDescr, ntDefServAlertOn=ntDefServAlertOn, ntDefFSDelta=ntDefFSDelta, ntStatusProcStatus=ntStatusProcStatus, ntStatusMemSwapMax=ntStatusMemSwapMax, ntStatusCPUMax=ntStatusCPUMax, caiNtOs=caiNtOs, ntDefProcThreadAlert=ntDefProcThreadAlert, ntFileSystemConfig=ntFileSystemConfig, ntAvailFSTable=ntAvailFSTable, ntStatusMemPhysAvg=ntStatusMemPhysAvg, ntMemSwapok=ntMemSwapok, ntStatusCPUStatus=ntStatusCPUStatus, ntCPUTicks=ntCPUTicks, ntProcesswarning=ntProcesswarning, ntPrinterPollTimestamp=ntPrinterPollTimestamp, ntMemSwapcritical=ntMemSwapcritical, ntDefMemLoadCritical=ntDefMemLoadCritical, ntStatusMemPhysMax=ntStatusMemPhysMax, ntStatusServState=ntStatusServState, ntLogwarning=ntLogwarning, ntPrintercritical=ntPrintercritical, ntTotalCritical=ntTotalCritical, ntFilewarning=ntFilewarning, ntProcessorStTableEntry=ntProcessorStTableEntry, ntAvailServiceDescr=ntAvailServiceDescr, ntStatusMemPhysMin=ntStatusMemPhysMin, ntFilePollTableEntry=ntFilePollTableEntry, ntDefMemSwapCritical=ntDefMemSwapCritical, ntDefPrintEventMonitor=ntDefPrintEventMonitor, ntStatusProcDescription=ntStatusProcDescription, ntServiceAdd=ntServiceAdd, ntStatusMemSwap=ntStatusMemSwap, ntStatusFileMaxSize=ntStatusFileMaxSize, ntFilesystemPollTimestamp=ntFilesystemPollTimestamp, ntServiceStTable=ntServiceStTable, ntStatusServDescription=ntStatusServDescription, ntStatusPrintQueue=ntStatusPrintQueue, ntStatusCPUCount=ntStatusCPUCount, ntAvailPrinterPollTimestamp=ntAvailPrinterPollTimestamp, ntStatusFSDriveFormat=ntStatusFSDriveFormat, ntServiceStTableEntry=ntServiceStTableEntry, ntProcessorCriticalStatus=ntProcessorCriticalStatus, ntDefMemSwapCount=ntDefMemSwapCount, ntStatusRegMin=ntStatusRegMin, ntPrintersMonitored=ntPrintersMonitored, ntAvailProcTimestamp=ntAvailProcTimestamp, ntProcessorPollTableEntry=ntProcessorPollTableEntry, ntProcAdd=ntProcAdd, ntProcPollInterval=ntProcPollInterval, ntAvailPrinterTable=ntAvailPrinterTable, ntAvailFSDriveType=ntAvailFSDriveType, ntAvailableGroup=ntAvailableGroup, ntStatusPrintDescription=ntStatusPrintDescription, ntFSUnknown=ntFSUnknown, ntEventLogStTable=ntEventLogStTable, ntStatusFSDeltaLevel=ntStatusFSDeltaLevel, ntLogSysStart=ntLogSysStart, ntFilesystemPollTable=ntFilesystemPollTable, ntStatus=ntStatus, ntStatusFileName=ntStatusFileName, ntStatusProcThdRef=ntStatusProcThdRef, ntStatusServStatus=ntStatusServStatus, ntServicesCriticalStatus=ntServicesCriticalStatus, ntEventLogCriticalStatus=ntEventLogCriticalStatus, ntServiceUnknown=ntServiceUnknown, ntMemLoadcritical=ntMemLoadcritical, ntAgentColdStartTimestamp=ntAgentColdStartTimestamp, ntLogSecurityCount=ntLogSecurityCount, ntStatusLogUser=ntStatusLogUser, ntFsysLastUtilization=ntFsysLastUtilization, ntAvailServiceName=ntAvailServiceName, ntRegistryLeafRemove=ntRegistryLeafRemove, ntFileWarnStatus=ntFileWarnStatus, ntStatusProcInst=ntStatusProcInst, ntFsysFree=ntFsysFree, ntProcessMinThread=ntProcessMinThread, ntAvailServPollTimestamp=ntAvailServPollTimestamp, ntDefFileSizeCritical=ntDefFileSizeCritical, ntPollGroup=ntPollGroup, ntAvailProcEntry=ntAvailProcEntry, ntDefLogMonitorLevel=ntDefLogMonitorLevel, ntStatusFileStatus=ntStatusFileStatus, ntProcessName=ntProcessName, ntStatusFileDescription=ntStatusFileDescription, ntMemoryWarnStatus=ntMemoryWarnStatus, ntStatusPrintEventDescription=ntStatusPrintEventDescription, ntAvailProcessName=ntAvailProcessName, ntStatusProcThd=ntStatusProcThd, ntStatusFSDeltaThreshold=ntStatusFSDeltaThreshold, ntAvailServPeriod=ntAvailServPeriod, ntFSCriticalStatus=ntFSCriticalStatus, ntServicesMonitored=ntServicesMonitored, ntProcessPollTimestamp=ntProcessPollTimestamp, ntMemorySt=ntMemorySt, ntRegistryLeafAdd=ntRegistryLeafAdd, ntLogsMonitored=ntLogsMonitored, ntDefRegCritical=ntDefRegCritical, ntCPUok=ntCPUok, ntFileAdd=ntFileAdd, ntPrintCriticalStatus=ntPrintCriticalStatus, ntDefMemPhysWarning=ntDefMemPhysWarning, ntStatusRegMax=ntStatusRegMax, ntProcessStTableEntry=ntProcessStTableEntry, ntProcessorStTable=ntProcessorStTable, ntProcessConfig=ntProcessConfig, ntServicewarning=ntServicewarning, ntStatusLogWatcherIndex=ntStatusLogWatcherIndex, ntDefProcExist=ntDefProcExist, ntMemoryConfig=ntMemoryConfig, ntStatusCPUTotal=ntStatusCPUTotal, ntFilePollInterval=ntFilePollInterval, ntStatusFileSizeStatus=ntStatusFileSizeStatus, ntStatusLogSecLogMatches=ntStatusLogSecLogMatches, ntStatusRegCritical=ntStatusRegCritical, caiSysMgr=caiSysMgr, nt=nt, ntMemoryPollTimestamp=ntMemoryPollTimestamp, ntStatusCPUDescription=ntStatusCPUDescription, ntAvailServiceTable=ntAvailServiceTable, ntStatusFileTimestamp=ntStatusFileTimestamp, ntLogAppStart=ntLogAppStart, ntServiceConfig=ntServiceConfig, ntDefPrinterQWarning=ntDefPrinterQWarning, ntEventLogConfig=ntEventLogConfig, ntFsysAverage=ntFsysAverage, ntLogSysLast=ntLogSysLast, ntPrinterPollInterval=ntPrinterPollInterval, ntFileUnknown=ntFileUnknown, ntStatusMemPhysStatus=ntStatusMemPhysStatus, ntLogSecStart=ntLogSecStart, ntStatusProcThdMax=ntStatusProcThdMax, ntRegistryStTableEntry=ntRegistryStTableEntry, ntStatusCPUNumber=ntStatusCPUNumber, ntServicesWarnStatus=ntServicesWarnStatus, ntAvailPrinterType=ntAvailPrinterType, ntFSok=ntFSok, ntDefMemPhysCount=ntDefMemPhysCount, ntStatusLogDescription=ntStatusLogDescription, ntRegistryCriticalStatus=ntRegistryCriticalStatus, ntStatusRegHandle=ntStatusRegHandle, ntDefRegWarning=ntDefRegWarning, ntStatusPrintQStatus=ntStatusPrintQStatus, ntStatusRegWarning=ntStatusRegWarning, ntFileTimestamp=ntFileTimestamp, ntStatusFileTimestampStatus=ntStatusFileTimestampStatus, ntStatusProcThdMonitor=ntStatusProcThdMonitor, ntRegcritical=ntRegcritical, ntStatusProcThdMin=ntStatusProcThdMin, ntStatusRegPrevValue=ntStatusRegPrevValue, ntStatusLogAppLogLastMatch=ntStatusLogAppLogLastMatch, ntProcessPollTableEntry=ntProcessPollTableEntry, ntAvailPrinterPeriod=ntAvailPrinterPeriod, ntStatusFileSizeWarning=ntStatusFileSizeWarning, ntMemoryCriticalStatus=ntMemoryCriticalStatus, ntFilesystemPollTableEntry=ntFilesystemPollTableEntry, ntMemSwapwarning=ntMemSwapwarning, ntStatusFileSizeCritical=ntStatusFileSizeCritical, ntStatusProcInstCritical=ntStatusProcInstCritical, ntStatusFileSize=ntStatusFileSize, ntCPUsMonitored=ntCPUsMonitored, ntDefMemLoadWarning=ntDefMemLoadWarning, ntServicePollTimestamp=ntServicePollTimestamp, ntProcessorConfig=ntProcessorConfig, ntFileSizeChangeReference=ntFileSizeChangeReference, ntStatusPrintQMax=ntStatusPrintQMax, ntLogOK=ntLogOK, ntLogPollInterval=ntLogPollInterval, ntStatusMemPhysTotal=ntStatusMemPhysTotal, ntDefCPUWarning=ntDefCPUWarning, ntCPUwarning=ntCPUwarning, ntRemove=ntRemove, ntDefFSCriticalThresh=ntDefFSCriticalThresh, ntDefRegMonitorLevel=ntDefRegMonitorLevel, ntStatusProcName=ntStatusProcName, ntStatusProcInstWarning=ntStatusProcInstWarning, ntMemLoadok=ntMemLoadok, ntCPUInterruptTime=ntCPUInterruptTime, ntProcessok=ntProcessok, ntCPUcritical=ntCPUcritical, ntRegLeavesMonitored=ntRegLeavesMonitored, ntCPUDPCTime=ntCPUDPCTime, ntFilecritical=ntFilecritical, ntStatusMemLoad=ntStatusMemLoad, ntStatusFSDriveType=ntStatusFSDriveType, ntStatusCPUWarning=ntStatusCPUWarning, ntDefFileTimestampFlag=ntDefFileTimestampFlag, ntPrinterwarning=ntPrinterwarning, ntFileSizeChangeCount=ntFileSizeChangeCount, ntStatusMemSwapStatus=ntStatusMemSwapStatus, ntStatusFSAvgUtil=ntStatusFSAvgUtil, ntCPUPrivilegedTime=ntCPUPrivilegedTime, ntAvailPrinterName=ntAvailPrinterName, ntPrintWarnStatus=ntPrintWarnStatus, ntAvailPrinterEntry=ntAvailPrinterEntry, ntPrinterok=ntPrinterok, ntFSWarnStatus=ntFSWarnStatus, ntStatusCPUMin=ntStatusCPUMin, ntCPUUnknown=ntCPUUnknown)
mibBuilder.exportSymbols("CA-NTOS-MIB", ntAdd=ntAdd, ntPrinterRemove=ntPrinterRemove, ntRegistryStTable=ntRegistryStTable, ntProcesscritical=ntProcesscritical, ntFSRemove=ntFSRemove, ntStatusRegAvgTicks=ntStatusRegAvgTicks, ntStatusLogEventID=ntStatusLogEventID, ntStatusFSKByteCritical=ntStatusFSKByteCritical, ntStatusProcInstMonitor=ntStatusProcInstMonitor, ntStatusCPUDelta=ntStatusCPUDelta, ntAvailFSDriveLabel=ntAvailFSDriveLabel, ntFSAdd=ntFSAdd, ntServPollInterval=ntServPollInterval, ntStatusPrintTableEntry=ntStatusPrintTableEntry, ntStatusRegStatus=ntStatusRegStatus, ntStatusMemLoadMin=ntStatusMemLoadMin, ntFileSize=ntFileSize, ntProcessorWarnStatus=ntProcessorWarnStatus, ntStatusMemSwapTotal=ntStatusMemSwapTotal, ntLogSystemCount=ntLogSystemCount, ntTotalWarning=ntTotalWarning, ntStatusCPUAvg=ntStatusCPUAvg, ntMemPhyswarning=ntMemPhyswarning, ntStatusProcExist=ntStatusProcExist, ntFileStTable=ntFileStTable, ntRegOK=ntRegOK, ntFilesystemStTable=ntFilesystemStTable, ntCPUCountsSoFar=ntCPUCountsSoFar, ntMemPhyscritical=ntMemPhyscritical, ntStatusServName=ntStatusServName, ntFScritical=ntFScritical, ntStatusLogAlertOn=ntStatusLogAlertOn, ntFsysUtilization=ntFsysUtilization, ntStatusLogSource=ntStatusLogSource, ntStatusLogLogs=ntStatusLogLogs, ntStatusMemPhys=ntStatusMemPhys, ntStatusPrintEventMonitor=ntStatusPrintEventMonitor, ntDefFileSizeChange=ntDefFileSizeChange, ntAgentWarmStartTimestamp=ntAgentWarmStartTimestamp, ntProcessUnknown=ntProcessUnknown, ntDefFSWarnThresh=ntDefFSWarnThresh, ntStatusRegDataType=ntStatusRegDataType, ntAvailServiceEntry=ntAvailServiceEntry, ntStatusSummary=ntStatusSummary, ntAgentVersion=ntAgentVersion, ntMemPollInterval=ntMemPollInterval, ntDefMemPhysCritical=ntDefMemPhysCritical, ntStatusPrintEventStatus=ntStatusPrintEventStatus, ntStatusFileAvgSize=ntStatusFileAvgSize, ntStatusMemLoadMax=ntStatusMemLoadMax, ntServiceRemove=ntServiceRemove, ntStatusLogComputer=ntStatusLogComputer, ntStatusFileMinSize=ntStatusFileMinSize, ntStatusServAlertOn=ntStatusServAlertOn, ntFilePollTable=ntFilePollTable, ntStatusFileTimestampFlag=ntStatusFileTimestampFlag, ntRegPollInterval=ntRegPollInterval, ntFSPollInterval=ntFSPollInterval, ntProcessInstCount=ntProcessInstCount, ntFileCriticalStatus=ntFileCriticalStatus, ntLogPollTableEntry=ntLogPollTableEntry, ntStatusRegLeaf=ntStatusRegLeaf, ntStatusLogAppLogMatches=ntStatusLogAppLogMatches, ntStatusLogSysLogMatches=ntStatusLogSysLogMatches, ntLogAppLast=ntLogAppLast, ntStatusMemLoadStatus=ntStatusMemLoadStatus, ntStatusFSUtilDelta=ntStatusFSUtilDelta, ntStatusRegAvg=ntStatusRegAvg, ntStatusPrintQCritical=ntStatusPrintQCritical, ntMemLoadwarning=ntMemLoadwarning, ntStatusLogStatus=ntStatusLogStatus, ntRegistryPollTimestamp=ntRegistryPollTimestamp, ntStatusFSDescription=ntStatusFSDescription, ntRegistryConfig=ntRegistryConfig, ntStatusFSUtilization=ntStatusFSUtilization, ntLogAdd=ntLogAdd, ntDefMemLoadCount=ntDefMemLoadCount, ntDefFileSizeWarning=ntDefFileSizeWarning, ntStatusFileSizeChBytes=ntStatusFileSizeChBytes, ntStatusFileSizeChFlag=ntStatusFileSizeChFlag, ntStatusPrintQFlag=ntStatusPrintQFlag, ntFSMonitored=ntFSMonitored, ntStatusFSDriveLabel=ntStatusFSDriveLabel, ntFSwarning=ntFSwarning, ntDefMemSwapWarning=ntDefMemSwapWarning, ntStatusRegValue=ntStatusRegValue, ntProcessMaxThread=ntProcessMaxThread, ntFsysAvgTicks=ntFsysAvgTicks, ntRegwarning=ntRegwarning, ntStatusGroup=ntStatusGroup, ntStatusFSKByteWarn=ntStatusFSKByteWarn, ntFsysDriveLetter=ntFsysDriveLetter, ntStatusCPUCritical=ntStatusCPUCritical, ntCPUProcessorTime=ntCPUProcessorTime, ntStatusFSStatus=ntStatusFSStatus, ntLogApplicationCount=ntLogApplicationCount, ntFsysTotalCapacity=ntFsysTotalCapacity, ntStatusLogStartTimeInText=ntStatusLogStartTimeInText, ntAvailServiceStatus=ntAvailServiceStatus, ntStatusMemLoadAvg=ntStatusMemLoadAvg, ntStatusRegMonitorLevel=ntStatusRegMonitorLevel, ntMemPhysok=ntMemPhysok, ntLogcritical=ntLogcritical, ntFilesystemStTableEntry=ntFilesystemStTableEntry, ntDefCPUCritical=ntDefCPUCritical, ntProcessesMonitored=ntProcessesMonitored, ntAvailFSPeriod=ntAvailFSPeriod, ntStatusMemSwapMin=ntStatusMemSwapMin, ntRegistryWarnStatus=ntRegistryWarnStatus, ntFileok=ntFileok, ntStatusFSMaxUtil=ntStatusFSMaxUtil, ntFilesMonitored=ntFilesMonitored, agentWorks=agentWorks, ntStatusFSDriveLetter=ntStatusFSDriveLetter, ntStatusFSPcntWarn=ntStatusFSPcntWarn, ntAvailFSPollTimestamp=ntAvailFSPollTimestamp, ntLogSecLast=ntLogSecLast, ntAvailConfig=ntAvailConfig, ntDefProcAlertLevel=ntDefProcAlertLevel, ntAvailPrinterLocation=ntAvailPrinterLocation, ntStatusFileSizeChState=ntStatusFileSizeChState, ntAvailProcPeriod=ntAvailProcPeriod)
