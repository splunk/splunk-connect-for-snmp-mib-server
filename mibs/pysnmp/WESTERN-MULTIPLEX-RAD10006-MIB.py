#
# PySNMP MIB module WESTERN-MULTIPLEX-RAD10006-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WESTERN-MULTIPLEX-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:29:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Gauge32, IpAddress, NotificationType, NotificationType, MibIdentifier, ModuleIdentity, iso, ObjectIdentity, Counter64, Bits, Integer32, Counter32, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Gauge32", "IpAddress", "NotificationType", "NotificationType", "MibIdentifier", "ModuleIdentity", "iso", "ObjectIdentity", "Counter64", "Bits", "Integer32", "Counter32", "enterprises")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
trapSequenceNumber, = mibBuilder.importSymbols("WESTERN-MULTIPLEX-MIB", "trapSequenceNumber")
western_multiplex = MibIdentifier((1, 3, 6, 1, 4, 1, 3727)).setLabel("western-multiplex")
tsunami100_06 = MibIdentifier((1, 3, 6, 1, 4, 1, 3727, 20)).setLabel("tsunami100-06")
radio = MibIdentifier((1, 3, 6, 1, 4, 1, 3727, 20, 20))
config = MibIdentifier((1, 3, 6, 1, 4, 1, 3727, 20, 20, 1))
cnfgT1LineCode = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("b8zs", 1), ("ami", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfgT1LineCode.setStatus('mandatory')
cnfgT1LineBuildOut = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("lb-0-133-ft", 1), ("lb-133-266-ft", 2), ("lb-266-399-ft", 3), ("lb-399-533-ft", 4), ("lb-533-655-ft", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfgT1LineBuildOut.setStatus('mandatory')
cnfgT1NearEndRadioLoopback = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfgT1NearEndRadioLoopback.setStatus('mandatory')
cnfgT1FarEndRadioLoopback = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfgT1FarEndRadioLoopback.setStatus('mandatory')
cnfgT1InputAlarm = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfgT1InputAlarm.setStatus('mandatory')
cnfgAIS = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfgAIS.setStatus('mandatory')
cnfgOrderwireAddr = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfgOrderwireAddr.setStatus('mandatory')
cnfgLinkSecurityCode = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfgLinkSecurityCode.setStatus('mandatory')
cnfgLearningFilter = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfgLearningFilter.setStatus('mandatory')
cnfgFiberOpticInterface = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfgFiberOpticInterface.setStatus('mandatory')
cnfgEthernetDuplex = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("full-duplex", 1), ("half-duplex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cnfgEthernetDuplex.setStatus('mandatory')
cnfgDataRate = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("full-duplex-45-MB", 1), ("datarate2", 2), ("datarate3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfgDataRate.setStatus('mandatory')
cnfgInterfaceType = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("t1-100BaseT", 1), ("t1-10BaseT", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfgInterfaceType.setStatus('mandatory')
cnfgIDUSWVersion = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfgIDUSWVersion.setStatus('mandatory')
cnfgNMUSWVersion = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnfgNMUSWVersion.setStatus('mandatory')
perf = MibIdentifier((1, 3, 6, 1, 4, 1, 3727, 20, 20, 4))
perfCurrentBER = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfCurrentBER.setStatus('mandatory')
perfCurrentRSL = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfCurrentRSL.setStatus('mandatory')
perfErrorSeconds = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfErrorSeconds.setStatus('mandatory')
perfSeverelyErroredSeconds = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfSeverelyErroredSeconds.setStatus('mandatory')
perfMinRSL = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfMinRSL.setStatus('mandatory')
perfMaxRSL = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfMaxRSL.setStatus('mandatory')
perfElapsedSecondsSinceReset = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfElapsedSecondsSinceReset.setStatus('mandatory')
perfHistoryReset = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("history-reset", 1), ("normal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: perfHistoryReset.setStatus('mandatory')
status = MibIdentifier((1, 3, 6, 1, 4, 1, 3727, 20, 20, 2))
statRadioLogHealth = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal-health", 1), ("warning-health", 2), ("minor-health", 3), ("major-health", 4), ("critical-health", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statRadioLogHealth.setStatus('mandatory')
statNMULink = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("link-down", 1), ("link-up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statNMULink.setStatus('mandatory')
statAlarmSummary = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("alarm-unknown", 1), ("alarm-normal", 2), ("alarm-triggered", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statAlarmSummary.setStatus('mandatory')
statT1Input = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("alarm-unknown", 1), ("alarm-normal", 2), ("alarm-triggered", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statT1Input.setStatus('mandatory')
statT1CodeViolation = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("alarm-unknown", 1), ("alarm-normal", 2), ("alarm-triggered", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statT1CodeViolation.setStatus('mandatory')
statT1LineDriver = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 2, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("alarm-unknown", 1), ("alarm-normal", 2), ("alarm-triggered", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statT1LineDriver.setStatus('mandatory')
statT1AIS = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("alarm-unknown", 1), ("alarm-normal", 2), ("alarm-triggered", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statT1AIS.setStatus('mandatory')
statRadioSync = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("alarm-unknown", 1), ("alarm-normal", 2), ("alarm-triggered", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statRadioSync.setStatus('mandatory')
statBitError = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 2, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("alarm-unknown", 1), ("alarm-normal", 2), ("alarm-triggered", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statBitError.setStatus('mandatory')
statFan1 = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 2, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("alarm-unknown", 1), ("alarm-normal", 2), ("alarm-triggered", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statFan1.setStatus('mandatory')
statFan2 = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 2, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("alarm-unknown", 1), ("alarm-normal", 2), ("alarm-triggered", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statFan2.setStatus('mandatory')
statRxSynth = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 2, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("alarm-unknown", 1), ("alarm-normal", 2), ("alarm-triggered", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statRxSynth.setStatus('mandatory')
statTxSynth = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 2, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("alarm-unknown", 1), ("alarm-normal", 2), ("alarm-triggered", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statTxSynth.setStatus('mandatory')
mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 3727, 20, 20, 3))
mgmtNMULinkTrapControl = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-trap", 1), ("send-trap-on-alarm-transition", 2), ("send-trap-on-normal-transition", 3), ("send-trap-on-both-transitions", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtNMULinkTrapControl.setStatus('mandatory')
mgmtNMULinkSeverity = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("minor", 3), ("major", 4), ("critical", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtNMULinkSeverity.setStatus('mandatory')
mgmtT1InputTrapControl = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-trap", 1), ("send-trap-on-alarm-transition", 2), ("send-trap-on-normal-transition", 3), ("send-trap-on-both-transitions", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtT1InputTrapControl.setStatus('mandatory')
mgmtT1InputSeverity = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("minor", 3), ("major", 4), ("critical", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtT1InputSeverity.setStatus('mandatory')
mgmtT1CodeViolationTrapControl = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-trap", 1), ("send-trap-on-alarm-transition", 2), ("send-trap-on-normal-transition", 3), ("send-trap-on-both-transitions", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtT1CodeViolationTrapControl.setStatus('mandatory')
mgmtT1CodeViolationSeverity = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("minor", 3), ("major", 4), ("critical", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtT1CodeViolationSeverity.setStatus('mandatory')
mgmtT1LineDriverTrapControl = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-trap", 1), ("send-trap-on-alarm-transition", 2), ("send-trap-on-normal-transition", 3), ("send-trap-on-both-transitions", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtT1LineDriverTrapControl.setStatus('mandatory')
mgmtT1LineDriverSeverity = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("minor", 3), ("major", 4), ("critical", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtT1LineDriverSeverity.setStatus('mandatory')
mgmtT1AISTrapControl = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-trap", 1), ("send-trap-on-alarm-transition", 2), ("send-trap-on-normal-transition", 3), ("send-trap-on-both-transitions", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtT1AISTrapControl.setStatus('mandatory')
mgmtT1AISSeverity = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("minor", 3), ("major", 4), ("critical", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtT1AISSeverity.setStatus('mandatory')
mgmtRadioSyncTrapControl = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-trap", 1), ("send-trap-on-alarm-transition", 2), ("send-trap-on-normal-transition", 3), ("send-trap-on-both-transitions", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtRadioSyncTrapControl.setStatus('mandatory')
mgmtRadioSyncSeverity = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("minor", 3), ("major", 4), ("critical", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtRadioSyncSeverity.setStatus('mandatory')
mgmtBitErrorTrapControl = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-trap", 1), ("send-trap-on-alarm-transition", 2), ("send-trap-on-normal-transition", 3), ("send-trap-on-both-transitions", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtBitErrorTrapControl.setStatus('mandatory')
mgmtBitErrorSeverity = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("minor", 3), ("major", 4), ("critical", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtBitErrorSeverity.setStatus('mandatory')
mgmtFan1TrapControl = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-trap", 1), ("send-trap-on-alarm-transition", 2), ("send-trap-on-normal-transition", 3), ("send-trap-on-both-transitions", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtFan1TrapControl.setStatus('mandatory')
mgmtFan1Severity = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("minor", 3), ("major", 4), ("critical", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtFan1Severity.setStatus('mandatory')
mgmtFan2TrapControl = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 3, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-trap", 1), ("send-trap-on-alarm-transition", 2), ("send-trap-on-normal-transition", 3), ("send-trap-on-both-transitions", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtFan2TrapControl.setStatus('mandatory')
mgmtFan2Severity = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("minor", 3), ("major", 4), ("critical", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtFan2Severity.setStatus('mandatory')
mgmtRxSynthTrapControl = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-trap", 1), ("send-trap-on-alarm-transition", 2), ("send-trap-on-normal-transition", 3), ("send-trap-on-both-transitions", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtRxSynthTrapControl.setStatus('mandatory')
mgmtRxSynthSeverity = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 3, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("minor", 3), ("major", 4), ("critical", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtRxSynthSeverity.setStatus('mandatory')
mgmtTxSynthTrapControl = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-trap", 1), ("send-trap-on-alarm-transition", 2), ("send-trap-on-normal-transition", 3), ("send-trap-on-both-transitions", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtTxSynthTrapControl.setStatus('mandatory')
mgmtTxSynthSeverity = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 3, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("minor", 3), ("major", 4), ("critical", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtTxSynthSeverity.setStatus('mandatory')
mgmtTrapHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 3727, 20, 20, 3, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtTrapHysteresis.setStatus('mandatory')
nmuLinkTrap = NotificationType((1, 3, 6, 1, 4, 1, 3727, 20, 20, 2) + (0,1)).setObjects(("WESTERN-MULTIPLEX-MIB", "trapSequenceNumber"), ("WESTERN-MULTIPLEX-RAD10006-MIB", "mgmtNMULinkSeverity"), ("WESTERN-MULTIPLEX-RAD10006-MIB", "statNMULink"))
t1InTrap = NotificationType((1, 3, 6, 1, 4, 1, 3727, 20, 20, 2) + (0,2)).setObjects(("WESTERN-MULTIPLEX-MIB", "trapSequenceNumber"), ("WESTERN-MULTIPLEX-RAD10006-MIB", "mgmtT1InputSeverity"), ("WESTERN-MULTIPLEX-RAD10006-MIB", "statT1Input"))
t1CvTrap = NotificationType((1, 3, 6, 1, 4, 1, 3727, 20, 20, 2) + (0,3)).setObjects(("WESTERN-MULTIPLEX-MIB", "trapSequenceNumber"), ("WESTERN-MULTIPLEX-RAD10006-MIB", "mgmtT1CodeViolationSeverity"), ("WESTERN-MULTIPLEX-RAD10006-MIB", "statT1CodeViolation"))
t1LoTrap = NotificationType((1, 3, 6, 1, 4, 1, 3727, 20, 20, 2) + (0,4)).setObjects(("WESTERN-MULTIPLEX-MIB", "trapSequenceNumber"), ("WESTERN-MULTIPLEX-RAD10006-MIB", "mgmtT1LineDriverSeverity"), ("WESTERN-MULTIPLEX-RAD10006-MIB", "statT1LineDriver"))
t1AisTrap = NotificationType((1, 3, 6, 1, 4, 1, 3727, 20, 20, 2) + (0,5)).setObjects(("WESTERN-MULTIPLEX-MIB", "trapSequenceNumber"), ("WESTERN-MULTIPLEX-RAD10006-MIB", "mgmtT1AISSeverity"), ("WESTERN-MULTIPLEX-RAD10006-MIB", "statT1AIS"))
radioSyncTrap = NotificationType((1, 3, 6, 1, 4, 1, 3727, 20, 20, 2) + (0,6)).setObjects(("WESTERN-MULTIPLEX-MIB", "trapSequenceNumber"), ("WESTERN-MULTIPLEX-RAD10006-MIB", "mgmtRadioSyncSeverity"), ("WESTERN-MULTIPLEX-RAD10006-MIB", "statRadioSync"))
berTrap = NotificationType((1, 3, 6, 1, 4, 1, 3727, 20, 20, 2) + (0,7)).setObjects(("WESTERN-MULTIPLEX-MIB", "trapSequenceNumber"), ("WESTERN-MULTIPLEX-RAD10006-MIB", "mgmtBitErrorSeverity"), ("WESTERN-MULTIPLEX-RAD10006-MIB", "statBitError"))
fan1Trap = NotificationType((1, 3, 6, 1, 4, 1, 3727, 20, 20, 2) + (0,8)).setObjects(("WESTERN-MULTIPLEX-MIB", "trapSequenceNumber"), ("WESTERN-MULTIPLEX-RAD10006-MIB", "mgmtFan1Severity"), ("WESTERN-MULTIPLEX-RAD10006-MIB", "statFan1"))
fan2Trap = NotificationType((1, 3, 6, 1, 4, 1, 3727, 20, 20, 2) + (0,9)).setObjects(("WESTERN-MULTIPLEX-MIB", "trapSequenceNumber"), ("WESTERN-MULTIPLEX-RAD10006-MIB", "mgmtFan2Severity"), ("WESTERN-MULTIPLEX-RAD10006-MIB", "statFan2"))
rxSynthTrap = NotificationType((1, 3, 6, 1, 4, 1, 3727, 20, 20, 2) + (0,10)).setObjects(("WESTERN-MULTIPLEX-MIB", "trapSequenceNumber"), ("WESTERN-MULTIPLEX-RAD10006-MIB", "mgmtRxSynthSeverity"), ("WESTERN-MULTIPLEX-RAD10006-MIB", "statRxSynth"))
txSynthTrap = NotificationType((1, 3, 6, 1, 4, 1, 3727, 20, 20, 2) + (0,11)).setObjects(("WESTERN-MULTIPLEX-MIB", "trapSequenceNumber"), ("WESTERN-MULTIPLEX-RAD10006-MIB", "mgmtTxSynthSeverity"), ("WESTERN-MULTIPLEX-RAD10006-MIB", "statTxSynth"))
mibBuilder.exportSymbols("WESTERN-MULTIPLEX-RAD10006-MIB", mgmtT1InputSeverity=mgmtT1InputSeverity, perfHistoryReset=perfHistoryReset, mgmtNMULinkSeverity=mgmtNMULinkSeverity, mgmtRadioSyncTrapControl=mgmtRadioSyncTrapControl, berTrap=berTrap, mgmtT1LineDriverTrapControl=mgmtT1LineDriverTrapControl, config=config, statRxSynth=statRxSynth, cnfgOrderwireAddr=cnfgOrderwireAddr, nmuLinkTrap=nmuLinkTrap, radio=radio, mgmtFan2Severity=mgmtFan2Severity, mgmtTxSynthTrapControl=mgmtTxSynthTrapControl, statFan2=statFan2, t1CvTrap=t1CvTrap, perfErrorSeconds=perfErrorSeconds, rxSynthTrap=rxSynthTrap, cnfgDataRate=cnfgDataRate, western_multiplex=western_multiplex, cnfgT1LineCode=cnfgT1LineCode, mgmtBitErrorTrapControl=mgmtBitErrorTrapControl, statT1LineDriver=statT1LineDriver, mgmtT1InputTrapControl=mgmtT1InputTrapControl, mgmtRxSynthTrapControl=mgmtRxSynthTrapControl, mgmtFan2TrapControl=mgmtFan2TrapControl, mgmtT1CodeViolationSeverity=mgmtT1CodeViolationSeverity, fan2Trap=fan2Trap, cnfgLearningFilter=cnfgLearningFilter, radioSyncTrap=radioSyncTrap, perfMaxRSL=perfMaxRSL, statT1CodeViolation=statT1CodeViolation, t1InTrap=t1InTrap, mgmtFan1TrapControl=mgmtFan1TrapControl, cnfgLinkSecurityCode=cnfgLinkSecurityCode, mgmtT1LineDriverSeverity=mgmtT1LineDriverSeverity, mgmtTxSynthSeverity=mgmtTxSynthSeverity, cnfgIDUSWVersion=cnfgIDUSWVersion, t1LoTrap=t1LoTrap, statFan1=statFan1, cnfgT1LineBuildOut=cnfgT1LineBuildOut, perf=perf, cnfgT1NearEndRadioLoopback=cnfgT1NearEndRadioLoopback, statRadioSync=statRadioSync, mgmtBitErrorSeverity=mgmtBitErrorSeverity, perfElapsedSecondsSinceReset=perfElapsedSecondsSinceReset, mgmtRxSynthSeverity=mgmtRxSynthSeverity, mgmtT1CodeViolationTrapControl=mgmtT1CodeViolationTrapControl, t1AisTrap=t1AisTrap, cnfgFiberOpticInterface=cnfgFiberOpticInterface, cnfgNMUSWVersion=cnfgNMUSWVersion, cnfgEthernetDuplex=cnfgEthernetDuplex, statRadioLogHealth=statRadioLogHealth, tsunami100_06=tsunami100_06, status=status, mgmtTrapHysteresis=mgmtTrapHysteresis, cnfgT1FarEndRadioLoopback=cnfgT1FarEndRadioLoopback, perfCurrentBER=perfCurrentBER, statBitError=statBitError, perfSeverelyErroredSeconds=perfSeverelyErroredSeconds, mgmtRadioSyncSeverity=mgmtRadioSyncSeverity, statNMULink=statNMULink, statT1AIS=statT1AIS, perfCurrentRSL=perfCurrentRSL, cnfgInterfaceType=cnfgInterfaceType, mgmtT1AISTrapControl=mgmtT1AISTrapControl, statT1Input=statT1Input, statAlarmSummary=statAlarmSummary, mgmtNMULinkTrapControl=mgmtNMULinkTrapControl, txSynthTrap=txSynthTrap, cnfgAIS=cnfgAIS, perfMinRSL=perfMinRSL, mgmt=mgmt, fan1Trap=fan1Trap, mgmtT1AISSeverity=mgmtT1AISSeverity, cnfgT1InputAlarm=cnfgT1InputAlarm, statTxSynth=statTxSynth, mgmtFan1Severity=mgmtFan1Severity)
