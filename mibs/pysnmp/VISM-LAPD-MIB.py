#
# PySNMP MIB module VISM-LAPD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VISM-LAPD-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:27:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
voice, = mibBuilder.importSymbols("BASIS-MIB", "voice")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, NotificationType, iso, TimeTicks, Bits, ModuleIdentity, ObjectIdentity, Integer32, MibIdentifier, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Counter32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "NotificationType", "iso", "TimeTicks", "Bits", "ModuleIdentity", "ObjectIdentity", "Integer32", "MibIdentifier", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Counter32", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
vismLapdGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12))
vismLapdTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 1), )
if mibBuilder.loadTexts: vismLapdTable.setStatus('mandatory')
vismLapdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 1, 1), ).setIndexNames((0, "VISM-LAPD-MIB", "vismLapdIndex"))
if mibBuilder.loadTexts: vismLapdEntry.setStatus('mandatory')
vismLapdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdIndex.setStatus('mandatory')
vismLapdAppType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pri", 1), ("gr-303", 2))).clone('pri')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismLapdAppType.setStatus('mandatory')
vismLapdWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismLapdWinSize.setStatus('mandatory')
vismLapdN200 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismLapdN200.setStatus('mandatory')
vismLapdT200 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1023000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismLapdT200.setStatus('mandatory')
vismLapdT203 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 1023000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismLapdT203.setStatus('mandatory')
vismLapdType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("ccitt", 1), ("att5EssPRA", 3), ("att4Ess", 4), ("ntDMS100PRA", 6), ("vn2or3", 7), ("insNet", 8), ("tr6MPC", 9), ("tr6PBX", 10), ("ausp", 12), ("ni1", 13), ("etsi", 14), ("bc303TMC", 15), ("bc303CSC", 16), ("ntDMS250", 17), ("bellcore", 18), ("ni2", 19))).clone('ni2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismLapdType.setStatus('mandatory')
vismLapdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismLapdRowStatus.setStatus('mandatory')
vismLapdSide = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("network", 1), ("user", 2))).clone('network')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vismLapdSide.setStatus('mandatory')
vismLapdTrunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("backhaul", 1), ("lapdTrunking", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdTrunkType.setStatus('mandatory')
vismLapdStatsTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2), )
if mibBuilder.loadTexts: vismLapdStatsTable.setStatus('mandatory')
vismLapdStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1), ).setIndexNames((0, "VISM-LAPD-MIB", "vismLapdStatsIndex"))
if mibBuilder.loadTexts: vismLapdStatsEntry.setStatus('mandatory')
vismLapdStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 248))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdStatsIndex.setStatus('mandatory')
vismLapdRxInfoFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdRxInfoFrames.setStatus('mandatory')
vismLapdTxInfoFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdTxInfoFrames.setStatus('mandatory')
vismLapdRxReadyFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdRxReadyFrames.setStatus('mandatory')
vismLapdTxReadyFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdTxReadyFrames.setStatus('mandatory')
vismLapdRxNotReadyFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdRxNotReadyFrames.setStatus('mandatory')
vismLapdTxNotReadyFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdTxNotReadyFrames.setStatus('mandatory')
vismLapdRxSABMFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdRxSABMFrames.setStatus('mandatory')
vismLapdTxSABMFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdTxSABMFrames.setStatus('mandatory')
vismLapdRxDisconFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdRxDisconFrames.setStatus('mandatory')
vismLapdTxDisconFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdTxDisconFrames.setStatus('mandatory')
vismLapdRxUAFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdRxUAFrames.setStatus('mandatory')
vismLapdTxUAFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdTxUAFrames.setStatus('mandatory')
vismLapdRxDiscModeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdRxDiscModeFrames.setStatus('mandatory')
vismLapdTxDiscModeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdTxDiscModeFrames.setStatus('mandatory')
vismLapdRxFrmRejectFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdRxFrmRejectFrames.setStatus('mandatory')
vismLapdTxFrmRejectFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdTxFrmRejectFrames.setStatus('mandatory')
vismLapdRxExchIdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdRxExchIdFrames.setStatus('mandatory')
vismLapdTxExchIdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdTxExchIdFrames.setStatus('mandatory')
vismLapdRxUnumInfoFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdRxUnumInfoFrames.setStatus('mandatory')
vismLapdTxUnumInfoFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdTxUnumInfoFrames.setStatus('mandatory')
vismLapdRxRejectFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdRxRejectFrames.setStatus('mandatory')
vismLapdTxRejectFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdTxRejectFrames.setStatus('mandatory')
vismLapdRxInvalidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdRxInvalidFrames.setStatus('mandatory')
vismLapdDlcTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 3), )
if mibBuilder.loadTexts: vismLapdDlcTable.setStatus('mandatory')
vismLapdDlcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 3, 1), ).setIndexNames((0, "VISM-LAPD-MIB", "vismLapdDlcIndex"), (0, "VISM-LAPD-MIB", "vismLapdDlcSapi"), (0, "VISM-LAPD-MIB", "vismLapdDlcTei"))
if mibBuilder.loadTexts: vismLapdDlcEntry.setStatus('mandatory')
vismLapdDlcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 248))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdDlcIndex.setStatus('mandatory')
vismLapdDlcSapi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdDlcSapi.setStatus('mandatory')
vismLapdDlcTei = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdDlcTei.setStatus('mandatory')
vismLapdDlcLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 5, 12, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vismLapdDlcLinkState.setStatus('mandatory')
mibBuilder.exportSymbols("VISM-LAPD-MIB", vismLapdDlcTei=vismLapdDlcTei, vismLapdStatsTable=vismLapdStatsTable, vismLapdTable=vismLapdTable, vismLapdTxInfoFrames=vismLapdTxInfoFrames, vismLapdTxRejectFrames=vismLapdTxRejectFrames, vismLapdEntry=vismLapdEntry, vismLapdWinSize=vismLapdWinSize, vismLapdRxInfoFrames=vismLapdRxInfoFrames, vismLapdRxDiscModeFrames=vismLapdRxDiscModeFrames, vismLapdTxDiscModeFrames=vismLapdTxDiscModeFrames, vismLapdDlcEntry=vismLapdDlcEntry, vismLapdRxDisconFrames=vismLapdRxDisconFrames, vismLapdRxInvalidFrames=vismLapdRxInvalidFrames, vismLapdRowStatus=vismLapdRowStatus, vismLapdTxSABMFrames=vismLapdTxSABMFrames, vismLapdIndex=vismLapdIndex, vismLapdRxSABMFrames=vismLapdRxSABMFrames, vismLapdTxReadyFrames=vismLapdTxReadyFrames, vismLapdGrp=vismLapdGrp, vismLapdRxFrmRejectFrames=vismLapdRxFrmRejectFrames, vismLapdRxRejectFrames=vismLapdRxRejectFrames, vismLapdTxFrmRejectFrames=vismLapdTxFrmRejectFrames, vismLapdN200=vismLapdN200, vismLapdRxNotReadyFrames=vismLapdRxNotReadyFrames, vismLapdDlcSapi=vismLapdDlcSapi, vismLapdStatsEntry=vismLapdStatsEntry, vismLapdRxReadyFrames=vismLapdRxReadyFrames, vismLapdDlcLinkState=vismLapdDlcLinkState, vismLapdSide=vismLapdSide, vismLapdStatsIndex=vismLapdStatsIndex, vismLapdType=vismLapdType, vismLapdT203=vismLapdT203, vismLapdAppType=vismLapdAppType, vismLapdRxUnumInfoFrames=vismLapdRxUnumInfoFrames, vismLapdRxUAFrames=vismLapdRxUAFrames, vismLapdDlcIndex=vismLapdDlcIndex, vismLapdTxNotReadyFrames=vismLapdTxNotReadyFrames, vismLapdTrunkType=vismLapdTrunkType, vismLapdTxExchIdFrames=vismLapdTxExchIdFrames, vismLapdTxDisconFrames=vismLapdTxDisconFrames, vismLapdTxUAFrames=vismLapdTxUAFrames, vismLapdRxExchIdFrames=vismLapdRxExchIdFrames, vismLapdT200=vismLapdT200, vismLapdDlcTable=vismLapdDlcTable, vismLapdTxUnumInfoFrames=vismLapdTxUnumInfoFrames)
