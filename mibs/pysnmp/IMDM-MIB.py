#
# PySNMP MIB module IMDM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IMDM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:41:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Counter32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, IpAddress, Bits, experimental, NotificationType, enterprises, Gauge32, Counter64, TimeTicks, Integer32, Unsigned32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "IpAddress", "Bits", "experimental", "NotificationType", "enterprises", "Gauge32", "Counter64", "TimeTicks", "Integer32", "Unsigned32", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
usr = MibIdentifier((1, 3, 6, 1, 4, 1, 429))
nas = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1))
imdm = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 19))
imdmCc = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 19, 1))
imdmCcTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 19, 1, 1), )
if mibBuilder.loadTexts: imdmCcTable.setStatus('mandatory')
imdmCcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 19, 1, 1, 1), ).setIndexNames((0, "IMDM-MIB", "imdmCcIndex"))
if mibBuilder.loadTexts: imdmCcEntry.setStatus('mandatory')
imdmCcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 19, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imdmCcIndex.setStatus('mandatory')
imdmCcRateAdapV110 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 19, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imdmCcRateAdapV110.setStatus('mandatory')
imdmCcFixedNtwkRate = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 19, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notForced", 1), ("forceNetworkRate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imdmCcFixedNtwkRate.setStatus('mandatory')
imdmCcNetworkRate = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 19, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("kbps56", 1), ("kbps64", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imdmCcNetworkRate.setStatus('mandatory')
imdmCcBcLinkDly = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 19, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noDelay", 1), ("delay", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imdmCcBcLinkDly.setStatus('mandatory')
imdmCcAnlgOvrDig = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 19, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imdmCcAnlgOvrDig.setStatus('mandatory')
imdmCcAsyncPPP = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 19, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imdmCcAsyncPPP.setStatus('mandatory')
imdmCcX75 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 19, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imdmCcX75.setStatus('mandatory')
imdmCcStarV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 19, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("autodetect", 1), ("v120rateAdapOnly", 2), ("v110rateAdapOnly", 3), ("modemOrFaxOnly", 4), ("clearChannelSync", 5), ("asyncSyncPPPconv", 6), ("x75", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imdmCcStarV2.setStatus('mandatory')
imdmCcStarU1 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 19, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("v120", 2), ("x75", 3), ("ppp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imdmCcStarU1.setStatus('mandatory')
imdmCcStarU2 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 19, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("v110", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imdmCcStarU2.setStatus('mandatory')
imdmCcStarU3 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 19, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("analogModemFax", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imdmCcStarU3.setStatus('mandatory')
imdmCcV120 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 19, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imdmCcV120.setStatus('mandatory')
imdmCcFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 19, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imdmCcFrameSize.setStatus('mandatory')
imdmCcWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 19, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imdmCcWindowSize.setStatus('mandatory')
imdmLi = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 19, 2))
imdmLiTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 19, 2, 1), )
if mibBuilder.loadTexts: imdmLiTable.setStatus('mandatory')
imdmLiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 19, 2, 1, 1), ).setIndexNames((0, "IMDM-MIB", "imdmLiIndex"))
if mibBuilder.loadTexts: imdmLiEntry.setStatus('mandatory')
imdmLiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 19, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imdmLiIndex.setStatus('mandatory')
imdmLiConnTypeToCo = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 19, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pointToPoint", 1), ("multipoint", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imdmLiConnTypeToCo.setStatus('optional')
imdmLiDN = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 19, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imdmLiDN.setStatus('optional')
imdmLiSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 19, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imdmLiSPID.setStatus('optional')
imdmLiTermEndPointID = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 19, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imdmLiTermEndPointID.setStatus('optional')
imdmLiProtTypeSw = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 19, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("aTT5ESSCustom", 1), ("northernTelecomDMS100", 2), ("nationalISDN1", 3), ("nationalISDN2", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imdmLiProtTypeSw.setStatus('optional')
mibBuilder.exportSymbols("IMDM-MIB", imdmCcNetworkRate=imdmCcNetworkRate, imdmCcIndex=imdmCcIndex, imdmCcTable=imdmCcTable, imdmCcStarU1=imdmCcStarU1, imdmCcFixedNtwkRate=imdmCcFixedNtwkRate, imdmLiIndex=imdmLiIndex, imdmCcFrameSize=imdmCcFrameSize, imdmCcX75=imdmCcX75, imdmCcWindowSize=imdmCcWindowSize, imdmLiTermEndPointID=imdmLiTermEndPointID, imdmCcAsyncPPP=imdmCcAsyncPPP, imdmCcRateAdapV110=imdmCcRateAdapV110, imdmCcStarU3=imdmCcStarU3, imdmCcAnlgOvrDig=imdmCcAnlgOvrDig, imdmLiConnTypeToCo=imdmLiConnTypeToCo, imdmCcStarU2=imdmCcStarU2, imdmCcV120=imdmCcV120, imdmLiDN=imdmLiDN, imdmLiEntry=imdmLiEntry, usr=usr, nas=nas, imdmLiTable=imdmLiTable, imdmCcStarV2=imdmCcStarV2, imdmCc=imdmCc, imdm=imdm, imdmCcEntry=imdmCcEntry, imdmLi=imdmLi, imdmLiProtTypeSw=imdmLiProtTypeSw, imdmLiSPID=imdmLiSPID, imdmCcBcLinkDly=imdmCcBcLinkDly)
