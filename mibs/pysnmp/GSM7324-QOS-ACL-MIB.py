#
# PySNMP MIB module GSM7324-QOS-ACL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GSM7324-QOS-ACL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:06:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
gsm7324QOS, = mibBuilder.importSymbols("GSM7324-QOS-MIB", "gsm7324QOS")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, ObjectIdentity, TimeTicks, Gauge32, NotificationType, ModuleIdentity, IpAddress, Integer32, iso, Unsigned32, Bits, Counter32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "ObjectIdentity", "TimeTicks", "Gauge32", "NotificationType", "ModuleIdentity", "IpAddress", "Integer32", "iso", "Unsigned32", "Bits", "Counter32", "MibIdentifier")
RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention")
gsm7324QOSACL = ModuleIdentity((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2))
gsm7324QOSACL.setRevisions(('2003-05-06 12:00',))
if mibBuilder.loadTexts: gsm7324QOSACL.setLastUpdated('200305061200Z')
if mibBuilder.loadTexts: gsm7324QOSACL.setOrganization('Netgear')
aclTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 1), )
if mibBuilder.loadTexts: aclTable.setStatus('current')
aclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 1, 1), ).setIndexNames((0, "GSM7324-QOS-ACL-MIB", "aclIndex"))
if mibBuilder.loadTexts: aclEntry.setStatus('current')
aclStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclStatus.setStatus('current')
aclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: aclIndex.setStatus('current')
aclIfTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 2), )
if mibBuilder.loadTexts: aclIfTable.setStatus('current')
aclIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 2, 1), ).setIndexNames((0, "GSM7324-QOS-ACL-MIB", "aclIndex"), (0, "GSM7324-QOS-ACL-MIB", "aclIfIndex"), (0, "GSM7324-QOS-ACL-MIB", "aclIfDirection"))
if mibBuilder.loadTexts: aclIfEntry.setStatus('current')
aclIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: aclIfIndex.setStatus('current')
aclIfDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2))))
if mibBuilder.loadTexts: aclIfDirection.setStatus('current')
aclIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIfStatus.setStatus('current')
aclRuleTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 3), )
if mibBuilder.loadTexts: aclRuleTable.setStatus('current')
aclRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 3, 1), ).setIndexNames((0, "GSM7324-QOS-ACL-MIB", "aclIndex"), (0, "GSM7324-QOS-ACL-MIB", "aclRuleIndex"))
if mibBuilder.loadTexts: aclRuleEntry.setStatus('current')
aclRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: aclRuleIndex.setStatus('current')
aclRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('deny')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleAction.setStatus('current')
aclRuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleProtocol.setStatus('current')
aclRuleSrcIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 3, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleSrcIpAddress.setStatus('current')
aclRuleSrcIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 3, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleSrcIpMask.setStatus('current')
aclRuleSrcL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 3, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleSrcL4Port.setStatus('current')
aclRuleSrcL4PortRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 3, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleSrcL4PortRangeStart.setStatus('current')
aclRuleSrcL4PortRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 3, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleSrcL4PortRangeEnd.setStatus('current')
aclRuleDestIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 3, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleDestIpAddress.setStatus('current')
aclRuleDestIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 3, 1, 10), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleDestIpMask.setStatus('current')
aclRuleDestL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 3, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleDestL4Port.setStatus('current')
aclRuleDestL4PortRangeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 3, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleDestL4PortRangeStart.setStatus('current')
aclRuleDestL4PortRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 3, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleDestL4PortRangeEnd.setStatus('current')
aclRuleIPDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 3, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleIPDSCP.setStatus('current')
aclRuleIpPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 3, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleIpPrecedence.setStatus('current')
aclRuleIpTosBits = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 3, 1, 16), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleIpTosBits.setStatus('current')
aclRuleIpTosMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 3, 1, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleIpTosMask.setStatus('current')
aclRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 1, 7, 3, 2, 3, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRuleStatus.setStatus('current')
mibBuilder.exportSymbols("GSM7324-QOS-ACL-MIB", aclRuleSrcL4PortRangeEnd=aclRuleSrcL4PortRangeEnd, aclIfTable=aclIfTable, aclIfIndex=aclIfIndex, aclTable=aclTable, aclRuleIndex=aclRuleIndex, aclRuleProtocol=aclRuleProtocol, aclRuleSrcL4Port=aclRuleSrcL4Port, aclRuleDestL4PortRangeEnd=aclRuleDestL4PortRangeEnd, aclRuleDestIpMask=aclRuleDestIpMask, aclRuleIpPrecedence=aclRuleIpPrecedence, PYSNMP_MODULE_ID=gsm7324QOSACL, gsm7324QOSACL=gsm7324QOSACL, aclIndex=aclIndex, aclRuleIPDSCP=aclRuleIPDSCP, aclRuleTable=aclRuleTable, aclRuleStatus=aclRuleStatus, aclStatus=aclStatus, aclRuleDestL4PortRangeStart=aclRuleDestL4PortRangeStart, aclRuleAction=aclRuleAction, aclRuleSrcIpMask=aclRuleSrcIpMask, aclIfStatus=aclIfStatus, aclRuleIpTosBits=aclRuleIpTosBits, aclRuleSrcL4PortRangeStart=aclRuleSrcL4PortRangeStart, aclRuleSrcIpAddress=aclRuleSrcIpAddress, aclIfDirection=aclIfDirection, aclIfEntry=aclIfEntry, aclEntry=aclEntry, aclRuleIpTosMask=aclRuleIpTosMask, aclRuleEntry=aclRuleEntry, aclRuleDestIpAddress=aclRuleDestIpAddress, aclRuleDestL4Port=aclRuleDestL4Port)
