#
# PySNMP MIB module ELTEX-MES-PHYSICAL-DESCRIPTION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ELTEX-MES-PHYSICAL-DESCRIPTION-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:47:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
eltMes, = mibBuilder.importSymbols("ELTEX-MES", "eltMes")
ifIndex, InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex", "InterfaceIndexOrZero")
JackType, = mibBuilder.importSymbols("MAU-MIB", "JackType")
rlCascadeEntry, rlPhdUnitGenParamEntry = mibBuilder.importSymbols("RADLAN-Physicaldescription-MIB", "rlCascadeEntry", "rlPhdUnitGenParamEntry")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Unsigned32, Bits, ObjectIdentity, IpAddress, Integer32, MibIdentifier, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, TimeTicks, Counter64, Counter32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Unsigned32", "Bits", "ObjectIdentity", "IpAddress", "Integer32", "MibIdentifier", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "TimeTicks", "Counter64", "Counter32", "ModuleIdentity")
PhysAddress, RowStatus, TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "RowStatus", "TextualConvention", "TruthValue", "DisplayString")
eltMesPhysicalDescription = ModuleIdentity((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53))
eltMesPhysicalDescription.setRevisions(('2015-09-14 00:00', '2013-03-21 00:00',))
if mibBuilder.loadTexts: eltMesPhysicalDescription.setLastUpdated('201509140000Z')
if mibBuilder.loadTexts: eltMesPhysicalDescription.setOrganization('Eltex Ltd.')
eltMesPhdTransceiver = MibIdentifier((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 1))
eltPhdTransceiverInfoTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 1, 1), )
if mibBuilder.loadTexts: eltPhdTransceiverInfoTable.setStatus('current')
eltPhdTransceiverInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: eltPhdTransceiverInfoEntry.setStatus('current')
eltPhdTransceiverInfoConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 32, 33, 34, 127, 255))).clone(namedValues=NamedValues(("unknown", 0), ("sc", 1), ("fibre-ch-st1", 2), ("fibre-ch-st2", 3), ("bnc-tnc", 4), ("fibre-ch-coaxial-headers", 5), ("fibrejack", 6), ("lc", 7), ("mt-rj", 8), ("mu", 9), ("sg", 10), ("optical-pigtail", 11), ("mpo-parallel-optic", 12), ("hssdc-ii", 32), ("copper-pigtail", 33), ("rj45", 34), ("unallocated", 127), ("vendorspec", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPhdTransceiverInfoConnectorType.setStatus('current')
eltPhdTransceiverInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 127, 255))).clone(namedValues=NamedValues(("unknown", 0), ("gbic", 1), ("sff", 2), ("sfp-sfpplus", 3), ("xbi-300-pin", 4), ("xenpak", 5), ("xfp", 6), ("xff", 7), ("xfp-e", 8), ("xpak", 9), ("x2", 10), ("dwdm-sfp", 11), ("qsfp", 12), ("reserved", 127), ("vendorspec", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPhdTransceiverInfoType.setStatus('current')
eltPhdTransceiverInfoComplianceCode = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 1, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPhdTransceiverInfoComplianceCode.setStatus('current')
eltPhdTransceiverInfoWaveLength = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPhdTransceiverInfoWaveLength.setStatus('current')
eltPhdTransceiverInfoVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 1, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPhdTransceiverInfoVendorName.setStatus('current')
eltPhdTransceiverInfoSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 1, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPhdTransceiverInfoSerialNumber.setStatus('current')
eltPhdTransceiverInfoFiberDiameterType = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 65535))).clone(namedValues=NamedValues(("fiber9", 1), ("fiber50", 2), ("fiber625", 3), ("copper", 4), ("unknown", 65535)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPhdTransceiverInfoFiberDiameterType.setStatus('current')
eltPhdTransceiverInfoTransferDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPhdTransceiverInfoTransferDistance.setStatus('current')
eltPhdTransceiverInfoDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 1, 1, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPhdTransceiverInfoDiagnostic.setStatus('current')
eltPhdTransceiverThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 1, 2), )
if mibBuilder.loadTexts: eltPhdTransceiverThresholdTable.setStatus('current')
eltPhdTransceiverThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ELTEX-MES-PHYSICAL-DESCRIPTION-MIB", "eltPhdTransceiverThresholdType"))
if mibBuilder.loadTexts: eltPhdTransceiverThresholdEntry.setStatus('current')
eltPhdTransceiverThresholdType = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("temperature", 0), ("supply", 1), ("txBias", 2), ("txOutput", 3), ("rxOpticalPower", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltPhdTransceiverThresholdType.setStatus('current')
eltPhdTransceiverThresholdAction = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("log", 1), ("send-trap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltPhdTransceiverThresholdAction.setStatus('current')
eltPhdTransceiverThresholdHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 1, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltPhdTransceiverThresholdHighAlarm.setStatus('current')
eltPhdTransceiverThresholdHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltPhdTransceiverThresholdHighWarning.setStatus('current')
eltPhdTransceiverThresholdLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 1, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltPhdTransceiverThresholdLowWarning.setStatus('current')
eltPhdTransceiverThresholdLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 1, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltPhdTransceiverThresholdLowAlarm.setStatus('current')
eltPhdTransceiverThresholdTimer = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 1, 3), Integer32().clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltPhdTransceiverThresholdTimer.setStatus('current')
eltPhdUnitGenParamTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 2), )
if mibBuilder.loadTexts: eltPhdUnitGenParamTable.setStatus('current')
eltPhdUnitGenParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 2, 1), )
rlPhdUnitGenParamEntry.registerAugmentions(("ELTEX-MES-PHYSICAL-DESCRIPTION-MIB", "eltPhdUnitGenParamEntry"))
eltPhdUnitGenParamEntry.setIndexNames(*rlPhdUnitGenParamEntry.getIndexNames())
if mibBuilder.loadTexts: eltPhdUnitGenParamEntry.setStatus('current')
eltPhdUnitGenParamCommitHash = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltPhdUnitGenParamCommitHash.setStatus('current')
eltCascadeTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 3), )
if mibBuilder.loadTexts: eltCascadeTable.setStatus('current')
eltCascadeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 3, 1), )
rlCascadeEntry.registerAugmentions(("ELTEX-MES-PHYSICAL-DESCRIPTION-MIB", "eltCascadeEntry"))
eltCascadeEntry.setIndexNames(*rlCascadeEntry.getIndexNames())
if mibBuilder.loadTexts: eltCascadeEntry.setStatus('current')
eltCascadeLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 53, 3, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eltCascadeLastChange.setStatus('current')
mibBuilder.exportSymbols("ELTEX-MES-PHYSICAL-DESCRIPTION-MIB", eltPhdTransceiverInfoSerialNumber=eltPhdTransceiverInfoSerialNumber, PYSNMP_MODULE_ID=eltMesPhysicalDescription, eltPhdTransceiverInfoDiagnostic=eltPhdTransceiverInfoDiagnostic, eltMesPhdTransceiver=eltMesPhdTransceiver, eltPhdTransceiverInfoComplianceCode=eltPhdTransceiverInfoComplianceCode, eltPhdTransceiverThresholdAction=eltPhdTransceiverThresholdAction, eltPhdTransceiverInfoTable=eltPhdTransceiverInfoTable, eltPhdTransceiverThresholdTimer=eltPhdTransceiverThresholdTimer, eltCascadeTable=eltCascadeTable, eltPhdTransceiverThresholdLowAlarm=eltPhdTransceiverThresholdLowAlarm, eltCascadeLastChange=eltCascadeLastChange, eltPhdTransceiverThresholdEntry=eltPhdTransceiverThresholdEntry, eltPhdTransceiverInfoWaveLength=eltPhdTransceiverInfoWaveLength, eltPhdTransceiverThresholdLowWarning=eltPhdTransceiverThresholdLowWarning, eltPhdTransceiverInfoFiberDiameterType=eltPhdTransceiverInfoFiberDiameterType, eltCascadeEntry=eltCascadeEntry, eltPhdTransceiverInfoType=eltPhdTransceiverInfoType, eltMesPhysicalDescription=eltMesPhysicalDescription, eltPhdTransceiverThresholdHighAlarm=eltPhdTransceiverThresholdHighAlarm, eltPhdTransceiverInfoTransferDistance=eltPhdTransceiverInfoTransferDistance, eltPhdTransceiverThresholdType=eltPhdTransceiverThresholdType, eltPhdTransceiverThresholdTable=eltPhdTransceiverThresholdTable, eltPhdUnitGenParamTable=eltPhdUnitGenParamTable, eltPhdUnitGenParamEntry=eltPhdUnitGenParamEntry, eltPhdTransceiverInfoEntry=eltPhdTransceiverInfoEntry, eltPhdTransceiverInfoConnectorType=eltPhdTransceiverInfoConnectorType, eltPhdTransceiverInfoVendorName=eltPhdTransceiverInfoVendorName, eltPhdTransceiverThresholdHighWarning=eltPhdTransceiverThresholdHighWarning, eltPhdUnitGenParamCommitHash=eltPhdUnitGenParamCommitHash)
