#
# PySNMP MIB module NCRBSC-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NCRBSC-OPT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:08:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, IpAddress, TimeTicks, ObjectIdentity, Bits, Counter32, iso, NotificationType, Counter64, ModuleIdentity, Integer32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "IpAddress", "TimeTicks", "ObjectIdentity", "Bits", "Counter32", "iso", "NotificationType", "Counter64", "ModuleIdentity", "Integer32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "enterprises")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1))
cdx6500PCTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1))
cdx6500PCTNCRBSCDeviceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 7))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1))
cdx6500PSTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1))
class DisplayString(OctetString):
    pass

cdx6500PPCTNCRBisyncTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 17), )
if mibBuilder.loadTexts: cdx6500PPCTNCRBisyncTable.setStatus('mandatory')
cdx6500PPCTNCRBisyncEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 17, 1), ).setIndexNames((0, "NCRBSC-OPT-MIB", "cdx6500NCRBSCCfgPortNumber"))
if mibBuilder.loadTexts: cdx6500PPCTNCRBisyncEntry.setStatus('mandatory')
cdx6500NCRBSCCfgPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500NCRBSCCfgPortNumber.setStatus('mandatory')
cdx6500NCRBSCCfgPADType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("tpad", 0), ("hpad", 1), ("newvalTpad", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500NCRBSCCfgPADType.setStatus('mandatory')
cdx6500NCRBSCCfgClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("int", 0), ("ext", 1), ("newvalInt", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500NCRBSCCfgClockSource.setStatus('mandatory')
cdx6500NCRBSCCfgClockSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 17, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1200, 19200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500NCRBSCCfgClockSpeed.setStatus('mandatory')
cdx6500NCRBSCCfgContention = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("hdx", 0), ("fdx", 1), ("newvalHdx", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500NCRBSCCfgContention.setStatus('mandatory')
cdx6500NCRBSCCfgNumDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 17, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500NCRBSCCfgNumDevices.setStatus('mandatory')
cdx6500NCRBSCCfgServTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 17, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500NCRBSCCfgServTimer.setStatus('mandatory')
cdx6500NCRBSCCfgErrThreshCount = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 17, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500NCRBSCCfgErrThreshCount.setStatus('mandatory')
cdx6500NCRBSCCfgRetranTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 17, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500NCRBSCCfgRetranTimeout.setStatus('mandatory')
cdx6500NCRBSCCfgInterBuffTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 17, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500NCRBSCCfgInterBuffTimeout.setStatus('mandatory')
cdx6500NCRBSCCfgPortSubAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 17, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500NCRBSCCfgPortSubAddr.setStatus('mandatory')
cdx6500NCRBSCCfgPortOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 17, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500NCRBSCCfgPortOptions.setStatus('mandatory')
cdx6500NCRBSCCfgRestrictConnDest = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 17, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500NCRBSCCfgRestrictConnDest.setStatus('mandatory')
cdx6500NCRBSCCfgBillRec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 17, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("newvalOff", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500NCRBSCCfgBillRec.setStatus('mandatory')
cdx6500NCRBSCCfgElectricalInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 17, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v24", 1), ("v35", 2), ("v36", 3), ("x21", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500NCRBSCCfgElectricalInterfaceType.setStatus('mandatory')
cdx6500NCRBSCCfgV24ElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 17, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ri", 1), ("tm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500NCRBSCCfgV24ElectricalInterfaceOption.setStatus('mandatory')
cdx6500NCRBSCCfgHighSpeedElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 17, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("xover", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500NCRBSCCfgHighSpeedElectricalInterfaceOption.setStatus('mandatory')
cdx6500PBCTNCRBSCDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 7, 1), )
if mibBuilder.loadTexts: cdx6500PBCTNCRBSCDeviceTable.setStatus('mandatory')
cdx6500PBCTNCRBSCDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 7, 1, 1), ).setIndexNames((0, "NCRBSC-OPT-MIB", "cdx6500ncrbscDevPortNumber"), (0, "NCRBSC-OPT-MIB", "cdx6500ncrbscDevEntry"))
if mibBuilder.loadTexts: cdx6500PBCTNCRBSCDeviceEntry.setStatus('mandatory')
cdx6500ncrbscDevPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscDevPortNumber.setStatus('mandatory')
cdx6500ncrbscDevEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscDevEntry.setStatus('mandatory')
cdx6500ncrbscBSCControlUnitAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 7, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscBSCControlUnitAddr.setStatus('mandatory')
cdx6500ncrbscDestControlUnitAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 7, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscDestControlUnitAddr.setStatus('mandatory')
cdx6500ncrbscAutocallMnemonic = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 7, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscAutocallMnemonic.setStatus('mandatory')
cdx6500ncrbscDeviceEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("newvalNo", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscDeviceEnabled.setStatus('mandatory')
cdx6500PPSTNCRBisyncTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17), )
if mibBuilder.loadTexts: cdx6500PPSTNCRBisyncTable.setStatus('mandatory')
cdx6500ncrbscPortStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1), ).setIndexNames((0, "NCRBSC-OPT-MIB", "cdx6500ncrbscStatPortNumber"))
if mibBuilder.loadTexts: cdx6500ncrbscPortStatEntry.setStatus('mandatory')
cdx6500ncrbscStatPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscStatPortNumber.setStatus('mandatory')
cdx6500ncrbscPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("busyOut", 2), ("up", 3), ("down", 4), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscPortStatus.setStatus('mandatory')
cdx6500ncrbscPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscPortState.setStatus('mandatory')
cdx6500ncrbscPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscPortSpeed.setStatus('mandatory')
cdx6500ncrbscPortUtilIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscPortUtilIn.setStatus('mandatory')
cdx6500ncrbscPortUtilOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscPortUtilOut.setStatus('mandatory')
cdx6500ncrbscInMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscInMsgs.setStatus('mandatory')
cdx6500ncrbscOutMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscOutMsgs.setStatus('mandatory')
cdx6500ncrbscInChars = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscInChars.setStatus('mandatory')
cdx6500ncrbscOutChars = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscOutChars.setStatus('mandatory')
cdx6500ncrbscCharRateIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscCharRateIn.setStatus('mandatory')
cdx6500ncrbscCharRateOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscCharRateOut.setStatus('mandatory')
cdx6500ncrbscCrcBccErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscCrcBccErrs.setStatus('mandatory')
cdx6500ncrbscRviRx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscRviRx.setStatus('mandatory')
cdx6500ncrbscRviTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscRviTx.setStatus('mandatory')
cdx6500ncrbscWackRx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscWackRx.setStatus('mandatory')
cdx6500ncrbscNconvRxMax = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscNconvRxMax.setStatus('mandatory')
cdx6500ncrbscNconvTxMax = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscNconvTxMax.setStatus('mandatory')
cdx6500ncrbscNgroupRxMax = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscNgroupRxMax.setStatus('mandatory')
cdx6500ncrbscNgroupTxMax = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscNgroupTxMax.setStatus('mandatory')
cdx6500ncrbscLongRespTime = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscLongRespTime.setStatus('mandatory')
cdx6500ncrbscAverageRespTime = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscAverageRespTime.setStatus('mandatory')
cdx6500ncrbscRviForce = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 17, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500ncrbscRviForce.setStatus('mandatory')
mibBuilder.exportSymbols("NCRBSC-OPT-MIB", cdxProductSpecific=cdxProductSpecific, cdx6500NCRBSCCfgClockSource=cdx6500NCRBSCCfgClockSource, cdx6500PPCTNCRBisyncTable=cdx6500PPCTNCRBisyncTable, cdx6500PCTNCRBSCDeviceGroup=cdx6500PCTNCRBSCDeviceGroup, cdx6500Statistics=cdx6500Statistics, cdx6500NCRBSCCfgContention=cdx6500NCRBSCCfgContention, cdx6500ncrbscAutocallMnemonic=cdx6500ncrbscAutocallMnemonic, cdx6500ncrbscPortStatus=cdx6500ncrbscPortStatus, cdx6500CfgProtocolGroup=cdx6500CfgProtocolGroup, cdx6500NCRBSCCfgV24ElectricalInterfaceOption=cdx6500NCRBSCCfgV24ElectricalInterfaceOption, cdx6500NCRBSCCfgHighSpeedElectricalInterfaceOption=cdx6500NCRBSCCfgHighSpeedElectricalInterfaceOption, cdx6500ncrbscLongRespTime=cdx6500ncrbscLongRespTime, cdx6500NCRBSCCfgErrThreshCount=cdx6500NCRBSCCfgErrThreshCount, cdx6500NCRBSCCfgRestrictConnDest=cdx6500NCRBSCCfgRestrictConnDest, cdx6500ncrbscPortStatEntry=cdx6500ncrbscPortStatEntry, cdx6500NCRBSCCfgElectricalInterfaceType=cdx6500NCRBSCCfgElectricalInterfaceType, cdx6500ncrbscCharRateIn=cdx6500ncrbscCharRateIn, cdx6500ncrbscBSCControlUnitAddr=cdx6500ncrbscBSCControlUnitAddr, cdx6500ncrbscRviRx=cdx6500ncrbscRviRx, cdx6500NCRBSCCfgBillRec=cdx6500NCRBSCCfgBillRec, cdx6500NCRBSCCfgRetranTimeout=cdx6500NCRBSCCfgRetranTimeout, cdx6500ncrbscInMsgs=cdx6500ncrbscInMsgs, cdx6500ncrbscNconvRxMax=cdx6500ncrbscNconvRxMax, cdx6500ncrbscNgroupTxMax=cdx6500ncrbscNgroupTxMax, cdx6500ncrbscDeviceEnabled=cdx6500ncrbscDeviceEnabled, cdx6500ncrbscPortUtilOut=cdx6500ncrbscPortUtilOut, cdx6500ncrbscOutChars=cdx6500ncrbscOutChars, codex=codex, cdx6500StatProtocolGroup=cdx6500StatProtocolGroup, cdx6500=cdx6500, cdx6500PPSTNCRBisyncTable=cdx6500PPSTNCRBisyncTable, DisplayString=DisplayString, cdx6500PBCTNCRBSCDeviceEntry=cdx6500PBCTNCRBSCDeviceEntry, cdx6500ncrbscDevEntry=cdx6500ncrbscDevEntry, cdx6500ncrbscInChars=cdx6500ncrbscInChars, cdx6500ncrbscCrcBccErrs=cdx6500ncrbscCrcBccErrs, cdx6500NCRBSCCfgPortSubAddr=cdx6500NCRBSCCfgPortSubAddr, cdx6500ncrbscCharRateOut=cdx6500ncrbscCharRateOut, cdx6500ncrbscRviTx=cdx6500ncrbscRviTx, cdx6500ncrbscOutMsgs=cdx6500ncrbscOutMsgs, cdx6500NCRBSCCfgPADType=cdx6500NCRBSCCfgPADType, cdx6500NCRBSCCfgServTimer=cdx6500NCRBSCCfgServTimer, cdx6500ncrbscWackRx=cdx6500ncrbscWackRx, cdx6500ncrbscPortUtilIn=cdx6500ncrbscPortUtilIn, cdx6500ncrbscAverageRespTime=cdx6500ncrbscAverageRespTime, cdx6500NCRBSCCfgPortOptions=cdx6500NCRBSCCfgPortOptions, cdx6500Configuration=cdx6500Configuration, cdx6500ncrbscPortState=cdx6500ncrbscPortState, cdx6500ncrbscNconvTxMax=cdx6500ncrbscNconvTxMax, cdx6500PCTPortProtocolGroup=cdx6500PCTPortProtocolGroup, cdx6500ncrbscDestControlUnitAddr=cdx6500ncrbscDestControlUnitAddr, cdx6500ncrbscNgroupRxMax=cdx6500ncrbscNgroupRxMax, cdx6500ncrbscStatPortNumber=cdx6500ncrbscStatPortNumber, cdx6500PPCTNCRBisyncEntry=cdx6500PPCTNCRBisyncEntry, cdx6500NCRBSCCfgNumDevices=cdx6500NCRBSCCfgNumDevices, cdx6500NCRBSCCfgPortNumber=cdx6500NCRBSCCfgPortNumber, cdx6500NCRBSCCfgClockSpeed=cdx6500NCRBSCCfgClockSpeed, cdx6500ncrbscDevPortNumber=cdx6500ncrbscDevPortNumber, cdx6500ncrbscRviForce=cdx6500ncrbscRviForce, cdx6500ncrbscPortSpeed=cdx6500ncrbscPortSpeed, cdx6500PBCTNCRBSCDeviceTable=cdx6500PBCTNCRBSCDeviceTable, cdx6500PSTPortProtocolGroup=cdx6500PSTPortProtocolGroup, cdx6500NCRBSCCfgInterBuffTimeout=cdx6500NCRBSCCfgInterBuffTimeout)
