#
# PySNMP MIB module DES6500-SWL2MGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DES6500-SWL2MGMT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:26:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
dot1dStp, dot1dBridge, dot1dStpPortEntry = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dStp", "dot1dBridge", "dot1dStpPortEntry")
AgentNotifyLevel, = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "AgentNotifyLevel")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Integer32, MibIdentifier, iso, Counter64, NotificationType, Gauge32, TimeTicks, Bits, ModuleIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Integer32", "MibIdentifier", "iso", "Counter64", "NotificationType", "Gauge32", "TimeTicks", "Bits", "ModuleIdentity", "Unsigned32")
TruthValue, TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "RowStatus", "DisplayString")
des6500, = mibBuilder.importSymbols("SW6500PRIMGMT-MIB", "des6500")
swL2MgmtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2))
if mibBuilder.loadTexts: swL2MgmtMIB.setLastUpdated('0007150000Z')
if mibBuilder.loadTexts: swL2MgmtMIB.setOrganization('D-Link, Inc.')
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class VlanId(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4094)

class PortList(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 127)

swL2DevMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 1))
swL2PortMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 3))
swL2QOSMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 6))
swL2PortSecurityMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 7))
swL2TrunkMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 9))
swL2MirrorMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 10))
swL2IGMPSnoopingMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 11))
swL2TrafficMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 13))
swL2TrafficSegMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 14))
swL2MgmtMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 15))
swL2RstpMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 16))
swL2DevInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 1, 1))
swDevInfoTotalNumOfPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoTotalNumOfPort.setStatus('current')
swDevInfoNumOfPortInUse = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoNumOfPortInUse.setStatus('current')
swDevInfoBootPromVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoBootPromVersion.setStatus('current')
swDevInfoFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoFirmwareVersion.setStatus('current')
swDevInfoHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoHardwareVersion.setStatus('current')
swL2DevCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 1, 2))
swL2DevCtrlStpState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlStpState.setStatus('current')
swL2DevCtrlIGMPSnooping = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlIGMPSnooping.setStatus('current')
swL2DevCtrlIGMPSnoopingMcstRTOnly = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlIGMPSnoopingMcstRTOnly.setStatus('current')
swL2DevCtrlRmonState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlRmonState.setStatus('current')
swL2DevCtrlCleanAllStatisticCounter = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlCleanAllStatisticCounter.setStatus('current')
swL2DevCtrlVlanIdOfFDBTbl = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 1, 2, 6), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlVlanIdOfFDBTbl.setStatus('current')
swL2DevCtrlWeb = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 1, 2, 14))
swL2DevCtrlWebState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 1, 2, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlWebState.setStatus('current')
swL2DevCtrlWebTcpPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 1, 2, 14, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlWebTcpPort.setStatus('current')
swL2DevCtrlTelnet = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 1, 2, 15))
swL2DevCtrlTelnetState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 1, 2, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlTelnetState.setStatus('current')
swL2DevCtrlTelnetTcpPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 1, 2, 15, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlTelnetTcpPort.setStatus('current')
swL2DevAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 1, 3))
swL2DevAlarmNewRoot = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmNewRoot.setStatus('current')
swL2DevAlarmTopologyChange = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmTopologyChange.setStatus('current')
swL2DevAlarmLinkChange = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmLinkChange.setStatus('current')
swL2PortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 3, 1), )
if mibBuilder.loadTexts: swL2PortInfoTable.setStatus('current')
swL2PortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 3, 1, 1), ).setIndexNames((0, "DES6500-SWL2MGMT-MIB", "swL2PortInfoPortIndex"))
if mibBuilder.loadTexts: swL2PortInfoEntry.setStatus('current')
swL2PortInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoPortIndex.setStatus('current')
swL2PortInfoPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoPortNumber.setStatus('current')
swL2PortInfoUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoUnitID.setStatus('current')
swL2PortInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("portType-none", 1), ("portType-100Base-TX", 2), ("portType-100Base-FX", 3), ("portType-100Base-FL", 4), ("portType-1000Base-TX", 5), ("portType-1000Base-SX", 6), ("portType-1000Base-LX", 7), ("portType-1000Base-SX-GBIC", 8), ("portType-1000Base-LX-GBIC", 9), ("portType-1000Base-TX-GBIC", 10), ("portType-1000Base-none-GBIC", 11), ("portType-1000Base-SX-MGBIC", 12), ("portType-1000Base-LX-MGBIC", 13), ("portType-1000Base-TX-MGBIC", 14), ("portType-1000Base-none-MGBIC", 15), ("portType-SIO", 16), ("portType-10G", 17), ("portType-1000Base-TX-GBIC-COMBO", 18), ("portType-1000Base-none-COMBO", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoType.setStatus('current')
swL2PortInfoLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("link-pass", 2), ("link-fail", 3), ("error-disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoLinkStatus.setStatus('current')
swL2PortInfoNwayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("other", 0), ("empty", 1), ("link-down", 2), ("half-10Mbps", 3), ("full-10Mbps", 4), ("half-100Mbps", 5), ("full-100Mbps", 6), ("half-1Gigabps", 7), ("full-1Gigabps", 8), ("half-10Gigabps", 9), ("full-10Gigabps", 10), ("error-disabled", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoNwayStatus.setStatus('current')
swL2PortCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 3, 2), )
if mibBuilder.loadTexts: swL2PortCtrlTable.setStatus('current')
swL2PortCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 3, 2, 1), ).setIndexNames((0, "DES6500-SWL2MGMT-MIB", "swL2PortCtrlPortIndex"))
if mibBuilder.loadTexts: swL2PortCtrlEntry.setStatus('current')
swL2PortCtrlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlPortIndex.setStatus('current')
swL2PortCtrlUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlUnitIndex.setStatus('current')
swL2PortCtrlAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlAdminState.setStatus('current')
swL2PortCtrlNwayState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("nway-enabled", 2), ("nway-disabled-10Mbps-Half", 3), ("nway-disabled-10Mbps-Full", 4), ("nway-disabled-100Mbps-Half", 5), ("nway-disabled-100Mbps-Full", 6), ("nway-disabled-1Gigabps-Half", 7), ("nway-disabled-1Gigabps-Full-none", 8), ("nway-disabled-1Gigabps-Full-master", 9), ("nway-disabled-1Gigabps-Full-slave", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlNwayState.setStatus('current')
swL2PortCtrlFlowCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlFlowCtrlState.setStatus('current')
swL2PortCtrlLockState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlLockState.setStatus('current')
swL2PortCtrlJumboFrame = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlJumboFrame.setStatus('current')
swL2QOSBandwidthControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 6, 1), )
if mibBuilder.loadTexts: swL2QOSBandwidthControlTable.setStatus('current')
swL2QOSBandwidthControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 6, 1, 1), ).setIndexNames((0, "DES6500-SWL2MGMT-MIB", "swL2QOSBandwidthPortIndex"))
if mibBuilder.loadTexts: swL2QOSBandwidthControlEntry.setStatus('current')
swL2QOSBandwidthPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSBandwidthPortIndex.setStatus('current')
swL2QOSBandwidthRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSBandwidthRxRate.setStatus('current')
swL2QOSBandwidthTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSBandwidthTxRate.setStatus('current')
swL2QOSSchedulingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 6, 2), )
if mibBuilder.loadTexts: swL2QOSSchedulingTable.setStatus('current')
swL2QOSSchedulingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 6, 2, 1), ).setIndexNames((0, "DES6500-SWL2MGMT-MIB", "swL2QOSSchedulingClassIndex"))
if mibBuilder.loadTexts: swL2QOSSchedulingEntry.setStatus('current')
swL2QOSSchedulingClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSSchedulingClassIndex.setStatus('current')
swL2QOSSchedulingMaxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSSchedulingMaxPkts.setStatus('current')
swL2QOSSchedulingMechanism = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("strict", 1), ("roundrobin", 2), ("weightfair", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOSSchedulingMechanism.setStatus('current')
swL2QOS8021pUserPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 6, 3), )
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityTable.setStatus('current')
swL2QOS8021pUserPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 6, 3, 1), ).setIndexNames((0, "DES6500-SWL2MGMT-MIB", "swL2QOS8021pUserPriorityIndex"))
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityEntry.setStatus('current')
swL2QOS8021pUserPriorityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityIndex.setStatus('current')
swL2QOS8021pUserPriorityClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOS8021pUserPriorityClass.setStatus('current')
swL2QOS8021pDefaultPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 6, 4), )
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityTable.setStatus('current')
swL2QOS8021pDefaultPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 6, 4, 1), ).setIndexNames((0, "DES6500-SWL2MGMT-MIB", "swL2QOS8021pDefaultPriorityIndex"))
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityEntry.setStatus('current')
swL2QOS8021pDefaultPriorityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriorityIndex.setStatus('current')
swL2QOS8021pDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOS8021pDefaultPriority.setStatus('current')
swL2QOSSchedulingMechanismCtrl = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("strict", 1), ("roundrobin", 2), ("weightfair", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSSchedulingMechanismCtrl.setStatus('current')
swL2QOSHolPreventionCtrl = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2QOSHolPreventionCtrl.setStatus('current')
swL2PortSecurityControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 7, 1), )
if mibBuilder.loadTexts: swL2PortSecurityControlTable.setStatus('current')
swL2PortSecurityControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 7, 1, 1), ).setIndexNames((0, "DES6500-SWL2MGMT-MIB", "swL2PortSecurityPortIndex"))
if mibBuilder.loadTexts: swL2PortSecurityControlEntry.setStatus('current')
swL2PortSecurityPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortSecurityPortIndex.setStatus('current')
swL2PortSecurityMaxLernAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityMaxLernAddr.setStatus('current')
swL2PortSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("permanent", 2), ("deleteOnTimeout", 3), ("deleteOnReset", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityMode.setStatus('current')
swL2PortSecurityAdmState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityAdmState.setStatus('current')
swL2PortSecurityDelCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 7, 2))
swL2PortSecurityDelVlanName = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 7, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityDelVlanName.setStatus('current')
swL2PortSecurityDelPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 7, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 768))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityDelPort.setStatus('current')
swL2PortSecurityDelMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 7, 2, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityDelMacAddress.setStatus('current')
swL2PortSecurityDelActivity = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 7, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityDelActivity.setStatus('current')
swL2TrunkMaxSupportedEntries = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkMaxSupportedEntries.setStatus('current')
swL2TrunkCurrentNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkCurrentNumEntries.setStatus('current')
swL2TrunkCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 9, 3), )
if mibBuilder.loadTexts: swL2TrunkCtrlTable.setStatus('current')
swL2TrunkCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 9, 3, 1), ).setIndexNames((0, "DES6500-SWL2MGMT-MIB", "swL2TrunkIndex"))
if mibBuilder.loadTexts: swL2TrunkCtrlEntry.setStatus('current')
swL2TrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkIndex.setStatus('current')
swL2TrunkName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 9, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkName.setStatus('current')
swL2TrunkMasterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkMasterPort.setStatus('current')
swL2TrunkMember = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 9, 3, 1, 4), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkMember.setStatus('current')
swL2TrunkFloodingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkFloodingPort.setStatus('current')
swL2TrunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 9, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("static", 2), ("lacp", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkType.setStatus('current')
swL2TrunkState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 9, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkState.setStatus('current')
swL2TrunkAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("mac-source", 2), ("mac-destination", 3), ("mac-source-dest", 4), ("ip-source", 5), ("ip-destination", 6), ("ip-source-dest", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrunkAlgorithm.setStatus('current')
swL2TrunkLACPPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 9, 5), )
if mibBuilder.loadTexts: swL2TrunkLACPPortTable.setStatus('current')
swL2TrunkLACPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 9, 5, 1), ).setIndexNames((0, "DES6500-SWL2MGMT-MIB", "swL2TrunkLACPPortIndex"))
if mibBuilder.loadTexts: swL2TrunkLACPPortEntry.setStatus('current')
swL2TrunkLACPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 9, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkLACPPortIndex.setStatus('current')
swL2TrunkLACPPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 9, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrunkLACPPortState.setStatus('current')
swL2MirrorLogicTargetPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorLogicTargetPort.setStatus('current')
swL2MirrorPortSourceIngress = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 10, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorPortSourceIngress.setStatus('current')
swL2MirrorPortSourceEgress = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 10, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorPortSourceEgress.setStatus('current')
swL2MirrorPortState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorPortState.setStatus('current')
swL2IGMPSnoopingMaxSupportedVlans = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 11, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPSnoopingMaxSupportedVlans.setStatus('current')
swL2IGMPSnoopingMaxIpGroupNumPerVlan = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPSnoopingMaxIpGroupNumPerVlan.setStatus('current')
swL2IGMPSnoopingCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 11, 3), )
if mibBuilder.loadTexts: swL2IGMPSnoopingCtrlTable.setStatus('current')
swL2IGMPSnoopingCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 11, 3, 1), ).setIndexNames((0, "DES6500-SWL2MGMT-MIB", "swL2IGMPSnoopingCtrlVid"))
if mibBuilder.loadTexts: swL2IGMPSnoopingCtrlEntry.setStatus('current')
swL2IGMPSnoopingCtrlVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 11, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPSnoopingCtrlVid.setStatus('current')
swL2IGMPSnoopingQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 11, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPSnoopingQueryInterval.setStatus('current')
swL2IGMPSnoopingMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 11, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPSnoopingMaxResponseTime.setStatus('current')
swL2IGMPSnoopingRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 11, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPSnoopingRobustness.setStatus('current')
swL2IGMPSnoopingLastMemberQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 11, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPSnoopingLastMemberQueryInterval.setStatus('current')
swL2IGMPSnoopingHostTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 11, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16711450)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPSnoopingHostTimeout.setStatus('current')
swL2IGMPSnoopingRouteTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 11, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16711450)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPSnoopingRouteTimeout.setStatus('current')
swL2IGMPSnoopingLeaveTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 11, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16711450)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPSnoopingLeaveTimer.setStatus('current')
swL2IGMPSnoopingQueryState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 11, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPSnoopingQueryState.setStatus('current')
swL2IGMPSnoopingCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 11, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("querier", 2), ("non-querier", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPSnoopingCurrentState.setStatus('current')
swL2IGMPSnoopingCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 11, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPSnoopingCtrlState.setStatus('current')
swL2IGMPSnoopingQueryInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 11, 4), )
if mibBuilder.loadTexts: swL2IGMPSnoopingQueryInfoTable.setStatus('current')
swL2IGMPSnoopingQueryInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 11, 4, 1), ).setIndexNames((0, "DES6500-SWL2MGMT-MIB", "swL2IGMPSnoopingInfoVid"))
if mibBuilder.loadTexts: swL2IGMPSnoopingQueryInfoEntry.setStatus('current')
swL2IGMPSnoopingInfoVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPSnoopingInfoVid.setStatus('current')
swL2IGMPSnoopingInfoQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 11, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPSnoopingInfoQueryCount.setStatus('current')
swL2IGMPSnoopingInfoTxQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 11, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPSnoopingInfoTxQueryCount.setStatus('current')
swL2IGMPSnoopingInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 11, 5), )
if mibBuilder.loadTexts: swL2IGMPSnoopingInfoTable.setStatus('current')
swL2IGMPSnoopingInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 11, 5, 1), ).setIndexNames((0, "DES6500-SWL2MGMT-MIB", "swL2IGMPSnoopingVid"), (0, "DES6500-SWL2MGMT-MIB", "swL2IGMPSnoopingGroupIpAddr"))
if mibBuilder.loadTexts: swL2IGMPSnoopingInfoEntry.setStatus('current')
swL2IGMPSnoopingVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 11, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPSnoopingVid.setStatus('current')
swL2IGMPSnoopingGroupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 11, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPSnoopingGroupIpAddr.setStatus('current')
swL2IGMPSnoopingMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 11, 5, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPSnoopingMacAddr.setStatus('current')
swL2IGMPSnoopingPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 11, 5, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPSnoopingPortMap.setStatus('current')
swL2IGMPSnoopingIpGroupReportCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 11, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPSnoopingIpGroupReportCount.setStatus('current')
swL2TrafficSegTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 14, 1), )
if mibBuilder.loadTexts: swL2TrafficSegTable.setStatus('current')
swL2TrafficSegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 14, 1, 1), ).setIndexNames((0, "DES6500-SWL2MGMT-MIB", "swL2TrafficSegPort"))
if mibBuilder.loadTexts: swL2TrafficSegEntry.setStatus('current')
swL2TrafficSegPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrafficSegPort.setStatus('current')
swL2TrafficSegForwardPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 14, 1, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrafficSegForwardPorts.setStatus('current')
swL2Notify = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 15, 1))
swL2NotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 15, 1, 2))
swL2NotifFirmware = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 78, 1, 2, 15, 1, 2, 0))
mibBuilder.exportSymbols("DES6500-SWL2MGMT-MIB", swL2MirrorMgmt=swL2MirrorMgmt, swL2DevInfo=swL2DevInfo, swL2PortSecurityDelCtrl=swL2PortSecurityDelCtrl, swL2QOSBandwidthControlTable=swL2QOSBandwidthControlTable, swDevInfoTotalNumOfPort=swDevInfoTotalNumOfPort, swL2PortSecurityMaxLernAddr=swL2PortSecurityMaxLernAddr, swL2PortInfoLinkStatus=swL2PortInfoLinkStatus, swL2QOSSchedulingMaxPkts=swL2QOSSchedulingMaxPkts, swL2IGMPSnoopingInfoEntry=swL2IGMPSnoopingInfoEntry, swL2IGMPSnoopingGroupIpAddr=swL2IGMPSnoopingGroupIpAddr, swL2TrunkAlgorithm=swL2TrunkAlgorithm, swL2IGMPSnoopingCtrlVid=swL2IGMPSnoopingCtrlVid, swL2Notify=swL2Notify, swL2QOS8021pDefaultPriorityIndex=swL2QOS8021pDefaultPriorityIndex, swL2PortCtrlFlowCtrlState=swL2PortCtrlFlowCtrlState, swL2DevCtrl=swL2DevCtrl, swL2IGMPSnoopingRobustness=swL2IGMPSnoopingRobustness, swL2IGMPSnoopingMgmt=swL2IGMPSnoopingMgmt, swL2IGMPSnoopingCtrlEntry=swL2IGMPSnoopingCtrlEntry, swL2TrunkLACPPortEntry=swL2TrunkLACPPortEntry, swL2DevAlarmLinkChange=swL2DevAlarmLinkChange, swL2PortInfoPortNumber=swL2PortInfoPortNumber, swL2DevCtrlStpState=swL2DevCtrlStpState, swL2QOSSchedulingTable=swL2QOSSchedulingTable, swL2IGMPSnoopingInfoTxQueryCount=swL2IGMPSnoopingInfoTxQueryCount, swL2QOS8021pDefaultPriority=swL2QOS8021pDefaultPriority, swL2PortCtrlLockState=swL2PortCtrlLockState, swL2TrafficSegMgmt=swL2TrafficSegMgmt, swL2PortSecurityMode=swL2PortSecurityMode, swL2QOSBandwidthTxRate=swL2QOSBandwidthTxRate, swL2TrunkCtrlEntry=swL2TrunkCtrlEntry, swL2IGMPSnoopingQueryInfoEntry=swL2IGMPSnoopingQueryInfoEntry, swL2QOS8021pUserPriorityTable=swL2QOS8021pUserPriorityTable, swL2TrafficMgmt=swL2TrafficMgmt, swL2DevCtrlIGMPSnoopingMcstRTOnly=swL2DevCtrlIGMPSnoopingMcstRTOnly, swL2DevMgmt=swL2DevMgmt, swL2TrafficSegPort=swL2TrafficSegPort, MacAddress=MacAddress, swL2PortCtrlJumboFrame=swL2PortCtrlJumboFrame, swL2NotifFirmware=swL2NotifFirmware, swL2QOSBandwidthControlEntry=swL2QOSBandwidthControlEntry, swL2MirrorPortSourceIngress=swL2MirrorPortSourceIngress, swL2QOS8021pDefaultPriorityEntry=swL2QOS8021pDefaultPriorityEntry, swL2PortSecurityControlTable=swL2PortSecurityControlTable, swL2QOSHolPreventionCtrl=swL2QOSHolPreventionCtrl, swL2TrunkLACPPortTable=swL2TrunkLACPPortTable, swL2IGMPSnoopingInfoTable=swL2IGMPSnoopingInfoTable, swL2DevCtrlWebState=swL2DevCtrlWebState, swL2IGMPSnoopingQueryInfoTable=swL2IGMPSnoopingQueryInfoTable, swL2IGMPSnoopingLeaveTimer=swL2IGMPSnoopingLeaveTimer, swL2QOSSchedulingEntry=swL2QOSSchedulingEntry, swL2PortSecurityPortIndex=swL2PortSecurityPortIndex, swDevInfoHardwareVersion=swDevInfoHardwareVersion, swL2PortInfoTable=swL2PortInfoTable, swL2IGMPSnoopingPortMap=swL2IGMPSnoopingPortMap, swL2QOS8021pUserPriorityClass=swL2QOS8021pUserPriorityClass, swL2TrafficSegEntry=swL2TrafficSegEntry, swL2QOSBandwidthPortIndex=swL2QOSBandwidthPortIndex, swL2TrunkMaxSupportedEntries=swL2TrunkMaxSupportedEntries, swL2PortSecurityDelVlanName=swL2PortSecurityDelVlanName, swL2QOSSchedulingMechanismCtrl=swL2QOSSchedulingMechanismCtrl, swL2MirrorPortState=swL2MirrorPortState, swL2PortInfoEntry=swL2PortInfoEntry, swL2PortCtrlNwayState=swL2PortCtrlNwayState, swL2TrunkMgmt=swL2TrunkMgmt, swL2DevCtrlWebTcpPort=swL2DevCtrlWebTcpPort, swL2PortInfoPortIndex=swL2PortInfoPortIndex, swL2DevCtrlRmonState=swL2DevCtrlRmonState, swL2QOS8021pUserPriorityIndex=swL2QOS8021pUserPriorityIndex, swL2PortSecurityMgmt=swL2PortSecurityMgmt, swL2TrunkMember=swL2TrunkMember, swL2MgmtMIB=swL2MgmtMIB, swL2PortSecurityAdmState=swL2PortSecurityAdmState, swL2TrafficSegForwardPorts=swL2TrafficSegForwardPorts, swL2IGMPSnoopingQueryState=swL2IGMPSnoopingQueryState, VlanId=VlanId, swL2PortSecurityDelMacAddress=swL2PortSecurityDelMacAddress, swDevInfoFirmwareVersion=swDevInfoFirmwareVersion, swL2DevCtrlIGMPSnooping=swL2DevCtrlIGMPSnooping, swL2PortInfoUnitID=swL2PortInfoUnitID, swL2PortInfoType=swL2PortInfoType, swL2PortSecurityDelPort=swL2PortSecurityDelPort, swL2IGMPSnoopingCtrlState=swL2IGMPSnoopingCtrlState, swL2TrafficSegTable=swL2TrafficSegTable, swL2DevCtrlWeb=swL2DevCtrlWeb, swL2QOSSchedulingClassIndex=swL2QOSSchedulingClassIndex, swL2IGMPSnoopingLastMemberQueryInterval=swL2IGMPSnoopingLastMemberQueryInterval, swL2DevAlarm=swL2DevAlarm, swL2DevCtrlTelnet=swL2DevCtrlTelnet, swL2QOS8021pUserPriorityEntry=swL2QOS8021pUserPriorityEntry, swL2PortCtrlUnitIndex=swL2PortCtrlUnitIndex, swL2TrunkLACPPortIndex=swL2TrunkLACPPortIndex, swL2PortInfoNwayStatus=swL2PortInfoNwayStatus, swL2QOS8021pDefaultPriorityTable=swL2QOS8021pDefaultPriorityTable, swL2TrunkState=swL2TrunkState, swL2MirrorLogicTargetPort=swL2MirrorLogicTargetPort, swL2PortCtrlEntry=swL2PortCtrlEntry, swL2RstpMgmt=swL2RstpMgmt, swL2QOSBandwidthRxRate=swL2QOSBandwidthRxRate, swL2IGMPSnoopingIpGroupReportCount=swL2IGMPSnoopingIpGroupReportCount, swL2MirrorPortSourceEgress=swL2MirrorPortSourceEgress, swL2QOSMgmt=swL2QOSMgmt, swL2TrunkFloodingPort=swL2TrunkFloodingPort, swL2IGMPSnoopingMaxResponseTime=swL2IGMPSnoopingMaxResponseTime, swL2DevCtrlVlanIdOfFDBTbl=swL2DevCtrlVlanIdOfFDBTbl, swL2IGMPSnoopingQueryInterval=swL2IGMPSnoopingQueryInterval, swL2TrunkMasterPort=swL2TrunkMasterPort, swL2MgmtMIBTraps=swL2MgmtMIBTraps, swL2IGMPSnoopingVid=swL2IGMPSnoopingVid, swL2QOSSchedulingMechanism=swL2QOSSchedulingMechanism, swDevInfoNumOfPortInUse=swDevInfoNumOfPortInUse, swL2TrunkCtrlTable=swL2TrunkCtrlTable, swL2PortCtrlAdminState=swL2PortCtrlAdminState, swL2NotifyPrefix=swL2NotifyPrefix, swL2TrunkCurrentNumEntries=swL2TrunkCurrentNumEntries, swL2TrunkName=swL2TrunkName, PortList=PortList, swL2PortCtrlPortIndex=swL2PortCtrlPortIndex, swL2DevCtrlTelnetState=swL2DevCtrlTelnetState, swL2PortSecurityControlEntry=swL2PortSecurityControlEntry, swL2PortSecurityDelActivity=swL2PortSecurityDelActivity, swL2DevCtrlCleanAllStatisticCounter=swL2DevCtrlCleanAllStatisticCounter, swL2IGMPSnoopingMaxIpGroupNumPerVlan=swL2IGMPSnoopingMaxIpGroupNumPerVlan, swL2IGMPSnoopingMaxSupportedVlans=swL2IGMPSnoopingMaxSupportedVlans, swL2PortMgmt=swL2PortMgmt, PYSNMP_MODULE_ID=swL2MgmtMIB, swL2PortCtrlTable=swL2PortCtrlTable, swL2DevAlarmTopologyChange=swL2DevAlarmTopologyChange, swL2IGMPSnoopingCurrentState=swL2IGMPSnoopingCurrentState, swL2IGMPSnoopingInfoVid=swL2IGMPSnoopingInfoVid, swL2DevCtrlTelnetTcpPort=swL2DevCtrlTelnetTcpPort, swL2TrunkLACPPortState=swL2TrunkLACPPortState, swL2DevAlarmNewRoot=swL2DevAlarmNewRoot, swL2IGMPSnoopingInfoQueryCount=swL2IGMPSnoopingInfoQueryCount, swL2IGMPSnoopingMacAddr=swL2IGMPSnoopingMacAddr, swL2IGMPSnoopingHostTimeout=swL2IGMPSnoopingHostTimeout, swDevInfoBootPromVersion=swDevInfoBootPromVersion, swL2IGMPSnoopingCtrlTable=swL2IGMPSnoopingCtrlTable, swL2TrunkType=swL2TrunkType, swL2IGMPSnoopingRouteTimeout=swL2IGMPSnoopingRouteTimeout, swL2TrunkIndex=swL2TrunkIndex)
