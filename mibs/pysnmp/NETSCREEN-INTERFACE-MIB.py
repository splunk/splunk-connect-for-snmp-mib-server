#
# PySNMP MIB module NETSCREEN-INTERFACE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETSCREEN-INTERFACE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:10:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
netscreenInterface, = mibBuilder.importSymbols("NETSCREEN-SMI", "netscreenInterface")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ModuleIdentity, Counter64, ObjectIdentity, Integer32, Bits, TimeTicks, NotificationType, Gauge32, IpAddress, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ModuleIdentity", "Counter64", "ObjectIdentity", "Integer32", "Bits", "TimeTicks", "NotificationType", "Gauge32", "IpAddress", "iso")
DisplayString, PhysAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "PhysAddress", "TextualConvention")
netscreenInterfaceMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 9, 0))
netscreenInterfaceMibModule.setRevisions(('2004-05-03 00:00', '2004-03-03 00:00', '2001-09-28 00:00', '2001-05-11 00:00',))
if mibBuilder.loadTexts: netscreenInterfaceMibModule.setLastUpdated('200405032022Z')
if mibBuilder.loadTexts: netscreenInterfaceMibModule.setOrganization('Juniper Networks, Inc.')
nsIfTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 9, 1), )
if mibBuilder.loadTexts: nsIfTable.setStatus('current')
nsIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1), ).setIndexNames((0, "NETSCREEN-INTERFACE-MIB", "nsIfIndex"))
if mibBuilder.loadTexts: nsIfEntry.setStatus('current')
nsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfIndex.setStatus('current')
nsIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfName.setStatus('current')
nsIfVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfVsys.setStatus('current')
nsIfZone = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfZone.setStatus('current')
nsIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("down", 0), ("up", 1), ("ready", 2), ("inactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfStatus.setStatus('current')
nsIfIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfIp.setStatus('current')
nsIfNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfNetmask.setStatus('current')
nsIfGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfGateway.setStatus('current')
nsIfMngIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMngIp.setStatus('current')
nsIfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("transparent", 0), ("nat", 1), ("route", 2), ("not-applicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMode.setStatus('current')
nsIfMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 11), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMAC.setStatus('current')
nsIfMngTelnet = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMngTelnet.setStatus('current')
nsIfMngSCS = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMngSCS.setStatus('current')
nsIfMngWEB = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMngWEB.setStatus('current')
nsIfMngSSL = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMngSSL.setStatus('current')
nsIfMngSNMP = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMngSNMP.setStatus('current')
nsIfMngGlobal = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMngGlobal.setStatus('current')
nsIfMngGlobalPro = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMngGlobalPro.setStatus('current')
nsIfMngPing = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMngPing.setStatus('current')
nsIfMngIdentReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMngIdentReset.setStatus('current')
nsIfInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfInfo.setStatus('current')
nsIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 1, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfDescr.setStatus('current')
nsIfSecondaryIpTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 9, 2), )
if mibBuilder.loadTexts: nsIfSecondaryIpTable.setStatus('current')
nsIfSecondaryIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 9, 2, 1), ).setIndexNames((0, "NETSCREEN-INTERFACE-MIB", "nsIfSecondaryIpIndex"))
if mibBuilder.loadTexts: nsIfSecondaryIpEntry.setStatus('current')
nsIfSecondaryIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfSecondaryIpIndex.setStatus('current')
nsIfSecondaryIpIfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfSecondaryIpIfIdx.setStatus('current')
nsIfSecondaryIpVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfSecondaryIpVsys.setStatus('current')
nsIfSecondaryIpZone = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfSecondaryIpZone.setStatus('current')
nsIfSecondaryIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfSecondaryIpAddress.setStatus('current')
nsIfSecondaryIpNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfSecondaryIpNetmask.setStatus('current')
nsIfSecondaryIpIfInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfSecondaryIpIfInfo.setStatus('current')
nsIfFlowTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 9, 3), )
if mibBuilder.loadTexts: nsIfFlowTable.setStatus('current')
nsIfFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 9, 3, 1), ).setIndexNames((0, "NETSCREEN-INTERFACE-MIB", "nsIfFlowIfIdx"))
if mibBuilder.loadTexts: nsIfFlowEntry.setStatus('current')
nsIfFlowIfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfFlowIfIdx.setStatus('current')
nsIfFlowVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfFlowVsys.setStatus('current')
nsIfFlowInByte = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfFlowInByte.setStatus('current')
nsIfFlowInPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfFlowInPacket.setStatus('current')
nsIfFlowOutByte = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfFlowOutByte.setStatus('current')
nsIfFlowOutPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfFlowOutPacket.setStatus('current')
nsIfFlowInVpn = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfFlowInVpn.setStatus('current')
nsIfInVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfInVlan.setStatus('current')
nsIfOutVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfOutVlan.setStatus('current')
nsIfFlowIfInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfFlowIfInfo.setStatus('current')
nsIfMonTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 9, 4), )
if mibBuilder.loadTexts: nsIfMonTable.setStatus('current')
nsIfMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 9, 4, 1), ).setIndexNames((0, "NETSCREEN-INTERFACE-MIB", "nsIfMonIfIdx"))
if mibBuilder.loadTexts: nsIfMonEntry.setStatus('current')
nsIfMonIfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMonIfIdx.setStatus('current')
nsIfMonVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMonVsys.setStatus('current')
nsIfMonPlyDeny = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMonPlyDeny.setStatus('current')
nsIfMonAuthFail = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMonAuthFail.setStatus('current')
nsIfMonUrlBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMonUrlBlock.setStatus('current')
nsIfMonTrMngQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMonTrMngQueue.setStatus('current')
nsIfMonTrMngDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMonTrMngDrop.setStatus('current')
nsIfMonEncFail = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMonEncFail.setStatus('current')
nsIfMonNoSa = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMonNoSa.setStatus('current')
nsIfMonNoSaPly = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMonNoSaPly.setStatus('current')
nsIfMonSaInactive = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMonSaInactive.setStatus('current')
nsIfMonSaPolicyDeny = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMonSaPolicyDeny.setStatus('current')
nsIfMonIfInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 9, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIfMonIfInfo.setStatus('current')
mibBuilder.exportSymbols("NETSCREEN-INTERFACE-MIB", nsIfMonTrMngQueue=nsIfMonTrMngQueue, nsIfInVlan=nsIfInVlan, nsIfFlowVsys=nsIfFlowVsys, nsIfMngWEB=nsIfMngWEB, netscreenInterfaceMibModule=netscreenInterfaceMibModule, nsIfTable=nsIfTable, nsIfFlowTable=nsIfFlowTable, PYSNMP_MODULE_ID=netscreenInterfaceMibModule, nsIfMonTable=nsIfMonTable, nsIfMonIfIdx=nsIfMonIfIdx, nsIfMngSSL=nsIfMngSSL, nsIfSecondaryIpZone=nsIfSecondaryIpZone, nsIfMonEncFail=nsIfMonEncFail, nsIfMonSaInactive=nsIfMonSaInactive, nsIfSecondaryIpIfInfo=nsIfSecondaryIpIfInfo, nsIfMonEntry=nsIfMonEntry, nsIfMonIfInfo=nsIfMonIfInfo, nsIfDescr=nsIfDescr, nsIfStatus=nsIfStatus, nsIfMngGlobalPro=nsIfMngGlobalPro, nsIfMonSaPolicyDeny=nsIfMonSaPolicyDeny, nsIfMode=nsIfMode, nsIfMngGlobal=nsIfMngGlobal, nsIfMonVsys=nsIfMonVsys, nsIfMonNoSaPly=nsIfMonNoSaPly, nsIfSecondaryIpNetmask=nsIfSecondaryIpNetmask, nsIfZone=nsIfZone, nsIfSecondaryIpTable=nsIfSecondaryIpTable, nsIfMonUrlBlock=nsIfMonUrlBlock, nsIfFlowInByte=nsIfFlowInByte, nsIfFlowOutPacket=nsIfFlowOutPacket, nsIfSecondaryIpAddress=nsIfSecondaryIpAddress, nsIfEntry=nsIfEntry, nsIfNetmask=nsIfNetmask, nsIfInfo=nsIfInfo, nsIfFlowIfIdx=nsIfFlowIfIdx, nsIfFlowEntry=nsIfFlowEntry, nsIfIndex=nsIfIndex, nsIfVsys=nsIfVsys, nsIfMngIp=nsIfMngIp, nsIfMngIdentReset=nsIfMngIdentReset, nsIfFlowInPacket=nsIfFlowInPacket, nsIfMngSNMP=nsIfMngSNMP, nsIfName=nsIfName, nsIfSecondaryIpIndex=nsIfSecondaryIpIndex, nsIfMngPing=nsIfMngPing, nsIfSecondaryIpIfIdx=nsIfSecondaryIpIfIdx, nsIfMonPlyDeny=nsIfMonPlyDeny, nsIfMonNoSa=nsIfMonNoSa, nsIfMngTelnet=nsIfMngTelnet, nsIfSecondaryIpEntry=nsIfSecondaryIpEntry, nsIfOutVlan=nsIfOutVlan, nsIfFlowInVpn=nsIfFlowInVpn, nsIfFlowOutByte=nsIfFlowOutByte, nsIfMAC=nsIfMAC, nsIfMngSCS=nsIfMngSCS, nsIfIp=nsIfIp, nsIfSecondaryIpVsys=nsIfSecondaryIpVsys, nsIfFlowIfInfo=nsIfFlowIfInfo, nsIfGateway=nsIfGateway, nsIfMonAuthFail=nsIfMonAuthFail, nsIfMonTrMngDrop=nsIfMonTrMngDrop)
