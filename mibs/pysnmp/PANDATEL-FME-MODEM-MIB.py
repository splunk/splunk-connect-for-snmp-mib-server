#
# PySNMP MIB module PANDATEL-FME-MODEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PANDATEL-FME-MODEM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:28:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
mdmSpecifics, device_id = mibBuilder.importSymbols("PANDATEL-MODEM-MIB", "mdmSpecifics", "device-id")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, enterprises, iso, ObjectIdentity, Counter64, Bits, Counter32, MibIdentifier, IpAddress, ModuleIdentity, Unsigned32, NotificationType, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "enterprises", "iso", "ObjectIdentity", "Counter64", "Bits", "Counter32", "MibIdentifier", "IpAddress", "ModuleIdentity", "Unsigned32", "NotificationType", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
fme_modem = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 2, 601)).setLabel("fme-modem")
fme = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 601))
fmeModemTable = MibTable((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 601, 1), )
if mibBuilder.loadTexts: fmeModemTable.setStatus('mandatory')
fmeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 601, 1, 1), ).setIndexNames((0, "PANDATEL-FME-MODEM-MIB", "mdmRack"), (0, "PANDATEL-FME-MODEM-MIB", "mdmModem"), (0, "PANDATEL-FME-MODEM-MIB", "mdmPosition"))
if mibBuilder.loadTexts: fmeTableEntry.setStatus('mandatory')
mdmRack = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 601, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmRack.setStatus('mandatory')
mdmModem = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 601, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmModem.setStatus('mandatory')
mdmPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 601, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmPosition.setStatus('mandatory')
mdmModemName = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 601, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmModemName.setStatus('mandatory')
mdmActiveLink = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 601, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 8, 90))).clone(namedValues=NamedValues(("line-port-7", 7), ("line-port-8", 8), ("disable", 90)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmActiveLink.setStatus('mandatory')
mdmAlarmConditionPort7 = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 601, 1, 1, 116), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 100))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("no-link-signal", 3), ("laser-fail", 4), ("no-link-signal-or-laser-fail", 5), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmAlarmConditionPort7.setStatus('mandatory')
mdmAlarmConditionPort8 = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 601, 1, 1, 117), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 100))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("no-link-signal", 3), ("laser-fail", 4), ("no-link-signal-or-laser-fail", 5), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmAlarmConditionPort8.setStatus('mandatory')
fmePortTable = MibTable((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 601, 2), )
if mibBuilder.loadTexts: fmePortTable.setStatus('mandatory')
fmePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 601, 2, 1), ).setIndexNames((0, "PANDATEL-FME-MODEM-MIB", "portRack"), (0, "PANDATEL-FME-MODEM-MIB", "portModem"), (0, "PANDATEL-FME-MODEM-MIB", "portPosition"), (0, "PANDATEL-FME-MODEM-MIB", "portPort"))
if mibBuilder.loadTexts: fmePortEntry.setStatus('mandatory')
portRack = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 601, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portRack.setStatus('mandatory')
portModem = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 601, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portModem.setStatus('mandatory')
portPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 601, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPosition.setStatus('mandatory')
portPort = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 601, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPort.setStatus('mandatory')
portInterfaceEmulationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 601, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 99))).clone(namedValues=NamedValues(("other", 1), ("dte", 2), ("dce", 3), ("te", 4), ("nt", 5), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInterfaceEmulationMode.setStatus('mandatory')
mdmModemProperty = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 601, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 99))).clone(namedValues=NamedValues(("other", 1), ("e1", 2), ("t1", 3), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmModemProperty.setStatus('mandatory')
portClockSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 601, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("dual", 2), ("single", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portClockSystem.setStatus('mandatory')
portClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 601, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("internal", 2), ("remote", 3), ("external", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portClockSource.setStatus('mandatory')
portDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 601, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("other", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDataRate.setStatus('mandatory')
portLocalCarrierDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 601, 2, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 100))).clone(namedValues=NamedValues(("other", 1), ("fo-link-and-remote-handshake", 2), ("fo-link", 3), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLocalCarrierDetect.setStatus('mandatory')
portTDPhaseLocking = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 601, 2, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 99))).clone(namedValues=NamedValues(("other", 1), ("positive-clock-slope", 2), ("negative-clock-slope", 3), ("unknown", 99)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTDPhaseLocking.setStatus('mandatory')
portLineBuiltOut = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 601, 2, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 100))).clone(namedValues=NamedValues(("other", 1), ("itu-rec-g703", 2), ("dsx-1-0to133-ft", 3), ("dsx-1-133to266-ft", 4), ("dsx-1-266to399-ft", 5), ("dsx-1-399to533-ft", 6), ("dsx-1-533to655-ft", 7), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLineBuiltOut.setStatus('mandatory')
mibBuilder.exportSymbols("PANDATEL-FME-MODEM-MIB", mdmAlarmConditionPort7=mdmAlarmConditionPort7, portClockSource=portClockSource, fmeTableEntry=fmeTableEntry, mdmModemProperty=mdmModemProperty, portLineBuiltOut=portLineBuiltOut, fmePortEntry=fmePortEntry, fmeModemTable=fmeModemTable, portClockSystem=portClockSystem, portPosition=portPosition, portPort=portPort, fmePortTable=fmePortTable, fme_modem=fme_modem, portDataRate=portDataRate, portTDPhaseLocking=portTDPhaseLocking, mdmModemName=mdmModemName, mdmActiveLink=mdmActiveLink, portModem=portModem, mdmRack=mdmRack, portRack=portRack, portLocalCarrierDetect=portLocalCarrierDetect, portInterfaceEmulationMode=portInterfaceEmulationMode, mdmModem=mdmModem, mdmAlarmConditionPort8=mdmAlarmConditionPort8, mdmPosition=mdmPosition, fme=fme)
