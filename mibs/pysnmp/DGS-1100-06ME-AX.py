#
# PySNMP MIB module DGS-1100-06ME-AX (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DGS-1100-06ME-AX
# Produced by pysmi-0.3.4 at Mon Apr 29 18:27:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
dot1dBridge, dot1dBasePort, dot1dBasePortEntry = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBridge", "dot1dBasePort", "dot1dBasePortEntry")
AddressFamilyNumbers, = mibBuilder.importSymbols("IANA-ADDRESS-FAMILY-NUMBERS-MIB", "AddressFamilyNumbers")
InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex")
InetAddress, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
SnmpAdminString, SnmpEngineID, SnmpSecurityLevel = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString", "SnmpEngineID", "SnmpSecurityLevel")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, ModuleIdentity, TimeTicks, MibIdentifier, NotificationType, Unsigned32, iso, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, enterprises, Bits, IpAddress, Counter32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ModuleIdentity", "TimeTicks", "MibIdentifier", "NotificationType", "Unsigned32", "iso", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "enterprises", "Bits", "IpAddress", "Counter32", "ObjectIdentity")
TruthValue, TextualConvention, DisplayString, RowStatus, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString", "RowStatus", "MacAddress")
dgs_1100_06ME_A1 = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1)).setLabel("dgs-1100-06ME-A1")
dgs_1100_06ME_A1.setRevisions(('2015-06-03 00:00', '2015-04-16 00:00', '2014-03-06 00:00',))
if mibBuilder.loadTexts: dgs_1100_06ME_A1.setLastUpdated('201506030000Z')
if mibBuilder.loadTexts: dgs_1100_06ME_A1.setOrganization('DGS-1100-06-AX-1.02.017.mib')
d_link = MibIdentifier((1, 3, 6, 1, 4, 1, 171)).setLabel("d-link")
dlink_products = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10)).setLabel("dlink-products")
dlink_DGS1100SeriesProd = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134)).setLabel("dlink-DGS1100SeriesProd")
dgs_1100_06ME = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1)).setLabel("dgs-1100-06ME")
class VlanIndex(TextualConvention, Unsigned32):
    status = 'current'

class PortList(TextualConvention, OctetString):
    status = 'current'

class BridgeId(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class Timeout(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd4'

class LldpManAddress(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 31)

class OwnerString(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 127)

class RmonStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4))

class Ipv6Address(TextualConvention, OctetString):
    status = 'current'
    displayHint = '2x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

companySystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1))
companyIpifGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 2))
companyTftpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 3))
companyMiscGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 4))
companySNMPV3 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5))
companyDot1qVlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 7))
companyStaticMAC = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 9))
companyIgsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 10))
companyQoSGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12))
companyTrafficMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 13))
companySecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14))
companyACLGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15))
companySyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 16))
companyLBD = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 17))
companyMirror = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 18))
companyStaticMcast = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 19))
companySNTPSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 20))
companyRMON = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 22))
companyAuthGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 23))
companyGuestVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 24))
companyMacNotify = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 25))
companyISMVLAN = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 27))
companyDHCPRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 28))
companyDHCPLocalRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 29))
companyTrapSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 30))
companyGreenSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 31))
companyLLDPSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32))
companyCPUInterfaceFilterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33))
companyCableDiagnostic = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 35))
companyQinQ = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 37))
companyTimeRangeMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 38))
companyLimitIp = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 45))
companyMulticastFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 49))
companyNeighbor = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 50))
companyEoam = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 51))
companyDuld = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 52))
companyDHCPv6Relay = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 86))
companyMldsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 88))
companyPPPoE = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 98))
companyAgentBasicInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 100))
companyTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 120))
sysSwitchName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSwitchName.setStatus('current')
sysHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHardwareVersion.setStatus('current')
sysFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFirmwareVersion.setStatus('current')
sysLoginTimeoutInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 30)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLoginTimeoutInterval.setStatus('current')
sysLocationName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLocationName.setStatus('current')
sysGroupInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(120, 1225), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGroupInterval.setStatus('current')
sysSafeGuardEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSafeGuardEnable.setStatus('current')
sysRestart = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysRestart.setStatus('current')
sysSave = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("config-1", 3), ("config-2", 4))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSave.setStatus('current')
sysJumboFrameEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysJumboFrameEnable.setStatus('current')
sysPortCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 13), )
if mibBuilder.loadTexts: sysPortCtrlTable.setStatus('current')
sysPortCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 13, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "sysPortCtrlIndex"), (0, "DGS-1100-06ME-AX", "sysPortCtrlMediumType"))
if mibBuilder.loadTexts: sysPortCtrlEntry.setStatus('current')
sysPortCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCtrlIndex.setStatus('current')
sysPortCtrlMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(100, 101))).clone(namedValues=NamedValues(("copper", 100), ("fiber", 101)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCtrlMediumType.setStatus('current')
sysPortCtrlSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("rate1000M-Full", 1), ("rate100M-Full", 2), ("rate100M-Half", 3), ("rate10M-Full", 4), ("rate10M-Half", 5), ("auto", 6), ("disable", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPortCtrlSpeed.setStatus('current')
sysPortCtrlOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("down", 1), ("rate1000M-Full", 2), ("rate100M-Full", 3), ("rate100M-Half", 4), ("rate10M-Full", 5), ("rate10M-Half", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCtrlOperStatus.setStatus('current')
sysPortCtrlMDI = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("mdi", 2), ("mdix", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPortCtrlMDI.setStatus('current')
sysPortCtrlFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPortCtrlFlowControl.setStatus('current')
sysPortCtrlFlowControlOper = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCtrlFlowControlOper.setStatus('current')
sysPortCtrlType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fastethernet", 1), ("gigabitethernet", 2), ("fiberwith100Base-and-1000BaseSFPModule", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCtrlType.setStatus('current')
sysPortCtrlCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 13, 1, 9), Bits().clone(namedValues=NamedValues(("rate10-half", 0), ("rate10-full", 1), ("rate100-half", 2), ("rate100-full", 3), ("reserve", 4), ("rate1000-full", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPortCtrlCapability.setStatus('current')
sysPortDescriptionTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 14), )
if mibBuilder.loadTexts: sysPortDescriptionTable.setStatus('current')
sysPortDescriptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 14, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "sysPortDescIndex"), (0, "DGS-1100-06ME-AX", "sysPortDescMediumType"))
if mibBuilder.loadTexts: sysPortDescriptionEntry.setStatus('current')
sysPortDescIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortDescIndex.setStatus('current')
sysPortDescMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(100, 101))).clone(namedValues=NamedValues(("copper", 100), ("fiber", 101)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortDescMediumType.setStatus('current')
sysPortDescString = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 14, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPortDescString.setStatus('current')
sysPortErrTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 15), )
if mibBuilder.loadTexts: sysPortErrTable.setStatus('current')
sysPortErrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 15, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "sysPortErrPortIndex"))
if mibBuilder.loadTexts: sysPortErrEntry.setStatus('current')
sysPortErrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortErrPortIndex.setStatus('current')
sysPortErrPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortErrPortState.setStatus('current')
sysPortErrPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("err-disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortErrPortStatus.setStatus('current')
sysPortErrPortReason = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("lbd", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortErrPortReason.setStatus('current')
sysDhcpAutoConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDhcpAutoConfiguration.setStatus('current')
sysWebState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysWebState.setStatus('current')
sysWebPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(80)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysWebPortNumber.setStatus('current')
sysARPAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysARPAgingTime.setStatus('current')
sysMACAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMACAgingTime.setStatus('current')
telnetsettingManagementOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetsettingManagementOnOff.setStatus('current')
telnetUDPPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(23)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetUDPPort.setStatus('current')
autoRefreshConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("refreshimenever", 0), ("refreshtime10secs", 1), ("refreshtime30secs", 2), ("refreshtime1min", 3), ("refreshtime5mins", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoRefreshConfiguration.setStatus('current')
floodfdbOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: floodfdbOnOff.setStatus('current')
sysContactName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysContactName.setStatus('current')
sysCommandLogging = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCommandLogging.setStatus('current')
sysSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 13))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSerialNumber.setStatus('current')
sysDhcpAutoImage = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDhcpAutoImage.setStatus('current')
sysBootupConfigID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysBootupConfigID.setStatus('current')
sysBootupImage = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysBootupImage.setStatus('current')
ipifSupportV4V6Info = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 2, 7))
sysIpAddrCfgMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("dynamic", 2))).clone('manual')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpAddrCfgMode.setStatus('current')
sysIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 2, 7, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpAddr.setStatus('current')
sysIpSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 2, 7, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpSubnetMask.setStatus('current')
sysGateway = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 2, 7, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGateway.setStatus('current')
dhcpOption12Status = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 2, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpOption12Status.setStatus('current')
dhcpOption12HostName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 2, 7, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpOption12HostName.setStatus('current')
ipifName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 2, 7, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipifName.setStatus('current')
ipifVLANname = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 2, 7, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipifVLANname.setStatus('current')
ipifv6GlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 2, 7, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipifv6GlobalStatus.setStatus('current')
ipifv6DHCPStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 2, 7, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipifv6DHCPStatus.setStatus('current')
ipifv6AutolinkloStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 2, 7, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipifv6AutolinkloStatus.setStatus('current')
ipifv6NSRetransmitTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 2, 7, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipifv6NSRetransmitTime.setStatus('current')
ipifv6DefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 2, 7, 13), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipifv6DefaultGateway.setStatus('current')
ipifV6AddressTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 2, 7, 14), )
if mibBuilder.loadTexts: ipifV6AddressTable.setStatus('current')
ipifV6AddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 2, 7, 14, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "ipifV6AddressMainIndex"), (0, "DGS-1100-06ME-AX", "ipifV6AddressIpAddr"), (0, "DGS-1100-06ME-AX", "ipifV6AddressIpPrefix"))
if mibBuilder.loadTexts: ipifV6AddressEntry.setStatus('current')
ipifV6AddressMainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 2, 7, 14, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipifV6AddressMainIndex.setStatus('current')
ipifV6AddressIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 2, 7, 14, 1, 2), Ipv6Address().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipifV6AddressIpAddr.setStatus('current')
ipifV6AddressIpPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 2, 7, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipifV6AddressIpPrefix.setStatus('current')
ipifV6AddressIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 2, 7, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unicast", 1), ("anycast", 2), ("linklocal", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipifV6AddressIpType.setStatus('current')
ipifV6AddressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 2, 7, 14, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipifV6AddressRowStatus.setStatus('current')
dhcpRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 2, 7, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRetryCount.setStatus('current')
tftpFwTargetGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 3, 9))
tftpFwTargetServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 3, 9, 1), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTargetServerIpAddress.setStatus('current')
tftpFwTargetServerIpType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 3, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTargetServerIpType.setStatus('current')
tftpFwTargetInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 3, 9, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTargetInterfaceName.setStatus('current')
tftpFwTargetImageFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 3, 9, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTargetImageFileName.setStatus('current')
tftpFwTargetTftpOperation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 3, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("download", 1), ("upload", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTargetTftpOperation.setStatus('current')
tftpFwTargetTftpOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 3, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("fail", 2), ("progressing", 3), ("transmit", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpFwTargetTftpOperationStatus.setStatus('current')
tftpCfgTargetGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 3, 10))
tftpCfgTargetServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 3, 10, 1), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgTargetServerIpAddress.setStatus('current')
tftpCfgTargetServerIpType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 3, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgTargetServerIpType.setStatus('current')
tftpCfgTargetInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 3, 10, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgTargetInterfaceName.setStatus('current')
tftpCfgTargetImageFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 3, 10, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgTargetImageFileName.setStatus('current')
tftpCfgTargetTftpOperation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 3, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("download", 1), ("upload", 2), ("progressing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgTargetTftpOperation.setStatus('current')
tftpCfgTargetTftpOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 3, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("fail", 2), ("progressing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpCfgTargetTftpOperationStatus.setStatus('current')
miscReset = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscReset.setStatus('current')
miscStatisticsReset = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscStatisticsReset.setStatus('current')
staticMcastTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 19, 1), )
if mibBuilder.loadTexts: staticMcastTable.setStatus('current')
staticMcastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 19, 1, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "staticMcastVlanID"), (0, "DGS-1100-06ME-AX", "staticMcastMac"), (0, "DGS-1100-06ME-AX", "staticMcastEgressPorts"), (0, "DGS-1100-06ME-AX", "staticMcastIpAddr"))
if mibBuilder.loadTexts: staticMcastEntry.setStatus('current')
staticMcastVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 19, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMcastVlanID.setStatus('current')
staticMcastMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 19, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMcastMac.setStatus('current')
staticMcastEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 19, 1, 1, 3), PortList().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMcastEgressPorts.setStatus('current')
staticMcastIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 19, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMcastIpAddr.setStatus('current')
staticMcastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 19, 1, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticMcastStatus.setStatus('current')
dot1qVlanManagementOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanManagementOnOff.setStatus('current')
dot1qVlanManagementid = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 7, 3), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanManagementid.setStatus('current')
dot1qVlanAsyOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanAsyOnOff.setStatus('current')
dot1qVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 7, 6), )
if mibBuilder.loadTexts: dot1qVlanTable.setStatus('current')
dot1qVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 7, 6, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "dot1qVlanName"))
if mibBuilder.loadTexts: dot1qVlanEntry.setStatus('current')
dot1qVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 7, 6, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1qVlanName.setStatus('current')
dot1qVlanEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 7, 6, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1qVlanEgressPorts.setStatus('current')
dot1qVlanForbiddenPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 7, 6, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qVlanForbiddenPorts.setStatus('current')
dot1qVlanUntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 7, 6, 1, 4), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1qVlanUntaggedPorts.setStatus('current')
dot1qVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 7, 6, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1qVlanRowStatus.setStatus('current')
dot1qVlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 7, 7), )
if mibBuilder.loadTexts: dot1qVlanPortTable.setStatus('current')
dot1qVlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 7, 7, 1), )
dot1dBasePortEntry.registerAugmentions(("DGS-1100-06ME-AX", "dot1qVlanPortEntry"))
dot1qVlanPortEntry.setIndexNames(*dot1dBasePortEntry.getIndexNames())
if mibBuilder.loadTexts: dot1qVlanPortEntry.setStatus('current')
dot1qVlanPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 7, 7, 1, 1), VlanIndex().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanPvid.setStatus('current')
dot1qVlanPVIDAutoAssignOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 7, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanPVIDAutoAssignOnOff.setStatus('current')
dhcpBOOTPRelayControl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 28, 1))
dhcpBOOTPRelayManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 28, 2))
dhcpBOOTPRelayManagementOption82 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 28, 2, 2))
dhcpBOOTPRelayState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 28, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayState.setStatus('current')
dhcpBOOTPRelayHopCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 28, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayHopCount.setStatus('current')
dhcpBOOTPRelayTimeThreshold = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 28, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayTimeThreshold.setStatus('current')
dhcpBOOTPRelayEnablePortlist = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 28, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayEnablePortlist.setStatus('current')
dhcpRelayVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 28, 1, 5), )
if mibBuilder.loadTexts: dhcpRelayVlanTable.setStatus('current')
dhcpRelayVlanTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 28, 1, 5, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "dhcpRelayVlanSettingsVLANID"))
if mibBuilder.loadTexts: dhcpRelayVlanTableEntry.setStatus('current')
dhcpRelayVlanSettingsVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 28, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRelayVlanSettingsVLANID.setStatus('current')
dhcpRelayVlanSettingsState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 28, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayVlanSettingsState.setStatus('current')
dhcpBOOTPRelayInterfaceSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 28, 2, 1), )
if mibBuilder.loadTexts: dhcpBOOTPRelayInterfaceSettingsTable.setStatus('current')
dhcpBOOTPRelayInterfaceSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 28, 2, 1, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "dhcpBOOTPRelayInterface"), (0, "DGS-1100-06ME-AX", "dhcpBOOTPRelayServerIP"))
if mibBuilder.loadTexts: dhcpBOOTPRelayInterfaceSettingsEntry.setStatus('current')
dhcpBOOTPRelayInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 28, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpBOOTPRelayInterface.setStatus('current')
dhcpBOOTPRelayServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 28, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpBOOTPRelayServerIP.setStatus('current')
dhcpBOOTPRelayInterfaceSettingsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 28, 2, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpBOOTPRelayInterfaceSettingsRowStatus.setStatus('current')
dhcpBOOTPRelayOption82State = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 28, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayOption82State.setStatus('current')
dhcpBOOTPRelayOption82CheckState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 28, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayOption82CheckState.setStatus('current')
dhcpBOOTPRelayOption82Policy = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 28, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("drop", 2), ("keep", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayOption82Policy.setStatus('current')
dhcpBOOTPRelayOption82RemoteIDType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 28, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("userdefined", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayOption82RemoteIDType.setStatus('current')
dhcpBOOTPRelayOption82RemoteID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 28, 2, 2, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayOption82RemoteID.setStatus('current')
dhcpLocalRelayGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 29, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpLocalRelayGlobalState.setStatus('current')
dhcpLocalRelayTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 29, 2), )
if mibBuilder.loadTexts: dhcpLocalRelayTable.setStatus('current')
dhcpLocalRelayTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 29, 2, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "dhcpLocalRelaySettingsVLANID"))
if mibBuilder.loadTexts: dhcpLocalRelayTableEntry.setStatus('current')
dhcpLocalRelaySettingsVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 29, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpLocalRelaySettingsVLANID.setStatus('current')
dhcpLocalRelaySettingsState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 29, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpLocalRelaySettingsState.setStatus('current')
dhcpLocalRelayEnablePortlist = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 29, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpLocalRelayEnablePortlist.setStatus('current')
staticDisableAutoLearn = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticDisableAutoLearn.setStatus('current')
staticAutoLearningList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 9, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticAutoLearningList.setStatus('current')
staticTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 9, 3), )
if mibBuilder.loadTexts: staticTable.setStatus('current')
staticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 9, 3, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "staticVlanID"), (0, "DGS-1100-06ME-AX", "staticMac"), (0, "DGS-1100-06ME-AX", "staticPort"))
if mibBuilder.loadTexts: staticEntry.setStatus('current')
staticVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticVlanID.setStatus('current')
staticMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 9, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMac.setStatus('current')
staticPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticPort.setStatus('current')
staticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 9, 3, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticStatus.setStatus('current')
autoFdbTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 9, 4), )
if mibBuilder.loadTexts: autoFdbTable.setStatus('current')
autoFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 9, 4, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "autoFdbIPAddress"))
if mibBuilder.loadTexts: autoFdbEntry.setStatus('current')
autoFdbIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 9, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoFdbIPAddress.setStatus('current')
autoFdbVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 9, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoFdbVlanID.setStatus('current')
autoFdbMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 9, 4, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoFdbMacAddress.setStatus('current')
autoFdbPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 9, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoFdbPort.setStatus('current')
autoFdbTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 9, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoFdbTimeStamp.setStatus('current')
autoFdbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 9, 4, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoFdbStatus.setStatus('current')
igsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 10, 1))
igsVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 10, 3))
igsAccessAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 10, 5))
igsHost = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 10, 6))
igsStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsStatus.setStatus('current')
igsRouterPortPurgeInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsRouterPortPurgeInterval.setStatus('current')
igsHostPortPurgeInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(130, 153025)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsHostPortPurgeInterval.setStatus('current')
igsRobustnessValue = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsRobustnessValue.setStatus('current')
igsGrpQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsGrpQueryInterval.setStatus('current')
igsQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsQueryInterval.setStatus('current')
igsQueryMaxResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 25)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsQueryMaxResponseTime.setStatus('current')
igsReportToAllPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsReportToAllPort.setStatus('current')
igsVlanRouterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 10, 3, 3), )
if mibBuilder.loadTexts: igsVlanRouterTable.setStatus('current')
igsVlanRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 10, 3, 3, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "igsVlanRouterVlanId"))
if mibBuilder.loadTexts: igsVlanRouterEntry.setStatus('current')
igsVlanRouterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 10, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanRouterVlanId.setStatus('current')
igsVlanRouterPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 10, 3, 3, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanRouterPortList.setStatus('current')
igsVlanFilterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 10, 3, 4), )
if mibBuilder.loadTexts: igsVlanFilterTable.setStatus('current')
igsVlanFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 10, 3, 4, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "igsVlanFilterVlanId"))
if mibBuilder.loadTexts: igsVlanFilterEntry.setStatus('current')
igsVlanFilterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 10, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanFilterVlanId.setStatus('current')
igsVlanSnoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 10, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanSnoopStatus.setStatus('current')
igsVlanQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 10, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanQuerier.setStatus('current')
igsVlanCfgQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 10, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanCfgQuerier.setStatus('current')
igsVlanQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 10, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(125)).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanQueryInterval.setStatus('current')
igsVlanRtrPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 10, 3, 4, 1, 6), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanRtrPortList.setStatus('current')
igsVlanFastLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 10, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanFastLeave.setStatus('current')
igsVlanMulticastGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 10, 3, 5), )
if mibBuilder.loadTexts: igsVlanMulticastGroupTable.setStatus('current')
igsVlanMulticastGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 10, 3, 5, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "igsVlanMulticastGroupVlanId"), (0, "DGS-1100-06ME-AX", "igsVlanMulticastGroupIpAddress"))
if mibBuilder.loadTexts: igsVlanMulticastGroupEntry.setStatus('current')
igsVlanMulticastGroupVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 10, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupVlanId.setStatus('current')
igsVlanMulticastGroupIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 10, 3, 5, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupIpAddress.setStatus('current')
igsVlanMulticastGroupMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 10, 3, 5, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupMacAddress.setStatus('current')
igsVlanMulticastGroupPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 10, 3, 5, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupPortList.setStatus('current')
igsAccessAuthTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 10, 5, 1), )
if mibBuilder.loadTexts: igsAccessAuthTable.setStatus('current')
igsAccessAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 10, 5, 1, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "igsAccessAuthPortIndex"))
if mibBuilder.loadTexts: igsAccessAuthEntry.setStatus('current')
igsAccessAuthPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 10, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsAccessAuthPortIndex.setStatus('current')
igsAccessAuthState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 10, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsAccessAuthState.setStatus('current')
igsHostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 10, 6, 1), )
if mibBuilder.loadTexts: igsHostTable.setStatus('current')
igsHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 10, 6, 1, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "igsHostTableVLANID"), (0, "DGS-1100-06ME-AX", "igsHostTableGroupAddress"), (0, "DGS-1100-06ME-AX", "igsHostTablePort"), (0, "DGS-1100-06ME-AX", "igsHostTableHostIPAddress"))
if mibBuilder.loadTexts: igsHostEntry.setStatus('current')
igsHostTableVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 10, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsHostTableVLANID.setStatus('current')
igsHostTableGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 10, 6, 1, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsHostTableGroupAddress.setStatus('current')
igsHostTablePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 10, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsHostTablePort.setStatus('current')
igsHostTableHostIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 10, 6, 1, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsHostTableHostIPAddress.setStatus('current')
mldsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 88, 1))
mldsVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 88, 3))
mldsHost = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 88, 4))
mldsStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 88, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsStatus.setStatus('current')
mldsRouterPortPurgeInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 88, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsRouterPortPurgeInterval.setStatus('current')
mldsHostPortPurgeInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 88, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(130, 153025)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsHostPortPurgeInterval.setStatus('current')
mldsRobustnessValue = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 88, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsRobustnessValue.setStatus('current')
mldsGrpQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 88, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsGrpQueryInterval.setStatus('current')
mldsQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 88, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsQueryInterval.setStatus('current')
mldsQueryMaxResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 88, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 25)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsQueryMaxResponseTime.setStatus('current')
mldsVlanRouterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 88, 3, 3), )
if mibBuilder.loadTexts: mldsVlanRouterTable.setStatus('current')
mldsVlanRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 88, 3, 3, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "mldsVlanRouterVlanId"))
if mibBuilder.loadTexts: mldsVlanRouterEntry.setStatus('current')
mldsVlanRouterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 88, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanRouterVlanId.setStatus('current')
mldsVlanRouterPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 88, 3, 3, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanRouterPortList.setStatus('current')
mldsVlanFilterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 88, 3, 4), )
if mibBuilder.loadTexts: mldsVlanFilterTable.setStatus('current')
mldsVlanFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 88, 3, 4, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "mldsVlanFilterVlanId"))
if mibBuilder.loadTexts: mldsVlanFilterEntry.setStatus('current')
mldsVlanFilterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 88, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanFilterVlanId.setStatus('current')
mldsVlanSnoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 88, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanSnoopStatus.setStatus('current')
mldsVlanQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 88, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanQuerier.setStatus('current')
mldsVlanCfgQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 88, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanCfgQuerier.setStatus('current')
mldsVlanQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 88, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(125)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanQueryInterval.setStatus('current')
mldsVlanRtrPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 88, 3, 4, 1, 6), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanRtrPortList.setStatus('current')
mldsVlanFastLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 88, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanFastLeave.setStatus('current')
mldsVlanMulticastGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 88, 3, 5), )
if mibBuilder.loadTexts: mldsVlanMulticastGroupTable.setStatus('current')
mldsVlanMulticastGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 88, 3, 5, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "mldsVlanMulticastGroupVlanId"), (0, "DGS-1100-06ME-AX", "mldsVlanMulticastGroupIpAddress"))
if mibBuilder.loadTexts: mldsVlanMulticastGroupEntry.setStatus('current')
mldsVlanMulticastGroupVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 88, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanMulticastGroupVlanId.setStatus('current')
mldsVlanMulticastGroupIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 88, 3, 5, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanMulticastGroupIpAddress.setStatus('current')
mldsVlanMulticastGroupMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 88, 3, 5, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanMulticastGroupMacAddress.setStatus('current')
mldsVlanMulticastGroupPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 88, 3, 5, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanMulticastGroupPortList.setStatus('current')
mldsHostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 88, 4, 1), )
if mibBuilder.loadTexts: mldsHostTable.setStatus('current')
mldsHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 88, 4, 1, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "mldsHostTableVLANID"), (0, "DGS-1100-06ME-AX", "mldsHostTableGroupAddress"), (0, "DGS-1100-06ME-AX", "mldsHostTablePort"), (0, "DGS-1100-06ME-AX", "mldsHostTableHostIPAddress"))
if mibBuilder.loadTexts: mldsHostEntry.setStatus('current')
mldsHostTableVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 88, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsHostTableVLANID.setStatus('current')
mldsHostTableGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 88, 4, 1, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsHostTableGroupAddress.setStatus('current')
mldsHostTablePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 88, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsHostTablePort.setStatus('current')
mldsHostTableHostIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 88, 4, 1, 1, 4), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsHostTableHostIPAddress.setStatus('current')
swAuthenCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 23, 1))
swAuthStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 23, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthStatus.setStatus('current')
swAuthMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("portBase", 1), ("macBase", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthMode.setStatus('current')
authProtocol = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("authProtocolRadiusEap", 1), ("authProtocolLocal", 2))).clone('authProtocolRadiusEap')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authProtocol.setStatus('current')
swAuthCtrlPktFwdMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 23, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("authForwardEap", 1), ("authDropEap", 2))).clone('authForwardEap')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthCtrlPktFwdMode.setStatus('current')
swAuthPortAccessCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 23, 2))
swAuthPortAccessControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 23, 2, 1), )
if mibBuilder.loadTexts: swAuthPortAccessControlTable.setStatus('current')
swAuthPortAccessControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 23, 2, 1, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "swAuthAuthConfigPortNumber"))
if mibBuilder.loadTexts: swAuthPortAccessControlEntry.setStatus('current')
swAuthAuthConfigPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 23, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthAuthConfigPortNumber.setStatus('current')
swAuthAuthQuietPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 23, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthQuietPeriod.setStatus('current')
swAuthAuthSuppTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 23, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthSuppTimeout.setStatus('current')
swAuthAuthServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 23, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthServerTimeout.setStatus('current')
swAuthAuthMaxReq = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 23, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthMaxReq.setStatus('current')
swAuthAuthTxPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 23, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(24)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthTxPeriod.setStatus('current')
swAuthAuthReAuthPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 23, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(3600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthReAuthPeriod.setStatus('current')
swAuthAuthReAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 23, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthReAuthentication.setStatus('current')
swAuthAuthConfigPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 23, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forceUnauthorized", 1), ("auto", 2), ("forceAuthorized", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthConfigPortControl.setStatus('current')
swAuthAuthCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 23, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("authenticator", 1), ("none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthCapability.setStatus('current')
swAuthAuthDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 23, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("both", 0), ("in", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthDirection.setStatus('current')
swAuthUser = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 23, 3))
swAuthUserTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 23, 3, 1), )
if mibBuilder.loadTexts: swAuthUserTable.setStatus('current')
swAuthUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 23, 3, 1, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "swAuthUserName"))
if mibBuilder.loadTexts: swAuthUserEntry.setStatus('current')
swAuthUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 23, 3, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthUserName.setStatus('current')
swAuthUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 23, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthUserPassword.setStatus('current')
swAuthUserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 23, 3, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAuthUserStatus.setStatus('current')
swAuthRadiusServer = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 23, 4))
swAuthRadiusServerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 23, 4, 2), )
if mibBuilder.loadTexts: swAuthRadiusServerTable.setStatus('current')
swAuthRadiusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 23, 4, 2, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "swAuthRadiusServerIndex"))
if mibBuilder.loadTexts: swAuthRadiusServerEntry.setStatus('current')
swAuthRadiusServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 23, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthRadiusServerIndex.setStatus('current')
swAuthRadiusIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 23, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusIPType.setStatus('current')
swAuthRadiusServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 23, 4, 2, 1, 3), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusServerAddress.setStatus('current')
swAuthRadiusServerInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 23, 4, 2, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAuthRadiusServerInterfaceName.setStatus('current')
swAuthRadiusServerAuthenticationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 23, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1812)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusServerAuthenticationPort.setStatus('current')
swAuthRadiusServerAccountingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 23, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1813)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusServerAccountingPort.setStatus('current')
swAuthRadiusServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 23, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusServerTimeout.setStatus('current')
swAuthRadiusServerRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 23, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusServerRetransmit.setStatus('current')
swAuthRadiusServerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 23, 4, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusServerKey.setStatus('current')
swAuthRadiusServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 23, 4, 2, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAuthRadiusServerStatus.setStatus('current')
qosMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("dot1p", 1), ("dscp", 2), ("portbase", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosMode.setStatus('current')
queuingMechanism = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strictPriority", 1), ("wrr", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: queuingMechanism.setStatus('current')
qosQ1p = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 3))
dot1pPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 3, 1), )
if mibBuilder.loadTexts: dot1pPortTable.setStatus('current')
dot1pPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 3, 1, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "dot1pPortIndex"))
if mibBuilder.loadTexts: dot1pPortEntry.setStatus('current')
dot1pPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1pPortIndex.setStatus('current')
dot1pPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("high", 3), ("highest", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1pPortPriority.setStatus('current')
qosDiffServ = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4))
qosDiffServEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDiffServEnable.setStatus('current')
qosDiffServTypeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2))
qosDiffServType00 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType00.setStatus('current')
qosDiffServType01 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType01.setStatus('current')
qosDiffServType02 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType02.setStatus('current')
qosDiffServType03 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType03.setStatus('current')
qosDiffServType04 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType04.setStatus('current')
qosDiffServType05 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType05.setStatus('current')
qosDiffServType06 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType06.setStatus('current')
qosDiffServType07 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType07.setStatus('current')
qosDiffServType08 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType08.setStatus('current')
qosDiffServType09 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType09.setStatus('current')
qosDiffServType10 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType10.setStatus('current')
qosDiffServType11 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType11.setStatus('current')
qosDiffServType12 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType12.setStatus('current')
qosDiffServType13 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType13.setStatus('current')
qosDiffServType14 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType14.setStatus('current')
qosDiffServType15 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType15.setStatus('current')
qosDiffServType16 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType16.setStatus('current')
qosDiffServType17 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType17.setStatus('current')
qosDiffServType18 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType18.setStatus('current')
qosDiffServType19 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType19.setStatus('current')
qosDiffServType20 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType20.setStatus('current')
qosDiffServType21 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType21.setStatus('current')
qosDiffServType22 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType22.setStatus('current')
qosDiffServType23 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType23.setStatus('current')
qosDiffServType24 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType24.setStatus('current')
qosDiffServType25 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType25.setStatus('current')
qosDiffServType26 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType26.setStatus('current')
qosDiffServType27 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType27.setStatus('current')
qosDiffServType28 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType28.setStatus('current')
qosDiffServType29 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType29.setStatus('current')
qosDiffServType30 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType30.setStatus('current')
qosDiffServType31 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType31.setStatus('current')
qosDiffServType32 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType32.setStatus('current')
qosDiffServType33 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType33.setStatus('current')
qosDiffServType34 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType34.setStatus('current')
qosDiffServType35 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType35.setStatus('current')
qosDiffServType36 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType36.setStatus('current')
qosDiffServType37 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType37.setStatus('current')
qosDiffServType38 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType38.setStatus('current')
qosDiffServType39 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType39.setStatus('current')
qosDiffServType40 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType40.setStatus('current')
qosDiffServType41 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType41.setStatus('current')
qosDiffServType42 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType42.setStatus('current')
qosDiffServType43 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType43.setStatus('current')
qosDiffServType44 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType44.setStatus('current')
qosDiffServType45 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType45.setStatus('current')
qosDiffServType46 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType46.setStatus('current')
qosDiffServType47 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType47.setStatus('current')
qosDiffServType48 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType48.setStatus('current')
qosDiffServType49 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType49.setStatus('current')
qosDiffServType50 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType50.setStatus('current')
qosDiffServType51 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType51.setStatus('current')
qosDiffServType52 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType52.setStatus('current')
qosDiffServType53 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType53.setStatus('current')
qosDiffServType54 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType54.setStatus('current')
qosDiffServType55 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType55.setStatus('current')
qosDiffServType56 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType56.setStatus('current')
qosDiffServType57 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType57.setStatus('current')
qosDiffServType58 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType58.setStatus('current')
qosDiffServType59 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType59.setStatus('current')
qosDiffServType60 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType60.setStatus('current')
qosDiffServType61 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType61.setStatus('current')
qosDiffServType62 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType62.setStatus('current')
qosDiffServType63 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 4, 2, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType63.setStatus('current')
qosAclPrioritySettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 8))
aclQosTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 8, 2), )
if mibBuilder.loadTexts: aclQosTable.setStatus('current')
aclQosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 8, 2, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "aclQosIndex"))
if mibBuilder.loadTexts: aclQosEntry.setStatus('current')
aclQosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclQosIndex.setStatus('current')
aclQosType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7))).clone(namedValues=NamedValues(("ipv6traffic-class", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclQosType.setStatus('current')
aclQosIP6TC = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 8, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclQosIP6TC.setStatus('current')
aclQosAssignPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 8, 2, 1, 98), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("highest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclQosAssignPriority.setStatus('current')
aclQosStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 12, 8, 2, 1, 99), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclQosStatus.setStatus('current')
bandwidthCtrlSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 13, 1))
bandwidthCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 13, 1, 2), )
if mibBuilder.loadTexts: bandwidthCtrlTable.setStatus('current')
bandwidthCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 13, 1, 2, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "bandwidthCtrlIndex"))
if mibBuilder.loadTexts: bandwidthCtrlEntry.setStatus('current')
bandwidthCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 13, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthCtrlIndex.setStatus('current')
bandwidthCtrlTxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 13, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 1000000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bandwidthCtrlTxThreshold.setStatus('current')
bandwidthCtrlRxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 13, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 1000000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bandwidthCtrlRxThreshold.setStatus('current')
bandwidthEffecTxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 13, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthEffecTxThreshold.setStatus('current')
bandwidthEffecRxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 13, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthEffecRxThreshold.setStatus('current')
trafficCtrlSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 13, 4))
trafficCtrlTrap = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 13, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("stormOccurred", 1), ("stormCleared", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficCtrlTrap.setStatus('current')
trafficCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 13, 4, 2), )
if mibBuilder.loadTexts: trafficCtrlTable.setStatus('current')
trafficCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 13, 4, 2, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "trafficCtrlIndex"))
if mibBuilder.loadTexts: trafficCtrlEntry.setStatus('current')
trafficCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 13, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficCtrlIndex.setStatus('current')
trafficCtrlActionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 13, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("drop", 0), ("shutdown", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficCtrlActionMode.setStatus('current')
trafficCtrlType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 13, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("b", 1), ("m", 2), ("mb", 3), ("u", 4), ("ub", 5), ("um", 6), ("umb", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficCtrlType.setStatus('current')
trafficCtrlThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 13, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 102400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficCtrlThreshold.setStatus('current')
trafficCtrlCountDown = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 13, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficCtrlCountDown.setStatus('current')
trafficCtrlTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 13, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficCtrlTimeInterval.setStatus('current')
trafficCtrlAutoRecoverTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 13, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficCtrlAutoRecoverTime.setStatus('current')
securityTrustedHost = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 1))
trustedHostStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trustedHostStatus.setStatus('current')
ipv4trustedHostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 1, 2), )
if mibBuilder.loadTexts: ipv4trustedHostTable.setStatus('obsolete')
ipv4trustedHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 1, 2, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "ipv4trustedHostIpAddr"), (0, "DGS-1100-06ME-AX", "ipv4trustedHostIpMask"))
if mibBuilder.loadTexts: ipv4trustedHostEntry.setStatus('obsolete')
ipv4trustedHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 1, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4trustedHostIpAddr.setStatus('obsolete')
ipv4trustedHostIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 1, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4trustedHostIpMask.setStatus('obsolete')
ipv4trustedHostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv4trustedHostRowStatus.setStatus('obsolete')
trustedHostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 1, 3), )
if mibBuilder.loadTexts: trustedHostTable.setStatus('current')
trustedHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 1, 3, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "trustedHostIPType"), (0, "DGS-1100-06ME-AX", "trustedHostIpAddr"), (0, "DGS-1100-06ME-AX", "trustedHostIpMask"))
if mibBuilder.loadTexts: trustedHostEntry.setStatus('current')
trustedHostIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trustedHostIPType.setStatus('current')
trustedHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 1, 3, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trustedHostIpAddr.setStatus('current')
trustedHostIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 1, 3, 1, 3), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trustedHostIpMask.setStatus('current')
trustedHostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trustedHostRowStatus.setStatus('current')
securityPortSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 2))
portSecTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 2, 1), )
if mibBuilder.loadTexts: portSecTable.setStatus('current')
portSecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 2, 1, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "portSecIndex"))
if mibBuilder.loadTexts: portSecEntry.setStatus('current')
portSecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecIndex.setStatus('current')
portSecState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecState.setStatus('current')
portSecMLA = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecMLA.setStatus('current')
portSecLockAddrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("deleteOnReset", 1), ("deleteOnTimeout", 2), ("permanent", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecLockAddrMode.setStatus('current')
portSecFDBPermanentTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 2, 2), )
if mibBuilder.loadTexts: portSecFDBPermanentTable.setStatus('current')
portSecFDBPermanentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 2, 2, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "portSecFDBPermPort"), (0, "DGS-1100-06ME-AX", "portSecFDBPermIndex"))
if mibBuilder.loadTexts: portSecFDBPermanentEntry.setStatus('current')
portSecFDBPermIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecFDBPermIndex.setStatus('current')
portSecFDBPermVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecFDBPermVlanID.setStatus('current')
portSecFDBPermMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 2, 2, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecFDBPermMac.setStatus('current')
portSecFDBPermPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecFDBPermPort.setStatus('current')
cableDiagTriggerIndex = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 35, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableDiagTriggerIndex.setStatus('current')
cableDiagPair1TestResult = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 35, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5))).clone(namedValues=NamedValues(("ok", 0), ("open", 1), ("short", 2), ("notAvailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair1TestResult.setStatus('current')
cableDiagPair1FaultDistance = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 35, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair1FaultDistance.setStatus('current')
cableDiagPair2TestResult = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 35, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5))).clone(namedValues=NamedValues(("ok", 0), ("open", 1), ("short", 2), ("notAvailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair2TestResult.setStatus('current')
cableDiagPair2FaultDistance = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 35, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair2FaultDistance.setStatus('current')
cableDiagPair3TestResult = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 35, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5))).clone(namedValues=NamedValues(("ok", 0), ("open", 1), ("short", 2), ("notAvailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair3TestResult.setStatus('current')
cableDiagPair3FaultDistance = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 35, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair3FaultDistance.setStatus('current')
cableDiagPair4TestResult = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 35, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 5))).clone(namedValues=NamedValues(("ok", 0), ("open", 1), ("short", 2), ("notAvailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair4TestResult.setStatus('current')
cableDiagPair4FaultDistance = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 35, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagPair4FaultDistance.setStatus('current')
cableDiagLengthinRange = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 35, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("less50", 1), ("from50to80", 2), ("from80to100", 3), ("from100to140", 4), ("notAvailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagLengthinRange.setStatus('current')
aclProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 1))
ipv4aclProfileTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 1, 1), )
if mibBuilder.loadTexts: ipv4aclProfileTable.setStatus('obsolete')
ipv4aclProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 1, 1, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "ipv4aclProfileNo"))
if mibBuilder.loadTexts: ipv4aclProfileEntry.setStatus('obsolete')
ipv4aclProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 150))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4aclProfileNo.setStatus('obsolete')
ipv4aclProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("l2", 1), ("l3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileType.setStatus('obsolete')
ipv4aclProfileRuleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4aclProfileRuleCount.setStatus('obsolete')
ipv4aclProfileMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 1, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileMask.setStatus('obsolete')
ipv4aclProfileDstMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 1, 1, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileDstMacAddrMask.setStatus('obsolete')
ipv4aclProfileSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 1, 1, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileSrcMacAddrMask.setStatus('obsolete')
ipv4aclProfileIPProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 6, 17, 255))).clone(namedValues=NamedValues(("none", 0), ("icmp", 1), ("igmp", 2), ("tcp", 6), ("udp", 17), ("ipMask", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileIPProtocol.setStatus('obsolete')
ipv4aclProfileIPProtocolMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 1, 1, 1, 8), OctetString().clone(hexValue="FF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileIPProtocolMask.setStatus('obsolete')
ipv4aclProfileDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 1, 1, 1, 9), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileDstIpAddrMask.setStatus('obsolete')
ipv4aclProfileSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 1, 1, 1, 10), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileSrcIpAddrMask.setStatus('obsolete')
ipv4aclProfileDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 1, 1, 1, 11), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileDstPortMask.setStatus('obsolete')
ipv4aclProfileSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 1, 1, 1, 12), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileSrcPortMask.setStatus('obsolete')
ipv4aclProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 1, 1, 1, 28), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv4aclProfileStatus.setStatus('obsolete')
aclProfileTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 1, 2), )
if mibBuilder.loadTexts: aclProfileTable.setStatus('current')
aclProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 1, 2, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "aclProfileNo"))
if mibBuilder.loadTexts: aclProfileEntry.setStatus('current')
aclProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 150))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclProfileNo.setStatus('current')
aclProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 11))).clone(namedValues=NamedValues(("l2", 1), ("l3v4", 2), ("l3v6", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileType.setStatus('current')
aclProfileRuleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclProfileRuleCount.setStatus('current')
aclProfileMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 1, 2, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileMask.setStatus('current')
aclProfileDstMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 1, 2, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileDstMacAddrMask.setStatus('current')
aclProfileSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 1, 2, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileSrcMacAddrMask.setStatus('current')
aclProfileIPProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 6, 17, 255))).clone(namedValues=NamedValues(("none", 0), ("icmp", 1), ("igmp", 2), ("tcp", 6), ("udp", 17), ("ipMask", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileIPProtocol.setStatus('current')
aclProfileIPProtocolMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 1, 2, 1, 8), OctetString().clone(hexValue="FF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileIPProtocolMask.setStatus('current')
aclProfileDstIpAddrMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileDstIpAddrMaskType.setStatus('current')
aclProfileDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 1, 2, 1, 10), Ipv6Address().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileDstIpAddrMask.setStatus('current')
aclProfileSrcIpAddrMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileSrcIpAddrMaskType.setStatus('current')
aclProfileSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 1, 2, 1, 12), Ipv6Address().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileSrcIpAddrMask.setStatus('current')
aclProfileDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 1, 2, 1, 13), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileDstPortMask.setStatus('current')
aclProfileSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 1, 2, 1, 14), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileSrcPortMask.setStatus('current')
aclProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 1, 2, 1, 30), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclProfileStatus.setStatus('current')
aclL2Rule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 2))
aclL2RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 2, 1), )
if mibBuilder.loadTexts: aclL2RuleTable.setStatus('current')
aclL2RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 2, 1, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "aclL2ProfileID"), (0, "DGS-1100-06ME-AX", "aclL2AccessID"))
if mibBuilder.loadTexts: aclL2RuleEntry.setStatus('current')
aclL2AccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL2AccessID.setStatus('current')
aclL2ProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 150)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL2ProfileID.setStatus('current')
aclL2RuleEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1501, 65535), )).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleEtherType.setStatus('current')
aclL2RuleDstMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 2, 1, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleDstMacAddr.setStatus('current')
aclL2RuleSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 2, 1, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleSrcMacAddr.setStatus('current')
aclL2RuleVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleVlanId.setStatus('current')
aclL2Rule1pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2Rule1pPriority.setStatus('current')
aclL2RuleDstMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 2, 1, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL2RuleDstMacAddrMask.setStatus('current')
aclL2RuleSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 2, 1, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL2RuleSrcMacAddrMask.setStatus('current')
aclL2RuleInPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 2, 1, 1, 10), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleInPortList.setStatus('current')
aclL2RuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2), ("rateLimit", 4), ("replaceDSCP", 5))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleAction.setStatus('current')
aclL2RuleRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 2, 1, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleRateLimit.setStatus('current')
aclL2RuleReplaceDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleReplaceDSCP.setStatus('current')
aclL2RuleNonIPFilterOnlyState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleNonIPFilterOnlyState.setStatus('current')
aclL2RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 2, 1, 1, 99), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL2RuleStatus.setStatus('current')
aclL3Rule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3))
aclL3RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 1), )
if mibBuilder.loadTexts: aclL3RuleTable.setStatus('current')
aclL3RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 1, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "aclL3RuleProfileNo"), (0, "DGS-1100-06ME-AX", "aclL3RuleAccessID"))
if mibBuilder.loadTexts: aclL3RuleEntry.setStatus('current')
aclL3RuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleAccessID.setStatus('current')
aclL3RuleProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 150))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleProfileNo.setStatus('current')
aclL3RuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 17))).clone(namedValues=NamedValues(("icmp", 1), ("igmp", 2), ("tcp", 6), ("udp", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleProtocol.setStatus('current')
aclL3RuleProtocolMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 1, 1, 4), OctetString().clone(hexValue="FF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleProtocolMask.setStatus('current')
aclL3RuleICMPMessageType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleICMPMessageType.setStatus('current')
aclL3RuleICMPMessageCode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleICMPMessageCode.setStatus('current')
aclL3RuleDstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 1, 1, 7), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleDstIpAddr.setStatus('current')
aclL3RuleSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 1, 1, 8), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleSrcIpAddr.setStatus('current')
aclL3RuleDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 1, 1, 9), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleDstIpAddrMask.setStatus('current')
aclL3RuleSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 1, 1, 10), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleSrcIpAddrMask.setStatus('current')
aclL3RuleTcpUdpDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleTcpUdpDstPort.setStatus('current')
aclL3RuleTcpUdpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleTcpUdpSrcPort.setStatus('current')
aclL3RuleTcpUdpDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleTcpUdpDstPortMask.setStatus('current')
aclL3RuleTcpUdpSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleTcpUdpSrcPortMask.setStatus('current')
aclL3RuleTcpAckBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont-care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont-care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpAckBit.setStatus('current')
aclL3RuleTcpRstBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont-care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont-care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpRstBit.setStatus('current')
aclL3RuleTcpUrgBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont-care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont-care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpUrgBit.setStatus('current')
aclL3RuleTcpPshBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont-care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont-care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpPshBit.setStatus('current')
aclL3RuleTcpSynBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont-care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont-care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpSynBit.setStatus('current')
aclL3RuleTcpFinBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont-care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont-care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpFinBit.setStatus('current')
aclL3RuleDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleDscp.setStatus('current')
aclL3RuleTos = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTos.setStatus('current')
aclL3RuleIgmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleIgmpType.setStatus('current')
aclL3RulePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 1, 1, 24), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RulePortList.setStatus('current')
aclL3RuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2), ("rateLimit", 4), ("replaceDSCP", 5))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleAction.setStatus('current')
aclL3RuleRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 1, 1, 26), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleRateLimit.setStatus('current')
aclL3RuleReplaceDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleReplaceDSCP.setStatus('current')
aclL3RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 1, 1, 29), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleStatus.setStatus('current')
aclv6L3RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 2), )
if mibBuilder.loadTexts: aclv6L3RuleTable.setStatus('current')
aclv6L3RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 2, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "aclv6L3RuleProfileNo"), (0, "DGS-1100-06ME-AX", "aclv6L3RuleAccessID"))
if mibBuilder.loadTexts: aclv6L3RuleEntry.setStatus('current')
aclv6L3RuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclv6L3RuleAccessID.setStatus('current')
aclv6L3RuleProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 150))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclv6L3RuleProfileNo.setStatus('current')
aclv6L3RuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6, 17))).clone(namedValues=NamedValues(("icmp", 1), ("tcp", 6), ("udp", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleProtocol.setStatus('current')
aclv6L3RuleProtocolMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 2, 1, 4), OctetString().clone(hexValue="FF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclv6L3RuleProtocolMask.setStatus('current')
aclv6L3RuleICMPMessageType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleICMPMessageType.setStatus('current')
aclv6L3RuleICMPMessageCode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleICMPMessageCode.setStatus('current')
aclv6L3RuleDstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 2, 1, 7), Ipv6Address().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleDstIpAddr.setStatus('current')
aclv6L3RuleSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 2, 1, 8), Ipv6Address().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleSrcIpAddr.setStatus('current')
aclv6L3RuleDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 2, 1, 9), Ipv6Address().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclv6L3RuleDstIpAddrMask.setStatus('current')
aclv6L3RuleSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 2, 1, 10), Ipv6Address().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclv6L3RuleSrcIpAddrMask.setStatus('current')
aclv6L3RuleTcpUdpDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleTcpUdpDstPort.setStatus('current')
aclv6L3RuleTcpUdpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleTcpUdpSrcPort.setStatus('current')
aclv6L3RuleTcpUdpDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 2, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclv6L3RuleTcpUdpDstPortMask.setStatus('current')
aclv6L3RuleTcpUdpSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 2, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclv6L3RuleTcpUdpSrcPortMask.setStatus('current')
aclv6L3RuleTcpAckBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont-care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont-care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclv6L3RuleTcpAckBit.setStatus('current')
aclv6L3RuleTcpRstBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont-care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont-care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclv6L3RuleTcpRstBit.setStatus('current')
aclv6L3RuleTcpUrgBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont-care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont-care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclv6L3RuleTcpUrgBit.setStatus('current')
aclv6L3RuleTcpPshBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont-care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont-care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclv6L3RuleTcpPshBit.setStatus('current')
aclv6L3RuleTcpSynBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont-care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont-care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclv6L3RuleTcpSynBit.setStatus('current')
aclv6L3RuleTcpFinBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont-care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont-care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclv6L3RuleTcpFinBit.setStatus('current')
aclv6L3RuleTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclv6L3RuleTrafficClass.setStatus('current')
aclv6L3RulePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 2, 1, 23), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RulePortList.setStatus('current')
aclv6L3RuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2), ("rateLimit", 4), ("replaceDSCP", 5))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleAction.setStatus('current')
aclv6L3RuleRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 2, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleRateLimit.setStatus('current')
aclv6L3RuleReplaceDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleReplaceDSCP.setStatus('current')
aclv6L3RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 15, 3, 2, 1, 28), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclv6L3RuleStatus.setStatus('current')
cpuFilterProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 1))
ipv4cpuFilterProfileTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 1, 1), )
if mibBuilder.loadTexts: ipv4cpuFilterProfileTable.setStatus('current')
ipv4cpuFilterProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 1, 1, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "ipv4cpuFilterProfileNo"))
if mibBuilder.loadTexts: ipv4cpuFilterProfileEntry.setStatus('current')
ipv4cpuFilterProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4cpuFilterProfileNo.setStatus('current')
ipv4cpuFilterProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 11))).clone(namedValues=NamedValues(("l2", 1), ("l3", 2), ("l3v6", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4cpuFilterProfileType.setStatus('current')
ipv4cpuFilterProfileRuleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4cpuFilterProfileRuleCount.setStatus('current')
ipv4cpuFilterProfileMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 1, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4cpuFilterProfileMask.setStatus('current')
ipv4cpuFilterProfileDstMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 1, 1, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4cpuFilterProfileDstMacAddrMask.setStatus('current')
ipv4cpuFilterProfileSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 1, 1, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4cpuFilterProfileSrcMacAddrMask.setStatus('current')
ipv4cpuFilterProfileIPProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 6, 17, 255))).clone(namedValues=NamedValues(("none", 0), ("icmp", 1), ("igmp", 2), ("tcp", 6), ("udp", 17), ("ipMask", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4cpuFilterProfileIPProtocol.setStatus('current')
ipv4cpuFilterProfileIPProtocolMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 1, 1, 1, 8), OctetString().clone(hexValue="FF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4cpuFilterProfileIPProtocolMask.setStatus('current')
ipv4cpuFilterProfileDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 1, 1, 1, 9), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4cpuFilterProfileDstIpAddrMask.setStatus('current')
ipv4cpuFilterProfileSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 1, 1, 1, 10), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4cpuFilterProfileSrcIpAddrMask.setStatus('current')
ipv4cpuFilterProfileDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 1, 1, 1, 11), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4cpuFilterProfileDstPortMask.setStatus('current')
ipv4cpuFilterProfileSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 1, 1, 1, 12), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4cpuFilterProfileSrcPortMask.setStatus('current')
ipv4cpuFilterProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 1, 1, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv4cpuFilterProfileStatus.setStatus('current')
cpuFilterProfileTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 1, 2), )
if mibBuilder.loadTexts: cpuFilterProfileTable.setStatus('current')
cpuFilterProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 1, 2, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "cpuFilterProfileNo"))
if mibBuilder.loadTexts: cpuFilterProfileEntry.setStatus('current')
cpuFilterProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterProfileNo.setStatus('current')
cpuFilterProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 11))).clone(namedValues=NamedValues(("l2", 1), ("l3", 2), ("l3v6", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileType.setStatus('current')
cpuFilterProfileRuleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterProfileRuleCount.setStatus('current')
cpuFilterProfileMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 1, 2, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileMask.setStatus('current')
cpuFilterProfileDstMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 1, 2, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileDstMacAddrMask.setStatus('current')
cpuFilterProfileSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 1, 2, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileSrcMacAddrMask.setStatus('current')
cpuFilterProfileIPProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 6, 17, 255))).clone(namedValues=NamedValues(("none", 0), ("icmp", 1), ("igmp", 2), ("tcp", 6), ("udp", 17), ("ipMask", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileIPProtocol.setStatus('current')
cpuFilterProfileIPProtocolMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 1, 2, 1, 8), OctetString().clone(hexValue="FF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileIPProtocolMask.setStatus('current')
cpuFilterProfileDstIpAddrMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileDstIpAddrMaskType.setStatus('current')
cpuFilterProfileDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 1, 2, 1, 10), Ipv6Address().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileDstIpAddrMask.setStatus('current')
cpuFilterProfileSrcIpAddrMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileSrcIpAddrMaskType.setStatus('current')
cpuFilterProfileSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 1, 2, 1, 12), Ipv6Address().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileSrcIpAddrMask.setStatus('current')
cpuFilterProfileDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 1, 2, 1, 13), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileDstPortMask.setStatus('current')
cpuFilterProfileSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 1, 2, 1, 14), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileSrcPortMask.setStatus('current')
cpuFilterProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 1, 2, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterProfileStatus.setStatus('current')
cpuFilterL2Rule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 2))
cpuFilterL2RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 2, 1), )
if mibBuilder.loadTexts: cpuFilterL2RuleTable.setStatus('current')
cpuFilterL2RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 2, 1, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "cpuFilterL2ProfileID"), (0, "DGS-1100-06ME-AX", "cpuFilterL2AccessID"))
if mibBuilder.loadTexts: cpuFilterL2RuleEntry.setStatus('current')
cpuFilterL2ProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterL2ProfileID.setStatus('current')
cpuFilterL2AccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterL2AccessID.setStatus('current')
cpuFilterL2RuleEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1501, 65535), )).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL2RuleEtherType.setStatus('current')
cpuFilterL2RuleDstMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 2, 1, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL2RuleDstMacAddr.setStatus('current')
cpuFilterL2RuleSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 2, 1, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL2RuleSrcMacAddr.setStatus('current')
cpuFilterL2RuleVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL2RuleVlanId.setStatus('current')
cpuFilterL2Rule1pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL2Rule1pPriority.setStatus('current')
cpuFilterL2RuleDstMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 2, 1, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterL2RuleDstMacAddrMask.setStatus('current')
cpuFilterL2RuleSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 2, 1, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterL2RuleSrcMacAddrMask.setStatus('current')
cpuFilterL2RuleInPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 2, 1, 1, 10), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL2RuleInPortList.setStatus('current')
cpuFilterL2RuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL2RuleAction.setStatus('current')
cpuFilterL2RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 2, 1, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterL2RuleStatus.setStatus('current')
cpuFilterL3Rule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3))
cpuFilterL3RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 1), )
if mibBuilder.loadTexts: cpuFilterL3RuleTable.setStatus('current')
cpuFilterL3RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 1, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "cpuFilterL3RuleProfileNo"), (0, "DGS-1100-06ME-AX", "cpuFilterL3RuleAccessID"))
if mibBuilder.loadTexts: cpuFilterL3RuleEntry.setStatus('current')
cpuFilterL3RuleProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterL3RuleProfileNo.setStatus('current')
cpuFilterL3RuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterL3RuleAccessID.setStatus('current')
cpuFilterL3RuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 17))).clone(namedValues=NamedValues(("icmp", 1), ("igmp", 2), ("tcp", 6), ("udp", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL3RuleProtocol.setStatus('current')
cpuFilterL3RuleProtocolMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 1, 1, 4), OctetString().clone(hexValue="FF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterL3RuleProtocolMask.setStatus('current')
cpuFilterL3RuleICMPMessageType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL3RuleICMPMessageType.setStatus('current')
cpuFilterL3RuleICMPMessageCode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL3RuleICMPMessageCode.setStatus('current')
cpuFilterL3RuleDstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 1, 1, 7), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL3RuleDstIpAddr.setStatus('current')
cpuFilterL3RuleSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 1, 1, 8), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL3RuleSrcIpAddr.setStatus('current')
cpuFilterL3RuleDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 1, 1, 9), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterL3RuleDstIpAddrMask.setStatus('current')
cpuFilterL3RuleSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 1, 1, 10), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterL3RuleSrcIpAddrMask.setStatus('current')
cpuFilterL3RuleTcpUdpDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL3RuleTcpUdpDstPort.setStatus('current')
cpuFilterL3RuleTcpUdpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL3RuleTcpUdpSrcPort.setStatus('current')
cpuFilterL3RuleTcpUdpDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterL3RuleTcpUdpDstPortMask.setStatus('current')
cpuFilterL3RuleTcpUdpSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterL3RuleTcpUdpSrcPortMask.setStatus('current')
cpuFilterL3RuleTcpAckBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dontcare", -1), ("establish", 1), ("notEstablish", 2))).clone('dontcare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterL3RuleTcpAckBit.setStatus('current')
cpuFilterL3RuleTcpRstBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dontcare", -1), ("establish", 1), ("notEstablish", 2))).clone('dontcare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterL3RuleTcpRstBit.setStatus('current')
cpuFilterL3RuleTcpUrgBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dontcare", -1), ("establish", 1), ("notEstablish", 2))).clone('dontcare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterL3RuleTcpUrgBit.setStatus('current')
cpuFilterL3RuleTcpPshBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dontcare", -1), ("establish", 1), ("notEstablish", 2))).clone('dontcare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterL3RuleTcpPshBit.setStatus('current')
cpuFilterL3RuleTcpSynBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dontcare", -1), ("establish", 1), ("notEstablish", 2))).clone('dontcare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterL3RuleTcpSynBit.setStatus('current')
cpuFilterL3RuleTcpFinBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dontcare", -1), ("establish", 1), ("notEstablish", 2))).clone('dontcare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterL3RuleTcpFinBit.setStatus('current')
cpuFilterL3RuleDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterL3RuleDscp.setStatus('current')
cpuFilterL3RuleIgmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL3RuleIgmpType.setStatus('current')
cpuFilterL3RulePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 1, 1, 23), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL3RulePortList.setStatus('current')
cpuFilterL3RuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL3RuleAction.setStatus('current')
cpuFilterL3RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 1, 1, 27), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterL3RuleStatus.setStatus('current')
cpuFilterv6L3RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 2), )
if mibBuilder.loadTexts: cpuFilterv6L3RuleTable.setStatus('current')
cpuFilterv6L3RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 2, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "cpuFilterv6L3RuleProfileNo"), (0, "DGS-1100-06ME-AX", "cpuFilterv6L3RuleAccessID"))
if mibBuilder.loadTexts: cpuFilterv6L3RuleEntry.setStatus('current')
cpuFilterv6L3RuleProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterv6L3RuleProfileNo.setStatus('current')
cpuFilterv6L3RuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterv6L3RuleAccessID.setStatus('current')
cpuFilterv6L3RuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6, 17))).clone(namedValues=NamedValues(("icmp", 1), ("tcp", 6), ("udp", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterv6L3RuleProtocol.setStatus('current')
cpuFilterv6L3RuleProtocolMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 2, 1, 4), OctetString().clone(hexValue="FF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterv6L3RuleProtocolMask.setStatus('current')
cpuFilterv6L3RuleICMPMessageType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterv6L3RuleICMPMessageType.setStatus('current')
cpuFilterv6L3RuleICMPMessageCode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterv6L3RuleICMPMessageCode.setStatus('current')
cpuFilterv6L3RuleDstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 2, 1, 7), Ipv6Address().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterv6L3RuleDstIpAddr.setStatus('current')
cpuFilterv6L3RuleSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 2, 1, 8), Ipv6Address().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterv6L3RuleSrcIpAddr.setStatus('current')
cpuFilterv6L3RuleDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 2, 1, 9), Ipv6Address().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterv6L3RuleDstIpAddrMask.setStatus('current')
cpuFilterv6L3RuleSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 2, 1, 10), Ipv6Address().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterv6L3RuleSrcIpAddrMask.setStatus('current')
cpuFilterv6L3RuleTcpUdpDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterv6L3RuleTcpUdpDstPort.setStatus('current')
cpuFilterv6L3RuleTcpUdpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterv6L3RuleTcpUdpSrcPort.setStatus('current')
cpuFilterv6L3RuleTcpUdpDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 2, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterv6L3RuleTcpUdpDstPortMask.setStatus('current')
cpuFilterv6L3RuleTcpUdpSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 2, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterv6L3RuleTcpUdpSrcPortMask.setStatus('current')
cpuFilterv6L3RuleTcpAckBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dontcare", -1), ("establish", 1), ("notEstablish", 2))).clone('dontcare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterv6L3RuleTcpAckBit.setStatus('current')
cpuFilterv6L3RuleTcpRstBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dontcare", -1), ("establish", 1), ("notEstablish", 2))).clone('dontcare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterv6L3RuleTcpRstBit.setStatus('current')
cpuFilterv6L3RuleTcpUrgBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dontcare", -1), ("establish", 1), ("notEstablish", 2))).clone('dontcare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterv6L3RuleTcpUrgBit.setStatus('current')
cpuFilterv6L3RuleTcpPshBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dontcare", -1), ("establish", 1), ("notEstablish", 2))).clone('dontcare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterv6L3RuleTcpPshBit.setStatus('current')
cpuFilterv6L3RuleTcpSynBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dontcare", -1), ("establish", 1), ("notEstablish", 2))).clone('dontcare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterv6L3RuleTcpSynBit.setStatus('current')
cpuFilterv6L3RuleTcpFinBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dontcare", -1), ("establish", 1), ("notEstablish", 2))).clone('dontcare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterv6L3RuleTcpFinBit.setStatus('current')
cpuFilterv6L3RuleTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterv6L3RuleTrafficClass.setStatus('current')
cpuFilterv6L3RulePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 2, 1, 22), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterv6L3RulePortList.setStatus('current')
cpuFilterv6L3RuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterv6L3RuleAction.setStatus('current')
cpuFilterv6L3RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 33, 3, 2, 1, 24), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterv6L3RuleStatus.setStatus('current')
snmpGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpGlobalState.setStatus('current')
snmpV3User = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 2))
snmpV3Group = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 3))
snmpV3ViewTree = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 4))
snmpV3Community = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 5))
snmpV3Host = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 6))
snmpV3EngineID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 7), SnmpEngineID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3EngineID.setStatus('current')
snmpV3Trap = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 8))
snmpV3UserTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 2, 1), )
if mibBuilder.loadTexts: snmpV3UserTable.setStatus('current')
snmpV3UserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 2, 1, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "snmpV3UserName"), (0, "DGS-1100-06ME-AX", "snmpV3UserVersion"))
if mibBuilder.loadTexts: snmpV3UserEntry.setStatus('current')
snmpV3UserName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 2, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3UserName.setStatus('current')
snmpV3UserVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3UserVersion.setStatus('current')
snmpV3UserGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 2, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserGroupName.setStatus('current')
snmpV3UserAuthProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("md5", 2), ("sha", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserAuthProtocol.setStatus('current')
snmpV3UserAuthProtocolPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 2, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserAuthProtocolPassword.setStatus('current')
snmpV3UserPrivProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("des", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserPrivProtocol.setStatus('current')
snmpV3UserPrivProtocolPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 2, 1, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserPrivProtocolPassword.setStatus('current')
snmpV3UserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 2, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserStatus.setStatus('current')
snmpV3GroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 3, 1), )
if mibBuilder.loadTexts: snmpV3GroupTable.setStatus('current')
snmpV3GroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 3, 1, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "snmpV3GroupName"), (0, "DGS-1100-06ME-AX", "snmpV3GroupSecurityModel"), (0, "DGS-1100-06ME-AX", "snmpV3GroupSecurityLevel"))
if mibBuilder.loadTexts: snmpV3GroupEntry.setStatus('current')
snmpV3GroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 3, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3GroupName.setStatus('current')
snmpV3GroupSecurityModel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3GroupSecurityModel.setStatus('current')
snmpV3GroupSecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 3, 1, 1, 3), SnmpSecurityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3GroupSecurityLevel.setStatus('current')
snmpV3GroupReadViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 3, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3GroupReadViewName.setStatus('current')
snmpV3GroupWriteViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 3, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3GroupWriteViewName.setStatus('current')
snmpV3GroupNotifyViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 3, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3GroupNotifyViewName.setStatus('current')
snmpV3GroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 3, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3GroupStatus.setStatus('current')
snmpV3ViewTreeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 4, 1), )
if mibBuilder.loadTexts: snmpV3ViewTreeTable.setStatus('current')
snmpV3ViewTreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 4, 1, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "snmpV3viewTreeName"), (0, "DGS-1100-06ME-AX", "snmpV3viewTreeSubtree"))
if mibBuilder.loadTexts: snmpV3ViewTreeEntry.setStatus('current')
snmpV3viewTreeName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 4, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3viewTreeName.setStatus('current')
snmpV3viewTreeSubtree = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 4, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3viewTreeSubtree.setStatus('current')
snmpV3viewTreeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3viewTreeMask.setStatus('current')
snmpV3viewTreeType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("included", 1), ("excluded", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3viewTreeType.setStatus('current')
snmpV3viewTreeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 4, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3viewTreeStatus.setStatus('current')
snmpV3CommunityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 5, 1), )
if mibBuilder.loadTexts: snmpV3CommunityTable.setStatus('current')
snmpV3CommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 5, 1, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "snmpV3CommunityName"))
if mibBuilder.loadTexts: snmpV3CommunityEntry.setStatus('current')
snmpV3CommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 5, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3CommunityName.setStatus('current')
snmpV3CommunityPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 5, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3CommunityPolicy.setStatus('current')
snmpV3CommunityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 5, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3CommunityStatus.setStatus('current')
snmpV3HostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 6, 2), )
if mibBuilder.loadTexts: snmpV3HostTable.setStatus('current')
snmpV3HostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 6, 2, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "snmpV3HostAddress"), (0, "DGS-1100-06ME-AX", "snmpV3IPType"))
if mibBuilder.loadTexts: snmpV3HostEntry.setStatus('current')
snmpV3HostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 6, 2, 1, 1), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3HostAddress.setStatus('current')
snmpV3IPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3IPType.setStatus('current')
snmpV3HostCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 6, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3HostCommunityName.setStatus('current')
snmpV3HostVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3NoAuthNoPriv", 3), ("v3AuthNoPriv", 4), ("v3AuthPriv", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3HostVersion.setStatus('current')
snmpV3HostInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 6, 2, 1, 5), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3HostInterfaceName.setStatus('current')
snmpV3HostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 6, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3HostStatus.setStatus('current')
snmpV3TrapSNMPAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapSNMPAuthentication.setStatus('current')
snmpV3TrapColdStart = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapColdStart.setStatus('current')
snmpV3TrapWarmStart = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapWarmStart.setStatus('current')
snmpV3TrapLinkUpDown = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapLinkUpDown.setStatus('current')
snmpV3TrapPortSecurity = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 8, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapPortSecurity.setStatus('current')
snmpV3TrapLBD = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 5, 8, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapLBD.setStatus('current')
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 120, 0))
snmpTrapSNMPAuthentication = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 120, 0, 1))
if mibBuilder.loadTexts: snmpTrapSNMPAuthentication.setStatus('current')
snmpTrapColdStart = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 120, 0, 2))
if mibBuilder.loadTexts: snmpTrapColdStart.setStatus('current')
snmpTrapWarmStart = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 120, 0, 3))
if mibBuilder.loadTexts: snmpTrapWarmStart.setStatus('current')
snmpTrapCopperLinkUpDown = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 120, 0, 4))
if mibBuilder.loadTexts: snmpTrapCopperLinkUpDown.setStatus('current')
snmpTrapRSTPStateChange = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 120, 0, 5))
if mibBuilder.loadTexts: snmpTrapRSTPStateChange.setStatus('current')
snmpTrapFirmUpgrade = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 120, 0, 6))
if mibBuilder.loadTexts: snmpTrapFirmUpgrade.setStatus('current')
snmpTrapPortSecurity = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 120, 0, 12))
if mibBuilder.loadTexts: snmpTrapPortSecurity.setStatus('current')
snmpTrapLBD = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 120, 0, 14))
if mibBuilder.loadTexts: snmpTrapLBD.setStatus('current')
macNotificatiotn = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 120, 0, 17))
if mibBuilder.loadTexts: macNotificatiotn.setStatus('current')
duplicateIP = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 120, 0, 21))
if mibBuilder.loadTexts: duplicateIP.setStatus('current')
trafficControl = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 120, 0, 22))
if mibBuilder.loadTexts: trafficControl.setStatus('current')
topologyChange = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 120, 0, 23))
if mibBuilder.loadTexts: topologyChange.setStatus('current')
newRootBrgaddress = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 120, 0, 24))
if mibBuilder.loadTexts: newRootBrgaddress.setStatus('current')
newRootOlddesignatedroot = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 120, 0, 25))
if mibBuilder.loadTexts: newRootOlddesignatedroot.setStatus('current')
newRootMSTibridgeregionalroot = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 120, 0, 26))
if mibBuilder.loadTexts: newRootMSTibridgeregionalroot.setStatus('current')
syslogSettingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 16, 1))
syslogEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogEnable.setStatus('current')
syslogSaveMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("onDemand", 0), ("timeInterval", 1), ("logTrigger", 2))).clone('logTrigger')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogSaveMode.setStatus('current')
syslogSaveMinutes = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 16, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogSaveMinutes.setStatus('current')
syslogServerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 16, 3))
syslogServTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 16, 3, 1), )
if mibBuilder.loadTexts: syslogServTable.setStatus('current')
syslogServEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 16, 3, 1, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "syslogServIndex"))
if mibBuilder.loadTexts: syslogServEntry.setStatus('current')
syslogServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 16, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogServIndex.setStatus('current')
syslogServAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 16, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogServAddrType.setStatus('current')
syslogServAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 16, 3, 1, 1, 3), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogServAddr.setStatus('current')
syslogServInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 16, 3, 1, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogServInterfaceName.setStatus('current')
syslogServSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 16, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 6, 7))).clone(namedValues=NamedValues(("warning", 4), ("information", 6), ("all", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogServSeverity.setStatus('current')
syslogServFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 16, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(128, 136, 144, 152, 160, 168, 176, 184))).clone(namedValues=NamedValues(("local0", 128), ("local1", 136), ("local2", 144), ("local3", 152), ("local4", 160), ("local5", 168), ("local6", 176), ("local7", 184))).clone('local0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogServFacility.setStatus('current')
syslogServUDPport = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 16, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(514, 514), ValueRangeConstraint(6000, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogServUDPport.setStatus('current')
syslogServSrvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 16, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServSrvStatus.setStatus('current')
syslogServSrvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 16, 3, 1, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServSrvRowStatus.setStatus('current')
sysLBDStateEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDStateEnable.setStatus('current')
sysLBDMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 17, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port", 1), ("vlan", 2))).clone('port')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDMode.setStatus('current')
sysLBDInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 17, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDInterval.setStatus('current')
sysLBDRecoverTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 17, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 1000000), )).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDRecoverTime.setStatus('current')
sysLBDCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 17, 5), )
if mibBuilder.loadTexts: sysLBDCtrlTable.setStatus('current')
sysLBDCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 17, 5, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "sysLBDCtrlIndex"))
if mibBuilder.loadTexts: sysLBDCtrlEntry.setStatus('current')
sysLBDCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 17, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLBDCtrlIndex.setStatus('current')
sysLBDPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 17, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDPortStatus.setStatus('current')
sysLBDPortLoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 17, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("loop", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLBDPortLoopStatus.setStatus('current')
sysLBDVlanLoopTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 17, 6), )
if mibBuilder.loadTexts: sysLBDVlanLoopTable.setStatus('current')
sysLBDVlanLoopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 17, 6, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "sysLBDVlanLoopIndex"))
if mibBuilder.loadTexts: sysLBDVlanLoopEntry.setStatus('current')
sysLBDVlanLoopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 17, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLBDVlanLoopIndex.setStatus('current')
sysLBDVlanLoopPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 17, 6, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLBDVlanLoopPorts.setStatus('current')
sysMirrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMirrorStatus.setStatus('current')
sysMirrorTargetPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 18, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMirrorTargetPort.setStatus('current')
sysMirrorCtrlIngressMirroring = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 18, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMirrorCtrlIngressMirroring.setStatus('current')
sysMirrorCtrlEgressMirroring = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 18, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMirrorCtrlEgressMirroring.setStatus('current')
sysTrapIP = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 30, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapIP.setStatus('current')
sysTrapSystemEvent = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 30, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("deviceBootUp", 1), ("illegalLogin", 2), ("both", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapSystemEvent.setStatus('current')
sysTrapFiberPortEvent = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 30, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapFiberPortEvent.setStatus('current')
sysTrapTwistedPortEvent = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 30, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapTwistedPortEvent.setStatus('current')
sysTrapStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 30, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapStatus.setStatus('current')
sysTrapPortSecurity = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 30, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapPortSecurity.setStatus('current')
sysTrapLBD = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 30, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTrapLBD.setStatus('current')
sysSNTPServerTable = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 20, 17))
sysSNTPTimeSeconds = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 20, 17, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPTimeSeconds.setStatus('current')
sysSNTPFirstServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 20, 17, 2), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPFirstServer.setStatus('current')
sysSNTPFirstType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 20, 17, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPFirstType.setStatus('current')
sysSNTPFirstInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 20, 17, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPFirstInterfaceName.setStatus('current')
sysSNTPSecondServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 20, 17, 5), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPSecondServer.setStatus('current')
sysSNTPSecondType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 20, 17, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPSecondType.setStatus('current')
sysSNTPSecondInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 20, 17, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPSecondInterfaceName.setStatus('current')
sysSNTPPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 20, 17, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPPollInterval.setStatus('current')
sysSNTPState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 20, 17, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sntp", 1), ("local", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPState.setStatus('current')
sysSNTPDSTOffset = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 20, 17, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(30, 60, 90, 120))).clone(namedValues=NamedValues(("offset30min", 30), ("offset60min", 60), ("offset90min", 90), ("offset120min", 120)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTOffset.setStatus('current')
sysSNTPGMTMinutes = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 20, 17, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPGMTMinutes.setStatus('current')
sysSNTPDSTStartMon = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 20, 17, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTStartMon.setStatus('current')
sysSNTPDSTStartDay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 20, 17, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTStartDay.setStatus('current')
sysSNTPDSTStartHour = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 20, 17, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTStartHour.setStatus('current')
sysSNTPDSTStartMin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 20, 17, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTStartMin.setStatus('current')
sysSNTPDSTEndMon = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 20, 17, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTEndMon.setStatus('current')
sysSNTPDSTEndDay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 20, 17, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTEndDay.setStatus('current')
sysSNTPDSTEndHour = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 20, 17, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTEndHour.setStatus('current')
sysSNTPDSTEndMin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 20, 17, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTEndMin.setStatus('current')
sysSNTPDSTState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 20, 17, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTState.setStatus('current')
sysSNTPDSTMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 20, 17, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("annual", 1), ("repeating", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTMethod.setStatus('current')
sysSNTPDSTRepeatStartMon = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 20, 17, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTRepeatStartMon.setStatus('current')
sysSNTPDSTRepeatStartWeek = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 20, 17, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("last", 0), ("first", 1), ("second", 2), ("third", 3), ("fourth", 4), ("fifth", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTRepeatStartWeek.setStatus('current')
sysSNTPDSTRepeatStartWeekDay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 20, 17, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sun", 0), ("mon", 1), ("tue", 2), ("wed", 3), ("thu", 4), ("fri", 5), ("sat", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTRepeatStartWeekDay.setStatus('current')
sysSNTPDSTRepeatStartHour = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 20, 17, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTRepeatStartHour.setStatus('current')
sysSNTPDSTRepeatStartMin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 20, 17, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTRepeatStartMin.setStatus('current')
sysSNTPDSTRepeatEndMon = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 20, 17, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTRepeatEndMon.setStatus('current')
sysSNTPDSTRepeatEndWeek = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 20, 17, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("last", 0), ("first", 1), ("second", 2), ("third", 3), ("fourth", 4), ("fifth", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTRepeatEndWeek.setStatus('current')
sysSNTPDSTRepeatEndWeekDay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 20, 17, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sun", 0), ("mon", 1), ("tue", 2), ("wed", 3), ("thu", 4), ("fri", 5), ("sat", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTRepeatEndWeekDay.setStatus('current')
sysSNTPDSTRepeatEndHour = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 20, 17, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTRepeatEndHour.setStatus('current')
sysSNTPDSTRepeatEndMin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 20, 17, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTRepeatEndMin.setStatus('current')
limitIpMulticastProfileTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 45, 1), )
if mibBuilder.loadTexts: limitIpMulticastProfileTable.setStatus('current')
limitIpMulticastProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 45, 1, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "limitIpMulticastIPType"), (0, "DGS-1100-06ME-AX", "limitIpMulticastProfileID"))
if mibBuilder.loadTexts: limitIpMulticastProfileEntry.setStatus('current')
limitIpMulticastIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 45, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: limitIpMulticastIPType.setStatus('current')
limitIpMulticastProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 45, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: limitIpMulticastProfileID.setStatus('current')
limitIpMulticastProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 45, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: limitIpMulticastProfileName.setStatus('current')
limitIpMulticastProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 45, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: limitIpMulticastProfileStatus.setStatus('current')
limitIpMulticastEntryTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 45, 2), )
if mibBuilder.loadTexts: limitIpMulticastEntryTable.setStatus('current')
limitIpMulticastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 45, 2, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "limitIpMulticastEntryIPType"), (0, "DGS-1100-06ME-AX", "limitIpMulticastEntryProfileID"), (0, "DGS-1100-06ME-AX", "limitIpMulticaststartIpAddr"), (0, "DGS-1100-06ME-AX", "limitIpMulticastendIpAddr"))
if mibBuilder.loadTexts: limitIpMulticastEntry.setStatus('current')
limitIpMulticastEntryIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 45, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: limitIpMulticastEntryIPType.setStatus('current')
limitIpMulticastEntryProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 45, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: limitIpMulticastEntryProfileID.setStatus('current')
limitIpMulticaststartIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 45, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: limitIpMulticaststartIpAddr.setStatus('current')
limitIpMulticastendIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 45, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: limitIpMulticastendIpAddr.setStatus('current')
limitIpMulticastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 45, 2, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: limitIpMulticastStatus.setStatus('current')
limitIpMulticastPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 45, 3), )
if mibBuilder.loadTexts: limitIpMulticastPortTable.setStatus('current')
limitIpMulticastPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 45, 3, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "limitIpMulticastPortIPType"), (0, "DGS-1100-06ME-AX", "limitIpMulticastPortID"))
if mibBuilder.loadTexts: limitIpMulticastPortEntry.setStatus('current')
limitIpMulticastPortIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 45, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: limitIpMulticastPortIPType.setStatus('current')
limitIpMulticastPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 45, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: limitIpMulticastPortID.setStatus('current')
limitIpMulticastPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 45, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: limitIpMulticastPortState.setStatus('current')
limitIpMulticastPortProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 45, 3, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: limitIpMulticastPortProfileID.setStatus('current')
limitIpMulticastPortMaxGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 45, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: limitIpMulticastPortMaxGrp.setStatus('current')
guestVlanName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 24, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: guestVlanName.setStatus('current')
guestVlanPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 24, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: guestVlanPort.setStatus('current')
guestVlanDelState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 24, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: guestVlanDelState.setStatus('current')
macNotifyState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macNotifyState.setStatus('current')
macNotifyInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 25, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macNotifyInterval.setStatus('current')
macNotifyHistorySize = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 25, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macNotifyHistorySize.setStatus('current')
macNotifyCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 25, 4), )
if mibBuilder.loadTexts: macNotifyCtrlTable.setStatus('current')
macNotifyCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 25, 4, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "macNotifyCtrlIndex"))
if mibBuilder.loadTexts: macNotifyCtrlEntry.setStatus('current')
macNotifyCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 25, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNotifyCtrlIndex.setStatus('current')
macNotifyPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 25, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macNotifyPortStatus.setStatus('current')
macNotifyInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 25, 5))
macNotifyInfoDiscription = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 25, 5, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: macNotifyInfoDiscription.setStatus('current')
qinqSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 37, 1))
qinqGlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 37, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qinqGlobalStatus.setStatus('current')
qinqTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 37, 1, 2), )
if mibBuilder.loadTexts: qinqTable.setStatus('current')
qinqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 37, 1, 2, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "qinqIfIndex"))
if mibBuilder.loadTexts: qinqEntry.setStatus('current')
qinqIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 37, 1, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qinqIfIndex.setStatus('current')
qinqRoleState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 37, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nni", 1), ("uni", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qinqRoleState.setStatus('current')
qinqOuterTPID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 37, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qinqOuterTPID.setStatus('current')
eoamSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 51, 1))
eoamLinkMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 51, 2))
eoamTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 51, 1, 2), )
if mibBuilder.loadTexts: eoamTable.setStatus('current')
eoamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 51, 1, 2, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "eoamIfIndex"))
if mibBuilder.loadTexts: eoamEntry.setStatus('current')
eoamIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 51, 1, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamIfIndex.setStatus('current')
eoamState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 51, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eoamState.setStatus('current')
eoamMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 51, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("passive", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eoamMode.setStatus('current')
eoamReceivedRemoteLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 51, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ignore", 1), ("process", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eoamReceivedRemoteLoopback.setStatus('current')
eoamRemoteLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 51, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noLoopBack", 1), ("startLoopBack", 2), ("remoteLoopBack", 3), ("stopLoopBack", 4), ("localLoopBack", 5), ("unknownLoopBack", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eoamRemoteLoopback.setStatus('current')
eoamDyingGaspEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 51, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eoamDyingGaspEnable.setStatus('current')
eoamCriticalEventEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 51, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eoamCriticalEventEnable.setStatus('current')
eoamLinkMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 51, 2, 1), )
if mibBuilder.loadTexts: eoamLinkMonitorTable.setStatus('current')
eoamLinkMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 51, 2, 1, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "eoamLinkMonitorIfIndex"))
if mibBuilder.loadTexts: eoamLinkMonitorEntry.setStatus('current')
eoamLinkMonitorIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 51, 2, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamLinkMonitorIfIndex.setStatus('current')
errorSymbolNotifyState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 51, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorSymbolNotifyState.setStatus('current')
errorSymbolThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 51, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorSymbolThreshold.setStatus('current')
errorSymbolWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 51, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorSymbolWindow.setStatus('current')
errorFrameNotifyState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 51, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorFrameNotifyState.setStatus('current')
errorFrameThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 51, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorFrameThreshold.setStatus('current')
errorFrameWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 51, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorFrameWindow.setStatus('current')
errorFrameSecondsNotifyState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 51, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorFrameSecondsNotifyState.setStatus('current')
errorFrameSecondsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 51, 2, 1, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorFrameSecondsThreshold.setStatus('current')
errorFrameSecondsWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 51, 2, 1, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorFrameSecondsWindow.setStatus('current')
errorFramePeriodNotifyState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 51, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorFramePeriodNotifyState.setStatus('current')
errorFramePeriodThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 51, 2, 1, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorFramePeriodThreshold.setStatus('current')
errorFramePeriodWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 51, 2, 1, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorFramePeriodWindow.setStatus('current')
duldSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 52, 1))
duldTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 52, 1, 1), )
if mibBuilder.loadTexts: duldTable.setStatus('current')
duldEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 52, 1, 1, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "duldIfIndex"))
if mibBuilder.loadTexts: duldEntry.setStatus('current')
duldIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 52, 1, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: duldIfIndex.setStatus('current')
duldState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 52, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: duldState.setStatus('current')
duldOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 52, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: duldOperState.setStatus('current')
duldMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 52, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("shutdown", 1), ("normal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: duldMode.setStatus('current')
duldLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 52, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknow", 1), ("bidirectional", 2), ("txFault", 3), ("rxFault", 4), ("linkDown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: duldLinkStatus.setStatus('current')
duldDiscoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 52, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: duldDiscoveryTime.setStatus('current')
swTimeRangeSettingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 38, 1), )
if mibBuilder.loadTexts: swTimeRangeSettingTable.setStatus('current')
swTimeRangeSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 38, 1, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "swTimeRangeIndex"))
if mibBuilder.loadTexts: swTimeRangeSettingEntry.setStatus('current')
swTimeRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 38, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTimeRangeIndex.setStatus('current')
swTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 38, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeName.setStatus('current')
swTimeRangeDate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 38, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeDate.setStatus('current')
swTimeRangeStartYear = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 38, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029))).clone(namedValues=NamedValues(("y2011", 2011), ("y2012", 2012), ("y2013", 2013), ("y2014", 2014), ("y2015", 2015), ("y2016", 2016), ("y2017", 2017), ("y2018", 2018), ("y2019", 2019), ("y2020", 2020), ("y2021", 2021), ("y2022", 2022), ("y2023", 2023), ("y2024", 2024), ("y2025", 2025), ("y2026", 2026), ("y2027", 2027), ("y2028", 2028), ("y2029", 2029)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeStartYear.setStatus('current')
swTimeRangeStartMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 38, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("january", 1), ("february", 2), ("march", 3), ("april", 4), ("may", 5), ("june", 6), ("july", 7), ("august", 8), ("september", 9), ("october", 10), ("november", 11), ("december", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeStartMonth.setStatus('current')
swTimeRangeStartDay = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 38, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeStartDay.setStatus('current')
swTimeRangeStartHour = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 38, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeStartHour.setStatus('current')
swTimeRangeStartMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 38, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeStartMinute.setStatus('current')
swTimeRangeEndYear = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 38, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029))).clone(namedValues=NamedValues(("y2011", 2011), ("y2012", 2012), ("y2013", 2013), ("y2014", 2014), ("y2015", 2015), ("y2016", 2016), ("y2017", 2017), ("y2018", 2018), ("y2019", 2019), ("y2020", 2020), ("y2021", 2021), ("y2022", 2022), ("y2023", 2023), ("y2024", 2024), ("y2025", 2025), ("y2026", 2026), ("y2027", 2027), ("y2028", 2028), ("y2029", 2029)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeEndYear.setStatus('current')
swTimeRangeEndMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 38, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("january", 1), ("february", 2), ("march", 3), ("april", 4), ("may", 5), ("june", 6), ("july", 7), ("august", 8), ("september", 9), ("october", 10), ("november", 11), ("december", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeEndMonth.setStatus('current')
swTimeRangeEndDay = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 38, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeEndDay.setStatus('current')
swTimeRangeEndHour = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 38, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeEndHour.setStatus('current')
swTimeRangeEndMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 38, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeEndMinute.setStatus('current')
swTimeRangeMonday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 38, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeMonday.setStatus('current')
swTimeRangeTuesday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 38, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeTuesday.setStatus('current')
swTimeRangeWednesday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 38, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeWednesday.setStatus('current')
swTimeRangeThursday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 38, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeThursday.setStatus('current')
swTimeRangeFriday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 38, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeFriday.setStatus('current')
swTimeRangeSaturday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 38, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeSaturday.setStatus('current')
swTimeRangeSunday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 38, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeSunday.setStatus('current')
swTimeRangeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 38, 1, 1, 21), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swTimeRangeRowStatus.setStatus('current')
dlinklldpState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpState.setStatus('current')
dlinklldpMsgHoldMultiplier = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpMsgHoldMultiplier.setStatus('current')
dlinklldpMsgTxInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 32768))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpMsgTxInterval.setStatus('current')
dlinklldpReinitDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpReinitDelay.setStatus('current')
dlinklldpTxDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpTxDelay.setStatus('current')
dlinklldpConfigManAddrPortsTxEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 6), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpConfigManAddrPortsTxEnable.setStatus('current')
class LldpPortNumber(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4096)

lldpPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 11), )
if mibBuilder.loadTexts: lldpPortConfigTable.setStatus('current')
lldpPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 11, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "lldpPortConfigPortNum"))
if mibBuilder.loadTexts: lldpPortConfigEntry.setStatus('current')
lldpPortConfigPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 11, 1, 1), LldpPortNumber())
if mibBuilder.loadTexts: lldpPortConfigPortNum.setStatus('current')
lldpPortConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("txOnly", 1), ("rxOnly", 2), ("txAndRx", 3), ("disabled", 4))).clone('txAndRx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpPortConfigAdminStatus.setStatus('current')
lldpPortConfigNotificationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 11, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpPortConfigNotificationEnable.setStatus('current')
lldpPortConfigTLVsTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 11, 1, 4), Bits().clone(namedValues=NamedValues(("portDesc", 0), ("sysName", 1), ("sysDesc", 2), ("sysCap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpPortConfigTLVsTxEnable.setStatus('current')
lldpXdot3Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12))
lldpXdot3Config = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 1))
lldpXdot3LocalData = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 2))
lldpXdot3RemoteData = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 3))
class LldpPowerPortClass(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("pClassPSE", 1), ("pClassPD", 2))

class LldpLinkAggStatusMap(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("aggCapable", 0), ("aggEnabled", 1))

lldpXdot3PortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 1, 1), )
if mibBuilder.loadTexts: lldpXdot3PortConfigTable.setStatus('current')
lldpXdot3PortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 1, 1, 1), )
lldpPortConfigEntry.registerAugmentions(("DGS-1100-06ME-AX", "lldpXdot3PortConfigEntry"))
lldpXdot3PortConfigEntry.setIndexNames(*lldpPortConfigEntry.getIndexNames())
if mibBuilder.loadTexts: lldpXdot3PortConfigEntry.setStatus('current')
lldpXdot3PortConfigTLVsTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 1, 1, 1, 1), Bits().clone(namedValues=NamedValues(("macPhyConfigStatus", 0), ("powerViaMDI", 1), ("linkAggregation", 2), ("maxFrameSize", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot3PortConfigTLVsTxEnable.setStatus('current')
lldpXdot3LocPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 2, 1), )
if mibBuilder.loadTexts: lldpXdot3LocPortTable.setStatus('current')
lldpXdot3LocPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 2, 1, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "lldpXdot3LocPortAutoNegSupported"))
if mibBuilder.loadTexts: lldpXdot3LocPortEntry.setStatus('current')
lldpXdot3LocPortAutoNegSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 2, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPortAutoNegSupported.setStatus('current')
lldpXdot3LocPortAutoNegEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 2, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPortAutoNegEnabled.setStatus('current')
lldpXdot3LocPortAutoNegAdvertisedCap = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPortAutoNegAdvertisedCap.setStatus('current')
lldpXdot3LocPortOperMauType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPortOperMauType.setStatus('current')
lldpXdot3LocPowerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 2, 2), )
if mibBuilder.loadTexts: lldpXdot3LocPowerTable.setStatus('current')
lldpXdot3LocPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 2, 2, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "lldpXdot3LocPowerPortClass"))
if mibBuilder.loadTexts: lldpXdot3LocPowerEntry.setStatus('current')
lldpXdot3LocPowerPortClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 2, 2, 1, 1), LldpPowerPortClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPowerPortClass.setStatus('current')
lldpXdot3LocPowerMDISupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 2, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPowerMDISupported.setStatus('current')
lldpXdot3LocPowerMDIEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 2, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPowerMDIEnabled.setStatus('current')
lldpXdot3LocPowerPairControlable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 2, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPowerPairControlable.setStatus('current')
lldpXdot3LocPowerPairs = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPowerPairs.setStatus('current')
lldpXdot3LocPowerClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ValueRangeConstraint(4, 4), ValueRangeConstraint(5, 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPowerClass.setStatus('current')
lldpXdot3LocLinkAggTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 2, 3), )
if mibBuilder.loadTexts: lldpXdot3LocLinkAggTable.setStatus('current')
lldpXdot3LocLinkAggEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 2, 3, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "lldpXdot3LocLinkAggStatus"))
if mibBuilder.loadTexts: lldpXdot3LocLinkAggEntry.setStatus('current')
lldpXdot3LocLinkAggStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 2, 3, 1, 1), LldpLinkAggStatusMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocLinkAggStatus.setStatus('current')
lldpXdot3LocLinkAggPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 2147483647), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocLinkAggPortId.setStatus('current')
lldpXdot3LocMaxFrameSizeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 2, 4), )
if mibBuilder.loadTexts: lldpXdot3LocMaxFrameSizeTable.setStatus('current')
lldpXdot3LocMaxFrameSizeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 2, 4, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "lldpXdot3LocMaxFrameSize"))
if mibBuilder.loadTexts: lldpXdot3LocMaxFrameSizeEntry.setStatus('current')
lldpXdot3LocMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocMaxFrameSize.setStatus('current')
lldpXdot3RemPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 3, 1), )
if mibBuilder.loadTexts: lldpXdot3RemPortTable.setStatus('current')
lldpXdot3RemPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 3, 1, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "lldpXdot3RemPortAutoNegSupported"))
if mibBuilder.loadTexts: lldpXdot3RemPortEntry.setStatus('current')
lldpXdot3RemPortAutoNegSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 3, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPortAutoNegSupported.setStatus('current')
lldpXdot3RemPortAutoNegEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 3, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPortAutoNegEnabled.setStatus('current')
lldpXdot3RemPortAutoNegAdvertisedCap = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPortAutoNegAdvertisedCap.setStatus('current')
lldpXdot3RemPortOperMauType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPortOperMauType.setStatus('current')
lldpXdot3RemPowerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 3, 2), )
if mibBuilder.loadTexts: lldpXdot3RemPowerTable.setStatus('current')
lldpXdot3RemPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 3, 2, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "lldpXdot3RemPowerPortClass"))
if mibBuilder.loadTexts: lldpXdot3RemPowerEntry.setStatus('current')
lldpXdot3RemPowerPortClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 3, 2, 1, 1), LldpPowerPortClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPowerPortClass.setStatus('current')
lldpXdot3RemPowerMDISupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 3, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPowerMDISupported.setStatus('current')
lldpXdot3RemPowerMDIEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 3, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPowerMDIEnabled.setStatus('current')
lldpXdot3RemPowerPairControlable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 3, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPowerPairControlable.setStatus('current')
lldpXdot3RemPowerPairs = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPowerPairs.setStatus('current')
lldpXdot3RemPowerClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ValueRangeConstraint(4, 4), ValueRangeConstraint(5, 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPowerClass.setStatus('current')
lldpXdot3RemLinkAggTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 3, 3), )
if mibBuilder.loadTexts: lldpXdot3RemLinkAggTable.setStatus('current')
lldpXdot3RemLinkAggEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 3, 3, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "lldpXdot3RemLinkAggStatus"))
if mibBuilder.loadTexts: lldpXdot3RemLinkAggEntry.setStatus('current')
lldpXdot3RemLinkAggStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 3, 3, 1, 1), LldpLinkAggStatusMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemLinkAggStatus.setStatus('current')
lldpXdot3RemLinkAggPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 2147483647), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemLinkAggPortId.setStatus('current')
lldpXdot3RemMaxFrameSizeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 3, 4), )
if mibBuilder.loadTexts: lldpXdot3RemMaxFrameSizeTable.setStatus('current')
lldpXdot3RemMaxFrameSizeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 3, 4, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "lldpXdot3RemMaxFrameSize"))
if mibBuilder.loadTexts: lldpXdot3RemMaxFrameSizeEntry.setStatus('current')
lldpXdot3RemMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 12, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemMaxFrameSize.setStatus('current')
lldpXdot1Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13))
lldpXdot1Config = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 1))
lldpXdot1LocalData = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 2))
lldpXdot1RemoteData = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 3))
lldpXdot1ConfigPortVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 1, 1), )
if mibBuilder.loadTexts: lldpXdot1ConfigPortVlanTable.setStatus('current')
lldpXdot1ConfigPortVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 1, 1, 1), )
lldpPortConfigEntry.registerAugmentions(("DGS-1100-06ME-AX", "lldpXdot1ConfigPortVlanEntry"))
lldpXdot1ConfigPortVlanEntry.setIndexNames(*lldpPortConfigEntry.getIndexNames())
if mibBuilder.loadTexts: lldpXdot1ConfigPortVlanEntry.setStatus('current')
lldpXdot1ConfigPortVlanTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 1, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot1ConfigPortVlanTxEnable.setStatus('current')
lldpXdot1LocVlanNameTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 2, 3), )
if mibBuilder.loadTexts: lldpXdot1LocVlanNameTable.setStatus('current')
lldpXdot1LocVlanNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 2, 3, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "lldpXdot1LocVlanId"))
if mibBuilder.loadTexts: lldpXdot1LocVlanNameEntry.setStatus('current')
lldpXdot1LocVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 2, 3, 1, 1), VlanId())
if mibBuilder.loadTexts: lldpXdot1LocVlanId.setStatus('current')
lldpXdot1LocVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 2, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1LocVlanName.setStatus('current')
lldpXdot1ConfigVlanNameTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 1, 2), )
if mibBuilder.loadTexts: lldpXdot1ConfigVlanNameTable.setStatus('current')
lldpXdot1ConfigVlanNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 1, 2, 1), )
lldpXdot1LocVlanNameEntry.registerAugmentions(("DGS-1100-06ME-AX", "lldpXdot1ConfigVlanNameEntry"))
lldpXdot1ConfigVlanNameEntry.setIndexNames(*lldpXdot1LocVlanNameEntry.getIndexNames())
if mibBuilder.loadTexts: lldpXdot1ConfigVlanNameEntry.setStatus('current')
lldpXdot1ConfigVlanNameTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 1, 2, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot1ConfigVlanNameTxEnable.setStatus('current')
lldpXdot1LocProtoVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 2, 2), )
if mibBuilder.loadTexts: lldpXdot1LocProtoVlanTable.setStatus('current')
lldpXdot1LocProtoVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 2, 2, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "lldpXdot1LocProtoVlanId"))
if mibBuilder.loadTexts: lldpXdot1LocProtoVlanEntry.setStatus('current')
lldpXdot1LocProtoVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), )))
if mibBuilder.loadTexts: lldpXdot1LocProtoVlanId.setStatus('current')
lldpXdot1LocProtoVlanSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 2, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1LocProtoVlanSupported.setStatus('current')
lldpXdot1LocProtoVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 2, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1LocProtoVlanEnabled.setStatus('current')
lldpXdot1ConfigProtoVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 1, 3), )
if mibBuilder.loadTexts: lldpXdot1ConfigProtoVlanTable.setStatus('current')
lldpXdot1ConfigProtoVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 1, 3, 1), )
lldpXdot1LocProtoVlanEntry.registerAugmentions(("DGS-1100-06ME-AX", "lldpXdot1ConfigProtoVlanEntry"))
lldpXdot1ConfigProtoVlanEntry.setIndexNames(*lldpXdot1LocProtoVlanEntry.getIndexNames())
if mibBuilder.loadTexts: lldpXdot1ConfigProtoVlanEntry.setStatus('current')
lldpXdot1ConfigProtoVlanTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 1, 3, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot1ConfigProtoVlanTxEnable.setStatus('current')
lldpXdot1LocProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 2, 4), )
if mibBuilder.loadTexts: lldpXdot1LocProtocolTable.setStatus('current')
lldpXdot1LocProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 2, 4, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "lldpXdot1LocProtocolIndex"))
if mibBuilder.loadTexts: lldpXdot1LocProtocolEntry.setStatus('current')
lldpXdot1LocProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: lldpXdot1LocProtocolIndex.setStatus('current')
lldpXdot1LocProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 2, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1LocProtocolId.setStatus('current')
lldpXdot1ConfigProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 1, 4), )
if mibBuilder.loadTexts: lldpXdot1ConfigProtocolTable.setStatus('current')
lldpXdot1ConfigProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 1, 4, 1), )
lldpXdot1LocProtocolEntry.registerAugmentions(("DGS-1100-06ME-AX", "lldpXdot1ConfigProtocolEntry"))
lldpXdot1ConfigProtocolEntry.setIndexNames(*lldpXdot1LocProtocolEntry.getIndexNames())
if mibBuilder.loadTexts: lldpXdot1ConfigProtocolEntry.setStatus('current')
lldpXdot1ConfigProtocolTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 1, 4, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot1ConfigProtocolTxEnable.setStatus('current')
lldpXdot1LocTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 2, 1), )
if mibBuilder.loadTexts: lldpXdot1LocTable.setStatus('current')
lldpXdot1LocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 2, 1, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "lldpXdot1LocPortVlanId"))
if mibBuilder.loadTexts: lldpXdot1LocEntry.setStatus('current')
lldpXdot1LocPortVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1LocPortVlanId.setStatus('current')
lldpXdot1RemTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 3, 1), )
if mibBuilder.loadTexts: lldpXdot1RemTable.setStatus('current')
lldpXdot1RemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 3, 1, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "lldpXdot1RemPortVlanId"))
if mibBuilder.loadTexts: lldpXdot1RemEntry.setStatus('current')
lldpXdot1RemPortVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemPortVlanId.setStatus('current')
lldpXdot1RemProtoVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 3, 2), )
if mibBuilder.loadTexts: lldpXdot1RemProtoVlanTable.setStatus('current')
lldpXdot1RemProtoVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 3, 2, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "lldpXdot1RemProtoVlanId"))
if mibBuilder.loadTexts: lldpXdot1RemProtoVlanEntry.setStatus('current')
lldpXdot1RemProtoVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), )))
if mibBuilder.loadTexts: lldpXdot1RemProtoVlanId.setStatus('current')
lldpXdot1RemProtoVlanSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 3, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemProtoVlanSupported.setStatus('current')
lldpXdot1RemProtoVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 3, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemProtoVlanEnabled.setStatus('current')
lldpXdot1RemVlanNameTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 3, 3), )
if mibBuilder.loadTexts: lldpXdot1RemVlanNameTable.setStatus('current')
lldpXdot1RemVlanNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 3, 3, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "lldpXdot1RemVlanId"))
if mibBuilder.loadTexts: lldpXdot1RemVlanNameEntry.setStatus('current')
lldpXdot1RemVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 3, 3, 1, 1), VlanId())
if mibBuilder.loadTexts: lldpXdot1RemVlanId.setStatus('current')
lldpXdot1RemVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 3, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemVlanName.setStatus('current')
lldpXdot1RemProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 3, 4), )
if mibBuilder.loadTexts: lldpXdot1RemProtocolTable.setStatus('current')
lldpXdot1RemProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 3, 4, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "lldpXdot1RemProtocolIndex"))
if mibBuilder.loadTexts: lldpXdot1RemProtocolEntry.setStatus('current')
lldpXdot1RemProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: lldpXdot1RemProtocolIndex.setStatus('current')
lldpXdot1RemProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 32, 13, 3, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemProtocolId.setStatus('current')
dlinkGreenLEDShutoff = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 31, 1))
dlinkGreenPortShutoff = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 31, 2))
dlinkGreenSystemHibernation = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 31, 4))
dlinkGreenLEDShutoffPortList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 31, 1, 1), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenLEDShutoffPortList.setStatus('current')
dlinkGreenLEDShutoffState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 31, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenLEDShutoffState.setStatus('current')
dlinkGreenLEDShutoffTimeProfile1 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 31, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenLEDShutoffTimeProfile1.setStatus('current')
dlinkGreenLEDShutoffTimeProfile2 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 31, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenLEDShutoffTimeProfile2.setStatus('current')
dlinkGreenPortShutoffPortList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 31, 2, 1), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenPortShutoffPortList.setStatus('current')
dlinkGreenPortShutoffState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 31, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenPortShutoffState.setStatus('current')
dlinkGreenPortShutoffTimeProfile1 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 31, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenPortShutoffTimeProfile1.setStatus('current')
dlinkGreenPortShutoffTimeProfile2 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 31, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenPortShutoffTimeProfile2.setStatus('current')
dlinkGreenSystemHibernationState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 31, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenSystemHibernationState.setStatus('current')
dlinkGreenSystemHibernationTimeProfile1 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 31, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenSystemHibernationTimeProfile1.setStatus('current')
dlinkGreenSystemHibernationTimeProfile2 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 31, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenSystemHibernationTimeProfile2.setStatus('current')
dlinkPowerSavCableLenDetectionState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 31, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkPowerSavCableLenDetectionState.setStatus('current')
securityTrafficSeg = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 9))
trafficSegTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 9, 1), )
if mibBuilder.loadTexts: trafficSegTable.setStatus('current')
trafficSegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 9, 1, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "trafficSegIfIndex"))
if mibBuilder.loadTexts: trafficSegEntry.setStatus('current')
trafficSegIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 9, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficSegIfIndex.setStatus('current')
trafficSegMemberList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 9, 1, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficSegMemberList.setStatus('current')
securityAAC = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11))
aacAuthenAdminState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAuthenAdminState.setStatus('current')
aacAuthParamResponseTimeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAuthParamResponseTimeout.setStatus('current')
aacAuthParamAttempt = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAuthParamAttempt.setStatus('current')
aacAPAuthMethodGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 4))
aacAPLoginMethod = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 4, 1))
aacAPEnableMethod = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 4, 2))
aacAPTelnetLoginMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAPTelnetLoginMethod.setStatus('current')
aacAPHttpLoginMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAPHttpLoginMethod.setStatus('current')
aacAPTelnetEnableMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 4, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAPTelnetEnableMethod.setStatus('current')
aacAPHttpEnableMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 4, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAPHttpEnableMethod.setStatus('current')
aacServerGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 5), )
if mibBuilder.loadTexts: aacServerGroupTable.setStatus('current')
aacServerGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 5, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "aacServerGroupIndex"))
if mibBuilder.loadTexts: aacServerGroupEntry.setStatus('current')
aacServerGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aacServerGroupIndex.setStatus('current')
aacServerGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServerGroupName.setStatus('current')
aacServersInGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 5, 1, 3), Bits().clone(namedValues=NamedValues(("id1", 0), ("id2", 1), ("id3", 2), ("id4", 3), ("id5", 4), ("id6", 5), ("id7", 6), ("id8", 7), ("id9", 8), ("id10", 9), ("id11", 10), ("id12", 11), ("id13", 12), ("id14", 13), ("id15", 14), ("id16", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServersInGroup.setStatus('current')
aacServerGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aacServerGroupRowStatus.setStatus('current')
aacServerInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 7), )
if mibBuilder.loadTexts: aacServerInfoTable.setStatus('current')
aacServerInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 7, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "aacServerIndex"))
if mibBuilder.loadTexts: aacServerInfoEntry.setStatus('current')
aacServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aacServerIndex.setStatus('current')
aacServerIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServerIPType.setStatus('current')
aacServerIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 7, 1, 3), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServerIPAddr.setStatus('current')
aacServerInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 7, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aacServerInterfaceName.setStatus('current')
aacServerAuthProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tacacsPlus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServerAuthProtocol.setStatus('current')
aacServerAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServerAuthPort.setStatus('current')
aacServerAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 7, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServerAuthKey.setStatus('current')
aacServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServerTimeout.setStatus('current')
aacServerRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServerRetryCount.setStatus('current')
aacServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 7, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aacServerRowStatus.setStatus('current')
aacLoginMethodListTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 8), )
if mibBuilder.loadTexts: aacLoginMethodListTable.setStatus('current')
aacLoginMethodListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 8, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "aacLoginMethodListIndex"))
if mibBuilder.loadTexts: aacLoginMethodListEntry.setStatus('current')
aacLoginMethodListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aacLoginMethodListIndex.setStatus('current')
aacLoginMethodListName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacLoginMethodListName.setStatus('current')
aacLoginMethod1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("none", -1), ("local", 0), ("tacacsPlus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacLoginMethod1.setStatus('current')
aacLoginMethod2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("none", -1), ("local", 0), ("tacacsPlus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacLoginMethod2.setStatus('current')
aacLoginMethod3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("none", -1), ("local", 0), ("tacacsPlus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacLoginMethod3.setStatus('current')
aacLoginMethod4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("none", -1), ("local", 0), ("tacacsPlus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacLoginMethod4.setStatus('current')
aacLoginMethodListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 8, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aacLoginMethodListRowStatus.setStatus('current')
aacEnableMethodListTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 9), )
if mibBuilder.loadTexts: aacEnableMethodListTable.setStatus('current')
aacEnableMethodListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 9, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "aacEnableMethodListIndex"))
if mibBuilder.loadTexts: aacEnableMethodListEntry.setStatus('current')
aacEnableMethodListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aacEnableMethodListIndex.setStatus('current')
aacEnableMethodListName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 9, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacEnableMethodListName.setStatus('current')
aacEnableMethod1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("none", -1), ("local", 0), ("tacacsPlus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacEnableMethod1.setStatus('current')
aacEnableMethod2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("none", -1), ("local", 0), ("tacacsPlus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacEnableMethod2.setStatus('current')
aacEnableMethod3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("none", -1), ("local", 0), ("tacacsPlus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacEnableMethod3.setStatus('current')
aacEnableMethod4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("none", -1), ("local", 0), ("tacacsPlus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacEnableMethod4.setStatus('current')
aacEnableMethodListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 9, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aacEnableMethodListRowStatus.setStatus('current')
aacLocalEnablePassword = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 14, 11, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacLocalEnablePassword.setStatus('current')
mcastFilterPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 49, 1), )
if mibBuilder.loadTexts: mcastFilterPortTable.setStatus('current')
mcastFilterPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 49, 1, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "mcastFilterPortIndex"))
if mibBuilder.loadTexts: mcastFilterPortEntry.setStatus('current')
mcastFilterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 49, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: mcastFilterPortIndex.setStatus('current')
mcastFilterPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 49, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("filter", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcastFilterPortType.setStatus('current')
agentCPUutilization = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 100, 1))
agentMEMutilization = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 100, 2))
agentCPUutilizationIn5sec = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 100, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCPUutilizationIn5sec.setStatus('current')
agentCPUutilizationIn1min = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 100, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCPUutilizationIn1min.setStatus('current')
agentCPUutilizationIn5min = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 100, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCPUutilizationIn5min.setStatus('current')
agentMEMutilizationIn5sec = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 100, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMEMutilizationIn5sec.setStatus('current')
agentMEMutilizationIn1min = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 100, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMEMutilizationIn1min.setStatus('current')
agentMEMutilizationIn5min = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 100, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMEMutilizationIn5min.setStatus('current')
igmpMulticastVlanStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 27, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpMulticastVlanStatus.setStatus('current')
multicastVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 27, 4), )
if mibBuilder.loadTexts: multicastVlanTable.setStatus('current')
multicastVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 27, 4, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "multicastVlanid"))
if mibBuilder.loadTexts: multicastVlanEntry.setStatus('current')
multicastVlanid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 27, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multicastVlanid.setStatus('current')
multicastVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 27, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: multicastVlanName.setStatus('current')
multicastVlanSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 27, 4, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastVlanSourcePort.setStatus('current')
multicastVlanMemberPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 27, 4, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastVlanMemberPort.setStatus('current')
multicastVlanTagMemberPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 27, 4, 1, 5), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastVlanTagMemberPort.setStatus('current')
multicastVlanState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 27, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastVlanState.setStatus('current')
multicastVlanIgmpReplaceSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 27, 4, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastVlanIgmpReplaceSourceIp.setStatus('current')
multicastVlanMldReplaceSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 27, 4, 1, 8), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastVlanMldReplaceSourceIp.setStatus('current')
multicastVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 27, 4, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: multicastVlanRowStatus.setStatus('current')
multicastVlanGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 27, 5), )
if mibBuilder.loadTexts: multicastVlanGroupTable.setStatus('current')
multicastVlanGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 27, 5, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "multicastVlanGroupVid"), (0, "DGS-1100-06ME-AX", "multicastVlanGroupIpType"), (0, "DGS-1100-06ME-AX", "multicastVlanGroupFromIp"), (0, "DGS-1100-06ME-AX", "multicastVlanGroupToIp"))
if mibBuilder.loadTexts: multicastVlanGroupEntry.setStatus('current')
multicastVlanGroupVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 27, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multicastVlanGroupVid.setStatus('current')
multicastVlanGroupIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 27, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multicastVlanGroupIpType.setStatus('current')
multicastVlanGroupFromIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 27, 5, 1, 3), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multicastVlanGroupFromIp.setStatus('current')
multicastVlanGroupToIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 27, 5, 1, 4), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multicastVlanGroupToIp.setStatus('current')
multicastVlanGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 27, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: multicastVlanGroupStatus.setStatus('current')
pppoeGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 98, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoeGlobalState.setStatus('current')
pppoePortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 98, 2), )
if mibBuilder.loadTexts: pppoePortTable.setStatus('current')
pppoePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 98, 2, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "pppoePortIndex"))
if mibBuilder.loadTexts: pppoePortEntry.setStatus('current')
pppoePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 98, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoePortIndex.setStatus('current')
pppoePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 98, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoePortState.setStatus('current')
pppoePortCircuitIDType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 98, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("ip", 0), ("mac", 1), ("udf", 2), ("vendor2", 3), ("vendor3", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoePortCircuitIDType.setStatus('current')
pppoePortUDFString = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 98, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoePortUDFString.setStatus('current')
pppoePortCircuitIDVendor3String = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 98, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoePortCircuitIDVendor3String.setStatus('current')
pppoePortRemoteIDType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 98, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("vendor2", 1), ("vendor3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoePortRemoteIDType.setStatus('current')
pppoePortRemoteIDVendor3String = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 98, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoePortRemoteIDVendor3String.setStatus('current')
rmonGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 22, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonGlobalState.setStatus('current')
rmonStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 22, 2))
rmonHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 22, 3))
rmonAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 22, 4))
rmonEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 22, 5))
rmonStatsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 22, 2, 1), )
if mibBuilder.loadTexts: rmonStatsTable.setStatus('current')
rmonStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 22, 2, 1, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "rmonStatsIndex"))
if mibBuilder.loadTexts: rmonStatsEntry.setStatus('current')
rmonStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 22, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonStatsIndex.setStatus('current')
rmonStatsDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 22, 2, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonStatsDataSource.setStatus('current')
rmonStatsOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 22, 2, 1, 1, 3), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonStatsOwner.setStatus('current')
rmonStatsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 22, 2, 1, 1, 4), RmonStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonStatsStatus.setStatus('current')
rmonHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 22, 3, 1), )
if mibBuilder.loadTexts: rmonHistoryTable.setStatus('current')
rmonHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 22, 3, 1, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "rmonHistoryIndex"))
if mibBuilder.loadTexts: rmonHistoryEntry.setStatus('current')
rmonHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 22, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonHistoryIndex.setStatus('current')
rmonHistoryDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 22, 3, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryDataSource.setStatus('current')
rmonHistoryBucketsRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 22, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryBucketsRequested.setStatus('current')
rmonHistoryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 22, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(1800)).setUnits('Seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryInterval.setStatus('current')
rmonHistoryOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 22, 3, 1, 1, 5), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryOwner.setStatus('current')
rmonHistoryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 22, 3, 1, 1, 6), RmonStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryStatus.setStatus('current')
rmonAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 22, 4, 1), )
if mibBuilder.loadTexts: rmonAlarmTable.setStatus('current')
rmonAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 22, 4, 1, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "rmonAlarmIndex"))
if mibBuilder.loadTexts: rmonAlarmEntry.setStatus('current')
rmonAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 22, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonAlarmIndex.setStatus('current')
rmonAlarmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 22, 4, 1, 1, 2), Integer32()).setUnits('Seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmInterval.setStatus('current')
rmonAlarmVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 22, 4, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmVariable.setStatus('current')
rmonAlarmSampleType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 22, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absoluteValue", 1), ("deltaValue", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmSampleType.setStatus('current')
rmonAlarmRisingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 22, 4, 1, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmRisingThreshold.setStatus('current')
rmonAlarmFallingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 22, 4, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmFallingThreshold.setStatus('current')
rmonAlarmRisingEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 22, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmRisingEventIndex.setStatus('current')
rmonAlarmFallingEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 22, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmFallingEventIndex.setStatus('current')
rmonAlarmOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 22, 4, 1, 1, 9), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmOwner.setStatus('current')
rmonAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 22, 4, 1, 1, 10), RmonStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmStatus.setStatus('current')
rmonEventTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 22, 5, 1), )
if mibBuilder.loadTexts: rmonEventTable.setStatus('current')
rmonEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 22, 5, 1, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "rmonEventIndex"))
if mibBuilder.loadTexts: rmonEventEntry.setStatus('current')
rmonEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 22, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonEventIndex.setStatus('current')
rmonEventDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 22, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventDescription.setStatus('current')
rmonEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 22, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("log", 2), ("snmptrap", 3), ("logandtrap", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventType.setStatus('current')
rmonEventCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 22, 5, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventCommunity.setStatus('current')
rmonEventOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 22, 5, 1, 1, 5), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventOwner.setStatus('current')
rmonEventStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 22, 5, 1, 1, 6), RmonStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventStatus.setStatus('current')
neighborTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 50, 1), )
if mibBuilder.loadTexts: neighborTable.setStatus('current')
neighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 50, 1, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "neighborIfindex"), (0, "DGS-1100-06ME-AX", "neighborIPv6Addr"), (0, "DGS-1100-06ME-AX", "neighborMACAddr"))
if mibBuilder.loadTexts: neighborEntry.setStatus('current')
neighborIfindex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 50, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborIfindex.setStatus('current')
neighborIPv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 50, 1, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborIPv6Addr.setStatus('current')
neighborMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 50, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborMACAddr.setStatus('current')
neighborType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 50, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborType.setStatus('current')
neighborCacheState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 50, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("static", 1), ("reachable", 2), ("incomplete", 3), ("stale", 4), ("delay", 5), ("probe", 6), ("notinservice", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborCacheState.setStatus('current')
neighborActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 50, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborActiveStatus.setStatus('current')
neighborRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 50, 1, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neighborRowStatus.setStatus('current')
dhcpv6RelayControl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 86, 1))
dhcpv6RelayManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 86, 2))
dhcpv6RelayOption37 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 86, 3))
dhcpv6RelayState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 86, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayState.setStatus('current')
dhcpv6RelayHopCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 86, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayHopCount.setStatus('current')
dhcpv6RelayInterfaceSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 86, 2, 1), )
if mibBuilder.loadTexts: dhcpv6RelayInterfaceSettingsTable.setStatus('current')
dhcpv6RelayInterfaceSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 86, 2, 1, 1), ).setIndexNames((0, "DGS-1100-06ME-AX", "dhcpv6RelayInterface"), (0, "DGS-1100-06ME-AX", "dhcpv6RelayServerIP"))
if mibBuilder.loadTexts: dhcpv6RelayInterfaceSettingsEntry.setStatus('current')
dhcpv6RelayInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 86, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpv6RelayInterface.setStatus('current')
dhcpv6RelayServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 86, 2, 1, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpv6RelayServerIP.setStatus('current')
dhcpv6RelayInterfaceSettingsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 86, 2, 1, 1, 99), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpv6RelayInterfaceSettingsRowStatus.setStatus('current')
dhcpv6RelayOption37State = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 86, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayOption37State.setStatus('current')
dhcpv6RelayOption37CheckState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 86, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayOption37CheckState.setStatus('current')
dhcpv6RelayOption37RemoteIDType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 86, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("cid-with-user-define", 1), ("user-define", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayOption37RemoteIDType.setStatus('current')
dhcpv6RelayOption37RemoteID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 134, 1, 1, 86, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayOption37RemoteID.setStatus('current')
mibBuilder.exportSymbols("DGS-1100-06ME-AX", sysPortDescriptionTable=sysPortDescriptionTable, snmpV3CommunityStatus=snmpV3CommunityStatus, aclL2RuleAction=aclL2RuleAction, lldpXdot3RemPortOperMauType=lldpXdot3RemPortOperMauType, lldpXdot3RemMaxFrameSizeTable=lldpXdot3RemMaxFrameSizeTable, snmpV3UserEntry=snmpV3UserEntry, swAuthUserName=swAuthUserName, lldpXdot3LocPortAutoNegEnabled=lldpXdot3LocPortAutoNegEnabled, multicastVlanGroupEntry=multicastVlanGroupEntry, dhcpBOOTPRelayOption82RemoteID=dhcpBOOTPRelayOption82RemoteID, neighborMACAddr=neighborMACAddr, aclL3RuleDstIpAddr=aclL3RuleDstIpAddr, portSecFDBPermVlanID=portSecFDBPermVlanID, sysMirrorCtrlIngressMirroring=sysMirrorCtrlIngressMirroring, rmonEventCommunity=rmonEventCommunity, guestVlanName=guestVlanName, aacAuthenAdminState=aacAuthenAdminState, rmonStatsStatus=rmonStatsStatus, sysHardwareVersion=sysHardwareVersion, mldsVlanMulticastGroupPortList=mldsVlanMulticastGroupPortList, qosDiffServType62=qosDiffServType62, ipv4cpuFilterProfileSrcIpAddrMask=ipv4cpuFilterProfileSrcIpAddrMask, sysMirrorTargetPort=sysMirrorTargetPort, qosDiffServType30=qosDiffServType30, swAuthAuthCapability=swAuthAuthCapability, mldsRouterPortPurgeInterval=mldsRouterPortPurgeInterval, qosDiffServType38=qosDiffServType38, errorSymbolNotifyState=errorSymbolNotifyState, agentMEMutilizationIn5min=agentMEMutilizationIn5min, rmonHistoryEntry=rmonHistoryEntry, sysPortErrPortReason=sysPortErrPortReason, cpuFilterL2RuleDstMacAddr=cpuFilterL2RuleDstMacAddr, lldpXdot1LocProtoVlanEntry=lldpXdot1LocProtoVlanEntry, trafficCtrlIndex=trafficCtrlIndex, swAuthAuthReAuthPeriod=swAuthAuthReAuthPeriod, bandwidthCtrlIndex=bandwidthCtrlIndex, qosDiffServType31=qosDiffServType31, igsHostPortPurgeInterval=igsHostPortPurgeInterval, sysPortErrTable=sysPortErrTable, lldpXdot3LocLinkAggTable=lldpXdot3LocLinkAggTable, aclQosAssignPriority=aclQosAssignPriority, autoRefreshConfiguration=autoRefreshConfiguration, sysDhcpAutoConfiguration=sysDhcpAutoConfiguration, swAuthAuthReAuthentication=swAuthAuthReAuthentication, qosDiffServType50=qosDiffServType50, sysTrapFiberPortEvent=sysTrapFiberPortEvent, sysPortCtrlType=sysPortCtrlType, eoamLinkMonitorEntry=eoamLinkMonitorEntry, sysPortErrEntry=sysPortErrEntry, duldEntry=duldEntry, LldpPortNumber=LldpPortNumber, staticPort=staticPort, lldpXdot3LocPowerMDIEnabled=lldpXdot3LocPowerMDIEnabled, aacLoginMethodListIndex=aacLoginMethodListIndex, miscStatisticsReset=miscStatisticsReset, mldsVlanQuerier=mldsVlanQuerier, ipv4cpuFilterProfileDstIpAddrMask=ipv4cpuFilterProfileDstIpAddrMask, lldpXdot3RemPortAutoNegEnabled=lldpXdot3RemPortAutoNegEnabled, sysPortCtrlTable=sysPortCtrlTable, traps=traps, dhcpLocalRelayTable=dhcpLocalRelayTable, qosDiffServType24=qosDiffServType24, aacAPHttpEnableMethod=aacAPHttpEnableMethod, mldsVlanRouterTable=mldsVlanRouterTable, lldpPortConfigTable=lldpPortConfigTable, qosDiffServType11=qosDiffServType11, cpuFilterv6L3RuleTcpRstBit=cpuFilterv6L3RuleTcpRstBit, mldsVlanMulticastGroupIpAddress=mldsVlanMulticastGroupIpAddress, igsAccessAuth=igsAccessAuth, companyIgsGroup=companyIgsGroup, igsVlanQuerier=igsVlanQuerier, qosDiffServType10=qosDiffServType10, sysWebState=sysWebState, bandwidthCtrlSettings=bandwidthCtrlSettings, cpuFilterv6L3RuleAction=cpuFilterv6L3RuleAction, limitIpMulticastEntryIPType=limitIpMulticastEntryIPType, sysBootupImage=sysBootupImage, ipifv6NSRetransmitTime=ipifv6NSRetransmitTime, snmpV3HostInterfaceName=snmpV3HostInterfaceName, lldpXdot1ConfigPortVlanTable=lldpXdot1ConfigPortVlanTable, syslogServSrvRowStatus=syslogServSrvRowStatus, swTimeRangeEndMinute=swTimeRangeEndMinute, lldpXdot3LocPowerMDISupported=lldpXdot3LocPowerMDISupported, dhcpBOOTPRelayInterface=dhcpBOOTPRelayInterface, staticMcastEgressPorts=staticMcastEgressPorts, swAuthMode=swAuthMode, qosDiffServType27=qosDiffServType27, qosDiffServType41=qosDiffServType41, lldpXdot1LocEntry=lldpXdot1LocEntry, qosDiffServType52=qosDiffServType52, trafficCtrlTable=trafficCtrlTable, cpuFilterProfileSrcMacAddrMask=cpuFilterProfileSrcMacAddrMask, qosDiffServType49=qosDiffServType49, cpuFilterL2Rule1pPriority=cpuFilterL2Rule1pPriority, eoamCriticalEventEnable=eoamCriticalEventEnable, lldpXdot1RemProtocolTable=lldpXdot1RemProtocolTable, neighborType=neighborType, syslogServerGroup=syslogServerGroup, cpuFilterv6L3RulePortList=cpuFilterv6L3RulePortList, companyLimitIp=companyLimitIp, ipifV6AddressIpType=ipifV6AddressIpType, portSecFDBPermPort=portSecFDBPermPort, dlink_products=dlink_products, limitIpMulticastPortTable=limitIpMulticastPortTable, ipv4aclProfileDstIpAddrMask=ipv4aclProfileDstIpAddrMask, ipifV6AddressIpPrefix=ipifV6AddressIpPrefix, snmpV3GroupNotifyViewName=snmpV3GroupNotifyViewName, rmonEvent=rmonEvent, igsVlanRtrPortList=igsVlanRtrPortList, qosDiffServEnable=qosDiffServEnable, snmpV3TrapColdStart=snmpV3TrapColdStart, aclQosType=aclQosType, aacAPAuthMethodGroup=aacAPAuthMethodGroup, sysTrapPortSecurity=sysTrapPortSecurity, duldState=duldState, sysLBDPortLoopStatus=sysLBDPortLoopStatus, dlink_DGS1100SeriesProd=dlink_DGS1100SeriesProd, swAuthRadiusServer=swAuthRadiusServer, igsHostEntry=igsHostEntry, sysLBDVlanLoopTable=sysLBDVlanLoopTable, aclL2RuleDstMacAddrMask=aclL2RuleDstMacAddrMask, rmonAlarmFallingEventIndex=rmonAlarmFallingEventIndex, trafficCtrlSettings=trafficCtrlSettings, aclv6L3RuleTcpUdpSrcPortMask=aclv6L3RuleTcpUdpSrcPortMask, LldpLinkAggStatusMap=LldpLinkAggStatusMap, snmpV3GroupWriteViewName=snmpV3GroupWriteViewName, aacEnableMethodListIndex=aacEnableMethodListIndex, swAuthPortAccessControlEntry=swAuthPortAccessControlEntry, limitIpMulticastPortEntry=limitIpMulticastPortEntry, sysLoginTimeoutInterval=sysLoginTimeoutInterval, ipifv6GlobalStatus=ipifv6GlobalStatus, sysSwitchName=sysSwitchName, companyACLGroup=companyACLGroup, companyTrafficMgmt=companyTrafficMgmt, aclL2RuleNonIPFilterOnlyState=aclL2RuleNonIPFilterOnlyState, cableDiagLengthinRange=cableDiagLengthinRange, aacServerInfoTable=aacServerInfoTable, telnetUDPPort=telnetUDPPort, mldsHostEntry=mldsHostEntry, qosDiffServType07=qosDiffServType07, eoamState=eoamState, securityTrafficSeg=securityTrafficSeg, cpuFilterv6L3RuleEntry=cpuFilterv6L3RuleEntry, rmonStatsIndex=rmonStatsIndex, companyPPPoE=companyPPPoE, dhcpBOOTPRelayOption82RemoteIDType=dhcpBOOTPRelayOption82RemoteIDType, pppoePortState=pppoePortState, lldpXdot3RemLinkAggEntry=lldpXdot3RemLinkAggEntry, dlinkGreenPortShutoffTimeProfile1=dlinkGreenPortShutoffTimeProfile1, Ipv6Address=Ipv6Address, aclL3RuleTcpFinBit=aclL3RuleTcpFinBit, VlanIndex=VlanIndex, mldsVlanMulticastGroupTable=mldsVlanMulticastGroupTable, sysSNTPDSTEndMin=sysSNTPDSTEndMin, lldpXdot1ConfigProtoVlanTable=lldpXdot1ConfigProtoVlanTable, aclL3RuleICMPMessageType=aclL3RuleICMPMessageType, igsAccessAuthTable=igsAccessAuthTable, dot1qVlanPvid=dot1qVlanPvid, cpuFilterv6L3RuleProtocolMask=cpuFilterv6L3RuleProtocolMask, errorFrameSecondsWindow=errorFrameSecondsWindow, errorFrameThreshold=errorFrameThreshold, eoamSystem=eoamSystem, snmpV3TrapSNMPAuthentication=snmpV3TrapSNMPAuthentication, aclL3RuleProfileNo=aclL3RuleProfileNo, cpuFilterProfileSrcIpAddrMaskType=cpuFilterProfileSrcIpAddrMaskType, sysPortErrPortState=sysPortErrPortState, lldpXdot1ConfigVlanNameTable=lldpXdot1ConfigVlanNameTable, sysFirmwareVersion=sysFirmwareVersion, trafficCtrlType=trafficCtrlType, snmpV3UserName=snmpV3UserName, snmpTrapColdStart=snmpTrapColdStart, aacLoginMethod2=aacLoginMethod2, aacEnableMethod4=aacEnableMethod4, eoamEntry=eoamEntry, rmonHistoryInterval=rmonHistoryInterval, errorFramePeriodWindow=errorFramePeriodWindow, lldpXdot1LocTable=lldpXdot1LocTable, aclL3RuleReplaceDSCP=aclL3RuleReplaceDSCP, igsGrpQueryInterval=igsGrpQueryInterval, aclL2RuleSrcMacAddr=aclL2RuleSrcMacAddr, aclv6L3RuleTcpUdpSrcPort=aclv6L3RuleTcpUdpSrcPort, companyDHCPv6Relay=companyDHCPv6Relay, guestVlanDelState=guestVlanDelState, lldpXdot1ConfigVlanNameEntry=lldpXdot1ConfigVlanNameEntry, rmonHistoryDataSource=rmonHistoryDataSource, aacEnableMethodListName=aacEnableMethodListName, rmonHistoryBucketsRequested=rmonHistoryBucketsRequested, companyStaticMcast=companyStaticMcast, mldsQueryInterval=mldsQueryInterval, swTimeRangeFriday=swTimeRangeFriday, dot1pPortPriority=dot1pPortPriority, snmpTrapSNMPAuthentication=snmpTrapSNMPAuthentication, ipifv6DHCPStatus=ipifv6DHCPStatus, qosDiffServType53=qosDiffServType53, lldpXdot1ConfigProtoVlanTxEnable=lldpXdot1ConfigProtoVlanTxEnable, tftpFwTargetTftpOperationStatus=tftpFwTargetTftpOperationStatus, aclL3RuleTcpRstBit=aclL3RuleTcpRstBit, dhcpv6RelayServerIP=dhcpv6RelayServerIP, ipifV6AddressIpAddr=ipifV6AddressIpAddr, aclProfileSrcIpAddrMaskType=aclProfileSrcIpAddrMaskType, limitIpMulticastIPType=limitIpMulticastIPType, dot1qVlanName=dot1qVlanName, aclProfileDstPortMask=aclProfileDstPortMask, cpuFilterv6L3RuleTcpPshBit=cpuFilterv6L3RuleTcpPshBit, qosDiffServType63=qosDiffServType63, cableDiagPair1FaultDistance=cableDiagPair1FaultDistance, trafficCtrlThreshold=trafficCtrlThreshold, macNotificatiotn=macNotificatiotn, lldpXdot1RemProtoVlanEntry=lldpXdot1RemProtoVlanEntry, aclL3RuleTcpUdpDstPortMask=aclL3RuleTcpUdpDstPortMask, dlinklldpMsgHoldMultiplier=dlinklldpMsgHoldMultiplier, mldsHostTableGroupAddress=mldsHostTableGroupAddress, macNotifyHistorySize=macNotifyHistorySize, authProtocol=authProtocol, sysSNTPFirstServer=sysSNTPFirstServer, dhcpRelayVlanSettingsState=dhcpRelayVlanSettingsState, swAuthStatus=swAuthStatus, dgs_1100_06ME_A1=dgs_1100_06ME_A1, qosDiffServType51=qosDiffServType51, aclL3RuleDstIpAddrMask=aclL3RuleDstIpAddrMask, snmpV3TrapLinkUpDown=snmpV3TrapLinkUpDown, swTimeRangeStartDay=swTimeRangeStartDay, swTimeRangeStartHour=swTimeRangeStartHour, lldpXdot3LocPowerPairControlable=lldpXdot3LocPowerPairControlable, aacLoginMethodListRowStatus=aacLoginMethodListRowStatus, sysTrapTwistedPortEvent=sysTrapTwistedPortEvent, lldpXdot3LocPortOperMauType=lldpXdot3LocPortOperMauType, sysTrapLBD=sysTrapLBD, lldpXdot3LocalData=lldpXdot3LocalData, swAuthRadiusServerEntry=swAuthRadiusServerEntry, swTimeRangeStartYear=swTimeRangeStartYear, sysSNTPSecondInterfaceName=sysSNTPSecondInterfaceName, swTimeRangeSaturday=swTimeRangeSaturday, aacServerIPType=aacServerIPType, aacServerIndex=aacServerIndex, dot1qVlanEgressPorts=dot1qVlanEgressPorts, rmonAlarmTable=rmonAlarmTable, snmpV3UserAuthProtocol=snmpV3UserAuthProtocol, lldpXdot3LocPowerPortClass=lldpXdot3LocPowerPortClass, lldpXdot3RemLinkAggPortId=lldpXdot3RemLinkAggPortId, rmonEventEntry=rmonEventEntry, qosDiffServType56=qosDiffServType56, swAuthPortAccessCtrl=swAuthPortAccessCtrl, syslogServEntry=syslogServEntry, sysMirrorCtrlEgressMirroring=sysMirrorCtrlEgressMirroring, aacServerRowStatus=aacServerRowStatus, aacEnableMethod3=aacEnableMethod3, ipv4cpuFilterProfileNo=ipv4cpuFilterProfileNo, portSecLockAddrMode=portSecLockAddrMode, aclProfileMask=aclProfileMask, sysSafeGuardEnable=sysSafeGuardEnable, staticStatus=staticStatus, errorFrameNotifyState=errorFrameNotifyState, ipv4aclProfileSrcPortMask=ipv4aclProfileSrcPortMask)
mibBuilder.exportSymbols("DGS-1100-06ME-AX", qosDiffServType03=qosDiffServType03, tftpCfgTargetInterfaceName=tftpCfgTargetInterfaceName, pppoePortCircuitIDType=pppoePortCircuitIDType, aclv6L3RuleAccessID=aclv6L3RuleAccessID, dhcpBOOTPRelayHopCount=dhcpBOOTPRelayHopCount, ipv4cpuFilterProfileSrcMacAddrMask=ipv4cpuFilterProfileSrcMacAddrMask, dhcpRetryCount=dhcpRetryCount, multicastVlanGroupVid=multicastVlanGroupVid, qosDiffServType55=qosDiffServType55, cpuFilterL2RuleDstMacAddrMask=cpuFilterL2RuleDstMacAddrMask, cpuFilterL3RuleICMPMessageType=cpuFilterL3RuleICMPMessageType, aclv6L3RuleTcpUdpDstPort=aclv6L3RuleTcpUdpDstPort, dhcpBOOTPRelayManagement=dhcpBOOTPRelayManagement, cpuFilterL3RuleTcpUdpDstPort=cpuFilterL3RuleTcpUdpDstPort, tftpCfgTargetTftpOperationStatus=tftpCfgTargetTftpOperationStatus, mcastFilterPortType=mcastFilterPortType, cpuFilterL2RuleAction=cpuFilterL2RuleAction, autoFdbEntry=autoFdbEntry, lldpXdot3RemMaxFrameSize=lldpXdot3RemMaxFrameSize, dot1qVlanManagementOnOff=dot1qVlanManagementOnOff, cpuFilterv6L3RuleTcpUdpSrcPort=cpuFilterv6L3RuleTcpUdpSrcPort, syslogServInterfaceName=syslogServInterfaceName, dhcpRelayVlanTableEntry=dhcpRelayVlanTableEntry, lldpXdot1RemoteData=lldpXdot1RemoteData, neighborTable=neighborTable, aacAPTelnetLoginMethod=aacAPTelnetLoginMethod, ipv4aclProfileRuleCount=ipv4aclProfileRuleCount, lldpXdot3LocPortAutoNegSupported=lldpXdot3LocPortAutoNegSupported, dhcpBOOTPRelayInterfaceSettingsRowStatus=dhcpBOOTPRelayInterfaceSettingsRowStatus, limitIpMulticaststartIpAddr=limitIpMulticaststartIpAddr, dhcpBOOTPRelayOption82State=dhcpBOOTPRelayOption82State, tftpCfgTargetServerIpAddress=tftpCfgTargetServerIpAddress, qosDiffServType16=qosDiffServType16, aclL3RuleProtocol=aclL3RuleProtocol, qosDiffServ=qosDiffServ, rmonStatsDataSource=rmonStatsDataSource, igsStatus=igsStatus, dlinkGreenLEDShutoffTimeProfile1=dlinkGreenLEDShutoffTimeProfile1, aacEnableMethod1=aacEnableMethod1, lldpXdot3LocPowerEntry=lldpXdot3LocPowerEntry, aclv6L3RulePortList=aclv6L3RulePortList, mldsVlanMulticastGroupVlanId=mldsVlanMulticastGroupVlanId, aclProfileType=aclProfileType, swTimeRangeSettingEntry=swTimeRangeSettingEntry, aacServerGroupEntry=aacServerGroupEntry, aacServerInterfaceName=aacServerInterfaceName, sysTrapSystemEvent=sysTrapSystemEvent, syslogServFacility=syslogServFacility, lldpXdot1LocVlanNameEntry=lldpXdot1LocVlanNameEntry, trustedHostStatus=trustedHostStatus, cpuFilterv6L3RuleSrcIpAddrMask=cpuFilterv6L3RuleSrcIpAddrMask, aclv6L3RuleTcpRstBit=aclv6L3RuleTcpRstBit, companySyslog=companySyslog, sysSNTPDSTStartMon=sysSNTPDSTStartMon, multicastVlanSourcePort=multicastVlanSourcePort, sysWebPortNumber=sysWebPortNumber, qosDiffServType57=qosDiffServType57, lldpXdot1RemEntry=lldpXdot1RemEntry, companyTrapSetting=companyTrapSetting, qosDiffServType37=qosDiffServType37, eoamLinkMonitorIfIndex=eoamLinkMonitorIfIndex, lldpXdot1RemPortVlanId=lldpXdot1RemPortVlanId, sysTrapIP=sysTrapIP, snmpTrapRSTPStateChange=snmpTrapRSTPStateChange, rmonStatistics=rmonStatistics, aclL2RuleEtherType=aclL2RuleEtherType, aacLoginMethod3=aacLoginMethod3, rmonHistoryOwner=rmonHistoryOwner, ipv4cpuFilterProfileDstPortMask=ipv4cpuFilterProfileDstPortMask, qosDiffServType46=qosDiffServType46, mldsSystem=mldsSystem, sysSNTPDSTState=sysSNTPDSTState, swTimeRangeEndHour=swTimeRangeEndHour, dlinkGreenSystemHibernationTimeProfile2=dlinkGreenSystemHibernationTimeProfile2, aacServerGroupIndex=aacServerGroupIndex, mldsHostPortPurgeInterval=mldsHostPortPurgeInterval, snmpV3IPType=snmpV3IPType, errorFrameWindow=errorFrameWindow, sysSerialNumber=sysSerialNumber, cpuFilterL2RuleStatus=cpuFilterL2RuleStatus, cpuFilterProfileTable=cpuFilterProfileTable, companyLLDPSetting=companyLLDPSetting, qosDiffServType18=qosDiffServType18, eoamDyingGaspEnable=eoamDyingGaspEnable, swTimeRangeWednesday=swTimeRangeWednesday, cpuFilterProfileDstPortMask=cpuFilterProfileDstPortMask, mcastFilterPortIndex=mcastFilterPortIndex, dhcpv6RelayOption37CheckState=dhcpv6RelayOption37CheckState, aclL3RuleEntry=aclL3RuleEntry, swTimeRangeEndDay=swTimeRangeEndDay, qosDiffServType35=qosDiffServType35, swTimeRangeName=swTimeRangeName, staticEntry=staticEntry, aclL3RuleTcpPshBit=aclL3RuleTcpPshBit, cpuFilterL2RuleInPortList=cpuFilterL2RuleInPortList, snmpTrapPortSecurity=snmpTrapPortSecurity, trafficCtrlAutoRecoverTime=trafficCtrlAutoRecoverTime, lldpXdot3LocPortTable=lldpXdot3LocPortTable, aacEnableMethodListRowStatus=aacEnableMethodListRowStatus, rmonHistoryIndex=rmonHistoryIndex, snmpV3viewTreeType=snmpV3viewTreeType, rmonAlarmSampleType=rmonAlarmSampleType, companyQoSGroup=companyQoSGroup, sysBootupConfigID=sysBootupConfigID, cpuFilterL2RuleSrcMacAddrMask=cpuFilterL2RuleSrcMacAddrMask, tftpFwTargetInterfaceName=tftpFwTargetInterfaceName, sysIpSubnetMask=sysIpSubnetMask, snmpV3TrapWarmStart=snmpV3TrapWarmStart, pppoePortCircuitIDVendor3String=pppoePortCircuitIDVendor3String, rmonHistory=rmonHistory, rmonAlarmVariable=rmonAlarmVariable, sysTrapStatus=sysTrapStatus, eoamRemoteLoopback=eoamRemoteLoopback, cpuFilterL3RuleProtocol=cpuFilterL3RuleProtocol, companySystem=companySystem, cpuFilterL2AccessID=cpuFilterL2AccessID, swTimeRangeMonday=swTimeRangeMonday, dlinkGreenLEDShutoffPortList=dlinkGreenLEDShutoffPortList, qosDiffServType05=qosDiffServType05, mcastFilterPortTable=mcastFilterPortTable, errorFrameSecondsNotifyState=errorFrameSecondsNotifyState, sysSNTPFirstInterfaceName=sysSNTPFirstInterfaceName, rmonAlarm=rmonAlarm, portSecFDBPermanentTable=portSecFDBPermanentTable, dhcpOption12Status=dhcpOption12Status, syslogSettingGroup=syslogSettingGroup, qinqOuterTPID=qinqOuterTPID, qinqGlobalStatus=qinqGlobalStatus, mldsRobustnessValue=mldsRobustnessValue, dhcpBOOTPRelayManagementOption82=dhcpBOOTPRelayManagementOption82, aclL3RuleSrcIpAddrMask=aclL3RuleSrcIpAddrMask, cableDiagPair3TestResult=cableDiagPair3TestResult, ipv4cpuFilterProfileIPProtocol=ipv4cpuFilterProfileIPProtocol, swTimeRangeRowStatus=swTimeRangeRowStatus, staticMcastStatus=staticMcastStatus, multicastVlanTable=multicastVlanTable, companyDot1qVlanGroup=companyDot1qVlanGroup, companyEoam=companyEoam, cpuFilterProfileDstMacAddrMask=cpuFilterProfileDstMacAddrMask, rmonStatsOwner=rmonStatsOwner, dhcpBOOTPRelayInterfaceSettingsEntry=dhcpBOOTPRelayInterfaceSettingsEntry, snmpV3Community=snmpV3Community, sysSNTPPollInterval=sysSNTPPollInterval, cpuFilterv6L3RuleICMPMessageCode=cpuFilterv6L3RuleICMPMessageCode, sysGroupInterval=sysGroupInterval, ipv4trustedHostTable=ipv4trustedHostTable, aclL3RuleTcpUdpSrcPort=aclL3RuleTcpUdpSrcPort, sysPortCtrlFlowControl=sysPortCtrlFlowControl, cpuFilterL3RuleTcpAckBit=cpuFilterL3RuleTcpAckBit, lldpXdot1RemProtoVlanId=lldpXdot1RemProtoVlanId, qosDiffServType06=qosDiffServType06, aacServerAuthProtocol=aacServerAuthProtocol, rmonAlarmStatus=rmonAlarmStatus, ipifv6DefaultGateway=ipifv6DefaultGateway, dhcpv6RelayOption37RemoteID=dhcpv6RelayOption37RemoteID, aclL3RuleAction=aclL3RuleAction, aacServerInfoEntry=aacServerInfoEntry, lldpXdot1RemTable=lldpXdot1RemTable, igsVlanMulticastGroupMacAddress=igsVlanMulticastGroupMacAddress, igsVlanSnoopStatus=igsVlanSnoopStatus, sysSNTPSecondServer=sysSNTPSecondServer, lldpXdot3LocLinkAggEntry=lldpXdot3LocLinkAggEntry, dlinkGreenSystemHibernationState=dlinkGreenSystemHibernationState, igsAccessAuthPortIndex=igsAccessAuthPortIndex, dhcpv6RelayManagement=dhcpv6RelayManagement, lldpXdot3RemPowerPairs=lldpXdot3RemPowerPairs, qosDiffServType08=qosDiffServType08, securityAAC=securityAAC, aclv6L3RuleICMPMessageType=aclv6L3RuleICMPMessageType, ipv4cpuFilterProfileType=ipv4cpuFilterProfileType, swAuthPortAccessControlTable=swAuthPortAccessControlTable, dhcpBOOTPRelayOption82CheckState=dhcpBOOTPRelayOption82CheckState, cpuFilterProfileType=cpuFilterProfileType, snmpV3TrapLBD=snmpV3TrapLBD, qosDiffServType12=qosDiffServType12, snmpGlobalState=snmpGlobalState, lldpXdot1LocProtoVlanId=lldpXdot1LocProtoVlanId, companyTimeRangeMgmt=companyTimeRangeMgmt, swTimeRangeStartMinute=swTimeRangeStartMinute, syslogServAddr=syslogServAddr, sysLBDCtrlTable=sysLBDCtrlTable, portSecIndex=portSecIndex, mldsVlanRouterPortList=mldsVlanRouterPortList, aacServerAuthKey=aacServerAuthKey, lldpXdot3RemPortAutoNegAdvertisedCap=lldpXdot3RemPortAutoNegAdvertisedCap, snmpV3UserVersion=snmpV3UserVersion, aclL3RuleDscp=aclL3RuleDscp, sysSNTPDSTRepeatStartMon=sysSNTPDSTRepeatStartMon, cpuFilterv6L3RuleSrcIpAddr=cpuFilterv6L3RuleSrcIpAddr, swAuthRadiusServerStatus=swAuthRadiusServerStatus, dot1qVlanPVIDAutoAssignOnOff=dot1qVlanPVIDAutoAssignOnOff, cpuFilterL3RuleSrcIpAddrMask=cpuFilterL3RuleSrcIpAddrMask, sysSNTPSecondType=sysSNTPSecondType, aclv6L3RuleTcpPshBit=aclv6L3RuleTcpPshBit, eoamIfIndex=eoamIfIndex, qosDiffServType25=qosDiffServType25, bandwidthCtrlRxThreshold=bandwidthCtrlRxThreshold, sysPortErrPortIndex=sysPortErrPortIndex, staticDisableAutoLearn=staticDisableAutoLearn, aclv6L3RuleTcpUrgBit=aclv6L3RuleTcpUrgBit, dot1qVlanTable=dot1qVlanTable, cpuFilterv6L3RuleICMPMessageType=cpuFilterv6L3RuleICMPMessageType, rmonAlarmInterval=rmonAlarmInterval, cpuFilterv6L3RuleTcpUdpSrcPortMask=cpuFilterv6L3RuleTcpUdpSrcPortMask, sysSNTPDSTOffset=sysSNTPDSTOffset, ipv4cpuFilterProfileEntry=ipv4cpuFilterProfileEntry, aclProfileIPProtocolMask=aclProfileIPProtocolMask, duldTable=duldTable, snmpV3Group=snmpV3Group, dlinklldpMsgTxInterval=dlinklldpMsgTxInterval, aclQosStatus=aclQosStatus, snmpV3UserStatus=snmpV3UserStatus, ipifv6AutolinkloStatus=ipifv6AutolinkloStatus, cpuFilterL3RuleEntry=cpuFilterL3RuleEntry, limitIpMulticastProfileID=limitIpMulticastProfileID, aclL3RuleTable=aclL3RuleTable, mldsHostTableHostIPAddress=mldsHostTableHostIPAddress, aclL3RuleTcpUrgBit=aclL3RuleTcpUrgBit, snmpV3HostVersion=snmpV3HostVersion, igsAccessAuthState=igsAccessAuthState, igsVlanFilterVlanId=igsVlanFilterVlanId, errorFramePeriodThreshold=errorFramePeriodThreshold, igsHostTableGroupAddress=igsHostTableGroupAddress, ipv4trustedHostIpAddr=ipv4trustedHostIpAddr, snmpV3EngineID=snmpV3EngineID, syslogEnable=syslogEnable, lldpXdot1ConfigPortVlanEntry=lldpXdot1ConfigPortVlanEntry, qosDiffServType59=qosDiffServType59, rmonAlarmFallingThreshold=rmonAlarmFallingThreshold, autoFdbPort=autoFdbPort, sysPortDescMediumType=sysPortDescMediumType, swAuthAuthMaxReq=swAuthAuthMaxReq, qosDiffServType26=qosDiffServType26, qinqIfIndex=qinqIfIndex, ipv4trustedHostIpMask=ipv4trustedHostIpMask, dlinkGreenSystemHibernationTimeProfile1=dlinkGreenSystemHibernationTimeProfile1, staticAutoLearningList=staticAutoLearningList, newRootBrgaddress=newRootBrgaddress, snmpV3TrapPortSecurity=snmpV3TrapPortSecurity, lldpXdot3RemPortAutoNegSupported=lldpXdot3RemPortAutoNegSupported, queuingMechanism=queuingMechanism, aclv6L3RuleReplaceDSCP=aclv6L3RuleReplaceDSCP, snmpV3ViewTreeEntry=snmpV3ViewTreeEntry, lldpPortConfigTLVsTxEnable=lldpPortConfigTLVsTxEnable, pppoePortIndex=pppoePortIndex, rmonAlarmRisingEventIndex=rmonAlarmRisingEventIndex, swAuthRadiusServerKey=swAuthRadiusServerKey, ipifV6AddressRowStatus=ipifV6AddressRowStatus, syslogSaveMode=syslogSaveMode, staticMcastTable=staticMcastTable, lldpXdot3RemLinkAggStatus=lldpXdot3RemLinkAggStatus, multicastVlanGroupStatus=multicastVlanGroupStatus, portSecFDBPermIndex=portSecFDBPermIndex, errorSymbolWindow=errorSymbolWindow)
mibBuilder.exportSymbols("DGS-1100-06ME-AX", cpuFilterv6L3RuleAccessID=cpuFilterv6L3RuleAccessID, lldpXdot3LocMaxFrameSize=lldpXdot3LocMaxFrameSize, ipifSupportV4V6Info=ipifSupportV4V6Info, cpuFilterv6L3RuleDstIpAddr=cpuFilterv6L3RuleDstIpAddr, snmpV3Trap=snmpV3Trap, igsVlanCfgQuerier=igsVlanCfgQuerier, lldpXdot1ConfigProtocolEntry=lldpXdot1ConfigProtocolEntry, syslogServSeverity=syslogServSeverity, syslogServTable=syslogServTable, sysLBDRecoverTime=sysLBDRecoverTime, aclv6L3RuleProtocol=aclv6L3RuleProtocol, aclv6L3RuleStatus=aclv6L3RuleStatus, aclv6L3RuleEntry=aclv6L3RuleEntry, cpuFilterL3RuleTcpRstBit=cpuFilterL3RuleTcpRstBit, lldpXdot3RemPowerTable=lldpXdot3RemPowerTable, companyDuld=companyDuld, dlinkPowerSavCableLenDetectionState=dlinkPowerSavCableLenDetectionState, ipv4aclProfileIPProtocol=ipv4aclProfileIPProtocol, snmpV3CommunityPolicy=snmpV3CommunityPolicy, sysSNTPDSTRepeatEndWeekDay=sysSNTPDSTRepeatEndWeekDay, rmonEventTable=rmonEventTable, cpuFilterL3RuleTcpSynBit=cpuFilterL3RuleTcpSynBit, igsVlanMulticastGroupVlanId=igsVlanMulticastGroupVlanId, cpuFilterL3RuleTcpFinBit=cpuFilterL3RuleTcpFinBit, snmpV3GroupEntry=snmpV3GroupEntry, agentCPUutilizationIn5sec=agentCPUutilizationIn5sec, duldLinkStatus=duldLinkStatus, ipv4aclProfileDstMacAddrMask=ipv4aclProfileDstMacAddrMask, trustedHostIpMask=trustedHostIpMask, aacAPTelnetEnableMethod=aacAPTelnetEnableMethod, sysLBDCtrlEntry=sysLBDCtrlEntry, swTimeRangeEndYear=swTimeRangeEndYear, aclQosIP6TC=aclQosIP6TC, igsHostTableVLANID=igsHostTableVLANID, swTimeRangeStartMonth=swTimeRangeStartMonth, rmonAlarmOwner=rmonAlarmOwner, tftpFwTargetImageFileName=tftpFwTargetImageFileName, mldsHost=mldsHost, limitIpMulticastEntryTable=limitIpMulticastEntryTable, trafficCtrlCountDown=trafficCtrlCountDown, limitIpMulticastPortProfileID=limitIpMulticastPortProfileID, cpuFilterL3RuleTcpUdpSrcPortMask=cpuFilterL3RuleTcpUdpSrcPortMask, trafficCtrlTimeInterval=trafficCtrlTimeInterval, sysSNTPDSTStartDay=sysSNTPDSTStartDay, sysGateway=sysGateway, lldpXdot3RemoteData=lldpXdot3RemoteData, lldpXdot3RemPowerPairControlable=lldpXdot3RemPowerPairControlable, trafficCtrlEntry=trafficCtrlEntry, sysSave=sysSave, dhcpv6RelayInterfaceSettingsRowStatus=dhcpv6RelayInterfaceSettingsRowStatus, cpuFilterL3RuleTcpUdpSrcPort=cpuFilterL3RuleTcpUdpSrcPort, companyGuestVlan=companyGuestVlan, aclv6L3RuleTable=aclv6L3RuleTable, sysSNTPDSTMethod=sysSNTPDSTMethod, qosDiffServType48=qosDiffServType48, sysPortDescriptionEntry=sysPortDescriptionEntry, autoFdbIPAddress=autoFdbIPAddress, swAuthRadiusServerAddress=swAuthRadiusServerAddress, lldpXdot1LocVlanName=lldpXdot1LocVlanName, sysRestart=sysRestart, eoamTable=eoamTable, dlinkGreenLEDShutoff=dlinkGreenLEDShutoff, snmpV3GroupSecurityModel=snmpV3GroupSecurityModel, sysSNTPDSTRepeatStartWeek=sysSNTPDSTRepeatStartWeek, mldsGrpQueryInterval=mldsGrpQueryInterval, qosDiffServType09=qosDiffServType09, aclL2ProfileID=aclL2ProfileID, companyTftpGroup=companyTftpGroup, ipv4trustedHostRowStatus=ipv4trustedHostRowStatus, swAuthUserEntry=swAuthUserEntry, cpuFilterL2RuleTable=cpuFilterL2RuleTable, aacLoginMethod1=aacLoginMethod1, lldpXdot3LocMaxFrameSizeEntry=lldpXdot3LocMaxFrameSizeEntry, dhcpv6RelayInterface=dhcpv6RelayInterface, mldsVlanQueryInterval=mldsVlanQueryInterval, syslogServUDPport=syslogServUDPport, syslogServSrvStatus=syslogServSrvStatus, eoamMode=eoamMode, lldpXdot3RemPowerMDISupported=lldpXdot3RemPowerMDISupported, lldpPortConfigNotificationEnable=lldpPortConfigNotificationEnable, lldpXdot1RemProtocolEntry=lldpXdot1RemProtocolEntry, dhcpBOOTPRelayServerIP=dhcpBOOTPRelayServerIP, cpuFilterL3RuleTcpUdpDstPortMask=cpuFilterL3RuleTcpUdpDstPortMask, tftpFwTargetServerIpType=tftpFwTargetServerIpType, ipv4cpuFilterProfileMask=ipv4cpuFilterProfileMask, dhcpRelayVlanSettingsVLANID=dhcpRelayVlanSettingsVLANID, aacAPEnableMethod=aacAPEnableMethod, companyCableDiagnostic=companyCableDiagnostic, cableDiagTriggerIndex=cableDiagTriggerIndex, aclProfileEntry=aclProfileEntry, snmpV3GroupTable=snmpV3GroupTable, snmpV3CommunityEntry=snmpV3CommunityEntry, limitIpMulticastEntry=limitIpMulticastEntry, aclv6L3RuleSrcIpAddrMask=aclv6L3RuleSrcIpAddrMask, cpuFilterProfileDstIpAddrMaskType=cpuFilterProfileDstIpAddrMaskType, igsHostTable=igsHostTable, staticTable=staticTable, qosDiffServType40=qosDiffServType40, aclv6L3RuleICMPMessageCode=aclv6L3RuleICMPMessageCode, igsReportToAllPort=igsReportToAllPort, qosDiffServTypeGroup=qosDiffServTypeGroup, dot1qVlanAsyOnOff=dot1qVlanAsyOnOff, aclL2Rule=aclL2Rule, snmpV3User=snmpV3User, errorFrameSecondsThreshold=errorFrameSecondsThreshold, multicastVlanGroupTable=multicastVlanGroupTable, swAuthCtrlPktFwdMode=swAuthCtrlPktFwdMode, trustedHostTable=trustedHostTable, aclL2RuleRateLimit=aclL2RuleRateLimit, mldsQueryMaxResponseTime=mldsQueryMaxResponseTime, ipv4aclProfileDstPortMask=ipv4aclProfileDstPortMask, sysSNTPDSTStartHour=sysSNTPDSTStartHour, cpuFilterL2RuleEntry=cpuFilterL2RuleEntry, cpuFilterv6L3RuleProtocol=cpuFilterv6L3RuleProtocol, companyMldsGroup=companyMldsGroup, trafficCtrlTrap=trafficCtrlTrap, cpuFilterv6L3RuleTcpFinBit=cpuFilterv6L3RuleTcpFinBit, multicastVlanMemberPort=multicastVlanMemberPort, igsVlanRouterVlanId=igsVlanRouterVlanId, aclL2RuleSrcMacAddrMask=aclL2RuleSrcMacAddrMask, sysPortErrPortStatus=sysPortErrPortStatus, PYSNMP_MODULE_ID=dgs_1100_06ME_A1, lldpXdot3LocLinkAggPortId=lldpXdot3LocLinkAggPortId, dlinkGreenLEDShutoffState=dlinkGreenLEDShutoffState, portSecMLA=portSecMLA, cableDiagPair2TestResult=cableDiagPair2TestResult, sysSNTPDSTEndMon=sysSNTPDSTEndMon, aclL2RuleEntry=aclL2RuleEntry, rmonAlarmRisingThreshold=rmonAlarmRisingThreshold, lldpXdot1RemProtocolIndex=lldpXdot1RemProtocolIndex, rmonEventType=rmonEventType, limitIpMulticastProfileTable=limitIpMulticastProfileTable, tftpCfgTargetServerIpType=tftpCfgTargetServerIpType, trustedHostIPType=trustedHostIPType, cpuFilterL3RuleAccessID=cpuFilterL3RuleAccessID, cpuFilterL3RuleAction=cpuFilterL3RuleAction, cableDiagPair4TestResult=cableDiagPair4TestResult, cpuFilterv6L3RuleTcpUdpDstPortMask=cpuFilterv6L3RuleTcpUdpDstPortMask, portSecTable=portSecTable, duplicateIP=duplicateIP, aclProfileIPProtocol=aclProfileIPProtocol, lldpXdot1RemProtoVlanSupported=lldpXdot1RemProtoVlanSupported, lldpXdot3RemPowerPortClass=lldpXdot3RemPowerPortClass, trafficControl=trafficControl, lldpXdot3PortConfigTable=lldpXdot3PortConfigTable, trafficCtrlActionMode=trafficCtrlActionMode, swTimeRangeEndMonth=swTimeRangeEndMonth, bandwidthEffecRxThreshold=bandwidthEffecRxThreshold, aclProfileDstIpAddrMask=aclProfileDstIpAddrMask, OwnerString=OwnerString, ipv4aclProfileNo=ipv4aclProfileNo, lldpXdot3LocPowerTable=lldpXdot3LocPowerTable, lldpXdot3PortConfigTLVsTxEnable=lldpXdot3PortConfigTLVsTxEnable, qosDiffServType02=qosDiffServType02, qosDiffServType23=qosDiffServType23, companyDHCPLocalRelay=companyDHCPLocalRelay, cpuFilterv6L3RuleTcpUrgBit=cpuFilterv6L3RuleTcpUrgBit, sysSNTPDSTStartMin=sysSNTPDSTStartMin, aclv6L3RuleTcpUdpDstPortMask=aclv6L3RuleTcpUdpDstPortMask, swAuthRadiusServerTimeout=swAuthRadiusServerTimeout, cpuFilterL2RuleVlanId=cpuFilterL2RuleVlanId, errorFramePeriodNotifyState=errorFramePeriodNotifyState, multicastVlanState=multicastVlanState, dhcpv6RelayOption37=dhcpv6RelayOption37, cpuFilterL2RuleSrcMacAddr=cpuFilterL2RuleSrcMacAddr, agentMEMutilization=agentMEMutilization, qosDiffServType28=qosDiffServType28, mldsVlanFilterVlanId=mldsVlanFilterVlanId, trustedHostRowStatus=trustedHostRowStatus, aclv6L3RuleDstIpAddr=aclv6L3RuleDstIpAddr, igsHostTablePort=igsHostTablePort, aclL3RuleTcpUdpSrcPortMask=aclL3RuleTcpUdpSrcPortMask, aclL3RulePortList=aclL3RulePortList, lldpXdot3Objects=lldpXdot3Objects, cpuFilterProfileSrcPortMask=cpuFilterProfileSrcPortMask, dlinkGreenLEDShutoffTimeProfile2=dlinkGreenLEDShutoffTimeProfile2, lldpXdot1RemVlanName=lldpXdot1RemVlanName, igsAccessAuthEntry=igsAccessAuthEntry, companyAuthGroup=companyAuthGroup, aclL3RuleStatus=aclL3RuleStatus, aclL3RuleTcpUdpDstPort=aclL3RuleTcpUdpDstPort, pppoePortEntry=pppoePortEntry, aclL2RuleTable=aclL2RuleTable, sysPortCtrlIndex=sysPortCtrlIndex, limitIpMulticastEntryProfileID=limitIpMulticastEntryProfileID, rmonEventIndex=rmonEventIndex, ipv4aclProfileIPProtocolMask=ipv4aclProfileIPProtocolMask, multicastVlanName=multicastVlanName, lldpXdot3RemPortEntry=lldpXdot3RemPortEntry, staticMcastMac=staticMcastMac, sysJumboFrameEnable=sysJumboFrameEnable, aclv6L3RuleTcpSynBit=aclv6L3RuleTcpSynBit, companyISMVLAN=companyISMVLAN, lldpXdot1LocProtoVlanSupported=lldpXdot1LocProtoVlanSupported, eoamReceivedRemoteLoopback=eoamReceivedRemoteLoopback, bandwidthCtrlTxThreshold=bandwidthCtrlTxThreshold, dot1qVlanUntaggedPorts=dot1qVlanUntaggedPorts, aclL2Rule1pPriority=aclL2Rule1pPriority, sysSNTPDSTRepeatEndHour=sysSNTPDSTRepeatEndHour, igsRobustnessValue=igsRobustnessValue, swAuthRadiusServerIndex=swAuthRadiusServerIndex, qosDiffServType29=qosDiffServType29, aclL3RuleTos=aclL3RuleTos, portSecFDBPermanentEntry=portSecFDBPermanentEntry, cpuFilterProfileStatus=cpuFilterProfileStatus, cpuFilterL2ProfileID=cpuFilterL2ProfileID, duldIfIndex=duldIfIndex, companyDHCPRelay=companyDHCPRelay, duldMode=duldMode, lldpPortConfigAdminStatus=lldpPortConfigAdminStatus, sysSNTPState=sysSNTPState, cableDiagPair2FaultDistance=cableDiagPair2FaultDistance, igsVlanRouterEntry=igsVlanRouterEntry, qosQ1p=qosQ1p, ipv4cpuFilterProfileRuleCount=ipv4cpuFilterProfileRuleCount, multicastVlanEntry=multicastVlanEntry, limitIpMulticastProfileEntry=limitIpMulticastProfileEntry, mldsVlanMulticastGroupEntry=mldsVlanMulticastGroupEntry, limitIpMulticastPortIPType=limitIpMulticastPortIPType, errorSymbolThreshold=errorSymbolThreshold, trustedHostIpAddr=trustedHostIpAddr, snmpTrapCopperLinkUpDown=snmpTrapCopperLinkUpDown, sysPortCtrlOperStatus=sysPortCtrlOperStatus, igsQueryInterval=igsQueryInterval, igsVlanFilterTable=igsVlanFilterTable, mldsHostTable=mldsHostTable, lldpXdot3RemPowerClass=lldpXdot3RemPowerClass, pppoePortTable=pppoePortTable, snmpV3CommunityTable=snmpV3CommunityTable, limitIpMulticastPortMaxGrp=limitIpMulticastPortMaxGrp, dot1qVlanManagementid=dot1qVlanManagementid, lldpXdot1LocVlanNameTable=lldpXdot1LocVlanNameTable, cpuFilterProfileNo=cpuFilterProfileNo, lldpXdot1LocProtocolTable=lldpXdot1LocProtocolTable, macNotifyPortStatus=macNotifyPortStatus, limitIpMulticastProfileStatus=limitIpMulticastProfileStatus, rmonStatsTable=rmonStatsTable, snmpV3CommunityName=snmpV3CommunityName, BridgeId=BridgeId, ipifVLANname=ipifVLANname, sysSNTPDSTRepeatStartHour=sysSNTPDSTRepeatStartHour, swAuthUserTable=swAuthUserTable, limitIpMulticastProfileName=limitIpMulticastProfileName, eoamLinkMonitorTable=eoamLinkMonitorTable, dhcpBOOTPRelayState=dhcpBOOTPRelayState, qosAclPrioritySettings=qosAclPrioritySettings, autoFdbMacAddress=autoFdbMacAddress, cpuFilterv6L3RuleTable=cpuFilterv6L3RuleTable, sysSNTPDSTRepeatEndMin=sysSNTPDSTRepeatEndMin, aacServerRetryCount=aacServerRetryCount, multicastVlanGroupFromIp=multicastVlanGroupFromIp, sysARPAgingTime=sysARPAgingTime, dhcpLocalRelaySettingsVLANID=dhcpLocalRelaySettingsVLANID, qosDiffServType33=qosDiffServType33)
mibBuilder.exportSymbols("DGS-1100-06ME-AX", lldpXdot1ConfigPortVlanTxEnable=lldpXdot1ConfigPortVlanTxEnable, cpuFilterL2RuleEtherType=cpuFilterL2RuleEtherType, lldpXdot1ConfigProtocolTable=lldpXdot1ConfigProtocolTable, neighborCacheState=neighborCacheState, sysDhcpAutoImage=sysDhcpAutoImage, qosDiffServType00=qosDiffServType00, aclv6L3RuleDstIpAddrMask=aclv6L3RuleDstIpAddrMask, macNotifyInterval=macNotifyInterval, aacServersInGroup=aacServersInGroup, companySNTPSetting=companySNTPSetting, securityTrustedHost=securityTrustedHost, sysContactName=sysContactName, qosDiffServType61=qosDiffServType61, sysSNTPDSTRepeatStartMin=sysSNTPDSTRepeatStartMin, tftpFwTargetServerIpAddress=tftpFwTargetServerIpAddress, mldsHostTableVLANID=mldsHostTableVLANID, sysMirrorStatus=sysMirrorStatus, mldsVlanSnoopStatus=mldsVlanSnoopStatus, pppoePortUDFString=pppoePortUDFString, dot1qVlanForbiddenPorts=dot1qVlanForbiddenPorts, snmpV3viewTreeMask=snmpV3viewTreeMask, snmpV3GroupReadViewName=snmpV3GroupReadViewName, agentCPUutilizationIn5min=agentCPUutilizationIn5min, swAuthAuthQuietPeriod=swAuthAuthQuietPeriod, cpuFilterProfileRuleCount=cpuFilterProfileRuleCount, swAuthAuthTxPeriod=swAuthAuthTxPeriod, aclProfileNo=aclProfileNo, cpuFilterL3RulePortList=cpuFilterL3RulePortList, aclv6L3RuleSrcIpAddr=aclv6L3RuleSrcIpAddr, dhcpRelayVlanTable=dhcpRelayVlanTable, securityPortSecurity=securityPortSecurity, ipv4aclProfileSrcIpAddrMask=ipv4aclProfileSrcIpAddrMask, swAuthAuthConfigPortNumber=swAuthAuthConfigPortNumber, guestVlanPort=guestVlanPort, aclProfileStatus=aclProfileStatus, aclProfileSrcPortMask=aclProfileSrcPortMask, aclL3RuleAccessID=aclL3RuleAccessID, aclL2RuleStatus=aclL2RuleStatus, aclv6L3RuleTcpFinBit=aclv6L3RuleTcpFinBit, mldsVlanCfgQuerier=mldsVlanCfgQuerier, dhcpv6RelayOption37RemoteIDType=dhcpv6RelayOption37RemoteIDType, sysLBDStateEnable=sysLBDStateEnable, aacLoginMethod4=aacLoginMethod4, qosDiffServType34=qosDiffServType34, qosDiffServType43=qosDiffServType43, snmpTrapLBD=snmpTrapLBD, sysSNTPFirstType=sysSNTPFirstType, rmonAlarmIndex=rmonAlarmIndex, swAuthRadiusServerAuthenticationPort=swAuthRadiusServerAuthenticationPort, tftpFwTargetTftpOperation=tftpFwTargetTftpOperation, dot1qVlanPortTable=dot1qVlanPortTable, cpuFilterL3RuleProtocolMask=cpuFilterL3RuleProtocolMask, dhcpBOOTPRelayControl=dhcpBOOTPRelayControl, ipv4cpuFilterProfileDstMacAddrMask=ipv4cpuFilterProfileDstMacAddrMask, cpuFilterL2Rule=cpuFilterL2Rule, snmpV3UserAuthProtocolPassword=snmpV3UserAuthProtocolPassword, ipv4aclProfileStatus=ipv4aclProfileStatus, companyQinQ=companyQinQ, mldsVlanRtrPortList=mldsVlanRtrPortList, snmpV3viewTreeSubtree=snmpV3viewTreeSubtree, macNotifyInfoDiscription=macNotifyInfoDiscription, aacServerGroupName=aacServerGroupName, newRootMSTibridgeregionalroot=newRootMSTibridgeregionalroot, lldpPortConfigPortNum=lldpPortConfigPortNum, ipifName=ipifName, qosDiffServType32=qosDiffServType32, aacAPLoginMethod=aacAPLoginMethod, dhcpBOOTPRelayEnablePortlist=dhcpBOOTPRelayEnablePortlist, lldpXdot1Objects=lldpXdot1Objects, aacEnableMethodListEntry=aacEnableMethodListEntry, dot1pPortEntry=dot1pPortEntry, cpuFilterProfileSrcIpAddrMask=cpuFilterProfileSrcIpAddrMask, snmpTrapFirmUpgrade=snmpTrapFirmUpgrade, qosDiffServType20=qosDiffServType20, lldpXdot3LocLinkAggStatus=lldpXdot3LocLinkAggStatus, igsVlan=igsVlan, igmpMulticastVlanStatus=igmpMulticastVlanStatus, cpuFilterL3RuleProfileNo=cpuFilterL3RuleProfileNo, igsHostTableHostIPAddress=igsHostTableHostIPAddress, limitIpMulticastStatus=limitIpMulticastStatus, sysCommandLogging=sysCommandLogging, qosDiffServType44=qosDiffServType44, lldpXdot3LocPowerPairs=lldpXdot3LocPowerPairs, staticMcastVlanID=staticMcastVlanID, neighborRowStatus=neighborRowStatus, mldsVlanFilterTable=mldsVlanFilterTable, aclL2RuleReplaceDSCP=aclL2RuleReplaceDSCP, lldpXdot1ConfigVlanNameTxEnable=lldpXdot1ConfigVlanNameTxEnable, swTimeRangeSunday=swTimeRangeSunday, staticVlanID=staticVlanID, dlinkGreenPortShutoffState=dlinkGreenPortShutoffState, igsVlanMulticastGroupEntry=igsVlanMulticastGroupEntry, multicastVlanMldReplaceSourceIp=multicastVlanMldReplaceSourceIp, cpuFilterProfileDstIpAddrMask=cpuFilterProfileDstIpAddrMask, cpuFilterProfile=cpuFilterProfile, dhcpv6RelayHopCount=dhcpv6RelayHopCount, dlinklldpReinitDelay=dlinklldpReinitDelay, swAuthRadiusServerInterfaceName=swAuthRadiusServerInterfaceName, bandwidthCtrlEntry=bandwidthCtrlEntry, igsVlanMulticastGroupIpAddress=igsVlanMulticastGroupIpAddress, cpuFilterL3RuleIgmpType=cpuFilterL3RuleIgmpType, neighborIPv6Addr=neighborIPv6Addr, swAuthAuthSuppTimeout=swAuthAuthSuppTimeout, igsVlanFilterEntry=igsVlanFilterEntry, sysPortCtrlEntry=sysPortCtrlEntry, tftpFwTargetGroup=tftpFwTargetGroup, swAuthUserPassword=swAuthUserPassword, qosDiffServType14=qosDiffServType14, qinqTable=qinqTable, swTimeRangeSettingTable=swTimeRangeSettingTable, dhcpv6RelayInterfaceSettingsTable=dhcpv6RelayInterfaceSettingsTable, companySNMPV3=companySNMPV3, cableDiagPair4FaultDistance=cableDiagPair4FaultDistance, qosDiffServType58=qosDiffServType58, aacLocalEnablePassword=aacLocalEnablePassword, mldsVlanRouterEntry=mldsVlanRouterEntry, cpuFilterL3RuleTable=cpuFilterL3RuleTable, mldsVlanFilterEntry=mldsVlanFilterEntry, lldpXdot3RemPortTable=lldpXdot3RemPortTable, aclL3RuleTcpSynBit=aclL3RuleTcpSynBit, sysPortCtrlSpeed=sysPortCtrlSpeed, companyCPUInterfaceFilterGroup=companyCPUInterfaceFilterGroup, tftpCfgTargetImageFileName=tftpCfgTargetImageFileName, topologyChange=topologyChange, eoamLinkMonitor=eoamLinkMonitor, qosDiffServType13=qosDiffServType13, qosDiffServType21=qosDiffServType21, sysSNTPDSTRepeatStartWeekDay=sysSNTPDSTRepeatStartWeekDay, companyRMON=companyRMON, swAuthUser=swAuthUser, cpuFilterL3RuleTcpPshBit=cpuFilterL3RuleTcpPshBit, cpuFilterv6L3RuleProfileNo=cpuFilterv6L3RuleProfileNo, aacServerGroupRowStatus=aacServerGroupRowStatus, floodfdbOnOff=floodfdbOnOff, dhcpBOOTPRelayOption82Policy=dhcpBOOTPRelayOption82Policy, aclProfileRuleCount=aclProfileRuleCount, dhcpBOOTPRelayInterfaceSettingsTable=dhcpBOOTPRelayInterfaceSettingsTable, lldpXdot1RemVlanNameTable=lldpXdot1RemVlanNameTable, qosDiffServType45=qosDiffServType45, dhcpOption12HostName=dhcpOption12HostName, dhcpLocalRelaySettingsState=dhcpLocalRelaySettingsState, ipv4cpuFilterProfileTable=ipv4cpuFilterProfileTable, cpuFilterProfileIPProtocolMask=cpuFilterProfileIPProtocolMask, swTimeRangeDate=swTimeRangeDate, snmpV3GroupName=snmpV3GroupName, mldsVlan=mldsVlan, snmpTrapWarmStart=snmpTrapWarmStart, snmpV3HostCommunityName=snmpV3HostCommunityName, qosDiffServType04=qosDiffServType04, ipv4aclProfileSrcMacAddrMask=ipv4aclProfileSrcMacAddrMask, companyMacNotify=companyMacNotify, multicastVlanRowStatus=multicastVlanRowStatus, rmonHistoryStatus=rmonHistoryStatus, tftpCfgTargetGroup=tftpCfgTargetGroup, lldpXdot1ConfigProtocolTxEnable=lldpXdot1ConfigProtocolTxEnable, aclL2AccessID=aclL2AccessID, trafficSegEntry=trafficSegEntry, staticMcastEntry=staticMcastEntry, aclL3RuleProtocolMask=aclL3RuleProtocolMask, cpuFilterL3RuleDscp=cpuFilterL3RuleDscp, rmonAlarmEntry=rmonAlarmEntry, dlinkGreenPortShutoffTimeProfile2=dlinkGreenPortShutoffTimeProfile2, qinqEntry=qinqEntry, snmpV3GroupStatus=snmpV3GroupStatus, lldpXdot1LocPortVlanId=lldpXdot1LocPortVlanId, aacServerIPAddr=aacServerIPAddr, autoFdbTimeStamp=autoFdbTimeStamp, igsVlanRouterPortList=igsVlanRouterPortList, sysPortDescIndex=sysPortDescIndex, d_link=d_link, dlinklldpConfigManAddrPortsTxEnable=dlinklldpConfigManAddrPortsTxEnable, mldsHostTablePort=mldsHostTablePort, dlinkGreenPortShutoff=dlinkGreenPortShutoff, multicastVlanGroupToIp=multicastVlanGroupToIp, lldpXdot1LocalData=lldpXdot1LocalData, aacLoginMethodListEntry=aacLoginMethodListEntry, macNotifyState=macNotifyState, snmpV3viewTreeName=snmpV3viewTreeName, PortList=PortList, sysPortCtrlMDI=sysPortCtrlMDI, staticMac=staticMac, cpuFilterL3Rule=cpuFilterL3Rule, lldpPortConfigEntry=lldpPortConfigEntry, rmonHistoryTable=rmonHistoryTable, swAuthUserStatus=swAuthUserStatus, dot1qVlanPortEntry=dot1qVlanPortEntry, igsVlanFastLeave=igsVlanFastLeave, swAuthAuthDirection=swAuthAuthDirection, neighborEntry=neighborEntry, snmpV3Host=snmpV3Host, dot1qVlanEntry=dot1qVlanEntry, cpuFilterL3RuleSrcIpAddr=cpuFilterL3RuleSrcIpAddr, igsVlanRouterTable=igsVlanRouterTable, snmpV3HostStatus=snmpV3HostStatus, aacServerAuthPort=aacServerAuthPort, syslogServIndex=syslogServIndex, snmpV3HostEntry=snmpV3HostEntry, macNotifyCtrlIndex=macNotifyCtrlIndex, ipv4trustedHostEntry=ipv4trustedHostEntry, lldpXdot3RemPowerMDIEnabled=lldpXdot3RemPowerMDIEnabled, companyStaticMAC=companyStaticMAC, qosDiffServType47=qosDiffServType47, sysLBDMode=sysLBDMode, agentMEMutilizationIn5sec=agentMEMutilizationIn5sec, companyNeighbor=companyNeighbor, lldpXdot1LocProtoVlanEnabled=lldpXdot1LocProtoVlanEnabled, dhcpv6RelayState=dhcpv6RelayState, sysSNTPDSTEndHour=sysSNTPDSTEndHour, swAuthenCtrl=swAuthenCtrl, ipv4aclProfileTable=ipv4aclProfileTable, qinqSystem=qinqSystem, trafficSegMemberList=trafficSegMemberList, neighborIfindex=neighborIfindex, aclQosEntry=aclQosEntry, qosDiffServType42=qosDiffServType42, swTimeRangeThursday=swTimeRangeThursday, rmonEventStatus=rmonEventStatus, sysSNTPDSTRepeatEndWeek=sysSNTPDSTRepeatEndWeek, ipv4aclProfileType=ipv4aclProfileType, aclv6L3RuleAction=aclv6L3RuleAction, lldpXdot1LocProtoVlanTable=lldpXdot1LocProtoVlanTable, sysSNTPDSTRepeatEndMon=sysSNTPDSTRepeatEndMon, ipifV6AddressMainIndex=ipifV6AddressMainIndex, cpuFilterv6L3RuleTcpSynBit=cpuFilterv6L3RuleTcpSynBit, ipifV6AddressTable=ipifV6AddressTable, pppoePortRemoteIDType=pppoePortRemoteIDType, lldpXdot1Config=lldpXdot1Config, lldpXdot3LocMaxFrameSizeTable=lldpXdot3LocMaxFrameSizeTable, aclProfileSrcIpAddrMask=aclProfileSrcIpAddrMask, duldDiscoveryTime=duldDiscoveryTime, telnetsettingManagementOnOff=telnetsettingManagementOnOff, aclL3Rule=aclL3Rule, cpuFilterv6L3RuleStatus=cpuFilterv6L3RuleStatus, mldsVlanRouterVlanId=mldsVlanRouterVlanId, dhcpv6RelayControl=dhcpv6RelayControl, macNotifyCtrlTable=macNotifyCtrlTable, bandwidthEffecTxThreshold=bandwidthEffecTxThreshold, aclL3RuleTcpAckBit=aclL3RuleTcpAckBit, newRootOlddesignatedroot=newRootOlddesignatedroot, sysSNTPDSTEndDay=sysSNTPDSTEndDay, lldpXdot1RemVlanId=lldpXdot1RemVlanId, qinqRoleState=qinqRoleState, aacServerTimeout=aacServerTimeout, cpuFilterv6L3RuleTrafficClass=cpuFilterv6L3RuleTrafficClass, lldpXdot1LocProtocolIndex=lldpXdot1LocProtocolIndex, aclL2RuleDstMacAddr=aclL2RuleDstMacAddr, ipv4cpuFilterProfileSrcPortMask=ipv4cpuFilterProfileSrcPortMask, cpuFilterv6L3RuleTcpUdpDstPort=cpuFilterv6L3RuleTcpUdpDstPort, sysLBDCtrlIndex=sysLBDCtrlIndex, dlinklldpState=dlinklldpState, companyLBD=companyLBD, lldpXdot1RemProtoVlanEnabled=lldpXdot1RemProtoVlanEnabled, cpuFilterProfileMask=cpuFilterProfileMask, snmpV3UserPrivProtocol=snmpV3UserPrivProtocol)
mibBuilder.exportSymbols("DGS-1100-06ME-AX", lldpXdot3RemLinkAggTable=lldpXdot3RemLinkAggTable, dhcpv6RelayInterfaceSettingsEntry=dhcpv6RelayInterfaceSettingsEntry, ipv4aclProfileEntry=ipv4aclProfileEntry, mldsVlanFastLeave=mldsVlanFastLeave, dot1pPortTable=dot1pPortTable, lldpXdot3RemPowerEntry=lldpXdot3RemPowerEntry, aclv6L3RuleProtocolMask=aclv6L3RuleProtocolMask, cpuFilterv6L3RuleDstIpAddrMask=cpuFilterv6L3RuleDstIpAddrMask, limitIpMulticastPortID=limitIpMulticastPortID, agentCPUutilizationIn1min=agentCPUutilizationIn1min, igsQueryMaxResponseTime=igsQueryMaxResponseTime, mldsVlanMulticastGroupMacAddress=mldsVlanMulticastGroupMacAddress, dhcpLocalRelayEnablePortlist=dhcpLocalRelayEnablePortlist, snmpV3UserPrivProtocolPassword=snmpV3UserPrivProtocolPassword, dot1qVlanRowStatus=dot1qVlanRowStatus, igsHost=igsHost, miscReset=miscReset, portSecEntry=portSecEntry, companyGreenSetting=companyGreenSetting, neighborActiveStatus=neighborActiveStatus, dlinkGreenPortShutoffPortList=dlinkGreenPortShutoffPortList, sysPortDescString=sysPortDescString, companyIpifGroup=companyIpifGroup, swAuthRadiusServerAccountingPort=swAuthRadiusServerAccountingPort, qosDiffServType17=qosDiffServType17, portSecState=portSecState, limitIpMulticastPortState=limitIpMulticastPortState, lldpXdot3LocPowerClass=lldpXdot3LocPowerClass, aacAPHttpLoginMethod=aacAPHttpLoginMethod, qosDiffServType36=qosDiffServType36, multicastVlanid=multicastVlanid, multicastVlanGroupIpType=multicastVlanGroupIpType, aclProfile=aclProfile, aclProfileDstMacAddrMask=aclProfileDstMacAddrMask, lldpXdot1ConfigProtoVlanEntry=lldpXdot1ConfigProtoVlanEntry, cpuFilterL3RuleICMPMessageCode=cpuFilterL3RuleICMPMessageCode, snmpV3HostAddress=snmpV3HostAddress, macNotifyCtrlEntry=macNotifyCtrlEntry, aacLoginMethodListName=aacLoginMethodListName, mcastFilterPortEntry=mcastFilterPortEntry, aclv6L3RuleTrafficClass=aclv6L3RuleTrafficClass, dgs_1100_06ME=dgs_1100_06ME, lldpXdot3LocPortAutoNegAdvertisedCap=lldpXdot3LocPortAutoNegAdvertisedCap, dhcpBOOTPRelayTimeThreshold=dhcpBOOTPRelayTimeThreshold, swTimeRangeIndex=swTimeRangeIndex, aacEnableMethod2=aacEnableMethod2, agentCPUutilization=agentCPUutilization, sysLBDVlanLoopPorts=sysLBDVlanLoopPorts, aclL2RuleInPortList=aclL2RuleInPortList, sysLBDVlanLoopEntry=sysLBDVlanLoopEntry, aacEnableMethodListTable=aacEnableMethodListTable, igsVlanMulticastGroupTable=igsVlanMulticastGroupTable, cableDiagPair3FaultDistance=cableDiagPair3FaultDistance, companyMulticastFilter=companyMulticastFilter, ipifV6AddressEntry=ipifV6AddressEntry, cpuFilterProfileEntry=cpuFilterProfileEntry, snmpV3ViewTreeTable=snmpV3ViewTreeTable, sysSNTPGMTMinutes=sysSNTPGMTMinutes, trafficSegIfIndex=trafficSegIfIndex, aclL3RuleRateLimit=aclL3RuleRateLimit, lldpXdot1RemProtoVlanTable=lldpXdot1RemProtoVlanTable, trustedHostEntry=trustedHostEntry, bandwidthCtrlTable=bandwidthCtrlTable, lldpXdot1RemVlanNameEntry=lldpXdot1RemVlanNameEntry, dot1pPortIndex=dot1pPortIndex, macNotifyInfo=macNotifyInfo, sysIpAddrCfgMode=sysIpAddrCfgMode, lldpXdot3PortConfigEntry=lldpXdot3PortConfigEntry, cpuFilterL3RuleTcpUrgBit=cpuFilterL3RuleTcpUrgBit, aclQosTable=aclQosTable, Timeout=Timeout, lldpXdot1LocProtocolEntry=lldpXdot1LocProtocolEntry, tftpCfgTargetTftpOperation=tftpCfgTargetTftpOperation, dhcpLocalRelayGlobalState=dhcpLocalRelayGlobalState, sysLocationName=sysLocationName, sysPortCtrlMediumType=sysPortCtrlMediumType, snmpV3viewTreeStatus=snmpV3viewTreeStatus, swAuthRadiusServerRetransmit=swAuthRadiusServerRetransmit, sysSNTPServerTable=sysSNTPServerTable, lldpXdot3RemMaxFrameSizeEntry=lldpXdot3RemMaxFrameSizeEntry, trafficSegTable=trafficSegTable, snmpV3GroupSecurityLevel=snmpV3GroupSecurityLevel, sysIpAddr=sysIpAddr, qosDiffServType19=qosDiffServType19, snmpV3UserGroupName=snmpV3UserGroupName, cpuFilterL3RuleDstIpAddrMask=cpuFilterL3RuleDstIpAddrMask, qosDiffServType39=qosDiffServType39, autoFdbTable=autoFdbTable, companyMirror=companyMirror, lldpXdot1RemProtocolId=lldpXdot1RemProtocolId, rmonEventOwner=rmonEventOwner, sysMACAgingTime=sysMACAgingTime, cableDiagPair1TestResult=cableDiagPair1TestResult, lldpXdot3Config=lldpXdot3Config, ipv4aclProfileMask=ipv4aclProfileMask, qosMode=qosMode, mldsStatus=mldsStatus, RmonStatus=RmonStatus, aclQosIndex=aclQosIndex, igsRouterPortPurgeInterval=igsRouterPortPurgeInterval, aclL3RuleICMPMessageCode=aclL3RuleICMPMessageCode, duldSystem=duldSystem, staticMcastIpAddr=staticMcastIpAddr, sysLBDInterval=sysLBDInterval, aclProfileTable=aclProfileTable, duldOperState=duldOperState, qosDiffServType22=qosDiffServType22, aacServerGroupTable=aacServerGroupTable, companyAgentBasicInfo=companyAgentBasicInfo, qosDiffServType54=qosDiffServType54, aclProfileDstIpAddrMaskType=aclProfileDstIpAddrMaskType, companyMiscGroup=companyMiscGroup, rmonGlobalState=rmonGlobalState, sysSNTPTimeSeconds=sysSNTPTimeSeconds, agentMEMutilizationIn1min=agentMEMutilizationIn1min, igsVlanQueryInterval=igsVlanQueryInterval, sysPortCtrlCapability=sysPortCtrlCapability, rmonStatsEntry=rmonStatsEntry, swAuthAuthServerTimeout=swAuthAuthServerTimeout, aacAuthParamResponseTimeout=aacAuthParamResponseTimeout, companyTraps=companyTraps, aclL2RuleVlanId=aclL2RuleVlanId, aclL3RuleSrcIpAddr=aclL3RuleSrcIpAddr, sysPortCtrlFlowControlOper=sysPortCtrlFlowControlOper, multicastVlanIgmpReplaceSourceIp=multicastVlanIgmpReplaceSourceIp, LldpManAddress=LldpManAddress, swAuthRadiusServerTable=swAuthRadiusServerTable, cpuFilterL3RuleStatus=cpuFilterL3RuleStatus, dlinklldpTxDelay=dlinklldpTxDelay, rmonEventDescription=rmonEventDescription, limitIpMulticastendIpAddr=limitIpMulticastendIpAddr, autoFdbVlanID=autoFdbVlanID, ipv4cpuFilterProfileStatus=ipv4cpuFilterProfileStatus, cpuFilterProfileIPProtocol=cpuFilterProfileIPProtocol, qosDiffServType15=qosDiffServType15, aacLoginMethodListTable=aacLoginMethodListTable, swAuthRadiusIPType=swAuthRadiusIPType, swTimeRangeTuesday=swTimeRangeTuesday, syslogSaveMinutes=syslogSaveMinutes, snmpV3UserTable=snmpV3UserTable, lldpXdot1LocProtocolId=lldpXdot1LocProtocolId, companySecurity=companySecurity, pppoePortRemoteIDVendor3String=pppoePortRemoteIDVendor3String, dhcpLocalRelayTableEntry=dhcpLocalRelayTableEntry, multicastVlanTagMemberPort=multicastVlanTagMemberPort, igsSystem=igsSystem, snmpV3HostTable=snmpV3HostTable, LldpPowerPortClass=LldpPowerPortClass, pppoeGlobalState=pppoeGlobalState, sysLBDPortStatus=sysLBDPortStatus, qosDiffServType01=qosDiffServType01, aclL3RuleIgmpType=aclL3RuleIgmpType, aclv6L3RuleProfileNo=aclv6L3RuleProfileNo, syslogServAddrType=syslogServAddrType, autoFdbStatus=autoFdbStatus, sysLBDVlanLoopIndex=sysLBDVlanLoopIndex, aclv6L3RuleRateLimit=aclv6L3RuleRateLimit, aacAuthParamAttempt=aacAuthParamAttempt, igsVlanMulticastGroupPortList=igsVlanMulticastGroupPortList, lldpXdot3LocPortEntry=lldpXdot3LocPortEntry, dhcpv6RelayOption37State=dhcpv6RelayOption37State, lldpXdot1LocVlanId=lldpXdot1LocVlanId, dlinkGreenSystemHibernation=dlinkGreenSystemHibernation, aclProfileSrcMacAddrMask=aclProfileSrcMacAddrMask, swAuthAuthConfigPortControl=swAuthAuthConfigPortControl, qosDiffServType60=qosDiffServType60, aclv6L3RuleTcpAckBit=aclv6L3RuleTcpAckBit, ipv4cpuFilterProfileIPProtocolMask=ipv4cpuFilterProfileIPProtocolMask, snmpV3ViewTree=snmpV3ViewTree, portSecFDBPermMac=portSecFDBPermMac, cpuFilterv6L3RuleTcpAckBit=cpuFilterv6L3RuleTcpAckBit, cpuFilterL3RuleDstIpAddr=cpuFilterL3RuleDstIpAddr)
