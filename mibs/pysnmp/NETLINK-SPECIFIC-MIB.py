#
# PySNMP MIB module NETLINK-SPECIFIC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETLINK-SPECIFIC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:10:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, IpAddress, enterprises, TimeTicks, Integer32, ModuleIdentity, Counter64, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, mgmt, Bits, ObjectIdentity, Unsigned32, Gauge32, mib_2, Counter32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "IpAddress", "enterprises", "TimeTicks", "Integer32", "ModuleIdentity", "Counter64", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "mgmt", "Bits", "ObjectIdentity", "Unsigned32", "Gauge32", "mib-2", "Counter32", "MibIdentifier")
RowStatus, TimeInterval, DisplayString, MacAddress, PhysAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TimeInterval", "DisplayString", "MacAddress", "PhysAddress", "TextualConvention")
class NlSubscriberAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 15)

snaDLC = MibIdentifier((1, 3, 6, 1, 2, 1, 41))
sdlc = MibIdentifier((1, 3, 6, 1, 2, 1, 41, 1))
sdlcLSGroup = MibIdentifier((1, 3, 6, 1, 2, 1, 41, 1, 2))
sdlcLSAdminTable = MibIdentifier((1, 3, 6, 1, 2, 1, 41, 1, 2, 1))
sdlcLSAdminEntry = MibIdentifier((1, 3, 6, 1, 2, 1, 41, 1, 2, 1, 1))
sdlcLSAddress = MibScalar((1, 3, 6, 1, 2, 1, 41, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSAddress.setStatus('mandatory')
netlink = MibIdentifier((1, 3, 6, 1, 4, 1, 173))
network = MibIdentifier((1, 3, 6, 1, 4, 1, 173, 6))
netstat = MibIdentifier((1, 3, 6, 1, 4, 1, 173, 6, 1))
nsMaxNeigh = MibScalar((1, 3, 6, 1, 4, 1, 173, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsMaxNeigh.setStatus('mandatory')
nsThisNode = MibScalar((1, 3, 6, 1, 4, 1, 173, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsThisNode.setStatus('mandatory')
nsNodTable = MibTable((1, 3, 6, 1, 4, 1, 173, 6, 1, 3), )
if mibBuilder.loadTexts: nsNodTable.setStatus('mandatory')
nsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 6, 1, 3, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "nsNodNum"))
if mibBuilder.loadTexts: nsEntry.setStatus('mandatory')
nsNodNum = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 6, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNodNum.setStatus('mandatory')
nsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 6, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsStatus.setStatus('mandatory')
nsNumNeigh = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 6, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNumNeigh.setStatus('mandatory')
nsNeighTable = MibTable((1, 3, 6, 1, 4, 1, 173, 6, 1, 4), )
if mibBuilder.loadTexts: nsNeighTable.setStatus('mandatory')
nsNeighEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 6, 1, 4, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "nsNTNode"), (0, "NETLINK-SPECIFIC-MIB", "nsNTNeigh"))
if mibBuilder.loadTexts: nsNeighEntry.setStatus('mandatory')
nsNTNode = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 6, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNTNode.setStatus('mandatory')
nsNTNeigh = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 6, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNTNeigh.setStatus('mandatory')
nsNTNeighStat = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 6, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notConnected", 1), ("connected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsNTNeighStat.setStatus('mandatory')
local = MibIdentifier((1, 3, 6, 1, 4, 1, 173, 7))
node = MibIdentifier((1, 3, 6, 1, 4, 1, 173, 7, 1))
nodeCfgTable = MibIdentifier((1, 3, 6, 1, 4, 1, 173, 7, 1, 1))
nodeAlmTable = MibIdentifier((1, 3, 6, 1, 4, 1, 173, 7, 1, 2))
nodeSNMPGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 173, 7, 1, 3))
nodeModel = MibScalar((1, 3, 6, 1, 4, 1, 173, 7, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("model1", 1), ("model2", 2), ("rackmount", 3), ("highavail", 4), ("netfrad", 5), ("frx4000", 6), ("ss1800", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeModel.setStatus('mandatory')
nodeTrapText = MibScalar((1, 3, 6, 1, 4, 1, 173, 7, 1, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeTrapText.setStatus('mandatory')
nodeTrapAdrTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 1, 3, 3), )
if mibBuilder.loadTexts: nodeTrapAdrTable.setStatus('mandatory')
tpAdrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 1, 3, 3, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "tpAdrIdx"))
if mibBuilder.loadTexts: tpAdrEntry.setStatus('mandatory')
tpAdrIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpAdrIdx.setStatus('mandatory')
tpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 1, 3, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpAddress.setStatus('mandatory')
tpAdrFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disableTraps", 1), ("enableTraps", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpAdrFlag.setStatus('mandatory')
tpAdrSLev = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("informational", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpAdrSLev.setStatus('mandatory')
nodeBagTable = MibIdentifier((1, 3, 6, 1, 4, 1, 173, 7, 1, 4))
hwcard = MibIdentifier((1, 3, 6, 1, 4, 1, 173, 7, 2))
rlpMaxProtos = MibScalar((1, 3, 6, 1, 4, 1, 173, 7, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlpMaxProtos.setStatus('mandatory')
rlpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 2, 2), )
if mibBuilder.loadTexts: rlpConfigTable.setStatus('mandatory')
rlpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 2, 2, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "rlpIndex"))
if mibBuilder.loadTexts: rlpEntry.setStatus('mandatory')
rlpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlpIndex.setStatus('mandatory')
rlpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("installed", 1), ("configured", 2), ("load-failed", 3), ("loading", 4), ("ipl-failed", 5), ("ipl-in-progress", 6), ("failed", 7), ("operational", 8), ("power-off", 9), ("power-on", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlpStatus.setStatus('mandatory')
rlpMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlpMemorySize.setStatus('mandatory')
rlpLIC1Type = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13))).clone(namedValues=NamedValues(("none", 1), ("rs232", 2), ("rs422", 3), ("v35", 4), ("hs-rs232", 5), ("x21", 6), ("rs449", 7), ("universal", 8), ("t1", 10), ("e1", 11), ("voice", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlpLIC1Type.setStatus('mandatory')
rlpLIC2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13))).clone(namedValues=NamedValues(("none", 1), ("rs232", 2), ("rs422", 3), ("v35", 4), ("hs-rs232", 5), ("x21", 6), ("rs449", 7), ("universal", 8), ("t1", 10), ("e1", 11), ("voice", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlpLIC2Type.setStatus('mandatory')
rlpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 2, 2, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlpProtocol.setStatus('mandatory')
rlpGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlpGroupNumber.setStatus('mandatory')
rlpGroupResponsibility = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlpGroupResponsibility.setStatus('mandatory')
port = MibIdentifier((1, 3, 6, 1, 4, 1, 173, 7, 3))
portX25Group = MibIdentifier((1, 3, 6, 1, 4, 1, 173, 7, 3, 1))
portPhyX25AdminTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 1), )
if mibBuilder.loadTexts: portPhyX25AdminTable.setStatus('mandatory')
portPhyX25AdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 1, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "nlIfRlp"), (0, "NETLINK-SPECIFIC-MIB", "nlIfPort"))
if mibBuilder.loadTexts: portPhyX25AdminEntry.setStatus('mandatory')
portPhyX25AdminConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 5, 6, 7, 8, 10, 11))).clone(namedValues=NamedValues(("rs232", 3), ("v35", 5), ("rs449", 6), ("rs530", 7), ("x21", 8), ("t1", 10), ("e1", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPhyX25AdminConnector.setStatus('mandatory')
portPhyX25AdminSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 1, 1, 2), Integer32().clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPhyX25AdminSpeed.setStatus('mandatory')
portPhyX25AdminGenerateClock = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPhyX25AdminGenerateClock.setStatus('mandatory')
portPhyX25AdminRcvClockFromDTE = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPhyX25AdminRcvClockFromDTE.setStatus('mandatory')
portPhyX25AdminDialOut = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("dialIn", 2), ("dialOut", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPhyX25AdminDialOut.setStatus('mandatory')
portPhyX25AdminInactivityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPhyX25AdminInactivityTimer.setStatus('mandatory')
portPhyX25AdminDisconnectTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPhyX25AdminDisconnectTimer.setStatus('mandatory')
portPhyX25AdminSetupTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPhyX25AdminSetupTimer.setStatus('mandatory')
portPhyX25AdminTrunkFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPhyX25AdminTrunkFlag.setStatus('mandatory')
portPhyX25AdminTrunkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 1, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPhyX25AdminTrunkGroup.setStatus('mandatory')
portPhyX25AdminRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 1, 1, 11), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPhyX25AdminRowStatus.setStatus('mandatory')
portPhyX25OperTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 2), )
if mibBuilder.loadTexts: portPhyX25OperTable.setStatus('mandatory')
portPhyX25OperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 2, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "nlIfRlp"), (0, "NETLINK-SPECIFIC-MIB", "nlIfPort"))
if mibBuilder.loadTexts: portPhyX25OperEntry.setStatus('mandatory')
portPhyX25OperConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 5, 6, 7, 8, 10, 11))).clone(namedValues=NamedValues(("rs232", 3), ("v35", 5), ("rs449", 6), ("rs530", 7), ("x21", 8), ("t1", 10), ("e1", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPhyX25OperConnector.setStatus('mandatory')
portPhyX25OperSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPhyX25OperSpeed.setStatus('mandatory')
portPhyX25OperGenerateClock = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPhyX25OperGenerateClock.setStatus('mandatory')
portPhyX25OperRcvClockFromDTE = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPhyX25OperRcvClockFromDTE.setStatus('mandatory')
portPhyX25OperDialOut = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("dialIn", 2), ("dialOut", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPhyX25OperDialOut.setStatus('mandatory')
portPhyX25OperInactivityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPhyX25OperInactivityTimer.setStatus('mandatory')
portPhyX25OperDisconnectTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPhyX25OperDisconnectTimer.setStatus('mandatory')
portPhyX25OperSetupTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPhyX25OperSetupTimer.setStatus('mandatory')
portPhyX25OperTrunkFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPhyX25OperTrunkFlag.setStatus('mandatory')
portPhyX25OperTrunkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPhyX25OperTrunkGroup.setStatus('mandatory')
portLogicalX25AdminTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 3), )
if mibBuilder.loadTexts: portLogicalX25AdminTable.setStatus('mandatory')
portLogicalX25AdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 3, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "nlIfRlp"), (0, "NETLINK-SPECIFIC-MIB", "nlIfPhyPort"), (0, "NETLINK-SPECIFIC-MIB", "nlIfPort"))
if mibBuilder.loadTexts: portLogicalX25AdminEntry.setStatus('mandatory')
portLogicalX25AdminFrDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLogicalX25AdminFrDlci.setStatus('mandatory')
portLogicalX25AdminCxnPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLogicalX25AdminCxnPriority.setStatus('mandatory')
portLogicalX25AdminRfc1490 = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("annexG", 1), ("rfc1490", 2))).clone('rfc1490')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLogicalX25AdminRfc1490.setStatus('mandatory')
portLogicalX25AdminBAG = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLogicalX25AdminBAG.setStatus('mandatory')
portLogicalX25AdminRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 3, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLogicalX25AdminRowStatus.setStatus('mandatory')
portLogicalX25OperTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 4), )
if mibBuilder.loadTexts: portLogicalX25OperTable.setStatus('mandatory')
portLogicalX25OperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 4, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "nlIfRlp"), (0, "NETLINK-SPECIFIC-MIB", "nlIfPhyPort"), (0, "NETLINK-SPECIFIC-MIB", "nlIfPort"))
if mibBuilder.loadTexts: portLogicalX25OperEntry.setStatus('mandatory')
portLogicalX25OperFrDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLogicalX25OperFrDlci.setStatus('mandatory')
portLogicalX25OperCxnPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLogicalX25OperCxnPriority.setStatus('mandatory')
portLogicalX25OperRfc1490 = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("annexG", 1), ("rfc1490", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLogicalX25OperRfc1490.setStatus('mandatory')
portLogicalX25OperBAG = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLogicalX25OperBAG.setStatus('mandatory')
portX25AdminTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 5), )
if mibBuilder.loadTexts: portX25AdminTable.setStatus('mandatory')
portX25AdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 5, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "nlIfRlp"), (0, "NETLINK-SPECIFIC-MIB", "nlIfPort"))
if mibBuilder.loadTexts: portX25AdminEntry.setStatus('mandatory')
portX25AdminBlockedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portX25AdminBlockedFlag.setStatus('mandatory')
portX25AdminFlowCtrlNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portX25AdminFlowCtrlNeg.setStatus('mandatory')
portX25AdminThruptClassNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portX25AdminThruptClassNeg.setStatus('mandatory')
portX25AdminLocChgPrev = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portX25AdminLocChgPrev.setStatus('mandatory')
portX25AdminRevChgAccpt = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portX25AdminRevChgAccpt.setStatus('mandatory')
portX25AdminFastSelAccpt = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portX25AdminFastSelAccpt.setStatus('mandatory')
portX25AdminInCallBar = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portX25AdminInCallBar.setStatus('mandatory')
portX25AdminOutCallBar = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portX25AdminOutCallBar.setStatus('mandatory')
portX25AdminMaxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portX25AdminMaxPktSize.setStatus('mandatory')
portX25AdminDefPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 4096)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portX25AdminDefPktSize.setStatus('mandatory')
portX25AdminMaxWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 7)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portX25AdminMaxWinSize.setStatus('mandatory')
portX25AdminDefWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portX25AdminDefWinSize.setStatus('mandatory')
portX25AdminMaxThruptClass = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portX25AdminMaxThruptClass.setStatus('mandatory')
portX25AdminCUGPref = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portX25AdminCUGPref.setStatus('mandatory')
portX25AdminCUGIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portX25AdminCUGIndex.setStatus('mandatory')
portX25AdminCUGIncAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portX25AdminCUGIncAccess.setStatus('mandatory')
portX25AdminCUGOutAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 5, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portX25AdminCUGOutAccess.setStatus('mandatory')
portX25OperTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 6), )
if mibBuilder.loadTexts: portX25OperTable.setStatus('mandatory')
portX25OperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 6, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "nlIfRlp"), (0, "NETLINK-SPECIFIC-MIB", "nlIfPort"))
if mibBuilder.loadTexts: portX25OperEntry.setStatus('mandatory')
portX25OperBlockedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portX25OperBlockedFlag.setStatus('mandatory')
portX25OperFlowCtrlNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portX25OperFlowCtrlNeg.setStatus('mandatory')
portX25OperThruptClassNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portX25OperThruptClassNeg.setStatus('mandatory')
portX25OperLocChgPrev = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portX25OperLocChgPrev.setStatus('mandatory')
portX25OperRevChgAccpt = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portX25OperRevChgAccpt.setStatus('mandatory')
portX25OperFastSelAccpt = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portX25OperFastSelAccpt.setStatus('mandatory')
portX25OperInCallBar = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portX25OperInCallBar.setStatus('mandatory')
portX25OperOutCallBar = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portX25OperOutCallBar.setStatus('mandatory')
portX25OperMaxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portX25OperMaxPktSize.setStatus('mandatory')
portX25OperDefPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portX25OperDefPktSize.setStatus('mandatory')
portX25OperMaxWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portX25OperMaxWinSize.setStatus('mandatory')
portX25OperDefWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portX25OperDefWinSize.setStatus('mandatory')
portX25OperMaxThruptClass = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 6, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 13))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portX25OperMaxThruptClass.setStatus('mandatory')
portX25OperCUGPref = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portX25OperCUGPref.setStatus('mandatory')
portX25OperCUGIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 6, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portX25OperCUGIndex.setStatus('mandatory')
portX25OperCUGIncAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portX25OperCUGIncAccess.setStatus('mandatory')
portX25OperCUGOutAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 1, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portX25OperCUGOutAccess.setStatus('mandatory')
portFrGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 173, 7, 3, 2))
portFrConfigTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 3, 2, 1), )
if mibBuilder.loadTexts: portFrConfigTable.setStatus('mandatory')
portFrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 3, 2, 1, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "portFrRlpIndex"), (0, "NETLINK-SPECIFIC-MIB", "portFrPortIndex"))
if mibBuilder.loadTexts: portFrEntry.setStatus('mandatory')
portFrRlpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portFrRlpIndex.setStatus('mandatory')
portFrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portFrPortIndex.setStatus('mandatory')
portFrBlockedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFrBlockedFlag.setStatus('mandatory')
portFrMaxBytesPerFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 4096)).clone(1600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFrMaxBytesPerFrame.setStatus('mandatory')
portFrT392Timer = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFrT392Timer.setStatus('mandatory')
portFrOutgoingRateControl = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFrOutgoingRateControl.setStatus('mandatory')
portFrBandwidthAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFrBandwidthAllocation.setStatus('mandatory')
portFrConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 5, 6, 7, 8, 10, 11))).clone(namedValues=NamedValues(("rs232", 3), ("v35", 5), ("rs449", 6), ("rs530", 7), ("x21", 8), ("t1", 10), ("e1", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFrConnector.setStatus('mandatory')
portFrLogicalDCE = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFrLogicalDCE.setStatus('mandatory')
portFrGenClock = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFrGenClock.setStatus('mandatory')
portFrRcvClkFrmDTE = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFrRcvClkFrmDTE.setStatus('mandatory')
portFrLLM = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("lmi", 2), ("annexd", 3))).clone('annexd')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFrLLM.setStatus('mandatory')
portFrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 2, 1, 1, 13), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFrRowStatus.setStatus('mandatory')
portFrSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(75, 2048000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFrSpeed.setStatus('mandatory')
portFrBackupUseOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFrBackupUseOnly.setStatus('mandatory')
portDLCIConfigTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 3, 2, 2), )
if mibBuilder.loadTexts: portDLCIConfigTable.setStatus('mandatory')
portDLCIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 3, 2, 2, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "portDLCIRlpIndex"), (0, "NETLINK-SPECIFIC-MIB", "portDLCIPortIndex"), (0, "NETLINK-SPECIFIC-MIB", "portDLCIIndex"))
if mibBuilder.loadTexts: portDLCIEntry.setStatus('mandatory')
portDLCIRlpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portDLCIRlpIndex.setStatus('mandatory')
portDLCIPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portDLCIPortIndex.setStatus('mandatory')
portDLCIIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portDLCIIndex.setStatus('mandatory')
portDLCIIncomingCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDLCIIncomingCIR.setStatus('mandatory')
portDLCIOutgoingCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDLCIOutgoingCIR.setStatus('mandatory')
portDLCIIncomingBc = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 2, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDLCIIncomingBc.setStatus('mandatory')
portDLCIOutgoingBc = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 2, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDLCIOutgoingBc.setStatus('mandatory')
portDLCIIncomingBe = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDLCIIncomingBe.setStatus('mandatory')
portDLCIOutgoingBe = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDLCIOutgoingBe.setStatus('mandatory')
portDLCIBecnRecoveryCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDLCIBecnRecoveryCnt.setStatus('mandatory')
portDLCIPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDLCIPriority.setStatus('mandatory')
portDLCIRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 2, 2, 1, 12), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDLCIRowStatus.setStatus('mandatory')
portDLCIBackupGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 2, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDLCIBackupGroup.setStatus('mandatory')
portDLCIBackupProtEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDLCIBackupProtEnb.setStatus('mandatory')
portFrBackupGroupTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 3, 2, 3), )
if mibBuilder.loadTexts: portFrBackupGroupTable.setStatus('mandatory')
portFrBackupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 3, 2, 3, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "portFrBackupRLP"), (0, "NETLINK-SPECIFIC-MIB", "portFrBackupPort"), (0, "NETLINK-SPECIFIC-MIB", "portFrBackupDLCI"), (0, "NETLINK-SPECIFIC-MIB", "portFrBackupGroup"))
if mibBuilder.loadTexts: portFrBackupEntry.setStatus('mandatory')
portFrBackupRLP = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portFrBackupRLP.setStatus('mandatory')
portFrBackupPort = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portFrBackupPort.setStatus('mandatory')
portFrBackupDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portFrBackupDLCI.setStatus('mandatory')
portFrBackupGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portFrBackupGroup.setStatus('mandatory')
portFrBackupWaitTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFrBackupWaitTimer.setStatus('mandatory')
portFrBackupProtEnab = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFrBackupProtEnab.setStatus('mandatory')
portFrBackupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 2, 3, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFrBackupRowStatus.setStatus('mandatory')
portBsciGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 173, 7, 3, 4))
portBsciAdminTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 1), )
if mibBuilder.loadTexts: portBsciAdminTable.setStatus('mandatory')
portBsciAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 1, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "nlIfRlp"), (0, "NETLINK-SPECIFIC-MIB", "nlIfPort"))
if mibBuilder.loadTexts: portBsciAdminEntry.setStatus('mandatory')
portBsciAdminBlockedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBsciAdminBlockedFlag.setStatus('mandatory')
portBsciAdminConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 5, 6, 7, 8, 10))).clone(namedValues=NamedValues(("rs232", 3), ("v35", 5), ("rs449", 6), ("rs530", 7), ("x21", 8), ("t1", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBsciAdminConnector.setStatus('mandatory')
portBsciAdminSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(75, 19200)).clone(9600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBsciAdminSpeed.setStatus('mandatory')
portBsciAdminRetransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBsciAdminRetransmitInterval.setStatus('mandatory')
portBsciAdminMAXRetransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBsciAdminMAXRetransmits.setStatus('mandatory')
portBsciAdminMaxBytesPerFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(25, 4105)).clone(4105)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBsciAdminMaxBytesPerFrame.setStatus('mandatory')
portBsciAdminGenerateClock = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBsciAdminGenerateClock.setStatus('mandatory')
portBsciAdminRcvClockFromDTE = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBsciAdminRcvClockFromDTE.setStatus('mandatory')
portBsciAdminPadType = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tpad", 1), ("hpad", 2))).clone('tpad')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBsciAdminPadType.setStatus('mandatory')
portBsciAdminUseEBCDIC = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBsciAdminUseEBCDIC.setStatus('mandatory')
portBsciAdminCallInfoInRequestPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBsciAdminCallInfoInRequestPacket.setStatus('mandatory')
portBsciAdminClearVCOnLastDeviceDown = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBsciAdminClearVCOnLastDeviceDown.setStatus('mandatory')
portBsciAdminTransTextSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBsciAdminTransTextSupported.setStatus('mandatory')
portBsciAdminEndToEndAck = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBsciAdminEndToEndAck.setStatus('mandatory')
portBsciAdminFullDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBsciAdminFullDuplex.setStatus('mandatory')
portBsciAdminMultidrop = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBsciAdminMultidrop.setStatus('mandatory')
portBsciAdminSlowPollRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 150)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBsciAdminSlowPollRetryCount.setStatus('mandatory')
portBsciAdminSlowPollRetryFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBsciAdminSlowPollRetryFreq.setStatus('mandatory')
portBsciAdminStartSynchChars = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBsciAdminStartSynchChars.setStatus('mandatory')
portBsciAdminEndPadChars = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBsciAdminEndPadChars.setStatus('mandatory')
portBsciAdminPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBsciAdminPollInterval.setStatus('mandatory')
portBsciAdminNoResponseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBsciAdminNoResponseTimer.setStatus('mandatory')
portBsciAdminNoResponseRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBsciAdminNoResponseRetryCount.setStatus('mandatory')
portBsciAdminErrorRetransmitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBsciAdminErrorRetransmitCount.setStatus('mandatory')
portBsciAdminNAKRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBsciAdminNAKRetryCount.setStatus('mandatory')
portBsciAdminBlockCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("crc16", 1), ("even-lrc", 2), ("odd-lrc", 3))).clone('even-lrc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBsciAdminBlockCheck.setStatus('mandatory')
portBsciAdminDataMode = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("odd-7bit", 1), ("even-7bit", 2), ("none-8bit", 3))).clone('none-8bit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBsciAdminDataMode.setStatus('mandatory')
portBsciAdminRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 1, 1, 28), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBsciAdminRowStatus.setStatus('mandatory')
portBsciAdminAnswerNonConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBsciAdminAnswerNonConfigured.setStatus('mandatory')
portBsciAdminActivateConnectionWithoutPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBsciAdminActivateConnectionWithoutPoll.setStatus('mandatory')
portBsciOperTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 2), )
if mibBuilder.loadTexts: portBsciOperTable.setStatus('mandatory')
portBsciOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 2, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "nlIfRlp"), (0, "NETLINK-SPECIFIC-MIB", "nlIfPort"))
if mibBuilder.loadTexts: portBsciOperEntry.setStatus('mandatory')
portBsciOperBlockedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBsciOperBlockedFlag.setStatus('mandatory')
portBsciOperConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 5, 6, 7, 8, 10))).clone(namedValues=NamedValues(("rs232", 3), ("v35", 5), ("rs449", 6), ("rs530", 7), ("x21", 8), ("t1", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBsciOperConnector.setStatus('mandatory')
portBsciOperSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBsciOperSpeed.setStatus('mandatory')
portBsciOperRetransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBsciOperRetransmitInterval.setStatus('mandatory')
portBsciOperMAXRetransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBsciOperMAXRetransmits.setStatus('mandatory')
portBsciOperMaxBytesPerFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(25, 4105))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBsciOperMaxBytesPerFrame.setStatus('mandatory')
portBsciOperGenerateClock = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBsciOperGenerateClock.setStatus('mandatory')
portBsciOperRcvClockFromDTE = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBsciOperRcvClockFromDTE.setStatus('mandatory')
portBsciOperPadType = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tpad", 1), ("hpad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBsciOperPadType.setStatus('mandatory')
portBsciOperUseEBCDIC = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBsciOperUseEBCDIC.setStatus('mandatory')
portBsciOperCallInfoInRequestPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBsciOperCallInfoInRequestPacket.setStatus('mandatory')
portBsciOperClearVCOnLastDeviceDown = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBsciOperClearVCOnLastDeviceDown.setStatus('mandatory')
portBsciOperTransTextSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBsciOperTransTextSupported.setStatus('mandatory')
portBsciOperEndToEndAck = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBsciOperEndToEndAck.setStatus('mandatory')
portBsciOperFullDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBsciOperFullDuplex.setStatus('mandatory')
portBsciOperMultidrop = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBsciOperMultidrop.setStatus('mandatory')
portBsciOperSlowPollRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 150))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBsciOperSlowPollRetryCount.setStatus('mandatory')
portBsciOperSlowPollRetryFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBsciOperSlowPollRetryFreq.setStatus('mandatory')
portBsciOperStartSynchChars = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBsciOperStartSynchChars.setStatus('mandatory')
portBsciOperEndPadChars = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBsciOperEndPadChars.setStatus('mandatory')
portBsciOperPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBsciOperPollInterval.setStatus('mandatory')
portBsciOperNoResponseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBsciOperNoResponseTimer.setStatus('mandatory')
portBsciOperNoResponseRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBsciOperNoResponseRetryCount.setStatus('mandatory')
portBsciOperErrorRetransmitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBsciOperErrorRetransmitCount.setStatus('mandatory')
portBsciOperNAKRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBsciOperNAKRetryCount.setStatus('mandatory')
portBsciOperBlockCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("crc16", 1), ("even-lrc", 2), ("odd-lrc", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBsciOperBlockCheck.setStatus('mandatory')
portBsciOperDataMode = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("odd-7bit", 1), ("even-7bit", 2), ("none-8bit", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBsciOperDataMode.setStatus('mandatory')
portBsciOperAnswerNonConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBsciOperAnswerNonConfigured.setStatus('mandatory')
portBsciOperActivateConnectionWithoutPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBsciOperActivateConnectionWithoutPoll.setStatus('mandatory')
bsciSubscrAdminTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 3), )
if mibBuilder.loadTexts: bsciSubscrAdminTable.setStatus('mandatory')
bsciSubscrAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 3, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "nlIfRlp"), (0, "NETLINK-SPECIFIC-MIB", "nlIfPort"), (0, "NETLINK-SPECIFIC-MIB", "bsciSubscrAdminSequence"))
if mibBuilder.loadTexts: bsciSubscrAdminEntry.setStatus('mandatory')
bsciSubscrAdminSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsciSubscrAdminSequence.setStatus('mandatory')
bsciSubscrAdminLocalID = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 3, 1, 2), NlSubscriberAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsciSubscrAdminLocalID.setStatus('mandatory')
bsciSubscrAdminRemoteID = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 3, 1, 3), NlSubscriberAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsciSubscrAdminRemoteID.setStatus('mandatory')
bsciSubscrAdminAutocall = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsciSubscrAdminAutocall.setStatus('mandatory')
bsciSubscrAdminAutocallRtyTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 255)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsciSubscrAdminAutocallRtyTimer.setStatus('mandatory')
bsciSubscrAdminAutocallMaxRtry = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsciSubscrAdminAutocallMaxRtry.setStatus('mandatory')
bsciSubscrAdminConnectionID = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsciSubscrAdminConnectionID.setStatus('mandatory')
bsciSubscrAdminRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 3, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsciSubscrAdminRowStatus.setStatus('mandatory')
bsciSubscrOperTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 4), )
if mibBuilder.loadTexts: bsciSubscrOperTable.setStatus('mandatory')
bsciSubscrOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 4, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "nlIfRlp"), (0, "NETLINK-SPECIFIC-MIB", "nlIfPort"), (0, "NETLINK-SPECIFIC-MIB", "bsciSubscrOperSequence"))
if mibBuilder.loadTexts: bsciSubscrOperEntry.setStatus('mandatory')
bsciSubscrOperSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsciSubscrOperSequence.setStatus('mandatory')
bsciSubscrOperLocalID = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 4, 1, 2), NlSubscriberAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsciSubscrOperLocalID.setStatus('mandatory')
bsciSubscrOperRemoteID = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 4, 1, 3), NlSubscriberAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsciSubscrOperRemoteID.setStatus('mandatory')
bsciSubscrOperAutocall = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsciSubscrOperAutocall.setStatus('mandatory')
bsciSubscrOperAutocallRtyTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsciSubscrOperAutocallRtyTimer.setStatus('mandatory')
bsciSubscrOperAutocallMaxRtry = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsciSubscrOperAutocallMaxRtry.setStatus('mandatory')
bsciSubscrOperConnectionID = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsciSubscrOperConnectionID.setStatus('mandatory')
bsciDevAdminTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 5), )
if mibBuilder.loadTexts: bsciDevAdminTable.setStatus('mandatory')
bsciDevAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 5, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "nlIfRlp"), (0, "NETLINK-SPECIFIC-MIB", "nlIfPort"), (0, "NETLINK-SPECIFIC-MIB", "bsciDevAdminControlUnitID"), (0, "NETLINK-SPECIFIC-MIB", "bsciDevAdminDeviceUnitID"))
if mibBuilder.loadTexts: bsciDevAdminEntry.setStatus('mandatory')
bsciDevAdminControlUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsciDevAdminControlUnitID.setStatus('mandatory')
bsciDevAdminDeviceUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsciDevAdminDeviceUnitID.setStatus('mandatory')
bsciDevAdminConnectionID = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsciDevAdminConnectionID.setStatus('mandatory')
bsciDevAdminSingleUserVC = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsciDevAdminSingleUserVC.setStatus('mandatory')
bsciDevAdminTransTextSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsciDevAdminTransTextSupported.setStatus('mandatory')
bsciDevAdminPrinterAttached = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsciDevAdminPrinterAttached.setStatus('mandatory')
bsciDevAdminRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 5, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsciDevAdminRowStatus.setStatus('mandatory')
bsciDevAdminDisableStatusRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("none", 2), ("always-active", 3))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsciDevAdminDisableStatusRequest.setStatus('mandatory')
bsciDevOperTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 6), )
if mibBuilder.loadTexts: bsciDevOperTable.setStatus('mandatory')
bsciDevOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 6, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "nlIfRlp"), (0, "NETLINK-SPECIFIC-MIB", "nlIfPort"), (0, "NETLINK-SPECIFIC-MIB", "bsciDevOperControlUnitID"), (0, "NETLINK-SPECIFIC-MIB", "bsciDevOperDeviceUnitID"))
if mibBuilder.loadTexts: bsciDevOperEntry.setStatus('mandatory')
bsciDevOperControlUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsciDevOperControlUnitID.setStatus('mandatory')
bsciDevOperDeviceUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsciDevOperDeviceUnitID.setStatus('mandatory')
bsciDevOperConnectionID = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsciDevOperConnectionID.setStatus('mandatory')
bsciDevOperSingleUserVC = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsciDevOperSingleUserVC.setStatus('mandatory')
bsciDevOperTransTextSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsciDevOperTransTextSupported.setStatus('mandatory')
bsciDevOperPrinterAttached = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsciDevOperPrinterAttached.setStatus('mandatory')
bsciDevOperDisableStatusRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 4, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("none", 2), ("always-active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsciDevOperDisableStatusRequest.setStatus('mandatory')
portSdlcGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 173, 7, 3, 5))
portSdlcAdminTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 1), )
if mibBuilder.loadTexts: portSdlcAdminTable.setStatus('mandatory')
portSdlcAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 1, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "nlIfRlp"), (0, "NETLINK-SPECIFIC-MIB", "nlIfPort"))
if mibBuilder.loadTexts: portSdlcAdminEntry.setStatus('mandatory')
portSdlcAdminCommit = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSdlcAdminCommit.setStatus('obsolete')
portSdlcAdminMAXRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSdlcAdminMAXRetries.setStatus('mandatory')
portSdlcAdminMAXOut = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSdlcAdminMAXOut.setStatus('mandatory')
portSdlcAdminPadType = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("xpad", 1), ("tpad", 2), ("hpad", 3), ("npad", 4))).clone('tpad')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSdlcAdminPadType.setStatus('mandatory')
portSdlcAdminGenerateClock = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSdlcAdminGenerateClock.setStatus('mandatory')
portSdlcAdminRcvClockFromDTE = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSdlcAdminRcvClockFromDTE.setStatus('mandatory')
portSdlcAdminNrz = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSdlcAdminNrz.setStatus('mandatory')
portSdlcAdminPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 4096)).clone(1024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSdlcAdminPacketSize.setStatus('mandatory')
portSdlcAdminDisableRequestDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSdlcAdminDisableRequestDisconnect.setStatus('mandatory')
portSdlcAdminLPDASupport = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("lpda-1", 2), ("lpda-2", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSdlcAdminLPDASupport.setStatus('mandatory')
portSdlcAdminConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 5, 6, 7, 8, 10))).clone(namedValues=NamedValues(("rs232", 3), ("v35", 5), ("rs449", 6), ("rs530", 7), ("x21", 8), ("t1", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSdlcAdminConnector.setStatus('mandatory')
portSdlcAdminSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(75, 2048000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSdlcAdminSpeed.setStatus('mandatory')
portSdlcAdminRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 1, 1, 13), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSdlcAdminRowStatus.setStatus('mandatory')
portSdlcAdminIdleFillChar = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hex-ff", 1), ("hex-7e", 2))).clone('hex-ff')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSdlcAdminIdleFillChar.setStatus('mandatory')
portSdlcAdminInactivityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 250)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSdlcAdminInactivityTimer.setStatus('mandatory')
portSdlcAdminL1Duplex = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("full-duplex", 1), ("half-duplex", 2))).clone('full-duplex')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSdlcAdminL1Duplex.setStatus('mandatory')
portSdlcOperTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 2), )
if mibBuilder.loadTexts: portSdlcOperTable.setStatus('mandatory')
portSdlcOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 2, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "nlIfRlp"), (0, "NETLINK-SPECIFIC-MIB", "nlIfPort"))
if mibBuilder.loadTexts: portSdlcOperEntry.setStatus('mandatory')
portSdlcOperCommit = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSdlcOperCommit.setStatus('obsolete')
portSdlcOperMAXRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSdlcOperMAXRetries.setStatus('mandatory')
portSdlcOperMAXOut = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSdlcOperMAXOut.setStatus('mandatory')
portSdlcOperPadType = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("xpad", 1), ("tpad", 2), ("hpad", 3), ("npad", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSdlcOperPadType.setStatus('mandatory')
portSdlcOperGenerateClock = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSdlcOperGenerateClock.setStatus('mandatory')
portSdlcOperRcvClockFromDTE = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSdlcOperRcvClockFromDTE.setStatus('mandatory')
portSdlcOperNrz = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSdlcOperNrz.setStatus('mandatory')
portSdlcOperPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSdlcOperPacketSize.setStatus('mandatory')
portSdlcOperDisableRequestDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSdlcOperDisableRequestDisconnect.setStatus('mandatory')
portSdlcOperLPDASupport = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("lpda-1", 2), ("lpda-2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSdlcOperLPDASupport.setStatus('mandatory')
portSdlcOperConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 5, 6, 7, 8, 10))).clone(namedValues=NamedValues(("rs232", 3), ("v35", 5), ("rs449", 6), ("rs530", 7), ("x21", 8), ("t1", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSdlcOperConnector.setStatus('mandatory')
portSdlcOperSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSdlcOperSpeed.setStatus('mandatory')
portSdlcOperIdleFillChar = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hex-ff", 1), ("hex-7e", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSdlcOperIdleFillChar.setStatus('mandatory')
portSdlcOperInactivityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSdlcOperInactivityTimer.setStatus('mandatory')
portSdlcOperL1Duplex = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("full-duplex", 1), ("half-duplex", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSdlcOperL1Duplex.setStatus('mandatory')
lSSdlcAdminTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 3), )
if mibBuilder.loadTexts: lSSdlcAdminTable.setStatus('mandatory')
lSSdlcAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 3, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "nlIfRlp"), (0, "NETLINK-SPECIFIC-MIB", "nlIfPort"), (0, "NETLINK-SPECIFIC-MIB", "sdlcLSAddress"))
if mibBuilder.loadTexts: lSSdlcAdminEntry.setStatus('mandatory')
lSSdlcAdminLocalSub = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 3, 1, 1), NlSubscriberAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lSSdlcAdminLocalSub.setStatus('mandatory')
lSSdlcAdminRemoteSub = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 3, 1, 2), NlSubscriberAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lSSdlcAdminRemoteSub.setStatus('mandatory')
lSSdlcAdminAutoCall = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lSSdlcAdminAutoCall.setStatus('mandatory')
lSSdlcAdminRetryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 225)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lSSdlcAdminRetryTime.setStatus('mandatory')
lSSdlcAdminRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lSSdlcAdminRetryCount.setStatus('mandatory')
lSSdlcAdminLlc2Conversion = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lSSdlcAdminLlc2Conversion.setStatus('mandatory')
lSSdlcAdminLPDAResourceID = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lSSdlcAdminLPDAResourceID.setStatus('mandatory')
lSSdlcAdminRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 3, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lSSdlcAdminRowStatus.setStatus('mandatory')
lSSdlcAdminL2DatMode = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("two-way-alternate", 1), ("two-way-simultaneous", 2))).clone('two-way-alternate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lSSdlcAdminL2DatMode.setStatus('mandatory')
lSSdlcOperTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 4), )
if mibBuilder.loadTexts: lSSdlcOperTable.setStatus('mandatory')
lSSdlcOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 4, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "nlIfRlp"), (0, "NETLINK-SPECIFIC-MIB", "nlIfPort"), (0, "NETLINK-SPECIFIC-MIB", "sdlcLSAddress"))
if mibBuilder.loadTexts: lSSdlcOperEntry.setStatus('mandatory')
lSSdlcOperLocalSub = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 4, 1, 1), NlSubscriberAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lSSdlcOperLocalSub.setStatus('mandatory')
lSSdlcOperRemoteSub = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 4, 1, 2), NlSubscriberAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lSSdlcOperRemoteSub.setStatus('mandatory')
lSSdlcOperAutoCall = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lSSdlcOperAutoCall.setStatus('mandatory')
lSSdlcOperRetryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 225))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lSSdlcOperRetryTime.setStatus('mandatory')
lSSdlcOperRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lSSdlcOperRetryCount.setStatus('mandatory')
lSSdlcOperLlc2Conversion = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lSSdlcOperLlc2Conversion.setStatus('mandatory')
lSSdlcOperLPDAResourceID = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lSSdlcOperLPDAResourceID.setStatus('mandatory')
lSSdlcOperL2DatMode = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("two-way-alternate", 1), ("two-way-simultaneous", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lSSdlcOperL2DatMode.setStatus('mandatory')
lSSdlcLlc2AdminTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 5), )
if mibBuilder.loadTexts: lSSdlcLlc2AdminTable.setStatus('mandatory')
lSSdlcLlc2AdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 5, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "nlIfRlp"), (0, "NETLINK-SPECIFIC-MIB", "nlIfPort"), (0, "NETLINK-SPECIFIC-MIB", "sdlcLSAddress"))
if mibBuilder.loadTexts: lSSdlcLlc2AdminEntry.setStatus('mandatory')
lSSdlcLlc2AdminLocalSap = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 252)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lSSdlcLlc2AdminLocalSap.setStatus('mandatory')
lSSdlcLlc2AdminLocalMac = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 5, 1, 2), PhysAddress().clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lSSdlcLlc2AdminLocalMac.setStatus('mandatory')
lSSdlcLlc2AdminIdblk = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lSSdlcLlc2AdminIdblk.setStatus('mandatory')
lSSdlcLlc2AdminIdnum = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lSSdlcLlc2AdminIdnum.setStatus('mandatory')
lSSdlcLlc2AdminLanTi = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lSSdlcLlc2AdminLanTi.setStatus('mandatory')
lSSdlcLlc2AdminLanT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lSSdlcLlc2AdminLanT1.setStatus('mandatory')
lSSdlcLlc2AdminLanT2 = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 5000)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lSSdlcLlc2AdminLanT2.setStatus('mandatory')
lSSdlcLlc2AdminLanN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lSSdlcLlc2AdminLanN2.setStatus('mandatory')
lSSdlcLlc2AdminLanN3 = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lSSdlcLlc2AdminLanN3.setStatus('mandatory')
lSSdlcLlc2AdminLanTw = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lSSdlcLlc2AdminLanTw.setStatus('mandatory')
lSSdlcLlc2AdminBAG = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lSSdlcLlc2AdminBAG.setStatus('mandatory')
lSSdlcLlc2AdminPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lSSdlcLlc2AdminPriority.setStatus('mandatory')
lSSdlcLlc2AdminRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 5, 1, 13), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lSSdlcLlc2AdminRowStatus.setStatus('mandatory')
lSSdlcLlc2AdminSuppressXID = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lSSdlcLlc2AdminSuppressXID.setStatus('mandatory')
lSSdlcLlc2OperTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 6), )
if mibBuilder.loadTexts: lSSdlcLlc2OperTable.setStatus('mandatory')
lSSdlcLlc2OperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 6, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "nlIfRlp"), (0, "NETLINK-SPECIFIC-MIB", "nlIfPort"), (0, "NETLINK-SPECIFIC-MIB", "sdlcLSAddress"))
if mibBuilder.loadTexts: lSSdlcLlc2OperEntry.setStatus('mandatory')
lSSdlcLlc2OperLocalSap = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 252))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lSSdlcLlc2OperLocalSap.setStatus('mandatory')
lSSdlcLlc2OperLocalMac = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 6, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lSSdlcLlc2OperLocalMac.setStatus('mandatory')
lSSdlcLlc2OperIdblk = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lSSdlcLlc2OperIdblk.setStatus('mandatory')
lSSdlcLlc2OperIdnum = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lSSdlcLlc2OperIdnum.setStatus('mandatory')
lSSdlcLlc2OperLanTi = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lSSdlcLlc2OperLanTi.setStatus('mandatory')
lSSdlcLlc2OperLanT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lSSdlcLlc2OperLanT1.setStatus('mandatory')
lSSdlcLlc2OperLanT2 = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lSSdlcLlc2OperLanT2.setStatus('mandatory')
lSSdlcLlc2OperLanN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lSSdlcLlc2OperLanN2.setStatus('mandatory')
lSSdlcLlc2OperLanN3 = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lSSdlcLlc2OperLanN3.setStatus('mandatory')
lSSdlcLlc2OperLanTw = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lSSdlcLlc2OperLanTw.setStatus('mandatory')
lSSdlcLlc2OperBAG = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lSSdlcLlc2OperBAG.setStatus('mandatory')
lSSdlcLlc2OperPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lSSdlcLlc2OperPriority.setStatus('mandatory')
lSSdlcLlc2OperSuppressXID = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 5, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lSSdlcLlc2OperSuppressXID.setStatus('mandatory')
portT1Group = MibIdentifier((1, 3, 6, 1, 4, 1, 173, 7, 3, 7))
portT1AdminTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 3, 7, 1), )
if mibBuilder.loadTexts: portT1AdminTable.setStatus('mandatory')
portT1AdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 3, 7, 1, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "nlIfRlp"), (0, "NETLINK-SPECIFIC-MIB", "nlIfPort"))
if mibBuilder.loadTexts: portT1AdminEntry.setStatus('mandatory')
portT1AdminBlockedPortFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portT1AdminBlockedPortFlag.setStatus('mandatory')
portT1AdminGenerateClock = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portT1AdminGenerateClock.setStatus('mandatory')
portT1AdminFramingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fullT1", 1), ("ds0aT1", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portT1AdminFramingMode.setStatus('mandatory')
portT1AdminFrameModelSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("d4", 1), ("esf", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portT1AdminFrameModelSelect.setStatus('mandatory')
portT1AdminLineEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("b8zs", 1), ("ami", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portT1AdminLineEncoding.setStatus('mandatory')
portT1AdminLineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("zerodb", 1), ("x133-266ft", 2), ("x266-399ft", 3), ("x399-533ft", 4), ("x533-655ft", 5), ("minus7p5db", 6), ("minus15db", 7), ("minus22p5db", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portT1AdminLineBuildOut.setStatus('mandatory')
portT1AdminRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 7, 1, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portT1AdminRowStatus.setStatus('mandatory')
portT1AdminProtocolFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sync", 1), ("bisync", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portT1AdminProtocolFraming.setStatus('mandatory')
portT1AdminNRZI = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portT1AdminNRZI.setStatus('mandatory')
portT1OperTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 3, 7, 2), )
if mibBuilder.loadTexts: portT1OperTable.setStatus('mandatory')
portT1OperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 3, 7, 2, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "nlIfRlp"), (0, "NETLINK-SPECIFIC-MIB", "nlIfPort"))
if mibBuilder.loadTexts: portT1OperEntry.setStatus('mandatory')
portT1OperBlockedPortFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portT1OperBlockedPortFlag.setStatus('mandatory')
portT1OperGenerateClock = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portT1OperGenerateClock.setStatus('mandatory')
portT1OperFramingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fullT1", 1), ("ds0aT1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portT1OperFramingMode.setStatus('mandatory')
portT1OperFrameModelSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("d4", 1), ("esf", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portT1OperFrameModelSelect.setStatus('mandatory')
portT1OperLineEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("b8zs", 1), ("ami", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portT1OperLineEncoding.setStatus('mandatory')
portT1OperLineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("zerodb", 1), ("x133-266ft", 2), ("x266-399ft", 3), ("x399-533ft", 4), ("x533-655ft", 5), ("minus7p5db", 6), ("minus15db", 7), ("minus22p5db", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portT1OperLineBuildOut.setStatus('mandatory')
portT1OperProtocolFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sync", 1), ("bisync", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portT1OperProtocolFraming.setStatus('mandatory')
portT1OperNRZI = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portT1OperNRZI.setStatus('mandatory')
portVoiceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 173, 7, 3, 8))
portVoiceAdminTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 1), )
if mibBuilder.loadTexts: portVoiceAdminTable.setStatus('mandatory')
portVoiceAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 1, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "portVoiceAdminRlpIndex"), (0, "NETLINK-SPECIFIC-MIB", "portVoiceAdminPortIndex"))
if mibBuilder.loadTexts: portVoiceAdminEntry.setStatus('mandatory')
portVoiceAdminRlpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVoiceAdminRlpIndex.setStatus('mandatory')
portVoiceAdminPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVoiceAdminPortIndex.setStatus('mandatory')
portVoiceAdminBlockedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVoiceAdminBlockedFlag.setStatus('mandatory')
portVoiceAdminSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bps-4800", 1), ("bps-8000", 2), ("bps-32000", 3), ("bps-64000", 4))).clone('bps-8000')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVoiceAdminSpeed.setStatus('mandatory')
portVoiceAdminDTMF = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVoiceAdminDTMF.setStatus('mandatory')
portVoiceAdminInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 10, 11))).clone(namedValues=NamedValues(("em-4w", 1), ("em-2w", 2), ("loop-start", 3), ("ac15-a", 4), ("ac15-b", 6), ("em-4w-te", 10), ("em-2w-te", 11))).clone('loop-start')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVoiceAdminInterface.setStatus('mandatory')
portVoiceAdminTETimer = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVoiceAdminTETimer.setStatus('mandatory')
portVoiceAdminLevelIn = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-22, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVoiceAdminLevelIn.setStatus('mandatory')
portVoiceAdminLevelOut = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-22, 7)).clone(-4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVoiceAdminLevelOut.setStatus('mandatory')
portVoiceAdminCallTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVoiceAdminCallTimer.setStatus('mandatory')
portVoiceAdminHuntGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("a", 2), ("b", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVoiceAdminHuntGroup.setStatus('mandatory')
portVoiceAdminLongDialPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="2A")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVoiceAdminLongDialPrefix.setStatus('mandatory')
portVoiceAdminSLTTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVoiceAdminSLTTimeout.setStatus('mandatory')
portVoiceAdminLinkDownBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVoiceAdminLinkDownBusy.setStatus('mandatory')
portVoiceAdminFaxSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVoiceAdminFaxSupported.setStatus('mandatory')
portVoiceAdminTelephonyType = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("opx", 1), ("slt", 2), ("em", 3), ("ac15", 4))).clone('opx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVoiceAdminTelephonyType.setStatus('mandatory')
portVoiceAdminJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 255)).clone(80)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVoiceAdminJitter.setStatus('mandatory')
portVoiceAdminSampleDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVoiceAdminSampleDelay.setStatus('mandatory')
portVoiceAdminDialTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVoiceAdminDialTimer.setStatus('mandatory')
portVoiceAdminAutoDial = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVoiceAdminAutoDial.setStatus('mandatory')
portVoiceAdminSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("very-low", 1), ("low", 2), ("medium", 3), ("high", 4), ("very-high", 5))).clone('low')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVoiceAdminSuppression.setStatus('mandatory')
portVoiceAdminAutoDialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 1, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVoiceAdminAutoDialNumber.setStatus('mandatory')
portVoiceAdminAutoPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVoiceAdminAutoPoll.setStatus('mandatory')
portVoiceAdminAutoPollTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVoiceAdminAutoPollTimer.setStatus('mandatory')
portVoiceAdminExtDigitsSource = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("map", 1), ("user", 2))).clone('map')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVoiceAdminExtDigitsSource.setStatus('mandatory')
portVoiceAdminNumDigitsDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVoiceAdminNumDigitsDelete.setStatus('mandatory')
portVoiceAdminForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVoiceAdminForwardDelay.setStatus('mandatory')
portVoiceAdminForwardedType = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dtmf", 1), ("pulse", 2))).clone('dtmf')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVoiceAdminForwardedType.setStatus('mandatory')
portVoiceAdminForwardedDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("all", 2), ("extended", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVoiceAdminForwardedDigits.setStatus('mandatory')
portVoiceAdminMakeRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 80)).clone(34)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVoiceAdminMakeRatio.setStatus('mandatory')
portVoiceAdminBreakRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 80)).clone(66)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVoiceAdminBreakRatio.setStatus('mandatory')
portVoiceAdminDTMFOnDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 1000)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVoiceAdminDTMFOnDuration.setStatus('mandatory')
portVoiceAdminDTMFOffDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 1000)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVoiceAdminDTMFOffDuration.setStatus('mandatory')
portVoiceAdminToneType = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dtmf", 1), ("mf", 2))).clone('dtmf')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVoiceAdminToneType.setStatus('mandatory')
portVoiceAdminRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 1, 1, 35), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portVoiceAdminRowStatus.setStatus('mandatory')
portVoiceOperTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 2), )
if mibBuilder.loadTexts: portVoiceOperTable.setStatus('mandatory')
portVoiceOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 2, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "portVoiceOperRlpIndex"), (0, "NETLINK-SPECIFIC-MIB", "portVoiceOperPortIndex"))
if mibBuilder.loadTexts: portVoiceOperEntry.setStatus('mandatory')
portVoiceOperRlpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVoiceOperRlpIndex.setStatus('mandatory')
portVoiceOperPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVoiceOperPortIndex.setStatus('mandatory')
portVoiceOperBlockedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVoiceOperBlockedFlag.setStatus('mandatory')
portVoiceOperSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bps-4800", 1), ("bps-8000", 2), ("bps-32000", 3), ("bps-64000", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVoiceOperSpeed.setStatus('mandatory')
portVoiceOperDTMF = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVoiceOperDTMF.setStatus('mandatory')
portVoiceOperInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 10, 11))).clone(namedValues=NamedValues(("em-4w", 1), ("em-2w", 2), ("loop-start", 3), ("ac15-a", 4), ("ac15-b", 6), ("em-4w-te", 10), ("em-2w-te", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVoiceOperInterface.setStatus('mandatory')
portVoiceOperTETimer = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVoiceOperTETimer.setStatus('mandatory')
portVoiceOperLevelIn = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-22, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVoiceOperLevelIn.setStatus('mandatory')
portVoiceOperLevelOut = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-22, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVoiceOperLevelOut.setStatus('mandatory')
portVoiceOperCallTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVoiceOperCallTimer.setStatus('mandatory')
portVoiceOperHuntGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("a", 2), ("b", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVoiceOperHuntGroup.setStatus('mandatory')
portVoiceOperLongDialPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVoiceOperLongDialPrefix.setStatus('mandatory')
portVoiceOperSLTTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVoiceOperSLTTimeout.setStatus('mandatory')
portVoiceOperLinkDownBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVoiceOperLinkDownBusy.setStatus('mandatory')
portVoiceOperFaxSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVoiceOperFaxSupported.setStatus('mandatory')
portVoiceOperTelephonyType = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("opx", 1), ("slt", 2), ("em", 3), ("ac15", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVoiceOperTelephonyType.setStatus('mandatory')
portVoiceOperJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVoiceOperJitter.setStatus('mandatory')
portVoiceOperSampleDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVoiceOperSampleDelay.setStatus('mandatory')
portVoiceOperDialTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVoiceOperDialTimer.setStatus('mandatory')
portVoiceOperAutoDial = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVoiceOperAutoDial.setStatus('mandatory')
portVoiceOperSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("very-low", 1), ("low", 2), ("medium", 3), ("high", 4), ("very-high", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVoiceOperSuppression.setStatus('mandatory')
portVoiceOperAutoDialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 2, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVoiceOperAutoDialNumber.setStatus('mandatory')
portVoiceOperAutoPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVoiceOperAutoPoll.setStatus('mandatory')
portVoiceOperAutoPollTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVoiceOperAutoPollTimer.setStatus('mandatory')
portVoiceOperExtDigitsSource = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("map", 1), ("user", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVoiceOperExtDigitsSource.setStatus('mandatory')
portVoiceOperNumDigitsDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVoiceOperNumDigitsDelete.setStatus('mandatory')
portVoiceOperForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVoiceOperForwardDelay.setStatus('mandatory')
portVoiceOperForwardedType = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dtmf", 1), ("pulse", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVoiceOperForwardedType.setStatus('mandatory')
portVoiceOperForwardedDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("all", 2), ("extended", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVoiceOperForwardedDigits.setStatus('mandatory')
portVoiceOperMakeRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVoiceOperMakeRatio.setStatus('mandatory')
portVoiceOperBreakRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 2, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVoiceOperBreakRatio.setStatus('mandatory')
portVoiceOperDTMFOnDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 2, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVoiceOperDTMFOnDuration.setStatus('mandatory')
portVoiceOperDTMFOffDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 2, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVoiceOperDTMFOffDuration.setStatus('mandatory')
portVoiceOperToneType = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 3, 8, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dtmf", 1), ("mf", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portVoiceOperToneType.setStatus('mandatory')
nlInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 173, 7, 4))
nlIfTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 4, 1), )
if mibBuilder.loadTexts: nlIfTable.setStatus('mandatory')
nlIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 4, 1, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "nlIfRlp"), (0, "NETLINK-SPECIFIC-MIB", "nlIfPort"))
if mibBuilder.loadTexts: nlIfEntry.setStatus('mandatory')
nlIfRlp = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlIfRlp.setStatus('mandatory')
nlIfPort = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlIfPort.setStatus('mandatory')
nlIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 200, 201, 202, 203, 204, 205, 206, 207, 208))).clone(namedValues=NamedValues(("other", 1), ("regular1822", 2), ("hdh1822", 3), ("ddnX25", 4), ("rfc877x25", 5), ("ethernetCsmacd", 6), ("iso88023Csmacd", 7), ("iso88024TokenBus", 8), ("iso88025TokenRing", 9), ("iso88026Man", 10), ("starLan", 11), ("proteon10Mbit", 12), ("proteon80Mbit", 13), ("hyperchannel", 14), ("fddi", 15), ("lapb", 16), ("sdlc", 17), ("ds1", 18), ("e1", 19), ("basicISDN", 20), ("primaryISDN", 21), ("propPointToPointSerial", 22), ("ppp", 23), ("softwareLoopback", 24), ("eon", 25), ("ethernet3Mbit", 26), ("nsip", 27), ("slip", 28), ("ultra", 29), ("ds3", 30), ("sip", 31), ("frameRelay", 32), ("rs232", 33), ("para", 34), ("arcnet", 35), ("arcnetPlus", 36), ("atm", 37), ("miox25", 38), ("sonet", 39), ("x25ple", 40), ("iso88022llc", 41), ("localTalk", 42), ("smdsDxi", 43), ("frameRelayService", 44), ("v35", 45), ("hssi", 46), ("hippi", 47), ("modem", 48), ("aal5", 49), ("sonetPath", 50), ("sonetVT", 51), ("smdsIcip", 52), ("propVirtual", 53), ("propMultiplexor", 54), ("trunk", 200), ("async", 201), ("bsci", 202), ("logicalPort", 203), ("t1", 204), ("ip", 205), ("ipx", 206), ("llc2", 207), ("voice", 208)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlIfType.setStatus('mandatory')
nlIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlIfIndex.setStatus('mandatory')
nlIfTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlIfTableIndex.setStatus('mandatory')
nlIfTableOid = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 1, 1, 6), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlIfTableOid.setStatus('mandatory')
nlIfConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13))).clone(namedValues=NamedValues(("none", 2), ("rs232", 3), ("v25bis-dial", 4), ("v35", 5), ("rs449", 6), ("rs530", 7), ("x21", 8), ("csudsu", 9), ("t1", 10), ("e1", 11), ("voice", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlIfConnectorType.setStatus('mandatory')
nlIfPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))).clone(namedValues=NamedValues(("linkUp", 1), ("restarting", 2), ("operational", 3), ("disabled", 4), ("disconnect", 5), ("configured", 6), ("dialReady", 7), ("quiesced", 8), ("failed", 9), ("hardwareFault", 10), ("other", 11), ("ipl", 12), ("na", 13), ("remoteLoopback", 14), ("blueAlarm", 15), ("yellowAlarm", 16), ("redAlarm", 17), ("onHook", 18), ("offHook", 19), ("dialing", 20), ("activeVoiceCall", 21), ("onHookPending", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlIfPortStatus.setStatus('mandatory')
nlIfPhyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlIfPhyPort.setStatus('mandatory')
nlIfLlc2Interfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 173, 7, 4, 2))
nlIfLlc2LANTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 4, 2, 1), )
if mibBuilder.loadTexts: nlIfLlc2LANTable.setStatus('mandatory')
nlIfLlc2LANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 4, 2, 1, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "nlIfLlc2LANRlp"), (0, "NETLINK-SPECIFIC-MIB", "nlIfLlc2LANPort"))
if mibBuilder.loadTexts: nlIfLlc2LANEntry.setStatus('mandatory')
nlIfLlc2LANRlp = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlIfLlc2LANRlp.setStatus('mandatory')
nlIfLlc2LANPort = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlIfLlc2LANPort.setStatus('mandatory')
nlIfLlc2LANType = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethernet", 1), ("token-ring", 2))).clone('ethernet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfLlc2LANType.setStatus('mandatory')
nlIfLlc2LANCard = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlIfLlc2LANCard.setStatus('mandatory')
nlIfLlc2LANID = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(4095)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfLlc2LANID.setStatus('mandatory')
nlIfLlc2LANInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlIfLlc2LANInterface.setStatus('mandatory')
nlIfLlc2LANRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 2, 1, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfLlc2LANRowStatus.setStatus('mandatory')
nlIfLlc2LANPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfLlc2LANPriority.setStatus('mandatory')
nlIfLlc2LANBlockedPortFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfLlc2LANBlockedPortFlag.setStatus('mandatory')
nlIfLlc2FrTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 4, 2, 2), )
if mibBuilder.loadTexts: nlIfLlc2FrTable.setStatus('mandatory')
nlIfLlc2FrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 4, 2, 2, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "nlIfLlc2FrRlp"), (0, "NETLINK-SPECIFIC-MIB", "nlIfLlc2FrPort"), (0, "NETLINK-SPECIFIC-MIB", "nlIfLlc2FrDLCI"), (0, "NETLINK-SPECIFIC-MIB", "nlIfLlc2FrFormat"))
if mibBuilder.loadTexts: nlIfLlc2FrEntry.setStatus('mandatory')
nlIfLlc2FrRlp = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlIfLlc2FrRlp.setStatus('mandatory')
nlIfLlc2FrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlIfLlc2FrPort.setStatus('mandatory')
nlIfLlc2FrDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlIfLlc2FrDLCI.setStatus('mandatory')
nlIfLlc2FrFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("native-llc2", 1), ("tb-8023", 2), ("srb-8025", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlIfLlc2FrFormat.setStatus('mandatory')
nlIfLlc2FrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfLlc2FrPriority.setStatus('mandatory')
nlIfLlc2FrBAG = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfLlc2FrBAG.setStatus('mandatory')
nlIfLlc2FrHostMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 2, 2, 1, 7), MacAddress().clone(hexValue="400000000001")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfLlc2FrHostMACAddress.setStatus('mandatory')
nlIfLlc2FrSessionType = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("terminated", 1), ("originated", 2), ("not-applicable", 3))).clone('originated')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfLlc2FrSessionType.setStatus('mandatory')
nlIfLlc2FrLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(4095)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfLlc2FrLANID.setStatus('mandatory')
nlIfLlc2FrInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlIfLlc2FrInterface.setStatus('mandatory')
nlIfLlc2FrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 2, 2, 1, 11), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfLlc2FrRowStatus.setStatus('mandatory')
nlIfLlc2FrBlockedPortFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfLlc2FrBlockedPortFlag.setStatus('mandatory')
ipxConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 173, 7, 4, 3))
ipxConfigRouting = MibIdentifier((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 1))
ipxStaticRouteConfigTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 1, 1), )
if mibBuilder.loadTexts: ipxStaticRouteConfigTable.setStatus('mandatory')
ipxStaticRouteConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 1, 1, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "ipxStaticRouteConfigCircIndex"), (0, "NETLINK-SPECIFIC-MIB", "ipxStaticRouteConfigNetNum"))
if mibBuilder.loadTexts: ipxStaticRouteConfigEntry.setStatus('mandatory')
ipxStaticRouteConfigCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxStaticRouteConfigCircIndex.setStatus('mandatory')
ipxStaticRouteConfigNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxStaticRouteConfigNetNum.setStatus('mandatory')
ipxStaticRouteConfigRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxStaticRouteConfigRouter.setStatus('mandatory')
ipxStaticRouteConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 1, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxStaticRouteConfigRowStatus.setStatus('mandatory')
ipxServConfigTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 1, 2), )
if mibBuilder.loadTexts: ipxServConfigTable.setStatus('mandatory')
ipxServConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 1, 2, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "ipxServConfigServiceType"), (0, "NETLINK-SPECIFIC-MIB", "ipxServConfigServName"))
if mibBuilder.loadTexts: ipxServConfigEntry.setStatus('mandatory')
ipxServConfigServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxServConfigServiceType.setStatus('mandatory')
ipxServConfigServName = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxServConfigServName.setStatus('mandatory')
ipxServConfigServNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 1, 2, 1, 3), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxServConfigServNetworkAddress.setStatus('mandatory')
ipxServConfigServNodeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 1, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxServConfigServNodeAddress.setStatus('mandatory')
ipxServConfigServSocketNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxServConfigServSocketNumber.setStatus('mandatory')
ipxServConfigInterveningNetworks = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxServConfigInterveningNetworks.setStatus('mandatory')
ipxServConfigGatewayAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 1, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxServConfigGatewayAddress.setStatus('mandatory')
ipxServConfigInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxServConfigInterface.setStatus('mandatory')
ipxServConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 1, 2, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxServConfigRowStatus.setStatus('mandatory')
ipxConfigInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 2))
ipxInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 2, 6), )
if mibBuilder.loadTexts: ipxInterfaceTable.setStatus('mandatory')
ipxInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 2, 6, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "ipxInterfaceNumber"))
if mibBuilder.loadTexts: ipxInterfaceEntry.setStatus('mandatory')
ipxInterfaceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxInterfaceNumber.setStatus('mandatory')
ipxInterfaceBlockedPortFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxInterfaceBlockedPortFlag.setStatus('mandatory')
ipxInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ethernet", 1), ("eight025", 2), ("x25", 3), ("frl", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxInterfaceType.setStatus('mandatory')
ipxInterfaceFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("typeII", 1), ("raw", 2), ("llc", 3), ("snap", 4))).clone('typeII')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxInterfaceFrameType.setStatus('mandatory')
ipxInterfaceMaxTransUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 2, 6, 1, 5), Integer32().clone(4096)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxInterfaceMaxTransUnit.setStatus('mandatory')
ipxInterfaceNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 2, 6, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxInterfaceNetworkAddress.setStatus('mandatory')
ipxInterfaceBandwidthAllocGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxInterfaceBandwidthAllocGroup.setStatus('mandatory')
ipxInterfacePortDiagEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 2, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxInterfacePortDiagEnabled.setStatus('mandatory')
ipxInterfaceNetBIOSEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 2, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxInterfaceNetBIOSEnabled.setStatus('mandatory')
ipxInterfaceNetBIOSHops = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 2, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxInterfaceNetBIOSHops.setStatus('mandatory')
ipxInterfacePeriodicRIPEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 2, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxInterfacePeriodicRIPEnabled.setStatus('mandatory')
ipxInterfacePeriodicRIPTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 2, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxInterfacePeriodicRIPTimer.setStatus('mandatory')
ipxInterfacePeriodicSAPEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 2, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxInterfacePeriodicSAPEnabled.setStatus('mandatory')
ipxInterfacePeriodicSAPTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 2, 6, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxInterfacePeriodicSAPTimer.setStatus('mandatory')
ipxInterfaceRIPEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 2, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxInterfaceRIPEnabled.setStatus('mandatory')
ipxInterfaceRIPAgeTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 2, 6, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxInterfaceRIPAgeTimer.setStatus('mandatory')
ipxInterfaceRIPMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 2, 6, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(54, 446)).clone(446)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxInterfaceRIPMaxSize.setStatus('mandatory')
ipxInterfaceSAPEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 2, 6, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxInterfaceSAPEnabled.setStatus('mandatory')
ipxInterfaceSAPAgeTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 2, 6, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxInterfaceSAPAgeTimer.setStatus('mandatory')
ipxInterfaceTransportTime = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 2, 6, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxInterfaceTransportTime.setStatus('mandatory')
ipxInterfaceSerializationEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 2, 6, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxInterfaceSerializationEnabled.setStatus('mandatory')
ipxInterfaceWatchdogSpoofingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 2, 6, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxInterfaceWatchdogSpoofingEnabled.setStatus('mandatory')
ipxInterfaceLanCardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 2, 6, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxInterfaceLanCardNumber.setStatus('mandatory')
ipxInterfaceWanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 2, 6, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 3))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxInterfaceWanEnabled.setStatus('mandatory')
ipxInterfaceSourceSubscriber = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 2, 6, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxInterfaceSourceSubscriber.setStatus('mandatory')
ipxInterfaceDestinationSubscriber = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 2, 6, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxInterfaceDestinationSubscriber.setStatus('mandatory')
ipxInterfaceSVCRetryTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 2, 6, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxInterfaceSVCRetryTimer.setStatus('mandatory')
ipxInterfaceSVCIdleTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 2, 6, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxInterfaceSVCIdleTimer.setStatus('mandatory')
ipxInterfaceMaxVC = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 2, 6, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxInterfaceMaxVC.setStatus('mandatory')
ipxInterfacePVCConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 2, 6, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("not-applicable", 3))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxInterfacePVCConnection.setStatus('mandatory')
ipxInterfaceSourceCard = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 2, 6, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxInterfaceSourceCard.setStatus('mandatory')
ipxInterfaceSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 2, 6, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxInterfaceSourcePort.setStatus('mandatory')
ipxInterfaceSourceDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 2, 6, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxInterfaceSourceDLCI.setStatus('mandatory')
ipxInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 2, 6, 1, 34), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxInterfaceRowStatus.setStatus('mandatory')
ipxConfigNodeDefault = MibIdentifier((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 3))
ipxNodeDefaultConfigNetworkAddress = MibScalar((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxNodeDefaultConfigNetworkAddress.setStatus('mandatory')
ipxNodeDefaultConfigRIPSAPGap = MibScalar((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxNodeDefaultConfigRIPSAPGap.setStatus('mandatory')
ipxNodeDefaultConfigRouterName = MibScalar((1, 3, 6, 1, 4, 1, 173, 7, 4, 3, 3, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxNodeDefaultConfigRouterName.setStatus('mandatory')
nlIfIpInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 173, 7, 4, 4))
nlIfIpTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 4, 4, 1), )
if mibBuilder.loadTexts: nlIfIpTable.setStatus('mandatory')
nlIfIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 4, 4, 1, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "nlIfIpInterface"))
if mibBuilder.loadTexts: nlIfIpEntry.setStatus('mandatory')
nlIfIpInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 257))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlIfIpInterface.setStatus('mandatory')
nlIfIpMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)).clone(4096)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfIpMtu.setStatus('mandatory')
nlIfIpNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 4, 1, 1, 3), IpAddress().clone(hexValue="FF000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfIpNetworkMask.setStatus('mandatory')
nlIfIpRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfIpRouteMetric.setStatus('mandatory')
nlIfIpICMPAddRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfIpICMPAddRoutes.setStatus('mandatory')
nlIfIpRIPDeltaUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfIpRIPDeltaUpdates.setStatus('mandatory')
nlIfIpRIPFullUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfIpRIPFullUpdates.setStatus('mandatory')
nlIfIpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfIpPriority.setStatus('mandatory')
nlIfIpBAG = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfIpBAG.setStatus('mandatory')
nlIfIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 6, 7, 9, 32, 53))).clone(namedValues=NamedValues(("other", 1), ("rfc877x25", 5), ("ethernetCsmacd", 6), ("iso88023Csmacd", 7), ("iso88025TokenRing", 9), ("frameRelay", 32), ("propVirtual", 53))).clone('rfc877x25')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfIpType.setStatus('mandatory')
nlIfIpSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 4, 1, 1, 11), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfIpSourceAddress.setStatus('mandatory')
nlIfIpDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 4, 1, 1, 12), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfIpDestAddress.setStatus('mandatory')
nlIfIpBroadcastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 4, 1, 1, 13), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfIpBroadcastAddress.setStatus('mandatory')
nlIfIpLANCard = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfIpLANCard.setStatus('mandatory')
nlIfIpSourceSub = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 4, 1, 1, 15), NlSubscriberAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfIpSourceSub.setStatus('mandatory')
nlIfIpDestSub = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 4, 1, 1, 16), NlSubscriberAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfIpDestSub.setStatus('mandatory')
nlIfIpSVCRetryTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfIpSVCRetryTimer.setStatus('mandatory')
nlIfIpSVCIdleTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 4, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfIpSVCIdleTimer.setStatus('mandatory')
nlIfIpMaxSVC = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 4, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfIpMaxSVC.setStatus('mandatory')
nlIfIpPVCConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 4, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfIpPVCConnection.setStatus('mandatory')
nlIfIpSourceRlp = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 4, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfIpSourceRlp.setStatus('mandatory')
nlIfIpSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 4, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfIpSourcePort.setStatus('mandatory')
nlIfIpSourceDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 4, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfIpSourceDLCI.setStatus('mandatory')
nlIfIpRIPSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 4, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("receive-only", 3))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfIpRIPSupport.setStatus('mandatory')
nlIfIpInverseARP = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 4, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfIpInverseARP.setStatus('mandatory')
nlIfIpProxyARP = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 4, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfIpProxyARP.setStatus('mandatory')
nlIfIpUnnumberedIf = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 4, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfIpUnnumberedIf.setStatus('mandatory')
nlIfIpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 4, 1, 1, 28), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfIpRowStatus.setStatus('mandatory')
nlIfIpSecondaryAddrTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 4, 4, 2), )
if mibBuilder.loadTexts: nlIfIpSecondaryAddrTable.setStatus('mandatory')
nlIfIpSecondaryAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 4, 4, 2, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "nlIfIpInterface"), (0, "NETLINK-SPECIFIC-MIB", "nlIfIpSecondaryAddrSequence"))
if mibBuilder.loadTexts: nlIfIpSecondaryAddrEntry.setStatus('mandatory')
nlIfIpSecondaryAddrSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfIpSecondaryAddrSequence.setStatus('mandatory')
nlIfIpSecondaryAddrNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 4, 2, 1, 2), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfIpSecondaryAddrNetworkMask.setStatus('mandatory')
nlIfIpSecondaryAddrRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfIpSecondaryAddrRouteMetric.setStatus('mandatory')
nlIfIpSecondaryAddrSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 4, 2, 1, 4), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfIpSecondaryAddrSourceAddress.setStatus('mandatory')
nlIfIpSecondaryAddrBroadcastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 4, 2, 1, 5), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfIpSecondaryAddrBroadcastAddress.setStatus('mandatory')
nlIfIpSecondaryAddrRIPSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("receive-only", 3))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfIpSecondaryAddrRIPSupport.setStatus('mandatory')
nlIfIpSecondaryAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 4, 2, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfIpSecondaryAddrRowStatus.setStatus('mandatory')
nlIfVoiceInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 173, 7, 4, 5))
nlIfVoiceTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 4, 5, 1), )
if mibBuilder.loadTexts: nlIfVoiceTable.setStatus('mandatory')
nlIfVoiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 4, 5, 1, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "nlIfVoiceInterface"))
if mibBuilder.loadTexts: nlIfVoiceEntry.setStatus('mandatory')
nlIfVoiceInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 129))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlIfVoiceInterface.setStatus('mandatory')
nlIfVoicePeerNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("netlink", 1), ("act", 2))).clone('act')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfVoicePeerNodeType.setStatus('mandatory')
nlIfVoicePeerNodeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 61)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfVoicePeerNodeNumber.setStatus('mandatory')
nlIfVoicePeerNodePort = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 17)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfVoicePeerNodePort.setStatus('mandatory')
nlIfVoiceLocalNodeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 61)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfVoiceLocalNodeNumber.setStatus('mandatory')
nlIfVoiceLocalNodePort = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 17)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfVoiceLocalNodePort.setStatus('mandatory')
nlIfVoiceFrameRelayRlp = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfVoiceFrameRelayRlp.setStatus('mandatory')
nlIfVoiceFrameRelayPort = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfVoiceFrameRelayPort.setStatus('mandatory')
nlIfVoiceFrameRelayDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfVoiceFrameRelayDLCI.setStatus('mandatory')
nlIfVoiceEnableFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfVoiceEnableFragment.setStatus('mandatory')
nlIfVoiceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 4, 5, 1, 1, 11), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIfVoiceRowStatus.setStatus('mandatory')
subscriber = MibIdentifier((1, 3, 6, 1, 4, 1, 173, 7, 5))
nlLocalSubscriberTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 5, 1), )
if mibBuilder.loadTexts: nlLocalSubscriberTable.setStatus('mandatory')
nlLocalSubscriberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 5, 1, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "nlLocalSubscriberId"))
if mibBuilder.loadTexts: nlLocalSubscriberEntry.setStatus('mandatory')
nlLocalSubscriberId = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 5, 1, 1, 1), NlSubscriberAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlLocalSubscriberId.setStatus('mandatory')
nlLocalSubscriberName = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlLocalSubscriberName.setStatus('mandatory')
nlLocalSubscriberAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("round-robin", 1), ("line-failed", 2), ("line-busy", 3), ("least-lcn", 4))).clone('round-robin')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlLocalSubscriberAlgorithm.setStatus('mandatory')
nlLocalSubscriberSystematicRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlLocalSubscriberSystematicRedirect.setStatus('mandatory')
nlLocalSubscriberRedirectBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlLocalSubscriberRedirectBusy.setStatus('mandatory')
nlLocalSubscriberRedirectOO = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlLocalSubscriberRedirectOO.setStatus('mandatory')
nlLocalSubscriberPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlLocalSubscriberPriority.setStatus('mandatory')
nlLocalSubscriberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 5, 1, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlLocalSubscriberRowStatus.setStatus('mandatory')
nlLocalSubscriberRouteTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 5, 2), )
if mibBuilder.loadTexts: nlLocalSubscriberRouteTable.setStatus('mandatory')
nlLocalSubscriberRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 5, 2, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "nlLocalSubscriberId"), (0, "NETLINK-SPECIFIC-MIB", "nlLocalSubscriberRouteIndex"))
if mibBuilder.loadTexts: nlLocalSubscriberRouteEntry.setStatus('mandatory')
nlLocalSubscriberRouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlLocalSubscriberRouteIndex.setStatus('mandatory')
nlLocalSubscriberRouteConf = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlLocalSubscriberRouteConf.setStatus('mandatory')
nlLocalSubscriberRouteLP = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 5, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlLocalSubscriberRouteLP.setStatus('mandatory')
nlLocalSubscriberRoutePort = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 5, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlLocalSubscriberRoutePort.setStatus('mandatory')
nlLocalSubscriberRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 5, 2, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlLocalSubscriberRouteRowStatus.setStatus('mandatory')
nlLocalSubscriberRedirTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 5, 3), )
if mibBuilder.loadTexts: nlLocalSubscriberRedirTable.setStatus('mandatory')
nlLocalSubscriberRedirEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 5, 3, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "nlLocalSubscriberId"), (0, "NETLINK-SPECIFIC-MIB", "nlLocalSubscriberRedirIndex"))
if mibBuilder.loadTexts: nlLocalSubscriberRedirEntry.setStatus('mandatory')
nlLocalSubscriberRedirIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlLocalSubscriberRedirIndex.setStatus('mandatory')
nlLocalSubscriberRedirAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 5, 3, 1, 2), NlSubscriberAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlLocalSubscriberRedirAddr.setStatus('mandatory')
nlLocalSubscriberRedirRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 5, 3, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlLocalSubscriberRedirRowStatus.setStatus('mandatory')
llc2 = MibIdentifier((1, 3, 6, 1, 4, 1, 173, 7, 6))
nlLlc2HostTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 6, 1), )
if mibBuilder.loadTexts: nlLlc2HostTable.setStatus('mandatory')
nlLlc2HostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 6, 1, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "nlLlc2HostGroup"), (0, "NETLINK-SPECIFIC-MIB", "nlLlc2HostIndex"))
if mibBuilder.loadTexts: nlLlc2HostEntry.setStatus('mandatory')
nlLlc2HostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 251))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlLlc2HostIndex.setStatus('mandatory')
nlLlc2HostMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 6, 1, 1, 2), MacAddress().clone(hexValue="400000000001")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlLlc2HostMACAddress.setStatus('mandatory')
nlLlc2HostSessionType = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("originated", 1), ("terminated", 2))).clone('terminated')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlLlc2HostSessionType.setStatus('mandatory')
nlLlc2HostT1ReplyTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 6, 1, 1, 4), TimeInterval().subtype(subtypeSpec=ValueRangeConstraint(1, 250)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlLlc2HostT1ReplyTimer.setStatus('mandatory')
nlLlc2HostT2RecvAckTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 6, 1, 1, 5), TimeInterval().subtype(subtypeSpec=ValueRangeConstraint(100, 5000)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlLlc2HostT2RecvAckTimer.setStatus('mandatory')
nlLlc2HostTiInactivityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 6, 1, 1, 6), TimeInterval().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlLlc2HostTiInactivityTimer.setStatus('mandatory')
nlLlc2HostN3NumberLPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlLlc2HostN3NumberLPDUs.setStatus('mandatory')
nlLlc2HostTwNumberOutstanding = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlLlc2HostTwNumberOutstanding.setStatus('mandatory')
nlLlc2HostN2ExpiredT1LPDUCount = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlLlc2HostN2ExpiredT1LPDUCount.setStatus('mandatory')
nlLlc2HostPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlLlc2HostPriority.setStatus('mandatory')
nlLlc2HostBAG = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlLlc2HostBAG.setStatus('mandatory')
nlLlc2HostRoutingSubscriberId = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 6, 1, 1, 12), NlSubscriberAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlLlc2HostRoutingSubscriberId.setStatus('mandatory')
nlLlc2HostSrcMACAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 6, 1, 1, 13), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlLlc2HostSrcMACAddressMask.setStatus('mandatory')
nlLlc2HostAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 6, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("lan", 1), ("frameRelay", 2), ("tokenRing", 3), ("ethernet", 4), ("all", 5), ("not-applicable", 6))).clone('not-applicable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlLlc2HostAccess.setStatus('mandatory')
nlLlc2HostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 6, 1, 1, 15), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlLlc2HostRowStatus.setStatus('mandatory')
nlLlc2HostInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 6, 1, 1, 16), Integer32().clone(300)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlLlc2HostInterface.setStatus('mandatory')
nlLlc2HostGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 6, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlLlc2HostGroup.setStatus('mandatory')
nlLlc2TermConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 6, 2), )
if mibBuilder.loadTexts: nlLlc2TermConnectionTable.setStatus('mandatory')
nlLlc2TermConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 6, 2, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "nlLlc2HostGroup"), (0, "NETLINK-SPECIFIC-MIB", "nlLlc2HostIndex"), (0, "NETLINK-SPECIFIC-MIB", "nlLlc2TermConnectionSequence"))
if mibBuilder.loadTexts: nlLlc2TermConnectionEntry.setStatus('mandatory')
nlLlc2TermConnectionSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlLlc2TermConnectionSequence.setStatus('mandatory')
nlLlc2TermConnectionHSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 254)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlLlc2TermConnectionHSAP.setStatus('mandatory')
nlLlc2TermConnectionLocalSubscriberId = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 6, 2, 1, 3), NlSubscriberAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlLlc2TermConnectionLocalSubscriberId.setStatus('mandatory')
nlLlc2TermConnectionRemoteSubscriberId = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 6, 2, 1, 4), NlSubscriberAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlLlc2TermConnectionRemoteSubscriberId.setStatus('mandatory')
nlLlc2TermConnectionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 6, 2, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlLlc2TermConnectionRowStatus.setStatus('mandatory')
nlLlc2OrigConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 6, 3), )
if mibBuilder.loadTexts: nlLlc2OrigConnectionTable.setStatus('mandatory')
nlLlc2OrigConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 6, 3, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "nlLlc2HostGroup"), (0, "NETLINK-SPECIFIC-MIB", "nlLlc2HostIndex"), (0, "NETLINK-SPECIFIC-MIB", "nlLlc2OrigConnectionSequence"))
if mibBuilder.loadTexts: nlLlc2OrigConnectionEntry.setStatus('mandatory')
nlLlc2OrigConnectionSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlLlc2OrigConnectionSequence.setStatus('mandatory')
nlLlc2OrigConnectionHSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 254)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlLlc2OrigConnectionHSAP.setStatus('mandatory')
nlLlc2OrigConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sdlc", 1), ("llc2", 2))).clone('llc2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlLlc2OrigConnectionType.setStatus('mandatory')
nlLlc2OrigConnectionLocalSubscriberId = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 6, 3, 1, 4), NlSubscriberAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlLlc2OrigConnectionLocalSubscriberId.setStatus('mandatory')
nlLlc2OrigConnectionRemoteSubscriberId = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 6, 3, 1, 5), NlSubscriberAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlLlc2OrigConnectionRemoteSubscriberId.setStatus('mandatory')
nlLlc2OrigConnectionIDBLK = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 6, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlLlc2OrigConnectionIDBLK.setStatus('mandatory')
nlLlc2OrigConnectionIDNUM = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 6, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlLlc2OrigConnectionIDNUM.setStatus('mandatory')
nlLlc2OrigConnectionMAXDATA = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 6, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlLlc2OrigConnectionMAXDATA.setStatus('mandatory')
nlLlc2OrigConnectionMAXIN = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 6, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlLlc2OrigConnectionMAXIN.setStatus('mandatory')
nlLlc2OrigConnectionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 6, 3, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlLlc2OrigConnectionRowStatus.setStatus('mandatory')
nlLlc2NextHostNumber = MibScalar((1, 3, 6, 1, 4, 1, 173, 7, 6, 4), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlLlc2NextHostNumber.setStatus('mandatory')
status = MibIdentifier((1, 3, 6, 1, 4, 1, 173, 7, 7))
pinStatusTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 7, 4), )
if mibBuilder.loadTexts: pinStatusTable.setStatus('mandatory')
portPinEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 7, 4, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "portPinRlp"), (0, "NETLINK-SPECIFIC-MIB", "portPinPort"))
if mibBuilder.loadTexts: portPinEntry.setStatus('mandatory')
portPinRlp = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 7, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPinRlp.setStatus('mandatory')
portPinPort = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 7, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPinPort.setStatus('mandatory')
portPinStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 7, 4, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPinStatus.setStatus('mandatory')
statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 173, 7, 8))
statGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 173, 7, 8, 1))
rlpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 2), )
if mibBuilder.loadTexts: rlpStatsTable.setStatus('mandatory')
rlpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 2, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "rlpStatsIndex"))
if mibBuilder.loadTexts: rlpStatsEntry.setStatus('mandatory')
rlpStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlpStatsIndex.setStatus('mandatory')
rlpStatsQMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlpStatsQMessages.setStatus('mandatory')
rlpStatsUsedBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlpStatsUsedBuffers.setStatus('mandatory')
rlpStatsInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlpStatsInFrames.setStatus('mandatory')
rlpStatsOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlpStatsOutFrames.setStatus('mandatory')
rlpStatsFrameRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlpStatsFrameRejects.setStatus('mandatory')
rlpStatsFrameRetransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlpStatsFrameRetransmits.setStatus('mandatory')
portStatsTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 3), )
if mibBuilder.loadTexts: portStatsTable.setStatus('mandatory')
portStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 3, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "portStatsRlpIndex"), (0, "NETLINK-SPECIFIC-MIB", "portStatsIndex"))
if mibBuilder.loadTexts: portStatsEntry.setStatus('mandatory')
portStatsRlpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsRlpIndex.setStatus('mandatory')
portStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsIndex.setStatus('mandatory')
portStatsInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsInFrames.setStatus('mandatory')
portStatsOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsOutFrames.setStatus('mandatory')
portStatsFrameRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsFrameRetrans.setStatus('mandatory')
portStatsFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsFCSErrors.setStatus('mandatory')
portStatsLogicalRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsLogicalRejects.setStatus('mandatory')
portStatsInPercentUtils = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsInPercentUtils.setStatus('mandatory')
portStatsOutPercentUtils = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsOutPercentUtils.setStatus('mandatory')
statFrame = MibIdentifier((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 4))
frStatsTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 4, 1), )
if mibBuilder.loadTexts: frStatsTable.setStatus('mandatory')
frStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 4, 1, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "frStatsRlpIndex"), (0, "NETLINK-SPECIFIC-MIB", "frStatsPortIndex"))
if mibBuilder.loadTexts: frStatsEntry.setStatus('mandatory')
frStatsRlpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frStatsRlpIndex.setStatus('mandatory')
frStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frStatsPortIndex.setStatus('mandatory')
frStatsTxDEFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frStatsTxDEFrames.setStatus('mandatory')
frStatsRxDEFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frStatsRxDEFrames.setStatus('mandatory')
frStatsTxFECNFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frStatsTxFECNFrames.setStatus('mandatory')
frStatsRxFECNFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frStatsRxFECNFrames.setStatus('mandatory')
frStatsTxBECNFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frStatsTxBECNFrames.setStatus('mandatory')
frStatsRxBECNFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frStatsRxBECNFrames.setStatus('mandatory')
frStatsTxLMIFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frStatsTxLMIFrames.setStatus('mandatory')
frStatsRxLMIFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frStatsRxLMIFrames.setStatus('mandatory')
frStatsTxANXDFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frStatsTxANXDFrames.setStatus('mandatory')
frStatsRxANXDFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frStatsRxANXDFrames.setStatus('mandatory')
frStatsTotDiscFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 4, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frStatsTotDiscFrames.setStatus('mandatory')
x25TxStatsTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 4, 2), )
if mibBuilder.loadTexts: x25TxStatsTable.setStatus('mandatory')
x25TxStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 4, 2, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "x25TxRlpIndex"), (0, "NETLINK-SPECIFIC-MIB", "x25TxPortIndex"))
if mibBuilder.loadTexts: x25TxStatsEntry.setStatus('mandatory')
x25TxRlpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25TxRlpIndex.setStatus('mandatory')
x25TxPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25TxPortIndex.setStatus('mandatory')
x25TxSABMFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25TxSABMFrames.setStatus('mandatory')
x25TxUAFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25TxUAFrames.setStatus('mandatory')
x25TxDISCFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25TxDISCFrames.setStatus('mandatory')
x25TxDMFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25TxDMFrames.setStatus('mandatory')
x25TxFRMRFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25TxFRMRFrames.setStatus('mandatory')
x25TxREJFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25TxREJFrames.setStatus('mandatory')
x25TxRRFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25TxRRFrames.setStatus('mandatory')
x25TxRNRFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25TxRNRFrames.setStatus('mandatory')
x25TxINFOFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25TxINFOFrames.setStatus('mandatory')
x25RxStatsTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 4, 3), )
if mibBuilder.loadTexts: x25RxStatsTable.setStatus('mandatory')
x25RxStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 4, 3, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "x25RxRlpIndex"), (0, "NETLINK-SPECIFIC-MIB", "x25RxPortIndex"))
if mibBuilder.loadTexts: x25RxStatsEntry.setStatus('mandatory')
x25RxRlpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25RxRlpIndex.setStatus('mandatory')
x25RxPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25RxPortIndex.setStatus('mandatory')
x25RxSABMFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 4, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25RxSABMFrames.setStatus('mandatory')
x25RxUAFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 4, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25RxUAFrames.setStatus('mandatory')
x25RxDISCFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 4, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25RxDISCFrames.setStatus('mandatory')
x25RxDMFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 4, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25RxDMFrames.setStatus('mandatory')
x25RxFRMRFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 4, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25RxFRMRFrames.setStatus('mandatory')
x25RxREJFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 4, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25RxREJFrames.setStatus('mandatory')
x25RxRRFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 4, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25RxRRFrames.setStatus('mandatory')
x25RxRNRFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 4, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25RxRNRFrames.setStatus('mandatory')
x25RxINFOFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 4, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25RxINFOFrames.setStatus('mandatory')
statBag = MibIdentifier((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 5))
statIp = MibIdentifier((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 6))
statT1 = MibIdentifier((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 7))
t1StatsTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 7, 1), )
if mibBuilder.loadTexts: t1StatsTable.setStatus('mandatory')
t1StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 7, 1, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "t1StatsRlpIndex"), (0, "NETLINK-SPECIFIC-MIB", "t1StatsPortIndex"))
if mibBuilder.loadTexts: t1StatsEntry.setStatus('mandatory')
t1StatsRlpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1StatsRlpIndex.setStatus('mandatory')
t1StatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1StatsPortIndex.setStatus('mandatory')
t1StatsRcvFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 7, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1StatsRcvFrames.setStatus('mandatory')
t1StatsXmitFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 7, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1StatsXmitFrames.setStatus('mandatory')
t1StatsLCVCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 7, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1StatsLCVCnt.setStatus('mandatory')
t1StatsPCVRErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 7, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1StatsPCVRErrs.setStatus('mandatory')
t1StatsOOSCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 7, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1StatsOOSCnt.setStatus('mandatory')
t1StatsBlueAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 7, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1StatsBlueAlarms.setStatus('mandatory')
t1StatsYellowAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 7, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1StatsYellowAlarms.setStatus('mandatory')
t1StatsRedAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 7, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1StatsRedAlarms.setStatus('mandatory')
t1StatsRcvUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 7, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1StatsRcvUsage.setStatus('mandatory')
t1StatsXmitUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 7, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1StatsXmitUsage.setStatus('mandatory')
t1StatsXmitAbortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 7, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1StatsXmitAbortFrames.setStatus('mandatory')
t1StatsRcvAbortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 7, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1StatsRcvAbortFrames.setStatus('mandatory')
t1StatsRcvOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 7, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1StatsRcvOverruns.setStatus('mandatory')
t1StatsRcvErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 7, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1StatsRcvErrors.setStatus('mandatory')
t1StatsRcvChannelErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 7, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t1StatsRcvChannelErrors.setStatus('mandatory')
statDS0A = MibIdentifier((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 8))
ds0aStatsTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 8, 1), )
if mibBuilder.loadTexts: ds0aStatsTable.setStatus('mandatory')
ds0aStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 8, 1, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "ds0aStatsRlpIndex"), (0, "NETLINK-SPECIFIC-MIB", "ds0aStatsPortIndex"), (0, "NETLINK-SPECIFIC-MIB", "ds0aStatsChannelIndex"))
if mibBuilder.loadTexts: ds0aStatsEntry.setStatus('mandatory')
ds0aStatsRlpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds0aStatsRlpIndex.setStatus('mandatory')
ds0aStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds0aStatsPortIndex.setStatus('mandatory')
ds0aStatsChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 8, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds0aStatsChannelIndex.setStatus('mandatory')
ds0aStatsXmitFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 8, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds0aStatsXmitFrames.setStatus('mandatory')
ds0aStatsRcvFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 8, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds0aStatsRcvFrames.setStatus('mandatory')
ds0aStatsRcvAbortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 8, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds0aStatsRcvAbortFrames.setStatus('mandatory')
ds0aStatsRcvOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 8, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds0aStatsRcvOverruns.setStatus('mandatory')
ds0aStatsRcvErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 8, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds0aStatsRcvErrors.setStatus('mandatory')
statVoice = MibIdentifier((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 9))
voiceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 9, 1), )
if mibBuilder.loadTexts: voiceStatsTable.setStatus('mandatory')
voiceStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 9, 1, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "voiceStatsRlpIndex"), (0, "NETLINK-SPECIFIC-MIB", "voiceStatsPortIndex"))
if mibBuilder.loadTexts: voiceStatsEntry.setStatus('mandatory')
voiceStatsRlpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceStatsRlpIndex.setStatus('mandatory')
voiceStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceStatsPortIndex.setStatus('mandatory')
voiceStatsRxCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 9, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceStatsRxCalls.setStatus('mandatory')
voiceStatsTxCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 9, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceStatsTxCalls.setStatus('mandatory')
voiceStatsRxCallsAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 9, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceStatsRxCallsAccepts.setStatus('mandatory')
voiceStatsTxCallsAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 9, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceStatsTxCallsAccepts.setStatus('mandatory')
voiceStatsRxClears = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 9, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceStatsRxClears.setStatus('mandatory')
voiceStatsTxClears = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 9, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceStatsTxClears.setStatus('mandatory')
voiceStatsBusyCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 9, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceStatsBusyCalls.setStatus('mandatory')
voiceStatsCallTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 9, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceStatsCallTimeouts.setStatus('mandatory')
voiceStatsRxCongestions = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 9, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceStatsRxCongestions.setStatus('mandatory')
voiceStatsTxCongestions = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 1, 9, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceStatsTxCongestions.setStatus('mandatory')
statThresh = MibIdentifier((1, 3, 6, 1, 4, 1, 173, 7, 8, 2))
rlpThreshTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 8, 2, 1), )
if mibBuilder.loadTexts: rlpThreshTable.setStatus('mandatory')
rlpThreshEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 8, 2, 1, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "rlpThreshRlpIndex"))
if mibBuilder.loadTexts: rlpThreshEntry.setStatus('mandatory')
rlpThreshRlpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlpThreshRlpIndex.setStatus('mandatory')
rlpThreshPercntBufInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlpThreshPercntBufInUse.setStatus('mandatory')
rlpThreshMsgQueueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlpThreshMsgQueueLen.setStatus('mandatory')
rlpThreshRxFramesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlpThreshRxFramesPerSec.setStatus('mandatory')
rlpThreshTxFramesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlpThreshTxFramesPerSec.setStatus('mandatory')
rlpThreshRejFramesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlpThreshRejFramesPerSec.setStatus('mandatory')
rlpThreshRtxFramesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlpThreshRtxFramesPerSec.setStatus('mandatory')
portThreshTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 8, 2, 2), )
if mibBuilder.loadTexts: portThreshTable.setStatus('mandatory')
portThreshEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 8, 2, 2, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "portThreshRlpIndex"), (0, "NETLINK-SPECIFIC-MIB", "portThreshIndex"))
if mibBuilder.loadTexts: portThreshEntry.setStatus('mandatory')
portThreshRlpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portThreshRlpIndex.setStatus('mandatory')
portThreshIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portThreshIndex.setStatus('mandatory')
portThreshRxFramesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portThreshRxFramesPerSec.setStatus('mandatory')
portThreshTxFramesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portThreshTxFramesPerSec.setStatus('mandatory')
portThreshRtxFramesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portThreshRtxFramesPerSec.setStatus('mandatory')
portThreshFCSErrPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portThreshFCSErrPerSec.setStatus('mandatory')
portThreshLogRejPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portThreshLogRejPerSec.setStatus('mandatory')
portThreshTxErrorRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portThreshTxErrorRatio.setStatus('mandatory')
portThreshRxErrorRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portThreshRxErrorRatio.setStatus('mandatory')
portThreshTxPercentUtl = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portThreshTxPercentUtl.setStatus('mandatory')
portThreshRxPercentUtl = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 8, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portThreshRxPercentUtl.setStatus('mandatory')
bridge = MibIdentifier((1, 3, 6, 1, 4, 1, 173, 7, 9))
bridgeAdminVirtualLANID = MibScalar((1, 3, 6, 1, 4, 1, 173, 7, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeAdminVirtualLANID.setStatus('mandatory')
bridgeOperVirtualLANID = MibScalar((1, 3, 6, 1, 4, 1, 173, 7, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeOperVirtualLANID.setStatus('mandatory')
bridgeEnabled = MibScalar((1, 3, 6, 1, 4, 1, 173, 7, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeEnabled.setStatus('mandatory')
bridgeMaxSizeForwardingTable = MibScalar((1, 3, 6, 1, 4, 1, 173, 7, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 65535)).clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeMaxSizeForwardingTable.setStatus('mandatory')
bridgeIPEnabled = MibScalar((1, 3, 6, 1, 4, 1, 173, 7, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeIPEnabled.setStatus('mandatory')
bridgeIPXEnabled = MibScalar((1, 3, 6, 1, 4, 1, 173, 7, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeIPXEnabled.setStatus('mandatory')
bridgeAdminSRBID = MibScalar((1, 3, 6, 1, 4, 1, 173, 7, 9, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeAdminSRBID.setStatus('mandatory')
bridgeOperSRBID = MibScalar((1, 3, 6, 1, 4, 1, 173, 7, 9, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeOperSRBID.setStatus('mandatory')
bridgeDefaultEthernetFrameType = MibScalar((1, 3, 6, 1, 4, 1, 173, 7, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("type-II", 1), ("ieee8023", 2))).clone('type-II')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeDefaultEthernetFrameType.setStatus('mandatory')
ipNl = MibIdentifier((1, 3, 6, 1, 4, 1, 173, 7, 11))
nlIpDefaultRIPVersion = MibScalar((1, 3, 6, 1, 4, 1, 173, 7, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ripVersion1", 1), ("rip1Compatible", 2), ("ripVersion2", 3))).clone('ripVersion1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlIpDefaultRIPVersion.setStatus('mandatory')
voice = MibIdentifier((1, 3, 6, 1, 4, 1, 173, 7, 12))
voiceSystemVoiceNodeNum = MibScalar((1, 3, 6, 1, 4, 1, 173, 7, 12, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceSystemVoiceNodeNum.setStatus('mandatory')
voiceSystemRingVolFreq = MibScalar((1, 3, 6, 1, 4, 1, 173, 7, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v75-hz-16-66", 1), ("v80-hz-20-00", 2), ("v75-hz-25-00", 3), ("v60-hz-50-00", 4), ("v75-hz-50-00", 5))).clone('v80-hz-20-00')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceSystemRingVolFreq.setStatus('mandatory')
voiceSystemCountryCode = MibScalar((1, 3, 6, 1, 4, 1, 173, 7, 12, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceSystemCountryCode.setStatus('mandatory')
voiceSystemDialDigits = MibScalar((1, 3, 6, 1, 4, 1, 173, 7, 12, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceSystemDialDigits.setStatus('mandatory')
voiceSystemVoiceRatesMin = MibScalar((1, 3, 6, 1, 4, 1, 173, 7, 12, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bps-4800", 1), ("bps-8000", 2), ("bps-32000", 3), ("bps-64000", 4))).clone('bps-4800')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceSystemVoiceRatesMin.setStatus('mandatory')
voiceSystemVoiceRatesMax = MibScalar((1, 3, 6, 1, 4, 1, 173, 7, 12, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bps-4800", 1), ("bps-8000", 2), ("bps-32000", 3), ("bps-64000", 4))).clone('bps-64000')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceSystemVoiceRatesMax.setStatus('mandatory')
voiceSystemExtDialDigits = MibScalar((1, 3, 6, 1, 4, 1, 173, 7, 12, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceSystemExtDialDigits.setStatus('mandatory')
voiceSpeedDialTable = MibTable((1, 3, 6, 1, 4, 1, 173, 7, 12, 8), )
if mibBuilder.loadTexts: voiceSpeedDialTable.setStatus('mandatory')
voiceSpeedDialEntry = MibTableRow((1, 3, 6, 1, 4, 1, 173, 7, 12, 8, 1), ).setIndexNames((0, "NETLINK-SPECIFIC-MIB", "voiceSpeedDialDigits"))
if mibBuilder.loadTexts: voiceSpeedDialEntry.setStatus('mandatory')
voiceSpeedDialDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 12, 8, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceSpeedDialDigits.setStatus('mandatory')
voiceSpeedDialLongDialMap = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 12, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceSpeedDialLongDialMap.setStatus('mandatory')
voiceSpeedDialExtDialStr = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 12, 8, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceSpeedDialExtDialStr.setStatus('mandatory')
voiceSpeedDialRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 173, 7, 12, 8, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceSpeedDialRowStatus.setStatus('mandatory')
mibBuilder.exportSymbols("NETLINK-SPECIFIC-MIB", portVoiceOperAutoDialNumber=portVoiceOperAutoDialNumber, ipxServConfigGatewayAddress=ipxServConfigGatewayAddress, nlLlc2OrigConnectionSequence=nlLlc2OrigConnectionSequence, frStatsPortIndex=frStatsPortIndex, portBsciOperMAXRetransmits=portBsciOperMAXRetransmits, portVoiceOperTelephonyType=portVoiceOperTelephonyType, portThreshTxErrorRatio=portThreshTxErrorRatio, portSdlcOperSpeed=portSdlcOperSpeed, ipxInterfaceRIPAgeTimer=ipxInterfaceRIPAgeTimer, portX25AdminFlowCtrlNeg=portX25AdminFlowCtrlNeg, ds0aStatsRcvAbortFrames=ds0aStatsRcvAbortFrames, frStatsRxDEFrames=frStatsRxDEFrames, rlpLIC2Type=rlpLIC2Type, ipxInterfacePeriodicRIPTimer=ipxInterfacePeriodicRIPTimer, bsciDevAdminSingleUserVC=bsciDevAdminSingleUserVC, ipxInterfacePeriodicRIPEnabled=ipxInterfacePeriodicRIPEnabled, portBsciOperSpeed=portBsciOperSpeed, snaDLC=snaDLC, portLogicalX25AdminTable=portLogicalX25AdminTable, lSSdlcOperAutoCall=lSSdlcOperAutoCall, voiceStatsEntry=voiceStatsEntry, nlIfIpBAG=nlIfIpBAG, frStatsTxANXDFrames=frStatsTxANXDFrames, status=status, nsNTNeigh=nsNTNeigh, bsciDevAdminDeviceUnitID=bsciDevAdminDeviceUnitID, lSSdlcLlc2AdminLocalMac=lSSdlcLlc2AdminLocalMac, portBsciOperMaxBytesPerFrame=portBsciOperMaxBytesPerFrame, nlIfIpRIPSupport=nlIfIpRIPSupport, voiceStatsBusyCalls=voiceStatsBusyCalls, portX25AdminBlockedFlag=portX25AdminBlockedFlag, x25RxPortIndex=x25RxPortIndex, portX25Group=portX25Group, nsNeighEntry=nsNeighEntry, portLogicalX25AdminEntry=portLogicalX25AdminEntry, portFrT392Timer=portFrT392Timer, portDLCIPriority=portDLCIPriority, portVoiceAdminAutoDialNumber=portVoiceAdminAutoDialNumber, portX25OperEntry=portX25OperEntry, portVoiceOperSampleDelay=portVoiceOperSampleDelay, portThreshRxFramesPerSec=portThreshRxFramesPerSec, voiceStatsRxCallsAccepts=voiceStatsRxCallsAccepts, portBsciOperNAKRetryCount=portBsciOperNAKRetryCount, portBsciOperStartSynchChars=portBsciOperStartSynchChars, portSdlcAdminRcvClockFromDTE=portSdlcAdminRcvClockFromDTE, nlLocalSubscriberName=nlLocalSubscriberName, lSSdlcOperL2DatMode=lSSdlcOperL2DatMode, rlpThreshRtxFramesPerSec=rlpThreshRtxFramesPerSec, portFrBackupDLCI=portFrBackupDLCI, bsciSubscrAdminAutocall=bsciSubscrAdminAutocall, nlIfLlc2FrDLCI=nlIfLlc2FrDLCI, portBsciOperSlowPollRetryCount=portBsciOperSlowPollRetryCount, nlIfIpSecondaryAddrSequence=nlIfIpSecondaryAddrSequence, portSdlcAdminSpeed=portSdlcAdminSpeed, portBsciOperSlowPollRetryFreq=portBsciOperSlowPollRetryFreq, nlIfIpType=nlIfIpType, nlLlc2OrigConnectionMAXDATA=nlLlc2OrigConnectionMAXDATA, portThreshLogRejPerSec=portThreshLogRejPerSec, voiceSpeedDialEntry=voiceSpeedDialEntry, portT1OperProtocolFraming=portT1OperProtocolFraming, portBsciAdminGenerateClock=portBsciAdminGenerateClock, portSdlcAdminCommit=portSdlcAdminCommit, rlpMemorySize=rlpMemorySize, bridgeOperVirtualLANID=bridgeOperVirtualLANID, nlLocalSubscriberRouteConf=nlLocalSubscriberRouteConf, hwcard=hwcard, t1StatsRcvAbortFrames=t1StatsRcvAbortFrames, portBsciAdminMAXRetransmits=portBsciAdminMAXRetransmits, nsStatus=nsStatus, portPinEntry=portPinEntry, portPinRlp=portPinRlp, voiceSystemExtDialDigits=voiceSystemExtDialDigits, portFrBackupGroup=portFrBackupGroup, portPhyX25OperDialOut=portPhyX25OperDialOut, lSSdlcOperRemoteSub=lSSdlcOperRemoteSub, lSSdlcLlc2AdminIdnum=lSSdlcLlc2AdminIdnum, t1StatsXmitUsage=t1StatsXmitUsage, nlIfIpInverseARP=nlIfIpInverseARP, portX25OperRevChgAccpt=portX25OperRevChgAccpt, portDLCIRlpIndex=portDLCIRlpIndex, nodeTrapText=nodeTrapText, x25TxRRFrames=x25TxRRFrames, nlIfVoiceFrameRelayRlp=nlIfVoiceFrameRelayRlp, voiceSpeedDialExtDialStr=voiceSpeedDialExtDialStr, portX25OperOutCallBar=portX25OperOutCallBar, nlIfRlp=nlIfRlp, portX25OperDefPktSize=portX25OperDefPktSize, portX25OperCUGOutAccess=portX25OperCUGOutAccess, bsciDevAdminEntry=bsciDevAdminEntry, portSdlcOperGenerateClock=portSdlcOperGenerateClock, ipxServConfigServName=ipxServConfigServName, ds0aStatsRcvFrames=ds0aStatsRcvFrames, portX25OperInCallBar=portX25OperInCallBar, portFrBackupUseOnly=portFrBackupUseOnly, portVoiceGroup=portVoiceGroup, voiceStatsTxCallsAccepts=voiceStatsTxCallsAccepts, nlIfIpSecondaryAddrRowStatus=nlIfIpSecondaryAddrRowStatus, portThreshFCSErrPerSec=portThreshFCSErrPerSec, NlSubscriberAddress=NlSubscriberAddress, portT1AdminLineEncoding=portT1AdminLineEncoding, portT1AdminGenerateClock=portT1AdminGenerateClock, nlLocalSubscriberRouteIndex=nlLocalSubscriberRouteIndex, portX25OperCUGIndex=portX25OperCUGIndex, nlIfIpSecondaryAddrTable=nlIfIpSecondaryAddrTable, bsciDevAdminControlUnitID=bsciDevAdminControlUnitID, nlLlc2TermConnectionTable=nlLlc2TermConnectionTable, nlIfVoiceInterfaces=nlIfVoiceInterfaces, portBsciOperCallInfoInRequestPacket=portBsciOperCallInfoInRequestPacket, lSSdlcLlc2OperIdblk=lSSdlcLlc2OperIdblk, bridgeDefaultEthernetFrameType=bridgeDefaultEthernetFrameType, bsciSubscrOperConnectionID=bsciSubscrOperConnectionID, portSdlcGroup=portSdlcGroup, portSdlcOperCommit=portSdlcOperCommit, nlLocalSubscriberSystematicRedirect=nlLocalSubscriberSystematicRedirect, portVoiceAdminForwardDelay=portVoiceAdminForwardDelay, portSdlcAdminMAXOut=portSdlcAdminMAXOut, lSSdlcLlc2OperPriority=lSSdlcLlc2OperPriority, portVoiceAdminBreakRatio=portVoiceAdminBreakRatio, portVoiceOperNumDigitsDelete=portVoiceOperNumDigitsDelete, bsciSubscrAdminAutocallMaxRtry=bsciSubscrAdminAutocallMaxRtry, portSdlcOperPacketSize=portSdlcOperPacketSize, voiceSystemVoiceNodeNum=voiceSystemVoiceNodeNum, lSSdlcLlc2AdminEntry=lSSdlcLlc2AdminEntry, portBsciAdminBlockCheck=portBsciAdminBlockCheck, portPhyX25AdminTrunkFlag=portPhyX25AdminTrunkFlag, portVoiceOperLevelIn=portVoiceOperLevelIn, portThreshRlpIndex=portThreshRlpIndex, voiceSpeedDialDigits=voiceSpeedDialDigits, portLogicalX25AdminRowStatus=portLogicalX25AdminRowStatus, portFrConnector=portFrConnector, x25RxStatsTable=x25RxStatsTable, portVoiceAdminHuntGroup=portVoiceAdminHuntGroup, node=node, portFrOutgoingRateControl=portFrOutgoingRateControl, lSSdlcAdminEntry=lSSdlcAdminEntry, portT1OperLineEncoding=portT1OperLineEncoding, portVoiceOperTable=portVoiceOperTable, portT1AdminFrameModelSelect=portT1AdminFrameModelSelect, sdlc=sdlc, ipxServConfigInterveningNetworks=ipxServConfigInterveningNetworks, t1StatsRcvOverruns=t1StatsRcvOverruns, portPhyX25AdminSpeed=portPhyX25AdminSpeed, portPhyX25OperEntry=portPhyX25OperEntry, bsciDevOperTable=bsciDevOperTable, x25TxFRMRFrames=x25TxFRMRFrames, lSSdlcLlc2OperLocalSap=lSSdlcLlc2OperLocalSap, ipxInterfaceNetBIOSEnabled=ipxInterfaceNetBIOSEnabled, ipxInterfacePVCConnection=ipxInterfacePVCConnection, rlpThreshRxFramesPerSec=rlpThreshRxFramesPerSec, portBsciAdminEntry=portBsciAdminEntry, portDLCIBecnRecoveryCnt=portDLCIBecnRecoveryCnt, portBsciAdminEndToEndAck=portBsciAdminEndToEndAck, portX25AdminThruptClassNeg=portX25AdminThruptClassNeg, nsMaxNeigh=nsMaxNeigh, lSSdlcOperLocalSub=lSSdlcOperLocalSub, nlLlc2HostMACAddress=nlLlc2HostMACAddress, portVoiceAdminExtDigitsSource=portVoiceAdminExtDigitsSource, statIp=statIp, nlIfLlc2LANType=nlIfLlc2LANType, t1StatsPortIndex=t1StatsPortIndex, portT1AdminTable=portT1AdminTable, portT1OperFrameModelSelect=portT1OperFrameModelSelect, portSdlcOperConnector=portSdlcOperConnector, portFrBackupEntry=portFrBackupEntry, nlLocalSubscriberRedirEntry=nlLocalSubscriberRedirEntry, portSdlcAdminLPDASupport=portSdlcAdminLPDASupport, portSdlcOperLPDASupport=portSdlcOperLPDASupport, portBsciOperConnector=portBsciOperConnector, portVoiceOperForwardDelay=portVoiceOperForwardDelay, statDS0A=statDS0A, portDLCIIndex=portDLCIIndex, bsciSubscrOperEntry=bsciSubscrOperEntry, portPhyX25OperRcvClockFromDTE=portPhyX25OperRcvClockFromDTE, portT1OperEntry=portT1OperEntry, statT1=statT1, ds0aStatsEntry=ds0aStatsEntry, nlIfEntry=nlIfEntry, port=port, sdlcLSGroup=sdlcLSGroup, portPhyX25OperGenerateClock=portPhyX25OperGenerateClock, portStatsInPercentUtils=portStatsInPercentUtils, nlIfIpUnnumberedIf=nlIfIpUnnumberedIf, ds0aStatsXmitFrames=ds0aStatsXmitFrames, ipxInterfaceNetworkAddress=ipxInterfaceNetworkAddress, portBsciOperGenerateClock=portBsciOperGenerateClock, portT1AdminFramingMode=portT1AdminFramingMode, nlInterfaces=nlInterfaces, portX25AdminCUGIndex=portX25AdminCUGIndex, portX25AdminCUGPref=portX25AdminCUGPref, portPhyX25OperSetupTimer=portPhyX25OperSetupTimer, nlIfLlc2FrSessionType=nlIfLlc2FrSessionType, nlIfIpDestAddress=nlIfIpDestAddress, nlIfPortStatus=nlIfPortStatus, ipxInterfaceSAPEnabled=ipxInterfaceSAPEnabled, portThreshEntry=portThreshEntry, bsciSubscrAdminLocalID=bsciSubscrAdminLocalID, portVoiceOperExtDigitsSource=portVoiceOperExtDigitsSource, llc2=llc2, nlLlc2TermConnectionRowStatus=nlLlc2TermConnectionRowStatus, voiceSystemCountryCode=voiceSystemCountryCode, ipxStaticRouteConfigEntry=ipxStaticRouteConfigEntry, nlLocalSubscriberTable=nlLocalSubscriberTable, nsNTNode=nsNTNode, portThreshIndex=portThreshIndex, nlIfIpSourceSub=nlIfIpSourceSub, portVoiceOperLinkDownBusy=portVoiceOperLinkDownBusy, portFrBackupRLP=portFrBackupRLP, nlIfIpPriority=nlIfIpPriority, ipxServConfigEntry=ipxServConfigEntry, portVoiceAdminAutoPollTimer=portVoiceAdminAutoPollTimer, nlIfIpSourceAddress=nlIfIpSourceAddress, nlIfIpSourceRlp=nlIfIpSourceRlp, nlLlc2OrigConnectionEntry=nlLlc2OrigConnectionEntry, portSdlcAdminGenerateClock=portSdlcAdminGenerateClock, portBsciAdminTable=portBsciAdminTable, portT1OperGenerateClock=portT1OperGenerateClock, portFrBlockedFlag=portFrBlockedFlag, portBsciAdminCallInfoInRequestPacket=portBsciAdminCallInfoInRequestPacket, rlpGroupNumber=rlpGroupNumber, bridgeAdminSRBID=bridgeAdminSRBID, portPhyX25AdminRcvClockFromDTE=portPhyX25AdminRcvClockFromDTE, portBsciAdminPadType=portBsciAdminPadType, voiceStatsTable=voiceStatsTable, portX25AdminRevChgAccpt=portX25AdminRevChgAccpt, ipxInterfaceSourcePort=ipxInterfaceSourcePort, nsNTNeighStat=nsNTNeighStat, nlLocalSubscriberRedirTable=nlLocalSubscriberRedirTable, portX25AdminInCallBar=portX25AdminInCallBar, lSSdlcOperLPDAResourceID=lSSdlcOperLPDAResourceID, portVoiceAdminBlockedFlag=portVoiceAdminBlockedFlag, nlLlc2OrigConnectionRowStatus=nlLlc2OrigConnectionRowStatus, lSSdlcLlc2AdminPriority=lSSdlcLlc2AdminPriority, portBsciAdminSlowPollRetryFreq=portBsciAdminSlowPollRetryFreq, voiceSpeedDialLongDialMap=voiceSpeedDialLongDialMap, ipxInterfaceLanCardNumber=ipxInterfaceLanCardNumber, portVoiceOperCallTimer=portVoiceOperCallTimer, portX25OperCUGPref=portX25OperCUGPref, ipxInterfaceNumber=ipxInterfaceNumber, bsciDevOperControlUnitID=bsciDevOperControlUnitID, portPhyX25OperTrunkFlag=portPhyX25OperTrunkFlag, portVoiceAdminJitter=portVoiceAdminJitter, nlLlc2HostPriority=nlLlc2HostPriority, nlLlc2OrigConnectionRemoteSubscriberId=nlLlc2OrigConnectionRemoteSubscriberId, portStatsFCSErrors=portStatsFCSErrors, voiceSystemRingVolFreq=voiceSystemRingVolFreq, portBsciAdminEndPadChars=portBsciAdminEndPadChars, nlLlc2HostT2RecvAckTimer=nlLlc2HostT2RecvAckTimer, bsciSubscrOperSequence=bsciSubscrOperSequence, portX25OperFlowCtrlNeg=portX25OperFlowCtrlNeg, portT1AdminRowStatus=portT1AdminRowStatus, x25TxPortIndex=x25TxPortIndex, portVoiceAdminDialTimer=portVoiceAdminDialTimer, ipxInterfaceEntry=ipxInterfaceEntry, lSSdlcAdminRowStatus=lSSdlcAdminRowStatus)
mibBuilder.exportSymbols("NETLINK-SPECIFIC-MIB", ipxServConfigServNetworkAddress=ipxServConfigServNetworkAddress, ipxServConfigServNodeAddress=ipxServConfigServNodeAddress, nlIfIpDestSub=nlIfIpDestSub, portSdlcAdminMAXRetries=portSdlcAdminMAXRetries, bsciSubscrAdminConnectionID=bsciSubscrAdminConnectionID, portVoiceAdminRlpIndex=portVoiceAdminRlpIndex, portBsciAdminNoResponseRetryCount=portBsciAdminNoResponseRetryCount, ipxConfig=ipxConfig, nlIfVoiceEntry=nlIfVoiceEntry, rlpStatsEntry=rlpStatsEntry, portX25OperThruptClassNeg=portX25OperThruptClassNeg, voiceSystemVoiceRatesMax=voiceSystemVoiceRatesMax, nlIfVoiceLocalNodePort=nlIfVoiceLocalNodePort, portT1AdminBlockedPortFlag=portT1AdminBlockedPortFlag, nlLlc2HostAccess=nlLlc2HostAccess, portBsciOperEndToEndAck=portBsciOperEndToEndAck, portSdlcAdminInactivityTimer=portSdlcAdminInactivityTimer, x25TxDMFrames=x25TxDMFrames, nlIfType=nlIfType, nlLlc2OrigConnectionIDNUM=nlLlc2OrigConnectionIDNUM, nlLocalSubscriberRedirAddr=nlLocalSubscriberRedirAddr, rlpStatsInFrames=rlpStatsInFrames, ipxInterfaceTable=ipxInterfaceTable, portSdlcAdminL1Duplex=portSdlcAdminL1Duplex, frStatsTxBECNFrames=frStatsTxBECNFrames, portBsciOperRcvClockFromDTE=portBsciOperRcvClockFromDTE, portVoiceAdminTelephonyType=portVoiceAdminTelephonyType, nlIfIpMaxSVC=nlIfIpMaxSVC, portX25OperBlockedFlag=portX25OperBlockedFlag, ipxStaticRouteConfigTable=ipxStaticRouteConfigTable, portDLCIBackupGroup=portDLCIBackupGroup, portStatsOutFrames=portStatsOutFrames, portStatsEntry=portStatsEntry, lSSdlcLlc2OperLanT1=lSSdlcLlc2OperLanT1, t1StatsLCVCnt=t1StatsLCVCnt, portBsciOperUseEBCDIC=portBsciOperUseEBCDIC, portPhyX25AdminDialOut=portPhyX25AdminDialOut, portVoiceOperTETimer=portVoiceOperTETimer, nlIfLlc2FrHostMACAddress=nlIfLlc2FrHostMACAddress, nlLlc2HostGroup=nlLlc2HostGroup, x25TxStatsEntry=x25TxStatsEntry, frStatsEntry=frStatsEntry, portPhyX25OperConnector=portPhyX25OperConnector, portT1Group=portT1Group, nlLocalSubscriberId=nlLocalSubscriberId, nlLlc2HostT1ReplyTimer=nlLlc2HostT1ReplyTimer, nlLlc2OrigConnectionHSAP=nlLlc2OrigConnectionHSAP, frStatsRxBECNFrames=frStatsRxBECNFrames, nlIfIpSecondaryAddrSourceAddress=nlIfIpSecondaryAddrSourceAddress, portLogicalX25AdminFrDlci=portLogicalX25AdminFrDlci, portFrBackupPort=portFrBackupPort, portSdlcOperInactivityTimer=portSdlcOperInactivityTimer, network=network, nlLlc2NextHostNumber=nlLlc2NextHostNumber, x25RxRRFrames=x25RxRRFrames, voiceStatsRlpIndex=voiceStatsRlpIndex, portBsciAdminBlockedFlag=portBsciAdminBlockedFlag, bsciDevAdminTable=bsciDevAdminTable, nlIfLlc2LANCard=nlIfLlc2LANCard, portVoiceAdminTETimer=portVoiceAdminTETimer, portVoiceAdminCallTimer=portVoiceAdminCallTimer, portVoiceOperSuppression=portVoiceOperSuppression, bsciDevAdminRowStatus=bsciDevAdminRowStatus, bsciDevOperDeviceUnitID=bsciDevOperDeviceUnitID, portLogicalX25OperFrDlci=portLogicalX25OperFrDlci, portVoiceOperDTMF=portVoiceOperDTMF, voiceStatsTxCalls=voiceStatsTxCalls, portX25AdminDefWinSize=portX25AdminDefWinSize, nlLlc2HostRowStatus=nlLlc2HostRowStatus, portFrLogicalDCE=portFrLogicalDCE, nlLocalSubscriberRouteEntry=nlLocalSubscriberRouteEntry, nlIfIpSecondaryAddrNetworkMask=nlIfIpSecondaryAddrNetworkMask, portBsciAdminFullDuplex=portBsciAdminFullDuplex, lSSdlcLlc2OperLanTw=lSSdlcLlc2OperLanTw, nlIfLlc2FrLANID=nlIfLlc2FrLANID, nlIfLlc2FrTable=nlIfLlc2FrTable, portVoiceOperHuntGroup=portVoiceOperHuntGroup, nlIpDefaultRIPVersion=nlIpDefaultRIPVersion, nlIfLlc2FrBAG=nlIfLlc2FrBAG, portSdlcOperMAXRetries=portSdlcOperMAXRetries, portPhyX25AdminEntry=portPhyX25AdminEntry, portThreshTxFramesPerSec=portThreshTxFramesPerSec, bsciDevAdminDisableStatusRequest=bsciDevAdminDisableStatusRequest, portBsciAdminAnswerNonConfigured=portBsciAdminAnswerNonConfigured, portSdlcOperDisableRequestDisconnect=portSdlcOperDisableRequestDisconnect, lSSdlcLlc2OperLanTi=lSSdlcLlc2OperLanTi, rlpStatsOutFrames=rlpStatsOutFrames, t1StatsOOSCnt=t1StatsOOSCnt, portT1AdminProtocolFraming=portT1AdminProtocolFraming, portT1AdminLineBuildOut=portT1AdminLineBuildOut, portDLCIIncomingCIR=portDLCIIncomingCIR, ipxInterfaceSVCIdleTimer=ipxInterfaceSVCIdleTimer, bsciDevAdminTransTextSupported=bsciDevAdminTransTextSupported, nlIfLlc2LANRlp=nlIfLlc2LANRlp, portX25AdminEntry=portX25AdminEntry, statGroup=statGroup, portBsciAdminTransTextSupported=portBsciAdminTransTextSupported, nlLlc2HostTwNumberOutstanding=nlLlc2HostTwNumberOutstanding, portX25AdminOutCallBar=portX25AdminOutCallBar, portVoiceOperLevelOut=portVoiceOperLevelOut, rlpStatsQMessages=rlpStatsQMessages, portDLCIConfigTable=portDLCIConfigTable, lSSdlcLlc2OperBAG=lSSdlcLlc2OperBAG, portT1AdminEntry=portT1AdminEntry, statThresh=statThresh, portBsciOperActivateConnectionWithoutPoll=portBsciOperActivateConnectionWithoutPoll, nlLlc2OrigConnectionTable=nlLlc2OrigConnectionTable, lSSdlcAdminTable=lSSdlcAdminTable, nlLlc2HostN2ExpiredT1LPDUCount=nlLlc2HostN2ExpiredT1LPDUCount, lSSdlcAdminRetryCount=lSSdlcAdminRetryCount, portBsciAdminRowStatus=portBsciAdminRowStatus, x25TxSABMFrames=x25TxSABMFrames, portX25OperMaxThruptClass=portX25OperMaxThruptClass, portSdlcAdminNrz=portSdlcAdminNrz, portBsciOperBlockCheck=portBsciOperBlockCheck, nlIfLlc2FrInterface=nlIfLlc2FrInterface, x25RxDMFrames=x25RxDMFrames, ipxInterfaceMaxTransUnit=ipxInterfaceMaxTransUnit, portPhyX25AdminSetupTimer=portPhyX25AdminSetupTimer, portPhyX25AdminRowStatus=portPhyX25AdminRowStatus, nlIfIpBroadcastAddress=nlIfIpBroadcastAddress, lSSdlcLlc2OperEntry=lSSdlcLlc2OperEntry, nlIfLlc2FrPort=nlIfLlc2FrPort, rlpStatsFrameRejects=rlpStatsFrameRejects, nlIfIpInterface=nlIfIpInterface, bsciSubscrAdminRowStatus=bsciSubscrAdminRowStatus, ds0aStatsRcvErrors=ds0aStatsRcvErrors, voiceStatsPortIndex=voiceStatsPortIndex, tpAdrFlag=tpAdrFlag, portVoiceAdminDTMF=portVoiceAdminDTMF, statFrame=statFrame, ipxInterfaceRowStatus=ipxInterfaceRowStatus, frStatsRxANXDFrames=frStatsRxANXDFrames, portVoiceOperInterface=portVoiceOperInterface, t1StatsRcvUsage=t1StatsRcvUsage, nlIfVoiceFrameRelayDLCI=nlIfVoiceFrameRelayDLCI, nodeCfgTable=nodeCfgTable, t1StatsBlueAlarms=t1StatsBlueAlarms, nlIfIpProxyARP=nlIfIpProxyARP, t1StatsEntry=t1StatsEntry, nsThisNode=nsThisNode, nlIfVoicePeerNodeType=nlIfVoicePeerNodeType, voiceStatsRxCongestions=voiceStatsRxCongestions, portBsciOperFullDuplex=portBsciOperFullDuplex, bsciSubscrAdminRemoteID=bsciSubscrAdminRemoteID, lSSdlcLlc2AdminLanN2=lSSdlcLlc2AdminLanN2, portX25AdminFastSelAccpt=portX25AdminFastSelAccpt, portBsciAdminMultidrop=portBsciAdminMultidrop, nlLlc2HostRoutingSubscriberId=nlLlc2HostRoutingSubscriberId, nlLlc2TermConnectionLocalSubscriberId=nlLlc2TermConnectionLocalSubscriberId, nlIfConnectorType=nlIfConnectorType, voiceSystemDialDigits=voiceSystemDialDigits, portX25OperMaxPktSize=portX25OperMaxPktSize, portBsciOperEndPadChars=portBsciOperEndPadChars, portFrBackupGroupTable=portFrBackupGroupTable, lSSdlcLlc2AdminLanN3=lSSdlcLlc2AdminLanN3, nlLlc2TermConnectionHSAP=nlLlc2TermConnectionHSAP, frStatsTxDEFrames=frStatsTxDEFrames, portBsciAdminDataMode=portBsciAdminDataMode, portX25OperMaxWinSize=portX25OperMaxWinSize, nlLlc2HostInterface=nlLlc2HostInterface, nlIfIpSecondaryAddrEntry=nlIfIpSecondaryAddrEntry, nsNumNeigh=nsNumNeigh, frStatsRxLMIFrames=frStatsRxLMIFrames, ipxInterfaceType=ipxInterfaceType, nsNodNum=nsNodNum, ipxStaticRouteConfigRouter=ipxStaticRouteConfigRouter, portLogicalX25OperCxnPriority=portLogicalX25OperCxnPriority, portVoiceOperAutoDial=portVoiceOperAutoDial, nlIfTableIndex=nlIfTableIndex, nsNeighTable=nsNeighTable, x25RxStatsEntry=x25RxStatsEntry, portT1AdminNRZI=portT1AdminNRZI, portVoiceOperAutoPoll=portVoiceOperAutoPoll, portStatsLogicalRejects=portStatsLogicalRejects, t1StatsRcvChannelErrors=t1StatsRcvChannelErrors, portX25AdminMaxPktSize=portX25AdminMaxPktSize, nlIfIpRouteMetric=nlIfIpRouteMetric, nlIfTable=nlIfTable, nlIfVoicePeerNodePort=nlIfVoicePeerNodePort, x25TxUAFrames=x25TxUAFrames, lSSdlcLlc2AdminTable=lSSdlcLlc2AdminTable, rlpStatus=rlpStatus, sdlcLSAdminTable=sdlcLSAdminTable, ipxInterfacePeriodicSAPTimer=ipxInterfacePeriodicSAPTimer, nodeAlmTable=nodeAlmTable, x25TxRNRFrames=x25TxRNRFrames, nlLlc2HostTiInactivityTimer=nlLlc2HostTiInactivityTimer, bsciSubscrOperRemoteID=bsciSubscrOperRemoteID, ipxInterfaceRIPEnabled=ipxInterfaceRIPEnabled, portVoiceOperBlockedFlag=portVoiceOperBlockedFlag, ipxInterfaceWanEnabled=ipxInterfaceWanEnabled, bridgeOperSRBID=bridgeOperSRBID, lSSdlcLlc2OperTable=lSSdlcLlc2OperTable, portBsciOperEntry=portBsciOperEntry, portDLCIBackupProtEnb=portDLCIBackupProtEnb, nlIfLlc2FrRlp=nlIfLlc2FrRlp, portDLCIEntry=portDLCIEntry, portVoiceOperForwardedDigits=portVoiceOperForwardedDigits, nlIfIpInterfaces=nlIfIpInterfaces, nlIfIpLANCard=nlIfIpLANCard, portDLCIPortIndex=portDLCIPortIndex, portVoiceOperFaxSupported=portVoiceOperFaxSupported, x25RxRlpIndex=x25RxRlpIndex, rlpThreshMsgQueueLen=rlpThreshMsgQueueLen, bsciDevOperConnectionID=bsciDevOperConnectionID, lSSdlcLlc2AdminBAG=lSSdlcLlc2AdminBAG, frStatsTxLMIFrames=frStatsTxLMIFrames, bsciDevAdminPrinterAttached=bsciDevAdminPrinterAttached, nlIfIpNetworkMask=nlIfIpNetworkMask, statVoice=statVoice, ipxStaticRouteConfigRowStatus=ipxStaticRouteConfigRowStatus, portVoiceOperDTMFOnDuration=portVoiceOperDTMFOnDuration, portFrConfigTable=portFrConfigTable, nlIfPort=nlIfPort, ipxServConfigRowStatus=ipxServConfigRowStatus, nlIfLlc2FrBlockedPortFlag=nlIfLlc2FrBlockedPortFlag, portLogicalX25OperTable=portLogicalX25OperTable, nlIfVoicePeerNodeNumber=nlIfVoicePeerNodeNumber, portSdlcAdminIdleFillChar=portSdlcAdminIdleFillChar, nlLocalSubscriberRouteTable=nlLocalSubscriberRouteTable, bsciSubscrAdminAutocallRtyTimer=bsciSubscrAdminAutocallRtyTimer, ipxServConfigTable=ipxServConfigTable, bsciDevOperTransTextSupported=bsciDevOperTransTextSupported, x25RxUAFrames=x25RxUAFrames, portT1OperBlockedPortFlag=portT1OperBlockedPortFlag, ipxInterfaceMaxVC=ipxInterfaceMaxVC, nlLocalSubscriberRedirectOO=nlLocalSubscriberRedirectOO, t1StatsRlpIndex=t1StatsRlpIndex, nlLlc2HostTable=nlLlc2HostTable, portFrSpeed=portFrSpeed, portBsciOperDataMode=portBsciOperDataMode, x25TxDISCFrames=x25TxDISCFrames, ds0aStatsRcvOverruns=ds0aStatsRcvOverruns, portVoiceAdminPortIndex=portVoiceAdminPortIndex, portVoiceOperMakeRatio=portVoiceOperMakeRatio, sdlcLSAddress=sdlcLSAddress, portVoiceAdminMakeRatio=portVoiceAdminMakeRatio, lSSdlcLlc2OperSuppressXID=lSSdlcLlc2OperSuppressXID, rlpMaxProtos=rlpMaxProtos, portVoiceOperLongDialPrefix=portVoiceOperLongDialPrefix, nlLlc2TermConnectionEntry=nlLlc2TermConnectionEntry, voiceStatsCallTimeouts=voiceStatsCallTimeouts, ipxConfigNodeDefault=ipxConfigNodeDefault, subscriber=subscriber, portSdlcOperL1Duplex=portSdlcOperL1Duplex, ipxInterfaceWatchdogSpoofingEnabled=ipxInterfaceWatchdogSpoofingEnabled, portBsciAdminSpeed=portBsciAdminSpeed, rlpThreshRejFramesPerSec=rlpThreshRejFramesPerSec, x25RxSABMFrames=x25RxSABMFrames, frStatsRlpIndex=frStatsRlpIndex, portSdlcOperEntry=portSdlcOperEntry, portVoiceAdminToneType=portVoiceAdminToneType, portPinPort=portPinPort)
mibBuilder.exportSymbols("NETLINK-SPECIFIC-MIB", portVoiceOperDialTimer=portVoiceOperDialTimer, lSSdlcLlc2AdminRowStatus=lSSdlcLlc2AdminRowStatus, nlIfLlc2LANBlockedPortFlag=nlIfLlc2LANBlockedPortFlag, portStatsInFrames=portStatsInFrames, nlIfIpPVCConnection=nlIfIpPVCConnection, rlpThreshRlpIndex=rlpThreshRlpIndex, x25TxRlpIndex=x25TxRlpIndex, portBsciAdminNAKRetryCount=portBsciAdminNAKRetryCount, nlIfIpSourcePort=nlIfIpSourcePort, portPhyX25OperTable=portPhyX25OperTable, portX25AdminLocChgPrev=portX25AdminLocChgPrev, frStatsRxFECNFrames=frStatsRxFECNFrames, statBag=statBag, portSdlcOperPadType=portSdlcOperPadType, nlLocalSubscriberRedirIndex=nlLocalSubscriberRedirIndex, bridgeIPEnabled=bridgeIPEnabled, nodeSNMPGroup=nodeSNMPGroup, lSSdlcLlc2AdminLanT2=lSSdlcLlc2AdminLanT2, nlIfLlc2FrEntry=nlIfLlc2FrEntry, portPhyX25OperDisconnectTimer=portPhyX25OperDisconnectTimer, portFrEntry=portFrEntry, portStatsRlpIndex=portStatsRlpIndex, bsciSubscrAdminSequence=bsciSubscrAdminSequence, ipxInterfaceSourceSubscriber=ipxInterfaceSourceSubscriber, voiceSpeedDialRowStatus=voiceSpeedDialRowStatus, nlIfLlc2LANTable=nlIfLlc2LANTable, portBsciOperNoResponseTimer=portBsciOperNoResponseTimer, nlIfLlc2LANPriority=nlIfLlc2LANPriority, portVoiceOperBreakRatio=portVoiceOperBreakRatio, ipxServConfigInterface=ipxServConfigInterface, x25RxDISCFrames=x25RxDISCFrames, x25RxRNRFrames=x25RxRNRFrames, portLogicalX25AdminCxnPriority=portLogicalX25AdminCxnPriority, ipxInterfaceDestinationSubscriber=ipxInterfaceDestinationSubscriber, t1StatsRcvErrors=t1StatsRcvErrors, portStatsFrameRetrans=portStatsFrameRetrans, lSSdlcAdminRemoteSub=lSSdlcAdminRemoteSub, rlpStatsTable=rlpStatsTable, portVoiceOperDTMFOffDuration=portVoiceOperDTMFOffDuration, lSSdlcLlc2AdminLanT1=lSSdlcLlc2AdminLanT1, portFrGroup=portFrGroup, portVoiceAdminLinkDownBusy=portVoiceAdminLinkDownBusy, portLogicalX25OperBAG=portLogicalX25OperBAG, portDLCIIncomingBc=portDLCIIncomingBc, lSSdlcOperRetryTime=lSSdlcOperRetryTime, netstat=netstat, nodeTrapAdrTable=nodeTrapAdrTable, nlLocalSubscriberEntry=nlLocalSubscriberEntry, portVoiceAdminRowStatus=portVoiceAdminRowStatus, nlLlc2OrigConnectionType=nlLlc2OrigConnectionType, portBsciOperTransTextSupported=portBsciOperTransTextSupported, nlIfLlc2LANRowStatus=nlIfLlc2LANRowStatus, portBsciGroup=portBsciGroup, ds0aStatsPortIndex=ds0aStatsPortIndex, portBsciAdminRcvClockFromDTE=portBsciAdminRcvClockFromDTE, nlIfIpSVCRetryTimer=nlIfIpSVCRetryTimer, nlIfIpSVCIdleTimer=nlIfIpSVCIdleTimer, portVoiceAdminSpeed=portVoiceAdminSpeed, portBsciOperBlockedFlag=portBsciOperBlockedFlag, bsciSubscrOperAutocallRtyTimer=bsciSubscrOperAutocallRtyTimer, portPhyX25AdminConnector=portPhyX25AdminConnector, nlIfVoiceTable=nlIfVoiceTable, portBsciAdminRetransmitInterval=portBsciAdminRetransmitInterval, nlIfTableOid=nlIfTableOid, rlpStatsFrameRetransmits=rlpStatsFrameRetransmits, portBsciAdminSlowPollRetryCount=portBsciAdminSlowPollRetryCount, lSSdlcAdminL2DatMode=lSSdlcAdminL2DatMode, portFrMaxBytesPerFrame=portFrMaxBytesPerFrame, portThreshTable=portThreshTable, bsciDevOperPrinterAttached=bsciDevOperPrinterAttached, rlpEntry=rlpEntry, portVoiceAdminTable=portVoiceAdminTable, portSdlcAdminRowStatus=portSdlcAdminRowStatus, bsciSubscrOperTable=bsciSubscrOperTable, portX25OperDefWinSize=portX25OperDefWinSize, t1StatsXmitAbortFrames=t1StatsXmitAbortFrames, x25TxStatsTable=x25TxStatsTable, nlLlc2HostSessionType=nlLlc2HostSessionType, nlLlc2HostEntry=nlLlc2HostEntry, portFrRcvClkFrmDTE=portFrRcvClkFrmDTE, nlIfLlc2LANPort=nlIfLlc2LANPort, portSdlcAdminPadType=portSdlcAdminPadType, voiceSpeedDialTable=voiceSpeedDialTable, nlLlc2OrigConnectionIDBLK=nlLlc2OrigConnectionIDBLK, nlLocalSubscriberRouteLP=nlLocalSubscriberRouteLP, lSSdlcLlc2AdminIdblk=lSSdlcLlc2AdminIdblk, portSdlcAdminConnector=portSdlcAdminConnector, portSdlcAdminDisableRequestDisconnect=portSdlcAdminDisableRequestDisconnect, portFrPortIndex=portFrPortIndex, portT1OperLineBuildOut=portT1OperLineBuildOut, portVoiceOperSLTTimeout=portVoiceOperSLTTimeout, nlIfLlc2LANInterface=nlIfLlc2LANInterface, ds0aStatsRlpIndex=ds0aStatsRlpIndex, portPhyX25AdminGenerateClock=portPhyX25AdminGenerateClock, ipxNodeDefaultConfigNetworkAddress=ipxNodeDefaultConfigNetworkAddress, portBsciOperTable=portBsciOperTable, nlIfLlc2LANID=nlIfLlc2LANID, portPhyX25OperTrunkGroup=portPhyX25OperTrunkGroup, portPhyX25AdminDisconnectTimer=portPhyX25AdminDisconnectTimer, portFrRowStatus=portFrRowStatus, ipxInterfacePeriodicSAPEnabled=ipxInterfacePeriodicSAPEnabled, x25RxINFOFrames=x25RxINFOFrames, voiceStatsTxClears=voiceStatsTxClears, local=local, bsciSubscrOperAutocallMaxRtry=bsciSubscrOperAutocallMaxRtry, t1StatsRcvFrames=t1StatsRcvFrames, voiceStatsTxCongestions=voiceStatsTxCongestions, bsciSubscrOperLocalID=bsciSubscrOperLocalID, portBsciAdminErrorRetransmitCount=portBsciAdminErrorRetransmitCount, nlLocalSubscriberRedirRowStatus=nlLocalSubscriberRedirRowStatus, portVoiceOperForwardedType=portVoiceOperForwardedType, portLogicalX25OperRfc1490=portLogicalX25OperRfc1490, portVoiceOperRlpIndex=portVoiceOperRlpIndex, rlpThreshTable=rlpThreshTable, nlIfIpICMPAddRoutes=nlIfIpICMPAddRoutes, nlIfLlc2FrFormat=nlIfLlc2FrFormat, ipxServConfigServiceType=ipxServConfigServiceType, portPhyX25AdminTrunkGroup=portPhyX25AdminTrunkGroup, tpAddress=tpAddress, nlIfLlc2FrPriority=nlIfLlc2FrPriority, nlIfIpSecondaryAddrBroadcastAddress=nlIfIpSecondaryAddrBroadcastAddress, portStatsOutPercentUtils=portStatsOutPercentUtils, nlIfVoiceRowStatus=nlIfVoiceRowStatus, ipxInterfaceNetBIOSHops=ipxInterfaceNetBIOSHops, nlIfIpEntry=nlIfIpEntry, portBsciOperErrorRetransmitCount=portBsciOperErrorRetransmitCount, lSSdlcOperEntry=lSSdlcOperEntry, lSSdlcOperRetryCount=lSSdlcOperRetryCount, ipxNodeDefaultConfigRIPSAPGap=ipxNodeDefaultConfigRIPSAPGap, portFrBandwidthAllocation=portFrBandwidthAllocation, portDLCIOutgoingCIR=portDLCIOutgoingCIR, portDLCIOutgoingBc=portDLCIOutgoingBc, ipxStaticRouteConfigNetNum=ipxStaticRouteConfigNetNum, portThreshRtxFramesPerSec=portThreshRtxFramesPerSec, nlLocalSubscriberRoutePort=nlLocalSubscriberRoutePort, ds0aStatsTable=ds0aStatsTable, nlLocalSubscriberRouteRowStatus=nlLocalSubscriberRouteRowStatus, portPhyX25AdminInactivityTimer=portPhyX25AdminInactivityTimer, frStatsTotDiscFrames=frStatsTotDiscFrames, lSSdlcAdminLocalSub=lSSdlcAdminLocalSub, ipxInterfaceSourceDLCI=ipxInterfaceSourceDLCI, ipxInterfaceSerializationEnabled=ipxInterfaceSerializationEnabled, portVoiceOperPortIndex=portVoiceOperPortIndex, portSdlcAdminTable=portSdlcAdminTable, portFrLLM=portFrLLM, portVoiceAdminLevelOut=portVoiceAdminLevelOut, x25TxINFOFrames=x25TxINFOFrames, x25TxREJFrames=x25TxREJFrames, pinStatusTable=pinStatusTable, lSSdlcLlc2AdminLocalSap=lSSdlcLlc2AdminLocalSap, nlLlc2TermConnectionRemoteSubscriberId=nlLlc2TermConnectionRemoteSubscriberId, portT1OperNRZI=portT1OperNRZI, portX25AdminMaxWinSize=portX25AdminMaxWinSize, nlIfIpRIPDeltaUpdates=nlIfIpRIPDeltaUpdates, bsciSubscrAdminTable=bsciSubscrAdminTable, ipxInterfaceBandwidthAllocGroup=ipxInterfaceBandwidthAllocGroup, portX25AdminMaxThruptClass=portX25AdminMaxThruptClass, nsNodTable=nsNodTable, ipxServConfigServSocketNumber=ipxServConfigServSocketNumber, portSdlcOperRcvClockFromDTE=portSdlcOperRcvClockFromDTE, nlLocalSubscriberPriority=nlLocalSubscriberPriority, lSSdlcAdminAutoCall=lSSdlcAdminAutoCall, x25RxREJFrames=x25RxREJFrames, portThreshTxPercentUtl=portThreshTxPercentUtl, bridgeMaxSizeForwardingTable=bridgeMaxSizeForwardingTable, frStatsTable=frStatsTable, portPhyX25AdminTable=portPhyX25AdminTable, portLogicalX25OperEntry=portLogicalX25OperEntry, portSdlcAdminEntry=portSdlcAdminEntry, portT1OperTable=portT1OperTable, portFrBackupRowStatus=portFrBackupRowStatus, bsciDevOperDisableStatusRequest=bsciDevOperDisableStatusRequest, rlpIndex=rlpIndex, lSSdlcLlc2AdminLanTi=lSSdlcLlc2AdminLanTi, portBsciAdminMaxBytesPerFrame=portBsciAdminMaxBytesPerFrame, portPinStatus=portPinStatus, tpAdrIdx=tpAdrIdx, bsciDevOperEntry=bsciDevOperEntry, nodeModel=nodeModel, portBsciAdminClearVCOnLastDeviceDown=portBsciAdminClearVCOnLastDeviceDown, portBsciOperRetransmitInterval=portBsciOperRetransmitInterval, portVoiceAdminForwardedType=portVoiceAdminForwardedType, portVoiceAdminInterface=portVoiceAdminInterface, portStatsIndex=portStatsIndex, nlIfVoiceLocalNodeNumber=nlIfVoiceLocalNodeNumber, portX25OperCUGIncAccess=portX25OperCUGIncAccess, ipxInterfacePortDiagEnabled=ipxInterfacePortDiagEnabled, portVoiceAdminLevelIn=portVoiceAdminLevelIn, portDLCIRowStatus=portDLCIRowStatus, portVoiceAdminSampleDelay=portVoiceAdminSampleDelay, portBsciAdminUseEBCDIC=portBsciAdminUseEBCDIC, lSSdlcAdminLlc2Conversion=lSSdlcAdminLlc2Conversion, portVoiceAdminDTMFOffDuration=portVoiceAdminDTMFOffDuration, nlIfLlc2FrRowStatus=nlIfLlc2FrRowStatus, rlpConfigTable=rlpConfigTable, portVoiceAdminSLTTimeout=portVoiceAdminSLTTimeout, ipxInterfaceSVCRetryTimer=ipxInterfaceSVCRetryTimer, nlIfIpRowStatus=nlIfIpRowStatus, nlLlc2TermConnectionSequence=nlLlc2TermConnectionSequence, rlpStatsIndex=rlpStatsIndex, portT1OperFramingMode=portT1OperFramingMode, rlpThreshTxFramesPerSec=rlpThreshTxFramesPerSec, nlIfVoiceInterface=nlIfVoiceInterface, bsciDevOperSingleUserVC=bsciDevOperSingleUserVC, rlpLIC1Type=rlpLIC1Type, lSSdlcOperLlc2Conversion=lSSdlcOperLlc2Conversion, ds0aStatsChannelIndex=ds0aStatsChannelIndex, bridgeAdminVirtualLANID=bridgeAdminVirtualLANID, tpAdrSLev=tpAdrSLev, portX25AdminCUGIncAccess=portX25AdminCUGIncAccess, portX25AdminTable=portX25AdminTable, portLogicalX25AdminRfc1490=portLogicalX25AdminRfc1490, portBsciOperClearVCOnLastDeviceDown=portBsciOperClearVCOnLastDeviceDown, nodeBagTable=nodeBagTable, portX25AdminDefPktSize=portX25AdminDefPktSize, bsciDevAdminConnectionID=bsciDevAdminConnectionID, netlink=netlink, portBsciAdminActivateConnectionWithoutPoll=portBsciAdminActivateConnectionWithoutPoll, rlpThreshEntry=rlpThreshEntry, nsEntry=nsEntry, nlLlc2OrigConnectionMAXIN=nlLlc2OrigConnectionMAXIN, portFrBackupWaitTimer=portFrBackupWaitTimer, nlIfPhyPort=nlIfPhyPort, ipxStaticRouteConfigCircIndex=ipxStaticRouteConfigCircIndex, portBsciOperPollInterval=portBsciOperPollInterval, portDLCIOutgoingBe=portDLCIOutgoingBe, sdlcLSAdminEntry=sdlcLSAdminEntry, lSSdlcLlc2OperLanN3=lSSdlcLlc2OperLanN3, portPhyX25OperSpeed=portPhyX25OperSpeed, lSSdlcAdminLPDAResourceID=lSSdlcAdminLPDAResourceID, nlIfIpMtu=nlIfIpMtu, bridgeIPXEnabled=bridgeIPXEnabled, portX25OperLocChgPrev=portX25OperLocChgPrev, ipxNodeDefaultConfigRouterName=ipxNodeDefaultConfigRouterName, ipxInterfaceTransportTime=ipxInterfaceTransportTime, nlIfIpTable=nlIfIpTable, t1StatsTable=t1StatsTable, nlLlc2HostIndex=nlLlc2HostIndex, portLogicalX25AdminBAG=portLogicalX25AdminBAG, tpAdrEntry=tpAdrEntry, portBsciOperPadType=portBsciOperPadType, portVoiceAdminSuppression=portVoiceAdminSuppression, t1StatsRedAlarms=t1StatsRedAlarms, rlpThreshPercntBufInUse=rlpThreshPercntBufInUse, rlpGroupResponsibility=rlpGroupResponsibility, nlIfIpRIPFullUpdates=nlIfIpRIPFullUpdates, portVoiceOperJitter=portVoiceOperJitter, portStatsTable=portStatsTable, bridgeEnabled=bridgeEnabled, portX25AdminCUGOutAccess=portX25AdminCUGOutAccess, portSdlcOperNrz=portSdlcOperNrz, lSSdlcLlc2OperLanT2=lSSdlcLlc2OperLanT2, lSSdlcLlc2OperIdnum=lSSdlcLlc2OperIdnum, portFrBackupProtEnab=portFrBackupProtEnab)
mibBuilder.exportSymbols("NETLINK-SPECIFIC-MIB", portThreshRxPercentUtl=portThreshRxPercentUtl, t1StatsYellowAlarms=t1StatsYellowAlarms, portBsciAdminNoResponseTimer=portBsciAdminNoResponseTimer, nlIfVoiceFrameRelayPort=nlIfVoiceFrameRelayPort, portBsciAdminPollInterval=portBsciAdminPollInterval, ipxInterfaceSourceCard=ipxInterfaceSourceCard, portBsciAdminStartSynchChars=portBsciAdminStartSynchChars, portX25OperFastSelAccpt=portX25OperFastSelAccpt, lSSdlcLlc2AdminLanTw=lSSdlcLlc2AdminLanTw, nlLlc2HostN3NumberLPDUs=nlLlc2HostN3NumberLPDUs, frStatsTxFECNFrames=frStatsTxFECNFrames, portSdlcOperIdleFillChar=portSdlcOperIdleFillChar, portBsciOperNoResponseRetryCount=portBsciOperNoResponseRetryCount, ipxInterfaceRIPMaxSize=ipxInterfaceRIPMaxSize, lSSdlcLlc2OperLocalMac=lSSdlcLlc2OperLocalMac, ipxInterfaceSAPAgeTimer=ipxInterfaceSAPAgeTimer, nlIfLlc2LANEntry=nlIfLlc2LANEntry, t1StatsPCVRErrs=t1StatsPCVRErrs, bridge=bridge, ipxInterfaceBlockedPortFlag=ipxInterfaceBlockedPortFlag, portVoiceAdminLongDialPrefix=portVoiceAdminLongDialPrefix, nlIfIndex=nlIfIndex, portVoiceOperAutoPollTimer=portVoiceOperAutoPollTimer, portVoiceAdminAutoPoll=portVoiceAdminAutoPoll, portVoiceOperSpeed=portVoiceOperSpeed, portBsciAdminConnector=portBsciAdminConnector, rlpStatsUsedBuffers=rlpStatsUsedBuffers, nlLocalSubscriberRedirectBusy=nlLocalSubscriberRedirectBusy, portVoiceAdminFaxSupported=portVoiceAdminFaxSupported, bsciSubscrAdminEntry=bsciSubscrAdminEntry, nlIfIpSourceDLCI=nlIfIpSourceDLCI, nlLocalSubscriberRowStatus=nlLocalSubscriberRowStatus, bsciSubscrOperAutocall=bsciSubscrOperAutocall, voiceStatsRxCalls=voiceStatsRxCalls, portSdlcOperMAXOut=portSdlcOperMAXOut, ipxInterfaceFrameType=ipxInterfaceFrameType, x25RxFRMRFrames=x25RxFRMRFrames, lSSdlcOperTable=lSSdlcOperTable, nlIfIpSecondaryAddrRouteMetric=nlIfIpSecondaryAddrRouteMetric, portVoiceOperToneType=portVoiceOperToneType, portSdlcOperTable=portSdlcOperTable, portFrRlpIndex=portFrRlpIndex, portVoiceAdminEntry=portVoiceAdminEntry, ipxConfigInterface=ipxConfigInterface, nlLlc2HostBAG=nlLlc2HostBAG, nlIfIpSecondaryAddrRIPSupport=nlIfIpSecondaryAddrRIPSupport, lSSdlcAdminRetryTime=lSSdlcAdminRetryTime, nlIfVoiceEnableFragment=nlIfVoiceEnableFragment, nlLlc2HostSrcMACAddressMask=nlLlc2HostSrcMACAddressMask, portVoiceOperEntry=portVoiceOperEntry, voiceStatsRxClears=voiceStatsRxClears, ipNl=ipNl, nlLlc2OrigConnectionLocalSubscriberId=nlLlc2OrigConnectionLocalSubscriberId, statistics=statistics, lSSdlcLlc2OperLanN2=lSSdlcLlc2OperLanN2, portBsciOperMultidrop=portBsciOperMultidrop, portBsciOperAnswerNonConfigured=portBsciOperAnswerNonConfigured, portPhyX25OperInactivityTimer=portPhyX25OperInactivityTimer, lSSdlcLlc2AdminSuppressXID=lSSdlcLlc2AdminSuppressXID, portVoiceAdminNumDigitsDelete=portVoiceAdminNumDigitsDelete, portSdlcAdminPacketSize=portSdlcAdminPacketSize, voiceSystemVoiceRatesMin=voiceSystemVoiceRatesMin, t1StatsXmitFrames=t1StatsXmitFrames, rlpProtocol=rlpProtocol, portFrGenClock=portFrGenClock, voice=voice, portDLCIIncomingBe=portDLCIIncomingBe, portX25OperTable=portX25OperTable, portVoiceAdminAutoDial=portVoiceAdminAutoDial, portVoiceAdminDTMFOnDuration=portVoiceAdminDTMFOnDuration, nlLocalSubscriberAlgorithm=nlLocalSubscriberAlgorithm, portVoiceAdminForwardedDigits=portVoiceAdminForwardedDigits, ipxConfigRouting=ipxConfigRouting, nlIfLlc2Interfaces=nlIfLlc2Interfaces, portThreshRxErrorRatio=portThreshRxErrorRatio)
