#
# PySNMP MIB module BSTD-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BSTD-OPT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:24:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Unsigned32, IpAddress, Gauge32, enterprises, Integer32, Counter64, MibIdentifier, NotificationType, iso, ObjectIdentity, ModuleIdentity, TimeTicks, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Unsigned32", "IpAddress", "Gauge32", "enterprises", "Integer32", "Counter64", "MibIdentifier", "NotificationType", "iso", "ObjectIdentity", "ModuleIdentity", "TimeTicks", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1))
cdx6500PCTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1))
cdx6500PCTBSTDDeviceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 8))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1))
cdx6500PSTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1))
class DisplayString(OctetString):
    pass

cdx6500PPCTBSTDPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 14), )
if mibBuilder.loadTexts: cdx6500PPCTBSTDPortTable.setStatus('mandatory')
cdx6500PPCTBSTDPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 14, 1), ).setIndexNames((0, "BSTD-OPT-MIB", "cdx6500BSTDCfgPortNumber"))
if mibBuilder.loadTexts: cdx6500PPCTBSTDPortEntry.setStatus('mandatory')
cdx6500BSTDCfgPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDCfgPortNumber.setStatus('mandatory')
cdx6500BSTDCfgPADType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("tpad", 0), ("hpad", 1), ("newvalTpad", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDCfgPADType.setStatus('mandatory')
cdx6500BSTDCfgLineInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("sync", 0), ("async", 1), ("newvalSync", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDCfgLineInterface.setStatus('mandatory')
cdx6500BSTDCfgClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("int", 0), ("ext", 1), ("newvalInt", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDCfgClockSource.setStatus('mandatory')
cdx6500BSTDCfgClockSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 14, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1200, 192000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDCfgClockSpeed.setStatus('mandatory')
cdx6500BSTDCfgSyncContention = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("hdx", 0), ("fdx", 1), ("newvalHdx", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDCfgSyncContention.setStatus('mandatory')
cdx6500BSTDCfgAsyncConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 15, 50))).clone(namedValues=NamedValues(("simp", 0), ("simpa", 15), ("newvalSimp", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDCfgAsyncConnType.setStatus('mandatory')
cdx6500BSTDCfgNumDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 14, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDCfgNumDevices.setStatus('mandatory')
cdx6500BSTDCfgServTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 14, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDCfgServTimer.setStatus('mandatory')
cdx6500BSTDCfgErrThreshCount = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 14, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDCfgErrThreshCount.setStatus('mandatory')
cdx6500BSTDCfgResponseTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 14, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(400, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDCfgResponseTimeout.setStatus('mandatory')
cdx6500BSTDCfgPadProtTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 14, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDCfgPadProtTimeout.setStatus('mandatory')
cdx6500BSTDCfgTranNumbers = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 14, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("disable", 0), ("modulo2", 1), ("newvalDisable", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDCfgTranNumbers.setStatus('mandatory')
cdx6500BSTDCfgContentionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 14, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("newvalDisable", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDCfgContentionMode.setStatus('mandatory')
cdx6500BSTDCfgPortSubAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 14, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDCfgPortSubAddr.setStatus('mandatory')
cdx6500BSTDCfgPortOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 14, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("deprecatedObj", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDCfgPortOptions.setStatus('deprecated')
cdx6500BSTDCfgRestrictConnDest = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 14, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDCfgRestrictConnDest.setStatus('mandatory')
cdx6500BSTDCfgBillRec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 14, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("newvalOff", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDCfgBillRec.setStatus('mandatory')
cdx6500BSTDPortOptString = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 14, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDPortOptString.setStatus('mandatory')
cdx6500BSTDCfgElectricalInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 14, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v24", 1), ("v35", 2), ("v36", 3), ("x21", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDCfgElectricalInterfaceType.setStatus('mandatory')
cdx6500BSTDCfgV24ElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 14, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ri", 1), ("tm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDCfgV24ElectricalInterfaceOption.setStatus('mandatory')
cdx6500BSTDCfgHighSpeedElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 14, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("xover", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDCfgHighSpeedElectricalInterfaceOption.setStatus('mandatory')
cdx6500PBCTBSTDDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 8, 1), )
if mibBuilder.loadTexts: cdx6500PBCTBSTDDeviceTable.setStatus('mandatory')
cdx6500PBCTBSTDDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 8, 1, 1), ).setIndexNames((0, "BSTD-OPT-MIB", "cdx6500BSTDDevPortNumber"), (0, "BSTD-OPT-MIB", "cdx6500BSTDDevEntry"))
if mibBuilder.loadTexts: cdx6500PBCTBSTDDeviceEntry.setStatus('mandatory')
cdx6500BSTDDevPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDDevPortNumber.setStatus('mandatory')
cdx6500BSTDDevEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDDevEntry.setStatus('mandatory')
cdx6500BSTDStationAddr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 8, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDStationAddr1.setStatus('mandatory')
cdx6500BSTDStationAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 8, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDStationAddr2.setStatus('mandatory')
cdx6500BSTDDestStationAddr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 8, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDDestStationAddr1.setStatus('mandatory')
cdx6500BSTDDesstStationAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 8, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDDesstStationAddr2.setStatus('mandatory')
cdx6500BSTDGroupAddr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 8, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDGroupAddr1.setStatus('mandatory')
cdx6500BSTDGroupAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 8, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDGroupAddr2.setStatus('mandatory')
cdx6500BSTDCallMnemonic = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 8, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDCallMnemonic.setStatus('mandatory')
cdx6500BSTDStationEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("newvalNo", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDStationEnabled.setStatus('mandatory')
cdx6500PPSTBSTDPortStatTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 14), )
if mibBuilder.loadTexts: cdx6500PPSTBSTDPortStatTable.setStatus('mandatory')
cdx6500BSTDPortStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 14, 1), ).setIndexNames((0, "BSTD-OPT-MIB", "cdx6500BSTDStatPortNumber"))
if mibBuilder.loadTexts: cdx6500BSTDPortStatEntry.setStatus('mandatory')
cdx6500BSTDStatPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDStatPortNumber.setStatus('mandatory')
cdx6500BSTDPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("busyOut", 2), ("up", 3), ("down", 4), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDPortStatus.setStatus('mandatory')
cdx6500BSTDPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 14, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDPortState.setStatus('mandatory')
cdx6500BSTDPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 14, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDPortSpeed.setStatus('mandatory')
cdx6500BSTDPortUtilIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 14, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDPortUtilIn.setStatus('mandatory')
cdx6500BSTDPortUtilOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 14, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDPortUtilOut.setStatus('mandatory')
cdx6500BSTDInMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 14, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDInMsgs.setStatus('mandatory')
cdx6500BSTDOutMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 14, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDOutMsgs.setStatus('mandatory')
cdx6500BSTDInChars = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 14, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDInChars.setStatus('mandatory')
cdx6500BSTDOutChars = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 14, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDOutChars.setStatus('mandatory')
cdx6500BSTDCharRateIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 14, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDCharRateIn.setStatus('mandatory')
cdx6500BSTDCharRateOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 14, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDCharRateOut.setStatus('mandatory')
cdx6500BSTDCrcBccErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 14, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BSTDCrcBccErrs.setStatus('mandatory')
mibBuilder.exportSymbols("BSTD-OPT-MIB", cdx6500BSTDDesstStationAddr2=cdx6500BSTDDesstStationAddr2, cdx6500BSTDStatPortNumber=cdx6500BSTDStatPortNumber, cdx6500BSTDCfgPadProtTimeout=cdx6500BSTDCfgPadProtTimeout, cdx6500=cdx6500, cdx6500BSTDPortState=cdx6500BSTDPortState, cdx6500BSTDInChars=cdx6500BSTDInChars, cdx6500BSTDPortSpeed=cdx6500BSTDPortSpeed, cdx6500PPCTBSTDPortEntry=cdx6500PPCTBSTDPortEntry, cdxProductSpecific=cdxProductSpecific, cdx6500Statistics=cdx6500Statistics, cdx6500BSTDCfgSyncContention=cdx6500BSTDCfgSyncContention, cdx6500BSTDStationAddr2=cdx6500BSTDStationAddr2, cdx6500BSTDStationEnabled=cdx6500BSTDStationEnabled, cdx6500PPCTBSTDPortTable=cdx6500PPCTBSTDPortTable, cdx6500BSTDCfgHighSpeedElectricalInterfaceOption=cdx6500BSTDCfgHighSpeedElectricalInterfaceOption, cdx6500BSTDCfgServTimer=cdx6500BSTDCfgServTimer, cdx6500PPSTBSTDPortStatTable=cdx6500PPSTBSTDPortStatTable, cdx6500BSTDCfgTranNumbers=cdx6500BSTDCfgTranNumbers, cdx6500BSTDCfgNumDevices=cdx6500BSTDCfgNumDevices, codex=codex, cdx6500PBCTBSTDDeviceEntry=cdx6500PBCTBSTDDeviceEntry, cdx6500BSTDCfgPADType=cdx6500BSTDCfgPADType, cdx6500BSTDCfgContentionMode=cdx6500BSTDCfgContentionMode, cdx6500PBCTBSTDDeviceTable=cdx6500PBCTBSTDDeviceTable, cdx6500BSTDCharRateOut=cdx6500BSTDCharRateOut, cdx6500BSTDCfgClockSpeed=cdx6500BSTDCfgClockSpeed, cdx6500BSTDOutMsgs=cdx6500BSTDOutMsgs, cdx6500BSTDCrcBccErrs=cdx6500BSTDCrcBccErrs, cdx6500BSTDPortUtilIn=cdx6500BSTDPortUtilIn, cdx6500BSTDCfgErrThreshCount=cdx6500BSTDCfgErrThreshCount, cdx6500BSTDCharRateIn=cdx6500BSTDCharRateIn, cdx6500PCTPortProtocolGroup=cdx6500PCTPortProtocolGroup, cdx6500BSTDStationAddr1=cdx6500BSTDStationAddr1, cdx6500Configuration=cdx6500Configuration, cdx6500BSTDCfgClockSource=cdx6500BSTDCfgClockSource, cdx6500BSTDCfgV24ElectricalInterfaceOption=cdx6500BSTDCfgV24ElectricalInterfaceOption, cdx6500PCTBSTDDeviceGroup=cdx6500PCTBSTDDeviceGroup, cdx6500CfgProtocolGroup=cdx6500CfgProtocolGroup, DisplayString=DisplayString, cdx6500BSTDDevPortNumber=cdx6500BSTDDevPortNumber, cdx6500BSTDPortStatus=cdx6500BSTDPortStatus, cdx6500BSTDInMsgs=cdx6500BSTDInMsgs, cdx6500BSTDOutChars=cdx6500BSTDOutChars, cdx6500BSTDCfgAsyncConnType=cdx6500BSTDCfgAsyncConnType, cdx6500BSTDCfgRestrictConnDest=cdx6500BSTDCfgRestrictConnDest, cdx6500BSTDPortUtilOut=cdx6500BSTDPortUtilOut, cdx6500BSTDGroupAddr1=cdx6500BSTDGroupAddr1, cdx6500BSTDCallMnemonic=cdx6500BSTDCallMnemonic, cdx6500BSTDGroupAddr2=cdx6500BSTDGroupAddr2, cdx6500BSTDCfgPortNumber=cdx6500BSTDCfgPortNumber, cdx6500BSTDPortOptString=cdx6500BSTDPortOptString, cdx6500PSTPortProtocolGroup=cdx6500PSTPortProtocolGroup, cdx6500BSTDCfgLineInterface=cdx6500BSTDCfgLineInterface, cdx6500BSTDCfgResponseTimeout=cdx6500BSTDCfgResponseTimeout, cdx6500BSTDCfgPortOptions=cdx6500BSTDCfgPortOptions, cdx6500BSTDCfgBillRec=cdx6500BSTDCfgBillRec, cdx6500BSTDDevEntry=cdx6500BSTDDevEntry, cdx6500BSTDPortStatEntry=cdx6500BSTDPortStatEntry, cdx6500BSTDCfgPortSubAddr=cdx6500BSTDCfgPortSubAddr, cdx6500BSTDCfgElectricalInterfaceType=cdx6500BSTDCfgElectricalInterfaceType, cdx6500BSTDDestStationAddr1=cdx6500BSTDDestStationAddr1, cdx6500StatProtocolGroup=cdx6500StatProtocolGroup)
