#
# PySNMP MIB module ATKKACTN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ATKKACTN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:14:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Gauge32, Integer32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter64, enterprises, Unsigned32, ObjectIdentity, iso, IpAddress, ModuleIdentity, MibIdentifier, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Gauge32", "Integer32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter64", "enterprises", "Unsigned32", "ObjectIdentity", "iso", "IpAddress", "ModuleIdentity", "MibIdentifier", "Bits")
TextualConvention, PhysAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "PhysAddress", "DisplayString")
alliedTelesyn = MibIdentifier((1, 3, 6, 1, 4, 1, 207))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1))
mibObject = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8))
repeaterMib = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 1))
newRepeaterMib = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 1, 20))
acctonHubMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3))
acctonCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 1))
accsystem = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 1, 1))
majorVer = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: majorVer.setStatus('mandatory')
minorVer = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minorVer.setStatus('mandatory')
hardwareVer = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareVer.setStatus('mandatory')
communityMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 1, 2))
communityStringSize = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: communityStringSize.setStatus('mandatory')
communityTableSize = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: communityTableSize.setStatus('mandatory')
communityTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 1, 2, 3), )
if mibBuilder.loadTexts: communityTable.setStatus('mandatory')
communityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 1, 2, 3, 1), ).setIndexNames((0, "ATKKACTN-MIB", "communityIndex"))
if mibBuilder.loadTexts: communityEntry.setStatus('mandatory')
communityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: communityIndex.setStatus('mandatory')
communityString = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 1, 2, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: communityString.setStatus('mandatory')
communityAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: communityAccessMode.setStatus('mandatory')
communityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 1, 2, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: communityStatus.setStatus('mandatory')
trapManagerMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 1, 3))
trapManagerTableSize = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapManagerTableSize.setStatus('mandatory')
trapManagerTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 1, 3, 2), )
if mibBuilder.loadTexts: trapManagerTable.setStatus('mandatory')
trapManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 1, 3, 2, 1), ).setIndexNames((0, "ATKKACTN-MIB", "trapMgrIndex"))
if mibBuilder.loadTexts: trapManagerEntry.setStatus('mandatory')
trapMgrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapMgrIndex.setStatus('mandatory')
trapMgrCommunityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 1, 3, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapMgrCommunityIndex.setStatus('mandatory')
trapMgrIpaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 1, 3, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapMgrIpaddress.setStatus('mandatory')
trapMgrEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("underChange", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapMgrEntryStatus.setStatus('mandatory')
downloadMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 1, 4))
downloadServerIP = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 1, 4, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: downloadServerIP.setStatus('mandatory')
downloadFilename = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 1, 4, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: downloadFilename.setStatus('mandatory')
downloadMode = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permanant", 1), ("temporary", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: downloadMode.setStatus('mandatory')
downloadAction = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("run", 1), ("noRun", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: downloadAction.setStatus('mandatory')
restart = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restart.setStatus('mandatory')
acctest = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 1, 6))
testTrap = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("test", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: testTrap.setStatus('mandatory')
ipxtrapManagerMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 1, 7))
ipxtrapManagerTableSize = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxtrapManagerTableSize.setStatus('mandatory')
ipxtrapManagerTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 1, 7, 2), )
if mibBuilder.loadTexts: ipxtrapManagerTable.setStatus('mandatory')
ipxtrapManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 1, 7, 2, 1), ).setIndexNames((0, "ATKKACTN-MIB", "ipxtrapMgrIndex"))
if mibBuilder.loadTexts: ipxtrapManagerEntry.setStatus('mandatory')
ipxtrapMgrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 1, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxtrapMgrIndex.setStatus('mandatory')
ipxtrapMgrCommunityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 1, 7, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxtrapMgrCommunityIndex.setStatus('mandatory')
ipxtrapMgrNetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 1, 7, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxtrapMgrNetNumber.setStatus('mandatory')
ipxtrapMgrNode = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 1, 7, 2, 1, 4), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxtrapMgrNode.setStatus('mandatory')
ipxtrapMgrEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 1, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxtrapMgrEntryStatus.setStatus('mandatory')
mibBuilder.exportSymbols("ATKKACTN-MIB", acctest=acctest, ipxtrapMgrNode=ipxtrapMgrNode, ipxtrapMgrCommunityIndex=ipxtrapMgrCommunityIndex, ipxtrapMgrNetNumber=ipxtrapMgrNetNumber, accsystem=accsystem, communityTableSize=communityTableSize, trapMgrIndex=trapMgrIndex, downloadServerIP=downloadServerIP, downloadAction=downloadAction, communityTable=communityTable, trapMgrIpaddress=trapMgrIpaddress, downloadMode=downloadMode, communityMgt=communityMgt, trapMgrEntryStatus=trapMgrEntryStatus, communityEntry=communityEntry, downloadMgt=downloadMgt, trapManagerTable=trapManagerTable, repeaterMib=repeaterMib, products=products, ipxtrapMgrEntryStatus=ipxtrapMgrEntryStatus, communityIndex=communityIndex, acctonCommon=acctonCommon, trapMgrCommunityIndex=trapMgrCommunityIndex, ipxtrapManagerTableSize=ipxtrapManagerTableSize, mibObject=mibObject, communityStringSize=communityStringSize, alliedTelesyn=alliedTelesyn, trapManagerEntry=trapManagerEntry, minorVer=minorVer, hardwareVer=hardwareVer, newRepeaterMib=newRepeaterMib, trapManagerMgt=trapManagerMgt, majorVer=majorVer, downloadFilename=downloadFilename, restart=restart, ipxtrapMgrIndex=ipxtrapMgrIndex, communityString=communityString, ipxtrapManagerEntry=ipxtrapManagerEntry, ipxtrapManagerMgt=ipxtrapManagerMgt, testTrap=testTrap, ipxtrapManagerTable=ipxtrapManagerTable, acctonHubMIB=acctonHubMIB, communityStatus=communityStatus, trapManagerTableSize=trapManagerTableSize, communityAccessMode=communityAccessMode)
