#
# PySNMP MIB module CISCO-TRANSACTION-CONNECTION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-TRANSACTION-CONNECTION-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:57:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ModuleIdentity, ObjectIdentity, NotificationType, iso, IpAddress, Gauge32, Unsigned32, TimeTicks, Bits, Integer32, Counter64, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "ObjectIdentity", "NotificationType", "iso", "IpAddress", "Gauge32", "Unsigned32", "TimeTicks", "Bits", "Integer32", "Counter64", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier")
TextualConvention, TimeInterval, TruthValue, DateAndTime, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeInterval", "TruthValue", "DateAndTime", "DisplayString")
ciscoTransactionConnectionMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 144))
ciscoTransactionConnectionMIB.setRevisions(('2005-12-22 00:00', '1999-08-19 00:00',))
if mibBuilder.loadTexts: ciscoTransactionConnectionMIB.setLastUpdated('200512220000Z')
if mibBuilder.loadTexts: ciscoTransactionConnectionMIB.setOrganization('Cisco Systems, Inc.')
ciscoTransConnMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 144, 1))
ctcLicense = ObjectIdentity((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 1))
if mibBuilder.loadTexts: ctcLicense.setStatus('current')
ctcLicenseState = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unconfigured", 1), ("notValidatedYet", 2), ("badKey", 3), ("licenseOK", 4), ("expired", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcLicenseState.setStatus('current')
ctcLicenseKey = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcLicenseKey.setStatus('current')
ctcLicenseMaxConn = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcLicenseMaxConn.setStatus('current')
ctcLicenseCurrConn = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcLicenseCurrConn.setStatus('current')
ctcLicenseExpiration = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcLicenseExpiration.setStatus('current')
ctcDestinationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 2), )
if mibBuilder.loadTexts: ctcDestinationTable.setStatus('current')
ctcDestinationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 2, 1), ).setIndexNames((0, "CISCO-TRANSACTION-CONNECTION-MIB", "ctcDestinationName"))
if mibBuilder.loadTexts: ctcDestinationEntry.setStatus('current')
ctcDestinationName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcDestinationName.setStatus('current')
ctcDestinationRemoteLUName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcDestinationRemoteLUName.setStatus('current')
ctcDestinationModeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcDestinationModeName.setStatus('current')
ctcDestinationNumHits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcDestinationNumHits.setStatus('current')
ctcRouteTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 3), )
if mibBuilder.loadTexts: ctcRouteTable.setStatus('current')
ctcRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ctcRouteEntry.setStatus('current')
ctcRouteOwningServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcRouteOwningServer.setStatus('current')
ctcRouteTransactionID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcRouteTransactionID.setStatus('current')
ctcRouteDestinationName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 3, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcRouteDestinationName.setStatus('current')
ctcServerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 4), )
if mibBuilder.loadTexts: ctcServerTable.setStatus('current')
ctcServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 4, 1), ).setIndexNames((0, "CISCO-TRANSACTION-CONNECTION-MIB", "ctcServerIndex"))
if mibBuilder.loadTexts: ctcServerEntry.setStatus('current')
ctcServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcServerIndex.setStatus('current')
ctcServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 4, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcServerName.setStatus('current')
ctcServerListening = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 4, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcServerListening.setStatus('current')
ctcServerIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 4, 1, 4), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcServerIPAddr.setStatus('current')
ctcServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 4, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1435)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcServerPort.setStatus('current')
ctcServerDestinationName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 4, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcServerDestinationName.setStatus('current')
ctcServerClientTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 4, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcServerClientTimeout.setStatus('current')
ctcServerHostTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 4, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcServerHostTimeout.setStatus('current')
ctcServerWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 4, 1, 9), Unsigned32().clone(4096)).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcServerWindowSize.setStatus('current')
ctcServerConnectionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcServerConnectionCount.setStatus('current')
ctcServerProgNameUpperCase = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 4, 1, 11), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcServerProgNameUpperCase.setStatus('current')
ctcConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 5), )
if mibBuilder.loadTexts: ctcConnectionTable.setStatus('current')
ctcConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ctcConnectionEntry.setStatus('current')
ctcConnectionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 5, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcConnectionId.setStatus('current')
ctcConnectionServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcConnectionServer.setStatus('current')
ctcConnectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("reset", 1), ("closing", 2), ("halt", 3), ("receiving", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcConnectionState.setStatus('current')
ctcConnectionSessionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcConnectionSessionCount.setStatus('current')
ctcConnectionClientIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 5, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcConnectionClientIPAddr.setStatus('current')
ctcConnectionClientPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 5, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcConnectionClientPort.setStatus('current')
ctcConnectionTotalConversations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcConnectionTotalConversations.setStatus('current')
ctcConnectionConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 5, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcConnectionConnectTime.setStatus('current')
ctcConnectionIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 5, 1, 9), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcConnectionIdleTime.setStatus('current')
ctcConnectionTotalBytesRecvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 5, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcConnectionTotalBytesRecvd.setStatus('current')
ctcTransactionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 6), )
if mibBuilder.loadTexts: ctcTransactionTable.setStatus('current')
ctcTransactionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ctcTransactionEntry.setStatus('current')
ctcTransactionSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcTransactionSessionId.setStatus('current')
ctcTransactionServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 6, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcTransactionServer.setStatus('current')
ctcTransactionConnectionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcTransactionConnectionId.setStatus('current')
ctcTransactionState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("reset", 1), ("opening", 2), ("sending", 3), ("receiving", 4), ("exception", 5), ("exceptionresponse", 6), ("closing", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcTransactionState.setStatus('current')
ctcTransactionTPName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 6, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcTransactionTPName.setStatus('current')
ctcTransactionUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 144, 1, 6, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctcTransactionUserId.setStatus('current')
ciscoTransConnMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 144, 3))
ciscoTransConnMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 144, 3, 1))
ciscoTransConnMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 144, 3, 2))
ciscoTransConnMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 144, 3, 1, 1)).setObjects(("CISCO-TRANSACTION-CONNECTION-MIB", "ciscoTransConnLicenseGroup"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ciscoTransConnDestinationGroup"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ciscoTransConnRouteGroup"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ciscoTransConnServerGroup"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ciscoTransConnConnectionGroup"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ciscoTransConnTransactionGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTransConnMIBCompliance = ciscoTransConnMIBCompliance.setStatus('current')
ciscoTransConnLicenseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 144, 3, 2, 1)).setObjects(("CISCO-TRANSACTION-CONNECTION-MIB", "ctcLicenseState"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcLicenseKey"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcLicenseMaxConn"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcLicenseCurrConn"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcLicenseExpiration"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTransConnLicenseGroup = ciscoTransConnLicenseGroup.setStatus('current')
ciscoTransConnDestinationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 144, 3, 2, 2)).setObjects(("CISCO-TRANSACTION-CONNECTION-MIB", "ctcDestinationName"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcDestinationRemoteLUName"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcDestinationModeName"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcDestinationNumHits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTransConnDestinationGroup = ciscoTransConnDestinationGroup.setStatus('current')
ciscoTransConnRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 144, 3, 2, 3)).setObjects(("CISCO-TRANSACTION-CONNECTION-MIB", "ctcRouteOwningServer"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcRouteTransactionID"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcRouteDestinationName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTransConnRouteGroup = ciscoTransConnRouteGroup.setStatus('current')
ciscoTransConnServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 144, 3, 2, 4)).setObjects(("CISCO-TRANSACTION-CONNECTION-MIB", "ctcServerIndex"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcServerName"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcServerListening"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcServerIPAddr"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcServerPort"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcServerDestinationName"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcServerClientTimeout"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcServerHostTimeout"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcServerWindowSize"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcServerConnectionCount"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcServerProgNameUpperCase"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTransConnServerGroup = ciscoTransConnServerGroup.setStatus('current')
ciscoTransConnConnectionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 144, 3, 2, 5)).setObjects(("CISCO-TRANSACTION-CONNECTION-MIB", "ctcConnectionId"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcConnectionServer"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcConnectionState"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcConnectionSessionCount"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcConnectionClientIPAddr"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcConnectionClientPort"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcConnectionTotalConversations"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcConnectionConnectTime"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcConnectionIdleTime"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcConnectionTotalBytesRecvd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTransConnConnectionGroup = ciscoTransConnConnectionGroup.setStatus('current')
ciscoTransConnTransactionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 144, 3, 2, 6)).setObjects(("CISCO-TRANSACTION-CONNECTION-MIB", "ctcTransactionSessionId"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcTransactionServer"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcTransactionConnectionId"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcTransactionState"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcTransactionTPName"), ("CISCO-TRANSACTION-CONNECTION-MIB", "ctcTransactionUserId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTransConnTransactionGroup = ciscoTransConnTransactionGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-TRANSACTION-CONNECTION-MIB", ctcConnectionState=ctcConnectionState, ciscoTransConnRouteGroup=ciscoTransConnRouteGroup, PYSNMP_MODULE_ID=ciscoTransactionConnectionMIB, ctcRouteEntry=ctcRouteEntry, ctcConnectionTotalBytesRecvd=ctcConnectionTotalBytesRecvd, ciscoTransConnTransactionGroup=ciscoTransConnTransactionGroup, ciscoTransConnMIBObjects=ciscoTransConnMIBObjects, ciscoTransactionConnectionMIB=ciscoTransactionConnectionMIB, ctcServerIPAddr=ctcServerIPAddr, ctcServerDestinationName=ctcServerDestinationName, ctcServerName=ctcServerName, ciscoTransConnMIBCompliance=ciscoTransConnMIBCompliance, ctcLicenseKey=ctcLicenseKey, ctcConnectionEntry=ctcConnectionEntry, ctcDestinationTable=ctcDestinationTable, ctcConnectionSessionCount=ctcConnectionSessionCount, ctcTransactionServer=ctcTransactionServer, ctcConnectionClientIPAddr=ctcConnectionClientIPAddr, ctcTransactionUserId=ctcTransactionUserId, ciscoTransConnServerGroup=ciscoTransConnServerGroup, ctcDestinationName=ctcDestinationName, ctcLicenseCurrConn=ctcLicenseCurrConn, ctcConnectionTable=ctcConnectionTable, ctcConnectionId=ctcConnectionId, ctcServerPort=ctcServerPort, ctcConnectionTotalConversations=ctcConnectionTotalConversations, ctcServerEntry=ctcServerEntry, ctcTransactionTable=ctcTransactionTable, ctcRouteDestinationName=ctcRouteDestinationName, ctcDestinationNumHits=ctcDestinationNumHits, ctcTransactionSessionId=ctcTransactionSessionId, ciscoTransConnMIBCompliances=ciscoTransConnMIBCompliances, ctcConnectionServer=ctcConnectionServer, ctcLicenseMaxConn=ctcLicenseMaxConn, ctcServerListening=ctcServerListening, ctcLicenseState=ctcLicenseState, ctcServerHostTimeout=ctcServerHostTimeout, ctcTransactionState=ctcTransactionState, ciscoTransConnLicenseGroup=ciscoTransConnLicenseGroup, ctcServerWindowSize=ctcServerWindowSize, ctcServerIndex=ctcServerIndex, ciscoTransConnMIBGroups=ciscoTransConnMIBGroups, ctcLicense=ctcLicense, ctcConnectionClientPort=ctcConnectionClientPort, ctcRouteTable=ctcRouteTable, ctcServerTable=ctcServerTable, ctcServerConnectionCount=ctcServerConnectionCount, ctcServerClientTimeout=ctcServerClientTimeout, ctcServerProgNameUpperCase=ctcServerProgNameUpperCase, ctcConnectionConnectTime=ctcConnectionConnectTime, ctcRouteTransactionID=ctcRouteTransactionID, ciscoTransConnMIBConformance=ciscoTransConnMIBConformance, ciscoTransConnConnectionGroup=ciscoTransConnConnectionGroup, ctcConnectionIdleTime=ctcConnectionIdleTime, ctcTransactionConnectionId=ctcTransactionConnectionId, ctcLicenseExpiration=ctcLicenseExpiration, ctcDestinationEntry=ctcDestinationEntry, ctcDestinationRemoteLUName=ctcDestinationRemoteLUName, ctcRouteOwningServer=ctcRouteOwningServer, ctcTransactionTPName=ctcTransactionTPName, ctcDestinationModeName=ctcDestinationModeName, ciscoTransConnDestinationGroup=ciscoTransConnDestinationGroup, ctcTransactionEntry=ctcTransactionEntry)
