#
# PySNMP MIB module DEC-ATM-CHASSIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DEC-ATM-CHASSIS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:21:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, iso, MibIdentifier, ModuleIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter32, TimeTicks, IpAddress, ObjectIdentity, Integer32, enterprises, Counter64, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "iso", "MibIdentifier", "ModuleIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter32", "TimeTicks", "IpAddress", "ObjectIdentity", "Integer32", "enterprises", "Counter64", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
dec = MibIdentifier((1, 3, 6, 1, 4, 1, 36))
ema = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2))
decMIBextension = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18))
decAtmChassisMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 30))
decAtmChassisMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1))
decAtmSysGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 1))
decAtmSysType = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("an2", 2), ("gigaswitchAtm", 3), ("hubSwitch", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmSysType.setStatus('mandatory')
decAtmKeyswitchPosition = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noKeyswitch", 1), ("fault", 2), ("secure", 3), ("local", 4), ("remote", 5), ("worldAccess", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmKeyswitchPosition.setStatus('mandatory')
decAtmSlot = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 2))
decAtmSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmSlotNumber.setStatus('mandatory')
decAtmMasterLinecardSlot = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmMasterLinecardSlot.setStatus('mandatory')
decAtmStandbyLinecardSlot = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmStandbyLinecardSlot.setStatus('mandatory')
decAtmSlotTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 2, 4), )
if mibBuilder.loadTexts: decAtmSlotTable.setStatus('mandatory')
decAtmSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 2, 4, 1), ).setIndexNames((0, "DEC-ATM-CHASSIS-MIB", "decAtmSlotIndex"))
if mibBuilder.loadTexts: decAtmSlotEntry.setStatus('mandatory')
decAtmSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmSlotIndex.setStatus('mandatory')
decAtmCardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notPresent", 1), ("powerDown", 2), ("powerUp", 3), ("powerDownThenUp", 4), ("fault", 5), ("revisionMismatch", 6), ("selfTestInProgress", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decAtmCardStatus.setStatus('mandatory')
decAtmCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("other", 2), ("clockCard", 3), ("qlc10", 4), ("qlc15", 5), ("qlc16", 6), ("qlc20", 7), ("qlc622", 8), ("hubSwitch", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmCardType.setStatus('mandatory')
decAtmCardHasModPhys = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmCardHasModPhys.setStatus('mandatory')
decAtmCardHwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 2, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmCardHwRev.setStatus('mandatory')
decAtmCardFwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 2, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmCardFwRev.setStatus('mandatory')
decAtmCardFault = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmCardFault.setStatus('mandatory')
decAtmPort = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 3))
decAtmPortTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 3, 1), )
if mibBuilder.loadTexts: decAtmPortTable.setStatus('mandatory')
decAtmPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 3, 1, 1), ).setIndexNames((0, "DEC-ATM-CHASSIS-MIB", "decAtmSlotIndex"), (0, "DEC-ATM-CHASSIS-MIB", "decAtmPortIndex"))
if mibBuilder.loadTexts: decAtmPortEntry.setStatus('mandatory')
decAtmPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmPortIndex.setStatus('mandatory')
decAtmPortConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("other", 1), ("notPresent", 2), ("sts3cSingleModeFiber", 3), ("sts3cMultiModeFiber", 4), ("sts3cTwistedPair", 5), ("t3", 6), ("e3", 7), ("e1", 8), ("sts1TwistedPair", 9), ("e3Hdlc", 10), ("e3Proto", 11), ("sts12cSingleModeFiber", 12), ("sts12cMultiModeFiber", 13), ("t1", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmPortConnector.setStatus('mandatory')
decAtmLed = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 4))
decAtmSlotLedTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 4, 1), )
if mibBuilder.loadTexts: decAtmSlotLedTable.setStatus('mandatory')
decAtmSlotLedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 4, 1, 1), ).setIndexNames((0, "DEC-ATM-CHASSIS-MIB", "decAtmSlotIndex"), (0, "DEC-ATM-CHASSIS-MIB", "decAtmSlotLedIndex"))
if mibBuilder.loadTexts: decAtmSlotLedEntry.setStatus('mandatory')
decAtmSlotLedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmSlotLedIndex.setStatus('mandatory')
decAtmSlotLedDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmSlotLedDescr.setStatus('mandatory')
decAtmSlotLedProgram = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmSlotLedProgram.setStatus('mandatory')
decAtmPortLedTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 4, 2), )
if mibBuilder.loadTexts: decAtmPortLedTable.setStatus('mandatory')
decAtmPortLedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 4, 2, 1), ).setIndexNames((0, "DEC-ATM-CHASSIS-MIB", "decAtmSlotIndex"), (0, "DEC-ATM-CHASSIS-MIB", "decAtmPortIndex"), (0, "DEC-ATM-CHASSIS-MIB", "decAtmPortLedIndex"))
if mibBuilder.loadTexts: decAtmPortLedEntry.setStatus('mandatory')
decAtmPortLedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmPortLedIndex.setStatus('mandatory')
decAtmPortLedDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmPortLedDescr.setStatus('mandatory')
decAtmPortLedProgram = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 4, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmPortLedProgram.setStatus('mandatory')
decAtmLedInterestingChanges = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmLedInterestingChanges.setStatus('mandatory')
decAtmClockCard = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 5))
decAtmMgmtMemoryAvail = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmMgmtMemoryAvail.setStatus('mandatory')
decAtmMgmtMemoryAction = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("rewrite", 2), ("rewriting", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decAtmMgmtMemoryAction.setStatus('mandatory')
decGigaAtmIntEthPktsSent = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decGigaAtmIntEthPktsSent.setStatus('mandatory')
decGigaAtmIntEthPktsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decGigaAtmIntEthPktsRcvd.setStatus('mandatory')
decGigaAtmExtEthPktsSent = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decGigaAtmExtEthPktsSent.setStatus('mandatory')
decGigaAtmExtEthPktsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decGigaAtmExtEthPktsRcvd.setStatus('mandatory')
decAtmPsc = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 6))
decAtmPscStatus = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notPresent", 1), ("okay", 2), ("fault", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmPscStatus.setStatus('mandatory')
decAtmPscFwRev = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 6, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmPscFwRev.setStatus('mandatory')
decAtmPscHwRev = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 6, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmPscHwRev.setStatus('mandatory')
decAtmPscFwImageStatus = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("okay", 1), ("downloadRequired", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmPscFwImageStatus.setStatus('mandatory')
decAtmPscBackplaneStatus = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("okay", 1), ("fault", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmPscBackplaneStatus.setStatus('mandatory')
decAtmPscFaultLedProgram = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 6, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmPscFaultLedProgram.setStatus('mandatory')
decAtmPowerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 7))
decAtmPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 7, 1), )
if mibBuilder.loadTexts: decAtmPowerSupplyTable.setStatus('mandatory')
decAtmPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 7, 1, 1), ).setIndexNames((0, "DEC-ATM-CHASSIS-MIB", "decAtmPowerIndex"))
if mibBuilder.loadTexts: decAtmPowerSupplyEntry.setStatus('mandatory')
decAtmPowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmPowerIndex.setStatus('mandatory')
decAtmPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notPresent", 1), ("okay", 2), ("fault", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmPowerStatus.setStatus('mandatory')
decAtmPowerInputSource = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("acLine", 1), ("dc48V", 2), ("decHub", 3), ("none", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmPowerInputSource.setStatus('mandatory')
decAtmPowerVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmPowerVoltage.setStatus('mandatory')
decAtmPowerOutputInWatts = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 7, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decAtmPowerOutputInWatts.setStatus('mandatory')
decAtmPowerFaultLedProgram = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 7, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmPowerFaultLedProgram.setStatus('mandatory')
decAtmPowerOkLedProgram = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 7, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmPowerOkLedProgram.setStatus('mandatory')
decAtmBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 8))
decAtmBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notPresent", 1), ("okay", 2), ("fault", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmBatteryStatus.setStatus('mandatory')
decAtmBatteryUsing = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("batteryPower", 1), ("externalPower", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmBatteryUsing.setStatus('mandatory')
decAtmBatteryCharge = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fullyCharged", 1), ("okay", 2), ("low", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmBatteryCharge.setStatus('mandatory')
decAtmBatteryTest = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pass", 1), ("fail", 2), ("test", 3), ("notTested", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decAtmBatteryTest.setStatus('mandatory')
decAtmTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 9))
decAtmCabinetTemperature = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("normal", 1), ("high", 2), ("excessivelyHigh", 3), ("low", 4), ("excessivelyLow", 5), ("noSensor", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmCabinetTemperature.setStatus('mandatory')
decAtmTemperatureWarning = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("heedWarning", 1), ("ignoreWarning", 2), ("noWarningFeature", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decAtmTemperatureWarning.setStatus('mandatory')
decAtmTemperatureLedProgram = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 9, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmTemperatureLedProgram.setStatus('mandatory')
decAtmFan = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 10))
decAtmFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("maximum", 1), ("normal", 2), ("unknown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decAtmFanSpeed.setStatus('mandatory')
decAtmFanTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 10, 2), )
if mibBuilder.loadTexts: decAtmFanTable.setStatus('mandatory')
decAtmFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 10, 2, 1), ).setIndexNames((0, "DEC-ATM-CHASSIS-MIB", "decAtmFanIndex"))
if mibBuilder.loadTexts: decAtmFanEntry.setStatus('mandatory')
decAtmFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmFanIndex.setStatus('mandatory')
decAtmFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notPresent", 1), ("okay", 2), ("fault", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmFanStatus.setStatus('mandatory')
decAtmFanFaultLedProgram = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 10, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmFanFaultLedProgram.setStatus('mandatory')
decAtmFppnTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 11), )
if mibBuilder.loadTexts: decAtmFppnTable.setStatus('mandatory')
decAtmFppnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 11, 1), ).setIndexNames((0, "DEC-ATM-CHASSIS-MIB", "decAtmFppnSlotNumber"), (0, "DEC-ATM-CHASSIS-MIB", "decAtmFppnPortOfThatSlot"))
if mibBuilder.loadTexts: decAtmFppnEntry.setStatus('mandatory')
decAtmFppnSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmFppnSlotNumber.setStatus('mandatory')
decAtmFppnPortOfThatSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmFppnPortOfThatSlot.setStatus('mandatory')
decAtmFppnIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmFppnIfIndex.setStatus('mandatory')
decAtmUpgradeSoftware = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 12))
decAtmLoad = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 12, 1))
decAtmLoadAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("start-reboot", 2), ("start-read-BootP", 3), ("start-read-TFTP", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decAtmLoadAdminStatus.setStatus('mandatory')
decAtmLoadOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("success", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmLoadOperStatus.setStatus('mandatory')
decAtmLoadFilename = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 12, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decAtmLoadFilename.setStatus('mandatory')
decAtmLoadIpHostAddr = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 12, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decAtmLoadIpHostAddr.setStatus('mandatory')
decAtmLoadDevSpecific = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 12, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decAtmLoadDevSpecific.setStatus('mandatory')
decAtmConfigIpHostAddr = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 12, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decAtmConfigIpHostAddr.setStatus('mandatory')
decAtmConfigDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 12, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decAtmConfigDefaultGateway.setStatus('mandatory')
decAtmConfigFilename = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 12, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decAtmConfigFilename.setStatus('mandatory')
decAtmConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 30, 1, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("start-read", 2), ("start-write", 3), ("start-read-inprogress", 4), ("start-read-complete", 5), ("start-write-inprogress", 6), ("start-write-complete", 7), ("read-error", 8), ("write-error", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decAtmConfigStatus.setStatus('mandatory')
mibBuilder.exportSymbols("DEC-ATM-CHASSIS-MIB", decAtmPortEntry=decAtmPortEntry, decAtmPort=decAtmPort, decAtmBatteryCharge=decAtmBatteryCharge, decAtmLed=decAtmLed, decAtmSysGroup=decAtmSysGroup, decAtmLoadOperStatus=decAtmLoadOperStatus, decAtmPowerInputSource=decAtmPowerInputSource, decAtmPowerSupplyTable=decAtmPowerSupplyTable, decAtmPowerVoltage=decAtmPowerVoltage, decAtmFppnTable=decAtmFppnTable, decAtmStandbyLinecardSlot=decAtmStandbyLinecardSlot, decAtmPscFwImageStatus=decAtmPscFwImageStatus, decAtmPowerStatus=decAtmPowerStatus, decAtmLoadAdminStatus=decAtmLoadAdminStatus, decAtmPscFwRev=decAtmPscFwRev, decAtmMasterLinecardSlot=decAtmMasterLinecardSlot, decAtmPortIndex=decAtmPortIndex, decAtmSlotLedDescr=decAtmSlotLedDescr, decAtmMgmtMemoryAction=decAtmMgmtMemoryAction, decAtmPowerOutputInWatts=decAtmPowerOutputInWatts, decAtmBatteryTest=decAtmBatteryTest, decAtmFanTable=decAtmFanTable, decGigaAtmIntEthPktsSent=decGigaAtmIntEthPktsSent, decAtmBattery=decAtmBattery, decAtmPortLedIndex=decAtmPortLedIndex, decAtmPowerIndex=decAtmPowerIndex, decAtmClockCard=decAtmClockCard, decAtmPowerSupply=decAtmPowerSupply, decAtmPortConnector=decAtmPortConnector, decAtmCardFault=decAtmCardFault, decAtmMgmtMemoryAvail=decAtmMgmtMemoryAvail, decAtmSlotLedIndex=decAtmSlotLedIndex, decAtmFppnSlotNumber=decAtmFppnSlotNumber, decAtmLedInterestingChanges=decAtmLedInterestingChanges, decAtmCardStatus=decAtmCardStatus, decAtmPowerFaultLedProgram=decAtmPowerFaultLedProgram, decAtmFanFaultLedProgram=decAtmFanFaultLedProgram, ema=ema, decAtmPscBackplaneStatus=decAtmPscBackplaneStatus, decGigaAtmExtEthPktsSent=decGigaAtmExtEthPktsSent, decAtmSlotNumber=decAtmSlotNumber, decAtmConfigFilename=decAtmConfigFilename, decAtmPortLedDescr=decAtmPortLedDescr, decAtmFppnEntry=decAtmFppnEntry, decAtmLoad=decAtmLoad, decAtmLoadIpHostAddr=decAtmLoadIpHostAddr, decAtmTemperatureWarning=decAtmTemperatureWarning, decAtmPortLedEntry=decAtmPortLedEntry, decAtmFan=decAtmFan, decAtmPowerSupplyEntry=decAtmPowerSupplyEntry, decAtmPortTable=decAtmPortTable, decAtmPowerOkLedProgram=decAtmPowerOkLedProgram, decAtmFanSpeed=decAtmFanSpeed, decAtmBatteryUsing=decAtmBatteryUsing, decAtmPscHwRev=decAtmPscHwRev, decAtmConfigStatus=decAtmConfigStatus, decAtmCabinetTemperature=decAtmCabinetTemperature, decAtmSlotEntry=decAtmSlotEntry, decAtmConfigDefaultGateway=decAtmConfigDefaultGateway, decAtmFanStatus=decAtmFanStatus, decAtmKeyswitchPosition=decAtmKeyswitchPosition, decAtmSlotLedProgram=decAtmSlotLedProgram, decAtmTemperatureLedProgram=decAtmTemperatureLedProgram, decAtmLoadFilename=decAtmLoadFilename, decAtmLoadDevSpecific=decAtmLoadDevSpecific, decAtmPortLedTable=decAtmPortLedTable, decAtmFppnPortOfThatSlot=decAtmFppnPortOfThatSlot, decAtmChassisMIB=decAtmChassisMIB, decAtmUpgradeSoftware=decAtmUpgradeSoftware, decAtmSlotIndex=decAtmSlotIndex, decAtmChassisMIBObjects=decAtmChassisMIBObjects, decAtmPscStatus=decAtmPscStatus, decAtmFppnIfIndex=decAtmFppnIfIndex, decAtmTemperature=decAtmTemperature, decAtmPscFaultLedProgram=decAtmPscFaultLedProgram, decAtmSlotTable=decAtmSlotTable, decAtmCardHasModPhys=decAtmCardHasModPhys, decAtmFanEntry=decAtmFanEntry, decAtmCardType=decAtmCardType, decAtmSlot=decAtmSlot, decAtmConfigIpHostAddr=decAtmConfigIpHostAddr, decAtmSlotLedTable=decAtmSlotLedTable, decAtmSysType=decAtmSysType, dec=dec, decGigaAtmExtEthPktsRcvd=decGigaAtmExtEthPktsRcvd, decAtmSlotLedEntry=decAtmSlotLedEntry, decMIBextension=decMIBextension, decAtmFanIndex=decAtmFanIndex, decAtmBatteryStatus=decAtmBatteryStatus, decAtmPsc=decAtmPsc, decAtmCardFwRev=decAtmCardFwRev, decGigaAtmIntEthPktsRcvd=decGigaAtmIntEthPktsRcvd, decAtmPortLedProgram=decAtmPortLedProgram, decAtmCardHwRev=decAtmCardHwRev)
