#
# PySNMP MIB module SWITCH-VLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SWITCH-VLAN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:05:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Gauge32, Counter64, NotificationType, IpAddress, Integer32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Bits, ModuleIdentity, Counter32, iso, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Gauge32", "Counter64", "NotificationType", "IpAddress", "Integer32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Bits", "ModuleIdentity", "Counter32", "iso", "MibIdentifier")
RowStatus, TextualConvention, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString", "MacAddress")
vLanModule, = mibBuilder.importSymbols("TELESYN-ATI-TC", "vLanModule")
switchVlanMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2))
switchVlanMib.setRevisions(('1997-04-10 16:00', '1997-02-12 16:00', '1996-11-07 16:00',))
if mibBuilder.loadTexts: switchVlanMib.setLastUpdated('9704101600Z')
if mibBuilder.loadTexts: switchVlanMib.setOrganization('')
vLanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 1))
vRouterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 2))
physicalPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 3))
virtualPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 4))
ipRouteCacheGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 5))
class AtmVci(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 1023)

class VlanAdminStatusCode(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("disable", 1), ("enable", 2))

class VlanOperStatusCode(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("down", 1), ("up", 2))

class VlanMode(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 3, 4))
    namedValues = NamedValues(("unknown", 1), ("standard", 3), ("atmCIP", 4))

class PortFuncCode(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("unknown", 1), ("router", 2), ("bridge", 3), ("trunk", 4), ("atmLane", 5), ("atmMux", 6), ("cip", 7), ("pt2Pt", 8))

class MACLayerCode(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 0), ("none", 1), ("ethernet", 2), ("ieee802d3", 3), ("ieee802d5", 4), ("fddi", 5))

class PhyPortMediaTypeCode(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))
    namedValues = NamedValues(("unknown", 1), ("other", 2), ("eth10", 3), ("eth100", 4), ("tr4", 5), ("tr16", 6), ("fddi", 7), ("cddi", 8), ("atm25", 9), ("atm50", 10), ("ds1", 11), ("ds3", 12), ("oc3", 13), ("oc12", 14), ("oc48", 15), ("wan", 16), ("eth100F", 17))

vLanTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 1, 1), )
if mibBuilder.loadTexts: vLanTable.setStatus('current')
vLanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 1, 1, 1), ).setIndexNames((0, "SWITCH-VLAN-MIB", "vLanNumber"))
if mibBuilder.loadTexts: vLanEntry.setStatus('current')
vLanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: vLanNumber.setStatus('current')
vLanMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLanMembers.setStatus('current')
vLanDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vLanDescription.setStatus('current')
vLanAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 1, 1, 1, 6), VlanAdminStatusCode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vLanAdminStatus.setStatus('current')
vLanOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 1, 1, 1, 7), VlanOperStatusCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vLanOperStatus.setStatus('current')
vLanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 1, 1, 1, 8), VlanMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vLanMode.setStatus('deprecated')
vLanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 1, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vLanRowStatus.setStatus('current')
vRouterTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 2, 1), )
if mibBuilder.loadTexts: vRouterTable.setStatus('current')
vRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 2, 1, 1), ).setIndexNames((0, "SWITCH-VLAN-MIB", "vLanNumber"))
if mibBuilder.loadTexts: vRouterEntry.setStatus('current')
vRouterProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRouterProtocol.setStatus('current')
vRouterIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 2, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRouterIpAddress.setStatus('current')
vRouterSubNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 2, 1, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRouterSubNetMask.setStatus('current')
vRouterBcastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 2, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRouterBcastAddress.setStatus('current')
vRouterDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRouterDescription.setStatus('current')
vRouterAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 2, 1, 1, 6), VlanAdminStatusCode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRouterAdminStatus.setStatus('current')
vRouterOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 2, 1, 1, 7), VlanOperStatusCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRouterOperStatus.setStatus('current')
vRouterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 2, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRouterRowStatus.setStatus('current')
vRouterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 2, 1, 1, 9), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRouterIfIndex.setStatus('current')
vRouterRipMode = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("silent", 1), ("active", 2), ("deaf", 3), ("inactive", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRouterRipMode.setStatus('current')
pPortTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 3, 1), )
if mibBuilder.loadTexts: pPortTable.setStatus('current')
pPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 3, 1, 1), ).setIndexNames((0, "SWITCH-VLAN-MIB", "pPortNumber"))
if mibBuilder.loadTexts: pPortEntry.setStatus('current')
pPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: pPortNumber.setStatus('current')
pPortMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 3, 1, 1, 2), PhyPortMediaTypeCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pPortMediaType.setStatus('current')
pPortDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pPortDescription.setStatus('current')
pPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 3, 1, 1, 4), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pPortIfIndex.setStatus('current')
pPortDuplexity = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("halfDuplex", 1), ("fullDuplex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pPortDuplexity.setStatus('current')
pPortAutoNegotiate = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pPortAutoNegotiate.setStatus('current')
pPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 3, 1, 1, 7), VlanAdminStatusCode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pPortAdminStatus.setStatus('current')
pPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 3, 1, 1, 8), VlanOperStatusCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pPortOperStatus.setStatus('current')
pPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 3, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pPortSpeed.setStatus('current')
pPortCountersStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pPortCountersStatus.setStatus('current')
pEtherCountersStatus = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pEtherCountersStatus.setStatus('current')
pStatsPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pStatsPollInterval.setStatus('current')
vPortTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 4, 1), )
if mibBuilder.loadTexts: vPortTable.setStatus('current')
vPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 4, 1, 1), ).setIndexNames((0, "SWITCH-VLAN-MIB", "vPortNumber"))
if mibBuilder.loadTexts: vPortEntry.setStatus('current')
vPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: vPortNumber.setStatus('current')
vPortPhyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortPhyPort.setStatus('current')
vPortFuncType = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 4, 1, 1, 3), PortFuncCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortFuncType.setStatus('current')
vPortVlanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortVlanNumber.setStatus('current')
vPortDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortDomain.setStatus('current')
vPortMACaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 4, 1, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortMACaddress.setStatus('current')
vPortDefaultMacLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 4, 1, 1, 7), MACLayerCode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortDefaultMacLayer.setStatus('current')
vPortBridgeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("autoSwitch", 2), ("forceBridge", 3), ("forceSwitch", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortBridgeMode.setStatus('deprecated')
vPortSwitchTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortSwitchTimer.setStatus('deprecated')
vPortDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 4, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortDescription.setStatus('current')
vPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 4, 1, 1, 11), VlanAdminStatusCode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vPortAdminStatus.setStatus('current')
vPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 4, 1, 1, 12), VlanOperStatusCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortOperStatus.setStatus('current')
vPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 4, 1, 1, 13), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vPortIfIndex.setStatus('current')
ipRouteState = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipForwarding", 1), ("ipRouteCacheForward", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouteState.setStatus('current')
ipRouteCacheTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 5, 2), )
if mibBuilder.loadTexts: ipRouteCacheTable.setStatus('current')
ipRouteCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 5, 2, 1), ).setIndexNames((0, "SWITCH-VLAN-MIB", "ipRouteCacheIndex"))
if mibBuilder.loadTexts: ipRouteCacheEntry.setStatus('current')
ipRouteCacheIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteCacheIndex.setStatus('current')
ipRouteCacheDstIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 5, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteCacheDstIpAddress.setStatus('current')
ipRouteCacheSrcIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 5, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteCacheSrcIpAddress.setStatus('current')
ipRouteCacheDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteCacheDstPort.setStatus('current')
ipRouteCacheSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteCacheSrcPort.setStatus('current')
ipRouteCacheMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("vlan", 2), ("cip", 3), ("ptop", 4), ("csr", 5), ("fddi", 6), ("atmtrunk", 7), ("fdditrunk", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteCacheMedia.setStatus('current')
ipRouteCacheVPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteCacheVPortNumber.setStatus('current')
ipRouteCacheVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 9, 2, 5, 2, 5, 2, 1, 8), AtmVci()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteCacheVCI.setStatus('current')
mibBuilder.exportSymbols("SWITCH-VLAN-MIB", pPortDuplexity=pPortDuplexity, ipRouteCacheSrcPort=ipRouteCacheSrcPort, vLanNumber=vLanNumber, vRouterEntry=vRouterEntry, vPortFuncType=vPortFuncType, ipRouteCacheSrcIpAddress=ipRouteCacheSrcIpAddress, PhyPortMediaTypeCode=PhyPortMediaTypeCode, VlanOperStatusCode=VlanOperStatusCode, vRouterOperStatus=vRouterOperStatus, pPortDescription=pPortDescription, vPortEntry=vPortEntry, ipRouteCacheDstPort=ipRouteCacheDstPort, ipRouteCacheVPortNumber=ipRouteCacheVPortNumber, vLanOperStatus=vLanOperStatus, vRouterIfIndex=vRouterIfIndex, pPortNumber=pPortNumber, vLanGroup=vLanGroup, vLanAdminStatus=vLanAdminStatus, MACLayerCode=MACLayerCode, vPortSwitchTimer=vPortSwitchTimer, physicalPortGroup=physicalPortGroup, vPortAdminStatus=vPortAdminStatus, switchVlanMib=switchVlanMib, vPortNumber=vPortNumber, vRouterProtocol=vRouterProtocol, pPortEntry=pPortEntry, pPortAutoNegotiate=pPortAutoNegotiate, ipRouteState=ipRouteState, vRouterDescription=vRouterDescription, pPortAdminStatus=pPortAdminStatus, vRouterTable=vRouterTable, ipRouteCacheGroup=ipRouteCacheGroup, pEtherCountersStatus=pEtherCountersStatus, vPortIfIndex=vPortIfIndex, PYSNMP_MODULE_ID=switchVlanMib, vPortBridgeMode=vPortBridgeMode, ipRouteCacheMedia=ipRouteCacheMedia, pPortSpeed=pPortSpeed, vRouterBcastAddress=vRouterBcastAddress, vPortPhyPort=vPortPhyPort, vRouterGroup=vRouterGroup, AtmVci=AtmVci, vRouterIpAddress=vRouterIpAddress, pPortTable=pPortTable, ipRouteCacheDstIpAddress=ipRouteCacheDstIpAddress, ipRouteCacheTable=ipRouteCacheTable, pPortIfIndex=pPortIfIndex, vPortMACaddress=vPortMACaddress, vRouterAdminStatus=vRouterAdminStatus, vRouterRowStatus=vRouterRowStatus, vPortTable=vPortTable, vPortVlanNumber=vPortVlanNumber, vPortDomain=vPortDomain, VlanMode=VlanMode, PortFuncCode=PortFuncCode, vLanMode=vLanMode, VlanAdminStatusCode=VlanAdminStatusCode, pPortCountersStatus=pPortCountersStatus, pStatsPollInterval=pStatsPollInterval, vRouterRipMode=vRouterRipMode, virtualPortGroup=virtualPortGroup, vPortDefaultMacLayer=vPortDefaultMacLayer, vRouterSubNetMask=vRouterSubNetMask, vPortOperStatus=vPortOperStatus, vLanTable=vLanTable, pPortMediaType=pPortMediaType, ipRouteCacheIndex=ipRouteCacheIndex, vLanMembers=vLanMembers, vLanDescription=vLanDescription, pPortOperStatus=pPortOperStatus, vLanRowStatus=vLanRowStatus, ipRouteCacheEntry=ipRouteCacheEntry, ipRouteCacheVCI=ipRouteCacheVCI, vPortDescription=vPortDescription, vLanEntry=vLanEntry)
