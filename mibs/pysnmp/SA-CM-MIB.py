#
# PySNMP MIB module SA-CM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SA-CM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:51:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddress, InetAddressType, InetPortNumber = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType", "InetPortNumber")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Bits, Unsigned32, iso, Counter64, Integer32, MibIdentifier, enterprises, ObjectIdentity, TimeTicks, NotificationType, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Gauge32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Unsigned32", "iso", "Counter64", "Integer32", "MibIdentifier", "enterprises", "ObjectIdentity", "TimeTicks", "NotificationType", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Gauge32", "Counter32")
TruthValue, TAddress, DisplayString, DateAndTime, MacAddress, TDomain, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TAddress", "DisplayString", "DateAndTime", "MacAddress", "TDomain", "RowStatus", "TextualConvention")
sa = MibIdentifier((1, 3, 6, 1, 4, 1, 1429))
saCmMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 1429, 77))
saCmMib.setRevisions(('2016-05-18 00:00', '2015-05-26 00:00',))
if mibBuilder.loadTexts: saCmMib.setLastUpdated('201505260000Z')
if mibBuilder.loadTexts: saCmMib.setOrganization('Cisco Systems, Inc.')
dpxCmMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1429, 77, 1))
cmVendorInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1429, 77, 1, 2))
cmAPInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1429, 77, 1, 3))
cmInterfaceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1429, 77, 1, 4))
vendorDefaultDSfreq = MibScalar((1, 3, 6, 1, 4, 1, 1429, 77, 1, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(93000000, 855000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vendorDefaultDSfreq.setStatus('current')
vendorDSLEDTreatment = MibScalar((1, 3, 6, 1, 4, 1, 1429, 77, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("signalNB", 0), ("signalWB", 1), ("signalWBNBG", 2), ("signalWBNBA", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vendorDSLEDTreatment.setStatus('current')
vendorLINKLEDTreatment = MibScalar((1, 3, 6, 1, 4, 1, 1429, 77, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("default", 0), ("showlinkspeed", 1), ("d3Amberledslowspeed", 2), ("d3Greenledslowspeed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vendorLINKLEDTreatment.setStatus('current')
vendorUSLEDTreatment = MibScalar((1, 3, 6, 1, 4, 1, 1429, 77, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("signalWBNBG", 0), ("signalNB", 1), ("signalWB", 2), ("signalWBNBA", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vendorUSLEDTreatment.setStatus('current')
vendorONLINELEDTreatment = MibScalar((1, 3, 6, 1, 4, 1, 1429, 77, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("signalWBNBG", 0), ("signalNB", 1), ("signalWB", 2), ("signalWBNBA", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vendorONLINELEDTreatment.setStatus('current')
cmAPIgmp = MibScalar((1, 3, 6, 1, 4, 1, 1429, 77, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disableIGMP", 0), ("enableIGMP", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAPIgmp.setStatus('current')
cmAPAgingOut = MibScalar((1, 3, 6, 1, 4, 1, 1429, 77, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disableAgingOut", 0), ("enableAgingOut", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAPAgingOut.setStatus('current')
cmAPMulticastPromiscuousMode = MibScalar((1, 3, 6, 1, 4, 1, 1429, 77, 1, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAPMulticastPromiscuousMode.setStatus('current')
cmAPInternalInterface = MibScalar((1, 3, 6, 1, 4, 1, 1429, 77, 1, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAPInternalInterface.setStatus('current')
cmAPFactoryReset = MibScalar((1, 3, 6, 1, 4, 1, 1429, 77, 1, 3, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAPFactoryReset.setStatus('current')
saCmArpRateLimit = MibScalar((1, 3, 6, 1, 4, 1, 1429, 77, 1, 3, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('packets-per-second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: saCmArpRateLimit.setStatus('current')
saCmInternalDhcpServer = MibScalar((1, 3, 6, 1, 4, 1, 1429, 77, 1, 3, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saCmInternalDhcpServer.setStatus('current')
cmConsoleMode = MibScalar((1, 3, 6, 1, 4, 1, 1429, 77, 1, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("readOnly", 1), ("readWrite", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmConsoleMode.setStatus('current')
cmTimerT4 = MibScalar((1, 3, 6, 1, 4, 1, 1429, 77, 1, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 60)).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTimerT4.setStatus('current')
saCmTodRenewal = MibScalar((1, 3, 6, 1, 4, 1, 1429, 77, 1, 4, 9), Integer32()).setUnits('hours').setMaxAccess("readwrite")
if mibBuilder.loadTexts: saCmTodRenewal.setStatus('current')
saCmAutoResetNoActivity = MibScalar((1, 3, 6, 1, 4, 1, 1429, 77, 1, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 43200))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: saCmAutoResetNoActivity.setStatus('current')
saCmCpeMacAging = MibScalar((1, 3, 6, 1, 4, 1, 1429, 77, 1, 4, 11), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: saCmCpeMacAging.setStatus('current')
saCmBpiForward = MibScalar((1, 3, 6, 1, 4, 1, 1429, 77, 1, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("macTable", 1), ("allPackets", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saCmBpiForward.setStatus('current')
saCmForceDualscan = MibScalar((1, 3, 6, 1, 4, 1, 1429, 77, 1, 4, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("useFactorySetting", 0), ("enable", 1), ("docsis1", 2), ("euroDocsis", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saCmForceDualscan.setStatus('current')
saCmDsBonding = MibScalar((1, 3, 6, 1, 4, 1, 1429, 77, 1, 4, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("enable2DS", 2), ("enable3DS", 3), ("enable4DS", 4), ("enable5DS", 5), ("enable6DS", 6), ("enable7DS", 7), ("enable8DS", 8))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saCmDsBonding.setStatus('current')
saCmDocsisCapableVersion = MibScalar((1, 3, 6, 1, 4, 1, 1429, 77, 1, 4, 33), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saCmDocsisCapableVersion.setStatus('current')
saOorDsidOverride = MibScalar((1, 3, 6, 1, 4, 1, 1429, 77, 1, 4, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saOorDsidOverride.setStatus('current')
saCmCpeL2VpnMacAging = MibScalar((1, 3, 6, 1, 4, 1, 1429, 77, 1, 4, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saCmCpeL2VpnMacAging.setStatus('current')
saCmL2VpnUsForwardingCriteria = MibScalar((1, 3, 6, 1, 4, 1, 1429, 77, 1, 4, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("forwardOnPrimarySF", 0), ("discard", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saCmL2VpnUsForwardingCriteria.setStatus('current')
cmEthernetOperTable = MibTable((1, 3, 6, 1, 4, 1, 1429, 77, 1, 4, 41), )
if mibBuilder.loadTexts: cmEthernetOperTable.setStatus('current')
cmEthernetOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1429, 77, 1, 4, 41, 1), ).setIndexNames((0, "SA-CM-MIB", "cmEthernetOperIndex"))
if mibBuilder.loadTexts: cmEthernetOperEntry.setStatus('current')
cmEthernetOperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 77, 1, 4, 41, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: cmEthernetOperIndex.setStatus('current')
cmEthernetOperSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 77, 1, 4, 41, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("link-down", 0), ("half-duplex-10Mbps", 1), ("full-duplex-10Mbps", 2), ("half-duplex-100Mbps", 3), ("full-duplex-100Mbps", 4), ("ethernetNotConnected", 5), ("half-duplex-1Gbps", 6), ("full-duplex-1Gbps", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetOperSetting.setStatus('current')
cmEthernetOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 77, 1, 4, 41, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("auto-negotiate", 0), ("manual", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetOperMode.setStatus('current')
cmEthernetIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 77, 1, 4, 41, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetIfAdminStatus.setStatus('current')
cmEthernetIfAdminOverride = MibScalar((1, 3, 6, 1, 4, 1, 1429, 77, 1, 4, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetIfAdminOverride.setStatus('current')
saCmUsBonding = MibScalar((1, 3, 6, 1, 4, 1, 1429, 77, 1, 4, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: saCmUsBonding.setStatus('current')
saCmIcmpRateLimit = MibScalar((1, 3, 6, 1, 4, 1, 1429, 77, 1, 4, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('packets-per-second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: saCmIcmpRateLimit.setStatus('current')
saCmTftpBlockSizeV4 = MibScalar((1, 3, 6, 1, 4, 1, 1429, 77, 1, 4, 46), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saCmTftpBlockSizeV4.setStatus('current')
saCmTftpBlockSizeV6 = MibScalar((1, 3, 6, 1, 4, 1, 1429, 77, 1, 4, 47), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saCmTftpBlockSizeV6.setStatus('current')
saCmUsPowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 1429, 77, 1, 4, 48), Integer32().clone(51)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saCmUsPowerLimit.setStatus('current')
saCmSoftwareDownload = MibIdentifier((1, 3, 6, 1, 4, 1, 1429, 77, 1, 6))
saCmSoftwareTable = MibTable((1, 3, 6, 1, 4, 1, 1429, 77, 1, 6, 1), )
if mibBuilder.loadTexts: saCmSoftwareTable.setStatus('current')
saCmSoftwareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1429, 77, 1, 6, 1, 1), ).setIndexNames((0, "SA-CM-MIB", "saCmSwIndex"))
if mibBuilder.loadTexts: saCmSoftwareEntry.setStatus('current')
saCmSwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 77, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)))
if mibBuilder.loadTexts: saCmSwIndex.setStatus('current')
saCmSwModel = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 77, 1, 6, 1, 1, 2), SnmpAdminString())
if mibBuilder.loadTexts: saCmSwModel.setStatus('current')
saCmSwHwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 77, 1, 6, 1, 1, 3), SnmpAdminString().clone('any'))
if mibBuilder.loadTexts: saCmSwHwVer.setStatus('current')
saCmSwBootLoader = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 77, 1, 6, 1, 1, 4), SnmpAdminString().clone('any'))
if mibBuilder.loadTexts: saCmSwBootLoader.setStatus('current')
saCmSwProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 77, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("any", 0), ("ncs", 1), ("sip", 2))))
if mibBuilder.loadTexts: saCmSwProtocol.setStatus('current')
saCmSwFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 77, 1, 6, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)))
if mibBuilder.loadTexts: saCmSwFilename.setStatus('current')
saCmSwServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 77, 1, 6, 1, 1, 7), IpAddress())
if mibBuilder.loadTexts: saCmSwServer.setStatus('deprecated')
saCmSwAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 77, 1, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("saCmSwAllowProvisioningUpgrade", 2), ("saCmSwIgnoreProvisioningUpgrade", 3))))
if mibBuilder.loadTexts: saCmSwAdminStatus.setStatus('current')
saCmSwMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 77, 1, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("secure", 1), ("unsecure", 2))).clone(1))
if mibBuilder.loadTexts: saCmSwMethod.setStatus('current')
saCmSwServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 77, 1, 6, 1, 1, 11), InetAddressType())
if mibBuilder.loadTexts: saCmSwServerAddressType.setStatus('current')
saCmSwServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 77, 1, 6, 1, 1, 12), InetAddress())
if mibBuilder.loadTexts: saCmSwServerAddress.setStatus('current')
saCmSoftwareDownloadTFTPServer = MibScalar((1, 3, 6, 1, 4, 1, 1429, 77, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sameAsCM", 1), ("dhcpOption54", 2))).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: saCmSoftwareDownloadTFTPServer.setStatus('current')
saCmWebAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 1429, 77, 1, 7))
saCmWebAccessUserIfTypeTable = MibTable((1, 3, 6, 1, 4, 1, 1429, 77, 1, 7, 2), )
if mibBuilder.loadTexts: saCmWebAccessUserIfTypeTable.setStatus('current')
saCmWebAccessUserIfTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1429, 77, 1, 7, 2, 1), ).setIndexNames((0, "SA-CM-MIB", "saCmWebAccessUserTypeIndex"), (0, "SA-CM-MIB", "saCmWebAccessIfTypeIndex"))
if mibBuilder.loadTexts: saCmWebAccessUserIfTypeEntry.setStatus('current')
saCmWebAccessUserTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 77, 1, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 10, 100))).clone(namedValues=NamedValues(("home-user", 1), ("cus-admin", 5), ("adv-user", 10), ("all-users", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saCmWebAccessUserTypeIndex.setStatus('current')
saCmWebAccessIfTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 77, 1, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 16, 40, 100))).clone(namedValues=NamedValues(("lan", 1), ("rf-cm", 2), ("mta", 16), ("wan-rg", 40), ("all-ifs", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saCmWebAccessIfTypeIndex.setStatus('current')
saCmWebAccessUserIfLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 77, 1, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 100))).clone(namedValues=NamedValues(("not-applicable", -1), ("off", 0), ("system", 1), ("basic", 2), ("readonly", 3), ("advanced", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saCmWebAccessUserIfLevel.setStatus('current')
saCmWebAccessHomeUsername = MibScalar((1, 3, 6, 1, 4, 1, 1429, 77, 1, 7, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saCmWebAccessHomeUsername.setStatus('current')
saCmWebAccessHomeUserPassword = MibScalar((1, 3, 6, 1, 4, 1, 1429, 77, 1, 7, 4), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saCmWebAccessHomeUserPassword.setStatus('current')
saCmWebAccessAdvancedType = MibScalar((1, 3, 6, 1, 4, 1, 1429, 77, 1, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("plain", 1), ("potd", 2))).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: saCmWebAccessAdvancedType.setStatus('current')
saCmWebAccessAdvancedUsername = MibScalar((1, 3, 6, 1, 4, 1, 1429, 77, 1, 7, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 40)).clone('admin')).setMaxAccess("readonly")
if mibBuilder.loadTexts: saCmWebAccessAdvancedUsername.setStatus('current')
saCmWebAccessAdvancedPassword = MibScalar((1, 3, 6, 1, 4, 1, 1429, 77, 1, 7, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 40)))
if mibBuilder.loadTexts: saCmWebAccessAdvancedPassword.setStatus('current')
saCmWebAccessNoActivityTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1429, 77, 1, 7, 8), Integer32().clone(900)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: saCmWebAccessNoActivityTimeout.setStatus('current')
saCmWebAccessHomeUserClearPassword = MibScalar((1, 3, 6, 1, 4, 1, 1429, 77, 1, 7, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saCmWebAccessHomeUserClearPassword.setStatus('current')
saPUF = MibIdentifier((1, 3, 6, 1, 4, 1, 1429, 77, 1, 10))
saPUFTable = MibTable((1, 3, 6, 1, 4, 1, 1429, 77, 1, 10, 1), )
if mibBuilder.loadTexts: saPUFTable.setStatus('current')
saPUFEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1429, 77, 1, 10, 1, 1), ).setIndexNames((0, "SA-CM-MIB", "saPUFIndex"))
if mibBuilder.loadTexts: saPUFEntry.setStatus('current')
saPUFIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 77, 1, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: saPUFIndex.setStatus('current')
saPUFRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 77, 1, 10, 1, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saPUFRowStatus.setStatus('current')
saPUFFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 77, 1, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(93000000, 999000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: saPUFFrequency.setStatus('current')
saPUFAnnex = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 77, 1, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("annexA", 0), ("annexB", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saPUFAnnex.setStatus('current')
saPUFScanNow = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 77, 1, 10, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saPUFScanNow.setStatus('current')
saPUFScanOnNextBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 77, 1, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unset", 0), ("set", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saPUFScanOnNextBoot.setStatus('current')
saPUFScanResults = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 77, 1, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notDetected", 0), ("detected", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saPUFScanResults.setStatus('current')
saPUFScanTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 77, 1, 10, 1, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: saPUFScanTimestamp.setStatus('current')
saPUFScanResultsType = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 77, 1, 10, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notDetected", 0), ("qam", 1), ("docsisQam", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saPUFScanResultsType.setStatus('current')
saPUFTrapServer = MibScalar((1, 3, 6, 1, 4, 1, 1429, 77, 1, 10, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saPUFTrapServer.setStatus('current')
saPUFTrapControl = MibScalar((1, 3, 6, 1, 4, 1, 1429, 77, 1, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disable", 0), ("enableOnEnergyDetection", 1), ("enableOnNoEnergyDetected", 2), ("enableOnFrequencyScan", 3), ("enableOnQamDetection", 4), ("enableOnDocsisQamDetection", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saPUFTrapControl.setStatus('current')
saPUFScanAllNow = MibScalar((1, 3, 6, 1, 4, 1, 1429, 77, 1, 10, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saPUFScanAllNow.setStatus('current')
saPUFEntriesClearOnRFD = MibScalar((1, 3, 6, 1, 4, 1, 1429, 77, 1, 10, 5), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: saPUFEntriesClearOnRFD.setStatus('current')
saLKF = MibIdentifier((1, 3, 6, 1, 4, 1, 1429, 77, 1, 11))
saLKFTable = MibTable((1, 3, 6, 1, 4, 1, 1429, 77, 1, 11, 1), )
if mibBuilder.loadTexts: saLKFTable.setStatus('current')
saLKFEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1429, 77, 1, 11, 1, 1), ).setIndexNames((0, "SA-CM-MIB", "saLKFIndex"))
if mibBuilder.loadTexts: saLKFEntry.setStatus('current')
saLKFIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 77, 1, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: saLKFIndex.setStatus('current')
saLKFFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 77, 1, 11, 1, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: saLKFFrequency.setStatus('current')
saSoftwareIdentity = MibIdentifier((1, 3, 6, 1, 4, 1, 1429, 77, 1, 14))
saSoftwareTable = MibTable((1, 3, 6, 1, 4, 1, 1429, 77, 1, 14, 1), )
if mibBuilder.loadTexts: saSoftwareTable.setStatus('current')
saSoftwareTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1429, 77, 1, 14, 1, 1), ).setIndexNames((0, "SA-CM-MIB", "saSoftwareIndex"))
if mibBuilder.loadTexts: saSoftwareTableEntry.setStatus('current')
saSoftwareIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 77, 1, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)))
if mibBuilder.loadTexts: saSoftwareIndex.setStatus('current')
saSoftwareBaseVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 77, 1, 14, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saSoftwareBaseVersion.setStatus('current')
saSoftwareFeatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 77, 1, 14, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saSoftwareFeatureName.setStatus('current')
mibBuilder.exportSymbols("SA-CM-MIB", dpxCmMibObjects=dpxCmMibObjects, saCmWebAccess=saCmWebAccess, cmAPFactoryReset=cmAPFactoryReset, saCmInternalDhcpServer=saCmInternalDhcpServer, saCmSoftwareTable=saCmSoftwareTable, cmTimerT4=cmTimerT4, saLKFEntry=saLKFEntry, cmEthernetOperIndex=cmEthernetOperIndex, saCmTftpBlockSizeV4=saCmTftpBlockSizeV4, cmInterfaceInfo=cmInterfaceInfo, cmAPInfo=cmAPInfo, saCmWebAccessIfTypeIndex=saCmWebAccessIfTypeIndex, saPUFEntriesClearOnRFD=saPUFEntriesClearOnRFD, saPUFScanOnNextBoot=saPUFScanOnNextBoot, saCmWebAccessAdvancedUsername=saCmWebAccessAdvancedUsername, saLKFIndex=saLKFIndex, saLKFFrequency=saLKFFrequency, saPUFTable=saPUFTable, saCmSwBootLoader=saCmSwBootLoader, vendorDSLEDTreatment=vendorDSLEDTreatment, saCmTodRenewal=saCmTodRenewal, saPUFScanAllNow=saPUFScanAllNow, saPUFFrequency=saPUFFrequency, cmConsoleMode=cmConsoleMode, saCmCpeL2VpnMacAging=saCmCpeL2VpnMacAging, saCmIcmpRateLimit=saCmIcmpRateLimit, cmVendorInfo=cmVendorInfo, saPUFScanTimestamp=saPUFScanTimestamp, saPUFRowStatus=saPUFRowStatus, saCmWebAccessNoActivityTimeout=saCmWebAccessNoActivityTimeout, saCmSwFilename=saCmSwFilename, saSoftwareIdentity=saSoftwareIdentity, vendorDefaultDSfreq=vendorDefaultDSfreq, saLKFTable=saLKFTable, saCmWebAccessUserIfTypeEntry=saCmWebAccessUserIfTypeEntry, saPUFScanNow=saPUFScanNow, saCmSwMethod=saCmSwMethod, saCmDocsisCapableVersion=saCmDocsisCapableVersion, vendorUSLEDTreatment=vendorUSLEDTreatment, saCmTftpBlockSizeV6=saCmTftpBlockSizeV6, saPUFAnnex=saPUFAnnex, saCmDsBonding=saCmDsBonding, saCmSwServerAddressType=saCmSwServerAddressType, cmEthernetOperSetting=cmEthernetOperSetting, saCmWebAccessHomeUserClearPassword=saCmWebAccessHomeUserClearPassword, saSoftwareBaseVersion=saSoftwareBaseVersion, saSoftwareIndex=saSoftwareIndex, saOorDsidOverride=saOorDsidOverride, cmEthernetOperEntry=cmEthernetOperEntry, saLKF=saLKF, saPUFEntry=saPUFEntry, saCmWebAccessHomeUserPassword=saCmWebAccessHomeUserPassword, cmEthernetIfAdminOverride=cmEthernetIfAdminOverride, saCmCpeMacAging=saCmCpeMacAging, cmEthernetOperMode=cmEthernetOperMode, PYSNMP_MODULE_ID=saCmMib, saCmSwHwVer=saCmSwHwVer, saCmMib=saCmMib, saPUF=saPUF, saCmWebAccessUserTypeIndex=saCmWebAccessUserTypeIndex, saCmWebAccessHomeUsername=saCmWebAccessHomeUsername, saSoftwareFeatureName=saSoftwareFeatureName, saPUFTrapServer=saPUFTrapServer, cmAPIgmp=cmAPIgmp, cmEthernetIfAdminStatus=cmEthernetIfAdminStatus, saCmForceDualscan=saCmForceDualscan, saCmSwAdminStatus=saCmSwAdminStatus, saCmWebAccessUserIfLevel=saCmWebAccessUserIfLevel, saCmSwServerAddress=saCmSwServerAddress, cmEthernetOperTable=cmEthernetOperTable, saCmSoftwareEntry=saCmSoftwareEntry, cmAPMulticastPromiscuousMode=cmAPMulticastPromiscuousMode, saSoftwareTable=saSoftwareTable, saSoftwareTableEntry=saSoftwareTableEntry, saCmSwServer=saCmSwServer, saCmAutoResetNoActivity=saCmAutoResetNoActivity, saPUFScanResultsType=saPUFScanResultsType, saCmUsPowerLimit=saCmUsPowerLimit, saCmArpRateLimit=saCmArpRateLimit, vendorONLINELEDTreatment=vendorONLINELEDTreatment, saCmSwProtocol=saCmSwProtocol, saCmWebAccessAdvancedType=saCmWebAccessAdvancedType, saCmSwIndex=saCmSwIndex, saCmWebAccessUserIfTypeTable=saCmWebAccessUserIfTypeTable, saCmBpiForward=saCmBpiForward, saCmL2VpnUsForwardingCriteria=saCmL2VpnUsForwardingCriteria, vendorLINKLEDTreatment=vendorLINKLEDTreatment, saCmUsBonding=saCmUsBonding, saPUFScanResults=saPUFScanResults, saCmSoftwareDownload=saCmSoftwareDownload, cmAPAgingOut=cmAPAgingOut, saCmSwModel=saCmSwModel, saPUFTrapControl=saPUFTrapControl, sa=sa, saCmWebAccessAdvancedPassword=saCmWebAccessAdvancedPassword, cmAPInternalInterface=cmAPInternalInterface, saCmSoftwareDownloadTFTPServer=saCmSoftwareDownloadTFTPServer, saPUFIndex=saPUFIndex)
