#
# PySNMP MIB module DMswitch-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DMswitch-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:36:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
datacomAccessDevicesMIBs, = mibBuilder.importSymbols("DATACOM-SMI", "datacomAccessDevicesMIBs")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Counter32, MibIdentifier, Bits, Unsigned32, Counter64, TimeTicks, ObjectIdentity, NotificationType, enterprises, Gauge32, ModuleIdentity, IpAddress, iso, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter32", "MibIdentifier", "Bits", "Unsigned32", "Counter64", "TimeTicks", "ObjectIdentity", "NotificationType", "enterprises", "Gauge32", "ModuleIdentity", "IpAddress", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
MacAddress, RowStatus, TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "RowStatus", "TruthValue", "DisplayString", "TextualConvention")
dmSwitchMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201))
if mibBuilder.loadTexts: dmSwitchMIB.setLastUpdated('201512100000Z')
if mibBuilder.loadTexts: dmSwitchMIB.setOrganization('DATACOM')
dmSwitchMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1))
dmSwitchNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2))
dmSwitchConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 3))
switchMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1))
portMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 2))
trunkMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 3))
lacpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 4))
staMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 5))
tftpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 6))
restartMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 7))
mirrorMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 8))
igmpSnoopMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9))
ipMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 10))
bcastStormMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 11))
vlanMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 12))
priorityMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 13))
trapDestMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14))
rateLimitMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 16))
securityMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17))
sysLogMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 19))
sysTimeMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 20))
fileMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 21))
countMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 22))
filterCounterMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 23))
eapsMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 24))
cfmProbeMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 25))
cpumonMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 26))
queuePortMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 27))
ddTransceiversMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 28))
class ValidStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("valid", 1), ("invalid", 2))

class KeySegment(DisplayString):
    status = 'current'
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 128)

class StaPathCostMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("short", 1), ("long", 2))

switchNumber = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchNumber.setStatus('current')
switchInfoTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 2), )
if mibBuilder.loadTexts: switchInfoTable.setStatus('current')
switchInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 2, 1), ).setIndexNames((0, "DMswitch-MIB", "swUnitIndex"))
if mibBuilder.loadTexts: switchInfoEntry.setStatus('current')
swUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: swUnitIndex.setStatus('current')
swHardwareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swHardwareVer.setStatus('current')
swBootLoaderVer = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBootLoaderVer.setStatus('current')
swFirmwareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFirmwareVer.setStatus('current')
swPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortNumber.setStatus('current')
swPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("internalPower", 1), ("redundantPower", 2), ("internalAndRedundantPower", 3), ("externalPower", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPowerStatus.setStatus('current')
swRoleInSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("backupMaster", 2), ("slave", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRoleInSystem.setStatus('current')
swSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSerialNumber.setStatus('current')
swProdName = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdName.setStatus('current')
swProdModelId = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71))).clone(namedValues=NamedValues(("dmSwitch2204G1", 1), ("dmSwitch2304G1", 2), ("dmSwitch3224F1", 3), ("dmSwitch3324F1", 4), ("dmSwitch3224F2", 5), ("dmSwitch3324F2", 6), ("dmSwitch3224F3", 7), ("dmSwitch3324F3", 8), ("mpu192", 9), ("mpu384", 10), ("eth12gx", 11), ("eth24gx", 12), ("eth1x10gx", 13), ("eth2x10gx", 14), ("eth12gxEth1x10gx", 15), ("eth24gt", 16), ("eth48gt", 17), ("eth24gxEth2x10gx", 20), ("eth48gx", 21), ("eth4x10gxhseries", 22), ("eth24gxEth2x10gxhseries", 23), ("eth48gxhseries", 24), ("eth24gxhseries", 25), ("eth2x10gxhseries", 26), ("eth10gx32xe1", 27), ("eth10gx4xstm1", 28), ("eth10gx2xstm4", 29), ("mpu512", 30), ("eth24gxlseries", 31), ("eth24gx4gx", 32), ("eth24gx2xx", 33), ("eth24gxs", 34), ("eth24gx2xxs", 35), ("eth24gx4xx", 36), ("eth20gt4gc", 37), ("eth20gt4gc2xx", 38), ("eth20gt4gcs", 39), ("eth20gt4gc2xxs", 40), ("eth20gt4gc4xx", 41), ("eth44gt4gc", 42), ("eth44gt4gc2xx", 43), ("eth44gt4gcs", 44), ("eth44gt4gc2xxs", 45), ("eth44gt4gc4xx", 46), ("eth44gt4gc2xs", 47), ("eth44gt4gc2xss", 48), ("eth44gt4gc4xs", 49), ("eth24gthseries", 50), ("eth48gthseries", 51), ("eth20gt4gc2xss", 52), ("eth20gx32xe1hseries", 53), ("eth20gx2x10gx32xe1hseries", 54), ("eth16gx2x10gx4xstm1hseries", 55), ("eth16gx4xstm1hseries", 56), ("eth24gx2x10gxeseries", 57), ("eth24gxeseries", 58), ("eth4x10gxeseries", 59), ("eth48gteseries", 60), ("mpu960", 61), ("eth44gt4gcsmplsdc", 62), ("eth44gt4gc2xxsmplsdc", 63), ("eth44gt4gc4xxmplsdc", 64), ("eth24gx2x10gxhseriesII", 65), ("eth20gt4gc4xs", 66), ("eth24gxhseriesII", 67), ("eth2x10gxhseriesII", 68), ("eth48gxhseriesII", 69), ("eth4x10gxhseriesII", 70), ("eth24gx4xs", 71)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdModelId.setStatus('current')
swFirmwareReleaseDate = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFirmwareReleaseDate.setStatus('current')
swTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTemperature.setStatus('current')
swG704IntfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swG704IntfNumber.setStatus('current')
swE1cIntfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swE1cIntfNumber.setStatus('current')
swBundleIntfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBundleIntfNumber.setStatus('current')
swPtpIntfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPtpIntfNumber.setStatus('current')
swSdhIntfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSdhIntfNumber.setStatus('current')
swVC4Number = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swVC4Number.setStatus('current')
swVC12Number = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swVC12Number.setStatus('current')
switchProductId = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 3))
swProdManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdManufacturer.setStatus('current')
swProdDescription = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdDescription.setStatus('current')
swProdUrl = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdUrl.setStatus('current')
swIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIdentifier.setStatus('current')
swVendorId = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 9, 2000000254, 2000000255))).clone(namedValues=NamedValues(("datacom", 1), ("ieru", 2), ("asga", 3), ("parks", 4), ("digitel", 5), ("none", 6), ("elebra", 7), ("osp", 9), ("objectNonexistentInModel", 2000000254), ("infNotAvailable", 2000000255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swVendorId.setStatus('mandatory')
switchIndivPowerTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 4), )
if mibBuilder.loadTexts: switchIndivPowerTable.setStatus('current')
switchIndivPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 4, 1), ).setIndexNames((0, "DMswitch-MIB", "swIndivPowerUnitIndex"), (0, "DMswitch-MIB", "swIndivPowerIndex"))
if mibBuilder.loadTexts: switchIndivPowerEntry.setStatus('current')
swIndivPowerUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIndivPowerUnitIndex.setStatus('current')
swIndivPowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIndivPowerIndex.setStatus('current')
swIndivPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("red", 1), ("green", 2), ("notPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIndivPowerStatus.setStatus('current')
switchIndivFanTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 5), )
if mibBuilder.loadTexts: switchIndivFanTable.setStatus('current')
switchIndivFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 5, 1), ).setIndexNames((0, "DMswitch-MIB", "swIndivFanUnitIndex"), (0, "DMswitch-MIB", "swIndivFanIndex"))
if mibBuilder.loadTexts: switchIndivFanEntry.setStatus('current')
swIndivFanUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIndivFanUnitIndex.setStatus('current')
swIndivFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIndivFanIndex.setStatus('current')
swIndivFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("red", 1), ("green", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIndivFanStatus.setStatus('current')
switchIndivAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 6), )
if mibBuilder.loadTexts: switchIndivAlarmTable.setStatus('current')
switchIndivAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 6, 1), ).setIndexNames((0, "DMswitch-MIB", "swIndivAlarmUnitIndex"), (0, "DMswitch-MIB", "swIndivAlarmIndex"))
if mibBuilder.loadTexts: switchIndivAlarmEntry.setStatus('current')
swIndivAlarmUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIndivAlarmUnitIndex.setStatus('current')
swIndivAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIndivAlarmIndex.setStatus('current')
swIndivAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deactivated", 1), ("activated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIndivAlarmStatus.setStatus('current')
switchResObj = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchResObj.setStatus('current')
swHashConfig = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swHashConfig.setStatus('current')
swHashStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swHashStatus.setStatus('current')
swCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCpuUsage.setStatus('current')
swMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMemUsage.setStatus('current')
switchMacAddrUsageTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 12), )
if mibBuilder.loadTexts: switchMacAddrUsageTable.setStatus('current')
switchMacAddrUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 12, 1), ).setIndexNames((0, "DMswitch-MIB", "swMacAddrUnitIndex"))
if mibBuilder.loadTexts: switchMacAddrUsageEntry.setStatus('current')
swMacAddrUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 12, 1, 1), Integer32())
if mibBuilder.loadTexts: swMacAddrUnitIndex.setStatus('current')
swMacAddrUsageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMacAddrUsageValue.setStatus('current')
swSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSlotNumber.setStatus('current')
switchMpuTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 14), )
if mibBuilder.loadTexts: switchMpuTable.setStatus('current')
switchMpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 14, 1), ).setIndexNames((0, "DMswitch-MIB", "swMpuIndex"))
if mibBuilder.loadTexts: switchMpuEntry.setStatus('current')
swMpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMpuIndex.setStatus('current')
swMpuBootLoaderVer = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 14, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMpuBootLoaderVer.setStatus('current')
swMpuRoleInSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("standby", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMpuRoleInSystem.setStatus('current')
swMpuSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 14, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMpuSerialNumber.setStatus('current')
swMpuModelId = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(9, 10))).clone(namedValues=NamedValues(("mpu192", 9), ("mpu384", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMpuModelId.setStatus('current')
swHashHardware = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swHashHardware.setStatus('current')
switchIndivAlarmOutTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 16), )
if mibBuilder.loadTexts: switchIndivAlarmOutTable.setStatus('current')
swChassisModel = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 2000000254, 2000000255))).clone(namedValues=NamedValues(("dmSwitch3000", 1), ("dmSwitch4001", 2), ("dmSwitch4001L", 3), ("dmSwitch4001S", 4), ("dmSwitch4004", 5), ("dmSwitch4008", 6), ("dmSwitch4008HighSpeed", 7), ("dmSwitch4001NewFan", 8), ("dmSwitch4100", 9), ("objectNonexistentInModel", 2000000254), ("infNotAvailable", 2000000255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swChassisModel.setStatus('current')
switchSessionTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 18), )
if mibBuilder.loadTexts: switchSessionTable.setStatus('current')
switchSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 18, 1), ).setIndexNames((0, "DMswitch-MIB", "swSessionUnitIndex"))
if mibBuilder.loadTexts: switchSessionEntry.setStatus('current')
swSessionUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 18, 1, 1), Integer32())
if mibBuilder.loadTexts: swSessionUnitIndex.setStatus('current')
swSessionName = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 18, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSessionName.setStatus('current')
swSessionUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 18, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSessionUptime.setStatus('current')
swSessionPid = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 18, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSessionPid.setStatus('current')
swSessionSrcIP = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 18, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSessionSrcIP.setStatus('current')
switchIndivAlarmOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 16, 1), ).setIndexNames((0, "DMswitch-MIB", "swIndivAlarmOutUnitIndex"))
if mibBuilder.loadTexts: switchIndivAlarmOutEntry.setStatus('current')
swIndivAlarmOutUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIndivAlarmOutUnitIndex.setStatus('current')
swIndivAlarmOutStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deactivated", 1), ("activated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIndivAlarmOutStatus.setStatus('current')
portTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 2, 1), )
if mibBuilder.loadTexts: portTable.setStatus('current')
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 2, 1, 1), ).setIndexNames((0, "DMswitch-MIB", "portIndex"))
if mibBuilder.loadTexts: portEntry.setStatus('current')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: portIndex.setStatus('current')
portName = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portName.setStatus('current')
portType = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("other", 1), ("hundredBaseTX", 2), ("hundredBaseFX", 3), ("thousandBaseSX", 4), ("thousandBaseLX", 5), ("thousandBaseT", 6), ("thousandBaseGBIC", 7), ("thousandBaseSfp", 8), ("hundredBaseFxScSingleMode", 9), ("hundredBaseFxScMultiMode", 10), ("tenG", 11), ("tenGSfp", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portType.setStatus('current')
portSpeedDpxCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("reserved", 1), ("halfDuplex10", 2), ("fullDuplex10", 3), ("halfDuplex100", 4), ("fullDuplex100", 5), ("halfDuplex1000", 6), ("fullDuplex1000", 7), ("fullDuplex10000", 8))).clone('halfDuplex10')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSpeedDpxCfg.setStatus('current')
portFlowCtrlCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("backPressure", 3), ("dot3xFlowControlRxTx", 4), ("dot3xFlowControlRx", 5), ("dot3xFlowControlTx", 6))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFlowCtrlCfg.setStatus('current')
portCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 2, 1, 1, 6), Bits().clone(namedValues=NamedValues(("portCap10half", 0), ("portCap10full", 1), ("portCap100half", 2), ("portCap100full", 3), ("portCap1000half", 4), ("portCap1000full", 5), ("portCap10000full", 6), ("dot3xFlowControlRxTx", 7), ("dot3xFlowControlRx", 8), ("dot3xFlowControlTx", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portCapabilities.setStatus('current')
portAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portAutonegotiation.setStatus('current')
portSpeedDpxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("error", 1), ("halfDuplex10", 2), ("fullDuplex10", 3), ("halfDuplex100", 4), ("fullDuplex100", 5), ("halfDuplex1000", 6), ("fullDuplex1000", 7), ("fullDuplex10000", 8), ("down", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSpeedDpxStatus.setStatus('current')
portFlowCtrlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("error", 1), ("backPressure", 2), ("dot3xFlowControlRxTx", 3), ("dot3xFlowControlRx", 4), ("dot3xFlowControlTx", 5), ("disable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portFlowCtrlStatus.setStatus('current')
portMdiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("normal", 2), ("xover", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMdiStatus.setStatus('current')
portTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTrunkIndex.setStatus('current')
trunkMaxId = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkMaxId.setStatus('current')
trunkValidNumber = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkValidNumber.setStatus('current')
trunkTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 3, 3), )
if mibBuilder.loadTexts: trunkTable.setStatus('current')
trunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 3, 3, 1), ).setIndexNames((0, "DMswitch-MIB", "trunkIndex"))
if mibBuilder.loadTexts: trunkEntry.setStatus('current')
trunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 3, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: trunkIndex.setStatus('current')
trunkPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 3, 3, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkPorts.setStatus('current')
trunkCreation = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("lacp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkCreation.setStatus('current')
trunkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkStatus.setStatus('current')
lacpPortTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 4, 1), )
if mibBuilder.loadTexts: lacpPortTable.setStatus('current')
lacpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 4, 1, 1), ).setIndexNames((0, "DMswitch-MIB", "lacpPortIndex"))
if mibBuilder.loadTexts: lacpPortEntry.setStatus('current')
lacpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 4, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: lacpPortIndex.setStatus('current')
lacpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpPortStatus.setStatus('current')
staSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 5, 1), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staSystemStatus.setStatus('current')
staPortTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 5, 2), )
if mibBuilder.loadTexts: staPortTable.setStatus('current')
staPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 5, 2, 1), ).setIndexNames((0, "DMswitch-MIB", "staPortIndex"))
if mibBuilder.loadTexts: staPortEntry.setStatus('current')
staPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 5, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: staPortIndex.setStatus('current')
staPortAdminEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 5, 2, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortAdminEdgePort.setStatus('current')
staPortOperEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 5, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPortOperEdgePort.setStatus('current')
staPortAdminPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceTrue", 0), ("forceFalse", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortAdminPointToPoint.setStatus('current')
staPortOperPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 5, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPortOperPointToPoint.setStatus('current')
staPortLongPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortLongPathCost.setStatus('current')
staPortSystemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 5, 2, 1, 7), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortSystemStatus.setStatus('current')
staProtocolType = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stp", 1), ("rstp", 2), ("mstp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staProtocolType.setStatus('current')
tftpFile = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFile.setStatus('current')
tftpFlashConfig = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFlashConfig.setStatus('current')
tftpServer = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 6, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpServer.setStatus('current')
tftpAction = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("downloadToFlashConfig", 1), ("downloadToRunningConfig", 2), ("downloadToStartupConfig", 3), ("downloadToFirmware", 4), ("uploadFromFlashConfig", 5), ("uploadFromRunningConfig", 6), ("uploadFromStartupConfig", 7), ("notDownloading", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpAction.setStatus('current')
restartFirmware = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartFirmware.setStatus('current')
restartConfig = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartConfig.setStatus('current')
restartControl = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("running", 1), ("warmBoot", 2), ("coldBoot", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartControl.setStatus('current')
mirrorDestinationPort = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 8, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mirrorDestinationPort.setStatus('current')
mirrorTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 8, 2), )
if mibBuilder.loadTexts: mirrorTable.setStatus('current')
mirrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 8, 2, 1), ).setIndexNames((0, "DMswitch-MIB", "mirrorSourcePort"))
if mibBuilder.loadTexts: mirrorEntry.setStatus('current')
mirrorSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 8, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: mirrorSourcePort.setStatus('current')
mirrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rx", 1), ("tx", 2), ("all", 3), ("disable", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mirrorType.setStatus('current')
igmpSnoopStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopStatus.setStatus('current')
igmpSnoopQuerier = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQuerier.setStatus('current')
igmpSnoopQueryCount = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQueryCount.setStatus('current')
igmpSnoopQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 125)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQueryInterval.setStatus('current')
igmpSnoopQueryMaxResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 25)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQueryMaxResponseTime.setStatus('current')
igmpSnoopQueryTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 500)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQueryTimeout.setStatus('current')
igmpSnoopVersion = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopVersion.setStatus('current')
igmpSnoopRouterCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 8), )
if mibBuilder.loadTexts: igmpSnoopRouterCurrentTable.setStatus('current')
igmpSnoopRouterCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 8, 1), ).setIndexNames((0, "DMswitch-MIB", "igmpSnoopRouterCurrentVlanIndex"))
if mibBuilder.loadTexts: igmpSnoopRouterCurrentEntry.setStatus('current')
igmpSnoopRouterCurrentVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 8, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopRouterCurrentVlanIndex.setStatus('current')
igmpSnoopRouterCurrentPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 8, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopRouterCurrentPorts.setStatus('current')
igmpSnoopRouterStaticTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 9), )
if mibBuilder.loadTexts: igmpSnoopRouterStaticTable.setStatus('current')
igmpSnoopRouterStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 9, 1), ).setIndexNames((0, "DMswitch-MIB", "igmpSnoopRouterStaticVlanIndex"))
if mibBuilder.loadTexts: igmpSnoopRouterStaticEntry.setStatus('current')
igmpSnoopRouterStaticVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 9, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopRouterStaticVlanIndex.setStatus('current')
igmpSnoopRouterStaticPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 9, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpSnoopRouterStaticPorts.setStatus('current')
igmpSnoopMulticastCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 10), )
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentTable.setStatus('current')
igmpSnoopMulticastCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 10, 1), ).setIndexNames((0, "DMswitch-MIB", "igmpSnoopMulticastCurrentVlanIndex"), (0, "DMswitch-MIB", "igmpSnoopMulticastCurrentIpAddress"))
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentEntry.setStatus('current')
igmpSnoopMulticastCurrentVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentVlanIndex.setStatus('current')
igmpSnoopMulticastCurrentIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 10, 1, 2), IpAddress())
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentIpAddress.setStatus('current')
igmpSnoopMulticastCurrentPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 10, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentPorts.setStatus('current')
igmpSnoopMulticastStaticTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 11), )
if mibBuilder.loadTexts: igmpSnoopMulticastStaticTable.setStatus('current')
igmpSnoopMulticastStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 11, 1), ).setIndexNames((0, "DMswitch-MIB", "igmpSnoopMulticastStaticVlanIndex"), (0, "DMswitch-MIB", "igmpSnoopMulticastStaticIpAddress"))
if mibBuilder.loadTexts: igmpSnoopMulticastStaticEntry.setStatus('current')
igmpSnoopMulticastStaticVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 11, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopMulticastStaticVlanIndex.setStatus('current')
igmpSnoopMulticastStaticIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 11, 1, 2), IpAddress())
if mibBuilder.loadTexts: igmpSnoopMulticastStaticIpAddress.setStatus('current')
igmpSnoopMulticastStaticPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 11, 1, 3), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpSnoopMulticastStaticPorts.setStatus('current')
ipAddressMode = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dhcp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAddressMode.setStatus('current')
ipDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 10, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDefaultGateway.setStatus('current')
ipPrimaryDnsServer = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 10, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPrimaryDnsServer.setStatus('current')
ipSecondaryDnsServer = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 10, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSecondaryDnsServer.setStatus('current')
ipHttpState = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHttpState.setStatus('current')
ipHttpPort = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 10, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHttpPort.setStatus('current')
ipHttpsState = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 10, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHttpsState.setStatus('current')
ipHttpsPort = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 10, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHttpsPort.setStatus('current')
ipTelnetState = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 10, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTelnetState.setStatus('current')
bcastStormTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 11, 1), )
if mibBuilder.loadTexts: bcastStormTable.setStatus('current')
bcastStormEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 11, 1, 1), ).setIndexNames((0, "DMswitch-MIB", "bcastStormIfIndex"))
if mibBuilder.loadTexts: bcastStormEntry.setStatus('current')
bcastStormIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 11, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: bcastStormIfIndex.setStatus('current')
bcastStormStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcastStormStatus.setStatus('current')
bcastStormPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 11, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcastStormPacketRate.setStatus('current')
vlanTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 12, 1), )
if mibBuilder.loadTexts: vlanTable.setStatus('current')
vlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 12, 1, 1), ).setIndexNames((0, "DMswitch-MIB", "vlanIndex"))
if mibBuilder.loadTexts: vlanEntry.setStatus('current')
vlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 12, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: vlanIndex.setStatus('current')
vlanAddressMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("user", 1), ("dhcp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanAddressMethod.setStatus('current')
prioWrrTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 13, 1), )
if mibBuilder.loadTexts: prioWrrTable.setStatus('current')
prioWrrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 13, 1, 1), ).setIndexNames((0, "DMswitch-MIB", "prioWrrTrafficClass"))
if mibBuilder.loadTexts: prioWrrEntry.setStatus('current')
prioWrrTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: prioWrrTrafficClass.setStatus('current')
prioWrrWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioWrrWeight.setStatus('current')
prioQueueMode = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 13, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("wrr", 1), ("strict", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioQueueMode.setStatus('current')
trapDestTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 1), )
if mibBuilder.loadTexts: trapDestTable.setStatus('current')
trapDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 1, 1), ).setIndexNames((0, "DMswitch-MIB", "trapDestAddress"))
if mibBuilder.loadTexts: trapDestEntry.setStatus('current')
trapDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: trapDestAddress.setStatus('current')
trapDestCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapDestCommunity.setStatus('current')
trapDestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapDestStatus.setStatus('current')
trapDestVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("version1", 1), ("version2", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapDestVersion.setStatus('current')
trapVar = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2))
trapForbiddenAccessMode = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("web", 1), ("snmp", 2), ("telnet", 3), ("ssh", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapForbiddenAccessMode.setStatus('current')
trapForbiddenAccessIp = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapForbiddenAccessIp.setStatus('current')
trapLoginUserName = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapLoginUserName.setStatus('current')
trapConfigSavePartition = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapConfigSavePartition.setStatus('current')
trapSfpPresenceStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absentee", 1), ("present", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapSfpPresenceStatus.setStatus('current')
trapInfAlarmVal = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("deactivated", 1), ("activated", 2), ("unstable", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapInfAlarmVal.setStatus('current')
trapDuplicatedIpVlan = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 7), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapDuplicatedIpVlan.setStatus('current')
trapDuplicatedIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 8), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapDuplicatedIpAddress.setStatus('current')
trapDuplicatedIpMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 9), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapDuplicatedIpMacAddress.setStatus('current')
trapEapsDomainName = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 10), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapEapsDomainName.setStatus('current')
trapEapsDomainId = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 11), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapEapsDomainId.setStatus('current')
trapEapsStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("idle", 0), ("complete", 1), ("failed", 2), ("links-up", 3), ("links-down", 4), ("pre-forwarding", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapEapsStatus.setStatus('current')
trapTemperature = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 13), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapTemperature.setStatus('current')
trapFuseId = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 14), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapFuseId.setStatus('current')
trapFuseStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("failed", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapFuseStatus.setStatus('current')
trapFansBoardPresenceStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absentee", 1), ("present", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapFansBoardPresenceStatus.setStatus('current')
trapStandbyMpuPresenceStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absentee", 1), ("present", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapStandbyMpuPresenceStatus.setStatus('current')
trapMacAddressMove = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 18), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapMacAddressMove.setStatus('current')
trapMemFree = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 19), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapMemFree.setStatus('current')
trapBootloaderNew = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 20), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapBootloaderNew.setStatus('current')
trapDevNo = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 21), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapDevNo.setStatus('current')
trapDevLocalId = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 22), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapDevLocalId.setStatus('current')
trapCesopTdmStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ok", 0), ("los", 1), ("ais", 2), ("lof", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapCesopTdmStatus.setStatus('current')
trapCesopTdmRemoteStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 5))).clone(namedValues=NamedValues(("ok", 0), ("ralm", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapCesopTdmRemoteStatus.setStatus('current')
trapCesopTdmCasStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4))).clone(namedValues=NamedValues(("ok", 0), ("lom", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapCesopTdmCasStatus.setStatus('current')
trapCesopTdmCrcStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 6))).clone(namedValues=NamedValues(("ok", 0), ("crc", 6)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapCesopTdmCrcStatus.setStatus('current')
trapCesopBundleLocalTdmStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ok", 0), ("fail", 1), ("rdi", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapCesopBundleLocalTdmStatus.setStatus('current')
trapCesopBundleRemoteTdmStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ok", 0), ("fail", 1), ("rdi", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapCesopBundleRemoteTdmStatus.setStatus('current')
trapCesopBundleLocalStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("fail", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapCesopBundleLocalStatus.setStatus('current')
trapCesopBundleRemoteStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("fail", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapCesopBundleRemoteStatus.setStatus('current')
trapCesopBundlePktMismatchStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3))).clone(namedValues=NamedValues(("ok", 0), ("mismatch", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapCesopBundlePktMismatchStatus.setStatus('current')
trapCesopBundleNextHopStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4))).clone(namedValues=NamedValues(("up", 0), ("down", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapCesopBundleNextHopStatus.setStatus('current')
trapCesopClockAdapLinkQuality = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 33), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapCesopClockAdapLinkQuality.setStatus('current')
trapCesopClockSourceStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("out-of-limits", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapCesopClockSourceStatus.setStatus('current')
trapBroadcastStormControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("out-of-limits", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapBroadcastStormControlStatus.setStatus('current')
trapBroadcastStormControlPPS = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 36), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapBroadcastStormControlPPS.setStatus('current')
trapMulticastStormControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("out-of-limits", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapMulticastStormControlStatus.setStatus('current')
trapMulticastStormControlPPS = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 38), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapMulticastStormControlPPS.setStatus('current')
trapStatusLDP = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("delete", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapStatusLDP.setStatus('current')
trapIdLDP = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 40), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapIdLDP.setStatus('current')
trapStatusTunnelRSVP = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("deleted", 3), ("rerouted", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapStatusTunnelRSVP.setStatus('current')
trapIdTunnelRSVP = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 42), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapIdTunnelRSVP.setStatus('current')
trapPanelStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("closed", 1), ("open", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapPanelStatus.setStatus('current')
trapLSTGroup = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 44), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapLSTGroup.setStatus('current')
trapMemL3Free = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 45), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapMemL3Free.setStatus('current')
trapActiveMpuNsfId = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 46), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapActiveMpuNsfId.setStatus('current')
trapStandByMpuNsfId = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 47), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapStandByMpuNsfId.setStatus('current')
trapErpsDomainName = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 48), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapErpsDomainName.setStatus('current')
trapErpsDomainId = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 49), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapErpsDomainId.setStatus('current')
trapErpsStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("init", 1), ("idle", 2), ("protection", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapErpsStatus.setStatus('current')
trapCfmMdName = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 51), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 42))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapCfmMdName.setStatus('current')
trapCfmMaName = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 52), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 44))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapCfmMaName.setStatus('current')
trapCfmMepId = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapCfmMepId.setStatus('current')
trapCfmVlan = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapCfmVlan.setStatus('current')
trapCfmDefect = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("defNone", 0), ("defRDICCM", 1), ("defMACstatus", 2), ("defRemoteCCM", 3), ("defErrorCCM", 4), ("defXconCCM", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapCfmDefect.setStatus('current')
trapEvcName = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 56), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapEvcName.setStatus('current')
trapEvcStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notActive", 0), ("newAndNotActive", 1), ("active", 2), ("newAndActive", 3), ("partiallyActive", 4), ("newAndPartiallyActive", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapEvcStatus.setStatus('current')
trapSyncSystemClockStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("freerun", 1), ("holdover", 2), ("acquiring", 3), ("locked", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapSyncSystemClockStatus.setStatus('current')
trapCesopG704ClockSourceStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 9, 10))).clone(namedValues=NamedValues(("dontcare", 7), ("locked", 9), ("fail", 10)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapCesopG704ClockSourceStatus.setStatus('current')
trapSystemWarningsUnits = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("sysWarUnitsHsEnNoError", 1), ("sysWarUnitsHsEnWES", 2), ("sysWarUnitsHsEnWHSDis", 3), ("sysWarUnitsHsEnWDifMod", 4), ("sysWarUnitsCommFail", 5), ("sysWarUnitsMPLS", 6), ("sysWarUnitsL3", 7)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapSystemWarningsUnits.setStatus('current')
trapSensorGroup = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("boardSensors", 1), ("chipsetSensors", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapSensorGroup.setStatus('current')
rateLimitPortTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 16, 1), )
if mibBuilder.loadTexts: rateLimitPortTable.setStatus('current')
rateLimitPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 16, 1, 1), ).setIndexNames((0, "DMswitch-MIB", "rlPortIndex"))
if mibBuilder.loadTexts: rateLimitPortEntry.setStatus('current')
rlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 16, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: rlPortIndex.setStatus('current')
rlPortInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortInputStatus.setStatus('current')
rlPortOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortOutputStatus.setStatus('current')
rlPortInputRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 16, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortInputRate.setStatus('current')
rlPortInputBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 16, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortInputBurst.setStatus('current')
rlPortOutputRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 16, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortOutputRate.setStatus('current')
rlPortOutputBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 16, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortOutputBurst.setStatus('current')
radiusMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 1))
sshMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 2))
ipFilterMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 3))
radiusServerPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerPortNumber.setStatus('current')
radiusServerKey = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerKey.setStatus('current')
radiusServerRetransmit = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerRetransmit.setStatus('current')
radiusServerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerTimeout.setStatus('current')
radiusMultipleServerTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 1, 7), )
if mibBuilder.loadTexts: radiusMultipleServerTable.setStatus('current')
radiusMultipleServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 1, 7, 1), ).setIndexNames((0, "DMswitch-MIB", "radiusMultipleServerIndex"))
if mibBuilder.loadTexts: radiusMultipleServerEntry.setStatus('current')
radiusMultipleServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 1, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: radiusMultipleServerIndex.setStatus('current')
radiusMultipleServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 1, 7, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radiusMultipleServerAddress.setStatus('current')
radiusMultipleServerPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radiusMultipleServerPortNumber.setStatus('current')
radiusMultipleServerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 1, 7, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusMultipleServerKey.setStatus('current')
radiusMultipleServerRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusMultipleServerRetransmit.setStatus('current')
radiusMultipleServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusMultipleServerTimeout.setStatus('current')
radiusMultipleServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 1, 7, 1, 8), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radiusMultipleServerStatus.setStatus('current')
sshServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 2, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerStatus.setStatus('current')
sshServerMajorVersion = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshServerMajorVersion.setStatus('current')
sshServerMinorVersion = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshServerMinorVersion.setStatus('current')
sshTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshTimeout.setStatus('current')
sshKeySize = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 896))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshKeySize.setStatus('current')
sshRsaHostKey = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 2, 6), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey.setStatus('current')
sshDsaHostKey = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 2, 7), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey.setStatus('current')
sshHostKeyGenAction = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noGen", 1), ("genRsaKey", 2), ("genDsaKey", 3), ("genBothKeys", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshHostKeyGenAction.setStatus('current')
sshHostKeyDelAction = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noDel", 1), ("delRsaKey", 2), ("delDsaKey", 3), ("delBothKeys", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshHostKeyDelAction.setStatus('current')
ipFilterSnmpTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 3, 1), )
if mibBuilder.loadTexts: ipFilterSnmpTable.setStatus('current')
ipFilterSnmpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 3, 1, 1), ).setIndexNames((0, "DMswitch-MIB", "ipFilterSnmpAddress"), (0, "DMswitch-MIB", "ipFilterSnmpMask"))
if mibBuilder.loadTexts: ipFilterSnmpEntry.setStatus('current')
ipFilterSnmpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 3, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: ipFilterSnmpAddress.setStatus('current')
ipFilterSnmpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 3, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: ipFilterSnmpMask.setStatus('current')
ipFilterSnmpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 3, 1, 1, 3), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterSnmpStatus.setStatus('current')
ipFilterHTTPTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 3, 2), )
if mibBuilder.loadTexts: ipFilterHTTPTable.setStatus('current')
ipFilterHTTPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 3, 2, 1), ).setIndexNames((0, "DMswitch-MIB", "ipFilterHTTPAddress"), (0, "DMswitch-MIB", "ipFilterHTTPMask"))
if mibBuilder.loadTexts: ipFilterHTTPEntry.setStatus('current')
ipFilterHTTPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 3, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: ipFilterHTTPAddress.setStatus('current')
ipFilterHTTPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 3, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: ipFilterHTTPMask.setStatus('current')
ipFilterHTTPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 3, 2, 1, 3), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterHTTPStatus.setStatus('current')
ipFilterTelnetTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 3, 3), )
if mibBuilder.loadTexts: ipFilterTelnetTable.setStatus('current')
ipFilterTelnetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 3, 3, 1), ).setIndexNames((0, "DMswitch-MIB", "ipFilterTelnetAddress"), (0, "DMswitch-MIB", "ipFilterTelnetMask"))
if mibBuilder.loadTexts: ipFilterTelnetEntry.setStatus('current')
ipFilterTelnetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 3, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: ipFilterTelnetAddress.setStatus('current')
ipFilterTelnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 3, 3, 1, 2), IpAddress())
if mibBuilder.loadTexts: ipFilterTelnetMask.setStatus('current')
ipFilterTelnetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 3, 3, 1, 3), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterTelnetStatus.setStatus('current')
ipFilterSSHTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 3, 4), )
if mibBuilder.loadTexts: ipFilterSSHTable.setStatus('current')
ipFilterSSHEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 3, 4, 1), ).setIndexNames((0, "DMswitch-MIB", "ipFilterSSHAddress"), (0, "DMswitch-MIB", "ipFilterSSHMask"))
if mibBuilder.loadTexts: ipFilterSSHEntry.setStatus('current')
ipFilterSSHAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 3, 4, 1, 1), IpAddress())
if mibBuilder.loadTexts: ipFilterSSHAddress.setStatus('current')
ipFilterSSHMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 3, 4, 1, 2), IpAddress())
if mibBuilder.loadTexts: ipFilterSSHMask.setStatus('current')
ipFilterSSHStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 3, 4, 1, 3), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterSSHStatus.setStatus('current')
sysLogStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 19, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogStatus.setStatus('current')
sysLogHistoryFlashLevel = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 19, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogHistoryFlashLevel.setStatus('current')
sysLogHistoryRamLevel = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 19, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogHistoryRamLevel.setStatus('current')
remoteLogMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 19, 6))
remoteLogStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 19, 6, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteLogStatus.setStatus('current')
remoteLogLevel = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 19, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteLogLevel.setStatus('current')
remoteLogFacilityType = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 19, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("localUse0", 16), ("localUse1", 17), ("localUse2", 18), ("localUse3", 19), ("localUse4", 20), ("localUse5", 21), ("localUse6", 22), ("localUse7", 23)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteLogFacilityType.setStatus('current')
remoteLogServerTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 19, 6, 4), )
if mibBuilder.loadTexts: remoteLogServerTable.setStatus('current')
remoteLogServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 19, 6, 4, 1), ).setIndexNames((0, "DMswitch-MIB", "remoteLogServerIp"))
if mibBuilder.loadTexts: remoteLogServerEntry.setStatus('current')
remoteLogServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 19, 6, 4, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: remoteLogServerIp.setStatus('current')
remoteLogServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 19, 6, 4, 1, 2), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: remoteLogServerStatus.setStatus('current')
sntpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 20, 1))
sntpStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpStatus.setStatus('current')
sntpPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 20, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 16384))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpPollInterval.setStatus('current')
sntpServerTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 20, 1, 3), )
if mibBuilder.loadTexts: sntpServerTable.setStatus('current')
sntpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 20, 1, 3, 1), ).setIndexNames((0, "DMswitch-MIB", "sntpServerIp"))
if mibBuilder.loadTexts: sntpServerEntry.setStatus('current')
sntpServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 20, 1, 3, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sntpServerIp.setStatus('current')
sntpServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 20, 1, 3, 1, 2), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sntpServerStatus.setStatus('current')
sysCurrentTime = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 20, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCurrentTime.setStatus('current')
sysTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 20, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeZone.setStatus('current')
sysTimeZoneName = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 20, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeZoneName.setStatus('current')
fileInfoTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 21, 1), )
if mibBuilder.loadTexts: fileInfoTable.setStatus('current')
fileInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 21, 1, 1), ).setIndexNames((0, "DMswitch-MIB", "fileInfoUnitID"), (0, "DMswitch-MIB", "fileInfoFileIndex"))
if mibBuilder.loadTexts: fileInfoEntry.setStatus('current')
fileInfoUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 21, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: fileInfoUnitID.setStatus('current')
fileInfoFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 21, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: fileInfoFileIndex.setStatus('current')
fileInfoFlashId = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 21, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileInfoFlashId.setStatus('current')
fileInfoFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 21, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileInfoFileName.setStatus('current')
fileInfoFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 21, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("firmware", 1), ("config", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileInfoFileType.setStatus('current')
fileInfoIsStartUp = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 21, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileInfoIsStartUp.setStatus('current')
fileInfoFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 21, 1, 1, 7), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: fileInfoFileSize.setStatus('current')
fileInfoCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 21, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileInfoCreationTime.setStatus('current')
fileInfoDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 21, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noDelete", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileInfoDelete.setStatus('current')
dmSwitchTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1))
dmSwitchTrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0))
swLoginFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40001)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapLoginUserName"))
if mibBuilder.loadTexts: swLoginFailTrap.setStatus('current')
swLoginSucessTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40002)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapLoginUserName"))
if mibBuilder.loadTexts: swLoginSucessTrap.setStatus('current')
swStackAttachTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40003)).setObjects(("DMswitch-MIB", "swUnitIndex"), ("DMswitch-MIB", "swSerialNumber"))
if mibBuilder.loadTexts: swStackAttachTrap.setStatus('current')
swStackDetachTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40004)).setObjects(("DMswitch-MIB", "swUnitIndex"), ("DMswitch-MIB", "swSerialNumber"))
if mibBuilder.loadTexts: swStackDetachTrap.setStatus('current')
swForbiddenAccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40005)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapForbiddenAccessMode"), ("DMswitch-MIB", "trapForbiddenAccessIp"))
if mibBuilder.loadTexts: swForbiddenAccessTrap.setStatus('current')
swSfpPresenceTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40006)).setObjects(("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapSfpPresenceStatus"))
if mibBuilder.loadTexts: swSfpPresenceTrap.setStatus('current')
swConfigChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40007)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"))
if mibBuilder.loadTexts: swConfigChangeTrap.setStatus('current')
swConfigSaveTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40008)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapConfigSavePartition"))
if mibBuilder.loadTexts: swConfigSaveTrap.setStatus('current')
swFanStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40009)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "swIndivFanUnitIndex"), ("DMswitch-MIB", "swIndivFanIndex"), ("DMswitch-MIB", "swIndivFanStatus"))
if mibBuilder.loadTexts: swFanStatusChangeTrap.setStatus('current')
swTrapsLostTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40010))
if mibBuilder.loadTexts: swTrapsLostTrap.setStatus('current')
swPowerStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40011)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "swIndivPowerUnitIndex"), ("DMswitch-MIB", "swIndivPowerIndex"), ("DMswitch-MIB", "swIndivPowerStatus"))
if mibBuilder.loadTexts: swPowerStatusChangeTrap.setStatus('current')
swAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40012)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "swIndivAlarmUnitIndex"), ("DMswitch-MIB", "swIndivAlarmIndex"), ("DMswitch-MIB", "swIndivAlarmStatus"))
if mibBuilder.loadTexts: swAlarmTrap.setStatus('current')
swDuplicatedIp = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40013)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapDuplicatedIpVlan"), ("DMswitch-MIB", "trapDuplicatedIpAddress"), ("DMswitch-MIB", "trapDuplicatedIpMacAddress"))
if mibBuilder.loadTexts: swDuplicatedIp.setStatus('current')
swLoopbackOnPortDetected = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40014)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "portIndex"))
if mibBuilder.loadTexts: swLoopbackOnPortDetected.setStatus('current')
swLoopbackOnPortNoMoreDetected = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40015)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "portIndex"))
if mibBuilder.loadTexts: swLoopbackOnPortNoMoreDetected.setStatus('current')
swUnidirLinkDetected = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40016)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "portIndex"))
if mibBuilder.loadTexts: swUnidirLinkDetected.setStatus('current')
swUnidirLinkRecovered = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40017)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "portIndex"))
if mibBuilder.loadTexts: swUnidirLinkRecovered.setStatus('current')
swCriticalEventDetected = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40018)).setObjects(("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"))
if mibBuilder.loadTexts: swCriticalEventDetected.setStatus('current')
swCriticalEventRecovered = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40019)).setObjects(("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"))
if mibBuilder.loadTexts: swCriticalEventRecovered.setStatus('current')
swLinkFlapDetected = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40020)).setObjects(("DMswitch-MIB", "portIndex"))
if mibBuilder.loadTexts: swLinkFlapDetected.setStatus('current')
swLinkFlapNoMoreDetected = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40021)).setObjects(("DMswitch-MIB", "portIndex"))
if mibBuilder.loadTexts: swLinkFlapNoMoreDetected.setStatus('current')
swEapsStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40022)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapEapsDomainId"), ("DMswitch-MIB", "trapEapsDomainName"), ("DMswitch-MIB", "trapEapsStatus"))
if mibBuilder.loadTexts: swEapsStatusChange.setStatus('current')
swPortSecurityViolation = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40023)).setObjects(("DMswitch-MIB", "portIndex"))
if mibBuilder.loadTexts: swPortSecurityViolation.setStatus('current')
swHighTemperatureDetected = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40024)).setObjects(("DMswitch-MIB", "swUnitIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapTemperature"))
if mibBuilder.loadTexts: swHighTemperatureDetected.setStatus('current')
swHighTemperatureNoMoreDetected = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40025)).setObjects(("DMswitch-MIB", "swUnitIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapTemperature"))
if mibBuilder.loadTexts: swHighTemperatureNoMoreDetected.setStatus('current')
swFuseStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40026)).setObjects(("DMswitch-MIB", "swUnitIndex"), ("DMswitch-MIB", "trapFuseId"), ("DMswitch-MIB", "trapFuseStatus"))
if mibBuilder.loadTexts: swFuseStatusChange.setStatus('current')
swFansBoardPresenceTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40027)).setObjects(("DMswitch-MIB", "trapFansBoardPresenceStatus"))
if mibBuilder.loadTexts: swFansBoardPresenceTrap.setStatus('current')
swStandbyMpuTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40028)).setObjects(("DMswitch-MIB", "swMpuIndex"), ("DMswitch-MIB", "swMpuSerialNumber"), ("DMswitch-MIB", "swMpuModelId"), ("DMswitch-MIB", "trapStandbyMpuPresenceStatus"))
if mibBuilder.loadTexts: swStandbyMpuTrap.setStatus('current')
swNonHomologSfpTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40029)).setObjects(("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"))
if mibBuilder.loadTexts: swNonHomologSfpTrap.setStatus('current')
swHighCpuUsageDetected = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40030)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"))
if mibBuilder.loadTexts: swHighCpuUsageDetected.setStatus('current')
swHighCpuUsageNoMoreDetected = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40031)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"))
if mibBuilder.loadTexts: swHighCpuUsageNoMoreDetected.setStatus('current')
swDuplicatedMac = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40032)).setObjects(("DMswitch-MIB", "trapMacAddressMove"))
if mibBuilder.loadTexts: swDuplicatedMac.setStatus('current')
swHighMemoryUsageDetected = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40033)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapMemFree"))
if mibBuilder.loadTexts: swHighMemoryUsageDetected.setStatus('current')
swHighMemoryUsageNoMoreDetected = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40034)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapMemFree"))
if mibBuilder.loadTexts: swHighMemoryUsageNoMoreDetected.setStatus('current')
swNewBootloaderVersion = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40035)).setObjects(("DMswitch-MIB", "swUnitIndex"), ("DMswitch-MIB", "trapBootloaderNew"))
if mibBuilder.loadTexts: swNewBootloaderVersion.setStatus('current')
swCesopTdmStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40036)).setObjects(("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapCesopTdmStatus"))
if mibBuilder.loadTexts: swCesopTdmStatusTrap.setStatus('current')
swCesopTdmRemoteStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40037)).setObjects(("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapCesopTdmRemoteStatus"))
if mibBuilder.loadTexts: swCesopTdmRemoteStatusTrap.setStatus('current')
swCesopTdmCasStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40038)).setObjects(("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapCesopTdmCasStatus"))
if mibBuilder.loadTexts: swCesopTdmCasStatusTrap.setStatus('current')
swCesopTdmCrcStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40039)).setObjects(("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapCesopTdmCrcStatus"))
if mibBuilder.loadTexts: swCesopTdmCrcStatusTrap.setStatus('current')
swCesopBundleLocalTdmStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40040)).setObjects(("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapCesopBundleLocalTdmStatus"))
if mibBuilder.loadTexts: swCesopBundleLocalTdmStatusTrap.setStatus('current')
swCesopBundleRemoteTdmStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40041)).setObjects(("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapCesopBundleRemoteTdmStatus"))
if mibBuilder.loadTexts: swCesopBundleRemoteTdmStatusTrap.setStatus('current')
swCesopBundleLocalStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40042)).setObjects(("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapCesopBundleLocalStatus"))
if mibBuilder.loadTexts: swCesopBundleLocalStatusTrap.setStatus('current')
swCesopBundleRemoteStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40043)).setObjects(("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapCesopBundleRemoteStatus"))
if mibBuilder.loadTexts: swCesopBundleRemoteStatusTrap.setStatus('current')
swCesopBundlePktMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40044)).setObjects(("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapCesopBundlePktMismatchStatus"))
if mibBuilder.loadTexts: swCesopBundlePktMismatchTrap.setStatus('current')
swCesopBundleNextHopTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40045)).setObjects(("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapCesopBundleNextHopStatus"))
if mibBuilder.loadTexts: swCesopBundleNextHopTrap.setStatus('current')
swCesopClockAdapLinkQualityTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40046)).setObjects(("DMswitch-MIB", "swUnitIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapCesopClockAdapLinkQuality"))
if mibBuilder.loadTexts: swCesopClockAdapLinkQualityTrap.setStatus('current')
swCesopClockSourceTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40047)).setObjects(("DMswitch-MIB", "swUnitIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapCesopClockSourceStatus"))
if mibBuilder.loadTexts: swCesopClockSourceTrap.setStatus('current')
swRemoteDeviceReady = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40048)).setObjects(("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"))
if mibBuilder.loadTexts: swRemoteDeviceReady.setStatus('current')
swRemoteDeviceLost = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40049)).setObjects(("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"))
if mibBuilder.loadTexts: swRemoteDeviceLost.setStatus('current')
swRemoteDeviceConfigFail = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40050)).setObjects(("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"))
if mibBuilder.loadTexts: swRemoteDeviceConfigFail.setStatus('current')
swRemoteDeviceConfigForced = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40051)).setObjects(("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"))
if mibBuilder.loadTexts: swRemoteDeviceConfigForced.setStatus('current')
swFanFuseStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40052)).setObjects(("DMswitch-MIB", "swUnitIndex"), ("DMswitch-MIB", "trapFuseId"), ("DMswitch-MIB", "trapFuseStatus"))
if mibBuilder.loadTexts: swFanFuseStatusChange.setStatus('current')
swDyingGaspPackReceived = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40053)).setObjects(("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"))
if mibBuilder.loadTexts: swDyingGaspPackReceived.setStatus('current')
swBroadcastStormCheckChange = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40054)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapBroadcastStormControlStatus"), ("DMswitch-MIB", "trapBroadcastStormControlPPS"))
if mibBuilder.loadTexts: swBroadcastStormCheckChange.setStatus('current')
swMulticastStormCheckChange = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40055)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapMulticastStormControlStatus"), ("DMswitch-MIB", "trapMulticastStormControlPPS"))
if mibBuilder.loadTexts: swMulticastStormCheckChange.setStatus('current')
swBpduProtectLimit = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40056)).setObjects(("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"))
if mibBuilder.loadTexts: swBpduProtectLimit.setStatus('current')
swChangeStatusLDP = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40057)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapStatusLDP"), ("DMswitch-MIB", "trapIdLDP"))
if mibBuilder.loadTexts: swChangeStatusLDP.setStatus('current')
swChangeStatusTunnelRSVP = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40058)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapStatusTunnelRSVP"), ("DMswitch-MIB", "trapIdTunnelRSVP"))
if mibBuilder.loadTexts: swChangeStatusTunnelRSVP.setStatus('current')
swBpduProtect = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40059)).setObjects(("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"))
if mibBuilder.loadTexts: swBpduProtect.setStatus('current')
swRouteTableFull = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40060)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"))
if mibBuilder.loadTexts: swRouteTableFull.setStatus('current')
swPanelStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40061)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapPanelStatus"))
if mibBuilder.loadTexts: swPanelStatusTrap.setStatus('current')
swLSTGroupLinkStatusDown = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40062)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapLSTGroup"))
if mibBuilder.loadTexts: swLSTGroupLinkStatusDown.setStatus('current')
swLSTGroupLinkStatusUp = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40063)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapLSTGroup"))
if mibBuilder.loadTexts: swLSTGroupLinkStatusUp.setStatus('current')
swHighCpuL3UsageDetected = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40064)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"))
if mibBuilder.loadTexts: swHighCpuL3UsageDetected.setStatus('current')
swHighCpuL3UsageNoMoreDetected = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40065)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"))
if mibBuilder.loadTexts: swHighCpuL3UsageNoMoreDetected.setStatus('current')
swHighMemoryL3UsageDetected = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40066)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapMemL3Free"))
if mibBuilder.loadTexts: swHighMemoryL3UsageDetected.setStatus('current')
swHighMemoryL3UsageNoMoreDetected = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40067)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapMemL3Free"))
if mibBuilder.loadTexts: swHighMemoryL3UsageNoMoreDetected.setStatus('current')
swMpuNsfIdDiffers = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40068)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapActiveMpuNsfId"), ("DMswitch-MIB", "trapStandByMpuNsfId"))
if mibBuilder.loadTexts: swMpuNsfIdDiffers.setStatus('current')
swErpsStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40069)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapErpsDomainId"), ("DMswitch-MIB", "trapErpsDomainName"), ("DMswitch-MIB", "trapErpsStatus"))
if mibBuilder.loadTexts: swErpsStatusChange.setStatus('current')
swCfmDefect = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40070)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapCfmMdName"), ("DMswitch-MIB", "trapCfmMaName"), ("DMswitch-MIB", "trapCfmMepId"), ("DMswitch-MIB", "trapCfmVlan"), ("DMswitch-MIB", "trapCfmDefect"))
if mibBuilder.loadTexts: swCfmDefect.setStatus('current')
swLldpRemoteChange = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40071)).setObjects(("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"))
if mibBuilder.loadTexts: swLldpRemoteChange.setStatus('current')
swPoeOverCurrent = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40072)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "portIndex"))
if mibBuilder.loadTexts: swPoeOverCurrent.setStatus('current')
swPoePowerRestriction = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40073)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "portIndex"))
if mibBuilder.loadTexts: swPoePowerRestriction.setStatus('current')
swCoreDump = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40074)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"))
if mibBuilder.loadTexts: swCoreDump.setStatus('current')
swElmiEvcStatus = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40075)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapEvcName"), ("DMswitch-MIB", "trapEvcStatus"))
if mibBuilder.loadTexts: swElmiEvcStatus.setStatus('current')
swSyncSystemClockSwitchHier = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40076)).setObjects(("DMswitch-MIB", "swUnitIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"))
if mibBuilder.loadTexts: swSyncSystemClockSwitchHier.setStatus('current')
swSyncSystemClockStatus = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40077)).setObjects(("DMswitch-MIB", "swUnitIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapSyncSystemClockStatus"))
if mibBuilder.loadTexts: swSyncSystemClockStatus.setStatus('current')
swHostTableFull = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40078)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"))
if mibBuilder.loadTexts: swHostTableFull.setStatus('current')
swSyncG704ClockStatus = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40079)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapCesopG704ClockSourceStatus"))
if mibBuilder.loadTexts: swSyncG704ClockStatus.setStatus('current')
swSystemWarningsUnits = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40080)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapSystemWarningsUnits"))
if mibBuilder.loadTexts: swSystemWarningsUnits.setStatus('current')
swRebootDueToOvertemp = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40081)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "swUnitIndex"), ("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapSensorGroup"), ("DMswitch-MIB", "trapTemperature"))
if mibBuilder.loadTexts: swRebootDueToOvertemp.setStatus('current')
countHoldPktsTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 22, 1), )
if mibBuilder.loadTexts: countHoldPktsTable.setStatus('current')
countHoldPktsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 22, 1, 1), ).setIndexNames((0, "DMswitch-MIB", "interfaceNumber"))
if mibBuilder.loadTexts: countHoldPktsEntry.setStatus('current')
interfaceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 22, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceNumber.setStatus('current')
countHoldPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 22, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: countHoldPkts.setStatus('current')
filterCounterInfoTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 23, 1), )
if mibBuilder.loadTexts: filterCounterInfoTable.setStatus('current')
filterCounterInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 23, 1, 1), ).setIndexNames((0, "DMswitch-MIB", "filterCounterInfoIndex"))
if mibBuilder.loadTexts: filterCounterInfoEntry.setStatus('current')
filterCounterInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 23, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterCounterInfoIndex.setStatus('current')
filterCounterInfoRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 23, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterCounterInfoRemark.setStatus('current')
filterCounterValueTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 23, 2), )
if mibBuilder.loadTexts: filterCounterValueTable.setStatus('current')
filterCounterValueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 23, 2, 1), ).setIndexNames((0, "DMswitch-MIB", "filterCounterInfoIndex"), (0, "DMswitch-MIB", "filterCounterValueIndex"))
if mibBuilder.loadTexts: filterCounterValueEntry.setStatus('current')
filterCounterValueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 23, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterCounterValueIndex.setStatus('current')
filterCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 23, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterCounterValue.setStatus('current')
eapsInfoTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 24, 1), )
if mibBuilder.loadTexts: eapsInfoTable.setStatus('current')
eapsInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 24, 1, 1), ).setIndexNames((0, "DMswitch-MIB", "eapsInfoId"))
if mibBuilder.loadTexts: eapsInfoEntry.setStatus('current')
eapsInfoId = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 24, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapsInfoId.setStatus('current')
eapsInfoName = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 24, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapsInfoName.setStatus('current')
eapsInfoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 24, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("master", 1), ("transit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapsInfoMode.setStatus('current')
eapsInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 24, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("idle", 0), ("complete", 1), ("failed", 2), ("linksup", 3), ("linkdown", 4), ("preforwarding", 5), ("init", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapsInfoState.setStatus('current')
cfmProbeDmTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 25, 1), )
if mibBuilder.loadTexts: cfmProbeDmTable.setStatus('current')
cfmProbeDmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 25, 1, 1), ).setIndexNames((0, "DMswitch-MIB", "cfmProbeDmIndex"))
if mibBuilder.loadTexts: cfmProbeDmEntry.setStatus('current')
cfmProbeDmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 25, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmProbeDmIndex.setStatus('current')
cfmProbeDmAvgDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 25, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmProbeDmAvgDelay.setStatus('current')
cfmProbeDmAvgJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 25, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmProbeDmAvgJitter.setStatus('current')
cfmProbeDmLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 25, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmProbeDmLoss.setStatus('current')
cpuActiveUsageTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 26, 1), )
if mibBuilder.loadTexts: cpuActiveUsageTable.setStatus('current')
cpuActiveUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 26, 1, 1), ).setIndexNames((0, "DMswitch-MIB", "cpuActiveUsageIndex"))
if mibBuilder.loadTexts: cpuActiveUsageEntry.setStatus('current')
cpuActiveUsageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 26, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: cpuActiveUsageIndex.setStatus('current')
cpuActiveUsageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 26, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuActiveUsageValue.setStatus('current')
memActiveUsageTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 26, 2), )
if mibBuilder.loadTexts: memActiveUsageTable.setStatus('current')
memActiveUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 26, 2, 1), ).setIndexNames((0, "DMswitch-MIB", "memActiveUsageIndex"))
if mibBuilder.loadTexts: memActiveUsageEntry.setStatus('current')
memActiveUsageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 26, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: memActiveUsageIndex.setStatus('current')
memActiveUsageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 26, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memActiveUsageValue.setStatus('current')
cpuStandbyUsageTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 26, 3), )
if mibBuilder.loadTexts: cpuStandbyUsageTable.setStatus('current')
cpuStandbyUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 26, 3, 1), ).setIndexNames((0, "DMswitch-MIB", "cpuStandbyUsageIndex"))
if mibBuilder.loadTexts: cpuStandbyUsageEntry.setStatus('current')
cpuStandbyUsageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 26, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: cpuStandbyUsageIndex.setStatus('current')
cpuStandbyUsageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 26, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuStandbyUsageValue.setStatus('current')
memStandbyUsageTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 26, 4), )
if mibBuilder.loadTexts: memStandbyUsageTable.setStatus('current')
memStandbyUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 26, 4, 1), ).setIndexNames((0, "DMswitch-MIB", "memStandbyUsageIndex"))
if mibBuilder.loadTexts: memStandbyUsageEntry.setStatus('current')
memStandbyUsageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 26, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: memStandbyUsageIndex.setStatus('current')
memStandbyUsageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 26, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memStandbyUsageValue.setStatus('current')
queuePortTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 27, 1), )
if mibBuilder.loadTexts: queuePortTable.setStatus('current')
queuePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 27, 1, 1), ).setIndexNames((0, "DMswitch-MIB", "queuePortIfIndex"), (0, "DMswitch-MIB", "queuePortQueueIndex"))
if mibBuilder.loadTexts: queuePortEntry.setStatus('current')
queuePortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 27, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: queuePortIfIndex.setStatus('current')
queuePortQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 27, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: queuePortQueueIndex.setStatus('current')
queuePortSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 27, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queuePortSentPackets.setStatus('current')
queuePortSentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 27, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queuePortSentBytes.setStatus('current')
queuePortDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 27, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queuePortDroppedPackets.setStatus('current')
queuePortDroppedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 27, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queuePortDroppedBytes.setStatus('current')
ddTransceiversTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 28, 1), )
if mibBuilder.loadTexts: ddTransceiversTable.setStatus('current')
ddTransceiversEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 28, 1, 1), ).setIndexNames((0, "DMswitch-MIB", "ddTransceiversIfIndex"))
if mibBuilder.loadTexts: ddTransceiversEntry.setStatus('current')
ddTransceiversIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 28, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: ddTransceiversIfIndex.setStatus('current')
ddTransceiversTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 28, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddTransceiversTemperature.setStatus('current')
ddTransceiversVcc3v3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 28, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddTransceiversVcc3v3.setStatus('current')
ddTransceiversRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 28, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddTransceiversRxPower.setStatus('current')
ddTransceiversTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 28, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddTransceiversTxPower.setStatus('current')
ddTransceiversTxBias = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 28, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddTransceiversTxBias.setStatus('current')
mibBuilder.exportSymbols("DMswitch-MIB", cpuActiveUsageEntry=cpuActiveUsageEntry, cpuActiveUsageValue=cpuActiveUsageValue, swCesopBundlePktMismatchTrap=swCesopBundlePktMismatchTrap, ipFilterHTTPTable=ipFilterHTTPTable, tftpMgt=tftpMgt, queuePortTable=queuePortTable, ipFilterTelnetAddress=ipFilterTelnetAddress, fileInfoDelete=fileInfoDelete, remoteLogMgt=remoteLogMgt, swLldpRemoteChange=swLldpRemoteChange, trapForbiddenAccessIp=trapForbiddenAccessIp, ipFilterSnmpStatus=ipFilterSnmpStatus, trapDuplicatedIpMacAddress=trapDuplicatedIpMacAddress, fileInfoEntry=fileInfoEntry, igmpSnoopMulticastStaticTable=igmpSnoopMulticastStaticTable, igmpSnoopQueryTimeout=igmpSnoopQueryTimeout, swIndivAlarmStatus=swIndivAlarmStatus, radiusMultipleServerPortNumber=radiusMultipleServerPortNumber, trapMulticastStormControlStatus=trapMulticastStormControlStatus, ipFilterSnmpAddress=ipFilterSnmpAddress, trapStandbyMpuPresenceStatus=trapStandbyMpuPresenceStatus, ipFilterSSHStatus=ipFilterSSHStatus, trapDuplicatedIpAddress=trapDuplicatedIpAddress, swCesopBundleNextHopTrap=swCesopBundleNextHopTrap, vlanIndex=vlanIndex, trapEapsDomainName=trapEapsDomainName, lacpPortIndex=lacpPortIndex, swErpsStatusChange=swErpsStatusChange, lacpPortStatus=lacpPortStatus, swFirmwareVer=swFirmwareVer, ddTransceiversVcc3v3=ddTransceiversVcc3v3, swAlarmTrap=swAlarmTrap, igmpSnoopMulticastCurrentIpAddress=igmpSnoopMulticastCurrentIpAddress, trapCfmMepId=trapCfmMepId, eapsMgt=eapsMgt, rlPortOutputRate=rlPortOutputRate, prioWrrWeight=prioWrrWeight, swIndivPowerIndex=swIndivPowerIndex, swHighMemoryUsageDetected=swHighMemoryUsageDetected, swLSTGroupLinkStatusUp=swLSTGroupLinkStatusUp, trunkMaxId=trunkMaxId, rateLimitMgt=rateLimitMgt, swLinkFlapDetected=swLinkFlapDetected, staPortAdminEdgePort=staPortAdminEdgePort, swCesopTdmCasStatusTrap=swCesopTdmCasStatusTrap, trapFuseId=trapFuseId, swCesopTdmRemoteStatusTrap=swCesopTdmRemoteStatusTrap, filterCounterMgt=filterCounterMgt, swCesopTdmCrcStatusTrap=swCesopTdmCrcStatusTrap, trapEvcStatus=trapEvcStatus, ddTransceiversIfIndex=ddTransceiversIfIndex, portAutonegotiation=portAutonegotiation, swCesopBundleRemoteStatusTrap=swCesopBundleRemoteStatusTrap, trapCesopBundleLocalStatus=trapCesopBundleLocalStatus, cpuStandbyUsageTable=cpuStandbyUsageTable, prioWrrTrafficClass=prioWrrTrafficClass, trapCesopBundlePktMismatchStatus=trapCesopBundlePktMismatchStatus, rlPortOutputBurst=rlPortOutputBurst, cfmProbeDmEntry=cfmProbeDmEntry, eapsInfoState=eapsInfoState, mirrorSourcePort=mirrorSourcePort, ipHttpPort=ipHttpPort, switchIndivAlarmOutTable=switchIndivAlarmOutTable, swLinkFlapNoMoreDetected=swLinkFlapNoMoreDetected, tftpFlashConfig=tftpFlashConfig, sysCurrentTime=sysCurrentTime, trapCesopTdmCrcStatus=trapCesopTdmCrcStatus, radiusMultipleServerEntry=radiusMultipleServerEntry, trapCesopBundleRemoteStatus=trapCesopBundleRemoteStatus, sshHostKeyDelAction=sshHostKeyDelAction, igmpSnoopQueryMaxResponseTime=igmpSnoopQueryMaxResponseTime, fileInfoFileType=fileInfoFileType, ipFilterTelnetTable=ipFilterTelnetTable, swIndivPowerStatus=swIndivPowerStatus, swCriticalEventRecovered=swCriticalEventRecovered, vlanEntry=vlanEntry, lacpPortTable=lacpPortTable, trapEapsDomainId=trapEapsDomainId, trunkTable=trunkTable, swSessionSrcIP=swSessionSrcIP, swSessionName=swSessionName, cfmProbeDmIndex=cfmProbeDmIndex, ValidStatus=ValidStatus, swMpuRoleInSystem=swMpuRoleInSystem, sysLogMgt=sysLogMgt, cfmProbeDmAvgJitter=cfmProbeDmAvgJitter, priorityMgt=priorityMgt, trunkCreation=trunkCreation, ipFilterSSHEntry=ipFilterSSHEntry, sntpPollInterval=sntpPollInterval, switchIndivAlarmOutEntry=switchIndivAlarmOutEntry, ipFilterSSHAddress=ipFilterSSHAddress, swMpuSerialNumber=swMpuSerialNumber, swMpuModelId=swMpuModelId, prioWrrTable=prioWrrTable, swPanelStatusTrap=swPanelStatusTrap, radiusMultipleServerTimeout=radiusMultipleServerTimeout, ddTransceiversMgmt=ddTransceiversMgmt, sshKeySize=sshKeySize, ipFilterTelnetEntry=ipFilterTelnetEntry, swCriticalEventDetected=swCriticalEventDetected, trapInfAlarmVal=trapInfAlarmVal, trunkEntry=trunkEntry, switchIndivPowerTable=switchIndivPowerTable, igmpSnoopVersion=igmpSnoopVersion, swBundleIntfNumber=swBundleIntfNumber, igmpSnoopMulticastCurrentVlanIndex=igmpSnoopMulticastCurrentVlanIndex, radiusMultipleServerRetransmit=radiusMultipleServerRetransmit, trapDestVersion=trapDestVersion, ddTransceiversTable=ddTransceiversTable, radiusServerTimeout=radiusServerTimeout, sshTimeout=sshTimeout, swDuplicatedMac=swDuplicatedMac, swIndivFanUnitIndex=swIndivFanUnitIndex, swProdName=swProdName, remoteLogServerEntry=remoteLogServerEntry, igmpSnoopQuerier=igmpSnoopQuerier, sshServerMinorVersion=sshServerMinorVersion, swLoopbackOnPortDetected=swLoopbackOnPortDetected, switchMacAddrUsageEntry=switchMacAddrUsageEntry, ipFilterMgt=ipFilterMgt, remoteLogServerStatus=remoteLogServerStatus, switchIndivPowerEntry=switchIndivPowerEntry, trunkValidNumber=trunkValidNumber, swProdManufacturer=swProdManufacturer, ipFilterSnmpEntry=ipFilterSnmpEntry, swIdentifier=swIdentifier, trapCesopBundleLocalTdmStatus=trapCesopBundleLocalTdmStatus, trapForbiddenAccessMode=trapForbiddenAccessMode, trapCesopBundleRemoteTdmStatus=trapCesopBundleRemoteTdmStatus, swMacAddrUnitIndex=swMacAddrUnitIndex, switchMpuTable=switchMpuTable, swRebootDueToOvertemp=swRebootDueToOvertemp, mirrorTable=mirrorTable, cpuActiveUsageTable=cpuActiveUsageTable, trapCesopTdmRemoteStatus=trapCesopTdmRemoteStatus, swIndivAlarmOutStatus=swIndivAlarmOutStatus, trapCesopClockSourceStatus=trapCesopClockSourceStatus, swFuseStatusChange=swFuseStatusChange, ipFilterSnmpTable=ipFilterSnmpTable, trapPanelStatus=trapPanelStatus, igmpSnoopRouterCurrentTable=igmpSnoopRouterCurrentTable, staProtocolType=staProtocolType, filterCounterInfoEntry=filterCounterInfoEntry, portMdiStatus=portMdiStatus, staPortOperPointToPoint=staPortOperPointToPoint, switchMacAddrUsageTable=switchMacAddrUsageTable, trapCesopClockAdapLinkQuality=trapCesopClockAdapLinkQuality, swRemoteDeviceLost=swRemoteDeviceLost, filterCounterValue=filterCounterValue, swMpuIndex=swMpuIndex, trapMulticastStormControlPPS=trapMulticastStormControlPPS, trapEapsStatus=trapEapsStatus, cpuStandbyUsageValue=cpuStandbyUsageValue, filterCounterInfoRemark=filterCounterInfoRemark, swStackDetachTrap=swStackDetachTrap, filterCounterValueIndex=filterCounterValueIndex, ipFilterHTTPEntry=ipFilterHTTPEntry, lacpMgt=lacpMgt, rlPortInputStatus=rlPortInputStatus, swSyncG704ClockStatus=swSyncG704ClockStatus, ipMgt=ipMgt, trapDestTable=trapDestTable, swG704IntfNumber=swG704IntfNumber, swTrapsLostTrap=swTrapsLostTrap, swIndivAlarmIndex=swIndivAlarmIndex, swRemoteDeviceReady=swRemoteDeviceReady, remoteLogFacilityType=remoteLogFacilityType, switchNumber=switchNumber, trapIdTunnelRSVP=trapIdTunnelRSVP, switchIndivFanTable=switchIndivFanTable, switchIndivAlarmEntry=switchIndivAlarmEntry, swHighCpuL3UsageDetected=swHighCpuL3UsageDetected, swBpduProtect=swBpduProtect, ipFilterSSHTable=ipFilterSSHTable, staPortIndex=staPortIndex, swConfigSaveTrap=swConfigSaveTrap, radiusServerPortNumber=radiusServerPortNumber, bcastStormPacketRate=bcastStormPacketRate, fileInfoFileSize=fileInfoFileSize, sntpStatus=sntpStatus, swHighCpuL3UsageNoMoreDetected=swHighCpuL3UsageNoMoreDetected, memActiveUsageIndex=memActiveUsageIndex, trapDevNo=trapDevNo, trapCesopG704ClockSourceStatus=trapCesopG704ClockSourceStatus, ipTelnetState=ipTelnetState, igmpSnoopMulticastStaticIpAddress=igmpSnoopMulticastStaticIpAddress, cfmProbeDmTable=cfmProbeDmTable, queuePortDroppedBytes=queuePortDroppedBytes, swSyncSystemClockSwitchHier=swSyncSystemClockSwitchHier, swPowerStatusChangeTrap=swPowerStatusChangeTrap, swFansBoardPresenceTrap=swFansBoardPresenceTrap, swCesopTdmStatusTrap=swCesopTdmStatusTrap, swHighTemperatureDetected=swHighTemperatureDetected, sshRsaHostKey=sshRsaHostKey, bcastStormStatus=bcastStormStatus, eapsInfoMode=eapsInfoMode, mirrorEntry=mirrorEntry, queuePortMgmt=queuePortMgmt, cpuActiveUsageIndex=cpuActiveUsageIndex, ipFilterTelnetStatus=ipFilterTelnetStatus, fileInfoFileIndex=fileInfoFileIndex, swHighTemperatureNoMoreDetected=swHighTemperatureNoMoreDetected, trapCfmMdName=trapCfmMdName, remoteLogServerIp=remoteLogServerIp, swEapsStatusChange=swEapsStatusChange, staPortSystemStatus=staPortSystemStatus, rlPortInputBurst=rlPortInputBurst, swVendorId=swVendorId, trapDestMgt=trapDestMgt, radiusServerKey=radiusServerKey, radiusMgt=radiusMgt, memStandbyUsageIndex=memStandbyUsageIndex, rateLimitPortTable=rateLimitPortTable, trapDevLocalId=trapDevLocalId, trapEvcName=trapEvcName, rlPortIndex=rlPortIndex, prioQueueMode=prioQueueMode, swCesopClockSourceTrap=swCesopClockSourceTrap, swChassisModel=swChassisModel, switchProductId=switchProductId, swMpuBootLoaderVer=swMpuBootLoaderVer, restartControl=restartControl, trapStatusTunnelRSVP=trapStatusTunnelRSVP, portType=portType, switchSessionTable=switchSessionTable, portMgt=portMgt, sysTimeMgt=sysTimeMgt, trapTemperature=trapTemperature, memStandbyUsageTable=memStandbyUsageTable, swMulticastStormCheckChange=swMulticastStormCheckChange, swIndivFanIndex=swIndivFanIndex, ipAddressMode=ipAddressMode, swCesopBundleLocalStatusTrap=swCesopBundleLocalStatusTrap, swRouteTableFull=swRouteTableFull, swSlotNumber=swSlotNumber, trapDestCommunity=trapDestCommunity, trapIdLDP=trapIdLDP, swVC4Number=swVC4Number, trunkMgt=trunkMgt, portFlowCtrlStatus=portFlowCtrlStatus, queuePortSentPackets=queuePortSentPackets, trapBroadcastStormControlStatus=trapBroadcastStormControlStatus, swSerialNumber=swSerialNumber, ddTransceiversRxPower=ddTransceiversRxPower, fileInfoCreationTime=fileInfoCreationTime, swVC12Number=swVC12Number, swMemUsage=swMemUsage, mirrorType=mirrorType, radiusMultipleServerTable=radiusMultipleServerTable, ipFilterHTTPStatus=ipFilterHTTPStatus, bcastStormMgt=bcastStormMgt, swCfmDefect=swCfmDefect, switchResObj=switchResObj)
mibBuilder.exportSymbols("DMswitch-MIB", sshDsaHostKey=sshDsaHostKey, igmpSnoopMulticastStaticPorts=igmpSnoopMulticastStaticPorts, swConfigChangeTrap=swConfigChangeTrap, igmpSnoopMulticastStaticVlanIndex=igmpSnoopMulticastStaticVlanIndex, igmpSnoopMgt=igmpSnoopMgt, swHighMemoryUsageNoMoreDetected=swHighMemoryUsageNoMoreDetected, ipPrimaryDnsServer=ipPrimaryDnsServer, swUnidirLinkDetected=swUnidirLinkDetected, igmpSnoopRouterCurrentEntry=igmpSnoopRouterCurrentEntry, portIndex=portIndex, igmpSnoopRouterStaticPorts=igmpSnoopRouterStaticPorts, swE1cIntfNumber=swE1cIntfNumber, portFlowCtrlCfg=portFlowCtrlCfg, igmpSnoopRouterCurrentVlanIndex=igmpSnoopRouterCurrentVlanIndex, switchMgt=switchMgt, rlPortOutputStatus=rlPortOutputStatus, ipFilterTelnetMask=ipFilterTelnetMask, swMacAddrUsageValue=swMacAddrUsageValue, ipHttpsPort=ipHttpsPort, bcastStormTable=bcastStormTable, swSdhIntfNumber=swSdhIntfNumber, staSystemStatus=staSystemStatus, trapConfigSavePartition=trapConfigSavePartition, swFanStatusChangeTrap=swFanStatusChangeTrap, trunkIndex=trunkIndex, staMgt=staMgt, memActiveUsageEntry=memActiveUsageEntry, igmpSnoopRouterStaticTable=igmpSnoopRouterStaticTable, swIndivAlarmUnitIndex=swIndivAlarmUnitIndex, remoteLogServerTable=remoteLogServerTable, swFanFuseStatusChange=swFanFuseStatusChange, swIndivPowerUnitIndex=swIndivPowerUnitIndex, portTable=portTable, ddTransceiversTxPower=ddTransceiversTxPower, filterCounterInfoIndex=filterCounterInfoIndex, bcastStormIfIndex=bcastStormIfIndex, trapSensorGroup=trapSensorGroup, portSpeedDpxCfg=portSpeedDpxCfg, swCoreDump=swCoreDump, swUnitIndex=swUnitIndex, fileInfoUnitID=fileInfoUnitID, trapErpsStatus=trapErpsStatus, remoteLogStatus=remoteLogStatus, fileMgt=fileMgt, radiusMultipleServerKey=radiusMultipleServerKey, switchInfoTable=switchInfoTable, sysTimeZoneName=sysTimeZoneName, swStandbyMpuTrap=swStandbyMpuTrap, swHighMemoryL3UsageDetected=swHighMemoryL3UsageDetected, staPortOperEdgePort=staPortOperEdgePort, staPortEntry=staPortEntry, StaPathCostMode=StaPathCostMode, swChangeStatusLDP=swChangeStatusLDP, trapStatusLDP=trapStatusLDP, staPortAdminPointToPoint=staPortAdminPointToPoint, swStackAttachTrap=swStackAttachTrap, trapErpsDomainId=trapErpsDomainId, ipFilterSnmpMask=ipFilterSnmpMask, restartFirmware=restartFirmware, cfmProbeDmAvgDelay=cfmProbeDmAvgDelay, swMpuNsfIdDiffers=swMpuNsfIdDiffers, swUnidirLinkRecovered=swUnidirLinkRecovered, swPtpIntfNumber=swPtpIntfNumber, countHoldPkts=countHoldPkts, dmSwitchTrapsPrefix=dmSwitchTrapsPrefix, trapDestStatus=trapDestStatus, swHashStatus=swHashStatus, trapMacAddressMove=trapMacAddressMove, tftpFile=tftpFile, igmpSnoopRouterStaticVlanIndex=igmpSnoopRouterStaticVlanIndex, trapSfpPresenceStatus=trapSfpPresenceStatus, swHighMemoryL3UsageNoMoreDetected=swHighMemoryL3UsageNoMoreDetected, trapCesopBundleNextHopStatus=trapCesopBundleNextHopStatus, trapFuseStatus=trapFuseStatus, swCesopBundleLocalTdmStatusTrap=swCesopBundleLocalTdmStatusTrap, eapsInfoName=eapsInfoName, swSyncSystemClockStatus=swSyncSystemClockStatus, lacpPortEntry=lacpPortEntry, fileInfoFlashId=fileInfoFlashId, trapDuplicatedIpVlan=trapDuplicatedIpVlan, dmSwitchMIB=dmSwitchMIB, dmSwitchTraps=dmSwitchTraps, igmpSnoopMulticastCurrentEntry=igmpSnoopMulticastCurrentEntry, trapSyncSystemClockStatus=trapSyncSystemClockStatus, trapCfmDefect=trapCfmDefect, swNonHomologSfpTrap=swNonHomologSfpTrap, eapsInfoEntry=eapsInfoEntry, ddTransceiversEntry=ddTransceiversEntry, swCesopClockAdapLinkQualityTrap=swCesopClockAdapLinkQualityTrap, swRemoteDeviceConfigFail=swRemoteDeviceConfigFail, sshServerMajorVersion=sshServerMajorVersion, memActiveUsageValue=memActiveUsageValue, portEntry=portEntry, memStandbyUsageValue=memStandbyUsageValue, swForbiddenAccessTrap=swForbiddenAccessTrap, tftpServer=tftpServer, trapMemL3Free=trapMemL3Free, radiusMultipleServerIndex=radiusMultipleServerIndex, remoteLogLevel=remoteLogLevel, trapMemFree=trapMemFree, staPortLongPathCost=staPortLongPathCost, vlanAddressMethod=vlanAddressMethod, sysTimeZone=sysTimeZone, ipFilterSSHMask=ipFilterSSHMask, swLoginFailTrap=swLoginFailTrap, memActiveUsageTable=memActiveUsageTable, countMgt=countMgt, countHoldPktsTable=countHoldPktsTable, sntpServerTable=sntpServerTable, trunkStatus=trunkStatus, portTrunkIndex=portTrunkIndex, dmSwitchConformance=dmSwitchConformance, cfmProbeMgmt=cfmProbeMgmt, swRoleInSystem=swRoleInSystem, swPowerStatus=swPowerStatus, swLSTGroupLinkStatusDown=swLSTGroupLinkStatusDown, portSpeedDpxStatus=portSpeedDpxStatus, swPoeOverCurrent=swPoeOverCurrent, trapLSTGroup=trapLSTGroup, swProdUrl=swProdUrl, portCapabilities=portCapabilities, staPortTable=staPortTable, swNewBootloaderVersion=swNewBootloaderVersion, trapDestEntry=trapDestEntry, cpumonMgmt=cpumonMgmt, queuePortSentBytes=queuePortSentBytes, igmpSnoopStatus=igmpSnoopStatus, trapFansBoardPresenceStatus=trapFansBoardPresenceStatus, swHostTableFull=swHostTableFull, swBootLoaderVer=swBootLoaderVer, igmpSnoopMulticastCurrentTable=igmpSnoopMulticastCurrentTable, queuePortDroppedPackets=queuePortDroppedPackets, eapsInfoTable=eapsInfoTable, vlanTable=vlanTable, swCesopBundleRemoteTdmStatusTrap=swCesopBundleRemoteTdmStatusTrap, swSessionUnitIndex=swSessionUnitIndex, swDyingGaspPackReceived=swDyingGaspPackReceived, securityMgt=securityMgt, restartConfig=restartConfig, queuePortIfIndex=queuePortIfIndex, sntpServerEntry=sntpServerEntry, swBpduProtectLimit=swBpduProtectLimit, filterCounterValueEntry=filterCounterValueEntry, memStandbyUsageEntry=memStandbyUsageEntry, trapCesopTdmStatus=trapCesopTdmStatus, fileInfoIsStartUp=fileInfoIsStartUp, fileInfoFileName=fileInfoFileName, swIndivAlarmOutUnitIndex=swIndivAlarmOutUnitIndex, swElmiEvcStatus=swElmiEvcStatus, swSfpPresenceTrap=swSfpPresenceTrap, trapBroadcastStormControlPPS=trapBroadcastStormControlPPS, countHoldPktsEntry=countHoldPktsEntry, swChangeStatusTunnelRSVP=swChangeStatusTunnelRSVP, igmpSnoopMulticastCurrentPorts=igmpSnoopMulticastCurrentPorts, sshHostKeyGenAction=sshHostKeyGenAction, switchIndivAlarmTable=switchIndivAlarmTable, ipHttpState=ipHttpState, mirrorMgt=mirrorMgt, ddTransceiversTemperature=ddTransceiversTemperature, swFirmwareReleaseDate=swFirmwareReleaseDate, trapErpsDomainName=trapErpsDomainName, sysLogHistoryRamLevel=sysLogHistoryRamLevel, ipFilterHTTPAddress=ipFilterHTTPAddress, ipSecondaryDnsServer=ipSecondaryDnsServer, ipFilterHTTPMask=ipFilterHTTPMask, sntpServerIp=sntpServerIp, bcastStormEntry=bcastStormEntry, trapCesopTdmCasStatus=trapCesopTdmCasStatus, igmpSnoopMulticastStaticEntry=igmpSnoopMulticastStaticEntry, swLoopbackOnPortNoMoreDetected=swLoopbackOnPortNoMoreDetected, mirrorDestinationPort=mirrorDestinationPort, radiusMultipleServerAddress=radiusMultipleServerAddress, fileInfoTable=fileInfoTable, swHashHardware=swHashHardware, dmSwitchMIBObjects=dmSwitchMIBObjects, swCpuUsage=swCpuUsage, swBroadcastStormCheckChange=swBroadcastStormCheckChange, cpuStandbyUsageEntry=cpuStandbyUsageEntry, swPortSecurityViolation=swPortSecurityViolation, swPortNumber=swPortNumber, ddTransceiversTxBias=ddTransceiversTxBias, KeySegment=KeySegment, sshMgt=sshMgt, swSessionUptime=swSessionUptime, eapsInfoId=eapsInfoId, swHashConfig=swHashConfig, swProdDescription=swProdDescription, swIndivFanStatus=swIndivFanStatus, queuePortEntry=queuePortEntry, igmpSnoopRouterCurrentPorts=igmpSnoopRouterCurrentPorts, sntpMgt=sntpMgt, trapActiveMpuNsfId=trapActiveMpuNsfId, swHighCpuUsageDetected=swHighCpuUsageDetected, rlPortInputRate=rlPortInputRate, igmpSnoopQueryCount=igmpSnoopQueryCount, filterCounterInfoTable=filterCounterInfoTable, ipHttpsState=ipHttpsState, swLoginSucessTrap=swLoginSucessTrap, ipDefaultGateway=ipDefaultGateway, sysLogStatus=sysLogStatus, trunkPorts=trunkPorts, trapDestAddress=trapDestAddress, restartMgt=restartMgt, trapSystemWarningsUnits=trapSystemWarningsUnits, sysLogHistoryFlashLevel=sysLogHistoryFlashLevel, trapCfmMaName=trapCfmMaName, swDuplicatedIp=swDuplicatedIp, igmpSnoopRouterStaticEntry=igmpSnoopRouterStaticEntry, sshServerStatus=sshServerStatus, trapBootloaderNew=trapBootloaderNew, switchMpuEntry=switchMpuEntry, swRemoteDeviceConfigForced=swRemoteDeviceConfigForced, swHardwareVer=swHardwareVer, trapStandByMpuNsfId=trapStandByMpuNsfId, swSystemWarningsUnits=swSystemWarningsUnits, swHighCpuUsageNoMoreDetected=swHighCpuUsageNoMoreDetected, PYSNMP_MODULE_ID=dmSwitchMIB, portName=portName, cpuStandbyUsageIndex=cpuStandbyUsageIndex, radiusMultipleServerStatus=radiusMultipleServerStatus, tftpAction=tftpAction, vlanMgt=vlanMgt, filterCounterValueTable=filterCounterValueTable, radiusServerRetransmit=radiusServerRetransmit, swTemperature=swTemperature, switchInfoEntry=switchInfoEntry, interfaceNumber=interfaceNumber, dmSwitchNotifications=dmSwitchNotifications, switchSessionEntry=switchSessionEntry, trapCfmVlan=trapCfmVlan, rateLimitPortEntry=rateLimitPortEntry, trapVar=trapVar, igmpSnoopQueryInterval=igmpSnoopQueryInterval, sntpServerStatus=sntpServerStatus, trapLoginUserName=trapLoginUserName, swSessionPid=swSessionPid, prioWrrEntry=prioWrrEntry, switchIndivFanEntry=switchIndivFanEntry, queuePortQueueIndex=queuePortQueueIndex, swProdModelId=swProdModelId, swPoePowerRestriction=swPoePowerRestriction, cfmProbeDmLoss=cfmProbeDmLoss)
