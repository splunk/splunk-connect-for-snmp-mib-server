#
# PySNMP MIB module BOUNDARY-ACCESSS-NODE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BOUNDARY-ACCESSS-NODE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:23:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, IpAddress, TimeTicks, Counter64, Gauge32, ModuleIdentity, MibIdentifier, NotificationType, iso, Unsigned32, enterprises, Bits, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "IpAddress", "TimeTicks", "Counter64", "Gauge32", "ModuleIdentity", "MibIdentifier", "NotificationType", "iso", "Unsigned32", "enterprises", "Bits", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ibmBANMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 12))
ibmBANTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 12, 1), )
if mibBuilder.loadTexts: ibmBANTable.setStatus('mandatory')
ibmBANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 12, 1, 1), ).setIndexNames((0, "BOUNDARY-ACCESSS-NODE-MIB", "ibmBANbridgePort"))
if mibBuilder.loadTexts: ibmBANEntry.setStatus('mandatory')
ibmBANbridgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: ibmBANbridgePort.setStatus('mandatory')
ibmBANifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 12, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBANifIndex.setStatus('mandatory')
ibmBANDLCImacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 12, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBANDLCImacAddress.setStatus('mandatory')
ibmBANboundaryNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 12, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBANboundaryNodeID.setStatus('mandatory')
ibmBANtype = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bridged", 1), ("dlswTerminated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBANtype.setStatus('mandatory')
ibmBANstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 12, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("initFail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBANstatus.setStatus('mandatory')
ibmBANinIFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 12, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBANinIFrames.setStatus('mandatory')
ibmBANinRRs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 12, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBANinRRs.setStatus('mandatory')
ibmBANinRNRs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 12, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBANinRNRs.setStatus('mandatory')
ibmBANinRejs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 12, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBANinRejs.setStatus('mandatory')
ibmBANinTests = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 12, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBANinTests.setStatus('mandatory')
ibmBANinTestRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 12, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBANinTestRsps.setStatus('mandatory')
ibmBANinXIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 12, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBANinXIDs.setStatus('mandatory')
ibmBANinXIDRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 12, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBANinXIDRsps.setStatus('mandatory')
ibmBANinSABMEs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 12, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBANinSABMEs.setStatus('mandatory')
ibmBANinUAs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 12, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBANinUAs.setStatus('mandatory')
ibmBANinDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 12, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBANinDMs.setStatus('mandatory')
ibmBANinDISCs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 12, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBANinDISCs.setStatus('mandatory')
ibmBANinFRMRs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 12, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBANinFRMRs.setStatus('mandatory')
ibmBANinOthers = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 12, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBANinOthers.setStatus('mandatory')
ibmBANoutIFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 12, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBANoutIFrames.setStatus('mandatory')
ibmBANoutRRs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 12, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBANoutRRs.setStatus('mandatory')
ibmBANoutRNRs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 12, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBANoutRNRs.setStatus('mandatory')
ibmBANoutRejs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 12, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBANoutRejs.setStatus('mandatory')
ibmBANoutTests = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 12, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBANoutTests.setStatus('mandatory')
ibmBANoutTestRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 12, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBANoutTestRsps.setStatus('mandatory')
ibmBANoutXIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 12, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBANoutXIDs.setStatus('mandatory')
ibmBANoutXIDRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 12, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBANoutXIDRsps.setStatus('mandatory')
ibmBANoutSABMEs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 12, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBANoutSABMEs.setStatus('mandatory')
ibmBANoutUAs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 12, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBANoutUAs.setStatus('mandatory')
ibmBANoutDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 12, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBANoutDMs.setStatus('mandatory')
ibmBANoutDISCs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 12, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBANoutDISCs.setStatus('mandatory')
ibmBANoutFRMRs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 12, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBANoutFRMRs.setStatus('mandatory')
ibmBANoutOthers = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 119, 4, 12, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmBANoutOthers.setStatus('mandatory')
mibBuilder.exportSymbols("BOUNDARY-ACCESSS-NODE-MIB", ibmBANinDMs=ibmBANinDMs, ibmBANboundaryNodeID=ibmBANboundaryNodeID, ibmBANifIndex=ibmBANifIndex, ibmBANinTestRsps=ibmBANinTestRsps, ibmBANoutXIDs=ibmBANoutXIDs, ibmBANoutRNRs=ibmBANoutRNRs, ibmBANoutRRs=ibmBANoutRRs, ibmBANstatus=ibmBANstatus, ibmBANinRRs=ibmBANinRRs, ibmBANoutIFrames=ibmBANoutIFrames, ibmBANoutDMs=ibmBANoutDMs, ibmBANoutFRMRs=ibmBANoutFRMRs, ibmBANTable=ibmBANTable, ibmBANbridgePort=ibmBANbridgePort, ibmBANoutUAs=ibmBANoutUAs, ibmBANinUAs=ibmBANinUAs, ibmBANinRejs=ibmBANinRejs, ibmBANinXIDs=ibmBANinXIDs, ibmBANinOthers=ibmBANinOthers, ibmBANinSABMEs=ibmBANinSABMEs, ibmBANoutDISCs=ibmBANoutDISCs, ibmBANoutXIDRsps=ibmBANoutXIDRsps, ibmBANoutRejs=ibmBANoutRejs, ibmBANoutTestRsps=ibmBANoutTestRsps, ibmBANoutOthers=ibmBANoutOthers, ibmBANtype=ibmBANtype, ibmBANMIB=ibmBANMIB, ibmBANDLCImacAddress=ibmBANDLCImacAddress, ibmBANinDISCs=ibmBANinDISCs, ibmBANoutTests=ibmBANoutTests, ibmBANinRNRs=ibmBANinRNRs, ibmBANinFRMRs=ibmBANinFRMRs, ibmBANoutSABMEs=ibmBANoutSABMEs, ibmBANinIFrames=ibmBANinIFrames, ibmBANinXIDRsps=ibmBANinXIDRsps, ibmBANEntry=ibmBANEntry, ibmBANinTests=ibmBANinTests)
