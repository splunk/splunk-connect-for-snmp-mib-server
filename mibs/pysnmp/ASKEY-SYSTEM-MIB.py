#
# PySNMP MIB module ASKEY-SYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASKEY-SYSTEM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:13:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ipDslam, = mibBuilder.importSymbols("ASKEY-DSLAM-MIB", "ipDslam")
aeAlarmPhysicalIndex, = mibBuilder.importSymbols("ASKEY-ENTITY-ALARM-MIB", "aeAlarmPhysicalIndex")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
InetAddress, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, iso, Gauge32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, ObjectIdentity, MibIdentifier, ModuleIdentity, Unsigned32, Counter64, Counter32, TimeTicks, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "iso", "Gauge32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "Unsigned32", "Counter64", "Counter32", "TimeTicks", "Bits")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
askeySystemMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1))
if mibBuilder.loadTexts: askeySystemMib.setLastUpdated('200311260000Z')
if mibBuilder.loadTexts: askeySystemMib.setOrganization('ASKEY Inc.')
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class IPSectionIndex(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 10)

class VLANList(TextualConvention, OctetString):
    status = 'current'

ipConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 1))
nodeIP = MibIdentifier((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 1, 1))
nodeIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeIPAddr.setStatus('current')
nodeIPNetMask = MibScalar((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeIPNetMask.setStatus('current')
nodeMACAddr = MibScalar((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeMACAddr.setStatus('current')
gatewayIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gatewayIPAddr.setStatus('current')
mgmtIP = MibIdentifier((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 1, 2))
mgmtIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 1, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtIPAddr.setStatus('current')
mgmtIPNetMask = MibScalar((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 1, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtIPNetMask.setStatus('current')
mgmtMACAddr = MibScalar((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 1, 2, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtMACAddr.setStatus('current')
nodeTime = MibIdentifier((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 2))
time = MibScalar((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(14, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: time.setStatus('current')
zone = MibScalar((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-12, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zone.setStatus('current')
snmpTrapMib = MibIdentifier((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 6))
snmpTrapTable = MibTable((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 6, 1), )
if mibBuilder.loadTexts: snmpTrapTable.setStatus('current')
snmpTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 6, 1, 1), ).setIndexNames((0, "ASKEY-SYSTEM-MIB", "snmpTrapStation"))
if mibBuilder.loadTexts: snmpTrapEntry.setStatus('current')
snmpTrapStation = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 6, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: snmpTrapStation.setStatus('current')
snmpTrapCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTrapCommunity.setStatus('current')
snmpTrapSNMPVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("snmpv1", 1), ("snmpv2c", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTrapSNMPVersion.setStatus('current')
snmpTrapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 6, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTrapRowStatus.setStatus('current')
snmpCommunityMib = MibIdentifier((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 7))
snmpCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 7, 1), )
if mibBuilder.loadTexts: snmpCommunityTable.setStatus('current')
snmpCommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 7, 1, 1), ).setIndexNames((1, "ASKEY-SYSTEM-MIB", "snmpCommunityName"))
if mibBuilder.loadTexts: snmpCommunityEntry.setStatus('current')
snmpCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 7, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: snmpCommunityName.setStatus('current')
snmpCommunityPermission = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2))).clone('readWrite')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpCommunityPermission.setStatus('current')
snmpCommunityRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 7, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpCommunityRowStatus.setStatus('current')
askeyDslamFdbTable = MibTable((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 9), )
if mibBuilder.loadTexts: askeyDslamFdbTable.setStatus('current')
askeyDslamFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ASKEY-SYSTEM-MIB", "fdbMacIndex"))
if mibBuilder.loadTexts: askeyDslamFdbEntry.setStatus('current')
fdbMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbMacIndex.setStatus('current')
fdbVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbVpi.setStatus('current')
fdbVci = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbVci.setStatus('current')
macAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 9, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macAddress.setStatus('current')
askeyDslamFdbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("learned-unique", 1), ("learned-spoofed-active", 2), ("learned-spoofed-inactive", 3), ("mgmt-forbid", 4), ("mgmt-permit", 5), ("learned-routed", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: askeyDslamFdbStatus.setStatus('current')
configDataMib = MibScalar((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("save", 1), ("restore", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configDataMib.setStatus('current')
askeyCardInfoTable = MibTable((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 11), )
if mibBuilder.loadTexts: askeyCardInfoTable.setStatus('current')
askeyCardInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 11, 1), ).setIndexNames((0, "ASKEY-ENTITY-ALARM-MIB", "aeAlarmPhysicalIndex"))
if mibBuilder.loadTexts: askeyCardInfoEntry.setStatus('current')
askeyCardPlannedType = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 11, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: askeyCardPlannedType.setStatus('current')
askeyCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: askeyCardType.setStatus('current')
askeyCardHWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 11, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: askeyCardHWVersion.setStatus('current')
askeyCardSWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 11, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: askeyCardSWVersion.setStatus('current')
askeyCardImage = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 11, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: askeyCardImage.setStatus('current')
askeyCardUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: askeyCardUptime.setStatus('current')
askeyCardRole = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("standby", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: askeyCardRole.setStatus('current')
askeyCardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 11, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: askeyCardSerialNumber.setStatus('current')
askeyCardAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: askeyCardAdminStatus.setStatus('current')
askeyCardOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("operational", 1), ("notOperational", 2), ("notPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: askeyCardOperStatus.setStatus('current')
lineCardAdminVlanTagPassEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 11, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineCardAdminVlanTagPassEnabled.setStatus('current')
lineCardOperVlanTagPassEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineCardOperVlanTagPassEnabled.setStatus('current')
lineCardAdminRfc2684Encap = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 11, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("llc", 1), ("vcMux", 2))).clone('llc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineCardAdminRfc2684Encap.setStatus('current')
lineCardOperRfc2684Encap = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 11, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("llc", 1), ("vcMux", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineCardOperRfc2684Encap.setStatus('current')
lineCardServiceTypeControl = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 11, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineCardServiceTypeControl.setStatus('current')
shdslFirmwareUpgrade = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 11, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("upgrade", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: shdslFirmwareUpgrade.setStatus('current')
shdslFirmwareUpgradeState = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 11, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 0), ("inital", 1), ("transmission", 2), ("burning", 3), ("finished", 4), ("failedToBurn", 5), ("driverError", 6), ("noFirmwareImage", 7), ("failedToTransmitImage", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslFirmwareUpgradeState.setStatus('current')
taggedModeAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 11, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tagged-only", 1), ("untagged-only", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: taggedModeAdminStatus.setStatus('current')
taggedModeOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 11, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tagged-only", 1), ("untagged-only", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: taggedModeOperStatus.setStatus('current')
linePortInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 12))
linePortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 12, 1), )
if mibBuilder.loadTexts: linePortInfoTable.setStatus('current')
linePortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 12, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: linePortInfoEntry.setStatus('current')
linePortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("testing", 3), ("reset", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linePortAdminStatus.setStatus('current')
linePortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("operational", 1), ("notOperational", 2), ("notPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linePortOperStatus.setStatus('current')
circuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 12, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitID.setStatus('current')
remoteID = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 12, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteID.setStatus('current')
dot1TpMACAging = MibScalar((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aged", 1), ("nonaged", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1TpMACAging.setStatus('current')
askeyRebootSystemAction = MibScalar((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reboot", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: askeyRebootSystemAction.setStatus('current')
askeyDslamOam = MibIdentifier((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 15))
oamF5 = MibIdentifier((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 15, 1))
oamF5IfIndex = MibScalar((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 15, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamF5IfIndex.setStatus('current')
oamF5Vpi = MibScalar((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamF5Vpi.setStatus('current')
oamF5Vci = MibScalar((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamF5Vci.setStatus('current')
oamF5Scope = MibScalar((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("end-to-end", 1), ("segment-to-segment", 2), ("both-end2end-segment2segment", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oamF5Scope.setStatus('current')
askeySystemManagementInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 16))
askeyEmsVlanId = MibScalar((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 16, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: askeyEmsVlanId.setStatus('current')
askeyBootDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 16, 2))
askeyNextBootDevice = MibScalar((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 16, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("opCodeA", 1), ("opCodeB", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: askeyNextBootDevice.setStatus('current')
askeyCurrentBootDevice = MibScalar((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 16, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("network", 0), ("opCodeA", 1), ("opCodeB", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: askeyCurrentBootDevice.setStatus('current')
askeySystemManagementIgmp = MibScalar((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 16, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableIgmpsnoop", 1), ("enableIgmpproxy", 2), ("disableIgmp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: askeySystemManagementIgmp.setStatus('current')
askeyRedundancy = MibIdentifier((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 16, 4))
askeyRedundancyAutoSyncEnabled = MibScalar((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 16, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: askeyRedundancyAutoSyncEnabled.setStatus('current')
askeyRedundancyAutoSyncPeriod = MibScalar((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 16, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: askeyRedundancyAutoSyncPeriod.setStatus('current')
askeyRedundancySync = MibScalar((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 16, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("syncNow", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: askeyRedundancySync.setStatus('current')
askeySystemManagementInfoVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 16, 5))
askeySystemManagementInfoVlanMacLimitTable = MibTable((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 16, 5, 1), )
if mibBuilder.loadTexts: askeySystemManagementInfoVlanMacLimitTable.setStatus('current')
askeySystemManagementInfoVlanMacLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 16, 5, 1, 1), ).setIndexNames((0, "ASKEY-SYSTEM-MIB", "askeySystemManagementInfoVlanID"))
if mibBuilder.loadTexts: askeySystemManagementInfoVlanMacLimitEntry.setStatus('current')
askeySystemManagementInfoVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 16, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: askeySystemManagementInfoVlanID.setStatus('current')
askeySystemManagementInfoVlanMacLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 16, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 50000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: askeySystemManagementInfoVlanMacLimit.setStatus('current')
askeySystemManagementInfoVlanMacLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 16, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: askeySystemManagementInfoVlanMacLimitEnabled.setStatus('current')
askeyCosQueue = MibIdentifier((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 18))
askeyCosQueueMappingTable = MibTable((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 18, 1), )
if mibBuilder.loadTexts: askeyCosQueueMappingTable.setStatus('current')
askeyCosQueueMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 18, 1, 1), ).setIndexNames((0, "ASKEY-SYSTEM-MIB", "askeyCosQueueMapping8021p"))
if mibBuilder.loadTexts: askeyCosQueueMappingEntry.setStatus('current')
askeyCosQueueMapping8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 18, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: askeyCosQueueMapping8021p.setStatus('current')
askeyCosQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 18, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: askeyCosQueueIndex.setStatus('current')
askeySystemUserAccountTable = MibTable((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 19), )
if mibBuilder.loadTexts: askeySystemUserAccountTable.setStatus('current')
askeySystemUserAccountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 19, 1), ).setIndexNames((0, "ASKEY-SYSTEM-MIB", "askeySystemUserAccountUserName"))
if mibBuilder.loadTexts: askeySystemUserAccountEntry.setStatus('current')
askeySystemUserAccountUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 19, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: askeySystemUserAccountUserName.setStatus('current')
askeySystemUserAccountPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 19, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: askeySystemUserAccountPassword.setStatus('current')
askeySystemUserAccountGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 19, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("guest", 1), ("admin", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: askeySystemUserAccountGroup.setStatus('current')
askeySystemUserAccountRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 19, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: askeySystemUserAccountRowStatus.setStatus('current')
askeyPPPoE = MibIdentifier((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 20))
suboption = MibScalar((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: suboption.setStatus('current')
dnsService = MibIdentifier((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 21))
dnsServer1IPAddress = MibScalar((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 21, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServer1IPAddress.setStatus('current')
dnsServer2IPAddress = MibScalar((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 21, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServer2IPAddress.setStatus('current')
dnsServer3IPAddress = MibScalar((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 21, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServer3IPAddress.setStatus('current')
timeService = MibIdentifier((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 22))
protocol = MibScalar((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 22, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("sntp", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: protocol.setStatus('current')
updatePeriod = MibScalar((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 22, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: updatePeriod.setStatus('current')
timeServer1InetAddress = MibScalar((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 22, 3), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeServer1InetAddress.setStatus('current')
timeServer2InetAddress = MibScalar((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 22, 4), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeServer2InetAddress.setStatus('current')
timeServer3InetAddress = MibScalar((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 22, 5), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeServer3InetAddress.setStatus('current')
timeServer1Status = MibScalar((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 22, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notSet", 0), ("networkTimeSource", 1), ("backupMode", 2), ("failToResolveDomainName", 3), ("serverNoResponse", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeServer1Status.setStatus('current')
timeServer2Status = MibScalar((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 22, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notSet", 0), ("networkTimeSource", 1), ("backupMode", 2), ("failToResolveDomainName", 3), ("serverNoResponse", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeServer2Status.setStatus('current')
timeServer3Status = MibScalar((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 22, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notSet", 0), ("networkTimeSource", 1), ("backupMode", 2), ("failToResolveDomainName", 3), ("serverNoResponse", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeServer3Status.setStatus('current')
timeZone = MibScalar((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 22, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-12, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeZone.setStatus('current')
ugeMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 23))
ugeAutoNegotiationTable = MibTable((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 23, 2), )
if mibBuilder.loadTexts: ugeAutoNegotiationTable.setStatus('current')
ugeAutoNegotionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 23, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ugeAutoNegotionEntry.setStatus('current')
autoNegotiationState = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 23, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoNegotiationState.setStatus('current')
ugePauseFrameStatisticTable = MibTable((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 23, 3), )
if mibBuilder.loadTexts: ugePauseFrameStatisticTable.setStatus('current')
ugePauseFrameStatisticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 23, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ugePauseFrameStatisticEntry.setStatus('current')
rxPausePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 23, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxPausePackets.setStatus('current')
txPausePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 23, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txPausePackets.setStatus('current')
subtendVLANTable = MibTable((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 23, 4), )
if mibBuilder.loadTexts: subtendVLANTable.setStatus('current')
subtendVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 23, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: subtendVLANEntry.setStatus('current')
subtendState = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 23, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subtendState.setStatus('current')
subtendVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 23, 4, 1, 2), VLANList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subtendVLAN.setStatus('current')
ugeVLANTable = MibTable((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 23, 5), )
if mibBuilder.loadTexts: ugeVLANTable.setStatus('current')
ugeVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 23, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ugeVLANEntry.setStatus('current')
ugeVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 23, 5, 1, 1), VLANList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ugeVLAN.setStatus('current')
securedHosts = MibIdentifier((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 24))
securedHostAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 24, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securedHostAdminStatus.setStatus('current')
securedHostTable = MibTable((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 24, 2), )
if mibBuilder.loadTexts: securedHostTable.setStatus('current')
securedHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 24, 2, 1), ).setIndexNames((0, "ASKEY-SYSTEM-MIB", "securedIPSectorIndex"))
if mibBuilder.loadTexts: securedHostEntry.setStatus('current')
securedIPSectorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 24, 2, 1, 1), IPSectionIndex())
if mibBuilder.loadTexts: securedIPSectorIndex.setStatus('current')
securedIPSectorStartIP = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 24, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securedIPSectorStartIP.setStatus('current')
securedIPSectorEndIP = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 24, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securedIPSectorEndIP.setStatus('current')
allowedServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 24, 2, 1, 4), Bits().clone(namedValues=NamedValues(("snmp", 0), ("telnet", 1), ("ftp", 2), ("tftp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allowedServiceType.setStatus('current')
netBIOSFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 25))
netBIOSFilterAction = MibScalar((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 1, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dropping", 1), ("forwarding", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBIOSFilterAction.setStatus('current')
mibBuilder.exportSymbols("ASKEY-SYSTEM-MIB", askeySystemUserAccountTable=askeySystemUserAccountTable, ugeAutoNegotiationTable=ugeAutoNegotiationTable, askeyCosQueue=askeyCosQueue, askeySystemManagementInfo=askeySystemManagementInfo, timeServer3InetAddress=timeServer3InetAddress, time=time, askeySystemMib=askeySystemMib, askeyCardHWVersion=askeyCardHWVersion, snmpCommunityRowStatus=snmpCommunityRowStatus, oamF5Vci=oamF5Vci, askeyCardAdminStatus=askeyCardAdminStatus, lineCardOperRfc2684Encap=lineCardOperRfc2684Encap, securedIPSectorStartIP=securedIPSectorStartIP, snmpTrapRowStatus=snmpTrapRowStatus, dnsServer2IPAddress=dnsServer2IPAddress, snmpCommunityEntry=snmpCommunityEntry, askeyCardUptime=askeyCardUptime, ugeVLANEntry=ugeVLANEntry, autoNegotiationState=autoNegotiationState, subtendVLANTable=subtendVLANTable, timeServer1InetAddress=timeServer1InetAddress, subtendVLAN=subtendVLAN, timeService=timeService, nodeIPAddr=nodeIPAddr, protocol=protocol, IPSectionIndex=IPSectionIndex, snmpCommunityName=snmpCommunityName, linePortInfo=linePortInfo, fdbVci=fdbVci, rxPausePackets=rxPausePackets, nodeIP=nodeIP, ipConfig=ipConfig, shdslFirmwareUpgrade=shdslFirmwareUpgrade, askeySystemUserAccountEntry=askeySystemUserAccountEntry, configDataMib=configDataMib, askeyRedundancySync=askeyRedundancySync, ugeVLAN=ugeVLAN, askeySystemManagementInfoVlanMacLimitTable=askeySystemManagementInfoVlanMacLimitTable, dnsServer1IPAddress=dnsServer1IPAddress, netBIOSFilterAction=netBIOSFilterAction, askeyCardType=askeyCardType, linePortOperStatus=linePortOperStatus, snmpTrapCommunity=snmpTrapCommunity, timeZone=timeZone, lineCardServiceTypeControl=lineCardServiceTypeControl, askeyDslamOam=askeyDslamOam, taggedModeOperStatus=taggedModeOperStatus, timeServer2Status=timeServer2Status, askeySystemManagementInfoVlan=askeySystemManagementInfoVlan, securedHostTable=securedHostTable, snmpTrapSNMPVersion=snmpTrapSNMPVersion, mgmtIPAddr=mgmtIPAddr, nodeTime=nodeTime, askeyCosQueueIndex=askeyCosQueueIndex, macAddress=macAddress, askeyCardImage=askeyCardImage, circuitID=circuitID, subtendState=subtendState, askeyBootDevice=askeyBootDevice, askeySystemManagementIgmp=askeySystemManagementIgmp, MacAddress=MacAddress, askeyCardOperStatus=askeyCardOperStatus, askeyCosQueueMappingTable=askeyCosQueueMappingTable, askeyCosQueueMapping8021p=askeyCosQueueMapping8021p, VLANList=VLANList, nodeIPNetMask=nodeIPNetMask, askeySystemUserAccountRowStatus=askeySystemUserAccountRowStatus, askeyDslamFdbStatus=askeyDslamFdbStatus, snmpCommunityTable=snmpCommunityTable, mgmtIPNetMask=mgmtIPNetMask, askeyCardRole=askeyCardRole, linePortInfoEntry=linePortInfoEntry, snmpTrapTable=snmpTrapTable, askeyRedundancyAutoSyncPeriod=askeyRedundancyAutoSyncPeriod, snmpTrapEntry=snmpTrapEntry, askeyDslamFdbTable=askeyDslamFdbTable, timeServer2InetAddress=timeServer2InetAddress, oamF5Vpi=oamF5Vpi, remoteID=remoteID, securedIPSectorEndIP=securedIPSectorEndIP, mgmtIP=mgmtIP, snmpCommunityMib=snmpCommunityMib, fdbVpi=fdbVpi, ugePauseFrameStatisticEntry=ugePauseFrameStatisticEntry, securedHostAdminStatus=securedHostAdminStatus, oamF5IfIndex=oamF5IfIndex, lineCardAdminVlanTagPassEnabled=lineCardAdminVlanTagPassEnabled, snmpCommunityPermission=snmpCommunityPermission, gatewayIPAddr=gatewayIPAddr, ugePauseFrameStatisticTable=ugePauseFrameStatisticTable, suboption=suboption, lineCardAdminRfc2684Encap=lineCardAdminRfc2684Encap, askeySystemManagementInfoVlanMacLimitEntry=askeySystemManagementInfoVlanMacLimitEntry, lineCardOperVlanTagPassEnabled=lineCardOperVlanTagPassEnabled, linePortAdminStatus=linePortAdminStatus, askeyRebootSystemAction=askeyRebootSystemAction, askeySystemUserAccountPassword=askeySystemUserAccountPassword, askeyEmsVlanId=askeyEmsVlanId, mgmtMACAddr=mgmtMACAddr, askeySystemManagementInfoVlanMacLimit=askeySystemManagementInfoVlanMacLimit, securedHostEntry=securedHostEntry, oamF5Scope=oamF5Scope, askeyRedundancyAutoSyncEnabled=askeyRedundancyAutoSyncEnabled, fdbMacIndex=fdbMacIndex, linePortInfoTable=linePortInfoTable, askeySystemManagementInfoVlanID=askeySystemManagementInfoVlanID, askeyNextBootDevice=askeyNextBootDevice, subtendVLANEntry=subtendVLANEntry, dot1TpMACAging=dot1TpMACAging, dnsServer3IPAddress=dnsServer3IPAddress, askeySystemUserAccountUserName=askeySystemUserAccountUserName, updatePeriod=updatePeriod, askeyCurrentBootDevice=askeyCurrentBootDevice, snmpTrapStation=snmpTrapStation, askeyCardInfoEntry=askeyCardInfoEntry, ugeVLANTable=ugeVLANTable, nodeMACAddr=nodeMACAddr, timeServer1Status=timeServer1Status, ugeAutoNegotionEntry=ugeAutoNegotionEntry, askeySystemUserAccountGroup=askeySystemUserAccountGroup, allowedServiceType=allowedServiceType, shdslFirmwareUpgradeState=shdslFirmwareUpgradeState, securedHosts=securedHosts, askeyPPPoE=askeyPPPoE, askeySystemManagementInfoVlanMacLimitEnabled=askeySystemManagementInfoVlanMacLimitEnabled, dnsService=dnsService, netBIOSFilter=netBIOSFilter, askeyCosQueueMappingEntry=askeyCosQueueMappingEntry, securedIPSectorIndex=securedIPSectorIndex, zone=zone, askeyCardSWVersion=askeyCardSWVersion, askeyDslamFdbEntry=askeyDslamFdbEntry, askeyRedundancy=askeyRedundancy, askeyCardPlannedType=askeyCardPlannedType, ugeMIBObjects=ugeMIBObjects, snmpTrapMib=snmpTrapMib, oamF5=oamF5, askeyCardInfoTable=askeyCardInfoTable, txPausePackets=txPausePackets, timeServer3Status=timeServer3Status, askeyCardSerialNumber=askeyCardSerialNumber, taggedModeAdminStatus=taggedModeAdminStatus, PYSNMP_MODULE_ID=askeySystemMib)
