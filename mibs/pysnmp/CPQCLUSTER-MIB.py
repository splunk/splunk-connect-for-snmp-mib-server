#
# PySNMP MIB module CPQCLUSTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CPQCLUSTER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:11:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
cpqHoTrapFlags, compaq = mibBuilder.importSymbols("CPQHOST-MIB", "cpqHoTrapFlags", "compaq")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
Counter32, NotificationType, Gauge32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, NotificationType, Integer32, Bits, TimeTicks, ModuleIdentity, MibIdentifier, Unsigned32, IpAddress, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "NotificationType", "Gauge32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "NotificationType", "Integer32", "Bits", "TimeTicks", "ModuleIdentity", "MibIdentifier", "Unsigned32", "IpAddress", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cpqCluster = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 15))
cpqClusterMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 15, 1))
cpqClusterComponent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 15, 2))
cpqClusterTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 15, 3))
cpqClusterInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 15, 2, 1))
cpqClusterInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 15, 2, 2))
cpqClusterNode = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 15, 2, 3))
cpqClusterResource = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 15, 2, 4))
cpqClusterInterconnect = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 15, 2, 5))
cpqClusterNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 15, 2, 6))
cpqClusterOsCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 15, 2, 1, 4))
cpqClusterMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 232, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterMibRevMajor.setStatus('mandatory')
cpqClusterMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 232, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterMibRevMinor.setStatus('mandatory')
cpqClusterMibCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterMibCondition.setStatus('mandatory')
cpqClusterOsCommonPollFreq = MibScalar((1, 3, 6, 1, 4, 1, 232, 15, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqClusterOsCommonPollFreq.setStatus('mandatory')
cpqClusterOsCommonModuleTable = MibTable((1, 3, 6, 1, 4, 1, 232, 15, 2, 1, 4, 2), )
if mibBuilder.loadTexts: cpqClusterOsCommonModuleTable.setStatus('deprecated')
cpqClusterOsCommonModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 15, 2, 1, 4, 2, 1), ).setIndexNames((0, "CPQCLUSTER-MIB", "cpqClusterOsCommonModuleIndex"))
if mibBuilder.loadTexts: cpqClusterOsCommonModuleEntry.setStatus('deprecated')
cpqClusterOsCommonModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterOsCommonModuleIndex.setStatus('deprecated')
cpqClusterOsCommonModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 1, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterOsCommonModuleName.setStatus('deprecated')
cpqClusterOsCommonModuleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 1, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterOsCommonModuleVersion.setStatus('deprecated')
cpqClusterOsCommonModuleDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 1, 4, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterOsCommonModuleDate.setStatus('deprecated')
cpqClusterOsCommonModulePurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 1, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterOsCommonModulePurpose.setStatus('deprecated')
cpqClusterName = MibScalar((1, 3, 6, 1, 4, 1, 232, 15, 2, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqClusterName.setStatus('mandatory')
cpqClusterCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 15, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterCondition.setStatus('mandatory')
cpqClusterIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 232, 15, 2, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterIpAddress.setStatus('mandatory')
cpqClusterQuorumResource = MibScalar((1, 3, 6, 1, 4, 1, 232, 15, 2, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterQuorumResource.setStatus('mandatory')
cpqClusterMajorVersion = MibScalar((1, 3, 6, 1, 4, 1, 232, 15, 2, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterMajorVersion.setStatus('mandatory')
cpqClusterMinorVersion = MibScalar((1, 3, 6, 1, 4, 1, 232, 15, 2, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterMinorVersion.setStatus('mandatory')
cpqClusterCSDVersion = MibScalar((1, 3, 6, 1, 4, 1, 232, 15, 2, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterCSDVersion.setStatus('mandatory')
cpqClusterVendorId = MibScalar((1, 3, 6, 1, 4, 1, 232, 15, 2, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterVendorId.setStatus('mandatory')
cpqClusterResourceAggregateCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 15, 2, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterResourceAggregateCondition.setStatus('mandatory')
cpqClusterNetworkAggregateCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 15, 2, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterNetworkAggregateCondition.setStatus('mandatory')
cpqClusterNodeTable = MibTable((1, 3, 6, 1, 4, 1, 232, 15, 2, 3, 1), )
if mibBuilder.loadTexts: cpqClusterNodeTable.setStatus('mandatory')
cpqClusterNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 15, 2, 3, 1, 1), ).setIndexNames((0, "CPQCLUSTER-MIB", "cpqClusterNodeIndex"))
if mibBuilder.loadTexts: cpqClusterNodeEntry.setStatus('mandatory')
cpqClusterNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterNodeIndex.setStatus('mandatory')
cpqClusterNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterNodeName.setStatus('mandatory')
cpqClusterNodeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("nodeUp", 2), ("nodeDown", 3), ("nodePaused", 4), ("nodeJoining", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterNodeStatus.setStatus('mandatory')
cpqClusterNodeCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterNodeCondition.setStatus('mandatory')
cpqClusterResourceTable = MibTable((1, 3, 6, 1, 4, 1, 232, 15, 2, 4, 1), )
if mibBuilder.loadTexts: cpqClusterResourceTable.setStatus('mandatory')
cpqClusterResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 15, 2, 4, 1, 1), ).setIndexNames((0, "CPQCLUSTER-MIB", "cpqClusterResourceIndex"))
if mibBuilder.loadTexts: cpqClusterResourceEntry.setStatus('mandatory')
cpqClusterResourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterResourceIndex.setStatus('mandatory')
cpqClusterResourceName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterResourceName.setStatus('mandatory')
cpqClusterResourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterResourceType.setStatus('mandatory')
cpqClusterResourceState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("online", 2), ("offline", 3), ("failed", 4), ("onlinePending", 5), ("offlinePending", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterResourceState.setStatus('mandatory')
cpqClusterResourceOwnerNode = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 4, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterResourceOwnerNode.setStatus('mandatory')
cpqClusterResourcePhysId = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 4, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterResourcePhysId.setStatus('mandatory')
cpqClusterResourceCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterResourceCondition.setStatus('mandatory')
cpqClusterResourceDriveLetter = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 4, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterResourceDriveLetter.setStatus('mandatory')
cpqClusterResourceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 4, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterResourceIpAddress.setStatus('mandatory')
cpqClusterResourceGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 4, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterResourceGroupName.setStatus('mandatory')
cpqClusterInterconnectTable = MibTable((1, 3, 6, 1, 4, 1, 232, 15, 2, 5, 1), )
if mibBuilder.loadTexts: cpqClusterInterconnectTable.setStatus('mandatory')
cpqClusterInterconnectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 15, 2, 5, 1, 1), ).setIndexNames((0, "CPQCLUSTER-MIB", "cpqClusterInterconnectIndex"))
if mibBuilder.loadTexts: cpqClusterInterconnectEntry.setStatus('mandatory')
cpqClusterInterconnectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterInterconnectIndex.setStatus('mandatory')
cpqClusterInterconnectPhysId = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterInterconnectPhysId.setStatus('mandatory')
cpqClusterInterconnectTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterInterconnectTransport.setStatus('mandatory')
cpqClusterInterconnectAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 5, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterInterconnectAddress.setStatus('mandatory')
cpqClusterInterconnectNetworkName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 5, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterInterconnectNetworkName.setStatus('mandatory')
cpqClusterInterconnectNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 5, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterInterconnectNodeName.setStatus('mandatory')
cpqClusterInterconnectRole = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("client", 2), ("internal", 3), ("clientAndInternal", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterInterconnectRole.setStatus('mandatory')
cpqClusterNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 232, 15, 2, 6, 1), )
if mibBuilder.loadTexts: cpqClusterNetworkTable.setStatus('mandatory')
cpqClusterNetworkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 15, 2, 6, 1, 1), ).setIndexNames((0, "CPQCLUSTER-MIB", "cpqClusterNetworkIndex"))
if mibBuilder.loadTexts: cpqClusterNetworkEntry.setStatus('mandatory')
cpqClusterNetworkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterNetworkIndex.setStatus('mandatory')
cpqClusterNetworkName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterNetworkName.setStatus('mandatory')
cpqClusterNetworkAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 6, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterNetworkAddressMask.setStatus('mandatory')
cpqClusterNetworkDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 6, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterNetworkDescription.setStatus('mandatory')
cpqClusterNetworkRole = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("client", 2), ("internal", 3), ("clientAndInternal", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterNetworkRole.setStatus('mandatory')
cpqClusterNetworkState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("online", 2), ("offline", 3), ("partitioned", 4), ("unavailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterNetworkState.setStatus('mandatory')
cpqClusterNetworkCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 15, 2, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqClusterNetworkCondition.setStatus('mandatory')
cpqClusterDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,15001)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQCLUSTER-MIB", "cpqClusterName"))
cpqClusterFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,15002)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQCLUSTER-MIB", "cpqClusterName"))
cpqClusterNodeDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,15003)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQCLUSTER-MIB", "cpqClusterNodeName"))
cpqClusterNodeFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,15004)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQCLUSTER-MIB", "cpqClusterNodeName"))
cpqClusterResourceDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,15005)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQCLUSTER-MIB", "cpqClusterResourceName"))
cpqClusterResourceFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,15006)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQCLUSTER-MIB", "cpqClusterResourceName"))
cpqClusterNetworkDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,15007)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQCLUSTER-MIB", "cpqClusterNetworkName"))
cpqClusterNetworkFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,15008)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQCLUSTER-MIB", "cpqClusterNetworkName"))
mibBuilder.exportSymbols("CPQCLUSTER-MIB", cpqClusterInterconnectNetworkName=cpqClusterInterconnectNetworkName, cpqClusterInterconnectPhysId=cpqClusterInterconnectPhysId, cpqClusterInterconnectRole=cpqClusterInterconnectRole, cpqClusterResourceEntry=cpqClusterResourceEntry, cpqClusterCSDVersion=cpqClusterCSDVersion, cpqClusterOsCommonPollFreq=cpqClusterOsCommonPollFreq, cpqClusterInterface=cpqClusterInterface, cpqClusterNetworkTable=cpqClusterNetworkTable, cpqClusterNodeTable=cpqClusterNodeTable, cpqClusterNetworkAggregateCondition=cpqClusterNetworkAggregateCondition, cpqClusterDegraded=cpqClusterDegraded, cpqClusterOsCommonModuleVersion=cpqClusterOsCommonModuleVersion, cpqClusterResourcePhysId=cpqClusterResourcePhysId, cpqClusterNetworkIndex=cpqClusterNetworkIndex, cpqClusterMibRev=cpqClusterMibRev, cpqClusterNetworkDegraded=cpqClusterNetworkDegraded, cpqClusterInfo=cpqClusterInfo, cpqClusterNetworkFailed=cpqClusterNetworkFailed, cpqClusterMibCondition=cpqClusterMibCondition, cpqClusterTrap=cpqClusterTrap, cpqClusterOsCommonModuleName=cpqClusterOsCommonModuleName, cpqClusterResourceType=cpqClusterResourceType, cpqClusterNetworkCondition=cpqClusterNetworkCondition, cpqClusterInterconnectNodeName=cpqClusterInterconnectNodeName, cpqClusterNodeFailed=cpqClusterNodeFailed, cpqClusterResourceFailed=cpqClusterResourceFailed, cpqClusterNodeName=cpqClusterNodeName, cpqClusterOsCommonModulePurpose=cpqClusterOsCommonModulePurpose, cpqClusterInterconnectIndex=cpqClusterInterconnectIndex, cpqClusterNodeEntry=cpqClusterNodeEntry, cpqClusterNodeCondition=cpqClusterNodeCondition, cpqClusterResourceGroupName=cpqClusterResourceGroupName, cpqClusterResourceTable=cpqClusterResourceTable, cpqClusterMibRevMajor=cpqClusterMibRevMajor, cpqClusterInterconnectAddress=cpqClusterInterconnectAddress, cpqClusterResourceCondition=cpqClusterResourceCondition, cpqClusterNetworkEntry=cpqClusterNetworkEntry, cpqClusterNetworkRole=cpqClusterNetworkRole, cpqClusterVendorId=cpqClusterVendorId, cpqClusterIpAddress=cpqClusterIpAddress, cpqClusterFailed=cpqClusterFailed, cpqClusterMinorVersion=cpqClusterMinorVersion, cpqClusterResource=cpqClusterResource, cpqClusterOsCommonModuleTable=cpqClusterOsCommonModuleTable, cpqClusterResourceIndex=cpqClusterResourceIndex, cpqClusterNodeDegraded=cpqClusterNodeDegraded, cpqClusterOsCommon=cpqClusterOsCommon, cpqClusterResourceIpAddress=cpqClusterResourceIpAddress, cpqClusterNetworkAddressMask=cpqClusterNetworkAddressMask, cpqClusterNetworkState=cpqClusterNetworkState, cpqClusterNodeIndex=cpqClusterNodeIndex, cpqClusterComponent=cpqClusterComponent, cpqClusterResourceOwnerNode=cpqClusterResourceOwnerNode, cpqClusterName=cpqClusterName, cpqClusterOsCommonModuleDate=cpqClusterOsCommonModuleDate, cpqClusterInterconnectTable=cpqClusterInterconnectTable, cpqClusterInterconnectTransport=cpqClusterInterconnectTransport, cpqClusterInterconnectEntry=cpqClusterInterconnectEntry, cpqClusterResourceDriveLetter=cpqClusterResourceDriveLetter, cpqClusterNode=cpqClusterNode, cpqClusterNodeStatus=cpqClusterNodeStatus, cpqClusterNetworkDescription=cpqClusterNetworkDescription, cpqClusterCondition=cpqClusterCondition, cpqClusterQuorumResource=cpqClusterQuorumResource, cpqClusterResourceDegraded=cpqClusterResourceDegraded, cpqClusterResourceName=cpqClusterResourceName, cpqClusterResourceAggregateCondition=cpqClusterResourceAggregateCondition, cpqClusterInterconnect=cpqClusterInterconnect, cpqClusterNetwork=cpqClusterNetwork, cpqClusterNetworkName=cpqClusterNetworkName, cpqClusterResourceState=cpqClusterResourceState, cpqCluster=cpqCluster, cpqClusterOsCommonModuleEntry=cpqClusterOsCommonModuleEntry, cpqClusterOsCommonModuleIndex=cpqClusterOsCommonModuleIndex, cpqClusterMibRevMinor=cpqClusterMibRevMinor, cpqClusterMajorVersion=cpqClusterMajorVersion)
