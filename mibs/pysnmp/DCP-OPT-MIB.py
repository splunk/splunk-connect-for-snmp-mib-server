#
# PySNMP MIB module DCP-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DCP-OPT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:21:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
enterprises, IpAddress, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ModuleIdentity, Unsigned32, iso, Bits, TimeTicks, NotificationType, ObjectIdentity, MibIdentifier, Gauge32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "IpAddress", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ModuleIdentity", "Unsigned32", "iso", "Bits", "TimeTicks", "NotificationType", "ObjectIdentity", "MibIdentifier", "Gauge32", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatOtherStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2))
class Counter8(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class DisplayString(OctetString):
    pass

cdx6500OSTDCPTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1), )
if mibBuilder.loadTexts: cdx6500OSTDCPTable.setStatus('mandatory')
cdx6500DCPStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1), ).setIndexNames((0, "DCP-OPT-MIB", "cdx6500DCPPortNumber"), (0, "DCP-OPT-MIB", "cdx6500DCPChanNumber"))
if mibBuilder.loadTexts: cdx6500DCPStatEntry.setStatus('mandatory')
cdx6500DCPPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPPortNumber.setStatus('mandatory')
cdx6500DCPChanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPChanNumber.setStatus('mandatory')
cdx6500DCPNegProtLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPNegProtLevel.setStatus('mandatory')
cdx6500DCPCurrConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPCurrConnState.setStatus('mandatory')
cdx6500DCPUnackDataTpdu = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 5), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPUnackDataTpdu.setStatus('mandatory')
cdx6500DCPDataTpduQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 6), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPDataTpduQueued.setStatus('mandatory')
cdx6500DCPInboundFlowSt = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPInboundFlowSt.setStatus('mandatory')
cdx6500DCPOutboundFlowSt = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPOutboundFlowSt.setStatus('mandatory')
cdx6500DCPConnReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 9), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPConnReqTx.setStatus('mandatory')
cdx6500DCPConnConfTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 10), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPConnConfTx.setStatus('mandatory')
cdx6500DCPReconnReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 11), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPReconnReqTx.setStatus('mandatory')
cdx6500DCPReconnConfTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 12), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPReconnConfTx.setStatus('mandatory')
cdx6500DCPDiscReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 13), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPDiscReqTx.setStatus('mandatory')
cdx6500DCPDiscConfTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 14), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPDiscConfTx.setStatus('mandatory')
cdx6500DCPDataTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPDataTx.setStatus('mandatory')
cdx6500DCPAckTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPAckTx.setStatus('mandatory')
cdx6500DCPIntReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 17), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPIntReqTx.setStatus('mandatory')
cdx6500DCPIntConfTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 18), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPIntConfTx.setStatus('mandatory')
cdx6500DCPResetReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 19), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPResetReqTx.setStatus('mandatory')
cdx6500DCPResetConfTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 20), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPResetConfTx.setStatus('mandatory')
cdx6500DCPRejTx = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 21), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPRejTx.setStatus('mandatory')
cdx6500DCPConnReqRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 22), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPConnReqRcv.setStatus('mandatory')
cdx6500DCPConnConfRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 23), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPConnConfRcv.setStatus('mandatory')
cdx6500DCPReconnReqRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 24), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPReconnReqRcv.setStatus('mandatory')
cdx6500DCPReconnConfRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 25), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPReconnConfRcv.setStatus('mandatory')
cdx6500DCPDiscReqRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 26), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPDiscReqRcv.setStatus('mandatory')
cdx6500DCPDiscConfRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 27), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPDiscConfRcv.setStatus('mandatory')
cdx6500DCPDataRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPDataRcv.setStatus('mandatory')
cdx6500DCPAckRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPAckRcv.setStatus('mandatory')
cdx6500DCPIntReqRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 30), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPIntReqRcv.setStatus('mandatory')
cdx6500DCPIntConfRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 31), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPIntConfRcv.setStatus('mandatory')
cdx6500DCPResetReqRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 32), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPResetReqRcv.setStatus('mandatory')
cdx6500DCPResetConfRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 33), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPResetConfRcv.setStatus('mandatory')
cdx6500DCPRejRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 1, 1, 34), Counter8()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500DCPRejRcv.setStatus('mandatory')
mibBuilder.exportSymbols("DCP-OPT-MIB", cdx6500DCPIntConfRcv=cdx6500DCPIntConfRcv, cdx6500DCPNegProtLevel=cdx6500DCPNegProtLevel, cdx6500DCPPortNumber=cdx6500DCPPortNumber, cdx6500DCPReconnConfTx=cdx6500DCPReconnConfTx, cdx6500DCPDiscConfTx=cdx6500DCPDiscConfTx, cdx6500DCPDataTx=cdx6500DCPDataTx, cdx6500DCPConnReqRcv=cdx6500DCPConnReqRcv, cdx6500DCPStatEntry=cdx6500DCPStatEntry, cdx6500DCPRejTx=cdx6500DCPRejTx, cdx6500DCPReconnReqRcv=cdx6500DCPReconnReqRcv, cdx6500DCPAckRcv=cdx6500DCPAckRcv, cdx6500StatOtherStatsGroup=cdx6500StatOtherStatsGroup, cdx6500DCPIntConfTx=cdx6500DCPIntConfTx, cdx6500DCPResetReqRcv=cdx6500DCPResetReqRcv, Counter8=Counter8, cdx6500DCPConnReqTx=cdx6500DCPConnReqTx, cdx6500DCPCurrConnState=cdx6500DCPCurrConnState, cdx6500DCPDiscConfRcv=cdx6500DCPDiscConfRcv, cdx6500DCPChanNumber=cdx6500DCPChanNumber, cdx6500DCPIntReqRcv=cdx6500DCPIntReqRcv, cdx6500DCPRejRcv=cdx6500DCPRejRcv, DisplayString=DisplayString, cdx6500DCPOutboundFlowSt=cdx6500DCPOutboundFlowSt, cdx6500=cdx6500, cdx6500OSTDCPTable=cdx6500OSTDCPTable, cdx6500DCPResetConfRcv=cdx6500DCPResetConfRcv, cdx6500DCPAckTx=cdx6500DCPAckTx, cdx6500DCPIntReqTx=cdx6500DCPIntReqTx, cdx6500DCPConnConfRcv=cdx6500DCPConnConfRcv, cdx6500DCPDataTpduQueued=cdx6500DCPDataTpduQueued, cdx6500DCPDiscReqTx=cdx6500DCPDiscReqTx, codex=codex, cdx6500Statistics=cdx6500Statistics, cdx6500DCPReconnReqTx=cdx6500DCPReconnReqTx, cdx6500DCPResetConfTx=cdx6500DCPResetConfTx, cdx6500DCPConnConfTx=cdx6500DCPConnConfTx, cdx6500DCPDataRcv=cdx6500DCPDataRcv, cdx6500DCPDiscReqRcv=cdx6500DCPDiscReqRcv, cdx6500DCPResetReqTx=cdx6500DCPResetReqTx, cdx6500DCPReconnConfRcv=cdx6500DCPReconnConfRcv, cdxProductSpecific=cdxProductSpecific, cdx6500DCPUnackDataTpdu=cdx6500DCPUnackDataTpdu, cdx6500DCPInboundFlowSt=cdx6500DCPInboundFlowSt)
