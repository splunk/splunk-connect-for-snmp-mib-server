#
# PySNMP MIB module ATMF-CES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ATMF-CES-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:15:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, TimeTicks, Integer32, MibIdentifier, Counter64, NotificationType, enterprises, Counter32, Gauge32, ObjectIdentity, IpAddress, Unsigned32, ModuleIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "TimeTicks", "Integer32", "MibIdentifier", "Counter64", "NotificationType", "enterprises", "Counter32", "Gauge32", "ObjectIdentity", "IpAddress", "Unsigned32", "ModuleIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
atmfCESmib = ModuleIdentity((1, 3, 6, 1, 4, 1, 353, 5, 2))
if mibBuilder.loadTexts: atmfCESmib.setLastUpdated('9911060000z')
if mibBuilder.loadTexts: atmfCESmib.setOrganization('The ATM Forum')
atmfDS1E1CESmib = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 2, 1))
atmfDS1E1CESConfTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 2, 1, 1), )
if mibBuilder.loadTexts: atmfDS1E1CESConfTable.setStatus('current')
atmfDS1E1CESConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 2, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmfDS1E1CESConfEntry.setStatus('current')
atmfDS1E1CESMapATMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfDS1E1CESMapATMIndex.setStatus('current')
atmfDS1E1CESMapVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfDS1E1CESMapVPI.setStatus('current')
atmfDS1E1CESMapVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfDS1E1CESMapVCI.setStatus('current')
atmfDS1E1CESCBRService = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unstructured", 1), ("structured", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfDS1E1CESCBRService.setStatus('current')
atmfDS1E1CESCBRClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("synchronous", 1), ("srts", 2), ("adaptive", 3))).clone('synchronous')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfDS1E1CESCBRClockMode.setStatus('current')
atmfDS1E1CESCas = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("basic", 1), ("e1Cas", 2), ("ds1SfCas", 3), ("ds1EsfCas", 4))).clone('basic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfDS1E1CESCas.setStatus('current')
atmfDS1E1CESPartialFill = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 47))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfDS1E1CESPartialFill.setStatus('current')
atmfDS1E1CESBufMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536)).clone(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfDS1E1CESBufMaxSize.setStatus('current')
atmfDS1E1CESCDVRxT = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 1, 1, 1, 9), Integer32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfDS1E1CESCDVRxT.setStatus('current')
atmfDS1E1CESCellLossIntegrationPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 65535)).clone(2500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfDS1E1CESCellLossIntegrationPeriod.setStatus('current')
atmfDS1E1CESStatsTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 2, 1, 2), )
if mibBuilder.loadTexts: atmfDS1E1CESStatsTable.setStatus('current')
atmfDS1E1CESStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 2, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmfDS1E1CESStatsEntry.setStatus('current')
atmfDS1E1CESReassCells = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfDS1E1CESReassCells.setStatus('current')
atmfDS1E1CESHdrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfDS1E1CESHdrErrors.setStatus('current')
atmfDS1E1CESPointerReframes = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfDS1E1CESPointerReframes.setStatus('current')
atmfDS1E1CESLostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfDS1E1CESLostCells.setStatus('current')
atmfDS1E1CESBufUnderflows = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfDS1E1CESBufUnderflows.setStatus('current')
atmfDS1E1CESBufOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfDS1E1CESBufOverflows.setStatus('current')
atmfDS1E1CESCellLossStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noLoss", 1), ("loss", 2), ("idle", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfDS1E1CESCellLossStatus.setStatus('current')
mibBuilder.exportSymbols("ATMF-CES-MIB", atmfDS1E1CESmib=atmfDS1E1CESmib, atmfDS1E1CESCDVRxT=atmfDS1E1CESCDVRxT, atmfDS1E1CESStatsTable=atmfDS1E1CESStatsTable, atmfDS1E1CESCas=atmfDS1E1CESCas, atmfDS1E1CESPointerReframes=atmfDS1E1CESPointerReframes, atmfDS1E1CESConfTable=atmfDS1E1CESConfTable, atmfDS1E1CESPartialFill=atmfDS1E1CESPartialFill, atmfDS1E1CESConfEntry=atmfDS1E1CESConfEntry, atmfDS1E1CESHdrErrors=atmfDS1E1CESHdrErrors, atmfDS1E1CESMapVCI=atmfDS1E1CESMapVCI, atmfDS1E1CESCellLossIntegrationPeriod=atmfDS1E1CESCellLossIntegrationPeriod, atmfDS1E1CESBufOverflows=atmfDS1E1CESBufOverflows, atmfDS1E1CESCBRClockMode=atmfDS1E1CESCBRClockMode, atmfDS1E1CESStatsEntry=atmfDS1E1CESStatsEntry, atmfDS1E1CESMapATMIndex=atmfDS1E1CESMapATMIndex, PYSNMP_MODULE_ID=atmfCESmib, atmfDS1E1CESLostCells=atmfDS1E1CESLostCells, atmfDS1E1CESBufUnderflows=atmfDS1E1CESBufUnderflows, atmfDS1E1CESCBRService=atmfDS1E1CESCBRService, atmfCESmib=atmfCESmib, atmfDS1E1CESReassCells=atmfDS1E1CESReassCells, atmfDS1E1CESCellLossStatus=atmfDS1E1CESCellLossStatus, atmfDS1E1CESBufMaxSize=atmfDS1E1CESBufMaxSize, atmfDS1E1CESMapVPI=atmfDS1E1CESMapVPI)
