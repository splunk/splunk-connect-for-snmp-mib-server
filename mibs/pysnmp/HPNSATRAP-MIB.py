#
# PySNMP MIB module HPNSATRAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPNSATRAP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:30:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, TimeTicks, ModuleIdentity, Integer32, MibIdentifier, Counter64, Gauge32, Unsigned32, ObjectIdentity, enterprises, iso, IpAddress, Counter32, NotificationType, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "TimeTicks", "ModuleIdentity", "Integer32", "MibIdentifier", "Counter64", "Gauge32", "Unsigned32", "ObjectIdentity", "enterprises", "iso", "IpAddress", "Counter32", "NotificationType", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hp = MibIdentifier((1, 3, 6, 1, 4, 1, 11))
adaptec = MibIdentifier((1, 3, 6, 1, 4, 1, 795))
nm = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2))
hpnsa = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23))
hpnsaECC = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 6))
hpnsaRemoteAssist = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 8))
adaptecNm = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 4))
adaptecNmScsiStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 4, 1))
hpnr = MibIdentifier((1, 3, 6, 1, 4, 1, 16))
hpNetRAID = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 1))
hpNetRaidMib = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 1, 1))
raidTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 1, 1, 200))
hpnsaPostError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,4356))
hpnsaParityError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,20528))
hpnsaBusTimeoutError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,20544))
hpnsaIOChannelCheck = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,20560))
hpnsaSoftwareNMI = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,20576))
hpnsaPostMemoryResize = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,20592))
hpnsaPciParityError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,20624))
hpnsaPciSystemError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,20640))
hpnsaCPUFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,20656))
hpnsaFailsafeTimeout = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,20672))
hpnsaErrorLoggingDisabled = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,20704))
hpnsaSystemReconfig = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,20800))
hpnsaHotSwapPowerFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,24453))
hpnsaHotSwapDeviceRemoved = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,24454))
hpnsaHotSwapDeviceInserted = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,24455))
hpnsaSystemWarning = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,20736))
hpnsaSystemCritical = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,20737))
hpnsaStorageCapWarning = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,4096))
hpnsaStorageCapMinor = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,4097))
hpnsaStorageCapMajor = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,4098))
hpnsaDaCacheError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,8609))
hpnsaDaLogicalDriveTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,8625))
hpnsaDaLogicalDriveNotAvailable = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,8626))
hpnsaDaHotSpareFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,8641))
hpnsaDaHotSpareSuccess = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,8642))
hpnsaDaHardDiskFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,8657))
hpnsaDaParityThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,8673))
hpnsaDaSoftErrorThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,8674))
hpnsaDaHardwareThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,8675))
hpnsaDaMiscThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,8676))
hpnsaDaControllerTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,8677))
hpnsaScsiStatusCorruptedDB = NotificationType((1, 3, 6, 1, 4, 1, 795, 4, 1) + (0,8193))
hpnsaScsiStatusUnloadedNLM = NotificationType((1, 3, 6, 1, 4, 1, 795, 4, 1) + (0,8194))
hpnsaScsiStatusFailedHBA = NotificationType((1, 3, 6, 1, 4, 1, 795, 4, 1) + (0,8196))
hpnsaScsiStatusRecoveredHBA = NotificationType((1, 3, 6, 1, 4, 1, 795, 4, 1) + (0,8197))
hpnsaScsiStatusDiscoveredHBA = NotificationType((1, 3, 6, 1, 4, 1, 795, 4, 1) + (0,8198))
hpnsaScsiStatusDeviceFailed = NotificationType((1, 3, 6, 1, 4, 1, 795, 4, 1) + (0,8199))
hpnsaScsiStatusDeviceRecovered = NotificationType((1, 3, 6, 1, 4, 1, 795, 4, 1) + (0,8200))
hpnsaScsiStatusDeviceDiscovered = NotificationType((1, 3, 6, 1, 4, 1, 795, 4, 1) + (0,8201))
hpnsaScsiStatusChangedHBA = NotificationType((1, 3, 6, 1, 4, 1, 795, 4, 1) + (0,8205))
hpnsaScsiStatusDeviceChanged = NotificationType((1, 3, 6, 1, 4, 1, 795, 4, 1) + (0,8206))
hpnsaScsiStatusTimeoutHBA = NotificationType((1, 3, 6, 1, 4, 1, 795, 4, 1) + (0,8208))
hpnsaScsiStatusDeviceTimeout = NotificationType((1, 3, 6, 1, 4, 1, 795, 4, 1) + (0,8209))
hpnsaDiskSysDefects = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,8210))
hpnsaNicReceiveErrors = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16385))
hpnsaNicTransmitErrors = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16386))
hpnsaNicAdapterReset = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16387))
hpnsaNicAlignmentErrors = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16388))
hpnsaNicGiantFrameErrors = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16389))
hpnsaNicHardwareMismatch = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16390))
hpnsaNicLateCollision = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16391))
hpnsaNicExcessiveCollision = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16392))
hpnsaNicCarrierSenseError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16393))
hpnsaNicDeferralError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16394))
hpnsaNicNoECBError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16395))
hpnsaNicReceiveOverflow = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16396))
hpnsaNicUtilCount = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16397))
hpnsaNicAdapterMismatch = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16398))
hpnsaNicTxFIFOUnderrun = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16399))
hpnsaNicTxTimeOut = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16400))
hpnsaNicRxFIFOOverrun = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16401))
hpnsaNicRxFalseInterrupts = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16402))
hpnsaNicPagingError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16403))
hpnsaNicTimedOutDMA = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16404))
hpnsaNicTxNoResources = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16405))
hpnsaNicTxExcessiveFrags = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16406))
hpnsaNicRxLow = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16407))
hpnsaNicRxEmpty = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,16408))
hpnsaVoltWarning = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,20739))
hpnsaVoltEmergency = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,20738))
hpnsaRAVoltServerPowerFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,109))
hpnsaRAVoltMinus12VUpper = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,111))
hpnsaRAVoltPlus3VUpper = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,113))
hpnsaRAVoltPlus5VUpper = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,114))
hpnsaRAVoltPlus12VUpper = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,115))
hpnsaRAVoltMinus12VLower = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,121))
hpnsaRAVoltBatteryLower = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,122))
hpnsaRAVoltPlus3VLower = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,123))
hpnsaRAVoltPlus5VLower = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,124))
hpnsaRAVoltPlus12VLower = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,125))
hpnsaTempMonitorError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,12288))
hpnsaTempTrapWarning = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,12289))
hpnsaTempTrapEmergency = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,12290))
hpnsaHotSwapTempMonitorError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,24449))
hpnsaHotSwapTempWarning = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,24451))
hpnsaHotSwapTempEmergency = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,24452))
hpnsaRATempWarning = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,211))
hpnsaRATempShutdown = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,221))
hpnsaRATempCritical = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,231))
hpnsaASRServerRestart = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,20752))
hpnsaRAASRHangNOS = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,501))
hpnsaRAASRServerRestart = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,502))
hpnsaRAASRTimerEnabled = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,503))
hpnsaRAASRTimerDisabled = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,504))
hpnsaRABusUtilization = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,800))
hpnsaRASuccessfulLogin = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,401))
hpnsaRAIllegalLogin = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,402))
hpnsaRALowBatteryCharge = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,403))
hpnsaRABoardShutDown = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,404))
hpnsaRARemoteInitiatedCtrlAltDel = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,601))
hpnsaRARemoteInitiatedReset = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,602))
hpnsaRARemoteInitiatedPowerDown = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,603))
hpnsaRAInitServerBIOS = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,701))
hpnsaRATestNotification = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,900))
hpnsaRAAdminstratorLogout = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,405))
hpnsaRAAdministratorAutologout = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,406))
hpnsaRAAdministratorConnectionLost = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,407))
hpnsaRAAdministratorDialbackFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,408))
hpnsaRATAPNoConnect = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,901))
hpnsaRATAPParam1Error = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,902))
hpnsaRATAPParam2Error = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,903))
hpnsaRATAPParam3Error = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 8) + (0,904))
hpnsaEccErrorCorrected = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 6) + (0,4353))
hpnsaEccSBEOverflow = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 6) + (0,4354))
hpnsaEccMemoryResize = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 6) + (0,4355))
hpnsaEccMultiBitError = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 6) + (0,4357))
hpnsaEccMultiBitErrorOverflow = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 6) + (0,4358))
hpnsaRPSAbnormalCondition = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,9101))
hpnsaRPSACPowerSourceFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,9103))
hpnsaRPSPsuFailureDetected = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,9105))
hpnsaRPSDCShutdown = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,9106))
hpnsaRPSPsuRemoved = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,9107))
hpnsaRPSPsuInserted = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,9108))
hpnsaRPSPowerRestored = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,9109))
hpnsaRPSWarningExceeded = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,9110))
hpnsaRPSEmergencyExceeded = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23) + (0,9111))
storagemanagement = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 2))
cyclone = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 2, 5))
cycTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000))
cycManagerID = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9001), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycManagerID.setStatus('mandatory')
cycHostAdapterID = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9002), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycHostAdapterID.setStatus('mandatory')
cycHostAdapterNumber = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9003), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycHostAdapterNumber.setStatus('mandatory')
cycVendor = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9004), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycVendor.setStatus('mandatory')
cycProduct = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9005), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycProduct.setStatus('mandatory')
cycControllerModel = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9006), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycControllerModel.setStatus('mandatory')
cycBusNumber = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9007), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycBusNumber.setStatus('mandatory')
cycChannelNumber = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9008), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycChannelNumber.setStatus('mandatory')
cycScsiTargetID = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9009), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycScsiTargetID.setStatus('mandatory')
cycLun = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9010), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycLun.setStatus('mandatory')
cycArrayName = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9011), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycArrayName.setStatus('mandatory')
cycMisCompares = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9012), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycMisCompares.setStatus('mandatory')
cycDriver = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9013), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycDriver.setStatus('mandatory')
cycManager = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9014), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycManager.setStatus('mandatory')
cycOldArrayName = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9015), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycOldArrayName.setStatus('mandatory')
cycNewArrayName = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9016), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycNewArrayName.setStatus('mandatory')
cycPriority = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9017), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycPriority.setStatus('mandatory')
cycSenseInfo = MibScalar((1, 3, 6, 1, 4, 1, 795, 2, 5, 9000, 9018), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cycSenseInfo.setStatus('mandatory')
cycSNMPAgentIsUp = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,101))
cycSNMPAgentIsDown = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,102))
cycDuplicateHostAdapter = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,107))
cycHostAdapterDiscovered = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,108)).setObjects(("HPNSATRAP-MIB", "cycHostAdapterNumber"), ("HPNSATRAP-MIB", "cycHostAdapterID"), ("HPNSATRAP-MIB", "cycManagerID"))
cycHostAdapterChanged = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,109)).setObjects(("HPNSATRAP-MIB", "cycHostAdapterNumber"), ("HPNSATRAP-MIB", "cycHostAdapterID"), ("HPNSATRAP-MIB", "cycManagerID"))
cycHostAdapterFailed = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,110)).setObjects(("HPNSATRAP-MIB", "cycHostAdapterNumber"))
cycHostAdapterRecovered = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,111)).setObjects(("HPNSATRAP-MIB", "cycHostAdapterNumber"))
cycDeviceFailed = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,112)).setObjects(("HPNSATRAP-MIB", "cycHostAdapterNumber"), ("HPNSATRAP-MIB", "cycScsiTargetID"), ("HPNSATRAP-MIB", "cycLun"))
cycDeviceDiscovered = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,113)).setObjects(("HPNSATRAP-MIB", "cycHostAdapterNumber"), ("HPNSATRAP-MIB", "cycScsiTargetID"), ("HPNSATRAP-MIB", "cycLun"), ("HPNSATRAP-MIB", "cycVendor"), ("HPNSATRAP-MIB", "cycProduct"))
cycDeviceRecovered = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,114)).setObjects(("HPNSATRAP-MIB", "cycHostAdapterNumber"), ("HPNSATRAP-MIB", "cycScsiTargetID"), ("HPNSATRAP-MIB", "cycLun"))
cycDeviceChanged = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,115)).setObjects(("HPNSATRAP-MIB", "cycHostAdapterNumber"), ("HPNSATRAP-MIB", "cycScsiTargetID"), ("HPNSATRAP-MIB", "cycLun"), ("HPNSATRAP-MIB", "cycVendor"), ("HPNSATRAP-MIB", "cycProduct"))
cycPredictiveFailure = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,116)).setObjects(("HPNSATRAP-MIB", "cycHostAdapterNumber"), ("HPNSATRAP-MIB", "cycScsiTargetID"), ("HPNSATRAP-MIB", "cycLun"), ("HPNSATRAP-MIB", "cycVendor"), ("HPNSATRAP-MIB", "cycProduct"), ("HPNSATRAP-MIB", "cycSenseInfo"))
cycAspiDatabaseCleared = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,117))
cycAspiCrash = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,118))
cycAspiNoMemory = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,119))
cycAspiFileWriteOpenError = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,120))
cycAspiFileWriteError = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,121))
cycAspiNoDeviceFile = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,122))
cycAspiNoMemoryReading = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,123))
cycAspiFileReadError = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,124))
cycAspiBadFileMagic = NotificationType((1, 3, 6, 1, 4, 1, 795, 2, 5) + (0,125))
rtAdapterNumber = MibScalar((1, 3, 6, 1, 4, 1, 16, 1, 1, 200, 1001), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtAdapterNumber.setStatus('mandatory')
rtLogicalDriveNumber = MibScalar((1, 3, 6, 1, 4, 1, 16, 1, 1, 200, 1002), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtLogicalDriveNumber.setStatus('mandatory')
rtChannelNumber = MibScalar((1, 3, 6, 1, 4, 1, 16, 1, 1, 200, 1003), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtChannelNumber.setStatus('mandatory')
rtTargetID = MibScalar((1, 3, 6, 1, 4, 1, 16, 1, 1, 200, 1004), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtTargetID.setStatus('mandatory')
rtOldDriveState = MibScalar((1, 3, 6, 1, 4, 1, 16, 1, 1, 200, 1005), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtOldDriveState.setStatus('mandatory')
rtNewDriveState = MibScalar((1, 3, 6, 1, 4, 1, 16, 1, 1, 200, 1006), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtNewDriveState.setStatus('mandatory')
rtSenseKey = MibScalar((1, 3, 6, 1, 4, 1, 16, 1, 1, 200, 1007), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtSenseKey.setStatus('mandatory')
rtASC = MibScalar((1, 3, 6, 1, 4, 1, 16, 1, 1, 200, 1008), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtASC.setStatus('mandatory')
rtASCQ = MibScalar((1, 3, 6, 1, 4, 1, 16, 1, 1, 200, 1009), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtASCQ.setStatus('mandatory')
rtDriveVendor = MibScalar((1, 3, 6, 1, 4, 1, 16, 1, 1, 200, 1010), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtDriveVendor.setStatus('mandatory')
rtConfigUpdated = NotificationType((1, 3, 6, 1, 4, 1, 16, 1, 1, 200) + (0,9001)).setObjects(("HPNSATRAP-MIB", "rtAdapterNumber"))
rtPhysicalDriveStateChange = NotificationType((1, 3, 6, 1, 4, 1, 16, 1, 1, 200) + (0,9002)).setObjects(("HPNSATRAP-MIB", "rtAdapterNumber"), ("HPNSATRAP-MIB", "rtChannelNumber"), ("HPNSATRAP-MIB", "rtTargetID"), ("HPNSATRAP-MIB", "rtOldDriveState"), ("HPNSATRAP-MIB", "rtNewDriveState"))
rtLogicalDriveStateChange = NotificationType((1, 3, 6, 1, 4, 1, 16, 1, 1, 200) + (0,9003)).setObjects(("HPNSATRAP-MIB", "rtAdapterNumber"), ("HPNSATRAP-MIB", "rtLogicalDriveNumber"), ("HPNSATRAP-MIB", "rtOldDriveState"), ("HPNSATRAP-MIB", "rtNewDriveState"))
rtInitializeStarted = NotificationType((1, 3, 6, 1, 4, 1, 16, 1, 1, 200) + (0,9004)).setObjects(("HPNSATRAP-MIB", "rtAdapterNumber"), ("HPNSATRAP-MIB", "rtLogicalDriveNumber"))
rtInitializeCompleted = NotificationType((1, 3, 6, 1, 4, 1, 16, 1, 1, 200) + (0,9005)).setObjects(("HPNSATRAP-MIB", "rtAdapterNumber"), ("HPNSATRAP-MIB", "rtLogicalDriveNumber"))
rtInitializeAborted = NotificationType((1, 3, 6, 1, 4, 1, 16, 1, 1, 200) + (0,9006)).setObjects(("HPNSATRAP-MIB", "rtAdapterNumber"), ("HPNSATRAP-MIB", "rtLogicalDriveNumber"))
rtInitializeFailed = NotificationType((1, 3, 6, 1, 4, 1, 16, 1, 1, 200) + (0,9007)).setObjects(("HPNSATRAP-MIB", "rtAdapterNumber"), ("HPNSATRAP-MIB", "rtLogicalDriveNumber"))
rtCheckConsistencyStarted = NotificationType((1, 3, 6, 1, 4, 1, 16, 1, 1, 200) + (0,9008)).setObjects(("HPNSATRAP-MIB", "rtAdapterNumber"), ("HPNSATRAP-MIB", "rtLogicalDriveNumber"))
rtCheckConsistencyCompleted = NotificationType((1, 3, 6, 1, 4, 1, 16, 1, 1, 200) + (0,9009)).setObjects(("HPNSATRAP-MIB", "rtAdapterNumber"), ("HPNSATRAP-MIB", "rtLogicalDriveNumber"))
rtCheckConsistencyAborted = NotificationType((1, 3, 6, 1, 4, 1, 16, 1, 1, 200) + (0,9010)).setObjects(("HPNSATRAP-MIB", "rtAdapterNumber"), ("HPNSATRAP-MIB", "rtLogicalDriveNumber"))
rtConsistencyCorrected = NotificationType((1, 3, 6, 1, 4, 1, 16, 1, 1, 200) + (0,9011)).setObjects(("HPNSATRAP-MIB", "rtAdapterNumber"), ("HPNSATRAP-MIB", "rtLogicalDriveNumber"))
rtCheckConsistencyFailed = NotificationType((1, 3, 6, 1, 4, 1, 16, 1, 1, 200) + (0,9012)).setObjects(("HPNSATRAP-MIB", "rtAdapterNumber"), ("HPNSATRAP-MIB", "rtLogicalDriveNumber"))
rtReconstructionStarted = NotificationType((1, 3, 6, 1, 4, 1, 16, 1, 1, 200) + (0,9013)).setObjects(("HPNSATRAP-MIB", "rtAdapterNumber"), ("HPNSATRAP-MIB", "rtLogicalDriveNumber"))
rtReconstructionCompleted = NotificationType((1, 3, 6, 1, 4, 1, 16, 1, 1, 200) + (0,9014)).setObjects(("HPNSATRAP-MIB", "rtAdapterNumber"), ("HPNSATRAP-MIB", "rtLogicalDriveNumber"))
rtReconstructionFailed = NotificationType((1, 3, 6, 1, 4, 1, 16, 1, 1, 200) + (0,9015)).setObjects(("HPNSATRAP-MIB", "rtAdapterNumber"), ("HPNSATRAP-MIB", "rtLogicalDriveNumber"))
rtPredictiveFailuresFalse = NotificationType((1, 3, 6, 1, 4, 1, 16, 1, 1, 200) + (0,9016)).setObjects(("HPNSATRAP-MIB", "rtAdapterNumber"), ("HPNSATRAP-MIB", "rtChannelNumber"), ("HPNSATRAP-MIB", "rtTargetID"), ("HPNSATRAP-MIB", "rtDriveVendor"), ("HPNSATRAP-MIB", "rtSenseKey"), ("HPNSATRAP-MIB", "rtASC"), ("HPNSATRAP-MIB", "rtASCQ"))
rtPredictiveFailuresExceeded = NotificationType((1, 3, 6, 1, 4, 1, 16, 1, 1, 200) + (0,9017)).setObjects(("HPNSATRAP-MIB", "rtAdapterNumber"), ("HPNSATRAP-MIB", "rtChannelNumber"), ("HPNSATRAP-MIB", "rtTargetID"), ("HPNSATRAP-MIB", "rtDriveVendor"), ("HPNSATRAP-MIB", "rtSenseKey"), ("HPNSATRAP-MIB", "rtASC"), ("HPNSATRAP-MIB", "rtASCQ"))
rtCheckConditionStatus = NotificationType((1, 3, 6, 1, 4, 1, 16, 1, 1, 200) + (0,9018)).setObjects(("HPNSATRAP-MIB", "rtAdapterNumber"), ("HPNSATRAP-MIB", "rtChannelNumber"), ("HPNSATRAP-MIB", "rtTargetID"), ("HPNSATRAP-MIB", "rtSenseKey"), ("HPNSATRAP-MIB", "rtASC"), ("HPNSATRAP-MIB", "rtASCQ"))
rtNewDriveInserted = NotificationType((1, 3, 6, 1, 4, 1, 16, 1, 1, 200) + (0,9019)).setObjects(("HPNSATRAP-MIB", "rtAdapterNumber"), ("HPNSATRAP-MIB", "rtChannelNumber"), ("HPNSATRAP-MIB", "rtTargetID"))
rtBatteryMissing = NotificationType((1, 3, 6, 1, 4, 1, 16, 1, 1, 200) + (0,9020)).setObjects(("HPNSATRAP-MIB", "rtAdapterNumber"))
rtBatteryVolatageLow = NotificationType((1, 3, 6, 1, 4, 1, 16, 1, 1, 200) + (0,9021)).setObjects(("HPNSATRAP-MIB", "rtAdapterNumber"))
rtBatteryTemperatureHigh = NotificationType((1, 3, 6, 1, 4, 1, 16, 1, 1, 200) + (0,9022)).setObjects(("HPNSATRAP-MIB", "rtAdapterNumber"))
mibBuilder.exportSymbols("HPNSATRAP-MIB", hpnsaRABoardShutDown=hpnsaRABoardShutDown, hpnsaDaLogicalDriveNotAvailable=hpnsaDaLogicalDriveNotAvailable, hpnsaDaSoftErrorThresholdTrap=hpnsaDaSoftErrorThresholdTrap, hpnsaVoltEmergency=hpnsaVoltEmergency, hpnsaNicTransmitErrors=hpnsaNicTransmitErrors, hpnsaDaParityThresholdTrap=hpnsaDaParityThresholdTrap, cycHostAdapterChanged=cycHostAdapterChanged, cycDeviceDiscovered=cycDeviceDiscovered, cycBusNumber=cycBusNumber, hpnsaScsiStatusDeviceChanged=hpnsaScsiStatusDeviceChanged, cycArrayName=cycArrayName, hpnsaRATempWarning=hpnsaRATempWarning, hpnsaRAVoltPlus12VUpper=hpnsaRAVoltPlus12VUpper, hpnsaDaHotSpareSuccess=hpnsaDaHotSpareSuccess, hpnsaRAVoltPlus3VLower=hpnsaRAVoltPlus3VLower, hpnsaRAVoltPlus12VLower=hpnsaRAVoltPlus12VLower, hpnsaSystemCritical=hpnsaSystemCritical, hpnsaScsiStatusDeviceDiscovered=hpnsaScsiStatusDeviceDiscovered, hpnsaRAASRServerRestart=hpnsaRAASRServerRestart, rtCheckConsistencyCompleted=rtCheckConsistencyCompleted, rtCheckConditionStatus=rtCheckConditionStatus, hpnsaNicReceiveErrors=hpnsaNicReceiveErrors, cycTraps=cycTraps, rtReconstructionFailed=rtReconstructionFailed, hpnsaRemoteAssist=hpnsaRemoteAssist, hpnsaRAASRHangNOS=hpnsaRAASRHangNOS, cycManagerID=cycManagerID, hpnsaEccMultiBitErrorOverflow=hpnsaEccMultiBitErrorOverflow, cycAspiNoMemory=cycAspiNoMemory, cycChannelNumber=cycChannelNumber, hpnsaRPSWarningExceeded=hpnsaRPSWarningExceeded, rtReconstructionCompleted=rtReconstructionCompleted, hpnsaIOChannelCheck=hpnsaIOChannelCheck, hpnsaSoftwareNMI=hpnsaSoftwareNMI, hpnsaHotSwapPowerFailure=hpnsaHotSwapPowerFailure, rtPredictiveFailuresExceeded=rtPredictiveFailuresExceeded, hpnsaFailsafeTimeout=hpnsaFailsafeTimeout, rtASC=rtASC, hpnsaDaMiscThresholdTrap=hpnsaDaMiscThresholdTrap, cyclone=cyclone, raidTraps=raidTraps, rtBatteryVolatageLow=rtBatteryVolatageLow, hpnsaRAVoltMinus12VUpper=hpnsaRAVoltMinus12VUpper, hpnsaRATempCritical=hpnsaRATempCritical, hpnsaRATAPParam3Error=hpnsaRATAPParam3Error, hpnsaRATempShutdown=hpnsaRATempShutdown, hpnsaRPSPsuInserted=hpnsaRPSPsuInserted, hpnsaRPSEmergencyExceeded=hpnsaRPSEmergencyExceeded, hpnsaDaLogicalDriveTrap=hpnsaDaLogicalDriveTrap, hpnsaEccErrorCorrected=hpnsaEccErrorCorrected, hpnsaEccMemoryResize=hpnsaEccMemoryResize, cycProduct=cycProduct, rtPhysicalDriveStateChange=rtPhysicalDriveStateChange, hpnsaScsiStatusChangedHBA=hpnsaScsiStatusChangedHBA, hpnsaRAVoltBatteryLower=hpnsaRAVoltBatteryLower, hpnsaNicRxEmpty=hpnsaNicRxEmpty, rtPredictiveFailuresFalse=rtPredictiveFailuresFalse, cycHostAdapterID=cycHostAdapterID, cycSenseInfo=cycSenseInfo, hpnsaNicExcessiveCollision=hpnsaNicExcessiveCollision, cycDeviceRecovered=cycDeviceRecovered, hpnsaRARemoteInitiatedPowerDown=hpnsaRARemoteInitiatedPowerDown, hpnsaPostMemoryResize=hpnsaPostMemoryResize, hpnsaDiskSysDefects=hpnsaDiskSysDefects, hpnsaRATAPNoConnect=hpnsaRATAPNoConnect, hpnsaBusTimeoutError=hpnsaBusTimeoutError, hpnsaEccSBEOverflow=hpnsaEccSBEOverflow, rtTargetID=rtTargetID, cycControllerModel=cycControllerModel, hpnsaNicGiantFrameErrors=hpnsaNicGiantFrameErrors, hpnsaNicCarrierSenseError=hpnsaNicCarrierSenseError, hpnsaRAVoltServerPowerFailure=hpnsaRAVoltServerPowerFailure, hpnsaRAVoltPlus5VUpper=hpnsaRAVoltPlus5VUpper, hpnsaStorageCapWarning=hpnsaStorageCapWarning, hpnsaHotSwapDeviceRemoved=hpnsaHotSwapDeviceRemoved, hpnsaScsiStatusDiscoveredHBA=hpnsaScsiStatusDiscoveredHBA, hp=hp, hpnsaNicTxTimeOut=hpnsaNicTxTimeOut, hpnsaDaHardwareThresholdTrap=hpnsaDaHardwareThresholdTrap, hpnsaScsiStatusTimeoutHBA=hpnsaScsiStatusTimeoutHBA, hpnsaNicTxNoResources=hpnsaNicTxNoResources, hpnsaDaHotSpareFailure=hpnsaDaHotSpareFailure, rtConsistencyCorrected=rtConsistencyCorrected, hpnsaStorageCapMajor=hpnsaStorageCapMajor, rtInitializeStarted=rtInitializeStarted, rtReconstructionStarted=rtReconstructionStarted, cycScsiTargetID=cycScsiTargetID, cycHostAdapterRecovered=cycHostAdapterRecovered, adaptecNm=adaptecNm, hpnsaRPSDCShutdown=hpnsaRPSDCShutdown, hpnsaHotSwapTempWarning=hpnsaHotSwapTempWarning, hpnsaRATestNotification=hpnsaRATestNotification, hpnsaPciSystemError=hpnsaPciSystemError, hpnsaRAAdministratorConnectionLost=hpnsaRAAdministratorConnectionLost, hpnsaRATAPParam1Error=hpnsaRATAPParam1Error, hpnsaRASuccessfulLogin=hpnsaRASuccessfulLogin, cycAspiDatabaseCleared=cycAspiDatabaseCleared, cycAspiFileWriteOpenError=cycAspiFileWriteOpenError, rtCheckConsistencyAborted=rtCheckConsistencyAborted, hpnsaSystemWarning=hpnsaSystemWarning, hpnr=hpnr, cycAspiNoMemoryReading=cycAspiNoMemoryReading, cycPredictiveFailure=cycPredictiveFailure, cycAspiNoDeviceFile=cycAspiNoDeviceFile, hpNetRaidMib=hpNetRaidMib, hpnsaEccMultiBitError=hpnsaEccMultiBitError, cycAspiBadFileMagic=cycAspiBadFileMagic, hpnsaRPSPsuFailureDetected=hpnsaRPSPsuFailureDetected, hpnsaScsiStatusCorruptedDB=hpnsaScsiStatusCorruptedDB, hpnsaNicTimedOutDMA=hpnsaNicTimedOutDMA, hpnsaNicPagingError=hpnsaNicPagingError, hpnsaSystemReconfig=hpnsaSystemReconfig, hpnsaHotSwapDeviceInserted=hpnsaHotSwapDeviceInserted, cycAspiCrash=cycAspiCrash, hpnsaRAASRTimerDisabled=hpnsaRAASRTimerDisabled, hpnsaParityError=hpnsaParityError, hpnsaHotSwapTempMonitorError=hpnsaHotSwapTempMonitorError, cycHostAdapterDiscovered=cycHostAdapterDiscovered, hpnsaNicUtilCount=hpnsaNicUtilCount, hpnsaNicLateCollision=hpnsaNicLateCollision, rtNewDriveInserted=rtNewDriveInserted, hpnsaDaHardDiskFailure=hpnsaDaHardDiskFailure, hpnsaNicNoECBError=hpnsaNicNoECBError, cycAspiFileWriteError=cycAspiFileWriteError, rtChannelNumber=rtChannelNumber, hpnsaRAVoltMinus12VLower=hpnsaRAVoltMinus12VLower, hpnsaRPSPsuRemoved=hpnsaRPSPsuRemoved, hpnsaNicRxFIFOOverrun=hpnsaNicRxFIFOOverrun, hpnsaStorageCapMinor=hpnsaStorageCapMinor, rtLogicalDriveStateChange=rtLogicalDriveStateChange, hpnsaScsiStatusDeviceRecovered=hpnsaScsiStatusDeviceRecovered, hpnsaScsiStatusFailedHBA=hpnsaScsiStatusFailedHBA, cycVendor=cycVendor, hpnsaPciParityError=hpnsaPciParityError, hpnsaVoltWarning=hpnsaVoltWarning, rtInitializeCompleted=rtInitializeCompleted, hpnsaNicAlignmentErrors=hpnsaNicAlignmentErrors, hpnsaScsiStatusRecoveredHBA=hpnsaScsiStatusRecoveredHBA, cycHostAdapterFailed=cycHostAdapterFailed, hpnsaNicRxFalseInterrupts=hpnsaNicRxFalseInterrupts, hpnsaNicRxLow=hpnsaNicRxLow, cycSNMPAgentIsDown=cycSNMPAgentIsDown, hpnsaRABusUtilization=hpnsaRABusUtilization, hpnsaRAIllegalLogin=hpnsaRAIllegalLogin, rtBatteryMissing=rtBatteryMissing, hpnsaRAInitServerBIOS=hpnsaRAInitServerBIOS, hpnsaErrorLoggingDisabled=hpnsaErrorLoggingDisabled, adaptecNmScsiStatus=adaptecNmScsiStatus, cycHostAdapterNumber=cycHostAdapterNumber, hpnsaRAASRTimerEnabled=hpnsaRAASRTimerEnabled, hpnsaNicAdapterMismatch=hpnsaNicAdapterMismatch, hpnsaRPSPowerRestored=hpnsaRPSPowerRestored, hpnsaTempTrapWarning=hpnsaTempTrapWarning, hpnsaScsiStatusDeviceTimeout=hpnsaScsiStatusDeviceTimeout, hpnsaNicTxExcessiveFrags=hpnsaNicTxExcessiveFrags, hpnsaNicAdapterReset=hpnsaNicAdapterReset, hpnsaNicHardwareMismatch=hpnsaNicHardwareMismatch, hpnsaRAAdminstratorLogout=hpnsaRAAdminstratorLogout, cycSNMPAgentIsUp=cycSNMPAgentIsUp, hpnsaScsiStatusUnloadedNLM=hpnsaScsiStatusUnloadedNLM, cycAspiFileReadError=cycAspiFileReadError, rtAdapterNumber=rtAdapterNumber, cycDriver=cycDriver, rtCheckConsistencyFailed=rtCheckConsistencyFailed, hpnsaRAVoltPlus5VLower=hpnsaRAVoltPlus5VLower, cycManager=cycManager, hpnsaRPSACPowerSourceFailure=hpnsaRPSACPowerSourceFailure, rtLogicalDriveNumber=rtLogicalDriveNumber, hpnsaScsiStatusDeviceFailed=hpnsaScsiStatusDeviceFailed, rtInitializeAborted=rtInitializeAborted, hpnsa=hpnsa, hpnsaRARemoteInitiatedReset=hpnsaRARemoteInitiatedReset, hpnsaPostError=hpnsaPostError, cycDuplicateHostAdapter=cycDuplicateHostAdapter, hpNetRAID=hpNetRAID, adaptec=adaptec, rtASCQ=rtASCQ, hpnsaDaControllerTrap=hpnsaDaControllerTrap, rtInitializeFailed=rtInitializeFailed, hpnsaTempTrapEmergency=hpnsaTempTrapEmergency, cycNewArrayName=cycNewArrayName, rtOldDriveState=rtOldDriveState, hpnsaDaCacheError=hpnsaDaCacheError, rtConfigUpdated=rtConfigUpdated, rtNewDriveState=rtNewDriveState, rtDriveVendor=rtDriveVendor, cycDeviceChanged=cycDeviceChanged, rtSenseKey=rtSenseKey, cycOldArrayName=cycOldArrayName, hpnsaRPSAbnormalCondition=hpnsaRPSAbnormalCondition, rtCheckConsistencyStarted=rtCheckConsistencyStarted, hpnsaRAVoltPlus3VUpper=hpnsaRAVoltPlus3VUpper, cycMisCompares=cycMisCompares, hpnsaASRServerRestart=hpnsaASRServerRestart, hpnsaRARemoteInitiatedCtrlAltDel=hpnsaRARemoteInitiatedCtrlAltDel, rtBatteryTemperatureHigh=rtBatteryTemperatureHigh, storagemanagement=storagemanagement, hpnsaNicReceiveOverflow=hpnsaNicReceiveOverflow, hpnsaECC=hpnsaECC, hpnsaRAAdministratorAutologout=hpnsaRAAdministratorAutologout, hpnsaRAAdministratorDialbackFailed=hpnsaRAAdministratorDialbackFailed, hpnsaRATAPParam2Error=hpnsaRATAPParam2Error, cycPriority=cycPriority, cycDeviceFailed=cycDeviceFailed, nm=nm, hpnsaRALowBatteryCharge=hpnsaRALowBatteryCharge, hpnsaTempMonitorError=hpnsaTempMonitorError, hpnsaCPUFailure=hpnsaCPUFailure, hpnsaNicDeferralError=hpnsaNicDeferralError, cycLun=cycLun, hpnsaNicTxFIFOUnderrun=hpnsaNicTxFIFOUnderrun, hpnsaHotSwapTempEmergency=hpnsaHotSwapTempEmergency)
