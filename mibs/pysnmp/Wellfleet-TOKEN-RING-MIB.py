#
# PySNMP MIB module Wellfleet-TOKEN-RING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-TOKEN-RING-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:35:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, ModuleIdentity, NotificationType, Counter32, Gauge32, Counter64, IpAddress, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Integer32, TimeTicks, Bits, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "ModuleIdentity", "NotificationType", "Counter32", "Gauge32", "Counter64", "IpAddress", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Integer32", "TimeTicks", "Bits", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfLine, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfLine")
wfTokenRingTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 2), )
if mibBuilder.loadTexts: wfTokenRingTable.setStatus('mandatory')
wfTokenRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1), ).setIndexNames((0, "Wellfleet-TOKEN-RING-MIB", "wfTokenRingSlot"), (0, "Wellfleet-TOKEN-RING-MIB", "wfTokenRingConnector"))
if mibBuilder.loadTexts: wfTokenRingEntry.setStatus('mandatory')
wfTokenRingDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTokenRingDelete.setStatus('mandatory')
wfTokenRingDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTokenRingDisable.setStatus('mandatory')
wfTokenRingState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingState.setStatus('mandatory')
wfTokenRingSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingSlot.setStatus('mandatory')
wfTokenRingConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingConnector.setStatus('mandatory')
wfTokenRingCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTokenRingCct.setStatus('mandatory')
wfTokenRingMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4568))).clone(namedValues=NamedValues(("default", 4568))).clone('default')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingMtu.setStatus('mandatory')
wfTokenRingMadr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingMadr.setStatus('mandatory')
wfTokenRingCfgMadr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTokenRingCfgMadr.setStatus('mandatory')
wfTokenRingMadrSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("boxwide", 1), ("prom", 2), ("cnfg", 3))).clone('prom')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTokenRingMadrSelect.setStatus('mandatory')
wfTokenRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4194304, 16777216))).clone(namedValues=NamedValues(("mbps4", 4194304), ("mbps16", 16777216))).clone('mbps16')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTokenRingSpeed.setStatus('mandatory')
wfTokenRingEarlyTokenRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTokenRingEarlyTokenRelease.setStatus('mandatory')
wfTokenRingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingStatus.setStatus('mandatory')
wfTokenRingOpenState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("opened", 1), ("opening", 2), ("closing", 3), ("openfailure", 4), ("ringfailure", 5), ("closed", 6))).clone('closed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingOpenState.setStatus('mandatory')
wfTokenRingOpenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("open", 1), ("badparam", 2), ("lobefailed", 3), ("signalloss", 4), ("insertiontimeout", 5), ("ringfailed", 6), ("beaconing", 7), ("duplicatemac", 8), ("requestfailed", 9), ("removereceived", 10), ("unkerror", 11), ("noopen", 12))).clone('noopen')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingOpenStatus.setStatus('mandatory')
wfTokenRingUpStream = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingUpStream.setStatus('mandatory')
wfTokenRingRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingRxOctets.setStatus('mandatory')
wfTokenRingRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingRxFrames.setStatus('mandatory')
wfTokenRingTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingTxOctets.setStatus('mandatory')
wfTokenRingTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingTxFrames.setStatus('mandatory')
wfTokenRingInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingInDiscards.setStatus('mandatory')
wfTokenRingInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingInErrors.setStatus('mandatory')
wfTokenRingOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingOutDiscards.setStatus('mandatory')
wfTokenRingOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingOutErrors.setStatus('mandatory')
wfTokenRingTxClipFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingTxClipFrames.setStatus('mandatory')
wfTokenRingRxReplenMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingRxReplenMisses.setStatus('mandatory')
wfTokenRingSignalLosses = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingSignalLosses.setStatus('mandatory')
wfTokenRingHardErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingHardErrors.setStatus('mandatory')
wfTokenRingSoftErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingSoftErrors.setStatus('mandatory')
wfTokenRingTransmitBeacons = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingTransmitBeacons.setStatus('mandatory')
wfTokenRingLobeWireFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingLobeWireFaults.setStatus('mandatory')
wfTokenRingAutoRemovalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingAutoRemovalErrors.setStatus('mandatory')
wfTokenRingRequestRemoves = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingRequestRemoves.setStatus('mandatory')
wfTokenRingCounterOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingCounterOverflows.setStatus('mandatory')
wfTokenRingSingleStations = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingSingleStations.setStatus('mandatory')
wfTokenRingRingRecoveries = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingRingRecoveries.setStatus('mandatory')
wfTokenRingAdapterChecks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingAdapterChecks.setStatus('mandatory')
wfTokenRingFirstAdapterCheckCode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingFirstAdapterCheckCode.setStatus('mandatory')
wfTokenRingLastAdapterCheckCode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingLastAdapterCheckCode.setStatus('mandatory')
wfTokenRingLineErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingLineErrors.setStatus('mandatory')
wfTokenRingBurstErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingBurstErrors.setStatus('mandatory')
wfTokenRingAriFciErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingAriFciErrors.setStatus('mandatory')
wfTokenRingLostFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingLostFrameErrors.setStatus('mandatory')
wfTokenRingRxCongestionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingRxCongestionErrors.setStatus('mandatory')
wfTokenRingFrameCopiedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingFrameCopiedErrors.setStatus('mandatory')
wfTokenRingTokenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingTokenErrors.setStatus('mandatory')
wfTokenRingDmaBusErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingDmaBusErrors.setStatus('mandatory')
wfTokenRingDmaParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingDmaParityErrors.setStatus('mandatory')
wfTokenRingSrbNotFreeCmdAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingSrbNotFreeCmdAborts.setStatus('mandatory')
wfTokenRingRxProcessings = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingRxProcessings.setStatus('mandatory')
wfTokenRingTxProcessings = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingTxProcessings.setStatus('mandatory')
wfTokenRingTxCmplProcessings = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingTxCmplProcessings.setStatus('mandatory')
wfTokenRingRxTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingRxTimeouts.setStatus('mandatory')
wfTokenRingCmdTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingCmdTimeouts.setStatus('mandatory')
wfTokenRingRxHostIntErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingRxHostIntErrors.setStatus('mandatory')
wfTokenRingRxTxBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingRxTxBufferSize.setStatus('mandatory')
wfTokenRingCfgTxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTokenRingCfgTxQueueLength.setStatus('mandatory')
wfTokenRingCfgRxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTokenRingCfgRxQueueLength.setStatus('mandatory')
wfTokenRingTxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingTxQueueLength.setStatus('mandatory')
wfTokenRingRxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingRxQueueLength.setStatus('mandatory')
wfTokenRingMacRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingMacRxOctets.setStatus('mandatory')
wfTokenRingMacRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingMacRxFrames.setStatus('mandatory')
wfTokenRingCfgFunctionalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2147467520))).clone(namedValues=NamedValues(("mask", 2147467520))).clone('mask')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTokenRingCfgFunctionalAddress.setStatus('mandatory')
wfTokenRingFunctionalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 64), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingFunctionalAddress.setStatus('mandatory')
wfTokenRingGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingGroupAddress.setStatus('mandatory')
wfTokenRingLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 66), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTokenRingLineNumber.setStatus('mandatory')
wfTokenRingMacCode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 67), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingMacCode.setStatus('mandatory')
wfTokenRingModule = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingModule.setStatus('mandatory')
wfTokenRingActualConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingActualConnector.setStatus('mandatory')
wfTokenRingLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 70), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingLastChange.setStatus('mandatory')
wfTokenRingOutQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 71), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingOutQLen.setStatus('mandatory')
wfTokenRingForceMacCode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("timac", 1), ("fastmac", 2), ("fastmacplus", 3), ("fastmacplusb", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTokenRingForceMacCode.setStatus('mandatory')
wfTokenRingMSBMadr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 73), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTokenRingMSBMadr.setStatus('mandatory')
wfTokenRingTurboBoflDebug = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 74), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTokenRingTurboBoflDebug.setStatus('mandatory')
wfTokenRingSingleStatDis = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 2, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTokenRingSingleStatDis.setStatus('mandatory')
mibBuilder.exportSymbols("Wellfleet-TOKEN-RING-MIB", wfTokenRingMacRxOctets=wfTokenRingMacRxOctets, wfTokenRingTokenErrors=wfTokenRingTokenErrors, wfTokenRingLostFrameErrors=wfTokenRingLostFrameErrors, wfTokenRingAriFciErrors=wfTokenRingAriFciErrors, wfTokenRingFunctionalAddress=wfTokenRingFunctionalAddress, wfTokenRingOpenStatus=wfTokenRingOpenStatus, wfTokenRingFrameCopiedErrors=wfTokenRingFrameCopiedErrors, wfTokenRingRxTimeouts=wfTokenRingRxTimeouts, wfTokenRingRxOctets=wfTokenRingRxOctets, wfTokenRingTxClipFrames=wfTokenRingTxClipFrames, wfTokenRingOutQLen=wfTokenRingOutQLen, wfTokenRingSignalLosses=wfTokenRingSignalLosses, wfTokenRingAutoRemovalErrors=wfTokenRingAutoRemovalErrors, wfTokenRingSrbNotFreeCmdAborts=wfTokenRingSrbNotFreeCmdAborts, wfTokenRingRxCongestionErrors=wfTokenRingRxCongestionErrors, wfTokenRingInDiscards=wfTokenRingInDiscards, wfTokenRingDelete=wfTokenRingDelete, wfTokenRingCmdTimeouts=wfTokenRingCmdTimeouts, wfTokenRingSingleStations=wfTokenRingSingleStations, wfTokenRingStatus=wfTokenRingStatus, wfTokenRingTxOctets=wfTokenRingTxOctets, wfTokenRingLineNumber=wfTokenRingLineNumber, wfTokenRingMacRxFrames=wfTokenRingMacRxFrames, wfTokenRingCct=wfTokenRingCct, wfTokenRingSoftErrors=wfTokenRingSoftErrors, wfTokenRingTxFrames=wfTokenRingTxFrames, wfTokenRingDmaParityErrors=wfTokenRingDmaParityErrors, wfTokenRingTxQueueLength=wfTokenRingTxQueueLength, wfTokenRingState=wfTokenRingState, wfTokenRingTxProcessings=wfTokenRingTxProcessings, wfTokenRingInErrors=wfTokenRingInErrors, wfTokenRingConnector=wfTokenRingConnector, wfTokenRingTxCmplProcessings=wfTokenRingTxCmplProcessings, wfTokenRingMadr=wfTokenRingMadr, wfTokenRingEntry=wfTokenRingEntry, wfTokenRingOpenState=wfTokenRingOpenState, wfTokenRingEarlyTokenRelease=wfTokenRingEarlyTokenRelease, wfTokenRingSlot=wfTokenRingSlot, wfTokenRingMacCode=wfTokenRingMacCode, wfTokenRingDisable=wfTokenRingDisable, wfTokenRingRxFrames=wfTokenRingRxFrames, wfTokenRingMadrSelect=wfTokenRingMadrSelect, wfTokenRingMSBMadr=wfTokenRingMSBMadr, wfTokenRingRxProcessings=wfTokenRingRxProcessings, wfTokenRingLobeWireFaults=wfTokenRingLobeWireFaults, wfTokenRingDmaBusErrors=wfTokenRingDmaBusErrors, wfTokenRingCounterOverflows=wfTokenRingCounterOverflows, wfTokenRingCfgTxQueueLength=wfTokenRingCfgTxQueueLength, wfTokenRingCfgRxQueueLength=wfTokenRingCfgRxQueueLength, wfTokenRingLastAdapterCheckCode=wfTokenRingLastAdapterCheckCode, wfTokenRingRingRecoveries=wfTokenRingRingRecoveries, wfTokenRingTransmitBeacons=wfTokenRingTransmitBeacons, wfTokenRingCfgFunctionalAddress=wfTokenRingCfgFunctionalAddress, wfTokenRingTable=wfTokenRingTable, wfTokenRingFirstAdapterCheckCode=wfTokenRingFirstAdapterCheckCode, wfTokenRingRxReplenMisses=wfTokenRingRxReplenMisses, wfTokenRingHardErrors=wfTokenRingHardErrors, wfTokenRingLineErrors=wfTokenRingLineErrors, wfTokenRingRxHostIntErrors=wfTokenRingRxHostIntErrors, wfTokenRingSpeed=wfTokenRingSpeed, wfTokenRingRequestRemoves=wfTokenRingRequestRemoves, wfTokenRingSingleStatDis=wfTokenRingSingleStatDis, wfTokenRingUpStream=wfTokenRingUpStream, wfTokenRingBurstErrors=wfTokenRingBurstErrors, wfTokenRingModule=wfTokenRingModule, wfTokenRingForceMacCode=wfTokenRingForceMacCode, wfTokenRingOutDiscards=wfTokenRingOutDiscards, wfTokenRingOutErrors=wfTokenRingOutErrors, wfTokenRingMtu=wfTokenRingMtu, wfTokenRingCfgMadr=wfTokenRingCfgMadr, wfTokenRingRxQueueLength=wfTokenRingRxQueueLength, wfTokenRingGroupAddress=wfTokenRingGroupAddress, wfTokenRingRxTxBufferSize=wfTokenRingRxTxBufferSize, wfTokenRingActualConnector=wfTokenRingActualConnector, wfTokenRingLastChange=wfTokenRingLastChange, wfTokenRingAdapterChecks=wfTokenRingAdapterChecks, wfTokenRingTurboBoflDebug=wfTokenRingTurboBoflDebug)
