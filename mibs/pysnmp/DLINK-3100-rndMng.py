#
# PySNMP MIB module DLINK-3100-rndMng (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DLINK-3100-rndMng
# Produced by pysmi-0.3.4 at Mon Apr 29 18:34:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
rnd, = mibBuilder.importSymbols("DLINK-3100-MIB", "rnd")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, Counter64, iso, Gauge32, ModuleIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Bits, Integer32, Counter32, TimeTicks, MibIdentifier, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter64", "iso", "Gauge32", "ModuleIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Bits", "Integer32", "Counter32", "TimeTicks", "MibIdentifier", "ObjectIdentity")
DisplayString, RowStatus, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention", "TruthValue")
rndMng = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1))
rndMng.setRevisions(('2009-02-24 00:00', '2007-10-24 00:00', '2006-06-20 00:00', '2004-06-01 00:00',))
if mibBuilder.loadTexts: rndMng.setLastUpdated('200606200000Z')
if mibBuilder.loadTexts: rndMng.setOrganization('Dlink, Inc.')
rndSysId = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndSysId.setStatus('current')
rndAction = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27))).clone(namedValues=NamedValues(("reset", 1), ("sendNetworkTab", 2), ("deleteNetworkTab", 3), ("sendRoutingTab", 4), ("deleteRoutingTab", 5), ("sendLanTab", 6), ("deleteLanTab", 7), ("deleteArpTab", 8), ("sendArpTab", 9), ("deleteRouteTab", 10), ("sendRouteTab", 11), ("backupSPFRoutingTab", 12), ("backupIPRoutingTab", 13), ("backupNetworkTab", 14), ("backupLanTab", 15), ("backupArpTab", 16), ("backupIPXRipTab", 17), ("backupIPXSAPTab", 18), ("resetStartupCDB", 19), ("eraseStartupCDB", 20), ("deleteZeroHopRoutingAllocTab", 21), ("slipDisconnect", 22), ("deleteDynamicLanTab", 23), ("eraseRunningCDB", 24), ("copyStartupToRunning", 25), ("none", 26), ("resetToFactoryDefaults", 27)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndAction.setStatus('current')
rndFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndFileName.setStatus('current')
rlSnmpVersionSupported = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlSnmpVersionSupported.setStatus('current')
rlSnmpMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlSnmpMibVersion.setStatus('current')
rlCpuUtilEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCpuUtilEnable.setStatus('current')
rlCpuUtilDuringLastSecond = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 101))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCpuUtilDuringLastSecond.setStatus('current')
rlCpuUtilDuringLastMinute = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 101))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCpuUtilDuringLastMinute.setStatus('current')
rlCpuUtilDuringLast5Minutes = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 101))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCpuUtilDuringLast5Minutes.setStatus('current')
rlRebootDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 10), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRebootDelay.setStatus('current')
rlGroupManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 11))
rlGroupMngQuery = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("query", 1), ("idle", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlGroupMngQuery.setStatus('current')
rlGroupMngQueryPeriod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 11, 2), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlGroupMngQueryPeriod.setStatus('current')
rlGroupMngLastUpdate = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 11, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlGroupMngLastUpdate.setStatus('current')
rlGroupMngDevicesTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 11, 4), )
if mibBuilder.loadTexts: rlGroupMngDevicesTable.setStatus('current')
rlGroupMngDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 11, 4, 1), ).setIndexNames((0, "DLINK-3100-rndMng", "rlGroupMngDeviceIdType"), (0, "DLINK-3100-rndMng", "rlGroupMngDeviceId"), (0, "DLINK-3100-rndMng", "rlGroupMngSubdevice"))
if mibBuilder.loadTexts: rlGroupMngDeviceEntry.setStatus('current')
rlGroupMngDeviceIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 11, 4, 1, 1), InetAddressType())
if mibBuilder.loadTexts: rlGroupMngDeviceIdType.setStatus('current')
rlGroupMngDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 11, 4, 1, 2), InetAddress())
if mibBuilder.loadTexts: rlGroupMngDeviceId.setStatus('current')
rlGroupMngSubdevice = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 11, 4, 1, 3), Integer32())
if mibBuilder.loadTexts: rlGroupMngSubdevice.setStatus('current')
rlGroupMngDeviceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 11, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlGroupMngDeviceDescription.setStatus('current')
rlGroupMngGroupMngEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 11, 4, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlGroupMngGroupMngEnabled.setStatus('current')
rlGroupMngGroupLLDPDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 11, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlGroupMngGroupLLDPDeviceId.setStatus('current')
rlGroupMngDeviceVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 11, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlGroupMngDeviceVendor.setStatus('current')
rlGroupMngDeviceAdvertisedCachingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 11, 4, 1, 8), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rlGroupMngDeviceAdvertisedCachingTime.setStatus('current')
rlGroupMngDeviceLocationURL = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 11, 4, 1, 9), DisplayString()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rlGroupMngDeviceLocationURL.setStatus('current')
rlGroupMngDeviceLastSeen = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 11, 4, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlGroupMngDeviceLastSeen.setStatus('current')
rlRunningCDBequalToStartupCDB = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRunningCDBequalToStartupCDB.setStatus('current')
mibBuilder.exportSymbols("DLINK-3100-rndMng", rndSysId=rndSysId, rlGroupMngDeviceLocationURL=rlGroupMngDeviceLocationURL, rlGroupMngGroupMngEnabled=rlGroupMngGroupMngEnabled, rlCpuUtilDuringLastMinute=rlCpuUtilDuringLastMinute, rlGroupMngQueryPeriod=rlGroupMngQueryPeriod, rlGroupMngLastUpdate=rlGroupMngLastUpdate, rndAction=rndAction, rlGroupMngDeviceId=rlGroupMngDeviceId, rlSnmpVersionSupported=rlSnmpVersionSupported, rlGroupMngDeviceDescription=rlGroupMngDeviceDescription, rlGroupMngDeviceLastSeen=rlGroupMngDeviceLastSeen, rlGroupMngGroupLLDPDeviceId=rlGroupMngGroupLLDPDeviceId, rlCpuUtilEnable=rlCpuUtilEnable, rlGroupMngDeviceIdType=rlGroupMngDeviceIdType, rlGroupMngDeviceAdvertisedCachingTime=rlGroupMngDeviceAdvertisedCachingTime, rlGroupMngSubdevice=rlGroupMngSubdevice, rlCpuUtilDuringLast5Minutes=rlCpuUtilDuringLast5Minutes, rlRunningCDBequalToStartupCDB=rlRunningCDBequalToStartupCDB, rlGroupMngDevicesTable=rlGroupMngDevicesTable, rlGroupMngQuery=rlGroupMngQuery, rndFileName=rndFileName, rndMng=rndMng, PYSNMP_MODULE_ID=rndMng, rlSnmpMibVersion=rlSnmpMibVersion, rlGroupManagement=rlGroupManagement, rlCpuUtilDuringLastSecond=rlCpuUtilDuringLastSecond, rlRebootDelay=rlRebootDelay, rlGroupMngDeviceEntry=rlGroupMngDeviceEntry, rlGroupMngDeviceVendor=rlGroupMngDeviceVendor)
