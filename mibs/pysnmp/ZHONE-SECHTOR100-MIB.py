#
# PySNMP MIB module ZHONE-SECHTOR100-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZHONE-SECHTOR100-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:41:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Integer32, Gauge32, Counter64, Counter32, Unsigned32, IpAddress, NotificationType, Bits, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, MibIdentifier, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Integer32", "Gauge32", "Counter64", "Counter32", "Unsigned32", "IpAddress", "NotificationType", "Bits", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "MibIdentifier", "TimeTicks")
MacAddress, TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TruthValue", "TextualConvention", "DisplayString")
zhoneSlotIndex, zhoneModules, zhoneShelfIndex, sechtor100 = mibBuilder.importSymbols("Zhone", "zhoneSlotIndex", "zhoneModules", "zhoneShelfIndex", "sechtor100")
ZhoneRowStatus, = mibBuilder.importSymbols("Zhone-TC", "ZhoneRowStatus")
zhoneSechtor100 = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 6, 19))
zhoneSechtor100.setRevisions(('2001-09-28 10:29', '2000-12-27 11:17', '2000-12-21 17:00',))
if mibBuilder.loadTexts: zhoneSechtor100.setLastUpdated('200109281029Z')
if mibBuilder.loadTexts: zhoneSechtor100.setOrganization('Zhone Technologies, Inc')
sechtor100Environment = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 2, 4, 1, 1))
if mibBuilder.loadTexts: sechtor100Environment.setStatus('deprecated')
s100FanOperationalStatus = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("operational", 1), ("fanFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s100FanOperationalStatus.setStatus('deprecated')
s100ThermoAUpperThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(45, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s100ThermoAUpperThreshold.setStatus('deprecated')
s100ThermoBUpperThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(45, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s100ThermoBUpperThreshold.setStatus('deprecated')
s10ThermoALowerThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s10ThermoALowerThreshold.setStatus('deprecated')
s100ThermoBLowerThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s100ThermoBLowerThreshold.setStatus('deprecated')
s100ThermoATemperature = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-55, 125))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s100ThermoATemperature.setStatus('deprecated')
s100ThermoBTemperature = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-55, 125))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s100ThermoBTemperature.setStatus('deprecated')
s100ThermoAOperationalStatus = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("withinOperationalRange", 1), ("overUpperThreshold", 2), ("belowLowerThreshold", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s100ThermoAOperationalStatus.setStatus('deprecated')
s100ThermoBOperationalStatus = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("withinOperationalRange", 1), ("overUpperThreshold", 2), ("belowLowerThreshold", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s100ThermoBOperationalStatus.setStatus('deprecated')
sechtor100Traps = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 2, 4, 1, 2))
if mibBuilder.loadTexts: sechtor100Traps.setStatus('current')
sechtor100TrapsPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 2, 4, 1, 2, 0))
if mibBuilder.loadTexts: sechtor100TrapsPrefix.setStatus('current')
s100FanStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 5504, 2, 4, 1, 2, 0, 1)).setObjects(("ZHONE-SECHTOR100-MIB", "s100FanOperationalStatus"))
if mibBuilder.loadTexts: s100FanStatusChange.setStatus('deprecated')
s100ThermoStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 5504, 2, 4, 1, 2, 0, 2)).setObjects(("ZHONE-SECHTOR100-MIB", "s100ThermoATemperature"), ("ZHONE-SECHTOR100-MIB", "s100ThermoBTemperature"), ("ZHONE-SECHTOR100-MIB", "s100ThermoAOperationalStatus"), ("ZHONE-SECHTOR100-MIB", "s100ThermoBOperationalStatus"))
if mibBuilder.loadTexts: s100ThermoStatusChange.setStatus('deprecated')
sechtor100FanStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 5504, 2, 4, 1, 2, 0, 3)).setObjects(("ZHONE-SECHTOR100-MIB", "sechtor100FanOperationalStatus"))
if mibBuilder.loadTexts: sechtor100FanStatusChange.setStatus('current')
sechtor100ThermoStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 5504, 2, 4, 1, 2, 0, 4)).setObjects(("ZHONE-SECHTOR100-MIB", "sechtor100ThermoATemperature"), ("ZHONE-SECHTOR100-MIB", "sechtor100ThermoBTemperature"), ("ZHONE-SECHTOR100-MIB", "sechtor100ThermoAOperationalStatus"), ("ZHONE-SECHTOR100-MIB", "sechtor100ThermoBOperationalStatus"))
if mibBuilder.loadTexts: sechtor100ThermoStatusChange.setStatus('current')
sechtor100ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 4, 1, 3), )
if mibBuilder.loadTexts: sechtor100ConfigTable.setStatus('current')
sechtor100ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 4, 1, 3, 1), ).setIndexNames((0, "Zhone", "zhoneShelfIndex"), (0, "Zhone", "zhoneSlotIndex"))
if mibBuilder.loadTexts: sechtor100ConfigEntry.setStatus('current')
sechtor100PeerMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 4, 1, 3, 1, 1), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sechtor100PeerMacAddress.setStatus('current')
sechtor100RedundancyEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 4, 1, 3, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sechtor100RedundancyEnable.setStatus('current')
sechtor100FanOperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 4, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("operational", 1), ("fanFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sechtor100FanOperationalStatus.setStatus('current')
sechtor100ThermoAUpperThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 4, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(45, 80)).clone(65)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sechtor100ThermoAUpperThreshold.setStatus('current')
sechtor100ThermoBUpperThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 4, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(45, 80)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sechtor100ThermoBUpperThreshold.setStatus('current')
sechtor100ThermoALowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 4, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 5)).clone(-5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sechtor100ThermoALowerThreshold.setStatus('current')
sechtor100ThermoBLowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 4, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 5)).clone(-5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sechtor100ThermoBLowerThreshold.setStatus('current')
sechtor100ThermoATemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 4, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-55, 125))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sechtor100ThermoATemperature.setStatus('current')
sechtor100ThermoBTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 4, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-55, 125))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sechtor100ThermoBTemperature.setStatus('current')
sechtor100ThermoAOperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 4, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("withinOperationalRange", 1), ("overUpperThreshold", 2), ("belowLowerThreshold", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sechtor100ThermoAOperationalStatus.setStatus('current')
sechtor100ThermoBOperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 4, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("withinOperationalRange", 1), ("overUpperThreshold", 2), ("belowLowerThreshold", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sechtor100ThermoBOperationalStatus.setStatus('current')
sechtor100RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 4, 1, 3, 1, 12), ZhoneRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sechtor100RowStatus.setStatus('current')
mibBuilder.exportSymbols("ZHONE-SECHTOR100-MIB", sechtor100ConfigTable=sechtor100ConfigTable, s100ThermoBUpperThreshold=s100ThermoBUpperThreshold, sechtor100ThermoATemperature=sechtor100ThermoATemperature, sechtor100ThermoAUpperThreshold=sechtor100ThermoAUpperThreshold, s100ThermoBTemperature=s100ThermoBTemperature, s100ThermoBLowerThreshold=s100ThermoBLowerThreshold, PYSNMP_MODULE_ID=zhoneSechtor100, sechtor100Traps=sechtor100Traps, sechtor100ConfigEntry=sechtor100ConfigEntry, sechtor100FanOperationalStatus=sechtor100FanOperationalStatus, sechtor100ThermoALowerThreshold=sechtor100ThermoALowerThreshold, sechtor100Environment=sechtor100Environment, sechtor100ThermoStatusChange=sechtor100ThermoStatusChange, sechtor100RowStatus=sechtor100RowStatus, sechtor100ThermoBLowerThreshold=sechtor100ThermoBLowerThreshold, s100FanOperationalStatus=s100FanOperationalStatus, zhoneSechtor100=zhoneSechtor100, sechtor100PeerMacAddress=sechtor100PeerMacAddress, sechtor100ThermoBOperationalStatus=sechtor100ThermoBOperationalStatus, s100ThermoAOperationalStatus=s100ThermoAOperationalStatus, sechtor100ThermoAOperationalStatus=sechtor100ThermoAOperationalStatus, sechtor100FanStatusChange=sechtor100FanStatusChange, sechtor100RedundancyEnable=sechtor100RedundancyEnable, s100ThermoStatusChange=s100ThermoStatusChange, s100ThermoBOperationalStatus=s100ThermoBOperationalStatus, s10ThermoALowerThreshold=s10ThermoALowerThreshold, sechtor100ThermoBTemperature=sechtor100ThermoBTemperature, s100ThermoATemperature=s100ThermoATemperature, sechtor100ThermoBUpperThreshold=sechtor100ThermoBUpperThreshold, s100FanStatusChange=s100FanStatusChange, sechtor100TrapsPrefix=sechtor100TrapsPrefix, s100ThermoAUpperThreshold=s100ThermoAUpperThreshold)
