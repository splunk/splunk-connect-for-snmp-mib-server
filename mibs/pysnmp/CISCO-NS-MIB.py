#
# PySNMP MIB module CISCO-NS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-NS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:37:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
FcNameIdOrZero, FcAddressId, FcClassOfServices, FcNameId = mibBuilder.importSymbols("CISCO-ST-TC", "FcNameIdOrZero", "FcAddressId", "FcClassOfServices", "FcNameId")
notifyVsanIndex, vsanIndex = mibBuilder.importSymbols("CISCO-VSAN-MIB", "notifyVsanIndex", "vsanIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Integer32, Counter64, ModuleIdentity, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ObjectIdentity, Gauge32, IpAddress, Counter32, MibIdentifier, iso, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter64", "ModuleIdentity", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "ObjectIdentity", "Gauge32", "IpAddress", "Counter32", "MibIdentifier", "iso", "Bits")
TimeStamp, TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TruthValue", "DisplayString", "TextualConvention")
ciscoNsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 293))
ciscoNsMIB.setRevisions(('2004-08-30 00:00', '2004-02-19 00:00', '2003-03-06 00:00', '2002-10-03 00:00',))
if mibBuilder.loadTexts: ciscoNsMIB.setLastUpdated('200408300000Z')
if mibBuilder.loadTexts: ciscoNsMIB.setOrganization('Cisco Systems Inc.')
ciscoNameServerMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 293, 1))
fcNameServerMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 293, 2))
fcNameServerConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 1))
fcNameServerStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 2))
fcNameServerInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 3))
fcNameServerNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 4))
fcNameServerNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 4, 0))
class FcGs3RejectReasonCode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("none", 1), ("invalidCmdCode", 2), ("invalidVerLevel", 3), ("logicalError", 4), ("invalidIUSize", 5), ("logicalBusy", 6), ("protocolError", 7), ("unableToPerformCmdReq", 8), ("cmdNotSupported", 9), ("vendorError", 10))

class FcNameServerRejReasonExpl(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))
    namedValues = NamedValues(("noAdditionalExplanation", 1), ("portIdentifierNotRegistered", 2), ("portNameNotRegistered", 3), ("nodeNameNotRegistered", 4), ("classOfServiceNotRegistered", 5), ("nodeIpAddressNotRegistered", 6), ("ipaNotRegistered", 7), ("fc4TypeNotRegistered", 8), ("symbolicPortNameNotRegistered", 9), ("symbolicNodeNameNotRegistered", 10), ("portTypeNotRegistered", 11), ("portIpAddressNotRegistered", 12), ("fabricPortNameNotRegistered", 13), ("hardAddressNotRegistered", 14), ("fc4DescriptorNotRegistered", 15), ("fc4FeaturesNotRegistered", 16), ("accessDenied", 17), ("unacceptablePortIdentifier", 18), ("databaseEmpty", 19), ("noObjectRegInSpecifiedScope", 20))

fcNameServerProxyPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 1, 1), )
if mibBuilder.loadTexts: fcNameServerProxyPortTable.setStatus('current')
fcNameServerProxyPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanIndex"))
if mibBuilder.loadTexts: fcNameServerProxyPortEntry.setStatus('current')
fcNameServerProxyPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 1, 1, 1, 1), FcNameIdOrZero().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcNameServerProxyPortName.setStatus('current')
fcNameServerTableLastChange = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcNameServerTableLastChange.setStatus('current')
fcNameServerNumRows = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcNameServerNumRows.setStatus('current')
fcNameServerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 1, 4), )
if mibBuilder.loadTexts: fcNameServerTable.setStatus('current')
fcNameServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 1, 4, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanIndex"), (0, "CISCO-NS-MIB", "fcNameServerPortIdentifier"))
if mibBuilder.loadTexts: fcNameServerEntry.setStatus('current')
fcNameServerPortIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 1, 4, 1, 1), FcAddressId())
if mibBuilder.loadTexts: fcNameServerPortIdentifier.setStatus('current')
fcNameServerPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 1, 4, 1, 2), FcNameId().clone(hexValue="0000000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcNameServerPortName.setStatus('current')
fcNameServerNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 1, 4, 1, 3), FcNameId().clone(hexValue="0000000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcNameServerNodeName.setStatus('current')
fcNameServerClassOfSvc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 1, 4, 1, 4), FcClassOfServices()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcNameServerClassOfSvc.setStatus('current')
fcNameServerNodeIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 1, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcNameServerNodeIpAddress.setStatus('current')
fcNameServerProcAssoc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 1, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcNameServerProcAssoc.setStatus('current')
fcNameServerFC4Type = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 1, 4, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcNameServerFC4Type.setStatus('current')
fcNameServerPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("nPort", 2), ("nlPort", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcNameServerPortType.setStatus('current')
fcNameServerPortIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 1, 4, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcNameServerPortIpAddress.setStatus('current')
fcNameServerFabricPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 1, 4, 1, 10), FcNameId().clone(hexValue="0000000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcNameServerFabricPortName.setStatus('current')
fcNameServerHardAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 1, 4, 1, 11), FcAddressId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcNameServerHardAddress.setStatus('current')
fcNameServerSymbolicPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 1, 4, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcNameServerSymbolicPortName.setStatus('current')
fcNameServerSymbolicNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 1, 4, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcNameServerSymbolicNodeName.setStatus('current')
fcNameServerFC4Features = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 1, 4, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcNameServerFC4Features.setStatus('current')
fcNameServerPortFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 1, 4, 1, 15), Bits().clone(namedValues=NamedValues(("trapPort", 0), ("vep", 1), ("volOwner", 2), ("ipfcPort", 3), ("intPort", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcNameServerPortFunction.setStatus('deprecated')
fcNameServerPermanentPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 1, 4, 1, 16), FcNameId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcNameServerPermanentPortName.setStatus('current')
fcNameServerTotalRejects = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcNameServerTotalRejects.setStatus('current')
fcNameServerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 2, 2), )
if mibBuilder.loadTexts: fcNameServerStatsTable.setStatus('current')
fcNameServerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanIndex"))
if mibBuilder.loadTexts: fcNameServerStatsEntry.setStatus('current')
fcNameServerInGetReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 2, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcNameServerInGetReqs.setStatus('current')
fcNameServerOutGetReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcNameServerOutGetReqs.setStatus('current')
fcNameServerInRegReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcNameServerInRegReqs.setStatus('current')
fcNameServerInDeRegReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcNameServerInDeRegReqs.setStatus('current')
fcNameServerInRscns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcNameServerInRscns.setStatus('current')
fcNameServerOutRscns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcNameServerOutRscns.setStatus('current')
fcNameServerRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcNameServerRejects.setStatus('current')
fcNameServerRejectReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 3, 1), FcGs3RejectReasonCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcNameServerRejectReasonCode.setStatus('current')
fcNameServerRejReasonCodeExp = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 3, 2), FcNameServerRejReasonExpl()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcNameServerRejReasonCodeExp.setStatus('current')
fcNameServerRejReqNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcNameServerRejReqNotifyEnable.setStatus('current')
fcNameServerRejectRegNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 4, 0, 1)).setObjects(("CISCO-NS-MIB", "fcNameServerPortName"), ("CISCO-NS-MIB", "fcNameServerRejectReasonCode"), ("CISCO-NS-MIB", "fcNameServerRejReasonCodeExp"))
if mibBuilder.loadTexts: fcNameServerRejectRegNotify.setStatus('current')
fcNameServerDatabaseFull = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 4, 0, 2)).setObjects(("CISCO-VSAN-MIB", "notifyVsanIndex"))
if mibBuilder.loadTexts: fcNameServerDatabaseFull.setStatus('current')
fcNameServerEntryAdd = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 4, 0, 3)).setObjects(("CISCO-NS-MIB", "fcNameServerPortName"), ("CISCO-NS-MIB", "fcNameServerPortType"))
if mibBuilder.loadTexts: fcNameServerEntryAdd.setStatus('current')
fcNameServerEntryDelete = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 293, 1, 4, 0, 4)).setObjects(("CISCO-NS-MIB", "fcNameServerPortName"), ("CISCO-NS-MIB", "fcNameServerPortType"))
if mibBuilder.loadTexts: fcNameServerEntryDelete.setStatus('current')
fcNameServerMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 293, 2, 1))
fcNameServerMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 293, 2, 2))
fcNameServerMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 293, 2, 1, 1)).setObjects(("CISCO-NS-MIB", "fcNameServerDBGroup"), ("CISCO-NS-MIB", "fcNameServerStatsGroup"), ("CISCO-NS-MIB", "fcNameServerNotifyControlGroup"), ("CISCO-NS-MIB", "fcNameServerNotifyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcNameServerMIBCompliance = fcNameServerMIBCompliance.setStatus('deprecated')
fcNameServerMIBCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 293, 2, 1, 2)).setObjects(("CISCO-NS-MIB", "fcNameServerDBGroup1"), ("CISCO-NS-MIB", "fcNameServerStatsGroup"), ("CISCO-NS-MIB", "fcNameServerNotifyControlGroup"), ("CISCO-NS-MIB", "fcNameServerNotifyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcNameServerMIBCompliance1 = fcNameServerMIBCompliance1.setStatus('deprecated')
fcNameServerMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 293, 2, 1, 3)).setObjects(("CISCO-NS-MIB", "fcNameServerDBGroup2"), ("CISCO-NS-MIB", "fcNameServerStatsGroup"), ("CISCO-NS-MIB", "fcNameServerNotifyControlGroup"), ("CISCO-NS-MIB", "fcNameServerNotifyGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcNameServerMIBCompliance2 = fcNameServerMIBCompliance2.setStatus('deprecated')
fcNameServerMIBCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 293, 2, 1, 4)).setObjects(("CISCO-NS-MIB", "fcNameServerDBGroup3"), ("CISCO-NS-MIB", "fcNameServerStatsGroup"), ("CISCO-NS-MIB", "fcNameServerNotifyControlGroup"), ("CISCO-NS-MIB", "fcNameServerNotifyGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcNameServerMIBCompliance3 = fcNameServerMIBCompliance3.setStatus('current')
fcNameServerDBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 293, 2, 2, 1)).setObjects(("CISCO-NS-MIB", "fcNameServerProxyPortName"), ("CISCO-NS-MIB", "fcNameServerNumRows"), ("CISCO-NS-MIB", "fcNameServerTableLastChange"), ("CISCO-NS-MIB", "fcNameServerPortName"), ("CISCO-NS-MIB", "fcNameServerNodeName"), ("CISCO-NS-MIB", "fcNameServerClassOfSvc"), ("CISCO-NS-MIB", "fcNameServerNodeIpAddress"), ("CISCO-NS-MIB", "fcNameServerProcAssoc"), ("CISCO-NS-MIB", "fcNameServerFC4Type"), ("CISCO-NS-MIB", "fcNameServerPortType"), ("CISCO-NS-MIB", "fcNameServerPortIpAddress"), ("CISCO-NS-MIB", "fcNameServerFabricPortName"), ("CISCO-NS-MIB", "fcNameServerHardAddress"), ("CISCO-NS-MIB", "fcNameServerSymbolicPortName"), ("CISCO-NS-MIB", "fcNameServerSymbolicNodeName"), ("CISCO-NS-MIB", "fcNameServerFC4Features"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcNameServerDBGroup = fcNameServerDBGroup.setStatus('deprecated')
fcNameServerStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 293, 2, 2, 2)).setObjects(("CISCO-NS-MIB", "fcNameServerTotalRejects"), ("CISCO-NS-MIB", "fcNameServerInGetReqs"), ("CISCO-NS-MIB", "fcNameServerOutGetReqs"), ("CISCO-NS-MIB", "fcNameServerInRegReqs"), ("CISCO-NS-MIB", "fcNameServerInDeRegReqs"), ("CISCO-NS-MIB", "fcNameServerInRscns"), ("CISCO-NS-MIB", "fcNameServerOutRscns"), ("CISCO-NS-MIB", "fcNameServerRejects"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcNameServerStatsGroup = fcNameServerStatsGroup.setStatus('current')
fcNameServerNotifyControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 293, 2, 2, 3)).setObjects(("CISCO-NS-MIB", "fcNameServerRejectReasonCode"), ("CISCO-NS-MIB", "fcNameServerRejReasonCodeExp"), ("CISCO-NS-MIB", "fcNameServerRejReqNotifyEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcNameServerNotifyControlGroup = fcNameServerNotifyControlGroup.setStatus('current')
fcNameServerNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 293, 2, 2, 4)).setObjects(("CISCO-NS-MIB", "fcNameServerRejectRegNotify"), ("CISCO-NS-MIB", "fcNameServerDatabaseFull"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcNameServerNotifyGroup = fcNameServerNotifyGroup.setStatus('deprecated')
fcNameServerDBGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 293, 2, 2, 5)).setObjects(("CISCO-NS-MIB", "fcNameServerProxyPortName"), ("CISCO-NS-MIB", "fcNameServerNumRows"), ("CISCO-NS-MIB", "fcNameServerTableLastChange"), ("CISCO-NS-MIB", "fcNameServerPortName"), ("CISCO-NS-MIB", "fcNameServerNodeName"), ("CISCO-NS-MIB", "fcNameServerClassOfSvc"), ("CISCO-NS-MIB", "fcNameServerNodeIpAddress"), ("CISCO-NS-MIB", "fcNameServerProcAssoc"), ("CISCO-NS-MIB", "fcNameServerFC4Type"), ("CISCO-NS-MIB", "fcNameServerPortType"), ("CISCO-NS-MIB", "fcNameServerPortIpAddress"), ("CISCO-NS-MIB", "fcNameServerFabricPortName"), ("CISCO-NS-MIB", "fcNameServerHardAddress"), ("CISCO-NS-MIB", "fcNameServerSymbolicPortName"), ("CISCO-NS-MIB", "fcNameServerSymbolicNodeName"), ("CISCO-NS-MIB", "fcNameServerFC4Features"), ("CISCO-NS-MIB", "fcNameServerPortFunction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcNameServerDBGroup1 = fcNameServerDBGroup1.setStatus('deprecated')
fcNameServerNotifyGroupRev1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 293, 2, 2, 6)).setObjects(("CISCO-NS-MIB", "fcNameServerRejectRegNotify"), ("CISCO-NS-MIB", "fcNameServerDatabaseFull"), ("CISCO-NS-MIB", "fcNameServerEntryAdd"), ("CISCO-NS-MIB", "fcNameServerEntryDelete"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcNameServerNotifyGroupRev1 = fcNameServerNotifyGroupRev1.setStatus('current')
fcNameServerDBGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 293, 2, 2, 7)).setObjects(("CISCO-NS-MIB", "fcNameServerProxyPortName"), ("CISCO-NS-MIB", "fcNameServerNumRows"), ("CISCO-NS-MIB", "fcNameServerTableLastChange"), ("CISCO-NS-MIB", "fcNameServerPortName"), ("CISCO-NS-MIB", "fcNameServerNodeName"), ("CISCO-NS-MIB", "fcNameServerClassOfSvc"), ("CISCO-NS-MIB", "fcNameServerNodeIpAddress"), ("CISCO-NS-MIB", "fcNameServerProcAssoc"), ("CISCO-NS-MIB", "fcNameServerFC4Type"), ("CISCO-NS-MIB", "fcNameServerPortType"), ("CISCO-NS-MIB", "fcNameServerPortIpAddress"), ("CISCO-NS-MIB", "fcNameServerFabricPortName"), ("CISCO-NS-MIB", "fcNameServerHardAddress"), ("CISCO-NS-MIB", "fcNameServerSymbolicPortName"), ("CISCO-NS-MIB", "fcNameServerSymbolicNodeName"), ("CISCO-NS-MIB", "fcNameServerFC4Features"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcNameServerDBGroup2 = fcNameServerDBGroup2.setStatus('current')
fcNameServerDBGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 293, 2, 2, 8)).setObjects(("CISCO-NS-MIB", "fcNameServerProxyPortName"), ("CISCO-NS-MIB", "fcNameServerNumRows"), ("CISCO-NS-MIB", "fcNameServerTableLastChange"), ("CISCO-NS-MIB", "fcNameServerPortName"), ("CISCO-NS-MIB", "fcNameServerNodeName"), ("CISCO-NS-MIB", "fcNameServerClassOfSvc"), ("CISCO-NS-MIB", "fcNameServerNodeIpAddress"), ("CISCO-NS-MIB", "fcNameServerProcAssoc"), ("CISCO-NS-MIB", "fcNameServerFC4Type"), ("CISCO-NS-MIB", "fcNameServerPortType"), ("CISCO-NS-MIB", "fcNameServerPortIpAddress"), ("CISCO-NS-MIB", "fcNameServerFabricPortName"), ("CISCO-NS-MIB", "fcNameServerHardAddress"), ("CISCO-NS-MIB", "fcNameServerSymbolicPortName"), ("CISCO-NS-MIB", "fcNameServerSymbolicNodeName"), ("CISCO-NS-MIB", "fcNameServerFC4Features"), ("CISCO-NS-MIB", "fcNameServerPermanentPortName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcNameServerDBGroup3 = fcNameServerDBGroup3.setStatus('current')
mibBuilder.exportSymbols("CISCO-NS-MIB", fcNameServerPortName=fcNameServerPortName, fcNameServerInGetReqs=fcNameServerInGetReqs, fcNameServerInformation=fcNameServerInformation, fcNameServerRejectRegNotify=fcNameServerRejectRegNotify, fcNameServerFC4Features=fcNameServerFC4Features, fcNameServerNotifications=fcNameServerNotifications, fcNameServerDatabaseFull=fcNameServerDatabaseFull, fcNameServerEntry=fcNameServerEntry, fcNameServerDBGroup=fcNameServerDBGroup, fcNameServerProxyPortEntry=fcNameServerProxyPortEntry, fcNameServerInDeRegReqs=fcNameServerInDeRegReqs, fcNameServerFC4Type=fcNameServerFC4Type, fcNameServerClassOfSvc=fcNameServerClassOfSvc, FcGs3RejectReasonCode=FcGs3RejectReasonCode, fcNameServerPortIpAddress=fcNameServerPortIpAddress, fcNameServerSymbolicNodeName=fcNameServerSymbolicNodeName, fcNameServerRejectReasonCode=fcNameServerRejectReasonCode, fcNameServerMIBGroups=fcNameServerMIBGroups, fcNameServerDBGroup2=fcNameServerDBGroup2, fcNameServerTotalRejects=fcNameServerTotalRejects, fcNameServerNumRows=fcNameServerNumRows, ciscoNsMIB=ciscoNsMIB, fcNameServerTableLastChange=fcNameServerTableLastChange, fcNameServerPortType=fcNameServerPortType, PYSNMP_MODULE_ID=ciscoNsMIB, fcNameServerHardAddress=fcNameServerHardAddress, fcNameServerPortFunction=fcNameServerPortFunction, fcNameServerPermanentPortName=fcNameServerPermanentPortName, fcNameServerEntryAdd=fcNameServerEntryAdd, fcNameServerDBGroup3=fcNameServerDBGroup3, fcNameServerStatsGroup=fcNameServerStatsGroup, fcNameServerNotifyControlGroup=fcNameServerNotifyControlGroup, fcNameServerNodeIpAddress=fcNameServerNodeIpAddress, FcNameServerRejReasonExpl=FcNameServerRejReasonExpl, fcNameServerPortIdentifier=fcNameServerPortIdentifier, fcNameServerNodeName=fcNameServerNodeName, fcNameServerMIBCompliances=fcNameServerMIBCompliances, fcNameServerMIBCompliance=fcNameServerMIBCompliance, fcNameServerRejReasonCodeExp=fcNameServerRejReasonCodeExp, fcNameServerMIBConformance=fcNameServerMIBConformance, fcNameServerOutGetReqs=fcNameServerOutGetReqs, fcNameServerStatsTable=fcNameServerStatsTable, fcNameServerMIBCompliance3=fcNameServerMIBCompliance3, fcNameServerDBGroup1=fcNameServerDBGroup1, fcNameServerNotifyGroupRev1=fcNameServerNotifyGroupRev1, fcNameServerInRscns=fcNameServerInRscns, fcNameServerProcAssoc=fcNameServerProcAssoc, fcNameServerTable=fcNameServerTable, fcNameServerSymbolicPortName=fcNameServerSymbolicPortName, fcNameServerRejects=fcNameServerRejects, fcNameServerMIBCompliance1=fcNameServerMIBCompliance1, fcNameServerInRegReqs=fcNameServerInRegReqs, ciscoNameServerMIBObjects=ciscoNameServerMIBObjects, fcNameServerConfiguration=fcNameServerConfiguration, fcNameServerProxyPortName=fcNameServerProxyPortName, fcNameServerNotification=fcNameServerNotification, fcNameServerOutRscns=fcNameServerOutRscns, fcNameServerProxyPortTable=fcNameServerProxyPortTable, fcNameServerRejReqNotifyEnable=fcNameServerRejReqNotifyEnable, fcNameServerMIBCompliance2=fcNameServerMIBCompliance2, fcNameServerStats=fcNameServerStats, fcNameServerStatsEntry=fcNameServerStatsEntry, fcNameServerEntryDelete=fcNameServerEntryDelete, fcNameServerNotifyGroup=fcNameServerNotifyGroup, fcNameServerFabricPortName=fcNameServerFabricPortName)
