#
# PySNMP MIB module READYNAS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/READYNAS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:46:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, NotificationType, MibIdentifier, ModuleIdentity, ObjectIdentity, enterprises, NotificationType, Integer32, Counter64, Gauge32, IpAddress, TimeTicks, iso, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "NotificationType", "MibIdentifier", "ModuleIdentity", "ObjectIdentity", "enterprises", "NotificationType", "Integer32", "Counter64", "Gauge32", "IpAddress", "TimeTicks", "iso", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
netgear = MibIdentifier((1, 3, 6, 1, 4, 1, 4526))
productID = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 100))
readyNAS = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 100, 12))
nasManager = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 18))
nasMgrSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nasMgrSoftwareVersion.setStatus('current')
diskTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 18, 3), )
if mibBuilder.loadTexts: diskTable.setStatus('mandatory')
diskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 18, 3, 1), ).setIndexNames((0, "READYNAS-MIB", "diskNumber"))
if mibBuilder.loadTexts: diskEntry.setStatus('mandatory')
diskNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 18, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskNumber.setStatus('mandatory')
diskChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 18, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskChannel.setStatus('mandatory')
diskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 18, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskModel.setStatus('mandatory')
diskState = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 18, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskState.setStatus('mandatory')
diskTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 18, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskTemperature.setStatus('mandatory')
fanTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 18, 4), )
if mibBuilder.loadTexts: fanTable.setStatus('current')
fanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 18, 4, 1), ).setIndexNames((0, "READYNAS-MIB", "fanNumber"))
if mibBuilder.loadTexts: fanEntry.setStatus('current')
fanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 18, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanNumber.setStatus('mandatory')
fanRPM = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 18, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanRPM.setStatus('mandatory')
temperatureTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 18, 5), )
if mibBuilder.loadTexts: temperatureTable.setStatus('mandatory')
temperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 18, 5, 1), ).setIndexNames((0, "READYNAS-MIB", "temperatureNumber"))
if mibBuilder.loadTexts: temperatureEntry.setStatus('mandatory')
temperatureNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 18, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureNumber.setStatus('mandatory')
temperatureValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 18, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureValue.setStatus('mandatory')
temperatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 18, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureStatus.setStatus('mandatory')
volumeTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 18, 7), )
if mibBuilder.loadTexts: volumeTable.setStatus('mandatory')
volumeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 18, 7, 1), ).setIndexNames((0, "READYNAS-MIB", "volumeNumber"))
if mibBuilder.loadTexts: volumeEntry.setStatus('mandatory')
volumeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 18, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeNumber.setStatus('mandatory')
volumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 18, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeName.setStatus('mandatory')
volumeRAIDLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 18, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeRAIDLevel.setStatus('mandatory')
volumeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 18, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeStatus.setStatus('mandatory')
volumeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 18, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeSize.setStatus('mandatory')
volumeFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 18, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeFreeSpace.setStatus('mandatory')
aryMgrEvts = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 18, 200))
controllerNameEv = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 200, 201), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerNameEv.setStatus('mandatory')
channelNumberEv = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 200, 202), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelNumberEv.setStatus('mandatory')
targetIDEv = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 200, 203), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: targetIDEv.setStatus('mandatory')
virtualDiskNameEv = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 200, 204), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualDiskNameEv.setStatus('mandatory')
arrayDiskNameEv = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 200, 205), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayDiskNameEv.setStatus('mandatory')
oldVDConfigEv = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 200, 206), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oldVDConfigEv.setStatus('mandatory')
newVDConfigEv = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 200, 207), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: newVDConfigEv.setStatus('mandatory')
enclosureNumberEv = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 200, 208), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureNumberEv.setStatus('mandatory')
unitNumberEv = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 200, 209), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitNumberEv.setStatus('mandatory')
enclosureNameEv = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 200, 210), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclosureNameEv.setStatus('mandatory')
unitNameEv = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 200, 211), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitNameEv.setStatus('mandatory')
timeEv = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 200, 212), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeEv.setStatus('mandatory')
volumeNameEv = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 200, 213), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeNameEv.setStatus('mandatory')
fanFailureMesg = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 400), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanFailureMesg.setStatus('current')
tempFailureMesg = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 401), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempFailureMesg.setStatus('current')
powerFailureMesg = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 402), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerFailureMesg.setStatus('current')
raidMesg = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 403), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidMesg.setStatus('current')
snapshotMesg = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 404), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snapshotMesg.setStatus('current')
upsMesg = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 405), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsMesg.setStatus('current')
sataMesg = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 406), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sataMesg.setStatus('current')
volumeMesg = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 407), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: volumeMesg.setStatus('current')
diskTempWarningMesg = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 408), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskTempWarningMesg.setStatus('current')
backupMesg = MibScalar((1, 3, 6, 1, 4, 1, 4526, 18, 409), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backupMesg.setStatus('current')
nasTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 18, 300))
fanFailure = NotificationType((1, 3, 6, 1, 4, 1, 4526, 18, 300) + (0,10)).setObjects(("READYNAS-MIB", "fanFailureMesg"))
tempFailure = NotificationType((1, 3, 6, 1, 4, 1, 4526, 18, 300) + (0,20)).setObjects(("READYNAS-MIB", "tempFailureMesg"))
powerVoltage = NotificationType((1, 3, 6, 1, 4, 1, 4526, 18, 300) + (0,30)).setObjects(("READYNAS-MIB", "powerFailureMesg"))
raidEventNotice = NotificationType((1, 3, 6, 1, 4, 1, 4526, 18, 300) + (0,40)).setObjects(("READYNAS-MIB", "raidMesg"))
snapshotEventNotice = NotificationType((1, 3, 6, 1, 4, 1, 4526, 18, 300) + (0,50)).setObjects(("READYNAS-MIB", "snapshotMesg"))
hotplugDiskNotice = NotificationType((1, 3, 6, 1, 4, 1, 4526, 18, 300) + (0,60)).setObjects(("READYNAS-MIB", "sataMesg"))
upsEventNotice = NotificationType((1, 3, 6, 1, 4, 1, 4526, 18, 300) + (0,70)).setObjects(("READYNAS-MIB", "upsMesg"))
volumeNotice = NotificationType((1, 3, 6, 1, 4, 1, 4526, 18, 300) + (0,80)).setObjects(("READYNAS-MIB", "volumeMesg"))
diskTempWarning = NotificationType((1, 3, 6, 1, 4, 1, 4526, 18, 300) + (0,90)).setObjects(("READYNAS-MIB", "volumeMesg"))
backupNotice = NotificationType((1, 3, 6, 1, 4, 1, 4526, 18, 300) + (0,100)).setObjects(("READYNAS-MIB", "backupMesg"))
mibBuilder.exportSymbols("READYNAS-MIB", aryMgrEvts=aryMgrEvts, volumeMesg=volumeMesg, temperatureNumber=temperatureNumber, tempFailure=tempFailure, upsEventNotice=upsEventNotice, backupNotice=backupNotice, fanNumber=fanNumber, productID=productID, volumeName=volumeName, volumeFreeSpace=volumeFreeSpace, hotplugDiskNotice=hotplugDiskNotice, readyNAS=readyNAS, diskModel=diskModel, diskTempWarning=diskTempWarning, temperatureEntry=temperatureEntry, upsMesg=upsMesg, newVDConfigEv=newVDConfigEv, fanFailureMesg=fanFailureMesg, diskEntry=diskEntry, enclosureNumberEv=enclosureNumberEv, volumeRAIDLevel=volumeRAIDLevel, volumeNotice=volumeNotice, temperatureTable=temperatureTable, unitNameEv=unitNameEv, backupMesg=backupMesg, controllerNameEv=controllerNameEv, diskNumber=diskNumber, netgear=netgear, temperatureValue=temperatureValue, raidEventNotice=raidEventNotice, virtualDiskNameEv=virtualDiskNameEv, volumeNameEv=volumeNameEv, fanRPM=fanRPM, unitNumberEv=unitNumberEv, channelNumberEv=channelNumberEv, targetIDEv=targetIDEv, timeEv=timeEv, volumeTable=volumeTable, tempFailureMesg=tempFailureMesg, sataMesg=sataMesg, fanFailure=fanFailure, fanEntry=fanEntry, enclosureNameEv=enclosureNameEv, snapshotMesg=snapshotMesg, snapshotEventNotice=snapshotEventNotice, volumeNumber=volumeNumber, diskTempWarningMesg=diskTempWarningMesg, diskChannel=diskChannel, diskTable=diskTable, nasManager=nasManager, volumeSize=volumeSize, powerVoltage=powerVoltage, diskTemperature=diskTemperature, nasMgrSoftwareVersion=nasMgrSoftwareVersion, volumeStatus=volumeStatus, oldVDConfigEv=oldVDConfigEv, temperatureStatus=temperatureStatus, diskState=diskState, volumeEntry=volumeEntry, fanTable=fanTable, powerFailureMesg=powerFailureMesg, arrayDiskNameEv=arrayDiskNameEv, raidMesg=raidMesg, nasTraps=nasTraps)
