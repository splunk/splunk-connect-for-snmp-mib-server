#
# PySNMP MIB module A3COM-SWITCHING-SYSTEMS-TOKEN-RING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-SWITCHING-SYSTEMS-TOKEN-RING-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 16:53:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, enterprises, Gauge32, Unsigned32, MibIdentifier, Bits, iso, Counter32, IpAddress, ModuleIdentity, ObjectIdentity, Integer32, NotificationType, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "enterprises", "Gauge32", "Unsigned32", "MibIdentifier", "Bits", "iso", "Counter32", "IpAddress", "ModuleIdentity", "ObjectIdentity", "Integer32", "NotificationType", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
a3Com = MibIdentifier((1, 3, 6, 1, 4, 1, 43))
switchingSystemsMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29))
a3ComSwitchingSystemsMib = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4))
a3ComSysTokenRingPort = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 13))
a3ComSysTokenRingPortCount = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortCount.setStatus('mandatory')
a3ComSysTokenRingPortTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2), )
if mibBuilder.loadTexts: a3ComSysTokenRingPortTable.setStatus('mandatory')
a3ComSysTokenRingPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-TOKEN-RING-MIB", "a3ComSysTokenRingPortIndex"))
if mibBuilder.loadTexts: a3ComSysTokenRingPortEntry.setStatus('mandatory')
a3ComSysTokenRingPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortIndex.setStatus('mandatory')
a3ComSysTokenRingPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortIfIndex.setStatus('mandatory')
a3ComSysTokenRingPortLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysTokenRingPortLabel.setStatus('mandatory')
a3ComSysTokenRingPortInsertStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inserted", 1), ("deinserted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortInsertStatus.setStatus('mandatory')
a3ComSysTokenRingPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rj45", 1), ("other", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortType.setStatus('mandatory')
a3ComSysTokenRingPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("station", 1), ("lobe", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysTokenRingPortMode.setStatus('mandatory')
a3ComSysTokenRingPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fourMegabit", 1), ("sixteenMegabit", 2), ("sixteenMegabitETR", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysTokenRingPortSpeed.setStatus('mandatory')
a3ComSysTokenRingPortLineErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortLineErrors.setStatus('mandatory')
a3ComSysTokenRingPortBurstErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortBurstErrors.setStatus('mandatory')
a3ComSysTokenRingPortACErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortACErrors.setStatus('mandatory')
a3ComSysTokenRingPortAbortTransErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortAbortTransErrors.setStatus('mandatory')
a3ComSysTokenRingPortInternalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortInternalErrors.setStatus('mandatory')
a3ComSysTokenRingPortLostFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortLostFrameErrors.setStatus('mandatory')
a3ComSysTokenRingPortReceiveCongestionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortReceiveCongestionErrors.setStatus('mandatory')
a3ComSysTokenRingPortFrameCopiedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortFrameCopiedErrors.setStatus('mandatory')
a3ComSysTokenRingPortTokenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortTokenErrors.setStatus('mandatory')
a3ComSysTokenRingPortSoftErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortSoftErrors.setStatus('mandatory')
a3ComSysTokenRingPortHardErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortHardErrors.setStatus('mandatory')
a3ComSysTokenRingPortTransmitBeacons = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortTransmitBeacons.setStatus('mandatory')
a3ComSysTokenRingPortLobeWires = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortLobeWires.setStatus('mandatory')
a3ComSysTokenRingPortRemoves = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortRemoves.setStatus('mandatory')
a3ComSysTokenRingPortSingles = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortSingles.setStatus('mandatory')
a3ComSysTokenRingPortFreqErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortFreqErrors.setStatus('mandatory')
a3ComSysTokenRingPortRingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortRingStatus.setStatus('mandatory')
mibBuilder.exportSymbols("A3COM-SWITCHING-SYSTEMS-TOKEN-RING-MIB", a3ComSwitchingSystemsMib=a3ComSwitchingSystemsMib, a3ComSysTokenRingPortACErrors=a3ComSysTokenRingPortACErrors, a3ComSysTokenRingPortLobeWires=a3ComSysTokenRingPortLobeWires, a3ComSysTokenRingPortRemoves=a3ComSysTokenRingPortRemoves, a3ComSysTokenRingPortTokenErrors=a3ComSysTokenRingPortTokenErrors, a3ComSysTokenRingPortIndex=a3ComSysTokenRingPortIndex, a3ComSysTokenRingPortFrameCopiedErrors=a3ComSysTokenRingPortFrameCopiedErrors, a3ComSysTokenRingPortIfIndex=a3ComSysTokenRingPortIfIndex, a3ComSysTokenRingPortInsertStatus=a3ComSysTokenRingPortInsertStatus, a3ComSysTokenRingPortLabel=a3ComSysTokenRingPortLabel, a3ComSysTokenRingPortTransmitBeacons=a3ComSysTokenRingPortTransmitBeacons, a3ComSysTokenRingPortTable=a3ComSysTokenRingPortTable, a3ComSysTokenRingPortReceiveCongestionErrors=a3ComSysTokenRingPortReceiveCongestionErrors, a3ComSysTokenRingPortSpeed=a3ComSysTokenRingPortSpeed, a3ComSysTokenRingPortInternalErrors=a3ComSysTokenRingPortInternalErrors, a3ComSysTokenRingPortType=a3ComSysTokenRingPortType, a3Com=a3Com, a3ComSysTokenRingPortFreqErrors=a3ComSysTokenRingPortFreqErrors, a3ComSysTokenRingPortSoftErrors=a3ComSysTokenRingPortSoftErrors, a3ComSysTokenRingPortBurstErrors=a3ComSysTokenRingPortBurstErrors, a3ComSysTokenRingPortSingles=a3ComSysTokenRingPortSingles, a3ComSysTokenRingPortCount=a3ComSysTokenRingPortCount, a3ComSysTokenRingPortMode=a3ComSysTokenRingPortMode, a3ComSysTokenRingPort=a3ComSysTokenRingPort, a3ComSysTokenRingPortLineErrors=a3ComSysTokenRingPortLineErrors, a3ComSysTokenRingPortLostFrameErrors=a3ComSysTokenRingPortLostFrameErrors, a3ComSysTokenRingPortRingStatus=a3ComSysTokenRingPortRingStatus, switchingSystemsMibs=switchingSystemsMibs, a3ComSysTokenRingPortAbortTransErrors=a3ComSysTokenRingPortAbortTransErrors, a3ComSysTokenRingPortHardErrors=a3ComSysTokenRingPortHardErrors, a3ComSysTokenRingPortEntry=a3ComSysTokenRingPortEntry)
