#
# PySNMP MIB module STN-AAA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/STN-AAA-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:03:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Gauge32, TimeTicks, Integer32, Counter64, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ObjectIdentity, IpAddress, Bits, Unsigned32, ModuleIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Gauge32", "TimeTicks", "Integer32", "Counter64", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ObjectIdentity", "IpAddress", "Bits", "Unsigned32", "ModuleIdentity", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
stnNotification, stnSystems = mibBuilder.importSymbols("SPRING-TIDE-NETWORKS-SMI", "stnNotification", "stnSystems")
stnEngineIndex, stnEngineSlot, stnEngineCpu = mibBuilder.importSymbols("STN-CHASSIS-MIB", "stnEngineIndex", "stnEngineSlot", "stnEngineCpu")
stnRouterIndex, = mibBuilder.importSymbols("STN-ROUTER-MIB", "stnRouterIndex")
stnAAA = ModuleIdentity((1, 3, 6, 1, 4, 1, 3551, 2, 10))
if mibBuilder.loadTexts: stnAAA.setLastUpdated('0002160000Z')
if mibBuilder.loadTexts: stnAAA.setOrganization('Spring Tide Networks, Inc.')
stnAAAObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1))
stnAAAMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 10, 2))
stnAAATrapVars = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 10, 3))
stnAAAConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1))
stnAAAStats = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 2))
stnStackingRuleGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 1))
stnNetworkAccessGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 4))
stnDefaultPppUserGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 8))
stnNoAuthPppUserGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 9))
stnStackingRuleProtocol = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("ppp", 2))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnStackingRuleProtocol.setStatus('current')
stnStackingRuleTunnelType = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("none", 1), ("pptp", 2), ("l2tp", 4))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnStackingRuleTunnelType.setStatus('current')
stnStackingRuleTunnelEndPoint = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnStackingRuleTunnelEndPoint.setStatus('current')
stnEndPointTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 2), )
if mibBuilder.loadTexts: stnEndPointTable.setStatus('current')
stnEndPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 2, 1), ).setIndexNames((0, "STN-AAA-MIB", "stnEndPointIndex"))
if mibBuilder.loadTexts: stnEndPointEntry.setStatus('current')
stnEndPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnEndPointIndex.setStatus('current')
stnEndPointIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnEndPointIpAddress.setStatus('current')
stnEndPointName = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnEndPointName.setStatus('current')
stnEndPointPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: stnEndPointPassword.setStatus('current')
stnAddressPoolTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 3), )
if mibBuilder.loadTexts: stnAddressPoolTable.setStatus('current')
stnAddressPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 3, 1), ).setIndexNames((0, "STN-AAA-MIB", "stnAddressPoolIndex"))
if mibBuilder.loadTexts: stnAddressPoolEntry.setStatus('current')
stnAddressPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: stnAddressPoolIndex.setStatus('current')
stnStartIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnStartIpAddress.setStatus('current')
stnEndIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnEndIpAddress.setStatus('current')
stnNetworkAccessUserAuthenType = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 4, 1), Bits().clone(namedValues=NamedValues(("none", 0), ("internal", 1), ("radius", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNetworkAccessUserAuthenType.setStatus('current')
stnNetworkAccessEndPointAuthenType = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 4, 2), Bits().clone(namedValues=NamedValues(("none", 0), ("internal", 1), ("radius", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNetworkAccessEndPointAuthenType.setStatus('current')
stnNetworkAccessUserAccType = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 4, 3), Bits().clone(namedValues=NamedValues(("none", 0), ("internal", 1), ("radius", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNetworkAccessUserAccType.setStatus('current')
stnNetworkAccessEndPointAccType = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 4, 4), Bits().clone(namedValues=NamedValues(("none", 0), ("internal", 1), ("radius", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNetworkAccessEndPointAccType.setStatus('current')
stnNetworkAccessDomainName = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNetworkAccessDomainName.setStatus('current')
stnNetworkAccessServiceNameRadiusAttrType = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("servicename", 1), ("filterid", 2), ("class", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNetworkAccessServiceNameRadiusAttrType.setStatus('current')
stnNetworkAccessLdapAuthorizationUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNetworkAccessLdapAuthorizationUpdateTime.setStatus('current')
stnNetworkAccessLdapUpdateNotification = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 4, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stnNetworkAccessLdapUpdateNotification.setStatus('current')
stnNetworkAccessRealmAttrType = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("springTide-ST-Realm-Name", 0), ("cisco-Avpair", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNetworkAccessRealmAttrType.setStatus('current')
stnRadiusAccServerTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 5), )
if mibBuilder.loadTexts: stnRadiusAccServerTable.setStatus('current')
stnRadiusAccServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 5, 1), ).setIndexNames((0, "STN-AAA-MIB", "stnRadiusAccServerIndex"))
if mibBuilder.loadTexts: stnRadiusAccServerEntry.setStatus('current')
stnRadiusAccServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: stnRadiusAccServerIndex.setStatus('current')
stnRadiusAccServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRadiusAccServerAddress.setStatus('current')
stnRadiusAccServerDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRadiusAccServerDestPort.setStatus('current')
stnRadiusAccServerRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 5, 1, 4), Integer32().clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRadiusAccServerRetrans.setStatus('current')
stnRadiusAccServerTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 5, 1, 5), Integer32().clone(60)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRadiusAccServerTimeOut.setStatus('current')
stnRadiusAccServerSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 5, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: stnRadiusAccServerSecret.setStatus('current')
stnRadiusAccServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 5, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRadiusAccServerName.setStatus('current')
stnRadiusAccServerConfigInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRadiusAccServerConfigInstance.setStatus('current')
stnRadiusAuthServerTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 6), )
if mibBuilder.loadTexts: stnRadiusAuthServerTable.setStatus('current')
stnRadiusAuthServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 6, 1), ).setIndexNames((0, "STN-AAA-MIB", "stnRadiusAuthServerIndex"))
if mibBuilder.loadTexts: stnRadiusAuthServerEntry.setStatus('current')
stnRadiusAuthServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: stnRadiusAuthServerIndex.setStatus('current')
stnRadiusAuthServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRadiusAuthServerAddress.setStatus('current')
stnRadiusAuthServerDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRadiusAuthServerDestPort.setStatus('current')
stnRadiusAuthServerRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 6, 1, 4), Integer32().clone(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRadiusAuthServerRetrans.setStatus('current')
stnRadiusAuthServerTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 6, 1, 5), Integer32().clone(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRadiusAuthServerTimeOut.setStatus('current')
stnRadiusAuthServerSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 6, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: stnRadiusAuthServerSecret.setStatus('current')
stnRadiusAuthServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRadiusAuthServerName.setStatus('current')
stnRadiusAuthServerConfigInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRadiusAuthServerConfigInstance.setStatus('current')
stnUserTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 7), )
if mibBuilder.loadTexts: stnUserTable.setStatus('current')
stnUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 7, 1), ).setIndexNames((0, "STN-AAA-MIB", "stnUserIndex"))
if mibBuilder.loadTexts: stnUserEntry.setStatus('current')
stnUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnUserIndex.setStatus('current')
stnUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnUserName.setStatus('current')
stnUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: stnUserPassword.setStatus('current')
stnUserIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 7, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnUserIpAddress.setStatus('current')
stnUserIpNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 7, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnUserIpNetMask.setStatus('current')
stnUserIpRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unset", 0), ("none", 1), ("send", 2), ("listen", 3), ("both", 4))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnUserIpRouting.setStatus('current')
stnUserMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 65532)).clone(1500)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnUserMTU.setStatus('current')
stnUserIpCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("vj", 2))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnUserIpCompression.setStatus('current')
stnUserTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnUserTimeOut.setStatus('current')
stnUserIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 7, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnUserIdleTime.setStatus('current')
stnUserTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("unset", 0), ("none", 1), ("pptp", 2), ("l2tp", 4))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnUserTunnelType.setStatus('current')
stnUserTunnelServerEndPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 7, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnUserTunnelServerEndPoint.setStatus('current')
stnUserTunnelClientEndPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 7, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnUserTunnelClientEndPoint.setStatus('current')
stnUserAssignedTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 7, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnUserAssignedTunnelName.setStatus('current')
stnUserTunnelPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 7, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: stnUserTunnelPassword.setStatus('current')
stnUserServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 6, 101))).clone(namedValues=NamedValues(("unset", 0), ("login", 1), ("framed", 2), ("administrative", 6), ("provisioner", 101))).clone('framed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnUserServiceType.setStatus('current')
stnUserIpFilters = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 7, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnUserIpFilters.setStatus('obsolete')
stnUserIpRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 7, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnUserIpRoutes.setStatus('current')
stnUserPrimaryDNSServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 7, 1, 19), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnUserPrimaryDNSServer.setStatus('current')
stnUserSecondaryDNSServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 7, 1, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnUserSecondaryDNSServer.setStatus('current')
stnUserPrimaryNBNSServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 7, 1, 21), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnUserPrimaryNBNSServer.setStatus('current')
stnUserSecondaryNBNSServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 7, 1, 22), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnUserSecondaryNBNSServer.setStatus('current')
stnUserServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 7, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnUserServiceName.setStatus('current')
stnUserPhysicalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 7, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnUserPhysicalPort.setStatus('current')
stnUserPhysicalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 7, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnUserPhysicalSlot.setStatus('current')
stnUserVirtualPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 7, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnUserVirtualPathId.setStatus('current')
stnUserVirtualCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 7, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnUserVirtualCircuitId.setStatus('current')
stnUserRealmInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 7, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnUserRealmInstance.setStatus('current')
stnDefaultUserIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 8, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnDefaultUserIpAddress.setStatus('current')
stnDefaultUserIpNetMask = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 8, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnDefaultUserIpNetMask.setStatus('current')
stnDefaultUserIpRouting = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("send", 2), ("listen", 3), ("both", 4))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnDefaultUserIpRouting.setStatus('current')
stnDefaultUserMTU = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 65532)).clone(1500)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnDefaultUserMTU.setStatus('current')
stnDefaultUserIpCompression = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("vj", 2))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnDefaultUserIpCompression.setStatus('current')
stnDefaultUserTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 8, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnDefaultUserTimeOut.setStatus('current')
stnDefaultUserIdleTime = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 8, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnDefaultUserIdleTime.setStatus('current')
stnDefaultUserTunnelType = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 8, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("none", 1), ("pptp", 2), ("l2tp", 4))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnDefaultUserTunnelType.setStatus('current')
stnDefaultUserTunnelServerEndPoint = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 8, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnDefaultUserTunnelServerEndPoint.setStatus('current')
stnDefaultUserTunnelClientEndPoint = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 8, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnDefaultUserTunnelClientEndPoint.setStatus('current')
stnDefaultUserIpFilters = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 8, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnDefaultUserIpFilters.setStatus('obsolete')
stnDefaultUserIpRoutes = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 8, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnDefaultUserIpRoutes.setStatus('current')
stnDefaultUserPrimaryDNSServer = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 8, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnDefaultUserPrimaryDNSServer.setStatus('current')
stnDefaultUserSecondaryDNSServer = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 8, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnDefaultUserSecondaryDNSServer.setStatus('current')
stnDefaultUserPrimaryNBNSServer = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 8, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnDefaultUserPrimaryNBNSServer.setStatus('current')
stnDefaultUserSecondaryNBNSServer = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 8, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnDefaultUserSecondaryNBNSServer.setStatus('current')
stnDefaultUserServiceName = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 8, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnDefaultUserServiceName.setStatus('current')
stnNoAuthPppUserName = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 9, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNoAuthPppUserName.setStatus('current')
stnNoAuthPppUserPassword = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 9, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: stnNoAuthPppUserPassword.setStatus('current')
stnUserIpFilterTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 10), )
if mibBuilder.loadTexts: stnUserIpFilterTable.setStatus('obsolete')
stnUserIpFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 10, 1), ).setIndexNames((0, "STN-AAA-MIB", "stnUserIpFilterIndex"))
if mibBuilder.loadTexts: stnUserIpFilterEntry.setStatus('obsolete')
stnUserIpFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnUserIpFilterIndex.setStatus('obsolete')
stnUserIpFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnUserIpFilterName.setStatus('obsolete')
stnUserIpFilterRules = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 10, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnUserIpFilterRules.setStatus('obsolete')
stnUserIpFilterRuleTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 11), )
if mibBuilder.loadTexts: stnUserIpFilterRuleTable.setStatus('obsolete')
stnUserIpFilterRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 11, 1), ).setIndexNames((0, "STN-AAA-MIB", "stnUserIpFilterRuleIndex"))
if mibBuilder.loadTexts: stnUserIpFilterRuleEntry.setStatus('obsolete')
stnUserIpFilterRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnUserIpFilterRuleIndex.setStatus('obsolete')
stnUserIpFilterRuleSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 11, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnUserIpFilterRuleSrcAddress.setStatus('obsolete')
stnUserIpFilterRuleSrcNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 11, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnUserIpFilterRuleSrcNetMask.setStatus('obsolete')
stnUserIpFilterRuleSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnUserIpFilterRuleSrcPort.setStatus('obsolete')
stnUserIpFilterRuleDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 11, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnUserIpFilterRuleDestAddress.setStatus('obsolete')
stnUserIpFilterRuleDestNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 11, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnUserIpFilterRuleDestNetMask.setStatus('obsolete')
stnUserIpFilterRuleDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnUserIpFilterRuleDestPort.setStatus('obsolete')
stnUserIpFilterRuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 11, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnUserIpFilterRuleProtocol.setStatus('obsolete')
stnUserIpFilterRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 11, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnUserIpFilterRuleAction.setStatus('obsolete')
stnUserIpFilterRuleEndPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 11, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnUserIpFilterRuleEndPoint.setStatus('obsolete')
stnUserIpRouteTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 12), )
if mibBuilder.loadTexts: stnUserIpRouteTable.setStatus('current')
stnUserIpRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 12, 1), ).setIndexNames((0, "STN-AAA-MIB", "stnUserIpRouteIndex"))
if mibBuilder.loadTexts: stnUserIpRouteEntry.setStatus('current')
stnUserIpRouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnUserIpRouteIndex.setStatus('current')
stnUserIpRouteDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 12, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnUserIpRouteDestAddress.setStatus('current')
stnUserIpRouteDestNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 12, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnUserIpRouteDestNetMask.setStatus('current')
stnUserIpRouteDestGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 12, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnUserIpRouteDestGateway.setStatus('current')
stnUserIpRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 12, 1, 5), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnUserIpRouteMetric.setStatus('current')
stnLDAPAuthorServerTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 13), )
if mibBuilder.loadTexts: stnLDAPAuthorServerTable.setStatus('current')
stnLDAPAuthorServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 13, 1), ).setIndexNames((0, "STN-AAA-MIB", "stnLDAPAuthorServerIndex"))
if mibBuilder.loadTexts: stnLDAPAuthorServerEntry.setStatus('current')
stnLDAPAuthorServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 13, 1, 1), Integer32())
if mibBuilder.loadTexts: stnLDAPAuthorServerIndex.setStatus('current')
stnLDAPAuthorServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 13, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnLDAPAuthorServerAddress.setStatus('current')
stnLDAPAuthorClientServerPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnLDAPAuthorClientServerPortNumber.setStatus('current')
stnLDAPAuthorServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 13, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnLDAPAuthorServerTimeout.setStatus('current')
stnLDAPAuthorConnectionEstablishTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnLDAPAuthorConnectionEstablishTimeout.setStatus('current')
stnLDAPAuthorBindPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 13, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnLDAPAuthorBindPassword.setStatus('current')
stnLDAPAuthorRootDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 13, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnLDAPAuthorRootDirectory.setStatus('current')
stnLDAPAuthorServiceDirectoryName = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 13, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnLDAPAuthorServiceDirectoryName.setStatus('current')
stnLDAPAuthorBindOrganizationalUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 13, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnLDAPAuthorBindOrganizationalUnit.setStatus('current')
stnLDAPAuthorBindUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 13, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnLDAPAuthorBindUserId.setStatus('current')
stnLDAPAuthorServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 13, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnLDAPAuthorServerName.setStatus('current')
stnLDAPAuthorServerConfigInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 13, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnLDAPAuthorServerConfigInstance.setStatus('current')
stnRealmTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 14), )
if mibBuilder.loadTexts: stnRealmTable.setStatus('current')
stnRealmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 14, 1), ).setIndexNames((0, "STN-AAA-MIB", "stnRealmIndex"))
if mibBuilder.loadTexts: stnRealmEntry.setStatus('current')
stnRealmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRealmIndex.setStatus('current')
stnRealmName = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 14, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRealmName.setStatus('current')
stnRealmAddrPoolInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 14, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRealmAddrPoolInstance.setStatus('current')
stnRealmForcedNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 14, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRealmForcedNextHop.setStatus('current')
stnRealmRADIUSAuthenTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 15), )
if mibBuilder.loadTexts: stnRealmRADIUSAuthenTable.setStatus('current')
stnRealmRADIUSAuthenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 15, 1), ).setIndexNames((0, "STN-AAA-MIB", "stnRealmIndex"), (0, "STN-AAA-MIB", "stnRealmRADIUSAuthenServerIndex"))
if mibBuilder.loadTexts: stnRealmRADIUSAuthenEntry.setStatus('current')
stnRealmRADIUSAuthenServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRealmRADIUSAuthenServerIndex.setStatus('current')
stnRealmRADIUSAuthenServerInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRealmRADIUSAuthenServerInstance.setStatus('current')
stnRealmRADIUSAuthenServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 15, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRealmRADIUSAuthenServerAddress.setStatus('current')
stnRealmRADIUSAuthenServerDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 15, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRealmRADIUSAuthenServerDestPort.setStatus('current')
stnRealmRADIUSAuthenServerRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 15, 1, 5), Integer32().clone(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRealmRADIUSAuthenServerRetrans.setStatus('current')
stnRealmRADIUSAuthenServerTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 15, 1, 6), Integer32().clone(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRealmRADIUSAuthenServerTimeOut.setStatus('current')
stnRealmRADIUSAuthenServerSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 15, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: stnRealmRADIUSAuthenServerSecret.setStatus('current')
stnRealmRADIUSAuthenServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 15, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnRealmRADIUSAuthenServerName.setStatus('current')
stnNamedAddressPoolTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 16), )
if mibBuilder.loadTexts: stnNamedAddressPoolTable.setStatus('current')
stnNamedAddressPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 16, 1), ).setIndexNames((0, "STN-AAA-MIB", "stnNamedAddressPoolIndex"))
if mibBuilder.loadTexts: stnNamedAddressPoolEntry.setStatus('current')
stnNamedAddressPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNamedAddressPoolIndex.setStatus('current')
stnNamedAddressPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 16, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNamedAddressPoolName.setStatus('current')
stnNamedAddressPoolRangeTable = MibTable((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 17), )
if mibBuilder.loadTexts: stnNamedAddressPoolRangeTable.setStatus('current')
stnNamedAddressPoolRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 17, 1), ).setIndexNames((0, "STN-AAA-MIB", "stnNamedAddressPoolIndex"), (0, "STN-AAA-MIB", "stnNamedAddressPoolRangeIndex"))
if mibBuilder.loadTexts: stnNamedAddressPoolRangeEntry.setStatus('current')
stnNamedAddressPoolRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNamedAddressPoolRangeIndex.setStatus('current')
stnNamedAddressPoolStartIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 17, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNamedAddressPoolStartIpAddress.setStatus('current')
stnNamedAddressPoolEndIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3551, 2, 10, 1, 1, 17, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNamedAddressPoolEndIpAddress.setStatus('current')
stnNotificationRadiusAuthServerIndex = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 10, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNotificationRadiusAuthServerIndex.setStatus('current')
stnNotificationRadiusAccServerIndex = MibScalar((1, 3, 6, 1, 4, 1, 3551, 2, 10, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stnNotificationRadiusAccServerIndex.setStatus('current')
stnMaxUserSessionLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 20)).setObjects(("STN-CHASSIS-MIB", "stnEngineIndex"), ("STN-CHASSIS-MIB", "stnEngineSlot"), ("STN-CHASSIS-MIB", "stnEngineCpu"))
if mibBuilder.loadTexts: stnMaxUserSessionLimitExceeded.setStatus('current')
stnRadiusAuthenMismatch = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 21)).setObjects(("STN-AAA-MIB", "stnNotificationRadiusAuthServerIndex"), ("STN-AAA-MIB", "stnRadiusAuthServerName"), ("STN-AAA-MIB", "stnRadiusAuthServerConfigInstance"), ("STN-ROUTER-MIB", "stnRouterIndex"))
if mibBuilder.loadTexts: stnRadiusAuthenMismatch.setStatus('current')
stnPrimaryBillingServerFailure = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 22)).setObjects(("STN-AAA-MIB", "stnNotificationRadiusAccServerIndex"), ("STN-AAA-MIB", "stnRadiusAccServerName"), ("STN-AAA-MIB", "stnRadiusAccServerConfigInstance"), ("STN-ROUTER-MIB", "stnRouterIndex"))
if mibBuilder.loadTexts: stnPrimaryBillingServerFailure.setStatus('current')
stnNoAddressesAvailable = NotificationType((1, 3, 6, 1, 4, 1, 3551, 2, 100, 0, 23)).setObjects(("STN-ROUTER-MIB", "stnRouterIndex"))
if mibBuilder.loadTexts: stnNoAddressesAvailable.setStatus('current')
mibBuilder.exportSymbols("STN-AAA-MIB", stnUserIpRouteDestNetMask=stnUserIpRouteDestNetMask, stnEndPointIndex=stnEndPointIndex, stnUserIpRouteTable=stnUserIpRouteTable, stnUserIpRouteMetric=stnUserIpRouteMetric, stnLDAPAuthorServerConfigInstance=stnLDAPAuthorServerConfigInstance, stnRealmRADIUSAuthenServerRetrans=stnRealmRADIUSAuthenServerRetrans, stnUserPrimaryDNSServer=stnUserPrimaryDNSServer, stnNetworkAccessDomainName=stnNetworkAccessDomainName, stnUserEntry=stnUserEntry, stnStartIpAddress=stnStartIpAddress, stnDefaultUserSecondaryDNSServer=stnDefaultUserSecondaryDNSServer, stnNamedAddressPoolName=stnNamedAddressPoolName, stnRadiusAuthServerIndex=stnRadiusAuthServerIndex, stnUserIpRoutes=stnUserIpRoutes, stnDefaultUserIpAddress=stnDefaultUserIpAddress, stnRealmRADIUSAuthenServerAddress=stnRealmRADIUSAuthenServerAddress, stnLDAPAuthorBindOrganizationalUnit=stnLDAPAuthorBindOrganizationalUnit, stnUserIpFilterTable=stnUserIpFilterTable, stnNetworkAccessUserAuthenType=stnNetworkAccessUserAuthenType, stnRadiusAccServerConfigInstance=stnRadiusAccServerConfigInstance, stnNamedAddressPoolIndex=stnNamedAddressPoolIndex, stnUserTable=stnUserTable, stnRadiusAuthenMismatch=stnRadiusAuthenMismatch, stnUserIpFilterEntry=stnUserIpFilterEntry, stnEndIpAddress=stnEndIpAddress, stnNetworkAccessEndPointAuthenType=stnNetworkAccessEndPointAuthenType, stnNamedAddressPoolEntry=stnNamedAddressPoolEntry, stnLDAPAuthorClientServerPortNumber=stnLDAPAuthorClientServerPortNumber, stnAAATrapVars=stnAAATrapVars, stnUserIpRouteIndex=stnUserIpRouteIndex, stnPrimaryBillingServerFailure=stnPrimaryBillingServerFailure, stnNetworkAccessLdapUpdateNotification=stnNetworkAccessLdapUpdateNotification, stnRealmRADIUSAuthenServerDestPort=stnRealmRADIUSAuthenServerDestPort, stnUserIpFilterName=stnUserIpFilterName, stnRadiusAccServerDestPort=stnRadiusAccServerDestPort, stnEndPointIpAddress=stnEndPointIpAddress, stnAAAStats=stnAAAStats, stnDefaultUserTunnelType=stnDefaultUserTunnelType, stnUserIpFilterRuleSrcNetMask=stnUserIpFilterRuleSrcNetMask, stnUserIpNetMask=stnUserIpNetMask, stnUserVirtualCircuitId=stnUserVirtualCircuitId, stnNotificationRadiusAuthServerIndex=stnNotificationRadiusAuthServerIndex, stnNotificationRadiusAccServerIndex=stnNotificationRadiusAccServerIndex, stnEndPointName=stnEndPointName, stnLDAPAuthorRootDirectory=stnLDAPAuthorRootDirectory, stnNoAuthPppUserName=stnNoAuthPppUserName, stnRealmAddrPoolInstance=stnRealmAddrPoolInstance, stnStackingRuleProtocol=stnStackingRuleProtocol, stnEndPointTable=stnEndPointTable, stnRadiusAccServerRetrans=stnRadiusAccServerRetrans, stnDefaultUserSecondaryNBNSServer=stnDefaultUserSecondaryNBNSServer, stnUserIdleTime=stnUserIdleTime, stnUserPhysicalPort=stnUserPhysicalPort, stnUserRealmInstance=stnUserRealmInstance, stnDefaultUserTunnelServerEndPoint=stnDefaultUserTunnelServerEndPoint, stnRadiusAccServerTable=stnRadiusAccServerTable, stnLDAPAuthorServerIndex=stnLDAPAuthorServerIndex, stnNamedAddressPoolTable=stnNamedAddressPoolTable, stnUserIpFilterRuleEntry=stnUserIpFilterRuleEntry, stnNamedAddressPoolEndIpAddress=stnNamedAddressPoolEndIpAddress, stnUserIpFilterRuleTable=stnUserIpFilterRuleTable, stnRadiusAuthServerAddress=stnRadiusAuthServerAddress, stnNetworkAccessServiceNameRadiusAttrType=stnNetworkAccessServiceNameRadiusAttrType, stnStackingRuleGroup=stnStackingRuleGroup, stnLDAPAuthorServerAddress=stnLDAPAuthorServerAddress, stnLDAPAuthorServerTimeout=stnLDAPAuthorServerTimeout, stnNamedAddressPoolRangeEntry=stnNamedAddressPoolRangeEntry, stnRadiusAccServerEntry=stnRadiusAccServerEntry, stnRealmRADIUSAuthenServerInstance=stnRealmRADIUSAuthenServerInstance, stnUserIpRouteDestGateway=stnUserIpRouteDestGateway, stnDefaultUserIpNetMask=stnDefaultUserIpNetMask, stnUserIpFilterRuleIndex=stnUserIpFilterRuleIndex, stnDefaultUserPrimaryDNSServer=stnDefaultUserPrimaryDNSServer, stnRadiusAuthServerTable=stnRadiusAuthServerTable, stnRealmRADIUSAuthenServerIndex=stnRealmRADIUSAuthenServerIndex, stnEndPointPassword=stnEndPointPassword, stnUserPrimaryNBNSServer=stnUserPrimaryNBNSServer, stnUserTimeOut=stnUserTimeOut, stnNoAuthPppUserPassword=stnNoAuthPppUserPassword, stnUserTunnelServerEndPoint=stnUserTunnelServerEndPoint, stnRealmRADIUSAuthenServerSecret=stnRealmRADIUSAuthenServerSecret, stnNoAddressesAvailable=stnNoAddressesAvailable, stnNoAuthPppUserGroup=stnNoAuthPppUserGroup, stnNetworkAccessLdapAuthorizationUpdateTime=stnNetworkAccessLdapAuthorizationUpdateTime, stnDefaultUserTimeOut=stnDefaultUserTimeOut, stnUserIpFilterRuleAction=stnUserIpFilterRuleAction, stnUserIpFilterRuleEndPoint=stnUserIpFilterRuleEndPoint, stnRealmRADIUSAuthenEntry=stnRealmRADIUSAuthenEntry, stnUserName=stnUserName, stnLDAPAuthorServerEntry=stnLDAPAuthorServerEntry, stnUserServiceType=stnUserServiceType, stnRadiusAuthServerConfigInstance=stnRadiusAuthServerConfigInstance, stnLDAPAuthorServerTable=stnLDAPAuthorServerTable, stnAAA=stnAAA, stnDefaultUserTunnelClientEndPoint=stnDefaultUserTunnelClientEndPoint, stnAAAObjects=stnAAAObjects, stnRadiusAccServerTimeOut=stnRadiusAccServerTimeOut, stnDefaultPppUserGroup=stnDefaultPppUserGroup, stnRadiusAuthServerDestPort=stnRadiusAuthServerDestPort, stnUserSecondaryNBNSServer=stnUserSecondaryNBNSServer, stnAddressPoolEntry=stnAddressPoolEntry, stnRealmTable=stnRealmTable, stnRadiusAuthServerName=stnRadiusAuthServerName, stnUserIpFilterRuleDestNetMask=stnUserIpFilterRuleDestNetMask, stnRealmEntry=stnRealmEntry, stnUserIpFilterRuleSrcPort=stnUserIpFilterRuleSrcPort, stnUserIpAddress=stnUserIpAddress, stnRadiusAccServerSecret=stnRadiusAccServerSecret, stnRealmIndex=stnRealmIndex, stnAAAConfig=stnAAAConfig, stnUserIpFilterRuleProtocol=stnUserIpFilterRuleProtocol, stnRadiusAuthServerTimeOut=stnRadiusAuthServerTimeOut, stnUserAssignedTunnelName=stnUserAssignedTunnelName, PYSNMP_MODULE_ID=stnAAA, stnUserIndex=stnUserIndex, stnUserIpFilters=stnUserIpFilters, stnStackingRuleTunnelType=stnStackingRuleTunnelType, stnUserSecondaryDNSServer=stnUserSecondaryDNSServer, stnNamedAddressPoolRangeIndex=stnNamedAddressPoolRangeIndex, stnNetworkAccessRealmAttrType=stnNetworkAccessRealmAttrType, stnUserIpCompression=stnUserIpCompression, stnUserMTU=stnUserMTU, stnMaxUserSessionLimitExceeded=stnMaxUserSessionLimitExceeded, stnRealmForcedNextHop=stnRealmForcedNextHop, stnDefaultUserPrimaryNBNSServer=stnDefaultUserPrimaryNBNSServer, stnNamedAddressPoolRangeTable=stnNamedAddressPoolRangeTable, stnRadiusAccServerIndex=stnRadiusAccServerIndex, stnRealmName=stnRealmName, stnRadiusAccServerAddress=stnRadiusAccServerAddress, stnAddressPoolTable=stnAddressPoolTable, stnUserTunnelClientEndPoint=stnUserTunnelClientEndPoint, stnDefaultUserIpCompression=stnDefaultUserIpCompression, stnNetworkAccessGroup=stnNetworkAccessGroup, stnUserIpRouteEntry=stnUserIpRouteEntry, stnLDAPAuthorBindUserId=stnLDAPAuthorBindUserId, stnLDAPAuthorServerName=stnLDAPAuthorServerName, stnDefaultUserIpFilters=stnDefaultUserIpFilters, stnUserVirtualPathId=stnUserVirtualPathId, stnUserIpRouteDestAddress=stnUserIpRouteDestAddress, stnAddressPoolIndex=stnAddressPoolIndex, stnUserPhysicalSlot=stnUserPhysicalSlot, stnLDAPAuthorConnectionEstablishTimeout=stnLDAPAuthorConnectionEstablishTimeout, stnLDAPAuthorBindPassword=stnLDAPAuthorBindPassword, stnRealmRADIUSAuthenTable=stnRealmRADIUSAuthenTable, stnRealmRADIUSAuthenServerTimeOut=stnRealmRADIUSAuthenServerTimeOut, stnAAAMibConformance=stnAAAMibConformance, stnLDAPAuthorServiceDirectoryName=stnLDAPAuthorServiceDirectoryName, stnUserIpFilterRuleSrcAddress=stnUserIpFilterRuleSrcAddress, stnRadiusAuthServerSecret=stnRadiusAuthServerSecret, stnEndPointEntry=stnEndPointEntry, stnUserIpFilterIndex=stnUserIpFilterIndex, stnDefaultUserServiceName=stnDefaultUserServiceName, stnNamedAddressPoolStartIpAddress=stnNamedAddressPoolStartIpAddress, stnNetworkAccessEndPointAccType=stnNetworkAccessEndPointAccType, stnUserIpFilterRuleDestPort=stnUserIpFilterRuleDestPort, stnUserIpRouting=stnUserIpRouting, stnDefaultUserMTU=stnDefaultUserMTU, stnDefaultUserIpRoutes=stnDefaultUserIpRoutes, stnNetworkAccessUserAccType=stnNetworkAccessUserAccType, stnRadiusAuthServerRetrans=stnRadiusAuthServerRetrans, stnDefaultUserIpRouting=stnDefaultUserIpRouting, stnDefaultUserIdleTime=stnDefaultUserIdleTime, stnUserIpFilterRuleDestAddress=stnUserIpFilterRuleDestAddress, stnUserPassword=stnUserPassword, stnUserServiceName=stnUserServiceName, stnUserIpFilterRules=stnUserIpFilterRules, stnRealmRADIUSAuthenServerName=stnRealmRADIUSAuthenServerName, stnRadiusAccServerName=stnRadiusAccServerName, stnRadiusAuthServerEntry=stnRadiusAuthServerEntry, stnUserTunnelType=stnUserTunnelType, stnStackingRuleTunnelEndPoint=stnStackingRuleTunnelEndPoint, stnUserTunnelPassword=stnUserTunnelPassword)
