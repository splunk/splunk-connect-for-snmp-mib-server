#
# PySNMP MIB module ACOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ACOS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 16:58:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Gauge32, ObjectIdentity, TimeTicks, iso, NotificationType, MibIdentifier, Unsigned32, enterprises, Integer32, ModuleIdentity, IpAddress, Bits, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Gauge32", "ObjectIdentity", "TimeTicks", "iso", "NotificationType", "MibIdentifier", "Unsigned32", "enterprises", "Integer32", "ModuleIdentity", "IpAddress", "Bits", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
atlasComEngines = MibIdentifier((1, 3, 6, 1, 4, 1, 2221))
aceProductFamily = MibIdentifier((1, 3, 6, 1, 4, 1, 2221, 1))
aceAcos = MibIdentifier((1, 3, 6, 1, 4, 1, 2221, 1, 1))
acosSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 2221, 1, 1, 1))
acosDevices = MibIdentifier((1, 3, 6, 1, 4, 1, 2221, 1, 1, 2))
acosStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2221, 1, 1, 3))
acosDS1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2221, 1, 1, 4))
acosUSI = MibIdentifier((1, 3, 6, 1, 4, 1, 2221, 1, 1, 5))
acosSDSL = MibIdentifier((1, 3, 6, 1, 4, 1, 2221, 1, 1, 6))
acosEthernet = MibIdentifier((1, 3, 6, 1, 4, 1, 2221, 1, 1, 7))
acosWAN = MibIdentifier((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8))
acosRouting = MibIdentifier((1, 3, 6, 1, 4, 1, 2221, 1, 1, 9))
acosBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 2221, 1, 1, 10))
acosTftpClient = MibIdentifier((1, 3, 6, 1, 4, 1, 2221, 1, 1, 11))
acosManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 2221, 1, 1, 12))
acosTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2221, 1, 1, 13))
acosDhcp = MibIdentifier((1, 3, 6, 1, 4, 1, 2221, 1, 1, 14))
acosNat = MibIdentifier((1, 3, 6, 1, 4, 1, 2221, 1, 1, 15))
class AcosDeviceTypeEnum(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 24, 65534, 65535))
    namedValues = NamedValues(("ethernet", 1), ("singleUSI", 2), ("atm25", 4), ("singleDS1-Bt8370", 7), ("dualDS1-Bt8370", 8), ("sdsl-CO", 9), ("sdsl-Remote", 10), ("mpeg2", 11), ("quadPotsD1", 12), ("quadPotsD2", 13), ("octalPOTS", 14), ("copperGold-CO", 17), ("copperGold-RT", 18), ("sdsl-Rev1", 24), ("noDevice", 65534), ("unknown", 65535))

acosSystemReboot = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("rebootSystem", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosSystemReboot.setStatus('mandatory')
acosHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosHardwareRevision.setStatus('mandatory')
acosSoftwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosSoftwareRevision.setStatus('mandatory')
acosSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosSerialNumber.setStatus('mandatory')
acosPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosPartNumber.setStatus('mandatory')
acosTotalSlots = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosTotalSlots.setStatus('mandatory')
acosMemoryCapacityTable = MibTable((1, 3, 6, 1, 4, 1, 2221, 1, 1, 1, 7), )
if mibBuilder.loadTexts: acosMemoryCapacityTable.setStatus('mandatory')
acosMemoryCapacityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2221, 1, 1, 1, 7, 1), ).setIndexNames((0, "ACOS-MIB", "acosMemoryTypeIndex"))
if mibBuilder.loadTexts: acosMemoryCapacityEntry.setStatus('mandatory')
acosMemoryTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sdram", 1), ("bootFlashRom", 2), ("nandFlashRom", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosMemoryTypeIndex.setStatus('mandatory')
acosMemoryCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 1, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosMemoryCapacity.setStatus('mandatory')
acosDSPCount = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosDSPCount.setStatus('mandatory')
acosDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 2221, 1, 1, 2, 1), )
if mibBuilder.loadTexts: acosDeviceTable.setStatus('mandatory')
acosDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2221, 1, 1, 2, 1, 1), ).setIndexNames((0, "ACOS-MIB", "acosDeviceSlotIndex"))
if mibBuilder.loadTexts: acosDeviceEntry.setStatus('mandatory')
acosDeviceSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosDeviceSlotIndex.setStatus('mandatory')
acosDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 2, 1, 1, 2), AcosDeviceTypeEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosDeviceType.setStatus('mandatory')
acosDeviceTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosDeviceTotal.setStatus('mandatory')
acosDeviceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosDeviceDescription.setStatus('mandatory')
acosDeviceTypesAggregate = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 2, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosDeviceTypesAggregate.setStatus('mandatory')
acosDeviceTotalsAggregate = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 2, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosDeviceTotalsAggregate.setStatus('mandatory')
acosCpuUtilization = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosCpuUtilization.setStatus('mandatory')
acosT1LineConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2221, 1, 1, 4, 1), )
if mibBuilder.loadTexts: acosT1LineConfigTable.setStatus('mandatory')
acosT1LineConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2221, 1, 1, 4, 1, 1), ).setIndexNames((0, "ACOS-MIB", "acosT1LineSlotIndex"), (0, "ACOS-MIB", "acosT1LineSlotInterfaceIndex"))
if mibBuilder.loadTexts: acosT1LineConfigEntry.setStatus('mandatory')
acosT1LineSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosT1LineSlotIndex.setStatus('mandatory')
acosT1LineSlotInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosT1LineSlotInterfaceIndex.setStatus('mandatory')
acosT1LineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("lbo0db", 1), ("lbo133ft", 2), ("lbo266ft", 3), ("lbo399ft", 4), ("lbo533ft", 5), ("lbo75db", 6), ("lbo15db", 7), ("lbo225db", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosT1LineBuildOut.setStatus('mandatory')
acosDS1ChannelConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2221, 1, 1, 4, 2), )
if mibBuilder.loadTexts: acosDS1ChannelConfigTable.setStatus('mandatory')
acosDS1ChannelConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2221, 1, 1, 4, 2, 1), ).setIndexNames((0, "ACOS-MIB", "acosDS1ChannelSlotIndex"), (0, "ACOS-MIB", "acosDS1ChannelSlotDeviceIndex"), (0, "ACOS-MIB", "acosDS1ChannelIndex"))
if mibBuilder.loadTexts: acosDS1ChannelConfigEntry.setStatus('mandatory')
acosDS1ChannelSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosDS1ChannelSlotIndex.setStatus('mandatory')
acosDS1ChannelSlotDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosDS1ChannelSlotDeviceIndex.setStatus('mandatory')
acosDS1ChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosDS1ChannelIndex.setStatus('mandatory')
acosDS1TxChannelControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDS1TxChannelControl.setStatus('mandatory')
acosDS1RxChannelControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDS1RxChannelControl.setStatus('mandatory')
acosDS1AggChanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2221, 1, 1, 4, 3), )
if mibBuilder.loadTexts: acosDS1AggChanConfigTable.setStatus('mandatory')
acosDS1AggChanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2221, 1, 1, 4, 3, 1), ).setIndexNames((0, "ACOS-MIB", "acosDS1AggChanSlotIndex"), (0, "ACOS-MIB", "acosDS1AggChanSlotDeviceIndex"))
if mibBuilder.loadTexts: acosDS1AggChanConfigEntry.setStatus('mandatory')
acosDS1AggChanSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosDS1AggChanSlotIndex.setStatus('mandatory')
acosDS1AggChanSlotDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosDS1AggChanSlotDeviceIndex.setStatus('mandatory')
acosDS1TxChannelsAggregate = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 4, 3, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDS1TxChannelsAggregate.setStatus('mandatory')
acosDS1RxChannelsAggregate = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 4, 3, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDS1RxChannelsAggregate.setStatus('mandatory')
acosUSIConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2221, 1, 1, 5, 1), )
if mibBuilder.loadTexts: acosUSIConfigTable.setStatus('mandatory')
acosUSIConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2221, 1, 1, 5, 1, 1), ).setIndexNames((0, "ACOS-MIB", "acosUSISlotIndex"), (0, "ACOS-MIB", "acosUSISlotInterfaceIndex"))
if mibBuilder.loadTexts: acosUSIConfigEntry.setStatus('mandatory')
acosUSISlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosUSISlotIndex.setStatus('mandatory')
acosUSISlotInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosUSISlotInterfaceIndex.setStatus('mandatory')
acosUSIInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("rs232", 2), ("v10", 4), ("v35", 5), ("x21", 6), ("rs530", 7), ("rs530a", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosUSIInterfaceType.setStatus('mandatory')
acosSDSLConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2221, 1, 1, 6, 1), )
if mibBuilder.loadTexts: acosSDSLConfigTable.setStatus('mandatory')
acosSDSLConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2221, 1, 1, 6, 1, 1), ).setIndexNames((0, "ACOS-MIB", "acosSDSLSlotIndex"), (0, "ACOS-MIB", "acosSDSLSlotInterfaceIndex"))
if mibBuilder.loadTexts: acosSDSLConfigEntry.setStatus('mandatory')
acosSDSLSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosSDSLSlotIndex.setStatus('mandatory')
acosSDSLSlotInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosSDSLSlotInterfaceIndex.setStatus('mandatory')
acosSDSLInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cpe", 1), ("co", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosSDSLInterfaceType.setStatus('mandatory')
acosSDSLClockType = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("fixed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosSDSLClockType.setStatus('mandatory')
acosEthernetConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2221, 1, 1, 7, 1), )
if mibBuilder.loadTexts: acosEthernetConfigTable.setStatus('mandatory')
acosEthernetConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2221, 1, 1, 7, 1, 1), ).setIndexNames((0, "ACOS-MIB", "acosEthernetSlotIndex"))
if mibBuilder.loadTexts: acosEthernetConfigEntry.setStatus('mandatory')
acosEthernetSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosEthernetSlotIndex.setStatus('mandatory')
acosEthernetFullDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosEthernetFullDuplex.setStatus('mandatory')
acosWANConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 1), )
if mibBuilder.loadTexts: acosWANConfigTable.setStatus('mandatory')
acosWANConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 1, 1), ).setIndexNames((0, "ACOS-MIB", "acosWANSlotIndex"), (0, "ACOS-MIB", "acosWANSlotDeviceIndex"))
if mibBuilder.loadTexts: acosWANConfigEntry.setStatus('mandatory')
acosWANSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANSlotIndex.setStatus('mandatory')
acosWANSlotDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANSlotDeviceIndex.setStatus('mandatory')
acosWANDataLinkProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("transparent", 1), ("raw-HDLC", 2), ("cisco-HDLC", 3), ("ip-Plus-HDLC", 4), ("ppp", 5), ("atm-RFC1483", 6), ("pppOverAtm-RFC2364", 7), ("frameRelay", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosWANDataLinkProtocol.setStatus('mandatory')
acosWANSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosWANSpeed.setStatus('mandatory')
acosWANSerialStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2), )
if mibBuilder.loadTexts: acosWANSerialStatsTable.setStatus('mandatory')
acosWANSerialStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1), ).setIndexNames((0, "ACOS-MIB", "acosWANSerialStatsSlotIndex"), (0, "ACOS-MIB", "acosWANSerialStatsSlotDeviceIndex"))
if mibBuilder.loadTexts: acosWANSerialStatsEntry.setStatus('mandatory')
acosWANSerialStatsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANSerialStatsSlotIndex.setStatus('mandatory')
acosWANSerialStatsSlotDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANSerialStatsSlotDeviceIndex.setStatus('mandatory')
acosWANTotalRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANTotalRxFrames.setStatus('mandatory')
acosWANTotalRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANTotalRxOctets.setStatus('mandatory')
acosWANRxMissedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANRxMissedFrames.setStatus('mandatory')
acosWANRxErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANRxErrorFrames.setStatus('mandatory')
acosWANRxGlitchErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANRxGlitchErrors.setStatus('mandatory')
acosWANRxPllErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANRxPllErrors.setStatus('mandatory')
acosWANRxLongErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANRxLongErrors.setStatus('mandatory')
acosWANRxNonOctetErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANRxNonOctetErrors.setStatus('mandatory')
acosWANRxAbortErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANRxAbortErrors.setStatus('mandatory')
acosWANRxCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANRxCrcErrors.setStatus('mandatory')
acosWANRxOverrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANRxOverrunErrors.setStatus('mandatory')
acosWANRxCdLostErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANRxCdLostErrors.setStatus('mandatory')
acosWANTotalTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANTotalTxFrames.setStatus('mandatory')
acosWANTotalTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANTotalTxOctets.setStatus('mandatory')
acosWANTxMissedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANTxMissedFrames.setStatus('mandatory')
acosWANTxDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANTxDiscardedFrames.setStatus('mandatory')
acosWANTxErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANTxErrorFrames.setStatus('mandatory')
acosWANTxGlitchErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANTxGlitchErrors.setStatus('mandatory')
acosWANTxUnderrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANTxUnderrunErrors.setStatus('mandatory')
acosWANTxCtsLostErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANTxCtsLostErrors.setStatus('mandatory')
acosWANAtmStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 3), )
if mibBuilder.loadTexts: acosWANAtmStatsTable.setStatus('mandatory')
acosWANAtmStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 3, 1), ).setIndexNames((0, "ACOS-MIB", "acosWANAtmStatsSlotIndex"), (0, "ACOS-MIB", "acosWANAtmStatsSlotDeviceIndex"))
if mibBuilder.loadTexts: acosWANAtmStatsEntry.setStatus('mandatory')
acosWANAtmStatsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANAtmStatsSlotIndex.setStatus('mandatory')
acosWANAtmStatsSlotDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANAtmStatsSlotDeviceIndex.setStatus('mandatory')
acosWANAtmTotalRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANAtmTotalRxCells.setStatus('mandatory')
acosWANAtmClpiRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANAtmClpiRxCells.setStatus('mandatory')
acosWANAtmOamRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANAtmOamRxCells.setStatus('mandatory')
acosWANAtmEfciRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANAtmEfciRxCells.setStatus('mandatory')
acosWANAtmRmRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANAtmRmRxCells.setStatus('mandatory')
acosWANAtmRxCellsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANAtmRxCellsDiscarded.setStatus('mandatory')
acosWANAtmTotalTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANAtmTotalTxCells.setStatus('mandatory')
acosWANAtmOamTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANAtmOamTxCells.setStatus('mandatory')
acosWANAtmClpiTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANAtmClpiTxCells.setStatus('mandatory')
acosWANAtmEfciTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANAtmEfciTxCells.setStatus('mandatory')
acosWANAtmRmTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANAtmRmTxCells.setStatus('mandatory')
acosWANAtmRxHecErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANAtmRxHecErrors.setStatus('mandatory')
acosWANAtmPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 8, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosWANAtmPortStatus.setStatus('mandatory')
acosDeviceIpAddressTable = MibTable((1, 3, 6, 1, 4, 1, 2221, 1, 1, 9, 1), )
if mibBuilder.loadTexts: acosDeviceIpAddressTable.setStatus('mandatory')
acosDeviceIpAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2221, 1, 1, 9, 1, 1), ).setIndexNames((0, "ACOS-MIB", "acosDeviceIpSlotIndex"), (0, "ACOS-MIB", "acosDeviceIpInterfaceIndex"), (0, "ACOS-MIB", "acosDeviceIpPortIndex"), (0, "ACOS-MIB", "acosDeviceIpConnectionIndex"))
if mibBuilder.loadTexts: acosDeviceIpAddressEntry.setStatus('mandatory')
acosDeviceIpSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosDeviceIpSlotIndex.setStatus('mandatory')
acosDeviceIpInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosDeviceIpInterfaceIndex.setStatus('mandatory')
acosDeviceIpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosDeviceIpPortIndex.setStatus('mandatory')
acosDeviceIpConnectionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosDeviceIpConnectionIndex.setStatus('mandatory')
acosDeviceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 9, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDeviceIpAddress.setStatus('mandatory')
acosDeviceIpAddressSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 9, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDeviceIpAddressSubnetMask.setStatus('mandatory')
acosDeviceIpPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 9, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDeviceIpPeerAddress.setStatus('mandatory')
acosRIPControl = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosRIPControl.setStatus('mandatory')
acosDeviceRipParameterTable = MibTable((1, 3, 6, 1, 4, 1, 2221, 1, 1, 9, 3), )
if mibBuilder.loadTexts: acosDeviceRipParameterTable.setStatus('mandatory')
acosDeviceRipParameterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2221, 1, 1, 9, 3, 1), ).setIndexNames((0, "ACOS-MIB", "acosDeviceRipSlotIndex"), (0, "ACOS-MIB", "acosDeviceRipInterfaceIndex"), (0, "ACOS-MIB", "acosDeviceRipPortIndex"))
if mibBuilder.loadTexts: acosDeviceRipParameterEntry.setStatus('mandatory')
acosDeviceRipSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosDeviceRipSlotIndex.setStatus('mandatory')
acosDeviceRipInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 9, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosDeviceRipInterfaceIndex.setStatus('mandatory')
acosDeviceRipPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 9, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosDeviceRipPortIndex.setStatus('mandatory')
acosDeviceRipVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 9, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("version1Broadcast", 2), ("version2Broadcast", 3), ("version2Multicast", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDeviceRipVersion.setStatus('mandatory')
acosDeviceRipPoisonedReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDeviceRipPoisonedReverse.setStatus('mandatory')
acosDNSServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 9, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDNSServerAddress.setStatus('mandatory')
acosDNSTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 9, 5), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDNSTimeout.setStatus('mandatory')
acosBridging = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("globallyEnabled", 1), ("globallyDisabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosBridging.setStatus('mandatory')
acosBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 2221, 1, 1, 10, 2), )
if mibBuilder.loadTexts: acosBridgeTable.setStatus('mandatory')
acosBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2221, 1, 1, 10, 2, 1), ).setIndexNames((0, "ACOS-MIB", "acosBridgeSlotIndex"), (0, "ACOS-MIB", "acosBridgeInterfaceIndex"), (0, "ACOS-MIB", "acosBridgePortIndex"))
if mibBuilder.loadTexts: acosBridgeEntry.setStatus('mandatory')
acosBridgeSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosBridgeSlotIndex.setStatus('mandatory')
acosBridgeInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 10, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosBridgeInterfaceIndex.setStatus('mandatory')
acosBridgePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 10, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosBridgePortIndex.setStatus('mandatory')
acosBridgeControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosBridgeControl.setStatus('mandatory')
acosTftpServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 11, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosTftpServerAddress.setStatus('mandatory')
acosTftpAcosName = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 11, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosTftpAcosName.setStatus('mandatory')
acosTftpUpgradeACOS = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 11, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("upgradeACOS", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosTftpUpgradeACOS.setStatus('mandatory')
acosTftpApplicationName = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 11, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosTftpApplicationName.setStatus('mandatory')
acosTftpUpgradeApplication = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 11, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("upgradeApp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosTftpUpgradeApplication.setStatus('mandatory')
acosTftpSessionStatus = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 11, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ready", 1), ("inProgress", 2), ("succeeded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosTftpSessionStatus.setStatus('mandatory')
acosTftpFailReason = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 11, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosTftpFailReason.setStatus('mandatory')
acosTftpOctetsRead = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 11, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosTftpOctetsRead.setStatus('mandatory')
acosManagerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 12, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosManagerIpAddress.setStatus('mandatory')
acosManagerWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 12, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosManagerWriteCommunity.setStatus('mandatory')
acosTftpFileName = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 13, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: acosTftpFileName.setStatus('mandatory')
acosDhcpEnable = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDhcpEnable.setStatus('mandatory')
acosDhcpGateway = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 14, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDhcpGateway.setStatus('mandatory')
acosDhcpDnsServer = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 14, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDhcpDnsServer.setStatus('mandatory')
acosDhcpSubnet = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 14, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDhcpSubnet.setStatus('mandatory')
acosDhcpLowAddress = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 14, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDhcpLowAddress.setStatus('mandatory')
acosDhcpHighAddress = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 14, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDhcpHighAddress.setStatus('mandatory')
acosDhcpLeaseTime = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 14, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDhcpLeaseTime.setStatus('mandatory')
acosDhcpDomainName = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 14, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDhcpDomainName.setStatus('mandatory')
acosDhcpInterface = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 14, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDhcpInterface.setStatus('mandatory')
acosDhcpClientTable = MibTable((1, 3, 6, 1, 4, 1, 2221, 1, 1, 14, 10), )
if mibBuilder.loadTexts: acosDhcpClientTable.setStatus('mandatory')
acosDhcpClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2221, 1, 1, 14, 10, 1), ).setIndexNames((0, "ACOS-MIB", "acosDhcpClientIndex"))
if mibBuilder.loadTexts: acosDhcpClientEntry.setStatus('mandatory')
acosDhcpClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 14, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosDhcpClientIndex.setStatus('mandatory')
acosDhcpClientIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 14, 10, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDhcpClientIpAddress.setStatus('mandatory')
acosDhcpClientMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 14, 10, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDhcpClientMacAddress.setStatus('mandatory')
acosDhcpClientName = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 14, 10, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDhcpClientName.setStatus('mandatory')
acosDhcpClientLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 14, 10, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDhcpClientLeaseTime.setStatus('mandatory')
acosDhcpClientSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 14, 10, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDhcpClientSubnetMask.setStatus('mandatory')
acosDhcpClientGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 14, 10, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDhcpClientGateway.setStatus('mandatory')
acosDhcpClientDnsServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 14, 10, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosDhcpClientDnsServer.setStatus('mandatory')
acosNatServerTable = MibTable((1, 3, 6, 1, 4, 1, 2221, 1, 1, 15, 1), )
if mibBuilder.loadTexts: acosNatServerTable.setStatus('mandatory')
acosNatServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2221, 1, 1, 15, 1, 1), ).setIndexNames((0, "ACOS-MIB", "acosNatServerIndex"))
if mibBuilder.loadTexts: acosNatServerEntry.setStatus('mandatory')
acosNatServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 15, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosNatServerIndex.setStatus('mandatory')
acosNatServerTranslatedIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 15, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosNatServerTranslatedIpAddress.setStatus('mandatory')
acosNatServerTranslatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 15, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosNatServerTranslatedPort.setStatus('mandatory')
acosNatServerStandardPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 15, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosNatServerStandardPort.setStatus('mandatory')
acosNatServerProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 15, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 17))).clone(namedValues=NamedValues(("tcp", 6), ("udp", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosNatServerProtocol.setStatus('mandatory')
acosNatDeviceParameterTable = MibTable((1, 3, 6, 1, 4, 1, 2221, 1, 1, 15, 2), )
if mibBuilder.loadTexts: acosNatDeviceParameterTable.setStatus('mandatory')
acosNatDeviceParameterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2221, 1, 1, 15, 2, 1), ).setIndexNames((0, "ACOS-MIB", "acosNatDeviceSlotIndex"), (0, "ACOS-MIB", "acosNatDeviceInterfaceIndex"), (0, "ACOS-MIB", "acosNatDevicePortIndex"))
if mibBuilder.loadTexts: acosNatDeviceParameterEntry.setStatus('mandatory')
acosNatDeviceSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 15, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosNatDeviceSlotIndex.setStatus('mandatory')
acosNatDeviceInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 15, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosNatDeviceInterfaceIndex.setStatus('mandatory')
acosNatDevicePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 15, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acosNatDevicePortIndex.setStatus('mandatory')
acosNatDeviceTranslationEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2221, 1, 1, 15, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosNatDeviceTranslationEnabled.setStatus('mandatory')
acosNatTcpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 15, 3), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosNatTcpTimeout.setStatus('mandatory')
acosNatUdpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 15, 4), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosNatUdpTimeout.setStatus('mandatory')
acosNatPortLow = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 15, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosNatPortLow.setStatus('mandatory')
acosNatPortHigh = MibScalar((1, 3, 6, 1, 4, 1, 2221, 1, 1, 15, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acosNatPortHigh.setStatus('mandatory')
acosCardInsertedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2221, 1, 1) + (0,1)).setObjects(("ACOS-MIB", "acosDeviceSlotIndex"), ("ACOS-MIB", "acosDeviceType"))
acosCardRemovedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2221, 1, 1) + (0,2)).setObjects(("ACOS-MIB", "acosDeviceSlotIndex"), ("ACOS-MIB", "acosDeviceType"))
acosTftpInitiatedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2221, 1, 1) + (0,3)).setObjects(("ACOS-MIB", "acosTftpFileName"), ("ACOS-MIB", "acosTftpServerAddress"))
acosTftpFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2221, 1, 1) + (0,4)).setObjects(("ACOS-MIB", "acosTftpFileName"), ("ACOS-MIB", "acosTftpServerAddress"), ("ACOS-MIB", "acosTftpFailReason"))
acosTftpSucceededTrap = NotificationType((1, 3, 6, 1, 4, 1, 2221, 1, 1) + (0,5)).setObjects(("ACOS-MIB", "acosTftpFileName"), ("ACOS-MIB", "acosTftpServerAddress"))
mibBuilder.exportSymbols("ACOS-MIB", acosDeviceRipParameterTable=acosDeviceRipParameterTable, acosDNSTimeout=acosDNSTimeout, acosDhcpEnable=acosDhcpEnable, acosTftpServerAddress=acosTftpServerAddress, acosDS1RxChannelControl=acosDS1RxChannelControl, acosSDSLInterfaceType=acosSDSLInterfaceType, acosDhcpSubnet=acosDhcpSubnet, acosBridge=acosBridge, acosTftpSessionStatus=acosTftpSessionStatus, acosWANTotalRxOctets=acosWANTotalRxOctets, acosNatServerStandardPort=acosNatServerStandardPort, acosDhcpClientDnsServer=acosDhcpClientDnsServer, acosDeviceIpAddressTable=acosDeviceIpAddressTable, acosDS1ChannelConfigTable=acosDS1ChannelConfigTable, acosWANRxPllErrors=acosWANRxPllErrors, atlasComEngines=atlasComEngines, acosWANAtmRmRxCells=acosWANAtmRmRxCells, acosDhcpClientName=acosDhcpClientName, acosDeviceIpAddressSubnetMask=acosDeviceIpAddressSubnetMask, acosWANRxLongErrors=acosWANRxLongErrors, acosNatPortLow=acosNatPortLow, acosDhcpGateway=acosDhcpGateway, acosWANRxOverrunErrors=acosWANRxOverrunErrors, acosNatDeviceTranslationEnabled=acosNatDeviceTranslationEnabled, acosT1LineSlotIndex=acosT1LineSlotIndex, acosT1LineSlotInterfaceIndex=acosT1LineSlotInterfaceIndex, acosSoftwareRevision=acosSoftwareRevision, acosWANTotalRxFrames=acosWANTotalRxFrames, acosUSIConfigEntry=acosUSIConfigEntry, acosWANTxGlitchErrors=acosWANTxGlitchErrors, acosBridgeTable=acosBridgeTable, acosSDSLConfigEntry=acosSDSLConfigEntry, acosSystemReboot=acosSystemReboot, acosCardInsertedTrap=acosCardInsertedTrap, acosDS1AggChanConfigEntry=acosDS1AggChanConfigEntry, acosWANTxErrorFrames=acosWANTxErrorFrames, acosTftpInitiatedTrap=acosTftpInitiatedTrap, acosDhcpDnsServer=acosDhcpDnsServer, acosNat=acosNat, acosNatServerEntry=acosNatServerEntry, acosDhcpHighAddress=acosDhcpHighAddress, acosDeviceDescription=acosDeviceDescription, acosWANRxAbortErrors=acosWANRxAbortErrors, acosDevices=acosDevices, acosDhcpClientMacAddress=acosDhcpClientMacAddress, acosDeviceEntry=acosDeviceEntry, acosTotalSlots=acosTotalSlots, acosDeviceType=acosDeviceType, acosDeviceRipVersion=acosDeviceRipVersion, acosHardwareRevision=acosHardwareRevision, acosTftpAcosName=acosTftpAcosName, acosWANAtmPortStatus=acosWANAtmPortStatus, acosDeviceIpConnectionIndex=acosDeviceIpConnectionIndex, acosNatDevicePortIndex=acosNatDevicePortIndex, acosUSIConfigTable=acosUSIConfigTable, acosUSIInterfaceType=acosUSIInterfaceType, acosWANAtmRxCellsDiscarded=acosWANAtmRxCellsDiscarded, acosWANSpeed=acosWANSpeed, acosWANAtmTotalTxCells=acosWANAtmTotalTxCells, acosWANTxMissedFrames=acosWANTxMissedFrames, acosUSISlotIndex=acosUSISlotIndex, acosBridgeEntry=acosBridgeEntry, acosTftpFailedTrap=acosTftpFailedTrap, acosDS1AggChanSlotDeviceIndex=acosDS1AggChanSlotDeviceIndex, acosDS1TxChannelsAggregate=acosDS1TxChannelsAggregate, aceAcos=aceAcos, acosDS1ChannelIndex=acosDS1ChannelIndex, acosWANAtmClpiRxCells=acosWANAtmClpiRxCells, acosWANTotalTxFrames=acosWANTotalTxFrames, acosT1LineConfigTable=acosT1LineConfigTable, acosWANTxDiscardedFrames=acosWANTxDiscardedFrames, acosWANRxNonOctetErrors=acosWANRxNonOctetErrors, acosWANAtmClpiTxCells=acosWANAtmClpiTxCells, acosCardRemovedTrap=acosCardRemovedTrap, acosWANRxGlitchErrors=acosWANRxGlitchErrors, acosSDSLSlotInterfaceIndex=acosSDSLSlotInterfaceIndex, acosEthernetConfigTable=acosEthernetConfigTable, acosWANRxCdLostErrors=acosWANRxCdLostErrors, acosSDSL=acosSDSL, acosMemoryCapacityTable=acosMemoryCapacityTable, acosWANAtmRxHecErrors=acosWANAtmRxHecErrors, acosWANSlotIndex=acosWANSlotIndex, acosNatDeviceInterfaceIndex=acosNatDeviceInterfaceIndex, acosWANTxCtsLostErrors=acosWANTxCtsLostErrors, acosDS1AggChanSlotIndex=acosDS1AggChanSlotIndex, acosUSISlotInterfaceIndex=acosUSISlotInterfaceIndex, acosNatDeviceParameterTable=acosNatDeviceParameterTable, acosDhcp=acosDhcp, acosDeviceRipParameterEntry=acosDeviceRipParameterEntry, acosWANAtmOamRxCells=acosWANAtmOamRxCells, acosWANAtmRmTxCells=acosWANAtmRmTxCells, acosDhcpClientIndex=acosDhcpClientIndex, acosPartNumber=acosPartNumber, acosStatus=acosStatus, acosDeviceTotalsAggregate=acosDeviceTotalsAggregate, acosWANAtmOamTxCells=acosWANAtmOamTxCells, acosSDSLConfigTable=acosSDSLConfigTable, acosSystem=acosSystem, acosWANAtmStatsTable=acosWANAtmStatsTable, acosWANAtmTotalRxCells=acosWANAtmTotalRxCells, acosDeviceIpAddressEntry=acosDeviceIpAddressEntry, acosTftpOctetsRead=acosTftpOctetsRead, acosDeviceIpInterfaceIndex=acosDeviceIpInterfaceIndex, acosNatDeviceParameterEntry=acosNatDeviceParameterEntry, acosWANConfigEntry=acosWANConfigEntry, acosDS1TxChannelControl=acosDS1TxChannelControl, acosTrapObjects=acosTrapObjects, acosTftpFileName=acosTftpFileName, acosDS1=acosDS1, acosDeviceSlotIndex=acosDeviceSlotIndex, acosSerialNumber=acosSerialNumber, acosWANSlotDeviceIndex=acosWANSlotDeviceIndex, acosWANSerialStatsEntry=acosWANSerialStatsEntry, acosWANAtmEfciTxCells=acosWANAtmEfciTxCells, acosDeviceRipPoisonedReverse=acosDeviceRipPoisonedReverse, acosBridgeInterfaceIndex=acosBridgeInterfaceIndex, acosNatServerTranslatedIpAddress=acosNatServerTranslatedIpAddress, acosBridgePortIndex=acosBridgePortIndex, acosWANRxErrorFrames=acosWANRxErrorFrames, acosWANAtmStatsEntry=acosWANAtmStatsEntry, acosWANSerialStatsSlotDeviceIndex=acosWANSerialStatsSlotDeviceIndex, acosEthernetFullDuplex=acosEthernetFullDuplex, acosWANAtmStatsSlotIndex=acosWANAtmStatsSlotIndex, acosDeviceRipSlotIndex=acosDeviceRipSlotIndex, acosWANAtmStatsSlotDeviceIndex=acosWANAtmStatsSlotDeviceIndex, acosEthernetSlotIndex=acosEthernetSlotIndex, acosNatTcpTimeout=acosNatTcpTimeout, acosDeviceTotal=acosDeviceTotal, acosDS1AggChanConfigTable=acosDS1AggChanConfigTable, acosDeviceIpPortIndex=acosDeviceIpPortIndex, acosTftpApplicationName=acosTftpApplicationName, acosDeviceRipInterfaceIndex=acosDeviceRipInterfaceIndex, acosDS1ChannelSlotIndex=acosDS1ChannelSlotIndex, acosDeviceTypesAggregate=acosDeviceTypesAggregate, acosNatServerTranslatedPort=acosNatServerTranslatedPort, acosDeviceIpSlotIndex=acosDeviceIpSlotIndex, acosNatServerTable=acosNatServerTable, acosWANSerialStatsSlotIndex=acosWANSerialStatsSlotIndex, acosTftpUpgradeApplication=acosTftpUpgradeApplication, acosNatUdpTimeout=acosNatUdpTimeout, acosSDSLSlotIndex=acosSDSLSlotIndex, acosDeviceIpAddress=acosDeviceIpAddress, acosMemoryCapacityEntry=acosMemoryCapacityEntry, acosDSPCount=acosDSPCount, acosT1LineConfigEntry=acosT1LineConfigEntry, acosTftpClient=acosTftpClient, acosDS1RxChannelsAggregate=acosDS1RxChannelsAggregate, acosBridgeControl=acosBridgeControl, acosTftpSucceededTrap=acosTftpSucceededTrap, acosDeviceTable=acosDeviceTable, acosManagement=acosManagement, acosDhcpClientLeaseTime=acosDhcpClientLeaseTime, AcosDeviceTypeEnum=AcosDeviceTypeEnum, acosDhcpClientGateway=acosDhcpClientGateway, acosWAN=acosWAN, acosWANTxUnderrunErrors=acosWANTxUnderrunErrors, acosNatServerIndex=acosNatServerIndex, acosDS1ChannelConfigEntry=acosDS1ChannelConfigEntry, acosWANAtmEfciRxCells=acosWANAtmEfciRxCells, acosEthernet=acosEthernet, acosDhcpInterface=acosDhcpInterface, acosRIPControl=acosRIPControl, acosMemoryTypeIndex=acosMemoryTypeIndex, acosManagerWriteCommunity=acosManagerWriteCommunity, acosEthernetConfigEntry=acosEthernetConfigEntry, acosT1LineBuildOut=acosT1LineBuildOut, acosDeviceRipPortIndex=acosDeviceRipPortIndex, acosUSI=acosUSI, acosDeviceIpPeerAddress=acosDeviceIpPeerAddress, acosDhcpLeaseTime=acosDhcpLeaseTime, acosDhcpClientEntry=acosDhcpClientEntry, acosDhcpClientSubnetMask=acosDhcpClientSubnetMask, acosTftpFailReason=acosTftpFailReason, acosDhcpLowAddress=acosDhcpLowAddress, acosSDSLClockType=acosSDSLClockType, acosTftpUpgradeACOS=acosTftpUpgradeACOS, acosNatServerProtocol=acosNatServerProtocol, acosWANRxCrcErrors=acosWANRxCrcErrors, acosCpuUtilization=acosCpuUtilization, acosDhcpDomainName=acosDhcpDomainName, acosNatPortHigh=acosNatPortHigh, acosRouting=acosRouting, acosBridging=acosBridging, acosManagerIpAddress=acosManagerIpAddress, acosWANTotalTxOctets=acosWANTotalTxOctets, acosDS1ChannelSlotDeviceIndex=acosDS1ChannelSlotDeviceIndex, acosDhcpClientTable=acosDhcpClientTable, acosMemoryCapacity=acosMemoryCapacity, acosWANDataLinkProtocol=acosWANDataLinkProtocol, acosBridgeSlotIndex=acosBridgeSlotIndex, acosDNSServerAddress=acosDNSServerAddress, acosWANSerialStatsTable=acosWANSerialStatsTable, acosWANRxMissedFrames=acosWANRxMissedFrames, acosWANConfigTable=acosWANConfigTable, acosDhcpClientIpAddress=acosDhcpClientIpAddress, aceProductFamily=aceProductFamily, acosNatDeviceSlotIndex=acosNatDeviceSlotIndex)
