#
# PySNMP MIB module NETEXEC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETEXEC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:08:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, Counter32, NotificationType, NotificationType, iso, Unsigned32, ModuleIdentity, Gauge32, Bits, IpAddress, MibIdentifier, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Counter32", "NotificationType", "NotificationType", "iso", "Unsigned32", "ModuleIdentity", "Gauge32", "Bits", "IpAddress", "MibIdentifier", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
tylink = MibIdentifier((1, 3, 6, 1, 4, 1, 466))
netexec = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 6))
dsucsu = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 6, 1))
tyview = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 6, 2))
dsucsuSysTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 1, 1), )
if mibBuilder.loadTexts: dsucsuSysTable.setStatus('mandatory')
dsucsuSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 1, 1, 1), ).setIndexNames((0, "NETEXEC-MIB", "dsucsuSysSlot"), (0, "NETEXEC-MIB", "dsucsuSysNode"))
if mibBuilder.loadTexts: dsucsuSysEntry.setStatus('mandatory')
dsucsuSysSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuSysSlot.setStatus('mandatory')
dsucsuSysNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuSysNode.setStatus('mandatory')
dsucsuSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuSysName.setStatus('mandatory')
dsucsuSysType = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("unknown", 1), ("ons400", 2), ("fns400", 3), ("ons400e", 4), ("sns400", 5), ("ons1000", 6), ("ons232sp", 7), ("ons271sp", 8), ("ons200", 9), ("ons400n", 10), ("sns256", 11), ("sns4000", 12), ("sns1000", 13), ("ty3410", 14), ("ty3210", 15), ("ons1010n", 16), ("ty3250", 17), ("ty3000n", 18), ("ty3450n", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuSysType.setStatus('mandatory')
dsucsuSysSoftRev = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuSysSoftRev.setStatus('mandatory')
dsucsuSysHardRev = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuSysHardRev.setStatus('mandatory')
dsucsuSysNumChan = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuSysNumChan.setStatus('mandatory')
dsucsuCfgNetTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 1, 2), )
if mibBuilder.loadTexts: dsucsuCfgNetTable.setStatus('mandatory')
dsucsuCfgNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 1, 2, 1), ).setIndexNames((0, "NETEXEC-MIB", "dsucsuCfgNetSlot"), (0, "NETEXEC-MIB", "dsucsuCfgNetNode"), (0, "NETEXEC-MIB", "dsucsuCfgNetIndex"))
if mibBuilder.loadTexts: dsucsuCfgNetEntry.setStatus('mandatory')
dsucsuCfgNetSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCfgNetSlot.setStatus('mandatory')
dsucsuCfgNetNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCfgNetNode.setStatus('mandatory')
dsucsuCfgNetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCfgNetIndex.setStatus('mandatory')
dsucsuCfgNetInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("network", 1), ("dsx-1", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgNetInterface.setStatus('mandatory')
dsucsuCfgNetType = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("d4", 1), ("esf-54016", 2), ("esf-ansi", 3), ("nsms", 4), ("cept-2048", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgNetType.setStatus('mandatory')
dsucsuCfgNetCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ami", 1), ("b8zs", 2), ("hdb3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgNetCoding.setStatus('mandatory')
dsucsuCfgNetClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("internal", 1), ("loop", 2), ("external-ch1", 3), ("external-ch3", 4), ("station-clock", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgNetClockSource.setStatus('mandatory')
dsucsuCfgNetCsuEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dsx1", 1), ("csu", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgNetCsuEnable.setStatus('mandatory')
dsucsuCfgNetCsuLBO = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("db-0", 1), ("db-7-5", 2), ("db-15", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgNetCsuLBO.setStatus('mandatory')
dsucsuCfgNetCsuDensity = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("d-1-in-8", 2), ("d-1-in-16", 3), ("d-1-in-64", 4), ("d-12pt5-percent", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgNetCsuDensity.setStatus('mandatory')
dsucsuCfgNetRateMultiples = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("nx56", 1), ("nx64", 2), ("extended-mixed", 3), ("all-rates", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgNetRateMultiples.setStatus('mandatory')
dsucsuCfgNetOutputPulse = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pulse-0-133-ft", 1), ("pulse-133-266-ft", 2), ("pulse-266-399-ft", 3), ("pulse-399-533-ft", 4), ("pulse-533-655-ft", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgNetOutputPulse.setStatus('mandatory')
dsucsuCfgNetTs0 = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crc4-enable", 1), ("crc4-disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgNetTs0.setStatus('mandatory')
dsucsuCfgNetTs16 = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("multifr-align", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgNetTs16.setStatus('mandatory')
dsucsuCfgDteChanTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 1, 4), )
if mibBuilder.loadTexts: dsucsuCfgDteChanTable.setStatus('mandatory')
dsucsuCfgDteChanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 1, 4, 1), ).setIndexNames((0, "NETEXEC-MIB", "dsucsuCfgDteChanSlot"), (0, "NETEXEC-MIB", "dsucsuCfgDteChanNode"), (0, "NETEXEC-MIB", "dsucsuCfgDteChanIndex"))
if mibBuilder.loadTexts: dsucsuCfgDteChanEntry.setStatus('mandatory')
dsucsuCfgDteChanSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCfgDteChanSlot.setStatus('mandatory')
dsucsuCfgDteChanNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCfgDteChanNode.setStatus('mandatory')
dsucsuCfgDteChanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCfgDteChanIndex.setStatus('mandatory')
dsucsuCfgDteChanType = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rs232", 1), ("v35", 2), ("rs449", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgDteChanType.setStatus('mandatory')
dsucsuCfgDteChanRate = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgDteChanRate.setStatus('mandatory')
dsucsuCfgDteChanEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("b7s", 1), ("alt", 2), ("clr", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgDteChanEncoding.setStatus('mandatory')
dsucsuCfgDteChanStartDs0 = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgDteChanStartDs0.setStatus('mandatory')
dsucsuCfgDteChanCtrlSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rts-on", 1), ("rts-switch", 2), ("cts-on", 3), ("cts-auto", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgDteChanCtrlSignal.setStatus('mandatory')
dsucsuCfgDteChanTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loop1", 1), ("loop2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgDteChanTiming.setStatus('mandatory')
dsucsuCfgDteChanClockInvert = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgDteChanClockInvert.setStatus('mandatory')
dsucsuCfgDteChanDataInvert = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgDteChanDataInvert.setStatus('mandatory')
dsucsuCfgFrmChanTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 1, 5), )
if mibBuilder.loadTexts: dsucsuCfgFrmChanTable.setStatus('mandatory')
dsucsuCfgFrmChanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 1, 5, 1), ).setIndexNames((0, "NETEXEC-MIB", "dsucsuCfgFrmChanSlot"), (0, "NETEXEC-MIB", "dsucsuCfgFrmChanNode"), (0, "NETEXEC-MIB", "dsucsuCfgFrmChanIndex"))
if mibBuilder.loadTexts: dsucsuCfgFrmChanEntry.setStatus('mandatory')
dsucsuCfgFrmChanSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCfgFrmChanSlot.setStatus('mandatory')
dsucsuCfgFrmChanNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCfgFrmChanNode.setStatus('mandatory')
dsucsuCfgFrmChanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCfgFrmChanIndex.setStatus('mandatory')
dsucsuCfgFrmChanType = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pbx", 1), ("none", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCfgFrmChanType.setStatus('mandatory')
dsucsuCfgFrmChanNumDs0 = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgFrmChanNumDs0.setStatus('mandatory')
dsucsuCfgFrmChanEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ami", 1), ("b8zs", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgFrmChanEncoding.setStatus('mandatory')
dsucsuCfgFrmChanStartDs0 = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 5, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgFrmChanStartDs0.setStatus('mandatory')
dsucsuCfgFrmChanDteStartDs0 = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 5, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgFrmChanDteStartDs0.setStatus('mandatory')
dsucsuCfgFrmChanMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ctg-ds0", 1), ("alt-ds0", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgFrmChanMapping.setStatus('mandatory')
dsucsuCfgFrmChanDs0Type = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("data", 1), ("voice", 2), ("mixed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgFrmChanDs0Type.setStatus('mandatory')
dsucsuCfgFrmChanFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("d4", 1), ("esf", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgFrmChanFrameType.setStatus('mandatory')
dsucsuCfgFrmChanOutputPulse = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pulse-0-133-ft", 1), ("pulse-133-266-ft", 2), ("pulse-266-399-ft", 3), ("pulse-399-533-ft", 4), ("pulse-533-655-ft", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgFrmChanOutputPulse.setStatus('mandatory')
dsucsuCfgFrmChanNetMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ctg-ds0", 1), ("alt-ds0", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgFrmChanNetMapping.setStatus('mandatory')
dsucsuConfigSupTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 1, 7), )
if mibBuilder.loadTexts: dsucsuConfigSupTable.setStatus('mandatory')
dsucsuConfigSupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 1, 7, 1), ).setIndexNames((0, "NETEXEC-MIB", "dsucsuConfigSupSlot"), (0, "NETEXEC-MIB", "dsucsuConfigSupNode"), (0, "NETEXEC-MIB", "dsucsuConfigSupIndex"))
if mibBuilder.loadTexts: dsucsuConfigSupEntry.setStatus('mandatory')
dsucsuConfigSupSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuConfigSupSlot.setStatus('mandatory')
dsucsuConfigSupNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuConfigSupNode.setStatus('mandatory')
dsucsuConfigSupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuConfigSupIndex.setStatus('mandatory')
dsucsuConfigSupDs0 = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 7, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuConfigSupDs0.setStatus('mandatory')
dsucsuCfgSupAuxTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 1, 8), )
if mibBuilder.loadTexts: dsucsuCfgSupAuxTable.setStatus('mandatory')
dsucsuCfgSupAuxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 1, 8, 1), ).setIndexNames((0, "NETEXEC-MIB", "dsucsuCfgSupAuxSlot"), (0, "NETEXEC-MIB", "dsucsuCfgSupAuxNode"), (0, "NETEXEC-MIB", "dsucsuCfgSupAuxIndex"))
if mibBuilder.loadTexts: dsucsuCfgSupAuxEntry.setStatus('mandatory')
dsucsuCfgSupAuxSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCfgSupAuxSlot.setStatus('mandatory')
dsucsuCfgSupAuxNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCfgSupAuxNode.setStatus('mandatory')
dsucsuCfgSupAuxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCfgSupAuxIndex.setStatus('mandatory')
dsucsuCfgSupAuxFdl = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgSupAuxFdl.setStatus('mandatory')
dsucsuActvConfTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 1, 9), )
if mibBuilder.loadTexts: dsucsuActvConfTable.setStatus('mandatory')
dsucsuActvConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 1, 9, 1), ).setIndexNames((0, "NETEXEC-MIB", "dsucsuActvConfSlot"), (0, "NETEXEC-MIB", "dsucsuActvConfNode"))
if mibBuilder.loadTexts: dsucsuActvConfEntry.setStatus('mandatory')
dsucsuActvConfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuActvConfSlot.setStatus('mandatory')
dsucsuActvConfNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuActvConfNode.setStatus('mandatory')
dsucsuActvConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dsucsuActvConfIndex.setStatus('mandatory')
dsucsuEventDesTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 1, 10), )
if mibBuilder.loadTexts: dsucsuEventDesTable.setStatus('mandatory')
dsucsuEventDesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 1, 10, 1), ).setIndexNames((0, "NETEXEC-MIB", "dsucsuEventDesSlot"), (0, "NETEXEC-MIB", "dsucsuEventDesNode"))
if mibBuilder.loadTexts: dsucsuEventDesEntry.setStatus('mandatory')
dsucsuEventDesSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuEventDesSlot.setStatus('mandatory')
dsucsuEventDesNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuEventDesNode.setStatus('mandatory')
dsucsuEventNameIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuEventNameIndx.setStatus('mandatory')
dsucsuEventDesName1 = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 10, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuEventDesName1.setStatus('mandatory')
dsucsuEventDesName2 = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 10, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuEventDesName2.setStatus('mandatory')
dsucsuEventClrDest = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clearDest1", 1), ("clearDest2", 2), ("clearBothDest", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dsucsuEventClrDest.setStatus('mandatory')
dsucsuCfgMaintTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 1, 11), )
if mibBuilder.loadTexts: dsucsuCfgMaintTable.setStatus('mandatory')
dsucsuCfgMaintEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 1, 11, 1), ).setIndexNames((0, "NETEXEC-MIB", "dsucsuCfgMaintSlot"), (0, "NETEXEC-MIB", "dsucsuCfgMaintNode"))
if mibBuilder.loadTexts: dsucsuCfgMaintEntry.setStatus('mandatory')
dsucsuCfgMaintSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCfgMaintSlot.setStatus('mandatory')
dsucsuCfgMaintNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCfgMaintNode.setStatus('mandatory')
dsucsuCfgMaintChanType = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("nsms", 2), ("ascii", 3), ("alarm", 4), ("ext-event", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgMaintChanType.setStatus('mandatory')
dsucsuCfgMaintFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgMaintFlowCtrl.setStatus('mandatory')
dsucsuCfgMaintStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stopbits-1", 1), ("stopbits-1-5", 2), ("stopbits-2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgMaintStopBits.setStatus('mandatory')
dsucsuCfgMaintParity = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgMaintParity.setStatus('mandatory')
dsucsuCfgMaintDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("databits-7", 1), ("databits-8", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgMaintDataBits.setStatus('mandatory')
dsucsuCfgMaintBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("baud-1200", 1), ("baud-2400", 2), ("baud-4800", 3), ("baud-9600", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgMaintBaud.setStatus('mandatory')
dsucsuCfgCommTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 1, 12), )
if mibBuilder.loadTexts: dsucsuCfgCommTable.setStatus('mandatory')
dsucsuCfgCommEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 1, 12, 1), ).setIndexNames((0, "NETEXEC-MIB", "dsucsuCfgCommSlot"), (0, "NETEXEC-MIB", "dsucsuCfgCommNode"))
if mibBuilder.loadTexts: dsucsuCfgCommEntry.setStatus('mandatory')
dsucsuCfgCommSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCfgCommSlot.setStatus('mandatory')
dsucsuCfgCommNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCfgCommNode.setStatus('mandatory')
dsucsuCfgCommChanType = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("nsms", 2), ("ascii", 3), ("alarm", 4), ("ext-event", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgCommChanType.setStatus('mandatory')
dsucsuCfgCommFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgCommFlowCtrl.setStatus('mandatory')
dsucsuCfgCommStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stopbits-1", 1), ("stopbits-1-5", 2), ("stopbits-2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgCommStopBits.setStatus('mandatory')
dsucsuCfgCommParity = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgCommParity.setStatus('mandatory')
dsucsuCfgCommDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("databits-7", 1), ("databits-8", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgCommDataBits.setStatus('mandatory')
dsucsuCfgCommBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("baud-1200", 1), ("baud-2400", 2), ("baud-4800", 3), ("baud-9600", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgCommBaud.setStatus('mandatory')
dsucsuCfgBrdTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 1, 13), )
if mibBuilder.loadTexts: dsucsuCfgBrdTable.setStatus('mandatory')
dsucsuCfgBrdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 1, 13, 1), ).setIndexNames((0, "NETEXEC-MIB", "dsucsuCfgBrdSlot"), (0, "NETEXEC-MIB", "dsucsuCfgBrdNode"))
if mibBuilder.loadTexts: dsucsuCfgBrdEntry.setStatus('mandatory')
dsucsuCfgBrdSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCfgBrdSlot.setStatus('mandatory')
dsucsuCfgBrdNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCfgBrdNode.setStatus('mandatory')
dsucsuCfgBrdTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("master", 1), ("port1", 2), ("port2", 3), ("port3", 4), ("port4", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCfgBrdTiming.setStatus('mandatory')
dsucsuCfgDacsTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 6, 1, 14))
dsucsuCfgAutoAssignTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 1), )
if mibBuilder.loadTexts: dsucsuCfgAutoAssignTable.setStatus('mandatory')
dsucsuCfgAutoAssignEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 1, 1), ).setIndexNames((0, "NETEXEC-MIB", "dsucsuConnAutoSlot"), (0, "NETEXEC-MIB", "dsucsuConnAutoNode"), (0, "NETEXEC-MIB", "dsucsuConnAutoSrcPort"))
if mibBuilder.loadTexts: dsucsuCfgAutoAssignEntry.setStatus('mandatory')
dsucsuConnAutoSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuConnAutoSlot.setStatus('mandatory')
dsucsuConnAutoNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuConnAutoNode.setStatus('mandatory')
dsucsuConnAutoSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuConnAutoSrcPort.setStatus('mandatory')
dsucsuConnAutoStartDS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 40, 41))).clone(namedValues=NamedValues(("ds0-01", 1), ("ds0-02", 2), ("ds0-03", 3), ("ds0-04", 4), ("ds0-05", 5), ("ds0-06", 6), ("ds0-07", 7), ("ds0-08", 8), ("ds0-09", 9), ("ds0-10", 10), ("ds0-11", 11), ("ds0-12", 12), ("ds0-13", 13), ("ds0-14", 14), ("ds0-15", 15), ("ds0-16", 16), ("ds0-17", 17), ("ds0-18", 18), ("ds0-19", 19), ("ds0-20", 20), ("ds0-21", 21), ("ds0-22", 22), ("ds0-23", 23), ("ds0-24", 24), ("no-current-connections", 40), ("non-continuous-ds0s", 41)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuConnAutoStartDS0.setStatus('mandatory')
dsucsuConnAutoDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 33))).clone(namedValues=NamedValues(("port1", 1), ("port2", 2), ("port3", 3), ("port4", 4), ("not-connected", 33)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuConnAutoDestPort.setStatus('mandatory')
dsucsuConnAutoType = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("voice", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuConnAutoType.setStatus('mandatory')
dsucsuConnDteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1536000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuConnDteRate.setStatus('mandatory')
dsucsuConnDteDensity = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(56, 64))).clone(namedValues=NamedValues(("bit-7-stuff", 56), ("clear-channel", 64)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuConnDteDensity.setStatus('mandatory')
dsucsuConnDs0Required = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuConnDs0Required.setStatus('mandatory')
dsucsuConnAutoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("connections-valid", 1), ("connections-not-valid", 2), ("incorrect-bandwidth", 3), ("bandwidth-conflict", 4), ("no-current-connections", 5), ("port-type-valid", 6), ("port-type-invalid", 7), ("start-ds0-valid", 8), ("start-ds0-invalid", 9), ("port-valid", 10), ("port-invalid", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuConnAutoStatus.setStatus('mandatory')
dsucsuConnAutoUpdateCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("update", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dsucsuConnAutoUpdateCmd.setStatus('mandatory')
dsucsuCfgCurrentConnTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 2), )
if mibBuilder.loadTexts: dsucsuCfgCurrentConnTable.setStatus('mandatory')
dsucsuCfgCurrentConnections = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 2, 1), ).setIndexNames((0, "NETEXEC-MIB", "dsucsuSlot"), (0, "NETEXEC-MIB", "dsucsuNode"), (0, "NETEXEC-MIB", "dsucsuT1Index"), (0, "NETEXEC-MIB", "dsucsuDs0"))
if mibBuilder.loadTexts: dsucsuCfgCurrentConnections.setStatus('mandatory')
dsucsuSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuSlot.setStatus('mandatory')
dsucsuNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuNode.setStatus('mandatory')
dsucsuT1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuT1Index.setStatus('mandatory')
dsucsuDs0 = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDs0.setStatus('mandatory')
dsucsuDtePort = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 33))).clone(namedValues=NamedValues(("port1", 1), ("port2", 2), ("port3", 3), ("port4", 4), ("not-connected", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDtePort.setStatus('mandatory')
dsucsuType = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("voice", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuType.setStatus('mandatory')
dsucsuCfgEditConnTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 3), )
if mibBuilder.loadTexts: dsucsuCfgEditConnTable.setStatus('mandatory')
dsucsuCfgEditConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 3, 1), ).setIndexNames((0, "NETEXEC-MIB", "dsucsuConnSlot"), (0, "NETEXEC-MIB", "dsucsuConnNode"), (0, "NETEXEC-MIB", "dsucsuConnSrcPort"), (0, "NETEXEC-MIB", "dsucsuConnSrcDs0"))
if mibBuilder.loadTexts: dsucsuCfgEditConnEntry.setStatus('mandatory')
dsucsuConnSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuConnSlot.setStatus('mandatory')
dsucsuConnNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuConnNode.setStatus('mandatory')
dsucsuConnSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuConnSrcPort.setStatus('mandatory')
dsucsuConnSrcDs0 = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuConnSrcDs0.setStatus('mandatory')
dsucsuConnDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 33))).clone(namedValues=NamedValues(("port1", 1), ("port2", 2), ("port3", 3), ("port4", 4), ("not-connected", 33)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuConnDestPort.setStatus('mandatory')
dsucsuConnDestDs0 = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 40, 41))).clone(namedValues=NamedValues(("ds0-01", 1), ("ds0-02", 2), ("ds0-03", 3), ("ds0-04", 4), ("ds0-05", 5), ("ds0-06", 6), ("ds0-07", 7), ("ds0-08", 8), ("ds0-09", 9), ("ds0-10", 10), ("ds0-11", 11), ("ds0-12", 12), ("ds0-13", 13), ("ds0-14", 14), ("ds0-15", 15), ("ds0-16", 16), ("ds0-17", 17), ("ds0-18", 18), ("ds0-19", 19), ("ds0-20", 20), ("ds0-21", 21), ("ds0-22", 22), ("ds0-23", 23), ("ds0-24", 24), ("no-current-connections", 40), ("non-continuous-ds0s", 41)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuConnDestDs0.setStatus('mandatory')
dsucsuConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("voice", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuConnType.setStatus('mandatory')
dsucsuConnNumDs0s = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuConnNumDs0s.setStatus('mandatory')
dsucsuConnSetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("connections-valid", 1), ("connections-not-valid", 2), ("incorrect-bandwidth", 3), ("bandwidth-conflict", 4), ("no-current-connections", 5), ("port-type-valid", 6), ("port-type-invalid", 7), ("destination-ds0-valid", 8), ("destination-ds0-invalid", 9), ("port-valid", 10), ("port-invalid", 11), ("num-ds0s-valid", 12), ("num-ds0s-invalid", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuConnSetStatus.setStatus('mandatory')
dsucsuConnConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connect", 1), ("disconnect", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dsucsuConnConnect.setStatus('mandatory')
dsucsuConnUpdateRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("update-not-required", 1), ("update-required", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuConnUpdateRequired.setStatus('mandatory')
dsucsuConnUpdateCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("update", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dsucsuConnUpdateCmd.setStatus('mandatory')
dsucsuConnClearEditBuff = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 14, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear-edit", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dsucsuConnClearEditBuff.setStatus('mandatory')
dsucsuDiagNetTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 1, 15), )
if mibBuilder.loadTexts: dsucsuDiagNetTable.setStatus('mandatory')
dsucsuDiagNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 1, 15, 1), ).setIndexNames((0, "NETEXEC-MIB", "dsucsuDiagNetSlot"), (0, "NETEXEC-MIB", "dsucsuDiagNetNode"), (0, "NETEXEC-MIB", "dsucsuDiagNetIndex"))
if mibBuilder.loadTexts: dsucsuDiagNetEntry.setStatus('mandatory')
dsucsuDiagNetSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagNetSlot.setStatus('mandatory')
dsucsuDiagNetNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagNetNode.setStatus('mandatory')
dsucsuDiagNetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagNetIndex.setStatus('mandatory')
dsucsuDiagNetLclNetAggLpbk = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableLoopbackMode", 1), ("disableLoopbackMode", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuDiagNetLclNetAggLpbk.setStatus('mandatory')
dsucsuDiagNetLclNetLpbk = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableLoopbackMode", 1), ("disableLoopbackMode", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuDiagNetLclNetLpbk.setStatus('mandatory')
dsucsuDiagNetLclNetPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableLoopbackMode", 1), ("disableLoopbackMode", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuDiagNetLclNetPayload.setStatus('mandatory')
dsucsuDiagNetLclNetBiDir = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 15, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableLoopbackMode", 1), ("disableLoopbackMode", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuDiagNetLclNetBiDir.setStatus('mandatory')
dsucsuDiagNetRemCsuLpbk = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("transmitLoopUpCode", 1), ("transmitLoopDownCode", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuDiagNetRemCsuLpbk.setStatus('mandatory')
dsucsuDiagNetRemDsuLpbk = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableLoopbackMode", 1), ("disableLoopbackMode", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuDiagNetRemDsuLpbk.setStatus('mandatory')
dsucsuDiagNetEvElapTime = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 15, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagNetEvElapTime.setStatus('mandatory')
dsucsuDiagNetEvCRC6Err = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 15, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagNetEvCRC6Err.setStatus('mandatory')
dsucsuDiagNetEvOofErr = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 15, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagNetEvOofErr.setStatus('mandatory')
dsucsuDiagNetErrEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 15, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagNetErrEvents.setStatus('mandatory')
dsucsuDiagNetClearEvReg = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 15, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearRegister", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dsucsuDiagNetClearEvReg.setStatus('mandatory')
dsucsuDiagDteTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 1, 16), )
if mibBuilder.loadTexts: dsucsuDiagDteTable.setStatus('mandatory')
dsucsuDiagDteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 1, 16, 1), ).setIndexNames((0, "NETEXEC-MIB", "dsucsuDiagDteSlot"), (0, "NETEXEC-MIB", "dsucsuDiagDteNode"), (0, "NETEXEC-MIB", "dsucsuDiagDteIndex"))
if mibBuilder.loadTexts: dsucsuDiagDteEntry.setStatus('mandatory')
dsucsuDiagDteSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagDteSlot.setStatus('mandatory')
dsucsuDiagDteNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagDteNode.setStatus('mandatory')
dsucsuDiagDteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 16, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagDteIndex.setStatus('mandatory')
dsucsuDiagDteLocalBiDir = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableLoopbackMode", 1), ("disableLoopbackMode", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuDiagDteLocalBiDir.setStatus('mandatory')
dsucsuDiagDteLocalPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableLoopbackMode", 1), ("disableLoopbackMode", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuDiagDteLocalPayload.setStatus('mandatory')
dsucsuDiagDteRemLpbk = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableLoopbackMode", 1), ("disableLoopbackMode", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuDiagDteRemLpbk.setStatus('mandatory')
dsucsuDiagDteBertTestAct = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 16, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("startBertTest", 1), ("stopBertTest", 2), ("injectErrorBertTest", 3), ("clearErrorBertTest", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuDiagDteBertTestAct.setStatus('mandatory')
dsucsuDiagDteBertHourStrt = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 16, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagDteBertHourStrt.setStatus('mandatory')
dsucsuDiagDteBertMinStrt = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 16, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagDteBertMinStrt.setStatus('mandatory')
dsucsuDiagDteBertTimeElaps = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 16, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagDteBertTimeElaps.setStatus('mandatory')
dsucsuDiagDteBertErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 16, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagDteBertErrors.setStatus('mandatory')
dsucsuDiagFrmTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 1, 17), )
if mibBuilder.loadTexts: dsucsuDiagFrmTable.setStatus('mandatory')
dsucsuDiagFrmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 1, 17, 1), ).setIndexNames((0, "NETEXEC-MIB", "dsucsuDiagFrmSlot"), (0, "NETEXEC-MIB", "dsucsuDiagFrmNode"), (0, "NETEXEC-MIB", "dsucsuDiagFrmIndex"))
if mibBuilder.loadTexts: dsucsuDiagFrmEntry.setStatus('mandatory')
dsucsuDiagFrmSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagFrmSlot.setStatus('mandatory')
dsucsuDiagFrmNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 17, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagFrmNode.setStatus('mandatory')
dsucsuDiagFrmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 17, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagFrmIndex.setStatus('mandatory')
dsucsuDiagFrmLclLpbk = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableLoopbackMode", 1), ("disableLoopbackMode", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuDiagFrmLclLpbk.setStatus('mandatory')
dsucsuDiagFrmLclPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableLoopbackMode", 1), ("disableLoopbackMode", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuDiagFrmLclPayload.setStatus('mandatory')
dsucsuDiagFrmLclBiDir = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 17, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableLoopbackMode", 1), ("disableLoopbackMode", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuDiagFrmLclBiDir.setStatus('mandatory')
dsucsuDiagFrmRemLpbk = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 17, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("transmitLoopUpCode", 1), ("transmitLoopDownCode", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuDiagFrmRemLpbk.setStatus('mandatory')
dsucsuDiagFrmLclDte = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 17, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableLoopbackMode", 1), ("disableLoopbackMode", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuDiagFrmLclDte.setStatus('mandatory')
dsucsuDiagFrmLclDte2 = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 17, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableLoopbackMode", 1), ("disableLoopbackMode", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuDiagFrmLclDte2.setStatus('mandatory')
dsucsuDiagFrmBertTestAct = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 17, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("startBertTest", 1), ("stopBertTest", 2), ("injectErrorBertTest", 3), ("clearErrorBertTest", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuDiagFrmBertTestAct.setStatus('mandatory')
dsucsuDiagFrmEvElapTime = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 17, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagFrmEvElapTime.setStatus('mandatory')
dsucsuDiagFrmEvBpvErr = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 17, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagFrmEvBpvErr.setStatus('mandatory')
dsucsuDiagFrmEvOofErr = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 17, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagFrmEvOofErr.setStatus('mandatory')
dsucsuDiagFrmFrameErr = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 17, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagFrmFrameErr.setStatus('mandatory')
dsucsuDiagFrmClearEvReg = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 17, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearRegister", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dsucsuDiagFrmClearEvReg.setStatus('mandatory')
dsucsuDiagAuxTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 1, 18), )
if mibBuilder.loadTexts: dsucsuDiagAuxTable.setStatus('mandatory')
dsucsuDiagAuxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 1, 18, 1), ).setIndexNames((0, "NETEXEC-MIB", "dsucsuDiagAuxSlot"), (0, "NETEXEC-MIB", "dsucsuDiagAuxNode"))
if mibBuilder.loadTexts: dsucsuDiagAuxEntry.setStatus('mandatory')
dsucsuDiagAuxSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagAuxSlot.setStatus('mandatory')
dsucsuDiagAuxNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 18, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagAuxNode.setStatus('mandatory')
dsucsuDiagAuxChAStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("sync", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagAuxChAStatus.setStatus('mandatory')
dsucsuDiagAuxChBStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("sync", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagAuxChBStatus.setStatus('mandatory')
dsucsuDiagAuxFdlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("sync", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagAuxFdlStatus.setStatus('mandatory')
dsucsuDiagAuxFdl2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 18, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("sync", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagAuxFdl2Status.setStatus('mandatory')
dsucsuDiagAuxMaintStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 18, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("sync", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagAuxMaintStatus.setStatus('mandatory')
dsucsuDiagAuxCommStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 18, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("sync", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagAuxCommStatus.setStatus('mandatory')
dsucsuDiagPortTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 1, 19), )
if mibBuilder.loadTexts: dsucsuDiagPortTable.setStatus('mandatory')
dsucsuDiagPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 1, 19, 1), ).setIndexNames((0, "NETEXEC-MIB", "dsucsuDiagPortSlot"), (0, "NETEXEC-MIB", "dsucsuDiagPortNode"), (0, "NETEXEC-MIB", "dsucsuDiagPortIndex"))
if mibBuilder.loadTexts: dsucsuDiagPortEntry.setStatus('mandatory')
dsucsuDiagPortSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagPortSlot.setStatus('mandatory')
dsucsuDiagPortNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 19, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagPortNode.setStatus('mandatory')
dsucsuDiagPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 19, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagPortIndex.setStatus('mandatory')
dsucsuDiagPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 19, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("network", 2), ("dsx", 3), ("pbx", 4), ("rs449", 5), ("rs232", 6), ("mil188", 7), ("v35", 8), ("dte", 9), ("tdm", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagPortType.setStatus('mandatory')
dsucsuDiagPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 19, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("clearOK", 1), ("redAlarm", 2), ("yellowAlarm", 3), ("syncLoss", 4), ("bpvAlarm", 5), ("blueAlarm", 6), ("test", 7), ("timeout", 8), ("notApplicable", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuDiagPortStatus.setStatus('mandatory')
dsucsuIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 1, 20), )
if mibBuilder.loadTexts: dsucsuIntervalTable.setStatus('mandatory')
dsucsuIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 1, 20, 1), ).setIndexNames((0, "NETEXEC-MIB", "dsucsuIntervalSlot"), (0, "NETEXEC-MIB", "dsucsuIntervalNode"), (0, "NETEXEC-MIB", "dsucsuIntervalPort"), (0, "NETEXEC-MIB", "dsucsuIntervalNum"))
if mibBuilder.loadTexts: dsucsuIntervalEntry.setStatus('mandatory')
dsucsuIntervalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuIntervalSlot.setStatus('mandatory')
dsucsuIntervalNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 20, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuIntervalNode.setStatus('mandatory')
dsucsuIntervalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 20, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuIntervalPort.setStatus('mandatory')
dsucsuIntervalNum = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 20, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuIntervalNum.setStatus('mandatory')
dsucsuIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 20, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuIntervalESs.setStatus('mandatory')
dsucsuIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 20, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuIntervalSESs.setStatus('mandatory')
dsucsuIntervalBPVs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 20, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuIntervalBPVs.setStatus('mandatory')
dsucsuIntervalFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 20, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuIntervalFSs.setStatus('mandatory')
dsucsuCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 1, 22), )
if mibBuilder.loadTexts: dsucsuCurrentTable.setStatus('mandatory')
dsucsuCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 1, 22, 1), ).setIndexNames((0, "NETEXEC-MIB", "dsucsuCurrentSlot"), (0, "NETEXEC-MIB", "dsucsuCurrentNode"), (0, "NETEXEC-MIB", "dsucsuCurrentPort"))
if mibBuilder.loadTexts: dsucsuCurrentEntry.setStatus('mandatory')
dsucsuCurrentSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCurrentSlot.setStatus('mandatory')
dsucsuCurrentNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 22, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCurrentNode.setStatus('mandatory')
dsucsuCurrentPort = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 22, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCurrentPort.setStatus('mandatory')
dsucsuCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 22, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCurrentESs.setStatus('mandatory')
dsucsuCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 22, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCurrentSESs.setStatus('mandatory')
dsucsuCurrentBPVs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 22, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCurrentBPVs.setStatus('mandatory')
dsucsuCurrentSECs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 22, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuCurrentSECs.setStatus('mandatory')
dsucsuCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 22, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("frozen", 1), ("unfrozen", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuCurrentStatus.setStatus('mandatory')
dsucsuTotalTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 1, 24), )
if mibBuilder.loadTexts: dsucsuTotalTable.setStatus('mandatory')
dsucsuTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 1, 24, 1), ).setIndexNames((0, "NETEXEC-MIB", "dsucsuTotalSlot"), (0, "NETEXEC-MIB", "dsucsuTotalNode"), (0, "NETEXEC-MIB", "dsucsuTotalPort"))
if mibBuilder.loadTexts: dsucsuTotalEntry.setStatus('mandatory')
dsucsuTotalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuTotalSlot.setStatus('mandatory')
dsucsuTotalNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 24, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuTotalNode.setStatus('mandatory')
dsucsuTotalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 24, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuTotalPort.setStatus('mandatory')
dsucsuTotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 24, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuTotalESs.setStatus('mandatory')
dsucsuTotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 24, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuTotalSESs.setStatus('mandatory')
dsucsuTotalBPVs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 24, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuTotalBPVs.setStatus('mandatory')
dsucsuTotalSECs = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 24, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuTotalSECs.setStatus('mandatory')
dsucsuTotalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 1, 24, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("frozen", 1), ("unfrozen", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsucsuTotalStatus.setStatus('mandatory')
dsucsuAlarmType = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54))).clone(namedValues=NamedValues(("yellow-Alarm", 1), ("sync-Alarm", 2), ("red-Alarm", 3), ("bpv-Alarm", 4), ("confg-Activated", 5), ("confg-Stored", 6), ("pbx1-Yellow-Alarm", 7), ("pbx1-Red-Alarm", 8), ("pbx1-Los-Alarm", 9), ("pbx3-Yellow-Alarm", 10), ("pbx3-Red-Alarm", 11), ("pbx3-Los-Alarm", 12), ("ais-Alarm", 13), ("node-communications-lost", 14), ("sync-ais-Alarm", 15), ("ts16-ais-Alarm", 16), ("ts16-Los-Alarm", 17), ("remote-Alarm", 18), ("remote-ts16-Alarm", 19), ("frame-Error-Alarm", 20), ("crc4-Error-Alarm", 21), ("port2-Yellow-Alarm", 22), ("port2-Sync-Alarm", 23), ("port2-Red-Alarm", 24), ("port2-Bpv-Alarm", 25), ("power-Supply-Alarm", 26), ("fan-one-Failure", 27), ("fan-two-Failure", 28), ("yellow-Alarm-Clear", 29), ("sync-Alarm-Clear", 30), ("red-Alarm-Clear", 31), ("bpv-Alarm-Clear", 32), ("pbx1-Yellow-Alarm-Clear", 33), ("pbx1-Red-Alarm-Clear", 34), ("pbx1-Los-Alarm-Clear", 35), ("pbx3-Yellow-Alarm-Clear", 36), ("pbx3-Red-Alarm-Clear", 37), ("pbx3-Los-Alarm-Clear", 38), ("ais-Alarm-Clear", 39), ("node-communications-restored", 40), ("sync-ais-Alarm-Clear", 41), ("ts16-ais-Alarm-Clear", 42), ("ts16-Los-Alarm-Clear", 43), ("remote-Alarm-Clear", 44), ("remote-ts16-Alarm-Clear", 45), ("frame-Error-Alarm-Clear", 46), ("crc4-Error-Alarm-Clear", 47), ("port2-Yellow-Alarm-Clear", 48), ("port2-Sync-Alarm-Clear", 49), ("port2-Red-Alarm-Clear", 50), ("port2-Bpv-Alarm-Clear", 51), ("power-Supply-Alarm-Clear", 52), ("fan-one-Failure-Clear", 53), ("fan-two-Failure-Clear", 54)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuAlarmType.setStatus('mandatory')
dsucsuAlarmSlot = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuAlarmSlot.setStatus('mandatory')
dsucsuAlarmNode = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuAlarmNode.setStatus('mandatory')
dsucsuAlarmName = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsucsuAlarmName.setStatus('mandatory')
tyviewSysTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 6, 2, 1))
tyviewSysRevSw = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tyviewSysRevSw.setStatus('mandatory')
tyviewSysName = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysName.setStatus('mandatory')
tyviewSysId = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tyviewSysId.setStatus('mandatory')
tyviewSysTimeOutFactor = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysTimeOutFactor.setStatus('mandatory')
tyviewSysObjectId = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysObjectId.setStatus('mandatory')
tyviewSysSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tyviewSysSlotNumber.setStatus('mandatory')
tyviewSysClearDatabase = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearDatabase", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tyviewSysClearDatabase.setStatus('mandatory')
tyviewSysGetCommName = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysGetCommName.setStatus('mandatory')
tyviewSysSetCommName = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysSetCommName.setStatus('mandatory')
tyviewSysTrapCommName = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysTrapCommName.setStatus('mandatory')
tyviewSysN1TrapDest = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysN1TrapDest.setStatus('mandatory')
tyviewSysN2TrapDest = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysN2TrapDest.setStatus('mandatory')
tyviewSysDate = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysDate.setStatus('mandatory')
tyviewSysTime = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysTime.setStatus('mandatory')
tyviewSysMjrMnrLED = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("led-Off", 1), ("led-Red", 2), ("led-Green", 3), ("led-Yellow", 4), ("led-RedYellow", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tyviewSysMjrMnrLED.setStatus('mandatory')
tyviewSysFanPSLED = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("led-Off", 1), ("led-Red", 2), ("led-Green", 3), ("led-Yellow", 4), ("led-RedYellow", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tyviewSysFanPSLED.setStatus('mandatory')
tyviewSysCtlrLED = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("led-Off", 1), ("led-Red", 2), ("led-Green", 3), ("led-Yellow", 4), ("led-RedYellow", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tyviewSysCtlrLED.setStatus('mandatory')
tyviewSysSlipLED = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("led-Off", 1), ("led-Red", 2), ("led-Green", 3), ("led-Yellow", 4), ("led-RedYellow", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tyviewSysSlipLED.setStatus('mandatory')
tyviewSysCtlChLED = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("led-Off", 1), ("led-Red", 2), ("led-Green", 3), ("led-Yellow", 4), ("led-RedYellow", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tyviewSysCtlChLED.setStatus('mandatory')
tyviewSysTDMLED = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("led-Off", 1), ("led-Red", 2), ("led-Green", 3), ("led-Yellow", 4), ("led-RedYellow", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tyviewSysTDMLED.setStatus('mandatory')
tyviewSysMaintUseage = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("command", 2), ("slip", 3), ("tp-modem", 4), ("diagnostic", 5), ("ppp", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysMaintUseage.setStatus('mandatory')
tyviewSysMaintDataBits = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("databits-7", 1), ("databits-8", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysMaintDataBits.setStatus('mandatory')
tyviewSysMaintRate = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("rate-1200", 1), ("rate-2400", 2), ("rate-4800", 3), ("rate-9600", 4), ("rate-19200", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysMaintRate.setStatus('mandatory')
tyviewSysMaintStopBits = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stopbits-1", 1), ("stopbits-2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysMaintStopBits.setStatus('mandatory')
tyviewSysMaintParity = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysMaintParity.setStatus('mandatory')
tyviewSysMaintMtu = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysMaintMtu.setStatus('mandatory')
tyviewSysMaintCompression = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysMaintCompression.setStatus('mandatory')
tyviewSysMaintSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysMaintSubnetMask.setStatus('mandatory')
tyviewSysMaintLocalIP = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysMaintLocalIP.setStatus('mandatory')
tyviewSysMaintPeerIP = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysMaintPeerIP.setStatus('mandatory')
tyviewSysComUseage = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("command", 2), ("slip", 3), ("tp-modem", 4), ("diagnostic", 5), ("ppp", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysComUseage.setStatus('mandatory')
tyviewSysComDataBits = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("databits-7", 1), ("databits-8", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysComDataBits.setStatus('mandatory')
tyviewSysComRate = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("rate-1200", 1), ("rate-2400", 2), ("rate-4800", 3), ("rate-9600", 4), ("rate-19200", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysComRate.setStatus('mandatory')
tyviewSysComStopBits = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stopbits-1", 1), ("stopbits-2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysComStopBits.setStatus('mandatory')
tyviewSysComParity = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysComParity.setStatus('mandatory')
tyviewSysComMtu = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysComMtu.setStatus('mandatory')
tyviewSysComCompression = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysComCompression.setStatus('mandatory')
tyviewSysComSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysComSubnetMask.setStatus('mandatory')
tyviewSysComLocalIP = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysComLocalIP.setStatus('mandatory')
tyviewSysComPeerIP = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysComPeerIP.setStatus('mandatory')
tyviewSysTelnetEna = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysTelnetEna.setStatus('mandatory')
tyviewSysTelnetTO = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewSysTelnetTO.setStatus('mandatory')
tyviewSysClrMjrMin = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearMajorMinor", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tyviewSysClrMjrMin.setStatus('mandatory')
tyviewDatabaseTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 2, 2), )
if mibBuilder.loadTexts: tyviewDatabaseTable.setStatus('mandatory')
tyviewDatabaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 2, 2, 1), ).setIndexNames((0, "NETEXEC-MIB", "tyviewDatabaseSlot"), (0, "NETEXEC-MIB", "tyviewDatabaseNode"))
if mibBuilder.loadTexts: tyviewDatabaseEntry.setStatus('mandatory')
tyviewDatabaseSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tyviewDatabaseSlot.setStatus('mandatory')
tyviewDatabaseNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tyviewDatabaseNode.setStatus('mandatory')
tyviewDatabaseName = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewDatabaseName.setStatus('mandatory')
tyviewDatabaseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("timeout", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tyviewDatabaseStatus.setStatus('mandatory')
tyviewBroadcastTable = MibIdentifier((1, 3, 6, 1, 4, 1, 466, 6, 2, 3))
tyviewBroadcastSetTime = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("setTime", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tyviewBroadcastSetTime.setStatus('mandatory')
tyviewBroadcastForwardAlarms = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("forwardAlarms", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tyviewBroadcastForwardAlarms.setStatus('mandatory')
tyviewBroadcastClearLoopbacks = MibScalar((1, 3, 6, 1, 4, 1, 466, 6, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clearNetLoopbacks", 1), ("clearChanLoopbacks", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tyviewBroadcastClearLoopbacks.setStatus('mandatory')
tyviewTPTable = MibTable((1, 3, 6, 1, 4, 1, 466, 6, 2, 4), )
if mibBuilder.loadTexts: tyviewTPTable.setStatus('mandatory')
tyviewTPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 466, 6, 2, 4, 1), ).setIndexNames((0, "NETEXEC-MIB", "tyviewTPRecord"))
if mibBuilder.loadTexts: tyviewTPEntry.setStatus('mandatory')
tyviewTPRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tyviewTPRecord.setStatus('mandatory')
tyviewTPMonNodeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("all-nodes", 2), ("node-specific", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewTPMonNodeMode.setStatus('mandatory')
tyviewTPNode = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 2, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewTPNode.setStatus('mandatory')
tyviewTPAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("major", 1), ("minor", 2), ("all", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewTPAlarmType.setStatus('mandatory')
tyviewTPTriggerEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alarm-on", 1), ("alarm-instance", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewTPTriggerEvent.setStatus('mandatory')
tyviewTPInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 2, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewTPInstance.setStatus('mandatory')
tyviewTPInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 2, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewTPInterval.setStatus('mandatory')
tyviewTPEventAction = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 2, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewTPEventAction.setStatus('mandatory')
tyviewTPDryContact = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 2, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dry-contact-off", 1), ("dry-contact-major", 2), ("dry-contact-minor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tyviewTPDryContact.setStatus('mandatory')
tyviewTPClearDryContact = MibTableColumn((1, 3, 6, 1, 4, 1, 466, 6, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear-major", 1), ("clear-minor", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tyviewTPClearDryContact.setStatus('mandatory')
dsucsuTrap = NotificationType((1, 3, 6, 1, 4, 1, 466, 6, 1) + (0,0)).setObjects(("NETEXEC-MIB", "dsucsuAlarmType"), ("NETEXEC-MIB", "dsucsuAlarmSlot"), ("NETEXEC-MIB", "dsucsuAlarmNode"), ("NETEXEC-MIB", "dsucsuAlarmName"))
mibBuilder.exportSymbols("NETEXEC-MIB", dsucsuDiagPortType=dsucsuDiagPortType, dsucsuCurrentSECs=dsucsuCurrentSECs, dsucsuIntervalFSs=dsucsuIntervalFSs, dsucsuCfgFrmChanMapping=dsucsuCfgFrmChanMapping, dsucsuCfgDteChanCtrlSignal=dsucsuCfgDteChanCtrlSignal, dsucsuSysName=dsucsuSysName, tyviewSysMaintUseage=tyviewSysMaintUseage, tyviewTPClearDryContact=tyviewTPClearDryContact, dsucsuCfgMaintBaud=dsucsuCfgMaintBaud, dsucsuCfgMaintNode=dsucsuCfgMaintNode, dsucsuTotalNode=dsucsuTotalNode, dsucsuCfgCommParity=dsucsuCfgCommParity, dsucsuDiagFrmClearEvReg=dsucsuDiagFrmClearEvReg, dsucsuDiagNetEvCRC6Err=dsucsuDiagNetEvCRC6Err, dsucsuCfgMaintEntry=dsucsuCfgMaintEntry, dsucsuCfgAutoAssignEntry=dsucsuCfgAutoAssignEntry, tyviewSysTable=tyviewSysTable, netexec=netexec, tyviewSysTrapCommName=tyviewSysTrapCommName, dsucsuDiagNetTable=dsucsuDiagNetTable, dsucsuCfgMaintParity=dsucsuCfgMaintParity, dsucsuCurrentPort=dsucsuCurrentPort, dsucsuCfgBrdTable=dsucsuCfgBrdTable, dsucsuCfgNetCoding=dsucsuCfgNetCoding, dsucsuCfgNetCsuLBO=dsucsuCfgNetCsuLBO, tyviewSysComLocalIP=tyviewSysComLocalIP, tyviewSysSlotNumber=tyviewSysSlotNumber, dsucsuCfgCurrentConnTable=dsucsuCfgCurrentConnTable, tyviewSysTimeOutFactor=tyviewSysTimeOutFactor, dsucsuCfgCommBaud=dsucsuCfgCommBaud, dsucsuCfgNetNode=dsucsuCfgNetNode, tyviewBroadcastClearLoopbacks=tyviewBroadcastClearLoopbacks, dsucsuCfgMaintChanType=dsucsuCfgMaintChanType, dsucsuCfgFrmChanDteStartDs0=dsucsuCfgFrmChanDteStartDs0, tyviewSysSlipLED=tyviewSysSlipLED, tyviewSysComCompression=tyviewSysComCompression, dsucsuDiagFrmBertTestAct=dsucsuDiagFrmBertTestAct, dsucsuCfgDteChanIndex=dsucsuCfgDteChanIndex, dsucsuEventClrDest=dsucsuEventClrDest, dsucsuDiagAuxCommStatus=dsucsuDiagAuxCommStatus, dsucsuDiagNetRemDsuLpbk=dsucsuDiagNetRemDsuLpbk, dsucsuConfigSupEntry=dsucsuConfigSupEntry, tyviewSysTime=tyviewSysTime, tyviewSysN1TrapDest=tyviewSysN1TrapDest, dsucsuCurrentSESs=dsucsuCurrentSESs, dsucsuDiagNetNode=dsucsuDiagNetNode, dsucsuSysHardRev=dsucsuSysHardRev, dsucsuConfigSupSlot=dsucsuConfigSupSlot, dsucsuConnSlot=dsucsuConnSlot, dsucsuTotalESs=dsucsuTotalESs, dsucsuSysEntry=dsucsuSysEntry, enterprises=enterprises, dsucsuCfgNetIndex=dsucsuCfgNetIndex, tyviewSysComParity=tyviewSysComParity, dsucsuCfgNetRateMultiples=dsucsuCfgNetRateMultiples, dsucsuDs0=dsucsuDs0, dsucsuCfgFrmChanSlot=dsucsuCfgFrmChanSlot, dsucsuCfgFrmChanStartDs0=dsucsuCfgFrmChanStartDs0, tyviewTPRecord=tyviewTPRecord, dsucsuCfgBrdSlot=dsucsuCfgBrdSlot, tyviewSysMaintPeerIP=tyviewSysMaintPeerIP, dsucsuDiagPortEntry=dsucsuDiagPortEntry, dsucsuSysSoftRev=dsucsuSysSoftRev, dsucsuDiagFrmLclDte2=dsucsuDiagFrmLclDte2, dsucsuCfgNetTable=dsucsuCfgNetTable, dsucsuCfgNetInterface=dsucsuCfgNetInterface, dsucsuTotalStatus=dsucsuTotalStatus, private=private, dsucsuConnDestPort=dsucsuConnDestPort, dsucsuConnUpdateRequired=dsucsuConnUpdateRequired, dsucsuDiagFrmFrameErr=dsucsuDiagFrmFrameErr, dsucsuCfgNetOutputPulse=dsucsuCfgNetOutputPulse, dsucsuTotalSECs=dsucsuTotalSECs, dsucsuCfgBrdNode=dsucsuCfgBrdNode, dsucsuSysNumChan=dsucsuSysNumChan, dsucsuCfgCommDataBits=dsucsuCfgCommDataBits, dsucsuIntervalESs=dsucsuIntervalESs, tyviewSysTelnetTO=tyviewSysTelnetTO, dsucsuDiagAuxChBStatus=dsucsuDiagAuxChBStatus, tyviewTPTriggerEvent=tyviewTPTriggerEvent, dsucsuCfgNetCsuEnable=dsucsuCfgNetCsuEnable, tyviewSysMaintDataBits=tyviewSysMaintDataBits, dsucsuCfgCommTable=dsucsuCfgCommTable, dsucsuCfgBrdTiming=dsucsuCfgBrdTiming, dsucsuCfgFrmChanFrameType=dsucsuCfgFrmChanFrameType, dsucsuDiagAuxSlot=dsucsuDiagAuxSlot, tyviewSysGetCommName=tyviewSysGetCommName, dsucsuEventDesNode=dsucsuEventDesNode, tyview=tyview, dsucsuCfgEditConnEntry=dsucsuCfgEditConnEntry, dsucsuCfgDteChanStartDs0=dsucsuCfgDteChanStartDs0, tyviewSysComStopBits=tyviewSysComStopBits, dsucsuCfgSupAuxIndex=dsucsuCfgSupAuxIndex, dsucsuEventNameIndx=dsucsuEventNameIndx, dsucsuCfgDteChanTiming=dsucsuCfgDteChanTiming, tyviewSysClrMjrMin=tyviewSysClrMjrMin, tyviewSysMaintParity=tyviewSysMaintParity, dsucsuT1Index=dsucsuT1Index, dsucsuDiagDteLocalPayload=dsucsuDiagDteLocalPayload, tyviewSysMaintStopBits=tyviewSysMaintStopBits, dsucsuCfgCommFlowCtrl=dsucsuCfgCommFlowCtrl, dsucsuEventDesTable=dsucsuEventDesTable, tyviewTPNode=tyviewTPNode, internet=internet, dsucsuConnDteRate=dsucsuConnDteRate, dsucsuConfigSupNode=dsucsuConfigSupNode, dsucsuConnType=dsucsuConnType, dsucsuTotalTable=dsucsuTotalTable, tyviewSysId=tyviewSysId, dsucsuCurrentTable=dsucsuCurrentTable, dsucsuConnUpdateCmd=dsucsuConnUpdateCmd, dsucsuCfgCommChanType=dsucsuCfgCommChanType, dsucsuDiagPortSlot=dsucsuDiagPortSlot, dsucsuSysNode=dsucsuSysNode, dsucsuDiagAuxMaintStatus=dsucsuDiagAuxMaintStatus, dsucsuTotalSESs=dsucsuTotalSESs, tyviewDatabaseEntry=tyviewDatabaseEntry, dsucsuDiagNetLclNetAggLpbk=dsucsuDiagNetLclNetAggLpbk, dsucsuDiagDteBertMinStrt=dsucsuDiagDteBertMinStrt, dsucsuIntervalSlot=dsucsuIntervalSlot, dsucsuCfgCommNode=dsucsuCfgCommNode, dsucsuCfgDteChanRate=dsucsuCfgDteChanRate, dsucsuConnAutoSlot=dsucsuConnAutoSlot, dsucsuConfigSupTable=dsucsuConfigSupTable, dsucsuCfgNetType=dsucsuCfgNetType, dsucsuCfgNetCsuDensity=dsucsuCfgNetCsuDensity, dsucsuCfgEditConnTable=dsucsuCfgEditConnTable, dsucsuEventDesName1=dsucsuEventDesName1, tyviewSysComSubnetMask=tyviewSysComSubnetMask, dsucsuConnAutoStartDS0=dsucsuConnAutoStartDS0, tyviewBroadcastTable=tyviewBroadcastTable, dsucsuDiagDteBertTestAct=dsucsuDiagDteBertTestAct, tyviewSysName=tyviewSysName, dsucsuCurrentBPVs=dsucsuCurrentBPVs, dsucsuDiagDteBertHourStrt=dsucsuDiagDteBertHourStrt, tyviewSysComDataBits=tyviewSysComDataBits, tyviewTPDryContact=tyviewTPDryContact, tyviewSysMaintRate=tyviewSysMaintRate, tyviewBroadcastForwardAlarms=tyviewBroadcastForwardAlarms, dsucsuCfgSupAuxEntry=dsucsuCfgSupAuxEntry, dsucsuNode=dsucsuNode, dsucsuDiagPortIndex=dsucsuDiagPortIndex, dsucsuIntervalBPVs=dsucsuIntervalBPVs, dsucsuDiagNetSlot=dsucsuDiagNetSlot, dsucsuDiagNetEntry=dsucsuDiagNetEntry, tyviewSysComUseage=tyviewSysComUseage, dsucsuDiagNetRemCsuLpbk=dsucsuDiagNetRemCsuLpbk, dsucsuCfgNetSlot=dsucsuCfgNetSlot, dsucsuCfgFrmChanNetMapping=dsucsuCfgFrmChanNetMapping, tyviewSysDate=tyviewSysDate, tyviewSysFanPSLED=tyviewSysFanPSLED, dsucsuCfgFrmChanType=dsucsuCfgFrmChanType, tyviewSysSetCommName=tyviewSysSetCommName, dsucsuCfgFrmChanEncoding=dsucsuCfgFrmChanEncoding, dsucsuDiagPortTable=dsucsuDiagPortTable, dsucsuConnDteDensity=dsucsuConnDteDensity, dsucsuTotalEntry=dsucsuTotalEntry, dsucsuCfgMaintDataBits=dsucsuCfgMaintDataBits, tyviewSysComRate=tyviewSysComRate, dsucsuSysType=dsucsuSysType, tyviewSysComPeerIP=tyviewSysComPeerIP, dsucsuCfgCommStopBits=dsucsuCfgCommStopBits, dsucsuCfgDteChanTable=dsucsuCfgDteChanTable, dsucsuDiagFrmLclBiDir=dsucsuDiagFrmLclBiDir, tyviewSysRevSw=tyviewSysRevSw, tyviewTPEntry=tyviewTPEntry, dsucsuDiagPortNode=dsucsuDiagPortNode, dsucsuDiagDteNode=dsucsuDiagDteNode, dsucsuConfigSupIndex=dsucsuConfigSupIndex, dsucsuCfgCurrentConnections=dsucsuCfgCurrentConnections, dsucsuIntervalTable=dsucsuIntervalTable, dsucsuCfgDteChanSlot=dsucsuCfgDteChanSlot, dsucsuSysSlot=dsucsuSysSlot, dsucsuDiagNetClearEvReg=dsucsuDiagNetClearEvReg, dsucsuDiagFrmLclDte=dsucsuDiagFrmLclDte, dsucsuDiagFrmEntry=dsucsuDiagFrmEntry, dsucsuIntervalSESs=dsucsuIntervalSESs, dsucsuCfgNetTs0=dsucsuCfgNetTs0, dsucsuActvConfEntry=dsucsuActvConfEntry, dsucsuAlarmSlot=dsucsuAlarmSlot, dsucsuDiagDteIndex=dsucsuDiagDteIndex, dsucsuDiagNetEvElapTime=dsucsuDiagNetEvElapTime, dsucsuConnClearEditBuff=dsucsuConnClearEditBuff, tyviewDatabaseTable=tyviewDatabaseTable, tyviewSysMjrMnrLED=tyviewSysMjrMnrLED, dsucsuTotalSlot=dsucsuTotalSlot, dsucsuDiagPortStatus=dsucsuDiagPortStatus, tyviewBroadcastSetTime=tyviewBroadcastSetTime, tyviewTPInterval=tyviewTPInterval, dsucsuCfgNetClockSource=dsucsuCfgNetClockSource, dsucsuDiagFrmEvBpvErr=dsucsuDiagFrmEvBpvErr, dsucsuCfgCommSlot=dsucsuCfgCommSlot, tyviewSysMaintCompression=tyviewSysMaintCompression, dsucsuConnDs0Required=dsucsuConnDs0Required, tyviewSysCtlrLED=tyviewSysCtlrLED, dsucsuCfgMaintTable=dsucsuCfgMaintTable, dsucsuCfgAutoAssignTable=dsucsuCfgAutoAssignTable, dsucsuDiagNetLclNetBiDir=dsucsuDiagNetLclNetBiDir, dsucsuDiagDteTable=dsucsuDiagDteTable, dsucsuIntervalEntry=dsucsuIntervalEntry, dsucsuCfgMaintFlowCtrl=dsucsuCfgMaintFlowCtrl, tyviewTPAlarmType=tyviewTPAlarmType, dsucsuCfgFrmChanOutputPulse=dsucsuCfgFrmChanOutputPulse, dsucsuDiagFrmTable=dsucsuDiagFrmTable, tyviewTPMonNodeMode=tyviewTPMonNodeMode, dsucsuCfgFrmChanTable=dsucsuCfgFrmChanTable, dsucsuDiagNetLclNetLpbk=dsucsuDiagNetLclNetLpbk, dsucsuSysTable=dsucsuSysTable, tyviewDatabaseSlot=tyviewDatabaseSlot, dsucsuDiagDteLocalBiDir=dsucsuDiagDteLocalBiDir, tyviewSysN2TrapDest=tyviewSysN2TrapDest, dsucsuDiagDteRemLpbk=dsucsuDiagDteRemLpbk, dsucsuTrap=dsucsuTrap, dsucsuType=dsucsuType, tylink=tylink, dsucsuDiagFrmEvElapTime=dsucsuDiagFrmEvElapTime, dsucsuCfgBrdEntry=dsucsuCfgBrdEntry, dsucsuDiagFrmRemLpbk=dsucsuDiagFrmRemLpbk, dsucsuCurrentNode=dsucsuCurrentNode, dsucsuCfgDacsTable=dsucsuCfgDacsTable, dsucsuConnDestDs0=dsucsuConnDestDs0, dsucsu=dsucsu, dsucsuCfgMaintStopBits=dsucsuCfgMaintStopBits, tyviewSysMaintSubnetMask=tyviewSysMaintSubnetMask, dsucsuCfgDteChanDataInvert=dsucsuCfgDteChanDataInvert, dsucsuActvConfIndex=dsucsuActvConfIndex, dsucsuEventDesName2=dsucsuEventDesName2, tyviewDatabaseNode=tyviewDatabaseNode, tyviewSysTDMLED=tyviewSysTDMLED, tyviewSysMaintLocalIP=tyviewSysMaintLocalIP, dsucsuAlarmType=dsucsuAlarmType, dsucsuConnAutoSrcPort=dsucsuConnAutoSrcPort, dsucsuConnAutoNode=dsucsuConnAutoNode, dsucsuDiagNetLclNetPayload=dsucsuDiagNetLclNetPayload, tyviewSysTelnetEna=tyviewSysTelnetEna, dsucsuCfgFrmChanDs0Type=dsucsuCfgFrmChanDs0Type, dsucsuDiagAuxFdlStatus=dsucsuDiagAuxFdlStatus, dsucsuDiagAuxFdl2Status=dsucsuDiagAuxFdl2Status, dsucsuConnAutoStatus=dsucsuConnAutoStatus, dsucsuDiagDteEntry=dsucsuDiagDteEntry, dsucsuTotalBPVs=dsucsuTotalBPVs, dsucsuCurrentEntry=dsucsuCurrentEntry, dsucsuCurrentSlot=dsucsuCurrentSlot, dsucsuConnSrcPort=dsucsuConnSrcPort, dsucsuCfgCommEntry=dsucsuCfgCommEntry, dsucsuCfgFrmChanNode=dsucsuCfgFrmChanNode, dsucsuCfgSupAuxNode=dsucsuCfgSupAuxNode, dsucsuDiagFrmIndex=dsucsuDiagFrmIndex, dsucsuAlarmName=dsucsuAlarmName, dsucsuCfgSupAuxSlot=dsucsuCfgSupAuxSlot, dsucsuDtePort=dsucsuDtePort, dsucsuIntervalPort=dsucsuIntervalPort, dsucsuCfgSupAuxFdl=dsucsuCfgSupAuxFdl, dsucsuCfgDteChanEntry=dsucsuCfgDteChanEntry)
mibBuilder.exportSymbols("NETEXEC-MIB", dsucsuConnAutoUpdateCmd=dsucsuConnAutoUpdateCmd, dsucsuCfgDteChanClockInvert=dsucsuCfgDteChanClockInvert, dsucsuCurrentESs=dsucsuCurrentESs, dsucsuDiagAuxEntry=dsucsuDiagAuxEntry, dsucsuConnAutoDestPort=dsucsuConnAutoDestPort, dsucsuConnConnect=dsucsuConnConnect, dsucsuAlarmNode=dsucsuAlarmNode, dsucsuActvConfSlot=dsucsuActvConfSlot, dsucsuDiagDteBertTimeElaps=dsucsuDiagDteBertTimeElaps, dsucsuActvConfNode=dsucsuActvConfNode, dsucsuDiagFrmNode=dsucsuDiagFrmNode, dsucsuSlot=dsucsuSlot, dsucsuConnNumDs0s=dsucsuConnNumDs0s, dsucsuDiagFrmLclLpbk=dsucsuDiagFrmLclLpbk, dsucsuCfgDteChanNode=dsucsuCfgDteChanNode, dsucsuDiagFrmSlot=dsucsuDiagFrmSlot, dsucsuConnSrcDs0=dsucsuConnSrcDs0, dsucsuCurrentStatus=dsucsuCurrentStatus, dsucsuCfgNetEntry=dsucsuCfgNetEntry, tyviewSysClearDatabase=tyviewSysClearDatabase, dsucsuCfgSupAuxTable=dsucsuCfgSupAuxTable, dsucsuDiagNetIndex=dsucsuDiagNetIndex, dsucsuTotalPort=dsucsuTotalPort, dsucsuDiagAuxTable=dsucsuDiagAuxTable, dsucsuIntervalNum=dsucsuIntervalNum, dsucsuCfgNetTs16=dsucsuCfgNetTs16, dsucsuIntervalNode=dsucsuIntervalNode, dsucsuDiagAuxChAStatus=dsucsuDiagAuxChAStatus, dsucsuCfgFrmChanEntry=dsucsuCfgFrmChanEntry, tyviewTPEventAction=tyviewTPEventAction, dsucsuCfgDteChanEncoding=dsucsuCfgDteChanEncoding, dsucsuDiagDteBertErrors=dsucsuDiagDteBertErrors, tyviewTPInstance=tyviewTPInstance, tyviewSysComMtu=tyviewSysComMtu, tyviewTPTable=tyviewTPTable, tyviewDatabaseName=tyviewDatabaseName, tyviewDatabaseStatus=tyviewDatabaseStatus, dsucsuCfgFrmChanIndex=dsucsuCfgFrmChanIndex, dsucsuDiagDteSlot=dsucsuDiagDteSlot, dsucsuCfgFrmChanNumDs0=dsucsuCfgFrmChanNumDs0, dsucsuConfigSupDs0=dsucsuConfigSupDs0, dsucsuDiagAuxNode=dsucsuDiagAuxNode, dsucsuActvConfTable=dsucsuActvConfTable, dsucsuDiagFrmEvOofErr=dsucsuDiagFrmEvOofErr, dsucsuConnSetStatus=dsucsuConnSetStatus, dsucsuCfgMaintSlot=dsucsuCfgMaintSlot, dsucsuConnAutoType=dsucsuConnAutoType, dsucsuDiagNetErrEvents=dsucsuDiagNetErrEvents, dsucsuDiagFrmLclPayload=dsucsuDiagFrmLclPayload, dsucsuConnNode=dsucsuConnNode, dsucsuCfgDteChanType=dsucsuCfgDteChanType, tyviewSysObjectId=tyviewSysObjectId, tyviewSysCtlChLED=tyviewSysCtlChLED, tyviewSysMaintMtu=tyviewSysMaintMtu, dsucsuEventDesSlot=dsucsuEventDesSlot, dsucsuDiagNetEvOofErr=dsucsuDiagNetEvOofErr, dsucsuEventDesEntry=dsucsuEventDesEntry)
