#
# PySNMP MIB module Wellfleet-IPV6-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-IPV6-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:33:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, iso, NotificationType, TimeTicks, ModuleIdentity, ObjectIdentity, Unsigned32, Counter32, MibIdentifier, Counter64, Gauge32, IpAddress, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "iso", "NotificationType", "TimeTicks", "ModuleIdentity", "ObjectIdentity", "Unsigned32", "Counter32", "MibIdentifier", "Counter64", "Gauge32", "IpAddress", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "PhysAddress")
wfIpv6Group, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfIpv6Group")
class Ipv6Address(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

class Ipv6AddressPrefix(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 16)

wfIpv6RoutingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1))
wfIpv6IcmpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 2))
wfIpv6NDiscGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 3))
wfIpv6UdpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 4))
wfIpv6LogGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 5))
wfIpv6PolicyGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 6))
wfIpv6RoutingGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1))
wfIpv6Base = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 1))
wfIpv6BaseDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6BaseDelete.setStatus('mandatory')
wfIpv6BaseDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6BaseDisable.setStatus('mandatory')
wfIpv6BaseState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("invalid", 4), ("notpres", 5))).clone('notpres')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6BaseState.setStatus('mandatory')
wfIpv6BaseForwarding = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forwarding", 1), ("notforwarding", 2))).clone('forwarding')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6BaseForwarding.setStatus('mandatory')
wfIpv6BaseDefaultHopLimit = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6BaseDefaultHopLimit.setStatus('mandatory')
wfIpv6BaseMinLinkMTU = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(296, 65535)).clone(576)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6BaseMinLinkMTU.setStatus('mandatory')
wfIpv6BaseMTUDiscovery = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6BaseMTUDiscovery.setStatus('mandatory')
wfIpv6BaseMTUTimeout = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 71582788)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6BaseMTUTimeout.setStatus('mandatory')
wfIpv6BaseIfNumber = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6BaseIfNumber.setStatus('mandatory')
wfIpv6BaseNetworks = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6BaseNetworks.setStatus('mandatory')
wfIpv6BaseNodes = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6BaseNodes.setStatus('mandatory')
wfIpv6BaseHighestFilterRule = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(31)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6BaseHighestFilterRule.setStatus('mandatory')
wfIpv6IfTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 2), )
if mibBuilder.loadTexts: wfIpv6IfTable.setStatus('mandatory')
wfIpv6IfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 2, 1), ).setIndexNames((0, "Wellfleet-IPV6-MIB", "wfIpv6IfIndex"))
if mibBuilder.loadTexts: wfIpv6IfEntry.setStatus('mandatory')
wfIpv6IfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6IfDelete.setStatus('mandatory')
wfIpv6IfDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6IfDisable.setStatus('mandatory')
wfIpv6IfState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("up", 1), ("tokenless", 2), ("down", 3), ("init", 4), ("invalid", 5), ("notpres", 6))).clone('notpres')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IfState.setStatus('mandatory')
wfIpv6IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IfIndex.setStatus('mandatory')
wfIpv6IfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6IfDescr.setStatus('mandatory')
wfIpv6IfCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6IfCircuit.setStatus('mandatory')
wfIpv6IfCfgToken = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6IfCfgToken.setStatus('mandatory')
wfIpv6IfCfgTokenLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6IfCfgTokenLength.setStatus('mandatory')
wfIpv6IfToken = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 2, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IfToken.setStatus('mandatory')
wfIpv6IfTokenLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IfTokenLength.setStatus('mandatory')
wfIpv6IfCfgPhysicalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 2, 1, 11), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6IfCfgPhysicalAddress.setStatus('mandatory')
wfIpv6IfPhysicalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 2, 1, 12), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IfPhysicalAddress.setStatus('mandatory')
wfIpv6IfCfgLinkMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6IfCfgLinkMTU.setStatus('mandatory')
wfIpv6IfFwdCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20480)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6IfFwdCacheSize.setStatus('mandatory')
wfIpv6IfSlotMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 2, 1, 15), Gauge32().clone(4294705152)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6IfSlotMask.setStatus('mandatory')
wfIpv6IfLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 2, 1, 16), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IfLastChange.setStatus('mandatory')
wfIpv6IfReasmMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IfReasmMaxSize.setStatus('mandatory')
wfIpv6IfMaxInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IfMaxInfo.setStatus('mandatory')
wfIpv6IfRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6IfRedirect.setStatus('mandatory')
wfIpv6IfIcmpErrorLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 2, 1, 20), Integer32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6IfIcmpErrorLimit.setStatus('mandatory')
wfIpv6IfTrEndStation = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6IfTrEndStation.setStatus('mandatory')
wfIpv6IfSMDSGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 2, 1, 22), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6IfSMDSGroupAddress.setStatus('mandatory')
wfIpv6IfFRBcastDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 2, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6IfFRBcastDlci.setStatus('mandatory')
wfIpv6IfFRMcast1Dlci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 2, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6IfFRMcast1Dlci.setStatus('mandatory')
wfIpv6IfFRMcast2Dlci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 2, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6IfFRMcast2Dlci.setStatus('mandatory')
wfIpv6IfTunnelProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ip4st", 1), ("ip6st", 2), ("ip4sa", 3), ("ip6sa", 4), ("ip4au", 5), ("ip6au", 6))).clone('ip4st')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6IfTunnelProtocol.setStatus('mandatory')
wfIpv6IfIPv4TunnelLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 2, 1, 27), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6IfIPv4TunnelLocalAddress.setStatus('mandatory')
wfIpv6IfIPv4TunnelRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 2, 1, 28), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6IfIPv4TunnelRemoteAddress.setStatus('mandatory')
wfIpv6IfIpv6TunnelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 2, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6IfIpv6TunnelIfIndex.setStatus('mandatory')
wfIpv6IfIpv6TunnelRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 2, 1, 30), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6IfIpv6TunnelRemoteAddress.setStatus('mandatory')
wfIpv6AddrPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 3), )
if mibBuilder.loadTexts: wfIpv6AddrPrefixTable.setStatus('mandatory')
wfIpv6AddrPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 3, 1), ).setIndexNames((0, "Wellfleet-IPV6-MIB", "wfIpv6AddrPrefixIfIndex"), (0, "Wellfleet-IPV6-MIB", "wfIpv6AddrPrefixIndex"))
if mibBuilder.loadTexts: wfIpv6AddrPrefixEntry.setStatus('mandatory')
wfIpv6AddrPrefixDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6AddrPrefixDelete.setStatus('mandatory')
wfIpv6AddrPrefixDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6AddrPrefixDisable.setStatus('mandatory')
wfIpv6AddrPrefixIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6AddrPrefixIfIndex.setStatus('mandatory')
wfIpv6AddrPrefixIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6AddrPrefixIndex.setStatus('mandatory')
wfIpv6AddrPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 3, 1, 5), Ipv6AddressPrefix()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6AddrPrefix.setStatus('mandatory')
wfIpv6AddrPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6AddrPrefixLength.setStatus('mandatory')
wfIpv6AddrPrefixPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6AddrPrefixPreference.setStatus('mandatory')
wfIpv6AddrPrefixCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6AddrPrefixCost.setStatus('mandatory')
wfIpv6AddrPrefixOnLinkFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6AddrPrefixOnLinkFlag.setStatus('mandatory')
wfIpv6AddrPrefixAutonomousFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6AddrPrefixAutonomousFlag.setStatus('mandatory')
wfIpv6AddrPrefixAdvPreferredLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 3, 1, 11), Integer32().clone(604800)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6AddrPrefixAdvPreferredLifetime.setStatus('mandatory')
wfIpv6AddrPrefixAdvValidLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 3, 1, 12), Integer32().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6AddrPrefixAdvValidLifetime.setStatus('mandatory')
wfIpv6AddrPrefixInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6AddrPrefixInvalid.setStatus('mandatory')
wfIpv6AddrPrefixAnycast = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6AddrPrefixAnycast.setStatus('mandatory')
wfIpv6AddrTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 4), )
if mibBuilder.loadTexts: wfIpv6AddrTable.setStatus('mandatory')
wfIpv6AddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 4, 1), ).setIndexNames((0, "Wellfleet-IPV6-MIB", "wfIpv6AddrIfIndex"), (0, "Wellfleet-IPV6-MIB", "wfIpv6AddrAddress"))
if mibBuilder.loadTexts: wfIpv6AddrEntry.setStatus('mandatory')
wfIpv6AddrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6AddrIfIndex.setStatus('mandatory')
wfIpv6AddrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 4, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6AddrAddress.setStatus('mandatory')
wfIpv6AddrPfxLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6AddrPfxLength.setStatus('mandatory')
wfIpv6AddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stateless", 1), ("stateful", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6AddrType.setStatus('mandatory')
wfIpv6AddrAnycastFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6AddrAnycastFlag.setStatus('mandatory')
wfIpv6AddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("preferred", 1), ("deprecated", 2), ("invalid", 3), ("inaccessible", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6AddrStatus.setStatus('mandatory')
wfIpv6IfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 5), )
if mibBuilder.loadTexts: wfIpv6IfStatsTable.setStatus('mandatory')
wfIpv6IfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 5, 1), ).setIndexNames((0, "Wellfleet-IPV6-MIB", "wfIpv6IfStatsIfIndex"))
if mibBuilder.loadTexts: wfIpv6IfStatsEntry.setStatus('mandatory')
wfIpv6IfStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IfStatsIfIndex.setStatus('mandatory')
wfIpv6IfStatsInReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IfStatsInReceives.setStatus('mandatory')
wfIpv6IfStatsInHdrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IfStatsInHdrErrors.setStatus('mandatory')
wfIpv6IfStatsInTooBigErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IfStatsInTooBigErrors.setStatus('mandatory')
wfIpv6IfStatsInNoRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IfStatsInNoRoutes.setStatus('mandatory')
wfIpv6IfStatsInAddrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IfStatsInAddrErrors.setStatus('mandatory')
wfIpv6IfStatsInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IfStatsInUnknownProtos.setStatus('mandatory')
wfIpv6IfStatsInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IfStatsInDiscards.setStatus('mandatory')
wfIpv6IfStatsInDelivers = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IfStatsInDelivers.setStatus('mandatory')
wfIpv6IfStatsForwDatagrams = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IfStatsForwDatagrams.setStatus('mandatory')
wfIpv6IfStatsOutRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IfStatsOutRequests.setStatus('mandatory')
wfIpv6IfStatsOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IfStatsOutDiscards.setStatus('mandatory')
wfIpv6IfStatsFragOKs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IfStatsFragOKs.setStatus('mandatory')
wfIpv6IfStatsFragFails = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IfStatsFragFails.setStatus('mandatory')
wfIpv6IfStatsFragCreates = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IfStatsFragCreates.setStatus('mandatory')
wfIpv6IfStatsCacheMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IfStatsCacheMisses.setStatus('mandatory')
wfIpv6IfStatsCacheNetworks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IfStatsCacheNetworks.setStatus('mandatory')
wfIpv6IfStatsCacheRemoves = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IfStatsCacheRemoves.setStatus('mandatory')
wfIpv6IfStatsReasmReqds = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IfStatsReasmReqds.setStatus('mandatory')
wfIpv6IfStatsReasmOKs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IfStatsReasmOKs.setStatus('mandatory')
wfIpv6IfStatsReasmFails = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IfStatsReasmFails.setStatus('mandatory')
wfIpv6IfStatsMcastInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IfStatsMcastInPkts.setStatus('mandatory')
wfIpv6IfStatsMcastOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IfStatsMcastOutPkts.setStatus('mandatory')
wfIpv6IfStatsInTruncatedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 5, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IfStatsInTruncatedPkts.setStatus('mandatory')
wfIpv6StaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 6), )
if mibBuilder.loadTexts: wfIpv6StaticRouteTable.setStatus('mandatory')
wfIpv6StaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 6, 1), ).setIndexNames((0, "Wellfleet-IPV6-MIB", "wfIpv6StaticRouteIfIndex"), (0, "Wellfleet-IPV6-MIB", "wfIpv6StaticRouteId"))
if mibBuilder.loadTexts: wfIpv6StaticRouteEntry.setStatus('mandatory')
wfIpv6StaticRouteDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6StaticRouteDelete.setStatus('mandatory')
wfIpv6StaticRouteDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6StaticRouteDisable.setStatus('mandatory')
wfIpv6StaticRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6StaticRouteIfIndex.setStatus('mandatory')
wfIpv6StaticRouteId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6StaticRouteId.setStatus('mandatory')
wfIpv6StaticRoutePfx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 6, 1, 5), Ipv6AddressPrefix()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6StaticRoutePfx.setStatus('mandatory')
wfIpv6StaticRoutePfxLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6StaticRoutePfxLength.setStatus('mandatory')
wfIpv6StaticRouteNextHopAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 6, 1, 7), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6StaticRouteNextHopAddr.setStatus('mandatory')
wfIpv6StaticRoutePreference = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6StaticRoutePreference.setStatus('mandatory')
wfIpv6StaticRouteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6StaticRouteCost.setStatus('mandatory')
wfIpv6StaticRouteInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2))).clone('valid')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6StaticRouteInvalid.setStatus('mandatory')
wfIpv6AdjacentNodeTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 7), )
if mibBuilder.loadTexts: wfIpv6AdjacentNodeTable.setStatus('mandatory')
wfIpv6AdjacentNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 7, 1), ).setIndexNames((0, "Wellfleet-IPV6-MIB", "wfIpv6AdjNodeIfIndex"), (0, "Wellfleet-IPV6-MIB", "wfIpv6AdjNodeAddress"))
if mibBuilder.loadTexts: wfIpv6AdjacentNodeEntry.setStatus('mandatory')
wfIpv6AdjNodeDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6AdjNodeDelete.setStatus('mandatory')
wfIpv6AdjNodeDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6AdjNodeDisable.setStatus('mandatory')
wfIpv6AdjNodeIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6AdjNodeIfIndex.setStatus('mandatory')
wfIpv6AdjNodeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 7, 1, 3), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6AdjNodeAddress.setStatus('mandatory')
wfIpv6AdjNodePhysicalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 7, 1, 5), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6AdjNodePhysicalAddr.setStatus('mandatory')
wfIpv6AdjNodeEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("snap", 2), ("pdn", 3), ("wan", 4))).clone('other')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6AdjNodeEncaps.setStatus('mandatory')
wfIpv6AdjNodePreference = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6AdjNodePreference.setStatus('mandatory')
wfIpv6AdjNodeCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6AdjNodeCost.setStatus('mandatory')
wfIpv6AdjNodeInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2))).clone('valid')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6AdjNodeInvalid.setStatus('mandatory')
wfIpv6AdjNodeWanAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 7, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6AdjNodeWanAddr.setStatus('mandatory')
wfIpv6RouteTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 8), )
if mibBuilder.loadTexts: wfIpv6RouteTable.setStatus('mandatory')
wfIpv6RouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 8, 1), ).setIndexNames((0, "Wellfleet-IPV6-MIB", "wfIpv6RouteDest"), (0, "Wellfleet-IPV6-MIB", "wfIpv6RoutePfxLength"), (0, "Wellfleet-IPV6-MIB", "wfIpv6RouteIfIndex"), (0, "Wellfleet-IPV6-MIB", "wfIpv6RouteIndex"))
if mibBuilder.loadTexts: wfIpv6RouteEntry.setStatus('mandatory')
wfIpv6RouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 8, 1, 1), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6RouteDest.setStatus('mandatory')
wfIpv6RoutePfxLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6RoutePfxLength.setStatus('mandatory')
wfIpv6RouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6RouteIfIndex.setStatus('mandatory')
wfIpv6RouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6RouteIndex.setStatus('mandatory')
wfIpv6RouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 8, 1, 5), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6RouteNextHop.setStatus('mandatory')
wfIpv6RouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("direct", 3), ("indirect", 4), ("discard", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6RouteType.setStatus('mandatory')
wfIpv6RouteProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("netmgmt", 3), ("ndisc", 4), ("rip", 5), ("ospf", 6), ("idrp", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6RouteProtocol.setStatus('mandatory')
wfIpv6RoutePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6RoutePolicy.setStatus('mandatory')
wfIpv6RouteAge = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 8, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6RouteAge.setStatus('mandatory')
wfIpv6RouteNextHopRDI = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 8, 1, 10), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6RouteNextHopRDI.setStatus('mandatory')
wfIpv6RouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 8, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6RouteMetric.setStatus('mandatory')
wfIpv6RouteWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 8, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6RouteWeight.setStatus('mandatory')
wfIpv6RouteInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 8, 1, 13), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6RouteInfo.setStatus('mandatory')
wfIpv6NetToMediaEntryTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 9), )
if mibBuilder.loadTexts: wfIpv6NetToMediaEntryTable.setStatus('mandatory')
wfIpv6NetToMediaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 9, 1), ).setIndexNames((0, "Wellfleet-IPV6-MIB", "wfIpv6NetToMediaIfIndex"), (0, "Wellfleet-IPV6-MIB", "wfIpv6NetToMediaNetAddress"))
if mibBuilder.loadTexts: wfIpv6NetToMediaEntry.setStatus('mandatory')
wfIpv6NetToMediaIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6NetToMediaIfIndex.setStatus('mandatory')
wfIpv6NetToMediaNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 9, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6NetToMediaNetAddress.setStatus('mandatory')
wfIpv6NetToMediaPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 9, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6NetToMediaPhysAddress.setStatus('mandatory')
wfIpv6NetToMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("dynamic", 2), ("static", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6NetToMediaType.setStatus('mandatory')
wfIpv6NetToMediaInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6NetToMediaInvalid.setStatus('mandatory')
wfIpv6DbgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 10), )
if mibBuilder.loadTexts: wfIpv6DbgInfoTable.setStatus('mandatory')
wfIpv6DbgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 10, 1), ).setIndexNames((0, "Wellfleet-IPV6-MIB", "wfIpv6DbgInfoSlot"))
if mibBuilder.loadTexts: wfIpv6DbgInfoEntry.setStatus('mandatory')
wfIpv6DbgInfoSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6DbgInfoSlot.setStatus('mandatory')
wfIpv6DbgInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("invalid", 4), ("notpres", 5))).clone('notpres')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6DbgInfoState.setStatus('mandatory')
wfIpv6DbgInfoNetworks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6DbgInfoNetworks.setStatus('mandatory')
wfIpv6DbgInfoNodes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6DbgInfoNodes.setStatus('mandatory')
wfIpv6DbgInfoActiveInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6DbgInfoActiveInterfaces.setStatus('mandatory')
wfIpv6DbgInfoRtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 10, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6DbgInfoRtmAddr.setStatus('mandatory')
wfIpv6FilterTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 11), )
if mibBuilder.loadTexts: wfIpv6FilterTable.setStatus('mandatory')
wfIpv6FilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 11, 1), ).setIndexNames((0, "Wellfleet-IPV6-MIB", "wfIpv6FilterNumber"))
if mibBuilder.loadTexts: wfIpv6FilterEntry.setStatus('mandatory')
wfIpv6FilterDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6FilterDelete.setStatus('mandatory')
wfIpv6FilterDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6FilterDisable.setStatus('mandatory')
wfIpv6FilterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6FilterNumber.setStatus('mandatory')
wfIpv6FilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 11, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6FilterName.setStatus('mandatory')
wfIpv6FilterPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 11, 1, 5), Gauge32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6FilterPrecedence.setStatus('mandatory')
wfIpv6FilterPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6FilterPackets.setStatus('mandatory')
wfIpv6FilterOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6FilterOctets.setStatus('mandatory')
wfIpv6FilterInIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 11, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6FilterInIfIndex.setStatus('mandatory')
wfIpv6FilterOutIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 11, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6FilterOutIfIndex.setStatus('mandatory')
wfIpv6FilterSrcAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 11, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6FilterSrcAddresses.setStatus('mandatory')
wfIpv6FilterDstAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 11, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6FilterDstAddresses.setStatus('mandatory')
wfIpv6FilterProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 11, 1, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6FilterProtocols.setStatus('mandatory')
wfIpv6FilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 11, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("discard", 2))).clone('discard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6FilterAction.setStatus('mandatory')
wfIpv6FilterLog = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 1, 1, 11, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6FilterLog.setStatus('mandatory')
wfIpv6IcmpTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 2, 1), )
if mibBuilder.loadTexts: wfIpv6IcmpTable.setStatus('mandatory')
wfIpv6IcmpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 2, 1, 1), ).setIndexNames((0, "Wellfleet-IPV6-MIB", "wfIpv6IcmpIfIndex"))
if mibBuilder.loadTexts: wfIpv6IcmpEntry.setStatus('mandatory')
wfIpv6IcmpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IcmpIfIndex.setStatus('mandatory')
wfIpv6IcmpInMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IcmpInMsgs.setStatus('mandatory')
wfIpv6IcmpInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IcmpInErrors.setStatus('mandatory')
wfIpv6IcmpInDestUnreachs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IcmpInDestUnreachs.setStatus('mandatory')
wfIpv6IcmpInAdminProhibs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IcmpInAdminProhibs.setStatus('mandatory')
wfIpv6IcmpInTimeExcds = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IcmpInTimeExcds.setStatus('mandatory')
wfIpv6IcmpInParmProbs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IcmpInParmProbs.setStatus('mandatory')
wfIpv6IcmpInPktTooBigs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IcmpInPktTooBigs.setStatus('mandatory')
wfIpv6IcmpInEchos = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IcmpInEchos.setStatus('mandatory')
wfIpv6IcmpInEchoReps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IcmpInEchoReps.setStatus('mandatory')
wfIpv6IcmpInRouterSolicits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IcmpInRouterSolicits.setStatus('mandatory')
wfIpv6IcmpInRouterAdvertisements = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IcmpInRouterAdvertisements.setStatus('mandatory')
wfIpv6IcmpInNeighborSolicits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IcmpInNeighborSolicits.setStatus('mandatory')
wfIpv6IcmpInNeighborAdvertisements = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IcmpInNeighborAdvertisements.setStatus('mandatory')
wfIpv6IcmpInRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IcmpInRedirects.setStatus('mandatory')
wfIpv6IcmpInGroupMembQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IcmpInGroupMembQueries.setStatus('mandatory')
wfIpv6IcmpInGroupMembResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IcmpInGroupMembResponses.setStatus('mandatory')
wfIpv6IcmpInGroupMembReductions = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IcmpInGroupMembReductions.setStatus('mandatory')
wfIpv6IcmpOutMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IcmpOutMsgs.setStatus('mandatory')
wfIpv6IcmpOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IcmpOutErrors.setStatus('mandatory')
wfIpv6IcmpOutDestUnreachs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IcmpOutDestUnreachs.setStatus('mandatory')
wfIpv6IcmpOutAdminProhibs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IcmpOutAdminProhibs.setStatus('mandatory')
wfIpv6IcmpOutTimeExcds = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IcmpOutTimeExcds.setStatus('mandatory')
wfIpv6IcmpOutParmProbs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 2, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IcmpOutParmProbs.setStatus('mandatory')
wfIpv6IcmpOutPktTooBigs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 2, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IcmpOutPktTooBigs.setStatus('mandatory')
wfIpv6IcmpOutEchos = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 2, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IcmpOutEchos.setStatus('mandatory')
wfIpv6IcmpOutEchoReps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 2, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IcmpOutEchoReps.setStatus('mandatory')
wfIpv6IcmpOutRouterSolicits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 2, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IcmpOutRouterSolicits.setStatus('mandatory')
wfIpv6IcmpOutRouterAdvertisements = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 2, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IcmpOutRouterAdvertisements.setStatus('mandatory')
wfIpv6IcmpOutNeighborSolicits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 2, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IcmpOutNeighborSolicits.setStatus('mandatory')
wfIpv6IcmpOutNeighborAdvertisements = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 2, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IcmpOutNeighborAdvertisements.setStatus('mandatory')
wfIpv6IcmpOutRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 2, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IcmpOutRedirects.setStatus('mandatory')
wfIpv6IcmpOutGroupMembQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 2, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IcmpOutGroupMembQueries.setStatus('mandatory')
wfIpv6IcmpOutGroupMembResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 2, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IcmpOutGroupMembResponses.setStatus('mandatory')
wfIpv6IcmpOutGroupMembReductions = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 2, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6IcmpOutGroupMembReductions.setStatus('mandatory')
wfIpv6NdiscIfTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 3, 1), )
if mibBuilder.loadTexts: wfIpv6NdiscIfTable.setStatus('mandatory')
wfIpv6NdiscIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 3, 1, 1), ).setIndexNames((0, "Wellfleet-IPV6-MIB", "wfIpv6NdiscIfIndex"))
if mibBuilder.loadTexts: wfIpv6NdiscIfEntry.setStatus('mandatory')
wfIpv6NdiscIfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6NdiscIfDelete.setStatus('mandatory')
wfIpv6NdiscIfDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6NdiscIfDisable.setStatus('mandatory')
wfIpv6NdiscIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("invalid", 4), ("notpres", 5))).clone('notpres')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6NdiscIfState.setStatus('mandatory')
wfIpv6NdiscIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6NdiscIfIndex.setStatus('mandatory')
wfIpv6NdiscIfSendAdvertisements = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6NdiscIfSendAdvertisements.setStatus('mandatory')
wfIpv6NdiscIfManagedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6NdiscIfManagedFlag.setStatus('mandatory')
wfIpv6NdiscIfOtherCfgFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6NdiscIfOtherCfgFlag.setStatus('mandatory')
wfIpv6NdiscIfReachableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 3, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6NdiscIfReachableTime.setStatus('mandatory')
wfIpv6NdiscIfRetransTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 3, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6NdiscIfRetransTimer.setStatus('mandatory')
wfIpv6NdiscIfMaxHopLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6NdiscIfMaxHopLimit.setStatus('mandatory')
wfIpv6NdiscIfMinRtrAdvInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 1350)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6NdiscIfMinRtrAdvInterval.setStatus('mandatory')
wfIpv6NdiscIfMaxRtrAdvInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 1800)).clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6NdiscIfMaxRtrAdvInterval.setStatus('mandatory')
wfIpv6NdiscIfDefaultLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9000)).clone(1800)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6NdiscIfDefaultLifetime.setStatus('mandatory')
wfIpv6NdiscIfDupAddrDetectTransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6NdiscIfDupAddrDetectTransmits.setStatus('mandatory')
wfIpv6Udp = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 4, 1))
wfIpv6UdpInDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6UdpInDatagrams.setStatus('mandatory')
wfIpv6UdpNoPorts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6UdpNoPorts.setStatus('mandatory')
wfIpv6UdpInErrors = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6UdpInErrors.setStatus('mandatory')
wfIpv6UdpOutDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6UdpOutDatagrams.setStatus('mandatory')
wfIpv6UdpTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 4, 2), )
if mibBuilder.loadTexts: wfIpv6UdpTable.setStatus('mandatory')
wfIpv6UdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 4, 2, 1), ).setIndexNames((0, "Wellfleet-IPV6-MIB", "wfIpv6UdpLocalIfIndex"), (0, "Wellfleet-IPV6-MIB", "wfIpv6UdpLocalAddress"), (0, "Wellfleet-IPV6-MIB", "wfIpv6UdpLocalPort"))
if mibBuilder.loadTexts: wfIpv6UdpEntry.setStatus('mandatory')
wfIpv6UdpLocalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6UdpLocalIfIndex.setStatus('mandatory')
wfIpv6UdpLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 4, 2, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6UdpLocalAddress.setStatus('mandatory')
wfIpv6UdpLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6UdpLocalPort.setStatus('mandatory')
wfIpv6Log = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 5, 1))
wfIpv6LogDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6LogDelete.setStatus('mandatory')
wfIpv6LogDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6LogDisable.setStatus('mandatory')
wfIpv6LogLevel = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("debug", 1), ("trace", 2), ("info", 3), ("warning", 4), ("fault", 5))).clone('info')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6LogLevel.setStatus('mandatory')
wfIpv6LogEvent = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6LogEvent.setStatus('mandatory')
wfIpv6LogEventDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6LogEventDisable.setStatus('mandatory')
wfIpv6LogEvents = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 5, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfIpv6LogEvents.setStatus('mandatory')
wfIpv6LogCfgEvents = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 16, 5, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIpv6LogCfgEvents.setStatus('mandatory')
mibBuilder.exportSymbols("Wellfleet-IPV6-MIB", wfIpv6NetToMediaType=wfIpv6NetToMediaType, wfIpv6FilterPackets=wfIpv6FilterPackets, wfIpv6IcmpInGroupMembQueries=wfIpv6IcmpInGroupMembQueries, wfIpv6LogGroup=wfIpv6LogGroup, wfIpv6AddrAnycastFlag=wfIpv6AddrAnycastFlag, wfIpv6LogDisable=wfIpv6LogDisable, wfIpv6IfStatsTable=wfIpv6IfStatsTable, wfIpv6IcmpInGroupMembReductions=wfIpv6IcmpInGroupMembReductions, wfIpv6NdiscIfEntry=wfIpv6NdiscIfEntry, wfIpv6IcmpOutNeighborSolicits=wfIpv6IcmpOutNeighborSolicits, wfIpv6RoutingGeneralGroup=wfIpv6RoutingGeneralGroup, wfIpv6IfStatsInHdrErrors=wfIpv6IfStatsInHdrErrors, wfIpv6StaticRouteEntry=wfIpv6StaticRouteEntry, wfIpv6RoutePfxLength=wfIpv6RoutePfxLength, wfIpv6IfRedirect=wfIpv6IfRedirect, wfIpv6IcmpOutNeighborAdvertisements=wfIpv6IcmpOutNeighborAdvertisements, wfIpv6BaseDefaultHopLimit=wfIpv6BaseDefaultHopLimit, wfIpv6AddrType=wfIpv6AddrType, wfIpv6IcmpOutPktTooBigs=wfIpv6IcmpOutPktTooBigs, wfIpv6IfLastChange=wfIpv6IfLastChange, wfIpv6FilterInIfIndex=wfIpv6FilterInIfIndex, wfIpv6StaticRouteDelete=wfIpv6StaticRouteDelete, wfIpv6FilterDstAddresses=wfIpv6FilterDstAddresses, wfIpv6IcmpInGroupMembResponses=wfIpv6IcmpInGroupMembResponses, wfIpv6StaticRouteNextHopAddr=wfIpv6StaticRouteNextHopAddr, wfIpv6AddrPrefixAutonomousFlag=wfIpv6AddrPrefixAutonomousFlag, wfIpv6AddrAddress=wfIpv6AddrAddress, wfIpv6AddrPrefixIndex=wfIpv6AddrPrefixIndex, wfIpv6FilterOctets=wfIpv6FilterOctets, wfIpv6IfReasmMaxSize=wfIpv6IfReasmMaxSize, wfIpv6StaticRoutePfxLength=wfIpv6StaticRoutePfxLength, wfIpv6IcmpOutGroupMembQueries=wfIpv6IcmpOutGroupMembQueries, wfIpv6LogEventDisable=wfIpv6LogEventDisable, wfIpv6AddrPrefixAdvPreferredLifetime=wfIpv6AddrPrefixAdvPreferredLifetime, wfIpv6PolicyGroup=wfIpv6PolicyGroup, wfIpv6FilterSrcAddresses=wfIpv6FilterSrcAddresses, wfIpv6IfIndex=wfIpv6IfIndex, wfIpv6DbgInfoState=wfIpv6DbgInfoState, wfIpv6IcmpOutGroupMembReductions=wfIpv6IcmpOutGroupMembReductions, wfIpv6FilterLog=wfIpv6FilterLog, wfIpv6IfStatsFragCreates=wfIpv6IfStatsFragCreates, wfIpv6IfStatsInTruncatedPkts=wfIpv6IfStatsInTruncatedPkts, wfIpv6IfEntry=wfIpv6IfEntry, wfIpv6IcmpOutRouterSolicits=wfIpv6IcmpOutRouterSolicits, wfIpv6IfMaxInfo=wfIpv6IfMaxInfo, wfIpv6IfStatsFragOKs=wfIpv6IfStatsFragOKs, wfIpv6RouteEntry=wfIpv6RouteEntry, wfIpv6IfStatsMcastInPkts=wfIpv6IfStatsMcastInPkts, wfIpv6FilterName=wfIpv6FilterName, wfIpv6IfStatsEntry=wfIpv6IfStatsEntry, wfIpv6IfState=wfIpv6IfState, wfIpv6NdiscIfReachableTime=wfIpv6NdiscIfReachableTime, wfIpv6AddrPrefixIfIndex=wfIpv6AddrPrefixIfIndex, wfIpv6AdjNodePreference=wfIpv6AdjNodePreference, wfIpv6IfStatsCacheRemoves=wfIpv6IfStatsCacheRemoves, wfIpv6IfTunnelProtocol=wfIpv6IfTunnelProtocol, wfIpv6AddrTable=wfIpv6AddrTable, wfIpv6IfSMDSGroupAddress=wfIpv6IfSMDSGroupAddress, wfIpv6IcmpOutGroupMembResponses=wfIpv6IcmpOutGroupMembResponses, wfIpv6LogLevel=wfIpv6LogLevel, wfIpv6IfStatsInTooBigErrors=wfIpv6IfStatsInTooBigErrors, wfIpv6IcmpOutMsgs=wfIpv6IcmpOutMsgs, wfIpv6BaseForwarding=wfIpv6BaseForwarding, wfIpv6IcmpInEchos=wfIpv6IcmpInEchos, wfIpv6IfStatsInDiscards=wfIpv6IfStatsInDiscards, wfIpv6IfIpv6TunnelIfIndex=wfIpv6IfIpv6TunnelIfIndex, wfIpv6IfCfgLinkMTU=wfIpv6IfCfgLinkMTU, wfIpv6BaseNodes=wfIpv6BaseNodes, wfIpv6AddrPfxLength=wfIpv6AddrPfxLength, wfIpv6IcmpInRedirects=wfIpv6IcmpInRedirects, wfIpv6IfStatsCacheNetworks=wfIpv6IfStatsCacheNetworks, wfIpv6IfCfgPhysicalAddress=wfIpv6IfCfgPhysicalAddress, wfIpv6StaticRouteId=wfIpv6StaticRouteId, wfIpv6IfCircuit=wfIpv6IfCircuit, wfIpv6IcmpOutTimeExcds=wfIpv6IcmpOutTimeExcds, wfIpv6AdjNodeWanAddr=wfIpv6AdjNodeWanAddr, wfIpv6StaticRoutePfx=wfIpv6StaticRoutePfx, wfIpv6IcmpOutRedirects=wfIpv6IcmpOutRedirects, wfIpv6LogDelete=wfIpv6LogDelete, wfIpv6AdjNodeDelete=wfIpv6AdjNodeDelete, wfIpv6IfDescr=wfIpv6IfDescr, wfIpv6IfCfgTokenLength=wfIpv6IfCfgTokenLength, wfIpv6FilterNumber=wfIpv6FilterNumber, wfIpv6NdiscIfDelete=wfIpv6NdiscIfDelete, wfIpv6IfTrEndStation=wfIpv6IfTrEndStation, wfIpv6IcmpInRouterSolicits=wfIpv6IcmpInRouterSolicits, wfIpv6AdjacentNodeTable=wfIpv6AdjacentNodeTable, wfIpv6AdjNodeEncaps=wfIpv6AdjNodeEncaps, wfIpv6FilterTable=wfIpv6FilterTable, wfIpv6RouteInfo=wfIpv6RouteInfo, wfIpv6IcmpInParmProbs=wfIpv6IcmpInParmProbs, wfIpv6IcmpOutErrors=wfIpv6IcmpOutErrors, wfIpv6AddrPrefix=wfIpv6AddrPrefix, wfIpv6RouteIndex=wfIpv6RouteIndex, wfIpv6BaseMinLinkMTU=wfIpv6BaseMinLinkMTU, wfIpv6IfIPv4TunnelRemoteAddress=wfIpv6IfIPv4TunnelRemoteAddress, wfIpv6NdiscIfOtherCfgFlag=wfIpv6NdiscIfOtherCfgFlag, wfIpv6AddrPrefixOnLinkFlag=wfIpv6AddrPrefixOnLinkFlag, wfIpv6BaseMTUDiscovery=wfIpv6BaseMTUDiscovery, wfIpv6IfStatsInReceives=wfIpv6IfStatsInReceives, wfIpv6DbgInfoActiveInterfaces=wfIpv6DbgInfoActiveInterfaces, wfIpv6IcmpEntry=wfIpv6IcmpEntry, wfIpv6NdiscIfTable=wfIpv6NdiscIfTable, wfIpv6IfIcmpErrorLimit=wfIpv6IfIcmpErrorLimit, wfIpv6UdpGroup=wfIpv6UdpGroup, wfIpv6BaseState=wfIpv6BaseState, wfIpv6Base=wfIpv6Base, wfIpv6RouteTable=wfIpv6RouteTable, wfIpv6NetToMediaPhysAddress=wfIpv6NetToMediaPhysAddress, wfIpv6DbgInfoRtmAddr=wfIpv6DbgInfoRtmAddr, wfIpv6RouteIfIndex=wfIpv6RouteIfIndex, wfIpv6AdjacentNodeEntry=wfIpv6AdjacentNodeEntry, wfIpv6DbgInfoSlot=wfIpv6DbgInfoSlot, wfIpv6NdiscIfMaxHopLimit=wfIpv6NdiscIfMaxHopLimit, wfIpv6BaseHighestFilterRule=wfIpv6BaseHighestFilterRule, wfIpv6NetToMediaInvalid=wfIpv6NetToMediaInvalid, wfIpv6IcmpOutRouterAdvertisements=wfIpv6IcmpOutRouterAdvertisements, wfIpv6LogEvent=wfIpv6LogEvent, wfIpv6LogEvents=wfIpv6LogEvents, wfIpv6StaticRouteTable=wfIpv6StaticRouteTable, wfIpv6StaticRouteCost=wfIpv6StaticRouteCost, wfIpv6NetToMediaNetAddress=wfIpv6NetToMediaNetAddress, wfIpv6RouteWeight=wfIpv6RouteWeight, wfIpv6Log=wfIpv6Log, wfIpv6LogCfgEvents=wfIpv6LogCfgEvents, wfIpv6UdpNoPorts=wfIpv6UdpNoPorts, wfIpv6IfFRBcastDlci=wfIpv6IfFRBcastDlci, wfIpv6IfStatsInDelivers=wfIpv6IfStatsInDelivers, wfIpv6UdpLocalPort=wfIpv6UdpLocalPort, wfIpv6IfStatsInUnknownProtos=wfIpv6IfStatsInUnknownProtos, wfIpv6IcmpIfIndex=wfIpv6IcmpIfIndex, wfIpv6BaseDisable=wfIpv6BaseDisable, wfIpv6IfDelete=wfIpv6IfDelete, wfIpv6BaseDelete=wfIpv6BaseDelete, wfIpv6AddrIfIndex=wfIpv6AddrIfIndex, wfIpv6IcmpTable=wfIpv6IcmpTable, wfIpv6StaticRouteDisable=wfIpv6StaticRouteDisable, wfIpv6NdiscIfSendAdvertisements=wfIpv6NdiscIfSendAdvertisements, wfIpv6IcmpOutDestUnreachs=wfIpv6IcmpOutDestUnreachs, wfIpv6FilterEntry=wfIpv6FilterEntry, wfIpv6UdpTable=wfIpv6UdpTable, wfIpv6IfStatsFragFails=wfIpv6IfStatsFragFails, wfIpv6RouteType=wfIpv6RouteType, wfIpv6BaseNetworks=wfIpv6BaseNetworks, wfIpv6NdiscIfManagedFlag=wfIpv6NdiscIfManagedFlag, wfIpv6IfStatsReasmFails=wfIpv6IfStatsReasmFails, wfIpv6IfFRMcast2Dlci=wfIpv6IfFRMcast2Dlci, wfIpv6StaticRouteInvalid=wfIpv6StaticRouteInvalid, wfIpv6NetToMediaEntryTable=wfIpv6NetToMediaEntryTable, wfIpv6NetToMediaIfIndex=wfIpv6NetToMediaIfIndex, wfIpv6IcmpInErrors=wfIpv6IcmpInErrors, wfIpv6IcmpInMsgs=wfIpv6IcmpInMsgs, wfIpv6NdiscIfRetransTimer=wfIpv6NdiscIfRetransTimer, wfIpv6StaticRouteIfIndex=wfIpv6StaticRouteIfIndex, wfIpv6IcmpOutEchos=wfIpv6IcmpOutEchos, wfIpv6IfTokenLength=wfIpv6IfTokenLength, wfIpv6IfIpv6TunnelRemoteAddress=wfIpv6IfIpv6TunnelRemoteAddress, wfIpv6FilterDisable=wfIpv6FilterDisable, wfIpv6IfStatsMcastOutPkts=wfIpv6IfStatsMcastOutPkts, wfIpv6IcmpInNeighborSolicits=wfIpv6IcmpInNeighborSolicits, wfIpv6RouteAge=wfIpv6RouteAge, Ipv6Address=Ipv6Address, wfIpv6DbgInfoNodes=wfIpv6DbgInfoNodes, wfIpv6AddrPrefixDisable=wfIpv6AddrPrefixDisable, wfIpv6RouteNextHopRDI=wfIpv6RouteNextHopRDI, wfIpv6FilterOutIfIndex=wfIpv6FilterOutIfIndex, wfIpv6IfStatsInAddrErrors=wfIpv6IfStatsInAddrErrors, wfIpv6AddrPrefixDelete=wfIpv6AddrPrefixDelete, wfIpv6IcmpInTimeExcds=wfIpv6IcmpInTimeExcds, wfIpv6IcmpInPktTooBigs=wfIpv6IcmpInPktTooBigs, wfIpv6IcmpOutEchoReps=wfIpv6IcmpOutEchoReps, wfIpv6StaticRoutePreference=wfIpv6StaticRoutePreference, wfIpv6AddrEntry=wfIpv6AddrEntry, wfIpv6AdjNodeDisable=wfIpv6AdjNodeDisable, wfIpv6IcmpInDestUnreachs=wfIpv6IcmpInDestUnreachs, wfIpv6IcmpInAdminProhibs=wfIpv6IcmpInAdminProhibs, wfIpv6IcmpOutAdminProhibs=wfIpv6IcmpOutAdminProhibs, wfIpv6BaseIfNumber=wfIpv6BaseIfNumber, wfIpv6IcmpGroup=wfIpv6IcmpGroup, wfIpv6NDiscGroup=wfIpv6NDiscGroup, Ipv6AddressPrefix=Ipv6AddressPrefix, wfIpv6RoutePolicy=wfIpv6RoutePolicy, wfIpv6RouteDest=wfIpv6RouteDest, wfIpv6IfStatsOutRequests=wfIpv6IfStatsOutRequests, wfIpv6NetToMediaEntry=wfIpv6NetToMediaEntry, wfIpv6IfFwdCacheSize=wfIpv6IfFwdCacheSize, wfIpv6RoutingGroup=wfIpv6RoutingGroup, wfIpv6IfDisable=wfIpv6IfDisable, wfIpv6IcmpInEchoReps=wfIpv6IcmpInEchoReps, wfIpv6IcmpInRouterAdvertisements=wfIpv6IcmpInRouterAdvertisements, wfIpv6RouteProtocol=wfIpv6RouteProtocol, wfIpv6NdiscIfDupAddrDetectTransmits=wfIpv6NdiscIfDupAddrDetectTransmits, wfIpv6IfToken=wfIpv6IfToken, wfIpv6IfCfgToken=wfIpv6IfCfgToken, wfIpv6AddrPrefixAnycast=wfIpv6AddrPrefixAnycast, wfIpv6AddrStatus=wfIpv6AddrStatus, wfIpv6NdiscIfMaxRtrAdvInterval=wfIpv6NdiscIfMaxRtrAdvInterval, wfIpv6Udp=wfIpv6Udp, wfIpv6FilterAction=wfIpv6FilterAction, wfIpv6UdpOutDatagrams=wfIpv6UdpOutDatagrams, wfIpv6NdiscIfDefaultLifetime=wfIpv6NdiscIfDefaultLifetime, wfIpv6AdjNodeAddress=wfIpv6AdjNodeAddress, wfIpv6IfStatsCacheMisses=wfIpv6IfStatsCacheMisses, wfIpv6AdjNodeInvalid=wfIpv6AdjNodeInvalid, wfIpv6UdpLocalIfIndex=wfIpv6UdpLocalIfIndex, wfIpv6NdiscIfMinRtrAdvInterval=wfIpv6NdiscIfMinRtrAdvInterval, wfIpv6IcmpInNeighborAdvertisements=wfIpv6IcmpInNeighborAdvertisements, wfIpv6IfPhysicalAddress=wfIpv6IfPhysicalAddress, wfIpv6AddrPrefixEntry=wfIpv6AddrPrefixEntry, wfIpv6BaseMTUTimeout=wfIpv6BaseMTUTimeout, wfIpv6IfStatsIfIndex=wfIpv6IfStatsIfIndex, wfIpv6RouteNextHop=wfIpv6RouteNextHop, wfIpv6AddrPrefixCost=wfIpv6AddrPrefixCost, wfIpv6AddrPrefixInvalid=wfIpv6AddrPrefixInvalid, wfIpv6FilterProtocols=wfIpv6FilterProtocols, wfIpv6NdiscIfIndex=wfIpv6NdiscIfIndex, wfIpv6AdjNodePhysicalAddr=wfIpv6AdjNodePhysicalAddr, wfIpv6RouteMetric=wfIpv6RouteMetric, wfIpv6UdpInDatagrams=wfIpv6UdpInDatagrams, wfIpv6IfStatsForwDatagrams=wfIpv6IfStatsForwDatagrams, wfIpv6IfStatsReasmReqds=wfIpv6IfStatsReasmReqds, wfIpv6FilterPrecedence=wfIpv6FilterPrecedence, wfIpv6UdpInErrors=wfIpv6UdpInErrors, wfIpv6IfIPv4TunnelLocalAddress=wfIpv6IfIPv4TunnelLocalAddress, wfIpv6IfSlotMask=wfIpv6IfSlotMask, wfIpv6NdiscIfState=wfIpv6NdiscIfState, wfIpv6AddrPrefixAdvValidLifetime=wfIpv6AddrPrefixAdvValidLifetime, wfIpv6AddrPrefixLength=wfIpv6AddrPrefixLength, wfIpv6IfStatsOutDiscards=wfIpv6IfStatsOutDiscards, wfIpv6IfTable=wfIpv6IfTable, wfIpv6AdjNodeIfIndex=wfIpv6AdjNodeIfIndex, wfIpv6DbgInfoTable=wfIpv6DbgInfoTable, wfIpv6DbgInfoNetworks=wfIpv6DbgInfoNetworks, wfIpv6UdpLocalAddress=wfIpv6UdpLocalAddress, wfIpv6AdjNodeCost=wfIpv6AdjNodeCost, wfIpv6DbgInfoEntry=wfIpv6DbgInfoEntry, wfIpv6IfFRMcast1Dlci=wfIpv6IfFRMcast1Dlci, wfIpv6NdiscIfDisable=wfIpv6NdiscIfDisable, wfIpv6UdpEntry=wfIpv6UdpEntry, wfIpv6AddrPrefixTable=wfIpv6AddrPrefixTable, wfIpv6FilterDelete=wfIpv6FilterDelete, wfIpv6IfStatsReasmOKs=wfIpv6IfStatsReasmOKs, wfIpv6IcmpOutParmProbs=wfIpv6IcmpOutParmProbs, wfIpv6IfStatsInNoRoutes=wfIpv6IfStatsInNoRoutes, wfIpv6AddrPrefixPreference=wfIpv6AddrPrefixPreference)
