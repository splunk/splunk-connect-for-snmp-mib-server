#
# PySNMP MIB module HPN-ICF-CBQOS2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-CBQOS2-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:25:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, ModuleIdentity, iso, MibIdentifier, TimeTicks, Counter64, Counter32, NotificationType, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Gauge32, Bits, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ModuleIdentity", "iso", "MibIdentifier", "TimeTicks", "Counter64", "Counter32", "NotificationType", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Gauge32", "Bits", "Unsigned32")
RowStatus, DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention", "TruthValue")
hpnicfCBQos2 = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2))
hpnicfCBQos2.setRevisions(('2012-07-02 00:00', '2005-07-30 00:00',))
if mibBuilder.loadTexts: hpnicfCBQos2.setLastUpdated('201207020000Z')
if mibBuilder.loadTexts: hpnicfCBQos2.setOrganization('')
hpnicfQos2 = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65))
class MatchRuleType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))
    namedValues = NamedValues(("matchRuleAny", 1), ("matchRuleIpv4Acl", 2), ("matchRuleIPv6Acl", 3), ("matchRuleIPv4Protocol", 4), ("matchRuleIPv6Protocol", 5), ("matchRuleIPXProtocol", 6), ("matchRuleDscp", 7), ("matchRuleIpPre", 8), ("matchRuleVlan8021p", 9), ("matchRuleMplsExp", 10), ("matchRuleAtmClp", 11), ("matchRuleFrDe", 12), ("matchRuleSourceMac", 13), ("matchRuleDestinationMac", 14), ("matchRuleQosLocalID", 15), ("matchRuleClassifier", 16), ("matchRuleInboundInterface", 17), ("matchRuleRtpPort", 18), ("matchRuleSourceIp", 19), ("matchRuleVlanID", 20), ("matchRuleTopMostVlanID", 21), ("matchRuleLocalPrecedence", 22), ("matchRuleDropPriority", 23), ("matchRuleBittorrent", 24), ("matchRuleServiceDot1p", 25), ("matchRuleMplsLabel", 26), ("matchRuleSecondMplsLabel", 27), ("matchRuleSecondMplsExp", 28), ("matchRulePacketLength", 29), ("matchRuleArpProtocol", 30), ("matchRuleForwardingLayer", 31))

class CarAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))
    namedValues = NamedValues(("invalid", 0), ("pass", 1), ("continue", 2), ("discard", 3), ("remark", 4), ("remark-ip-continue", 5), ("remark-ip-pass", 6), ("remark-mplsexp-continue", 7), ("remark-mplsexp-pass", 8), ("remark-dscp-continue", 9), ("remark-dscp-pass", 10), ("remark-dot1p-continue", 11), ("remark-dot1p-pass", 12), ("remark-atm-clp-continue", 13), ("remark-atm-clp-pass", 14), ("remark-fr-de-continue", 15), ("remark-fr-de-pass", 16), ("remark-local-pre-pass", 17), ("remark-drop-pre-pass", 18))

class RemarkType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("typeIpPrecedence", 1), ("typeDscp", 2), ("typeMplsExp", 3), ("typeVlan8021p", 4), ("typeAtmClp", 5), ("typeFrDe", 6), ("typeVlanID", 7), ("typeQosLocalID", 8), ("typeDropPrecedence", 9), ("typeLocalPrecedence", 10), ("typeTopMostVlanID", 11), ("typeSecondMplsExp", 12))

class WredType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("typeIpPrecBased", 1), ("typeDscpBased", 2), ("typeDropLevelBased", 3), ("typeAtmClpBased", 4), ("typeVlan8021pBased", 5), ("typeMplsExpBased", 6))

class QueueType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("ef", 1), ("af", 2), ("wfq", 3))

class QueueBandwidthUnit(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("unitUnavailable", 0), ("unitAbsolute", 1), ("unitPercent", 2), ("unitRemainPercent", 3))

class DirectionType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("inbound", 1), ("outbound", 2))

class ApplyObjectType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("interface", 1), ("vlan", 2), ("atmPvc", 3), ("frDlci", 4), ("controlPlane", 5))

hpnicfCBQoSObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1))
hpnicfCBQoSClassifierObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1))
hpnicfCBQoSClassifierIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSClassifierIndexNext.setStatus('current')
hpnicfCBQoSClassifierCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 2), )
if mibBuilder.loadTexts: hpnicfCBQoSClassifierCfgInfoTable.setStatus('current')
hpnicfCBQoSClassifierCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 2, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSClassifierIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSClassifierCfgInfoEntry.setStatus('current')
hpnicfCBQoSClassifierIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfCBQoSClassifierIndex.setStatus('current')
hpnicfCBQoSClassifierName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSClassifierName.setStatus('current')
hpnicfCBQoSClassifierRuleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSClassifierRuleCount.setStatus('current')
hpnicfCBQoSClassifierOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("and", 1), ("or", 2))).clone('and')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSClassifierOperator.setStatus('current')
hpnicfCBQoSClassifierLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unavailable", 1), ("l2", 2), ("l3", 3), ("both", 4))).clone('l3')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSClassifierLayer.setStatus('current')
hpnicfCBQoSClassifierType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("systemDefined", 1), ("userDefined", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSClassifierType.setStatus('current')
hpnicfCBQosClassifierMatchRuleNextIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQosClassifierMatchRuleNextIndex.setStatus('current')
hpnicfCBQoSClassifierRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSClassifierRowStatus.setStatus('current')
hpnicfCBQoSMatchRuleCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 3), )
if mibBuilder.loadTexts: hpnicfCBQoSMatchRuleCfgInfoTable.setStatus('current')
hpnicfCBQoSMatchRuleCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 3, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSClassifierIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSMatchRuleIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSMatchRuleCfgInfoEntry.setStatus('current')
hpnicfCBQoSMatchRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfCBQoSMatchRuleIndex.setStatus('current')
hpnicfCBQoSMatchRuleIfNot = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("match", 1), ("matchNot", 2))).clone('match')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSMatchRuleIfNot.setStatus('current')
hpnicfCBQoSMatchRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 3, 1, 3), MatchRuleType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSMatchRuleType.setStatus('current')
hpnicfCBQoSMatchRuleStringValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSMatchRuleStringValue.setStatus('current')
hpnicfCBQoSMatchRuleIntValue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSMatchRuleIntValue1.setStatus('current')
hpnicfCBQoSMatchRuleIntValue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 3, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSMatchRuleIntValue2.setStatus('current')
hpnicfCBQoSMatchIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 3, 1, 7), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSMatchIpAddressType.setStatus('current')
hpnicfCBQoSMatchIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 3, 1, 8), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSMatchIpAddress.setStatus('current')
hpnicfCBQoSMatchRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 3, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSMatchRuleRowStatus.setStatus('current')
hpnicfCBQoSMatchCpProtoCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 4), )
if mibBuilder.loadTexts: hpnicfCBQoSMatchCpProtoCfgTable.setStatus('current')
hpnicfCBQoSMatchCpProtoCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 4, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSClassifierIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSMatchRuleIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSMatchCpProtoCfgEntry.setStatus('current')
hpnicfCBQoSMatchCpProtoIfNot = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("match", 1), ("matchNot", 2))).clone('match')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSMatchCpProtoIfNot.setStatus('current')
hpnicfCBQoSMatchCpProtoValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSMatchCpProtoValue.setStatus('current')
hpnicfCBQoSMatchCpProtoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSMatchCpProtoRowStatus.setStatus('current')
hpnicfCBQoSMatchCpGroupCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 5), )
if mibBuilder.loadTexts: hpnicfCBQoSMatchCpGroupCfgTable.setStatus('current')
hpnicfCBQoSMatchCpGroupCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 5, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSClassifierIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSMatchRuleIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSMatchCpGroupCfgEntry.setStatus('current')
hpnicfCBQoSMatchCpGroupIfNot = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("match", 1), ("matchNot", 2))).clone('match')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSMatchCpGroupIfNot.setStatus('current')
hpnicfCBQoSMatchCpGroupValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("critical", 1), ("important", 2), ("management", 3), ("normal", 4), ("redirect", 5), ("monitor", 6), ("exception", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSMatchCpGroupValue.setStatus('current')
hpnicfCBQoSMatchCpGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSMatchCpGroupRowStatus.setStatus('current')
hpnicfCBQoSBehaviorObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2))
hpnicfCBQoSBehaviorIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSBehaviorIndexNext.setStatus('current')
hpnicfCBQoSBehaviorCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 2), )
if mibBuilder.loadTexts: hpnicfCBQoSBehaviorCfgInfoTable.setStatus('current')
hpnicfCBQoSBehaviorCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 2, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSBehaviorCfgInfoEntry.setStatus('current')
hpnicfCBQoSBehaviorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfCBQoSBehaviorIndex.setStatus('current')
hpnicfCBQoSBehaviorName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSBehaviorName.setStatus('current')
hpnicfCBQoSBehaviorType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("systemDefined", 1), ("userDefined", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSBehaviorType.setStatus('current')
hpnicfCBQoSBehaviorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSBehaviorRowStatus.setStatus('current')
hpnicfCBQoSCarCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 3), )
if mibBuilder.loadTexts: hpnicfCBQoSCarCfgInfoTable.setStatus('current')
hpnicfCBQoSCarCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 3, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSCarCfgInfoEntry.setStatus('current')
hpnicfCBQoSCarCir = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 3, 1, 1), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSCarCir.setStatus('current')
hpnicfCBQoSCarCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 3, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSCarCbs.setStatus('current')
hpnicfCBQoSCarEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 3, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSCarEbs.setStatus('current')
hpnicfCBQoSCarPir = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 3, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSCarPir.setStatus('current')
hpnicfCBQoSCarPbs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 3, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSCarPbs.setStatus('current')
hpnicfCBQoSCarGreenAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 3, 1, 6), CarAction().clone('pass')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSCarGreenAction.setStatus('current')
hpnicfCBQoSCarGreenRemarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSCarGreenRemarkValue.setStatus('current')
hpnicfCBQoSCarYellowAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 3, 1, 8), CarAction().clone('remark')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSCarYellowAction.setStatus('current')
hpnicfCBQoSCarYellowRemarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSCarYellowRemarkValue.setStatus('current')
hpnicfCBQoSCarRedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 3, 1, 10), CarAction().clone('discard')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSCarRedAction.setStatus('current')
hpnicfCBQoSCarRedRemarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSCarRedRemarkValue.setStatus('current')
hpnicfCBQoSCarPolicedPriorityMapType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("policed-service-map", 1), ("local-precedence-dot1p-map", 2), ("drop-precedence-map", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSCarPolicedPriorityMapType.setStatus('current')
hpnicfCBQoSCarRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 3, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSCarRowStatus.setStatus('current')
hpnicfCBQoSAggregativeCarCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 4), )
if mibBuilder.loadTexts: hpnicfCBQoSAggregativeCarCfgInfoTable.setStatus('current')
hpnicfCBQoSAggregativeCarCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 4, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSBehaviorIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSCarAggregativeCarIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSAggregativeCarCfgInfoEntry.setStatus('current')
hpnicfCBQoSCarAggregativeCarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfCBQoSCarAggregativeCarIndex.setStatus('current')
hpnicfCBQoSCarAggregativeCarName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSCarAggregativeCarName.setStatus('current')
hpnicfCBQoSAggregativeCarRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSAggregativeCarRowStatus.setStatus('current')
hpnicfCBQoSGtsCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 5), )
if mibBuilder.loadTexts: hpnicfCBQoSGtsCfgInfoTable.setStatus('current')
hpnicfCBQoSGtsCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 5, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSGtsCfgInfoEntry.setStatus('current')
hpnicfCBQoSGtsCir = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 5, 1, 1), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSGtsCir.setStatus('current')
hpnicfCBQoSGtsCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 5, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSGtsCbs.setStatus('current')
hpnicfCBQoSGtsEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 5, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSGtsEbs.setStatus('current')
hpnicfCBQoSGtsQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSGtsQueueLength.setStatus('current')
hpnicfCBQoSGtsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSGtsRowStatus.setStatus('current')
hpnicfCBQoSGtsPir = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 5, 1, 6), Unsigned32()).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSGtsPir.setStatus('current')
hpnicfCBQoSRemarkCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 6), )
if mibBuilder.loadTexts: hpnicfCBQoSRemarkCfgInfoTable.setStatus('current')
hpnicfCBQoSRemarkCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 6, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSBehaviorIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSRemarkType"))
if mibBuilder.loadTexts: hpnicfCBQoSRemarkCfgInfoEntry.setStatus('current')
hpnicfCBQoSRemarkType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 6, 1, 1), RemarkType())
if mibBuilder.loadTexts: hpnicfCBQoSRemarkType.setStatus('current')
hpnicfCBQoSRemarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSRemarkValue.setStatus('current')
hpnicfCBQoSRemarkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSRemarkRowStatus.setStatus('current')
hpnicfCBQoSQueueCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 7), )
if mibBuilder.loadTexts: hpnicfCBQoSQueueCfgInfoTable.setStatus('current')
hpnicfCBQoSQueueCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 7, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSQueueCfgInfoEntry.setStatus('current')
hpnicfCBQoSQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 7, 1, 1), QueueType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSQueueType.setStatus('current')
hpnicfCBQoSQueueDropType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("typeUnavailable", 0), ("typeTailDrop", 1), ("typeWred", 2))).clone('typeTailDrop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSQueueDropType.setStatus('current')
hpnicfCBQoSQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSQueueLength.setStatus('current')
hpnicfCBQoSQueueBandwidthUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 7, 1, 4), QueueBandwidthUnit()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSQueueBandwidthUnit.setStatus('current')
hpnicfCBQoSQueueBandwidthValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 10000000), ValueRangeConstraint(2147483647, 2147483647), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSQueueBandwidthValue.setStatus('current')
hpnicfCBQoSQueueCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(32, 1000000000), ValueRangeConstraint(2147483647, 2147483647), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSQueueCbs.setStatus('current')
hpnicfCBQoSQueueQueueNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096))).clone(namedValues=NamedValues(("unavailable", 0), ("a16", 16), ("a32", 32), ("a64", 64), ("a128", 128), ("a256", 256), ("a512", 512), ("a1024", 1024), ("a2048", 2048), ("a4096", 4096))).clone('a256')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSQueueQueueNumber.setStatus('current')
hpnicfCBQoSQueueCbsRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(25, 500), ValueRangeConstraint(2147483647, 2147483647), )).clone(25)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSQueueCbsRatio.setStatus('current')
hpnicfCBQoSQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 7, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSQueueRowStatus.setStatus('current')
hpnicfCBQoSWredCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 8), )
if mibBuilder.loadTexts: hpnicfCBQoSWredCfgInfoTable.setStatus('current')
hpnicfCBQoSWredCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 8, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSWredCfgInfoEntry.setStatus('current')
hpnicfCBQoSWredType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 8, 1, 1), WredType().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfCBQoSWredType.setStatus('current')
hpnicfCBQoSWredWeightConst = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(9)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfCBQoSWredWeightConst.setStatus('current')
hpnicfCBQoSWredClassCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 9), )
if mibBuilder.loadTexts: hpnicfCBQoSWredClassCfgInfoTable.setStatus('current')
hpnicfCBQoSWredClassCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 9, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSBehaviorIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSWredClassValue"))
if mibBuilder.loadTexts: hpnicfCBQoSWredClassCfgInfoEntry.setStatus('current')
hpnicfCBQoSWredClassValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: hpnicfCBQoSWredClassValue.setStatus('current')
hpnicfCBQoSWredClassLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfCBQoSWredClassLowLimit.setStatus('current')
hpnicfCBQoSWredClassHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfCBQoSWredClassHighLimit.setStatus('current')
hpnicfCBQoSWredClassDiscardProb = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfCBQoSWredClassDiscardProb.setStatus('current')
hpnicfCBQoSPolicyRouteCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 10), )
if mibBuilder.loadTexts: hpnicfCBQoSPolicyRouteCfgInfoTable.setStatus('current')
hpnicfCBQoSPolicyRouteCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 10, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSPolicyRouteCfgInfoEntry.setStatus('current')
hpnicfCBQoSPolicyRouteIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 10, 1, 1), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSPolicyRouteIpAddrType.setStatus('current')
hpnicfCBQoSPolicyRouteNexthop = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 10, 1, 2), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSPolicyRouteNexthop.setStatus('current')
hpnicfCBQoSPolicyRouteBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("backup", 1), ("notbackup", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSPolicyRouteBackup.setStatus('current')
hpnicfCBQoSPolicyRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 10, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSPolicyRouteRowStatus.setStatus('current')
hpnicfCBQoSNatCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 11), )
if mibBuilder.loadTexts: hpnicfCBQoSNatCfgInfoTable.setStatus('current')
hpnicfCBQoSNatCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 11, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSNatCfgInfoEntry.setStatus('current')
hpnicfCBQoSNatMainNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSNatMainNumber.setStatus('current')
hpnicfCBQoSNatBackupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSNatBackupNumber.setStatus('current')
hpnicfCBQoSNatServiceClass = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSNatServiceClass.setStatus('current')
hpnicfCBQoSNatRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 11, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSNatRowStatus.setStatus('current')
hpnicfCBQoSFirewallCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 12), )
if mibBuilder.loadTexts: hpnicfCBQoSFirewallCfgInfoTable.setStatus('current')
hpnicfCBQoSFirewallCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 12, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSFirewallCfgInfoEntry.setStatus('current')
hpnicfCBQoSFirewallAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('permit')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSFirewallAction.setStatus('current')
hpnicfCBQoSFirewallRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 12, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSFirewallRowStatus.setStatus('current')
hpnicfCBQoSSamplingCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 13), )
if mibBuilder.loadTexts: hpnicfCBQoSSamplingCfgInfoTable.setStatus('current')
hpnicfCBQoSSamplingCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 13, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSSamplingCfgInfoEntry.setStatus('current')
hpnicfCBQoSSamplingNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSSamplingNum.setStatus('current')
hpnicfCBQoSSamplingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 13, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSSamplingRowStatus.setStatus('current')
hpnicfCBQoSAccountCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 14), )
if mibBuilder.loadTexts: hpnicfCBQoSAccountCfgInfoTable.setStatus('current')
hpnicfCBQoSAccountCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 14, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSAccountCfgInfoEntry.setStatus('current')
hpnicfCBQoSAccounting = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 14, 1, 1), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSAccounting.setStatus('current')
hpnicfCBQoSAccountRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 14, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSAccountRowStatus.setStatus('current')
hpnicfCBQoSAccountingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 1), ("packet", 2), ("byte", 3), ("both", 4))).clone('auto')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSAccountingMode.setStatus('current')
hpnicfCBQoSRedirectCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 15), )
if mibBuilder.loadTexts: hpnicfCBQoSRedirectCfgInfoTable.setStatus('current')
hpnicfCBQoSRedirectCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 15, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSRedirectCfgInfoEntry.setStatus('current')
hpnicfCBQoSRedirectType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cpu", 1), ("interface", 2), ("nextHop", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSRedirectType.setStatus('current')
hpnicfCBQoSRedirectIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 15, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSRedirectIfIndex.setStatus('current')
hpnicfCBQoSRedirectIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 15, 1, 3), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSRedirectIpAddressType.setStatus('current')
hpnicfCBQoSRedirectIpAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 15, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSRedirectIpAddress1.setStatus('current')
hpnicfCBQoSRedirectIpAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 15, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSRedirectIpAddress2.setStatus('current')
hpnicfCBQoSRedirectRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 15, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSRedirectRowStatus.setStatus('current')
hpnicfCBQoSRedirectIpv6Interface1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 15, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSRedirectIpv6Interface1.setStatus('current')
hpnicfCBQoSRedirectIpv6Interface2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 15, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSRedirectIpv6Interface2.setStatus('current')
hpnicfCBQoSRedirectIfVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 4094), ValueRangeConstraint(65535, 65535), )).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSRedirectIfVlanID.setStatus('current')
hpnicfCBQoSPriorityMapCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 16), )
if mibBuilder.loadTexts: hpnicfCBQoSPriorityMapCfgInfoTable.setStatus('current')
hpnicfCBQoSPriorityMapCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 16, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSPriorityMapCfgInfoEntry.setStatus('current')
hpnicfCBQoSPriorityMapImportType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("invalid", 1), ("dscp", 2), ("dot1p", 3), ("exp", 4), ("ipPrecedence", 5), ("localPrecedence", 6), ("dropPrecedence", 7))).clone('invalid')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSPriorityMapImportType.setStatus('current')
hpnicfCBQoSPriorityMapExportType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("invalid", 1), ("dscp", 2), ("dot1p", 3), ("exp", 4), ("ipPrecedence", 5), ("localPrecedence", 6), ("dropPrecedence", 7))).clone('invalid')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSPriorityMapExportType.setStatus('current')
hpnicfCBQoSPriorityMapGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 16, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSPriorityMapGroupIndex.setStatus('current')
hpnicfCBQoSPriorityMapGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 16, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSPriorityMapGroupName.setStatus('current')
hpnicfCBQoSPriorityMapAuto = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("autoDscp", 2), ("autoDot1p", 3), ("autoMplsExp", 4), ("autoIp", 5))).clone('invalid')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSPriorityMapAuto.setStatus('current')
hpnicfCBQoSPriorityMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 16, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSPriorityMapRowStatus.setStatus('current')
hpnicfCBQoSMirrorCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 17), )
if mibBuilder.loadTexts: hpnicfCBQoSMirrorCfgInfoTable.setStatus('current')
hpnicfCBQoSMirrorCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 17, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSMirrorCfgInfoEntry.setStatus('current')
hpnicfCBQoSMirrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("interface", 1), ("cpu", 2), ("vlan", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSMirrorType.setStatus('current')
hpnicfCBQoSMirrorIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 17, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSMirrorIfIndex.setStatus('current')
hpnicfCBQoSMirrorVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 17, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSMirrorVlanID.setStatus('current')
hpnicfCBQoSMirrorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 17, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSMirrorRowStatus.setStatus('current')
hpnicfCBQoSNestCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 18), )
if mibBuilder.loadTexts: hpnicfCBQoSNestCfgInfoTable.setStatus('current')
hpnicfCBQoSNestCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 18, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSNestCfgInfoEntry.setStatus('current')
hpnicfCBQoSNestServiceVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 4094), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSNestServiceVlanID.setStatus('current')
hpnicfCBQoSNestServiceDot1pValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSNestServiceDot1pValue.setStatus('current')
hpnicfCBQoSNestCustomerVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 4094), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSNestCustomerVlanID.setStatus('current')
hpnicfCBQoSNestCustomerDot1pValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSNestCustomerDot1pValue.setStatus('current')
hpnicfCBQoSNestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 18, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSNestRowStatus.setStatus('current')
hpnicfCBQoSNestPolicyCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 19), )
if mibBuilder.loadTexts: hpnicfCBQoSNestPolicyCfgInfoTable.setStatus('current')
hpnicfCBQoSNestPolicyCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 19, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSNestPolicyCfgInfoEntry.setStatus('current')
hpnicfCBQoSNestPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 19, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSNestPolicyName.setStatus('current')
hpnicfCBQoSNestPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 19, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSNestPolicyRowStatus.setStatus('current')
hpnicfCBQoSMirrorIfCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 20), )
if mibBuilder.loadTexts: hpnicfCBQoSMirrorIfCfgInfoTable.setStatus('current')
hpnicfCBQoSMirrorIfCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 20, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSBehaviorIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSMirrorIfMainIfIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSMirrorIfCfgInfoEntry.setStatus('current')
hpnicfCBQoSMirrorIfMainIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 20, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfCBQoSMirrorIfMainIfIndex.setStatus('current')
hpnicfCBQoSMirrorIfMainIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2))).clone('active')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSMirrorIfMainIfStatus.setStatus('current')
hpnicfCBQoSMirrorIfBackupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 20, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSMirrorIfBackupIfIndex.setStatus('current')
hpnicfCBQoSMirrorIfBackupIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2))).clone('active')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSMirrorIfBackupIfStatus.setStatus('current')
hpnicfCBQoSMirrorIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 20, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSMirrorIfRowStatus.setStatus('current')
hpnicfCBQoSColoredRemarkCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 21), )
if mibBuilder.loadTexts: hpnicfCBQoSColoredRemarkCfgTable.setStatus('current')
hpnicfCBQoSColoredRemarkCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 21, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSBehaviorIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSColoredRemarkType"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSColoredRemarkColor"))
if mibBuilder.loadTexts: hpnicfCBQoSColoredRemarkCfgEntry.setStatus('current')
hpnicfCBQoSColoredRemarkType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 21, 1, 1), RemarkType())
if mibBuilder.loadTexts: hpnicfCBQoSColoredRemarkType.setStatus('current')
hpnicfCBQoSColoredRemarkColor = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("green", 1), ("yellow", 2), ("red", 3))))
if mibBuilder.loadTexts: hpnicfCBQoSColoredRemarkColor.setStatus('current')
hpnicfCBQoSColoredRemarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 21, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSColoredRemarkValue.setStatus('current')
hpnicfCBQoSColoredRemarkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 21, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSColoredRemarkRowStatus.setStatus('current')
hpnicfCBQoSPrimapCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 22), )
if mibBuilder.loadTexts: hpnicfCBQoSPrimapCfgInfoTable.setStatus('current')
hpnicfCBQoSPrimapCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 22, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSBehaviorIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPrimapColorType"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPrePriMapTableType"))
if mibBuilder.loadTexts: hpnicfCBQoSPrimapCfgInfoEntry.setStatus('current')
hpnicfCBQoSPrimapColorType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 22, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noColorMap", 1), ("colorMap", 2))))
if mibBuilder.loadTexts: hpnicfCBQoSPrimapColorType.setStatus('current')
hpnicfCBQoSPrePriMapTableType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 22, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34))).clone(namedValues=NamedValues(("dot1pToLp", 1), ("dot1pToDp", 2), ("expToLp", 3), ("dscpToLp", 4), ("expToDp", 5), ("dscpToDp", 6), ("dscpToDot1p", 7), ("dot1pToDscp", 8), ("dscpToDscp", 9), ("dscpToExp", 10), ("expToDscp", 11), ("expToDot1p", 12), ("expToExp", 13), ("lpToDot1p", 14), ("dot1pToRpr", 15), ("dscpToRpr", 16), ("expToRpr", 17), ("ippreToRpr", 18), ("upToDot1p", 19), ("upToDscp", 20), ("upToExp", 21), ("upToDp", 22), ("upToLp", 23), ("upToRpr", 24), ("upToFc", 25), ("lpTodscp", 26), ("dot11eToLp", 27), ("lpToDot11e", 28), ("lpToLp", 29), ("dot1pToExp", 30), ("lpToExp", 31), ("lpToDp", 32), ("upToUp", 33), ("dot1pToDot1p", 34))))
if mibBuilder.loadTexts: hpnicfCBQoSPrePriMapTableType.setStatus('current')
hpnicfCBQoSPrimapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 22, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSPrimapRowStatus.setStatus('current')
hpnicfCBQoSColorMapDpCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 23), )
if mibBuilder.loadTexts: hpnicfCBQoSColorMapDpCfgInfoTable.setStatus('current')
hpnicfCBQoSColorMapDpCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 23, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSColorMapDpCfgInfoEntry.setStatus('current')
hpnicfCBQoSColorMapDpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 23, 1, 1), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSColorMapDpEnable.setStatus('current')
hpnicfCBQoSColorMapDpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 23, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSColorMapDpRowStatus.setStatus('current')
hpnicfCBQoSPolicyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 3))
hpnicfCBQoSPolicyIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSPolicyIndexNext.setStatus('current')
hpnicfCBQoSPolicyCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 3, 2), )
if mibBuilder.loadTexts: hpnicfCBQoSPolicyCfgInfoTable.setStatus('current')
hpnicfCBQoSPolicyCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 3, 2, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSPolicyCfgInfoEntry.setStatus('current')
hpnicfCBQoSPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 3, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfCBQoSPolicyIndex.setStatus('current')
hpnicfCBQoSPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 3, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSPolicyName.setStatus('current')
hpnicfCBQoSPolicyClassCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSPolicyClassCount.setStatus('current')
hpnicfCBQoSPolicyConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unavailable", 0), ("config", 1), ("auto", 2))).clone('config')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSPolicyConfigMode.setStatus('current')
hpnicfCBQoSPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("systemDefined", 1), ("userDefined", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSPolicyType.setStatus('current')
hpnicfCBQoSPolicyClassNextIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSPolicyClassNextIndex.setStatus('current')
hpnicfCBQoSPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 3, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSPolicyRowStatus.setStatus('current')
hpnicfCBQoSPolicyClassCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 3, 3), )
if mibBuilder.loadTexts: hpnicfCBQoSPolicyClassCfgInfoTable.setStatus('current')
hpnicfCBQoSPolicyClassCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 3, 3, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSPolicyClassCfgInfoEntry.setStatus('current')
hpnicfCBQoSPolicyClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 3, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfCBQoSPolicyClassIndex.setStatus('current')
hpnicfCBQoSPolicyClassClassifierIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 3, 3, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSPolicyClassClassifierIndex.setStatus('current')
hpnicfCBQoSPolicyClassClassifierName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 3, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSPolicyClassClassifierName.setStatus('current')
hpnicfCBQoSPolicyClassBehaviorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 3, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSPolicyClassBehaviorIndex.setStatus('current')
hpnicfCBQoSPolicyClassBehaviorName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 3, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSPolicyClassBehaviorName.setStatus('current')
hpnicfCBQoSPolicyClassPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 16383), ValueRangeConstraint(2147483647, 2147483647), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSPolicyClassPrecedence.setStatus('current')
hpnicfCBQoSPolicyClassRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 3, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSPolicyClassRowStatus.setStatus('current')
hpnicfCBQoSPolicyClassMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("modeNo", 1), ("modeDot1q", 2), ("modeQppb", 3), ("modeIpSourceGuard", 4), ("modeVoiceVlan", 5), ("modeDCBX", 6))).clone('modeNo')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSPolicyClassMode.setStatus('current')
hpnicfCBQoSPolicyClassCfgOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSPolicyClassCfgOrder.setStatus('current')
hpnicfCBQoSApplyPolicyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4))
hpnicfCBQoSIfApplyPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 1), )
if mibBuilder.loadTexts: hpnicfCBQoSIfApplyPolicyTable.setStatus('current')
hpnicfCBQoSIfApplyPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 1, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSIfApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSIfApplyPolicyDirection"))
if mibBuilder.loadTexts: hpnicfCBQoSIfApplyPolicyEntry.setStatus('current')
hpnicfCBQoSIfApplyPolicyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfCBQoSIfApplyPolicyIfIndex.setStatus('current')
hpnicfCBQoSIfApplyPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 1, 1, 2), DirectionType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfCBQoSIfApplyPolicyDirection.setStatus('current')
hpnicfCBQoSIfApplyPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSIfApplyPolicyName.setStatus('current')
hpnicfCBQoSIfApplyPolicyEnableDynamic = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unavailable", 1), ("true", 2), ("false", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSIfApplyPolicyEnableDynamic.setStatus('current')
hpnicfCBQoSIfApplyPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSIfApplyPolicyRowStatus.setStatus('current')
hpnicfCBQoSIfApplyPolicyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("proccessing", 1), ("success", 2), ("partialItemFailed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfApplyPolicyStatus.setStatus('current')
hpnicfCBQoSAtmPvcApplyPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 2), )
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcApplyPolicyTable.setStatus('current')
hpnicfCBQoSAtmPvcApplyPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 2, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyVPI"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyVCI"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyDirection"))
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcApplyPolicyEntry.setStatus('current')
hpnicfCBQoSAtmPvcApplyPolicyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcApplyPolicyIfIndex.setStatus('current')
hpnicfCBQoSAtmPvcApplyPolicyVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcApplyPolicyVPI.setStatus('current')
hpnicfCBQoSAtmPvcApplyPolicyVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 2, 1, 3), Integer32())
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcApplyPolicyVCI.setStatus('current')
hpnicfCBQoSAtmPvcApplyPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 2, 1, 4), DirectionType())
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcApplyPolicyDirection.setStatus('current')
hpnicfCBQoSAtmPvcApplyPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcApplyPolicyName.setStatus('current')
hpnicfCBQoSAtmPvcApplyPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcApplyPolicyRowStatus.setStatus('current')
hpnicfCBQoSVlanApplyPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 3), )
if mibBuilder.loadTexts: hpnicfCBQoSVlanApplyPolicyTable.setStatus('current')
hpnicfCBQoSVlanApplyPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 3, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSVlanApplyPolicyVlanid"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSVlanApplyPolicyDirection"))
if mibBuilder.loadTexts: hpnicfCBQoSVlanApplyPolicyEntry.setStatus('current')
hpnicfCBQoSVlanApplyPolicyVlanid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 3, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfCBQoSVlanApplyPolicyVlanid.setStatus('current')
hpnicfCBQoSVlanApplyPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 3, 1, 2), DirectionType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfCBQoSVlanApplyPolicyDirection.setStatus('current')
hpnicfCBQoSVlanApplyPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSVlanApplyPolicyName.setStatus('current')
hpnicfCBQoSVlanApplyPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSVlanApplyPriority.setStatus('current')
hpnicfCBQoSVlanApplyPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSVlanApplyPolicyRowStatus.setStatus('current')
hpnicfCBQoSVlanApplyPolicyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("proccessing", 1), ("success", 2), ("partialItemFailed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSVlanApplyPolicyStatus.setStatus('current')
hpnicfCBQoSFrClassApplyPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 4), )
if mibBuilder.loadTexts: hpnicfCBQoSFrClassApplyPolicyTable.setStatus('current')
hpnicfCBQoSFrClassApplyPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 4, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrClassApplyPolicyFrClassName"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrClassApplyPolicyDirection"))
if mibBuilder.loadTexts: hpnicfCBQoSFrClassApplyPolicyEntry.setStatus('current')
hpnicfCBQoSFrClassApplyPolicyFrClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: hpnicfCBQoSFrClassApplyPolicyFrClassName.setStatus('current')
hpnicfCBQoSFrClassApplyPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 4, 1, 2), DirectionType())
if mibBuilder.loadTexts: hpnicfCBQoSFrClassApplyPolicyDirection.setStatus('current')
hpnicfCBQoSFrClassApplyPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSFrClassApplyPolicyName.setStatus('current')
hpnicfCBQoSFrClassApplyPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSFrClassApplyPolicyRowStatus.setStatus('current')
hpnicfCBQoSFrPvcApplyPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 5), )
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcApplyPolicyTable.setStatus('current')
hpnicfCBQoSFrPvcApplyPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 5, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyDlciNum"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyDirection"))
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcApplyPolicyEntry.setStatus('current')
hpnicfCBQoSFrPvcApplyPolicyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcApplyPolicyIfIndex.setStatus('current')
hpnicfCBQoSFrPvcApplyPolicyDlciNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1007)))
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcApplyPolicyDlciNum.setStatus('current')
hpnicfCBQoSFrPvcApplyPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 5, 1, 3), DirectionType())
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcApplyPolicyDirection.setStatus('current')
hpnicfCBQoSFrPvcApplyPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcApplyPolicyName.setStatus('current')
hpnicfCBQoSFrPvcApplyPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 5, 1, 5), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcApplyPolicyRowStatus.setStatus('current')
hpnicfCBQoSGlobalApplyTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 6), )
if mibBuilder.loadTexts: hpnicfCBQoSGlobalApplyTable.setStatus('current')
hpnicfCBQoSGlobalApplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 6, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSGlobalApplyDirection"))
if mibBuilder.loadTexts: hpnicfCBQoSGlobalApplyEntry.setStatus('current')
hpnicfCBQoSGlobalApplyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 6, 1, 1), DirectionType())
if mibBuilder.loadTexts: hpnicfCBQoSGlobalApplyDirection.setStatus('current')
hpnicfCBQoSGlobalApplyName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSGlobalApplyName.setStatus('current')
hpnicfCBQoSGlobalApplyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSGlobalApplyRowStatus.setStatus('current')
hpnicfCBQoSGlobalApplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("proccessing", 1), ("success", 2), ("partialItemFailed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSGlobalApplyStatus.setStatus('current')
hpnicfCBQoSCpApplyPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 7), )
if mibBuilder.loadTexts: hpnicfCBQoSCpApplyPolicyTable.setStatus('current')
hpnicfCBQoSCpApplyPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 7, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSCpApplyPolicyChassis"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSCpApplyPolicySlot"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSCpApplyPolicyDirection"))
if mibBuilder.loadTexts: hpnicfCBQoSCpApplyPolicyEntry.setStatus('current')
hpnicfCBQoSCpApplyPolicyChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hpnicfCBQoSCpApplyPolicyChassis.setStatus('current')
hpnicfCBQoSCpApplyPolicySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 7, 1, 2), Unsigned32())
if mibBuilder.loadTexts: hpnicfCBQoSCpApplyPolicySlot.setStatus('current')
hpnicfCBQoSCpApplyPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 7, 1, 3), DirectionType())
if mibBuilder.loadTexts: hpnicfCBQoSCpApplyPolicyDirection.setStatus('current')
hpnicfCBQoSCpApplyPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 7, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSCpApplyPolicyName.setStatus('current')
hpnicfCBQoSCpApplyPolicyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("proccessing", 1), ("success", 2), ("partialItemFailed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSCpApplyPolicyStatus.setStatus('current')
hpnicfCBQoSCpApplyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 7, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSCpApplyRowStatus.setStatus('current')
hpnicfCBQoSApplyPolicyStaticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5))
hpnicfCBQoSIfStaticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1))
hpnicfCBQoSIfCbqRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 1), )
if mibBuilder.loadTexts: hpnicfCBQoSIfCbqRunInfoTable.setStatus('current')
hpnicfCBQoSIfCbqRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 1, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSIfApplyPolicyIfIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSIfCbqRunInfoEntry.setStatus('current')
hpnicfCBQoSIfCbqQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfCbqQueueSize.setStatus('current')
hpnicfCBQoSIfCbqDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfCbqDiscard.setStatus('current')
hpnicfCBQoSIfCbqEfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfCbqEfQueueSize.setStatus('current')
hpnicfCBQoSIfCbqAfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfCbqAfQueueSize.setStatus('current')
hpnicfCBQoSIfCbqBeQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfCbqBeQueueSize.setStatus('current')
hpnicfCBQoSIfCbqBeActiveQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfCbqBeActiveQueueNum.setStatus('current')
hpnicfCBQoSIfCbqBeMaxActiveQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfCbqBeMaxActiveQueueNum.setStatus('current')
hpnicfCBQoSIfCbqBeTotalQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfCbqBeTotalQueueNum.setStatus('current')
hpnicfCBQoSIfCbqAfAllocatedQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfCbqAfAllocatedQueueNum.setStatus('current')
hpnicfCBQoSIfClassMatchRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 2), )
if mibBuilder.loadTexts: hpnicfCBQoSIfClassMatchRunInfoTable.setStatus('current')
hpnicfCBQoSIfClassMatchRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 2, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSIfApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSIfApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSIfClassMatchRunInfoEntry.setStatus('current')
hpnicfCBQoSIfClassMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfClassMatchedPackets.setStatus('current')
hpnicfCBQoSIfClassMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfClassMatchedBytes.setStatus('current')
hpnicfCBQoSIfClassAverageRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfClassAverageRate.setStatus('current')
hpnicfCBQoSIfCarRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 3), )
if mibBuilder.loadTexts: hpnicfCBQoSIfCarRunInfoTable.setStatus('current')
hpnicfCBQoSIfCarRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 3, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSIfApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSIfApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSIfCarRunInfoEntry.setStatus('current')
hpnicfCBQoSIfCarGreenPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfCarGreenPackets.setStatus('current')
hpnicfCBQoSIfCarGreenBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfCarGreenBytes.setStatus('current')
hpnicfCBQoSIfCarRedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfCarRedPackets.setStatus('current')
hpnicfCBQoSIfCarRedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfCarRedBytes.setStatus('current')
hpnicfCBQoSIfCarYellowPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfCarYellowPackets.setStatus('current')
hpnicfCBQoSIfCarYellowBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfCarYellowBytes.setStatus('current')
hpnicfCBQoSIfGtsRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 4), )
if mibBuilder.loadTexts: hpnicfCBQoSIfGtsRunInfoTable.setStatus('current')
hpnicfCBQoSIfGtsRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 4, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSIfApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSIfApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSIfGtsRunInfoEntry.setStatus('current')
hpnicfCBQoSIfGtsPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfGtsPassedPackets.setStatus('current')
hpnicfCBQoSIfGtsPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfGtsPassedBytes.setStatus('current')
hpnicfCBQoSIfGtsDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfGtsDiscardedPackets.setStatus('current')
hpnicfCBQoSIfGtsDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfGtsDiscardedBytes.setStatus('current')
hpnicfCBQoSIfGtsDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfGtsDelayedPackets.setStatus('current')
hpnicfCBQoSIfGtsDelayedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfGtsDelayedBytes.setStatus('current')
hpnicfCBQoSIfGtsQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfGtsQueueSize.setStatus('current')
hpnicfCBQoSIfRemarkRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 5), )
if mibBuilder.loadTexts: hpnicfCBQoSIfRemarkRunInfoTable.setStatus('current')
hpnicfCBQoSIfRemarkRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 5, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSIfApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSIfApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSIfRemarkRunInfoEntry.setStatus('current')
hpnicfCBQoSIfRemarkedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 5, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfRemarkedPackets.setStatus('current')
hpnicfCBQoSIfQueueRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 6), )
if mibBuilder.loadTexts: hpnicfCBQoSIfQueueRunInfoTable.setStatus('current')
hpnicfCBQoSIfQueueRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 6, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSIfApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSIfApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSIfQueueRunInfoEntry.setStatus('current')
hpnicfCBQoSIfQueueMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 6, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfQueueMatchedPackets.setStatus('current')
hpnicfCBQoSIfQueueMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 6, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfQueueMatchedBytes.setStatus('current')
hpnicfCBQoSIfQueueEnqueuedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfQueueEnqueuedPackets.setStatus('current')
hpnicfCBQoSIfQueueEnqueuedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfQueueEnqueuedBytes.setStatus('current')
hpnicfCBQoSIfQueueDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfQueueDiscardedPackets.setStatus('current')
hpnicfCBQoSIfQueueDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfQueueDiscardedBytes.setStatus('current')
hpnicfCBQoSIfWredRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 7), )
if mibBuilder.loadTexts: hpnicfCBQoSIfWredRunInfoTable.setStatus('current')
hpnicfCBQoSIfWredRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 7, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSIfApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSIfApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSWredClassValue"))
if mibBuilder.loadTexts: hpnicfCBQoSIfWredRunInfoEntry.setStatus('current')
hpnicfCBQoSIfWredRandomDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 7, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfWredRandomDiscardedPackets.setStatus('current')
hpnicfCBQoSIfWredTailDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 7, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfWredTailDiscardedPackets.setStatus('current')
hpnicfCBQoSIfAccountingRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 8), )
if mibBuilder.loadTexts: hpnicfCBQoSIfAccountingRunInfoTable.setStatus('current')
hpnicfCBQoSIfAccountingRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 8, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSIfApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSIfApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSIfAccountingRunInfoEntry.setStatus('current')
hpnicfCBQoSIfAccountingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 8, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfAccountingPackets.setStatus('current')
hpnicfCBQoSIfAccountingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 8, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfAccountingBytes.setStatus('current')
hpnicfCBQoSAtmPvcStaticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2))
hpnicfCBQoSAtmPvcCbqRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 1), )
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCbqRunInfoTable.setStatus('current')
hpnicfCBQoSAtmPvcCbqRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 1, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyVPI"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyVCI"))
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCbqRunInfoEntry.setStatus('current')
hpnicfCBQoSAtmPvcCbqQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCbqQueueSize.setStatus('current')
hpnicfCBQoSAtmPvcCbqDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCbqDiscard.setStatus('current')
hpnicfCBQoSAtmPvcCbqEfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCbqEfQueueSize.setStatus('current')
hpnicfCBQoSAtmPvcCbqAfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCbqAfQueueSize.setStatus('current')
hpnicfCBQoSAtmPvcCbqBeQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCbqBeQueueSize.setStatus('current')
hpnicfCBQoSAtmPvcCbqBeActiveQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCbqBeActiveQueueNum.setStatus('current')
hpnicfCBQoSAtmPvcCbqBeMaxActiveQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCbqBeMaxActiveQueueNum.setStatus('current')
hpnicfCBQoSAtmPvcCbqBeTotalQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCbqBeTotalQueueNum.setStatus('current')
hpnicfCBQoSAtmPvcCbqAfAllocatedQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCbqAfAllocatedQueueNum.setStatus('current')
hpnicfCBQoSAtmPvcClassMatchRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 2), )
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcClassMatchRunInfoTable.setStatus('current')
hpnicfCBQoSAtmPvcClassMatchRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 2, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyVPI"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyVCI"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcClassMatchRunInfoEntry.setStatus('current')
hpnicfCBQoSAtmPvcClassMatchPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcClassMatchPackets.setStatus('current')
hpnicfCBQoSAtmPvcClassMatchBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcClassMatchBytes.setStatus('current')
hpnicfCBQoSAtmPvcClassAverageRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcClassAverageRate.setStatus('current')
hpnicfCBQoSAtmPvcCarRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 3), )
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCarRunInfoTable.setStatus('current')
hpnicfCBQoSAtmPvcCarRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 3, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyVPI"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyVCI"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCarRunInfoEntry.setStatus('current')
hpnicfCBQoSAtmPvcCarConformPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCarConformPackets.setStatus('current')
hpnicfCBQoSAtmPvcCarConformBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCarConformBytes.setStatus('current')
hpnicfCBQoSAtmPvcCarExceedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCarExceedPackets.setStatus('current')
hpnicfCBQoSAtmPvcCarExceedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCarExceedBytes.setStatus('current')
hpnicfCBQoSAtmPvcGtsRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 4), )
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcGtsRunInfoTable.setStatus('current')
hpnicfCBQoSAtmPvcGtsRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 4, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyVPI"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyVCI"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcGtsRunInfoEntry.setStatus('current')
hpnicfCBQoSAtmPvcGtsPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcGtsPassedPackets.setStatus('current')
hpnicfCBQoSAtmPvcGtsPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcGtsPassedBytes.setStatus('current')
hpnicfCBQoSAtmPvcGtsDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcGtsDiscardedPackets.setStatus('current')
hpnicfCBQoSAtmPvcGtsDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcGtsDiscardedBytes.setStatus('current')
hpnicfCBQoSAtmPvcGtsDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcGtsDelayedPackets.setStatus('current')
hpnicfCBQoSAtmPvcGtsDelayedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcGtsDelayedBytes.setStatus('current')
hpnicfCBQoSAtmPvcGtsQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcGtsQueueSize.setStatus('current')
hpnicfCBQoSAtmPvcRemarkRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 5), )
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcRemarkRunInfoTable.setStatus('current')
hpnicfCBQoSAtmPvcRemarkRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 5, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyVPI"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyVCI"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcRemarkRunInfoEntry.setStatus('current')
hpnicfCBQoSAtmPvcRemarkedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 5, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcRemarkedPackets.setStatus('current')
hpnicfCBQoSAtmPvcQueueRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 6), )
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcQueueRunInfoTable.setStatus('current')
hpnicfCBQoSAtmPvcQueueRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 6, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyVPI"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyVCI"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcQueueRunInfoEntry.setStatus('current')
hpnicfCBQoSAtmPvcQueueMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 6, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcQueueMatchedPackets.setStatus('current')
hpnicfCBQoSAtmPvcQueueMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 6, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcQueueMatchedBytes.setStatus('current')
hpnicfCBQoSAtmPvcQueueEnqueuedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcQueueEnqueuedPackets.setStatus('current')
hpnicfCBQoSAtmPvcQueueEnqueuedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcQueueEnqueuedBytes.setStatus('current')
hpnicfCBQoSAtmPvcQueueDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcQueueDiscardedPackets.setStatus('current')
hpnicfCBQoSAtmPvcQueueDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcQueueDiscardedBytes.setStatus('current')
hpnicfCBQoSAtmPvcWredRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 7), )
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcWredRunInfoTable.setStatus('current')
hpnicfCBQoSAtmPvcWredRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 7, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyVPI"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyVCI"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSWredClassValue"))
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcWredRunInfoEntry.setStatus('current')
hpnicfCBQoSAtmPvcWredRandomDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 7, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcWredRandomDiscardedPackets.setStatus('current')
hpnicfCBQoSAtmPvcWredTailDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 7, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcWredTailDiscardedPackets.setStatus('current')
hpnicfCBQoSAtmPvcAccountingRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 8), )
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcAccountingRunInfoTable.setStatus('current')
hpnicfCBQoSAtmPvcAccountingRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 8, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyVPI"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyVCI"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSWredClassValue"))
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcAccountingRunInfoEntry.setStatus('current')
hpnicfCBQoSAtmPvcAccountingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 8, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcAccountingPackets.setStatus('current')
hpnicfCBQoSAtmPvcAccountingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 8, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcAccountingBytes.setStatus('current')
hpnicfCBQoSFrPvcStaticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3))
hpnicfCBQoSFrPvcCbqRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 1), )
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCbqRunInfoTable.setStatus('current')
hpnicfCBQoSFrPvcCbqRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 1, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyDlciNum"))
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCbqRunInfoEntry.setStatus('current')
hpnicfCBQoSFrPvcCbqQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCbqQueueSize.setStatus('current')
hpnicfCBQoSFrPvcCbqDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCbqDiscard.setStatus('current')
hpnicfCBQoSFrPvcCbqEfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCbqEfQueueSize.setStatus('current')
hpnicfCBQoSFrPvcCbqAfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCbqAfQueueSize.setStatus('current')
hpnicfCBQoSFrPvcCbqBeQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCbqBeQueueSize.setStatus('current')
hpnicfCBQoSFrPvcCbqBeActiveQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCbqBeActiveQueueNum.setStatus('current')
hpnicfCBQoSFrPvcCbqBeMaxActiveQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCbqBeMaxActiveQueueNum.setStatus('current')
hpnicfCBQoSFrPvcCbqBeTotalQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCbqBeTotalQueueNum.setStatus('current')
hpnicfCBQoSFrPvcCbqAfAllocatedQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCbqAfAllocatedQueueNum.setStatus('current')
hpnicfCBQoSFrPvcClassMatchRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 2), )
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcClassMatchRunInfoTable.setStatus('current')
hpnicfCBQoSFrPvcClassMatchRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 2, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyDlciNum"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcClassMatchRunInfoEntry.setStatus('current')
hpnicfCBQoSFrPvcClassMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcClassMatchedPackets.setStatus('current')
hpnicfCBQoSFrPvcClassMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcClassMatchedBytes.setStatus('current')
hpnicfCBQoSFrPvcClassAverageRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcClassAverageRate.setStatus('current')
hpnicfCBQoSFrPvcCarRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 3), )
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCarRunInfoTable.setStatus('current')
hpnicfCBQoSFrPvcCarRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 3, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyDlciNum"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCarRunInfoEntry.setStatus('current')
hpnicfCBQoSFrPvcCarConformPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCarConformPackets.setStatus('current')
hpnicfCBQoSFrPvcCarConformBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCarConformBytes.setStatus('current')
hpnicfCBQoSFrPvcCarExceedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCarExceedPackets.setStatus('current')
hpnicfCBQoSFrPvcCarExceedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCarExceedBytes.setStatus('current')
hpnicfCBQoSFrPvcGtsRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 4), )
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcGtsRunInfoTable.setStatus('current')
hpnicfCBQoSFrPvcGtsRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 4, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyDlciNum"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcGtsRunInfoEntry.setStatus('current')
hpnicfCBQoSFrPvcGtsPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcGtsPassedPackets.setStatus('current')
hpnicfCBQoSFrPvcGtsPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcGtsPassedBytes.setStatus('current')
hpnicfCBQoSFrPvcGtsDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcGtsDiscardedPackets.setStatus('current')
hpnicfCBQoSFrPvcGtsDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcGtsDiscardedBytes.setStatus('current')
hpnicfCBQoSFrPvcGtsDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcGtsDelayedPackets.setStatus('current')
hpnicfCBQoSFrPvcGtsDelayedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcGtsDelayedBytes.setStatus('current')
hpnicfCBQoSFrPvcGtsQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcGtsQueueSize.setStatus('current')
hpnicfCBQoSFrPvcRemarkRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 5), )
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcRemarkRunInfoTable.setStatus('current')
hpnicfCBQoSFrPvcRemarkRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 5, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyDlciNum"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcRemarkRunInfoEntry.setStatus('current')
hpnicfCBQoSFrPvcRemarkedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 5, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcRemarkedPackets.setStatus('current')
hpnicfCBQoSFrPvcQueueRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 6), )
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcQueueRunInfoTable.setStatus('current')
hpnicfCBQoSFrPvcQueueRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 6, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyDlciNum"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcQueueRunInfoEntry.setStatus('current')
hpnicfCBQoSFrPvcQueueMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 6, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcQueueMatchedPackets.setStatus('current')
hpnicfCBQoSFrPvcQueueMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 6, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcQueueMatchedBytes.setStatus('current')
hpnicfCBQoSFrPvcQueueEnqueuedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcQueueEnqueuedPackets.setStatus('current')
hpnicfCBQoSFrPvcQueueEnqueuedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcQueueEnqueuedBytes.setStatus('current')
hpnicfCBQoSFrPvcQueueDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcQueueDiscardedPackets.setStatus('current')
hpnicfCBQoSFrPvcQueueDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcQueueDiscardedBytes.setStatus('current')
hpnicfCBQoSFrPvcWredRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 7), )
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcWredRunInfoTable.setStatus('current')
hpnicfCBQoSFrPvcWredRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 7, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyDlciNum"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSWredClassValue"))
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcWredRunInfoEntry.setStatus('current')
hpnicfCBQoSFrPvcWredRandomDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 7, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcWredRandomDiscardedPackets.setStatus('current')
hpnicfCBQoSFrPvcWredTailDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 7, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcWredTailDiscardedPackets.setStatus('current')
hpnicfCBQoSFrPvcAccountingRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 8), )
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcAccountingRunInfoTable.setStatus('current')
hpnicfCBQoSFrPvcAccountingRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 8, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyDlciNum"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSWredClassValue"))
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcAccountingRunInfoEntry.setStatus('current')
hpnicfCBQoSFrPvcAccountingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 8, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcAccountingPackets.setStatus('current')
hpnicfCBQoSFrPvcAccountingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 8, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcAccountingBytes.setStatus('current')
hpnicfCBQoSVlanStaticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 4))
hpnicfCBQoSVlanClassMatchRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 4, 1), )
if mibBuilder.loadTexts: hpnicfCBQoSVlanClassMatchRunInfoTable.setStatus('current')
hpnicfCBQoSVlanClassMatchRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 4, 1, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSVlanApplyPolicyVlanid"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSVlanApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSVlanClassMatchRunInfoEntry.setStatus('current')
hpnicfCBQoSVlanClassMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 4, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSVlanClassMatchedPackets.setStatus('current')
hpnicfCBQoSVlanAccountingRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 4, 2), )
if mibBuilder.loadTexts: hpnicfCBQoSVlanAccountingRunInfoTable.setStatus('current')
hpnicfCBQoSVlanAccountingRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 4, 2, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSVlanApplyPolicyVlanid"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSVlanApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSVlanAccountingRunInfoEntry.setStatus('current')
hpnicfCBQoSVlanAccountingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 4, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSVlanAccountingPackets.setStatus('current')
hpnicfCBQoSVlanAccountingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 4, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSVlanAccountingBytes.setStatus('current')
hpnicfCBQoSApplyPolicyIndexObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5))
hpnicfCBQoSApplyObjectTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 1), )
if mibBuilder.loadTexts: hpnicfCBQoSApplyObjectTable.setStatus('current')
hpnicfCBQoSApplyObjectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 1, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSApplyObjectIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSApplyObjectEntry.setStatus('current')
hpnicfCBQoSApplyObjectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hpnicfCBQoSApplyObjectIndex.setStatus('current')
hpnicfCBQoSApplyObjectType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 1, 1, 2), ApplyObjectType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSApplyObjectType.setStatus('current')
hpnicfCBQoSApplyObjectDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 1, 1, 3), DirectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSApplyObjectDirection.setStatus('current')
hpnicfCBQoSApplyObjectMainSite = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSApplyObjectMainSite.setStatus('current')
hpnicfCBQoSApplyObjectSubChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSApplyObjectSubChannel.setStatus('current')
hpnicfCBQoSApplyObjectSubClass = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSApplyObjectSubClass.setStatus('current')
hpnicfCBQoSApplyObjectSubClassSec = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSApplyObjectSubClassSec.setStatus('current')
hpnicfCBQoSIntApplyObjectTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 2), )
if mibBuilder.loadTexts: hpnicfCBQoSIntApplyObjectTable.setStatus('current')
hpnicfCBQoSIntApplyObjectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 2, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSIntApplyObjectIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSApplyObjectDirection"))
if mibBuilder.loadTexts: hpnicfCBQoSIntApplyObjectEntry.setStatus('current')
hpnicfCBQoSIntApplyObjectIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hpnicfCBQoSIntApplyObjectIfIndex.setStatus('current')
hpnicfCBQoSIntApplyObjectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIntApplyObjectIndex.setStatus('current')
hpnicfCBQoSVlanApplyObjectTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 3), )
if mibBuilder.loadTexts: hpnicfCBQoSVlanApplyObjectTable.setStatus('current')
hpnicfCBQoSVlanApplyObjectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 3, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSVlanApplyObjectVlanID"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSApplyObjectDirection"))
if mibBuilder.loadTexts: hpnicfCBQoSVlanApplyObjectEntry.setStatus('current')
hpnicfCBQoSVlanApplyObjectVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: hpnicfCBQoSVlanApplyObjectVlanID.setStatus('current')
hpnicfCBQoSVlanApplyObjectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSVlanApplyObjectIndex.setStatus('current')
hpnicfCBQoSPvcApplyObjectTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 4), )
if mibBuilder.loadTexts: hpnicfCBQoSPvcApplyObjectTable.setStatus('current')
hpnicfCBQoSPvcApplyObjectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 4, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPvcApplyObjectIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPvcApplyObjectPvcID"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSApplyObjectDirection"))
if mibBuilder.loadTexts: hpnicfCBQoSPvcApplyObjectEntry.setStatus('current')
hpnicfCBQoSPvcApplyObjectIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hpnicfCBQoSPvcApplyObjectIfIndex.setStatus('current')
hpnicfCBQoSPvcApplyObjectPvcID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 4, 1, 2), Unsigned32())
if mibBuilder.loadTexts: hpnicfCBQoSPvcApplyObjectPvcID.setStatus('current')
hpnicfCBQoSPvcApplyObjectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSPvcApplyObjectIndex.setStatus('current')
hpnicfCBQoSNestPolicyApplyObjectTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 5), )
if mibBuilder.loadTexts: hpnicfCBQoSNestPolicyApplyObjectTable.setStatus('current')
hpnicfCBQoSNestPolicyApplyObjectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 5, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSApplyObjectIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSNestPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSNestPolicyApplyObjectEntry.setStatus('current')
hpnicfCBQoSNestPolicyClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hpnicfCBQoSNestPolicyClassIndex.setStatus('current')
hpnicfCBQoSNestPolicyApplyObjectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSNestPolicyApplyObjectIndex.setStatus('current')
hpnicfCBQoSCpApplyObjectTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 6), )
if mibBuilder.loadTexts: hpnicfCBQoSCpApplyObjectTable.setStatus('current')
hpnicfCBQoSCpApplyObjectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 6, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSCpApplyObjectChassis"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSCpApplyObjectSlot"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSApplyObjectDirection"))
if mibBuilder.loadTexts: hpnicfCBQoSCpApplyObjectEntry.setStatus('current')
hpnicfCBQoSCpApplyObjectChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hpnicfCBQoSCpApplyObjectChassis.setStatus('current')
hpnicfCBQoSCpApplyObjectSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 6, 1, 2), Unsigned32())
if mibBuilder.loadTexts: hpnicfCBQoSCpApplyObjectSlot.setStatus('current')
hpnicfCBQoSCpApplyObjectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 6, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSCpApplyObjectIndex.setStatus('current')
hpnicfCBQoSStaticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6))
hpnicfCBQoSCbqRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 1), )
if mibBuilder.loadTexts: hpnicfCBQoSCbqRunInfoTable.setStatus('current')
hpnicfCBQoSCbqRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 1, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSApplyObjectIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSCbqRunInfoEntry.setStatus('current')
hpnicfCBQoSCbqQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSCbqQueueSize.setStatus('current')
hpnicfCBQoSCbqDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSCbqDiscard.setStatus('current')
hpnicfCBQoSCbqEfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSCbqEfQueueSize.setStatus('current')
hpnicfCBQoSCbqAfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSCbqAfQueueSize.setStatus('current')
hpnicfCBQoSCbqBeQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSCbqBeQueueSize.setStatus('current')
hpnicfCBQoSCbqBeActiveQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSCbqBeActiveQueueNum.setStatus('current')
hpnicfCBQoSCbqBeMaxActiveQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSCbqBeMaxActiveQueueNum.setStatus('current')
hpnicfCBQoSCbqBeTotalQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSCbqBeTotalQueueNum.setStatus('current')
hpnicfCBQoSCbqAfAllocatedQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSCbqAfAllocatedQueueNum.setStatus('current')
hpnicfCBQoSClassMatchRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 2), )
if mibBuilder.loadTexts: hpnicfCBQoSClassMatchRunInfoTable.setStatus('current')
hpnicfCBQoSClassMatchRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 2, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSApplyObjectIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSClassMatchRunInfoEntry.setStatus('current')
hpnicfCBQoSClassMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSClassMatchedPackets.setStatus('current')
hpnicfCBQoSClassMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSClassMatchedBytes.setStatus('current')
hpnicfCBQoSClassFwdPktpps = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSClassFwdPktpps.setStatus('current')
hpnicfCBQoSClassFwdPktbps = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSClassFwdPktbps.setStatus('current')
hpnicfCBQoSClassDropPktpps = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSClassDropPktpps.setStatus('current')
hpnicfCBQoSClassDropPktbps = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSClassDropPktbps.setStatus('current')
hpnicfCBQoSClassFlowStatInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSClassFlowStatInterval.setStatus('current')
hpnicfCBQoSClassBehaviorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("success", 1), ("failure", 2), ("partialSuccess", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSClassBehaviorStatus.setStatus('current')
hpnicfCBQoSCarRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 3), )
if mibBuilder.loadTexts: hpnicfCBQoSCarRunInfoTable.setStatus('current')
hpnicfCBQoSCarRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 3, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSApplyObjectIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSCarRunInfoEntry.setStatus('current')
hpnicfCBQoSCarGreenPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSCarGreenPackets.setStatus('current')
hpnicfCBQoSCarGreenBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSCarGreenBytes.setStatus('current')
hpnicfCBQoSCarRedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSCarRedPackets.setStatus('current')
hpnicfCBQoSCarRedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSCarRedBytes.setStatus('current')
hpnicfCBQoSCarYellowPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSCarYellowPackets.setStatus('current')
hpnicfCBQoSCarYellowBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSCarYellowBytes.setStatus('current')
hpnicfCBQoSGtsRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 4), )
if mibBuilder.loadTexts: hpnicfCBQoSGtsRunInfoTable.setStatus('current')
hpnicfCBQoSGtsRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 4, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSApplyObjectIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSGtsRunInfoEntry.setStatus('current')
hpnicfCBQoSGtsPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSGtsPassedPackets.setStatus('current')
hpnicfCBQoSGtsPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSGtsPassedBytes.setStatus('current')
hpnicfCBQoSGtsDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSGtsDiscardedPackets.setStatus('current')
hpnicfCBQoSGtsDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSGtsDiscardedBytes.setStatus('current')
hpnicfCBQoSGtsDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSGtsDelayedPackets.setStatus('current')
hpnicfCBQoSGtsDelayedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSGtsDelayedBytes.setStatus('current')
hpnicfCBQoSGtsQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSGtsQueueSize.setStatus('current')
hpnicfCBQoSRemarkRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 5), )
if mibBuilder.loadTexts: hpnicfCBQoSRemarkRunInfoTable.setStatus('current')
hpnicfCBQoSRemarkRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 5, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSApplyObjectIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSRemarkRunInfoEntry.setStatus('current')
hpnicfCBQoSRemarkedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 5, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSRemarkedPackets.setStatus('current')
hpnicfCBQoSQueueRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 6), )
if mibBuilder.loadTexts: hpnicfCBQoSQueueRunInfoTable.setStatus('current')
hpnicfCBQoSQueueRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 6, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSApplyObjectIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSQueueRunInfoEntry.setStatus('current')
hpnicfCBQoSQueueMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 6, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSQueueMatchedPackets.setStatus('current')
hpnicfCBQoSQueueMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 6, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSQueueMatchedBytes.setStatus('current')
hpnicfCBQoSQueueEnqueuedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSQueueEnqueuedPackets.setStatus('current')
hpnicfCBQoSQueueEnqueuedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSQueueEnqueuedBytes.setStatus('current')
hpnicfCBQoSQueueDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSQueueDiscardedPackets.setStatus('current')
hpnicfCBQoSQueueDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSQueueDiscardedBytes.setStatus('current')
hpnicfCBQoSWredRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 7), )
if mibBuilder.loadTexts: hpnicfCBQoSWredRunInfoTable.setStatus('current')
hpnicfCBQoSWredRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 7, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSApplyObjectIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSWredClassValue"))
if mibBuilder.loadTexts: hpnicfCBQoSWredRunInfoEntry.setStatus('current')
hpnicfCBQoSWredRandomDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 7, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSWredRandomDiscardedPackets.setStatus('current')
hpnicfCBQoSWredTailDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 7, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSWredTailDiscardedPackets.setStatus('current')
hpnicfCBQoSAccountingRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 8), )
if mibBuilder.loadTexts: hpnicfCBQoSAccountingRunInfoTable.setStatus('current')
hpnicfCBQoSAccountingRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 8, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSApplyObjectIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSAccountingRunInfoEntry.setStatus('current')
hpnicfCBQoSAccountingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 8, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAccountingPackets.setStatus('current')
hpnicfCBQoSAccountingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 8, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAccountingBytes.setStatus('current')
hpnicfCBQoSApplyingStatusObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 6))
hpnicfCBQoSApplyingStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("busy", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSApplyingStatus.setStatus('current')
hpnicfCBQoSNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 7))
hpnicfCBQoSNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 7, 0))
hpnicfCBQoSIfPolicyChanged = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 7, 0, 1)).setObjects(("HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSIfApplyPolicyIfIndex"), ("HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSIfApplyPolicyDirection"))
if mibBuilder.loadTexts: hpnicfCBQoSIfPolicyChanged.setStatus('current')
hpnicfCBQoSVlanPolicyChanged = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 7, 0, 2)).setObjects(("HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSVlanApplyPolicyVlanid"), ("HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSVlanApplyPolicyDirection"))
if mibBuilder.loadTexts: hpnicfCBQoSVlanPolicyChanged.setStatus('current')
mibBuilder.exportSymbols("HPN-ICF-CBQOS2-MIB", hpnicfCBQoSIfCbqRunInfoEntry=hpnicfCBQoSIfCbqRunInfoEntry, hpnicfCBQoSAtmPvcAccountingPackets=hpnicfCBQoSAtmPvcAccountingPackets, hpnicfCBQoSMirrorIfMainIfIndex=hpnicfCBQoSMirrorIfMainIfIndex, hpnicfCBQoSFrPvcQueueMatchedPackets=hpnicfCBQoSFrPvcQueueMatchedPackets, hpnicfCBQoSNestCustomerVlanID=hpnicfCBQoSNestCustomerVlanID, hpnicfCBQoSFrPvcRemarkRunInfoTable=hpnicfCBQoSFrPvcRemarkRunInfoTable, hpnicfCBQoSAtmPvcCarConformBytes=hpnicfCBQoSAtmPvcCarConformBytes, hpnicfCBQoSVlanAccountingPackets=hpnicfCBQoSVlanAccountingPackets, hpnicfCBQoSIfPolicyChanged=hpnicfCBQoSIfPolicyChanged, hpnicfCBQoSAtmPvcAccountingRunInfoEntry=hpnicfCBQoSAtmPvcAccountingRunInfoEntry, hpnicfCBQoSClassMatchRunInfoEntry=hpnicfCBQoSClassMatchRunInfoEntry, hpnicfCBQoSQueueRowStatus=hpnicfCBQoSQueueRowStatus, hpnicfCBQoSNestCfgInfoTable=hpnicfCBQoSNestCfgInfoTable, hpnicfCBQoSFrPvcApplyPolicyDirection=hpnicfCBQoSFrPvcApplyPolicyDirection, hpnicfCBQoSFrPvcRemarkedPackets=hpnicfCBQoSFrPvcRemarkedPackets, hpnicfCBQoSIfCbqDiscard=hpnicfCBQoSIfCbqDiscard, hpnicfCBQoSCarYellowAction=hpnicfCBQoSCarYellowAction, hpnicfCBQoSFrPvcCbqDiscard=hpnicfCBQoSFrPvcCbqDiscard, hpnicfCBQoSIfQueueRunInfoEntry=hpnicfCBQoSIfQueueRunInfoEntry, hpnicfCBQoSFrClassApplyPolicyDirection=hpnicfCBQoSFrClassApplyPolicyDirection, hpnicfCBQoSPolicyClassIndex=hpnicfCBQoSPolicyClassIndex, hpnicfCBQoSApplyObjectType=hpnicfCBQoSApplyObjectType, hpnicfQos2=hpnicfQos2, hpnicfCBQoSIfCarRunInfoEntry=hpnicfCBQoSIfCarRunInfoEntry, hpnicfCBQoSRedirectRowStatus=hpnicfCBQoSRedirectRowStatus, hpnicfCBQoSAtmPvcQueueRunInfoTable=hpnicfCBQoSAtmPvcQueueRunInfoTable, hpnicfCBQoSAtmPvcGtsDiscardedBytes=hpnicfCBQoSAtmPvcGtsDiscardedBytes, hpnicfCBQoSAccountingRunInfoTable=hpnicfCBQoSAccountingRunInfoTable, hpnicfCBQoSFrPvcGtsDelayedBytes=hpnicfCBQoSFrPvcGtsDelayedBytes, hpnicfCBQoSNestPolicyApplyObjectIndex=hpnicfCBQoSNestPolicyApplyObjectIndex, hpnicfCBQoSNatRowStatus=hpnicfCBQoSNatRowStatus, hpnicfCBQoSPriorityMapCfgInfoEntry=hpnicfCBQoSPriorityMapCfgInfoEntry, hpnicfCBQoSMirrorCfgInfoEntry=hpnicfCBQoSMirrorCfgInfoEntry, hpnicfCBQoSPriorityMapAuto=hpnicfCBQoSPriorityMapAuto, hpnicfCBQoSQueueType=hpnicfCBQoSQueueType, hpnicfCBQoSRedirectIfVlanID=hpnicfCBQoSRedirectIfVlanID, hpnicfCBQoSGtsCir=hpnicfCBQoSGtsCir, hpnicfCBQoSPvcApplyObjectTable=hpnicfCBQoSPvcApplyObjectTable, hpnicfCBQoSWredRunInfoEntry=hpnicfCBQoSWredRunInfoEntry, hpnicfCBQoSAtmPvcRemarkRunInfoTable=hpnicfCBQoSAtmPvcRemarkRunInfoTable, hpnicfCBQoSCbqBeTotalQueueNum=hpnicfCBQoSCbqBeTotalQueueNum, hpnicfCBQoSMatchCpGroupIfNot=hpnicfCBQoSMatchCpGroupIfNot, hpnicfCBQoSVlanStaticsObjects=hpnicfCBQoSVlanStaticsObjects, hpnicfCBQoSAtmPvcClassMatchRunInfoTable=hpnicfCBQoSAtmPvcClassMatchRunInfoTable, hpnicfCBQoSIfClassAverageRate=hpnicfCBQoSIfClassAverageRate, hpnicfCBQoSFirewallAction=hpnicfCBQoSFirewallAction, hpnicfCBQoSPolicyType=hpnicfCBQoSPolicyType, hpnicfCBQoSCarRunInfoTable=hpnicfCBQoSCarRunInfoTable, hpnicfCBQoSFrPvcCbqAfQueueSize=hpnicfCBQoSFrPvcCbqAfQueueSize, hpnicfCBQoSFrPvcGtsDiscardedPackets=hpnicfCBQoSFrPvcGtsDiscardedPackets, hpnicfCBQoSIfCbqRunInfoTable=hpnicfCBQoSIfCbqRunInfoTable, hpnicfCBQoSIntApplyObjectIndex=hpnicfCBQoSIntApplyObjectIndex, hpnicfCBQoSAtmPvcQueueEnqueuedPackets=hpnicfCBQoSAtmPvcQueueEnqueuedPackets, hpnicfCBQoSFrPvcClassMatchRunInfoEntry=hpnicfCBQoSFrPvcClassMatchRunInfoEntry, hpnicfCBQoSFrPvcGtsRunInfoEntry=hpnicfCBQoSFrPvcGtsRunInfoEntry, hpnicfCBQoSApplyObjectSubClass=hpnicfCBQoSApplyObjectSubClass, hpnicfCBQoSVlanApplyPolicyVlanid=hpnicfCBQoSVlanApplyPolicyVlanid, hpnicfCBQoSNestServiceVlanID=hpnicfCBQoSNestServiceVlanID, hpnicfCBQoSIfGtsPassedBytes=hpnicfCBQoSIfGtsPassedBytes, hpnicfCBQoSFirewallCfgInfoTable=hpnicfCBQoSFirewallCfgInfoTable, hpnicfCBQoSCarGreenPackets=hpnicfCBQoSCarGreenPackets, hpnicfCBQoSAtmPvcCbqRunInfoTable=hpnicfCBQoSAtmPvcCbqRunInfoTable, hpnicfCBQoSAggregativeCarCfgInfoTable=hpnicfCBQoSAggregativeCarCfgInfoTable, hpnicfCBQoSMatchCpProtoCfgEntry=hpnicfCBQoSMatchCpProtoCfgEntry, hpnicfCBQoSQueueRunInfoEntry=hpnicfCBQoSQueueRunInfoEntry, hpnicfCBQos2=hpnicfCBQos2, hpnicfCBQoSAccounting=hpnicfCBQoSAccounting, hpnicfCBQoSIfApplyPolicyEnableDynamic=hpnicfCBQoSIfApplyPolicyEnableDynamic, hpnicfCBQoSPolicyClassClassifierName=hpnicfCBQoSPolicyClassClassifierName, hpnicfCBQoSCpApplyPolicyDirection=hpnicfCBQoSCpApplyPolicyDirection, hpnicfCBQoSClassDropPktpps=hpnicfCBQoSClassDropPktpps, hpnicfCBQoSQueueBandwidthUnit=hpnicfCBQoSQueueBandwidthUnit, hpnicfCBQoSAtmPvcGtsPassedPackets=hpnicfCBQoSAtmPvcGtsPassedPackets, hpnicfCBQoSPrimapCfgInfoEntry=hpnicfCBQoSPrimapCfgInfoEntry, hpnicfCBQoSVlanClassMatchedPackets=hpnicfCBQoSVlanClassMatchedPackets, hpnicfCBQoSNatServiceClass=hpnicfCBQoSNatServiceClass, hpnicfCBQoSGtsQueueLength=hpnicfCBQoSGtsQueueLength, hpnicfCBQoSCarCfgInfoEntry=hpnicfCBQoSCarCfgInfoEntry, hpnicfCBQoSWredCfgInfoEntry=hpnicfCBQoSWredCfgInfoEntry, hpnicfCBQoSAccountCfgInfoTable=hpnicfCBQoSAccountCfgInfoTable, hpnicfCBQoSApplyObjectSubChannel=hpnicfCBQoSApplyObjectSubChannel, hpnicfCBQoSAtmPvcStaticsObjects=hpnicfCBQoSAtmPvcStaticsObjects, hpnicfCBQoSClassifierType=hpnicfCBQoSClassifierType, hpnicfCBQoSFrPvcCbqEfQueueSize=hpnicfCBQoSFrPvcCbqEfQueueSize, hpnicfCBQoSClassifierObjects=hpnicfCBQoSClassifierObjects, hpnicfCBQoSNatCfgInfoTable=hpnicfCBQoSNatCfgInfoTable, hpnicfCBQoSIfCbqBeTotalQueueNum=hpnicfCBQoSIfCbqBeTotalQueueNum, hpnicfCBQoSIfGtsDelayedBytes=hpnicfCBQoSIfGtsDelayedBytes, hpnicfCBQoSFrPvcApplyPolicyTable=hpnicfCBQoSFrPvcApplyPolicyTable, hpnicfCBQoSFrPvcCbqBeMaxActiveQueueNum=hpnicfCBQoSFrPvcCbqBeMaxActiveQueueNum, hpnicfCBQoSColorMapDpCfgInfoTable=hpnicfCBQoSColorMapDpCfgInfoTable, hpnicfCBQoSCpApplyPolicySlot=hpnicfCBQoSCpApplyPolicySlot, hpnicfCBQoSAtmPvcGtsRunInfoTable=hpnicfCBQoSAtmPvcGtsRunInfoTable, hpnicfCBQoSApplyingStatusObjects=hpnicfCBQoSApplyingStatusObjects, hpnicfCBQoSVlanApplyObjectIndex=hpnicfCBQoSVlanApplyObjectIndex, hpnicfCBQoSMatchCpGroupCfgEntry=hpnicfCBQoSMatchCpGroupCfgEntry, hpnicfCBQoSPolicyClassBehaviorName=hpnicfCBQoSPolicyClassBehaviorName, hpnicfCBQoSFrPvcCbqAfAllocatedQueueNum=hpnicfCBQoSFrPvcCbqAfAllocatedQueueNum, hpnicfCBQoSPriorityMapImportType=hpnicfCBQoSPriorityMapImportType, hpnicfCBQoSMatchRuleIfNot=hpnicfCBQoSMatchRuleIfNot, hpnicfCBQoSClassFwdPktbps=hpnicfCBQoSClassFwdPktbps, hpnicfCBQoSIfQueueMatchedBytes=hpnicfCBQoSIfQueueMatchedBytes, hpnicfCBQoSObjects=hpnicfCBQoSObjects, hpnicfCBQoSPolicyIndex=hpnicfCBQoSPolicyIndex, hpnicfCBQoSAtmPvcWredTailDiscardedPackets=hpnicfCBQoSAtmPvcWredTailDiscardedPackets, hpnicfCBQoSMatchCpProtoCfgTable=hpnicfCBQoSMatchCpProtoCfgTable, hpnicfCBQoSFrPvcCbqRunInfoTable=hpnicfCBQoSFrPvcCbqRunInfoTable, hpnicfCBQoSPrimapCfgInfoTable=hpnicfCBQoSPrimapCfgInfoTable, hpnicfCBQoSIfApplyPolicyEntry=hpnicfCBQoSIfApplyPolicyEntry, hpnicfCBQoSPolicyClassCfgOrder=hpnicfCBQoSPolicyClassCfgOrder, hpnicfCBQoSRemarkType=hpnicfCBQoSRemarkType, hpnicfCBQoSIfClassMatchedBytes=hpnicfCBQoSIfClassMatchedBytes, hpnicfCBQoSQueueLength=hpnicfCBQoSQueueLength, hpnicfCBQoSFrPvcAccountingPackets=hpnicfCBQoSFrPvcAccountingPackets, hpnicfCBQoSBehaviorName=hpnicfCBQoSBehaviorName, hpnicfCBQoSIfApplyPolicyRowStatus=hpnicfCBQoSIfApplyPolicyRowStatus, hpnicfCBQoSNestPolicyClassIndex=hpnicfCBQoSNestPolicyClassIndex, hpnicfCBQoSPolicyClassCount=hpnicfCBQoSPolicyClassCount, hpnicfCBQoSGtsDelayedBytes=hpnicfCBQoSGtsDelayedBytes, hpnicfCBQoSPolicyCfgInfoTable=hpnicfCBQoSPolicyCfgInfoTable, hpnicfCBQoSApplyObjectEntry=hpnicfCBQoSApplyObjectEntry, hpnicfCBQoSNestCustomerDot1pValue=hpnicfCBQoSNestCustomerDot1pValue, hpnicfCBQoSVlanApplyPolicyTable=hpnicfCBQoSVlanApplyPolicyTable, hpnicfCBQoSIfWredTailDiscardedPackets=hpnicfCBQoSIfWredTailDiscardedPackets, hpnicfCBQoSAtmPvcClassMatchRunInfoEntry=hpnicfCBQoSAtmPvcClassMatchRunInfoEntry, hpnicfCBQoSMatchCpGroupValue=hpnicfCBQoSMatchCpGroupValue, hpnicfCBQoSGtsCfgInfoEntry=hpnicfCBQoSGtsCfgInfoEntry, hpnicfCBQoSNatMainNumber=hpnicfCBQoSNatMainNumber, hpnicfCBQoSNestPolicyApplyObjectEntry=hpnicfCBQoSNestPolicyApplyObjectEntry, hpnicfCBQoSIfAccountingBytes=hpnicfCBQoSIfAccountingBytes, hpnicfCBQoSPolicyIndexNext=hpnicfCBQoSPolicyIndexNext, hpnicfCBQoSCbqAfQueueSize=hpnicfCBQoSCbqAfQueueSize, hpnicfCBQoSRemarkCfgInfoEntry=hpnicfCBQoSRemarkCfgInfoEntry, hpnicfCBQoSColorMapDpEnable=hpnicfCBQoSColorMapDpEnable, hpnicfCBQoSVlanApplyPolicyEntry=hpnicfCBQoSVlanApplyPolicyEntry, hpnicfCBQoSAtmPvcCbqBeActiveQueueNum=hpnicfCBQoSAtmPvcCbqBeActiveQueueNum, hpnicfCBQoSGtsPassedBytes=hpnicfCBQoSGtsPassedBytes, hpnicfCBQoSAtmPvcApplyPolicyEntry=hpnicfCBQoSAtmPvcApplyPolicyEntry, hpnicfCBQoSAtmPvcGtsQueueSize=hpnicfCBQoSAtmPvcGtsQueueSize, hpnicfCBQoSIfCbqBeActiveQueueNum=hpnicfCBQoSIfCbqBeActiveQueueNum, hpnicfCBQoSQueueCbs=hpnicfCBQoSQueueCbs, hpnicfCBQoSRedirectIpv6Interface1=hpnicfCBQoSRedirectIpv6Interface1, hpnicfCBQoSPriorityMapCfgInfoTable=hpnicfCBQoSPriorityMapCfgInfoTable, hpnicfCBQoSAtmPvcClassMatchBytes=hpnicfCBQoSAtmPvcClassMatchBytes, hpnicfCBQoSIntApplyObjectEntry=hpnicfCBQoSIntApplyObjectEntry, hpnicfCBQoSAtmPvcClassAverageRate=hpnicfCBQoSAtmPvcClassAverageRate, hpnicfCBQoSVlanApplyObjectTable=hpnicfCBQoSVlanApplyObjectTable, hpnicfCBQoSAtmPvcApplyPolicyVPI=hpnicfCBQoSAtmPvcApplyPolicyVPI, hpnicfCBQoSQueueQueueNumber=hpnicfCBQoSQueueQueueNumber, hpnicfCBQoSCpApplyPolicyStatus=hpnicfCBQoSCpApplyPolicyStatus, hpnicfCBQoSApplyObjectTable=hpnicfCBQoSApplyObjectTable, ApplyObjectType=ApplyObjectType, hpnicfCBQoSRedirectIpAddress1=hpnicfCBQoSRedirectIpAddress1, hpnicfCBQoSClassifierName=hpnicfCBQoSClassifierName, hpnicfCBQoSColorMapDpCfgInfoEntry=hpnicfCBQoSColorMapDpCfgInfoEntry, hpnicfCBQoSMatchRuleIntValue1=hpnicfCBQoSMatchRuleIntValue1, hpnicfCBQoSMatchRuleType=hpnicfCBQoSMatchRuleType, hpnicfCBQoSFrPvcGtsDelayedPackets=hpnicfCBQoSFrPvcGtsDelayedPackets, hpnicfCBQoSMatchRuleCfgInfoTable=hpnicfCBQoSMatchRuleCfgInfoTable, hpnicfCBQoSVlanAccountingBytes=hpnicfCBQoSVlanAccountingBytes, hpnicfCBQoSPolicyClassClassifierIndex=hpnicfCBQoSPolicyClassClassifierIndex, hpnicfCBQoSIfGtsRunInfoTable=hpnicfCBQoSIfGtsRunInfoTable, hpnicfCBQoSMatchCpProtoValue=hpnicfCBQoSMatchCpProtoValue, hpnicfCBQoSFrPvcWredTailDiscardedPackets=hpnicfCBQoSFrPvcWredTailDiscardedPackets, hpnicfCBQoSGlobalApplyEntry=hpnicfCBQoSGlobalApplyEntry, hpnicfCBQoSFrPvcCbqBeTotalQueueNum=hpnicfCBQoSFrPvcCbqBeTotalQueueNum, hpnicfCBQoSIfGtsDiscardedBytes=hpnicfCBQoSIfGtsDiscardedBytes, hpnicfCBQoSPolicyRouteRowStatus=hpnicfCBQoSPolicyRouteRowStatus, hpnicfCBQoSIfClassMatchedPackets=hpnicfCBQoSIfClassMatchedPackets, hpnicfCBQoSNestPolicyCfgInfoEntry=hpnicfCBQoSNestPolicyCfgInfoEntry, hpnicfCBQoSClassDropPktbps=hpnicfCBQoSClassDropPktbps, hpnicfCBQoSRemarkValue=hpnicfCBQoSRemarkValue, hpnicfCBQoSPolicyRouteCfgInfoTable=hpnicfCBQoSPolicyRouteCfgInfoTable, hpnicfCBQoSFrPvcApplyPolicyEntry=hpnicfCBQoSFrPvcApplyPolicyEntry, hpnicfCBQoSFrPvcWredRunInfoEntry=hpnicfCBQoSFrPvcWredRunInfoEntry, hpnicfCBQoSCarYellowPackets=hpnicfCBQoSCarYellowPackets, hpnicfCBQoSMatchRuleRowStatus=hpnicfCBQoSMatchRuleRowStatus, hpnicfCBQoSCpApplyObjectSlot=hpnicfCBQoSCpApplyObjectSlot, hpnicfCBQoSAtmPvcQueueDiscardedBytes=hpnicfCBQoSAtmPvcQueueDiscardedBytes, hpnicfCBQoSAtmPvcWredRandomDiscardedPackets=hpnicfCBQoSAtmPvcWredRandomDiscardedPackets, hpnicfCBQoSAtmPvcGtsRunInfoEntry=hpnicfCBQoSAtmPvcGtsRunInfoEntry, hpnicfCBQoSIfApplyPolicyName=hpnicfCBQoSIfApplyPolicyName, hpnicfCBQoSVlanApplyPriority=hpnicfCBQoSVlanApplyPriority, hpnicfCBQoSCbqAfAllocatedQueueNum=hpnicfCBQoSCbqAfAllocatedQueueNum, hpnicfCBQoSAggregativeCarRowStatus=hpnicfCBQoSAggregativeCarRowStatus, hpnicfCBQoSBehaviorRowStatus=hpnicfCBQoSBehaviorRowStatus, hpnicfCBQoSNestRowStatus=hpnicfCBQoSNestRowStatus, hpnicfCBQoSRedirectCfgInfoTable=hpnicfCBQoSRedirectCfgInfoTable, hpnicfCBQoSMirrorIfIndex=hpnicfCBQoSMirrorIfIndex, hpnicfCBQoSAtmPvcCarRunInfoEntry=hpnicfCBQoSAtmPvcCarRunInfoEntry, hpnicfCBQoSAtmPvcCbqBeTotalQueueNum=hpnicfCBQoSAtmPvcCbqBeTotalQueueNum, hpnicfCBQoSWredClassCfgInfoTable=hpnicfCBQoSWredClassCfgInfoTable, hpnicfCBQoSCpApplyObjectEntry=hpnicfCBQoSCpApplyObjectEntry, hpnicfCBQoSRedirectIfIndex=hpnicfCBQoSRedirectIfIndex, hpnicfCBQoSPolicyCfgInfoEntry=hpnicfCBQoSPolicyCfgInfoEntry, hpnicfCBQoSCbqQueueSize=hpnicfCBQoSCbqQueueSize, hpnicfCBQoSIfRemarkRunInfoTable=hpnicfCBQoSIfRemarkRunInfoTable, hpnicfCBQoSQueueCfgInfoTable=hpnicfCBQoSQueueCfgInfoTable, hpnicfCBQoSAtmPvcRemarkRunInfoEntry=hpnicfCBQoSAtmPvcRemarkRunInfoEntry, hpnicfCBQoSPolicyObjects=hpnicfCBQoSPolicyObjects, hpnicfCBQoSIfQueueEnqueuedPackets=hpnicfCBQoSIfQueueEnqueuedPackets, hpnicfCBQoSQueueRunInfoTable=hpnicfCBQoSQueueRunInfoTable, hpnicfCBQoSColoredRemarkCfgEntry=hpnicfCBQoSColoredRemarkCfgEntry, hpnicfCBQoSIfStaticsObjects=hpnicfCBQoSIfStaticsObjects, hpnicfCBQoSFrPvcApplyPolicyRowStatus=hpnicfCBQoSFrPvcApplyPolicyRowStatus, hpnicfCBQoSBehaviorCfgInfoEntry=hpnicfCBQoSBehaviorCfgInfoEntry, hpnicfCBQoSIfApplyPolicyStatus=hpnicfCBQoSIfApplyPolicyStatus, hpnicfCBQoSQueueCbsRatio=hpnicfCBQoSQueueCbsRatio, hpnicfCBQoSMatchCpProtoIfNot=hpnicfCBQoSMatchCpProtoIfNot, hpnicfCBQoSClassMatchedBytes=hpnicfCBQoSClassMatchedBytes, hpnicfCBQoSFrPvcQueueRunInfoEntry=hpnicfCBQoSFrPvcQueueRunInfoEntry, hpnicfCBQoSMatchCpGroupCfgTable=hpnicfCBQoSMatchCpGroupCfgTable, hpnicfCBQoSQueueDiscardedBytes=hpnicfCBQoSQueueDiscardedBytes, hpnicfCBQoSFrPvcRemarkRunInfoEntry=hpnicfCBQoSFrPvcRemarkRunInfoEntry, hpnicfCBQoSApplyObjectMainSite=hpnicfCBQoSApplyObjectMainSite, hpnicfCBQoSMirrorCfgInfoTable=hpnicfCBQoSMirrorCfgInfoTable, hpnicfCBQoSGtsRunInfoEntry=hpnicfCBQoSGtsRunInfoEntry, hpnicfCBQoSGtsCbs=hpnicfCBQoSGtsCbs, PYSNMP_MODULE_ID=hpnicfCBQos2, hpnicfCBQoSMatchCpProtoRowStatus=hpnicfCBQoSMatchCpProtoRowStatus, hpnicfCBQoSAtmPvcCarExceedPackets=hpnicfCBQoSAtmPvcCarExceedPackets, hpnicfCBQoSWredTailDiscardedPackets=hpnicfCBQoSWredTailDiscardedPackets, hpnicfCBQoSFrPvcAccountingRunInfoEntry=hpnicfCBQoSFrPvcAccountingRunInfoEntry, hpnicfCBQoSWredType=hpnicfCBQoSWredType, hpnicfCBQoSCarPbs=hpnicfCBQoSCarPbs, hpnicfCBQoSFrPvcQueueEnqueuedBytes=hpnicfCBQoSFrPvcQueueEnqueuedBytes, hpnicfCBQoSCbqBeQueueSize=hpnicfCBQoSCbqBeQueueSize, hpnicfCBQoSPolicyRouteNexthop=hpnicfCBQoSPolicyRouteNexthop, hpnicfCBQoSAtmPvcQueueMatchedPackets=hpnicfCBQoSAtmPvcQueueMatchedPackets, hpnicfCBQoSFrPvcGtsQueueSize=hpnicfCBQoSFrPvcGtsQueueSize, hpnicfCBQoSCarRunInfoEntry=hpnicfCBQoSCarRunInfoEntry, hpnicfCBQoSCpApplyPolicyTable=hpnicfCBQoSCpApplyPolicyTable, hpnicfCBQoSBehaviorIndexNext=hpnicfCBQoSBehaviorIndexNext, hpnicfCBQoSCpApplyRowStatus=hpnicfCBQoSCpApplyRowStatus, hpnicfCBQoSIfAccountingRunInfoTable=hpnicfCBQoSIfAccountingRunInfoTable, hpnicfCBQoSIfClassMatchRunInfoEntry=hpnicfCBQoSIfClassMatchRunInfoEntry, hpnicfCBQoSIfCarGreenBytes=hpnicfCBQoSIfCarGreenBytes, hpnicfCBQoSFirewallRowStatus=hpnicfCBQoSFirewallRowStatus, hpnicfCBQoSGtsPir=hpnicfCBQoSGtsPir, hpnicfCBQoSIfAccountingPackets=hpnicfCBQoSIfAccountingPackets, hpnicfCBQoSVlanApplyPolicyStatus=hpnicfCBQoSVlanApplyPolicyStatus, hpnicfCBQoSFrPvcQueueDiscardedPackets=hpnicfCBQoSFrPvcQueueDiscardedPackets, hpnicfCBQoSAtmPvcCarConformPackets=hpnicfCBQoSAtmPvcCarConformPackets, hpnicfCBQoSQueueDropType=hpnicfCBQoSQueueDropType, hpnicfCBQoSPrimapRowStatus=hpnicfCBQoSPrimapRowStatus, hpnicfCBQoSFrPvcApplyPolicyName=hpnicfCBQoSFrPvcApplyPolicyName, hpnicfCBQoSGtsEbs=hpnicfCBQoSGtsEbs, hpnicfCBQoSIfRemarkRunInfoEntry=hpnicfCBQoSIfRemarkRunInfoEntry, hpnicfCBQoSCarYellowBytes=hpnicfCBQoSCarYellowBytes, hpnicfCBQoSFrPvcStaticsObjects=hpnicfCBQoSFrPvcStaticsObjects, hpnicfCBQoSRemarkCfgInfoTable=hpnicfCBQoSRemarkCfgInfoTable, hpnicfCBQoSPriorityMapGroupName=hpnicfCBQoSPriorityMapGroupName, hpnicfCBQoSCbqEfQueueSize=hpnicfCBQoSCbqEfQueueSize, hpnicfCBQoSIfCarRedBytes=hpnicfCBQoSIfCarRedBytes)
mibBuilder.exportSymbols("HPN-ICF-CBQOS2-MIB", hpnicfCBQoSGlobalApplyStatus=hpnicfCBQoSGlobalApplyStatus, hpnicfCBQoSIfCarGreenPackets=hpnicfCBQoSIfCarGreenPackets, RemarkType=RemarkType, hpnicfCBQoSPolicyConfigMode=hpnicfCBQoSPolicyConfigMode, hpnicfCBQoSAtmPvcQueueRunInfoEntry=hpnicfCBQoSAtmPvcQueueRunInfoEntry, hpnicfCBQoSAtmPvcQueueDiscardedPackets=hpnicfCBQoSAtmPvcQueueDiscardedPackets, hpnicfCBQoSCbqRunInfoEntry=hpnicfCBQoSCbqRunInfoEntry, hpnicfCBQoSColoredRemarkRowStatus=hpnicfCBQoSColoredRemarkRowStatus, hpnicfCBQoSPrimapColorType=hpnicfCBQoSPrimapColorType, hpnicfCBQoSCarRowStatus=hpnicfCBQoSCarRowStatus, hpnicfCBQoSPolicyClassPrecedence=hpnicfCBQoSPolicyClassPrecedence, hpnicfCBQoSPolicyClassCfgInfoTable=hpnicfCBQoSPolicyClassCfgInfoTable, hpnicfCBQoSMatchRuleIndex=hpnicfCBQoSMatchRuleIndex, hpnicfCBQoSPolicyRouteIpAddrType=hpnicfCBQoSPolicyRouteIpAddrType, hpnicfCBQoSRedirectType=hpnicfCBQoSRedirectType, hpnicfCBQoSFrPvcCarExceedPackets=hpnicfCBQoSFrPvcCarExceedPackets, hpnicfCBQoSCbqRunInfoTable=hpnicfCBQoSCbqRunInfoTable, hpnicfCBQoSClassifierCfgInfoEntry=hpnicfCBQoSClassifierCfgInfoEntry, hpnicfCBQoSPolicyClassRowStatus=hpnicfCBQoSPolicyClassRowStatus, hpnicfCBQoSRedirectIpv6Interface2=hpnicfCBQoSRedirectIpv6Interface2, hpnicfCBQoSClassifierCfgInfoTable=hpnicfCBQoSClassifierCfgInfoTable, hpnicfCBQoSIfCarYellowBytes=hpnicfCBQoSIfCarYellowBytes, hpnicfCBQoSBehaviorIndex=hpnicfCBQoSBehaviorIndex, hpnicfCBQoSQueueEnqueuedBytes=hpnicfCBQoSQueueEnqueuedBytes, hpnicfCBQoSIfCarYellowPackets=hpnicfCBQoSIfCarYellowPackets, hpnicfCBQoSFrPvcQueueRunInfoTable=hpnicfCBQoSFrPvcQueueRunInfoTable, hpnicfCBQoSGtsQueueSize=hpnicfCBQoSGtsQueueSize, hpnicfCBQoSIfApplyPolicyTable=hpnicfCBQoSIfApplyPolicyTable, hpnicfCBQoSCarCbs=hpnicfCBQoSCarCbs, hpnicfCBQoSFrPvcWredRunInfoTable=hpnicfCBQoSFrPvcWredRunInfoTable, hpnicfCBQoSFrPvcCarConformPackets=hpnicfCBQoSFrPvcCarConformPackets, hpnicfCBQoSIfApplyPolicyDirection=hpnicfCBQoSIfApplyPolicyDirection, hpnicfCBQoSAtmPvcQueueMatchedBytes=hpnicfCBQoSAtmPvcQueueMatchedBytes, hpnicfCBQoSAtmPvcAccountingRunInfoTable=hpnicfCBQoSAtmPvcAccountingRunInfoTable, hpnicfCBQoSGlobalApplyDirection=hpnicfCBQoSGlobalApplyDirection, hpnicfCBQoSFrPvcQueueMatchedBytes=hpnicfCBQoSFrPvcQueueMatchedBytes, QueueType=QueueType, hpnicfCBQoSCarPolicedPriorityMapType=hpnicfCBQoSCarPolicedPriorityMapType, hpnicfCBQoSAccountingBytes=hpnicfCBQoSAccountingBytes, hpnicfCBQoSCbqDiscard=hpnicfCBQoSCbqDiscard, hpnicfCBQoSIfCbqEfQueueSize=hpnicfCBQoSIfCbqEfQueueSize, hpnicfCBQoSAtmPvcApplyPolicyTable=hpnicfCBQoSAtmPvcApplyPolicyTable, hpnicfCBQoSAtmPvcApplyPolicyDirection=hpnicfCBQoSAtmPvcApplyPolicyDirection, hpnicfCBQoSMirrorType=hpnicfCBQoSMirrorType, hpnicfCBQoSFrPvcClassMatchRunInfoTable=hpnicfCBQoSFrPvcClassMatchRunInfoTable, hpnicfCBQoSAtmPvcCbqEfQueueSize=hpnicfCBQoSAtmPvcCbqEfQueueSize, hpnicfCBQoSQueueEnqueuedPackets=hpnicfCBQoSQueueEnqueuedPackets, hpnicfCBQoSMirrorIfCfgInfoTable=hpnicfCBQoSMirrorIfCfgInfoTable, hpnicfCBQoSRemarkedPackets=hpnicfCBQoSRemarkedPackets, hpnicfCBQoSColoredRemarkValue=hpnicfCBQoSColoredRemarkValue, hpnicfCBQoSIfQueueEnqueuedBytes=hpnicfCBQoSIfQueueEnqueuedBytes, hpnicfCBQoSGtsDiscardedBytes=hpnicfCBQoSGtsDiscardedBytes, hpnicfCBQoSAtmPvcWredRunInfoEntry=hpnicfCBQoSAtmPvcWredRunInfoEntry, hpnicfCBQoSCpApplyObjectChassis=hpnicfCBQoSCpApplyObjectChassis, hpnicfCBQoSFrClassApplyPolicyEntry=hpnicfCBQoSFrClassApplyPolicyEntry, hpnicfCBQoSPvcApplyObjectIndex=hpnicfCBQoSPvcApplyObjectIndex, hpnicfCBQoSMatchIpAddress=hpnicfCBQoSMatchIpAddress, hpnicfCBQoSVlanClassMatchRunInfoEntry=hpnicfCBQoSVlanClassMatchRunInfoEntry, hpnicfCBQoSIfRemarkedPackets=hpnicfCBQoSIfRemarkedPackets, hpnicfCBQoSIfQueueDiscardedPackets=hpnicfCBQoSIfQueueDiscardedPackets, hpnicfCBQoSWredRunInfoTable=hpnicfCBQoSWredRunInfoTable, hpnicfCBQoSWredClassLowLimit=hpnicfCBQoSWredClassLowLimit, hpnicfCBQoSMatchRuleIntValue2=hpnicfCBQoSMatchRuleIntValue2, hpnicfCBQoSMirrorIfMainIfStatus=hpnicfCBQoSMirrorIfMainIfStatus, hpnicfCBQoSRemarkRowStatus=hpnicfCBQoSRemarkRowStatus, hpnicfCBQoSAtmPvcApplyPolicyVCI=hpnicfCBQoSAtmPvcApplyPolicyVCI, hpnicfCBQoSAtmPvcClassMatchPackets=hpnicfCBQoSAtmPvcClassMatchPackets, hpnicfCBQoSIfQueueRunInfoTable=hpnicfCBQoSIfQueueRunInfoTable, hpnicfCBQoSAtmPvcCbqAfAllocatedQueueNum=hpnicfCBQoSAtmPvcCbqAfAllocatedQueueNum, hpnicfCBQoSFrPvcAccountingBytes=hpnicfCBQoSFrPvcAccountingBytes, hpnicfCBQoSIfQueueDiscardedBytes=hpnicfCBQoSIfQueueDiscardedBytes, hpnicfCBQoSFrClassApplyPolicyName=hpnicfCBQoSFrClassApplyPolicyName, hpnicfCBQoSCarAggregativeCarIndex=hpnicfCBQoSCarAggregativeCarIndex, hpnicfCBQoSBehaviorObjects=hpnicfCBQoSBehaviorObjects, hpnicfCBQoSAtmPvcGtsPassedBytes=hpnicfCBQoSAtmPvcGtsPassedBytes, hpnicfCBQoSMirrorIfBackupIfStatus=hpnicfCBQoSMirrorIfBackupIfStatus, hpnicfCBQoSClassifierLayer=hpnicfCBQoSClassifierLayer, hpnicfCBQoSCbqBeActiveQueueNum=hpnicfCBQoSCbqBeActiveQueueNum, hpnicfCBQoSAtmPvcQueueEnqueuedBytes=hpnicfCBQoSAtmPvcQueueEnqueuedBytes, hpnicfCBQoSAtmPvcCarRunInfoTable=hpnicfCBQoSAtmPvcCarRunInfoTable, hpnicfCBQoSCarGreenBytes=hpnicfCBQoSCarGreenBytes, hpnicfCBQoSAccountingRunInfoEntry=hpnicfCBQoSAccountingRunInfoEntry, hpnicfCBQoSFrPvcClassMatchedBytes=hpnicfCBQoSFrPvcClassMatchedBytes, hpnicfCBQoSApplyingStatus=hpnicfCBQoSApplyingStatus, hpnicfCBQoSIfGtsRunInfoEntry=hpnicfCBQoSIfGtsRunInfoEntry, hpnicfCBQoSSamplingCfgInfoEntry=hpnicfCBQoSSamplingCfgInfoEntry, hpnicfCBQoSCarGreenAction=hpnicfCBQoSCarGreenAction, hpnicfCBQoSPriorityMapExportType=hpnicfCBQoSPriorityMapExportType, hpnicfCBQoSClassBehaviorStatus=hpnicfCBQoSClassBehaviorStatus, hpnicfCBQoSCarYellowRemarkValue=hpnicfCBQoSCarYellowRemarkValue, hpnicfCBQoSRedirectCfgInfoEntry=hpnicfCBQoSRedirectCfgInfoEntry, hpnicfCBQoSNatCfgInfoEntry=hpnicfCBQoSNatCfgInfoEntry, hpnicfCBQoSBehaviorCfgInfoTable=hpnicfCBQoSBehaviorCfgInfoTable, hpnicfCBQoSRemarkRunInfoTable=hpnicfCBQoSRemarkRunInfoTable, hpnicfCBQoSNestPolicyRowStatus=hpnicfCBQoSNestPolicyRowStatus, hpnicfCBQoSFrClassApplyPolicyTable=hpnicfCBQoSFrClassApplyPolicyTable, hpnicfCBQoSCbqBeMaxActiveQueueNum=hpnicfCBQoSCbqBeMaxActiveQueueNum, hpnicfCBQoSIfGtsDiscardedPackets=hpnicfCBQoSIfGtsDiscardedPackets, hpnicfCBQoSIfGtsDelayedPackets=hpnicfCBQoSIfGtsDelayedPackets, hpnicfCBQoSFrPvcCbqBeActiveQueueNum=hpnicfCBQoSFrPvcCbqBeActiveQueueNum, hpnicfCBQoSStaticsObjects=hpnicfCBQoSStaticsObjects, CarAction=CarAction, hpnicfCBQoSWredWeightConst=hpnicfCBQoSWredWeightConst, hpnicfCBQoSAccountingMode=hpnicfCBQoSAccountingMode, hpnicfCBQoSAtmPvcCbqRunInfoEntry=hpnicfCBQoSAtmPvcCbqRunInfoEntry, hpnicfCBQoSWredClassHighLimit=hpnicfCBQoSWredClassHighLimit, hpnicfCBQoSFrPvcCbqRunInfoEntry=hpnicfCBQoSFrPvcCbqRunInfoEntry, hpnicfCBQoSFrPvcGtsPassedPackets=hpnicfCBQoSFrPvcGtsPassedPackets, hpnicfCBQoSQueueDiscardedPackets=hpnicfCBQoSQueueDiscardedPackets, QueueBandwidthUnit=QueueBandwidthUnit, hpnicfCBQoSFrClassApplyPolicyRowStatus=hpnicfCBQoSFrClassApplyPolicyRowStatus, hpnicfCBQoSMatchRuleCfgInfoEntry=hpnicfCBQoSMatchRuleCfgInfoEntry, hpnicfCBQoSGlobalApplyName=hpnicfCBQoSGlobalApplyName, hpnicfCBQoSFrPvcWredRandomDiscardedPackets=hpnicfCBQoSFrPvcWredRandomDiscardedPackets, hpnicfCBQoSFrPvcClassAverageRate=hpnicfCBQoSFrPvcClassAverageRate, hpnicfCBQoSQueueMatchedBytes=hpnicfCBQoSQueueMatchedBytes, hpnicfCBQoSFrPvcCbqBeQueueSize=hpnicfCBQoSFrPvcCbqBeQueueSize, hpnicfCBQoSNatBackupNumber=hpnicfCBQoSNatBackupNumber, hpnicfCBQoSQueueCfgInfoEntry=hpnicfCBQoSQueueCfgInfoEntry, hpnicfCBQoSAtmPvcCbqBeMaxActiveQueueNum=hpnicfCBQoSAtmPvcCbqBeMaxActiveQueueNum, hpnicfCBQoSMatchRuleStringValue=hpnicfCBQoSMatchRuleStringValue, hpnicfCBQoSIfCarRedPackets=hpnicfCBQoSIfCarRedPackets, hpnicfCBQoSColoredRemarkColor=hpnicfCBQoSColoredRemarkColor, hpnicfCBQoSVlanApplyObjectVlanID=hpnicfCBQoSVlanApplyObjectVlanID, hpnicfCBQoSFrPvcGtsDiscardedBytes=hpnicfCBQoSFrPvcGtsDiscardedBytes, hpnicfCBQoSCarRedRemarkValue=hpnicfCBQoSCarRedRemarkValue, hpnicfCBQoSPolicyClassBehaviorIndex=hpnicfCBQoSPolicyClassBehaviorIndex, hpnicfCBQoSAtmPvcApplyPolicyRowStatus=hpnicfCBQoSAtmPvcApplyPolicyRowStatus, hpnicfCBQoSNestPolicyName=hpnicfCBQoSNestPolicyName, hpnicfCBQoSMirrorIfCfgInfoEntry=hpnicfCBQoSMirrorIfCfgInfoEntry, hpnicfCBQoSQueueBandwidthValue=hpnicfCBQoSQueueBandwidthValue, hpnicfCBQoSAccountRowStatus=hpnicfCBQoSAccountRowStatus, hpnicfCBQoSMatchIpAddressType=hpnicfCBQoSMatchIpAddressType, hpnicfCBQoSCpApplyPolicyEntry=hpnicfCBQoSCpApplyPolicyEntry, hpnicfCBQoSAtmPvcWredRunInfoTable=hpnicfCBQoSAtmPvcWredRunInfoTable, hpnicfCBQoSIfQueueMatchedPackets=hpnicfCBQoSIfQueueMatchedPackets, hpnicfCBQoSVlanPolicyChanged=hpnicfCBQoSVlanPolicyChanged, hpnicfCBQoSSamplingNum=hpnicfCBQoSSamplingNum, hpnicfCBQoSNestCfgInfoEntry=hpnicfCBQoSNestCfgInfoEntry, hpnicfCBQoSWredClassValue=hpnicfCBQoSWredClassValue, hpnicfCBQoSPrePriMapTableType=hpnicfCBQoSPrePriMapTableType, hpnicfCBQoSIfGtsQueueSize=hpnicfCBQoSIfGtsQueueSize, hpnicfCBQoSFrPvcQueueEnqueuedPackets=hpnicfCBQoSFrPvcQueueEnqueuedPackets, hpnicfCBQoSApplyObjectIndex=hpnicfCBQoSApplyObjectIndex, hpnicfCBQoSPvcApplyObjectIfIndex=hpnicfCBQoSPvcApplyObjectIfIndex, hpnicfCBQoSCarRedPackets=hpnicfCBQoSCarRedPackets, hpnicfCBQoSAggregativeCarCfgInfoEntry=hpnicfCBQoSAggregativeCarCfgInfoEntry, hpnicfCBQoSPvcApplyObjectPvcID=hpnicfCBQoSPvcApplyObjectPvcID, hpnicfCBQoSFrPvcApplyPolicyDlciNum=hpnicfCBQoSFrPvcApplyPolicyDlciNum, hpnicfCBQoSApplyObjectDirection=hpnicfCBQoSApplyObjectDirection, hpnicfCBQoSVlanApplyPolicyDirection=hpnicfCBQoSVlanApplyPolicyDirection, hpnicfCBQoSVlanApplyPolicyName=hpnicfCBQoSVlanApplyPolicyName, hpnicfCBQoSPolicyClassNextIndex=hpnicfCBQoSPolicyClassNextIndex, hpnicfCBQoSMatchCpGroupRowStatus=hpnicfCBQoSMatchCpGroupRowStatus, hpnicfCBQoSFirewallCfgInfoEntry=hpnicfCBQoSFirewallCfgInfoEntry, hpnicfCBQoSAtmPvcCbqAfQueueSize=hpnicfCBQoSAtmPvcCbqAfQueueSize, hpnicfCBQoSMirrorRowStatus=hpnicfCBQoSMirrorRowStatus, hpnicfCBQoSIfWredRandomDiscardedPackets=hpnicfCBQoSIfWredRandomDiscardedPackets, hpnicfCBQoSPriorityMapRowStatus=hpnicfCBQoSPriorityMapRowStatus, hpnicfCBQosClassifierMatchRuleNextIndex=hpnicfCBQosClassifierMatchRuleNextIndex, hpnicfCBQoSNotifications=hpnicfCBQoSNotifications, hpnicfCBQoSIfCarRunInfoTable=hpnicfCBQoSIfCarRunInfoTable, hpnicfCBQoSFrPvcCarConformBytes=hpnicfCBQoSFrPvcCarConformBytes, hpnicfCBQoSClassifierRuleCount=hpnicfCBQoSClassifierRuleCount, hpnicfCBQoSAtmPvcCbqDiscard=hpnicfCBQoSAtmPvcCbqDiscard, hpnicfCBQoSCarRedBytes=hpnicfCBQoSCarRedBytes, hpnicfCBQoSClassFlowStatInterval=hpnicfCBQoSClassFlowStatInterval, hpnicfCBQoSIntApplyObjectTable=hpnicfCBQoSIntApplyObjectTable, hpnicfCBQoSClassMatchedPackets=hpnicfCBQoSClassMatchedPackets, hpnicfCBQoSCpApplyObjectTable=hpnicfCBQoSCpApplyObjectTable, WredType=WredType, hpnicfCBQoSIfApplyPolicyIfIndex=hpnicfCBQoSIfApplyPolicyIfIndex, hpnicfCBQoSNotificationsPrefix=hpnicfCBQoSNotificationsPrefix, hpnicfCBQoSCarPir=hpnicfCBQoSCarPir, hpnicfCBQoSClassMatchRunInfoTable=hpnicfCBQoSClassMatchRunInfoTable, hpnicfCBQoSNestPolicyApplyObjectTable=hpnicfCBQoSNestPolicyApplyObjectTable, hpnicfCBQoSAtmPvcApplyPolicyName=hpnicfCBQoSAtmPvcApplyPolicyName, hpnicfCBQoSWredRandomDiscardedPackets=hpnicfCBQoSWredRandomDiscardedPackets, DirectionType=DirectionType, hpnicfCBQoSVlanApplyObjectEntry=hpnicfCBQoSVlanApplyObjectEntry, hpnicfCBQoSIfAccountingRunInfoEntry=hpnicfCBQoSIfAccountingRunInfoEntry, hpnicfCBQoSGtsPassedPackets=hpnicfCBQoSGtsPassedPackets, hpnicfCBQoSColorMapDpRowStatus=hpnicfCBQoSColorMapDpRowStatus, hpnicfCBQoSFrPvcCbqQueueSize=hpnicfCBQoSFrPvcCbqQueueSize, hpnicfCBQoSCpApplyPolicyChassis=hpnicfCBQoSCpApplyPolicyChassis, hpnicfCBQoSVlanAccountingRunInfoTable=hpnicfCBQoSVlanAccountingRunInfoTable, hpnicfCBQoSRedirectIpAddressType=hpnicfCBQoSRedirectIpAddressType, hpnicfCBQoSCarAggregativeCarName=hpnicfCBQoSCarAggregativeCarName, hpnicfCBQoSFrClassApplyPolicyFrClassName=hpnicfCBQoSFrClassApplyPolicyFrClassName, hpnicfCBQoSMirrorIfBackupIfIndex=hpnicfCBQoSMirrorIfBackupIfIndex, hpnicfCBQoSFrPvcApplyPolicyIfIndex=hpnicfCBQoSFrPvcApplyPolicyIfIndex, hpnicfCBQoSClassifierOperator=hpnicfCBQoSClassifierOperator, hpnicfCBQoSPriorityMapGroupIndex=hpnicfCBQoSPriorityMapGroupIndex, hpnicfCBQoSAccountingPackets=hpnicfCBQoSAccountingPackets, hpnicfCBQoSWredCfgInfoTable=hpnicfCBQoSWredCfgInfoTable, hpnicfCBQoSIfWredRunInfoTable=hpnicfCBQoSIfWredRunInfoTable, hpnicfCBQoSWredClassCfgInfoEntry=hpnicfCBQoSWredClassCfgInfoEntry, hpnicfCBQoSPvcApplyObjectEntry=hpnicfCBQoSPvcApplyObjectEntry, hpnicfCBQoSIfCbqBeQueueSize=hpnicfCBQoSIfCbqBeQueueSize, hpnicfCBQoSGtsDiscardedPackets=hpnicfCBQoSGtsDiscardedPackets, hpnicfCBQoSNestPolicyCfgInfoTable=hpnicfCBQoSNestPolicyCfgInfoTable, hpnicfCBQoSCarCir=hpnicfCBQoSCarCir, hpnicfCBQoSSamplingCfgInfoTable=hpnicfCBQoSSamplingCfgInfoTable, hpnicfCBQoSFrPvcClassMatchedPackets=hpnicfCBQoSFrPvcClassMatchedPackets, hpnicfCBQoSPolicyName=hpnicfCBQoSPolicyName, hpnicfCBQoSAtmPvcGtsDiscardedPackets=hpnicfCBQoSAtmPvcGtsDiscardedPackets, hpnicfCBQoSPolicyRouteBackup=hpnicfCBQoSPolicyRouteBackup, hpnicfCBQoSFrPvcAccountingRunInfoTable=hpnicfCBQoSFrPvcAccountingRunInfoTable, hpnicfCBQoSAtmPvcGtsDelayedBytes=hpnicfCBQoSAtmPvcGtsDelayedBytes, hpnicfCBQoSGtsRowStatus=hpnicfCBQoSGtsRowStatus, hpnicfCBQoSCarRedAction=hpnicfCBQoSCarRedAction, hpnicfCBQoSWredClassDiscardProb=hpnicfCBQoSWredClassDiscardProb, hpnicfCBQoSGtsRunInfoTable=hpnicfCBQoSGtsRunInfoTable, hpnicfCBQoSAtmPvcCbqBeQueueSize=hpnicfCBQoSAtmPvcCbqBeQueueSize, hpnicfCBQoSFrPvcGtsRunInfoTable=hpnicfCBQoSFrPvcGtsRunInfoTable, hpnicfCBQoSApplyPolicyIndexObjects=hpnicfCBQoSApplyPolicyIndexObjects, hpnicfCBQoSPolicyClassCfgInfoEntry=hpnicfCBQoSPolicyClassCfgInfoEntry, hpnicfCBQoSIfCbqAfQueueSize=hpnicfCBQoSIfCbqAfQueueSize, hpnicfCBQoSClassifierRowStatus=hpnicfCBQoSClassifierRowStatus, hpnicfCBQoSFrPvcCarRunInfoEntry=hpnicfCBQoSFrPvcCarRunInfoEntry, hpnicfCBQoSApplyPolicyStaticsObjects=hpnicfCBQoSApplyPolicyStaticsObjects, hpnicfCBQoSGtsDelayedPackets=hpnicfCBQoSGtsDelayedPackets, hpnicfCBQoSNestServiceDot1pValue=hpnicfCBQoSNestServiceDot1pValue, hpnicfCBQoSSamplingRowStatus=hpnicfCBQoSSamplingRowStatus, hpnicfCBQoSIfGtsPassedPackets=hpnicfCBQoSIfGtsPassedPackets, hpnicfCBQoSClassFwdPktpps=hpnicfCBQoSClassFwdPktpps, hpnicfCBQoSClassifierIndex=hpnicfCBQoSClassifierIndex, hpnicfCBQoSPolicyClassMode=hpnicfCBQoSPolicyClassMode, hpnicfCBQoSApplyPolicyObjects=hpnicfCBQoSApplyPolicyObjects, hpnicfCBQoSAtmPvcAccountingBytes=hpnicfCBQoSAtmPvcAccountingBytes, hpnicfCBQoSCarCfgInfoTable=hpnicfCBQoSCarCfgInfoTable, hpnicfCBQoSIfCbqAfAllocatedQueueNum=hpnicfCBQoSIfCbqAfAllocatedQueueNum, hpnicfCBQoSFrPvcGtsPassedBytes=hpnicfCBQoSFrPvcGtsPassedBytes, hpnicfCBQoSAtmPvcApplyPolicyIfIndex=hpnicfCBQoSAtmPvcApplyPolicyIfIndex, hpnicfCBQoSGlobalApplyTable=hpnicfCBQoSGlobalApplyTable, hpnicfCBQoSCarEbs=hpnicfCBQoSCarEbs, MatchRuleType=MatchRuleType, hpnicfCBQoSBehaviorType=hpnicfCBQoSBehaviorType, hpnicfCBQoSVlanApplyPolicyRowStatus=hpnicfCBQoSVlanApplyPolicyRowStatus, hpnicfCBQoSAtmPvcRemarkedPackets=hpnicfCBQoSAtmPvcRemarkedPackets, hpnicfCBQoSRedirectIpAddress2=hpnicfCBQoSRedirectIpAddress2, hpnicfCBQoSAtmPvcCarExceedBytes=hpnicfCBQoSAtmPvcCarExceedBytes, hpnicfCBQoSIntApplyObjectIfIndex=hpnicfCBQoSIntApplyObjectIfIndex, hpnicfCBQoSAccountCfgInfoEntry=hpnicfCBQoSAccountCfgInfoEntry, hpnicfCBQoSColoredRemarkCfgTable=hpnicfCBQoSColoredRemarkCfgTable, hpnicfCBQoSGlobalApplyRowStatus=hpnicfCBQoSGlobalApplyRowStatus, hpnicfCBQoSFrPvcQueueDiscardedBytes=hpnicfCBQoSFrPvcQueueDiscardedBytes, hpnicfCBQoSIfWredRunInfoEntry=hpnicfCBQoSIfWredRunInfoEntry, hpnicfCBQoSAtmPvcGtsDelayedPackets=hpnicfCBQoSAtmPvcGtsDelayedPackets, hpnicfCBQoSColoredRemarkType=hpnicfCBQoSColoredRemarkType, hpnicfCBQoSGtsCfgInfoTable=hpnicfCBQoSGtsCfgInfoTable, hpnicfCBQoSQueueMatchedPackets=hpnicfCBQoSQueueMatchedPackets, hpnicfCBQoSFrPvcCarExceedBytes=hpnicfCBQoSFrPvcCarExceedBytes, hpnicfCBQoSAtmPvcCbqQueueSize=hpnicfCBQoSAtmPvcCbqQueueSize)
mibBuilder.exportSymbols("HPN-ICF-CBQOS2-MIB", hpnicfCBQoSIfCbqQueueSize=hpnicfCBQoSIfCbqQueueSize, hpnicfCBQoSCpApplyPolicyName=hpnicfCBQoSCpApplyPolicyName, hpnicfCBQoSMirrorIfRowStatus=hpnicfCBQoSMirrorIfRowStatus, hpnicfCBQoSCpApplyObjectIndex=hpnicfCBQoSCpApplyObjectIndex, hpnicfCBQoSClassifierIndexNext=hpnicfCBQoSClassifierIndexNext, hpnicfCBQoSRemarkRunInfoEntry=hpnicfCBQoSRemarkRunInfoEntry, hpnicfCBQoSPolicyRouteCfgInfoEntry=hpnicfCBQoSPolicyRouteCfgInfoEntry, hpnicfCBQoSPolicyRowStatus=hpnicfCBQoSPolicyRowStatus, hpnicfCBQoSCarGreenRemarkValue=hpnicfCBQoSCarGreenRemarkValue, hpnicfCBQoSVlanAccountingRunInfoEntry=hpnicfCBQoSVlanAccountingRunInfoEntry, hpnicfCBQoSFrPvcCarRunInfoTable=hpnicfCBQoSFrPvcCarRunInfoTable, hpnicfCBQoSApplyObjectSubClassSec=hpnicfCBQoSApplyObjectSubClassSec, hpnicfCBQoSIfCbqBeMaxActiveQueueNum=hpnicfCBQoSIfCbqBeMaxActiveQueueNum, hpnicfCBQoSMirrorVlanID=hpnicfCBQoSMirrorVlanID, hpnicfCBQoSIfClassMatchRunInfoTable=hpnicfCBQoSIfClassMatchRunInfoTable, hpnicfCBQoSVlanClassMatchRunInfoTable=hpnicfCBQoSVlanClassMatchRunInfoTable)
