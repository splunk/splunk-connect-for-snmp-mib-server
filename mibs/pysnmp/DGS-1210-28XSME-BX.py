#
# PySNMP MIB module DGS-1210-28XSME-BX (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DGS-1210-28XSME-BX
# Produced by pysmi-0.3.4 at Mon Apr 29 18:27:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
dot1dBasePortEntry, dot1dBasePort, dot1dBridge = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBasePortEntry", "dot1dBasePort", "dot1dBridge")
AddressFamilyNumbers, = mibBuilder.importSymbols("IANA-ADDRESS-FAMILY-NUMBERS-MIB", "AddressFamilyNumbers")
InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex")
InetAddress, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
SnmpEngineID, SnmpSecurityLevel, SnmpAdminString = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpEngineID", "SnmpSecurityLevel", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Gauge32, Bits, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Counter64, MibIdentifier, iso, ModuleIdentity, IpAddress, Integer32, Unsigned32, enterprises, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Gauge32", "Bits", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Counter64", "MibIdentifier", "iso", "ModuleIdentity", "IpAddress", "Integer32", "Unsigned32", "enterprises", "ObjectIdentity")
MacAddress, RowStatus, DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "RowStatus", "DisplayString", "TruthValue", "TextualConvention")
dgs_1210_28xscmebx = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1)).setLabel("dgs-1210-28xscmebx")
dgs_1210_28xscmebx.setRevisions(('2015-08-20 00:00', '2015-07-23 00:00', '2015-07-08 00:00', '2015-06-03 00:00', '2015-04-16 00:00', '2014-03-06 00:00',))
if mibBuilder.loadTexts: dgs_1210_28xscmebx.setLastUpdated('201508200000Z')
if mibBuilder.loadTexts: dgs_1210_28xscmebx.setOrganization('DGS-1210-28XSME-BX-7-00-021.mib')
d_link = MibIdentifier((1, 3, 6, 1, 4, 1, 171)).setLabel("d-link")
dlink_products = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10)).setLabel("dlink-products")
dlink_DGS12XXSeriesProd = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76)).setLabel("dlink-DGS12XXSeriesProd")
dgs_1210_28xscme = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39)).setLabel("dgs-1210-28xscme")
class VlanIndex(TextualConvention, Unsigned32):
    status = 'current'

class PortList(TextualConvention, OctetString):
    status = 'current'

class BridgeId(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class Timeout(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd4'

class LldpManAddress(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 31)

class OwnerString(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 127)

class RmonStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4))

class Ipv6Address(TextualConvention, OctetString):
    status = 'current'
    displayHint = '2x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

companySystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1))
companyIpifGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 2))
companyTftpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 3))
companyMiscGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 4))
companySNMPV3 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5))
companySTP = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6))
companyDot1qVlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 7))
companyLA = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 8))
companyStaticMAC = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 9))
companyIgsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10))
companyGVRPGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 11))
companyQoSGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12))
companyTrafficMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 13))
companySecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14))
companyACLGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15))
companySyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 16))
companyLBD = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 17))
companyMirror = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 18))
companyStaticMcast = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 19))
companySNTPSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20))
companyRMON = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 22))
companyAuthGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23))
companyGuestVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 24))
companyMacNotify = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 25))
companyISMVLAN = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 27))
companyDHCPRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 28))
companyDHCPLocalRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 29))
companyGreenSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 31))
sysFirmwareInfomation = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 31))
companyLLDPSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32))
companyCPUInterfaceFilterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33))
companyStaticARP = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 34))
companyVLANTrunk = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 36))
companyTimeRangeMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 38))
companySMTP = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 40))
companyMultiIPInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 41))
companyLimitIp = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 45))
companyGratuitousARP = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 48))
companyNeighbor = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 50))
companyEoam = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 51))
companyDuld = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 52))
companydot3azEEE = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 53))
companyMacAuthGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 54))
companyWACAuthGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 55))
companyMacBasedVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 70))
companyBPDUAttack = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 77))
companyDHCPv6Relay = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 86))
companyMldsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 88))
companyPPPoE = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 98))
companyDoSCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 99))
companyAgentBasicInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 100))
companyProtocolVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 101))
companyL2PT = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 102))
companyQinQ = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 103))
companySfpVendorInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 104))
companyDDM = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 105))
companyCpuProtect = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 106))
companyFTPGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 107))
companyERPSGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 108))
companyTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 120))
companyswLedPanel = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 121))
sysSwitchName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSwitchName.setStatus('current')
sysHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHardwareVersion.setStatus('current')
sysFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFirmwareVersion.setStatus('current')
sysLoginTimeoutInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 30)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLoginTimeoutInterval.setStatus('current')
sysLocationName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLocationName.setStatus('current')
sysGroupInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(120, 1225), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGroupInterval.setStatus('current')
sysSystemPassword = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSystemPassword.setStatus('current')
sysSafeGuardEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSafeGuardEnable.setStatus('current')
sysRestart = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysRestart.setStatus('current')
sysSave = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("config-1", 3), ("config-2", 4))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSave.setStatus('current')
sysPowerSavingEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPowerSavingEnable.setStatus('current')
sysJumboFrameEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysJumboFrameEnable.setStatus('current')
sysPortCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 13), )
if mibBuilder.loadTexts: sysPortCtrlTable.setStatus('current')
sysPortCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 13, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "sysPortCtrlIndex"), (0, "DGS-1210-28XSME-BX", "sysPortCtrlMediumType"))
if mibBuilder.loadTexts: sysPortCtrlEntry.setStatus('current')
sysPortCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCtrlIndex.setStatus('current')
sysPortCtrlMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copper", 1), ("fiber", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCtrlMediumType.setStatus('current')
sysPortCtrlSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("rate1000M-Full", 1), ("rate100M-Full", 2), ("rate100M-Half", 3), ("rate10M-Full", 4), ("rate10M-Half", 5), ("auto", 6), ("disable", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPortCtrlSpeed.setStatus('current')
sysPortCtrlOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("down", 1), ("rate1000M-Full", 2), ("rate100M-Full", 3), ("rate100M-Half", 4), ("rate10M-Full", 5), ("rate10M-Half", 6), ("rate10G-Full", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCtrlOperStatus.setStatus('current')
sysPortCtrlMDI = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("mdi", 2), ("mdix", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPortCtrlMDI.setStatus('current')
sysPortCtrlFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPortCtrlFlowControl.setStatus('current')
sysPortCtrlFlowControlOper = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCtrlFlowControlOper.setStatus('current')
sysPortCtrlType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("fastethernet", 1), ("gigabitethernet", 2), ("fiberwith100BaseSFPModule", 3), ("fiberwith1GBaseSFPModule", 4), ("fiberwith10GBaseSFPModule", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortCtrlType.setStatus('current')
sysPortCtrlCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 13, 1, 9), Bits().clone(namedValues=NamedValues(("rate10-half", 0), ("rate10-full", 1), ("rate100-half", 2), ("rate100-full", 3), ("reserve", 4), ("rate1000-full", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPortCtrlCapability.setStatus('current')
sysPortDescriptionTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 14), )
if mibBuilder.loadTexts: sysPortDescriptionTable.setStatus('current')
sysPortDescriptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 14, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "sysPortDescIndex"), (0, "DGS-1210-28XSME-BX", "sysPortDescMediumType"))
if mibBuilder.loadTexts: sysPortDescriptionEntry.setStatus('current')
sysPortDescIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortDescIndex.setStatus('current')
sysPortDescMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copper", 1), ("fiber", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortDescMediumType.setStatus('current')
sysPortDescString = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 14, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysPortDescString.setStatus('current')
sysPortUpLinkTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 14, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortUpLinkTime.setStatus('current')
sysPortErrTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 15), )
if mibBuilder.loadTexts: sysPortErrTable.setStatus('current')
sysPortErrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 15, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "sysPortErrPortIndex"))
if mibBuilder.loadTexts: sysPortErrEntry.setStatus('current')
sysPortErrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortErrPortIndex.setStatus('current')
sysPortErrPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortErrPortState.setStatus('current')
sysPortErrPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("err-disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortErrPortStatus.setStatus('current')
sysPortErrPortReason = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("lbd", 1), ("traffic-control", 2), ("duld", 3), ("bpdu-protection", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortErrPortReason.setStatus('current')
sysDhcpAutoConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDhcpAutoConfiguration.setStatus('current')
sysWebState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysWebState.setStatus('current')
sysWebPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(80)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysWebPortNumber.setStatus('current')
sysARPAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysARPAgingTime.setStatus('current')
sysMACAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMACAgingTime.setStatus('current')
baudRateConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(9600, 19200, 38400, 115200))).clone(namedValues=NamedValues(("baudrate9600", 9600), ("baudrate19200", 19200), ("baudrate38400", 38400), ("baudrate115200", 115200)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: baudRateConfiguration.setStatus('current')
autologoutConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(120, 300, 600, 900, 0))).clone(namedValues=NamedValues(("logouttime2mins", 120), ("logouttime5mins", 300), ("logouttime10mins", 600), ("logouttime15mins", 900), ("logouttimenever", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autologoutConfiguration.setStatus('current')
telnetsettingManagementOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetsettingManagementOnOff.setStatus('current')
telnetUDPPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(23)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetUDPPort.setStatus('current')
autoRefreshConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("refreshimenever", 0), ("refreshtime10secs", 1), ("refreshtime30secs", 2), ("refreshtime1min", 3), ("refreshtime5mins", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoRefreshConfiguration.setStatus('current')
floodfdbOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: floodfdbOnOff.setStatus('current')
sysContactName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysContactName.setStatus('current')
sysDhcpAutoConfigTimeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDhcpAutoConfigTimeout.setStatus('current')
sysCommandLogging = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCommandLogging.setStatus('current')
sysSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 13))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSerialNumber.setStatus('current')
sysVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 31, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVersion.setStatus('current')
sysSize = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 31, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSize.setStatus('current')
sysUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 31, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysUpdateTime.setStatus('current')
sysFromIP = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 31, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFromIP.setStatus('current')
sysUser = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 31, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysUser.setStatus('current')
sysType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 31, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, -1))).clone(namedValues=NamedValues(("console", 1), ("telnet", 2), ("ssh", 3), ("web", 4), ("unknown", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysType.setStatus('current')
sysDdp = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 32))
sysDdpGlobalOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 32, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDdpGlobalOnOff.setStatus('current')
sysDdpGeneralReportOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 32, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDdpGeneralReportOnOff.setStatus('current')
sysDdpGeneralReportTimer = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 32, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(30, 60, 90, 120))).clone(namedValues=NamedValues(("time30seconds", 30), ("time60seconds", 60), ("time90seconds", 90), ("time120seconds", 120)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDdpGeneralReportTimer.setStatus('current')
sysDdpPortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 32, 4), )
if mibBuilder.loadTexts: sysDdpPortStatusTable.setStatus('current')
sysDdpPortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 32, 4, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "sysDdpPortStatusIndex"))
if mibBuilder.loadTexts: sysDdpPortStatusEntry.setStatus('current')
sysDdpPortStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 32, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDdpPortStatusIndex.setStatus('current')
sysDdpPortStatusControl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 32, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDdpPortStatusControl.setStatus('current')
sysSmartFan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 33))
sysSmartFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 33, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("failure", 0), ("normal", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSmartFanStatus.setStatus('current')
sysDhcpAutoImage = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDhcpAutoImage.setStatus('current')
sysBootupConfigID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysBootupConfigID.setStatus('current')
sysBootupImage = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysBootupImage.setStatus('current')
sysPortMediaTypeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 37), )
if mibBuilder.loadTexts: sysPortMediaTypeTable.setStatus('current')
sysPortMediaTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 37, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "sysPortMediaTypeIndex"), (0, "DGS-1210-28XSME-BX", "sysPortMediaType"))
if mibBuilder.loadTexts: sysPortMediaTypeEntry.setStatus('current')
sysPortMediaTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 37, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortMediaTypeIndex.setStatus('current')
sysPortMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 37, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copper", 1), ("fiber", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortMediaType.setStatus('current')
sysPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 37, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rate100M", 1), ("rate1000M", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortType.setStatus('current')
sysPortMediaTypeVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 37, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortMediaTypeVendorName.setStatus('current')
sysPortMediaTypeOui = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 37, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortMediaTypeOui.setStatus('current')
sysPortMediaTypePn = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 37, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortMediaTypePn.setStatus('current')
sysPortMediaTypeRev = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 37, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortMediaTypeRev.setStatus('current')
sysPortMediaTypeSn = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 37, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortMediaTypeSn.setStatus('current')
sysPortMediaTypeDateCode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 1, 37, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPortMediaTypeDateCode.setStatus('current')
dot3azEEEset = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 53, 1))
dot3azTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 53, 1, 1), )
if mibBuilder.loadTexts: dot3azTable.setStatus('current')
dot3azEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 53, 1, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "portD3Index"))
if mibBuilder.loadTexts: dot3azEntry.setStatus('current')
portD3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 53, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portD3Index.setStatus('current')
portD3State = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 53, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notsupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portD3State.setStatus('current')
ipv4sysIpAddrCfgMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("dynamic", 2))).clone('manual')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysIpAddrCfgMode.setStatus('current')
ipv4sysIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysIpAddr.setStatus('current')
ipv4sysIpSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysIpSubnetMask.setStatus('current')
ipv4sysGateway = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysGateway.setStatus('current')
ipv4dhcpOption12Status = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4dhcpOption12Status.setStatus('current')
ipv4dhcpOption12HostName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 2, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4dhcpOption12HostName.setStatus('current')
ipifSupportV4V6Info = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 2, 7))
sysIpAddrCfgMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("dynamic", 2))).clone('manual')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpAddrCfgMode.setStatus('current')
sysIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 2, 7, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpAddr.setStatus('current')
sysIpSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 2, 7, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysIpSubnetMask.setStatus('current')
sysGateway = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 2, 7, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGateway.setStatus('current')
dhcpOption12Status = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 2, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpOption12Status.setStatus('current')
dhcpOption12HostName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 2, 7, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpOption12HostName.setStatus('current')
ipifName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 2, 7, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipifName.setStatus('current')
ipifVLANname = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 2, 7, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipifVLANname.setStatus('current')
ipifv6GlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 2, 7, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipifv6GlobalStatus.setStatus('current')
ipifv6DHCPStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 2, 7, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipifv6DHCPStatus.setStatus('current')
ipifv6AutolinkloStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 2, 7, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipifv6AutolinkloStatus.setStatus('current')
ipifv6NSRetransmitTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 2, 7, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipifv6NSRetransmitTime.setStatus('current')
ipifv6DefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 2, 7, 13), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipifv6DefaultGateway.setStatus('current')
ipifV6AddressTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 2, 7, 14), )
if mibBuilder.loadTexts: ipifV6AddressTable.setStatus('current')
ipifV6AddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 2, 7, 14, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "ipifV6AddressMainIndex"), (0, "DGS-1210-28XSME-BX", "ipifV6AddressIpAddr"), (0, "DGS-1210-28XSME-BX", "ipifV6AddressIpPrefix"))
if mibBuilder.loadTexts: ipifV6AddressEntry.setStatus('current')
ipifV6AddressMainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 2, 7, 14, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipifV6AddressMainIndex.setStatus('current')
ipifV6AddressIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 2, 7, 14, 1, 2), Ipv6Address().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipifV6AddressIpAddr.setStatus('current')
ipifV6AddressIpPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 2, 7, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipifV6AddressIpPrefix.setStatus('current')
ipifV6AddressIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 2, 7, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unicast", 1), ("anycast", 2), ("linklocal", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipifV6AddressIpType.setStatus('current')
ipifV6AddressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 2, 7, 14, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipifV6AddressRowStatus.setStatus('current')
ipv4sysIprouteGateway = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 2, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysIprouteGateway.setStatus('current')
ipv4sysIprouteHops = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 2, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysIprouteHops.setStatus('current')
tftpFwServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwServerIpAddress.setStatus('obsolete')
tftpFwImageFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwImageFileName.setStatus('obsolete')
tftpFwTftpOperation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("download", 1), ("upload", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTftpOperation.setStatus('obsolete')
tftpFwTftpOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("fail", 2), ("progressing", 3), ("transmit", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpFwTftpOperationStatus.setStatus('obsolete')
tftpCfgServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 3, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgServerIpAddress.setStatus('obsolete')
tftpConfigFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpConfigFileName.setStatus('obsolete')
tftpConfigTftpOperation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("download", 1), ("upload", 2), ("progressing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpConfigTftpOperation.setStatus('obsolete')
tftpConfigTftpOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("fail", 2), ("progressing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpConfigTftpOperationStatus.setStatus('obsolete')
tftpFwTargetGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 3, 9))
tftpFwTargetServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 3, 9, 1), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTargetServerIpAddress.setStatus('current')
tftpFwTargetServerIpType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 3, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTargetServerIpType.setStatus('current')
tftpFwTargetInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 3, 9, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTargetInterfaceName.setStatus('current')
tftpFwTargetImageFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 3, 9, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTargetImageFileName.setStatus('current')
tftpFwTargetTftpOperation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 3, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("download", 1), ("upload", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFwTargetTftpOperation.setStatus('current')
tftpFwTargetTftpOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 3, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("fail", 2), ("progressing", 3), ("transmit", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpFwTargetTftpOperationStatus.setStatus('current')
tftpCfgTargetGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 3, 10))
tftpCfgTargetServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 3, 10, 1), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgTargetServerIpAddress.setStatus('current')
tftpCfgTargetServerIpType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 3, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgTargetServerIpType.setStatus('current')
tftpCfgTargetInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 3, 10, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgTargetInterfaceName.setStatus('current')
tftpCfgTargetImageFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 3, 10, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgTargetImageFileName.setStatus('current')
tftpCfgTargetTftpOperation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 3, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("download", 1), ("upload", 2), ("progressing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgTargetTftpOperation.setStatus('current')
tftpCfgTargetTftpOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 3, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("fail", 2), ("progressing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpCfgTargetTftpOperationStatus.setStatus('current')
tftpCfgTargetConfigID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 3, 10, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("config1", 1), ("config2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCfgTargetConfigID.setStatus('current')
miscReset = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscReset.setStatus('current')
miscStatisticsReset = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscStatisticsReset.setStatus('current')
securityIpMacPortBinding = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10))
impbSettingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 1), )
if mibBuilder.loadTexts: impbSettingTable.setStatus('current')
impbSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "impbPortIndex"))
if mibBuilder.loadTexts: impbSettingEntry.setStatus('current')
impbPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbPortIndex.setStatus('current')
impbPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbPortState.setStatus('current')
impbPortDHCPSnoopingState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbPortDHCPSnoopingState.setStatus('current')
impbPortArpInspectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("strict", 1), ("loose", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbPortArpInspectionState.setStatus('current')
impbPortIpInspectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbPortIpInspectionState.setStatus('current')
impbPortAllowZeroIPState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbPortAllowZeroIPState.setStatus('current')
impbPortForwardDHCPPktState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbPortForwardDHCPPktState.setStatus('current')
impbPortDHCPMaxEntryIPv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbPortDHCPMaxEntryIPv4.setStatus('current')
impbPortDHCPMaxEntryIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbPortDHCPMaxEntryIPv6.setStatus('current')
impbPortNDInspectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbPortNDInspectionState.setStatus('current')
impbPortProtocolState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ipv4", 0), ("ipv6", 1), ("all", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbPortProtocolState.setStatus('current')
impbPortDHCPv4SetVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbPortDHCPv4SetVlanList.setStatus('current')
impbPortDHCPv4VlanList1k = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbPortDHCPv4VlanList1k.setStatus('current')
impbPortDHCPv4VlanList2k = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbPortDHCPv4VlanList2k.setStatus('current')
impbPortDHCPv4VlanList3k = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 1, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbPortDHCPv4VlanList3k.setStatus('current')
impbPortDHCPv4VlanList4k = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 1, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbPortDHCPv4VlanList4k.setStatus('current')
impbPortDHCPv6SetVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 1, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbPortDHCPv6SetVlanList.setStatus('current')
impbPortDHCPv6VlanList1k = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 1, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbPortDHCPv6VlanList1k.setStatus('current')
impbPortDHCPv6VlanList2k = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 1, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbPortDHCPv6VlanList2k.setStatus('current')
impbPortDHCPv6VlanList3k = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 1, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbPortDHCPv6VlanList3k.setStatus('current')
impbPortDHCPv6VlanList4k = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 1, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbPortDHCPv6VlanList4k.setStatus('current')
impbAutoScanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 2), )
if mibBuilder.loadTexts: impbAutoScanTable.setStatus('current')
impbAutoScanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 2, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "impbAutoScanMacAddress"), (0, "DGS-1210-28XSME-BX", "impbAutoScanPort"), (0, "DGS-1210-28XSME-BX", "impbAutoScanIpAddress"))
if mibBuilder.loadTexts: impbAutoScanEntry.setStatus('current')
impbAutoScanMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 2, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbAutoScanMacAddress.setStatus('current')
impbAutoScanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbAutoScanPort.setStatus('current')
impbAutoScanIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 2, 1, 3), DisplayString().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbAutoScanIpAddress.setStatus('current')
impbAutoScanVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbAutoScanVlanId.setStatus('current')
impbAutoScanBinding = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbAutoScanBinding.setStatus('current')
impbBindingListTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 3), )
if mibBuilder.loadTexts: impbBindingListTable.setStatus('current')
impbBindingListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 3, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "impbBindingListIpAddress"), (0, "DGS-1210-28XSME-BX", "impbBindingListMacAddress"))
if mibBuilder.loadTexts: impbBindingListEntry.setStatus('current')
impbBindingListIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 3, 1, 1), DisplayString().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbBindingListIpAddress.setStatus('current')
impbBindingListMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbBindingListMacAddress.setStatus('current')
impbBindingListPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbBindingListPort.setStatus('current')
impbBindingListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: impbBindingListRowStatus.setStatus('current')
impbBlockListTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 4), )
if mibBuilder.loadTexts: impbBlockListTable.setStatus('current')
impbBlockListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 4, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "impbBlockListMacAddress"), (0, "DGS-1210-28XSME-BX", "impbBlockListVlanId"), (0, "DGS-1210-28XSME-BX", "impbBlockListPort"))
if mibBuilder.loadTexts: impbBlockListEntry.setStatus('current')
impbBlockListMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 4, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbBlockListMacAddress.setStatus('current')
impbBlockListVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbBlockListVlanId.setStatus('current')
impbBlockListPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbBlockListPort.setStatus('current')
impbBlockListIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 4, 1, 4), DisplayString().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbBlockListIpAddress.setStatus('current')
impbBlockListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("deleted", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbBlockListStatus.setStatus('current')
impbAutoScanIpAddressFrom = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 5), Ipv6Address().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbAutoScanIpAddressFrom.setStatus('current')
impbAutoScanIpAddressTo = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 6), Ipv6Address().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbAutoScanIpAddressTo.setStatus('current')
impbAutoScanStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("scan", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbAutoScanStatus.setStatus('current')
impbDhcpSnoopingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 8), )
if mibBuilder.loadTexts: impbDhcpSnoopingTable.setStatus('current')
impbDhcpSnoopingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 8, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "impbDhcpSnoopingMacAddress"), (0, "DGS-1210-28XSME-BX", "impbDhcpSnoopingIpAddress"))
if mibBuilder.loadTexts: impbDhcpSnoopingEntry.setStatus('current')
impbDhcpSnoopingMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 8, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbDhcpSnoopingMacAddress.setStatus('current')
impbDhcpSnoopingIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 8, 1, 2), Ipv6Address().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbDhcpSnoopingIpAddress.setStatus('current')
impbDhcpSnoopingLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbDhcpSnoopingLeaseTime.setStatus('current')
impbDhcpSnoopingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbDhcpSnoopingPort.setStatus('current')
impbRoamingState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbRoamingState.setStatus('current')
impbVlanModeState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbVlanModeState.setStatus('current')
impbVlanModeVlanList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 11), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbVlanModeVlanList.setStatus('current')
impbLogState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("ipv4", 1), ("ipv6", 2), ("all", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbLogState.setStatus('current')
impbDHCPv6PrefixDelegationSnoopState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbDHCPv6PrefixDelegationSnoopState.setStatus('current')
impbBindingtraplog = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: impbBindingtraplog.setStatus('current')
impbBindingtrap = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 15))
impbBindingtrapsign = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 15, 1))
if mibBuilder.loadTexts: impbBindingtrapsign.setStatus('current')
impbAutoScanCurrentStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 10, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("stop", 0), ("scanning", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: impbAutoScanCurrentStatus.setStatus('current')
stpBridgeGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 1))
stpModuleStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpModuleStatus.setStatus('current')
stpProtocolVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stp", 1), ("rstp", 2), ("mstp", 3))).clone('rstp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpProtocolVersion.setStatus('current')
stpBridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgePriority.setStatus('current')
stpTxHoldCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpTxHoldCount.setStatus('current')
stpBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 1, 5), Timeout().subtype(subtypeSpec=ValueRangeConstraint(600, 4000)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgeMaxAge.setStatus('current')
stpBridgeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 1, 6), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgeHelloTime.setStatus('current')
stpBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 1, 7), Timeout().subtype(subtypeSpec=ValueRangeConstraint(400, 3000)).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpBridgeForwardDelay.setStatus('current')
stpFowardBPDU = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpFowardBPDU.setStatus('current')
stpRootBridge = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 1, 9), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpRootBridge.setStatus('current')
stpRootCost = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpRootCost.setStatus('current')
stpMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 1, 11), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpMaxAge.setStatus('current')
stpForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 1, 12), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpForwardDelay.setStatus('current')
stpRootPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpRootPort.setStatus('current')
stpTopologyChangeTrapStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpTopologyChangeTrapStatus.setStatus('current')
stpNewRootTrapStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpNewRootTrapStatus.setStatus('current')
stpNewRootTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 1, 16))
brgAddress = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 1, 16, 1))
if mibBuilder.loadTexts: brgAddress.setStatus('current')
oldDesignatedRoot = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 1, 16, 2))
if mibBuilder.loadTexts: oldDesignatedRoot.setStatus('current')
mstiBridgeRegionalRoot = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 1, 16, 3))
if mibBuilder.loadTexts: mstiBridgeRegionalRoot.setStatus('current')
stpPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 2), )
if mibBuilder.loadTexts: stpPortTable.setStatus('current')
stpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 2, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "stpPort"))
if mibBuilder.loadTexts: stpPortEntry.setStatus('current')
stpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPort.setStatus('current')
stpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortStatus.setStatus('current')
stpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortPriority.setStatus('current')
stpAdminPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpAdminPortPathCost.setStatus('current')
stpPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortPathCost.setStatus('current')
stpPortProtocolMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortProtocolMigration.setStatus('current')
stpPortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 0), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortEdge.setStatus('current')
stpPortAdminP2P = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceTrue", 0), ("forceFalse", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortAdminP2P.setStatus('current')
stpPortRestrictedRole = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 2, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortRestrictedRole.setStatus('current')
stpPortRestrictedTCN = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 2, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortRestrictedTCN.setStatus('current')
stpPortHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 2, 1, 11), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortHelloTime.setStatus('current')
stpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("discarding", 2), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortState.setStatus('current')
stpPortFowardBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortFowardBPDU.setStatus('current')
mstConfigurationIdentification = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 3))
mstiConfigurationName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstiConfigurationName.setStatus('current')
mstiRevisionLevel = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstiRevisionLevel.setStatus('current')
mstCistVlanMapped = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 3, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistVlanMapped.setStatus('current')
mstCistVlanMapped2k = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 3, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistVlanMapped2k.setStatus('current')
mstCistVlanMapped3k = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistVlanMapped3k.setStatus('current')
mstCistVlanMapped4k = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 3, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistVlanMapped4k.setStatus('current')
mstVlanMstiMappingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 3, 7), )
if mibBuilder.loadTexts: mstVlanMstiMappingTable.setStatus('current')
mstVlanMstiMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 3, 7, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "mstInstanceIndex"))
if mibBuilder.loadTexts: mstVlanMstiMappingEntry.setStatus('current')
mstInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceIndex.setStatus('current')
mstSetVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 3, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstSetVlanList.setStatus('current')
mstResetVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 3, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstResetVlanList.setStatus('current')
mstInstanceVlanMapped = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 3, 7, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceVlanMapped.setStatus('current')
mstInstanceVlanMapped2k = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 3, 7, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceVlanMapped2k.setStatus('current')
mstInstanceVlanMapped3k = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 3, 7, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceVlanMapped3k.setStatus('current')
mstInstanceVlanMapped4k = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 3, 7, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceVlanMapped4k.setStatus('current')
stpInstance = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 4))
mstCistBridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistBridgePriority.setStatus('current')
mstCistStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistStatus.setStatus('current')
mstMstiBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 4, 3), )
if mibBuilder.loadTexts: mstMstiBridgeTable.setStatus('current')
mstMstiBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 4, 3, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "mstMstiInstanceIndex"))
if mibBuilder.loadTexts: mstMstiBridgeEntry.setStatus('current')
mstMstiInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstMstiInstanceIndex.setStatus('current')
mstMstiBridgePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstMstiBridgePriority.setStatus('current')
mstMstiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstMstiStatus.setStatus('current')
stpInstancePortTable = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 5))
mstCistPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 5, 1), )
if mibBuilder.loadTexts: mstCistPortTable.setStatus('current')
mstCistPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 5, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "mstCistPort"))
if mibBuilder.loadTexts: mstCistPortEntry.setStatus('current')
mstCistPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: mstCistPort.setStatus('current')
mstCistPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 5, 1, 1, 2), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistPortDesignatedBridge.setStatus('current')
mstCistPortAdminPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistPortAdminPathCost.setStatus('current')
mstCistPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistPortPathCost.setStatus('current')
mstCistPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistPortPriority.setStatus('current')
mstCistForcePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistForcePortState.setStatus('current')
mstCistCurrentPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("alternate", 1), ("backup", 2), ("root", 3), ("designated", 4), ("master", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurrentPortRole.setStatus('current')
mstMstiPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 5, 2), )
if mibBuilder.loadTexts: mstMstiPortTable.setStatus('current')
mstMstiPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 5, 2, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "mstMstiPort"), (0, "DGS-1210-28XSME-BX", "mstInstanceIndex"))
if mibBuilder.loadTexts: mstMstiPortEntry.setStatus('current')
mstMstiPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: mstMstiPort.setStatus('current')
mstMstiPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 5, 2, 1, 2), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstMstiPortDesignatedBridge.setStatus('current')
mstMstiPortAdminPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstMstiPortAdminPathCost.setStatus('current')
mstMstiPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstMstiPortPathCost.setStatus('current')
mstMstiPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstMstiPortPriority.setStatus('current')
mstMstiForcePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstMstiForcePortState.setStatus('current')
mstMstiCurrentPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 6, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("alternate", 1), ("backup", 2), ("root", 3), ("designated", 4), ("master", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstMstiCurrentPortRole.setStatus('current')
staticMcastTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 19, 1), )
if mibBuilder.loadTexts: staticMcastTable.setStatus('current')
staticMcastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 19, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "staticMcastVlanID"), (0, "DGS-1210-28XSME-BX", "staticMcastMac"), (0, "DGS-1210-28XSME-BX", "staticMcastEgressPorts"), (0, "DGS-1210-28XSME-BX", "staticMcastIpAddr"))
if mibBuilder.loadTexts: staticMcastEntry.setStatus('current')
staticMcastVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 19, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMcastVlanID.setStatus('current')
staticMcastMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 19, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMcastMac.setStatus('current')
staticMcastEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 19, 1, 1, 3), PortList().subtype(subtypeSpec=ValueSizeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMcastEgressPorts.setStatus('current')
staticMcastIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 19, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMcastIpAddr.setStatus('current')
staticMcastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 19, 1, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticMcastStatus.setStatus('current')
dot1qVlanManagementOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanManagementOnOff.setStatus('current')
dot1qVlanManagementid = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 7, 3), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanManagementid.setStatus('current')
dot1qVlanAsyOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanAsyOnOff.setStatus('current')
dot1qVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 7, 6), )
if mibBuilder.loadTexts: dot1qVlanTable.setStatus('current')
dot1qVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 7, 6, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "dot1qVlanName"))
if mibBuilder.loadTexts: dot1qVlanEntry.setStatus('current')
dot1qVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 7, 6, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1qVlanName.setStatus('current')
dot1qVlanEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 7, 6, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1qVlanEgressPorts.setStatus('current')
dot1qVlanForbiddenPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 7, 6, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanForbiddenPorts.setStatus('current')
dot1qVlanUntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 7, 6, 1, 4), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1qVlanUntaggedPorts.setStatus('current')
dot1qVlanAdvertisementStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 7, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1qVlanAdvertisementStatus.setStatus('current')
dot1qVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 7, 6, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1qVlanRowStatus.setStatus('current')
dot1qVlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 7, 7), )
if mibBuilder.loadTexts: dot1qVlanPortTable.setStatus('current')
dot1qVlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 7, 7, 1), )
dot1dBasePortEntry.registerAugmentions(("DGS-1210-28XSME-BX", "dot1qVlanPortEntry"))
dot1qVlanPortEntry.setIndexNames(*dot1dBasePortEntry.getIndexNames())
if mibBuilder.loadTexts: dot1qVlanPortEntry.setStatus('current')
dot1qVlanPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 7, 7, 1, 1), VlanIndex().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanPvid.setStatus('current')
dot1qVlanUngisterMCFilterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 7, 8), )
if mibBuilder.loadTexts: dot1qVlanUngisterMCFilterTable.setStatus('current')
dot1qVlanUngisterMCFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 7, 8, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "dot1qVlanUngisterMCFilterVlanId"))
if mibBuilder.loadTexts: dot1qVlanUngisterMCFilterEntry.setStatus('current')
dot1qVlanUngisterMCFilterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 7, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qVlanUngisterMCFilterVlanId.setStatus('current')
dot1qVlanUngisterMCFiltermode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 7, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1, 0))).clone(namedValues=NamedValues(("forwardall", 2), ("filter", 1), ("forward", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanUngisterMCFiltermode.setStatus('current')
dot1qVlanPVIDAutoAssignOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 7, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanPVIDAutoAssignOnOff.setStatus('current')
gvrpGVRPGlobalSettingsOnOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gvrpGVRPGlobalSettingsOnOff.setStatus('current')
gvrpSettingsJoinTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gvrpSettingsJoinTime.setStatus('current')
gvrpSettingsLeaveTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 11, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gvrpSettingsLeaveTime.setStatus('current')
gvrpSettingsLeaveAllTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 11, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gvrpSettingsLeaveAllTime.setStatus('current')
gvrpSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 11, 5), )
if mibBuilder.loadTexts: gvrpSettingsTable.setStatus('current')
gvrpSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 11, 5, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "gvrpSettingsPortControlIndex"))
if mibBuilder.loadTexts: gvrpSettingsEntry.setStatus('current')
gvrpSettingsPortControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 11, 5, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gvrpSettingsPortControlIndex.setStatus('current')
gvrpSettingsPVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 11, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gvrpSettingsPVID.setStatus('current')
gvrpSettingsGVRPState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 11, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gvrpSettingsGVRPState.setStatus('current')
gvrpSettingsIngressChecking = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 11, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gvrpSettingsIngressChecking.setStatus('current')
gvrpSettingsAcceptableFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 11, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allFrames", 1), ("taggedOnly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gvrpSettingsAcceptableFrameType.setStatus('current')
dhcpBOOTPRelayControl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 28, 1))
dhcpBOOTPRelayManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 28, 2))
dhcpBOOTPRelayManagementOption82 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 28, 2, 2))
dhcpBOOTPRelayState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 28, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayState.setStatus('current')
dhcpBOOTPRelayHopCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 28, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayHopCount.setStatus('current')
dhcpBOOTPRelayTimeThreshold = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 28, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayTimeThreshold.setStatus('current')
dhcpBOOTPRelayEnablePortlist = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 28, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayEnablePortlist.setStatus('current')
dhcpRelayVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 28, 1, 5), )
if mibBuilder.loadTexts: dhcpRelayVlanTable.setStatus('current')
dhcpRelayVlanTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 28, 1, 5, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "dhcpRelayVlanSettingsVLANID"))
if mibBuilder.loadTexts: dhcpRelayVlanTableEntry.setStatus('current')
dhcpRelayVlanSettingsVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 28, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRelayVlanSettingsVLANID.setStatus('current')
dhcpRelayVlanSettingsState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 28, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayVlanSettingsState.setStatus('current')
dhcpBOOTPRelayInterfaceSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 28, 2, 1), )
if mibBuilder.loadTexts: dhcpBOOTPRelayInterfaceSettingsTable.setStatus('current')
dhcpBOOTPRelayInterfaceSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 28, 2, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "dhcpBOOTPRelayInterface"), (0, "DGS-1210-28XSME-BX", "dhcpBOOTPRelayServerIP"))
if mibBuilder.loadTexts: dhcpBOOTPRelayInterfaceSettingsEntry.setStatus('current')
dhcpBOOTPRelayInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 28, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpBOOTPRelayInterface.setStatus('current')
dhcpBOOTPRelayServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 28, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpBOOTPRelayServerIP.setStatus('current')
dhcpBOOTPRelayInterfaceSettingsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 28, 2, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpBOOTPRelayInterfaceSettingsRowStatus.setStatus('current')
dhcpBOOTPRelayOption82State = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 28, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayOption82State.setStatus('current')
dhcpBOOTPRelayOption82CheckState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 28, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayOption82CheckState.setStatus('current')
dhcpBOOTPRelayOption82Policy = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 28, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("drop", 2), ("keep", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayOption82Policy.setStatus('current')
dhcpBOOTPRelayOption82RemoteIDType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 28, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("userdefined", 2), ("userdefinedhex", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayOption82RemoteIDType.setStatus('current')
dhcpBOOTPRelayOption82RemoteID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 28, 2, 2, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayOption82RemoteID.setStatus('current')
dhcpBOOTPRelayOption82CircuitIDType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 28, 2, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("userdefined", 2), ("userdefinedhex", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayOption82CircuitIDType.setStatus('current')
dhcpBOOTPRelayOption82CircuitID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 28, 2, 2, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpBOOTPRelayOption82CircuitID.setStatus('current')
dhcpLocalRelayGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 29, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpLocalRelayGlobalState.setStatus('current')
dhcpLocalRelayTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 29, 2), )
if mibBuilder.loadTexts: dhcpLocalRelayTable.setStatus('current')
dhcpLocalRelayTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 29, 2, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "dhcpLocalRelaySettingsVLANID"))
if mibBuilder.loadTexts: dhcpLocalRelayTableEntry.setStatus('current')
dhcpLocalRelaySettingsVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 29, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpLocalRelaySettingsVLANID.setStatus('current')
dhcpLocalRelaySettingsState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 29, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpLocalRelaySettingsState.setStatus('current')
dhcpLocalRelayEnablePortlist = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 29, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpLocalRelayEnablePortlist.setStatus('current')
laSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 8, 1))
laPortControl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 8, 2))
class PortLaMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("lacp", 1), ("static", 2), ("disable", 3))

class LacpKey(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

laStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laStatus.setStatus('current')
laPortChannelTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 8, 1, 3), )
if mibBuilder.loadTexts: laPortChannelTable.setStatus('current')
laPortChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 8, 1, 3, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "laPortChannelIfIndex"))
if mibBuilder.loadTexts: laPortChannelEntry.setStatus('current')
laPortChannelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 8, 1, 3, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: laPortChannelIfIndex.setStatus('current')
laPortChannelMemberList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 8, 1, 3, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortChannelMemberList.setStatus('current')
laPortChannelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 8, 1, 3, 1, 3), PortLaMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortChannelMode.setStatus('current')
laPortChannelMasterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 8, 1, 3, 1, 4), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortChannelMasterPort.setStatus('current')
laAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sourceMAC", 1), ("destMAC", 2), ("sourceAndDestMAC", 3), ("sourceIP", 4), ("destIP", 5), ("sourceAndDestIP", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laAlgorithm.setStatus('current')
laPortControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 8, 2, 1), )
if mibBuilder.loadTexts: laPortControlTable.setStatus('current')
laPortControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 8, 2, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "laPortControlIndex"))
if mibBuilder.loadTexts: laPortControlEntry.setStatus('current')
laPortControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 8, 2, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: laPortControlIndex.setStatus('current')
laPortActorPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 8, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortActorPortPriority.setStatus('current')
laPortActorActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 8, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortActorActivity.setStatus('current')
laPortActorTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 8, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laPortActorTimeout.setStatus('current')
staticVlanBaseTable = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 9, 5))
staticDisableAutoLearn = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticDisableAutoLearn.setStatus('current')
staticAutoLearningList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 9, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticAutoLearningList.setStatus('current')
staticTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 9, 3), )
if mibBuilder.loadTexts: staticTable.setStatus('current')
staticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 9, 3, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "staticVlanID"), (0, "DGS-1210-28XSME-BX", "staticMac"), (0, "DGS-1210-28XSME-BX", "staticPort"))
if mibBuilder.loadTexts: staticEntry.setStatus('current')
staticVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticVlanID.setStatus('current')
staticMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 9, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticMac.setStatus('current')
staticPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticPort.setStatus('current')
staticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 9, 3, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticStatus.setStatus('current')
autoFdbTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 9, 4), )
if mibBuilder.loadTexts: autoFdbTable.setStatus('current')
autoFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 9, 4, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "autoFdbIPAddress"))
if mibBuilder.loadTexts: autoFdbEntry.setStatus('current')
autoFdbIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 9, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoFdbIPAddress.setStatus('current')
autoFdbVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 9, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoFdbVlanID.setStatus('current')
autoFdbMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 9, 4, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoFdbMacAddress.setStatus('current')
autoFdbPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 9, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoFdbPort.setStatus('current')
autoFdbTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 9, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoFdbTimeStamp.setStatus('current')
autoFdbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 9, 4, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoFdbStatus.setStatus('current')
staticVlanBaseAutoLearnList1k = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 9, 5, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticVlanBaseAutoLearnList1k.setStatus('current')
staticVlanBaseAutoLearnList2k = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 9, 5, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticVlanBaseAutoLearnList2k.setStatus('current')
staticVlanBaseAutoLearnList3k = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 9, 5, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticVlanBaseAutoLearnList3k.setStatus('current')
staticVlanBaseAutoLearnList4k = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 9, 5, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticVlanBaseAutoLearnList4k.setStatus('current')
staticVlanBaseEnableAutoLearn = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 9, 5, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticVlanBaseEnableAutoLearn.setStatus('current')
staticVlanBaseDisableAutoLearn = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 9, 5, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticVlanBaseDisableAutoLearn.setStatus('current')
igsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 1))
igsVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 3))
igsAccessAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 5))
igsHost = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 6))
igsStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsStatus.setStatus('current')
igsRouterPortPurgeInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsRouterPortPurgeInterval.setStatus('current')
igsHostPortPurgeInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(130, 153025)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsHostPortPurgeInterval.setStatus('current')
igsDataDrivenLearningMaxLearnedEntryVlaue = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsDataDrivenLearningMaxLearnedEntryVlaue.setStatus('current')
igsReportToAllPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsReportToAllPort.setStatus('current')
igsVlanRouterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 3, 3), )
if mibBuilder.loadTexts: igsVlanRouterTable.setStatus('current')
igsVlanRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 3, 3, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "igsVlanRouterVlanId"))
if mibBuilder.loadTexts: igsVlanRouterEntry.setStatus('current')
igsVlanRouterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanRouterVlanId.setStatus('current')
igsVlanRouterPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 3, 3, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanRouterPortList.setStatus('current')
igsVlanFilterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 3, 4), )
if mibBuilder.loadTexts: igsVlanFilterTable.setStatus('current')
igsVlanFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 3, 4, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "igsVlanFilterVlanId"))
if mibBuilder.loadTexts: igsVlanFilterEntry.setStatus('current')
igsVlanFilterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanFilterVlanId.setStatus('current')
igsVlanSnoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanSnoopStatus.setStatus('current')
igsVlanQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanQuerier.setStatus('current')
igsVlanCfgQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanCfgQuerier.setStatus('current')
igsVlanQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanQueryInterval.setStatus('current')
igsVlanRtrPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 3, 4, 1, 6), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanRtrPortList.setStatus('current')
igsVlanFbdRtrPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 3, 4, 1, 7), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanFbdRtrPortList.setStatus('current')
igsVlanFastLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanFastLeave.setStatus('current')
igsVlanDataDrivenLearningStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 3, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanDataDrivenLearningStatus.setStatus('current')
igsVlanQuerierVersionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 3, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 2, 1))).clone(namedValues=NamedValues(("igmp-v3", 3), ("igmp-v2", 2), ("igmp-v1", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanQuerierVersionStatus.setStatus('current')
igsVlanDataDrivenLearningAgeOutStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 3, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanDataDrivenLearningAgeOutStatus.setStatus('current')
igsVlanReportSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 3, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanReportSuppression.setStatus('current')
igsVlanRobustnessValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 3, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanRobustnessValue.setStatus('current')
igsVlanGrpQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 3, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanGrpQueryInterval.setStatus('current')
igsVlanQueryMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 3, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 25)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsVlanQueryMaxResponseTime.setStatus('current')
igsVlanMulticastGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 3, 5), )
if mibBuilder.loadTexts: igsVlanMulticastGroupTable.setStatus('current')
igsVlanMulticastGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 3, 5, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "igsVlanMulticastGroupVlanId"), (0, "DGS-1210-28XSME-BX", "igsVlanMulticastGroupIpAddress"))
if mibBuilder.loadTexts: igsVlanMulticastGroupEntry.setStatus('current')
igsVlanMulticastGroupVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupVlanId.setStatus('current')
igsVlanMulticastGroupIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 3, 5, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupIpAddress.setStatus('current')
igsVlanMulticastGroupMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 3, 5, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupMacAddress.setStatus('current')
igsVlanMulticastGroupPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 3, 5, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsVlanMulticastGroupPortList.setStatus('current')
igsAccessAuthTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 5, 1), )
if mibBuilder.loadTexts: igsAccessAuthTable.setStatus('current')
igsAccessAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 5, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "igsAccessAuthPortIndex"))
if mibBuilder.loadTexts: igsAccessAuthEntry.setStatus('current')
igsAccessAuthPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsAccessAuthPortIndex.setStatus('current')
igsAccessAuthState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igsAccessAuthState.setStatus('current')
igsHostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 6, 1), )
if mibBuilder.loadTexts: igsHostTable.setStatus('current')
igsHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 6, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "igsHostTableVLANID"), (0, "DGS-1210-28XSME-BX", "igsHostTableGroupAddress"), (0, "DGS-1210-28XSME-BX", "igsHostTablePort"), (0, "DGS-1210-28XSME-BX", "igsHostTableHostIPAddress"))
if mibBuilder.loadTexts: igsHostEntry.setStatus('current')
igsHostTableVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsHostTableVLANID.setStatus('current')
igsHostTableGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 6, 1, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsHostTableGroupAddress.setStatus('current')
igsHostTablePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsHostTablePort.setStatus('current')
igsHostTableHostIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 10, 6, 1, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igsHostTableHostIPAddress.setStatus('current')
mldsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 88, 1))
mldsVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 88, 3))
mldsHost = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 88, 4))
mldsStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 88, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsStatus.setStatus('current')
mldsRouterPortPurgeInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 88, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsRouterPortPurgeInterval.setStatus('current')
mldsHostPortPurgeInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 88, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(130, 153025)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsHostPortPurgeInterval.setStatus('current')
mldsDataDrivenLearningMaxLearnedEntryVlaue = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 88, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsDataDrivenLearningMaxLearnedEntryVlaue.setStatus('current')
mldsVlanRouterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 88, 3, 3), )
if mibBuilder.loadTexts: mldsVlanRouterTable.setStatus('current')
mldsVlanRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 88, 3, 3, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "mldsVlanRouterVlanId"))
if mibBuilder.loadTexts: mldsVlanRouterEntry.setStatus('current')
mldsVlanRouterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 88, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanRouterVlanId.setStatus('current')
mldsVlanRouterPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 88, 3, 3, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanRouterPortList.setStatus('current')
mldsVlanFilterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 88, 3, 4), )
if mibBuilder.loadTexts: mldsVlanFilterTable.setStatus('current')
mldsVlanFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 88, 3, 4, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "mldsVlanFilterVlanId"))
if mibBuilder.loadTexts: mldsVlanFilterEntry.setStatus('current')
mldsVlanFilterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 88, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanFilterVlanId.setStatus('current')
mldsVlanSnoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 88, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanSnoopStatus.setStatus('current')
mldsVlanQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 88, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanQuerier.setStatus('current')
mldsVlanCfgQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 88, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanCfgQuerier.setStatus('current')
mldsVlanQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 88, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanQueryInterval.setStatus('current')
mldsVlanRtrPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 88, 3, 4, 1, 6), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanRtrPortList.setStatus('current')
mldsVlanFbdRtrPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 88, 3, 4, 1, 7), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanFbdRtrPortList.setStatus('current')
mldsVlanFastLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 88, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanFastLeave.setStatus('current')
mldsVlanDataDrivenLearningStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 88, 3, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanDataDrivenLearningStatus.setStatus('current')
mldsVlanReportSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 88, 3, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanReportSuppression.setStatus('current')
mldsVlanRobustnessValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 88, 3, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanRobustnessValue.setStatus('current')
mldsVlanGrpQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 88, 3, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanGrpQueryInterval.setStatus('current')
mldsVlanQueryMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 88, 3, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 25)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldsVlanQueryMaxResponseTime.setStatus('current')
mldsVlanMulticastGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 88, 3, 5), )
if mibBuilder.loadTexts: mldsVlanMulticastGroupTable.setStatus('current')
mldsVlanMulticastGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 88, 3, 5, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "mldsVlanMulticastGroupVlanId"), (0, "DGS-1210-28XSME-BX", "mldsVlanMulticastGroupIpAddress"))
if mibBuilder.loadTexts: mldsVlanMulticastGroupEntry.setStatus('current')
mldsVlanMulticastGroupVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 88, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanMulticastGroupVlanId.setStatus('current')
mldsVlanMulticastGroupIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 88, 3, 5, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanMulticastGroupIpAddress.setStatus('current')
mldsVlanMulticastGroupMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 88, 3, 5, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanMulticastGroupMacAddress.setStatus('current')
mldsVlanMulticastGroupPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 88, 3, 5, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsVlanMulticastGroupPortList.setStatus('current')
mldsHostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 88, 4, 1), )
if mibBuilder.loadTexts: mldsHostTable.setStatus('current')
mldsHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 88, 4, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "mldsHostTableVLANID"), (0, "DGS-1210-28XSME-BX", "mldsHostTableGroupAddress"), (0, "DGS-1210-28XSME-BX", "mldsHostTablePort"), (0, "DGS-1210-28XSME-BX", "mldsHostTableHostIPAddress"))
if mibBuilder.loadTexts: mldsHostEntry.setStatus('current')
mldsHostTableVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 88, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsHostTableVLANID.setStatus('current')
mldsHostTableGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 88, 4, 1, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsHostTableGroupAddress.setStatus('current')
mldsHostTablePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 88, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsHostTablePort.setStatus('current')
mldsHostTableHostIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 88, 4, 1, 1, 4), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsHostTableHostIPAddress.setStatus('current')
swAuthenCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 1))
swAuthStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthStatus.setStatus('current')
swAuthMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("portBase", 1), ("macBase", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthMode.setStatus('current')
authProtocol = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("authProtocolRadiusEap", 1), ("authProtocolLocal", 2))).clone('authProtocolRadiusEap')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authProtocol.setStatus('current')
swAuthCtrlPktFwdMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("authForwardEap", 1), ("authDropEap", 2))).clone('authForwardEap')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthCtrlPktFwdMode.setStatus('current')
swAuthPortAccessCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 2))
swAuthPortAccessControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 2, 1), )
if mibBuilder.loadTexts: swAuthPortAccessControlTable.setStatus('current')
swAuthPortAccessControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 2, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "swAuthAuthConfigPortNumber"))
if mibBuilder.loadTexts: swAuthPortAccessControlEntry.setStatus('current')
swAuthAuthConfigPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthAuthConfigPortNumber.setStatus('current')
swAuthAuthQuietPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthQuietPeriod.setStatus('current')
swAuthAuthSuppTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthSuppTimeout.setStatus('current')
swAuthAuthServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthServerTimeout.setStatus('current')
swAuthAuthMaxReq = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthMaxReq.setStatus('current')
swAuthAuthTxPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(24)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthTxPeriod.setStatus('current')
swAuthAuthReAuthPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(3600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthReAuthPeriod.setStatus('current')
swAuthAuthReAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthReAuthentication.setStatus('current')
swAuthAuthConfigPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forceUnauthorized", 1), ("auto", 2), ("forceAuthorized", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthConfigPortControl.setStatus('current')
swAuthAuthCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("authenticator", 1), ("none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthCapability.setStatus('current')
swAuthAuthDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("both", 0), ("in", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthAuthDirection.setStatus('current')
swAuthUser = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 3))
swAuthUserTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 3, 1), )
if mibBuilder.loadTexts: swAuthUserTable.setStatus('current')
swAuthUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 3, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "swAuthUserName"))
if mibBuilder.loadTexts: swAuthUserEntry.setStatus('current')
swAuthUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 3, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthUserName.setStatus('current')
swAuthUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthUserPassword.setStatus('current')
swAuthUserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 3, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAuthUserStatus.setStatus('current')
swAuthRadiusServer = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 4))
iPv4swAuthRadiusServerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 4, 1), )
if mibBuilder.loadTexts: iPv4swAuthRadiusServerTable.setStatus('obsolete')
iPv4swAuthRadiusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 4, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "iPv4swAuthRadiusServerIndex"))
if mibBuilder.loadTexts: iPv4swAuthRadiusServerEntry.setStatus('obsolete')
iPv4swAuthRadiusServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iPv4swAuthRadiusServerIndex.setStatus('obsolete')
iPv4swAuthRadiusServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 4, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPv4swAuthRadiusServerAddress.setStatus('obsolete')
iPv4swAuthRadiusServerAuthenticationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1812)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPv4swAuthRadiusServerAuthenticationPort.setStatus('obsolete')
iPv4swAuthRadiusServerAccountingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1813)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPv4swAuthRadiusServerAccountingPort.setStatus('obsolete')
iPv4swAuthRadiusServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPv4swAuthRadiusServerTimeout.setStatus('obsolete')
iPv4swAuthRadiusServerRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPv4swAuthRadiusServerRetransmit.setStatus('obsolete')
iPv4swAuthRadiusServerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 4, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPv4swAuthRadiusServerKey.setStatus('obsolete')
iPv4swAuthRadiusServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 4, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPv4swAuthRadiusServerStatus.setStatus('obsolete')
swAuthRadiusServerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 4, 2), )
if mibBuilder.loadTexts: swAuthRadiusServerTable.setStatus('current')
swAuthRadiusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 4, 2, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "swAuthRadiusServerIndex"))
if mibBuilder.loadTexts: swAuthRadiusServerEntry.setStatus('current')
swAuthRadiusServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAuthRadiusServerIndex.setStatus('current')
swAuthRadiusIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusIPType.setStatus('current')
swAuthRadiusServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 4, 2, 1, 3), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusServerAddress.setStatus('current')
swAuthRadiusServerInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 4, 2, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAuthRadiusServerInterfaceName.setStatus('current')
swAuthRadiusServerAuthenticationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1812)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusServerAuthenticationPort.setStatus('current')
swAuthRadiusServerAccountingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1813)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusServerAccountingPort.setStatus('current')
swAuthRadiusServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusServerTimeout.setStatus('current')
swAuthRadiusServerRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusServerRetransmit.setStatus('current')
swAuthRadiusServerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 4, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swAuthRadiusServerKey.setStatus('current')
swAuthRadiusServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 23, 4, 2, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAuthRadiusServerStatus.setStatus('current')
cosScheduleMechanism = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strictPriority", 1), ("wrr", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cosScheduleMechanism.setStatus('current')
cosOutputSchedule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 2))
cosClassTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 2, 1), )
if mibBuilder.loadTexts: cosClassTable.setStatus('current')
cosClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 2, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "cosClassIndex"))
if mibBuilder.loadTexts: cosClassEntry.setStatus('current')
cosClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cosClassIndex.setStatus('current')
cosWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 55))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cosWeight.setStatus('current')
cosBandwidthCtrlSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 9))
cosBandwidthCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 9, 1), )
if mibBuilder.loadTexts: cosBandwidthCtrlTable.setStatus('current')
cosBandwidthCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 9, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "cosBandwidthCtrlPortIndex"), (0, "DGS-1210-28XSME-BX", "cosBandwidthCtrlClassIndex"))
if mibBuilder.loadTexts: cosBandwidthCtrlEntry.setStatus('current')
cosBandwidthCtrlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cosBandwidthCtrlPortIndex.setStatus('current')
cosBandwidthCtrlClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cosBandwidthCtrlClassIndex.setStatus('current')
cosBandwidthValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 9, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cosBandwidthValue.setStatus('current')
qosDefaultUserPri = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 4))
qosDefaultUserPriTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 4, 1), )
if mibBuilder.loadTexts: qosDefaultUserPriTable.setStatus('current')
qosDefaultUserPriEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 4, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "qosDefaultUserPriPortIndex"))
if mibBuilder.loadTexts: qosDefaultUserPriEntry.setStatus('current')
qosDefaultUserPriPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDefaultUserPriPortIndex.setStatus('current')
qosDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("priority0", 0), ("priority1", 1), ("priority2", 2), ("priority3", 3), ("priority4", 4), ("priority5", 5), ("priority6", 6), ("priority7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDefaultPriority.setStatus('current')
qosEffectiveDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("priority0", 0), ("priority1", 1), ("priority2", 2), ("priority3", 3), ("priority4", 4), ("priority5", 5), ("priority6", 6), ("priority7", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosEffectiveDefaultPriority.setStatus('current')
qosUserPriority = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 5))
qosUserPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 5, 1), )
if mibBuilder.loadTexts: qosUserPriorityTable.setStatus('current')
qosUserPriEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 5, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "qosUserPriIndex"))
if mibBuilder.loadTexts: qosUserPriEntry.setStatus('current')
qosUserPriIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosUserPriIndex.setStatus('current')
qosUserPriClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosUserPriClass.setStatus('current')
qosPriSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 7))
qosPriSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 7, 1), )
if mibBuilder.loadTexts: qosPriSettingsTable.setStatus('current')
qosPriSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 7, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "qosPriSetPortIndex"))
if mibBuilder.loadTexts: qosPriSettingsEntry.setStatus('current')
qosPriSetPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPriSetPortIndex.setStatus('current')
qosPriSetPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 4, 6))).clone(namedValues=NamedValues(("none", 0), ("ieee8021P", 2), ("dscp-tos", 4), ("ieee8021P-dscp-tos", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPriSetPortType.setStatus('current')
qosDiffServTOS = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6))
qosDSCPTOSMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tos", 1), ("dscp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDSCPTOSMode.setStatus('current')
qosDiffServTypeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2))
qosDiffServType00 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType00.setStatus('current')
qosDiffServType01 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType01.setStatus('current')
qosDiffServType02 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType02.setStatus('current')
qosDiffServType03 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType03.setStatus('current')
qosDiffServType04 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType04.setStatus('current')
qosDiffServType05 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType05.setStatus('current')
qosDiffServType06 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType06.setStatus('current')
qosDiffServType07 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType07.setStatus('current')
qosDiffServType08 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType08.setStatus('current')
qosDiffServType09 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType09.setStatus('current')
qosDiffServType10 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType10.setStatus('current')
qosDiffServType11 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType11.setStatus('current')
qosDiffServType12 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType12.setStatus('current')
qosDiffServType13 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType13.setStatus('current')
qosDiffServType14 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType14.setStatus('current')
qosDiffServType15 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType15.setStatus('current')
qosDiffServType16 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType16.setStatus('current')
qosDiffServType17 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType17.setStatus('current')
qosDiffServType18 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType18.setStatus('current')
qosDiffServType19 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType19.setStatus('current')
qosDiffServType20 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType20.setStatus('current')
qosDiffServType21 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType21.setStatus('current')
qosDiffServType22 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType22.setStatus('current')
qosDiffServType23 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType23.setStatus('current')
qosDiffServType24 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType24.setStatus('current')
qosDiffServType25 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType25.setStatus('current')
qosDiffServType26 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType26.setStatus('current')
qosDiffServType27 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType27.setStatus('current')
qosDiffServType28 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType28.setStatus('current')
qosDiffServType29 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType29.setStatus('current')
qosDiffServType30 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType30.setStatus('current')
qosDiffServType31 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType31.setStatus('current')
qosDiffServType32 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType32.setStatus('current')
qosDiffServType33 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType33.setStatus('current')
qosDiffServType34 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType34.setStatus('current')
qosDiffServType35 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType35.setStatus('current')
qosDiffServType36 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType36.setStatus('current')
qosDiffServType37 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType37.setStatus('current')
qosDiffServType38 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType38.setStatus('current')
qosDiffServType39 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType39.setStatus('current')
qosDiffServType40 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType40.setStatus('current')
qosDiffServType41 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType41.setStatus('current')
qosDiffServType42 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType42.setStatus('current')
qosDiffServType43 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType43.setStatus('current')
qosDiffServType44 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType44.setStatus('current')
qosDiffServType45 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType45.setStatus('current')
qosDiffServType46 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType46.setStatus('current')
qosDiffServType47 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType47.setStatus('current')
qosDiffServType48 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType48.setStatus('current')
qosDiffServType49 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType49.setStatus('current')
qosDiffServType50 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType50.setStatus('current')
qosDiffServType51 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType51.setStatus('current')
qosDiffServType52 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType52.setStatus('current')
qosDiffServType53 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType53.setStatus('current')
qosDiffServType54 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType54.setStatus('current')
qosDiffServType55 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType55.setStatus('current')
qosDiffServType56 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType56.setStatus('current')
qosDiffServType57 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType57.setStatus('current')
qosDiffServType58 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType58.setStatus('current')
qosDiffServType59 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType59.setStatus('current')
qosDiffServType60 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType60.setStatus('current')
qosDiffServType61 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType61.setStatus('current')
qosDiffServType62 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType62.setStatus('current')
qosDiffServType63 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 2, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDiffServType63.setStatus('current')
qosTOSGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 3))
qosTOSType00 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType00.setStatus('current')
qosTOSType01 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType01.setStatus('current')
qosTOSType02 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType02.setStatus('current')
qosTOSType03 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType03.setStatus('current')
qosTOSType04 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType04.setStatus('current')
qosTOSType05 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType05.setStatus('current')
qosTOSType06 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType06.setStatus('current')
qosTOSType07 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 6, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTOSType07.setStatus('current')
qosAclPrioritySettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 8))
ipv4aclQosTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 8, 1), )
if mibBuilder.loadTexts: ipv4aclQosTable.setStatus('current')
ipv4aclQosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 8, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "ipv4aclQosIndex"))
if mibBuilder.loadTexts: ipv4aclQosEntry.setStatus('current')
ipv4aclQosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4aclQosIndex.setStatus('current')
ipv4aclQosType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("mac", 0), ("ip", 1), ("tcp", 2), ("udp", 3), ("vlanid", 4), ("protocol", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclQosType.setStatus('current')
ipv4aclQosMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 8, 1, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclQosMACAddr.setStatus('current')
ipv4aclQosIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 8, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclQosIPAddr.setStatus('current')
ipv4aclQosTCPUDPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclQosTCPUDPPort.setStatus('current')
ipv4aclQosVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclQosVlanID.setStatus('current')
ipv4aclQosProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclQosProtocol.setStatus('current')
ipv4aclQosAssignClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("class0", 0), ("class1", 1), ("class2", 2), ("class3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclQosAssignClass.setStatus('current')
ipv4aclQosStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 8, 1, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclQosStatus.setStatus('current')
aclQosTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 8, 2), )
if mibBuilder.loadTexts: aclQosTable.setStatus('current')
aclQosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 8, 2, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "aclQosIndex"))
if mibBuilder.loadTexts: aclQosEntry.setStatus('current')
aclQosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclQosIndex.setStatus('current')
aclQosType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("mac", 0), ("ip", 1), ("tcp", 2), ("udp", 3), ("vlanid", 4), ("protocol", 5), ("ipv6", 6), ("ipv6traffic-class", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclQosType.setStatus('current')
aclQosMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 8, 2, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclQosMACAddr.setStatus('current')
aclQosIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 8, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclQosIPAddr.setStatus('current')
aclQosIPv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 8, 2, 1, 5), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclQosIPv6Addr.setStatus('current')
aclQosTCPUDPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclQosTCPUDPPort.setStatus('current')
aclQosVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 8, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclQosVlanID.setStatus('current')
aclQosProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 8, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclQosProtocol.setStatus('current')
aclQosIP6TC = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 8, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclQosIP6TC.setStatus('current')
aclQosAssignClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 8, 2, 1, 98), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("class0", 0), ("class1", 1), ("class2", 2), ("class3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclQosAssignClass.setStatus('current')
aclQosStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 12, 8, 2, 1, 99), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclQosStatus.setStatus('current')
bandwidthCtrlSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 13, 1))
bandwidthCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 13, 1, 2), )
if mibBuilder.loadTexts: bandwidthCtrlTable.setStatus('current')
bandwidthCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 13, 1, 2, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "bandwidthCtrlIndex"))
if mibBuilder.loadTexts: bandwidthCtrlEntry.setStatus('current')
bandwidthCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 13, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthCtrlIndex.setStatus('current')
bandwidthCtrlTxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 13, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 1024000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bandwidthCtrlTxThreshold.setStatus('current')
bandwidthCtrlRxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 13, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 1024000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bandwidthCtrlRxThreshold.setStatus('current')
bandwidthEffecTxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 13, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthEffecTxThreshold.setStatus('current')
bandwidthEffecRxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 13, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthEffecRxThreshold.setStatus('current')
trafficCtrlSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 13, 4))
trafficCtrlTrap = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 13, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("stormOccurred", 1), ("stormCleared", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficCtrlTrap.setStatus('current')
trafficCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 13, 4, 2), )
if mibBuilder.loadTexts: trafficCtrlTable.setStatus('current')
trafficCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 13, 4, 2, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "trafficCtrlIndex"))
if mibBuilder.loadTexts: trafficCtrlEntry.setStatus('current')
trafficCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 13, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficCtrlIndex.setStatus('current')
trafficCtrlActionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 13, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("drop", 0), ("shutdown", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficCtrlActionMode.setStatus('current')
trafficCtrlType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 13, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("b", 1), ("m", 2), ("mb", 3), ("u", 4), ("ub", 5), ("um", 6), ("umb", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficCtrlType.setStatus('current')
trafficCtrlThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 13, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 102400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficCtrlThreshold.setStatus('current')
trafficCtrlCountDown = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 13, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficCtrlCountDown.setStatus('current')
trafficCtrlTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 13, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficCtrlTimeInterval.setStatus('current')
trafficCtrlAutoRecoverTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 13, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficCtrlAutoRecoverTime.setStatus('current')
securityTrustedHost = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 1))
trustedHostStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trustedHostStatus.setStatus('current')
ipv4trustedHostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 1, 2), )
if mibBuilder.loadTexts: ipv4trustedHostTable.setStatus('obsolete')
ipv4trustedHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 1, 2, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "ipv4trustedHostIpAddr"), (0, "DGS-1210-28XSME-BX", "ipv4trustedHostIpMask"))
if mibBuilder.loadTexts: ipv4trustedHostEntry.setStatus('obsolete')
ipv4trustedHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 1, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4trustedHostIpAddr.setStatus('obsolete')
ipv4trustedHostIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 1, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4trustedHostIpMask.setStatus('obsolete')
ipv4trustedHostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv4trustedHostRowStatus.setStatus('obsolete')
trustedHostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 1, 3), )
if mibBuilder.loadTexts: trustedHostTable.setStatus('current')
trustedHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 1, 3, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "trustedHostIPType"), (0, "DGS-1210-28XSME-BX", "trustedHostIpAddr"), (0, "DGS-1210-28XSME-BX", "trustedHostIpMask"))
if mibBuilder.loadTexts: trustedHostEntry.setStatus('current')
trustedHostIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trustedHostIPType.setStatus('current')
trustedHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 1, 3, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trustedHostIpAddr.setStatus('current')
trustedHostIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 1, 3, 1, 3), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trustedHostIpMask.setStatus('current')
trustedHostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trustedHostRowStatus.setStatus('current')
securityARPSpoofPrevent = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 3))
aRPSpoofPreventTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 3, 1), )
if mibBuilder.loadTexts: aRPSpoofPreventTable.setStatus('current')
aRPSpoofPreventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 3, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "aRPSpoofPreventIpAddr"))
if mibBuilder.loadTexts: aRPSpoofPreventEntry.setStatus('current')
aRPSpoofPreventIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 3, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: aRPSpoofPreventIpAddr.setStatus('current')
aRPSpoofPreventMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 3, 1, 1, 2), MacAddress().clone(hexValue="000102030405")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aRPSpoofPreventMacAddress.setStatus('current')
aRPSpoofPreventPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 3, 1, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aRPSpoofPreventPortList.setStatus('current')
aRPSpoofPreventRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 3, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aRPSpoofPreventRowStatus.setStatus('current')
securitySSL = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 5))
sslSecurityHttpStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslSecurityHttpStatus.setStatus('current')
sslCiphers = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 5, 2))
sslCipherSuiteList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 5, 2, 1), Bits().clone(namedValues=NamedValues(("rsa-null-md5", 0), ("rsa-null-sha", 1), ("rsa-des-sha", 2), ("rsa-3des-sha", 3), ("dh-rsa-des-sha", 4), ("dh-rsa-3des-sha", 5), ("rsa-exp1024-des-sha", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sslCipherSuiteList.setStatus('current')
securitySSH = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 8))
sshSecurityStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshSecurityStatus.setStatus('current')
sshMaxAuthFailAttempts = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshMaxAuthFailAttempts.setStatus('current')
sshSessionKeyRekeying = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("never", 0), ("ten-min", 1), ("thirty-min", 2), ("sixty-min", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshSessionKeyRekeying.setStatus('current')
sshMaxSession = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshMaxSession.setStatus('current')
sshConnectionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 8, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(120, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshConnectionTimeout.setStatus('current')
sshAuthenMethodPassWordAdmin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshAuthenMethodPassWordAdmin.setStatus('current')
sshAuthenMethodPubKeyAdmin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshAuthenMethodPubKeyAdmin.setStatus('current')
sshAuthenMethodHostKeyAdmin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 8, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshAuthenMethodHostKeyAdmin.setStatus('current')
sshCipherSuiteList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 8, 9), Bits().clone(namedValues=NamedValues(("tripleDESCBC", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshCipherSuiteList.setStatus('current')
sshMacSuiteList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 8, 10), Bits().clone(namedValues=NamedValues(("hMAC-SHA1", 0), ("hMAC-MD5", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshMacSuiteList.setStatus('current')
sshPublKeyRSAAdmin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 8, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshPublKeyRSAAdmin.setStatus('current')
sshUserInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 8, 12), )
if mibBuilder.loadTexts: sshUserInfoTable.setStatus('current')
sshUserInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 8, 12, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "sshUserInfoID"))
if mibBuilder.loadTexts: sshUserInfoEntry.setStatus('current')
sshUserInfoID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 8, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserInfoID.setStatus('current')
sshUserInfoUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 8, 12, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserInfoUserName.setStatus('current')
sshUserInfoAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 8, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 2, 1))).clone(namedValues=NamedValues(("publickey", 4), ("password", 2), ("hostbased", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshUserInfoAuth.setStatus('current')
sshUserInfoHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 8, 12, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshUserInfoHostName.setStatus('current')
sshUserInfoHostIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 8, 12, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshUserInfoHostIp.setStatus('current')
securityPortSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 2))
portSecTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 2, 1), )
if mibBuilder.loadTexts: portSecTable.setStatus('current')
portSecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 2, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "portSecIndex"))
if mibBuilder.loadTexts: portSecEntry.setStatus('current')
portSecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecIndex.setStatus('current')
portSecState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecState.setStatus('current')
portSecMLA = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecMLA.setStatus('current')
portSecLockAddrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("deleteOnReset", 1), ("deleteOnTimeout", 2), ("permanent", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecLockAddrMode.setStatus('current')
portSecFDBPermanentTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 2, 2), )
if mibBuilder.loadTexts: portSecFDBPermanentTable.setStatus('current')
portSecFDBPermanentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 2, 2, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "portSecFDBPermPort"), (0, "DGS-1210-28XSME-BX", "portSecFDBPermIndex"))
if mibBuilder.loadTexts: portSecFDBPermanentEntry.setStatus('current')
portSecFDBPermIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecFDBPermIndex.setStatus('current')
portSecFDBPermVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecFDBPermVlanID.setStatus('current')
portSecFDBPermMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 2, 2, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecFDBPermMac.setStatus('current')
portSecFDBPermPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSecFDBPermPort.setStatus('current')
aclProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1))
ipv4aclProfileTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 1), )
if mibBuilder.loadTexts: ipv4aclProfileTable.setStatus('obsolete')
ipv4aclProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "ipv4aclProfileNo"))
if mibBuilder.loadTexts: ipv4aclProfileEntry.setStatus('obsolete')
ipv4aclProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4aclProfileNo.setStatus('obsolete')
ipv4aclProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 8, 9))).clone(namedValues=NamedValues(("l2", 1), ("l3", 2), ("impb", 3), ("arpSP-permit", 4), ("arpSP-deny", 5), ("aclQos", 8), ("userDefined", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileType.setStatus('obsolete')
ipv4aclProfileRuleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4aclProfileRuleCount.setStatus('obsolete')
ipv4aclProfileMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileMask.setStatus('obsolete')
ipv4aclProfileDstMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 1, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileDstMacAddrMask.setStatus('obsolete')
ipv4aclProfileSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 1, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileSrcMacAddrMask.setStatus('obsolete')
ipv4aclProfileIPProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 6, 17, 58, 256))).clone(namedValues=NamedValues(("none", 0), ("icmp", 1), ("igmp", 2), ("tcp", 6), ("udp", 17), ("icmpv6", 58), ("ipProtocolMask", 256)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileIPProtocol.setStatus('obsolete')
ipv4aclProfileIPProtocolMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 1, 1, 8), OctetString().clone(hexValue="FF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileIPProtocolMask.setStatus('obsolete')
ipv4aclProfileDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 1, 1, 9), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileDstIpAddrMask.setStatus('obsolete')
ipv4aclProfileSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 1, 1, 10), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileSrcIpAddrMask.setStatus('obsolete')
ipv4aclProfileDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 1, 1, 11), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileDstPortMask.setStatus('obsolete')
ipv4aclProfileSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 1, 1, 12), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileSrcPortMask.setStatus('obsolete')
ipv4aclProfileArpSenderMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 1, 1, 13), MacAddress().clone(hexValue="FFFFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4aclProfileArpSenderMacAddrMask.setStatus('obsolete')
ipv4aclProfileArpSenderIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 1, 1, 14), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4aclProfileArpSenderIpAddrMask.setStatus('obsolete')
ipv4aclProfileUdfOffsetMap = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 1, 1, 15), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclProfileUdfOffsetMap.setStatus('obsolete')
ipv4aclUdfOffsetChunk1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclUdfOffsetChunk1.setStatus('obsolete')
ipv4aclUdfOffsetMask1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 1, 1, 18), OctetString().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclUdfOffsetMask1.setStatus('obsolete')
ipv4aclUdfOffsetChunk2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclUdfOffsetChunk2.setStatus('obsolete')
ipv4aclUdfOffsetMask2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 1, 1, 21), OctetString().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclUdfOffsetMask2.setStatus('obsolete')
ipv4aclUdfOffsetChunk3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclUdfOffsetChunk3.setStatus('obsolete')
ipv4aclUdfOffsetMask3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 1, 1, 24), OctetString().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclUdfOffsetMask3.setStatus('obsolete')
ipv4aclUdfOffsetChunk4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclUdfOffsetChunk4.setStatus('obsolete')
ipv4aclUdfOffsetMask4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 1, 1, 27), OctetString().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4aclUdfOffsetMask4.setStatus('obsolete')
ipv4aclProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 1, 1, 28), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv4aclProfileStatus.setStatus('obsolete')
aclProfileTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 2), )
if mibBuilder.loadTexts: aclProfileTable.setStatus('current')
aclProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 2, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "aclProfileNo"))
if mibBuilder.loadTexts: aclProfileEntry.setStatus('current')
aclProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclProfileNo.setStatus('current')
aclProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 11, 3, 4, 5, 8, 9))).clone(namedValues=NamedValues(("l2", 1), ("l3v4", 2), ("l3v6", 11), ("impb", 3), ("arpSP-permit", 4), ("arpSP-deny", 5), ("aclQos", 8), ("userDefined", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileType.setStatus('current')
aclProfileRuleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclProfileRuleCount.setStatus('current')
aclProfileMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 2, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileMask.setStatus('current')
aclProfileDstMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 2, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileDstMacAddrMask.setStatus('current')
aclProfileSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 2, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileSrcMacAddrMask.setStatus('current')
aclProfileIPProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 6, 17, 58, 256))).clone(namedValues=NamedValues(("none", 0), ("icmp", 1), ("igmp", 2), ("tcp", 6), ("udp", 17), ("icmpv6", 58), ("ipProtocolMask", 256)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileIPProtocol.setStatus('current')
aclProfileIPProtocolMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 2, 1, 8), OctetString().clone(hexValue="FF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileIPProtocolMask.setStatus('current')
aclProfileDstIpAddrMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileDstIpAddrMaskType.setStatus('current')
aclProfileDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 2, 1, 10), Ipv6Address().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileDstIpAddrMask.setStatus('current')
aclProfileSrcIpAddrMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileSrcIpAddrMaskType.setStatus('current')
aclProfileSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 2, 1, 12), Ipv6Address().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileSrcIpAddrMask.setStatus('current')
aclProfileDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 2, 1, 13), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileDstPortMask.setStatus('current')
aclProfileSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 2, 1, 14), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileSrcPortMask.setStatus('current')
aclProfileArpSenderMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 2, 1, 15), MacAddress().clone(hexValue="FFFFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclProfileArpSenderMacAddrMask.setStatus('current')
aclProfileArpSenderIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 2, 1, 16), Ipv6Address().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclProfileArpSenderIpAddrMask.setStatus('current')
aclProfileUdfOffsetMap = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 2, 1, 17), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileUdfOffsetMap.setStatus('current')
aclUdfOffsetChunk1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclUdfOffsetChunk1.setStatus('current')
aclUdfOffsetMask1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 2, 1, 20), OctetString().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclUdfOffsetMask1.setStatus('current')
aclUdfOffsetChunk2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclUdfOffsetChunk2.setStatus('current')
aclUdfOffsetMask2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 2, 1, 23), OctetString().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclUdfOffsetMask2.setStatus('current')
aclUdfOffsetChunk3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclUdfOffsetChunk3.setStatus('current')
aclUdfOffsetMask3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 2, 1, 26), OctetString().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclUdfOffsetMask3.setStatus('current')
aclUdfOffsetChunk4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 2, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclUdfOffsetChunk4.setStatus('current')
aclUdfOffsetMask4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 2, 1, 29), OctetString().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclUdfOffsetMask4.setStatus('current')
aclProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 1, 2, 1, 30), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclProfileStatus.setStatus('current')
aclL2Rule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 2))
aclL2RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 2, 1), )
if mibBuilder.loadTexts: aclL2RuleTable.setStatus('current')
aclL2RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 2, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "aclL2ProfileID"), (0, "DGS-1210-28XSME-BX", "aclL2AccessID"))
if mibBuilder.loadTexts: aclL2RuleEntry.setStatus('current')
aclL2AccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL2AccessID.setStatus('current')
aclL2ProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL2ProfileID.setStatus('current')
aclL2RuleEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1501, 65535), )).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleEtherType.setStatus('current')
aclL2RuleDstMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 2, 1, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleDstMacAddr.setStatus('current')
aclL2RuleSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 2, 1, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleSrcMacAddr.setStatus('current')
aclL2RuleVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleVlanId.setStatus('current')
aclL2Rule1pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2Rule1pPriority.setStatus('current')
aclL2RuleDstMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 2, 1, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL2RuleDstMacAddrMask.setStatus('current')
aclL2RuleSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 2, 1, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL2RuleSrcMacAddrMask.setStatus('current')
aclL2RuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2), ("mirror", 3), ("rateLimit", 4), ("replaceDSCP", 5), ("replace1P", 6), ("replaceQueue", 7))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleAction.setStatus('current')
aclL2RuleRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 2, 1, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleRateLimit.setStatus('current')
aclL2RuleReplaceDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleReplaceDSCP.setStatus('current')
aclL2RuleReplace1P = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleReplace1P.setStatus('current')
aclL2RuleReplaceQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 2, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleReplaceQueue.setStatus('current')
aclL2RuleFilterTimeRange = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 2, 1, 1, 16), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL2RuleFilterTimeRange.setStatus('current')
aclL2RuleVlanIdMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 2, 1, 1, 17), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleVlanIdMask.setStatus('current')
aclL2RuleInPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 2, 1, 1, 51), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleInPortList.setStatus('current')
aclL2RuleInVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 2, 1, 1, 52), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL2RuleInVlanList.setStatus('current')
aclL2RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 2, 1, 1, 99), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL2RuleStatus.setStatus('current')
aclL3Rule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3))
aclL3RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 1), )
if mibBuilder.loadTexts: aclL3RuleTable.setStatus('current')
aclL3RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "aclL3RuleProfileNo"), (0, "DGS-1210-28XSME-BX", "aclL3RuleAccessID"))
if mibBuilder.loadTexts: aclL3RuleEntry.setStatus('current')
aclL3RuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleAccessID.setStatus('current')
aclL3RuleProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleProfileNo.setStatus('current')
aclL3RuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 17))).clone(namedValues=NamedValues(("icmp", 1), ("igmp", 2), ("tcp", 6), ("udp", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleProtocol.setStatus('current')
aclL3RuleProtocolMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 1, 1, 4), OctetString().clone(hexValue="FF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleProtocolMask.setStatus('current')
aclL3RuleICMPMessageType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleICMPMessageType.setStatus('current')
aclL3RuleICMPMessageCode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleICMPMessageCode.setStatus('current')
aclL3RuleDstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 1, 1, 7), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleDstIpAddr.setStatus('current')
aclL3RuleSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 1, 1, 8), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleSrcIpAddr.setStatus('current')
aclL3RuleDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 1, 1, 9), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleDstIpAddrMask.setStatus('current')
aclL3RuleSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 1, 1, 10), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleSrcIpAddrMask.setStatus('current')
aclL3RuleTcpUdpDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleTcpUdpDstPort.setStatus('current')
aclL3RuleTcpUdpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleTcpUdpSrcPort.setStatus('current')
aclL3RuleTcpUdpDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleTcpUdpDstPortMask.setStatus('current')
aclL3RuleTcpUdpSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclL3RuleTcpUdpSrcPortMask.setStatus('current')
aclL3RuleTcpAckBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont-care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont-care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpAckBit.setStatus('current')
aclL3RuleTcpRstBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont-care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont-care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpRstBit.setStatus('current')
aclL3RuleTcpUrgBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont-care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont-care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpUrgBit.setStatus('current')
aclL3RuleTcpPshBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont-care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont-care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpPshBit.setStatus('current')
aclL3RuleTcpSynBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont-care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont-care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpSynBit.setStatus('current')
aclL3RuleTcpFinBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont-care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont-care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTcpFinBit.setStatus('current')
aclL3RuleDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleDscp.setStatus('current')
aclL3RuleTos = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleTos.setStatus('current')
aclL3RuleIgmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleIgmpType.setStatus('current')
aclL3RuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2), ("mirror", 3), ("rateLimit", 4), ("replaceDSCP", 5), ("replace1P", 6), ("replaceQueue", 7))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleAction.setStatus('current')
aclL3RuleRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 1, 1, 26), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleRateLimit.setStatus('current')
aclL3RuleReplaceDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleReplaceDSCP.setStatus('current')
aclL3RuleReplace1P = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleReplace1P.setStatus('current')
aclL3RuleReplaceQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 1, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleReplaceQueue.setStatus('current')
aclL3RuleFilterTimeRange = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 1, 1, 30), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleFilterTimeRange.setStatus('current')
aclL3RulePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 1, 1, 51), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RulePortList.setStatus('current')
aclL3RuleVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 1, 1, 52), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclL3RuleVlanList.setStatus('current')
aclL3RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 1, 1, 99), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclL3RuleStatus.setStatus('current')
aclv6L3RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 2), )
if mibBuilder.loadTexts: aclv6L3RuleTable.setStatus('current')
aclv6L3RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 2, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "aclv6L3RuleProfileNo"), (0, "DGS-1210-28XSME-BX", "aclv6L3RuleAccessID"))
if mibBuilder.loadTexts: aclv6L3RuleEntry.setStatus('current')
aclv6L3RuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclv6L3RuleAccessID.setStatus('current')
aclv6L3RuleProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclv6L3RuleProfileNo.setStatus('current')
aclv6L3RuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 17, 58))).clone(namedValues=NamedValues(("tcp", 6), ("udp", 17), ("icmpv6", 58)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleProtocol.setStatus('current')
aclv6L3RuleProtocolMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 2, 1, 4), OctetString().clone(hexValue="FF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclv6L3RuleProtocolMask.setStatus('current')
aclv6L3RuleICMPMessageType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleICMPMessageType.setStatus('current')
aclv6L3RuleICMPMessageCode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleICMPMessageCode.setStatus('current')
aclv6L3RuleDstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 2, 1, 7), Ipv6Address().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleDstIpAddr.setStatus('current')
aclv6L3RuleSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 2, 1, 8), Ipv6Address().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleSrcIpAddr.setStatus('current')
aclv6L3RuleDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 2, 1, 9), Ipv6Address().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclv6L3RuleDstIpAddrMask.setStatus('current')
aclv6L3RuleSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 2, 1, 10), Ipv6Address().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclv6L3RuleSrcIpAddrMask.setStatus('current')
aclv6L3RuleTcpUdpDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleTcpUdpDstPort.setStatus('current')
aclv6L3RuleTcpUdpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleTcpUdpSrcPort.setStatus('current')
aclv6L3RuleTcpUdpDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 2, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclv6L3RuleTcpUdpDstPortMask.setStatus('current')
aclv6L3RuleTcpUdpSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 2, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclv6L3RuleTcpUdpSrcPortMask.setStatus('current')
aclv6L3RuleTcpAckBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont-care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont-care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclv6L3RuleTcpAckBit.setStatus('current')
aclv6L3RuleTcpRstBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont-care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont-care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclv6L3RuleTcpRstBit.setStatus('current')
aclv6L3RuleTcpUrgBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont-care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont-care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclv6L3RuleTcpUrgBit.setStatus('current')
aclv6L3RuleTcpPshBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont-care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont-care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclv6L3RuleTcpPshBit.setStatus('current')
aclv6L3RuleTcpSynBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont-care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont-care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclv6L3RuleTcpSynBit.setStatus('current')
aclv6L3RuleTcpFinBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dont-care", -1), ("establish", 1), ("notEstablish", 2))).clone('dont-care')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclv6L3RuleTcpFinBit.setStatus('current')
aclv6L3RuleTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclv6L3RuleTrafficClass.setStatus('current')
aclv6L3RuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2), ("mirror", 3), ("rateLimit", 4), ("replaceDSCP", 5), ("replace1P", 6), ("replaceQueue", 7))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleAction.setStatus('current')
aclv6L3RuleRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 2, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleRateLimit.setStatus('current')
aclv6L3RuleReplaceDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleReplaceDSCP.setStatus('current')
aclv6L3RuleReplace1P = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleReplace1P.setStatus('current')
aclv6L3RuleReplaceQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 2, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleReplaceQueue.setStatus('current')
aclv6L3RuleFilterTimeRange = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 2, 1, 29), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclv6L3RuleFilterTimeRange.setStatus('current')
aclv6L3RulePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 2, 1, 51), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RulePortList.setStatus('current')
aclv6L3RuleVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 2, 1, 52), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclv6L3RuleVlanList.setStatus('current')
aclv6L3RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 3, 2, 1, 99), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclv6L3RuleStatus.setStatus('current')
aclPacketRule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 4))
aclPacketRuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 4, 1), )
if mibBuilder.loadTexts: aclPacketRuleTable.setStatus('current')
aclPacketRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 4, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "aclPacketProfileID"), (0, "DGS-1210-28XSME-BX", "aclPacketAccessID"))
if mibBuilder.loadTexts: aclPacketRuleEntry.setStatus('current')
aclPacketAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclPacketAccessID.setStatus('current')
aclPacketProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclPacketProfileID.setStatus('current')
aclPacketRuleOffsetValue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 4, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPacketRuleOffsetValue1.setStatus('current')
aclPacketRuleOffsetValue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 4, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPacketRuleOffsetValue2.setStatus('current')
aclPacketRuleOffsetValue3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 4, 1, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPacketRuleOffsetValue3.setStatus('current')
aclPacketRuleOffsetValue4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 4, 1, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPacketRuleOffsetValue4.setStatus('current')
aclPacketRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2), ("mirror", 3), ("rateLimit", 4), ("replaceDSCP", 5), ("replace1P", 6), ("replaceQueue", 7))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPacketRuleAction.setStatus('current')
aclPacketRuleRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 4, 1, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPacketRuleRateLimit.setStatus('current')
aclPacketRuleReplaceDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPacketRuleReplaceDSCP.setStatus('current')
aclPacketRuleReplace1P = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPacketRuleReplace1P.setStatus('current')
aclPacketRuleReplaceQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 4, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPacketRuleReplaceQueue.setStatus('current')
aclPacketRuleFilterTimeRange = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 4, 1, 1, 13), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclPacketRuleFilterTimeRange.setStatus('current')
aclPacketRuleOffsetValue1Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 4, 1, 1, 14), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPacketRuleOffsetValue1Mask.setStatus('current')
aclPacketRuleOffsetValue2Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 4, 1, 1, 15), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPacketRuleOffsetValue2Mask.setStatus('current')
aclPacketRuleOffsetValue3Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 4, 1, 1, 16), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPacketRuleOffsetValue3Mask.setStatus('current')
aclPacketRuleOffsetValue4Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 4, 1, 1, 17), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPacketRuleOffsetValue4Mask.setStatus('current')
aclPacketRuleInPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 4, 1, 1, 51), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPacketRuleInPortList.setStatus('current')
aclPacketRuleInVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 4, 1, 1, 52), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclPacketRuleInVlanList.setStatus('current')
aclPacketRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 4, 1, 1, 99), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclPacketRuleStatus.setStatus('current')
aclFlowMeterRule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 10))
aclFlowMeterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 10, 1), )
if mibBuilder.loadTexts: aclFlowMeterTable.setStatus('current')
aclFlowMeterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 10, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "aclFlowMeterProfileID"), (0, "DGS-1210-28XSME-BX", "aclFlowMeterAccessID"))
if mibBuilder.loadTexts: aclFlowMeterEntry.setStatus('current')
aclFlowMeterProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclFlowMeterProfileID.setStatus('current')
aclFlowMeterAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclFlowMeterAccessID.setStatus('current')
aclFlowMeterRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1024000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclFlowMeterRate.setStatus('current')
aclFlowMeterBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1016))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclFlowMeterBurstSize.setStatus('current')
aclFlowMeterReplaceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclFlowMeterReplaceDscp.setStatus('current')
aclFlowMeterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5))).clone(namedValues=NamedValues(("drop", 2), ("replaceDSCP", 5))).clone('drop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclFlowMeterAction.setStatus('current')
aclFlowMeterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 15, 10, 1, 1, 99), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclFlowMeterStatus.setStatus('current')
cpuFilterProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 1))
ipv4cpuFilterProfileTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 1, 1), )
if mibBuilder.loadTexts: ipv4cpuFilterProfileTable.setStatus('current')
ipv4cpuFilterProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 1, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "ipv4cpuFilterProfileNo"))
if mibBuilder.loadTexts: ipv4cpuFilterProfileEntry.setStatus('current')
ipv4cpuFilterProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4cpuFilterProfileNo.setStatus('current')
ipv4cpuFilterProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 11))).clone(namedValues=NamedValues(("l2", 1), ("l3", 2), ("l3v6", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4cpuFilterProfileType.setStatus('current')
ipv4cpuFilterProfileRuleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4cpuFilterProfileRuleCount.setStatus('current')
ipv4cpuFilterProfileMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 1, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4cpuFilterProfileMask.setStatus('current')
ipv4cpuFilterProfileDstMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 1, 1, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4cpuFilterProfileDstMacAddrMask.setStatus('current')
ipv4cpuFilterProfileSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 1, 1, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4cpuFilterProfileSrcMacAddrMask.setStatus('current')
ipv4cpuFilterProfileIPProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 6, 17, 255))).clone(namedValues=NamedValues(("none", 0), ("icmp", 1), ("igmp", 2), ("tcp", 6), ("udp", 17), ("ipMask", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4cpuFilterProfileIPProtocol.setStatus('current')
ipv4cpuFilterProfileIPProtocolMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 1, 1, 1, 8), OctetString().clone(hexValue="FF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4cpuFilterProfileIPProtocolMask.setStatus('current')
ipv4cpuFilterProfileDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 1, 1, 1, 9), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4cpuFilterProfileDstIpAddrMask.setStatus('current')
ipv4cpuFilterProfileSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 1, 1, 1, 10), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4cpuFilterProfileSrcIpAddrMask.setStatus('current')
ipv4cpuFilterProfileDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 1, 1, 1, 11), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4cpuFilterProfileDstPortMask.setStatus('current')
ipv4cpuFilterProfileSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 1, 1, 1, 12), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4cpuFilterProfileSrcPortMask.setStatus('current')
ipv4cpuFilterProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 1, 1, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv4cpuFilterProfileStatus.setStatus('current')
cpuFilterProfileTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 1, 2), )
if mibBuilder.loadTexts: cpuFilterProfileTable.setStatus('current')
cpuFilterProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 1, 2, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "cpuFilterProfileNo"))
if mibBuilder.loadTexts: cpuFilterProfileEntry.setStatus('current')
cpuFilterProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterProfileNo.setStatus('current')
cpuFilterProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 11))).clone(namedValues=NamedValues(("l2", 1), ("l3", 2), ("l3v6", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileType.setStatus('current')
cpuFilterProfileRuleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterProfileRuleCount.setStatus('current')
cpuFilterProfileMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 1, 2, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileMask.setStatus('current')
cpuFilterProfileDstMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 1, 2, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileDstMacAddrMask.setStatus('current')
cpuFilterProfileSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 1, 2, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileSrcMacAddrMask.setStatus('current')
cpuFilterProfileIPProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 6, 17, 255))).clone(namedValues=NamedValues(("none", 0), ("icmp", 1), ("igmp", 2), ("tcp", 6), ("udp", 17), ("ipMask", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileIPProtocol.setStatus('current')
cpuFilterProfileIPProtocolMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 1, 2, 1, 8), OctetString().clone(hexValue="FF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileIPProtocolMask.setStatus('current')
cpuFilterProfileDstIpAddrMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileDstIpAddrMaskType.setStatus('current')
cpuFilterProfileDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 1, 2, 1, 10), Ipv6Address().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileDstIpAddrMask.setStatus('current')
cpuFilterProfileSrcIpAddrMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileSrcIpAddrMaskType.setStatus('current')
cpuFilterProfileSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 1, 2, 1, 12), Ipv6Address().clone(hexValue="FFFFFFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileSrcIpAddrMask.setStatus('current')
cpuFilterProfileDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 1, 2, 1, 13), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileDstPortMask.setStatus('current')
cpuFilterProfileSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 1, 2, 1, 14), OctetString().clone(hexValue="FFFF")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterProfileSrcPortMask.setStatus('current')
cpuFilterProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 1, 2, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterProfileStatus.setStatus('current')
cpuFilterL2Rule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 2))
cpuFilterL2RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 2, 1), )
if mibBuilder.loadTexts: cpuFilterL2RuleTable.setStatus('current')
cpuFilterL2RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 2, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "cpuFilterL2ProfileID"), (0, "DGS-1210-28XSME-BX", "cpuFilterL2AccessID"))
if mibBuilder.loadTexts: cpuFilterL2RuleEntry.setStatus('current')
cpuFilterL2ProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterL2ProfileID.setStatus('current')
cpuFilterL2AccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterL2AccessID.setStatus('current')
cpuFilterL2RuleEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1501, 65535), )).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL2RuleEtherType.setStatus('current')
cpuFilterL2RuleDstMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 2, 1, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL2RuleDstMacAddr.setStatus('current')
cpuFilterL2RuleSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 2, 1, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL2RuleSrcMacAddr.setStatus('current')
cpuFilterL2RuleVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4094)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL2RuleVlanId.setStatus('current')
cpuFilterL2Rule1pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL2Rule1pPriority.setStatus('current')
cpuFilterL2RuleDstMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 2, 1, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterL2RuleDstMacAddrMask.setStatus('current')
cpuFilterL2RuleSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 2, 1, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterL2RuleSrcMacAddrMask.setStatus('current')
cpuFilterL2RuleInPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 2, 1, 1, 10), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL2RuleInPortList.setStatus('current')
cpuFilterL2RuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL2RuleAction.setStatus('current')
cpuFilterL2RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 2, 1, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterL2RuleStatus.setStatus('current')
cpuFilterL3Rule = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3))
cpuFilterL3RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 1), )
if mibBuilder.loadTexts: cpuFilterL3RuleTable.setStatus('current')
cpuFilterL3RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "cpuFilterL3RuleProfileNo"), (0, "DGS-1210-28XSME-BX", "cpuFilterL3RuleAccessID"))
if mibBuilder.loadTexts: cpuFilterL3RuleEntry.setStatus('current')
cpuFilterL3RuleProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterL3RuleProfileNo.setStatus('current')
cpuFilterL3RuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterL3RuleAccessID.setStatus('current')
cpuFilterL3RuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 17))).clone(namedValues=NamedValues(("icmp", 1), ("igmp", 2), ("tcp", 6), ("udp", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL3RuleProtocol.setStatus('current')
cpuFilterL3RuleProtocolMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 1, 1, 4), OctetString().clone(hexValue="FF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterL3RuleProtocolMask.setStatus('current')
cpuFilterL3RuleICMPMessageType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL3RuleICMPMessageType.setStatus('current')
cpuFilterL3RuleICMPMessageCode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL3RuleICMPMessageCode.setStatus('current')
cpuFilterL3RuleDstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 1, 1, 7), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL3RuleDstIpAddr.setStatus('current')
cpuFilterL3RuleSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 1, 1, 8), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL3RuleSrcIpAddr.setStatus('current')
cpuFilterL3RuleDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 1, 1, 9), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterL3RuleDstIpAddrMask.setStatus('current')
cpuFilterL3RuleSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 1, 1, 10), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterL3RuleSrcIpAddrMask.setStatus('current')
cpuFilterL3RuleTcpUdpDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL3RuleTcpUdpDstPort.setStatus('current')
cpuFilterL3RuleTcpUdpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL3RuleTcpUdpSrcPort.setStatus('current')
cpuFilterL3RuleTcpUdpDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterL3RuleTcpUdpDstPortMask.setStatus('current')
cpuFilterL3RuleTcpUdpSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterL3RuleTcpUdpSrcPortMask.setStatus('current')
cpuFilterL3RuleTcpAckBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dontcare", -1), ("establish", 1), ("notEstablish", 2))).clone('dontcare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterL3RuleTcpAckBit.setStatus('current')
cpuFilterL3RuleTcpRstBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dontcare", -1), ("establish", 1), ("notEstablish", 2))).clone('dontcare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterL3RuleTcpRstBit.setStatus('current')
cpuFilterL3RuleTcpUrgBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dontcare", -1), ("establish", 1), ("notEstablish", 2))).clone('dontcare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterL3RuleTcpUrgBit.setStatus('current')
cpuFilterL3RuleTcpPshBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dontcare", -1), ("establish", 1), ("notEstablish", 2))).clone('dontcare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterL3RuleTcpPshBit.setStatus('current')
cpuFilterL3RuleTcpSynBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dontcare", -1), ("establish", 1), ("notEstablish", 2))).clone('dontcare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterL3RuleTcpSynBit.setStatus('current')
cpuFilterL3RuleTcpFinBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dontcare", -1), ("establish", 1), ("notEstablish", 2))).clone('dontcare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterL3RuleTcpFinBit.setStatus('current')
cpuFilterL3RuleDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterL3RuleDscp.setStatus('current')
cpuFilterL3RuleIgmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL3RuleIgmpType.setStatus('current')
cpuFilterL3RulePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 1, 1, 23), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL3RulePortList.setStatus('current')
cpuFilterL3RuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterL3RuleAction.setStatus('current')
cpuFilterL3RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 1, 1, 27), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterL3RuleStatus.setStatus('current')
cpuFilterv6L3RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 2), )
if mibBuilder.loadTexts: cpuFilterv6L3RuleTable.setStatus('current')
cpuFilterv6L3RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 2, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "cpuFilterv6L3RuleProfileNo"), (0, "DGS-1210-28XSME-BX", "cpuFilterv6L3RuleAccessID"))
if mibBuilder.loadTexts: cpuFilterv6L3RuleEntry.setStatus('current')
cpuFilterv6L3RuleProfileNo = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterv6L3RuleProfileNo.setStatus('current')
cpuFilterv6L3RuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterv6L3RuleAccessID.setStatus('current')
cpuFilterv6L3RuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6, 17))).clone(namedValues=NamedValues(("icmp", 1), ("tcp", 6), ("udp", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterv6L3RuleProtocol.setStatus('current')
cpuFilterv6L3RuleProtocolMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 2, 1, 4), OctetString().clone(hexValue="FF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterv6L3RuleProtocolMask.setStatus('current')
cpuFilterv6L3RuleICMPMessageType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterv6L3RuleICMPMessageType.setStatus('current')
cpuFilterv6L3RuleICMPMessageCode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterv6L3RuleICMPMessageCode.setStatus('current')
cpuFilterv6L3RuleDstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 2, 1, 7), Ipv6Address().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterv6L3RuleDstIpAddr.setStatus('current')
cpuFilterv6L3RuleSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 2, 1, 8), Ipv6Address().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterv6L3RuleSrcIpAddr.setStatus('current')
cpuFilterv6L3RuleDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 2, 1, 9), Ipv6Address().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterv6L3RuleDstIpAddrMask.setStatus('current')
cpuFilterv6L3RuleSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 2, 1, 10), Ipv6Address().clone(hexValue="FFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterv6L3RuleSrcIpAddrMask.setStatus('current')
cpuFilterv6L3RuleTcpUdpDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterv6L3RuleTcpUdpDstPort.setStatus('current')
cpuFilterv6L3RuleTcpUdpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterv6L3RuleTcpUdpSrcPort.setStatus('current')
cpuFilterv6L3RuleTcpUdpDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 2, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterv6L3RuleTcpUdpDstPortMask.setStatus('current')
cpuFilterv6L3RuleTcpUdpSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 2, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuFilterv6L3RuleTcpUdpSrcPortMask.setStatus('current')
cpuFilterv6L3RuleTcpAckBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dontcare", -1), ("establish", 1), ("notEstablish", 2))).clone('dontcare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterv6L3RuleTcpAckBit.setStatus('current')
cpuFilterv6L3RuleTcpRstBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dontcare", -1), ("establish", 1), ("notEstablish", 2))).clone('dontcare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterv6L3RuleTcpRstBit.setStatus('current')
cpuFilterv6L3RuleTcpUrgBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dontcare", -1), ("establish", 1), ("notEstablish", 2))).clone('dontcare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterv6L3RuleTcpUrgBit.setStatus('current')
cpuFilterv6L3RuleTcpPshBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dontcare", -1), ("establish", 1), ("notEstablish", 2))).clone('dontcare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterv6L3RuleTcpPshBit.setStatus('current')
cpuFilterv6L3RuleTcpSynBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dontcare", -1), ("establish", 1), ("notEstablish", 2))).clone('dontcare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterv6L3RuleTcpSynBit.setStatus('current')
cpuFilterv6L3RuleTcpFinBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("dontcare", -1), ("establish", 1), ("notEstablish", 2))).clone('dontcare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterv6L3RuleTcpFinBit.setStatus('current')
cpuFilterv6L3RuleTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterv6L3RuleTrafficClass.setStatus('current')
cpuFilterv6L3RulePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 2, 1, 22), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterv6L3RulePortList.setStatus('current')
cpuFilterv6L3RuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("drop", 2))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterv6L3RuleAction.setStatus('current')
cpuFilterv6L3RuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 3, 2, 1, 24), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpuFilterv6L3RuleStatus.setStatus('current')
cpuFilterState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 33, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuFilterState.setStatus('current')
snmpGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpGlobalState.setStatus('current')
snmpV3User = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 2))
snmpV3Group = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 3))
snmpV3ViewTree = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 4))
snmpV3Community = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 5))
snmpV3Host = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 6))
snmpV3EngineID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 7), SnmpEngineID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3EngineID.setStatus('current')
snmpV3Trap = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 8))
snmpV3UserTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 2, 1), )
if mibBuilder.loadTexts: snmpV3UserTable.setStatus('current')
snmpV3UserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 2, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "snmpV3UserName"), (0, "DGS-1210-28XSME-BX", "snmpV3UserVersion"))
if mibBuilder.loadTexts: snmpV3UserEntry.setStatus('current')
snmpV3UserName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 2, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3UserName.setStatus('current')
snmpV3UserVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3UserVersion.setStatus('current')
snmpV3UserGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 2, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserGroupName.setStatus('current')
snmpV3UserAuthProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("md5", 2), ("sha", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserAuthProtocol.setStatus('current')
snmpV3UserAuthProtocolPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 2, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserAuthProtocolPassword.setStatus('current')
snmpV3UserPrivProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("des", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserPrivProtocol.setStatus('current')
snmpV3UserPrivProtocolPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 2, 1, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserPrivProtocolPassword.setStatus('current')
snmpV3UserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 2, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3UserStatus.setStatus('current')
snmpV3GroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 3, 1), )
if mibBuilder.loadTexts: snmpV3GroupTable.setStatus('current')
snmpV3GroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 3, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "snmpV3GroupName"), (0, "DGS-1210-28XSME-BX", "snmpV3GroupSecurityModel"), (0, "DGS-1210-28XSME-BX", "snmpV3GroupSecurityLevel"))
if mibBuilder.loadTexts: snmpV3GroupEntry.setStatus('current')
snmpV3GroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 3, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3GroupName.setStatus('current')
snmpV3GroupSecurityModel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3GroupSecurityModel.setStatus('current')
snmpV3GroupSecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 3, 1, 1, 3), SnmpSecurityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3GroupSecurityLevel.setStatus('current')
snmpV3GroupReadViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 3, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3GroupReadViewName.setStatus('current')
snmpV3GroupWriteViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 3, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3GroupWriteViewName.setStatus('current')
snmpV3GroupNotifyViewName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 3, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3GroupNotifyViewName.setStatus('current')
snmpV3GroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 3, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3GroupStatus.setStatus('current')
snmpV3ViewTreeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 4, 1), )
if mibBuilder.loadTexts: snmpV3ViewTreeTable.setStatus('current')
snmpV3ViewTreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 4, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "snmpV3viewTreeName"), (0, "DGS-1210-28XSME-BX", "snmpV3viewTreeSubtree"))
if mibBuilder.loadTexts: snmpV3ViewTreeEntry.setStatus('current')
snmpV3viewTreeName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 4, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3viewTreeName.setStatus('current')
snmpV3viewTreeSubtree = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 4, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3viewTreeSubtree.setStatus('current')
snmpV3viewTreeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3viewTreeMask.setStatus('current')
snmpV3viewTreeType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("included", 1), ("excluded", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3viewTreeType.setStatus('current')
snmpV3viewTreeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 4, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3viewTreeStatus.setStatus('current')
snmpV3CommunityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 5, 1), )
if mibBuilder.loadTexts: snmpV3CommunityTable.setStatus('current')
snmpV3CommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 5, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "snmpV3CommunityName"))
if mibBuilder.loadTexts: snmpV3CommunityEntry.setStatus('current')
snmpV3CommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 5, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3CommunityName.setStatus('current')
snmpV3CommunityPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 5, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3CommunityPolicy.setStatus('current')
snmpV3CommunityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 5, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3CommunityStatus.setStatus('current')
ipv4snmpV3HostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 6, 1), )
if mibBuilder.loadTexts: ipv4snmpV3HostTable.setStatus('obsolete')
ipv4snmpV3HostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 6, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "ipv4snmpV3HostAddress"))
if mibBuilder.loadTexts: ipv4snmpV3HostEntry.setStatus('obsolete')
ipv4snmpV3HostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 6, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4snmpV3HostAddress.setStatus('obsolete')
ipv4snmpV3HostCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 6, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv4snmpV3HostCommunityName.setStatus('obsolete')
ipv4snmpV3HostVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3NoAuthNoPriv", 3), ("v3AuthNoPriv", 4), ("v3AuthPriv", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv4snmpV3HostVersion.setStatus('obsolete')
ipv4snmpV3HostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 6, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv4snmpV3HostStatus.setStatus('obsolete')
snmpV3HostTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 6, 2), )
if mibBuilder.loadTexts: snmpV3HostTable.setStatus('current')
snmpV3HostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 6, 2, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "snmpV3HostAddress"), (0, "DGS-1210-28XSME-BX", "snmpV3IPType"))
if mibBuilder.loadTexts: snmpV3HostEntry.setStatus('current')
snmpV3HostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 6, 2, 1, 1), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3HostAddress.setStatus('current')
snmpV3IPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpV3IPType.setStatus('current')
snmpV3HostCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 6, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3HostCommunityName.setStatus('current')
snmpV3HostVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v1", 1), ("v2c", 2), ("v3NoAuthNoPriv", 3), ("v3AuthNoPriv", 4), ("v3AuthPriv", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3HostVersion.setStatus('current')
snmpV3HostInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 6, 2, 1, 5), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3HostInterfaceName.setStatus('current')
snmpV3HostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 6, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpV3HostStatus.setStatus('current')
snmpV3TrapSNMPAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapSNMPAuthentication.setStatus('current')
snmpV3TrapColdStart = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapColdStart.setStatus('current')
snmpV3TrapWarmStart = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapWarmStart.setStatus('current')
snmpV3TrapLinkUpDown = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapLinkUpDown.setStatus('current')
snmpV3TrapRSTPStateChange = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapRSTPStateChange.setStatus('current')
snmpV3TrapFirmUpgrade = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapFirmUpgrade.setStatus('current')
snmpV3TrapBPDUAttack = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 8, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("attackDetected", 2), ("attackCleared", 3), ("both", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapBPDUAttack.setStatus('current')
snmpV3TrapPortSecurity = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 8, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapPortSecurity.setStatus('current')
snmpV3TrapIMPBViolation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 8, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapIMPBViolation.setStatus('current')
snmpV3TrapLBD = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 8, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapLBD.setStatus('current')
snmpV3TrapDHCPServerScreening = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 8, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapDHCPServerScreening.setStatus('current')
snmpV3TrapDuplicateIPDetected = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 8, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3TrapDuplicateIPDetected.setStatus('current')
snmpV3CommunityEncryption = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpV3CommunityEncryption.setStatus('current')
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 120, 0))
snmpTrapSNMPAuthentication = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 120, 0, 1))
if mibBuilder.loadTexts: snmpTrapSNMPAuthentication.setStatus('current')
snmpTrapColdStart = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 120, 0, 2))
if mibBuilder.loadTexts: snmpTrapColdStart.setStatus('current')
snmpTrapWarmStart = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 120, 0, 3))
if mibBuilder.loadTexts: snmpTrapWarmStart.setStatus('current')
snmpTrapCopperLinkUpDown = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 120, 0, 4))
if mibBuilder.loadTexts: snmpTrapCopperLinkUpDown.setStatus('current')
snmpTrapRSTPStateChange = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 120, 0, 5))
if mibBuilder.loadTexts: snmpTrapRSTPStateChange.setStatus('current')
snmpTrapFirmUpgrade = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 120, 0, 6))
if mibBuilder.loadTexts: snmpTrapFirmUpgrade.setStatus('current')
snmpTrapBPDUAttack = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 120, 0, 11))
if mibBuilder.loadTexts: snmpTrapBPDUAttack.setStatus('current')
snmpTrapPortSecurity = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 120, 0, 12))
if mibBuilder.loadTexts: snmpTrapPortSecurity.setStatus('current')
snmpTrapIMPBv2 = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 120, 0, 13))
if mibBuilder.loadTexts: snmpTrapIMPBv2.setStatus('current')
snmpTrapLBD = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 120, 0, 14))
if mibBuilder.loadTexts: snmpTrapLBD.setStatus('current')
snmpTrapDHCPScreen = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 120, 0, 15))
if mibBuilder.loadTexts: snmpTrapDHCPScreen.setStatus('current')
snmpTrapGratuitousArp = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 120, 0, 16))
if mibBuilder.loadTexts: snmpTrapGratuitousArp.setStatus('current')
macNotificatiotn = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 120, 0, 17))
if mibBuilder.loadTexts: macNotificatiotn.setStatus('current')
duplicateIP = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 120, 0, 21))
if mibBuilder.loadTexts: duplicateIP.setStatus('current')
trafficControl = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 120, 0, 22))
if mibBuilder.loadTexts: trafficControl.setStatus('current')
topologyChange = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 120, 0, 23))
if mibBuilder.loadTexts: topologyChange.setStatus('current')
newRootBrgaddress = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 120, 0, 24))
if mibBuilder.loadTexts: newRootBrgaddress.setStatus('current')
newRootOlddesignatedroot = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 120, 0, 25))
if mibBuilder.loadTexts: newRootOlddesignatedroot.setStatus('current')
newRootMSTibridgeregionalroot = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 120, 0, 26))
if mibBuilder.loadTexts: newRootMSTibridgeregionalroot.setStatus('current')
syslogSettingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 16, 1))
syslogEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogEnable.setStatus('current')
syslogSaveMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("onDemand", 0), ("timeInterval", 1), ("logTrigger", 2))).clone('logTrigger')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogSaveMode.setStatus('current')
syslogSaveMinutes = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 16, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogSaveMinutes.setStatus('current')
ipv4syslogServerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 16, 2))
ipv4syslogServTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 16, 2, 1), )
if mibBuilder.loadTexts: ipv4syslogServTable.setStatus('current')
ipv4syslogServEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 16, 2, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "ipv4syslogServIndex"))
if mibBuilder.loadTexts: ipv4syslogServEntry.setStatus('current')
ipv4syslogServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 16, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4syslogServIndex.setStatus('current')
ipv4syslogServAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 16, 2, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv4syslogServAddr.setStatus('current')
ipv4syslogServSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 16, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 6, 7))).clone(namedValues=NamedValues(("warning", 4), ("information", 6), ("all", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv4syslogServSeverity.setStatus('current')
ipv4syslogServFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 16, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(128, 136, 144, 152, 160, 168, 176, 184))).clone(namedValues=NamedValues(("local0", 128), ("local1", 136), ("local2", 144), ("local3", 152), ("local4", 160), ("local5", 168), ("local6", 176), ("local7", 184))).clone('local0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv4syslogServFacility.setStatus('current')
ipv4syslogServUDPport = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 16, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(514, 514), ValueRangeConstraint(6000, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv4syslogServUDPport.setStatus('current')
ipv4syslogServSrvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 16, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv4syslogServSrvStatus.setStatus('current')
ipv4syslogServSrvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 16, 2, 1, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4syslogServSrvRowStatus.setStatus('current')
syslogServerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 16, 3))
syslogServTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 16, 3, 1), )
if mibBuilder.loadTexts: syslogServTable.setStatus('current')
syslogServEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 16, 3, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "syslogServIndex"))
if mibBuilder.loadTexts: syslogServEntry.setStatus('current')
syslogServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 16, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogServIndex.setStatus('current')
syslogServAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 16, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogServAddrType.setStatus('current')
syslogServAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 16, 3, 1, 1, 3), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogServAddr.setStatus('current')
syslogServInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 16, 3, 1, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogServInterfaceName.setStatus('current')
syslogServSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 16, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 6, 7))).clone(namedValues=NamedValues(("warning", 4), ("information", 6), ("all", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogServSeverity.setStatus('current')
syslogServFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 16, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(128, 136, 144, 152, 160, 168, 176, 184))).clone(namedValues=NamedValues(("local0", 128), ("local1", 136), ("local2", 144), ("local3", 152), ("local4", 160), ("local5", 168), ("local6", 176), ("local7", 184))).clone('local0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogServFacility.setStatus('current')
syslogServUDPport = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 16, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(514, 514), ValueRangeConstraint(6000, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogServUDPport.setStatus('current')
syslogServSrvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 16, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServSrvStatus.setStatus('current')
syslogServSrvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 16, 3, 1, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServSrvRowStatus.setStatus('current')
sysLBDStateEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDStateEnable.setStatus('current')
sysLBDMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 17, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port", 1), ("vlan", 2))).clone('port')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDMode.setStatus('current')
sysLBDInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 17, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDInterval.setStatus('current')
sysLBDRecoverTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 17, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 1000000), )).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDRecoverTime.setStatus('current')
sysLBDCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 17, 5), )
if mibBuilder.loadTexts: sysLBDCtrlTable.setStatus('current')
sysLBDCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 17, 5, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "sysLBDCtrlIndex"))
if mibBuilder.loadTexts: sysLBDCtrlEntry.setStatus('current')
sysLBDCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 17, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLBDCtrlIndex.setStatus('current')
sysLBDPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 17, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLBDPortStatus.setStatus('current')
sysLBDPortLoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 17, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("loop", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLBDPortLoopStatus.setStatus('current')
sysLBDVlanLoopTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 17, 6), )
if mibBuilder.loadTexts: sysLBDVlanLoopTable.setStatus('current')
sysLBDVlanLoopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 17, 6, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "sysLBDVlanLoopIndex"))
if mibBuilder.loadTexts: sysLBDVlanLoopEntry.setStatus('current')
sysLBDVlanLoopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 17, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLBDVlanLoopIndex.setStatus('current')
sysLBDVlanLoopPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 17, 6, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLBDVlanLoopPorts.setStatus('current')
sysMirrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMirrorStatus.setStatus('current')
sysMirrorTargetPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 18, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMirrorTargetPort.setStatus('current')
sysMirrorCtrlIngressMirroring = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 18, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMirrorCtrlIngressMirroring.setStatus('current')
sysMirrorCtrlEgressMirroring = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 18, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMirrorCtrlEgressMirroring.setStatus('current')
ipv4sysSNTPTimeSeconds = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPTimeSeconds.setStatus('obsolete')
ipv4sysSNTPFirstServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPFirstServer.setStatus('obsolete')
ipv4sysSNTPSecondServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPSecondServer.setStatus('obsolete')
ipv4sysSNTPPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPPollInterval.setStatus('obsolete')
ipv4sysSNTPState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sntp", 1), ("local", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPState.setStatus('obsolete')
ipv4sysSNTPDSTOffset = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(30, 60, 90, 120))).clone(namedValues=NamedValues(("offset30min", 30), ("offset60min", 60), ("offset90min", 90), ("offset120min", 120)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPDSTOffset.setStatus('obsolete')
ipv4sysSNTPGMTMinutes = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPGMTMinutes.setStatus('obsolete')
ipv4sysSNTPDSTStartMon = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPDSTStartMon.setStatus('obsolete')
ipv4sysSNTPDSTStartDay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPDSTStartDay.setStatus('obsolete')
ipv4sysSNTPDSTStartHour = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPDSTStartHour.setStatus('obsolete')
ipv4sysSNTPDSTStartMin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPDSTStartMin.setStatus('obsolete')
ipv4sysSNTPDSTEndMon = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPDSTEndMon.setStatus('obsolete')
ipv4sysSNTPDSTEndDay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPDSTEndDay.setStatus('obsolete')
ipv4sysSNTPDSTEndHour = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPDSTEndHour.setStatus('obsolete')
ipv4sysSNTPDSTEndMin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPDSTEndMin.setStatus('obsolete')
ipv4sysSNTPDSTState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("annual", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4sysSNTPDSTState.setStatus('obsolete')
sysSNTPServerTable = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 17))
sysSNTPTimeSeconds = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 17, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPTimeSeconds.setStatus('current')
sysSNTPFirstServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 17, 2), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPFirstServer.setStatus('current')
sysSNTPFirstType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 17, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPFirstType.setStatus('current')
sysSNTPFirstInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 17, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPFirstInterfaceName.setStatus('current')
sysSNTPSecondServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 17, 5), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPSecondServer.setStatus('current')
sysSNTPSecondType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 17, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPSecondType.setStatus('current')
sysSNTPSecondInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 17, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPSecondInterfaceName.setStatus('current')
sysSNTPPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 17, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPPollInterval.setStatus('current')
sysSNTPState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 17, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sntp", 1), ("local", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPState.setStatus('current')
sysSNTPDSTOffset = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 17, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(30, 60, 90, 120))).clone(namedValues=NamedValues(("offset30min", 30), ("offset60min", 60), ("offset90min", 90), ("offset120min", 120)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTOffset.setStatus('current')
sysSNTPGMTMinutes = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 17, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPGMTMinutes.setStatus('current')
sysSNTPDSTStartMon = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 17, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTStartMon.setStatus('current')
sysSNTPDSTStartDay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 17, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTStartDay.setStatus('current')
sysSNTPDSTStartHour = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 17, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTStartHour.setStatus('current')
sysSNTPDSTStartMin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 17, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTStartMin.setStatus('current')
sysSNTPDSTEndMon = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 17, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTEndMon.setStatus('current')
sysSNTPDSTEndDay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 17, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTEndDay.setStatus('current')
sysSNTPDSTEndHour = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 17, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTEndHour.setStatus('current')
sysSNTPDSTEndMin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 17, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTEndMin.setStatus('current')
sysSNTPDSTState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 17, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTState.setStatus('current')
sysSNTPDSTMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 17, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("annual", 1), ("repeating", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTMethod.setStatus('current')
sysSNTPDSTRepeatStartMon = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 17, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTRepeatStartMon.setStatus('current')
sysSNTPDSTRepeatStartWeek = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 17, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("last", 0), ("first", 1), ("second", 2), ("third", 3), ("fourth", 4), ("fifth", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTRepeatStartWeek.setStatus('current')
sysSNTPDSTRepeatStartWeekDay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 17, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sun", 0), ("mon", 1), ("tue", 2), ("wed", 3), ("thu", 4), ("fri", 5), ("sat", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTRepeatStartWeekDay.setStatus('current')
sysSNTPDSTRepeatStartHour = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 17, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTRepeatStartHour.setStatus('current')
sysSNTPDSTRepeatStartMin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 17, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTRepeatStartMin.setStatus('current')
sysSNTPDSTRepeatEndMon = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 17, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTRepeatEndMon.setStatus('current')
sysSNTPDSTRepeatEndWeek = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 17, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("last", 0), ("first", 1), ("second", 2), ("third", 3), ("fourth", 4), ("fifth", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTRepeatEndWeek.setStatus('current')
sysSNTPDSTRepeatEndWeekDay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 17, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sun", 0), ("mon", 1), ("tue", 2), ("wed", 3), ("thu", 4), ("fri", 5), ("sat", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTRepeatEndWeekDay.setStatus('current')
sysSNTPDSTRepeatEndHour = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 17, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTRepeatEndHour.setStatus('current')
sysSNTPDSTRepeatEndMin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 20, 17, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNTPDSTRepeatEndMin.setStatus('current')
limitIpMulticastProfileTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 45, 1), )
if mibBuilder.loadTexts: limitIpMulticastProfileTable.setStatus('current')
limitIpMulticastProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 45, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "limitIpMulticastIPType"), (0, "DGS-1210-28XSME-BX", "limitIpMulticastProfileID"))
if mibBuilder.loadTexts: limitIpMulticastProfileEntry.setStatus('current')
limitIpMulticastIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 45, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: limitIpMulticastIPType.setStatus('current')
limitIpMulticastProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 45, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: limitIpMulticastProfileID.setStatus('current')
limitIpMulticastProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 45, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: limitIpMulticastProfileName.setStatus('current')
limitIpMulticastProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 45, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: limitIpMulticastProfileStatus.setStatus('current')
limitIpMulticastEntryTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 45, 2), )
if mibBuilder.loadTexts: limitIpMulticastEntryTable.setStatus('current')
limitIpMulticastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 45, 2, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "limitIpMulticastEntryIPType"), (0, "DGS-1210-28XSME-BX", "limitIpMulticastEntryProfileID"), (0, "DGS-1210-28XSME-BX", "limitIpMulticaststartIpAddr"), (0, "DGS-1210-28XSME-BX", "limitIpMulticastendIpAddr"))
if mibBuilder.loadTexts: limitIpMulticastEntry.setStatus('current')
limitIpMulticastEntryIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 45, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: limitIpMulticastEntryIPType.setStatus('current')
limitIpMulticastEntryProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 45, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: limitIpMulticastEntryProfileID.setStatus('current')
limitIpMulticaststartIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 45, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: limitIpMulticaststartIpAddr.setStatus('current')
limitIpMulticastendIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 45, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: limitIpMulticastendIpAddr.setStatus('current')
limitIpMulticastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 45, 2, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: limitIpMulticastStatus.setStatus('current')
limitIpMulticastPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 45, 3), )
if mibBuilder.loadTexts: limitIpMulticastPortTable.setStatus('current')
limitIpMulticastPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 45, 3, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "limitIpMulticastPortIPType"), (0, "DGS-1210-28XSME-BX", "limitIpMulticastPortID"))
if mibBuilder.loadTexts: limitIpMulticastPortEntry.setStatus('current')
limitIpMulticastPortIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 45, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: limitIpMulticastPortIPType.setStatus('current')
limitIpMulticastPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 45, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: limitIpMulticastPortID.setStatus('current')
limitIpMulticastPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 45, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: limitIpMulticastPortState.setStatus('current')
limitIpMulticastPortProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 45, 3, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: limitIpMulticastPortProfileID.setStatus('current')
limitIpMulticastPortMaxGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 45, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: limitIpMulticastPortMaxGrp.setStatus('current')
guestVlanName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 24, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: guestVlanName.setStatus('current')
guestVlanPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 24, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: guestVlanPort.setStatus('current')
guestVlanDelState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 24, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: guestVlanDelState.setStatus('current')
protocolGroupNameTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 101, 1), )
if mibBuilder.loadTexts: protocolGroupNameTable.setStatus('current')
protocolGroupNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 101, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "protocolGroupGID"))
if mibBuilder.loadTexts: protocolGroupNameEntry.setStatus('current')
protocolGroupGID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 101, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolGroupGID.setStatus('current')
protocolGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 101, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: protocolGroupName.setStatus('current')
protocolGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 101, 2), )
if mibBuilder.loadTexts: protocolGroupTable.setStatus('current')
protocolGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 101, 2, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "protocolGroupId"), (0, "DGS-1210-28XSME-BX", "protocolGroupFrameType"), (0, "DGS-1210-28XSME-BX", "protocolGroupProtocolValue"))
if mibBuilder.loadTexts: protocolGroupEntry.setStatus('current')
protocolGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 101, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolGroupId.setStatus('current')
protocolGroupFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 101, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethernet", 1), ("ieee8023-snap", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolGroupFrameType.setStatus('current')
protocolGroupProtocolValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 101, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolGroupProtocolValue.setStatus('current')
protocolGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 101, 2, 1, 99), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: protocolGroupRowStatus.setStatus('current')
protocolVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 101, 3), )
if mibBuilder.loadTexts: protocolVlanTable.setStatus('current')
protocolVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 101, 3, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "protocolVlanPort"), (0, "DGS-1210-28XSME-BX", "protocolVlanVID"), (0, "DGS-1210-28XSME-BX", "protocolVlanGroupID"))
if mibBuilder.loadTexts: protocolVlanEntry.setStatus('current')
protocolVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 101, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolVlanPort.setStatus('current')
protocolVlanVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 101, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolVlanVID.setStatus('current')
protocolVlanGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 101, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolVlanGroupID.setStatus('current')
protocolVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 101, 3, 1, 99), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: protocolVlanRowStatus.setStatus('current')
macNotifyState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macNotifyState.setStatus('current')
macNotifyInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 25, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macNotifyInterval.setStatus('current')
macNotifyHistorySize = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 25, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macNotifyHistorySize.setStatus('current')
macNotifyCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 25, 4), )
if mibBuilder.loadTexts: macNotifyCtrlTable.setStatus('current')
macNotifyCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 25, 4, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "macNotifyCtrlIndex"))
if mibBuilder.loadTexts: macNotifyCtrlEntry.setStatus('current')
macNotifyCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 25, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: macNotifyCtrlIndex.setStatus('current')
macNotifyPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 25, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macNotifyPortStatus.setStatus('current')
macNotifyInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 25, 5))
macNotifyInfoDiscription = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 25, 5, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: macNotifyInfoDiscription.setStatus('current')
sysBPDUAttackStateEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 77, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysBPDUAttackStateEnable.setStatus('current')
sysBPDUAttackRecoverTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 77, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 1000000), )).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysBPDUAttackRecoverTime.setStatus('current')
sysBPDUAttackCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 77, 3), )
if mibBuilder.loadTexts: sysBPDUAttackCtrlTable.setStatus('current')
sysBPDUAttackCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 77, 3, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "sysBPDUAttackCtrlIndex"))
if mibBuilder.loadTexts: sysBPDUAttackCtrlEntry.setStatus('current')
sysBPDUAttackCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 77, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBPDUAttackCtrlIndex.setStatus('current')
sysBPDUAttackPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 77, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysBPDUAttackPortState.setStatus('current')
sysBPDUAttackPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 77, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("drop", 1), ("block", 2), ("shutdown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysBPDUAttackPortMode.setStatus('current')
sysBPDUAttackPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 77, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("underAttack", 2))).clone('normal')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBPDUAttackPortStatus.setStatus('current')
sysBPDUAttackLog = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 77, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("attackDetected", 2), ("attackCleared", 3), ("both", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysBPDUAttackLog.setStatus('current')
vlanTrunkSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 36, 1))
vlanTrunkGlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 36, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanTrunkGlobalStatus.setStatus('current')
vlanTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 36, 1, 2), )
if mibBuilder.loadTexts: vlanTrunkTable.setStatus('current')
vlanTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 36, 1, 2, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "vlanTrunkIfIndex"))
if mibBuilder.loadTexts: vlanTrunkEntry.setStatus('current')
vlanTrunkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 36, 1, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTrunkIfIndex.setStatus('current')
vlanTrunkState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 36, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanTrunkState.setStatus('current')
qinqSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 103, 1))
qinqVLANTranslation = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 103, 2))
qinqGlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 103, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qinqGlobalStatus.setStatus('current')
qinqInnerTPID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 103, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qinqInnerTPID.setStatus('current')
qinqTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 103, 1, 3), )
if mibBuilder.loadTexts: qinqTable.setStatus('current')
qinqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 103, 1, 3, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "qinqIfIndex"))
if mibBuilder.loadTexts: qinqEntry.setStatus('current')
qinqIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 103, 1, 3, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qinqIfIndex.setStatus('current')
qinqRoleState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 103, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nni", 1), ("uni", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qinqRoleState.setStatus('current')
qinqMissDropState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 103, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qinqMissDropState.setStatus('current')
qinqOuterTPID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 103, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qinqOuterTPID.setStatus('current')
qinqAddInnerTagState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 103, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qinqAddInnerTagState.setStatus('current')
qinqAddInnerTagValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 103, 1, 3, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qinqAddInnerTagValue.setStatus('current')
qinqVlanTranslationTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 103, 2, 1), )
if mibBuilder.loadTexts: qinqVlanTranslationTable.setStatus('current')
qinqVlanTranslationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 103, 2, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "qinqVlanTranslationIfIndex"), (0, "DGS-1210-28XSME-BX", "qinqVlanTranslationCVID"))
if mibBuilder.loadTexts: qinqVlanTranslationEntry.setStatus('current')
qinqVlanTranslationIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 103, 2, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qinqVlanTranslationIfIndex.setStatus('current')
qinqVlanTranslationCVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 103, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qinqVlanTranslationCVID.setStatus('current')
qinqVlanTranslationSVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 103, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qinqVlanTranslationSVID.setStatus('current')
qinqVlanTranslationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 103, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qinqVlanTranslationPriority.setStatus('current')
qinqVlanTranslationSVIDOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 103, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("replace", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qinqVlanTranslationSVIDOperation.setStatus('current')
qinqVlanTranslationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 103, 2, 1, 1, 99), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qinqVlanTranslationRowStatus.setStatus('current')
eoamSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 51, 1))
eoamLinkMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 51, 2))
eoamTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 51, 1, 2), )
if mibBuilder.loadTexts: eoamTable.setStatus('current')
eoamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 51, 1, 2, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "eoamIfIndex"))
if mibBuilder.loadTexts: eoamEntry.setStatus('current')
eoamIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 51, 1, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamIfIndex.setStatus('current')
eoamState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 51, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eoamState.setStatus('current')
eoamMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 51, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("passive", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eoamMode.setStatus('current')
eoamReceivedRemoteLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 51, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ignore", 1), ("process", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eoamReceivedRemoteLoopback.setStatus('current')
eoamRemoteLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 51, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noLoopBack", 1), ("startLoopBack", 2), ("remoteLoopBack", 3), ("stopLoopBack", 4), ("localLoopBack", 5), ("unknownLoopBack", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eoamRemoteLoopback.setStatus('current')
eoamDyingGaspEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 51, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eoamDyingGaspEnable.setStatus('current')
eoamCriticalEventEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 51, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eoamCriticalEventEnable.setStatus('current')
eoamLinkMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 51, 2, 1), )
if mibBuilder.loadTexts: eoamLinkMonitorTable.setStatus('current')
eoamLinkMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 51, 2, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "eoamLinkMonitorIfIndex"))
if mibBuilder.loadTexts: eoamLinkMonitorEntry.setStatus('current')
eoamLinkMonitorIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 51, 2, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eoamLinkMonitorIfIndex.setStatus('current')
errorSymbolNotifyState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 51, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorSymbolNotifyState.setStatus('current')
errorSymbolThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 51, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorSymbolThreshold.setStatus('current')
errorSymbolWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 51, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorSymbolWindow.setStatus('current')
errorFrameNotifyState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 51, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorFrameNotifyState.setStatus('current')
errorFrameThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 51, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorFrameThreshold.setStatus('current')
errorFrameWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 51, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorFrameWindow.setStatus('current')
errorFrameSecondsNotifyState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 51, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorFrameSecondsNotifyState.setStatus('current')
errorFrameSecondsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 51, 2, 1, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorFrameSecondsThreshold.setStatus('current')
errorFrameSecondsWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 51, 2, 1, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorFrameSecondsWindow.setStatus('current')
errorFramePeriodNotifyState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 51, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorFramePeriodNotifyState.setStatus('current')
errorFramePeriodThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 51, 2, 1, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorFramePeriodThreshold.setStatus('current')
errorFramePeriodWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 51, 2, 1, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: errorFramePeriodWindow.setStatus('current')
duldSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 52, 1))
duldTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 52, 1, 1), )
if mibBuilder.loadTexts: duldTable.setStatus('current')
duldEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 52, 1, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "duldIfIndex"))
if mibBuilder.loadTexts: duldEntry.setStatus('current')
duldIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 52, 1, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: duldIfIndex.setStatus('current')
duldState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 52, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: duldState.setStatus('current')
duldOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 52, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: duldOperState.setStatus('current')
duldMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 52, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("shutdown", 1), ("normal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: duldMode.setStatus('current')
duldLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 52, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknow", 1), ("bidirectional", 2), ("txFault", 3), ("rxFault", 4), ("linkDown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: duldLinkStatus.setStatus('current')
duldDiscoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 52, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: duldDiscoveryTime.setStatus('current')
duldRecoverTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 52, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 1000000), )).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: duldRecoverTime.setStatus('current')
doSCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 99, 1), )
if mibBuilder.loadTexts: doSCtrlTable.setStatus('current')
doSCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 99, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "doSCtrlType"))
if mibBuilder.loadTexts: doSCtrlEntry.setStatus('current')
doSCtrlType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 99, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("land-attack", 1), ("blat-attack", 2), ("tcp-null-scan", 4), ("tcp-xmascan", 5), ("tcp-synfin", 6), ("tcp-syn-srcport-less-1024", 7), ("ping-death-attack", 8), ("tcp-tiny-fragment", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: doSCtrlType.setStatus('current')
doSCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 99, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doSCtrlState.setStatus('current')
doSCtrlActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 99, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("drop", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doSCtrlActionType.setStatus('current')
dosCtrlTrapLogState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 99, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dosCtrlTrapLogState.setStatus('current')
swTimeRangeSettingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 38, 1), )
if mibBuilder.loadTexts: swTimeRangeSettingTable.setStatus('current')
swTimeRangeSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 38, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "swTimeRangeIndex"))
if mibBuilder.loadTexts: swTimeRangeSettingEntry.setStatus('current')
swTimeRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 38, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTimeRangeIndex.setStatus('current')
swTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 38, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeName.setStatus('current')
swTimeRangeDate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 38, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeDate.setStatus('current')
swTimeRangeStartYear = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 38, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037))).clone(namedValues=NamedValues(("y2009", 2009), ("y2010", 2010), ("y2011", 2011), ("y2012", 2012), ("y2013", 2013), ("y2014", 2014), ("y2015", 2015), ("y2016", 2016), ("y2017", 2017), ("y2018", 2018), ("y2019", 2019), ("y2020", 2020), ("y2021", 2021), ("y2022", 2022), ("y2023", 2023), ("y2024", 2024), ("y2025", 2025), ("y2026", 2026), ("y2027", 2027), ("y2028", 2028), ("y2029", 2029), ("y2030", 2030), ("y2031", 2031), ("y2032", 2032), ("y2033", 2033), ("y2034", 2034), ("y2035", 2035), ("y2036", 2036), ("y2037", 2037)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeStartYear.setStatus('current')
swTimeRangeStartMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 38, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("january", 1), ("february", 2), ("march", 3), ("april", 4), ("may", 5), ("june", 6), ("july", 7), ("august", 8), ("september", 9), ("october", 10), ("november", 11), ("december", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeStartMonth.setStatus('current')
swTimeRangeStartDay = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 38, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeStartDay.setStatus('current')
swTimeRangeStartHour = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 38, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeStartHour.setStatus('current')
swTimeRangeStartMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 38, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeStartMinute.setStatus('current')
swTimeRangeEndYear = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 38, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037))).clone(namedValues=NamedValues(("y2009", 2009), ("y2010", 2010), ("y2011", 2011), ("y2012", 2012), ("y2013", 2013), ("y2014", 2014), ("y2015", 2015), ("y2016", 2016), ("y2017", 2017), ("y2018", 2018), ("y2019", 2019), ("y2020", 2020), ("y2021", 2021), ("y2022", 2022), ("y2023", 2023), ("y2024", 2024), ("y2025", 2025), ("y2026", 2026), ("y2027", 2027), ("y2028", 2028), ("y2029", 2029), ("y2030", 2030), ("y2031", 2031), ("y2032", 2032), ("y2033", 2033), ("y2034", 2034), ("y2035", 2035), ("y2036", 2036), ("y2037", 2037)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeEndYear.setStatus('current')
swTimeRangeEndMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 38, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("january", 1), ("february", 2), ("march", 3), ("april", 4), ("may", 5), ("june", 6), ("july", 7), ("august", 8), ("september", 9), ("october", 10), ("november", 11), ("december", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeEndMonth.setStatus('current')
swTimeRangeEndDay = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 38, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeEndDay.setStatus('current')
swTimeRangeEndHour = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 38, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeEndHour.setStatus('current')
swTimeRangeEndMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 38, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeEndMinute.setStatus('current')
swTimeRangeMonday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 38, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeMonday.setStatus('current')
swTimeRangeTuesday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 38, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeTuesday.setStatus('current')
swTimeRangeWednesday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 38, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeWednesday.setStatus('current')
swTimeRangeThursday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 38, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeThursday.setStatus('current')
swTimeRangeFriday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 38, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeFriday.setStatus('current')
swTimeRangeSaturday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 38, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeSaturday.setStatus('current')
swTimeRangeSunday = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 38, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTimeRangeSunday.setStatus('current')
swTimeRangeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 38, 1, 1, 21), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swTimeRangeRowStatus.setStatus('current')
dlinklldpState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpState.setStatus('current')
dlinklldpMsgHoldMultiplier = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpMsgHoldMultiplier.setStatus('current')
dlinklldpMsgTxInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 32768))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpMsgTxInterval.setStatus('current')
dlinklldpReinitDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpReinitDelay.setStatus('current')
dlinklldpTxDelay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpTxDelay.setStatus('current')
dlinklldpConfigManAddrPortsTxEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 6), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinklldpConfigManAddrPortsTxEnable.setStatus('current')
class LldpPortNumber(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4096)

lldpPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 11), )
if mibBuilder.loadTexts: lldpPortConfigTable.setStatus('current')
lldpPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 11, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "lldpPortConfigPortNum"))
if mibBuilder.loadTexts: lldpPortConfigEntry.setStatus('current')
lldpPortConfigPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 11, 1, 1), LldpPortNumber())
if mibBuilder.loadTexts: lldpPortConfigPortNum.setStatus('current')
lldpPortConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("txOnly", 1), ("rxOnly", 2), ("txAndRx", 3), ("disabled", 4))).clone('txAndRx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpPortConfigAdminStatus.setStatus('current')
lldpPortConfigNotificationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 11, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpPortConfigNotificationEnable.setStatus('current')
lldpPortConfigTLVsTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 11, 1, 4), Bits().clone(namedValues=NamedValues(("portDesc", 0), ("sysName", 1), ("sysDesc", 2), ("sysCap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpPortConfigTLVsTxEnable.setStatus('current')
lldpXdot3Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12))
lldpXdot3Config = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 1))
lldpXdot3LocalData = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 2))
lldpXdot3RemoteData = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 3))
class LldpPowerPortClass(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("pClassPSE", 1), ("pClassPD", 2))

class LldpLinkAggStatusMap(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("aggCapable", 0), ("aggEnabled", 1))

lldpXdot3PortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 1, 1), )
if mibBuilder.loadTexts: lldpXdot3PortConfigTable.setStatus('current')
lldpXdot3PortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 1, 1, 1), )
lldpPortConfigEntry.registerAugmentions(("DGS-1210-28XSME-BX", "lldpXdot3PortConfigEntry"))
lldpXdot3PortConfigEntry.setIndexNames(*lldpPortConfigEntry.getIndexNames())
if mibBuilder.loadTexts: lldpXdot3PortConfigEntry.setStatus('current')
lldpXdot3PortConfigTLVsTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 1, 1, 1, 1), Bits().clone(namedValues=NamedValues(("macPhyConfigStatus", 0), ("powerViaMDI", 1), ("linkAggregation", 2), ("maxFrameSize", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot3PortConfigTLVsTxEnable.setStatus('current')
lldpXdot3LocPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 2, 1), )
if mibBuilder.loadTexts: lldpXdot3LocPortTable.setStatus('current')
lldpXdot3LocPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 2, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "lldpXdot3LocPortAutoNegSupported"))
if mibBuilder.loadTexts: lldpXdot3LocPortEntry.setStatus('current')
lldpXdot3LocPortAutoNegSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 2, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPortAutoNegSupported.setStatus('current')
lldpXdot3LocPortAutoNegEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 2, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPortAutoNegEnabled.setStatus('current')
lldpXdot3LocPortAutoNegAdvertisedCap = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPortAutoNegAdvertisedCap.setStatus('current')
lldpXdot3LocPortOperMauType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPortOperMauType.setStatus('current')
lldpXdot3LocPowerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 2, 2), )
if mibBuilder.loadTexts: lldpXdot3LocPowerTable.setStatus('current')
lldpXdot3LocPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 2, 2, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "lldpXdot3LocPowerPortClass"))
if mibBuilder.loadTexts: lldpXdot3LocPowerEntry.setStatus('current')
lldpXdot3LocPowerPortClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 2, 2, 1, 1), LldpPowerPortClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPowerPortClass.setStatus('current')
lldpXdot3LocPowerMDISupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 2, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPowerMDISupported.setStatus('current')
lldpXdot3LocPowerMDIEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 2, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPowerMDIEnabled.setStatus('current')
lldpXdot3LocPowerPairControlable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 2, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPowerPairControlable.setStatus('current')
lldpXdot3LocPowerPairs = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPowerPairs.setStatus('current')
lldpXdot3LocPowerClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ValueRangeConstraint(4, 4), ValueRangeConstraint(5, 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocPowerClass.setStatus('current')
lldpXdot3LocLinkAggTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 2, 3), )
if mibBuilder.loadTexts: lldpXdot3LocLinkAggTable.setStatus('current')
lldpXdot3LocLinkAggEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 2, 3, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "lldpXdot3LocLinkAggStatus"))
if mibBuilder.loadTexts: lldpXdot3LocLinkAggEntry.setStatus('current')
lldpXdot3LocLinkAggStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 2, 3, 1, 1), LldpLinkAggStatusMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocLinkAggStatus.setStatus('current')
lldpXdot3LocLinkAggPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 2147483647), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocLinkAggPortId.setStatus('current')
lldpXdot3LocMaxFrameSizeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 2, 4), )
if mibBuilder.loadTexts: lldpXdot3LocMaxFrameSizeTable.setStatus('current')
lldpXdot3LocMaxFrameSizeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 2, 4, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "lldpXdot3LocMaxFrameSize"))
if mibBuilder.loadTexts: lldpXdot3LocMaxFrameSizeEntry.setStatus('current')
lldpXdot3LocMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3LocMaxFrameSize.setStatus('current')
lldpXdot3RemPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 3, 1), )
if mibBuilder.loadTexts: lldpXdot3RemPortTable.setStatus('current')
lldpXdot3RemPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 3, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "lldpXdot3RemPortAutoNegSupported"))
if mibBuilder.loadTexts: lldpXdot3RemPortEntry.setStatus('current')
lldpXdot3RemPortAutoNegSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 3, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPortAutoNegSupported.setStatus('current')
lldpXdot3RemPortAutoNegEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 3, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPortAutoNegEnabled.setStatus('current')
lldpXdot3RemPortAutoNegAdvertisedCap = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPortAutoNegAdvertisedCap.setStatus('current')
lldpXdot3RemPortOperMauType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPortOperMauType.setStatus('current')
lldpXdot3RemPowerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 3, 2), )
if mibBuilder.loadTexts: lldpXdot3RemPowerTable.setStatus('current')
lldpXdot3RemPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 3, 2, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "lldpXdot3RemPowerPortClass"))
if mibBuilder.loadTexts: lldpXdot3RemPowerEntry.setStatus('current')
lldpXdot3RemPowerPortClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 3, 2, 1, 1), LldpPowerPortClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPowerPortClass.setStatus('current')
lldpXdot3RemPowerMDISupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 3, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPowerMDISupported.setStatus('current')
lldpXdot3RemPowerMDIEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 3, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPowerMDIEnabled.setStatus('current')
lldpXdot3RemPowerPairControlable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 3, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPowerPairControlable.setStatus('current')
lldpXdot3RemPowerPairs = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPowerPairs.setStatus('current')
lldpXdot3RemPowerClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ValueRangeConstraint(4, 4), ValueRangeConstraint(5, 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemPowerClass.setStatus('current')
lldpXdot3RemLinkAggTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 3, 3), )
if mibBuilder.loadTexts: lldpXdot3RemLinkAggTable.setStatus('current')
lldpXdot3RemLinkAggEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 3, 3, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "lldpXdot3RemLinkAggStatus"))
if mibBuilder.loadTexts: lldpXdot3RemLinkAggEntry.setStatus('current')
lldpXdot3RemLinkAggStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 3, 3, 1, 1), LldpLinkAggStatusMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemLinkAggStatus.setStatus('current')
lldpXdot3RemLinkAggPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 2147483647), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemLinkAggPortId.setStatus('current')
lldpXdot3RemMaxFrameSizeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 3, 4), )
if mibBuilder.loadTexts: lldpXdot3RemMaxFrameSizeTable.setStatus('current')
lldpXdot3RemMaxFrameSizeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 3, 4, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "lldpXdot3RemMaxFrameSize"))
if mibBuilder.loadTexts: lldpXdot3RemMaxFrameSizeEntry.setStatus('current')
lldpXdot3RemMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 12, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot3RemMaxFrameSize.setStatus('current')
lldpXdot1Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13))
lldpXdot1Config = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 1))
lldpXdot1LocalData = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 2))
lldpXdot1RemoteData = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 3))
lldpXdot1ConfigPortVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 1, 1), )
if mibBuilder.loadTexts: lldpXdot1ConfigPortVlanTable.setStatus('current')
lldpXdot1ConfigPortVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 1, 1, 1), )
lldpPortConfigEntry.registerAugmentions(("DGS-1210-28XSME-BX", "lldpXdot1ConfigPortVlanEntry"))
lldpXdot1ConfigPortVlanEntry.setIndexNames(*lldpPortConfigEntry.getIndexNames())
if mibBuilder.loadTexts: lldpXdot1ConfigPortVlanEntry.setStatus('current')
lldpXdot1ConfigPortVlanTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 1, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot1ConfigPortVlanTxEnable.setStatus('current')
lldpXdot1LocVlanNameTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 2, 3), )
if mibBuilder.loadTexts: lldpXdot1LocVlanNameTable.setStatus('current')
lldpXdot1LocVlanNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 2, 3, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "lldpXdot1LocVlanId"))
if mibBuilder.loadTexts: lldpXdot1LocVlanNameEntry.setStatus('current')
lldpXdot1LocVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 2, 3, 1, 1), VlanId())
if mibBuilder.loadTexts: lldpXdot1LocVlanId.setStatus('current')
lldpXdot1LocVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 2, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1LocVlanName.setStatus('current')
lldpXdot1ConfigVlanNameTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 1, 2), )
if mibBuilder.loadTexts: lldpXdot1ConfigVlanNameTable.setStatus('current')
lldpXdot1ConfigVlanNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 1, 2, 1), )
lldpXdot1LocVlanNameEntry.registerAugmentions(("DGS-1210-28XSME-BX", "lldpXdot1ConfigVlanNameEntry"))
lldpXdot1ConfigVlanNameEntry.setIndexNames(*lldpXdot1LocVlanNameEntry.getIndexNames())
if mibBuilder.loadTexts: lldpXdot1ConfigVlanNameEntry.setStatus('current')
lldpXdot1ConfigVlanNameTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 1, 2, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot1ConfigVlanNameTxEnable.setStatus('current')
lldpXdot1LocProtoVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 2, 2), )
if mibBuilder.loadTexts: lldpXdot1LocProtoVlanTable.setStatus('current')
lldpXdot1LocProtoVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 2, 2, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "lldpXdot1LocProtoVlanId"))
if mibBuilder.loadTexts: lldpXdot1LocProtoVlanEntry.setStatus('current')
lldpXdot1LocProtoVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), )))
if mibBuilder.loadTexts: lldpXdot1LocProtoVlanId.setStatus('current')
lldpXdot1LocProtoVlanSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 2, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1LocProtoVlanSupported.setStatus('current')
lldpXdot1LocProtoVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 2, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1LocProtoVlanEnabled.setStatus('current')
lldpXdot1ConfigProtoVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 1, 3), )
if mibBuilder.loadTexts: lldpXdot1ConfigProtoVlanTable.setStatus('current')
lldpXdot1ConfigProtoVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 1, 3, 1), )
lldpXdot1LocProtoVlanEntry.registerAugmentions(("DGS-1210-28XSME-BX", "lldpXdot1ConfigProtoVlanEntry"))
lldpXdot1ConfigProtoVlanEntry.setIndexNames(*lldpXdot1LocProtoVlanEntry.getIndexNames())
if mibBuilder.loadTexts: lldpXdot1ConfigProtoVlanEntry.setStatus('current')
lldpXdot1ConfigProtoVlanTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 1, 3, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot1ConfigProtoVlanTxEnable.setStatus('current')
lldpXdot1LocProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 2, 4), )
if mibBuilder.loadTexts: lldpXdot1LocProtocolTable.setStatus('current')
lldpXdot1LocProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 2, 4, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "lldpXdot1LocProtocolIndex"))
if mibBuilder.loadTexts: lldpXdot1LocProtocolEntry.setStatus('current')
lldpXdot1LocProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: lldpXdot1LocProtocolIndex.setStatus('current')
lldpXdot1LocProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 2, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1LocProtocolId.setStatus('current')
lldpXdot1ConfigProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 1, 4), )
if mibBuilder.loadTexts: lldpXdot1ConfigProtocolTable.setStatus('current')
lldpXdot1ConfigProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 1, 4, 1), )
lldpXdot1LocProtocolEntry.registerAugmentions(("DGS-1210-28XSME-BX", "lldpXdot1ConfigProtocolEntry"))
lldpXdot1ConfigProtocolEntry.setIndexNames(*lldpXdot1LocProtocolEntry.getIndexNames())
if mibBuilder.loadTexts: lldpXdot1ConfigProtocolEntry.setStatus('current')
lldpXdot1ConfigProtocolTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 1, 4, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXdot1ConfigProtocolTxEnable.setStatus('current')
lldpXdot1LocTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 2, 1), )
if mibBuilder.loadTexts: lldpXdot1LocTable.setStatus('current')
lldpXdot1LocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 2, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "lldpXdot1LocPortVlanId"))
if mibBuilder.loadTexts: lldpXdot1LocEntry.setStatus('current')
lldpXdot1LocPortVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1LocPortVlanId.setStatus('current')
lldpXdot1RemTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 3, 1), )
if mibBuilder.loadTexts: lldpXdot1RemTable.setStatus('current')
lldpXdot1RemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 3, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "lldpXdot1RemPortVlanId"))
if mibBuilder.loadTexts: lldpXdot1RemEntry.setStatus('current')
lldpXdot1RemPortVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemPortVlanId.setStatus('current')
lldpXdot1RemProtoVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 3, 2), )
if mibBuilder.loadTexts: lldpXdot1RemProtoVlanTable.setStatus('current')
lldpXdot1RemProtoVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 3, 2, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "lldpXdot1RemProtoVlanId"))
if mibBuilder.loadTexts: lldpXdot1RemProtoVlanEntry.setStatus('current')
lldpXdot1RemProtoVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), )))
if mibBuilder.loadTexts: lldpXdot1RemProtoVlanId.setStatus('current')
lldpXdot1RemProtoVlanSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 3, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemProtoVlanSupported.setStatus('current')
lldpXdot1RemProtoVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 3, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemProtoVlanEnabled.setStatus('current')
lldpXdot1RemVlanNameTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 3, 3), )
if mibBuilder.loadTexts: lldpXdot1RemVlanNameTable.setStatus('current')
lldpXdot1RemVlanNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 3, 3, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "lldpXdot1RemVlanId"))
if mibBuilder.loadTexts: lldpXdot1RemVlanNameEntry.setStatus('current')
lldpXdot1RemVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 3, 3, 1, 1), VlanId())
if mibBuilder.loadTexts: lldpXdot1RemVlanId.setStatus('current')
lldpXdot1RemVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 3, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemVlanName.setStatus('current')
lldpXdot1RemProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 3, 4), )
if mibBuilder.loadTexts: lldpXdot1RemProtocolTable.setStatus('current')
lldpXdot1RemProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 3, 4, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "lldpXdot1RemProtocolIndex"))
if mibBuilder.loadTexts: lldpXdot1RemProtocolEntry.setStatus('current')
lldpXdot1RemProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: lldpXdot1RemProtocolIndex.setStatus('current')
lldpXdot1RemProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 32, 13, 3, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXdot1RemProtocolId.setStatus('current')
dlinkGreenLEDShutoff = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 31, 1))
dlinkGreenPortShutoff = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 31, 2))
dlinkGreenSystemHibernation = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 31, 4))
dlinkGreenLEDShutoffPortList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 31, 1, 1), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenLEDShutoffPortList.setStatus('current')
dlinkGreenLEDShutoffState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 31, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenLEDShutoffState.setStatus('current')
dlinkGreenLEDShutoffTimeProfile1 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 31, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenLEDShutoffTimeProfile1.setStatus('current')
dlinkGreenLEDShutoffTimeProfile2 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 31, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenLEDShutoffTimeProfile2.setStatus('current')
dlinkGreenPortShutoffPortList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 31, 2, 1), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenPortShutoffPortList.setStatus('current')
dlinkGreenPortShutoffState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 31, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenPortShutoffState.setStatus('current')
dlinkGreenPortShutoffTimeProfile1 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 31, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenPortShutoffTimeProfile1.setStatus('current')
dlinkGreenPortShutoffTimeProfile2 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 31, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenPortShutoffTimeProfile2.setStatus('current')
dlinkGreenSystemHibernationState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 31, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenSystemHibernationState.setStatus('current')
dlinkGreenSystemHibernationTimeProfile1 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 31, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenSystemHibernationTimeProfile1.setStatus('current')
dlinkGreenSystemHibernationTimeProfile2 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 31, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkGreenSystemHibernationTimeProfile2.setStatus('current')
dlinkPowerSavLinkStatusDetectState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 31, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlinkPowerSavLinkStatusDetectState.setStatus('current')
securityDhcpServerScreen = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 7))
dhcpServerScreenEnablePortlist = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 7, 1), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerScreenEnablePortlist.setStatus('current')
dhcpServerScreenEnableVlanlist = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 7, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerScreenEnableVlanlist.setStatus('current')
dhcpServerScreenLogSuppressDuration = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 30))).clone(namedValues=NamedValues(("one-min", 1), ("five-min", 5), ("thirty-min", 30)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerScreenLogSuppressDuration.setStatus('current')
filterDHCPServerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 7, 4), )
if mibBuilder.loadTexts: filterDHCPServerTable.setStatus('current')
filterDHCPServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 7, 4, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "filterDHCPServerIpAddr"), (0, "DGS-1210-28XSME-BX", "filterDHCPServerClientMacAddr"))
if mibBuilder.loadTexts: filterDHCPServerEntry.setStatus('current')
filterDHCPServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 7, 4, 1, 1), IpAddress())
if mibBuilder.loadTexts: filterDHCPServerIpAddr.setStatus('current')
filterDHCPServerClientMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 7, 4, 1, 2), MacAddress().clone(hexValue="000102030405"))
if mibBuilder.loadTexts: filterDHCPServerClientMacAddr.setStatus('current')
filterDHCPServerPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 7, 4, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterDHCPServerPortList.setStatus('current')
filterDHCPServerVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 7, 4, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterDHCPServerVlanList.setStatus('current')
filterDHCPServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 7, 4, 1, 99), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterDHCPServerRowStatus.setStatus('current')
securityTrafficSeg = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 9))
trafficSegTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 9, 1), )
if mibBuilder.loadTexts: trafficSegTable.setStatus('current')
trafficSegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 9, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "trafficSegIfIndex"))
if mibBuilder.loadTexts: trafficSegEntry.setStatus('current')
trafficSegIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 9, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficSegIfIndex.setStatus('current')
trafficSegMemberList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 9, 1, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trafficSegMemberList.setStatus('current')
securityAAC = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11))
aacAuthenAdminState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAuthenAdminState.setStatus('current')
aacAuthParamResponseTimeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAuthParamResponseTimeout.setStatus('current')
aacAuthParamAttempt = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAuthParamAttempt.setStatus('current')
aacAPAuthMethodGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 4))
aacAPLoginMethod = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 4, 1))
aacAPEnableMethod = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 4, 2))
aacAPConsoleLoginMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAPConsoleLoginMethod.setStatus('current')
aacAPTelnetLoginMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAPTelnetLoginMethod.setStatus('current')
aacAPSSHLoginMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAPSSHLoginMethod.setStatus('current')
aacAPHttpLoginMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAPHttpLoginMethod.setStatus('current')
aacAPConsoleEnableMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 4, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAPConsoleEnableMethod.setStatus('current')
aacAPTelnetEnableMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 4, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAPTelnetEnableMethod.setStatus('current')
aacAPSSHEnableMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 4, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAPSSHEnableMethod.setStatus('current')
aacAPHttpEnableMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 4, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAPHttpEnableMethod.setStatus('current')
aacServerGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 5), )
if mibBuilder.loadTexts: aacServerGroupTable.setStatus('current')
aacServerGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 5, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "aacServerGroupIndex"))
if mibBuilder.loadTexts: aacServerGroupEntry.setStatus('current')
aacServerGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aacServerGroupIndex.setStatus('current')
aacServerGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServerGroupName.setStatus('current')
aacServersInGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 5, 1, 3), Bits().clone(namedValues=NamedValues(("id1", 0), ("id2", 1), ("id3", 2), ("id4", 3), ("id5", 4), ("id6", 5), ("id7", 6), ("id8", 7), ("id9", 8), ("id10", 9), ("id11", 10), ("id12", 11), ("id13", 12), ("id14", 13), ("id15", 14), ("id16", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServersInGroup.setStatus('current')
aacServerGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aacServerGroupRowStatus.setStatus('current')
iPv4aacServerInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 6), )
if mibBuilder.loadTexts: iPv4aacServerInfoTable.setStatus('obsolete')
iPv4aacServerInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 6, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "iPv4aacServerIndex"))
if mibBuilder.loadTexts: iPv4aacServerInfoEntry.setStatus('obsolete')
iPv4aacServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iPv4aacServerIndex.setStatus('obsolete')
iPv4aacServerIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 6, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPv4aacServerIPAddr.setStatus('obsolete')
iPv4aacServerAuthProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tacacsPlus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPv4aacServerAuthProtocol.setStatus('obsolete')
iPv4aacServerAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPv4aacServerAuthPort.setStatus('obsolete')
iPv4aacServerAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPv4aacServerAuthKey.setStatus('obsolete')
iPv4aacServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPv4aacServerTimeout.setStatus('obsolete')
iPv4aacServerRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPv4aacServerRetryCount.setStatus('obsolete')
iPv4aacServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 6, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iPv4aacServerRowStatus.setStatus('obsolete')
aacServerInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 7), )
if mibBuilder.loadTexts: aacServerInfoTable.setStatus('current')
aacServerInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 7, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "aacServerIndex"))
if mibBuilder.loadTexts: aacServerInfoEntry.setStatus('current')
aacServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aacServerIndex.setStatus('current')
aacServerIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServerIPType.setStatus('current')
aacServerIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 7, 1, 3), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServerIPAddr.setStatus('current')
aacServerInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 7, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aacServerInterfaceName.setStatus('current')
aacServerAuthProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tacacsPlus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServerAuthProtocol.setStatus('current')
aacServerAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServerAuthPort.setStatus('current')
aacServerAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 7, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServerAuthKey.setStatus('current')
aacServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServerTimeout.setStatus('current')
aacServerRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServerRetryCount.setStatus('current')
aacServerAccountingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServerAccountingPort.setStatus('current')
aacServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 7, 1, 99), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aacServerRowStatus.setStatus('current')
aacLoginMethodListTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 8), )
if mibBuilder.loadTexts: aacLoginMethodListTable.setStatus('current')
aacLoginMethodListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 8, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "aacLoginMethodListIndex"))
if mibBuilder.loadTexts: aacLoginMethodListEntry.setStatus('current')
aacLoginMethodListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aacLoginMethodListIndex.setStatus('current')
aacLoginMethodListName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacLoginMethodListName.setStatus('current')
aacLoginMethod1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("none", -1), ("local", 0), ("tacacsPlus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacLoginMethod1.setStatus('current')
aacLoginMethod2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("none", -1), ("local", 0), ("tacacsPlus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacLoginMethod2.setStatus('current')
aacLoginMethod3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("none", -1), ("local", 0), ("tacacsPlus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacLoginMethod3.setStatus('current')
aacLoginMethod4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("none", -1), ("local", 0), ("tacacsPlus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacLoginMethod4.setStatus('current')
aacLoginMethodListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 8, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aacLoginMethodListRowStatus.setStatus('current')
aacEnableMethodListTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 9), )
if mibBuilder.loadTexts: aacEnableMethodListTable.setStatus('current')
aacEnableMethodListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 9, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "aacEnableMethodListIndex"))
if mibBuilder.loadTexts: aacEnableMethodListEntry.setStatus('current')
aacEnableMethodListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aacEnableMethodListIndex.setStatus('current')
aacEnableMethodListName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 9, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacEnableMethodListName.setStatus('current')
aacEnableMethod1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("none", -1), ("local", 0), ("tacacsPlus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacEnableMethod1.setStatus('current')
aacEnableMethod2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("none", -1), ("local", 0), ("tacacsPlus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacEnableMethod2.setStatus('current')
aacEnableMethod3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("none", -1), ("local", 0), ("tacacsPlus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacEnableMethod3.setStatus('current')
aacEnableMethod4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("none", -1), ("local", 0), ("tacacsPlus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacEnableMethod4.setStatus('current')
aacEnableMethodListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 9, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aacEnableMethodListRowStatus.setStatus('current')
aacLocalEnablePassword = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacLocalEnablePassword.setStatus('current')
aacAccountingMethodListTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 11), )
if mibBuilder.loadTexts: aacAccountingMethodListTable.setStatus('current')
aacAccountingMethodListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 11, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "aacAccountingMethodListIndex"))
if mibBuilder.loadTexts: aacAccountingMethodListEntry.setStatus('current')
aacAccountingMethodListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aacAccountingMethodListIndex.setStatus('current')
aacAccountingMethodListName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 11, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAccountingMethodListName.setStatus('current')
aacAccountingMethod1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("none", -1), ("local", 0), ("tacacsPlus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAccountingMethod1.setStatus('current')
aacAccountingMethod2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("none", -1), ("local", 0), ("tacacsPlus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAccountingMethod2.setStatus('current')
aacAccountingMethod3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("none", -1), ("local", 0), ("tacacsPlus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAccountingMethod3.setStatus('current')
aacAccountingMethod4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("none", -1), ("local", 0), ("tacacsPlus", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAccountingMethod4.setStatus('current')
aacAccountingMethodListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 11, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aacAccountingMethodListRowStatus.setStatus('current')
aacAccountingServiceIndex = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 12))
aacAccountingServiceNetwork = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, -1))).clone(namedValues=NamedValues(("radius-only", 0), ("default-method-list", 1), ("method-list-name", 2), ("disabled", -1))).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAccountingServiceNetwork.setStatus('current')
aacAccountingServiceShell = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, -1))).clone(namedValues=NamedValues(("radius-only", 0), ("default-method-list", 1), ("method-list-name", 2), ("disabled", -1))).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAccountingServiceShell.setStatus('current')
aacAccountingServiceSystem = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 12, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, -1))).clone(namedValues=NamedValues(("radius-only", 0), ("default-method-list", 1), ("method-list-name", 2), ("disabled", -1))).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAccountingServiceSystem.setStatus('current')
aacAccountingServiceCommand = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 13))
aacAccountingServiceCommandAdministrator = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 13, 1), Integer32().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAccountingServiceCommandAdministrator.setStatus('current')
aacAccountingServiceCommandOperator = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 13, 2), Integer32().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAccountingServiceCommandOperator.setStatus('current')
aacAccountingServiceCommandPoweruser = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 13, 3), Integer32().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAccountingServiceCommandPoweruser.setStatus('current')
aacAccountingServiceCommandUser = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 13, 4), Integer32().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacAccountingServiceCommandUser.setStatus('current')
aacServerPasswordEncryption = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 14, 11, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aacServerPasswordEncryption.setStatus('current')
staticARPTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 34, 2), )
if mibBuilder.loadTexts: staticARPTable.setStatus('current')
staticARPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 34, 2, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "staticARPIP"), (0, "DGS-1210-28XSME-BX", "staticARPMac"))
if mibBuilder.loadTexts: staticARPEntry.setStatus('current')
staticARPIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 34, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticARPIP.setStatus('current')
staticARPMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 34, 2, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticARPMac.setStatus('current')
staticARPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 34, 2, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticARPRowStatus.setStatus('current')
sysGratuitousARPGlobalSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 48, 1))
sysGratuitousARPSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 48, 2))
sysGratuitousARPIPIfStatusUp = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 48, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGratuitousARPIPIfStatusUp.setStatus('current')
sysGratuitousARPDuplicateIPDetected = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 48, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGratuitousARPDuplicateIPDetected.setStatus('current')
sysGratuitousARPLearning = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 48, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGratuitousARPLearning.setStatus('current')
sysGratuitousARPTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 48, 2, 1), )
if mibBuilder.loadTexts: sysGratuitousARPTable.setStatus('current')
sysGratuitousARPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 48, 2, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "sysGratuitousARPIFName"))
if mibBuilder.loadTexts: sysGratuitousARPEntry.setStatus('current')
sysGratuitousARPIFName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 48, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysGratuitousARPIFName.setStatus('current')
sysGratuitousARPInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 48, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysGratuitousARPInterval.setStatus('current')
ipv4multiIFInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 41, 1))
ipv4mulIfMainTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 41, 1, 1), )
if mibBuilder.loadTexts: ipv4mulIfMainTable.setStatus('obsolete')
ipv4mulIfMainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 41, 1, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "ipv4mulifMainIndex"), (0, "DGS-1210-28XSME-BX", "ipv4mulifVLANID"))
if mibBuilder.loadTexts: ipv4mulIfMainEntry.setStatus('obsolete')
ipv4mulifMainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 41, 1, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4mulifMainIndex.setStatus('obsolete')
ipv4mulifVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 41, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4mulifVLANID.setStatus('obsolete')
ipv4mulifName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 41, 1, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4mulifName.setStatus('obsolete')
ipv4mulifVLANname = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 41, 1, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4mulifVLANname.setStatus('obsolete')
ipv4mulifIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 41, 1, 1, 1, 6), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4mulifIpAddr.setStatus('obsolete')
ipv4mulifIpSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 41, 1, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4mulifIpSubnetMask.setStatus('obsolete')
ipv4mulifMainAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 41, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv4mulifMainAdminStatus.setStatus('obsolete')
ipv4mulifMainOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 41, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkup", 1), ("linkdown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4mulifMainOperStatus.setStatus('obsolete')
ipv4mulifMainRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 41, 1, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipv4mulifMainRowStatus.setStatus('obsolete')
multiIFSupportV4V6Info = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 41, 2))
mulIfSupportV4V6MainTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 41, 2, 1), )
if mibBuilder.loadTexts: mulIfSupportV4V6MainTable.setStatus('current')
mulIfSupportV4V6MainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 41, 2, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "mulifMainIndex"), (0, "DGS-1210-28XSME-BX", "mulifVLANID"))
if mibBuilder.loadTexts: mulIfSupportV4V6MainEntry.setStatus('current')
mulifMainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 41, 2, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mulifMainIndex.setStatus('current')
mulifVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 41, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mulifVLANID.setStatus('current')
mulifName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 41, 2, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mulifName.setStatus('current')
mulifVLANname = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 41, 2, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mulifVLANname.setStatus('current')
mulifIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 41, 2, 1, 1, 5), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mulifIpAddr.setStatus('current')
mulifIpSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 41, 2, 1, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mulifIpSubnetMask.setStatus('current')
mulifMainAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 41, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mulifMainAdminStatus.setStatus('current')
mulifMainOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 41, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkup", 1), ("linkdown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mulifMainOperStatus.setStatus('current')
mulifv6GlobalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 41, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mulifv6GlobalStatus.setStatus('current')
mulifv6DHCPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 41, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mulifv6DHCPStatus.setStatus('current')
mulifv6AutolinkloStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 41, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mulifv6AutolinkloStatus.setStatus('current')
mulifv6NSRetransmitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 41, 2, 1, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mulifv6NSRetransmitTime.setStatus('current')
mulifMainRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 41, 2, 1, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mulifMainRowStatus.setStatus('current')
mulIfV6AddressTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 41, 2, 2), )
if mibBuilder.loadTexts: mulIfV6AddressTable.setStatus('current')
mulIfV6AddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 41, 2, 2, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "mulifV6AddressMainIndex"), (0, "DGS-1210-28XSME-BX", "mulifV6AddressIpAddr"), (0, "DGS-1210-28XSME-BX", "mulifV6AddressIpPrefix"))
if mibBuilder.loadTexts: mulIfV6AddressEntry.setStatus('current')
mulifV6AddressMainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 41, 2, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mulifV6AddressMainIndex.setStatus('current')
mulifV6AddressIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 41, 2, 2, 1, 2), Ipv6Address().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: mulifV6AddressIpAddr.setStatus('current')
mulifV6AddressIpPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 41, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mulifV6AddressIpPrefix.setStatus('current')
mulifV6AddressIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 41, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unicast", 1), ("anycast", 2), ("linklocal", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mulifV6AddressIpType.setStatus('current')
mulifV6AddressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 41, 2, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mulifV6AddressRowStatus.setStatus('current')
agentCPUutilization = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 100, 1))
agentMEMutilization = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 100, 2))
agentCPUutilizationIn5sec = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 100, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCPUutilizationIn5sec.setStatus('current')
agentCPUutilizationIn1min = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 100, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCPUutilizationIn1min.setStatus('current')
agentCPUutilizationIn5min = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 100, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCPUutilizationIn5min.setStatus('current')
agentMEMutilizationIn5sec = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 100, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMEMutilizationIn5sec.setStatus('current')
agentMEMutilizationIn1min = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 100, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMEMutilizationIn1min.setStatus('current')
agentMEMutilizationIn5min = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 100, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMEMutilizationIn5min.setStatus('current')
l2PTState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 102, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2PTState.setStatus('current')
l2PTPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 102, 2), )
if mibBuilder.loadTexts: l2PTPortTable.setStatus('current')
l2PTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 102, 2, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "l2PTPortIndex"))
if mibBuilder.loadTexts: l2PTEntry.setStatus('current')
l2PTPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 102, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28)))
if mibBuilder.loadTexts: l2PTPortIndex.setStatus('current')
l2PTPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 102, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("uni", 2), ("nni", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2PTPortType.setStatus('current')
l2PTProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 102, 2, 1, 3), Bits().clone(namedValues=NamedValues(("stp", 0), ("gvrp", 1), ("macCC", 2), ("macCD", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2PTProtocol.setStatus('current')
l2PTThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 102, 3), )
if mibBuilder.loadTexts: l2PTThresholdTable.setStatus('current')
l2PTThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 102, 3, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "l2PTPortIndex"), (0, "DGS-1210-28XSME-BX", "l2PTProtocolIndex"))
if mibBuilder.loadTexts: l2PTThresholdEntry.setStatus('current')
l2PTProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 102, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("stp", 1), ("gvrp", 2), ("macCC", 3), ("macCD", 4))))
if mibBuilder.loadTexts: l2PTProtocolIndex.setStatus('current')
l2PTDropThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 102, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2PTDropThreshold.setStatus('current')
cpuProtectState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 106, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuProtectState.setStatus('current')
cpuProtectTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 106, 2), )
if mibBuilder.loadTexts: cpuProtectTable.setStatus('current')
cpuProtectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 106, 2, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "cpuProtectType"))
if mibBuilder.loadTexts: cpuProtectEntry.setStatus('current')
cpuProtectType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 106, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("arp", 1), ("bpdu", 2), ("icmp", 3), ("igmp", 4), ("snmp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuProtectType.setStatus('current')
cpuProtectPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 106, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuProtectPPS.setStatus('current')
ipv4smtpState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 40, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4smtpState.setStatus('obsolete')
ipv4smtpServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 40, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4smtpServerAddr.setStatus('obsolete')
ipv4smtpServerPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 40, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4smtpServerPort.setStatus('obsolete')
ipv4smtpSelfMailAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 40, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4smtpSelfMailAddr.setStatus('obsolete')
ipv4smtpRecvMailAddrTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 40, 5), )
if mibBuilder.loadTexts: ipv4smtpRecvMailAddrTable.setStatus('current')
ipv4smtpRecvMailAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 40, 5, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "ipv4smtpRecvMailAddrIndex"))
if mibBuilder.loadTexts: ipv4smtpRecvMailAddrEntry.setStatus('current')
ipv4smtpRecvMailAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 40, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv4smtpRecvMailAddrIndex.setStatus('current')
ipv4smtpRecvMailAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 40, 5, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4smtpRecvMailAddr.setStatus('current')
ipv4smtpRecvMailAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 40, 5, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipv4smtpRecvMailAddrStatus.setStatus('current')
sysSMTPServerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 40, 6))
smtpState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 40, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpState.setStatus('current')
smtpServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 40, 6, 2), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpServerAddr.setStatus('current')
smtpServerAddrType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 40, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpServerAddrType.setStatus('current')
smtpServerAddrInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 40, 6, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpServerAddrInterfaceName.setStatus('current')
smtpServerPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 40, 6, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpServerPort.setStatus('current')
smtpSelfMailAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 40, 6, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpSelfMailAddr.setStatus('current')
smtpRecvMailAddrTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 40, 6, 7), )
if mibBuilder.loadTexts: smtpRecvMailAddrTable.setStatus('current')
smtpRecvMailAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 40, 6, 7, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "smtpRecvMailAddrIndex"))
if mibBuilder.loadTexts: smtpRecvMailAddrEntry.setStatus('current')
smtpRecvMailAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 40, 6, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpRecvMailAddrIndex.setStatus('current')
smtpRecvMailAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 40, 6, 7, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpRecvMailAddr.setStatus('current')
smtpRecvMailAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 40, 6, 7, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpRecvMailAddrStatus.setStatus('current')
igmpMulticastVlanStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 27, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpMulticastVlanStatus.setStatus('current')
igmpMulticastVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 27, 2), )
if mibBuilder.loadTexts: igmpMulticastVlanTable.setStatus('current')
igmpMulticastVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 27, 2, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "igmpMulticastVlanid"))
if mibBuilder.loadTexts: igmpMulticastVlanEntry.setStatus('current')
igmpMulticastVlanid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 27, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpMulticastVlanid.setStatus('current')
igmpMulticastVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 27, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpMulticastVlanName.setStatus('current')
igmpMulticastVlanSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 27, 2, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpMulticastVlanSourcePort.setStatus('current')
igmpMulticastVlanMemberPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 27, 2, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpMulticastVlanMemberPort.setStatus('current')
igmpMulticastVlanTagMemberPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 27, 2, 1, 5), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpMulticastVlanTagMemberPort.setStatus('current')
igmpMulticastVlanUntaggedSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 27, 2, 1, 6), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpMulticastVlanUntaggedSourcePort.setStatus('current')
igmpMulticastVlanState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 27, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpMulticastVlanState.setStatus('current')
igmpMulticastVlanReplaceSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 27, 2, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpMulticastVlanReplaceSourceIp.setStatus('current')
igmpMulticastVlanRemapPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 27, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpMulticastVlanRemapPriority.setStatus('current')
igmpMulticastVlanReplacePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 27, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpMulticastVlanReplacePriority.setStatus('current')
igmpMulticastVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 27, 2, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpMulticastVlanRowStatus.setStatus('current')
igmpMulticastVlanGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 27, 3), )
if mibBuilder.loadTexts: igmpMulticastVlanGroupTable.setStatus('current')
igmpMulticastVlanGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 27, 3, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "igmpMulticastVlanGroupVid"), (0, "DGS-1210-28XSME-BX", "igmpMulticastVlanGroupFromIp"), (0, "DGS-1210-28XSME-BX", "igmpMulticastVlanGroupToIp"))
if mibBuilder.loadTexts: igmpMulticastVlanGroupEntry.setStatus('current')
igmpMulticastVlanGroupVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 27, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpMulticastVlanGroupVid.setStatus('current')
igmpMulticastVlanGroupFromIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 27, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpMulticastVlanGroupFromIp.setStatus('current')
igmpMulticastVlanGroupToIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 27, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpMulticastVlanGroupToIp.setStatus('current')
igmpMulticastVlanGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 27, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpMulticastVlanGroupStatus.setStatus('current')
multicastVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 27, 4), )
if mibBuilder.loadTexts: multicastVlanTable.setStatus('current')
multicastVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 27, 4, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "multicastVlanid"))
if mibBuilder.loadTexts: multicastVlanEntry.setStatus('current')
multicastVlanid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 27, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multicastVlanid.setStatus('current')
multicastVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 27, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: multicastVlanName.setStatus('current')
multicastVlanSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 27, 4, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastVlanSourcePort.setStatus('current')
multicastVlanMemberPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 27, 4, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastVlanMemberPort.setStatus('current')
multicastVlanTagMemberPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 27, 4, 1, 5), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastVlanTagMemberPort.setStatus('current')
multicastVlanUntaggedSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 27, 4, 1, 6), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastVlanUntaggedSourcePort.setStatus('current')
multicastVlanState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 27, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastVlanState.setStatus('current')
multicastVlanIgmpReplaceSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 27, 4, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastVlanIgmpReplaceSourceIp.setStatus('current')
multicastVlanMldReplaceSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 27, 4, 1, 9), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastVlanMldReplaceSourceIp.setStatus('current')
multicastVlanRemapPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 27, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastVlanRemapPriority.setStatus('current')
multicastVlanReplacePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 27, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastVlanReplacePriority.setStatus('current')
multicastVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 27, 4, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: multicastVlanRowStatus.setStatus('current')
multicastVlanGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 27, 5), )
if mibBuilder.loadTexts: multicastVlanGroupTable.setStatus('current')
multicastVlanGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 27, 5, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "multicastVlanGroupVid"), (0, "DGS-1210-28XSME-BX", "multicastVlanGroupIpType"), (0, "DGS-1210-28XSME-BX", "multicastVlanGroupFromIp"), (0, "DGS-1210-28XSME-BX", "multicastVlanGroupToIp"))
if mibBuilder.loadTexts: multicastVlanGroupEntry.setStatus('current')
multicastVlanGroupVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 27, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multicastVlanGroupVid.setStatus('current')
multicastVlanGroupIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 27, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multicastVlanGroupIpType.setStatus('current')
multicastVlanGroupFromIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 27, 5, 1, 3), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multicastVlanGroupFromIp.setStatus('current')
multicastVlanGroupToIp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 27, 5, 1, 4), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multicastVlanGroupToIp.setStatus('current')
multicastVlanGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 27, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: multicastVlanGroupStatus.setStatus('current')
pppoeGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 98, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoeGlobalState.setStatus('current')
pppoePortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 98, 2), )
if mibBuilder.loadTexts: pppoePortTable.setStatus('current')
pppoePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 98, 2, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "pppoePortIndex"))
if mibBuilder.loadTexts: pppoePortEntry.setStatus('current')
pppoePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 98, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoePortIndex.setStatus('current')
pppoePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 98, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoePortState.setStatus('current')
pppoePortCircuitIDType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 98, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("ip", 0), ("mac", 1), ("udf", 2), ("vendor2", 3), ("vendor3", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoePortCircuitIDType.setStatus('current')
pppoePortUDFString = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 98, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoePortUDFString.setStatus('current')
pppoePortCircuitIDVendor3String = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 98, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoePortCircuitIDVendor3String.setStatus('current')
pppoePortRemoteIDType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 98, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("vendor2", 1), ("vendor3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoePortRemoteIDType.setStatus('current')
pppoePortRemoteIDVendor3String = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 98, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoePortRemoteIDVendor3String.setStatus('current')
rmonGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 22, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonGlobalState.setStatus('current')
rmonStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 22, 2))
rmonHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 22, 3))
rmonAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 22, 4))
rmonEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 22, 5))
rmonStatsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 22, 2, 1), )
if mibBuilder.loadTexts: rmonStatsTable.setStatus('current')
rmonStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 22, 2, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "rmonStatsIndex"))
if mibBuilder.loadTexts: rmonStatsEntry.setStatus('current')
rmonStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 22, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonStatsIndex.setStatus('current')
rmonStatsDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 22, 2, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonStatsDataSource.setStatus('current')
rmonStatsOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 22, 2, 1, 1, 3), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonStatsOwner.setStatus('current')
rmonStatsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 22, 2, 1, 1, 4), RmonStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonStatsStatus.setStatus('current')
rmonHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 22, 3, 1), )
if mibBuilder.loadTexts: rmonHistoryTable.setStatus('current')
rmonHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 22, 3, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "rmonHistoryIndex"))
if mibBuilder.loadTexts: rmonHistoryEntry.setStatus('current')
rmonHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 22, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonHistoryIndex.setStatus('current')
rmonHistoryDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 22, 3, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryDataSource.setStatus('current')
rmonHistoryBucketsRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 22, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryBucketsRequested.setStatus('current')
rmonHistoryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 22, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(1800)).setUnits('Seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryInterval.setStatus('current')
rmonHistoryOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 22, 3, 1, 1, 5), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryOwner.setStatus('current')
rmonHistoryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 22, 3, 1, 1, 6), RmonStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonHistoryStatus.setStatus('current')
rmonAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 22, 4, 1), )
if mibBuilder.loadTexts: rmonAlarmTable.setStatus('current')
rmonAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 22, 4, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "rmonAlarmIndex"))
if mibBuilder.loadTexts: rmonAlarmEntry.setStatus('current')
rmonAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 22, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonAlarmIndex.setStatus('current')
rmonAlarmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 22, 4, 1, 1, 2), Integer32()).setUnits('Seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmInterval.setStatus('current')
rmonAlarmVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 22, 4, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmVariable.setStatus('current')
rmonAlarmSampleType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 22, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absoluteValue", 1), ("deltaValue", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmSampleType.setStatus('current')
rmonAlarmRisingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 22, 4, 1, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmRisingThreshold.setStatus('current')
rmonAlarmFallingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 22, 4, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmFallingThreshold.setStatus('current')
rmonAlarmRisingEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 22, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmRisingEventIndex.setStatus('current')
rmonAlarmFallingEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 22, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmFallingEventIndex.setStatus('current')
rmonAlarmOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 22, 4, 1, 1, 9), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmOwner.setStatus('current')
rmonAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 22, 4, 1, 1, 10), RmonStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonAlarmStatus.setStatus('current')
rmonEventTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 22, 5, 1), )
if mibBuilder.loadTexts: rmonEventTable.setStatus('current')
rmonEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 22, 5, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "rmonEventIndex"))
if mibBuilder.loadTexts: rmonEventEntry.setStatus('current')
rmonEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 22, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonEventIndex.setStatus('current')
rmonEventDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 22, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventDescription.setStatus('current')
rmonEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 22, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("log", 2), ("snmptrap", 3), ("logandtrap", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventType.setStatus('current')
rmonEventCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 22, 5, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventCommunity.setStatus('current')
rmonEventOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 22, 5, 1, 1, 5), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventOwner.setStatus('current')
rmonEventStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 22, 5, 1, 1, 6), RmonStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rmonEventStatus.setStatus('current')
neighborTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 50, 1), )
if mibBuilder.loadTexts: neighborTable.setStatus('current')
neighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 50, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "neighborIfindex"), (0, "DGS-1210-28XSME-BX", "neighborIPv6Addr"), (0, "DGS-1210-28XSME-BX", "neighborMACAddr"))
if mibBuilder.loadTexts: neighborEntry.setStatus('current')
neighborIfindex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 50, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborIfindex.setStatus('current')
neighborIPv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 50, 1, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborIPv6Addr.setStatus('current')
neighborMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 50, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborMACAddr.setStatus('current')
neighborType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 50, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborType.setStatus('current')
neighborCacheState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 50, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("static", 1), ("reachable", 2), ("incomplete", 3), ("stale", 4), ("delay", 5), ("probe", 6), ("notinservice", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborCacheState.setStatus('current')
neighborActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 50, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborActiveStatus.setStatus('current')
neighborRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 50, 1, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: neighborRowStatus.setStatus('current')
dhcpv6RelayControl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 86, 1))
dhcpv6RelayManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 86, 2))
dhcpv6RelayOption37 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 86, 3))
dhcpv6RelayOption38 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 86, 4))
dhcpv6RelayOption18 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 86, 5))
dhcpv6RelayState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 86, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayState.setStatus('current')
dhcpv6RelayHopCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 86, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayHopCount.setStatus('current')
dhcpv6RelayInterfaceSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 86, 2, 1), )
if mibBuilder.loadTexts: dhcpv6RelayInterfaceSettingsTable.setStatus('current')
dhcpv6RelayInterfaceSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 86, 2, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "dhcpv6RelayInterface"), (0, "DGS-1210-28XSME-BX", "dhcpv6RelayServerIP"))
if mibBuilder.loadTexts: dhcpv6RelayInterfaceSettingsEntry.setStatus('current')
dhcpv6RelayInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 86, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpv6RelayInterface.setStatus('current')
dhcpv6RelayServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 86, 2, 1, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpv6RelayServerIP.setStatus('current')
dhcpv6RelayInterfaceSettingsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 86, 2, 1, 1, 99), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpv6RelayInterfaceSettingsRowStatus.setStatus('current')
dhcpv6RelayOption37State = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 86, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayOption37State.setStatus('current')
dhcpv6RelayOption37CheckState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 86, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayOption37CheckState.setStatus('current')
dhcpv6RelayOption37RemoteIDType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 86, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("cid-with-user-define", 1), ("user-define", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayOption37RemoteIDType.setStatus('current')
dhcpv6RelayOption37RemoteID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 86, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayOption37RemoteID.setStatus('current')
dhcpv6RelayOpt38Table = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 86, 4, 1), )
if mibBuilder.loadTexts: dhcpv6RelayOpt38Table.setStatus('current')
dhcpv6RelayOpt38Entry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 86, 4, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "dhcpv6RelayOpt38PortIndex"))
if mibBuilder.loadTexts: dhcpv6RelayOpt38Entry.setStatus('current')
dhcpv6RelayOpt38PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 86, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpv6RelayOpt38PortIndex.setStatus('current')
dhcpv6RelayOpt38PortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 86, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayOpt38PortState.setStatus('current')
dhcpv6RelayOpt38PortType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 86, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("user-defined", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayOpt38PortType.setStatus('current')
dhcpv6RelayOpt38PortID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 86, 4, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayOpt38PortID.setStatus('current')
dhcpv6RelayOption18State = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 86, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayOption18State.setStatus('current')
dhcpv6RelayOption18CheckState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 86, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayOption18CheckState.setStatus('current')
dhcpv6RelayOption18InterfaceIDType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 86, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("cid", 1), ("vendor1", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpv6RelayOption18InterfaceIDType.setStatus('current')
macBasedCtrlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 54, 1))
macBasedCtrlState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 54, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macBasedCtrlState.setStatus('current')
macBasedMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 54, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("radius", 1), ("local", 2))).clone('radius')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macBasedMethod.setStatus('current')
macBasedRadiusPassword = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 54, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macBasedRadiusPassword.setStatus('current')
macBasedRadiusAuthStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 54, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macBasedRadiusAuthStatus.setStatus('current')
macBasedLocalAuthStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 54, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macBasedLocalAuthStatus.setStatus('current')
macBasedTrapStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 54, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macBasedTrapStatus.setStatus('current')
macBasedLogStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 54, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macBasedLogStatus.setStatus('current')
macBasedMaxUsr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 54, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macBasedMaxUsr.setStatus('current')
macBasedPortCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 54, 1, 11), )
if mibBuilder.loadTexts: macBasedPortCtrlTable.setStatus('current')
macBasedPortCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 54, 1, 11, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "macBasedPortCtrlIndex"))
if mibBuilder.loadTexts: macBasedPortCtrlEntry.setStatus('current')
macBasedPortCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 54, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: macBasedPortCtrlIndex.setStatus('current')
macBasedPortCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 54, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macBasedPortCtrlState.setStatus('current')
macBasedPortCtrlAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 54, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macBasedPortCtrlAgingTime.setStatus('current')
macBasedPortCtrlBlockTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 54, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macBasedPortCtrlBlockTime.setStatus('current')
macBasedCtrlLocalGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 54, 2))
macBasedCtrlLocalTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 54, 2, 1), )
if mibBuilder.loadTexts: macBasedCtrlLocalTable.setStatus('current')
macBasedCtrlLocalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 54, 2, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "macBasedCtrlLocalMacAddress"), (0, "DGS-1210-28XSME-BX", "macBasedCtrlLocalVID"))
if mibBuilder.loadTexts: macBasedCtrlLocalEntry.setStatus('current')
macBasedCtrlLocalMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 54, 2, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macBasedCtrlLocalMacAddress.setStatus('current')
macBasedCtrlLocalVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 54, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: macBasedCtrlLocalVID.setStatus('current')
macBasedCtrlLocalVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 54, 2, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: macBasedCtrlLocalVlanName.setStatus('current')
macBasedCtrlLocalRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 54, 2, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macBasedCtrlLocalRowStatus.setStatus('current')
macBasedCtrlAuthGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 54, 3))
macBasedCtrlAuthTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 54, 3, 1), )
if mibBuilder.loadTexts: macBasedCtrlAuthTable.setStatus('current')
macBasedCtrlAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 54, 3, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "macBasedCtrlAuthPort"), (0, "DGS-1210-28XSME-BX", "macBasedCtrlAuthMacAddress"), (0, "DGS-1210-28XSME-BX", "macBasedCtrlAuthRxVID"))
if mibBuilder.loadTexts: macBasedCtrlAuthEntry.setStatus('current')
macBasedCtrlAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 54, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: macBasedCtrlAuthPort.setStatus('current')
macBasedCtrlAuthMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 54, 3, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macBasedCtrlAuthMacAddress.setStatus('current')
macBasedCtrlAuthRxVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 54, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: macBasedCtrlAuthRxVID.setStatus('current')
macBasedCtrlAuthState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 54, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("authenticating", 1), ("authenticated", 2), ("blocked", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: macBasedCtrlAuthState.setStatus('current')
macBasedCtrlAuthVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 54, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macBasedCtrlAuthVID.setStatus('current')
macBasedCtrlAuthPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 54, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macBasedCtrlAuthPriority.setStatus('current')
macBasedCtrlAuthAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 54, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macBasedCtrlAuthAgingTime.setStatus('current')
macBasedCtrlAuthBlockTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 54, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macBasedCtrlAuthBlockTime.setStatus('current')
wacAuthCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 55, 1))
wacStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 55, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wacStatus.setStatus('current')
wacVirtualIPv4 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 55, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wacVirtualIPv4.setStatus('current')
wacVirtualIPv6 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 55, 1, 3), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wacVirtualIPv6.setStatus('current')
wacRedirPath = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 55, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wacRedirPath.setStatus('current')
wacClrRedirPath = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 55, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wacClrRedirPath.setStatus('current')
wacRadiusAuth = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 55, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wacRadiusAuth.setStatus('current')
waclocalAuth = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 55, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waclocalAuth.setStatus('current')
wacAuthMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 55, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("radius", 1), ("local", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wacAuthMethod.setStatus('current')
wacAuthPortMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 55, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("http", 1), ("https", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wacAuthPortMethod.setStatus('current')
wacAuthPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 55, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wacAuthPort.setStatus('current')
wacUsrCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 55, 2))
wacUsrCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 55, 2, 1), )
if mibBuilder.loadTexts: wacUsrCtrlTable.setStatus('current')
wacUsrCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 55, 2, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "authUserName"))
if mibBuilder.loadTexts: wacUsrCtrlEntry.setStatus('current')
authUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 55, 2, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: authUserName.setStatus('current')
authUserVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 55, 2, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authUserVID.setStatus('current')
authUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 55, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authUserPassword.setStatus('current')
authUserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 55, 2, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: authUserStatus.setStatus('current')
wacPortCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 55, 3))
wacPortCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 55, 3, 1), )
if mibBuilder.loadTexts: wacPortCtrlTable.setStatus('current')
wacPortCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 55, 3, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "wacPortCtrlIndex"))
if mibBuilder.loadTexts: wacPortCtrlEntry.setStatus('current')
wacPortCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 55, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wacPortCtrlIndex.setStatus('current')
wacPortCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 55, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wacPortCtrlState.setStatus('current')
wacPortCtrlAgetime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 55, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wacPortCtrlAgetime.setStatus('current')
wacPortCtrlBlocktime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 55, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wacPortCtrlBlocktime.setStatus('current')
wacAuthState = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 55, 4))
wacAuthStateTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 55, 4, 1), )
if mibBuilder.loadTexts: wacAuthStateTable.setStatus('current')
wacAuthStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 55, 4, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "wacAuthStatePort"), (0, "DGS-1210-28XSME-BX", "wacAuthStateMac"), (0, "DGS-1210-28XSME-BX", "wacAuthStateRXVID"))
if mibBuilder.loadTexts: wacAuthStateEntry.setStatus('current')
wacAuthStatePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 55, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wacAuthStatePort.setStatus('current')
wacAuthStateMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 55, 4, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wacAuthStateMac.setStatus('current')
wacAuthStateRXVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 55, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wacAuthStateRXVID.setStatus('current')
wacAuthStateflag = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 55, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wacAuthStateflag.setStatus('current')
wacAuthStateVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 55, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wacAuthStateVID.setStatus('current')
wacAuthAssignPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 55, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wacAuthAssignPriority.setStatus('current')
wacAuthStateAgetime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 55, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wacAuthStateAgetime.setStatus('current')
wacAuthStateRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 55, 4, 1, 1, 99), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wacAuthStateRowStatus.setStatus('current')
macBasedVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 70, 1), )
if mibBuilder.loadTexts: macBasedVlanTable.setStatus('current')
macBasedVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 70, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "vlanMacMapIndex"))
if mibBuilder.loadTexts: macBasedVlanEntry.setStatus('current')
vlanMacMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 70, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMacMapIndex.setStatus('current')
vlanMacMapAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 70, 1, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMacMapAddr.setStatus('current')
vlanMacMapAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 70, 1, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMacMapAddrMask.setStatus('current')
vlanMacMapVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 70, 1, 1, 4), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMacMapVid.setStatus('current')
vlanMacStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 70, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMacStatus.setStatus('current')
vlanMacType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 70, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMacType.setStatus('current')
vlanMacMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 70, 1, 1, 99), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMacMapRowStatus.setStatus('current')
macBasedVlanMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 70, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("single", 1), ("range", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macBasedVlanMethod.setStatus('current')
sfpVendorInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 104, 1), )
if mibBuilder.loadTexts: sfpVendorInfoTable.setStatus('current')
sfpVendorInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 104, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "sfpPortIndex"))
if mibBuilder.loadTexts: sfpVendorInfoEntry.setStatus('current')
sfpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 104, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpPortIndex.setStatus('current')
sfpConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 104, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConnectorType.setStatus('current')
sfpTranceiverCode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 104, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpTranceiverCode.setStatus('current')
sfpBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 104, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpBaudRate.setStatus('current')
sfpVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 104, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVendorName.setStatus('current')
sfpVendorOui = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 104, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVendorOui.setStatus('current')
sfpVendorPn = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 104, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVendorPn.setStatus('current')
sfpVendorRev = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 104, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVendorRev.setStatus('current')
sfpWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 104, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpWavelength.setStatus('current')
sfpVendorSn = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 104, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVendorSn.setStatus('current')
sfpDateCode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 104, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDateCode.setStatus('current')
ddmCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 105, 1))
ddmInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 105, 2))
ddmPowerUnit = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 105, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("mw", 0), ("dbm", 1))).clone('mw')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddmPowerUnit.setStatus('current')
ddmActionMgmtTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 105, 1, 2), )
if mibBuilder.loadTexts: ddmActionMgmtTable.setStatus('obsolete')
ddmActionMgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 105, 1, 2, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "ddmActionPort"))
if mibBuilder.loadTexts: ddmActionMgmtEntry.setStatus('obsolete')
ddmActionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 105, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmActionPort.setStatus('current')
ddmActionState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 105, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddmActionState.setStatus('obsolete')
ddmActionShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 105, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("alarm", 1), ("warning", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddmActionShutdown.setStatus('obsolete')
ddmThresholdMgmtTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 105, 1, 3), )
if mibBuilder.loadTexts: ddmThresholdMgmtTable.setStatus('current')
ddmThresholdMgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 105, 1, 3, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "ddmThresholdPort"), (0, "DGS-1210-28XSME-BX", "ddmThresholdType"))
if mibBuilder.loadTexts: ddmThresholdMgmtEntry.setStatus('current')
ddmThresholdPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 105, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmThresholdPort.setStatus('current')
ddmThresholdType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 105, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("temperature", 0), ("voltage", 1), ("bias", 2), ("txPower", 3), ("rxPower", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmThresholdType.setStatus('current')
ddmHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 105, 1, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddmHighAlarm.setStatus('current')
ddmLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 105, 1, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddmLowAlarm.setStatus('current')
ddmHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 105, 1, 3, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddmHighWarning.setStatus('current')
ddmLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 105, 1, 3, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ddmLowWarning.setStatus('current')
ddmStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 105, 2, 1))
ddmStatusTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 105, 2, 1, 1), )
if mibBuilder.loadTexts: ddmStatusTable.setStatus('current')
ddmStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 105, 2, 1, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "ddmStatusPort"))
if mibBuilder.loadTexts: ddmStatusEntry.setStatus('current')
ddmStatusPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 105, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmStatusPort.setStatus('current')
ddmTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 105, 2, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTemperature.setStatus('current')
ddmVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 105, 2, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmVoltage.setStatus('current')
ddmBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 105, 2, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmBiasCurrent.setStatus('current')
ddmTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 105, 2, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmTxPower.setStatus('current')
ddmRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 105, 2, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddmRxPower.setStatus('current')
ftpFwTable = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 107, 1))
ftpConfigTable = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 107, 2))
ftpFwServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 107, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpFwServerIpAddress.setStatus('obsolete')
ftpFwImageFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 107, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpFwImageFileName.setStatus('obsolete')
ftpFwUsername = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 107, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpFwUsername.setStatus('obsolete')
ftpFwPassword = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 107, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpFwPassword.setStatus('obsolete')
ftpFwPath = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 107, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpFwPath.setStatus('obsolete')
ftpFwPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 107, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpFwPort.setStatus('obsolete')
ftpFwImageID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 107, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("imageID1", 1), ("imageID2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpFwImageID.setStatus('current')
ftpFwFTPOperation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 107, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("download", 1), ("upload", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpFwFTPOperation.setStatus('obsolete')
ftpFwFTPOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 107, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("fail", 2), ("progressing", 3), ("transmit", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpFwFTPOperationStatus.setStatus('obsolete')
ftpConfigServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 107, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpConfigServerIpAddress.setStatus('obsolete')
ftpConfigFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 107, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpConfigFileName.setStatus('obsolete')
ftpConfigUsername = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 107, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpConfigUsername.setStatus('obsolete')
ftpConfigPassword = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 107, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpConfigPassword.setStatus('obsolete')
ftpConfigPath = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 107, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpConfigPath.setStatus('obsolete')
ftpConfigPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 107, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpConfigPort.setStatus('obsolete')
ftpConfigConfigID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 107, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("configID1", 1), ("configID2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpConfigConfigID.setStatus('current')
ftpConfigFTPOperation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 107, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("download", 1), ("upload", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpConfigFTPOperation.setStatus('obsolete')
ftpConfigFTPOperationStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 107, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("fail", 2), ("progressing", 3), ("transmit", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpConfigFTPOperationStatus.setStatus('obsolete')
erpsState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 108, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsState.setStatus('current')
erpsLog = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 108, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsLog.setStatus('current')
erpsTrap = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 108, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsTrap.setStatus('current')
erpsInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 108, 4), )
if mibBuilder.loadTexts: erpsInfoTable.setStatus('current')
erpsInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 108, 4, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "erpsRAPSVLANID"))
if mibBuilder.loadTexts: erpsInfoEntry.setStatus('current')
erpsRAPSVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 108, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsRAPSVLANID.setStatus('current')
erpsRingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 108, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsRingStatus.setStatus('current')
erpsAdminWestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 108, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1))).clone(namedValues=NamedValues(("virtual_channle", -1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsAdminWestPort.setStatus('current')
erpsAdminWestPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 108, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fowarding", 1), ("blocking", 2), ("signal-fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsAdminWestPortState.setStatus('current')
erpsAdminEastPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 108, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1))).clone(namedValues=NamedValues(("virtual_channle", -1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsAdminEastPort.setStatus('current')
erpsAdminEastPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 108, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fowarding", 1), ("blocking", 2), ("signal-fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsAdminEastPortState.setStatus('current')
erpsAdminRPLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 108, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("west", 1), ("east", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsAdminRPLPort.setStatus('current')
erpsRPLOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 108, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsRPLOwner.setStatus('current')
erpsProtectedAddVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 108, 4, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsProtectedAddVlanList.setStatus('current')
erpsProtectedDelVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 108, 4, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsProtectedDelVlanList.setStatus('current')
erpsProtectedVlanList1k = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 108, 4, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsProtectedVlanList1k.setStatus('current')
erpsProtectedVlanList2k = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 108, 4, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsProtectedVlanList2k.setStatus('current')
erpsProtectedVlanList3k = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 108, 4, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsProtectedVlanList3k.setStatus('current')
erpsProtectedVlanList4k = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 108, 4, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsProtectedVlanList4k.setStatus('current')
erpsRingMEL = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 108, 4, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsRingMEL.setStatus('current')
erpsHoldoffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 108, 4, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsHoldoffTime.setStatus('current')
erpsGuardTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 108, 4, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsGuardTime.setStatus('current')
erpsWTRTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 108, 4, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsWTRTime.setStatus('current')
erpsRevertive = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 108, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsRevertive.setStatus('current')
erpsCurrentRingState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 108, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("deactivated", 0), ("idle", 1), ("protection", 2), ("manualswitch", 3), ("forcedswitch", 4), ("pending", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsCurrentRingState.setStatus('current')
erpsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 108, 4, 1, 21), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: erpsRowStatus.setStatus('current')
erpsSubRingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 108, 5), )
if mibBuilder.loadTexts: erpsSubRingTable.setStatus('current')
erpsSubRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 108, 5, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "erpsSubRingRAPSVLANID"), (0, "DGS-1210-28XSME-BX", "erpsSubRingVlanID"))
if mibBuilder.loadTexts: erpsSubRingEntry.setStatus('current')
erpsSubRingRAPSVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 108, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsSubRingRAPSVLANID.setStatus('current')
erpsSubRingVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 108, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: erpsSubRingVlanID.setStatus('current')
erpsSubRingTCPropagationState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 108, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: erpsSubRingTCPropagationState.setStatus('current')
erpsSubRingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 108, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: erpsSubRingRowStatus.setStatus('current')
swLedPanelstate = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 121, 1))
swLedInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 121, 1, 1), )
if mibBuilder.loadTexts: swLedInfoTable.setStatus('current')
swLedInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 121, 1, 1, 1), ).setIndexNames((0, "DGS-1210-28XSME-BX", "swLedInfoUnitId"))
if mibBuilder.loadTexts: swLedInfoEntry.setStatus('current')
swLedInfoUnitId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 121, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swLedInfoUnitId.setStatus('current')
swLedInfoFrontPanelLedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 76, 39, 1, 121, 1, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swLedInfoFrontPanelLedStatus.setStatus('current')
mibBuilder.exportSymbols("DGS-1210-28XSME-BX", syslogServSeverity=syslogServSeverity, erpsGuardTime=erpsGuardTime, aclPacketRuleOffsetValue4=aclPacketRuleOffsetValue4, cpuFilterL3RuleTcpAckBit=cpuFilterL3RuleTcpAckBit, lldpXdot1LocProtocolTable=lldpXdot1LocProtocolTable, dlink_DGS12XXSeriesProd=dlink_DGS12XXSeriesProd, ftpFwPassword=ftpFwPassword, qosDefaultUserPriPortIndex=qosDefaultUserPriPortIndex, protocolGroupEntry=protocolGroupEntry, swTimeRangeEndMonth=swTimeRangeEndMonth, aclL3RuleDstIpAddrMask=aclL3RuleDstIpAddrMask, dhcpv6RelayInterfaceSettingsEntry=dhcpv6RelayInterfaceSettingsEntry, aclL3RuleProfileNo=aclL3RuleProfileNo, aacLoginMethod2=aacLoginMethod2, iPv4aacServerIndex=iPv4aacServerIndex, lldpXdot3PortConfigTLVsTxEnable=lldpXdot3PortConfigTLVsTxEnable, cpuFilterv6L3RulePortList=cpuFilterv6L3RulePortList, cpuFilterL3RuleDscp=cpuFilterL3RuleDscp, mulIfV6AddressEntry=mulIfV6AddressEntry, aclProfileArpSenderIpAddrMask=aclProfileArpSenderIpAddrMask, sysLBDStateEnable=sysLBDStateEnable, ipv4dhcpOption12Status=ipv4dhcpOption12Status, aacServerTimeout=aacServerTimeout, sysDdpGeneralReportOnOff=sysDdpGeneralReportOnOff, companyLLDPSetting=companyLLDPSetting, aclProfileEntry=aclProfileEntry, tftpFwTargetGroup=tftpFwTargetGroup, sysBPDUAttackCtrlIndex=sysBPDUAttackCtrlIndex, companyDHCPv6Relay=companyDHCPv6Relay, snmpTrapCopperLinkUpDown=snmpTrapCopperLinkUpDown, snmpV3CommunityStatus=snmpV3CommunityStatus, ipv4multiIFInfo=ipv4multiIFInfo, snmpV3Trap=snmpV3Trap, ipv4sysSNTPDSTStartHour=ipv4sysSNTPDSTStartHour, companyLA=companyLA, impbDhcpSnoopingIpAddress=impbDhcpSnoopingIpAddress, mstMstiCurrentPortRole=mstMstiCurrentPortRole, qinqSystem=qinqSystem, mulifv6NSRetransmitTime=mulifv6NSRetransmitTime, rmonEventDescription=rmonEventDescription, sysBPDUAttackRecoverTime=sysBPDUAttackRecoverTime, ftpConfigFileName=ftpConfigFileName, telnetsettingManagementOnOff=telnetsettingManagementOnOff, aclL2RuleSrcMacAddr=aclL2RuleSrcMacAddr, mstMstiPortEntry=mstMstiPortEntry, qosTOSType05=qosTOSType05, impbSettingEntry=impbSettingEntry, igsVlanRouterVlanId=igsVlanRouterVlanId, lldpXdot3RemPortTable=lldpXdot3RemPortTable, qosDiffServType05=qosDiffServType05, rmonHistoryTable=rmonHistoryTable, impbPortDHCPv6VlanList4k=impbPortDHCPv6VlanList4k, dlinkGreenLEDShutoffState=dlinkGreenLEDShutoffState, dhcpv6RelayOption37RemoteIDType=dhcpv6RelayOption37RemoteIDType, aclL3RuleTcpUdpSrcPortMask=aclL3RuleTcpUdpSrcPortMask, sysSNTPDSTOffset=sysSNTPDSTOffset, lldpXdot1ConfigPortVlanEntry=lldpXdot1ConfigPortVlanEntry, cpuFilterProfileIPProtocol=cpuFilterProfileIPProtocol, aRPSpoofPreventRowStatus=aRPSpoofPreventRowStatus, sysPortCtrlFlowControlOper=sysPortCtrlFlowControlOper, sysSNTPSecondInterfaceName=sysSNTPSecondInterfaceName, sysBPDUAttackPortMode=sysBPDUAttackPortMode, staticAutoLearningList=staticAutoLearningList, qinqGlobalStatus=qinqGlobalStatus, doSCtrlState=doSCtrlState, aclv6L3RuleRateLimit=aclv6L3RuleRateLimit, dhcpServerScreenEnableVlanlist=dhcpServerScreenEnableVlanlist, ipv4sysSNTPDSTOffset=ipv4sysSNTPDSTOffset, trafficCtrlActionMode=trafficCtrlActionMode, aacServerInfoTable=aacServerInfoTable, mldsHostTableVLANID=mldsHostTableVLANID, limitIpMulticastProfileName=limitIpMulticastProfileName, protocolGroupNameEntry=protocolGroupNameEntry, securitySSL=securitySSL, aclL3RuleSrcIpAddr=aclL3RuleSrcIpAddr, dhcpv6RelayState=dhcpv6RelayState, ipv4aclProfileIPProtocolMask=ipv4aclProfileIPProtocolMask, sysPortCtrlTable=sysPortCtrlTable, snmpTrapColdStart=snmpTrapColdStart, wacAuthStateRXVID=wacAuthStateRXVID, stpPortTable=stpPortTable, gvrpSettingsEntry=gvrpSettingsEntry, trustedHostRowStatus=trustedHostRowStatus, lldpXdot3LocMaxFrameSizeEntry=lldpXdot3LocMaxFrameSizeEntry, multicastVlanMldReplaceSourceIp=multicastVlanMldReplaceSourceIp, dhcpv6RelayOption37=dhcpv6RelayOption37, vlanTrunkSystem=vlanTrunkSystem, stpNewRootTrapStatus=stpNewRootTrapStatus, dhcpLocalRelaySettingsVLANID=dhcpLocalRelaySettingsVLANID, sysSNTPDSTEndMin=sysSNTPDSTEndMin, lldpXdot1RemProtocolEntry=lldpXdot1RemProtocolEntry, aacAccountingServiceShell=aacAccountingServiceShell, cosBandwidthCtrlPortIndex=cosBandwidthCtrlPortIndex, protocolGroupFrameType=protocolGroupFrameType, trustedHostTable=trustedHostTable, gvrpSettingsLeaveAllTime=gvrpSettingsLeaveAllTime, portSecIndex=portSecIndex, swAuthRadiusServerStatus=swAuthRadiusServerStatus, companyLimitIp=companyLimitIp, filterDHCPServerClientMacAddr=filterDHCPServerClientMacAddr, ddmTemperature=ddmTemperature, macBasedCtrlLocalEntry=macBasedCtrlLocalEntry, ipv4mulifMainOperStatus=ipv4mulifMainOperStatus, cpuFilterProfileDstMacAddrMask=cpuFilterProfileDstMacAddrMask, iPv4aacServerInfoEntry=iPv4aacServerInfoEntry, qosDiffServType62=qosDiffServType62, sysPortErrPortStatus=sysPortErrPortStatus, dot1qVlanAsyOnOff=dot1qVlanAsyOnOff, ipv4sysSNTPDSTEndHour=ipv4sysSNTPDSTEndHour, mldsVlanMulticastGroupMacAddress=mldsVlanMulticastGroupMacAddress, ipifName=ipifName, mstMstiInstanceIndex=mstMstiInstanceIndex, rmonAlarmVariable=rmonAlarmVariable, sysPortMediaTypeDateCode=sysPortMediaTypeDateCode, lldpXdot3RemPortAutoNegSupported=lldpXdot3RemPortAutoNegSupported, aclProfileType=aclProfileType, cpuFilterProfile=cpuFilterProfile, staticARPRowStatus=staticARPRowStatus, lldpXdot1ConfigProtoVlanEntry=lldpXdot1ConfigProtoVlanEntry, cpuFilterL2RuleVlanId=cpuFilterL2RuleVlanId, rmonStatsIndex=rmonStatsIndex, mldsHostTable=mldsHostTable, limitIpMulticastEntryTable=limitIpMulticastEntryTable, mstInstanceVlanMapped3k=mstInstanceVlanMapped3k, mldsVlanMulticastGroupIpAddress=mldsVlanMulticastGroupIpAddress, dlinkGreenSystemHibernation=dlinkGreenSystemHibernation, duplicateIP=duplicateIP, mstMstiForcePortState=mstMstiForcePortState, sysPortMediaTypeTable=sysPortMediaTypeTable, sshMacSuiteList=sshMacSuiteList, aclL2RuleEntry=aclL2RuleEntry, dhcpServerScreenLogSuppressDuration=dhcpServerScreenLogSuppressDuration, staticMcastEgressPorts=staticMcastEgressPorts, sysLocationName=sysLocationName, aclL2Rule1pPriority=aclL2Rule1pPriority, dot1qVlanUngisterMCFilterEntry=dot1qVlanUngisterMCFilterEntry, aacServerRetryCount=aacServerRetryCount, igsAccessAuth=igsAccessAuth, ipifV6AddressTable=ipifV6AddressTable, macBasedCtrlAuthRxVID=macBasedCtrlAuthRxVID, dot3azTable=dot3azTable, mldsVlanRouterTable=mldsVlanRouterTable, smtpRecvMailAddr=smtpRecvMailAddr, Ipv6Address=Ipv6Address, agentMEMutilizationIn5min=agentMEMutilizationIn5min, sysFirmwareVersion=sysFirmwareVersion, mulifMainIndex=mulifMainIndex, aclUdfOffsetMask3=aclUdfOffsetMask3, impbBlockListEntry=impbBlockListEntry, aclv6L3RuleTcpFinBit=aclv6L3RuleTcpFinBit, qosDefaultUserPriEntry=qosDefaultUserPriEntry, qosDiffServType51=qosDiffServType51, sysSNTPFirstType=sysSNTPFirstType, dhcpBOOTPRelayOption82RemoteIDType=dhcpBOOTPRelayOption82RemoteIDType, dlinkGreenSystemHibernationState=dlinkGreenSystemHibernationState, sysLBDVlanLoopIndex=sysLBDVlanLoopIndex, ipv4snmpV3HostAddress=ipv4snmpV3HostAddress, errorFrameSecondsThreshold=errorFrameSecondsThreshold, sslSecurityHttpStatus=sslSecurityHttpStatus, ipv4sysSNTPState=ipv4sysSNTPState, autoFdbEntry=autoFdbEntry, aclv6L3RuleTcpUrgBit=aclv6L3RuleTcpUrgBit, wacAuthStateflag=wacAuthStateflag, staticARPIP=staticARPIP, qosDiffServType40=qosDiffServType40, swAuthPortAccessControlEntry=swAuthPortAccessControlEntry, swAuthRadiusServerEntry=swAuthRadiusServerEntry, sysSNTPDSTRepeatStartWeekDay=sysSNTPDSTRepeatStartWeekDay, ipv4smtpRecvMailAddr=ipv4smtpRecvMailAddr, aacAccountingMethod1=aacAccountingMethod1, ipv4syslogServerGroup=ipv4syslogServerGroup, sysLBDVlanLoopEntry=sysLBDVlanLoopEntry, mstCistPortEntry=mstCistPortEntry, cpuFilterL2RuleSrcMacAddr=cpuFilterL2RuleSrcMacAddr, ipv4aclUdfOffsetMask2=ipv4aclUdfOffsetMask2, macBasedCtrlAuthPort=macBasedCtrlAuthPort, aclv6L3RuleDstIpAddr=aclv6L3RuleDstIpAddr, ftpConfigFTPOperationStatus=ftpConfigFTPOperationStatus, lldpXdot3RemPortAutoNegAdvertisedCap=lldpXdot3RemPortAutoNegAdvertisedCap, impbBindingtrap=impbBindingtrap, pppoePortTable=pppoePortTable, sysUser=sysUser, aclProfileDstPortMask=aclProfileDstPortMask, companyTimeRangeMgmt=companyTimeRangeMgmt, eoamDyingGaspEnable=eoamDyingGaspEnable, trafficCtrlTimeInterval=trafficCtrlTimeInterval, cosBandwidthCtrlSettings=cosBandwidthCtrlSettings, dhcpBOOTPRelayTimeThreshold=dhcpBOOTPRelayTimeThreshold, lldpPortConfigAdminStatus=lldpPortConfigAdminStatus, staticARPMac=staticARPMac, securityPortSecurity=securityPortSecurity, rmonHistoryDataSource=rmonHistoryDataSource, ipv4cpuFilterProfileDstIpAddrMask=ipv4cpuFilterProfileDstIpAddrMask, staticTable=staticTable, swTimeRangeFriday=swTimeRangeFriday, lldpXdot3LocPowerPairs=lldpXdot3LocPowerPairs, aacEnableMethodListIndex=aacEnableMethodListIndex, pppoePortIndex=pppoePortIndex, ipv4aclProfileSrcIpAddrMask=ipv4aclProfileSrcIpAddrMask, pppoePortCircuitIDVendor3String=pppoePortCircuitIDVendor3String, cpuFilterv6L3RuleICMPMessageType=cpuFilterv6L3RuleICMPMessageType, eoamIfIndex=eoamIfIndex, stpInstancePortTable=stpInstancePortTable, impbPortDHCPv6VlanList3k=impbPortDHCPv6VlanList3k, macBasedCtrlAuthTable=macBasedCtrlAuthTable, lldpXdot1LocProtoVlanSupported=lldpXdot1LocProtoVlanSupported, multicastVlanIgmpReplaceSourceIp=multicastVlanIgmpReplaceSourceIp, LldpPortNumber=LldpPortNumber, guestVlanName=guestVlanName, aRPSpoofPreventTable=aRPSpoofPreventTable, lldpPortConfigPortNum=lldpPortConfigPortNum, cpuFilterL3RuleEntry=cpuFilterL3RuleEntry, portSecFDBPermMac=portSecFDBPermMac, sysPortCtrlMediumType=sysPortCtrlMediumType, aclProfileStatus=aclProfileStatus, aacLoginMethodListEntry=aacLoginMethodListEntry, sysPortErrEntry=sysPortErrEntry, rmonEventOwner=rmonEventOwner, ipv4cpuFilterProfileSrcMacAddrMask=ipv4cpuFilterProfileSrcMacAddrMask, ddmLowAlarm=ddmLowAlarm, companyDHCPLocalRelay=companyDHCPLocalRelay, macBasedCtrlAuthAgingTime=macBasedCtrlAuthAgingTime, ipv4sysSNTPDSTEndMin=ipv4sysSNTPDSTEndMin, aacLoginMethodListRowStatus=aacLoginMethodListRowStatus, sysFirmwareInfomation=sysFirmwareInfomation, lldpXdot1RemProtoVlanId=lldpXdot1RemProtoVlanId, ipifv6DHCPStatus=ipifv6DHCPStatus, swAuthUserTable=swAuthUserTable, mulifV6AddressIpType=mulifV6AddressIpType, staticVlanBaseTable=staticVlanBaseTable, aacAPConsoleEnableMethod=aacAPConsoleEnableMethod, aclQosTable=aclQosTable, sysSNTPDSTRepeatEndMon=sysSNTPDSTRepeatEndMon, qosDefaultUserPri=qosDefaultUserPri, dhcpBOOTPRelayManagement=dhcpBOOTPRelayManagement, rmonAlarmEntry=rmonAlarmEntry, snmpV3UserEntry=snmpV3UserEntry, impbPortDHCPv6SetVlanList=impbPortDHCPv6SetVlanList, qosTOSType02=qosTOSType02, BridgeId=BridgeId, igsVlanQueryMaxResponseTime=igsVlanQueryMaxResponseTime, aclPacketRuleInVlanList=aclPacketRuleInVlanList, agentMEMutilizationIn5sec=agentMEMutilizationIn5sec, ftpFwImageFileName=ftpFwImageFileName, companyNeighbor=companyNeighbor, mstCistPortTable=mstCistPortTable, neighborActiveStatus=neighborActiveStatus, snmpV3UserPrivProtocolPassword=snmpV3UserPrivProtocolPassword, rmonEvent=rmonEvent, qinqVlanTranslationSVIDOperation=qinqVlanTranslationSVIDOperation, tftpFwTargetImageFileName=tftpFwTargetImageFileName, autoFdbTable=autoFdbTable, stpRootCost=stpRootCost, qosPriSetPortIndex=qosPriSetPortIndex)
mibBuilder.exportSymbols("DGS-1210-28XSME-BX", sysBPDUAttackPortStatus=sysBPDUAttackPortStatus, stpInstance=stpInstance, swAuthAuthConfigPortNumber=swAuthAuthConfigPortNumber, dot1qVlanEntry=dot1qVlanEntry, laPortChannelMemberList=laPortChannelMemberList, dhcpBOOTPRelayOption82CheckState=dhcpBOOTPRelayOption82CheckState, dhcpOption12Status=dhcpOption12Status, ipv4snmpV3HostTable=ipv4snmpV3HostTable, syslogServerGroup=syslogServerGroup, lldpXdot1ConfigProtocolTable=lldpXdot1ConfigProtocolTable, sfpVendorRev=sfpVendorRev, aacServerInterfaceName=aacServerInterfaceName, mldsVlanRouterVlanId=mldsVlanRouterVlanId, ipv4sysSNTPPollInterval=ipv4sysSNTPPollInterval, qosDiffServType39=qosDiffServType39, cosScheduleMechanism=cosScheduleMechanism, neighborIPv6Addr=neighborIPv6Addr, eoamReceivedRemoteLoopback=eoamReceivedRemoteLoopback, wacAuthAssignPriority=wacAuthAssignPriority, aclL3RuleVlanList=aclL3RuleVlanList, ipifV6AddressEntry=ipifV6AddressEntry, sysSNTPDSTMethod=sysSNTPDSTMethod, cpuFilterL3RuleICMPMessageType=cpuFilterL3RuleICMPMessageType, igmpMulticastVlanReplaceSourceIp=igmpMulticastVlanReplaceSourceIp, swAuthRadiusServerInterfaceName=swAuthRadiusServerInterfaceName, qosDiffServType22=qosDiffServType22, multicastVlanMemberPort=multicastVlanMemberPort, mstCistPortPriority=mstCistPortPriority, macBasedVlanTable=macBasedVlanTable, aacAccountingMethod2=aacAccountingMethod2, mstCistVlanMapped4k=mstCistVlanMapped4k, rmonAlarm=rmonAlarm, mstVlanMstiMappingEntry=mstVlanMstiMappingEntry, snmpV3UserAuthProtocol=snmpV3UserAuthProtocol, ddmInfo=ddmInfo, aclQosIPv6Addr=aclQosIPv6Addr, bandwidthCtrlSettings=bandwidthCtrlSettings, sslCipherSuiteList=sslCipherSuiteList, aclFlowMeterEntry=aclFlowMeterEntry, aclL3RuleAccessID=aclL3RuleAccessID, staticVlanBaseAutoLearnList4k=staticVlanBaseAutoLearnList4k, swTimeRangeSaturday=swTimeRangeSaturday, qinqVlanTranslationEntry=qinqVlanTranslationEntry, sysPortDescIndex=sysPortDescIndex, aclL3RuleTos=aclL3RuleTos, lldpXdot1LocTable=lldpXdot1LocTable, eoamLinkMonitorIfIndex=eoamLinkMonitorIfIndex, aclv6L3RuleProtocolMask=aclv6L3RuleProtocolMask, sysPortCtrlFlowControl=sysPortCtrlFlowControl, lldpXdot1RemoteData=lldpXdot1RemoteData, lldpXdot1ConfigPortVlanTxEnable=lldpXdot1ConfigPortVlanTxEnable, aacAPTelnetLoginMethod=aacAPTelnetLoginMethod, macBasedCtrlAuthMacAddress=macBasedCtrlAuthMacAddress, dgs_1210_28xscmebx=dgs_1210_28xscmebx, companySystem=companySystem, swAuthRadiusServerRetransmit=swAuthRadiusServerRetransmit, sshMaxSession=sshMaxSession, companyIpifGroup=companyIpifGroup, staticVlanBaseDisableAutoLearn=staticVlanBaseDisableAutoLearn, multicastVlanGroupStatus=multicastVlanGroupStatus, sysSNTPTimeSeconds=sysSNTPTimeSeconds, swAuthUser=swAuthUser, sysLBDCtrlTable=sysLBDCtrlTable, igmpMulticastVlanTagMemberPort=igmpMulticastVlanTagMemberPort, igsVlanMulticastGroupEntry=igsVlanMulticastGroupEntry, sysGateway=sysGateway, qosPriSettings=qosPriSettings, aacServerGroupTable=aacServerGroupTable, qosDiffServType09=qosDiffServType09, igsHost=igsHost, snmpV3CommunityEntry=snmpV3CommunityEntry, aclv6L3RuleAction=aclv6L3RuleAction, erpsAdminEastPortState=erpsAdminEastPortState, protocolGroupName=protocolGroupName, mldsVlanReportSuppression=mldsVlanReportSuppression, ipv4aclProfileDstIpAddrMask=ipv4aclProfileDstIpAddrMask, aclProfileIPProtocol=aclProfileIPProtocol, dhcpv6RelayInterfaceSettingsRowStatus=dhcpv6RelayInterfaceSettingsRowStatus, ftpFwUsername=ftpFwUsername, qosDiffServType00=qosDiffServType00, aclL3RuleAction=aclL3RuleAction, syslogServFacility=syslogServFacility, stpBridgeGlobal=stpBridgeGlobal, erpsInfoTable=erpsInfoTable, mulifMainOperStatus=mulifMainOperStatus, ipv4sysSNTPFirstServer=ipv4sysSNTPFirstServer, baudRateConfiguration=baudRateConfiguration, igsVlanGrpQueryInterval=igsVlanGrpQueryInterval, qinqVlanTranslationCVID=qinqVlanTranslationCVID, sysPortMediaType=sysPortMediaType, ddmStatus=ddmStatus, companyProtocolVlan=companyProtocolVlan, stpPortRestrictedRole=stpPortRestrictedRole, qosDiffServType37=qosDiffServType37, neighborEntry=neighborEntry, ipifV6AddressIpAddr=ipifV6AddressIpAddr, igmpMulticastVlanStatus=igmpMulticastVlanStatus, mstMstiBridgeTable=mstMstiBridgeTable, mstCistPortPathCost=mstCistPortPathCost, sysGratuitousARPLearning=sysGratuitousARPLearning, sysSMTPServerGroup=sysSMTPServerGroup, eoamEntry=eoamEntry, iPv4aacServerAuthProtocol=iPv4aacServerAuthProtocol, mldsHostTablePort=mldsHostTablePort, iPv4swAuthRadiusServerKey=iPv4swAuthRadiusServerKey, ddmThresholdMgmtEntry=ddmThresholdMgmtEntry, cosBandwidthValue=cosBandwidthValue, aclv6L3RuleTcpUdpSrcPortMask=aclv6L3RuleTcpUdpSrcPortMask, snmpTrapPortSecurity=snmpTrapPortSecurity, qosDiffServType31=qosDiffServType31, portD3State=portD3State, macNotificatiotn=macNotificatiotn, cpuFilterL3RuleTcpRstBit=cpuFilterL3RuleTcpRstBit, aacEnableMethod2=aacEnableMethod2, qosDiffServType01=qosDiffServType01, aclUdfOffsetChunk4=aclUdfOffsetChunk4, vlanMacMapVid=vlanMacMapVid, ipv4aclProfileDstPortMask=ipv4aclProfileDstPortMask, sshMaxAuthFailAttempts=sshMaxAuthFailAttempts, protocolGroupRowStatus=protocolGroupRowStatus, portSecMLA=portSecMLA, qosDiffServType19=qosDiffServType19, snmpV3TrapColdStart=snmpV3TrapColdStart, qosDiffServTOS=qosDiffServTOS, cpuProtectEntry=cpuProtectEntry, dhcpLocalRelayGlobalState=dhcpLocalRelayGlobalState, limitIpMulticastProfileEntry=limitIpMulticastProfileEntry, staticMcastVlanID=staticMcastVlanID, sysBPDUAttackLog=sysBPDUAttackLog, ddmStatusTable=ddmStatusTable, igmpMulticastVlanState=igmpMulticastVlanState, igsVlanDataDrivenLearningStatus=igsVlanDataDrivenLearningStatus, swAuthAuthTxPeriod=swAuthAuthTxPeriod, qosDiffServType17=qosDiffServType17, lldpXdot1RemProtoVlanEntry=lldpXdot1RemProtoVlanEntry, l2PTState=l2PTState, cpuFilterv6L3RuleICMPMessageCode=cpuFilterv6L3RuleICMPMessageCode, sfpVendorInfoEntry=sfpVendorInfoEntry, smtpRecvMailAddrEntry=smtpRecvMailAddrEntry, cpuFilterProfileDstIpAddrMaskType=cpuFilterProfileDstIpAddrMaskType, ftpConfigPassword=ftpConfigPassword, lldpXdot3RemoteData=lldpXdot3RemoteData, lldpXdot3RemPortAutoNegEnabled=lldpXdot3RemPortAutoNegEnabled, miscReset=miscReset, bandwidthEffecRxThreshold=bandwidthEffecRxThreshold, impbDhcpSnoopingEntry=impbDhcpSnoopingEntry, qosDiffServType46=qosDiffServType46, swAuthRadiusServerAddress=swAuthRadiusServerAddress, sshUserInfoHostIp=sshUserInfoHostIp, sysSNTPDSTEndMon=sysSNTPDSTEndMon, miscStatisticsReset=miscStatisticsReset, lldpXdot1RemTable=lldpXdot1RemTable, autoFdbIPAddress=autoFdbIPAddress, trafficCtrlCountDown=trafficCtrlCountDown, rmonEventCommunity=rmonEventCommunity, errorFramePeriodWindow=errorFramePeriodWindow, ipv4sysIprouteGateway=ipv4sysIprouteGateway, dhcpBOOTPRelayServerIP=dhcpBOOTPRelayServerIP, stpFowardBPDU=stpFowardBPDU, dhcpBOOTPRelayInterfaceSettingsTable=dhcpBOOTPRelayInterfaceSettingsTable, lldpPortConfigEntry=lldpPortConfigEntry, iPv4swAuthRadiusServerStatus=iPv4swAuthRadiusServerStatus, companyL2PT=companyL2PT, aclPacketRuleReplace1P=aclPacketRuleReplace1P, swAuthAuthDirection=swAuthAuthDirection, wacAuthCtrl=wacAuthCtrl, ipv4aclQosStatus=ipv4aclQosStatus, igmpMulticastVlanReplacePriority=igmpMulticastVlanReplacePriority, cpuFilterL3RuleTcpUrgBit=cpuFilterL3RuleTcpUrgBit, sysPortMediaTypePn=sysPortMediaTypePn, qosDiffServType41=qosDiffServType41, impbAutoScanPort=impbAutoScanPort, qosDiffServType03=qosDiffServType03, aclL3RuleTcpUdpSrcPort=aclL3RuleTcpUdpSrcPort, staticMcastTable=staticMcastTable, aclv6L3RuleTcpAckBit=aclv6L3RuleTcpAckBit, igsStatus=igsStatus, igsVlanQueryInterval=igsVlanQueryInterval, companydot3azEEE=companydot3azEEE, dlinkGreenLEDShutoffTimeProfile2=dlinkGreenLEDShutoffTimeProfile2, dot1qVlanManagementid=dot1qVlanManagementid, cpuFilterProfileIPProtocolMask=cpuFilterProfileIPProtocolMask, aclv6L3RuleVlanList=aclv6L3RuleVlanList, sysBootupImage=sysBootupImage, lldpXdot1ConfigVlanNameTable=lldpXdot1ConfigVlanNameTable, newRootBrgaddress=newRootBrgaddress, sysPortDescString=sysPortDescString, duldRecoverTime=duldRecoverTime, ddmHighWarning=ddmHighWarning, filterDHCPServerIpAddr=filterDHCPServerIpAddr, cpuFilterL2ProfileID=cpuFilterL2ProfileID, mulifv6AutolinkloStatus=mulifv6AutolinkloStatus, ipv4snmpV3HostEntry=ipv4snmpV3HostEntry, qinqVLANTranslation=qinqVLANTranslation, aclFlowMeterAccessID=aclFlowMeterAccessID, companyLBD=companyLBD, companyRMON=companyRMON, aclUdfOffsetChunk3=aclUdfOffsetChunk3, igsHostTablePort=igsHostTablePort, erpsProtectedAddVlanList=erpsProtectedAddVlanList, mldsVlanFbdRtrPortList=mldsVlanFbdRtrPortList, aclv6L3RuleTcpPshBit=aclv6L3RuleTcpPshBit, swAuthMode=swAuthMode, mldsVlanMulticastGroupPortList=mldsVlanMulticastGroupPortList, aclL2RuleRateLimit=aclL2RuleRateLimit, mulifv6GlobalStatus=mulifv6GlobalStatus, LldpManAddress=LldpManAddress, authUserStatus=authUserStatus, aacEnableMethodListTable=aacEnableMethodListTable, multicastVlanTagMemberPort=multicastVlanTagMemberPort, laStatus=laStatus, securityTrustedHost=securityTrustedHost, sysSwitchName=sysSwitchName, aacAccountingServiceSystem=aacAccountingServiceSystem, wacRadiusAuth=wacRadiusAuth, snmpTrapDHCPScreen=snmpTrapDHCPScreen, mldsVlanRobustnessValue=mldsVlanRobustnessValue, duldDiscoveryTime=duldDiscoveryTime, impbPortIpInspectionState=impbPortIpInspectionState, staticARPTable=staticARPTable, limitIpMulticastPortIPType=limitIpMulticastPortIPType, ipv4syslogServSrvStatus=ipv4syslogServSrvStatus, dhcpv6RelayOpt38Table=dhcpv6RelayOpt38Table, sysCommandLogging=sysCommandLogging, multicastVlanid=multicastVlanid, igsVlanMulticastGroupTable=igsVlanMulticastGroupTable, ipv4sysSNTPDSTStartMin=ipv4sysSNTPDSTStartMin, sysPortCtrlCapability=sysPortCtrlCapability, dhcpBOOTPRelayEnablePortlist=dhcpBOOTPRelayEnablePortlist, protocolVlanRowStatus=protocolVlanRowStatus, aclProfileIPProtocolMask=aclProfileIPProtocolMask, aacAccountingServiceCommandOperator=aacAccountingServiceCommandOperator, aclPacketRule=aclPacketRule, igsHostTable=igsHostTable, sysARPAgingTime=sysARPAgingTime, aclL2RuleReplace1P=aclL2RuleReplace1P, cpuFilterL3RuleIgmpType=cpuFilterL3RuleIgmpType, dot1qVlanUngisterMCFiltermode=dot1qVlanUngisterMCFiltermode, ipv4smtpRecvMailAddrEntry=ipv4smtpRecvMailAddrEntry, wacAuthStateAgetime=wacAuthStateAgetime, ddmActionState=ddmActionState, mldsDataDrivenLearningMaxLearnedEntryVlaue=mldsDataDrivenLearningMaxLearnedEntryVlaue, cpuFilterProfileRuleCount=cpuFilterProfileRuleCount, ipv4sysGateway=ipv4sysGateway, companyStaticMAC=companyStaticMAC, dhcpBOOTPRelayInterface=dhcpBOOTPRelayInterface, igsAccessAuthTable=igsAccessAuthTable, igmpMulticastVlanGroupFromIp=igmpMulticastVlanGroupFromIp, dot1qVlanPvid=dot1qVlanPvid, cpuFilterv6L3RuleTable=cpuFilterv6L3RuleTable, companyEoam=companyEoam, aclL3RuleReplaceQueue=aclL3RuleReplaceQueue, igmpMulticastVlanUntaggedSourcePort=igmpMulticastVlanUntaggedSourcePort, cpuFilterL3RuleProtocol=cpuFilterL3RuleProtocol)
mibBuilder.exportSymbols("DGS-1210-28XSME-BX", companyCpuProtect=companyCpuProtect, trafficCtrlSettings=trafficCtrlSettings, wacAuthState=wacAuthState, aclPacketRuleOffsetValue1=aclPacketRuleOffsetValue1, wacPortCtrlState=wacPortCtrlState, qosEffectiveDefaultPriority=qosEffectiveDefaultPriority, igsVlanMulticastGroupMacAddress=igsVlanMulticastGroupMacAddress, ipv4cpuFilterProfileRuleCount=ipv4cpuFilterProfileRuleCount, pppoePortUDFString=pppoePortUDFString, ftpConfigConfigID=ftpConfigConfigID, qosDiffServType48=qosDiffServType48, ipv4snmpV3HostStatus=ipv4snmpV3HostStatus, erpsSubRingRowStatus=erpsSubRingRowStatus, swTimeRangeDate=swTimeRangeDate, aclPacketRuleEntry=aclPacketRuleEntry, ipv4aclProfileRuleCount=ipv4aclProfileRuleCount, limitIpMulticastPortMaxGrp=limitIpMulticastPortMaxGrp, wacUsrCtrlTable=wacUsrCtrlTable, sysMirrorStatus=sysMirrorStatus, snmpV3UserTable=snmpV3UserTable, aclPacketRuleOffsetValue3=aclPacketRuleOffsetValue3, duldTable=duldTable, igmpMulticastVlanTable=igmpMulticastVlanTable, lldpXdot3LocPortEntry=lldpXdot3LocPortEntry, trafficSegEntry=trafficSegEntry, iPv4aacServerIPAddr=iPv4aacServerIPAddr, stpRootPort=stpRootPort, dot1qVlanPVIDAutoAssignOnOff=dot1qVlanPVIDAutoAssignOnOff, portSecLockAddrMode=portSecLockAddrMode, ipv4aclUdfOffsetMask1=ipv4aclUdfOffsetMask1, ipv4aclUdfOffsetMask3=ipv4aclUdfOffsetMask3, aclQosVlanID=aclQosVlanID, cpuFilterProfileStatus=cpuFilterProfileStatus, sysGratuitousARPIPIfStatusUp=sysGratuitousARPIPIfStatusUp, sysMACAgingTime=sysMACAgingTime, gvrpSettingsPortControlIndex=gvrpSettingsPortControlIndex, aacEnableMethodListName=aacEnableMethodListName, sysIpSubnetMask=sysIpSubnetMask, cpuFilterv6L3RuleSrcIpAddr=cpuFilterv6L3RuleSrcIpAddr, multicastVlanRowStatus=multicastVlanRowStatus, limitIpMulticastendIpAddr=limitIpMulticastendIpAddr, vlanMacMapIndex=vlanMacMapIndex, companyDHCPRelay=companyDHCPRelay, rmonAlarmSampleType=rmonAlarmSampleType, impbPortNDInspectionState=impbPortNDInspectionState, swAuthAuthMaxReq=swAuthAuthMaxReq, dhcpRelayVlanTableEntry=dhcpRelayVlanTableEntry, qosDSCPTOSMode=qosDSCPTOSMode, aacAccountingServiceCommandPoweruser=aacAccountingServiceCommandPoweruser, qosDiffServType55=qosDiffServType55, cpuProtectType=cpuProtectType, mldsVlanFilterVlanId=mldsVlanFilterVlanId, filterDHCPServerTable=filterDHCPServerTable, cosClassIndex=cosClassIndex, iPv4swAuthRadiusServerIndex=iPv4swAuthRadiusServerIndex, companyStaticARP=companyStaticARP, aacLoginMethodListIndex=aacLoginMethodListIndex, lldpXdot3PortConfigTable=lldpXdot3PortConfigTable, igsHostPortPurgeInterval=igsHostPortPurgeInterval, mulIfSupportV4V6MainTable=mulIfSupportV4V6MainTable, qosDiffServType29=qosDiffServType29, aclL3RuleTcpFinBit=aclL3RuleTcpFinBit, lldpXdot3RemMaxFrameSizeTable=lldpXdot3RemMaxFrameSizeTable, stpPortEdge=stpPortEdge, aacServerAccountingPort=aacServerAccountingPort, sshConnectionTimeout=sshConnectionTimeout, securitySSH=securitySSH, cpuFilterL3RuleTcpUdpDstPort=cpuFilterL3RuleTcpUdpDstPort, portSecFDBPermanentEntry=portSecFDBPermanentEntry, impbBlockListMacAddress=impbBlockListMacAddress, impbPortDHCPMaxEntryIPv6=impbPortDHCPMaxEntryIPv6, qosDiffServType21=qosDiffServType21, sysDdpGlobalOnOff=sysDdpGlobalOnOff, lldpXdot3LocPowerPairControlable=lldpXdot3LocPowerPairControlable, cpuFilterProfileTable=cpuFilterProfileTable, mstInstanceVlanMapped2k=mstInstanceVlanMapped2k, mldsVlanFilterTable=mldsVlanFilterTable, qosTOSType07=qosTOSType07, lldpXdot3RemLinkAggStatus=lldpXdot3RemLinkAggStatus, sfpBaudRate=sfpBaudRate, l2PTPortTable=l2PTPortTable, sysLBDRecoverTime=sysLBDRecoverTime, sysRestart=sysRestart, swAuthPortAccessCtrl=swAuthPortAccessCtrl, sysSNTPDSTRepeatEndWeek=sysSNTPDSTRepeatEndWeek, erpsLog=erpsLog, snmpV3TrapWarmStart=snmpV3TrapWarmStart, swAuthAuthReAuthentication=swAuthAuthReAuthentication, aclPacketAccessID=aclPacketAccessID, ftpFwServerIpAddress=ftpFwServerIpAddress, ftpConfigServerIpAddress=ftpConfigServerIpAddress, aclL3RuleReplaceDSCP=aclL3RuleReplaceDSCP, sysJumboFrameEnable=sysJumboFrameEnable, cpuFilterv6L3RuleTcpUrgBit=cpuFilterv6L3RuleTcpUrgBit, protocolVlanTable=protocolVlanTable, lldpXdot1ConfigProtoVlanTxEnable=lldpXdot1ConfigProtoVlanTxEnable, gvrpGVRPGlobalSettingsOnOff=gvrpGVRPGlobalSettingsOnOff, cpuFilterL2RuleInPortList=cpuFilterL2RuleInPortList, companyCPUInterfaceFilterGroup=companyCPUInterfaceFilterGroup, aclv6L3RuleReplaceQueue=aclv6L3RuleReplaceQueue, impbDhcpSnoopingTable=impbDhcpSnoopingTable, macBasedCtrlAuthState=macBasedCtrlAuthState, aclL2RuleTable=aclL2RuleTable, ipv4cpuFilterProfileStatus=ipv4cpuFilterProfileStatus, syslogServAddr=syslogServAddr, swTimeRangeStartYear=swTimeRangeStartYear, rmonHistoryIndex=rmonHistoryIndex, dlinkGreenPortShutoffTimeProfile1=dlinkGreenPortShutoffTimeProfile1, impbPortDHCPMaxEntryIPv4=impbPortDHCPMaxEntryIPv4, companySNMPV3=companySNMPV3, rmonHistoryStatus=rmonHistoryStatus, mstMstiPortTable=mstMstiPortTable, qosDiffServType24=qosDiffServType24, cosClassTable=cosClassTable, dot1qVlanAdvertisementStatus=dot1qVlanAdvertisementStatus, qosPriSetPortType=qosPriSetPortType, iPv4aacServerAuthKey=iPv4aacServerAuthKey, aclL3RuleTcpSynBit=aclL3RuleTcpSynBit, trustedHostIpMask=trustedHostIpMask, companyDot1qVlanGroup=companyDot1qVlanGroup, snmpV3HostTable=snmpV3HostTable, aclL2RuleInVlanList=aclL2RuleInVlanList, snmpV3viewTreeName=snmpV3viewTreeName, mstConfigurationIdentification=mstConfigurationIdentification, mldsHostPortPurgeInterval=mldsHostPortPurgeInterval, snmpV3TrapFirmUpgrade=snmpV3TrapFirmUpgrade, limitIpMulticastStatus=limitIpMulticastStatus, qosDiffServType56=qosDiffServType56, dhcpv6RelayOpt38Entry=dhcpv6RelayOpt38Entry, vlanMacType=vlanMacType, sysSNTPSecondServer=sysSNTPSecondServer, laPortControlEntry=laPortControlEntry, mldsVlanFilterEntry=mldsVlanFilterEntry, mldsVlanMulticastGroupVlanId=mldsVlanMulticastGroupVlanId, sysContactName=sysContactName, iPv4swAuthRadiusServerEntry=iPv4swAuthRadiusServerEntry, mldsVlanQueryMaxResponseTime=mldsVlanQueryMaxResponseTime, sslCiphers=sslCiphers, ipv4mulifMainAdminStatus=ipv4mulifMainAdminStatus, igsVlanRtrPortList=igsVlanRtrPortList, igsVlan=igsVlan, snmpV3GroupStatus=snmpV3GroupStatus, wacPortCtrl=wacPortCtrl, aclv6L3RuleStatus=aclv6L3RuleStatus, qosPriSettingsTable=qosPriSettingsTable, aacEnableMethod3=aacEnableMethod3, snmpV3GroupSecurityModel=snmpV3GroupSecurityModel, aacAccountingMethodListRowStatus=aacAccountingMethodListRowStatus, snmpGlobalState=snmpGlobalState, swAuthRadiusServerIndex=swAuthRadiusServerIndex, ipv4cpuFilterProfileNo=ipv4cpuFilterProfileNo, cpuFilterL2RuleEtherType=cpuFilterL2RuleEtherType, sshAuthenMethodPubKeyAdmin=sshAuthenMethodPubKeyAdmin, erpsSubRingTCPropagationState=erpsSubRingTCPropagationState, cosBandwidthCtrlEntry=cosBandwidthCtrlEntry, mstInstanceIndex=mstInstanceIndex, qosDiffServType57=qosDiffServType57, aacAPSSHLoginMethod=aacAPSSHLoginMethod, rmonHistory=rmonHistory, tftpFwImageFileName=tftpFwImageFileName, dhcpBOOTPRelayOption82RemoteID=dhcpBOOTPRelayOption82RemoteID, macBasedCtrlState=macBasedCtrlState, cpuFilterL3RuleAction=cpuFilterL3RuleAction, rmonEventEntry=rmonEventEntry, qosDiffServType33=qosDiffServType33, erpsSubRingTable=erpsSubRingTable, ipifSupportV4V6Info=ipifSupportV4V6Info, dhcpRelayVlanTable=dhcpRelayVlanTable, ipifV6AddressMainIndex=ipifV6AddressMainIndex, stpPortProtocolMigration=stpPortProtocolMigration, dlinkGreenLEDShutoffPortList=dlinkGreenLEDShutoffPortList, stpProtocolVersion=stpProtocolVersion, cpuFilterL3RuleSrcIpAddr=cpuFilterL3RuleSrcIpAddr, cpuFilterv6L3RuleTcpPshBit=cpuFilterv6L3RuleTcpPshBit, mstCistPort=mstCistPort, sysSNTPState=sysSNTPState, dlinkGreenPortShutoffPortList=dlinkGreenPortShutoffPortList, aacAccountingServiceNetwork=aacAccountingServiceNetwork, rmonHistoryBucketsRequested=rmonHistoryBucketsRequested, securityTrafficSeg=securityTrafficSeg, cpuProtectPPS=cpuProtectPPS, portSecFDBPermPort=portSecFDBPermPort, lldpXdot3RemPowerClass=lldpXdot3RemPowerClass, snmpV3HostVersion=snmpV3HostVersion, mstCistPortDesignatedBridge=mstCistPortDesignatedBridge, eoamMode=eoamMode, cpuFilterv6L3RuleDstIpAddr=cpuFilterv6L3RuleDstIpAddr, sysGratuitousARPInterval=sysGratuitousARPInterval, tftpCfgTargetGroup=tftpCfgTargetGroup, lldpPortConfigTable=lldpPortConfigTable, sysPortErrPortState=sysPortErrPortState, qosDiffServType34=qosDiffServType34, aclFlowMeterStatus=aclFlowMeterStatus, aclv6L3RuleTable=aclv6L3RuleTable, qosPriSettingsEntry=qosPriSettingsEntry, swAuthRadiusServerAccountingPort=swAuthRadiusServerAccountingPort, aclL2RuleInPortList=aclL2RuleInPortList, lldpXdot3LocPowerTable=lldpXdot3LocPowerTable, ipifv6NSRetransmitTime=ipifv6NSRetransmitTime, swTimeRangeName=swTimeRangeName, errorSymbolThreshold=errorSymbolThreshold, aacAPSSHEnableMethod=aacAPSSHEnableMethod, swAuthAuthSuppTimeout=swAuthAuthSuppTimeout, rmonStatsTable=rmonStatsTable, erpsState=erpsState, ipv4smtpSelfMailAddr=ipv4smtpSelfMailAddr, lldpXdot3PortConfigEntry=lldpXdot3PortConfigEntry, aacAPHttpLoginMethod=aacAPHttpLoginMethod, igsVlanSnoopStatus=igsVlanSnoopStatus, lldpPortConfigNotificationEnable=lldpPortConfigNotificationEnable, aRPSpoofPreventEntry=aRPSpoofPreventEntry, l2PTPortType=l2PTPortType, aclL3RuleTcpRstBit=aclL3RuleTcpRstBit, snmpV3GroupEntry=snmpV3GroupEntry, dhcpv6RelayOption18CheckState=dhcpv6RelayOption18CheckState, snmpV3Community=snmpV3Community, mulifVLANname=mulifVLANname, doSCtrlActionType=doSCtrlActionType, lldpXdot3LocPowerPortClass=lldpXdot3LocPowerPortClass, aacAccountingServiceCommandUser=aacAccountingServiceCommandUser, cpuFilterv6L3RuleProtocol=cpuFilterv6L3RuleProtocol, aacServerIPType=aacServerIPType, errorFrameThreshold=errorFrameThreshold, erpsProtectedVlanList2k=erpsProtectedVlanList2k, laPortControlIndex=laPortControlIndex, qosTOSType06=qosTOSType06, multicastVlanGroupVid=multicastVlanGroupVid, dhcpv6RelayOpt38PortIndex=dhcpv6RelayOpt38PortIndex, qosDiffServType44=qosDiffServType44, aacAuthParamAttempt=aacAuthParamAttempt, sshUserInfoTable=sshUserInfoTable, aclL2RuleAction=aclL2RuleAction, impbPortDHCPv4SetVlanList=impbPortDHCPv4SetVlanList, erpsRingMEL=erpsRingMEL, LacpKey=LacpKey, ipv4sysIpSubnetMask=ipv4sysIpSubnetMask, wacVirtualIPv4=wacVirtualIPv4, companyISMVLAN=companyISMVLAN, qosDiffServType23=qosDiffServType23, qinqVlanTranslationIfIndex=qinqVlanTranslationIfIndex, pppoeGlobalState=pppoeGlobalState, sfpVendorPn=sfpVendorPn, aacServerGroupEntry=aacServerGroupEntry, trafficCtrlTrap=trafficCtrlTrap, wacAuthStateMac=wacAuthStateMac, ipv4aclProfileEntry=ipv4aclProfileEntry, aacLoginMethod1=aacLoginMethod1, ddmBiasCurrent=ddmBiasCurrent, igsVlanFilterTable=igsVlanFilterTable, laPortChannelTable=laPortChannelTable, aclQosAssignClass=aclQosAssignClass, lldpXdot1Config=lldpXdot1Config, agentMEMutilizationIn1min=agentMEMutilizationIn1min, aacServersInGroup=aacServersInGroup)
mibBuilder.exportSymbols("DGS-1210-28XSME-BX", sysSNTPDSTStartHour=sysSNTPDSTStartHour, iPv4aacServerTimeout=iPv4aacServerTimeout, dot1qVlanForbiddenPorts=dot1qVlanForbiddenPorts, sysPortErrPortIndex=sysPortErrPortIndex, vlanMacMapRowStatus=vlanMacMapRowStatus, aclFlowMeterBurstSize=aclFlowMeterBurstSize, companyBPDUAttack=companyBPDUAttack, macBasedLocalAuthStatus=macBasedLocalAuthStatus, lldpXdot3Objects=lldpXdot3Objects, trafficSegMemberList=trafficSegMemberList, aclL3RuleTcpAckBit=aclL3RuleTcpAckBit, qinqIfIndex=qinqIfIndex, errorFrameSecondsNotifyState=errorFrameSecondsNotifyState, doSCtrlType=doSCtrlType, ipifv6AutolinkloStatus=ipifv6AutolinkloStatus, vlanTrunkGlobalStatus=vlanTrunkGlobalStatus, macNotifyInfoDiscription=macNotifyInfoDiscription, cpuFilterL2RuleEntry=cpuFilterL2RuleEntry, impbPortDHCPv4VlanList3k=impbPortDHCPv4VlanList3k, ipv4aclProfileTable=ipv4aclProfileTable, aclProfileDstMacAddrMask=aclProfileDstMacAddrMask, mulifv6DHCPStatus=mulifv6DHCPStatus, gvrpSettingsGVRPState=gvrpSettingsGVRPState, ipv4cpuFilterProfileTable=ipv4cpuFilterProfileTable, aclL2RuleEtherType=aclL2RuleEtherType, rmonAlarmIndex=rmonAlarmIndex, lldpXdot3RemPowerTable=lldpXdot3RemPowerTable, aclL3RuleEntry=aclL3RuleEntry, ipv4mulifIpSubnetMask=ipv4mulifIpSubnetMask, dhcpBOOTPRelayOption82CircuitIDType=dhcpBOOTPRelayOption82CircuitIDType, dhcpBOOTPRelayControl=dhcpBOOTPRelayControl, bandwidthCtrlRxThreshold=bandwidthCtrlRxThreshold, companyMacBasedVlan=companyMacBasedVlan, ipv4cpuFilterProfileMask=ipv4cpuFilterProfileMask, qinqVlanTranslationTable=qinqVlanTranslationTable, cpuFilterProfileType=cpuFilterProfileType, trafficCtrlType=trafficCtrlType, cpuFilterL3RuleTcpUdpSrcPort=cpuFilterL3RuleTcpUdpSrcPort, lldpXdot3RemLinkAggEntry=lldpXdot3RemLinkAggEntry, lldpXdot3RemLinkAggPortId=lldpXdot3RemLinkAggPortId, eoamLinkMonitorEntry=eoamLinkMonitorEntry, ipv4trustedHostIpMask=ipv4trustedHostIpMask, aclL2RuleStatus=aclL2RuleStatus, qosTOSGroup=qosTOSGroup, mstVlanMstiMappingTable=mstVlanMstiMappingTable, dgs_1210_28xscme=dgs_1210_28xscme, tftpCfgTargetServerIpType=tftpCfgTargetServerIpType, stpPortHelloTime=stpPortHelloTime, impbRoamingState=impbRoamingState, limitIpMulticastPortID=limitIpMulticastPortID, ddmThresholdMgmtTable=ddmThresholdMgmtTable, smtpServerAddr=smtpServerAddr, eoamRemoteLoopback=eoamRemoteLoopback, aclL3RuleStatus=aclL3RuleStatus, companyTftpGroup=companyTftpGroup, ipv4aclQosIPAddr=ipv4aclQosIPAddr, mulifV6AddressIpPrefix=mulifV6AddressIpPrefix, sysDhcpAutoConfigTimeout=sysDhcpAutoConfigTimeout, companyTraps=companyTraps, staticVlanID=staticVlanID, lldpXdot3LocMaxFrameSizeTable=lldpXdot3LocMaxFrameSizeTable, sysFromIP=sysFromIP, macBasedMethod=macBasedMethod, rmonStatsOwner=rmonStatsOwner, lldpXdot3LocPowerMDIEnabled=lldpXdot3LocPowerMDIEnabled, sshCipherSuiteList=sshCipherSuiteList, erpsRingStatus=erpsRingStatus, erpsSubRingVlanID=erpsSubRingVlanID, sysPortDescriptionEntry=sysPortDescriptionEntry, aacAccountingMethodListName=aacAccountingMethodListName, impbAutoScanStatus=impbAutoScanStatus, cpuFilterv6L3RuleTcpRstBit=cpuFilterv6L3RuleTcpRstBit, syslogEnable=syslogEnable, sysPowerSavingEnable=sysPowerSavingEnable, cpuFilterProfileSrcIpAddrMask=cpuFilterProfileSrcIpAddrMask, eoamLinkMonitor=eoamLinkMonitor, protocolVlanGroupID=protocolVlanGroupID, aclProfileDstIpAddrMaskType=aclProfileDstIpAddrMaskType, ipv4sysIprouteHops=ipv4sysIprouteHops, macBasedCtrlAuthBlockTime=macBasedCtrlAuthBlockTime, aclL3RuleSrcIpAddrMask=aclL3RuleSrcIpAddrMask, stpRootBridge=stpRootBridge, dlinklldpMsgHoldMultiplier=dlinklldpMsgHoldMultiplier, macNotifyInterval=macNotifyInterval, ipv4mulifMainRowStatus=ipv4mulifMainRowStatus, ipifV6AddressRowStatus=ipifV6AddressRowStatus, snmpV3TrapDuplicateIPDetected=snmpV3TrapDuplicateIPDetected, swTimeRangeEndHour=swTimeRangeEndHour, ipv4sysIpAddr=ipv4sysIpAddr, ipv4aclProfileArpSenderIpAddrMask=ipv4aclProfileArpSenderIpAddrMask, autologoutConfiguration=autologoutConfiguration, lldpXdot3RemPowerPortClass=lldpXdot3RemPowerPortClass, macBasedCtrlGroup=macBasedCtrlGroup, qosDiffServType13=qosDiffServType13, swLedInfoFrontPanelLedStatus=swLedInfoFrontPanelLedStatus, tftpConfigTftpOperation=tftpConfigTftpOperation, aclPacketRuleReplaceQueue=aclPacketRuleReplaceQueue, aclPacketRuleRateLimit=aclPacketRuleRateLimit, mstCistCurrentPortRole=mstCistCurrentPortRole, multicastVlanGroupFromIp=multicastVlanGroupFromIp, ipv4cpuFilterProfileType=ipv4cpuFilterProfileType, impbBindingListMacAddress=impbBindingListMacAddress, sysType=sysType, lldpXdot1LocProtoVlanEnabled=lldpXdot1LocProtoVlanEnabled, sshAuthenMethodHostKeyAdmin=sshAuthenMethodHostKeyAdmin, agentCPUutilizationIn5sec=agentCPUutilizationIn5sec, macBasedCtrlLocalVID=macBasedCtrlLocalVID, wacUsrCtrlEntry=wacUsrCtrlEntry, swLedPanelstate=swLedPanelstate, cpuFilterL2RuleSrcMacAddrMask=cpuFilterL2RuleSrcMacAddrMask, impbAutoScanIpAddressTo=impbAutoScanIpAddressTo, cosBandwidthCtrlClassIndex=cosBandwidthCtrlClassIndex, qosDiffServType18=qosDiffServType18, macNotifyState=macNotifyState, aclPacketRuleReplaceDSCP=aclPacketRuleReplaceDSCP, ipv4smtpServerPort=ipv4smtpServerPort, snmpV3ViewTreeTable=snmpV3ViewTreeTable, aclL2AccessID=aclL2AccessID, dot1qVlanUntaggedPorts=dot1qVlanUntaggedPorts, smtpServerAddrInterfaceName=smtpServerAddrInterfaceName, qosUserPriIndex=qosUserPriIndex, aclL2Rule=aclL2Rule, guestVlanPort=guestVlanPort, mldsVlanMulticastGroupTable=mldsVlanMulticastGroupTable, impbAutoScanMacAddress=impbAutoScanMacAddress, aclPacketRuleOffsetValue1Mask=aclPacketRuleOffsetValue1Mask, cpuFilterL3RuleProfileNo=cpuFilterL3RuleProfileNo, filterDHCPServerEntry=filterDHCPServerEntry, sysSNTPDSTEndHour=sysSNTPDSTEndHour, swAuthUserName=swAuthUserName, dot3azEEEset=dot3azEEEset, impbBlockListTable=impbBlockListTable, eoamTable=eoamTable, lldpXdot1ConfigVlanNameEntry=lldpXdot1ConfigVlanNameEntry, rmonAlarmRisingEventIndex=rmonAlarmRisingEventIndex, mldsHost=mldsHost, smtpState=smtpState, ftpFwFTPOperationStatus=ftpFwFTPOperationStatus, companyGratuitousARP=companyGratuitousARP, aclL3Rule=aclL3Rule, mstiBridgeRegionalRoot=mstiBridgeRegionalRoot, qosDiffServType59=qosDiffServType59, limitIpMulticastEntryProfileID=limitIpMulticastEntryProfileID, sysGratuitousARPSettings=sysGratuitousARPSettings, impbBindingtraplog=impbBindingtraplog, lldpXdot1RemProtoVlanTable=lldpXdot1RemProtoVlanTable, ddmActionShutdown=ddmActionShutdown, ddmActionMgmtTable=ddmActionMgmtTable, d_link=d_link, cpuFilterv6L3RuleTcpUdpSrcPortMask=cpuFilterv6L3RuleTcpUdpSrcPortMask, impbPortProtocolState=impbPortProtocolState, snmpV3ViewTreeEntry=snmpV3ViewTreeEntry, mulIfSupportV4V6MainEntry=mulIfSupportV4V6MainEntry, snmpV3TrapIMPBViolation=snmpV3TrapIMPBViolation, ftpConfigTable=ftpConfigTable, dhcpLocalRelayEnablePortlist=dhcpLocalRelayEnablePortlist, cpuFilterProfileDstIpAddrMask=cpuFilterProfileDstIpAddrMask, syslogServInterfaceName=syslogServInterfaceName, qosDiffServType50=qosDiffServType50, gvrpSettingsAcceptableFrameType=gvrpSettingsAcceptableFrameType, stpTopologyChangeTrapStatus=stpTopologyChangeTrapStatus, igsVlanFilterVlanId=igsVlanFilterVlanId, qosTOSType04=qosTOSType04, sysSNTPServerTable=sysSNTPServerTable, swAuthUserEntry=swAuthUserEntry, snmpV3TrapSNMPAuthentication=snmpV3TrapSNMPAuthentication, cpuFilterL3Rule=cpuFilterL3Rule, dhcpv6RelayOption18State=dhcpv6RelayOption18State, dot1qVlanUngisterMCFilterTable=dot1qVlanUngisterMCFilterTable, qosDiffServType49=qosDiffServType49, dhcpv6RelayOpt38PortState=dhcpv6RelayOpt38PortState, qinqOuterTPID=qinqOuterTPID, aclQosEntry=aclQosEntry, lldpXdot1LocalData=lldpXdot1LocalData, mulIfV6AddressTable=mulIfV6AddressTable, lldpXdot3RemPowerMDIEnabled=lldpXdot3RemPowerMDIEnabled, igsVlanRouterTable=igsVlanRouterTable, limitIpMulticastIPType=limitIpMulticastIPType, wacRedirPath=wacRedirPath, ipv4mulIfMainEntry=ipv4mulIfMainEntry, agentCPUutilizationIn1min=agentCPUutilizationIn1min, aacAccountingServiceIndex=aacAccountingServiceIndex, stpModuleStatus=stpModuleStatus, companyERPSGroup=companyERPSGroup, igsRouterPortPurgeInterval=igsRouterPortPurgeInterval, snmpTrapBPDUAttack=snmpTrapBPDUAttack, igsVlanMulticastGroupVlanId=igsVlanMulticastGroupVlanId, aacServerIPAddr=aacServerIPAddr, qosDiffServType16=qosDiffServType16, dhcpBOOTPRelayInterfaceSettingsRowStatus=dhcpBOOTPRelayInterfaceSettingsRowStatus, aclPacketRuleFilterTimeRange=aclPacketRuleFilterTimeRange, mstResetVlanList=mstResetVlanList, snmpV3UserStatus=snmpV3UserStatus, vlanTrunkEntry=vlanTrunkEntry, companyGreenSetting=companyGreenSetting, lldpXdot1LocProtocolId=lldpXdot1LocProtocolId, impbAutoScanTable=impbAutoScanTable, dot3azEntry=dot3azEntry, cosBandwidthCtrlTable=cosBandwidthCtrlTable, dhcpv6RelayControl=dhcpv6RelayControl, lldpXdot3LocalData=lldpXdot3LocalData, swTimeRangeStartHour=swTimeRangeStartHour, floodfdbOnOff=floodfdbOnOff, aclUdfOffsetMask2=aclUdfOffsetMask2, lldpXdot3LocPowerEntry=lldpXdot3LocPowerEntry, macBasedRadiusPassword=macBasedRadiusPassword, staticMcastEntry=staticMcastEntry, mldsVlanRtrPortList=mldsVlanRtrPortList, laPortChannelIfIndex=laPortChannelIfIndex, PortList=PortList, lldpXdot1Objects=lldpXdot1Objects, neighborMACAddr=neighborMACAddr, ipv4aclQosIndex=ipv4aclQosIndex, cpuFilterv6L3RuleTcpUdpDstPort=cpuFilterv6L3RuleTcpUdpDstPort, qosDiffServType26=qosDiffServType26, sshUserInfoUserName=sshUserInfoUserName, syslogServSrvStatus=syslogServSrvStatus, wacPortCtrlTable=wacPortCtrlTable, igsVlanFastLeave=igsVlanFastLeave, sysSNTPSecondType=sysSNTPSecondType, ipv4sysSNTPDSTStartDay=ipv4sysSNTPDSTStartDay, sysPortDescMediumType=sysPortDescMediumType, dlink_products=dlink_products, gvrpSettingsPVID=gvrpSettingsPVID, aclv6L3RuleTcpUdpDstPortMask=aclv6L3RuleTcpUdpDstPortMask, swAuthAuthReAuthPeriod=swAuthAuthReAuthPeriod, swTimeRangeSettingTable=swTimeRangeSettingTable, ddmActionPort=ddmActionPort, mulifV6AddressIpAddr=mulifV6AddressIpAddr, aclL3RuleTcpUdpDstPort=aclL3RuleTcpUdpDstPort, igsVlanRouterEntry=igsVlanRouterEntry, aclQosIP6TC=aclQosIP6TC, aclL3RuleICMPMessageType=aclL3RuleICMPMessageType, stpPortAdminP2P=stpPortAdminP2P, ipv4aclQosType=ipv4aclQosType, tftpCfgTargetConfigID=tftpCfgTargetConfigID, stpPortStatus=stpPortStatus, lldpXdot1LocVlanNameEntry=lldpXdot1LocVlanNameEntry, lldpXdot1LocProtoVlanEntry=lldpXdot1LocProtoVlanEntry, ipv4aclUdfOffsetChunk1=ipv4aclUdfOffsetChunk1, qosDiffServType61=qosDiffServType61, impbPortDHCPSnoopingState=impbPortDHCPSnoopingState, ipv4aclProfileMask=ipv4aclProfileMask, mldsVlanCfgQuerier=mldsVlanCfgQuerier, companyMirror=companyMirror, iPv4swAuthRadiusServerAuthenticationPort=iPv4swAuthRadiusServerAuthenticationPort, companySMTP=companySMTP, ipv4sysIpAddrCfgMode=ipv4sysIpAddrCfgMode, qosDiffServType28=qosDiffServType28, macBasedMaxUsr=macBasedMaxUsr, staticARPEntry=staticARPEntry, ipv4aclQosMACAddr=ipv4aclQosMACAddr, ipv4aclUdfOffsetChunk3=ipv4aclUdfOffsetChunk3, ipv4dhcpOption12HostName=ipv4dhcpOption12HostName)
mibBuilder.exportSymbols("DGS-1210-28XSME-BX", ipv4aclQosEntry=ipv4aclQosEntry, sysLBDVlanLoopTable=sysLBDVlanLoopTable, snmpV3HostInterfaceName=snmpV3HostInterfaceName, snmpV3EngineID=snmpV3EngineID, neighborIfindex=neighborIfindex, tftpFwTftpOperation=tftpFwTftpOperation, mldsRouterPortPurgeInterval=mldsRouterPortPurgeInterval, bandwidthCtrlTable=bandwidthCtrlTable, aclL2RuleSrcMacAddrMask=aclL2RuleSrcMacAddrMask, mulifV6AddressMainIndex=mulifV6AddressMainIndex, erpsAdminRPLPort=erpsAdminRPLPort, erpsCurrentRingState=erpsCurrentRingState, ipv4syslogServTable=ipv4syslogServTable, ipv4syslogServFacility=ipv4syslogServFacility, mldsSystem=mldsSystem, macBasedCtrlLocalGroup=macBasedCtrlLocalGroup, protocolGroupProtocolValue=protocolGroupProtocolValue, erpsAdminEastPort=erpsAdminEastPort, sysDdpPortStatusIndex=sysDdpPortStatusIndex, snmpV3GroupReadViewName=snmpV3GroupReadViewName, stpPortPriority=stpPortPriority, sysSNTPDSTEndDay=sysSNTPDSTEndDay, dhcpBOOTPRelayOption82CircuitID=dhcpBOOTPRelayOption82CircuitID, ipv4aclUdfOffsetChunk4=ipv4aclUdfOffsetChunk4, aacAPConsoleLoginMethod=aacAPConsoleLoginMethod, pppoePortRemoteIDType=pppoePortRemoteIDType, ipv4smtpRecvMailAddrIndex=ipv4smtpRecvMailAddrIndex, ddmThresholdPort=ddmThresholdPort, lldpXdot3RemPowerPairs=lldpXdot3RemPowerPairs, ipv4cpuFilterProfileEntry=ipv4cpuFilterProfileEntry, macNotifyCtrlEntry=macNotifyCtrlEntry, cpuFilterL3RuleDstIpAddrMask=cpuFilterL3RuleDstIpAddrMask, companyMacAuthGroup=companyMacAuthGroup, cosOutputSchedule=cosOutputSchedule, bandwidthCtrlEntry=bandwidthCtrlEntry, aacServerInfoEntry=aacServerInfoEntry, igmpMulticastVlanMemberPort=igmpMulticastVlanMemberPort, cpuFilterv6L3RuleTcpAckBit=cpuFilterv6L3RuleTcpAckBit, swLedInfoUnitId=swLedInfoUnitId, sysSNTPDSTRepeatEndHour=sysSNTPDSTRepeatEndHour, impbAutoScanEntry=impbAutoScanEntry, securityDhcpServerScreen=securityDhcpServerScreen, snmpV3HostEntry=snmpV3HostEntry, macBasedCtrlAuthGroup=macBasedCtrlAuthGroup, sysPortCtrlSpeed=sysPortCtrlSpeed, snmpTrapGratuitousArp=snmpTrapGratuitousArp, smtpServerAddrType=smtpServerAddrType, qosDiffServType35=qosDiffServType35, sysSNTPDSTState=sysSNTPDSTState, ipifv6DefaultGateway=ipifv6DefaultGateway, qosDiffServType30=qosDiffServType30, qosDiffServType45=qosDiffServType45, rmonStatistics=rmonStatistics, portSecEntry=portSecEntry, aacLoginMethod3=aacLoginMethod3, igmpMulticastVlanName=igmpMulticastVlanName, aclv6L3RuleSrcIpAddr=aclv6L3RuleSrcIpAddr, multicastVlanEntry=multicastVlanEntry, sysSmartFan=sysSmartFan, dlinklldpState=dlinklldpState, ipv4syslogServSeverity=ipv4syslogServSeverity, errorSymbolNotifyState=errorSymbolNotifyState, sysPortUpLinkTime=sysPortUpLinkTime, multicastVlanSourcePort=multicastVlanSourcePort, dhcpRelayVlanSettingsState=dhcpRelayVlanSettingsState, igsDataDrivenLearningMaxLearnedEntryVlaue=igsDataDrivenLearningMaxLearnedEntryVlaue, companyMldsGroup=companyMldsGroup, tftpCfgTargetImageFileName=tftpCfgTargetImageFileName, ipv4aclQosVlanID=ipv4aclQosVlanID, ipv4aclProfileStatus=ipv4aclProfileStatus, sysGratuitousARPGlobalSettings=sysGratuitousARPGlobalSettings, wacUsrCtrl=wacUsrCtrl, ipv4aclQosAssignClass=ipv4aclQosAssignClass, cpuFilterv6L3RuleEntry=cpuFilterv6L3RuleEntry, lldpXdot1LocVlanNameTable=lldpXdot1LocVlanNameTable, igsHostTableHostIPAddress=igsHostTableHostIPAddress, dlinkPowerSavLinkStatusDetectState=dlinkPowerSavLinkStatusDetectState, sshUserInfoHostName=sshUserInfoHostName, dlinklldpMsgTxInterval=dlinklldpMsgTxInterval, tftpCfgTargetTftpOperation=tftpCfgTargetTftpOperation, limitIpMulticastProfileTable=limitIpMulticastProfileTable, LldpPowerPortClass=LldpPowerPortClass, sfpPortIndex=sfpPortIndex, ipv4sysSNTPTimeSeconds=ipv4sysSNTPTimeSeconds, multiIFSupportV4V6Info=multiIFSupportV4V6Info, dhcpLocalRelayTable=dhcpLocalRelayTable, vlanMacMapAddrMask=vlanMacMapAddrMask, lldpXdot3LocPortOperMauType=lldpXdot3LocPortOperMauType, companySNTPSetting=companySNTPSetting, ipifv6GlobalStatus=ipifv6GlobalStatus, aclPacketRuleTable=aclPacketRuleTable, dot1qVlanUngisterMCFilterVlanId=dot1qVlanUngisterMCFilterVlanId, staticVlanBaseAutoLearnList2k=staticVlanBaseAutoLearnList2k, sysPortMediaTypeEntry=sysPortMediaTypeEntry, qosDiffServType42=qosDiffServType42, filterDHCPServerRowStatus=filterDHCPServerRowStatus, snmpV3GroupSecurityLevel=snmpV3GroupSecurityLevel, staticMac=staticMac, aclL3RuleFilterTimeRange=aclL3RuleFilterTimeRange, erpsSubRingEntry=erpsSubRingEntry, vlanMacStatus=vlanMacStatus, companyMacNotify=companyMacNotify, stpPortState=stpPortState, qosDiffServType36=qosDiffServType36, sysPortDescriptionTable=sysPortDescriptionTable, stpAdminPortPathCost=stpAdminPortPathCost, stpMaxAge=stpMaxAge, impbBlockListIpAddress=impbBlockListIpAddress, autoFdbTimeStamp=autoFdbTimeStamp, aRPSpoofPreventPortList=aRPSpoofPreventPortList, ipv4mulIfMainTable=ipv4mulIfMainTable, aclv6L3RuleTcpRstBit=aclv6L3RuleTcpRstBit, swAuthUserStatus=swAuthUserStatus, cpuFilterL3RuleSrcIpAddrMask=cpuFilterL3RuleSrcIpAddrMask, snmpV3viewTreeMask=snmpV3viewTreeMask, dlinklldpTxDelay=dlinklldpTxDelay, dot1qVlanEgressPorts=dot1qVlanEgressPorts, cpuFilterv6L3RuleTcpSynBit=cpuFilterv6L3RuleTcpSynBit, dlinklldpReinitDelay=dlinklldpReinitDelay, authUserVID=authUserVID, mstCistVlanMapped3k=mstCistVlanMapped3k, snmpV3CommunityPolicy=snmpV3CommunityPolicy, impbBindingListIpAddress=impbBindingListIpAddress, companyGuestVlan=companyGuestVlan, wacVirtualIPv6=wacVirtualIPv6, impbPortDHCPv4VlanList2k=impbPortDHCPv4VlanList2k, mldsVlanFastLeave=mldsVlanFastLeave, igsVlanFilterEntry=igsVlanFilterEntry, limitIpMulticastPortProfileID=limitIpMulticastPortProfileID, erpsWTRTime=erpsWTRTime, companyMiscGroup=companyMiscGroup, tftpConfigTftpOperationStatus=tftpConfigTftpOperationStatus, igsHostTableVLANID=igsHostTableVLANID, companyGVRPGroup=companyGVRPGroup, multicastVlanTable=multicastVlanTable, qosDiffServType32=qosDiffServType32, multicastVlanRemapPriority=multicastVlanRemapPriority, erpsHoldoffTime=erpsHoldoffTime, mldsVlanGrpQueryInterval=mldsVlanGrpQueryInterval, snmpV3User=snmpV3User, qosDiffServType58=qosDiffServType58, swTimeRangeSunday=swTimeRangeSunday, vlanTrunkIfIndex=vlanTrunkIfIndex, sysDdpGeneralReportTimer=sysDdpGeneralReportTimer, igsVlanDataDrivenLearningAgeOutStatus=igsVlanDataDrivenLearningAgeOutStatus, swAuthAuthConfigPortControl=swAuthAuthConfigPortControl, lldpXdot1RemProtocolId=lldpXdot1RemProtocolId, snmpV3CommunityName=snmpV3CommunityName, lldpXdot3LocLinkAggEntry=lldpXdot3LocLinkAggEntry, limitIpMulticastEntryIPType=limitIpMulticastEntryIPType, dhcpv6RelayOpt38PortType=dhcpv6RelayOpt38PortType, smtpServerPort=smtpServerPort, iPv4swAuthRadiusServerRetransmit=iPv4swAuthRadiusServerRetransmit, sfpVendorSn=sfpVendorSn, ipv4cpuFilterProfileSrcPortMask=ipv4cpuFilterProfileSrcPortMask, portSecTable=portSecTable, authUserPassword=authUserPassword, sysWebState=sysWebState, sysWebPortNumber=sysWebPortNumber, staticVlanBaseEnableAutoLearn=staticVlanBaseEnableAutoLearn, igsAccessAuthEntry=igsAccessAuthEntry, autoFdbMacAddress=autoFdbMacAddress, swAuthUserPassword=swAuthUserPassword, aclPacketRuleOffsetValue2Mask=aclPacketRuleOffsetValue2Mask, cpuProtectTable=cpuProtectTable, sysLBDCtrlEntry=sysLBDCtrlEntry, erpsProtectedVlanList3k=erpsProtectedVlanList3k, multicastVlanUntaggedSourcePort=multicastVlanUntaggedSourcePort, cpuFilterL3RuleTcpFinBit=cpuFilterL3RuleTcpFinBit, neighborCacheState=neighborCacheState, dhcpBOOTPRelayOption82Policy=dhcpBOOTPRelayOption82Policy, aclProfileNo=aclProfileNo, impbDhcpSnoopingPort=impbDhcpSnoopingPort, mldsHostTableGroupAddress=mldsHostTableGroupAddress, sysGratuitousARPEntry=sysGratuitousARPEntry, cpuFilterL3RuleProtocolMask=cpuFilterL3RuleProtocolMask, stpForwardDelay=stpForwardDelay, sfpWavelength=sfpWavelength, gvrpSettingsLeaveTime=gvrpSettingsLeaveTime, snmpV3TrapLBD=snmpV3TrapLBD, aclPacketRuleAction=aclPacketRuleAction, syslogServUDPport=syslogServUDPport, aacLoginMethodListName=aacLoginMethodListName, staticVlanBaseAutoLearnList3k=staticVlanBaseAutoLearnList3k, macNotifyPortStatus=macNotifyPortStatus, impbPortDHCPv4VlanList4k=impbPortDHCPv4VlanList4k, aclProfileSrcIpAddrMaskType=aclProfileSrcIpAddrMaskType, companyAgentBasicInfo=companyAgentBasicInfo, mldsVlanRouterEntry=mldsVlanRouterEntry, aclPacketProfileID=aclPacketProfileID, aclUdfOffsetMask4=aclUdfOffsetMask4, lldpXdot3RemMaxFrameSize=lldpXdot3RemMaxFrameSize, multicastVlanGroupTable=multicastVlanGroupTable, qosDiffServTypeGroup=qosDiffServTypeGroup, cpuFilterL2RuleStatus=cpuFilterL2RuleStatus, lldpXdot3LocPortAutoNegSupported=lldpXdot3LocPortAutoNegSupported, qosTOSType03=qosTOSType03, aclProfileSrcIpAddrMask=aclProfileSrcIpAddrMask, multicastVlanState=multicastVlanState, qosTOSType00=qosTOSType00, snmpTrapLBD=snmpTrapLBD, aclv6L3RuleTcpUdpDstPort=aclv6L3RuleTcpUdpDstPort, stpBridgeMaxAge=stpBridgeMaxAge, impbBlockListPort=impbBlockListPort, companyDDM=companyDDM, lldpXdot1LocProtocolEntry=lldpXdot1LocProtocolEntry, swTimeRangeTuesday=swTimeRangeTuesday, ipv4trustedHostTable=ipv4trustedHostTable, swAuthPortAccessControlTable=swAuthPortAccessControlTable, sfpVendorName=sfpVendorName, companyQoSGroup=companyQoSGroup, tftpFwTargetServerIpType=tftpFwTargetServerIpType, ipv4sysSNTPSecondServer=ipv4sysSNTPSecondServer, ipv4trustedHostIpAddr=ipv4trustedHostIpAddr, trafficControl=trafficControl, laPortActorTimeout=laPortActorTimeout, impbPortIndex=impbPortIndex, protocolGroupNameTable=protocolGroupNameTable, stpBridgeHelloTime=stpBridgeHelloTime, lldpXdot3RemMaxFrameSizeEntry=lldpXdot3RemMaxFrameSizeEntry, swTimeRangeWednesday=swTimeRangeWednesday, mldsVlanMulticastGroupEntry=mldsVlanMulticastGroupEntry, ipv4mulifVLANname=ipv4mulifVLANname, cpuFilterv6L3RuleTrafficClass=cpuFilterv6L3RuleTrafficClass, ipv4aclProfileSrcPortMask=ipv4aclProfileSrcPortMask, dlinklldpConfigManAddrPortsTxEnable=dlinklldpConfigManAddrPortsTxEnable, ipv4syslogServEntry=ipv4syslogServEntry, lldpXdot1ConfigVlanNameTxEnable=lldpXdot1ConfigVlanNameTxEnable, snmpV3HostAddress=snmpV3HostAddress, qosDiffServType27=qosDiffServType27, qosDiffServType08=qosDiffServType08, dlinkGreenLEDShutoffTimeProfile1=dlinkGreenLEDShutoffTimeProfile1, sysPortCtrlType=sysPortCtrlType, trafficSegIfIndex=trafficSegIfIndex, snmpTrapRSTPStateChange=snmpTrapRSTPStateChange, qosDiffServType02=qosDiffServType02, aacServerGroupIndex=aacServerGroupIndex, macBasedPortCtrlState=macBasedPortCtrlState, qosDiffServType06=qosDiffServType06, l2PTThresholdEntry=l2PTThresholdEntry, aclQosProtocol=aclQosProtocol, macBasedPortCtrlIndex=macBasedPortCtrlIndex, swAuthAuthCapability=swAuthAuthCapability, snmpTrapWarmStart=snmpTrapWarmStart, aclProfileUdfOffsetMap=aclProfileUdfOffsetMap, erpsRevertive=erpsRevertive, mulifMainRowStatus=mulifMainRowStatus, autoFdbVlanID=autoFdbVlanID, stpPortPathCost=stpPortPathCost, lldpXdot1ConfigPortVlanTable=lldpXdot1ConfigPortVlanTable, staticMcastIpAddr=staticMcastIpAddr, aacLoginMethodListTable=aacLoginMethodListTable, protocolGroupGID=protocolGroupGID, impbDHCPv6PrefixDelegationSnoopState=impbDHCPv6PrefixDelegationSnoopState)
mibBuilder.exportSymbols("DGS-1210-28XSME-BX", rmonEventType=rmonEventType, sysSNTPDSTRepeatStartMin=sysSNTPDSTRepeatStartMin, qosDefaultUserPriTable=qosDefaultUserPriTable, impbPortAllowZeroIPState=impbPortAllowZeroIPState, swTimeRangeIndex=swTimeRangeIndex, sysPortMediaTypeSn=sysPortMediaTypeSn, aclv6L3RuleICMPMessageCode=aclv6L3RuleICMPMessageCode, dhcpServerScreenEnablePortlist=dhcpServerScreenEnablePortlist, lldpXdot3LocLinkAggStatus=lldpXdot3LocLinkAggStatus, sysGratuitousARPIFName=sysGratuitousARPIFName, swTimeRangeStartMinute=swTimeRangeStartMinute, cpuFilterL2AccessID=cpuFilterL2AccessID, ipv4smtpRecvMailAddrTable=ipv4smtpRecvMailAddrTable, lldpXdot1LocProtocolIndex=lldpXdot1LocProtocolIndex, ftpConfigPort=ftpConfigPort, macBasedCtrlLocalMacAddress=macBasedCtrlLocalMacAddress, dhcpv6RelayOpt38PortID=dhcpv6RelayOpt38PortID, wacStatus=wacStatus, ftpFwFTPOperation=ftpFwFTPOperation, multicastVlanReplacePriority=multicastVlanReplacePriority, cpuFilterL2RuleDstMacAddrMask=cpuFilterL2RuleDstMacAddrMask, sysPortMediaTypeOui=sysPortMediaTypeOui, dlinkGreenPortShutoff=dlinkGreenPortShutoff, securityAAC=securityAAC, iPv4aacServerRetryCount=iPv4aacServerRetryCount, duldMode=duldMode, sysSystemPassword=sysSystemPassword, companyAuthGroup=companyAuthGroup, cpuFilterL3RuleDstIpAddr=cpuFilterL3RuleDstIpAddr, aclv6L3RuleDstIpAddrMask=aclv6L3RuleDstIpAddrMask, rmonHistoryOwner=rmonHistoryOwner, companyDuld=companyDuld, snmpTrapFirmUpgrade=snmpTrapFirmUpgrade, iPv4aacServerInfoTable=iPv4aacServerInfoTable, stpBridgePriority=stpBridgePriority, macBasedCtrlLocalTable=macBasedCtrlLocalTable, erpsAdminWestPortState=erpsAdminWestPortState, ipv4aclProfileArpSenderMacAddrMask=ipv4aclProfileArpSenderMacAddrMask, snmpV3IPType=snmpV3IPType, aclv6L3RuleTcpSynBit=aclv6L3RuleTcpSynBit, aclv6L3RuleTrafficClass=aclv6L3RuleTrafficClass, limitIpMulticastPortTable=limitIpMulticastPortTable, qinqEntry=qinqEntry, rmonAlarmFallingThreshold=rmonAlarmFallingThreshold, laSystem=laSystem, igsSystem=igsSystem, impbPortDHCPv6VlanList1k=impbPortDHCPv6VlanList1k, swTimeRangeRowStatus=swTimeRangeRowStatus, macBasedPortCtrlEntry=macBasedPortCtrlEntry, companySecurity=companySecurity, wacAuthPort=wacAuthPort, mstCistVlanMapped=mstCistVlanMapped, impbBlockListStatus=impbBlockListStatus, mstMstiPortDesignatedBridge=mstMstiPortDesignatedBridge, stpPortRestrictedTCN=stpPortRestrictedTCN, errorFrameWindow=errorFrameWindow, rmonAlarmRisingThreshold=rmonAlarmRisingThreshold, igmpMulticastVlanid=igmpMulticastVlanid, companyMultiIPInterface=companyMultiIPInterface, sysMirrorCtrlIngressMirroring=sysMirrorCtrlIngressMirroring, cosClassEntry=cosClassEntry, sysPortType=sysPortType, aclv6L3RuleICMPMessageType=aclv6L3RuleICMPMessageType, dlinkGreenSystemHibernationTimeProfile1=dlinkGreenSystemHibernationTimeProfile1, sysPortCtrlEntry=sysPortCtrlEntry, igsAccessAuthPortIndex=igsAccessAuthPortIndex, macNotifyInfo=macNotifyInfo, sysDdpPortStatusTable=sysDdpPortStatusTable, dhcpv6RelayOption37RemoteID=dhcpv6RelayOption37RemoteID, aclL3RuleTcpPshBit=aclL3RuleTcpPshBit, sysDdpPortStatusControl=sysDdpPortStatusControl, aclv6L3RuleAccessID=aclv6L3RuleAccessID, lldpXdot1RemPortVlanId=lldpXdot1RemPortVlanId, stpPort=stpPort, dhcpLocalRelaySettingsState=dhcpLocalRelaySettingsState, swTimeRangeEndYear=swTimeRangeEndYear, macBasedTrapStatus=macBasedTrapStatus, igmpMulticastVlanRemapPriority=igmpMulticastVlanRemapPriority, companyTrafficMgmt=companyTrafficMgmt, mldsHostTableHostIPAddress=mldsHostTableHostIPAddress, duldState=duldState, qinqVlanTranslationPriority=qinqVlanTranslationPriority, dot1qVlanPortEntry=dot1qVlanPortEntry, doSCtrlTable=doSCtrlTable, laPortChannelMasterPort=laPortChannelMasterPort, neighborRowStatus=neighborRowStatus, ipv4mulifMainIndex=ipv4mulifMainIndex, mulifIpAddr=mulifIpAddr, tftpFwTargetInterfaceName=tftpFwTargetInterfaceName, lldpXdot3RemPowerMDISupported=lldpXdot3RemPowerMDISupported, syslogServEntry=syslogServEntry, macNotifyCtrlTable=macNotifyCtrlTable, syslogServAddrType=syslogServAddrType, cpuFilterL3RuleICMPMessageCode=cpuFilterL3RuleICMPMessageCode, sysDdpPortStatusEntry=sysDdpPortStatusEntry, companyPPPoE=companyPPPoE, mstMstiPortPriority=mstMstiPortPriority, dot1qVlanName=dot1qVlanName, companyFTPGroup=companyFTPGroup, mstiConfigurationName=mstiConfigurationName, VlanIndex=VlanIndex, portD3Index=portD3Index, trafficSegTable=trafficSegTable, aclL3RuleTable=aclL3RuleTable, snmpTrapSNMPAuthentication=snmpTrapSNMPAuthentication, protocolVlanVID=protocolVlanVID, tftpCfgTargetTftpOperationStatus=tftpCfgTargetTftpOperationStatus, aclv6L3RuleSrcIpAddrMask=aclv6L3RuleSrcIpAddrMask, tftpFwTargetTftpOperationStatus=tftpFwTargetTftpOperationStatus, aacServerAuthPort=aacServerAuthPort, dlinkGreenPortShutoffTimeProfile2=dlinkGreenPortShutoffTimeProfile2, ftpFwPort=ftpFwPort, ipifV6AddressIpPrefix=ipifV6AddressIpPrefix, syslogSettingGroup=syslogSettingGroup, qosDiffServType53=qosDiffServType53, impbBlockListVlanId=impbBlockListVlanId, ipv4syslogServIndex=ipv4syslogServIndex, duldEntry=duldEntry, aclProfileMask=aclProfileMask, erpsProtectedVlanList1k=erpsProtectedVlanList1k, aclL2RuleVlanIdMask=aclL2RuleVlanIdMask, aacAccountingMethod3=aacAccountingMethod3, aclv6L3RuleProfileNo=aclv6L3RuleProfileNo, lldpXdot3LocPortTable=lldpXdot3LocPortTable, swTimeRangeStartDay=swTimeRangeStartDay, pppoePortCircuitIDType=pppoePortCircuitIDType, aclFlowMeterRule=aclFlowMeterRule, aacLocalEnablePassword=aacLocalEnablePassword, dhcpv6RelayServerIP=dhcpv6RelayServerIP, gvrpSettingsTable=gvrpSettingsTable, aclPacketRuleOffsetValue4Mask=aclPacketRuleOffsetValue4Mask, dhcpv6RelayInterfaceSettingsTable=dhcpv6RelayInterfaceSettingsTable, igsVlanMulticastGroupPortList=igsVlanMulticastGroupPortList, sysSmartFanStatus=sysSmartFanStatus, aacServerAuthKey=aacServerAuthKey, macBasedCtrlAuthVID=macBasedCtrlAuthVID, ipv4trustedHostEntry=ipv4trustedHostEntry, dot1qVlanPortTable=dot1qVlanPortTable, aclProfileArpSenderMacAddrMask=aclProfileArpSenderMacAddrMask, l2PTDropThreshold=l2PTDropThreshold, portSecState=portSecState, qosUserPriorityTable=qosUserPriorityTable, ipv4aclProfileUdfOffsetMap=ipv4aclProfileUdfOffsetMap, cpuFilterL2Rule=cpuFilterL2Rule, sshSessionKeyRekeying=sshSessionKeyRekeying, syslogSaveMode=syslogSaveMode, mstMstiBridgeEntry=mstMstiBridgeEntry, sysPortMediaTypeRev=sysPortMediaTypeRev, ipifVLANname=ipifVLANname, cpuFilterv6L3RuleSrcIpAddrMask=cpuFilterv6L3RuleSrcIpAddrMask, mulifVLANID=mulifVLANID, ddmHighAlarm=ddmHighAlarm, protocolVlanEntry=protocolVlanEntry, lldpXdot1RemProtocolIndex=lldpXdot1RemProtocolIndex, swAuthRadiusServerKey=swAuthRadiusServerKey, smtpRecvMailAddrTable=smtpRecvMailAddrTable, mstCistPortAdminPathCost=mstCistPortAdminPathCost, sysGratuitousARPDuplicateIPDetected=sysGratuitousARPDuplicateIPDetected, swTimeRangeStartMonth=swTimeRangeStartMonth, igsVlanMulticastGroupIpAddress=igsVlanMulticastGroupIpAddress, rmonEventIndex=rmonEventIndex, aclFlowMeterProfileID=aclFlowMeterProfileID, aclQosIPAddr=aclQosIPAddr, sysMirrorCtrlEgressMirroring=sysMirrorCtrlEgressMirroring, iPv4swAuthRadiusServerTimeout=iPv4swAuthRadiusServerTimeout, aclL3RulePortList=aclL3RulePortList, impbBindingListEntry=impbBindingListEntry, aclProfileDstIpAddrMask=aclProfileDstIpAddrMask, cpuFilterProfileDstPortMask=cpuFilterProfileDstPortMask, protocolGroupId=protocolGroupId, snmpV3UserName=snmpV3UserName, aclL3RuleICMPMessageCode=aclL3RuleICMPMessageCode, snmpV3HostCommunityName=snmpV3HostCommunityName, limitIpMulticastPortState=limitIpMulticastPortState, ipv4cpuFilterProfileDstMacAddrMask=ipv4cpuFilterProfileDstMacAddrMask, duldSystem=duldSystem, macBasedLogStatus=macBasedLogStatus, sysBootupConfigID=sysBootupConfigID, staticMcastStatus=staticMcastStatus, snmpV3TrapDHCPServerScreening=snmpV3TrapDHCPServerScreening, dhcpv6RelayOption38=dhcpv6RelayOption38, cpuFilterv6L3RuleStatus=cpuFilterv6L3RuleStatus, dhcpOption12HostName=dhcpOption12HostName, dhcpv6RelayInterface=dhcpv6RelayInterface, igsReportToAllPort=igsReportToAllPort, impbPortArpInspectionState=impbPortArpInspectionState, cpuFilterL3RuleStatus=cpuFilterL3RuleStatus, ipv4sysSNTPDSTEndMon=ipv4sysSNTPDSTEndMon, cpuFilterProfileSrcIpAddrMaskType=cpuFilterProfileSrcIpAddrMaskType, impbAutoScanIpAddressFrom=impbAutoScanIpAddressFrom, trustedHostEntry=trustedHostEntry, lldpXdot1RemProtoVlanEnabled=lldpXdot1RemProtoVlanEnabled, iPv4swAuthRadiusServerTable=iPv4swAuthRadiusServerTable, aclFlowMeterRate=aclFlowMeterRate, sysLBDCtrlIndex=sysLBDCtrlIndex, sysPortCtrlOperStatus=sysPortCtrlOperStatus, igmpMulticastVlanGroupTable=igmpMulticastVlanGroupTable, errorFramePeriodNotifyState=errorFramePeriodNotifyState, snmpV3GroupWriteViewName=snmpV3GroupWriteViewName, igmpMulticastVlanRowStatus=igmpMulticastVlanRowStatus, lldpXdot1RemEntry=lldpXdot1RemEntry, sshUserInfoEntry=sshUserInfoEntry, aacAccountingServiceCommand=aacAccountingServiceCommand, aclFlowMeterTable=aclFlowMeterTable, aclL3RuleDstIpAddr=aclL3RuleDstIpAddr, aRPSpoofPreventIpAddr=aRPSpoofPreventIpAddr, sfpTranceiverCode=sfpTranceiverCode, mstMstiPortAdminPathCost=mstMstiPortAdminPathCost, igsHostTableGroupAddress=igsHostTableGroupAddress, qosUserPriEntry=qosUserPriEntry, qosDiffServType12=qosDiffServType12, lldpXdot1RemProtoVlanSupported=lldpXdot1RemProtoVlanSupported, syslogSaveMinutes=syslogSaveMinutes, agentCPUutilization=agentCPUutilization, RmonStatus=RmonStatus, ipv4cpuFilterProfileIPProtocolMask=ipv4cpuFilterProfileIPProtocolMask, errorFrameNotifyState=errorFrameNotifyState, aacEnableMethod4=aacEnableMethod4, authProtocol=authProtocol, vlanMacMapAddr=vlanMacMapAddr, sysSNTPDSTRepeatStartWeek=sysSNTPDSTRepeatStartWeek, sfpConnectorType=sfpConnectorType, cpuFilterv6L3RuleTcpUdpSrcPort=cpuFilterv6L3RuleTcpUdpSrcPort, swAuthRadiusServerAuthenticationPort=swAuthRadiusServerAuthenticationPort, swTimeRangeEndMinute=swTimeRangeEndMinute, aclL2RuleDstMacAddrMask=aclL2RuleDstMacAddrMask, cpuFilterv6L3RuleAccessID=cpuFilterv6L3RuleAccessID, portSecFDBPermanentTable=portSecFDBPermanentTable, aacServerIndex=aacServerIndex, sysPortMediaTypeIndex=sysPortMediaTypeIndex, qosAclPrioritySettings=qosAclPrioritySettings, autoRefreshConfiguration=autoRefreshConfiguration, snmpV3viewTreeSubtree=snmpV3viewTreeSubtree, laPortActorActivity=laPortActorActivity, sysSNTPDSTRepeatEndMin=sysSNTPDSTRepeatEndMin, snmpV3GroupName=snmpV3GroupName, macBasedPortCtrlBlockTime=macBasedPortCtrlBlockTime, sysBPDUAttackStateEnable=sysBPDUAttackStateEnable, impbAutoScanCurrentStatus=impbAutoScanCurrentStatus, mstMstiStatus=mstMstiStatus, trafficCtrlIndex=trafficCtrlIndex, dhcpBOOTPRelayOption82State=dhcpBOOTPRelayOption82State, lldpXdot3RemPowerPairControlable=lldpXdot3RemPowerPairControlable, snmpV3TrapRSTPStateChange=snmpV3TrapRSTPStateChange, pppoePortRemoteIDVendor3String=pppoePortRemoteIDVendor3String, ipv4snmpV3HostCommunityName=ipv4snmpV3HostCommunityName, aclUdfOffsetChunk2=aclUdfOffsetChunk2, smtpRecvMailAddrStatus=smtpRecvMailAddrStatus, igmpMulticastVlanGroupStatus=igmpMulticastVlanGroupStatus, errorSymbolWindow=errorSymbolWindow, impbVlanModeVlanList=impbVlanModeVlanList, cosWeight=cosWeight, sysLoginTimeoutInterval=sysLoginTimeoutInterval, sysPortErrPortReason=sysPortErrPortReason)
mibBuilder.exportSymbols("DGS-1210-28XSME-BX", dhcpBOOTPRelayManagementOption82=dhcpBOOTPRelayManagementOption82, l2PTProtocol=l2PTProtocol, stpBridgeForwardDelay=stpBridgeForwardDelay, mldsVlanDataDrivenLearningStatus=mldsVlanDataDrivenLearningStatus, trafficCtrlAutoRecoverTime=trafficCtrlAutoRecoverTime, snmpV3GroupNotifyViewName=snmpV3GroupNotifyViewName, igmpMulticastVlanGroupToIp=igmpMulticastVlanGroupToIp, trafficCtrlThreshold=trafficCtrlThreshold, dhcpRelayVlanSettingsVLANID=dhcpRelayVlanSettingsVLANID, l2PTProtocolIndex=l2PTProtocolIndex, qosUserPriority=qosUserPriority, companyIgsGroup=companyIgsGroup, authUserName=authUserName, cpuFilterL3RuleAccessID=cpuFilterL3RuleAccessID, aclL3RuleDscp=aclL3RuleDscp, mulifMainAdminStatus=mulifMainAdminStatus, snmpV3TrapLinkUpDown=snmpV3TrapLinkUpDown, impbAutoScanBinding=impbAutoScanBinding, telnetUDPPort=telnetUDPPort, tftpFwServerIpAddress=tftpFwServerIpAddress, igsVlanFbdRtrPortList=igsVlanFbdRtrPortList, snmpV3ViewTree=snmpV3ViewTree, wacAuthStateEntry=wacAuthStateEntry, dhcpLocalRelayTableEntry=dhcpLocalRelayTableEntry, sysMirrorTargetPort=sysMirrorTargetPort, impbPortForwardDHCPPktState=impbPortForwardDHCPPktState, dhcpBOOTPRelayInterfaceSettingsEntry=dhcpBOOTPRelayInterfaceSettingsEntry, eoamSystem=eoamSystem, cpuFilterProfileSrcMacAddrMask=cpuFilterProfileSrcMacAddrMask, aclL2RuleFilterTimeRange=aclL2RuleFilterTimeRange, cpuFilterL3RuleTcpPshBit=cpuFilterL3RuleTcpPshBit, lldpXdot3RemLinkAggTable=lldpXdot3RemLinkAggTable, laPortControl=laPortControl, cpuFilterv6L3RuleProtocolMask=cpuFilterv6L3RuleProtocolMask, macBasedCtrlAuthPriority=macBasedCtrlAuthPriority, aacAccountingMethodListTable=aacAccountingMethodListTable, iPv4aacServerAuthPort=iPv4aacServerAuthPort, igsHostEntry=igsHostEntry, aacAPAuthMethodGroup=aacAPAuthMethodGroup, ipv4aclQosTCPUDPPort=ipv4aclQosTCPUDPPort, igsAccessAuthState=igsAccessAuthState, companyWACAuthGroup=companyWACAuthGroup, swAuthRadiusServerTable=swAuthRadiusServerTable, aclFlowMeterAction=aclFlowMeterAction, igsVlanRouterPortList=igsVlanRouterPortList, ipv4sysSNTPDSTEndDay=ipv4sysSNTPDSTEndDay, securityARPSpoofPrevent=securityARPSpoofPrevent, pppoePortEntry=pppoePortEntry, dhcpv6RelayOption18=dhcpv6RelayOption18, multicastVlanGroupEntry=multicastVlanGroupEntry, erpsSubRingRAPSVLANID=erpsSubRingRAPSVLANID, rmonStatsStatus=rmonStatsStatus, aclv6L3RuleReplaceDSCP=aclv6L3RuleReplaceDSCP, cpuFilterv6L3RuleDstIpAddrMask=cpuFilterv6L3RuleDstIpAddrMask, tftpFwTargetServerIpAddress=tftpFwTargetServerIpAddress, wacClrRedirPath=wacClrRedirPath, erpsProtectedDelVlanList=erpsProtectedDelVlanList, aacEnableMethod1=aacEnableMethod1, ipv4cpuFilterProfileIPProtocol=ipv4cpuFilterProfileIPProtocol, autoFdbPort=autoFdbPort, sysVersion=sysVersion, cpuFilterL2Rule1pPriority=cpuFilterL2Rule1pPriority, aacEnableMethodListRowStatus=aacEnableMethodListRowStatus, waclocalAuth=waclocalAuth, aacAccountingMethodListEntry=aacAccountingMethodListEntry, aacAPEnableMethod=aacAPEnableMethod, staticPort=staticPort, tftpCfgTargetServerIpAddress=tftpCfgTargetServerIpAddress, stpPortFowardBPDU=stpPortFowardBPDU, snmpV3CommunityEncryption=snmpV3CommunityEncryption, aclv6L3RulePortList=aclv6L3RulePortList, mstInstanceVlanMapped=mstInstanceVlanMapped, ipv4aclProfileDstMacAddrMask=ipv4aclProfileDstMacAddrMask, macBasedVlanEntry=macBasedVlanEntry, snmpV3TrapBPDUAttack=snmpV3TrapBPDUAttack, snmpV3TrapPortSecurity=snmpV3TrapPortSecurity, snmpV3HostStatus=snmpV3HostStatus, neighborTable=neighborTable, mstMstiPortPathCost=mstMstiPortPathCost, sysSafeGuardEnable=sysSafeGuardEnable, sysIpAddrCfgMode=sysIpAddrCfgMode, lldpXdot1LocEntry=lldpXdot1LocEntry, impbSettingTable=impbSettingTable, sshAuthenMethodPassWordAdmin=sshAuthenMethodPassWordAdmin, mulifIpSubnetMask=mulifIpSubnetMask, qinqRoleState=qinqRoleState, erpsAdminWestPort=erpsAdminWestPort, aclProfile=aclProfile, aclPacketRuleInPortList=aclPacketRuleInPortList, rmonAlarmInterval=rmonAlarmInterval, duldOperState=duldOperState, impbBindingListRowStatus=impbBindingListRowStatus, mldsStatus=mldsStatus, errorFramePeriodThreshold=errorFramePeriodThreshold, sysSNTPDSTStartMon=sysSNTPDSTStartMon, sfpDateCode=sfpDateCode, agentMEMutilization=agentMEMutilization, aacAuthParamResponseTimeout=aacAuthParamResponseTimeout, aacServerGroupRowStatus=aacServerGroupRowStatus, aacAccountingServiceCommandAdministrator=aacAccountingServiceCommandAdministrator, macBasedCtrlAuthEntry=macBasedCtrlAuthEntry, swAuthStatus=swAuthStatus, impbPortDHCPv4VlanList1k=impbPortDHCPv4VlanList1k, cpuFilterProfileSrcPortMask=cpuFilterProfileSrcPortMask, protocolGroupTable=protocolGroupTable, aacAPLoginMethod=aacAPLoginMethod, aclL3RuleTcpUdpDstPortMask=aclL3RuleTcpUdpDstPortMask, impbDhcpSnoopingLeaseTime=impbDhcpSnoopingLeaseTime, dot1qVlanRowStatus=dot1qVlanRowStatus, trustedHostIPType=trustedHostIPType, portSecFDBPermVlanID=portSecFDBPermVlanID, qosDiffServType25=qosDiffServType25, cpuFilterL2RuleDstMacAddr=cpuFilterL2RuleDstMacAddr, wacAuthStateVID=wacAuthStateVID, qosUserPriClass=qosUserPriClass, portSecFDBPermIndex=portSecFDBPermIndex, aclProfileSrcMacAddrMask=aclProfileSrcMacAddrMask, syslogServSrvRowStatus=syslogServSrvRowStatus, qosDiffServType60=qosDiffServType60, aclQosIndex=aclQosIndex, dhcpv6RelayHopCount=dhcpv6RelayHopCount, sysSNTPDSTRepeatStartMon=sysSNTPDSTRepeatStartMon, sysSNTPDSTRepeatStartHour=sysSNTPDSTRepeatStartHour, lldpXdot1RemVlanId=lldpXdot1RemVlanId, ftpFwPath=ftpFwPath, trustedHostStatus=trustedHostStatus, erpsRAPSVLANID=erpsRAPSVLANID, sysPortCtrlMDI=sysPortCtrlMDI, ftpConfigPath=ftpConfigPath, staticStatus=staticStatus, sysLBDMode=sysLBDMode, lldpXdot3LocMaxFrameSize=lldpXdot3LocMaxFrameSize, igmpMulticastVlanSourcePort=igmpMulticastVlanSourcePort, multicastVlanGroupIpType=multicastVlanGroupIpType, rmonAlarmOwner=rmonAlarmOwner, swTimeRangeThursday=swTimeRangeThursday, qosDiffServType43=qosDiffServType43, qinqInnerTPID=qinqInnerTPID, macBasedCtrlLocalRowStatus=macBasedCtrlLocalRowStatus, laPortChannelEntry=laPortChannelEntry, rmonAlarmFallingEventIndex=rmonAlarmFallingEventIndex, staticVlanBaseAutoLearnList1k=staticVlanBaseAutoLearnList1k, sysBPDUAttackPortState=sysBPDUAttackPortState, wacPortCtrlIndex=wacPortCtrlIndex, wacAuthStateRowStatus=wacAuthStateRowStatus, aclPacketRuleStatus=aclPacketRuleStatus, syslogServIndex=syslogServIndex, snmpV3viewTreeStatus=snmpV3viewTreeStatus, qinqAddInnerTagState=qinqAddInnerTagState, cpuProtectState=cpuProtectState, companyswLedPanel=companyswLedPanel, dlinkGreenLEDShutoff=dlinkGreenLEDShutoff, ddmCtrl=ddmCtrl, l2PTThresholdTable=l2PTThresholdTable, companySTP=companySTP, sshUserInfoAuth=sshUserInfoAuth, ipv4sysSNTPGMTMinutes=ipv4sysSNTPGMTMinutes, swTimeRangeMonday=swTimeRangeMonday, cpuFilterv6L3RuleTcpFinBit=cpuFilterv6L3RuleTcpFinBit, multicastVlanGroupToIp=multicastVlanGroupToIp, wacAuthPortMethod=wacAuthPortMethod, sfpVendorOui=sfpVendorOui, limitIpMulticaststartIpAddr=limitIpMulticaststartIpAddr, qosDiffServType15=qosDiffServType15, sysSNTPPollInterval=sysSNTPPollInterval, trustedHostIpAddr=trustedHostIpAddr, sysSave=sysSave, ftpConfigUsername=ftpConfigUsername, aclv6L3RuleReplace1P=aclv6L3RuleReplace1P, snmpV3GroupTable=snmpV3GroupTable, gvrpSettingsJoinTime=gvrpSettingsJoinTime, sysSize=sysSize, staticMcastMac=staticMcastMac, ipv4aclProfileType=ipv4aclProfileType, ipv4syslogServSrvRowStatus=ipv4syslogServSrvRowStatus, ipv4sysSNTPDSTState=ipv4sysSNTPDSTState, aacAccountingMethodListIndex=aacAccountingMethodListIndex, macNotifyCtrlIndex=macNotifyCtrlIndex, sysUpdateTime=sysUpdateTime, igsVlanCfgQuerier=igsVlanCfgQuerier, aclUdfOffsetMask1=aclUdfOffsetMask1, aclL3RuleProtocol=aclL3RuleProtocol, qinqVlanTranslationRowStatus=qinqVlanTranslationRowStatus, qosDiffServType10=qosDiffServType10, sshUserInfoID=sshUserInfoID, sysLBDPortLoopStatus=sysLBDPortLoopStatus, gvrpSettingsIngressChecking=gvrpSettingsIngressChecking, qosDiffServType20=qosDiffServType20, swAuthRadiusServer=swAuthRadiusServer, mldsVlanQuerier=mldsVlanQuerier, ftpFwTable=ftpFwTable, oldDesignatedRoot=oldDesignatedRoot, igmpMulticastVlanGroupVid=igmpMulticastVlanGroupVid, companyQinQ=companyQinQ, cpuFilterState=cpuFilterState, qosDiffServType14=qosDiffServType14, dot1qVlanTable=dot1qVlanTable, rmonAlarmStatus=rmonAlarmStatus, wacPortCtrlBlocktime=wacPortCtrlBlocktime, ipv4trustedHostRowStatus=ipv4trustedHostRowStatus, sysSNTPDSTRepeatEndWeekDay=sysSNTPDSTRepeatEndWeekDay, sysHardwareVersion=sysHardwareVersion, newRootOlddesignatedroot=newRootOlddesignatedroot, eoamState=eoamState, impbAutoScanIpAddress=impbAutoScanIpAddress, qinqMissDropState=qinqMissDropState, sysPortCtrlIndex=sysPortCtrlIndex, qinqAddInnerTagValue=qinqAddInnerTagValue, ipv4mulifIpAddr=ipv4mulifIpAddr, mldsVlanRouterPortList=mldsVlanRouterPortList, ipv4aclQosProtocol=ipv4aclQosProtocol, sysBPDUAttackCtrlEntry=sysBPDUAttackCtrlEntry, lldpXdot3RemPowerEntry=lldpXdot3RemPowerEntry, ddmVoltage=ddmVoltage, aclL3RuleRateLimit=aclL3RuleRateLimit, erpsInfoEntry=erpsInfoEntry, swTimeRangeEndDay=swTimeRangeEndDay, wacAuthStateTable=wacAuthStateTable, mldsVlan=mldsVlan, sysGratuitousARPTable=sysGratuitousARPTable, swAuthRadiusServerTimeout=swAuthRadiusServerTimeout, mstCistVlanMapped2k=mstCistVlanMapped2k, aclv6L3RuleEntry=aclv6L3RuleEntry, aacEnableMethodListEntry=aacEnableMethodListEntry, agentCPUutilizationIn5min=agentCPUutilizationIn5min, swAuthCtrlPktFwdMode=swAuthCtrlPktFwdMode, rmonHistoryInterval=rmonHistoryInterval, qosDefaultPriority=qosDefaultPriority, aacServerAuthProtocol=aacServerAuthProtocol, companySyslog=companySyslog, limitIpMulticastPortEntry=limitIpMulticastPortEntry, impbVlanModeState=impbVlanModeState, cpuFilterProfileNo=cpuFilterProfileNo, eoamLinkMonitorTable=eoamLinkMonitorTable, aacServerRowStatus=aacServerRowStatus, rmonStatsEntry=rmonStatsEntry, igsVlanQuerier=igsVlanQuerier, cpuFilterL2RuleTable=cpuFilterL2RuleTable, traps=traps, ddmStatusPort=ddmStatusPort, cpuFilterProfileMask=cpuFilterProfileMask, dhcpv6RelayOption37State=dhcpv6RelayOption37State, macBasedPortCtrlTable=macBasedPortCtrlTable, wacAuthStatePort=wacAuthStatePort, lldpXdot1RemProtocolTable=lldpXdot1RemProtocolTable, PYSNMP_MODULE_ID=dgs_1210_28xscmebx, aclv6L3RuleFilterTimeRange=aclv6L3RuleFilterTimeRange, mulifV6AddressRowStatus=mulifV6AddressRowStatus, snmpTrapIMPBv2=snmpTrapIMPBv2, erpsRowStatus=erpsRowStatus, ddmActionMgmtEntry=ddmActionMgmtEntry, sshSecurityStatus=sshSecurityStatus, impbDhcpSnoopingMacAddress=impbDhcpSnoopingMacAddress, swLedInfoEntry=swLedInfoEntry)
mibBuilder.exportSymbols("DGS-1210-28XSME-BX", tftpCfgTargetInterfaceName=tftpCfgTargetInterfaceName, sysSNTPFirstServer=sysSNTPFirstServer, sysSNTPDSTStartDay=sysSNTPDSTStartDay, dosCtrlTrapLogState=dosCtrlTrapLogState, aclQosType=aclQosType, iPv4aacServerRowStatus=iPv4aacServerRowStatus, aclL2ProfileID=aclL2ProfileID, bandwidthCtrlIndex=bandwidthCtrlIndex, impbLogState=impbLogState, l2PTEntry=l2PTEntry, snmpV3CommunityTable=snmpV3CommunityTable, ipv4smtpRecvMailAddrStatus=ipv4smtpRecvMailAddrStatus, swAuthAuthQuietPeriod=swAuthAuthQuietPeriod, ipv4syslogServUDPport=ipv4syslogServUDPport, rmonAlarmTable=rmonAlarmTable, aacAPTelnetEnableMethod=aacAPTelnetEnableMethod, ipv4aclUdfOffsetChunk2=ipv4aclUdfOffsetChunk2, topologyChange=topologyChange, aclL2RuleReplaceDSCP=aclL2RuleReplaceDSCP, PortLaMode=PortLaMode, rmonHistoryEntry=rmonHistoryEntry, igmpMulticastVlanEntry=igmpMulticastVlanEntry, trafficCtrlEntry=trafficCtrlEntry, aclL2RuleReplaceQueue=aclL2RuleReplaceQueue, doSCtrlEntry=doSCtrlEntry, ftpConfigFTPOperation=ftpConfigFTPOperation, qosDiffServType07=qosDiffServType07, qosTOSType01=qosTOSType01, ddmRxPower=ddmRxPower, securityIpMacPortBinding=securityIpMacPortBinding, eoamCriticalEventEnable=eoamCriticalEventEnable, sysLBDVlanLoopPorts=sysLBDVlanLoopPorts, mldsHostEntry=mldsHostEntry, cpuFilterv6L3RuleTcpUdpDstPortMask=cpuFilterv6L3RuleTcpUdpDstPortMask, aacAPHttpEnableMethod=aacAPHttpEnableMethod, lldpXdot3LocLinkAggTable=lldpXdot3LocLinkAggTable, snmpV3UserAuthProtocolPassword=snmpV3UserAuthProtocolPassword, sysSNTPGMTMinutes=sysSNTPGMTMinutes, igmpMulticastVlanGroupEntry=igmpMulticastVlanGroupEntry, ipv4aclQosTable=ipv4aclQosTable, cpuFilterv6L3RuleProfileNo=cpuFilterv6L3RuleProfileNo, trafficCtrlTable=trafficCtrlTable, lldpXdot3LocPortAutoNegEnabled=lldpXdot3LocPortAutoNegEnabled, brgAddress=brgAddress, lldpXdot3LocPowerClass=lldpXdot3LocPowerClass, l2PTPortIndex=l2PTPortIndex, aclQosStatus=aclQosStatus, aclUdfOffsetChunk1=aclUdfOffsetChunk1, cpuFilterL2RuleAction=cpuFilterL2RuleAction, igsVlanRobustnessValue=igsVlanRobustnessValue, filterDHCPServerPortList=filterDHCPServerPortList, qosDiffServType63=qosDiffServType63, aclProfileRuleCount=aclProfileRuleCount, sfpVendorInfoTable=sfpVendorInfoTable, companyACLGroup=companyACLGroup, laPortControlTable=laPortControlTable, snmpV3UserGroupName=snmpV3UserGroupName, tftpFwTftpOperationStatus=tftpFwTftpOperationStatus, impbPortState=impbPortState, cpuFilterL3RulePortList=cpuFilterL3RulePortList, dhcpBOOTPRelayState=dhcpBOOTPRelayState, smtpSelfMailAddr=smtpSelfMailAddr, snmpV3UserVersion=snmpV3UserVersion, lldpXdot3LocPowerMDISupported=lldpXdot3LocPowerMDISupported, dlinkGreenSystemHibernationTimeProfile2=dlinkGreenSystemHibernationTimeProfile2, macBasedRadiusAuthStatus=macBasedRadiusAuthStatus, qosDiffServType52=qosDiffServType52, laPortActorPortPriority=laPortActorPortPriority, aclPacketRuleOffsetValue3Mask=aclPacketRuleOffsetValue3Mask, lldpXdot3LocPortAutoNegAdvertisedCap=lldpXdot3LocPortAutoNegAdvertisedCap, sysLBDInterval=sysLBDInterval, staticDisableAutoLearn=staticDisableAutoLearn, aacAuthenAdminState=aacAuthenAdminState, macBasedPortCtrlAgingTime=macBasedPortCtrlAgingTime, lldpXdot1ConfigProtocolTxEnable=lldpXdot1ConfigProtocolTxEnable, sysIpAddr=sysIpAddr, ipv4sysSNTPDSTStartMon=ipv4sysSNTPDSTStartMon, erpsProtectedVlanList4k=erpsProtectedVlanList4k, ipv4smtpState=ipv4smtpState, duldLinkStatus=duldLinkStatus, limitIpMulticastEntry=limitIpMulticastEntry, mulifName=mulifName, lldpXdot1RemVlanName=lldpXdot1RemVlanName, mldsVlanSnoopStatus=mldsVlanSnoopStatus, tftpConfigFileName=tftpConfigFileName, aclL3RuleProtocolMask=aclL3RuleProtocolMask, ipv4aclUdfOffsetMask4=ipv4aclUdfOffsetMask4, sshPublKeyRSAAdmin=sshPublKeyRSAAdmin, wacAuthMethod=wacAuthMethod, qosDiffServType38=qosDiffServType38, ipv4cpuFilterProfileSrcIpAddrMask=ipv4cpuFilterProfileSrcIpAddrMask, mstCistStatus=mstCistStatus, sysLBDPortStatus=sysLBDPortStatus, rmonEventTable=rmonEventTable, aacServerPasswordEncryption=aacServerPasswordEncryption, impbAutoScanVlanId=impbAutoScanVlanId, Timeout=Timeout, staticEntry=staticEntry, impbBindingListPort=impbBindingListPort, aclL3RuleReplace1P=aclL3RuleReplace1P, iPv4swAuthRadiusServerAccountingPort=iPv4swAuthRadiusServerAccountingPort, ddmLowWarning=ddmLowWarning, impbBindingListTable=impbBindingListTable, mstSetVlanList=mstSetVlanList, companyStaticMcast=companyStaticMcast, ipv4aclProfileIPProtocol=ipv4aclProfileIPProtocol, lldpXdot3RemPortEntry=lldpXdot3RemPortEntry, aclL3RuleIgmpType=aclL3RuleIgmpType, vlanTrunkState=vlanTrunkState, ipifV6AddressIpType=ipifV6AddressIpType, mstMstiBridgePriority=mstMstiBridgePriority, snmpV3UserPrivProtocol=snmpV3UserPrivProtocol, qosDiffServType04=qosDiffServType04, lldpXdot3RemPortOperMauType=lldpXdot3RemPortOperMauType, errorFrameSecondsWindow=errorFrameSecondsWindow, lldpPortConfigTLVsTxEnable=lldpPortConfigTLVsTxEnable, mstCistBridgePriority=mstCistBridgePriority, guestVlanDelState=guestVlanDelState, aclQosMACAddr=aclQosMACAddr, lldpXdot1LocPortVlanId=lldpXdot1LocPortVlanId, dhcpBOOTPRelayHopCount=dhcpBOOTPRelayHopCount, bandwidthEffecTxThreshold=bandwidthEffecTxThreshold, lldpXdot1ConfigProtocolEntry=lldpXdot1ConfigProtocolEntry, aacLoginMethod4=aacLoginMethod4, ipv4mulifName=ipv4mulifName, qinqTable=qinqTable, tftpCfgServerIpAddress=tftpCfgServerIpAddress, sysGroupInterval=sysGroupInterval, aclv6L3RuleProtocol=aclv6L3RuleProtocol, aacServerGroupName=aacServerGroupName, sysSNTPDSTStartMin=sysSNTPDSTStartMin, ipv4snmpV3HostVersion=ipv4snmpV3HostVersion, sysDdp=sysDdp, macBasedCtrlLocalVlanName=macBasedCtrlLocalVlanName, sysDhcpAutoConfiguration=sysDhcpAutoConfiguration, aclPacketRuleOffsetValue2=aclPacketRuleOffsetValue2, aclQosTCPUDPPort=aclQosTCPUDPPort, laPortChannelMode=laPortChannelMode, vlanTrunkTable=vlanTrunkTable, bandwidthCtrlTxThreshold=bandwidthCtrlTxThreshold, dot1qVlanManagementOnOff=dot1qVlanManagementOnOff, aRPSpoofPreventMacAddress=aRPSpoofPreventMacAddress, multicastVlanName=multicastVlanName, sysDhcpAutoImage=sysDhcpAutoImage, dlinkGreenPortShutoffState=dlinkGreenPortShutoffState, ipv4syslogServAddr=ipv4syslogServAddr, swAuthAuthServerTimeout=swAuthAuthServerTimeout, aacAccountingMethod4=aacAccountingMethod4, companySfpVendorInfo=companySfpVendorInfo, macNotifyHistorySize=macNotifyHistorySize, cpuFilterL3RuleTcpSynBit=cpuFilterL3RuleTcpSynBit, rmonStatsDataSource=rmonStatsDataSource, dhcpv6RelayManagement=dhcpv6RelayManagement, rmonEventStatus=rmonEventStatus, qinqVlanTranslationSVID=qinqVlanTranslationSVID, igsVlanReportSuppression=igsVlanReportSuppression, sysBPDUAttackCtrlTable=sysBPDUAttackCtrlTable, lldpXdot1RemVlanNameEntry=lldpXdot1RemVlanNameEntry, iPv4swAuthRadiusServerAddress=iPv4swAuthRadiusServerAddress, ipv4cpuFilterProfileDstPortMask=ipv4cpuFilterProfileDstPortMask, ddmTxPower=ddmTxPower, filterDHCPServerVlanList=filterDHCPServerVlanList, stpPortEntry=stpPortEntry, autoFdbStatus=autoFdbStatus, aclL2RuleDstMacAddr=aclL2RuleDstMacAddr, duldIfIndex=duldIfIndex, aclL3RuleTcpUrgBit=aclL3RuleTcpUrgBit, companyVLANTrunk=companyVLANTrunk, mstCistForcePortState=mstCistForcePortState, mstMstiPort=mstMstiPort, snmpV3viewTreeType=snmpV3viewTreeType, swLedInfoTable=swLedInfoTable, cpuFilterL3RuleTable=cpuFilterL3RuleTable, dhcpv6RelayOption18InterfaceIDType=dhcpv6RelayOption18InterfaceIDType, ddmPowerUnit=ddmPowerUnit, mstInstanceVlanMapped4k=mstInstanceVlanMapped4k, cpuFilterv6L3RuleAction=cpuFilterv6L3RuleAction, ipv4aclProfileSrcMacAddrMask=ipv4aclProfileSrcMacAddrMask, pppoePortState=pppoePortState, swAuthRadiusIPType=swAuthRadiusIPType, aclFlowMeterReplaceDscp=aclFlowMeterReplaceDscp, macBasedVlanMethod=macBasedVlanMethod, mldsVlanQueryInterval=mldsVlanQueryInterval, snmpV3Group=snmpV3Group, ftpFwImageID=ftpFwImageID, LldpLinkAggStatusMap=LldpLinkAggStatusMap, impbPortDHCPv6VlanList2k=impbPortDHCPv6VlanList2k, laAlgorithm=laAlgorithm, aclProfileTable=aclProfileTable, qosDiffServType11=qosDiffServType11, neighborType=neighborType, erpsTrap=erpsTrap, erpsRPLOwner=erpsRPLOwner, ddmStatusEntry=ddmStatusEntry, igsVlanQuerierVersionStatus=igsVlanQuerierVersionStatus, ipv4smtpServerAddr=ipv4smtpServerAddr, cpuFilterProfileEntry=cpuFilterProfileEntry, swTimeRangeSettingEntry=swTimeRangeSettingEntry, rmonGlobalState=rmonGlobalState, newRootMSTibridgeregionalroot=newRootMSTibridgeregionalroot, swAuthenCtrl=swAuthenCtrl, mstiRevisionLevel=mstiRevisionLevel, cpuFilterL3RuleTcpUdpSrcPortMask=cpuFilterL3RuleTcpUdpSrcPortMask, limitIpMulticastProfileID=limitIpMulticastProfileID, qosDiffServType54=qosDiffServType54, stpNewRootTraps=stpNewRootTraps, aclProfileSrcPortMask=aclProfileSrcPortMask, dhcpv6RelayOption37CheckState=dhcpv6RelayOption37CheckState, sysPortMediaTypeVendorName=sysPortMediaTypeVendorName, protocolVlanPort=protocolVlanPort, aclL2RuleVlanId=aclL2RuleVlanId, syslogServTable=syslogServTable, lldpXdot1ConfigProtoVlanTable=lldpXdot1ConfigProtoVlanTable, cpuFilterL3RuleTcpUdpDstPortMask=cpuFilterL3RuleTcpUdpDstPortMask, sysPortErrTable=sysPortErrTable, lldpXdot1LocVlanId=lldpXdot1LocVlanId, ipv4aclProfileNo=ipv4aclProfileNo, limitIpMulticastProfileStatus=limitIpMulticastProfileStatus, smtpRecvMailAddrIndex=smtpRecvMailAddrIndex, wacPortCtrlAgetime=wacPortCtrlAgetime, snmpV3Host=snmpV3Host, qosDiffServType47=qosDiffServType47, lldpXdot3LocLinkAggPortId=lldpXdot3LocLinkAggPortId, aclv6L3RuleTcpUdpSrcPort=aclv6L3RuleTcpUdpSrcPort, ipv4mulifVLANID=ipv4mulifVLANID, stpTxHoldCount=stpTxHoldCount, lldpXdot1LocVlanName=lldpXdot1LocVlanName, lldpXdot3Config=lldpXdot3Config, OwnerString=OwnerString, lldpXdot1LocProtoVlanTable=lldpXdot1LocProtoVlanTable, wacPortCtrlEntry=wacPortCtrlEntry, tftpFwTargetTftpOperation=tftpFwTargetTftpOperation, lldpXdot1LocProtoVlanId=lldpXdot1LocProtoVlanId, sysSNTPFirstInterfaceName=sysSNTPFirstInterfaceName, lldpXdot1RemVlanNameTable=lldpXdot1RemVlanNameTable, companyDoSCtrl=companyDoSCtrl, ddmThresholdType=ddmThresholdType, sysSerialNumber=sysSerialNumber, impbBindingtrapsign=impbBindingtrapsign)
