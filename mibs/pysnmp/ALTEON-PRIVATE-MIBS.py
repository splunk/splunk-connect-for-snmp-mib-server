#
# PySNMP MIB module ALTEON-PRIVATE-MIBS (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALTEON-PRIVATE-MIBS
# Produced by pysmi-0.3.4 at Mon Apr 29 17:05:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, NotificationType, Integer32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ObjectIdentity, IpAddress, Counter32, ModuleIdentity, Counter64, Bits, Unsigned32, mgmt, enterprises, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "NotificationType", "Integer32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ObjectIdentity", "IpAddress", "Counter32", "ModuleIdentity", "Counter64", "Bits", "Unsigned32", "mgmt", "enterprises", "TimeTicks")
PhysAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "TextualConvention", "DisplayString")
alteon = MibIdentifier((1, 3, 6, 1, 4, 1, 1872))
registration = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 1))
private_mibs = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2)).setLabel("private-mibs")
switch = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1))
hardware = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 1))
agent = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2))
iprouting = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3))
vlans = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4))
serverloadbalance = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5))
portmirroring = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 6))
trunkgroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7))
stats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8))
information = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9))
filtering = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10))
globalSLB = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11))
dynamicSLB = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 12))
altswitchTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 13))
operCmds = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14))
vrrp = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15))
radius = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16))
bwm = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17))
agGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1))
agGeneralConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2))
agPortConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3))
slbfailover = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16))
slbUrl = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27))
slbUrlRedir = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1))
slbUrlBalance = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2))
gslbGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1))
gslbDNS = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 2))
gslbSites = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3))
gslbLookup = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4))
ripStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 1))
slbStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2))
arpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 3))
routeStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 4))
dnsStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 5))
filterStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 6))
gslbStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 7))
gslbMaintStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 8))
vrrpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 9))
urlStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10))
tcpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 11))
memStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 12))
pktStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 13))
ftpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 14))
bwmStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15))
port_info = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 1)).setLabel("port-info")
slb_info = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2)).setLabel("slb-info")
ip_info = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3)).setLabel("ip-info")
vrrp_info = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 4)).setLabel("vrrp-info")
hwPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPartNumber.setStatus('mandatory')
hwRevision = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRevision.setStatus('mandatory')
hwPowerSupplyStatus = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("bad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPowerSupplyStatus.setStatus('mandatory')
hwRedundantPSPresent = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("notPresent", 3), ("present", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRedundantPSPresent.setStatus('mandatory')
hwRedundantPSStatus = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("bad", 2), ("notPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRedundantPSStatus.setStatus('mandatory')
hwSensor1Temp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSensor1Temp.setStatus('mandatory')
hwSensor2Temp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSensor2Temp.setStatus('mandatory')
hwSensor3Temp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSensor3Temp.setStatus('mandatory')
hwSensor4Temp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSensor4Temp.setStatus('mandatory')
agSaveConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("saveActive", 2), ("notSaveActive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agSaveConfiguration.setStatus('mandatory')
agApplyConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("apply", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agApplyConfiguration.setStatus('mandatory')
agApplyPending = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("applyNeeded", 2), ("noApplyNeeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agApplyPending.setStatus('mandatory')
agReset = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("coldReset", 2), ("warmReset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agReset.setStatus('mandatory')
agConfigForNxtReset = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("active", 2), ("backup", 3), ("default", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agConfigForNxtReset.setStatus('mandatory')
agImageForNxtReset = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("image1", 2), ("image2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agImageForNxtReset.setStatus('mandatory')
agSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSoftwareVersion.setStatus('mandatory')
agBootVer = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agBootVer.setStatus('mandatory')
agImage1Ver = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agImage1Ver.setStatus('mandatory')
agImage2Ver = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agImage2Ver.setStatus('mandatory')
agRtcDate = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agRtcDate.setStatus('mandatory')
agRtcTime = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agRtcTime.setStatus('mandatory')
agTftpServerIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpServerIpAddr.setStatus('mandatory')
agTftpImageFileName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpImageFileName.setStatus('mandatory')
agTftpImage = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("image1", 2), ("image2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpImage.setStatus('mandatory')
agTftpDownload = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("download", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpDownload.setStatus('mandatory')
agLastSetErrorReason = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agLastSetErrorReason.setStatus('mandatory')
agTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpServer.setStatus('mandatory')
agTftpCfgFileName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpCfgFileName.setStatus('mandatory')
agTftpDumpFileName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpDumpFileName.setStatus('mandatory')
agTftpAction = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("img-get", 2), ("cfg-get", 3), ("cfg-put", 4), ("dump-put", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpAction.setStatus('mandatory')
agTftpLastActionStatus = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agTftpLastActionStatus.setStatus('mandatory')
agEnabledSwFeatures = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agEnabledSwFeatures.setStatus('mandatory')
agNewCfgSyslogHost = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogHost.setStatus('mandatory')
agCurCfgSyslogHost = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogHost.setStatus('mandatory')
agNewCfgBootp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgBootp.setStatus('mandatory')
agCurCfgBootp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgBootp.setStatus('mandatory')
agNewCfgSpanningTree = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSpanningTree.setStatus('mandatory')
agCurCfgSpanningTree = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSpanningTree.setStatus('mandatory')
agTrapHostTableMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agTrapHostTableMaxEnt.setStatus('mandatory')
agCurCfgTrapHostTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 8), )
if mibBuilder.loadTexts: agCurCfgTrapHostTable.setStatus('mandatory')
agCurCfgTrapHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 8, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "agCurCfgTrapHostIndx"))
if mibBuilder.loadTexts: agCurCfgTrapHostEntry.setStatus('mandatory')
agCurCfgTrapHostIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgTrapHostIndx.setStatus('mandatory')
agCurCfgTrapHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 8, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgTrapHostIpAddr.setStatus('mandatory')
agCurCfgTrapHostCommString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgTrapHostCommString.setStatus('mandatory')
agNewCfgTrapHostTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 9), )
if mibBuilder.loadTexts: agNewCfgTrapHostTable.setStatus('mandatory')
agNewCfgTrapHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 9, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "agNewCfgTrapHostIndx"))
if mibBuilder.loadTexts: agNewCfgTrapHostEntry.setStatus('mandatory')
agNewCfgTrapHostIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agNewCfgTrapHostIndx.setStatus('mandatory')
agNewCfgTrapHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 9, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgTrapHostIpAddr.setStatus('mandatory')
agNewCfgTrapHostCommString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgTrapHostCommString.setStatus('mandatory')
agCurCfgHttpServerPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgHttpServerPort.setStatus('mandatory')
agNewCfgHttpServerPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgHttpServerPort.setStatus('mandatory')
agCurCfgLoginBanner = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgLoginBanner.setStatus('mandatory')
agNewCfgLoginBanner = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgLoginBanner.setStatus('mandatory')
agNewCfgSyslog2Host = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslog2Host.setStatus('mandatory')
agCurCfgSyslog2Host = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslog2Host.setStatus('mandatory')
agCurCfgSyslogFac = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogFac.setStatus('mandatory')
agNewCfgSyslogFac = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogFac.setStatus('mandatory')
agCurCfgSyslog2Fac = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslog2Fac.setStatus('mandatory')
agNewCfgSyslog2Fac = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslog2Fac.setStatus('mandatory')
agCurCfgSmtpHost = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSmtpHost.setStatus('mandatory')
agNewCfgSmtpHost = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 2, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSmtpHost.setStatus('mandatory')
agPortTableMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortTableMaxEnt.setStatus('mandatory')
agPortCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2), )
if mibBuilder.loadTexts: agPortCurCfgTable.setStatus('mandatory')
agPortCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "agPortCurCfgIndx"))
if mibBuilder.loadTexts: agPortCurCfgTableEntry.setStatus('mandatory')
agPortCurCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgIndx.setStatus('mandatory')
agPortCurCfgPrefLink = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("fast-ethernet", 2), ("gigabit-ethernet", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgPrefLink.setStatus('mandatory')
agPortCurCfgBackLink = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("fast-ethernet", 2), ("gigabit-ethernet", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgBackLink.setStatus('mandatory')
agPortCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgState.setStatus('mandatory')
agPortCurCfgVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("tagged", 2), ("untagged", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgVlanTag.setStatus('mandatory')
agPortCurCfgStp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgStp.setStatus('mandatory')
agPortCurCfgRmon = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgRmon.setStatus('mandatory')
agPortCurCfgPVID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgPVID.setStatus('mandatory')
agPortCurCfgFastEthAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgFastEthAutoNeg.setStatus('mandatory')
agPortCurCfgFastEthSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("mbs10", 2), ("mbs100", 3), ("mbs10or100", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgFastEthSpeed.setStatus('mandatory')
agPortCurCfgFastEthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("full-duplex", 2), ("half-duplex", 3), ("full-or-half-duplex", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgFastEthMode.setStatus('mandatory')
agPortCurCfgFastEthFctl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("transmit", 2), ("receive", 3), ("both", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgFastEthFctl.setStatus('mandatory')
agPortCurCfgGigEthAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgGigEthAutoNeg.setStatus('mandatory')
agPortCurCfgGigEthFctl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("transmit", 2), ("receive", 3), ("both", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgGigEthFctl.setStatus('mandatory')
agPortCurCfgPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgPortName.setStatus('mandatory')
agPortCurCfgBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgBwmContract.setStatus('mandatory')
agPortCurCfgDiscardNonIPs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgDiscardNonIPs.setStatus('mandatory')
agPortNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3), )
if mibBuilder.loadTexts: agPortNewCfgTable.setStatus('mandatory')
agPortNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "agPortNewCfgIndx"))
if mibBuilder.loadTexts: agPortNewCfgTableEntry.setStatus('mandatory')
agPortNewCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortNewCfgIndx.setStatus('mandatory')
agPortNewCfgPrefLink = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("fast-ethernet", 2), ("gigabit-ethernet", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgPrefLink.setStatus('mandatory')
agPortNewCfgBackLink = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("fast-ethernet", 2), ("gigabit-ethernet", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgBackLink.setStatus('mandatory')
agPortNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgState.setStatus('mandatory')
agPortNewCfgVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("tagged", 2), ("untagged", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgVlanTag.setStatus('mandatory')
agPortNewCfgStp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgStp.setStatus('mandatory')
agPortNewCfgRmon = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgRmon.setStatus('mandatory')
agPortNewCfgPVID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgPVID.setStatus('mandatory')
agPortNewCfgFastEthAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgFastEthAutoNeg.setStatus('mandatory')
agPortNewCfgFastEthSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("mbs10", 2), ("mbs100", 3), ("mbs10or100", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgFastEthSpeed.setStatus('mandatory')
agPortNewCfgFastEthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("full-duplex", 2), ("half-duplex", 3), ("full-or-half-duplex", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgFastEthMode.setStatus('mandatory')
agPortNewCfgFastEthFctl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("transmit", 2), ("receive", 3), ("both", 4), ("none", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgFastEthFctl.setStatus('mandatory')
agPortNewCfgGigEthAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgGigEthAutoNeg.setStatus('mandatory')
agPortNewCfgGigEthFctl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("transmit", 2), ("receive", 3), ("both", 4), ("none", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgGigEthFctl.setStatus('mandatory')
agPortNewCfgPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgPortName.setStatus('mandatory')
agPortNewCfgBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgBwmContract.setStatus('mandatory')
agPortNewCfgDiscardNonIPs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 2, 3, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgDiscardNonIPs.setStatus('mandatory')
ipInterfaceTableMax = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInterfaceTableMax.setStatus('mandatory')
ipCurCfgIntfTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 2), )
if mibBuilder.loadTexts: ipCurCfgIntfTable.setStatus('mandatory')
ipCurCfgIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 2, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "ipCurCfgIntfIndex"))
if mibBuilder.loadTexts: ipCurCfgIntfEntry.setStatus('mandatory')
ipCurCfgIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfIndex.setStatus('mandatory')
ipCurCfgIntfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfAddr.setStatus('mandatory')
ipCurCfgIntfMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfMask.setStatus('mandatory')
ipCurCfgIntfBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfBroadcast.setStatus('mandatory')
ipCurCfgIntfVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfVlan.setStatus('mandatory')
ipCurCfgIntfState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfState.setStatus('mandatory')
ipNewCfgIntfTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 3), )
if mibBuilder.loadTexts: ipNewCfgIntfTable.setStatus('mandatory')
ipNewCfgIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 3, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "ipNewCfgIntfIndex"))
if mibBuilder.loadTexts: ipNewCfgIntfEntry.setStatus('mandatory')
ipNewCfgIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgIntfIndex.setStatus('mandatory')
ipNewCfgIntfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgIntfAddr.setStatus('mandatory')
ipNewCfgIntfMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgIntfMask.setStatus('mandatory')
ipNewCfgIntfBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgIntfBroadcast.setStatus('mandatory')
ipNewCfgIntfVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgIntfVlan.setStatus('mandatory')
ipNewCfgIntfState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgIntfState.setStatus('mandatory')
ipNewCfgIntfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgIntfDelete.setStatus('mandatory')
ipGatewayTableMax = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipGatewayTableMax.setStatus('mandatory')
ipCurCfgGwTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 5), )
if mibBuilder.loadTexts: ipCurCfgGwTable.setStatus('mandatory')
ipCurCfgGwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 5, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "ipCurCfgGwIndex"))
if mibBuilder.loadTexts: ipCurCfgGwEntry.setStatus('mandatory')
ipCurCfgGwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwIndex.setStatus('mandatory')
ipCurCfgGwAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwAddr.setStatus('mandatory')
ipCurCfgGwInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwInterval.setStatus('mandatory')
ipCurCfgGwRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwRetry.setStatus('mandatory')
ipCurCfgGwState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwState.setStatus('mandatory')
ipCurCfgGwArp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwArp.setStatus('mandatory')
ipNewCfgGwTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 6), )
if mibBuilder.loadTexts: ipNewCfgGwTable.setStatus('mandatory')
ipNewCfgGwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 6, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "ipNewCfgGwIndex"))
if mibBuilder.loadTexts: ipNewCfgGwEntry.setStatus('mandatory')
ipNewCfgGwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgGwIndex.setStatus('mandatory')
ipNewCfgGwAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 6, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgGwAddr.setStatus('mandatory')
ipNewCfgGwInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgGwInterval.setStatus('mandatory')
ipNewCfgGwRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgGwRetry.setStatus('mandatory')
ipNewCfgGwState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgGwState.setStatus('mandatory')
ipNewCfgGwDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgGwDelete.setStatus('mandatory')
ipNewCfgGwArp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgGwArp.setStatus('mandatory')
ipCurCfgStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 7), )
if mibBuilder.loadTexts: ipCurCfgStaticRouteTable.setStatus('mandatory')
ipCurCfgStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 7, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "ipCurCfgStaticRouteIndx"))
if mibBuilder.loadTexts: ipCurCfgStaticRouteEntry.setStatus('mandatory')
ipCurCfgStaticRouteIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRouteIndx.setStatus('mandatory')
ipCurCfgStaticRouteDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 7, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRouteDestIp.setStatus('mandatory')
ipCurCfgStaticRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 7, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRouteMask.setStatus('mandatory')
ipCurCfgStaticRouteGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 7, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRouteGateway.setStatus('mandatory')
ipCurCfgStaticRouteInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRouteInterface.setStatus('mandatory')
ipNewCfgStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 8), )
if mibBuilder.loadTexts: ipNewCfgStaticRouteTable.setStatus('mandatory')
ipNewCfgStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 8, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "ipNewCfgStaticRouteIndx"))
if mibBuilder.loadTexts: ipNewCfgStaticRouteEntry.setStatus('mandatory')
ipNewCfgStaticRouteIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgStaticRouteIndx.setStatus('mandatory')
ipNewCfgStaticRouteDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 8, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgStaticRouteDestIp.setStatus('mandatory')
ipNewCfgStaticRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 8, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgStaticRouteMask.setStatus('mandatory')
ipNewCfgStaticRouteGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 8, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgStaticRouteGateway.setStatus('mandatory')
ipNewCfgStaticRouteAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgStaticRouteAction.setStatus('mandatory')
ipNewCfgStaticRouteInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 8, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgStaticRouteInterface.setStatus('mandatory')
ipForward = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9))
ripConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1))
ripCurCfgSupply = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgSupply.setStatus('mandatory')
ripNewCfgSupply = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgSupply.setStatus('mandatory')
ripCurCfgListen = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgListen.setStatus('mandatory')
ripNewCfgListen = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgListen.setStatus('mandatory')
ripCurCfgDefListen = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgDefListen.setStatus('mandatory')
ripNewCfgDefListen = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgDefListen.setStatus('mandatory')
ripCurCfgStaticSupply = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgStaticSupply.setStatus('mandatory')
ripNewCfgStaticSupply = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgStaticSupply.setStatus('mandatory')
ripCurCfgUpdatePeriod = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgUpdatePeriod.setStatus('mandatory')
ripNewCfgUpdatePeriod = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgUpdatePeriod.setStatus('mandatory')
ripCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgState.setStatus('mandatory')
ripNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgState.setStatus('mandatory')
ripCurCfgPoisonReverse = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgPoisonReverse.setStatus('mandatory')
ripNewCfgPoisonReverse = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgPoisonReverse.setStatus('mandatory')
ipFwdCurCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 2), )
if mibBuilder.loadTexts: ipFwdCurCfgPortTable.setStatus('mandatory')
ipFwdCurCfgPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 2, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "ipFwdCurCfgPortIndex"))
if mibBuilder.loadTexts: ipFwdCurCfgPortEntry.setStatus('mandatory')
ipFwdCurCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdCurCfgPortIndex.setStatus('mandatory')
ipFwdCurCfgPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdCurCfgPortState.setStatus('mandatory')
ipFwdNewCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 3), )
if mibBuilder.loadTexts: ipFwdNewCfgPortTable.setStatus('mandatory')
ipFwdNewCfgPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 3, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "ipFwdNewCfgPortIndex"))
if mibBuilder.loadTexts: ipFwdNewCfgPortEntry.setStatus('mandatory')
ipFwdNewCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdNewCfgPortIndex.setStatus('mandatory')
ipFwdNewCfgPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFwdNewCfgPortState.setStatus('mandatory')
ipFwdCurCfgLocalSubnet = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdCurCfgLocalSubnet.setStatus('mandatory')
ipFwdNewCfgLocalSubnet = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFwdNewCfgLocalSubnet.setStatus('mandatory')
ipFwdCurCfgLocalMask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdCurCfgLocalMask.setStatus('mandatory')
ipFwdNewCfgLocalMask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFwdNewCfgLocalMask.setStatus('mandatory')
ipFwdCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdCurCfgState.setStatus('mandatory')
ipFwdNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFwdNewCfgState.setStatus('mandatory')
ipFwdCurCfgDirectedBcast = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdCurCfgDirectedBcast.setStatus('mandatory')
ipFwdNewCfgDirectedBcast = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 9, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFwdNewCfgDirectedBcast.setStatus('mandatory')
arpCurCfgReARPPeriod = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpCurCfgReARPPeriod.setStatus('mandatory')
arpNewCfgReARPPeriod = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpNewCfgReARPPeriod.setStatus('mandatory')
ipCurCfgGwMetric = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strict", 1), ("roundrobin", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwMetric.setStatus('mandatory')
ipNewCfgGwMetric = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strict", 1), ("roundrobin", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgGwMetric.setStatus('mandatory')
vlanMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMaxEnt.setStatus('mandatory')
vlanCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 2), )
if mibBuilder.loadTexts: vlanCurCfgTable.setStatus('mandatory')
vlanCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 2, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "vlanCurCfgVlanId"))
if mibBuilder.loadTexts: vlanCurCfgTableEntry.setStatus('mandatory')
vlanCurCfgVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgVlanId.setStatus('mandatory')
vlanCurCfgVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgVlanName.setStatus('mandatory')
vlanCurCfgPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgPorts.setStatus('mandatory')
vlanCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgState.setStatus('mandatory')
vlanCurCfgJumbo = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgJumbo.setStatus('mandatory')
vlanCurCfgBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgBwmContract.setStatus('mandatory')
vlanNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 3), )
if mibBuilder.loadTexts: vlanNewCfgTable.setStatus('mandatory')
vlanNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 3, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "vlanNewCfgVlanId"))
if mibBuilder.loadTexts: vlanNewCfgTableEntry.setStatus('mandatory')
vlanNewCfgVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanNewCfgVlanId.setStatus('mandatory')
vlanNewCfgVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanNewCfgVlanName.setStatus('mandatory')
vlanNewCfgPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanNewCfgPorts.setStatus('mandatory')
vlanNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanNewCfgState.setStatus('mandatory')
vlanNewCfgJumbo = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanNewCfgJumbo.setStatus('mandatory')
vlanNewCfgAddPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanNewCfgAddPort.setStatus('mandatory')
vlanNewCfgRemovePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanNewCfgRemovePort.setStatus('mandatory')
vlanNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanNewCfgDelete.setStatus('mandatory')
vlanNewCfgBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 4, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanNewCfgBwmContract.setStatus('mandatory')
slbRealServerMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerMaxSize.setStatus('mandatory')
slbCurCfgRealServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2), )
if mibBuilder.loadTexts: slbCurCfgRealServerTable.setStatus('mandatory')
slbCurCfgRealServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbCurCfgRealServerIndex"))
if mibBuilder.loadTexts: slbCurCfgRealServerEntry.setStatus('mandatory')
slbCurCfgRealServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerIndex.setStatus('mandatory')
slbCurCfgRealServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerIpAddr.setStatus('mandatory')
slbCurCfgRealServerWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerWeight.setStatus('mandatory')
slbCurCfgRealServerMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerMaxConns.setStatus('mandatory')
slbCurCfgRealServerTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerTimeOut.setStatus('mandatory')
slbCurCfgRealServerBackUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerBackUp.setStatus('mandatory')
slbCurCfgRealServerPingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerPingInterval.setStatus('mandatory')
slbCurCfgRealServerFailRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerFailRetry.setStatus('mandatory')
slbCurCfgRealServerSuccRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerSuccRetry.setStatus('mandatory')
slbCurCfgRealServerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerState.setStatus('mandatory')
slbCurCfgRealServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local-server", 1), ("remote-server", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerType.setStatus('mandatory')
slbCurCfgRealServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerName.setStatus('mandatory')
slbCurCfgRealServerUrlBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerUrlBmap.setStatus('mandatory')
slbCurCfgRealServerCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerCookie.setStatus('mandatory')
slbCurCfgRealServerExcludeStr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerExcludeStr.setStatus('mandatory')
slbCurCfgRealServerSubmac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerSubmac.setStatus('mandatory')
slbNewCfgRealServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3), )
if mibBuilder.loadTexts: slbNewCfgRealServerTable.setStatus('mandatory')
slbNewCfgRealServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbNewCfgRealServerIndex"))
if mibBuilder.loadTexts: slbNewCfgRealServerEntry.setStatus('mandatory')
slbNewCfgRealServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgRealServerIndex.setStatus('mandatory')
slbNewCfgRealServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerIpAddr.setStatus('mandatory')
slbNewCfgRealServerWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerWeight.setStatus('mandatory')
slbNewCfgRealServerMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerMaxConns.setStatus('mandatory')
slbNewCfgRealServerTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerTimeOut.setStatus('mandatory')
slbNewCfgRealServerBackUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerBackUp.setStatus('mandatory')
slbNewCfgRealServerPingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerPingInterval.setStatus('mandatory')
slbNewCfgRealServerFailRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerFailRetry.setStatus('mandatory')
slbNewCfgRealServerSuccRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerSuccRetry.setStatus('mandatory')
slbNewCfgRealServerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerState.setStatus('mandatory')
slbNewCfgRealServerDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerDelete.setStatus('mandatory')
slbNewCfgRealServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local-server", 1), ("remote-server", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerType.setStatus('mandatory')
slbNewCfgRealServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerName.setStatus('mandatory')
slbNewCfgRealServerUrlBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgRealServerUrlBmap.setStatus('mandatory')
slbNewCfgRealServerAddUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerAddUrl.setStatus('mandatory')
slbNewCfgRealServerRemUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerRemUrl.setStatus('mandatory')
slbNewCfgRealServerCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerCookie.setStatus('mandatory')
slbNewCfgRealServerExcludeStr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerExcludeStr.setStatus('mandatory')
slbNewCfgRealServerSubmac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRealServerSubmac.setStatus('mandatory')
slbVirtServerTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbVirtServerTableMaxSize.setStatus('mandatory')
slbCurCfgVirtServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5), )
if mibBuilder.loadTexts: slbCurCfgVirtServerTable.setStatus('mandatory')
slbCurCfgVirtualServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbCurCfgVirtServerIndex"))
if mibBuilder.loadTexts: slbCurCfgVirtualServerEntry.setStatus('mandatory')
slbCurCfgVirtServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerIndex.setStatus('mandatory')
slbCurCfgVirtServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerIpAddress.setStatus('mandatory')
slbCurCfgVirtServerLayer3Only = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("layer3Only", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerLayer3Only.setStatus('mandatory')
slbCurCfgVirtServerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerState.setStatus('mandatory')
slbCurCfgVirtServerDname = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerDname.setStatus('mandatory')
slbCurCfgVirtServerCname = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerCname.setStatus('mandatory')
slbCurCfgVirtServerCoffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerCoffset.setStatus('mandatory')
slbCurCfgVirtServerClength = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerClength.setStatus('mandatory')
slbCurCfgVirtServerUriCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerUriCookie.setStatus('mandatory')
slbCurCfgVirtServerFtpParsing = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerFtpParsing.setStatus('mandatory')
slbCurCfgVirtServerUrlHashLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerUrlHashLen.setStatus('mandatory')
slbCurCfgVirtServerHttpHdrName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerHttpHdrName.setStatus('mandatory')
slbCurCfgVirtServerBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerBwmContract.setStatus('mandatory')
slbNewCfgVirtServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6), )
if mibBuilder.loadTexts: slbNewCfgVirtServerTable.setStatus('mandatory')
slbNewCfgVirtualServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbNewCfgVirtServerIndex"))
if mibBuilder.loadTexts: slbNewCfgVirtualServerEntry.setStatus('mandatory')
slbNewCfgVirtServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgVirtServerIndex.setStatus('mandatory')
slbNewCfgVirtServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerIpAddress.setStatus('mandatory')
slbNewCfgVirtServerLayer3Only = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("layer3Only", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerLayer3Only.setStatus('mandatory')
slbNewCfgVirtServerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerState.setStatus('mandatory')
slbNewCfgVirtServerDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerDelete.setStatus('mandatory')
slbNewCfgVirtServerDname = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 34))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerDname.setStatus('mandatory')
slbNewCfgVirtServerCname = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerCname.setStatus('mandatory')
slbNewCfgVirtServerCoffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerCoffset.setStatus('mandatory')
slbNewCfgVirtServerClength = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerClength.setStatus('mandatory')
slbNewCfgVirtServerUriCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerUriCookie.setStatus('mandatory')
slbNewCfgVirtServerFtpParsing = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerFtpParsing.setStatus('mandatory')
slbNewCfgVirtServerUrlHashLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerUrlHashLen.setStatus('mandatory')
slbNewCfgVirtServerHttpHdrName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerHttpHdrName.setStatus('mandatory')
slbNewCfgVirtServerBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 6, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServerBwmContract.setStatus('mandatory')
slbCurCfgVirtServicesTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7), )
if mibBuilder.loadTexts: slbCurCfgVirtServicesTable.setStatus('mandatory')
slbCurCfgVirtServicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbCurCfgVirtServIndex"), (0, "ALTEON-PRIVATE-MIBS", "slbCurCfgVirtServiceIndex"))
if mibBuilder.loadTexts: slbCurCfgVirtServicesEntry.setStatus('mandatory')
slbCurCfgVirtServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServIndex.setStatus('mandatory')
slbCurCfgVirtServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceIndex.setStatus('mandatory')
slbCurCfgVirtServiceVirtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceVirtPort.setStatus('mandatory')
slbCurCfgVirtServiceRealGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceRealGroup.setStatus('mandatory')
slbCurCfgVirtServiceRealPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceRealPort.setStatus('mandatory')
slbCurCfgVirtServiceUDPBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3), ("stateless", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceUDPBalance.setStatus('mandatory')
slbCurCfgVirtServicePBind = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3), ("sessid", 4), ("cookie", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServicePBind.setStatus('mandatory')
slbCurCfgVirtServiceHname = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceHname.setStatus('mandatory')
slbCurCfgVirtServiceHttpSlb = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("urlslb", 2), ("urlhash", 3), ("cookie", 4), ("host", 5), ("browser", 6), ("others", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceHttpSlb.setStatus('mandatory')
slbCurCfgVirtServiceBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceBwmContract.setStatus('mandatory')
slbCurCfgVirtServiceDirServerRtn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceDirServerRtn.setStatus('mandatory')
slbNewCfgVirtServicesTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8), )
if mibBuilder.loadTexts: slbNewCfgVirtServicesTable.setStatus('mandatory')
slbNewCfgVirtServicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbNewCfgVirtServIndex"), (0, "ALTEON-PRIVATE-MIBS", "slbNewCfgVirtServiceIndex"))
if mibBuilder.loadTexts: slbNewCfgVirtServicesEntry.setStatus('mandatory')
slbNewCfgVirtServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgVirtServIndex.setStatus('mandatory')
slbNewCfgVirtServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgVirtServiceIndex.setStatus('mandatory')
slbNewCfgVirtServiceVirtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceVirtPort.setStatus('mandatory')
slbNewCfgVirtServiceRealGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceRealGroup.setStatus('mandatory')
slbNewCfgVirtServiceRealPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceRealPort.setStatus('mandatory')
slbNewCfgVirtServiceUDPBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3), ("stateless", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceUDPBalance.setStatus('mandatory')
slbNewCfgVirtServicePBind = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3), ("sessid", 4), ("cookie", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServicePBind.setStatus('mandatory')
slbNewCfgVirtServiceHname = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceHname.setStatus('mandatory')
slbNewCfgVirtServiceHttpSlb = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("urlslb", 2), ("urlhash", 3), ("cookie", 4), ("host", 5), ("browser", 6), ("others", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceHttpSlb.setStatus('mandatory')
slbNewCfgVirtServiceBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceBwmContract.setStatus('mandatory')
slbNewCfgVirtServiceDirServerRtn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceDirServerRtn.setStatus('mandatory')
slbNewCfgVirtServiceDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtServiceDelete.setStatus('mandatory')
slbGroupTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbGroupTableMaxSize.setStatus('mandatory')
slbCurCfgGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10), )
if mibBuilder.loadTexts: slbCurCfgGroupTable.setStatus('mandatory')
slbCurCfgGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbCurCfgGroupIndex"))
if mibBuilder.loadTexts: slbCurCfgGroupEntry.setStatus('mandatory')
slbCurCfgGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupIndex.setStatus('mandatory')
slbCurCfgGroupRealServers = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupRealServers.setStatus('mandatory')
slbCurCfgGroupMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("roundRobin", 1), ("leastConnections", 2), ("minMisses", 3), ("hash", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupMetric.setStatus('mandatory')
slbCurCfgGroupBackupServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupBackupServer.setStatus('mandatory')
slbCurCfgGroupHealthCheckUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupHealthCheckUrl.setStatus('mandatory')
slbCurCfgGroupHealthCheckLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("icmp", 1), ("tcp", 2), ("http", 3), ("dns", 4), ("smtp", 5), ("pop3", 6), ("nntp", 7), ("ftp", 8), ("imap", 9), ("radius", 10), ("sslh", 11), ("script1", 12), ("script2", 13), ("script3", 14), ("script4", 15), ("script5", 16), ("script6", 17), ("script7", 18), ("script8", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupHealthCheckLayer.setStatus('mandatory')
slbCurCfgGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupName.setStatus('mandatory')
slbCurCfgGroupRealThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupRealThreshold.setStatus('mandatory')
slbCurCfgGroupBackupGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupBackupGroup.setStatus('mandatory')
slbNewCfgGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11), )
if mibBuilder.loadTexts: slbNewCfgGroupTable.setStatus('mandatory')
slbNewCfgGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbNewCfgGroupIndex"))
if mibBuilder.loadTexts: slbNewCfgGroupEntry.setStatus('mandatory')
slbNewCfgGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgGroupIndex.setStatus('mandatory')
slbNewCfgGroupRealServers = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgGroupRealServers.setStatus('mandatory')
slbNewCfgGroupAddServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGroupAddServer.setStatus('mandatory')
slbNewCfgGroupRemoveServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGroupRemoveServer.setStatus('mandatory')
slbNewCfgGroupMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("roundRobin", 1), ("leastConnections", 2), ("minMisses", 3), ("hash", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGroupMetric.setStatus('mandatory')
slbNewCfgGroupBackupServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGroupBackupServer.setStatus('mandatory')
slbNewCfgGroupDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGroupDelete.setStatus('mandatory')
slbNewCfgGroupHealthCheckUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGroupHealthCheckUrl.setStatus('mandatory')
slbNewCfgGroupHealthCheckLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("icmp", 1), ("tcp", 2), ("http", 3), ("dns", 4), ("smtp", 5), ("pop3", 6), ("nntp", 7), ("ftp", 8), ("imap", 9), ("radius", 10), ("sslh", 11), ("script1", 12), ("script2", 13), ("script3", 14), ("script4", 15), ("script5", 16), ("script6", 17), ("script7", 18), ("script8", 19)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGroupHealthCheckLayer.setStatus('mandatory')
slbNewCfgGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGroupName.setStatus('mandatory')
slbNewCfgGroupRealThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGroupRealThreshold.setStatus('mandatory')
slbNewCfgGroupBackupGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGroupBackupGroup.setStatus('mandatory')
slbCurCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 12), )
if mibBuilder.loadTexts: slbCurCfgPortTable.setStatus('mandatory')
slbCurCfgPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 12, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbCurCfgPortIndex"))
if mibBuilder.loadTexts: slbCurCfgPortEntry.setStatus('mandatory')
slbCurCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortIndex.setStatus('mandatory')
slbCurCfgPortProxyIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 12, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortProxyIpAddr.setStatus('mandatory')
slbCurCfgPortSlbState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("client", 2), ("server", 3), ("client-server", 4), ("failOver", 5), ("failOver-stanby", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortSlbState.setStatus('mandatory')
slbCurCfgPortSlbHotStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortSlbHotStandby.setStatus('mandatory')
slbCurCfgPortSlbInterSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortSlbInterSwitch.setStatus('mandatory')
slbCurCfgPortSlbPipState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortSlbPipState.setStatus('mandatory')
slbNewCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 13), )
if mibBuilder.loadTexts: slbNewCfgPortTable.setStatus('mandatory')
slbNewCfgPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 13, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbNewCfgPortIndex"))
if mibBuilder.loadTexts: slbNewCfgPortEntry.setStatus('mandatory')
slbNewCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgPortIndex.setStatus('mandatory')
slbNewCfgPortProxyIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 13, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPortProxyIpAddr.setStatus('mandatory')
slbNewCfgPortSlbState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("client", 2), ("server", 3), ("client-server", 4), ("failOver", 5), ("failOver-stanby", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPortSlbState.setStatus('mandatory')
slbNewCfgPortSlbHotStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPortSlbHotStandby.setStatus('mandatory')
slbNewCfgPortSlbInterSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPortSlbInterSwitch.setStatus('mandatory')
slbNewCfgPortSlbPipState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPortSlbPipState.setStatus('mandatory')
slbCurCfgImask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgImask.setStatus('mandatory')
slbNewCfgImask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgImask.setStatus('mandatory')
slbCurCfgMnet = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 19), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgMnet.setStatus('mandatory')
slbNewCfgMnet = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgMnet.setStatus('mandatory')
slbCurCfgMmask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 21), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgMmask.setStatus('mandatory')
slbNewCfgMmask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 22), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgMmask.setStatus('mandatory')
slbCurCfgRadiusAuthenString = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRadiusAuthenString.setStatus('mandatory')
slbNewCfgRadiusAuthenString = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRadiusAuthenString.setStatus('mandatory')
slbCurCfgDirectMode = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgDirectMode.setStatus('mandatory')
slbNewCfgDirectMode = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgDirectMode.setStatus('mandatory')
slbCurCfgPmask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 28), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPmask.setStatus('mandatory')
slbNewCfgPmask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 29), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPmask.setStatus('mandatory')
slbCurCfgGrace = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGrace.setStatus('mandatory')
slbNewCfgGrace = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGrace.setStatus('mandatory')
slbCurCfgPeerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 32), )
if mibBuilder.loadTexts: slbCurCfgPeerTable.setStatus('mandatory')
slbCurCfgPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 32, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbCurCfgPeerIndex"))
if mibBuilder.loadTexts: slbCurCfgPeerEntry.setStatus('mandatory')
slbCurCfgPeerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 32, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPeerIndex.setStatus('mandatory')
slbCurCfgPeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 32, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPeerIpAddr.setStatus('mandatory')
slbCurCfgPeerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 32, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPeerState.setStatus('mandatory')
slbNewCfgPeerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 33), )
if mibBuilder.loadTexts: slbNewCfgPeerTable.setStatus('mandatory')
slbNewCfgPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 33, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbNewCfgPeerIndex"))
if mibBuilder.loadTexts: slbNewCfgPeerEntry.setStatus('mandatory')
slbNewCfgPeerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 33, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgPeerIndex.setStatus('mandatory')
slbNewCfgPeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 33, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPeerIpAddr.setStatus('mandatory')
slbNewCfgPeerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 33, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPeerState.setStatus('mandatory')
slbNewCfgPeerDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 33, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPeerDelete.setStatus('mandatory')
slbCurCfgSyncFilt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSyncFilt.setStatus('mandatory')
slbNewCfgSyncFilt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgSyncFilt.setStatus('mandatory')
slbCurCfgSyncPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSyncPort.setStatus('mandatory')
slbNewCfgSyncPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgSyncPort.setStatus('mandatory')
slbCurCfgSyncVrrp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSyncVrrp.setStatus('mandatory')
slbNewCfgSyncVrrp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgSyncVrrp.setStatus('mandatory')
slbCurCfgSyncPip = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSyncPip.setStatus('mandatory')
slbNewCfgSyncPip = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgSyncPip.setStatus('mandatory')
slbCurCfgVirtMatrixArch = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtMatrixArch.setStatus('mandatory')
slbNewCfgVirtMatrixArch = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtMatrixArch.setStatus('mandatory')
slbCurCfgFailOverTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 1), )
if mibBuilder.loadTexts: slbCurCfgFailOverTable.setStatus('mandatory')
slbCurCfgFailOverTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 1, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbCurCfgFailOverIndex"))
if mibBuilder.loadTexts: slbCurCfgFailOverTblEntry.setStatus('mandatory')
slbCurCfgFailOverIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgFailOverIndex.setStatus('mandatory')
slbCurCfgFailOverPrimaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgFailOverPrimaryIp.setStatus('mandatory')
slbCurCfgFailOverSecondaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgFailOverSecondaryIp.setStatus('mandatory')
slbCurCfgFailOverSilenceInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgFailOverSilenceInterval.setStatus('mandatory')
slbCurCfgFailOverState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgFailOverState.setStatus('mandatory')
slbCurCfgFailOverRouteSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgFailOverRouteSupply.setStatus('mandatory')
slbNewCfgFailOverTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 2), )
if mibBuilder.loadTexts: slbNewCfgFailOverTable.setStatus('mandatory')
slbNewCfgFailOverTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 2, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbNewCfgFailOverIndex"))
if mibBuilder.loadTexts: slbNewCfgFailOverTblEntry.setStatus('mandatory')
slbNewCfgFailOverIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgFailOverIndex.setStatus('mandatory')
slbNewCfgFailOverPrimaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgFailOverPrimaryIp.setStatus('mandatory')
slbNewCfgFailOverSecondaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgFailOverSecondaryIp.setStatus('mandatory')
slbNewCfgFailOverSilenceInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgFailOverSilenceInterval.setStatus('mandatory')
slbNewCfgFailOverState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgFailOverState.setStatus('mandatory')
slbNewCfgFailOverRouteSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 16, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgFailOverRouteSupply.setStatus('mandatory')
slbCurCfgGlobalControl = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGlobalControl.setStatus('mandatory')
slbNewCfgGlobalControl = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGlobalControl.setStatus('mandatory')
slbCurCfgUrlExpTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 1), )
if mibBuilder.loadTexts: slbCurCfgUrlExpTable.setStatus('mandatory')
slbCurCfgUrlExpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 1, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbCurCfgUrlExpIndex"))
if mibBuilder.loadTexts: slbCurCfgUrlExpTableEntry.setStatus('mandatory')
slbCurCfgUrlExpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlExpIndex.setStatus('mandatory')
slbCurCfgUrlExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlExpression.setStatus('mandatory')
slbNewCfgUrlExpTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 2), )
if mibBuilder.loadTexts: slbNewCfgUrlExpTable.setStatus('mandatory')
slbNewCfgUrlExpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 2, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbNewCfgUrlExpIndex"))
if mibBuilder.loadTexts: slbNewCfgUrlExpTableEntry.setStatus('mandatory')
slbNewCfgUrlExpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgUrlExpIndex.setStatus('mandatory')
slbNewCfgUrlExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlExpression.setStatus('mandatory')
slbNewCfgUrlExpDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlExpDelete.setStatus('mandatory')
slbCurCfgUrlRedirNonGetOrigSrv = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlRedirNonGetOrigSrv.setStatus('mandatory')
slbNewCfgUrlRedirNonGetOrigSrv = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlRedirNonGetOrigSrv.setStatus('mandatory')
slbCurCfgUrlRedirCookieOrigSrv = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlRedirCookieOrigSrv.setStatus('mandatory')
slbNewCfgUrlRedirCookieOrigSrv = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlRedirCookieOrigSrv.setStatus('mandatory')
slbCurCfgUrlRedirNoCacheOrigSrv = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlRedirNoCacheOrigSrv.setStatus('mandatory')
slbNewCfgUrlRedirNoCacheOrigSrv = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlRedirNoCacheOrigSrv.setStatus('mandatory')
slbCurCfgUrlRedirUriHashLength = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlRedirUriHashLength.setStatus('mandatory')
slbNewCfgUrlRedirUriHashLength = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlRedirUriHashLength.setStatus('mandatory')
slbCurCfgUrlRedirHeader = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlRedirHeader.setStatus('mandatory')
slbNewCfgUrlRedirHeader = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlRedirHeader.setStatus('mandatory')
slbCurCfgUrlRedirHeaderName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlRedirHeaderName.setStatus('mandatory')
slbNewCfgUrlRedirHeaderName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlRedirHeaderName.setStatus('mandatory')
slbCurCfgUrlLbPathTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 1), )
if mibBuilder.loadTexts: slbCurCfgUrlLbPathTable.setStatus('mandatory')
slbCurCfgUrlLbPathTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 1, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbCurCfgUrlLbPathIndex"))
if mibBuilder.loadTexts: slbCurCfgUrlLbPathTableEntry.setStatus('mandatory')
slbCurCfgUrlLbPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlLbPathIndex.setStatus('mandatory')
slbCurCfgUrlLbPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlLbPathString.setStatus('mandatory')
slbNewCfgUrlLbPathTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 2), )
if mibBuilder.loadTexts: slbNewCfgUrlLbPathTable.setStatus('mandatory')
slbCurCfgUrlLbErrorMsg = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlLbErrorMsg.setStatus('mandatory')
slbNewCfgUrlLbErrorMsg = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlLbErrorMsg.setStatus('mandatory')
slbNewCfgUrlLbPathTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 2, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbNewCfgUrlLbPathIndex"))
if mibBuilder.loadTexts: slbNewCfgUrlLbPathTableEntry.setStatus('mandatory')
slbNewCfgUrlLbPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgUrlLbPathIndex.setStatus('mandatory')
slbNewCfgUrlLbPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlLbPathString.setStatus('mandatory')
slbNewCfgUrlLbPathDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 5, 27, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgUrlLbPathDelete.setStatus('mandatory')
pmCurCfgMonitoringPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgMonitoringPort.setStatus('mandatory')
pmNewCfgMonitoringPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmNewCfgMonitoringPort.setStatus('mandatory')
pmCurCfgMirroredPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgMirroredPort.setStatus('mandatory')
pmNewCfgMirroredPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 6, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmNewCfgMirroredPort.setStatus('mandatory')
pmCurCfgMonitoredTraffic = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("received", 3), ("transmitted", 4), ("both", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgMonitoredTraffic.setStatus('mandatory')
pmNewCfgMonitoredTraffic = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("received", 3), ("transmitted", 4), ("both", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmNewCfgMonitoredTraffic.setStatus('mandatory')
pmCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgState.setStatus('mandatory')
pmNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmNewCfgState.setStatus('mandatory')
trunkGroupTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupTableMaxSize.setStatus('mandatory')
trunkGroupCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 2), )
if mibBuilder.loadTexts: trunkGroupCurCfgTable.setStatus('mandatory')
trunkGroupCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 2, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "trunkGroupCurCfgIndex"))
if mibBuilder.loadTexts: trunkGroupCurCfgTableEntry.setStatus('mandatory')
trunkGroupCurCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupCurCfgIndex.setStatus('mandatory')
trunkGroupCurCfgPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupCurCfgPorts.setStatus('mandatory')
trunkGroupCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupCurCfgState.setStatus('mandatory')
trunkGroupCurCfgBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupCurCfgBwmContract.setStatus('mandatory')
trunkGroupNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 3), )
if mibBuilder.loadTexts: trunkGroupNewCfgTable.setStatus('mandatory')
trunkGroupNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 3, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "trunkGroupNewCfgIndex"))
if mibBuilder.loadTexts: trunkGroupNewCfgTableEntry.setStatus('mandatory')
trunkGroupNewCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupNewCfgIndex.setStatus('mandatory')
trunkGroupNewCfgPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupNewCfgPorts.setStatus('mandatory')
trunkGroupNewCfgAddPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkGroupNewCfgAddPort.setStatus('mandatory')
trunkGroupNewCfgRemovePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkGroupNewCfgRemovePort.setStatus('mandatory')
trunkGroupNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkGroupNewCfgState.setStatus('mandatory')
trunkGroupNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkGroupNewCfgDelete.setStatus('mandatory')
trunkGroupNewCfgBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 7, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkGroupNewCfgBwmContract.setStatus('mandatory')
fltCfgTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCfgTableMaxSize.setStatus('mandatory')
fltCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2), )
if mibBuilder.loadTexts: fltCurCfgTable.setStatus('mandatory')
fltCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "fltCurCfgIndx"))
if mibBuilder.loadTexts: fltCurCfgTableEntry.setStatus('mandatory')
fltCurCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgIndx.setStatus('mandatory')
fltCurCfgSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgSrcIp.setStatus('mandatory')
fltCurCfgSrcIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgSrcIpMask.setStatus('mandatory')
fltCurCfgDstIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgDstIp.setStatus('mandatory')
fltCurCfgDstIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgDstIpMask.setStatus('mandatory')
fltCurCfgProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgProtocol.setStatus('mandatory')
fltCurCfgRangeHighSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgRangeHighSrcPort.setStatus('mandatory')
fltCurCfgRangeLowSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgRangeLowSrcPort.setStatus('mandatory')
fltCurCfgRangeLowDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgRangeLowDstPort.setStatus('mandatory')
fltCurCfgRangeHighDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgRangeHighDstPort.setStatus('mandatory')
fltCurCfgAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2), ("redirect", 3), ("nat", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAction.setStatus('mandatory')
fltCurCfgRedirPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgRedirPort.setStatus('mandatory')
fltCurCfgRedirGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgRedirGroup.setStatus('mandatory')
fltCurCfgLog = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgLog.setStatus('mandatory')
fltCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgState.setStatus('mandatory')
fltCurCfgNat = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("destination-address", 1), ("source-address", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgNat.setStatus('mandatory')
fltCurCfgCache = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgCache.setStatus('mandatory')
fltCurCfgInvert = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invert-on", 1), ("invert-off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgInvert.setStatus('mandatory')
fltCurCfgClientProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgClientProxy.setStatus('mandatory')
fltCurCfgTcpAck = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgTcpAck.setStatus('mandatory')
fltCurCfgUrlRedir = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgUrlRedir.setStatus('mandatory')
fltCurCfgSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 22), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgSrcMac.setStatus('mandatory')
fltCurCfgDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 23), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgDstMac.setStatus('mandatory')
fltCurCfgFtpNatActive = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgFtpNatActive.setStatus('mandatory')
fltCurCfgAclTcpUrg = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclTcpUrg.setStatus('mandatory')
fltCurCfgAclTcpAck = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclTcpAck.setStatus('mandatory')
fltCurCfgAclTcpPsh = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclTcpPsh.setStatus('mandatory')
fltCurCfgAclTcpRst = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclTcpRst.setStatus('mandatory')
fltCurCfgAclTcpSyn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclTcpSyn.setStatus('mandatory')
fltCurCfgAclTcpFin = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclTcpFin.setStatus('mandatory')
fltCurCfgAclIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclIcmp.setStatus('mandatory')
fltCurCfgAclIpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("any", 1), ("rroute", 2), ("tstamp", 3), ("loose", 4), ("strict", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclIpOption.setStatus('mandatory')
fltCurCfgBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgBwmContract.setStatus('mandatory')
fltCurCfgAclIpTos = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclIpTos.setStatus('mandatory')
fltCurCfgAclIpTosMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclIpTosMask.setStatus('mandatory')
fltCurCfgAclIpTosNew = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclIpTosNew.setStatus('mandatory')
fltCurCfgFwlb = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgFwlb.setStatus('mandatory')
fltNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3), )
if mibBuilder.loadTexts: fltNewCfgTable.setStatus('mandatory')
fltNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "fltNewCfgIndx"))
if mibBuilder.loadTexts: fltNewCfgTableEntry.setStatus('mandatory')
fltNewCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltNewCfgIndx.setStatus('mandatory')
fltNewCfgSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgSrcIp.setStatus('mandatory')
fltNewCfgSrcIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgSrcIpMask.setStatus('mandatory')
fltNewCfgDstIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgDstIp.setStatus('mandatory')
fltNewCfgDstIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgDstIpMask.setStatus('mandatory')
fltNewCfgProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgProtocol.setStatus('mandatory')
fltNewCfgRangeHighSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgRangeHighSrcPort.setStatus('mandatory')
fltNewCfgRangeLowSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgRangeLowSrcPort.setStatus('mandatory')
fltNewCfgRangeLowDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgRangeLowDstPort.setStatus('mandatory')
fltNewCfgRangeHighDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgRangeHighDstPort.setStatus('mandatory')
fltNewCfgAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2), ("redirect", 3), ("nat", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAction.setStatus('mandatory')
fltNewCfgRedirPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgRedirPort.setStatus('mandatory')
fltNewCfgRedirGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgRedirGroup.setStatus('mandatory')
fltNewCfgLog = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgLog.setStatus('mandatory')
fltNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgState.setStatus('mandatory')
fltNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgDelete.setStatus('mandatory')
fltNewCfgNat = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("destination-address", 1), ("source-address", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgNat.setStatus('mandatory')
fltNewCfgCache = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgCache.setStatus('mandatory')
fltNewCfgInvert = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invert-on", 1), ("invert-off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgInvert.setStatus('mandatory')
fltNewCfgClientProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgClientProxy.setStatus('mandatory')
fltNewCfgTcpAck = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgTcpAck.setStatus('mandatory')
fltNewCfgUrlRedir = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgUrlRedir.setStatus('mandatory')
fltNewCfgSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 23), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgSrcMac.setStatus('mandatory')
fltNewCfgDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 24), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgDstMac.setStatus('mandatory')
fltNewCfgFtpNatActive = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgFtpNatActive.setStatus('mandatory')
fltNewCfgAclTcpUrg = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAclTcpUrg.setStatus('mandatory')
fltNewCfgAclTcpAck = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAclTcpAck.setStatus('mandatory')
fltNewCfgAclTcpPsh = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAclTcpPsh.setStatus('mandatory')
fltNewCfgAclTcpRst = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAclTcpRst.setStatus('mandatory')
fltNewCfgAclTcpSyn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAclTcpSyn.setStatus('mandatory')
fltNewCfgAclTcpFin = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAclTcpFin.setStatus('mandatory')
fltNewCfgAclIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAclIcmp.setStatus('mandatory')
fltNewCfgAclIpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("any", 1), ("rroute", 2), ("tstamp", 3), ("loose", 4), ("strict", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAclIpOption.setStatus('mandatory')
fltNewCfgBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgBwmContract.setStatus('mandatory')
fltNewCfgAclIpTos = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAclIpTos.setStatus('mandatory')
fltNewCfgAclIpTosMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAclIpTosMask.setStatus('mandatory')
fltNewCfgAclIpTosNew = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgAclIpTosNew.setStatus('mandatory')
fltNewCfgFwlb = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 3, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgFwlb.setStatus('mandatory')
fltCurCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 4), )
if mibBuilder.loadTexts: fltCurCfgPortTable.setStatus('mandatory')
fltCurCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 4, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "fltCurCfgPortIndx"))
if mibBuilder.loadTexts: fltCurCfgPortTableEntry.setStatus('mandatory')
fltCurCfgPortIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgPortIndx.setStatus('mandatory')
fltCurCfgPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgPortState.setStatus('mandatory')
fltCurCfgPortFiltBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgPortFiltBmap.setStatus('mandatory')
fltNewCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 5), )
if mibBuilder.loadTexts: fltNewCfgPortTable.setStatus('mandatory')
fltNewCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 5, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "fltNewCfgPortIndx"))
if mibBuilder.loadTexts: fltNewCfgPortTableEntry.setStatus('mandatory')
fltNewCfgPortIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltNewCfgPortIndx.setStatus('mandatory')
fltNewCfgPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgPortState.setStatus('mandatory')
fltNewCfgPortFiltBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltNewCfgPortFiltBmap.setStatus('mandatory')
fltNewCfgPortAddFiltRule = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgPortAddFiltRule.setStatus('mandatory')
fltNewCfgPortRemFiltRule = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 10, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgPortRemFiltRule.setStatus('mandatory')
gslbCurCfgGenState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenState.setStatus('mandatory')
gslbNewCfgGenState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenState.setStatus('mandatory')
gslbCurCfgGenDnsHandoff = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenDnsHandoff.setStatus('mandatory')
gslbNewCfgGenDnsHandoff = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenDnsHandoff.setStatus('mandatory')
gslbCurCfgGenDnsTTL = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenDnsTTL.setStatus('mandatory')
gslbNewCfgGenDnsTTL = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenDnsTTL.setStatus('mandatory')
gslbCurCfgGenHttpRedirect = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenHttpRedirect.setStatus('mandatory')
gslbNewCfgGenHttpRedirect = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenHttpRedirect.setStatus('mandatory')
gslbCurCfgGenRemSiteUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenRemSiteUpdateInterval.setStatus('mandatory')
gslbNewCfgGenRemSiteUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenRemSiteUpdateInterval.setStatus('mandatory')
gslbCurCfgGenDnsLocalPref = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenDnsLocalPref.setStatus('mandatory')
gslbNewCfgGenDnsLocalPref = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenDnsLocalPref.setStatus('mandatory')
gslbCurCfgGenMinco = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenMinco.setStatus('mandatory')
gslbNewCfgGenMinco = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenMinco.setStatus('mandatory')
gslbCurCfgGenOne = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenOne.setStatus('mandatory')
gslbNewCfgGenOne = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenOne.setStatus('mandatory')
gslbCurCfgGenUsern = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenUsern.setStatus('mandatory')
gslbNewCfgGenUsern = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenUsern.setStatus('mandatory')
gslbCurCfgGenGeo = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenGeo.setStatus('mandatory')
gslbNewCfgGenGeo = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenGeo.setStatus('mandatory')
gslbCurCfgGenLookups = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenLookups.setStatus('mandatory')
gslbNewCfgGenLookups = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenLookups.setStatus('mandatory')
gslbCurCfgGenLookupDname = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenLookupDname.setStatus('mandatory')
gslbNewCfgGenLookupDname = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenLookupDname.setStatus('mandatory')
gslbNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5))
gslbCurCfgGenExternal = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenExternal.setStatus('mandatory')
gslbNewCfgGenExternal = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenExternal.setStatus('mandatory')
gslbCurCfgGenEip = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenEip.setStatus('mandatory')
gslbNewCfgGenEip = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenEip.setStatus('mandatory')
gslbCurCfgGenLookupPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8100, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenLookupPort.setStatus('mandatory')
gslbNewCfgGenLookupPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8100, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenLookupPort.setStatus('mandatory')
gslbCurCfgGenLookupTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenLookupTimeout.setStatus('mandatory')
gslbNewCfgGenLookupTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenLookupTimeout.setStatus('mandatory')
gslbNetworkTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbNetworkTableMaxSize.setStatus('mandatory')
gslbCurCfgNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 2), )
if mibBuilder.loadTexts: gslbCurCfgNetworkTable.setStatus('mandatory')
gslbCurCfgNetworkTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 2, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "gslbCurCfgNetworkIndx"))
if mibBuilder.loadTexts: gslbCurCfgNetworkTableEntry.setStatus('mandatory')
gslbCurCfgNetworkIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgNetworkIndx.setStatus('mandatory')
gslbCurCfgNetworkSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgNetworkSourceIp.setStatus('mandatory')
gslbCurCfgNetworkNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgNetworkNetMask.setStatus('mandatory')
gslbCurCfgNetworkVip1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgNetworkVip1.setStatus('mandatory')
gslbCurCfgNetworkVip2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgNetworkVip2.setStatus('mandatory')
gslbNewCfgNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 3), )
if mibBuilder.loadTexts: gslbNewCfgNetworkTable.setStatus('mandatory')
gslbNewCfgNetworkTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 3, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "gslbNewCfgNetworkIndx"))
if mibBuilder.loadTexts: gslbNewCfgNetworkTableEntry.setStatus('mandatory')
gslbNewCfgNetworkIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbNewCfgNetworkIndx.setStatus('mandatory')
gslbNewCfgNetworkSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgNetworkSourceIp.setStatus('mandatory')
gslbNewCfgNetworkNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgNetworkNetMask.setStatus('mandatory')
gslbNewCfgNetworkVip1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgNetworkVip1.setStatus('mandatory')
gslbNewCfgNetworkVip2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 3, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgNetworkVip2.setStatus('mandatory')
gslbNewCfgNetworkDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 4, 5, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgNetworkDelete.setStatus('mandatory')
dnsCurCfgPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 2, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurCfgPrimaryIpAddr.setStatus('mandatory')
dnsNewCfgPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsNewCfgPrimaryIpAddr.setStatus('mandatory')
dnsCurCfgSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 2, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurCfgSecondaryIpAddr.setStatus('mandatory')
dnsNewCfgSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsNewCfgSecondaryIpAddr.setStatus('mandatory')
dnsCurCfgDomainName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurCfgDomainName.setStatus('mandatory')
dnsNewCfgDomainName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 2, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsNewCfgDomainName.setStatus('mandatory')
gslbRemSiteTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbRemSiteTableMaxSize.setStatus('mandatory')
gslbCurCfgRemSiteTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 2), )
if mibBuilder.loadTexts: gslbCurCfgRemSiteTable.setStatus('mandatory')
gslbCurCfgRemSiteTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 2, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "gslbCurCfgRemSiteIndx"))
if mibBuilder.loadTexts: gslbCurCfgRemSiteTableEntry.setStatus('mandatory')
gslbCurCfgRemSiteIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgRemSiteIndx.setStatus('mandatory')
gslbCurCfgRemSitePrimaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgRemSitePrimaryIp.setStatus('mandatory')
gslbCurCfgRemSiteSecondaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgRemSiteSecondaryIp.setStatus('mandatory')
gslbCurCfgRemSiteState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgRemSiteState.setStatus('mandatory')
gslbCurCfgRemSiteUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgRemSiteUpdate.setStatus('mandatory')
gslbNewCfgRemSiteTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 3), )
if mibBuilder.loadTexts: gslbNewCfgRemSiteTable.setStatus('mandatory')
gslbNewCfgRemSiteTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 3, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "gslbNewCfgRemSiteIndx"))
if mibBuilder.loadTexts: gslbNewCfgRemSiteTableEntry.setStatus('mandatory')
gslbNewCfgRemSiteIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbNewCfgRemSiteIndx.setStatus('mandatory')
gslbNewCfgRemSitePrimaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgRemSitePrimaryIp.setStatus('mandatory')
gslbNewCfgRemSiteSecondaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgRemSiteSecondaryIp.setStatus('mandatory')
gslbNewCfgRemSiteState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgRemSiteState.setStatus('mandatory')
gslbNewCfgRemSiteUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 11, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgRemSiteUpdate.setStatus('mandatory')
vrrpGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1))
vrrpCurCfgGenState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenState.setStatus('mandatory')
vrrpNewCfgGenState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenState.setStatus('mandatory')
vrrpCurCfgGenTckVirtRtrInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckVirtRtrInc.setStatus('mandatory')
vrrpNewCfgGenTckVirtRtrInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckVirtRtrInc.setStatus('mandatory')
vrrpCurCfgGenTckIpIntfInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckIpIntfInc.setStatus('mandatory')
vrrpNewCfgGenTckIpIntfInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckIpIntfInc.setStatus('mandatory')
vrrpCurCfgGenTckVlanPortInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckVlanPortInc.setStatus('mandatory')
vrrpNewCfgGenTckVlanPortInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckVlanPortInc.setStatus('mandatory')
vrrpCurCfgGenTckL4PortInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckL4PortInc.setStatus('mandatory')
vrrpNewCfgGenTckL4PortInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckL4PortInc.setStatus('mandatory')
vrrpCurCfgGenTckRServerInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckRServerInc.setStatus('mandatory')
vrrpNewCfgGenTckRServerInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckRServerInc.setStatus('mandatory')
vrrpCurCfgGenTckHsrpInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckHsrpInc.setStatus('mandatory')
vrrpNewCfgGenTckHsrpInc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckHsrpInc.setStatus('mandatory')
vrrpCurCfgGenHotstandby = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenHotstandby.setStatus('mandatory')
vrrpNewCfgGenHotstandby = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenHotstandby.setStatus('mandatory')
vrrpCurCfgVirtRtrTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2), )
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTable.setStatus('mandatory')
vrrpCurCfgVirtRtrTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "vrrpCurCfgVirtRtrIndx"))
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTableEntry.setStatus('mandatory')
vrrpCurCfgVirtRtrIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrIndx.setStatus('mandatory')
vrrpCurCfgVirtRtrID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrID.setStatus('mandatory')
vrrpCurCfgVirtRtrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrAddr.setStatus('mandatory')
vrrpCurCfgVirtRtrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrIfIndex.setStatus('mandatory')
vrrpCurCfgVirtRtrInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrInterval.setStatus('mandatory')
vrrpCurCfgVirtRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrPriority.setStatus('mandatory')
vrrpCurCfgVirtRtrPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrPreempt.setStatus('mandatory')
vrrpCurCfgVirtRtrState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrState.setStatus('mandatory')
vrrpCurCfgVirtRtrSharing = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrSharing.setStatus('mandatory')
vrrpCurCfgVirtRtrTckVirtRtr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckVirtRtr.setStatus('mandatory')
vrrpCurCfgVirtRtrTckIpIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckIpIntf.setStatus('mandatory')
vrrpCurCfgVirtRtrTckVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckVlanPort.setStatus('mandatory')
vrrpCurCfgVirtRtrTckL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckL4Port.setStatus('mandatory')
vrrpCurCfgVirtRtrTckRServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckRServer.setStatus('mandatory')
vrrpCurCfgVirtRtrTckHsrp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckHsrp.setStatus('mandatory')
vrrpNewCfgVirtRtrTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3), )
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTable.setStatus('mandatory')
vrrpNewCfgVirtRtrTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "vrrpNewCfgVirtRtrIndx"))
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTableEntry.setStatus('mandatory')
vrrpNewCfgVirtRtrIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrIndx.setStatus('mandatory')
vrrpNewCfgVirtRtrID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrID.setStatus('mandatory')
vrrpNewCfgVirtRtrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrAddr.setStatus('mandatory')
vrrpNewCfgVirtRtrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrIfIndex.setStatus('mandatory')
vrrpNewCfgVirtRtrInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrInterval.setStatus('mandatory')
vrrpNewCfgVirtRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrPriority.setStatus('mandatory')
vrrpNewCfgVirtRtrPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrPreempt.setStatus('mandatory')
vrrpNewCfgVirtRtrState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrState.setStatus('mandatory')
vrrpNewCfgVirtRtrDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrDelete.setStatus('mandatory')
vrrpNewCfgVirtRtrSharing = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrSharing.setStatus('mandatory')
vrrpNewCfgVirtRtrTckVirtRtr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckVirtRtr.setStatus('mandatory')
vrrpNewCfgVirtRtrTckIpIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckIpIntf.setStatus('mandatory')
vrrpNewCfgVirtRtrTckVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckVlanPort.setStatus('mandatory')
vrrpNewCfgVirtRtrTckL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckL4Port.setStatus('mandatory')
vrrpNewCfgVirtRtrTckRServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckRServer.setStatus('mandatory')
vrrpNewCfgVirtRtrTckHsrp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckHsrp.setStatus('mandatory')
vrrpCurCfgIfTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 4), )
if mibBuilder.loadTexts: vrrpCurCfgIfTable.setStatus('mandatory')
vrrpCurCfgIfTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 4, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "vrrpCurCfgIfIndx"))
if mibBuilder.loadTexts: vrrpCurCfgIfTableEntry.setStatus('mandatory')
vrrpCurCfgIfIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgIfIndx.setStatus('mandatory')
vrrpCurCfgIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("simple-text-password", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgIfAuthType.setStatus('mandatory')
vrrpCurCfgIfPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgIfPasswd.setStatus('mandatory')
vrrpNewCfgIfTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 5), )
if mibBuilder.loadTexts: vrrpNewCfgIfTable.setStatus('mandatory')
vrrpNewCfgIfTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 5, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "vrrpNewCfgIfIndx"))
if mibBuilder.loadTexts: vrrpNewCfgIfTableEntry.setStatus('mandatory')
vrrpNewCfgIfIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpNewCfgIfIndx.setStatus('mandatory')
vrrpNewCfgIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("simple-text-password", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgIfAuthType.setStatus('mandatory')
vrrpNewCfgIfPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgIfPasswd.setStatus('mandatory')
vrrpNewCfgIfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgIfDelete.setStatus('mandatory')
vrrpCurCfgVirtRtrGrpTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6), )
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTable.setStatus('mandatory')
vrrpCurCfgVirtRtrGrpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "vrrpCurCfgVirtRtrGrpIndx"))
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTableEntry.setStatus('mandatory')
vrrpCurCfgVirtRtrGrpIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpIndx.setStatus('mandatory')
vrrpCurCfgVirtRtrGrpID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpID.setStatus('mandatory')
vrrpCurCfgVirtRtrGrpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpIfIndex.setStatus('mandatory')
vrrpCurCfgVirtRtrGrpInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpInterval.setStatus('mandatory')
vrrpCurCfgVirtRtrGrpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpPriority.setStatus('mandatory')
vrrpCurCfgVirtRtrGrpPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpPreempt.setStatus('mandatory')
vrrpCurCfgVirtRtrGrpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpState.setStatus('mandatory')
vrrpCurCfgVirtRtrGrpSharing = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpSharing.setStatus('mandatory')
vrrpCurCfgVirtRtrGrpTckVirtRtr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckVirtRtr.setStatus('mandatory')
vrrpCurCfgVirtRtrGrpTckIpIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckIpIntf.setStatus('mandatory')
vrrpCurCfgVirtRtrGrpTckVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckVlanPort.setStatus('mandatory')
vrrpCurCfgVirtRtrGrpTckL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckL4Port.setStatus('mandatory')
vrrpCurCfgVirtRtrGrpTckRServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckRServer.setStatus('mandatory')
vrrpCurCfgVirtRtrGrpTckHsrp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckHsrp.setStatus('mandatory')
vrrpNewCfgVirtRtrGrpTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7), )
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTable.setStatus('mandatory')
vrrpNewCfgVirtRtrGrpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "vrrpNewCfgVirtRtrGrpIndx"))
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTableEntry.setStatus('mandatory')
vrrpNewCfgVirtRtrGrpIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpIndx.setStatus('mandatory')
vrrpNewCfgVirtRtrGrpID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpID.setStatus('mandatory')
vrrpNewCfgVirtRtrGrpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpIfIndex.setStatus('mandatory')
vrrpNewCfgVirtRtrGrpInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpInterval.setStatus('mandatory')
vrrpNewCfgVirtRtrGrpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpPriority.setStatus('mandatory')
vrrpNewCfgVirtRtrGrpPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpPreempt.setStatus('mandatory')
vrrpNewCfgVirtRtrGrpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpState.setStatus('mandatory')
vrrpNewCfgVirtRtrGrpDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpDelete.setStatus('mandatory')
vrrpNewCfgVirtRtrGrpSharing = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpSharing.setStatus('mandatory')
vrrpNewCfgVirtRtrGrpTckVirtRtr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckVirtRtr.setStatus('mandatory')
vrrpNewCfgVirtRtrGrpTckIpIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckIpIntf.setStatus('mandatory')
vrrpNewCfgVirtRtrGrpTckVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckVlanPort.setStatus('mandatory')
vrrpNewCfgVirtRtrGrpTckL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckL4Port.setStatus('mandatory')
vrrpNewCfgVirtRtrGrpTckRServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckRServer.setStatus('mandatory')
vrrpNewCfgVirtRtrGrpTckHsrp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 15, 7, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckHsrp.setStatus('mandatory')
ripStatInPkts = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInPkts.setStatus('mandatory')
ripStatOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatOutPkts.setStatus('mandatory')
ripStatInErrorPkts = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInErrorPkts.setStatus('mandatory')
slbStatPortMaintTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1), )
if mibBuilder.loadTexts: slbStatPortMaintTable.setStatus('mandatory')
slbStatPortMaintEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbStatPortMaintPortIndex"))
if mibBuilder.loadTexts: slbStatPortMaintEntry.setStatus('mandatory')
slbStatPortMaintPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintPortIndex.setStatus('mandatory')
slbStatPortMaintCurBindings = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintCurBindings.setStatus('mandatory')
slbStatPortMaintBindingFails = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintBindingFails.setStatus('mandatory')
slbStatPortMaintNonTcpFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintNonTcpFrames.setStatus('mandatory')
slbStatPortMaintTcpFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintTcpFragments.setStatus('mandatory')
slbStatPortMaintUdpDatagrams = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintUdpDatagrams.setStatus('mandatory')
slbStatPortMaintIncorrectVIPs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintIncorrectVIPs.setStatus('mandatory')
slbStatPortMaintIncorrectVports = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintIncorrectVports.setStatus('mandatory')
slbStatPortMaintRealServerNoAvails = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintRealServerNoAvails.setStatus('mandatory')
slbStatPortMaintFilteredDeniedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortMaintFilteredDeniedFrames.setStatus('mandatory')
slbStatMaintBackupServActs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintBackupServActs.setStatus('mandatory')
slbStatMaintOverflowServActs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintOverflowServActs.setStatus('mandatory')
slbStatPortRealServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 2), )
if mibBuilder.loadTexts: slbStatPortRealServerTable.setStatus('mandatory')
slbStatPortRealServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 2, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbStatPortRealServerPortIndex"), (0, "ALTEON-PRIVATE-MIBS", "slbStatPortRealServerServerIndex"))
if mibBuilder.loadTexts: slbStatPortRealServerEntry.setStatus('mandatory')
slbStatPortRealServerPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortRealServerPortIndex.setStatus('mandatory')
slbStatPortRealServerServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortRealServerServerIndex.setStatus('mandatory')
slbStatPortRealServerCurrSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortRealServerCurrSessions.setStatus('mandatory')
slbStatPortRealServerTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortRealServerTotalSessions.setStatus('mandatory')
slbStatPortRealServerHCOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortRealServerHCOctets.setStatus('mandatory')
slbStatPortRealServerHCOctetsLow32 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortRealServerHCOctetsLow32.setStatus('mandatory')
slbStatPortRealServerHCOctetsHigh32 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatPortRealServerHCOctetsHigh32.setStatus('mandatory')
slbStatRServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 5), )
if mibBuilder.loadTexts: slbStatRServerTable.setStatus('mandatory')
slbStatRServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 5, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbStatRServerIndex"))
if mibBuilder.loadTexts: slbStatRServerEntry.setStatus('mandatory')
slbStatRServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatRServerIndex.setStatus('mandatory')
slbStatRServerCurrSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 5, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatRServerCurrSessions.setStatus('mandatory')
slbStatRServerTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatRServerTotalSessions.setStatus('mandatory')
slbStatRServerFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatRServerFailures.setStatus('mandatory')
slbStatRServerHighestSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatRServerHighestSessions.setStatus('mandatory')
slbStatRServerHCOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatRServerHCOctets.setStatus('mandatory')
slbStatRServerHCOctetsLow32 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatRServerHCOctetsLow32.setStatus('mandatory')
slbStatRServerHCOctetsHigh32 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatRServerHCOctetsHigh32.setStatus('mandatory')
slbStatGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 6), )
if mibBuilder.loadTexts: slbStatGroupTable.setStatus('mandatory')
slbStatGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 6, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbStatGroupIndex"))
if mibBuilder.loadTexts: slbStatGroupEntry.setStatus('mandatory')
slbStatGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatGroupIndex.setStatus('mandatory')
slbStatGroupCurrSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 6, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatGroupCurrSessions.setStatus('mandatory')
slbStatGroupTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatGroupTotalSessions.setStatus('mandatory')
slbStatGroupHighestSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatGroupHighestSessions.setStatus('mandatory')
slbStatGroupHCOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatGroupHCOctets.setStatus('mandatory')
slbStatGroupHCOctetsLow32 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatGroupHCOctetsLow32.setStatus('mandatory')
slbStatGroupHCOctetsHigh32 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatGroupHCOctetsHigh32.setStatus('mandatory')
slbStatVServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7), )
if mibBuilder.loadTexts: slbStatVServerTable.setStatus('mandatory')
slbStatVServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbStatVServerIndex"))
if mibBuilder.loadTexts: slbStatVServerEntry.setStatus('mandatory')
slbStatVServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerIndex.setStatus('mandatory')
slbStatVServerCurrSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerCurrSessions.setStatus('mandatory')
slbStatVServerTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerTotalSessions.setStatus('mandatory')
slbStatVServerHighestSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerHighestSessions.setStatus('mandatory')
slbStatVServerHCOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerHCOctets.setStatus('mandatory')
slbStatVServerHCOctetsLow32 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerHCOctetsLow32.setStatus('mandatory')
slbStatVServerHCOctetsHigh32 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerHCOctetsHigh32.setStatus('mandatory')
slbStatVServerHeaderHits = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerHeaderHits.setStatus('mandatory')
slbStatVServerHeaderMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerHeaderMisses.setStatus('mandatory')
slbStatVServerHeaderTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 2, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerHeaderTotalSessions.setStatus('mandatory')
arpStatEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 3, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpStatEntries.setStatus('mandatory')
arpStatHighWater = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 3, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpStatHighWater.setStatus('mandatory')
arpStatMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 3, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpStatMaxEntries.setStatus('mandatory')
routeStatEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 4, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeStatEntries.setStatus('mandatory')
routeStatHighWater = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 4, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeStatHighWater.setStatus('mandatory')
routeStatMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 4, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeStatMaxEntries.setStatus('mandatory')
dnsStatInGoodDnsRequests = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsStatInGoodDnsRequests.setStatus('mandatory')
dnsStatInBadDnsRequests = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsStatInBadDnsRequests.setStatus('mandatory')
fltStatTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 6, 1), )
if mibBuilder.loadTexts: fltStatTable.setStatus('mandatory')
fltStatTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 6, 1, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "fltStatFltIndex"))
if mibBuilder.loadTexts: fltStatTableEntry.setStatus('mandatory')
fltStatFltIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltStatFltIndex.setStatus('mandatory')
fltStatFltFirings = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 6, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltStatFltFirings.setStatus('mandatory')
gslbStatRemRealServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 7, 1), )
if mibBuilder.loadTexts: gslbStatRemRealServerTable.setStatus('mandatory')
gslbStatRemRealServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 7, 1, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "gslbStatRemRealServerIndex"))
if mibBuilder.loadTexts: gslbStatRemRealServerEntry.setStatus('mandatory')
gslbStatRemRealServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatRemRealServerIndex.setStatus('mandatory')
gslbStatRemRealServerDnsHandoffs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 7, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatRemRealServerDnsHandoffs.setStatus('mandatory')
gslbStatRemRealServerHttpRedirs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 7, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatRemRealServerHttpRedirs.setStatus('mandatory')
gslbStatMaintInGoodSiteUpdates = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 8, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatMaintInGoodSiteUpdates.setStatus('mandatory')
gslbStatMaintInBadSiteUpdates = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 8, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatMaintInBadSiteUpdates.setStatus('mandatory')
vrrpStatInAdvers = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 9, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatInAdvers.setStatus('mandatory')
vrrpStatOutAdvers = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 9, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatOutAdvers.setStatus('mandatory')
vrrpStatOutBadAdvers = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 9, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatOutBadAdvers.setStatus('mandatory')
ftpSlbStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 14, 1))
ftpSlbStatTotal = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 14, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpSlbStatTotal.setStatus('mandatory')
ftpNatStatTotal = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 14, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpNatStatTotal.setStatus('mandatory')
urlRedirStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10, 1))
urlStatRedRedirs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatRedRedirs.setStatus('mandatory')
urlStatRedOrigSrvs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatRedOrigSrvs.setStatus('mandatory')
urlStatRedNonGets = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatRedNonGets.setStatus('mandatory')
urlStatRedCookie = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatRedCookie.setStatus('mandatory')
urlStatRedNoCache = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatRedNoCache.setStatus('mandatory')
urlSlbStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10, 2))
urlStatSlbPathTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10, 2, 1), )
if mibBuilder.loadTexts: urlStatSlbPathTable.setStatus('mandatory')
urlStatSlbPathTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10, 2, 1, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbCurCfgUrlLbPathIndex"))
if mibBuilder.loadTexts: urlStatSlbPathTableEntry.setStatus('mandatory')
urlStatSlbPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatSlbPathIndex.setStatus('mandatory')
urlStatSlbPathHits = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 10, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: urlStatSlbPathHits.setStatus('mandatory')
tcpStatCurConns = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 11, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpStatCurConns.setStatus('mandatory')
tcpStatHalfOpens = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 11, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpStatHalfOpens.setStatus('mandatory')
memStatsAllocs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 12, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memStatsAllocs.setStatus('mandatory')
memStatsFrees = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 12, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memStatsFrees.setStatus('mandatory')
memStatsAllocFails = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 12, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memStatsAllocFails.setStatus('mandatory')
memStatsBytesCurr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 12, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memStatsBytesCurr.setStatus('mandatory')
memStatsBytesHiwat = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 12, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memStatsBytesHiwat.setStatus('mandatory')
memStatsPoolBytes = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 12, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memStatsPoolBytes.setStatus('mandatory')
memStatsLargest = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 12, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memStatsLargest.setStatus('mandatory')
pktStatsAllocs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 13, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsAllocs.setStatus('mandatory')
pktStatsFrees = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 13, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsFrees.setStatus('mandatory')
pktStatsAllocFails = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 13, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsAllocFails.setStatus('mandatory')
pktStatsMediums = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 13, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsMediums.setStatus('mandatory')
pktStatsJumbos = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 13, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsJumbos.setStatus('mandatory')
pktStatsSmalls = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 13, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsSmalls.setStatus('mandatory')
portInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 1, 1), )
if mibBuilder.loadTexts: portInfoTable.setStatus('mandatory')
portInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 1, 1, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "portInfoIndx"))
if mibBuilder.loadTexts: portInfoTableEntry.setStatus('mandatory')
portInfoIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoIndx.setStatus('mandatory')
portInfoSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("mbs10", 2), ("mbs100", 3), ("mbs1000", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoSpeed.setStatus('mandatory')
portInfoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("full-duplex", 2), ("half-duplex", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoMode.setStatus('mandatory')
portInfoFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("transmit", 2), ("receive", 3), ("both", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoFlowCtrl.setStatus('mandatory')
portInfoLink = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("disabled", 3), ("inoperative", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoLink.setStatus('mandatory')
slbFailOverInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 1), )
if mibBuilder.loadTexts: slbFailOverInfoTable.setStatus('mandatory')
slbFailOverInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 1, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbFailOverInfoIndex"))
if mibBuilder.loadTexts: slbFailOverInfoEntry.setStatus('mandatory')
slbFailOverInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbFailOverInfoIndex.setStatus('mandatory')
slbFailOverInfoPrimaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbFailOverInfoPrimaryIp.setStatus('mandatory')
slbFailOverInfoPrimaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbFailOverInfoPrimaryStatus.setStatus('mandatory')
slbFailOverInfoPrimaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("standby", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbFailOverInfoPrimaryState.setStatus('mandatory')
slbFailOverInfoSecondaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbFailOverInfoSecondaryIp.setStatus('mandatory')
slbFailOverInfoSecondaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbFailOverInfoSecondaryStatus.setStatus('mandatory')
slbFailOverInfoSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("standby", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbFailOverInfoSecondaryState.setStatus('mandatory')
slbRealServerInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 2), )
if mibBuilder.loadTexts: slbRealServerInfoTable.setStatus('mandatory')
slbRealServerInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 2, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "slbRealServerInfoIndex"))
if mibBuilder.loadTexts: slbRealServerInfoEntry.setStatus('mandatory')
slbRealServerInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerInfoIndex.setStatus('mandatory')
slbRealServerInfoIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerInfoIpAddr.setStatus('mandatory')
slbRealServerMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 2, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerMacAddr.setStatus('mandatory')
slbRealServerInfoSwitchPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerInfoSwitchPort.setStatus('mandatory')
slbRealServerInfoHealthLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("layer3", 2), ("layer4", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerInfoHealthLayer.setStatus('mandatory')
slbRealServerInfoOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("overflow", 1), ("no-overflow", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerInfoOverflow.setStatus('mandatory')
slbRealServerInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("running", 2), ("failed", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerInfoState.setStatus('mandatory')
ipRouteInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 1), )
if mibBuilder.loadTexts: ipRouteInfoTable.setStatus('mandatory')
ipRouteInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 1, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "ipRouteInfoIndx"))
if mibBuilder.loadTexts: ipRouteInfoEntry.setStatus('mandatory')
ipRouteInfoIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoIndx.setStatus('mandatory')
ipRouteInfoDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoDestIp.setStatus('mandatory')
ipRouteInfoMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoMask.setStatus('mandatory')
ipRouteInfoGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoGateway.setStatus('mandatory')
ipRouteInfoTag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("fixed", 1), ("icmp", 2), ("static", 3), ("snmp", 4), ("addr", 5), ("rip", 6), ("broadcast", 7), ("martian", 8), ("multicast", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoTag.setStatus('mandatory')
ipRouteInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("indirect", 1), ("direct", 2), ("local", 3), ("broadcast", 4), ("martian", 5), ("multicast", 6), ("other", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoType.setStatus('mandatory')
ipRouteInfoInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoInterface.setStatus('mandatory')
arpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 2), )
if mibBuilder.loadTexts: arpInfoTable.setStatus('mandatory')
arpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 2, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "arpInfoDestIp"))
if mibBuilder.loadTexts: arpInfoEntry.setStatus('mandatory')
arpInfoDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoDestIp.setStatus('mandatory')
arpInfoMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 2, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoMacAddr.setStatus('mandatory')
arpInfoVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoVLAN.setStatus('mandatory')
arpInfoSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoSrcPort.setStatus('mandatory')
arpInfoRefPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoRefPorts.setStatus('mandatory')
arpInfoFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("clear", 1), ("unresolved", 2), ("permanent", 3), ("indirect", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoFlag.setStatus('mandatory')
vrrpInfoVirtRtrTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 4, 1), )
if mibBuilder.loadTexts: vrrpInfoVirtRtrTable.setStatus('mandatory')
vrrpInfoVirtRtrTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 4, 1, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "vrrpInfoVirtRtrIndex"))
if mibBuilder.loadTexts: vrrpInfoVirtRtrTableEntry.setStatus('mandatory')
vrrpInfoVirtRtrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrIndex.setStatus('mandatory')
vrrpInfoVirtRtrState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 9, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("init", 1), ("master", 2), ("backup", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrState.setStatus('mandatory')
dynSLBRealServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 12, 1), )
if mibBuilder.loadTexts: dynSLBRealServerTable.setStatus('mandatory')
dynSLBRealServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 12, 1, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "dynSLBRealServerIpAddr"), (0, "ALTEON-PRIVATE-MIBS", "dynSLBRealServerPortNum"))
if mibBuilder.loadTexts: dynSLBRealServerEntry.setStatus('mandatory')
dynSLBRealServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 12, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynSLBRealServerIpAddr.setStatus('mandatory')
dynSLBRealServerPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 12, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dynSLBRealServerPortNum.setStatus('mandatory')
dynSLBRealServerWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 12, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynSLBRealServerWeight.setStatus('mandatory')
operSlbPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 1), )
if mibBuilder.loadTexts: operSlbPortTable.setStatus('mandatory')
operSlbPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 1, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "operSlbPortIndex"))
if mibBuilder.loadTexts: operSlbPortEntry.setStatus('mandatory')
operSlbPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operSlbPortIndex.setStatus('mandatory')
operSlbPortClrSessionTab = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: operSlbPortClrSessionTab.setStatus('mandatory')
radCurCfgPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgPrimaryIpAddr.setStatus('mandatory')
radNewCfgPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgPrimaryIpAddr.setStatus('mandatory')
radCurCfgSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgSecondaryIpAddr.setStatus('mandatory')
radNewCfgSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgSecondaryIpAddr.setStatus('mandatory')
radCurCfgPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1500, 3000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgPort.setStatus('mandatory')
radNewCfgPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1500, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgPort.setStatus('mandatory')
radCurCfgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgTimeout.setStatus('mandatory')
radNewCfgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgTimeout.setStatus('mandatory')
radCurCfgRetries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgRetries.setStatus('mandatory')
radNewCfgRetries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgRetries.setStatus('mandatory')
radCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgState.setStatus('mandatory')
radNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgState.setStatus('mandatory')
radCurCfgAuthenString = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgAuthenString.setStatus('mandatory')
radNewCfgAuthenString = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 16, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgAuthenString.setStatus('mandatory')
bwmGeneralConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 1))
bwmPolicyConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2))
bwmContractConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3))
bwmCurCfgGenState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgGenState.setStatus('mandatory')
bwmNewCfgGenState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgGenState.setStatus('mandatory')
bwmCurCfgGenEnforcePolicy = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgGenEnforcePolicy.setStatus('mandatory')
bwmNewCfgGenEnforcePolicy = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgGenEnforcePolicy.setStatus('mandatory')
bwmCurCfgGenSmtpUser = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgGenSmtpUser.setStatus('mandatory')
bwmNewCfgGenSmtpUser = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgGenSmtpUser.setStatus('mandatory')
bwmPolicyTableMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmPolicyTableMaxEnt.setStatus('mandatory')
bwmCurCfgPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 2), )
if mibBuilder.loadTexts: bwmCurCfgPolicyTable.setStatus('mandatory')
bwmCurCfgPolicyTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 2, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "bwmCurCfgPolicyIndx"))
if mibBuilder.loadTexts: bwmCurCfgPolicyTableEntry.setStatus('mandatory')
bwmCurCfgPolicyIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgPolicyIndx.setStatus('mandatory')
bwmCurCfgPolicyTosIn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgPolicyTosIn.setStatus('mandatory')
bwmCurCfgPolicyTosOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgPolicyTosOut.setStatus('mandatory')
bwmCurCfgPolicyHard = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgPolicyHard.setStatus('mandatory')
bwmCurCfgPolicySoft = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgPolicySoft.setStatus('mandatory')
bwmCurCfgPolicyResv = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgPolicyResv.setStatus('mandatory')
bwmCurCfgPolicyBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8192, 512000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgPolicyBuffer.setStatus('mandatory')
bwmNewCfgPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 3), )
if mibBuilder.loadTexts: bwmNewCfgPolicyTable.setStatus('mandatory')
bwmNewCfgPolicyTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 3, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "bwmNewCfgPolicyIndx"))
if mibBuilder.loadTexts: bwmNewCfgPolicyTableEntry.setStatus('mandatory')
bwmNewCfgPolicyIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmNewCfgPolicyIndx.setStatus('mandatory')
bwmNewCfgPolicyTosIn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgPolicyTosIn.setStatus('mandatory')
bwmNewCfgPolicyTosOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgPolicyTosOut.setStatus('mandatory')
bwmNewCfgPolicyHard = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgPolicyHard.setStatus('mandatory')
bwmNewCfgPolicySoft = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgPolicySoft.setStatus('mandatory')
bwmNewCfgPolicyResv = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgPolicyResv.setStatus('mandatory')
bwmNewCfgPolicyBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8192, 512000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgPolicyBuffer.setStatus('mandatory')
bwmContractTableMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmContractTableMaxEnt.setStatus('mandatory')
bwmCurCfgContractTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 2), )
if mibBuilder.loadTexts: bwmCurCfgContractTable.setStatus('mandatory')
bwmCurCfgContractTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 2, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "bwmCurCfgContractIndx"))
if mibBuilder.loadTexts: bwmCurCfgContractTableEntry.setStatus('mandatory')
bwmCurCfgContractIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContractIndx.setStatus('mandatory')
bwmCurCfgContractName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContractName.setStatus('mandatory')
bwmCurCfgContractState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContractState.setStatus('mandatory')
bwmCurCfgContractPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContractPolicy.setStatus('mandatory')
bwmCurCfgContractPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContractPrec.setStatus('mandatory')
bwmCurCfgContractUseTos = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContractUseTos.setStatus('mandatory')
bwmCurCfgContractHistory = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmCurCfgContractHistory.setStatus('mandatory')
bwmNewCfgContractTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 3), )
if mibBuilder.loadTexts: bwmNewCfgContractTable.setStatus('mandatory')
bwmNewCfgContractTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 3, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "bwmNewCfgContractIndx"))
if mibBuilder.loadTexts: bwmNewCfgContractTableEntry.setStatus('mandatory')
bwmNewCfgContractIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmNewCfgContractIndx.setStatus('mandatory')
bwmNewCfgContractName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgContractName.setStatus('mandatory')
bwmNewCfgContractState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgContractState.setStatus('mandatory')
bwmNewCfgContractPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgContractPolicy.setStatus('mandatory')
bwmNewCfgContractDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgContractDelete.setStatus('mandatory')
bwmNewCfgContractPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgContractPrec.setStatus('mandatory')
bwmNewCfgContractUseTos = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgContractUseTos.setStatus('mandatory')
bwmNewCfgContractHistory = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 17, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwmNewCfgContractHistory.setStatus('mandatory')
bwmStatTcTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 1), )
if mibBuilder.loadTexts: bwmStatTcTable.setStatus('mandatory')
bwmStatTcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 1, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "bwmStatTcContractIndex"))
if mibBuilder.loadTexts: bwmStatTcEntry.setStatus('mandatory')
bwmStatTcContractIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcContractIndex.setStatus('mandatory')
bwmStatTcName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcName.setStatus('mandatory')
bwmStatTcOutoct = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcOutoct.setStatus('mandatory')
bwmStatTcOutdisoct = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcOutdisoct.setStatus('mandatory')
bwmStatTcBufferUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcBufferUsed.setStatus('mandatory')
bwmStatTcBufferMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcBufferMax.setStatus('mandatory')
bwmStatTcrTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 2), )
if mibBuilder.loadTexts: bwmStatTcrTable.setStatus('mandatory')
bwmStatTcrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 2, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "bwmStatTcrContractIndex"))
if mibBuilder.loadTexts: bwmStatTcrEntry.setStatus('mandatory')
bwmStatTcrContractIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcrContractIndex.setStatus('mandatory')
bwmStatTcrName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcrName.setStatus('mandatory')
bwmStatTcrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcrRate.setStatus('mandatory')
bwmStatTcrOutoct = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcrOutoct.setStatus('mandatory')
bwmStatTcrOutdisoct = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcrOutdisoct.setStatus('mandatory')
bwmStatTcrBufferUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcrBufferUsed.setStatus('mandatory')
bwmStatTcrBufferMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatTcrBufferMax.setStatus('mandatory')
bwmStatSpTcTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 3), )
if mibBuilder.loadTexts: bwmStatSpTcTable.setStatus('mandatory')
bwmStatSpTcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 3, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "bwmStatSpTcPortIndex"), (0, "ALTEON-PRIVATE-MIBS", "bwmStatSpTcContractIndex"))
if mibBuilder.loadTexts: bwmStatSpTcEntry.setStatus('mandatory')
bwmStatSpTcPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcPortIndex.setStatus('mandatory')
bwmStatSpTcContractIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcContractIndex.setStatus('mandatory')
bwmStatSpTcName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcName.setStatus('mandatory')
bwmStatSpTcOutoct = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcOutoct.setStatus('mandatory')
bwmStatSpTcOutdisoct = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcOutdisoct.setStatus('mandatory')
bwmStatSpTcBufferUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcBufferUsed.setStatus('mandatory')
bwmStatSpTcBufferMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcBufferMax.setStatus('mandatory')
bwmStatSpTcrTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 4), )
if mibBuilder.loadTexts: bwmStatSpTcrTable.setStatus('mandatory')
bwmStatSpTcrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 4, 1), ).setIndexNames((0, "ALTEON-PRIVATE-MIBS", "bwmStatSpTcrPortIndex"), (0, "ALTEON-PRIVATE-MIBS", "bwmStatSpTcrContractIndex"))
if mibBuilder.loadTexts: bwmStatSpTcrEntry.setStatus('mandatory')
bwmStatSpTcrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcrPortIndex.setStatus('mandatory')
bwmStatSpTcrContractIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcrContractIndex.setStatus('mandatory')
bwmStatSpTcrName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcrName.setStatus('mandatory')
bwmStatSpTcrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcrRate.setStatus('mandatory')
bwmStatSpTcrOutoct = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcrOutoct.setStatus('mandatory')
bwmStatSpTcrOutdisoct = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcrOutdisoct.setStatus('mandatory')
bwmStatSpTcrBufferUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcrBufferUsed.setStatus('mandatory')
bwmStatSpTcrBufferMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 1, 8, 15, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmStatSpTcrBufferMax.setStatus('mandatory')
mibBuilder.exportSymbols("ALTEON-PRIVATE-MIBS", slbStatPortMaintEntry=slbStatPortMaintEntry, slbNewCfgFailOverIndex=slbNewCfgFailOverIndex, gslbCurCfgGenHttpRedirect=gslbCurCfgGenHttpRedirect, ipNewCfgGwMetric=ipNewCfgGwMetric, slbStatVServerHeaderTotalSessions=slbStatVServerHeaderTotalSessions, fltNewCfgRangeHighDstPort=fltNewCfgRangeHighDstPort, gslbStatMaintInGoodSiteUpdates=gslbStatMaintInGoodSiteUpdates, ipCurCfgGwAddr=ipCurCfgGwAddr, agNewCfgTrapHostCommString=agNewCfgTrapHostCommString, vrrpCurCfgVirtRtrGrpSharing=vrrpCurCfgVirtRtrGrpSharing, bwmStatSpTcrBufferUsed=bwmStatSpTcrBufferUsed, gslbCurCfgGenGeo=gslbCurCfgGenGeo, fltCurCfgFtpNatActive=fltCurCfgFtpNatActive, vrrpNewCfgGenTckL4PortInc=vrrpNewCfgGenTckL4PortInc, gslbCurCfgGenOne=gslbCurCfgGenOne, radNewCfgPrimaryIpAddr=radNewCfgPrimaryIpAddr, bwmStatSpTcPortIndex=bwmStatSpTcPortIndex, vlanCurCfgTable=vlanCurCfgTable, slbCurCfgRealServerSuccRetry=slbCurCfgRealServerSuccRetry, agPortNewCfgBwmContract=agPortNewCfgBwmContract, slbCurCfgPortProxyIpAddr=slbCurCfgPortProxyIpAddr, fltNewCfgAclTcpFin=fltNewCfgAclTcpFin, radius=radius, slbNewCfgRealServerDelete=slbNewCfgRealServerDelete, slbNewCfgRealServerCookie=slbNewCfgRealServerCookie, gslbCurCfgGenState=gslbCurCfgGenState, memStatsLargest=memStatsLargest, operSlbPortClrSessionTab=operSlbPortClrSessionTab, slbStatVServerHCOctets=slbStatVServerHCOctets, slbNewCfgGroupDelete=slbNewCfgGroupDelete, slbNewCfgFailOverTblEntry=slbNewCfgFailOverTblEntry, pktStats=pktStats, vrrpCurCfgVirtRtrPriority=vrrpCurCfgVirtRtrPriority, vrrpNewCfgVirtRtrGrpTckRServer=vrrpNewCfgVirtRtrGrpTckRServer, slbNewCfgUrlRedirHeader=slbNewCfgUrlRedirHeader, slbCurCfgVirtServicesEntry=slbCurCfgVirtServicesEntry, vrrpInfoVirtRtrTableEntry=vrrpInfoVirtRtrTableEntry, bwmStatSpTcOutdisoct=bwmStatSpTcOutdisoct, slbStatPortMaintIncorrectVports=slbStatPortMaintIncorrectVports, fltNewCfgAclIpOption=fltNewCfgAclIpOption, vrrpNewCfgVirtRtrGrpIfIndex=vrrpNewCfgVirtRtrGrpIfIndex, vrrpNewCfgVirtRtrGrpIndx=vrrpNewCfgVirtRtrGrpIndx, vrrpNewCfgVirtRtrTckL4Port=vrrpNewCfgVirtRtrTckL4Port, slbCurCfgVirtServerIpAddress=slbCurCfgVirtServerIpAddress, bwmCurCfgPolicyHard=bwmCurCfgPolicyHard, gslbNewCfgGenRemSiteUpdateInterval=gslbNewCfgGenRemSiteUpdateInterval, dnsStats=dnsStats, gslbNewCfgRemSiteTable=gslbNewCfgRemSiteTable, agCurCfgHttpServerPort=agCurCfgHttpServerPort, slbNewCfgRealServerName=slbNewCfgRealServerName, bwmCurCfgPolicyTableEntry=bwmCurCfgPolicyTableEntry, agPortNewCfgTable=agPortNewCfgTable, agPortNewCfgIndx=agPortNewCfgIndx, ipRouteInfoDestIp=ipRouteInfoDestIp, ftpStats=ftpStats, slbCurCfgVirtServIndex=slbCurCfgVirtServIndex, slbNewCfgVirtServiceRealPort=slbNewCfgVirtServiceRealPort, bwmStatTcBufferMax=bwmStatTcBufferMax, slbCurCfgUrlLbPathString=slbCurCfgUrlLbPathString, slbCurCfgVirtServiceBwmContract=slbCurCfgVirtServiceBwmContract, slbNewCfgVirtServerClength=slbNewCfgVirtServerClength, ripCurCfgStaticSupply=ripCurCfgStaticSupply, dnsCurCfgPrimaryIpAddr=dnsCurCfgPrimaryIpAddr, slbCurCfgSyncVrrp=slbCurCfgSyncVrrp, ipNewCfgGwInterval=ipNewCfgGwInterval, slbNewCfgVirtServerUrlHashLen=slbNewCfgVirtServerUrlHashLen, fltNewCfgDstIp=fltNewCfgDstIp, bwmCurCfgContractPrec=bwmCurCfgContractPrec, bwmStatSpTcOutoct=bwmStatSpTcOutoct, dnsCurCfgDomainName=dnsCurCfgDomainName, bwmNewCfgContractPolicy=bwmNewCfgContractPolicy, slbCurCfgSyncPort=slbCurCfgSyncPort, fltCurCfgAclTcpAck=fltCurCfgAclTcpAck, fltStatTableEntry=fltStatTableEntry, slbStatPortRealServerPortIndex=slbStatPortRealServerPortIndex, slbNewCfgVirtServiceDirServerRtn=slbNewCfgVirtServiceDirServerRtn, dnsStatInBadDnsRequests=dnsStatInBadDnsRequests, gslbNewCfgNetworkTableEntry=gslbNewCfgNetworkTableEntry, bwmStatSpTcrTable=bwmStatSpTcrTable, gslbCurCfgRemSiteTableEntry=gslbCurCfgRemSiteTableEntry, slbCurCfgVirtServerCname=slbCurCfgVirtServerCname, vlanMaxEnt=vlanMaxEnt, slbStatMaintBackupServActs=slbStatMaintBackupServActs, ipFwdNewCfgPortState=ipFwdNewCfgPortState, switch=switch, slbCurCfgSyncPip=slbCurCfgSyncPip, fltCurCfgRangeHighSrcPort=fltCurCfgRangeHighSrcPort, fltNewCfgPortIndx=fltNewCfgPortIndx, gslbCurCfgNetworkTableEntry=gslbCurCfgNetworkTableEntry, bwmCurCfgPolicyResv=bwmCurCfgPolicyResv, vrrpStatInAdvers=vrrpStatInAdvers, vrrpNewCfgVirtRtrGrpID=vrrpNewCfgVirtRtrGrpID, urlStatRedOrigSrvs=urlStatRedOrigSrvs, bwmNewCfgPolicyTableEntry=bwmNewCfgPolicyTableEntry, ipFwdNewCfgPortEntry=ipFwdNewCfgPortEntry, agCurCfgTrapHostCommString=agCurCfgTrapHostCommString, slbNewCfgVirtServiceBwmContract=slbNewCfgVirtServiceBwmContract, trunkGroupCurCfgState=trunkGroupCurCfgState, agNewCfgSpanningTree=agNewCfgSpanningTree, ripStatInErrorPkts=ripStatInErrorPkts, bwmStatSpTcrOutdisoct=bwmStatSpTcrOutdisoct, dynamicSLB=dynamicSLB, trunkGroupNewCfgTableEntry=trunkGroupNewCfgTableEntry, slbCurCfgRealServerTable=slbCurCfgRealServerTable, slbNewCfgVirtServiceRealGroup=slbNewCfgVirtServiceRealGroup, slbNewCfgVirtServerDname=slbNewCfgVirtServerDname, gslbCurCfgGenLookupPort=gslbCurCfgGenLookupPort, gslbStatRemRealServerHttpRedirs=gslbStatRemRealServerHttpRedirs, bwmStatSpTcrPortIndex=bwmStatSpTcrPortIndex, slbCurCfgFailOverRouteSupply=slbCurCfgFailOverRouteSupply, ipCurCfgStaticRouteMask=ipCurCfgStaticRouteMask, urlStatRedNoCache=urlStatRedNoCache, slbNewCfgPortIndex=slbNewCfgPortIndex, fltNewCfgRedirGroup=fltNewCfgRedirGroup, slbStatVServerHCOctetsHigh32=slbStatVServerHCOctetsHigh32, agCurCfgSyslogHost=agCurCfgSyslogHost, slbStatGroupHCOctets=slbStatGroupHCOctets, trunkGroupNewCfgPorts=trunkGroupNewCfgPorts, agCurCfgBootp=agCurCfgBootp, slbStats=slbStats, gslbCurCfgNetworkSourceIp=gslbCurCfgNetworkSourceIp, vrrpCurCfgVirtRtrTckVlanPort=vrrpCurCfgVirtRtrTckVlanPort, urlStatRedCookie=urlStatRedCookie, slbCurCfgUrlExpression=slbCurCfgUrlExpression, ripNewCfgStaticSupply=ripNewCfgStaticSupply, ipFwdCurCfgLocalMask=ipFwdCurCfgLocalMask, bwmStatSpTcBufferUsed=bwmStatSpTcBufferUsed, gslbNewCfgGenOne=gslbNewCfgGenOne, fltNewCfgBwmContract=fltNewCfgBwmContract, bwmCurCfgContractTable=bwmCurCfgContractTable, bwmStatTcrRate=bwmStatTcrRate, slbCurCfgPortSlbPipState=slbCurCfgPortSlbPipState, slbNewCfgPeerState=slbNewCfgPeerState, fltNewCfgAclIpTos=fltNewCfgAclIpTos, portInfoTable=portInfoTable, bwmStatSpTcTable=bwmStatSpTcTable, bwmCurCfgContractUseTos=bwmCurCfgContractUseTos, gslbNewCfgGenLookupPort=gslbNewCfgGenLookupPort, vrrpNewCfgGenTckIpIntfInc=vrrpNewCfgGenTckIpIntfInc, stats=stats, ripCurCfgState=ripCurCfgState, slbStatVServerCurrSessions=slbStatVServerCurrSessions, radNewCfgRetries=radNewCfgRetries, ripNewCfgSupply=ripNewCfgSupply, fltCurCfgInvert=fltCurCfgInvert, slbStatRServerHighestSessions=slbStatRServerHighestSessions, radCurCfgSecondaryIpAddr=radCurCfgSecondaryIpAddr, slbNewCfgImask=slbNewCfgImask, fltNewCfgSrcIp=fltNewCfgSrcIp, slbStatGroupTable=slbStatGroupTable, slbRealServerInfoIpAddr=slbRealServerInfoIpAddr, ipCurCfgGwTable=ipCurCfgGwTable, ipNewCfgIntfIndex=ipNewCfgIntfIndex, slbNewCfgUrlLbPathString=slbNewCfgUrlLbPathString, gslbNewCfgGenDnsLocalPref=gslbNewCfgGenDnsLocalPref, ipFwdCurCfgPortTable=ipFwdCurCfgPortTable, slbCurCfgDirectMode=slbCurCfgDirectMode, ipRouteInfoGateway=ipRouteInfoGateway, vrrp_info=vrrp_info, slbFailOverInfoTable=slbFailOverInfoTable, agPortNewCfgFastEthSpeed=agPortNewCfgFastEthSpeed, slbNewCfgUrlRedirNoCacheOrigSrv=slbNewCfgUrlRedirNoCacheOrigSrv, vrrpStats=vrrpStats, slbCurCfgFailOverPrimaryIp=slbCurCfgFailOverPrimaryIp, ipFwdNewCfgLocalSubnet=ipFwdNewCfgLocalSubnet, ipCurCfgIntfBroadcast=ipCurCfgIntfBroadcast, slbNewCfgGroupRemoveServer=slbNewCfgGroupRemoveServer, gslbNewCfgGenHttpRedirect=gslbNewCfgGenHttpRedirect, pmNewCfgState=pmNewCfgState, slbStatVServerHighestSessions=slbStatVServerHighestSessions, fltNewCfgSrcIpMask=fltNewCfgSrcIpMask, gslbStatRemRealServerTable=gslbStatRemRealServerTable, slbStatVServerHeaderMisses=slbStatVServerHeaderMisses, slbCurCfgGroupBackupGroup=slbCurCfgGroupBackupGroup, slbGroupTableMaxSize=slbGroupTableMaxSize, vrrpCurCfgIfAuthType=vrrpCurCfgIfAuthType, slbCurCfgPeerTable=slbCurCfgPeerTable, fltCurCfgAclTcpFin=fltCurCfgAclTcpFin, vrrpCurCfgVirtRtrGrpPreempt=vrrpCurCfgVirtRtrGrpPreempt, portInfoSpeed=portInfoSpeed, vrrpNewCfgVirtRtrGrpPriority=vrrpNewCfgVirtRtrGrpPriority, agCurCfgSyslog2Fac=agCurCfgSyslog2Fac, slbCurCfgUrlRedirNonGetOrigSrv=slbCurCfgUrlRedirNonGetOrigSrv, slbFailOverInfoEntry=slbFailOverInfoEntry, slbCurCfgGlobalControl=slbCurCfgGlobalControl, bwmCurCfgGenState=bwmCurCfgGenState, routeStats=routeStats, agTftpDownload=agTftpDownload, gslbCurCfgGenDnsHandoff=gslbCurCfgGenDnsHandoff, ipNewCfgStaticRouteTable=ipNewCfgStaticRouteTable, agPortNewCfgBackLink=agPortNewCfgBackLink, ipFwdCurCfgPortIndex=ipFwdCurCfgPortIndex, slbCurCfgVirtServerFtpParsing=slbCurCfgVirtServerFtpParsing, slbCurCfgUrlLbErrorMsg=slbCurCfgUrlLbErrorMsg, vlanNewCfgState=vlanNewCfgState, slbCurCfgVirtMatrixArch=slbCurCfgVirtMatrixArch, fltCurCfgTableEntry=fltCurCfgTableEntry, ipNewCfgIntfState=ipNewCfgIntfState, gslbRemSiteTableMaxSize=gslbRemSiteTableMaxSize, vrrpCurCfgVirtRtrTckRServer=vrrpCurCfgVirtRtrTckRServer, slbNewCfgGroupBackupServer=slbNewCfgGroupBackupServer, agNewCfgSyslogFac=agNewCfgSyslogFac, vrrpNewCfgVirtRtrGrpTckHsrp=vrrpNewCfgVirtRtrGrpTckHsrp, slbStatRServerFailures=slbStatRServerFailures, routeStatMaxEntries=routeStatMaxEntries, port_info=port_info, hwRedundantPSStatus=hwRedundantPSStatus, slbFailOverInfoSecondaryStatus=slbFailOverInfoSecondaryStatus, arpInfoTable=arpInfoTable, ripConfig=ripConfig, slbStatPortMaintCurBindings=slbStatPortMaintCurBindings, ripCurCfgPoisonReverse=ripCurCfgPoisonReverse, slbStatPortMaintTable=slbStatPortMaintTable, urlStatRedNonGets=urlStatRedNonGets, fltNewCfgPortAddFiltRule=fltNewCfgPortAddFiltRule, gslbNewCfgGenState=gslbNewCfgGenState, slbStatVServerIndex=slbStatVServerIndex, gslbNewCfgNetworkNetMask=gslbNewCfgNetworkNetMask, slbRealServerInfoTable=slbRealServerInfoTable, ipNewCfgIntfEntry=ipNewCfgIntfEntry, slbCurCfgVirtServiceDirServerRtn=slbCurCfgVirtServiceDirServerRtn, agPortCurCfgBwmContract=agPortCurCfgBwmContract, slbCurCfgMnet=slbCurCfgMnet, gslbNewCfgGenMinco=gslbNewCfgGenMinco, fltCurCfgRangeHighDstPort=fltCurCfgRangeHighDstPort, vrrpNewCfgVirtRtrInterval=vrrpNewCfgVirtRtrInterval, ipRouteInfoIndx=ipRouteInfoIndx, slbNewCfgRealServerExcludeStr=slbNewCfgRealServerExcludeStr, slbCurCfgPortEntry=slbCurCfgPortEntry, agTftpServer=agTftpServer, slbNewCfgGroupName=slbNewCfgGroupName, bwmContractConfig=bwmContractConfig, slbStatRServerHCOctetsLow32=slbStatRServerHCOctetsLow32, fltCurCfgUrlRedir=fltCurCfgUrlRedir, fltNewCfgAclTcpRst=fltNewCfgAclTcpRst, ipNewCfgStaticRouteIndx=ipNewCfgStaticRouteIndx, vlanNewCfgRemovePort=vlanNewCfgRemovePort, slbStatPortRealServerCurrSessions=slbStatPortRealServerCurrSessions, vlanCurCfgState=vlanCurCfgState, trunkGroupNewCfgRemovePort=trunkGroupNewCfgRemovePort, fltCurCfgAclTcpUrg=fltCurCfgAclTcpUrg, vrrpNewCfgGenTckHsrpInc=vrrpNewCfgGenTckHsrpInc, urlSlbStats=urlSlbStats, bwmStatTcOutdisoct=bwmStatTcOutdisoct, bwmStatSpTcrEntry=bwmStatSpTcrEntry, vrrpNewCfgVirtRtrGrpSharing=vrrpNewCfgVirtRtrGrpSharing, arpStats=arpStats, ipFwdNewCfgDirectedBcast=ipFwdNewCfgDirectedBcast, vrrpNewCfgVirtRtrGrpTckVlanPort=vrrpNewCfgVirtRtrGrpTckVlanPort, vrrp=vrrp, vrrpCurCfgVirtRtrGrpTckL4Port=vrrpCurCfgVirtRtrGrpTckL4Port, slbCurCfgFailOverTblEntry=slbCurCfgFailOverTblEntry, slbStatGroupCurrSessions=slbStatGroupCurrSessions, slbNewCfgVirtServicePBind=slbNewCfgVirtServicePBind)
mibBuilder.exportSymbols("ALTEON-PRIVATE-MIBS", hwSensor4Temp=hwSensor4Temp, slbCurCfgRealServerCookie=slbCurCfgRealServerCookie, slbNewCfgPmask=slbNewCfgPmask, gslbNewCfgGenGeo=gslbNewCfgGenGeo, bwmNewCfgContractPrec=bwmNewCfgContractPrec, agCurCfgSmtpHost=agCurCfgSmtpHost, agPortNewCfgVlanTag=agPortNewCfgVlanTag, tcpStats=tcpStats, agRtcTime=agRtcTime, slbNewCfgVirtServerIpAddress=slbNewCfgVirtServerIpAddress, bwmNewCfgGenSmtpUser=bwmNewCfgGenSmtpUser, slbNewCfgVirtServerLayer3Only=slbNewCfgVirtServerLayer3Only, ipCurCfgGwInterval=ipCurCfgGwInterval, vrrpCurCfgGenTckVlanPortInc=vrrpCurCfgGenTckVlanPortInc, slbStatPortRealServerTable=slbStatPortRealServerTable, vlanCurCfgVlanName=vlanCurCfgVlanName, slbNewCfgVirtServerState=slbNewCfgVirtServerState, ripCurCfgListen=ripCurCfgListen, ipRouteInfoEntry=ipRouteInfoEntry, radNewCfgPort=radNewCfgPort, slbStatRServerIndex=slbStatRServerIndex, slbCurCfgVirtServerDname=slbCurCfgVirtServerDname, agPortNewCfgFastEthAutoNeg=agPortNewCfgFastEthAutoNeg, slbNewCfgRealServerRemUrl=slbNewCfgRealServerRemUrl, arpNewCfgReARPPeriod=arpNewCfgReARPPeriod, ipCurCfgGwEntry=ipCurCfgGwEntry, gslbCurCfgNetworkVip1=gslbCurCfgNetworkVip1, vlanNewCfgTableEntry=vlanNewCfgTableEntry, memStatsAllocs=memStatsAllocs, slbCurCfgPeerIndex=slbCurCfgPeerIndex, ripNewCfgUpdatePeriod=ripNewCfgUpdatePeriod, ipNewCfgStaticRouteDestIp=ipNewCfgStaticRouteDestIp, fltNewCfgRedirPort=fltNewCfgRedirPort, slb_info=slb_info, gslbNewCfgNetworkDelete=gslbNewCfgNetworkDelete, radNewCfgSecondaryIpAddr=radNewCfgSecondaryIpAddr, agLastSetErrorReason=agLastSetErrorReason, gslbNewCfgRemSiteUpdate=gslbNewCfgRemSiteUpdate, vlanCurCfgPorts=vlanCurCfgPorts, vlanNewCfgDelete=vlanNewCfgDelete, slbNewCfgPortSlbPipState=slbNewCfgPortSlbPipState, slbCurCfgVirtServerClength=slbCurCfgVirtServerClength, fltNewCfgDelete=fltNewCfgDelete, gslbGeneral=gslbGeneral, ipCurCfgStaticRouteInterface=ipCurCfgStaticRouteInterface, slbCurCfgVirtServerIndex=slbCurCfgVirtServerIndex, vrrpNewCfgVirtRtrTckVlanPort=vrrpNewCfgVirtRtrTckVlanPort, slbNewCfgVirtServicesEntry=slbNewCfgVirtServicesEntry, slbNewCfgUrlLbPathTableEntry=slbNewCfgUrlLbPathTableEntry, fltNewCfgFwlb=fltNewCfgFwlb, slbCurCfgGroupMetric=slbCurCfgGroupMetric, arpInfoDestIp=arpInfoDestIp, fltNewCfgAclIcmp=fltNewCfgAclIcmp, slbNewCfgUrlLbPathIndex=slbNewCfgUrlLbPathIndex, gslbCurCfgGenDnsTTL=gslbCurCfgGenDnsTTL, vrrpNewCfgVirtRtrAddr=vrrpNewCfgVirtRtrAddr, slbCurCfgUrlRedirCookieOrigSrv=slbCurCfgUrlRedirCookieOrigSrv, urlStats=urlStats, slbCurCfgRealServerUrlBmap=slbCurCfgRealServerUrlBmap, vrrpNewCfgVirtRtrGrpTckVirtRtr=vrrpNewCfgVirtRtrGrpTckVirtRtr, pktStatsSmalls=pktStatsSmalls, slbNewCfgVirtServiceHname=slbNewCfgVirtServiceHname, vrrpCurCfgVirtRtrTableEntry=vrrpCurCfgVirtRtrTableEntry, pktStatsAllocs=pktStatsAllocs, radNewCfgAuthenString=radNewCfgAuthenString, fltCurCfgDstIp=fltCurCfgDstIp, fltCurCfgAclIpTosMask=fltCurCfgAclIpTosMask, ipNewCfgStaticRouteInterface=ipNewCfgStaticRouteInterface, ipRouteInfoTag=ipRouteInfoTag, slbNewCfgUrlRedirHeaderName=slbNewCfgUrlRedirHeaderName, bwmNewCfgContractTableEntry=bwmNewCfgContractTableEntry, slbCurCfgRealServerName=slbCurCfgRealServerName, slbNewCfgUrlRedirCookieOrigSrv=slbNewCfgUrlRedirCookieOrigSrv, slbNewCfgVirtServiceIndex=slbNewCfgVirtServiceIndex, slbNewCfgUrlExpTable=slbNewCfgUrlExpTable, vrrpNewCfgIfTable=vrrpNewCfgIfTable, slbRealServerInfoSwitchPort=slbRealServerInfoSwitchPort, gslbNetwork=gslbNetwork, vrrpCurCfgVirtRtrState=vrrpCurCfgVirtRtrState, slbCurCfgRealServerTimeOut=slbCurCfgRealServerTimeOut, slbCurCfgVirtualServerEntry=slbCurCfgVirtualServerEntry, ipNewCfgGwAddr=ipNewCfgGwAddr, ipCurCfgStaticRouteIndx=ipCurCfgStaticRouteIndx, slbfailover=slbfailover, fltNewCfgTcpAck=fltNewCfgTcpAck, bwmCurCfgPolicyBuffer=bwmCurCfgPolicyBuffer, ipForward=ipForward, vlanCurCfgBwmContract=vlanCurCfgBwmContract, slbCurCfgVirtServerState=slbCurCfgVirtServerState, agEnabledSwFeatures=agEnabledSwFeatures, agPortCurCfgPVID=agPortCurCfgPVID, gslbCurCfgGenLookups=gslbCurCfgGenLookups, fltNewCfgSrcMac=fltNewCfgSrcMac, bwmCurCfgPolicyTosIn=bwmCurCfgPolicyTosIn, vrrpCurCfgVirtRtrTckHsrp=vrrpCurCfgVirtRtrTckHsrp, agPortNewCfgDiscardNonIPs=agPortNewCfgDiscardNonIPs, arpInfoMacAddr=arpInfoMacAddr, ipNewCfgStaticRouteMask=ipNewCfgStaticRouteMask, ipNewCfgIntfAddr=ipNewCfgIntfAddr, slbNewCfgGroupRealThreshold=slbNewCfgGroupRealThreshold, agPortNewCfgState=agPortNewCfgState, gslbCurCfgNetworkIndx=gslbCurCfgNetworkIndx, urlStatSlbPathHits=urlStatSlbPathHits, slbFailOverInfoSecondaryState=slbFailOverInfoSecondaryState, ripNewCfgPoisonReverse=ripNewCfgPoisonReverse, slbFailOverInfoPrimaryState=slbFailOverInfoPrimaryState, dnsCurCfgSecondaryIpAddr=dnsCurCfgSecondaryIpAddr, radCurCfgAuthenString=radCurCfgAuthenString, fltCurCfgBwmContract=fltCurCfgBwmContract, gslbStatRemRealServerIndex=gslbStatRemRealServerIndex, bwmStatTcrName=bwmStatTcrName, slbCurCfgUrlRedirHeaderName=slbCurCfgUrlRedirHeaderName, fltCurCfgState=fltCurCfgState, fltNewCfgPortTableEntry=fltNewCfgPortTableEntry, memStatsPoolBytes=memStatsPoolBytes, memStatsBytesCurr=memStatsBytesCurr, ipNewCfgGwRetry=ipNewCfgGwRetry, fltCfgTableMaxSize=fltCfgTableMaxSize, bwmNewCfgGenState=bwmNewCfgGenState, slbNewCfgUrlExpIndex=slbNewCfgUrlExpIndex, ipFwdCurCfgPortState=ipFwdCurCfgPortState, slbNewCfgRealServerWeight=slbNewCfgRealServerWeight, slbStatGroupHCOctetsHigh32=slbStatGroupHCOctetsHigh32, slbCurCfgUrlRedirUriHashLength=slbCurCfgUrlRedirUriHashLength, bwmCurCfgGenEnforcePolicy=bwmCurCfgGenEnforcePolicy, gslbCurCfgGenExternal=gslbCurCfgGenExternal, ripNewCfgState=ripNewCfgState, gslbStatMaintInBadSiteUpdates=gslbStatMaintInBadSiteUpdates, vlans=vlans, bwmNewCfgPolicySoft=bwmNewCfgPolicySoft, agCurCfgSpanningTree=agCurCfgSpanningTree, agTftpLastActionStatus=agTftpLastActionStatus, vlanCurCfgTableEntry=vlanCurCfgTableEntry, vrrpCurCfgGenState=vrrpCurCfgGenState, trunkGroupTableMaxSize=trunkGroupTableMaxSize, gslbNewCfgNetworkTable=gslbNewCfgNetworkTable, bwmStatTcrOutoct=bwmStatTcrOutoct, agApplyPending=agApplyPending, vlanNewCfgPorts=vlanNewCfgPorts, slbCurCfgUrlExpTableEntry=slbCurCfgUrlExpTableEntry, slbNewCfgRealServerUrlBmap=slbNewCfgRealServerUrlBmap, vrrpNewCfgVirtRtrPriority=vrrpNewCfgVirtRtrPriority, arpInfoSrcPort=arpInfoSrcPort, agCurCfgSyslog2Host=agCurCfgSyslog2Host, vrrpNewCfgGenState=vrrpNewCfgGenState, fltNewCfgAclTcpAck=fltNewCfgAclTcpAck, bwmNewCfgContractDelete=bwmNewCfgContractDelete, bwmCurCfgPolicyIndx=bwmCurCfgPolicyIndx, radCurCfgRetries=radCurCfgRetries, slbNewCfgGlobalControl=slbNewCfgGlobalControl, ripCurCfgUpdatePeriod=ripCurCfgUpdatePeriod, fltCurCfgRedirPort=fltCurCfgRedirPort, fltNewCfgAclTcpSyn=fltNewCfgAclTcpSyn, ipCurCfgGwArp=ipCurCfgGwArp, serverloadbalance=serverloadbalance, slbStatPortMaintBindingFails=slbStatPortMaintBindingFails, slbNewCfgVirtServiceHttpSlb=slbNewCfgVirtServiceHttpSlb, agTftpCfgFileName=agTftpCfgFileName, fltNewCfgAclTcpPsh=fltNewCfgAclTcpPsh, portInfoIndx=portInfoIndx, bwmCurCfgContractTableEntry=bwmCurCfgContractTableEntry, fltNewCfgAction=fltNewCfgAction, ipCurCfgIntfEntry=ipCurCfgIntfEntry, arpInfoRefPorts=arpInfoRefPorts, slbNewCfgDirectMode=slbNewCfgDirectMode, slbCurCfgGroupRealThreshold=slbCurCfgGroupRealThreshold, filterStats=filterStats, dynSLBRealServerIpAddr=dynSLBRealServerIpAddr, slbRealServerMacAddr=slbRealServerMacAddr, vrrpCurCfgVirtRtrGrpIfIndex=vrrpCurCfgVirtRtrGrpIfIndex, iprouting=iprouting, slbStatVServerHCOctetsLow32=slbStatVServerHCOctetsLow32, filtering=filtering, slbCurCfgVirtServiceHttpSlb=slbCurCfgVirtServiceHttpSlb, ipFwdCurCfgDirectedBcast=ipFwdCurCfgDirectedBcast, slbStatPortRealServerServerIndex=slbStatPortRealServerServerIndex, gslbStatRemRealServerDnsHandoffs=gslbStatRemRealServerDnsHandoffs, slbStatVServerEntry=slbStatVServerEntry, slbCurCfgUrlExpIndex=slbCurCfgUrlExpIndex, slbRealServerInfoOverflow=slbRealServerInfoOverflow, bwmNewCfgPolicyIndx=bwmNewCfgPolicyIndx, ipNewCfgGwDelete=ipNewCfgGwDelete, vrrpCurCfgVirtRtrID=vrrpCurCfgVirtRtrID, fltCurCfgTcpAck=fltCurCfgTcpAck, slbNewCfgUrlRedirNonGetOrigSrv=slbNewCfgUrlRedirNonGetOrigSrv, pmCurCfgState=pmCurCfgState, agGeneralConfig=agGeneralConfig, agImageForNxtReset=agImageForNxtReset, vrrpNewCfgGenHotstandby=vrrpNewCfgGenHotstandby, radCurCfgTimeout=radCurCfgTimeout, tcpStatCurConns=tcpStatCurConns, gslbSites=gslbSites, slbNewCfgGroupIndex=slbNewCfgGroupIndex, fltNewCfgRangeHighSrcPort=fltNewCfgRangeHighSrcPort, portmirroring=portmirroring, gslbNewCfgGenUsern=gslbNewCfgGenUsern, slbCurCfgVirtServerBwmContract=slbCurCfgVirtServerBwmContract, gslbNewCfgGenExternal=gslbNewCfgGenExternal, bwmStatTcrBufferUsed=bwmStatTcrBufferUsed, vrrpCurCfgVirtRtrGrpTckRServer=vrrpCurCfgVirtRtrGrpTckRServer, vrrpNewCfgVirtRtrGrpDelete=vrrpNewCfgVirtRtrGrpDelete, slbNewCfgRealServerState=slbNewCfgRealServerState, agNewCfgHttpServerPort=agNewCfgHttpServerPort, slbNewCfgVirtServiceUDPBalance=slbNewCfgVirtServiceUDPBalance, slbNewCfgUrlRedirUriHashLength=slbNewCfgUrlRedirUriHashLength, vrrpCurCfgVirtRtrGrpTckVlanPort=vrrpCurCfgVirtRtrGrpTckVlanPort, slbStatGroupHighestSessions=slbStatGroupHighestSessions, bwmStatTcEntry=bwmStatTcEntry, slbNewCfgRadiusAuthenString=slbNewCfgRadiusAuthenString, agImage1Ver=agImage1Ver, agTftpImageFileName=agTftpImageFileName, agPortCurCfgDiscardNonIPs=agPortCurCfgDiscardNonIPs, slbCurCfgGroupName=slbCurCfgGroupName, slbNewCfgVirtServerCoffset=slbNewCfgVirtServerCoffset, slbNewCfgFailOverState=slbNewCfgFailOverState, pmCurCfgMonitoredTraffic=pmCurCfgMonitoredTraffic, portInfoFlowCtrl=portInfoFlowCtrl, fltNewCfgRangeLowDstPort=fltNewCfgRangeLowDstPort, ipNewCfgStaticRouteGateway=ipNewCfgStaticRouteGateway, fltNewCfgPortRemFiltRule=fltNewCfgPortRemFiltRule, slbStatPortRealServerHCOctetsHigh32=slbStatPortRealServerHCOctetsHigh32, urlStatSlbPathTableEntry=urlStatSlbPathTableEntry, slbUrlRedir=slbUrlRedir, fltNewCfgRangeLowSrcPort=fltNewCfgRangeLowSrcPort, vrrpNewCfgVirtRtrIndx=vrrpNewCfgVirtRtrIndx, agNewCfgBootp=agNewCfgBootp, slbCurCfgRealServerFailRetry=slbCurCfgRealServerFailRetry, pktStatsAllocFails=pktStatsAllocFails, ipRouteInfoMask=ipRouteInfoMask, slbCurCfgFailOverIndex=slbCurCfgFailOverIndex, fltNewCfgAclIpTosNew=fltNewCfgAclIpTosNew, agPortCurCfgBackLink=agPortCurCfgBackLink, gslbCurCfgGenDnsLocalPref=gslbCurCfgGenDnsLocalPref, vrrpNewCfgIfPasswd=vrrpNewCfgIfPasswd, slbNewCfgRealServerType=slbNewCfgRealServerType, slbStatPortRealServerHCOctets=slbStatPortRealServerHCOctets, vrrpNewCfgVirtRtrGrpTckIpIntf=vrrpNewCfgVirtRtrGrpTckIpIntf, slbCurCfgPeerState=slbCurCfgPeerState, bwmNewCfgPolicyBuffer=bwmNewCfgPolicyBuffer, slbNewCfgRealServerTimeOut=slbNewCfgRealServerTimeOut, ipCurCfgGwRetry=ipCurCfgGwRetry, slbNewCfgGroupTable=slbNewCfgGroupTable, ipCurCfgIntfTable=ipCurCfgIntfTable, ip_info=ip_info, bwmStatSpTcrOutoct=bwmStatSpTcrOutoct, slbNewCfgVirtServiceDelete=slbNewCfgVirtServiceDelete, arpStatHighWater=arpStatHighWater, ripNewCfgListen=ripNewCfgListen, vlanCurCfgVlanId=vlanCurCfgVlanId, slbCurCfgPortSlbHotStandby=slbCurCfgPortSlbHotStandby, vlanCurCfgJumbo=vlanCurCfgJumbo, agPortNewCfgGigEthFctl=agPortNewCfgGigEthFctl, slbCurCfgUrlLbPathTable=slbCurCfgUrlLbPathTable, slbNewCfgUrlExpTableEntry=slbNewCfgUrlExpTableEntry)
mibBuilder.exportSymbols("ALTEON-PRIVATE-MIBS", hardware=hardware, slbStatRServerTotalSessions=slbStatRServerTotalSessions, vrrpNewCfgVirtRtrTckRServer=vrrpNewCfgVirtRtrTckRServer, slbCurCfgUrlLbPathTableEntry=slbCurCfgUrlLbPathTableEntry, slbCurCfgPortIndex=slbCurCfgPortIndex, vrrpStatOutAdvers=vrrpStatOutAdvers, bwmCurCfgPolicySoft=bwmCurCfgPolicySoft, slbUrlBalance=slbUrlBalance, memStats=memStats, ipCurCfgIntfMask=ipCurCfgIntfMask, gslbCurCfgRemSiteIndx=gslbCurCfgRemSiteIndx, slbNewCfgSyncVrrp=slbNewCfgSyncVrrp, slbNewCfgPeerIndex=slbNewCfgPeerIndex, ipGatewayTableMax=ipGatewayTableMax, fltCurCfgSrcIpMask=fltCurCfgSrcIpMask, agReset=agReset, agPortNewCfgTableEntry=agPortNewCfgTableEntry, fltNewCfgAclTcpUrg=fltNewCfgAclTcpUrg, bwmStatSpTcEntry=bwmStatSpTcEntry, dnsNewCfgDomainName=dnsNewCfgDomainName, bwmCurCfgPolicyTable=bwmCurCfgPolicyTable, gslbNewCfgGenDnsTTL=gslbNewCfgGenDnsTTL, ipCurCfgIntfState=ipCurCfgIntfState, ripNewCfgDefListen=ripNewCfgDefListen, bwmStatSpTcrContractIndex=bwmStatSpTcrContractIndex, slbNewCfgRealServerEntry=slbNewCfgRealServerEntry, fltCurCfgSrcMac=fltCurCfgSrcMac, ipNewCfgIntfBroadcast=ipNewCfgIntfBroadcast, fltCurCfgRedirGroup=fltCurCfgRedirGroup, bwmPolicyTableMaxEnt=bwmPolicyTableMaxEnt, ipNewCfgGwState=ipNewCfgGwState, slbRealServerInfoState=slbRealServerInfoState, fltCurCfgTable=fltCurCfgTable, agent=agent, slbStatRServerHCOctets=slbStatRServerHCOctets, fltCurCfgAclIcmp=fltCurCfgAclIcmp, slbNewCfgPortProxyIpAddr=slbNewCfgPortProxyIpAddr, slbCurCfgRealServerType=slbCurCfgRealServerType, slbCurCfgVirtServiceHname=slbCurCfgVirtServiceHname, ipFwdNewCfgPortTable=ipFwdNewCfgPortTable, slbCurCfgVirtServiceUDPBalance=slbCurCfgVirtServiceUDPBalance, fltCurCfgPortIndx=fltCurCfgPortIndx, vrrpCurCfgVirtRtrTable=vrrpCurCfgVirtRtrTable, ftpSlbStats=ftpSlbStats, bwmNewCfgPolicyHard=bwmNewCfgPolicyHard, agPortCurCfgState=agPortCurCfgState, hwRevision=hwRevision, slbCurCfgGroupHealthCheckLayer=slbCurCfgGroupHealthCheckLayer, gslbDNS=gslbDNS, agCurCfgTrapHostIpAddr=agCurCfgTrapHostIpAddr, ipNewCfgIntfTable=ipNewCfgIntfTable, ipFwdCurCfgPortEntry=ipFwdCurCfgPortEntry, gslbNewCfgRemSiteTableEntry=gslbNewCfgRemSiteTableEntry, bwmStatTcOutoct=bwmStatTcOutoct, slbCurCfgRealServerState=slbCurCfgRealServerState, slbNewCfgFailOverTable=slbNewCfgFailOverTable, slbCurCfgRealServerMaxConns=slbCurCfgRealServerMaxConns, agPortCurCfgVlanTag=agPortCurCfgVlanTag, fltCurCfgPortFiltBmap=fltCurCfgPortFiltBmap, vrrpNewCfgGenTckVirtRtrInc=vrrpNewCfgGenTckVirtRtrInc, slbStatPortMaintUdpDatagrams=slbStatPortMaintUdpDatagrams, slbNewCfgRealServerMaxConns=slbNewCfgRealServerMaxConns, fltCurCfgNat=fltCurCfgNat, slbNewCfgRealServerPingInterval=slbNewCfgRealServerPingInterval, gslbNewCfgRemSitePrimaryIp=gslbNewCfgRemSitePrimaryIp, bwmNewCfgGenEnforcePolicy=bwmNewCfgGenEnforcePolicy, slbCurCfgGrace=slbCurCfgGrace, vrrpInfoVirtRtrTable=vrrpInfoVirtRtrTable, ipCurCfgStaticRouteEntry=ipCurCfgStaticRouteEntry, slbNewCfgGroupMetric=slbNewCfgGroupMetric, vrrpNewCfgVirtRtrTable=vrrpNewCfgVirtRtrTable, slbNewCfgVirtServerCname=slbNewCfgVirtServerCname, agTftpDumpFileName=agTftpDumpFileName, vrrpNewCfgVirtRtrTckHsrp=vrrpNewCfgVirtRtrTckHsrp, ipFwdCurCfgState=ipFwdCurCfgState, slbFailOverInfoIndex=slbFailOverInfoIndex, fltCurCfgProtocol=fltCurCfgProtocol, ftpSlbStatTotal=ftpSlbStatTotal, radNewCfgState=radNewCfgState, agPortCurCfgGigEthFctl=agPortCurCfgGigEthFctl, fltNewCfgUrlRedir=fltNewCfgUrlRedir, ipNewCfgIntfVlan=ipNewCfgIntfVlan, fltNewCfgAclIpTosMask=fltNewCfgAclIpTosMask, vrrpNewCfgVirtRtrGrpTable=vrrpNewCfgVirtRtrGrpTable, portInfoMode=portInfoMode, operCmds=operCmds, pmNewCfgMonitoredTraffic=pmNewCfgMonitoredTraffic, vrrpNewCfgVirtRtrPreempt=vrrpNewCfgVirtRtrPreempt, slbNewCfgRealServerTable=slbNewCfgRealServerTable, slbRealServerInfoEntry=slbRealServerInfoEntry, vrrpNewCfgIfTableEntry=vrrpNewCfgIfTableEntry, agPortCurCfgStp=agPortCurCfgStp, slbCurCfgVirtServicesTable=slbCurCfgVirtServicesTable, agBootVer=agBootVer, vrrpCurCfgGenHotstandby=vrrpCurCfgGenHotstandby, fltNewCfgDstMac=fltNewCfgDstMac, slbCurCfgGroupBackupServer=slbCurCfgGroupBackupServer, slbCurCfgImask=slbCurCfgImask, fltCurCfgRangeLowDstPort=fltCurCfgRangeLowDstPort, fltCurCfgRangeLowSrcPort=fltCurCfgRangeLowSrcPort, slbNewCfgPortSlbState=slbNewCfgPortSlbState, trunkGroupCurCfgBwmContract=trunkGroupCurCfgBwmContract, vrrpNewCfgGenTckRServerInc=vrrpNewCfgGenTckRServerInc, slbCurCfgVirtServerTable=slbCurCfgVirtServerTable, trunkGroupNewCfgDelete=trunkGroupNewCfgDelete, vrrpCurCfgGenTckIpIntfInc=vrrpCurCfgGenTckIpIntfInc, ipNewCfgIntfMask=ipNewCfgIntfMask, agNewCfgSyslog2Fac=agNewCfgSyslog2Fac, vrrpNewCfgVirtRtrID=vrrpNewCfgVirtRtrID, slbCurCfgPeerIpAddr=slbCurCfgPeerIpAddr, radCurCfgPrimaryIpAddr=radCurCfgPrimaryIpAddr, ripStatOutPkts=ripStatOutPkts, slbCurCfgUrlExpTable=slbCurCfgUrlExpTable, gslbNewCfgGenDnsHandoff=gslbNewCfgGenDnsHandoff, slbNewCfgVirtServerHttpHdrName=slbNewCfgVirtServerHttpHdrName, slbCurCfgVirtServicePBind=slbCurCfgVirtServicePBind, memStatsFrees=memStatsFrees, slbCurCfgRealServerIpAddr=slbCurCfgRealServerIpAddr, slbNewCfgRealServerFailRetry=slbNewCfgRealServerFailRetry, gslbStats=gslbStats, vrrpNewCfgVirtRtrGrpTableEntry=vrrpNewCfgVirtRtrGrpTableEntry, slbNewCfgGroupBackupGroup=slbNewCfgGroupBackupGroup, agCurCfgSyslogFac=agCurCfgSyslogFac, agPortNewCfgPortName=agPortNewCfgPortName, slbCurCfgFailOverSilenceInterval=slbCurCfgFailOverSilenceInterval, vrrpCurCfgVirtRtrGrpState=vrrpCurCfgVirtRtrGrpState, agPortCurCfgFastEthSpeed=agPortCurCfgFastEthSpeed, slbCurCfgPortTable=slbCurCfgPortTable, bwmNewCfgPolicyResv=bwmNewCfgPolicyResv, fltCurCfgPortState=fltCurCfgPortState, agPortCurCfgFastEthFctl=agPortCurCfgFastEthFctl, slbCurCfgRealServerSubmac=slbCurCfgRealServerSubmac, slbNewCfgPortSlbInterSwitch=slbNewCfgPortSlbInterSwitch, memStatsAllocFails=memStatsAllocFails, fltNewCfgLog=fltNewCfgLog, slbStatPortRealServerTotalSessions=slbStatPortRealServerTotalSessions, ipRouteInfoTable=ipRouteInfoTable, memStatsBytesHiwat=memStatsBytesHiwat, slbCurCfgVirtServiceRealGroup=slbCurCfgVirtServiceRealGroup, bwmStatTcrEntry=bwmStatTcrEntry, agPortNewCfgFastEthMode=agPortNewCfgFastEthMode, slbCurCfgGroupEntry=slbCurCfgGroupEntry, portInfoTableEntry=portInfoTableEntry, gslbCurCfgGenMinco=gslbCurCfgGenMinco, gslbMaintStats=gslbMaintStats, bwmStatTcrContractIndex=bwmStatTcrContractIndex, fltCurCfgAction=fltCurCfgAction, vrrpCurCfgVirtRtrAddr=vrrpCurCfgVirtRtrAddr, bwmStatTcrTable=bwmStatTcrTable, fltNewCfgTable=fltNewCfgTable, slbRealServerInfoIndex=slbRealServerInfoIndex, bwmStatSpTcContractIndex=bwmStatSpTcContractIndex, fltStatFltIndex=fltStatFltIndex, slbNewCfgRealServerAddUrl=slbNewCfgRealServerAddUrl, slbCurCfgPeerEntry=slbCurCfgPeerEntry, bwmStatSpTcrBufferMax=bwmStatSpTcrBufferMax, slbNewCfgVirtServerIndex=slbNewCfgVirtServerIndex, pmNewCfgMonitoringPort=pmNewCfgMonitoringPort, vrrpNewCfgVirtRtrIfIndex=vrrpNewCfgVirtRtrIfIndex, gslbStatRemRealServerEntry=gslbStatRemRealServerEntry, bwmPolicyConfig=bwmPolicyConfig, slbNewCfgVirtServerUriCookie=slbNewCfgVirtServerUriCookie, agTftpAction=agTftpAction, slbNewCfgFailOverSecondaryIp=slbNewCfgFailOverSecondaryIp, slbCurCfgUrlLbPathIndex=slbCurCfgUrlLbPathIndex, slbCurCfgVirtServerUriCookie=slbCurCfgVirtServerUriCookie, trunkgroup=trunkgroup, ipFwdNewCfgPortIndex=ipFwdNewCfgPortIndex, fltStatTable=fltStatTable, urlStatRedRedirs=urlStatRedRedirs, agTftpImage=agTftpImage, slbCurCfgGroupTable=slbCurCfgGroupTable, slbCurCfgRadiusAuthenString=slbCurCfgRadiusAuthenString, slbCurCfgRealServerPingInterval=slbCurCfgRealServerPingInterval, gslbNewCfgNetworkVip2=gslbNewCfgNetworkVip2, ipCurCfgIntfVlan=ipCurCfgIntfVlan, agPortCurCfgPrefLink=agPortCurCfgPrefLink, ipCurCfgIntfIndex=ipCurCfgIntfIndex, slbStatGroupEntry=slbStatGroupEntry, ipCurCfgStaticRouteTable=ipCurCfgStaticRouteTable, vlanNewCfgJumbo=vlanNewCfgJumbo, slbNewCfgVirtMatrixArch=slbNewCfgVirtMatrixArch, slbNewCfgGroupAddServer=slbNewCfgGroupAddServer, fltNewCfgState=fltNewCfgState, bwmStatSpTcName=bwmStatSpTcName, agPortNewCfgPrefLink=agPortNewCfgPrefLink, ipNewCfgGwIndex=ipNewCfgGwIndex, slbCurCfgRealServerEntry=slbCurCfgRealServerEntry, slbCurCfgPortSlbInterSwitch=slbCurCfgPortSlbInterSwitch, vrrpCurCfgGenTckHsrpInc=vrrpCurCfgGenTckHsrpInc, private_mibs=private_mibs, slbNewCfgPeerTable=slbNewCfgPeerTable, fltCurCfgLog=fltCurCfgLog, gslbNewCfgGenEip=gslbNewCfgGenEip, agCurCfgTrapHostEntry=agCurCfgTrapHostEntry, gslbNewCfgRemSiteState=gslbNewCfgRemSiteState, slbCurCfgGroupHealthCheckUrl=slbCurCfgGroupHealthCheckUrl, slbVirtServerTableMaxSize=slbVirtServerTableMaxSize, ipCurCfgIntfAddr=ipCurCfgIntfAddr, ipInterfaceTableMax=ipInterfaceTableMax, vrrpNewCfgVirtRtrGrpPreempt=vrrpNewCfgVirtRtrGrpPreempt, gslbNewCfgGenLookups=gslbNewCfgGenLookups, vrrpCurCfgVirtRtrGrpTckHsrp=vrrpCurCfgVirtRtrGrpTckHsrp, arpStatMaxEntries=arpStatMaxEntries, trunkGroupCurCfgTable=trunkGroupCurCfgTable, slbCurCfgVirtServerHttpHdrName=slbCurCfgVirtServerHttpHdrName, vrrpCurCfgVirtRtrInterval=vrrpCurCfgVirtRtrInterval, agCurCfgTrapHostIndx=agCurCfgTrapHostIndx, slbCurCfgRealServerBackUp=slbCurCfgRealServerBackUp, vrrpNewCfgVirtRtrTableEntry=vrrpNewCfgVirtRtrTableEntry, pktStatsFrees=pktStatsFrees, slbNewCfgMnet=slbNewCfgMnet, agPortCurCfgIndx=agPortCurCfgIndx, slbNewCfgPortSlbHotStandby=slbNewCfgPortSlbHotStandby, slbNewCfgSyncPip=slbNewCfgSyncPip, slbStatPortMaintFilteredDeniedFrames=slbStatPortMaintFilteredDeniedFrames, arpInfoVLAN=arpInfoVLAN, bwm=bwm, ipNewCfgGwEntry=ipNewCfgGwEntry, slbStatVServerHeaderHits=slbStatVServerHeaderHits, agCurCfgLoginBanner=agCurCfgLoginBanner, slbNewCfgGroupHealthCheckLayer=slbNewCfgGroupHealthCheckLayer, fltCurCfgAclIpTos=fltCurCfgAclIpTos, gslbNewCfgRemSiteIndx=gslbNewCfgRemSiteIndx, agPortNewCfgFastEthFctl=agPortNewCfgFastEthFctl, slbNewCfgVirtServerTable=slbNewCfgVirtServerTable, slbNewCfgPortTable=slbNewCfgPortTable, agRtcDate=agRtcDate, urlStatSlbPathIndex=urlStatSlbPathIndex, slbNewCfgPeerIpAddr=slbNewCfgPeerIpAddr, agPortCurCfgTable=agPortCurCfgTable, slbCurCfgVirtServiceVirtPort=slbCurCfgVirtServiceVirtPort, fltCurCfgAclTcpRst=fltCurCfgAclTcpRst, bwmNewCfgPolicyTosIn=bwmNewCfgPolicyTosIn, bwmNewCfgContractState=bwmNewCfgContractState, gslbNewCfgNetworkVip1=gslbNewCfgNetworkVip1, agNewCfgTrapHostEntry=agNewCfgTrapHostEntry, vrrpNewCfgVirtRtrState=vrrpNewCfgVirtRtrState, pmCurCfgMirroredPort=pmCurCfgMirroredPort, ipFwdNewCfgState=ipFwdNewCfgState, agGeneral=agGeneral, slbCurCfgUrlRedirNoCacheOrigSrv=slbCurCfgUrlRedirNoCacheOrigSrv, vrrpInfoVirtRtrState=vrrpInfoVirtRtrState, slbStatGroupHCOctetsLow32=slbStatGroupHCOctetsLow32, hwSensor2Temp=hwSensor2Temp, operSlbPortEntry=operSlbPortEntry, slbNewCfgMmask=slbNewCfgMmask, radNewCfgTimeout=radNewCfgTimeout, altswitchTraps=altswitchTraps, slbNewCfgUrlLbPathDelete=slbNewCfgUrlLbPathDelete, fltCurCfgPortTableEntry=fltCurCfgPortTableEntry, slbNewCfgRealServerSuccRetry=slbNewCfgRealServerSuccRetry, slbNewCfgUrlLbErrorMsg=slbNewCfgUrlLbErrorMsg, slbCurCfgVirtServerUrlHashLen=slbCurCfgVirtServerUrlHashLen)
mibBuilder.exportSymbols("ALTEON-PRIVATE-MIBS", pmNewCfgMirroredPort=pmNewCfgMirroredPort, vrrpCurCfgVirtRtrTckL4Port=vrrpCurCfgVirtRtrTckL4Port, gslbLookup=gslbLookup, ipCurCfgGwIndex=ipCurCfgGwIndex, slbCurCfgMmask=slbCurCfgMmask, fltCurCfgIndx=fltCurCfgIndx, slbStatPortRealServerHCOctetsLow32=slbStatPortRealServerHCOctetsLow32, vrrpStatOutBadAdvers=vrrpStatOutBadAdvers, bwmCurCfgPolicyTosOut=bwmCurCfgPolicyTosOut, slbNewCfgRealServerSubmac=slbNewCfgRealServerSubmac, hwPartNumber=hwPartNumber, ipCurCfgStaticRouteDestIp=ipCurCfgStaticRouteDestIp, fltNewCfgPortTable=fltNewCfgPortTable, bwmStatSpTcBufferMax=bwmStatSpTcBufferMax, agPortNewCfgRmon=agPortNewCfgRmon, gslbNewCfgRemSiteSecondaryIp=gslbNewCfgRemSiteSecondaryIp, slbNewCfgFailOverPrimaryIp=slbNewCfgFailOverPrimaryIp, slbCurCfgFailOverSecondaryIp=slbCurCfgFailOverSecondaryIp, vlanNewCfgAddPort=vlanNewCfgAddPort, fltCurCfgSrcIp=fltCurCfgSrcIp, agConfigForNxtReset=agConfigForNxtReset, slbNewCfgGroupRealServers=slbNewCfgGroupRealServers, slbCurCfgGroupRealServers=slbCurCfgGroupRealServers, fltCurCfgAclIpTosNew=fltCurCfgAclIpTosNew, agPortCurCfgGigEthAutoNeg=agPortCurCfgGigEthAutoNeg, vrrpNewCfgVirtRtrGrpState=vrrpNewCfgVirtRtrGrpState, slbStatPortMaintRealServerNoAvails=slbStatPortMaintRealServerNoAvails, ipNewCfgIntfDelete=ipNewCfgIntfDelete, hwSensor1Temp=hwSensor1Temp, agPortNewCfgStp=agPortNewCfgStp, vrrpCurCfgVirtRtrIndx=vrrpCurCfgVirtRtrIndx, gslbCurCfgNetworkNetMask=gslbCurCfgNetworkNetMask, vrrpCurCfgVirtRtrGrpInterval=vrrpCurCfgVirtRtrGrpInterval, agNewCfgSyslogHost=agNewCfgSyslogHost, pktStatsMediums=pktStatsMediums, bwmStatTcTable=bwmStatTcTable, fltCurCfgAclIpOption=fltCurCfgAclIpOption, slbStatRServerCurrSessions=slbStatRServerCurrSessions, agApplyConfiguration=agApplyConfiguration, vrrpCurCfgVirtRtrPreempt=vrrpCurCfgVirtRtrPreempt, dnsStatInGoodDnsRequests=dnsStatInGoodDnsRequests, vrrpCurCfgIfPasswd=vrrpCurCfgIfPasswd, fltNewCfgIndx=fltNewCfgIndx, slbNewCfgSyncPort=slbNewCfgSyncPort, agTftpServerIpAddr=agTftpServerIpAddr, vlanNewCfgVlanName=vlanNewCfgVlanName, alteon=alteon, slbNewCfgUrlExpDelete=slbNewCfgUrlExpDelete, agPortTableMaxEnt=agPortTableMaxEnt, slbNewCfgVirtServerFtpParsing=slbNewCfgVirtServerFtpParsing, slbNewCfgGrace=slbNewCfgGrace, gslbCurCfgRemSitePrimaryIp=gslbCurCfgRemSitePrimaryIp, agPortCurCfgPortName=agPortCurCfgPortName, gslbCurCfgGenEip=gslbCurCfgGenEip, vrrpCurCfgVirtRtrGrpIndx=vrrpCurCfgVirtRtrGrpIndx, slbStatMaintOverflowServActs=slbStatMaintOverflowServActs, slbNewCfgVirtServerDelete=slbNewCfgVirtServerDelete, bwmCurCfgContractName=bwmCurCfgContractName, bwmStatTcrOutdisoct=bwmStatTcrOutdisoct, vrrpCurCfgGenTckVirtRtrInc=vrrpCurCfgGenTckVirtRtrInc, globalSLB=globalSLB, fltStatFltFirings=fltStatFltFirings, gslbCurCfgRemSiteState=gslbCurCfgRemSiteState, agPortNewCfgPVID=agPortNewCfgPVID, trunkGroupNewCfgState=trunkGroupNewCfgState, slbStatRServerHCOctetsHigh32=slbStatRServerHCOctetsHigh32, gslbNewCfgGenLookupTimeout=gslbNewCfgGenLookupTimeout, slbFailOverInfoPrimaryIp=slbFailOverInfoPrimaryIp, fltNewCfgTableEntry=fltNewCfgTableEntry, vrrpNewCfgVirtRtrGrpTckL4Port=vrrpNewCfgVirtRtrGrpTckL4Port, slbNewCfgFailOverRouteSupply=slbNewCfgFailOverRouteSupply, dynSLBRealServerEntry=dynSLBRealServerEntry, fltCurCfgCache=fltCurCfgCache, slbNewCfgRealServerIndex=slbNewCfgRealServerIndex, ipRouteInfoType=ipRouteInfoType, agSoftwareVersion=agSoftwareVersion, fltNewCfgInvert=fltNewCfgInvert, bwmNewCfgPolicyTable=bwmNewCfgPolicyTable, arpInfoFlag=arpInfoFlag, vrrpNewCfgIfIndx=vrrpNewCfgIfIndx, slbCurCfgUrlRedirHeader=slbCurCfgUrlRedirHeader, fltNewCfgCache=fltNewCfgCache, slbNewCfgGroupEntry=slbNewCfgGroupEntry, trunkGroupCurCfgTableEntry=trunkGroupCurCfgTableEntry, vrrpCurCfgIfTableEntry=vrrpCurCfgIfTableEntry, bwmStatTcBufferUsed=bwmStatTcBufferUsed, vrrpCurCfgVirtRtrGrpTckIpIntf=vrrpCurCfgVirtRtrGrpTckIpIntf, vrrpCurCfgVirtRtrTckIpIntf=vrrpCurCfgVirtRtrTckIpIntf, ipNewCfgGwTable=ipNewCfgGwTable, agPortCurCfgRmon=agPortCurCfgRmon, ipFwdCurCfgLocalSubnet=ipFwdCurCfgLocalSubnet, bwmStats=bwmStats, information=information, fltCurCfgDstIpMask=fltCurCfgDstIpMask, vrrpGeneral=vrrpGeneral, vrrpInfoVirtRtrIndex=vrrpInfoVirtRtrIndex, slbCurCfgFailOverState=slbCurCfgFailOverState, agPortCurCfgFastEthAutoNeg=agPortCurCfgFastEthAutoNeg, pmCurCfgMonitoringPort=pmCurCfgMonitoringPort, registration=registration, bwmCurCfgContractPolicy=bwmCurCfgContractPolicy, ipCurCfgGwMetric=ipCurCfgGwMetric, fltNewCfgDstIpMask=fltNewCfgDstIpMask, slbStatRServerEntry=slbStatRServerEntry, bwmStatTcrBufferMax=bwmStatTcrBufferMax, trunkGroupCurCfgPorts=trunkGroupCurCfgPorts, hwSensor3Temp=hwSensor3Temp, vrrpNewCfgGenTckVlanPortInc=vrrpNewCfgGenTckVlanPortInc, gslbCurCfgRemSiteUpdate=gslbCurCfgRemSiteUpdate, slbFailOverInfoSecondaryIp=slbFailOverInfoSecondaryIp, slbCurCfgPortSlbState=slbCurCfgPortSlbState, fltCurCfgClientProxy=fltCurCfgClientProxy, fltNewCfgNat=fltNewCfgNat, vrrpCurCfgVirtRtrGrpID=vrrpCurCfgVirtRtrGrpID, ipRouteInfoInterface=ipRouteInfoInterface, bwmCurCfgContractHistory=bwmCurCfgContractHistory, slbNewCfgPeerEntry=slbNewCfgPeerEntry, slbNewCfgGroupHealthCheckUrl=slbNewCfgGroupHealthCheckUrl, vrrpCurCfgVirtRtrTckVirtRtr=vrrpCurCfgVirtRtrTckVirtRtr, ipNewCfgStaticRouteEntry=ipNewCfgStaticRouteEntry, slbCurCfgGroupIndex=slbCurCfgGroupIndex, vrrpCurCfgVirtRtrIfIndex=vrrpCurCfgVirtRtrIfIndex, routeStatHighWater=routeStatHighWater, vrrpCurCfgVirtRtrGrpTable=vrrpCurCfgVirtRtrGrpTable, ipCurCfgStaticRouteGateway=ipCurCfgStaticRouteGateway, ipNewCfgStaticRouteAction=ipNewCfgStaticRouteAction, slbNewCfgVirtServiceVirtPort=slbNewCfgVirtServiceVirtPort, slbNewCfgSyncFilt=slbNewCfgSyncFilt, agPortConfig=agPortConfig, slbCurCfgPmask=slbCurCfgPmask, vrrpCurCfgIfTable=vrrpCurCfgIfTable, bwmNewCfgContractTable=bwmNewCfgContractTable, slbCurCfgRealServerWeight=slbCurCfgRealServerWeight, slbNewCfgVirtServerBwmContract=slbNewCfgVirtServerBwmContract, agPortCurCfgFastEthMode=agPortCurCfgFastEthMode, slbStatPortMaintTcpFragments=slbStatPortMaintTcpFragments, ripCurCfgSupply=ripCurCfgSupply, slbCurCfgRealServerIndex=slbCurCfgRealServerIndex, bwmStatTcName=bwmStatTcName, arpInfoEntry=arpInfoEntry, radCurCfgPort=radCurCfgPort, bwmNewCfgContractUseTos=bwmNewCfgContractUseTos, slbRealServerMaxSize=slbRealServerMaxSize, ipFwdNewCfgLocalMask=ipFwdNewCfgLocalMask, trunkGroupNewCfgTable=trunkGroupNewCfgTable, vrrpCurCfgVirtRtrGrpTckVirtRtr=vrrpCurCfgVirtRtrGrpTckVirtRtr, vrrpNewCfgVirtRtrGrpInterval=vrrpNewCfgVirtRtrGrpInterval, agNewCfgTrapHostTable=agNewCfgTrapHostTable, fltNewCfgProtocol=fltNewCfgProtocol, slbStatPortMaintNonTcpFrames=slbStatPortMaintNonTcpFrames, agNewCfgTrapHostIpAddr=agNewCfgTrapHostIpAddr, vrrpCurCfgVirtRtrSharing=vrrpCurCfgVirtRtrSharing, slbFailOverInfoPrimaryStatus=slbFailOverInfoPrimaryStatus, fltNewCfgClientProxy=fltNewCfgClientProxy, slbNewCfgPortEntry=slbNewCfgPortEntry, vrrpCurCfgGenTckRServerInc=vrrpCurCfgGenTckRServerInc, portInfoLink=portInfoLink, arpCurCfgReARPPeriod=arpCurCfgReARPPeriod, slbCurCfgRealServerExcludeStr=slbCurCfgRealServerExcludeStr, bwmNewCfgPolicyTosOut=bwmNewCfgPolicyTosOut, vrrpNewCfgVirtRtrTckIpIntf=vrrpNewCfgVirtRtrTckIpIntf, operSlbPortIndex=operSlbPortIndex, slbCurCfgSyncFilt=slbCurCfgSyncFilt, hwRedundantPSPresent=hwRedundantPSPresent, fltNewCfgFtpNatActive=fltNewCfgFtpNatActive, agNewCfgSyslog2Host=agNewCfgSyslog2Host, fltCurCfgDstMac=fltCurCfgDstMac, slbStatVServerTable=slbStatVServerTable, bwmCurCfgContractIndx=bwmCurCfgContractIndx, trunkGroupNewCfgBwmContract=trunkGroupNewCfgBwmContract, ipCurCfgGwState=ipCurCfgGwState, slbCurCfgVirtServiceRealPort=slbCurCfgVirtServiceRealPort, agImage2Ver=agImage2Ver, ripStatInPkts=ripStatInPkts, bwmNewCfgContractName=bwmNewCfgContractName, dnsNewCfgSecondaryIpAddr=dnsNewCfgSecondaryIpAddr, gslbCurCfgNetworkVip2=gslbCurCfgNetworkVip2, vlanNewCfgBwmContract=vlanNewCfgBwmContract, gslbCurCfgRemSiteTable=gslbCurCfgRemSiteTable, agPortCurCfgTableEntry=agPortCurCfgTableEntry, vlanNewCfgTable=vlanNewCfgTable, vrrpNewCfgVirtRtrSharing=vrrpNewCfgVirtRtrSharing, agSaveConfiguration=agSaveConfiguration, vrrpNewCfgVirtRtrTckVirtRtr=vrrpNewCfgVirtRtrTckVirtRtr, radCurCfgState=radCurCfgState, slbStatPortMaintIncorrectVIPs=slbStatPortMaintIncorrectVIPs, slbNewCfgVirtualServerEntry=slbNewCfgVirtualServerEntry, slbStatVServerTotalSessions=slbStatVServerTotalSessions, agNewCfgTrapHostIndx=agNewCfgTrapHostIndx, gslbCurCfgGenLookupDname=gslbCurCfgGenLookupDname, slbCurCfgFailOverTable=slbCurCfgFailOverTable, dnsNewCfgPrimaryIpAddr=dnsNewCfgPrimaryIpAddr, vrrpNewCfgIfAuthType=vrrpNewCfgIfAuthType, routeStatEntries=routeStatEntries, fltCurCfgAclTcpSyn=fltCurCfgAclTcpSyn, slbStatGroupIndex=slbStatGroupIndex, dynSLBRealServerWeight=dynSLBRealServerWeight, ripCurCfgDefListen=ripCurCfgDefListen, slbNewCfgVirtServicesTable=slbNewCfgVirtServicesTable, vlanNewCfgVlanId=vlanNewCfgVlanId, slbCurCfgVirtServerCoffset=slbCurCfgVirtServerCoffset, dynSLBRealServerPortNum=dynSLBRealServerPortNum, bwmStatSpTcrName=bwmStatSpTcrName, agPortNewCfgGigEthAutoNeg=agPortNewCfgGigEthAutoNeg, agNewCfgSmtpHost=agNewCfgSmtpHost, agCurCfgTrapHostTable=agCurCfgTrapHostTable, dynSLBRealServerTable=dynSLBRealServerTable, gslbCurCfgGenLookupTimeout=gslbCurCfgGenLookupTimeout, bwmContractTableMaxEnt=bwmContractTableMaxEnt, vrrpCurCfgGenTckL4PortInc=vrrpCurCfgGenTckL4PortInc, gslbCurCfgNetworkTable=gslbCurCfgNetworkTable, trunkGroupNewCfgAddPort=trunkGroupNewCfgAddPort, vrrpCurCfgIfIndx=vrrpCurCfgIfIndx, vrrpCurCfgVirtRtrGrpTableEntry=vrrpCurCfgVirtRtrGrpTableEntry, ipNewCfgGwArp=ipNewCfgGwArp, slbNewCfgRealServerIpAddr=slbNewCfgRealServerIpAddr, bwmNewCfgContractIndx=bwmNewCfgContractIndx, slbStatRServerTable=slbStatRServerTable, ftpNatStatTotal=ftpNatStatTotal, bwmGeneralConfig=bwmGeneralConfig, slbUrl=slbUrl, trunkGroupCurCfgIndex=trunkGroupCurCfgIndex, slbNewCfgFailOverSilenceInterval=slbNewCfgFailOverSilenceInterval, gslbNewCfgNetworkSourceIp=gslbNewCfgNetworkSourceIp, fltNewCfgPortState=fltNewCfgPortState, agNewCfgLoginBanner=agNewCfgLoginBanner, slbNewCfgPeerDelete=slbNewCfgPeerDelete, slbNewCfgVirtServIndex=slbNewCfgVirtServIndex, fltCurCfgFwlb=fltCurCfgFwlb, gslbNewCfgNetworkIndx=gslbNewCfgNetworkIndx, vrrpCurCfgVirtRtrGrpPriority=vrrpCurCfgVirtRtrGrpPriority, urlRedirStats=urlRedirStats, bwmCurCfgGenSmtpUser=bwmCurCfgGenSmtpUser, ripStats=ripStats, slbStatPortMaintPortIndex=slbStatPortMaintPortIndex, gslbNewCfgGenLookupDname=gslbNewCfgGenLookupDname, gslbNetworkTableMaxSize=gslbNetworkTableMaxSize, vrrpNewCfgIfDelete=vrrpNewCfgIfDelete, operSlbPortTable=operSlbPortTable, slbStatGroupTotalSessions=slbStatGroupTotalSessions, slbNewCfgRealServerBackUp=slbNewCfgRealServerBackUp, slbNewCfgUrlLbPathTable=slbNewCfgUrlLbPathTable, slbCurCfgVirtServiceIndex=slbCurCfgVirtServiceIndex, slbNewCfgUrlExpression=slbNewCfgUrlExpression, bwmStatSpTcrRate=bwmStatSpTcrRate, tcpStatHalfOpens=tcpStatHalfOpens, gslbCurCfgGenRemSiteUpdateInterval=gslbCurCfgGenRemSiteUpdateInterval, fltCurCfgPortTable=fltCurCfgPortTable, agTrapHostTableMaxEnt=agTrapHostTableMaxEnt, trunkGroupNewCfgIndex=trunkGroupNewCfgIndex, pktStatsJumbos=pktStatsJumbos, slbStatPortRealServerEntry=slbStatPortRealServerEntry, slbCurCfgVirtServerLayer3Only=slbCurCfgVirtServerLayer3Only, arpStatEntries=arpStatEntries)
mibBuilder.exportSymbols("ALTEON-PRIVATE-MIBS", fltCurCfgAclTcpPsh=fltCurCfgAclTcpPsh, gslbCurCfgRemSiteSecondaryIp=gslbCurCfgRemSiteSecondaryIp, slbRealServerInfoHealthLayer=slbRealServerInfoHealthLayer, vrrpNewCfgVirtRtrDelete=vrrpNewCfgVirtRtrDelete, gslbCurCfgGenUsern=gslbCurCfgGenUsern, bwmNewCfgContractHistory=bwmNewCfgContractHistory, bwmStatTcContractIndex=bwmStatTcContractIndex, hwPowerSupplyStatus=hwPowerSupplyStatus, bwmCurCfgContractState=bwmCurCfgContractState, urlStatSlbPathTable=urlStatSlbPathTable, fltNewCfgPortFiltBmap=fltNewCfgPortFiltBmap)
