#
# PySNMP MIB module MPLS-TE-STD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MPLS-TE-STD-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:43:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
IndexIntegerNextFree, = mibBuilder.importSymbols("DIFFSERV-MIB", "IndexIntegerNextFree")
ifCounterDiscontinuityGroup, InterfaceIndexOrZero, ifGeneralInformationGroup = mibBuilder.importSymbols("IF-MIB", "ifCounterDiscontinuityGroup", "InterfaceIndexOrZero", "ifGeneralInformationGroup")
InetAddressPrefixLength, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressPrefixLength")
MplsOwner, mplsStdMIB, TeHopAddressUnnum, MplsBitRate, MplsBurstSize, MplsTunnelAffinity, MplsPathIndex, MplsTunnelIndex, TeHopAddressType, MplsExtendedTunnelId, TeHopAddressAS, TeHopAddress, MplsLSPID, MplsPathIndexOrZero, MplsTunnelInstanceIndex = mibBuilder.importSymbols("MPLS-TC-STD-MIB", "MplsOwner", "mplsStdMIB", "TeHopAddressUnnum", "MplsBitRate", "MplsBurstSize", "MplsTunnelAffinity", "MplsPathIndex", "MplsTunnelIndex", "TeHopAddressType", "MplsExtendedTunnelId", "TeHopAddressAS", "TeHopAddress", "MplsLSPID", "MplsPathIndexOrZero", "MplsTunnelInstanceIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ObjectIdentity, Unsigned32, MibIdentifier, iso, NotificationType, Integer32, Counter32, Counter64, zeroDotZero, Bits, IpAddress, Gauge32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Unsigned32", "MibIdentifier", "iso", "NotificationType", "Integer32", "Counter32", "Counter64", "zeroDotZero", "Bits", "IpAddress", "Gauge32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity")
RowStatus, TextualConvention, DisplayString, TruthValue, TimeStamp, RowPointer, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString", "TruthValue", "TimeStamp", "RowPointer", "StorageType")
mplsTeStdMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 10, 166, 3))
mplsTeStdMIB.setRevisions(('2004-06-03 00:00',))
if mibBuilder.loadTexts: mplsTeStdMIB.setLastUpdated('200406030000Z')
if mibBuilder.loadTexts: mplsTeStdMIB.setOrganization('Multiprotocol Label Switching (MPLS) Working Group')
mplsTeNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 3, 0))
mplsTeScalars = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 3, 1))
mplsTeObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 3, 2))
mplsTeConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 3, 3))
mplsTunnelConfigured = MibScalar((1, 3, 6, 1, 2, 1, 10, 166, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelConfigured.setStatus('current')
mplsTunnelActive = MibScalar((1, 3, 6, 1, 2, 1, 10, 166, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelActive.setStatus('current')
mplsTunnelTEDistProto = MibScalar((1, 3, 6, 1, 2, 1, 10, 166, 3, 1, 3), Bits().clone(namedValues=NamedValues(("other", 0), ("ospf", 1), ("isis", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelTEDistProto.setStatus('current')
mplsTunnelMaxHops = MibScalar((1, 3, 6, 1, 2, 1, 10, 166, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelMaxHops.setStatus('current')
mplsTunnelNotificationMaxRate = MibScalar((1, 3, 6, 1, 2, 1, 10, 166, 3, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mplsTunnelNotificationMaxRate.setStatus('current')
mplsTunnelIndexNext = MibScalar((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 1), IndexIntegerNextFree().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelIndexNext.setStatus('current')
mplsTunnelTable = MibTable((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2), )
if mibBuilder.loadTexts: mplsTunnelTable.setStatus('current')
mplsTunnelEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1), ).setIndexNames((0, "MPLS-TE-STD-MIB", "mplsTunnelIndex"), (0, "MPLS-TE-STD-MIB", "mplsTunnelInstance"), (0, "MPLS-TE-STD-MIB", "mplsTunnelIngressLSRId"), (0, "MPLS-TE-STD-MIB", "mplsTunnelEgressLSRId"))
if mibBuilder.loadTexts: mplsTunnelEntry.setStatus('current')
mplsTunnelIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 1), MplsTunnelIndex())
if mibBuilder.loadTexts: mplsTunnelIndex.setStatus('current')
mplsTunnelInstance = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 2), MplsTunnelInstanceIndex())
if mibBuilder.loadTexts: mplsTunnelInstance.setStatus('current')
mplsTunnelIngressLSRId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 3), MplsExtendedTunnelId())
if mibBuilder.loadTexts: mplsTunnelIngressLSRId.setStatus('current')
mplsTunnelEgressLSRId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 4), MplsExtendedTunnelId())
if mibBuilder.loadTexts: mplsTunnelEgressLSRId.setStatus('current')
mplsTunnelName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 5), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelName.setStatus('current')
mplsTunnelDescr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 6), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelDescr.setStatus('current')
mplsTunnelIsIf = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelIsIf.setStatus('current')
mplsTunnelIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 8), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelIfIndex.setStatus('current')
mplsTunnelOwner = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 9), MplsOwner()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelOwner.setStatus('current')
mplsTunnelRole = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("head", 1), ("transit", 2), ("tail", 3), ("headTail", 4))).clone('head')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelRole.setStatus('current')
mplsTunnelXCPointer = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 11), RowPointer().clone((0, 0))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelXCPointer.setStatus('current')
mplsTunnelSignallingProto = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("rsvp", 2), ("crldp", 3), ("other", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelSignallingProto.setStatus('current')
mplsTunnelSetupPrio = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelSetupPrio.setStatus('current')
mplsTunnelHoldingPrio = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHoldingPrio.setStatus('current')
mplsTunnelSessionAttributes = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 15), Bits().clone(namedValues=NamedValues(("fastReroute", 0), ("mergingPermitted", 1), ("isPersistent", 2), ("isPinned", 3), ("recordRoute", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelSessionAttributes.setStatus('current')
mplsTunnelLocalProtectInUse = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 16), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelLocalProtectInUse.setStatus('current')
mplsTunnelResourcePointer = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 17), RowPointer().clone((0, 0))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelResourcePointer.setStatus('current')
mplsTunnelPrimaryInstance = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 18), MplsTunnelInstanceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelPrimaryInstance.setStatus('current')
mplsTunnelInstancePriority = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 19), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelInstancePriority.setStatus('current')
mplsTunnelHopTableIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 20), MplsPathIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopTableIndex.setStatus('current')
mplsTunnelPathInUse = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 21), MplsPathIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelPathInUse.setStatus('current')
mplsTunnelARHopTableIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 22), MplsPathIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelARHopTableIndex.setStatus('current')
mplsTunnelCHopTableIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 23), MplsPathIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCHopTableIndex.setStatus('current')
mplsTunnelIncludeAnyAffinity = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 24), MplsTunnelAffinity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelIncludeAnyAffinity.setStatus('current')
mplsTunnelIncludeAllAffinity = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 25), MplsTunnelAffinity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelIncludeAllAffinity.setStatus('current')
mplsTunnelExcludeAnyAffinity = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 26), MplsTunnelAffinity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelExcludeAnyAffinity.setStatus('current')
mplsTunnelTotalUpTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 27), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelTotalUpTime.setStatus('current')
mplsTunnelInstanceUpTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 28), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelInstanceUpTime.setStatus('current')
mplsTunnelPrimaryUpTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 29), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelPrimaryUpTime.setStatus('current')
mplsTunnelPathChanges = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelPathChanges.setStatus('current')
mplsTunnelLastPathChange = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 31), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelLastPathChange.setStatus('current')
mplsTunnelCreationTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 32), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCreationTime.setStatus('current')
mplsTunnelStateTransitions = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelStateTransitions.setStatus('current')
mplsTunnelAdminStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelAdminStatus.setStatus('current')
mplsTunnelOperStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5), ("notPresent", 6), ("lowerLayerDown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelOperStatus.setStatus('current')
mplsTunnelRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 36), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelRowStatus.setStatus('current')
mplsTunnelStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 2, 1, 37), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelStorageType.setStatus('current')
mplsTunnelHopListIndexNext = MibScalar((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 3), MplsPathIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelHopListIndexNext.setStatus('current')
mplsTunnelHopTable = MibTable((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4), )
if mibBuilder.loadTexts: mplsTunnelHopTable.setStatus('current')
mplsTunnelHopEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1), ).setIndexNames((0, "MPLS-TE-STD-MIB", "mplsTunnelHopListIndex"), (0, "MPLS-TE-STD-MIB", "mplsTunnelHopPathOptionIndex"), (0, "MPLS-TE-STD-MIB", "mplsTunnelHopIndex"))
if mibBuilder.loadTexts: mplsTunnelHopEntry.setStatus('current')
mplsTunnelHopListIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 1), MplsPathIndex())
if mibBuilder.loadTexts: mplsTunnelHopListIndex.setStatus('current')
mplsTunnelHopPathOptionIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 2), MplsPathIndex())
if mibBuilder.loadTexts: mplsTunnelHopPathOptionIndex.setStatus('current')
mplsTunnelHopIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 3), MplsPathIndex())
if mibBuilder.loadTexts: mplsTunnelHopIndex.setStatus('current')
mplsTunnelHopAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 4), TeHopAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopAddrType.setStatus('current')
mplsTunnelHopIpAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 5), TeHopAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopIpAddr.setStatus('current')
mplsTunnelHopIpPrefixLen = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 6), InetAddressPrefixLength().clone(32)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopIpPrefixLen.setStatus('current')
mplsTunnelHopAsNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 7), TeHopAddressAS()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopAsNumber.setStatus('current')
mplsTunnelHopAddrUnnum = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 8), TeHopAddressUnnum()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopAddrUnnum.setStatus('current')
mplsTunnelHopLspId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 9), MplsLSPID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopLspId.setStatus('current')
mplsTunnelHopType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strict", 1), ("loose", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopType.setStatus('current')
mplsTunnelHopInclude = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 11), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopInclude.setStatus('current')
mplsTunnelHopPathOptionName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 12), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopPathOptionName.setStatus('current')
mplsTunnelHopEntryPathComp = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("explicit", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopEntryPathComp.setStatus('current')
mplsTunnelHopRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopRowStatus.setStatus('current')
mplsTunnelHopStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 4, 1, 15), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelHopStorageType.setStatus('current')
mplsTunnelResourceIndexNext = MibScalar((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelResourceIndexNext.setStatus('current')
mplsTunnelResourceTable = MibTable((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 6), )
if mibBuilder.loadTexts: mplsTunnelResourceTable.setStatus('current')
mplsTunnelResourceEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 6, 1), ).setIndexNames((0, "MPLS-TE-STD-MIB", "mplsTunnelResourceIndex"))
if mibBuilder.loadTexts: mplsTunnelResourceEntry.setStatus('current')
mplsTunnelResourceIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: mplsTunnelResourceIndex.setStatus('current')
mplsTunnelResourceMaxRate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 6, 1, 2), MplsBitRate()).setUnits('kilobits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelResourceMaxRate.setStatus('current')
mplsTunnelResourceMeanRate = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 6, 1, 3), MplsBitRate()).setUnits('kilobits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelResourceMeanRate.setStatus('current')
mplsTunnelResourceMaxBurstSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 6, 1, 4), MplsBurstSize()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelResourceMaxBurstSize.setStatus('current')
mplsTunnelResourceMeanBurstSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 6, 1, 5), MplsBurstSize()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelResourceMeanBurstSize.setStatus('current')
mplsTunnelResourceExBurstSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 6, 1, 6), MplsBurstSize()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelResourceExBurstSize.setStatus('current')
mplsTunnelResourceFrequency = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unspecified", 1), ("frequent", 2), ("veryFrequent", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelResourceFrequency.setStatus('current')
mplsTunnelResourceWeight = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 6, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelResourceWeight.setStatus('current')
mplsTunnelResourceRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 6, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelResourceRowStatus.setStatus('current')
mplsTunnelResourceStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 6, 1, 10), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelResourceStorageType.setStatus('current')
mplsTunnelARHopTable = MibTable((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 7), )
if mibBuilder.loadTexts: mplsTunnelARHopTable.setStatus('current')
mplsTunnelARHopEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 7, 1), ).setIndexNames((0, "MPLS-TE-STD-MIB", "mplsTunnelARHopListIndex"), (0, "MPLS-TE-STD-MIB", "mplsTunnelARHopIndex"))
if mibBuilder.loadTexts: mplsTunnelARHopEntry.setStatus('current')
mplsTunnelARHopListIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 7, 1, 1), MplsPathIndex())
if mibBuilder.loadTexts: mplsTunnelARHopListIndex.setStatus('current')
mplsTunnelARHopIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 7, 1, 2), MplsPathIndex())
if mibBuilder.loadTexts: mplsTunnelARHopIndex.setStatus('current')
mplsTunnelARHopAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 7, 1, 3), TeHopAddressType().clone('ipv4')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelARHopAddrType.setStatus('current')
mplsTunnelARHopIpAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 7, 1, 4), TeHopAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelARHopIpAddr.setStatus('current')
mplsTunnelARHopAddrUnnum = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 7, 1, 5), TeHopAddressUnnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelARHopAddrUnnum.setStatus('current')
mplsTunnelARHopLspId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 7, 1, 6), MplsLSPID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelARHopLspId.setStatus('current')
mplsTunnelCHopTable = MibTable((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 8), )
if mibBuilder.loadTexts: mplsTunnelCHopTable.setStatus('current')
mplsTunnelCHopEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 8, 1), ).setIndexNames((0, "MPLS-TE-STD-MIB", "mplsTunnelCHopListIndex"), (0, "MPLS-TE-STD-MIB", "mplsTunnelCHopIndex"))
if mibBuilder.loadTexts: mplsTunnelCHopEntry.setStatus('current')
mplsTunnelCHopListIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 8, 1, 1), MplsPathIndex())
if mibBuilder.loadTexts: mplsTunnelCHopListIndex.setStatus('current')
mplsTunnelCHopIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 8, 1, 2), MplsPathIndex())
if mibBuilder.loadTexts: mplsTunnelCHopIndex.setStatus('current')
mplsTunnelCHopAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 8, 1, 3), TeHopAddressType().clone('ipv4')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCHopAddrType.setStatus('current')
mplsTunnelCHopIpAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 8, 1, 4), TeHopAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCHopIpAddr.setStatus('current')
mplsTunnelCHopIpPrefixLen = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 8, 1, 5), InetAddressPrefixLength().clone(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCHopIpPrefixLen.setStatus('current')
mplsTunnelCHopAsNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 8, 1, 6), TeHopAddressAS()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCHopAsNumber.setStatus('current')
mplsTunnelCHopAddrUnnum = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 8, 1, 7), TeHopAddressUnnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCHopAddrUnnum.setStatus('current')
mplsTunnelCHopLspId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 8, 1, 8), MplsLSPID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCHopLspId.setStatus('current')
mplsTunnelCHopType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strict", 1), ("loose", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelCHopType.setStatus('current')
mplsTunnelPerfTable = MibTable((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 9), )
if mibBuilder.loadTexts: mplsTunnelPerfTable.setStatus('current')
mplsTunnelPerfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 9, 1), )
mplsTunnelEntry.registerAugmentions(("MPLS-TE-STD-MIB", "mplsTunnelPerfEntry"))
mplsTunnelPerfEntry.setIndexNames(*mplsTunnelEntry.getIndexNames())
if mibBuilder.loadTexts: mplsTunnelPerfEntry.setStatus('current')
mplsTunnelPerfPackets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 9, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelPerfPackets.setStatus('current')
mplsTunnelPerfHCPackets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 9, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelPerfHCPackets.setStatus('current')
mplsTunnelPerfErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelPerfErrors.setStatus('current')
mplsTunnelPerfBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelPerfBytes.setStatus('current')
mplsTunnelPerfHCBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 9, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsTunnelPerfHCBytes.setStatus('current')
mplsTunnelCRLDPResTable = MibTable((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 10), )
if mibBuilder.loadTexts: mplsTunnelCRLDPResTable.setStatus('current')
mplsTunnelCRLDPResEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 10, 1), ).setIndexNames((0, "MPLS-TE-STD-MIB", "mplsTunnelResourceIndex"))
if mibBuilder.loadTexts: mplsTunnelCRLDPResEntry.setStatus('current')
mplsTunnelCRLDPResMeanBurstSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 10, 1, 1), MplsBurstSize()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelCRLDPResMeanBurstSize.setStatus('current')
mplsTunnelCRLDPResExBurstSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 10, 1, 2), MplsBurstSize()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelCRLDPResExBurstSize.setStatus('current')
mplsTunnelCRLDPResFrequency = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unspecified", 1), ("frequent", 2), ("veryFrequent", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelCRLDPResFrequency.setStatus('current')
mplsTunnelCRLDPResWeight = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelCRLDPResWeight.setStatus('current')
mplsTunnelCRLDPResFlags = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelCRLDPResFlags.setStatus('current')
mplsTunnelCRLDPResRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 10, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelCRLDPResRowStatus.setStatus('current')
mplsTunnelCRLDPResStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 10, 1, 7), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mplsTunnelCRLDPResStorageType.setStatus('current')
mplsTunnelNotificationEnable = MibScalar((1, 3, 6, 1, 2, 1, 10, 166, 3, 2, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mplsTunnelNotificationEnable.setStatus('current')
mplsTunnelUp = NotificationType((1, 3, 6, 1, 2, 1, 10, 166, 3, 0, 1)).setObjects(("MPLS-TE-STD-MIB", "mplsTunnelAdminStatus"), ("MPLS-TE-STD-MIB", "mplsTunnelOperStatus"))
if mibBuilder.loadTexts: mplsTunnelUp.setStatus('current')
mplsTunnelDown = NotificationType((1, 3, 6, 1, 2, 1, 10, 166, 3, 0, 2)).setObjects(("MPLS-TE-STD-MIB", "mplsTunnelAdminStatus"), ("MPLS-TE-STD-MIB", "mplsTunnelOperStatus"))
if mibBuilder.loadTexts: mplsTunnelDown.setStatus('current')
mplsTunnelRerouted = NotificationType((1, 3, 6, 1, 2, 1, 10, 166, 3, 0, 3)).setObjects(("MPLS-TE-STD-MIB", "mplsTunnelAdminStatus"), ("MPLS-TE-STD-MIB", "mplsTunnelOperStatus"))
if mibBuilder.loadTexts: mplsTunnelRerouted.setStatus('current')
mplsTunnelReoptimized = NotificationType((1, 3, 6, 1, 2, 1, 10, 166, 3, 0, 4)).setObjects(("MPLS-TE-STD-MIB", "mplsTunnelAdminStatus"), ("MPLS-TE-STD-MIB", "mplsTunnelOperStatus"))
if mibBuilder.loadTexts: mplsTunnelReoptimized.setStatus('current')
mplsTeGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 3, 3, 1))
mplsTeCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 166, 3, 3, 2))
mplsTeModuleFullCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 166, 3, 3, 2, 1)).setObjects(("IF-MIB", "ifGeneralInformationGroup"), ("IF-MIB", "ifCounterDiscontinuityGroup"), ("MPLS-TE-STD-MIB", "mplsTunnelGroup"), ("MPLS-TE-STD-MIB", "mplsTunnelScalarGroup"), ("MPLS-TE-STD-MIB", "mplsTunnelManualGroup"), ("MPLS-TE-STD-MIB", "mplsTunnelSignaledGroup"), ("MPLS-TE-STD-MIB", "mplsTunnelIsNotIntfcGroup"), ("MPLS-TE-STD-MIB", "mplsTunnelIsIntfcGroup"), ("MPLS-TE-STD-MIB", "mplsTunnelCRLDPResOptionalGroup"), ("MPLS-TE-STD-MIB", "mplsTeNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTeModuleFullCompliance = mplsTeModuleFullCompliance.setStatus('current')
mplsTeModuleReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 166, 3, 3, 2, 2)).setObjects(("MPLS-TE-STD-MIB", "mplsTunnelGroup"), ("MPLS-TE-STD-MIB", "mplsTunnelScalarGroup"), ("MPLS-TE-STD-MIB", "mplsTunnelManualGroup"), ("MPLS-TE-STD-MIB", "mplsTunnelSignaledGroup"), ("MPLS-TE-STD-MIB", "mplsTunnelIsNotIntfcGroup"), ("MPLS-TE-STD-MIB", "mplsTunnelIsIntfcGroup"), ("MPLS-TE-STD-MIB", "mplsTunnelCRLDPResOptionalGroup"), ("MPLS-TE-STD-MIB", "mplsTeNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTeModuleReadOnlyCompliance = mplsTeModuleReadOnlyCompliance.setStatus('current')
mplsTunnelGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 166, 3, 3, 1, 1)).setObjects(("MPLS-TE-STD-MIB", "mplsTunnelIndexNext"), ("MPLS-TE-STD-MIB", "mplsTunnelName"), ("MPLS-TE-STD-MIB", "mplsTunnelDescr"), ("MPLS-TE-STD-MIB", "mplsTunnelOwner"), ("MPLS-TE-STD-MIB", "mplsTunnelXCPointer"), ("MPLS-TE-STD-MIB", "mplsTunnelIfIndex"), ("MPLS-TE-STD-MIB", "mplsTunnelHopTableIndex"), ("MPLS-TE-STD-MIB", "mplsTunnelARHopTableIndex"), ("MPLS-TE-STD-MIB", "mplsTunnelCHopTableIndex"), ("MPLS-TE-STD-MIB", "mplsTunnelAdminStatus"), ("MPLS-TE-STD-MIB", "mplsTunnelOperStatus"), ("MPLS-TE-STD-MIB", "mplsTunnelRowStatus"), ("MPLS-TE-STD-MIB", "mplsTunnelNotificationEnable"), ("MPLS-TE-STD-MIB", "mplsTunnelStorageType"), ("MPLS-TE-STD-MIB", "mplsTunnelConfigured"), ("MPLS-TE-STD-MIB", "mplsTunnelActive"), ("MPLS-TE-STD-MIB", "mplsTunnelPrimaryInstance"), ("MPLS-TE-STD-MIB", "mplsTunnelPrimaryUpTime"), ("MPLS-TE-STD-MIB", "mplsTunnelPathChanges"), ("MPLS-TE-STD-MIB", "mplsTunnelLastPathChange"), ("MPLS-TE-STD-MIB", "mplsTunnelCreationTime"), ("MPLS-TE-STD-MIB", "mplsTunnelStateTransitions"), ("MPLS-TE-STD-MIB", "mplsTunnelIncludeAnyAffinity"), ("MPLS-TE-STD-MIB", "mplsTunnelIncludeAllAffinity"), ("MPLS-TE-STD-MIB", "mplsTunnelExcludeAnyAffinity"), ("MPLS-TE-STD-MIB", "mplsTunnelPerfPackets"), ("MPLS-TE-STD-MIB", "mplsTunnelPerfHCPackets"), ("MPLS-TE-STD-MIB", "mplsTunnelPerfErrors"), ("MPLS-TE-STD-MIB", "mplsTunnelPerfBytes"), ("MPLS-TE-STD-MIB", "mplsTunnelPerfHCBytes"), ("MPLS-TE-STD-MIB", "mplsTunnelResourcePointer"), ("MPLS-TE-STD-MIB", "mplsTunnelInstancePriority"), ("MPLS-TE-STD-MIB", "mplsTunnelPathInUse"), ("MPLS-TE-STD-MIB", "mplsTunnelRole"), ("MPLS-TE-STD-MIB", "mplsTunnelTotalUpTime"), ("MPLS-TE-STD-MIB", "mplsTunnelInstanceUpTime"), ("MPLS-TE-STD-MIB", "mplsTunnelResourceIndexNext"), ("MPLS-TE-STD-MIB", "mplsTunnelResourceMaxRate"), ("MPLS-TE-STD-MIB", "mplsTunnelResourceMeanRate"), ("MPLS-TE-STD-MIB", "mplsTunnelResourceMaxBurstSize"), ("MPLS-TE-STD-MIB", "mplsTunnelResourceMeanBurstSize"), ("MPLS-TE-STD-MIB", "mplsTunnelResourceExBurstSize"), ("MPLS-TE-STD-MIB", "mplsTunnelResourceFrequency"), ("MPLS-TE-STD-MIB", "mplsTunnelResourceWeight"), ("MPLS-TE-STD-MIB", "mplsTunnelResourceRowStatus"), ("MPLS-TE-STD-MIB", "mplsTunnelResourceStorageType"), ("MPLS-TE-STD-MIB", "mplsTunnelARHopAddrType"), ("MPLS-TE-STD-MIB", "mplsTunnelARHopIpAddr"), ("MPLS-TE-STD-MIB", "mplsTunnelARHopAddrUnnum"), ("MPLS-TE-STD-MIB", "mplsTunnelARHopLspId"), ("MPLS-TE-STD-MIB", "mplsTunnelCHopAddrType"), ("MPLS-TE-STD-MIB", "mplsTunnelCHopIpAddr"), ("MPLS-TE-STD-MIB", "mplsTunnelCHopIpPrefixLen"), ("MPLS-TE-STD-MIB", "mplsTunnelCHopAsNumber"), ("MPLS-TE-STD-MIB", "mplsTunnelCHopAddrUnnum"), ("MPLS-TE-STD-MIB", "mplsTunnelCHopLspId"), ("MPLS-TE-STD-MIB", "mplsTunnelCHopType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTunnelGroup = mplsTunnelGroup.setStatus('current')
mplsTunnelManualGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 166, 3, 3, 1, 2)).setObjects(("MPLS-TE-STD-MIB", "mplsTunnelSignallingProto"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTunnelManualGroup = mplsTunnelManualGroup.setStatus('current')
mplsTunnelSignaledGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 166, 3, 3, 1, 3)).setObjects(("MPLS-TE-STD-MIB", "mplsTunnelSetupPrio"), ("MPLS-TE-STD-MIB", "mplsTunnelHoldingPrio"), ("MPLS-TE-STD-MIB", "mplsTunnelSignallingProto"), ("MPLS-TE-STD-MIB", "mplsTunnelLocalProtectInUse"), ("MPLS-TE-STD-MIB", "mplsTunnelSessionAttributes"), ("MPLS-TE-STD-MIB", "mplsTunnelHopListIndexNext"), ("MPLS-TE-STD-MIB", "mplsTunnelHopAddrType"), ("MPLS-TE-STD-MIB", "mplsTunnelHopIpAddr"), ("MPLS-TE-STD-MIB", "mplsTunnelHopIpPrefixLen"), ("MPLS-TE-STD-MIB", "mplsTunnelHopAddrUnnum"), ("MPLS-TE-STD-MIB", "mplsTunnelHopAsNumber"), ("MPLS-TE-STD-MIB", "mplsTunnelHopLspId"), ("MPLS-TE-STD-MIB", "mplsTunnelHopType"), ("MPLS-TE-STD-MIB", "mplsTunnelHopInclude"), ("MPLS-TE-STD-MIB", "mplsTunnelHopPathOptionName"), ("MPLS-TE-STD-MIB", "mplsTunnelHopEntryPathComp"), ("MPLS-TE-STD-MIB", "mplsTunnelHopRowStatus"), ("MPLS-TE-STD-MIB", "mplsTunnelHopStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTunnelSignaledGroup = mplsTunnelSignaledGroup.setStatus('current')
mplsTunnelScalarGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 166, 3, 3, 1, 4)).setObjects(("MPLS-TE-STD-MIB", "mplsTunnelConfigured"), ("MPLS-TE-STD-MIB", "mplsTunnelActive"), ("MPLS-TE-STD-MIB", "mplsTunnelTEDistProto"), ("MPLS-TE-STD-MIB", "mplsTunnelMaxHops"), ("MPLS-TE-STD-MIB", "mplsTunnelNotificationMaxRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTunnelScalarGroup = mplsTunnelScalarGroup.setStatus('current')
mplsTunnelIsIntfcGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 166, 3, 3, 1, 5)).setObjects(("MPLS-TE-STD-MIB", "mplsTunnelIsIf"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTunnelIsIntfcGroup = mplsTunnelIsIntfcGroup.setStatus('current')
mplsTunnelIsNotIntfcGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 166, 3, 3, 1, 6)).setObjects(("MPLS-TE-STD-MIB", "mplsTunnelIsIf"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTunnelIsNotIntfcGroup = mplsTunnelIsNotIntfcGroup.setStatus('current')
mplsTunnelCRLDPResOptionalGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 166, 3, 3, 1, 7)).setObjects(("MPLS-TE-STD-MIB", "mplsTunnelCRLDPResMeanBurstSize"), ("MPLS-TE-STD-MIB", "mplsTunnelCRLDPResExBurstSize"), ("MPLS-TE-STD-MIB", "mplsTunnelCRLDPResFrequency"), ("MPLS-TE-STD-MIB", "mplsTunnelCRLDPResWeight"), ("MPLS-TE-STD-MIB", "mplsTunnelCRLDPResFlags"), ("MPLS-TE-STD-MIB", "mplsTunnelCRLDPResRowStatus"), ("MPLS-TE-STD-MIB", "mplsTunnelCRLDPResStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTunnelCRLDPResOptionalGroup = mplsTunnelCRLDPResOptionalGroup.setStatus('current')
mplsTeNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 10, 166, 3, 3, 1, 8)).setObjects(("MPLS-TE-STD-MIB", "mplsTunnelUp"), ("MPLS-TE-STD-MIB", "mplsTunnelDown"), ("MPLS-TE-STD-MIB", "mplsTunnelRerouted"), ("MPLS-TE-STD-MIB", "mplsTunnelReoptimized"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mplsTeNotificationGroup = mplsTeNotificationGroup.setStatus('current')
mibBuilder.exportSymbols("MPLS-TE-STD-MIB", mplsTunnelHopLspId=mplsTunnelHopLspId, mplsTunnelResourceStorageType=mplsTunnelResourceStorageType, mplsTeScalars=mplsTeScalars, mplsTunnelCRLDPResRowStatus=mplsTunnelCRLDPResRowStatus, mplsTunnelPathInUse=mplsTunnelPathInUse, mplsTunnelARHopEntry=mplsTunnelARHopEntry, mplsTeCompliances=mplsTeCompliances, mplsTunnelResourceMeanBurstSize=mplsTunnelResourceMeanBurstSize, mplsTunnelSetupPrio=mplsTunnelSetupPrio, mplsTunnelHopStorageType=mplsTunnelHopStorageType, mplsTunnelHopRowStatus=mplsTunnelHopRowStatus, mplsTunnelIsNotIntfcGroup=mplsTunnelIsNotIntfcGroup, mplsTunnelHopListIndex=mplsTunnelHopListIndex, mplsTeGroups=mplsTeGroups, mplsTeObjects=mplsTeObjects, mplsTeModuleReadOnlyCompliance=mplsTeModuleReadOnlyCompliance, mplsTunnelActive=mplsTunnelActive, mplsTunnelResourceMaxBurstSize=mplsTunnelResourceMaxBurstSize, mplsTunnelPerfEntry=mplsTunnelPerfEntry, mplsTunnelCHopTableIndex=mplsTunnelCHopTableIndex, mplsTunnelARHopAddrUnnum=mplsTunnelARHopAddrUnnum, mplsTunnelResourceExBurstSize=mplsTunnelResourceExBurstSize, mplsTunnelNotificationMaxRate=mplsTunnelNotificationMaxRate, mplsTunnelStateTransitions=mplsTunnelStateTransitions, mplsTunnelHopInclude=mplsTunnelHopInclude, mplsTunnelNotificationEnable=mplsTunnelNotificationEnable, mplsTunnelResourceEntry=mplsTunnelResourceEntry, mplsTunnelEgressLSRId=mplsTunnelEgressLSRId, mplsTunnelARHopIndex=mplsTunnelARHopIndex, mplsTunnelCRLDPResFrequency=mplsTunnelCRLDPResFrequency, mplsTunnelMaxHops=mplsTunnelMaxHops, mplsTunnelAdminStatus=mplsTunnelAdminStatus, mplsTunnelCRLDPResTable=mplsTunnelCRLDPResTable, mplsTunnelPerfTable=mplsTunnelPerfTable, mplsTunnelResourceMeanRate=mplsTunnelResourceMeanRate, mplsTunnelCRLDPResOptionalGroup=mplsTunnelCRLDPResOptionalGroup, mplsTunnelIncludeAllAffinity=mplsTunnelIncludeAllAffinity, mplsTunnelARHopListIndex=mplsTunnelARHopListIndex, mplsTunnelStorageType=mplsTunnelStorageType, mplsTunnelEntry=mplsTunnelEntry, mplsTunnelPerfHCPackets=mplsTunnelPerfHCPackets, mplsTunnelSignaledGroup=mplsTunnelSignaledGroup, mplsTunnelCHopIpPrefixLen=mplsTunnelCHopIpPrefixLen, mplsTunnelResourcePointer=mplsTunnelResourcePointer, mplsTunnelHopAsNumber=mplsTunnelHopAsNumber, mplsTunnelResourceMaxRate=mplsTunnelResourceMaxRate, mplsTunnelManualGroup=mplsTunnelManualGroup, mplsTunnelARHopTableIndex=mplsTunnelARHopTableIndex, mplsTunnelCRLDPResFlags=mplsTunnelCRLDPResFlags, mplsTunnelIndex=mplsTunnelIndex, mplsTunnelName=mplsTunnelName, mplsTunnelPathChanges=mplsTunnelPathChanges, mplsTunnelHopIndex=mplsTunnelHopIndex, mplsTunnelCHopTable=mplsTunnelCHopTable, mplsTunnelHopIpAddr=mplsTunnelHopIpAddr, mplsTunnelDescr=mplsTunnelDescr, mplsTunnelHoldingPrio=mplsTunnelHoldingPrio, mplsTunnelXCPointer=mplsTunnelXCPointer, mplsTunnelIfIndex=mplsTunnelIfIndex, mplsTunnelPerfBytes=mplsTunnelPerfBytes, mplsTunnelCHopAddrType=mplsTunnelCHopAddrType, mplsTunnelLastPathChange=mplsTunnelLastPathChange, mplsTunnelSessionAttributes=mplsTunnelSessionAttributes, mplsTunnelInstanceUpTime=mplsTunnelInstanceUpTime, mplsTunnelPerfPackets=mplsTunnelPerfPackets, mplsTunnelTable=mplsTunnelTable, mplsTunnelResourceIndex=mplsTunnelResourceIndex, mplsTunnelGroup=mplsTunnelGroup, mplsTunnelInstancePriority=mplsTunnelInstancePriority, mplsTunnelExcludeAnyAffinity=mplsTunnelExcludeAnyAffinity, mplsTunnelCHopIpAddr=mplsTunnelCHopIpAddr, mplsTunnelCRLDPResEntry=mplsTunnelCRLDPResEntry, mplsTunnelCHopEntry=mplsTunnelCHopEntry, mplsTunnelScalarGroup=mplsTunnelScalarGroup, mplsTunnelHopTableIndex=mplsTunnelHopTableIndex, mplsTunnelSignallingProto=mplsTunnelSignallingProto, mplsTunnelCHopListIndex=mplsTunnelCHopListIndex, mplsTunnelARHopIpAddr=mplsTunnelARHopIpAddr, mplsTunnelResourceWeight=mplsTunnelResourceWeight, mplsTeNotificationGroup=mplsTeNotificationGroup, mplsTunnelResourceIndexNext=mplsTunnelResourceIndexNext, mplsTunnelHopPathOptionName=mplsTunnelHopPathOptionName, mplsTunnelCRLDPResWeight=mplsTunnelCRLDPResWeight, mplsTunnelHopListIndexNext=mplsTunnelHopListIndexNext, mplsTunnelResourceRowStatus=mplsTunnelResourceRowStatus, mplsTunnelCHopLspId=mplsTunnelCHopLspId, mplsTeConformance=mplsTeConformance, mplsTunnelCHopAsNumber=mplsTunnelCHopAsNumber, mplsTunnelHopEntryPathComp=mplsTunnelHopEntryPathComp, mplsTunnelIsIf=mplsTunnelIsIf, mplsTunnelHopAddrUnnum=mplsTunnelHopAddrUnnum, mplsTunnelTEDistProto=mplsTunnelTEDistProto, mplsTunnelCreationTime=mplsTunnelCreationTime, mplsTunnelARHopAddrType=mplsTunnelARHopAddrType, mplsTunnelIngressLSRId=mplsTunnelIngressLSRId, mplsTunnelPrimaryUpTime=mplsTunnelPrimaryUpTime, mplsTunnelCRLDPResStorageType=mplsTunnelCRLDPResStorageType, mplsTunnelOwner=mplsTunnelOwner, mplsTunnelOperStatus=mplsTunnelOperStatus, mplsTunnelRowStatus=mplsTunnelRowStatus, mplsTunnelHopAddrType=mplsTunnelHopAddrType, mplsTunnelHopIpPrefixLen=mplsTunnelHopIpPrefixLen, mplsTunnelCHopType=mplsTunnelCHopType, mplsTunnelDown=mplsTunnelDown, mplsTunnelHopPathOptionIndex=mplsTunnelHopPathOptionIndex, mplsTunnelReoptimized=mplsTunnelReoptimized, mplsTunnelPerfHCBytes=mplsTunnelPerfHCBytes, mplsTunnelLocalProtectInUse=mplsTunnelLocalProtectInUse, mplsTunnelHopEntry=mplsTunnelHopEntry, mplsTunnelTotalUpTime=mplsTunnelTotalUpTime, mplsTunnelCRLDPResExBurstSize=mplsTunnelCRLDPResExBurstSize, mplsTunnelResourceTable=mplsTunnelResourceTable, mplsTeStdMIB=mplsTeStdMIB, mplsTunnelARHopLspId=mplsTunnelARHopLspId, mplsTunnelHopType=mplsTunnelHopType, mplsTunnelRole=mplsTunnelRole, mplsTunnelCRLDPResMeanBurstSize=mplsTunnelCRLDPResMeanBurstSize, mplsTeModuleFullCompliance=mplsTeModuleFullCompliance, mplsTunnelIndexNext=mplsTunnelIndexNext, mplsTunnelConfigured=mplsTunnelConfigured, mplsTunnelResourceFrequency=mplsTunnelResourceFrequency, mplsTunnelPerfErrors=mplsTunnelPerfErrors, mplsTunnelIncludeAnyAffinity=mplsTunnelIncludeAnyAffinity, mplsTunnelInstance=mplsTunnelInstance, mplsTunnelHopTable=mplsTunnelHopTable, mplsTunnelCHopIndex=mplsTunnelCHopIndex, PYSNMP_MODULE_ID=mplsTeStdMIB, mplsTeNotifications=mplsTeNotifications, mplsTunnelCHopAddrUnnum=mplsTunnelCHopAddrUnnum, mplsTunnelIsIntfcGroup=mplsTunnelIsIntfcGroup, mplsTunnelUp=mplsTunnelUp, mplsTunnelRerouted=mplsTunnelRerouted, mplsTunnelPrimaryInstance=mplsTunnelPrimaryInstance, mplsTunnelARHopTable=mplsTunnelARHopTable)
