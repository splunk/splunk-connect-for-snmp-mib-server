#
# PySNMP MIB module EMPIRE-SVCRSP (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EMPIRE-SVCRSP
# Produced by pysmi-0.3.4 at Mon Apr 29 18:48:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Counter32, Integer32, MibIdentifier, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Gauge32, enterprises, Counter64, IpAddress, NotificationType, TimeTicks, ObjectIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Integer32", "MibIdentifier", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Gauge32", "enterprises", "Counter64", "IpAddress", "NotificationType", "TimeTicks", "ObjectIdentity", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
empire = MibIdentifier((1, 3, 6, 1, 4, 1, 546))
applications = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16))
svcRsp = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 6))
svcRspVersion = MibScalar((1, 3, 6, 1, 4, 1, 546, 16, 6, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRspVersion.setStatus('mandatory')
svcRspPID = MibScalar((1, 3, 6, 1, 4, 1, 546, 16, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRspPID.setStatus('mandatory')
svcRspModMode = MibScalar((1, 3, 6, 1, 4, 1, 546, 16, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fullMode", 1), ("restrictedMode", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRspModMode.setStatus('mandatory')
svcRspTable = MibTable((1, 3, 6, 1, 4, 1, 546, 16, 6, 10), )
if mibBuilder.loadTexts: svcRspTable.setStatus('mandatory')
svcRspTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1), ).setIndexNames((0, "EMPIRE-SVCRSP", "svcRspTableIndex"))
if mibBuilder.loadTexts: svcRspTableEntry.setStatus('mandatory')
svcRspTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRspTableIndex.setStatus('mandatory')
svcRspTableDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcRspTableDescr.setStatus('mandatory')
svcRspTableSvc = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))).clone(namedValues=NamedValues(("nntp", 1), ("dns", 2), ("pop3", 3), ("http", 4), ("ftp", 5), ("smtp", 6), ("ping", 7), ("tcpconnect", 8), ("custom", 9), ("https", 10), ("imap", 11), ("roundTripEmail", 12), ("virtualUserTest", 13), ("nis", 14), ("tftp", 15), ("dhcp", 16), ("mapi", 17), ("ldap", 18), ("activeDirectory", 19), ("sqlQuery", 20), ("snmp", 21), ("fileIO", 22)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcRspTableSvc.setStatus('mandatory')
svcRspTableArgs = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcRspTableArgs.setStatus('mandatory')
svcRspTableInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcRspTableInterval.setStatus('mandatory')
svcRspTableSamplesPerInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcRspTableSamplesPerInterval.setStatus('mandatory')
svcRspTableTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcRspTableTimeout.setStatus('mandatory')
svcRspTableStatsWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcRspTableStatsWindow.setStatus('mandatory')
svcRspTableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))).clone('createAndWait')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcRspTableStatus.setStatus('mandatory')
svcRspTableLastUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRspTableLastUpdate.setStatus('mandatory')
svcRspTableNumSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRspTableNumSamples.setStatus('mandatory')
svcRspTableTotalLastSample = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRspTableTotalLastSample.setStatus('mandatory')
svcRspTableTotalMin = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRspTableTotalMin.setStatus('mandatory')
svcRspTableTotalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRspTableTotalMax.setStatus('mandatory')
svcRspTableTotalMean = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRspTableTotalMean.setStatus('mandatory')
svcRspTableTotalVariance = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRspTableTotalVariance.setStatus('mandatory')
svcRspTableTotalAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRspTableTotalAvailability.setStatus('mandatory')
svcRspTableNameLastSample = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRspTableNameLastSample.setStatus('mandatory')
svcRspTableNameMin = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRspTableNameMin.setStatus('mandatory')
svcRspTableNameMax = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRspTableNameMax.setStatus('mandatory')
svcRspTableNameMean = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRspTableNameMean.setStatus('mandatory')
svcRspTableNameVariance = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRspTableNameVariance.setStatus('mandatory')
svcRspTableConnLastSample = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRspTableConnLastSample.setStatus('mandatory')
svcRspTableConnMin = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRspTableConnMin.setStatus('mandatory')
svcRspTableConnMax = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRspTableConnMax.setStatus('mandatory')
svcRspTableConnMean = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRspTableConnMean.setStatus('mandatory')
svcRspTableConnVariance = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRspTableConnVariance.setStatus('mandatory')
svcRspTableTranLastSample = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRspTableTranLastSample.setStatus('mandatory')
svcRspTableTranMin = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRspTableTranMin.setStatus('mandatory')
svcRspTableTranMax = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRspTableTranMax.setStatus('mandatory')
svcRspTableTranMean = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRspTableTranMean.setStatus('mandatory')
svcRspTableTranVariance = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRspTableTranVariance.setStatus('mandatory')
svcRspTableBytesInLastSample = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRspTableBytesInLastSample.setStatus('mandatory')
svcRspTableBytesOutLastSample = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRspTableBytesOutLastSample.setStatus('mandatory')
svcRspTableTotalBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRspTableTotalBytesIn.setStatus('mandatory')
svcRspTableTotalBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRspTableTotalBytesOut.setStatus('mandatory')
svcRspTableThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRspTableThroughput.setStatus('mandatory')
svcRspTableResults = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRspTableResults.setStatus('mandatory')
svcRspTableErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRspTableErrorCode.setStatus('mandatory')
svcRspTableTOSField = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRspTableTOSField.setStatus('mandatory')
svcRspTableFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcRspTableFlags.setStatus('mandatory')
svcRspTableLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcRspTableLimit.setStatus('mandatory')
svcRspTableUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcRspTableUsername.setStatus('mandatory')
svcRspTablePassword = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcRspTablePassword.setStatus('mandatory')
svcRspTableDest = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcRspTableDest.setStatus('mandatory')
svcRspTableTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRspTableTotalErrors.setStatus('mandatory')
svcRspTableSamplesInWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRspTableSamplesInWindow.setStatus('mandatory')
svcRspTableSuccessesInWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 6, 10, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRspTableSuccessesInWindow.setStatus('mandatory')
svcRspUnusedIndex = MibScalar((1, 3, 6, 1, 4, 1, 546, 16, 6, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRspUnusedIndex.setStatus('mandatory')
svcRspMatchDescr = MibScalar((1, 3, 6, 1, 4, 1, 546, 16, 6, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcRspMatchDescr.setStatus('mandatory')
svcRspMatchIndex = MibScalar((1, 3, 6, 1, 4, 1, 546, 16, 6, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRspMatchIndex.setStatus('mandatory')
svcRspNumTests = MibScalar((1, 3, 6, 1, 4, 1, 546, 16, 6, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRspNumTests.setStatus('mandatory')
svcRspMaxThreads = MibScalar((1, 3, 6, 1, 4, 1, 546, 16, 6, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcRspMaxThreads.setStatus('mandatory')
svcRspSecurityFlags = MibScalar((1, 3, 6, 1, 4, 1, 546, 16, 6, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcRspSecurityFlags.setStatus('mandatory')
mibBuilder.exportSymbols("EMPIRE-SVCRSP", svcRspNumTests=svcRspNumTests, svcRspMaxThreads=svcRspMaxThreads, svcRspTableBytesInLastSample=svcRspTableBytesInLastSample, svcRspTableStatsWindow=svcRspTableStatsWindow, svcRspTableTotalMin=svcRspTableTotalMin, svcRspTableNameMean=svcRspTableNameMean, svcRspTableTotalMean=svcRspTableTotalMean, svcRspTableLimit=svcRspTableLimit, svcRspTableBytesOutLastSample=svcRspTableBytesOutLastSample, svcRspTableResults=svcRspTableResults, svcRspTableLastUpdate=svcRspTableLastUpdate, svcRspTableNameMin=svcRspTableNameMin, applications=applications, svcRspTableTotalBytesOut=svcRspTableTotalBytesOut, svcRspUnusedIndex=svcRspUnusedIndex, svcRsp=svcRsp, svcRspTableTranMean=svcRspTableTranMean, svcRspTableTotalMax=svcRspTableTotalMax, svcRspPID=svcRspPID, empire=empire, svcRspTableArgs=svcRspTableArgs, svcRspTableConnMean=svcRspTableConnMean, svcRspTableTimeout=svcRspTableTimeout, svcRspMatchIndex=svcRspMatchIndex, svcRspTableTranMin=svcRspTableTranMin, svcRspTableTOSField=svcRspTableTOSField, svcRspTableNameVariance=svcRspTableNameVariance, svcRspTableConnLastSample=svcRspTableConnLastSample, svcRspTableDescr=svcRspTableDescr, svcRspModMode=svcRspModMode, svcRspVersion=svcRspVersion, svcRspTable=svcRspTable, svcRspTableTotalLastSample=svcRspTableTotalLastSample, svcRspTableConnMin=svcRspTableConnMin, svcRspTableDest=svcRspTableDest, svcRspTableFlags=svcRspTableFlags, svcRspTableConnVariance=svcRspTableConnVariance, svcRspTableNumSamples=svcRspTableNumSamples, svcRspTableConnMax=svcRspTableConnMax, svcRspTableTranMax=svcRspTableTranMax, svcRspTableSamplesInWindow=svcRspTableSamplesInWindow, svcRspTableTotalAvailability=svcRspTableTotalAvailability, svcRspTableUsername=svcRspTableUsername, svcRspTableNameMax=svcRspTableNameMax, svcRspTableTotalErrors=svcRspTableTotalErrors, svcRspTableTranLastSample=svcRspTableTranLastSample, svcRspTableTotalBytesIn=svcRspTableTotalBytesIn, svcRspTablePassword=svcRspTablePassword, svcRspTableSamplesPerInterval=svcRspTableSamplesPerInterval, svcRspTableInterval=svcRspTableInterval, svcRspTableSuccessesInWindow=svcRspTableSuccessesInWindow, svcRspSecurityFlags=svcRspSecurityFlags, svcRspTableEntry=svcRspTableEntry, svcRspTableStatus=svcRspTableStatus, svcRspTableTotalVariance=svcRspTableTotalVariance, svcRspTableThroughput=svcRspTableThroughput, svcRspTableNameLastSample=svcRspTableNameLastSample, svcRspTableIndex=svcRspTableIndex, svcRspTableErrorCode=svcRspTableErrorCode, svcRspTableTranVariance=svcRspTableTranVariance, svcRspTableSvc=svcRspTableSvc, svcRspMatchDescr=svcRspMatchDescr)
