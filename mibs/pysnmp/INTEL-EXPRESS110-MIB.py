#
# PySNMP MIB module INTEL-EXPRESS110-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTEL-EXPRESS110-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:42:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
hub_products, = mibBuilder.importSymbols("Intel-Common-MIB", "hub-products")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, Counter32, TimeTicks, Counter64, Integer32, Gauge32, IpAddress, NotificationType, ObjectIdentity, NotificationType, iso, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter32", "TimeTicks", "Counter64", "Integer32", "Gauge32", "IpAddress", "NotificationType", "ObjectIdentity", "NotificationType", "iso", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits")
DisplayString, TextualConvention, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "PhysAddress")
express110 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 2, 1))
hubNumberofStackedChassis = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubNumberofStackedChassis.setStatus('mandatory')
hubDescriptionString = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 33))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubDescriptionString.setStatus('mandatory')
hubStackReset = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("notreset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hubStackReset.setStatus('mandatory')
hubLCDModeVariable = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("sysName", 1), ("sysLocation", 2), ("sysContact", 3), ("traps", 4), ("utilization", 5), ("ipaddress", 6), ("lcdSleepText", 7), ("notSupported", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hubLCDModeVariable.setStatus('mandatory')
hubLCDSleepText = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hubLCDSleepText.setStatus('mandatory')
hubLCDSleepTime = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hubLCDSleepTime.setStatus('mandatory')
hubRFC1516Segment = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("segment1", 1), ("segment2", 2), ("allsegments", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hubRFC1516Segment.setStatus('mandatory')
chassisConfigTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 8), )
if mibBuilder.loadTexts: chassisConfigTable.setStatus('mandatory')
chassisConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 8, 1), ).setIndexNames((0, "INTEL-EXPRESS110-MIB", "chassisConfigTableIndex"))
if mibBuilder.loadTexts: chassisConfigEntry.setStatus('mandatory')
chassisConfigTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisConfigTableIndex.setStatus('mandatory')
chassisSegmentMode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("segment1", 1), ("segment2", 2), ("auto", 3), ("mixed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisSegmentMode.setStatus('mandatory')
chassisReset = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("notreset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisReset.setStatus('mandatory')
chassisRPSState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notPresent", 1), ("standby", 2), ("active", 3), ("notSupported", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisRPSState.setStatus('mandatory')
chassisIsolate = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("isolate", 1), ("unisolate", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisIsolate.setStatus('mandatory')
moduleConfigStatusTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 9), )
if mibBuilder.loadTexts: moduleConfigStatusTable.setStatus('mandatory')
moduleConfigStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 9, 1), ).setIndexNames((0, "INTEL-EXPRESS110-MIB", "moduleChassisIndex"), (0, "INTEL-EXPRESS110-MIB", "moduleIndex"))
if mibBuilder.loadTexts: moduleConfigStatusEntry.setStatus('mandatory')
moduleChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleChassisIndex.setStatus('mandatory')
moduleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleIndex.setStatus('mandatory')
moduleType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("none", 1), ("hubTXports12", 2), ("hubTXports24", 3), ("reserved4", 4), ("management", 5), ("bridge", 6), ("managementWithRMON", 7), ("reserved8", 8), ("hubcrTXports12", 9), ("hubcrTXports24", 10), ("hubppTXports12", 11), ("hubppTXports24", 12), ("express330TXports16", 13), ("express330TXports24", 14), ("fxUplink", 15), ("txUplink", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleType.setStatus('mandatory')
moduleUserAssignedType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 9, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(24, 24)).setFixedLength(24)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleUserAssignedType.setStatus('mandatory')
moduleUserAssignedNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 9, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(24, 24)).setFixedLength(24)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleUserAssignedNumber.setStatus('mandatory')
moduleUserAssignedName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 9, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(24, 24)).setFixedLength(24)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleUserAssignedName.setStatus('mandatory')
moduleSizeofROM = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSizeofROM.setStatus('mandatory')
moduleSizeofRAM = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSizeofRAM.setStatus('mandatory')
moduleHWDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 9, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(24, 24)).setFixedLength(24)).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleHWDescription.setStatus('mandatory')
moduleAgentSWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 9, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(24, 24)).setFixedLength(24)).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAgentSWVersion.setStatus('mandatory')
moduleBootSWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 9, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(24, 24)).setFixedLength(24)).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBootSWVersion.setStatus('mandatory')
moduleManufacturingInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 9, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(24, 24)).setFixedLength(24)).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleManufacturingInfo.setStatus('mandatory')
moduleTotalPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 9, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleTotalPortCount.setStatus('mandatory')
moduleExternalPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 9, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleExternalPortCount.setStatus('mandatory')
moduleSegmentLockout = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 9, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("yButtonyMgmt", 1), ("nButtonyMgmt", 2), ("yButtonnMgmt", 3), ("nButtonnMgmt", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleSegmentLockout.setStatus('mandatory')
moduleLEDInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 9, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleLEDInfo.setStatus('mandatory')
moduleLastErrorID = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 9, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleLastErrorID.setStatus('mandatory')
moduleMediaDevicesReset = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 9, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("reset", 1), ("notreset", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleMediaDevicesReset.setStatus('mandatory')
moduleImageFileSource = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 9, 1, 19), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleImageFileSource.setStatus('mandatory')
moduleImageFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 9, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleImageFileName.setStatus('mandatory')
moduleImageDownloadControl = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 9, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("start", 1), ("stop", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleImageDownloadControl.setStatus('mandatory')
moduleImageDownloadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 9, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("started", 1), ("stopping", 2), ("completed", 3), ("error", 4), ("notSupported", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleImageDownloadStatus.setStatus('mandatory')
moduleOperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 9, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("operational", 1), ("notoperational", 2), ("notpresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleOperationalStatus.setStatus('mandatory')
moduleUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 9, 1, 24), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleUptime.setStatus('mandatory')
moduleReset = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 9, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("reset", 1), ("notreset", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleReset.setStatus('mandatory')
moduleAllPortLEDInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 9, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAllPortLEDInfo.setStatus('mandatory')
moduleAllPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 9, 1, 27), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleAllPortAdminStatus.setStatus('mandatory')
moduleAllPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 9, 1, 28), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAllPortOperStatus.setStatus('mandatory')
moduleAllPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 9, 1, 29), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAllPortSpeed.setStatus('mandatory')
moduleAllPortSpeedInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 9, 1, 30), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAllPortSpeedInfo.setStatus('mandatory')
moduleSegmentMode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 9, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("segment1", 1), ("segment2", 2), ("auto", 3), ("mixed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleSegmentMode.setStatus('mandatory')
moduleAllPortLinkPartnerInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 9, 1, 32), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAllPortLinkPartnerInfo.setStatus('mandatory')
moduleAllPortCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 9, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("notreset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleAllPortCounterReset.setStatus('mandatory')
moduleAllPortTimeSinceLinkChange = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 9, 1, 34), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAllPortTimeSinceLinkChange.setStatus('mandatory')
modulePersistentMemoryReset = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 9, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("reset", 1), ("notreset", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modulePersistentMemoryReset.setStatus('mandatory')
portConfigTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 10), )
if mibBuilder.loadTexts: portConfigTable.setStatus('mandatory')
portConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 10, 1), ).setIndexNames((0, "INTEL-EXPRESS110-MIB", "portChassisIndex"), (0, "INTEL-EXPRESS110-MIB", "portModuleIndex"), (0, "INTEL-EXPRESS110-MIB", "portIndex"))
if mibBuilder.loadTexts: portConfigEntry.setStatus('mandatory')
portChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portChassisIndex.setStatus('mandatory')
portModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portModuleIndex.setStatus('mandatory')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIndex.setStatus('mandatory')
portType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("twistedPairHalfDuplex", 1), ("twistedPairFullDuplex", 2), ("fiberMultimode", 3), ("fiberSinglemode", 4), ("internalHalfDuplex", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portType.setStatus('mandatory')
portAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portAdminStatus.setStatus('mandatory')
portOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("operational", 1), ("notoperational", 2), ("notpresent", 3), ("violated", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOperStatus.setStatus('mandatory')
portJabber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("failure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portJabber.setStatus('mandatory')
portLinkPartnerInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 10, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLinkPartnerInfo.setStatus('mandatory')
portLEDInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 10, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLEDInfo.setStatus('mandatory')
portTimeSinceLastLinkChange = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 10, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTimeSinceLastLinkChange.setStatus('mandatory')
portAllCountersReset = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("notreset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portAllCountersReset.setStatus('mandatory')
portReset = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("reset", 1), ("notreset", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portReset.setStatus('mandatory')
portLastErrorID = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noError", 1), ("badPhy", 2), ("polarity", 3), ("wrongSpeedLP", 4), ("jabberSeen", 5), ("partition", 6), ("reserved1", 7), ("reserved2", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLastErrorID.setStatus('mandatory')
portSegmentAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("segment1", 1), ("segment2", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSegmentAdminMode.setStatus('mandatory')
portSegmentOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 10, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("segment1", 1), ("segment2", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSegmentOperStatus.setStatus('mandatory')
portLinkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 10, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("mb10", 2), ("mb100", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLinkSpeed.setStatus('mandatory')
portSecureAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 10, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("portSecurityOff", 1), ("portSecurityOn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecureAdminMode.setStatus('mandatory')
portSecureMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 10, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecureMAC.setStatus('mandatory')
portLinkTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 10, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLinkTestState.setStatus('mandatory')
portLinkTestStatusTrapCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLinkTestStatusTrapCtrl.setStatus('mandatory')
portSpeedStatusTrapCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSpeedStatusTrapCtrl.setStatus('mandatory')
portPolarityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 10, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("reversed", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPolarityStatus.setStatus('mandatory')
rptrSegmentConfigTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 11), )
if mibBuilder.loadTexts: rptrSegmentConfigTable.setStatus('mandatory')
rptrSegmentConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 11, 1), ).setIndexNames((0, "INTEL-EXPRESS110-MIB", "rptrSegmentConfigIndex"))
if mibBuilder.loadTexts: rptrSegmentConfigEntry.setStatus('mandatory')
rptrSegmentConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("segment1", 1), ("segment2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSegmentConfigIndex.setStatus('mandatory')
rptrSegmentOperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("rptrFailure", 3), ("groupFailure", 4), ("portFailure", 5), ("generalFailure", 6), ("holdInReset", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSegmentOperationalStatus.setStatus('mandatory')
rptrSegmentZeroCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("notreset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrSegmentZeroCounters.setStatus('mandatory')
rptrSegmentReset = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("reset", 1), ("notreset", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrSegmentReset.setStatus('mandatory')
rptrSegmentResetMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("reset", 1), ("notreset", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrSegmentResetMedia.setStatus('mandatory')
rptrSegmentPartitionThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("collisions64", 1), ("collisions128", 2), ("collisions32", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrSegmentPartitionThreshold.setStatus('mandatory')
rptrSegmentNonDisruptTest = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noSelfTest", 1), ("selfTest", 2), ("notSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrSegmentNonDisruptTest.setStatus('mandatory')
rptrSegmentUtilizationTrapThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 11, 1, 8), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrSegmentUtilizationTrapThreshold.setStatus('mandatory')
rptrSegmentCollisionTrapThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 11, 1, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrSegmentCollisionTrapThreshold.setStatus('mandatory')
rptrSegmentUtilizationTrapPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 11, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrSegmentUtilizationTrapPeriod.setStatus('mandatory')
rptrSegmentCollisionTrapPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 11, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rptrSegmentCollisionTrapPeriod.setStatus('mandatory')
rptrSegmentSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mb10", 1), ("mb100", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSegmentSpeed.setStatus('mandatory')
rptrSegmentStatTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 12), )
if mibBuilder.loadTexts: rptrSegmentStatTable.setStatus('mandatory')
rptrSegmentStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 12, 1), ).setIndexNames((0, "INTEL-EXPRESS110-MIB", "rptrSegmentStatIndex"))
if mibBuilder.loadTexts: rptrSegmentStatEntry.setStatus('mandatory')
rptrSegmentStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("segment1", 1), ("segment2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSegmentStatIndex.setStatus('mandatory')
rptrSegmentTotalFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSegmentTotalFrames.setStatus('mandatory')
rptrSegmentTotalOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSegmentTotalOctets.setStatus('mandatory')
rptrSegmentTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSegmentTotalErrors.setStatus('mandatory')
rptrSegmentTotalCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSegmentTotalCollisions.setStatus('mandatory')
rptrSegmentPartitionedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 12, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSegmentPartitionedPorts.setStatus('mandatory')
rptrSegmentHealthText = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 12, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSegmentHealthText.setStatus('mandatory')
rptrSegmentUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 12, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrSegmentUtilization.setStatus('mandatory')
rptrModuleStatTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 13), )
if mibBuilder.loadTexts: rptrModuleStatTable.setStatus('mandatory')
rptrModuleStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 13, 1), ).setIndexNames((0, "INTEL-EXPRESS110-MIB", "rptrModuleIndex"))
if mibBuilder.loadTexts: rptrModuleStatEntry.setStatus('mandatory')
rptrModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrModuleIndex.setStatus('mandatory')
rptrModuleTotalFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrModuleTotalFrames.setStatus('mandatory')
rptrModuleTotalOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrModuleTotalOctets.setStatus('mandatory')
rptrModuleTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrModuleTotalErrors.setStatus('mandatory')
rptrModuleFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrModuleFCSErrors.setStatus('mandatory')
rptrModuleAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrModuleAlignmentErrors.setStatus('mandatory')
rptrModuleFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrModuleFrameTooLongs.setStatus('mandatory')
rptrModuleShortEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 13, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrModuleShortEvents.setStatus('mandatory')
rptrModuleRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 13, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrModuleRunts.setStatus('mandatory')
rptrModuleCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 13, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrModuleCollisions.setStatus('mandatory')
rptrModuleLateEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 13, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrModuleLateEvents.setStatus('mandatory')
rptrModuleVeryLongEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 13, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrModuleVeryLongEvents.setStatus('mandatory')
rptrModuleDataRateMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 13, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrModuleDataRateMismatches.setStatus('mandatory')
rptrModuleAutoPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 13, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrModuleAutoPartitions.setStatus('mandatory')
rptrPortStatTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 14), )
if mibBuilder.loadTexts: rptrPortStatTable.setStatus('mandatory')
rptrPortStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 14, 1), ).setIndexNames((0, "INTEL-EXPRESS110-MIB", "rptrPortChassisIndex"), (0, "INTEL-EXPRESS110-MIB", "rptrPortIndex"))
if mibBuilder.loadTexts: rptrPortStatEntry.setStatus('mandatory')
rptrPortChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortChassisIndex.setStatus('mandatory')
rptrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortIndex.setStatus('mandatory')
rptrPortPartitionState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("autoPartition", 1), ("notAutoPartition", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortPartitionState.setStatus('mandatory')
rptrPortReadableFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 14, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortReadableFrames.setStatus('mandatory')
rptrPortReadableOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 14, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortReadableOctets.setStatus('mandatory')
rptrPortFcsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 14, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortFcsErrors.setStatus('mandatory')
rptrPortAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 14, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortAlignmentErrors.setStatus('mandatory')
rptrPortFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 14, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortFrameTooLongs.setStatus('mandatory')
rptrPortShortEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 14, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortShortEvents.setStatus('mandatory')
rptrPortRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 14, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortRunts.setStatus('mandatory')
rptrPortCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 14, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortCollisions.setStatus('mandatory')
rptrPortLateEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 14, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortLateEvents.setStatus('mandatory')
rptrPortVeryLongEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 14, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortVeryLongEvents.setStatus('mandatory')
rptrPortDataRateMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 14, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortDataRateMismatches.setStatus('mandatory')
rptrPortAutoPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 14, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortAutoPartitions.setStatus('mandatory')
rptrPortTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 14, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortTotalErrors.setStatus('mandatory')
rptrPortLastMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 14, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortLastMACAddress.setStatus('mandatory')
rptrPortNumberofMACAddressChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 14, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortNumberofMACAddressChanges.setStatus('mandatory')
rptrPortSymbolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 14, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrPortSymbolErrors.setStatus('mandatory')
rptrChassisSegmentStatTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 15), )
if mibBuilder.loadTexts: rptrChassisSegmentStatTable.setStatus('mandatory')
rptrChassisSegmentStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 15, 1), ).setIndexNames((0, "INTEL-EXPRESS110-MIB", "rptrChassisIndex"), (0, "INTEL-EXPRESS110-MIB", "rptrChassisSegmentIndex"))
if mibBuilder.loadTexts: rptrChassisSegmentStatEntry.setStatus('mandatory')
rptrChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrChassisIndex.setStatus('mandatory')
rptrChassisSegmentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrChassisSegmentIndex.setStatus('mandatory')
rptrChassisSegmentTotalFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 15, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrChassisSegmentTotalFrames.setStatus('mandatory')
rptrChassisSegmentTotalOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 15, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrChassisSegmentTotalOctets.setStatus('mandatory')
rptrChassisSegmentTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 15, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrChassisSegmentTotalErrors.setStatus('mandatory')
rptrChassisSegmentFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 15, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrChassisSegmentFCSErrors.setStatus('mandatory')
rptrChassisSegmentAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 15, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrChassisSegmentAlignmentErrors.setStatus('mandatory')
rptrChassisSegmentFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 15, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrChassisSegmentFrameTooLongs.setStatus('mandatory')
rptrChassisSegmentShortEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 15, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrChassisSegmentShortEvents.setStatus('mandatory')
rptrChassisSegmentRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 15, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrChassisSegmentRunts.setStatus('mandatory')
rptrChassisSegmentCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 15, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrChassisSegmentCollisions.setStatus('mandatory')
rptrChassisSegmentLateEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 15, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrChassisSegmentLateEvents.setStatus('mandatory')
rptrChassisSegmentVeryLongEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 15, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrChassisSegmentVeryLongEvents.setStatus('mandatory')
rptrChassisSegmentDataRateMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 15, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrChassisSegmentDataRateMismatches.setStatus('mandatory')
rptrChassisSegmentAutoPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 15, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrChassisSegmentAutoPartitions.setStatus('mandatory')
rptrChassisSegmentSymbolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 15, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rptrChassisSegmentSymbolErrors.setStatus('mandatory')
tBrdgAdminTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 16), )
if mibBuilder.loadTexts: tBrdgAdminTable.setStatus('mandatory')
tBrdgAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 16, 1), ).setIndexNames((0, "INTEL-EXPRESS110-MIB", "tBrdgAdminSpanIndex"))
if mibBuilder.loadTexts: tBrdgAdminEntry.setStatus('mandatory')
tBrdgAdminSpanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tBrdgAdminSpanIndex.setStatus('mandatory')
tBrdgAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tBrdgAdminState.setStatus('mandatory')
tBrdgReset = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("reset", 1), ("resetCounters", 2), ("notreset", 3), ("notSupported", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tBrdgReset.setStatus('mandatory')
tBrdgThrshld = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 16, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tBrdgThrshld.setStatus('mandatory')
tBrdgPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 16, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tBrdgPeriod.setStatus('mandatory')
tBrdgLockout = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("yButtonyMgmt", 1), ("nButtonyMgmt", 2), ("yButtonnMgmt", 3), ("nButtonnMgmt", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tBrdgLockout.setStatus('mandatory')
tBrdgHubId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 16, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tBrdgHubId.setStatus('mandatory')
tBrdgSegments = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 16, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tBrdgSegments.setStatus('mandatory')
tBrdgStatsTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 17), )
if mibBuilder.loadTexts: tBrdgStatsTable.setStatus('mandatory')
tBrdgStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 17, 1), ).setIndexNames((0, "INTEL-EXPRESS110-MIB", "tBrdgStatsSpan"), (0, "INTEL-EXPRESS110-MIB", "tBrdgStatsSegment"))
if mibBuilder.loadTexts: tBrdgStatsEntry.setStatus('mandatory')
tBrdgStatsSpan = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tBrdgStatsSpan.setStatus('mandatory')
tBrdgStatsSegment = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tBrdgStatsSegment.setStatus('mandatory')
tBrdgUtilIn = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 17, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tBrdgUtilIn.setStatus('mandatory')
tBrdgUtilOut = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 17, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tBrdgUtilOut.setStatus('mandatory')
tBrdgBufferFullCount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 17, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tBrdgBufferFullCount.setStatus('mandatory')
stackConfigExtensions = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 18))
stackClearPortSecurity = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: stackClearPortSecurity.setStatus('mandatory')
express_snmp_agents = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19)).setLabel("express-snmp-agents")
e300agentConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 1))
e300agentVendorName = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: e300agentVendorName.setStatus('mandatory')
e300agentProductName = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: e300agentProductName.setStatus('mandatory')
e300agentChassisIndex = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e300agentChassisIndex.setStatus('mandatory')
e300agentModuleIndex = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e300agentModuleIndex.setStatus('mandatory')
e300mibversion = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: e300mibversion.setStatus('mandatory')
e300resetAgent = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("notreset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e300resetAgent.setStatus('mandatory')
e300agentRole = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("primaryAgent", 2), ("backupAgent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e300agentRole.setStatus('mandatory')
e300agentIpBootServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e300agentIpBootServerAddr.setStatus('mandatory')
e300agentIpUnauthAddr = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e300agentIpUnauthAddr.setStatus('mandatory')
e300agentIpUnauthComm = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e300agentIpUnauthComm.setStatus('mandatory')
e300agentIpLastBootServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e300agentIpLastBootServerAddr.setStatus('mandatory')
e300agentIpLastIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e300agentIpLastIpAddr.setStatus('mandatory')
e300ipConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 2))
e300ipAddressMethodInUse = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fixed", 1), ("bootp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e300ipAddressMethodInUse.setStatus('mandatory')
e300ipAddressInUse = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 2, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e300ipAddressInUse.setStatus('mandatory')
e300gatewayorRouterAddrInUse = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 2, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e300gatewayorRouterAddrInUse.setStatus('mandatory')
e300networkMaskInUse = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 2, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e300networkMaskInUse.setStatus('mandatory')
e300broadcastAddressInUse = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 2, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e300broadcastAddressInUse.setStatus('mandatory')
e300ipAddressMethodNextReset = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fixed", 1), ("bootp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e300ipAddressMethodNextReset.setStatus('mandatory')
e300ipAddressNextReset = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 2, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e300ipAddressNextReset.setStatus('mandatory')
e300gatewayorRouterAddrNextReset = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 2, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e300gatewayorRouterAddrNextReset.setStatus('mandatory')
e300networkMaskNextReset = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 2, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e300networkMaskNextReset.setStatus('mandatory')
e300snmpConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 3))
e300snmpReadCommunityString = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: e300snmpReadCommunityString.setStatus('mandatory')
e300snmpWriteCommunityString = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: e300snmpWriteCommunityString.setStatus('mandatory')
e300snmpTrapReceiverMAX = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e300snmpTrapReceiverMAX.setStatus('mandatory')
e300snmpTrapReceiverNumber = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e300snmpTrapReceiverNumber.setStatus('mandatory')
e300snmpTrapAddressTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 3, 5), )
if mibBuilder.loadTexts: e300snmpTrapAddressTable.setStatus('mandatory')
e300snmpTrapAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 3, 5, 1), ).setIndexNames((0, "INTEL-EXPRESS110-MIB", "e300trapAddrIndex"))
if mibBuilder.loadTexts: e300snmpTrapAddressEntry.setStatus('mandatory')
e300trapAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e300trapAddrIndex.setStatus('mandatory')
e300trapIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 3, 5, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e300trapIPAddr.setStatus('mandatory')
e300trapCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 3, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e300trapCommunityString.setStatus('mandatory')
e300trapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("ignore", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e300trapStatus.setStatus('mandatory')
e300agentExtConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 4))
e300agentSwUpdateMode = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("network-load", 2), ("out-of-band-load", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e300agentSwUpdateMode.setStatus('mandatory')
e300agentConfigUpdateCtrl = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e300agentConfigUpdateCtrl.setStatus('mandatory')
e300agentConfigFilename = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e300agentConfigFilename.setStatus('mandatory')
e300agentImageUpdateCtrl = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e300agentImageUpdateCtrl.setStatus('mandatory')
e300agentImageFilename = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e300agentImageFilename.setStatus('mandatory')
e300agentRs232PortConfig = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("console", 2), ("out-of-band", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e300agentRs232PortConfig.setStatus('mandatory')
e300agentOutOfBandBaudRateConfig = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("baudRate-1200", 2), ("baudRate-2400", 3), ("baudRate-9600", 4), ("baudRate-19200", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e300agentOutOfBandBaudRateConfig.setStatus('mandatory')
e300slipConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 5))
e300slipAddressInUse = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 5, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e300slipAddressInUse.setStatus('mandatory')
e300slipGatewayorRouterAddrInUse = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 5, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e300slipGatewayorRouterAddrInUse.setStatus('mandatory')
e300slipNetworkMaskInUse = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 5, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e300slipNetworkMaskInUse.setStatus('mandatory')
e300slipBroadcastAddressInUse = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 5, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e300slipBroadcastAddressInUse.setStatus('mandatory')
e300slipAddressNextReset = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 5, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e300slipAddressNextReset.setStatus('mandatory')
e300slipGatewayorRouterAddrNextReset = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 5, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e300slipGatewayorRouterAddrNextReset.setStatus('mandatory')
e300slipNetworkMaskNextReset = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 5, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e300slipNetworkMaskNextReset.setStatus('mandatory')
e300mgmtBasicInfoTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 6), )
if mibBuilder.loadTexts: e300mgmtBasicInfoTable.setStatus('mandatory')
e300mgmtBasicInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 6, 1), ).setIndexNames((0, "INTEL-EXPRESS110-MIB", "e300mgmtChassisIndex"))
if mibBuilder.loadTexts: e300mgmtBasicInfoEntry.setStatus('mandatory')
e300mgmtChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e300mgmtChassisIndex.setStatus('mandatory')
e300mgmtIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e300mgmtIPAddress.setStatus('mandatory')
e300mgmtPhysicalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 6, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e300mgmtPhysicalAddress.setStatus('mandatory')
e300mgmtRole = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 2, 1, 19, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("primaryAgent", 2), ("backupAgent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e300mgmtRole.setStatus('mandatory')
utilizationThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 2, 1) + (0,0)).setObjects(("INTEL-EXPRESS110-MIB", "rptrSegmentStatIndex"))
collisionThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 2, 1) + (0,1)).setObjects(("INTEL-EXPRESS110-MIB", "rptrSegmentStatIndex"))
configurationChange = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 2, 1) + (0,2)).setObjects(("INTEL-EXPRESS110-MIB", "hubDescriptionString"))
tBrdgBufferFull = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 2, 1) + (0,3))
chassisRPSActive = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 2, 1) + (0,4)).setObjects(("INTEL-EXPRESS110-MIB", "chassisConfigTableIndex"))
portSecurityViolation = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 2, 1) + (0,5)).setObjects(("INTEL-EXPRESS110-MIB", "chassisConfigTableIndex"), ("INTEL-EXPRESS110-MIB", "portIndex"))
mgmtSwitchedToBackupMgmt = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 2, 1) + (0,6)).setObjects(("INTEL-EXPRESS110-MIB", "chassisConfigTableIndex"))
bridgeConfigChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 2, 1) + (0,7)).setObjects(("INTEL-EXPRESS110-MIB", "tBrdgHubId"))
bridgeConfigNoBridgeEvent = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 2, 1) + (0,8))
portlinkChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 2, 1) + (0,9)).setObjects(("INTEL-EXPRESS110-MIB", "portChassisIndex"), ("INTEL-EXPRESS110-MIB", "portModuleIndex"), ("INTEL-EXPRESS110-MIB", "portIndex"), ("INTEL-EXPRESS110-MIB", "portType"), ("INTEL-EXPRESS110-MIB", "portOperStatus"), ("INTEL-EXPRESS110-MIB", "portLinkTestStatusTrapCtrl"))
portSpeedChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 2, 1) + (0,10)).setObjects(("INTEL-EXPRESS110-MIB", "portChassisIndex"), ("INTEL-EXPRESS110-MIB", "portModuleIndex"), ("INTEL-EXPRESS110-MIB", "portIndex"), ("INTEL-EXPRESS110-MIB", "portType"), ("INTEL-EXPRESS110-MIB", "portLinkSpeed"), ("INTEL-EXPRESS110-MIB", "portSpeedStatusTrapCtrl"))
mibBuilder.exportSymbols("INTEL-EXPRESS110-MIB", express_snmp_agents=express_snmp_agents, portAllCountersReset=portAllCountersReset, e300snmpWriteCommunityString=e300snmpWriteCommunityString, tBrdgAdminEntry=tBrdgAdminEntry, rptrModuleTotalFrames=rptrModuleTotalFrames, e300snmpReadCommunityString=e300snmpReadCommunityString, e300networkMaskInUse=e300networkMaskInUse, rptrSegmentTotalOctets=rptrSegmentTotalOctets, rptrSegmentUtilizationTrapThreshold=rptrSegmentUtilizationTrapThreshold, e300slipGatewayorRouterAddrNextReset=e300slipGatewayorRouterAddrNextReset, moduleAllPortSpeed=moduleAllPortSpeed, moduleImageDownloadStatus=moduleImageDownloadStatus, chassisRPSState=chassisRPSState, portModuleIndex=portModuleIndex, rptrChassisSegmentRunts=rptrChassisSegmentRunts, rptrPortVeryLongEvents=rptrPortVeryLongEvents, configurationChange=configurationChange, rptrSegmentHealthText=rptrSegmentHealthText, rptrChassisSegmentVeryLongEvents=rptrChassisSegmentVeryLongEvents, collisionThresholdExceeded=collisionThresholdExceeded, rptrPortAutoPartitions=rptrPortAutoPartitions, moduleAllPortOperStatus=moduleAllPortOperStatus, moduleReset=moduleReset, rptrModuleIndex=rptrModuleIndex, e300slipBroadcastAddressInUse=e300slipBroadcastAddressInUse, stackConfigExtensions=stackConfigExtensions, portJabber=portJabber, e300agentRole=e300agentRole, e300snmpTrapAddressTable=e300snmpTrapAddressTable, rptrPortSymbolErrors=rptrPortSymbolErrors, tBrdgBufferFull=tBrdgBufferFull, hubLCDSleepTime=hubLCDSleepTime, moduleUserAssignedType=moduleUserAssignedType, rptrSegmentZeroCounters=rptrSegmentZeroCounters, rptrPortIndex=rptrPortIndex, rptrChassisSegmentTotalOctets=rptrChassisSegmentTotalOctets, e300agentImageFilename=e300agentImageFilename, moduleHWDescription=moduleHWDescription, rptrChassisSegmentTotalErrors=rptrChassisSegmentTotalErrors, modulePersistentMemoryReset=modulePersistentMemoryReset, tBrdgStatsEntry=tBrdgStatsEntry, e300snmpConfiguration=e300snmpConfiguration, rptrModuleFCSErrors=rptrModuleFCSErrors, hubRFC1516Segment=hubRFC1516Segment, moduleAllPortLinkPartnerInfo=moduleAllPortLinkPartnerInfo, moduleAllPortLEDInfo=moduleAllPortLEDInfo, hubLCDModeVariable=hubLCDModeVariable, rptrPortFrameTooLongs=rptrPortFrameTooLongs, rptrChassisSegmentDataRateMismatches=rptrChassisSegmentDataRateMismatches, rptrSegmentSpeed=rptrSegmentSpeed, chassisSegmentMode=chassisSegmentMode, e300ipAddressMethodNextReset=e300ipAddressMethodNextReset, e300agentConfigFilename=e300agentConfigFilename, e300mgmtPhysicalAddress=e300mgmtPhysicalAddress, rptrSegmentTotalFrames=rptrSegmentTotalFrames, moduleSizeofRAM=moduleSizeofRAM, e300agentModuleIndex=e300agentModuleIndex, e300networkMaskNextReset=e300networkMaskNextReset, e300broadcastAddressInUse=e300broadcastAddressInUse, e300snmpTrapReceiverNumber=e300snmpTrapReceiverNumber, express110=express110, rptrChassisSegmentStatEntry=rptrChassisSegmentStatEntry, e300snmpTrapAddressEntry=e300snmpTrapAddressEntry, chassisIsolate=chassisIsolate, tBrdgPeriod=tBrdgPeriod, moduleManufacturingInfo=moduleManufacturingInfo, rptrChassisSegmentLateEvents=rptrChassisSegmentLateEvents, e300ipConfiguration=e300ipConfiguration, rptrChassisSegmentAlignmentErrors=rptrChassisSegmentAlignmentErrors, rptrPortLateEvents=rptrPortLateEvents, rptrPortLastMACAddress=rptrPortLastMACAddress, moduleSegmentMode=moduleSegmentMode, e300slipAddressNextReset=e300slipAddressNextReset, rptrSegmentTotalErrors=rptrSegmentTotalErrors, portSpeedStatusTrapCtrl=portSpeedStatusTrapCtrl, hubStackReset=hubStackReset, rptrPortFcsErrors=rptrPortFcsErrors, e300trapCommunityString=e300trapCommunityString, rptrChassisSegmentAutoPartitions=rptrChassisSegmentAutoPartitions, moduleExternalPortCount=moduleExternalPortCount, rptrModuleTotalErrors=rptrModuleTotalErrors, e300agentProductName=e300agentProductName, rptrSegmentStatTable=rptrSegmentStatTable, rptrChassisSegmentSymbolErrors=rptrChassisSegmentSymbolErrors, moduleUserAssignedNumber=moduleUserAssignedNumber, portSecureAdminMode=portSecureAdminMode, e300agentConfigUpdateCtrl=e300agentConfigUpdateCtrl, moduleAllPortCounterReset=moduleAllPortCounterReset, rptrChassisSegmentShortEvents=rptrChassisSegmentShortEvents, bridgeConfigChangeEvent=bridgeConfigChangeEvent, rptrChassisSegmentStatTable=rptrChassisSegmentStatTable, e300snmpTrapReceiverMAX=e300snmpTrapReceiverMAX, rptrChassisSegmentFrameTooLongs=rptrChassisSegmentFrameTooLongs, e300agentSwUpdateMode=e300agentSwUpdateMode, rptrChassisIndex=rptrChassisIndex, moduleSizeofROM=moduleSizeofROM, moduleAgentSWVersion=moduleAgentSWVersion, moduleUserAssignedName=moduleUserAssignedName, e300resetAgent=e300resetAgent, e300agentOutOfBandBaudRateConfig=e300agentOutOfBandBaudRateConfig, tBrdgReset=tBrdgReset, tBrdgHubId=tBrdgHubId, e300agentIpBootServerAddr=e300agentIpBootServerAddr, hubNumberofStackedChassis=hubNumberofStackedChassis, moduleBootSWVersion=moduleBootSWVersion, e300agentExtConfiguration=e300agentExtConfiguration, rptrPortPartitionState=rptrPortPartitionState, rptrModuleStatEntry=rptrModuleStatEntry, portLastErrorID=portLastErrorID, rptrSegmentPartitionedPorts=rptrSegmentPartitionedPorts, utilizationThresholdExceeded=utilizationThresholdExceeded, rptrPortAlignmentErrors=rptrPortAlignmentErrors, rptrSegmentCollisionTrapPeriod=rptrSegmentCollisionTrapPeriod, hubDescriptionString=hubDescriptionString, rptrModuleVeryLongEvents=rptrModuleVeryLongEvents, tBrdgStatsSpan=tBrdgStatsSpan, e300mgmtBasicInfoTable=e300mgmtBasicInfoTable, portSecurityViolation=portSecurityViolation, portType=portType, portPolarityStatus=portPolarityStatus, tBrdgUtilIn=tBrdgUtilIn, portIndex=portIndex, tBrdgUtilOut=tBrdgUtilOut, rptrPortCollisions=rptrPortCollisions, e300slipGatewayorRouterAddrInUse=e300slipGatewayorRouterAddrInUse, rptrPortStatTable=rptrPortStatTable, e300mgmtBasicInfoEntry=e300mgmtBasicInfoEntry, portSpeedChangeEvent=portSpeedChangeEvent, chassisReset=chassisReset, rptrModuleLateEvents=rptrModuleLateEvents, tBrdgAdminTable=tBrdgAdminTable, rptrPortNumberofMACAddressChanges=rptrPortNumberofMACAddressChanges, rptrSegmentResetMedia=rptrSegmentResetMedia, rptrModuleShortEvents=rptrModuleShortEvents, e300trapStatus=e300trapStatus, e300ipAddressInUse=e300ipAddressInUse, tBrdgStatsSegment=tBrdgStatsSegment, rptrSegmentNonDisruptTest=rptrSegmentNonDisruptTest, rptrSegmentPartitionThreshold=rptrSegmentPartitionThreshold, moduleLEDInfo=moduleLEDInfo, rptrPortRunts=rptrPortRunts, e300ipAddressMethodInUse=e300ipAddressMethodInUse, e300mgmtChassisIndex=e300mgmtChassisIndex, tBrdgThrshld=tBrdgThrshld, rptrPortStatEntry=rptrPortStatEntry, rptrPortDataRateMismatches=rptrPortDataRateMismatches, moduleAllPortSpeedInfo=moduleAllPortSpeedInfo, rptrPortShortEvents=rptrPortShortEvents, rptrSegmentTotalCollisions=rptrSegmentTotalCollisions, portLinkTestState=portLinkTestState, e300slipNetworkMaskNextReset=e300slipNetworkMaskNextReset, tBrdgSegments=tBrdgSegments, moduleConfigStatusEntry=moduleConfigStatusEntry, portChassisIndex=portChassisIndex, moduleAllPortTimeSinceLinkChange=moduleAllPortTimeSinceLinkChange, portConfigEntry=portConfigEntry, rptrModuleStatTable=rptrModuleStatTable, portLinkTestStatusTrapCtrl=portLinkTestStatusTrapCtrl, stackClearPortSecurity=stackClearPortSecurity, rptrSegmentConfigTable=rptrSegmentConfigTable, rptrChassisSegmentCollisions=rptrChassisSegmentCollisions, e300slipNetworkMaskInUse=e300slipNetworkMaskInUse, e300agentIpUnauthComm=e300agentIpUnauthComm, rptrSegmentStatIndex=rptrSegmentStatIndex, rptrModuleTotalOctets=rptrModuleTotalOctets, rptrPortTotalErrors=rptrPortTotalErrors, moduleIndex=moduleIndex, rptrModuleAlignmentErrors=rptrModuleAlignmentErrors, rptrPortChassisIndex=rptrPortChassisIndex, e300agentIpLastIpAddr=e300agentIpLastIpAddr, portLinkSpeed=portLinkSpeed, e300agentIpLastBootServerAddr=e300agentIpLastBootServerAddr, tBrdgAdminSpanIndex=tBrdgAdminSpanIndex, e300trapIPAddr=e300trapIPAddr, rptrChassisSegmentTotalFrames=rptrChassisSegmentTotalFrames, tBrdgAdminState=tBrdgAdminState, portLinkPartnerInfo=portLinkPartnerInfo, moduleChassisIndex=moduleChassisIndex, chassisConfigTable=chassisConfigTable, rptrPortReadableFrames=rptrPortReadableFrames, e300slipAddressInUse=e300slipAddressInUse, e300agentImageUpdateCtrl=e300agentImageUpdateCtrl, portLEDInfo=portLEDInfo, rptrModuleAutoPartitions=rptrModuleAutoPartitions, rptrModuleCollisions=rptrModuleCollisions, portSecureMAC=portSecureMAC, rptrSegmentConfigEntry=rptrSegmentConfigEntry, moduleConfigStatusTable=moduleConfigStatusTable, moduleImageDownloadControl=moduleImageDownloadControl, e300agentVendorName=e300agentVendorName, tBrdgStatsTable=tBrdgStatsTable, moduleMediaDevicesReset=moduleMediaDevicesReset, rptrSegmentOperationalStatus=rptrSegmentOperationalStatus, mgmtSwitchedToBackupMgmt=mgmtSwitchedToBackupMgmt, chassisConfigTableIndex=chassisConfigTableIndex, portlinkChangeEvent=portlinkChangeEvent, e300agentIpUnauthAddr=e300agentIpUnauthAddr, rptrPortReadableOctets=rptrPortReadableOctets, portSegmentOperStatus=portSegmentOperStatus, tBrdgBufferFullCount=tBrdgBufferFullCount, rptrSegmentStatEntry=rptrSegmentStatEntry, rptrModuleDataRateMismatches=rptrModuleDataRateMismatches, moduleLastErrorID=moduleLastErrorID, rptrSegmentReset=rptrSegmentReset, moduleOperationalStatus=moduleOperationalStatus, hubLCDSleepText=hubLCDSleepText, rptrSegmentUtilizationTrapPeriod=rptrSegmentUtilizationTrapPeriod, e300mgmtRole=e300mgmtRole, portConfigTable=portConfigTable, portTimeSinceLastLinkChange=portTimeSinceLastLinkChange, portOperStatus=portOperStatus, e300agentRs232PortConfig=e300agentRs232PortConfig, tBrdgLockout=tBrdgLockout, moduleTotalPortCount=moduleTotalPortCount, portAdminStatus=portAdminStatus, moduleUptime=moduleUptime, moduleSegmentLockout=moduleSegmentLockout, rptrModuleFrameTooLongs=rptrModuleFrameTooLongs, portReset=portReset, e300trapAddrIndex=e300trapAddrIndex, e300agentChassisIndex=e300agentChassisIndex, e300gatewayorRouterAddrNextReset=e300gatewayorRouterAddrNextReset, rptrModuleRunts=rptrModuleRunts, e300slipConfiguration=e300slipConfiguration, rptrChassisSegmentIndex=rptrChassisSegmentIndex, bridgeConfigNoBridgeEvent=bridgeConfigNoBridgeEvent, rptrChassisSegmentFCSErrors=rptrChassisSegmentFCSErrors, e300gatewayorRouterAddrInUse=e300gatewayorRouterAddrInUse, moduleType=moduleType, moduleAllPortAdminStatus=moduleAllPortAdminStatus, portSegmentAdminMode=portSegmentAdminMode, rptrSegmentUtilization=rptrSegmentUtilization, rptrSegmentCollisionTrapThreshold=rptrSegmentCollisionTrapThreshold, e300mgmtIPAddress=e300mgmtIPAddress, e300mibversion=e300mibversion, rptrSegmentConfigIndex=rptrSegmentConfigIndex, moduleImageFileSource=moduleImageFileSource, moduleImageFileName=moduleImageFileName, chassisConfigEntry=chassisConfigEntry, e300agentConfiguration=e300agentConfiguration, chassisRPSActive=chassisRPSActive, e300ipAddressNextReset=e300ipAddressNextReset)
