#
# PySNMP MIB module FC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:58:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, ModuleIdentity, iso, ObjectIdentity, TimeTicks, Bits, MibIdentifier, Unsigned32, IpAddress, Integer32, Counter64, enterprises, NotificationType, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ModuleIdentity", "iso", "ObjectIdentity", "TimeTicks", "Bits", "MibIdentifier", "Unsigned32", "IpAddress", "Integer32", "Counter64", "enterprises", "NotificationType", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
fastcomm = MibIdentifier((1, 3, 6, 1, 4, 1, 635))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 1))
registration = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2))
temporary = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 3))
frameRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 1, 2))
snmpAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 1, 3))
fcQuick = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 1, 4))
fsFrad = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 1, 2, 1))
quick2 = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 1, 4, 1))
fcFradReg = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1))
cdQuickReg = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 2))
fcFrad433Reg = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 3))
fastcomm_F9500_S1 = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 2, 1)).setLabel("fastcomm-F9500-S1")
fastcomm_F9500_S3 = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 2, 2)).setLabel("fastcomm-F9500-S3")
fastcomm_F9500_S5 = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 2, 3)).setLabel("fastcomm-F9500-S5")
fastcomm_F9500_D1 = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 2, 4)).setLabel("fastcomm-F9500-D1")
fastcomm_F9500_D3 = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 2, 5)).setLabel("fastcomm-F9500-D3")
fastcomm_F9500_D5 = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 2, 6)).setLabel("fastcomm-F9500-D5")
fastcomm_F9100_SN_NI = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 1)).setLabel("fastcomm-F9100-SN-NI")
fastcomm_F9100_SN_NE = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 2)).setLabel("fastcomm-F9100-SN-NE")
fastcomm_F9100_DN_NI = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 3)).setLabel("fastcomm-F9100-DN-NI")
fastcomm_F9100_DN_NE = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 4)).setLabel("fastcomm-F9100-DN-NE")
fastcomm_F9100_TN_NE = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 5)).setLabel("fastcomm-F9100-TN-NE")
fastcomm_F9100_EN_NE = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 6)).setLabel("fastcomm-F9100-EN-NE")
fastcomm_F9100_SQ_NI = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 11)).setLabel("fastcomm-F9100-SQ-NI")
fastcomm_F9100_SQ_NL = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 12)).setLabel("fastcomm-F9100-SQ-NL")
fastcomm_F9100_DQ_NI = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 13)).setLabel("fastcomm-F9100-DQ-NI")
fastcomm_F9100_DQ_NL = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 14)).setLabel("fastcomm-F9100-DQ-NL")
fastcomm_F9100_SM_NI = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 15)).setLabel("fastcomm-F9100-SM-NI")
fastcomm_F9100_DM_NI = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 16)).setLabel("fastcomm-F9100-DM-NI")
fastcomm_F9200_SR_NI = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 21)).setLabel("fastcomm-F9200-SR-NI")
fastcomm_F9200_SR_NL = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 22)).setLabel("fastcomm-F9200-SR-NL")
fastcomm_F9200_DR_NI = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 23)).setLabel("fastcomm-F9200-DR-NI")
fastcomm_F9200_DR_NL = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 24)).setLabel("fastcomm-F9200-DR-NL")
fastcomm_F9200_SS_NI = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 25)).setLabel("fastcomm-F9200-SS-NI")
fastcomm_F9200_SS_NE = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 26)).setLabel("fastcomm-F9200-SS-NE")
fastcomm_F9200_DS_NI = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 27)).setLabel("fastcomm-F9200-DS-NI")
fastcomm_F9200_DS_NE = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 28)).setLabel("fastcomm-F9200-DS-NE")
fastcomm_F9200_SN_NI = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 30)).setLabel("fastcomm-F9200-SN-NI")
fastcomm_F9200_SN_NE = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 31)).setLabel("fastcomm-F9200-SN-NE")
fastcomm_F9200_DN_NI = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 32)).setLabel("fastcomm-F9200-DN-NI")
fastcomm_F9200_DN_NE = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 33)).setLabel("fastcomm-F9200-DN-NE")
fastcomm_F9100_SW_NI = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 41)).setLabel("fastcomm-F9100-SW-NI")
fastcomm_F9100_SW_NL = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 42)).setLabel("fastcomm-F9100-SW-NL")
fastcomm_F9100_DW_NI = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 43)).setLabel("fastcomm-F9100-DW-NI")
fastcomm_F9100_DW_NL = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 44)).setLabel("fastcomm-F9100-DW-NL")
fastcomm_F9100_SV_NI = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 45)).setLabel("fastcomm-F9100-SV-NI")
fastcomm_F9100_SV_NE = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 46)).setLabel("fastcomm-F9100-SV-NE")
fastcomm_F9100_DV_NI = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 47)).setLabel("fastcomm-F9100-DV-NI")
fastcomm_F9100_DV_NE = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 48)).setLabel("fastcomm-F9100-DV-NE")
fastcomm_F9100_SN_NW = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 50)).setLabel("fastcomm-F9100-SN-NW")
fastcomm_F9100_DN_NW = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 51)).setLabel("fastcomm-F9100-DN-NW")
fastcomm_F9200_SN_NW = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 52)).setLabel("fastcomm-F9200-SN-NW")
fastcomm_F9200_DN_NW = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 53)).setLabel("fastcomm-F9200-DN-NW")
fastcomm_F9200_TN_NI = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 60)).setLabel("fastcomm-F9200-TN-NI")
fastcomm_F9200_TN_NE = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 61)).setLabel("fastcomm-F9200-TN-NE")
fastcomm_F9200_TS_NI = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 62)).setLabel("fastcomm-F9200-TS-NI")
fastcomm_F9200_TS_NE = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 63)).setLabel("fastcomm-F9200-TS-NE")
fastcomm_F9200_TR_NI = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 64)).setLabel("fastcomm-F9200-TR-NI")
fastcomm_F9200_TR_NL = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 65)).setLabel("fastcomm-F9200-TR-NL")
fastcomm_F9200_TN_NW = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 66)).setLabel("fastcomm-F9200-TN-NW")
fastcomm_F9200_TM_NI = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 67)).setLabel("fastcomm-F9200-TM-NI")
fastcomm_F9200_TM_NL = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 68)).setLabel("fastcomm-F9200-TM-NL")
fastcomm_F9200_EN_NI = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 70)).setLabel("fastcomm-F9200-EN-NI")
fastcomm_F9200_EN_NE = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 71)).setLabel("fastcomm-F9200-EN-NE")
fastcomm_F9200_ES_NI = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 72)).setLabel("fastcomm-F9200-ES-NI")
fastcomm_F9200_ES_NE = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 73)).setLabel("fastcomm-F9200-ES-NE")
fastcomm_F9200_ER_NI = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 74)).setLabel("fastcomm-F9200-ER-NI")
fastcomm_F9200_ER_NL = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 75)).setLabel("fastcomm-F9200-ER-NL")
fastcomm_F9200_EN_NW = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 76)).setLabel("fastcomm-F9200-EN-NW")
fastcomm_F9200_EM_NI = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 77)).setLabel("fastcomm-F9200-EM-NI")
fastcomm_F9200_EM_NL = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 78)).setLabel("fastcomm-F9200-EM-NL")
fastcomm_F9200_SM_NI = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 80)).setLabel("fastcomm-F9200-SM-NI")
fastcomm_F9200_SM_NL = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 81)).setLabel("fastcomm-F9200-SM-NL")
fastcomm_F9200_DM_NI = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 82)).setLabel("fastcomm-F9200-DM-NI")
fastcomm_F9200_DM_NL = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 83)).setLabel("fastcomm-F9200-DM-NL")
fastcomm_F9900_GS = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 1, 84)).setLabel("fastcomm-F9900-GS")
fastcomm_F9100_MO_NN = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 3, 1)).setLabel("fastcomm-F9100-MO-NN")
fastcomm_F9100_MO_NS = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 3, 2)).setLabel("fastcomm-F9100-MO-NS")
fastcomm_F9100_MO_NX = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 3, 3)).setLabel("fastcomm-F9100-MO-NX")
fastcomm_F9100_TO_KN = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 3, 4)).setLabel("fastcomm-F9100-TO-KN")
fastcomm_F9100_TO_KS = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 3, 5)).setLabel("fastcomm-F9100-TO-KS")
fastcomm_F9100_TO_KX = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 3, 6)).setLabel("fastcomm-F9100-TO-KX")
fastcomm_F9200_ET_HN = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 3, 7)).setLabel("fastcomm-F9200-ET-HN")
fastcomm_F9200_ET_HS = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 3, 8)).setLabel("fastcomm-F9200-ET-HS")
fastcomm_F9200_ET_HX = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 3, 9)).setLabel("fastcomm-F9200-ET-HX")
fastcomm_F9200_IS_DS = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 3, 10)).setLabel("fastcomm-F9200-IS-DS")
fastcomm_F9200_IS_DX = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 3, 11)).setLabel("fastcomm-F9200-IS-DX")
fastcomm_F9200_ALC = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 3, 12)).setLabel("fastcomm-F9200-ALC")
fastcomm_F9200_INET = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 3, 13)).setLabel("fastcomm-F9200-INET")
fastcomm_SY1_DM_NI = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 3, 14)).setLabel("fastcomm-SY1-DM-NI")
fastcomm_SY1_DN_NI = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 3, 15)).setLabel("fastcomm-SY1-DN-NI")
fastcomm_SY1_DQ_NI = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 3, 16)).setLabel("fastcomm-SY1-DQ-NI")
fastcomm_SY1_DV_NI = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 3, 17)).setLabel("fastcomm-SY1-DV-NI")
fastcomm_SY1_DW_NI = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 3, 18)).setLabel("fastcomm-SY1-DW-NI")
fastcomm_SY1_SM_NI = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 3, 19)).setLabel("fastcomm-SY1-SM-NI")
fastcomm_SY1_SV_NI = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 3, 20)).setLabel("fastcomm-SY1-SV-NI")
fastcomm_SY1_SW_NI = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 3, 21)).setLabel("fastcomm-SY1-SW-NI")
fastcomm_SY2_DR_NI = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 3, 22)).setLabel("fastcomm-SY2-DR-NI")
fastcomm_GTEDRNL = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 3, 23)).setLabel("fastcomm-GTEDRNL")
fastcomm_NETLDR = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 3, 24)).setLabel("fastcomm-NETLDR")
fastcomm_NNOSNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 3, 25)).setLabel("fastcomm-NNOSNMP")
fastcomm_NOPPPNA = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 3, 26)).setLabel("fastcomm-NOPPPNA")
fastcomm_NOPPPNB = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 3, 27)).setLabel("fastcomm-NOPPPNB")
fastcomm_NOX25NA = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 3, 28)).setLabel("fastcomm-NOX25NA")
fastcomm_NOX25NB = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 3, 29)).setLabel("fastcomm-NOX25NB")
fastcomm_NTNONEA = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 3, 30)).setLabel("fastcomm-NTNONEA")
fastcomm_NTNONEB = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 3, 31)).setLabel("fastcomm-NTNONEB")
fastcomm_PRODUCTS = MibIdentifier((1, 3, 6, 1, 4, 1, 635, 2, 3, 40)).setLabel("fastcomm-PRODUCTS")
snmpMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 635, 1, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpMibVersion.setStatus('mandatory')
snmpAgentIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 635, 1, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentIpAddr.setStatus('mandatory')
snmpAgentName = MibScalar((1, 3, 6, 1, 4, 1, 635, 1, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentName.setStatus('mandatory')
snmpAgentGetCommunity = MibScalar((1, 3, 6, 1, 4, 1, 635, 1, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentGetCommunity.setStatus('mandatory')
snmpAgentSetCommunity = MibScalar((1, 3, 6, 1, 4, 1, 635, 1, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentSetCommunity.setStatus('mandatory')
snmpAgentDefaultTrapIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 635, 1, 3, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentDefaultTrapIpAddr.setStatus('mandatory')
snmpAgentTrapSendTable = MibTable((1, 3, 6, 1, 4, 1, 635, 1, 3, 7), )
if mibBuilder.loadTexts: snmpAgentTrapSendTable.setStatus('mandatory')
snmpAgentTrapTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 635, 1, 3, 7, 1), ).setIndexNames((0, "FC-MIB", "trapTableIndex"))
if mibBuilder.loadTexts: snmpAgentTrapTableEntry.setStatus('mandatory')
trapTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 635, 1, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapTableIndex.setStatus('mandatory')
trapSendIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 635, 1, 3, 7, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapSendIPAddress.setStatus('mandatory')
trapTableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 635, 1, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("view", 1), ("add", 2), ("delete", 3), ("modify", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapTableStatus.setStatus('mandatory')
snmpAgentTrapMessageDesc = MibScalar((1, 3, 6, 1, 4, 1, 635, 1, 3, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAgentTrapMessageDesc.setStatus('mandatory')
snmpTrapDefineTable = MibTable((1, 3, 6, 1, 4, 1, 635, 1, 3, 9), )
if mibBuilder.loadTexts: snmpTrapDefineTable.setStatus('mandatory')
snmpTrapDefineTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 635, 1, 3, 9, 1), ).setIndexNames((0, "FC-MIB", "trapDefIndex"))
if mibBuilder.loadTexts: snmpTrapDefineTableEntry.setStatus('mandatory')
trapDefIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 635, 1, 3, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapDefIndex.setStatus('mandatory')
trapDefDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 635, 1, 3, 9, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDefDesc.setStatus('mandatory')
trapDefOid = MibTableColumn((1, 3, 6, 1, 4, 1, 635, 1, 3, 9, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDefOid.setStatus('mandatory')
trapDefTrapType = MibTableColumn((1, 3, 6, 1, 4, 1, 635, 1, 3, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDefTrapType.setStatus('mandatory')
trapDefTriggerType = MibTableColumn((1, 3, 6, 1, 4, 1, 635, 1, 3, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("simple", 1), ("range", 2), ("time", 3), ("relative", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDefTriggerType.setStatus('mandatory')
trapDefSimpleTrigValue = MibTableColumn((1, 3, 6, 1, 4, 1, 635, 1, 3, 9, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDefSimpleTrigValue.setStatus('mandatory')
trapDefSimpleTrigCond = MibTableColumn((1, 3, 6, 1, 4, 1, 635, 1, 3, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("lESS-THAN", 1), ("eQUAL-TO", 2), ("gREATER-THAN", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDefSimpleTrigCond.setStatus('mandatory')
trapDefRangeValueHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 635, 1, 3, 9, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDefRangeValueHigh.setStatus('mandatory')
trapDefRangeValueLow = MibTableColumn((1, 3, 6, 1, 4, 1, 635, 1, 3, 9, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDefRangeValueLow.setStatus('mandatory')
trapDefTimeTrigValue = MibTableColumn((1, 3, 6, 1, 4, 1, 635, 1, 3, 9, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDefTimeTrigValue.setStatus('mandatory')
trapDefTimeDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 635, 1, 3, 9, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDefTimeDuration.setStatus('mandatory')
trapDefRelativeOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 635, 1, 3, 9, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDefRelativeOccur.setStatus('mandatory')
trapDefRelativeOID = MibTableColumn((1, 3, 6, 1, 4, 1, 635, 1, 3, 9, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDefRelativeOID.setStatus('mandatory')
trapDefRelativeRefOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 635, 1, 3, 9, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDefRelativeRefOccur.setStatus('mandatory')
trapDefReTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 635, 1, 3, 9, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("automatic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDefReTrigger.setStatus('mandatory')
trapDefTrigPri = MibTableColumn((1, 3, 6, 1, 4, 1, 635, 1, 3, 9, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("critical", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDefTrigPri.setStatus('mandatory')
trapDefStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 635, 1, 3, 9, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("view", 1), ("add", 2), ("delete", 3), ("modify", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDefStatus.setStatus('mandatory')
mibBuilder.exportSymbols("FC-MIB", fastcomm=fastcomm, fastcomm_F9500_D3=fastcomm_F9500_D3, fastcomm_SY1_DQ_NI=fastcomm_SY1_DQ_NI, fastcomm_SY1_DM_NI=fastcomm_SY1_DM_NI, fastcomm_F9200_TM_NL=fastcomm_F9200_TM_NL, fastcomm_F9100_TN_NE=fastcomm_F9100_TN_NE, trapDefIndex=trapDefIndex, fastcomm_NOX25NA=fastcomm_NOX25NA, trapDefRelativeOID=trapDefRelativeOID, fastcomm_NOX25NB=fastcomm_NOX25NB, fastcomm_F9200_SN_NE=fastcomm_F9200_SN_NE, fastcomm_F9200_SM_NL=fastcomm_F9200_SM_NL, fastcomm_F9200_ET_HX=fastcomm_F9200_ET_HX, trapDefTimeDuration=trapDefTimeDuration, snmpAgentSetCommunity=snmpAgentSetCommunity, fastcomm_F9100_SW_NL=fastcomm_F9100_SW_NL, snmpAgentName=snmpAgentName, quick2=quick2, trapDefStatus=trapDefStatus, fastcomm_F9200_DN_NE=fastcomm_F9200_DN_NE, fastcomm_SY1_SV_NI=fastcomm_SY1_SV_NI, trapDefSimpleTrigValue=trapDefSimpleTrigValue, trapDefTriggerType=trapDefTriggerType, trapDefRangeValueLow=trapDefRangeValueLow, trapTableIndex=trapTableIndex, trapSendIPAddress=trapSendIPAddress, fastcomm_F9200_ES_NE=fastcomm_F9200_ES_NE, cdQuickReg=cdQuickReg, fastcomm_F9200_DM_NI=fastcomm_F9200_DM_NI, fastcomm_F9200_SS_NE=fastcomm_F9200_SS_NE, fastcomm_SY1_DW_NI=fastcomm_SY1_DW_NI, fastcomm_F9500_D5=fastcomm_F9500_D5, fastcomm_F9500_D1=fastcomm_F9500_D1, fastcomm_F9500_S1=fastcomm_F9500_S1, fcQuick=fcQuick, fastcomm_F9100_SM_NI=fastcomm_F9100_SM_NI, fastcomm_F9100_TO_KX=fastcomm_F9100_TO_KX, fastcomm_F9200_EN_NW=fastcomm_F9200_EN_NW, fastcomm_F9100_DV_NI=fastcomm_F9100_DV_NI, fastcomm_F9200_EN_NE=fastcomm_F9200_EN_NE, fastcomm_F9200_EM_NI=fastcomm_F9200_EM_NI, snmpAgentIpAddr=snmpAgentIpAddr, fastcomm_F9100_DW_NI=fastcomm_F9100_DW_NI, frameRelay=frameRelay, fsFrad=fsFrad, fastcomm_NOPPPNB=fastcomm_NOPPPNB, fastcomm_NNOSNMP=fastcomm_NNOSNMP, fastcomm_NTNONEA=fastcomm_NTNONEA, fastcomm_F9100_DQ_NL=fastcomm_F9100_DQ_NL, snmpAgentGetCommunity=snmpAgentGetCommunity, fastcomm_F9200_ES_NI=fastcomm_F9200_ES_NI, fastcomm_F9200_SR_NI=fastcomm_F9200_SR_NI, fastcomm_F9200_DM_NL=fastcomm_F9200_DM_NL, fastcomm_F9100_SQ_NI=fastcomm_F9100_SQ_NI, snmpTrapDefineTable=snmpTrapDefineTable, fastcomm_F9200_SS_NI=fastcomm_F9200_SS_NI, fastcomm_F9100_DN_NW=fastcomm_F9100_DN_NW, fcFradReg=fcFradReg, fastcomm_F9200_SM_NI=fastcomm_F9200_SM_NI, fastcomm_F9100_SV_NI=fastcomm_F9100_SV_NI, fcFrad433Reg=fcFrad433Reg, trapDefTimeTrigValue=trapDefTimeTrigValue, trapDefReTrigger=trapDefReTrigger, fastcomm_SY1_DN_NI=fastcomm_SY1_DN_NI, fastcomm_F9100_SV_NE=fastcomm_F9100_SV_NE, fastcomm_NETLDR=fastcomm_NETLDR, fastcomm_F9200_TM_NI=fastcomm_F9200_TM_NI, snmpTrapDefineTableEntry=snmpTrapDefineTableEntry, fastcomm_F9100_DN_NI=fastcomm_F9100_DN_NI, fastcomm_F9200_TN_NW=fastcomm_F9200_TN_NW, fastcomm_SY1_SW_NI=fastcomm_SY1_SW_NI, fastcomm_NOPPPNA=fastcomm_NOPPPNA, trapDefDesc=trapDefDesc, fastcomm_F9200_DR_NI=fastcomm_F9200_DR_NI, fastcomm_F9200_INET=fastcomm_F9200_INET, snmpAgentTrapTableEntry=snmpAgentTrapTableEntry, snmpMibVersion=snmpMibVersion, trapDefRangeValueHigh=trapDefRangeValueHigh, fastcomm_F9100_SN_NW=fastcomm_F9100_SN_NW, fastcomm_F9200_DS_NI=fastcomm_F9200_DS_NI, fastcomm_F9100_DN_NE=fastcomm_F9100_DN_NE, fastcomm_F9200_SN_NI=fastcomm_F9200_SN_NI, fastcomm_NTNONEB=fastcomm_NTNONEB, fastcomm_F9200_TS_NI=fastcomm_F9200_TS_NI, trapDefTrapType=trapDefTrapType, fastcomm_F9100_DM_NI=fastcomm_F9100_DM_NI, fastcomm_F9200_ALC=fastcomm_F9200_ALC, fastcomm_F9100_DV_NE=fastcomm_F9100_DV_NE, fastcomm_F9200_TN_NI=fastcomm_F9200_TN_NI, fastcomm_F9200_DN_NW=fastcomm_F9200_DN_NW, fastcomm_F9100_MO_NX=fastcomm_F9100_MO_NX, fastcomm_F9200_TN_NE=fastcomm_F9200_TN_NE, fastcomm_F9100_MO_NN=fastcomm_F9100_MO_NN, fastcomm_F9200_DN_NI=fastcomm_F9200_DN_NI, fastcomm_F9200_ET_HS=fastcomm_F9200_ET_HS, trapDefTrigPri=trapDefTrigPri, fastcomm_F9200_TR_NL=fastcomm_F9200_TR_NL, fastcomm_F9500_S5=fastcomm_F9500_S5, fastcomm_F9200_DS_NE=fastcomm_F9200_DS_NE, fastcomm_SY1_DV_NI=fastcomm_SY1_DV_NI, fastcomm_F9100_SN_NE=fastcomm_F9100_SN_NE, temporary=temporary, fastcomm_F9200_IS_DX=fastcomm_F9200_IS_DX, fastcomm_F9200_SR_NL=fastcomm_F9200_SR_NL, fastcomm_F9100_TO_KN=fastcomm_F9100_TO_KN, fastcomm_PRODUCTS=fastcomm_PRODUCTS, fastcomm_F9200_DR_NL=fastcomm_F9200_DR_NL, fastcomm_F9200_TS_NE=fastcomm_F9200_TS_NE, fastcomm_F9200_EN_NI=fastcomm_F9200_EN_NI, trapDefRelativeOccur=trapDefRelativeOccur, fastcomm_F9200_IS_DS=fastcomm_F9200_IS_DS, fastcomm_F9100_MO_NS=fastcomm_F9100_MO_NS, fastcomm_F9500_S3=fastcomm_F9500_S3, fastcomm_F9200_TR_NI=fastcomm_F9200_TR_NI, fastcomm_F9100_EN_NE=fastcomm_F9100_EN_NE, snmpAgentDefaultTrapIpAddr=snmpAgentDefaultTrapIpAddr, fastcomm_F9100_DW_NL=fastcomm_F9100_DW_NL, fastcomm_F9100_TO_KS=fastcomm_F9100_TO_KS, snmpAgent=snmpAgent, fastcomm_F9200_ER_NL=fastcomm_F9200_ER_NL, snmpAgentTrapMessageDesc=snmpAgentTrapMessageDesc, trapDefRelativeRefOccur=trapDefRelativeRefOccur, fastcomm_SY2_DR_NI=fastcomm_SY2_DR_NI, trapTableStatus=trapTableStatus, fastcomm_F9200_EM_NL=fastcomm_F9200_EM_NL, fastcomm_F9900_GS=fastcomm_F9900_GS, fastcomm_F9100_SN_NI=fastcomm_F9100_SN_NI, fastcomm_F9200_ET_HN=fastcomm_F9200_ET_HN, trapDefOid=trapDefOid, trapDefSimpleTrigCond=trapDefSimpleTrigCond, fastcomm_F9100_SW_NI=fastcomm_F9100_SW_NI, products=products, fastcomm_F9200_SN_NW=fastcomm_F9200_SN_NW, registration=registration, fastcomm_GTEDRNL=fastcomm_GTEDRNL, fastcomm_F9100_DQ_NI=fastcomm_F9100_DQ_NI, fastcomm_F9200_ER_NI=fastcomm_F9200_ER_NI, fastcomm_SY1_SM_NI=fastcomm_SY1_SM_NI, fastcomm_F9100_SQ_NL=fastcomm_F9100_SQ_NL, snmpAgentTrapSendTable=snmpAgentTrapSendTable)
