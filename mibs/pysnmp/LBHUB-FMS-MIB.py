#
# PySNMP MIB module LBHUB-FMS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LBHUB-FMS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:55:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
rpMauMediaAvailable, rptrPortAutoPartitionState = mibBuilder.importSymbols("MAU-MIB", "rpMauMediaAvailable", "rptrPortAutoPartitionState")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Counter64, NotificationType, ModuleIdentity, Gauge32, Integer32, mgmt, ObjectIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, IpAddress, NotificationType, enterprises, Counter32, MibIdentifier, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter64", "NotificationType", "ModuleIdentity", "Gauge32", "Integer32", "mgmt", "ObjectIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "IpAddress", "NotificationType", "enterprises", "Counter32", "MibIdentifier", "Unsigned32")
PhysAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "TextualConvention", "DisplayString")
mib_2 = MibIdentifier((1, 3, 6, 1, 2, 1)).setLabel("mib-2")
class DisplayString(OctetString):
    pass

class PhysAddress(OctetString):
    pass

system = MibIdentifier((1, 3, 6, 1, 2, 1, 1))
interfaces = MibIdentifier((1, 3, 6, 1, 2, 1, 2))
at = MibIdentifier((1, 3, 6, 1, 2, 1, 3))
ip = MibIdentifier((1, 3, 6, 1, 2, 1, 4))
icmp = MibIdentifier((1, 3, 6, 1, 2, 1, 5))
tcp = MibIdentifier((1, 3, 6, 1, 2, 1, 6))
udp = MibIdentifier((1, 3, 6, 1, 2, 1, 7))
egp = MibIdentifier((1, 3, 6, 1, 2, 1, 8))
transmission = MibIdentifier((1, 3, 6, 1, 2, 1, 10))
snmp = MibIdentifier((1, 3, 6, 1, 2, 1, 11))
dot1dBridge = MibIdentifier((1, 3, 6, 1, 2, 1, 17))
a3Com = MibIdentifier((1, 3, 6, 1, 4, 1, 43))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1))
terminalServer = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 1))
dedicatedBridgeServer = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 2))
dedicatedRouteServer = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 3))
brouter = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 4))
genericMSWorkstation = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 5))
genericMSServer = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 6))
genericUnixServer = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 7))
hub = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 8))
cards = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9))
chipsets = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 10))
linkBuilder3GH = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 8, 1))
linkBuilder10BTi = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 8, 2))
linkBuilderECS = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 8, 3))
linkBuilderMSH = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 8, 4))
linkBuilderFMS = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 8, 5))
linkBuilderFDDIwg = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 8, 6))
linkBuilderFMSII = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 8, 7))
linkSwitchFMS = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 8, 8))
linkSwitchMSH = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 8, 9))
linkBuilderFMSLBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 8, 10))
linkBuilder3GH_cards = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 1)).setLabel("linkBuilder3GH-cards")
linkBuilder10BTi_cards = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 2)).setLabel("linkBuilder10BTi-cards")
linkBuilderECS_cards = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 3)).setLabel("linkBuilderECS-cards")
linkBuilderMSH_cards = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 4)).setLabel("linkBuilderMSH-cards")
linkBuilderFMS_cards = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 5)).setLabel("linkBuilderFMS-cards")
linkBuilderFMSII_cards = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 6)).setLabel("linkBuilderFMSII-cards")
linkBuilder10BTi_cards_utp = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 2, 1)).setLabel("linkBuilder10BTi-cards-utp")
linkBuilder10BT_cards_utp = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 2, 2)).setLabel("linkBuilder10BT-cards-utp")
linkBuilderFMS_cards_utp = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 5, 1)).setLabel("linkBuilderFMS-cards-utp")
linkBuilderFMS_cards_coax = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 5, 2)).setLabel("linkBuilderFMS-cards-coax")
linkBuilderFMS_cards_fiber = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 5, 3)).setLabel("linkBuilderFMS-cards-fiber")
linkBuilderFMS_cards_12fiber = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 5, 4)).setLabel("linkBuilderFMS-cards-12fiber")
linkBuilderFMS_cards_24utp = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 5, 5)).setLabel("linkBuilderFMS-cards-24utp")
linkBuilderFMSII_cards_12tp_rj45 = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 6, 1)).setLabel("linkBuilderFMSII-cards-12tp-rj45")
linkBuilderFMSII_cards_10coax_bnc = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 6, 2)).setLabel("linkBuilderFMSII-cards-10coax-bnc")
linkBuilderFMSII_cards_6fiber_st = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 6, 3)).setLabel("linkBuilderFMSII-cards-6fiber-st")
linkBuilderFMSII_cards_12fiber_st = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 6, 4)).setLabel("linkBuilderFMSII-cards-12fiber-st")
linkBuilderFMSII_cards_24tp_rj45 = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 6, 5)).setLabel("linkBuilderFMSII-cards-24tp-rj45")
linkBuilderFMSII_cards_24tp_telco = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 1, 9, 6, 6)).setLabel("linkBuilderFMSII-cards-24tp-telco")
amp_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 3)).setLabel("amp-mib")
genericTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 4))
viewBuilderApps = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 5))
specificTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 6))
linkBuilder3GH_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 7)).setLabel("linkBuilder3GH-mib")
linkBuilder10BTi_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 8)).setLabel("linkBuilder10BTi-mib")
linkBuilderECS_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 9)).setLabel("linkBuilderECS-mib")
generic = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10))
genExperimental = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 1))
setup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 2))
sysLoader = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 3))
security = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 4))
gauges = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 5))
asciiAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 6))
serialIf = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 7))
repeaterMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 8))
endStation = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 9))
localSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 10))
manager = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 11))
unusedGeneric12 = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 12))
chassis = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 14))
mrmResilience = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 15))
tokenRing = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 16))
multiRepeater = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 17))
bridgeMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 18))
fault = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 19))
poll = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 20))
powerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 21))
testData = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 1, 1))
ifExtensions = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 1, 2))
netBuilder_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 11)).setLabel("netBuilder-mib")
lBridgeECS_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 12)).setLabel("lBridgeECS-mib")
deskMan_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 13)).setLabel("deskMan-mib")
linkBuilderMSH_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 14)).setLabel("linkBuilderMSH-mib")
linkBuilderFMS_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 15)).setLabel("linkBuilderFMS-mib")
linkBuilderFDDI_wghub_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 16)).setLabel("linkBuilderFDDI-wghub-mib")
linkSwitch_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 17)).setLabel("linkSwitch-mib")
linkbuilderMonitorPackage = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 8, 1))
linkbuilderConfigPackage = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 8, 2))
linkbuilderStatusPackage = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 8, 3))
linkbuilderMonitorMacPackage = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 8, 6))
vmMonBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 43, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("low", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmMonBatteryStatus.setStatus('mandatory')
vmMonPOSTResults = MibScalar((1, 3, 6, 1, 4, 1, 43, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmMonPOSTResults.setStatus('mandatory')
vmMonFault = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 8, 1, 3))
vmMonFaultModifiedFlag = MibScalar((1, 3, 6, 1, 4, 1, 43, 8, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clean-read", 1), ("modified", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmMonFaultModifiedFlag.setStatus('deprecated')
vmMonFaultTable = MibTable((1, 3, 6, 1, 4, 1, 43, 8, 1, 3, 2), )
if mibBuilder.loadTexts: vmMonFaultTable.setStatus('deprecated')
vmMonFaultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 8, 1, 3, 2, 1), ).setIndexNames((0, "LBHUB-FMS-MIB", "vmMonFaultIndex"))
if mibBuilder.loadTexts: vmMonFaultEntry.setStatus('deprecated')
vmMonFaultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmMonFaultIndex.setStatus('deprecated')
vmMonFaultErrorNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 1, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmMonFaultErrorNumber.setStatus('deprecated')
vmMonFaultTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 1, 3, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmMonFaultTimeStamp.setStatus('deprecated')
vmMonFaultRestartCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmMonFaultRestartCount.setStatus('deprecated')
vmMonDvtEcho = MibScalar((1, 3, 6, 1, 4, 1, 43, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: vmMonDvtEcho.setStatus('deprecated')
vmMonMgmtBusOverrunError = MibScalar((1, 3, 6, 1, 4, 1, 43, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmMonMgmtBusOverrunError.setStatus('deprecated')
vmMonMgmtBusFramingError = MibScalar((1, 3, 6, 1, 4, 1, 43, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmMonMgmtBusFramingError.setStatus('deprecated')
vmMonMgmtBusOverflowError = MibScalar((1, 3, 6, 1, 4, 1, 43, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmMonMgmtBusOverflowError.setStatus('deprecated')
vmMonMgmtBusFiFoFullCounter = MibScalar((1, 3, 6, 1, 4, 1, 43, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmMonMgmtBusFiFoFullCounter.setStatus('deprecated')
vmConfigGroupTable = MibTable((1, 3, 6, 1, 4, 1, 43, 8, 2, 2), )
if mibBuilder.loadTexts: vmConfigGroupTable.setStatus('deprecated')
vmConfigGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 8, 2, 2, 1), ).setIndexNames((0, "LBHUB-FMS-MIB", "vmConGroupIndex"))
if mibBuilder.loadTexts: vmConfigGroupEntry.setStatus('deprecated')
vmConGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmConGroupIndex.setStatus('deprecated')
vmConGroupPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmConGroupPortMask.setStatus('deprecated')
vmConfigPortTable = MibTable((1, 3, 6, 1, 4, 1, 43, 8, 2, 3), )
if mibBuilder.loadTexts: vmConfigPortTable.setStatus('deprecated')
vmConfigPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 8, 2, 3, 1), ).setIndexNames((0, "LBHUB-FMS-MIB", "vmConPortGroupIndex"), (0, "LBHUB-FMS-MIB", "vmConPortIndex"))
if mibBuilder.loadTexts: vmConfigPortEntry.setStatus('deprecated')
vmConPortGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmConPortGroupIndex.setStatus('deprecated')
vmConPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmConPortIndex.setStatus('deprecated')
vmConPortSquelch = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("low", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmConPortSquelch.setStatus('deprecated')
vmConPortLinkPulse = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmConPortLinkPulse.setStatus('deprecated')
vmConPortXoverSwitchState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("normal", 2), ("crossed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmConPortXoverSwitchState.setStatus('deprecated')
vmConPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 32, 40, 41, 50, 60))).clone(namedValues=NamedValues(("fms-FixedTP", 1), ("fms-FixedCoax", 2), ("fms-FixedFibreFL", 3), ("fms-ModularBridge", 4), ("fms-ModularMaleAUI", 8), ("fms-ModularFMaleAUI", 9), ("fms-ModularCoax", 10), ("fms-ModularFibreFL", 11), ("fms-ModularUTP", 12), ("fms-ModularSTP", 13), ("fms-ModularFibreFB", 14), ("fms-AUI", 15), ("bti-FixedUTP", 32), ("bti-ModularFibreFL", 40), ("bti-ModularCoax", 41), ("bti-AUI", 50), ("unknown", 60)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmConPortType.setStatus('deprecated')
vmConfigMediaTable = MibTable((1, 3, 6, 1, 4, 1, 43, 8, 2, 4), )
if mibBuilder.loadTexts: vmConfigMediaTable.setStatus('deprecated')
vmConfigMediaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 8, 2, 4, 1), ).setIndexNames((0, "LBHUB-FMS-MIB", "vmConMediaIndex"))
if mibBuilder.loadTexts: vmConfigMediaEntry.setStatus('deprecated')
vmConMediaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmConMediaIndex.setStatus('deprecated')
vmConMediaModuleRevNo = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmConMediaModuleRevNo.setStatus('deprecated')
vmConMediaModuleCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 14, 15, 30, 31, 65, 66, 67, 68, 69, 70, 71))).clone(namedValues=NamedValues(("fms-12Port-UTP", 1), ("fms-10Port-Coax", 2), ("fms-12Port-Fibre", 3), ("fms-6Port-Fibre", 4), ("fms-24PortUTP", 5), ("bt-12Port-UTP-Rev2", 14), ("bt-12Port-UTP-Rev1", 15), ("bti-12Port-UTP-Rev2", 30), ("bti-12Port-UTP-Rev1", 31), ("fmsII-12Port-TP-RJ45", 65), ("fmsII-10Port-Coax", 66), ("fmsII-12Port-Fibre", 67), ("fmsII-6Port-Fibre", 68), ("fmsII-24Port-TP-RJ45", 69), ("fmsII-24Port-TP-Telco", 70), ("fmsII-RMON-Box", 71)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmConMediaModuleCardType.setStatus('deprecated')
vmMacMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 43, 8, 6, 1), )
if mibBuilder.loadTexts: vmMacMonitorTable.setStatus('deprecated')
vmMacMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 8, 6, 1, 1), ).setIndexNames((0, "LBHUB-FMS-MIB", "vmMacMonitorIndex"))
if mibBuilder.loadTexts: vmMacMonitorEntry.setStatus('deprecated')
vmMacMonitorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmMacMonitorIndex.setStatus('deprecated')
vmMacMonitorMissErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 6, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmMacMonitorMissErrors.setStatus('deprecated')
vmMacMonitorBabbleErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 6, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmMacMonitorBabbleErrors.setStatus('deprecated')
vmMacMonitorMemoryErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 6, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmMacMonitorMemoryErrors.setStatus('deprecated')
vmMacMonitorFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 6, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmMacMonitorFCSErrors.setStatus('deprecated')
vmMacMonitorOverflowErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 6, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmMacMonitorOverflowErrors.setStatus('deprecated')
vmMacMonitorFramingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 6, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmMacMonitorFramingErrors.setStatus('deprecated')
vmMacMonitorRetryErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 6, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmMacMonitorRetryErrors.setStatus('deprecated')
vmMacMonitorLateEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 6, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmMacMonitorLateEvents.setStatus('deprecated')
vmMacMonitorLCarErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 6, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmMacMonitorLCarErrors.setStatus('deprecated')
vmMacMonitorUnderflowErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 6, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmMacMonitorUnderflowErrors.setStatus('deprecated')
vmMauMediaAvailable = NotificationType((1, 3, 6, 1, 4, 1, 43) + (0,25)).setObjects(("MAU-MIB", "rpMauMediaAvailable"))
vmAutoPartitionState = NotificationType((1, 3, 6, 1, 4, 1, 43) + (0,26)).setObjects(("MAU-MIB", "rptrPortAutoPartitionState"))
pddrmBasicPackage = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 8, 1))
pddrmMonitorPackage = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 8, 2))
pddrmBasRepeaterPackage = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 8, 1, 1))
pddrmBasGroupPackage = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 8, 1, 2))
pddrmBasPortPackage = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 8, 1, 3))
pddrmMonRepeaterPackage = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 1))
pddrmMonGroupPackage = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 2))
pddrmMonPortPackage = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 3))
pddrmMonRepeaterDummyPackage = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 4))
pddrmMonGroupDummyPackage = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 5))
pddrmMonPortDummyPackage = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 6))
pddrmMonRepeaterReadableFrames = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pddrmMonRepeaterReadableFrames.setStatus('deprecated')
pddrmMonRepeaterReadableOctets = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pddrmMonRepeaterReadableOctets.setStatus('deprecated')
pddrmMonRepeaterFCSErrors = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pddrmMonRepeaterFCSErrors.setStatus('deprecated')
pddrmMonRepeaterAlignmentErrors = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pddrmMonRepeaterAlignmentErrors.setStatus('deprecated')
pddrmMonRepeaterFrameTooLongs = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pddrmMonRepeaterFrameTooLongs.setStatus('deprecated')
pddrmMonRepeaterShortEvents = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pddrmMonRepeaterShortEvents.setStatus('deprecated')
pddrmMonRepeaterRunts = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pddrmMonRepeaterRunts.setStatus('deprecated')
pddrmMonRepeaterCollisions = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pddrmMonRepeaterCollisions.setStatus('deprecated')
pddrmMonRepeaterLateEvents = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pddrmMonRepeaterLateEvents.setStatus('deprecated')
pddrmMonRepeaterVeryLongEvents = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pddrmMonRepeaterVeryLongEvents.setStatus('deprecated')
pddrmMonRepeaterDataRateMismatches = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pddrmMonRepeaterDataRateMismatches.setStatus('deprecated')
pddrmMonRepeaterAutoPartitions = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pddrmMonRepeaterAutoPartitions.setStatus('deprecated')
pddrmMonRepeaterUniCastFrames = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pddrmMonRepeaterUniCastFrames.setStatus('deprecated')
pddrmMonRepeaterMultiCastFrames = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pddrmMonRepeaterMultiCastFrames.setStatus('deprecated')
pddrmMonRepeaterBroadCastFrames = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pddrmMonRepeaterBroadCastFrames.setStatus('deprecated')
pddrmMonRepeaterClearCounters = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noChangeCounters", 1), ("clearCounters", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: pddrmMonRepeaterClearCounters.setStatus('deprecated')
pddrmMonRepeaterMediaAvailableTraps = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enableMediaTraps", 1), ("disableMediaTraps", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pddrmMonRepeaterMediaAvailableTraps.setStatus('deprecated')
pddrmMonRepeaterAutoPartitionTraps = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enablePartitionTraps", 1), ("disablePartitionTraps", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pddrmMonRepeaterAutoPartitionTraps.setStatus('deprecated')
pddrmMonRepeaterTotalErrors = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pddrmMonRepeaterTotalErrors.setStatus('deprecated')
pddrmMonitorGroupTable = MibTable((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 2, 1), )
if mibBuilder.loadTexts: pddrmMonitorGroupTable.setStatus('deprecated')
pddrmMonitorGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 2, 1, 1), ).setIndexNames((0, "LBHUB-FMS-MIB", "pddrmMonGroupIndex"))
if mibBuilder.loadTexts: pddrmMonitorGroupEntry.setStatus('deprecated')
pddrmMonGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pddrmMonGroupIndex.setStatus('deprecated')
pddrmMonGroupFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pddrmMonGroupFCSErrors.setStatus('deprecated')
pddrmMonGroupAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pddrmMonGroupAlignmentErrors.setStatus('deprecated')
pddrmMonGroupFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pddrmMonGroupFrameTooLongs.setStatus('deprecated')
pddrmMonGroupShortEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pddrmMonGroupShortEvents.setStatus('deprecated')
pddrmMonGroupRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pddrmMonGroupRunts.setStatus('deprecated')
pddrmMonGroupCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pddrmMonGroupCollisions.setStatus('deprecated')
pddrmMonGroupLateEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pddrmMonGroupLateEvents.setStatus('deprecated')
pddrmMonGroupVeryLongEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pddrmMonGroupVeryLongEvents.setStatus('deprecated')
pddrmMonGroupDataRateMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pddrmMonGroupDataRateMismatches.setStatus('deprecated')
pddrmMonGroupAutoPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pddrmMonGroupAutoPartitions.setStatus('deprecated')
pddrmMonGroupUniCastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pddrmMonGroupUniCastFrames.setStatus('deprecated')
pddrmMonGroupMultiCastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pddrmMonGroupMultiCastFrames.setStatus('deprecated')
pddrmMonGroupBroadCastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pddrmMonGroupBroadCastFrames.setStatus('deprecated')
pddrmMonGroupClearCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noChangeCounters", 1), ("clearCounters", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: pddrmMonGroupClearCounters.setStatus('deprecated')
pddrmMonitorPortTable = MibTable((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 3, 1), )
if mibBuilder.loadTexts: pddrmMonitorPortTable.setStatus('deprecated')
pddrmMonitorPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 3, 1, 1), ).setIndexNames((0, "LBHUB-FMS-MIB", "pddrmMonPortGroupIndex"), (0, "LBHUB-FMS-MIB", "pddrmMonPortIndex"))
if mibBuilder.loadTexts: pddrmMonitorPortEntry.setStatus('deprecated')
pddrmMonPortGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pddrmMonPortGroupIndex.setStatus('deprecated')
pddrmMonPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pddrmMonPortIndex.setStatus('deprecated')
pddrmMonPortUniCastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pddrmMonPortUniCastFrames.setStatus('deprecated')
pddrmMonPortMultiCastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pddrmMonPortMultiCastFrames.setStatus('deprecated')
pddrmMonPortBroadCastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pddrmMonPortBroadCastFrames.setStatus('deprecated')
pddrmMonPortClearCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noChangeCounters", 1), ("clearCounters", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: pddrmMonPortClearCounters.setStatus('deprecated')
pddrmMonPortESTFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("filter", 1), ("pass", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pddrmMonPortESTFilter.setStatus('deprecated')
pddrmMonPortMediaAvailableTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enableMediaTraps", 1), ("disableMediaTraps", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pddrmMonPortMediaAvailableTraps.setStatus('deprecated')
pddrmMonPortAutoPartitionTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 8, 2, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enablePartitionTraps", 1), ("disablePartitionTraps", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pddrmMonPortAutoPartitionTraps.setStatus('deprecated')
deprSnmpDot3RptrMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 8, 4))
deprRptrBasicPackage = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 8, 4, 1))
deprRptrMonitorPackage = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 8, 4, 2))
deprRptrAddrTrackPackage = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 8, 4, 3))
deprRptrRptrInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 8, 4, 1, 1))
deprRptrGroupInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 8, 4, 1, 2))
deprRptrPortInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 8, 4, 1, 3))
deprRptrMonitorRptrInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 8, 4, 2, 1))
deprRptrMonitorGroupInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 8, 4, 2, 2))
deprRptrMonitorPortInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 8, 4, 2, 3))
deprRptrAddrTrackRptrInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 8, 4, 3, 1))
deprRptrAddrTrackGroupInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 8, 4, 3, 2))
deprRptrAddrTrackPortInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 8, 4, 3, 3))
deprRptrGroupCapacity = MibScalar((1, 3, 6, 1, 4, 1, 43, 8, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRptrGroupCapacity.setStatus('deprecated')
deprRptrOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 43, 8, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("rptrFailure", 3), ("groupFailure", 4), ("portFailure", 5), ("generalFailure", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRptrOperStatus.setStatus('deprecated')
deprRptrHealthText = MibScalar((1, 3, 6, 1, 4, 1, 43, 8, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRptrHealthText.setStatus('deprecated')
deprRptrReset = MibScalar((1, 3, 6, 1, 4, 1, 43, 8, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deprRptrReset.setStatus('deprecated')
deprRptrNonDisruptTest = MibScalar((1, 3, 6, 1, 4, 1, 43, 8, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noSelfTest", 1), ("selfTest", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deprRptrNonDisruptTest.setStatus('deprecated')
deprRptrTotalPartitionedPorts = MibScalar((1, 3, 6, 1, 4, 1, 43, 8, 4, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRptrTotalPartitionedPorts.setStatus('deprecated')
deprRptrGroupTable = MibTable((1, 3, 6, 1, 4, 1, 43, 8, 4, 1, 2, 1), )
if mibBuilder.loadTexts: deprRptrGroupTable.setStatus('deprecated')
deprRptrGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 8, 4, 1, 2, 1, 1), ).setIndexNames((0, "LBHUB-FMS-MIB", "deprRptrGroupIndex"))
if mibBuilder.loadTexts: deprRptrGroupEntry.setStatus('deprecated')
deprRptrGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 4, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRptrGroupIndex.setStatus('deprecated')
deprRptrGroupDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 4, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRptrGroupDescr.setStatus('deprecated')
deprRptrGroupObjectID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 4, 1, 2, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRptrGroupObjectID.setStatus('deprecated')
deprRptrGroupOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 4, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("operational", 2), ("malFunctioning", 3), ("notPresent", 4), ("undertest", 5), ("resetInProgress", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRptrGroupOperStatus.setStatus('deprecated')
deprRptrGroupLastOperStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 4, 1, 2, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRptrGroupLastOperStatusChange.setStatus('deprecated')
deprRptrGroupPortCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 4, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRptrGroupPortCapacity.setStatus('deprecated')
deprRptrPortTable = MibTable((1, 3, 6, 1, 4, 1, 43, 8, 4, 1, 3, 1), )
if mibBuilder.loadTexts: deprRptrPortTable.setStatus('deprecated')
deprRptrPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 8, 4, 1, 3, 1, 1), ).setIndexNames((0, "LBHUB-FMS-MIB", "deprRptrPortGroupIndex"), (0, "LBHUB-FMS-MIB", "deprRptrPortIndex"))
if mibBuilder.loadTexts: deprRptrPortEntry.setStatus('deprecated')
deprRptrPortGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 4, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRptrPortGroupIndex.setStatus('deprecated')
deprRptrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 4, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRptrPortIndex.setStatus('deprecated')
deprRptrPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 4, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deprRptrPortAdminStatus.setStatus('deprecated')
deprRptrPortAutoPartitionState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 4, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("autoPartitioned", 1), ("notAutoPartitioned", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRptrPortAutoPartitionState.setStatus('deprecated')
deprRptrPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 4, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("operational", 1), ("notOperational", 2), ("notPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRptrPortOperStatus.setStatus('deprecated')
deprRptrMonitorTransmitCollisions = MibScalar((1, 3, 6, 1, 4, 1, 43, 8, 4, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRptrMonitorTransmitCollisions.setStatus('deprecated')
deprRptrMonitorGroupTable = MibTable((1, 3, 6, 1, 4, 1, 43, 8, 4, 2, 2, 1), )
if mibBuilder.loadTexts: deprRptrMonitorGroupTable.setStatus('deprecated')
deprRptrMonitorGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 8, 4, 2, 2, 1, 1), ).setIndexNames((0, "LBHUB-FMS-MIB", "deprRptrMonitorGroupIndex"))
if mibBuilder.loadTexts: deprRptrMonitorGroupEntry.setStatus('deprecated')
deprRptrMonitorGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 4, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRptrMonitorGroupIndex.setStatus('deprecated')
deprRptrMonitorGroupTotalFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 4, 2, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRptrMonitorGroupTotalFrames.setStatus('deprecated')
deprRptrMonitorGroupTotalOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 4, 2, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRptrMonitorGroupTotalOctets.setStatus('deprecated')
deprRptrMonitorGroupTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 4, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRptrMonitorGroupTotalErrors.setStatus('deprecated')
deprRptrMonitorPortTable = MibTable((1, 3, 6, 1, 4, 1, 43, 8, 4, 2, 3, 1), )
if mibBuilder.loadTexts: deprRptrMonitorPortTable.setStatus('deprecated')
deprRptrMonitorPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 8, 4, 2, 3, 1, 1), ).setIndexNames((0, "LBHUB-FMS-MIB", "deprRptrMonitorPortGroupIndex"), (0, "LBHUB-FMS-MIB", "deprRptrMonitorPortIndex"))
if mibBuilder.loadTexts: deprRptrMonitorPortEntry.setStatus('deprecated')
deprRptrMonitorPortGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 4, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRptrMonitorPortGroupIndex.setStatus('deprecated')
deprRptrMonitorPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 4, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRptrMonitorPortIndex.setStatus('deprecated')
deprRptrMonitorPortReadableFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 4, 2, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRptrMonitorPortReadableFrames.setStatus('deprecated')
deprRptrMonitorPortReadableOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 4, 2, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRptrMonitorPortReadableOctets.setStatus('deprecated')
deprRptrMonitorPortFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 4, 2, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRptrMonitorPortFCSErrors.setStatus('deprecated')
deprRptrMonitorPortAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 4, 2, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRptrMonitorPortAlignmentErrors.setStatus('deprecated')
deprRptrMonitorPortFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 4, 2, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRptrMonitorPortFrameTooLongs.setStatus('deprecated')
deprRptrMonitorPortShortEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 4, 2, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRptrMonitorPortShortEvents.setStatus('deprecated')
deprRptrMonitorPortRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 4, 2, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRptrMonitorPortRunts.setStatus('deprecated')
deprRptrMonitorPortCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 4, 2, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRptrMonitorPortCollisions.setStatus('deprecated')
deprRptrMonitorPortLateEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 4, 2, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRptrMonitorPortLateEvents.setStatus('deprecated')
deprRptrMonitorPortVeryLongEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 4, 2, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRptrMonitorPortVeryLongEvents.setStatus('deprecated')
deprRptrMonitorPortDataRateMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 4, 2, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRptrMonitorPortDataRateMismatches.setStatus('deprecated')
deprRptrMonitorPortAutoPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 4, 2, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRptrMonitorPortAutoPartitions.setStatus('deprecated')
deprRptrMonitorPortTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 4, 2, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRptrMonitorPortTotalErrors.setStatus('deprecated')
deprRptrAddrTrackTable = MibTable((1, 3, 6, 1, 4, 1, 43, 8, 4, 3, 3, 1), )
if mibBuilder.loadTexts: deprRptrAddrTrackTable.setStatus('deprecated')
deprRptrAddrTrackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 8, 4, 3, 3, 1, 1), ).setIndexNames((0, "LBHUB-FMS-MIB", "deprRptrAddrTrackGroupIndex"), (0, "LBHUB-FMS-MIB", "deprRptrAddrTrackPortIndex"))
if mibBuilder.loadTexts: deprRptrAddrTrackEntry.setStatus('deprecated')
deprRptrAddrTrackGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 4, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRptrAddrTrackGroupIndex.setStatus('deprecated')
deprRptrAddrTrackPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 4, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRptrAddrTrackPortIndex.setStatus('deprecated')
deprRptrAddrTrackLastSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 4, 3, 3, 1, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRptrAddrTrackLastSourceAddress.setStatus('deprecated')
deprRptrAddrTrackSourceAddrChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 4, 3, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRptrAddrTrackSourceAddrChanges.setStatus('deprecated')
deprRptrHealth = NotificationType((1, 3, 6, 1, 4, 1, 43) + (0,1)).setObjects(("LBHUB-FMS-MIB", "deprRptrOperStatus"))
deprRptrGroupChange = NotificationType((1, 3, 6, 1, 4, 1, 43) + (0,2)).setObjects(("LBHUB-FMS-MIB", "deprRptrGroupIndex"))
deprRptrResetEvent = NotificationType((1, 3, 6, 1, 4, 1, 43) + (0,3)).setObjects(("LBHUB-FMS-MIB", "deprRptrOperStatus"))
deprSnmpDot3RpMauMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 8, 5))
deprRpMauBasicGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 8, 5, 1))
deprRpMauTable = MibTable((1, 3, 6, 1, 4, 1, 43, 8, 5, 1, 1), )
if mibBuilder.loadTexts: deprRpMauTable.setStatus('deprecated')
deprRpMauEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 8, 5, 1, 1, 1), ).setIndexNames((0, "LBHUB-FMS-MIB", "deprRpMauGroupIndex"), (0, "LBHUB-FMS-MIB", "deprRpMauPortIndex"), (0, "LBHUB-FMS-MIB", "deprRpMauIndex"))
if mibBuilder.loadTexts: deprRpMauEntry.setStatus('deprecated')
deprRpMauGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 5, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRpMauGroupIndex.setStatus('deprecated')
deprRpMauPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 5, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRpMauPortIndex.setStatus('deprecated')
deprRpMauIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 5, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRpMauIndex.setStatus('deprecated')
deprRpMauType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 5, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 7, 8, 9, 10, 14, 16, 17, 18))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("aui", 7), ("tenbase5", 8), ("foirl", 9), ("tenbase2", 10), ("tenbaseT", 14), ("tenbaseFP", 16), ("tenbaseFB", 17), ("tenbaseFL", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRpMauType.setStatus('deprecated')
deprRpMauAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 5, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("operational", 3), ("standby", 4), ("shutdown", 5), ("reset", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deprRpMauAdminState.setStatus('deprecated')
deprRpMauMediaAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 5, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("present", 3), ("notPresent", 4), ("remoteFault", 5), ("invalidSignal", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRpMauMediaAvailable.setStatus('deprecated')
deprRpMauLostMedias = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 5, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRpMauLostMedias.setStatus('deprecated')
deprRpMauJabberState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 5, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("noJabber", 3), ("jabbering", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRpMauJabberState.setStatus('deprecated')
deprRpMauJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 8, 5, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deprRpMauJabbers.setStatus('deprecated')
deprRpMauJabberTrap = NotificationType((1, 3, 6, 1, 4, 1, 43) + (0,24)).setObjects(("LBHUB-FMS-MIB", "deprRptrOperStatus"))
faultModifiedFlag = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 19, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clean-read", 1), ("modified", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: faultModifiedFlag.setStatus('mandatory')
faultTable = MibTable((1, 3, 6, 1, 4, 1, 43, 10, 19, 2), )
if mibBuilder.loadTexts: faultTable.setStatus('mandatory')
faultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 10, 19, 2, 1), ).setIndexNames((0, "LBHUB-FMS-MIB", "faultIndex"))
if mibBuilder.loadTexts: faultEntry.setStatus('mandatory')
faultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 19, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faultIndex.setStatus('mandatory')
faultErrorNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 19, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faultErrorNumber.setStatus('mandatory')
faultTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 19, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faultTimeStamp.setStatus('mandatory')
faultRestartCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 19, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: faultRestartCount.setStatus('mandatory')
mrmBasicPackage = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 17, 1))
mrmMonitorPackage = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 17, 2))
mrmBasCardPackage = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 17, 1, 1))
mrmBasPortPackage = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 17, 1, 2))
mrmMonRepeaterPackage = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 1))
mrmMonCardPackage = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 2))
mrmMonPortPackage = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 3))
mrmMonDummyPackage = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 4))
mrmMonRepeaterSmartPackage = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 5))
mrmMonCardSmartPackage = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 6))
mrmMonPortSmartPackage = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 7))
mrmCardTable = MibTable((1, 3, 6, 1, 4, 1, 43, 10, 17, 1, 1, 1), )
if mibBuilder.loadTexts: mrmCardTable.setStatus('mandatory')
mrmCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 10, 17, 1, 1, 1, 1), ).setIndexNames((0, "LBHUB-FMS-MIB", "mrmCardServiceId"), (0, "LBHUB-FMS-MIB", "mrmCardIndex"))
if mibBuilder.loadTexts: mrmCardEntry.setStatus('mandatory')
mrmCardServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmCardServiceId.setStatus('mandatory')
mrmCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 1, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmCardIndex.setStatus('mandatory')
mrmCardPortCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmCardPortCapacity.setStatus('mandatory')
mrmCardTest = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noTest", 1), ("test", 2), ("testing", 3), ("passed", 4), ("failed", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrmCardTest.setStatus('mandatory')
mrmCardDOBPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmCardDOBPorts.setStatus('mandatory')
mrmCardMDIenable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("mdiDisabled", 2), ("mdiEnabled", 3), ("notApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmCardMDIenable.setStatus('mandatory')
mrmPortTable = MibTable((1, 3, 6, 1, 4, 1, 43, 10, 17, 1, 2, 1), )
if mibBuilder.loadTexts: mrmPortTable.setStatus('mandatory')
mrmPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 10, 17, 1, 2, 1, 1), ).setIndexNames((0, "LBHUB-FMS-MIB", "mrmPortServiceId"), (0, "LBHUB-FMS-MIB", "mrmPortCardIndex"), (0, "LBHUB-FMS-MIB", "mrmPortIndex"))
if mibBuilder.loadTexts: mrmPortEntry.setStatus('mandatory')
mrmPortServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmPortServiceId.setStatus('mandatory')
mrmPortCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 1, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmPortCardIndex.setStatus('mandatory')
mrmPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmPortIndex.setStatus('mandatory')
mrmPortInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("maleAUI", 2), ("femaleAUI", 3), ("thinCoax", 4), ("twistedPair", 5), ("unshieldedTP", 6), ("fiber", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmPortInterfaceType.setStatus('mandatory')
mrmPortConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("rj45", 2), ("telco", 3), ("st", 4), ("sma", 5), ("dtype-15", 6), ("bnc", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmPortConnectorType.setStatus('mandatory')
mrmPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrmPortAdminStatus.setStatus('mandatory')
mrmPortAutoPartitionState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("partitioned", 1), ("unpartitioned", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmPortAutoPartitionState.setStatus('mandatory')
mrmPortLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("absent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmPortLinkState.setStatus('mandatory')
mrmPortBootState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmPortBootState.setStatus('mandatory')
mrmPortESTFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 127, 128))).clone(namedValues=NamedValues(("forwardMAC", 1), ("forwardIP", 2), ("forwardAll", 127), ("forwardNone", 128)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrmPortESTFilter.setStatus('mandatory')
mrmPortPartitionEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrmPortPartitionEvent.setStatus('mandatory')
mrmPortLinkStateEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrmPortLinkStateEvent.setStatus('mandatory')
mrmPortSecurityAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("available", 1), ("notAvailable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmPortSecurityAvailable.setStatus('mandatory')
mrmPortLinkPulse = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrmPortLinkPulse.setStatus('mandatory')
mrmPortModule = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("modularPort", 2), ("notModularPort", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmPortModule.setStatus('mandatory')
mrmPortDUDAction = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 1, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("notify", 2), ("disconnect", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrmPortDUDAction.setStatus('mandatory')
mrmPortFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 1, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("repeater", 2), ("bridge", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmPortFunction.setStatus('mandatory')
mrmMonitorRepTable = MibTable((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 1, 1), )
if mibBuilder.loadTexts: mrmMonitorRepTable.setStatus('mandatory')
mrmMonitorRepEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 1, 1, 1), ).setIndexNames((0, "LBHUB-FMS-MIB", "mrmMonRepServiceId"))
if mibBuilder.loadTexts: mrmMonitorRepEntry.setStatus('mandatory')
mrmMonRepServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonRepServiceId.setStatus('mandatory')
mrmMonRepReadableFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonRepReadableFrames.setStatus('mandatory')
mrmMonRepUnicastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonRepUnicastFrames.setStatus('mandatory')
mrmMonRepMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonRepMulticastFrames.setStatus('mandatory')
mrmMonRepBroadcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonRepBroadcastFrames.setStatus('mandatory')
mrmMonRepReadableOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonRepReadableOctets.setStatus('mandatory')
mrmMonRepUnicastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonRepUnicastOctets.setStatus('mandatory')
mrmMonRepMulticastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonRepMulticastOctets.setStatus('mandatory')
mrmMonRepBroadcastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonRepBroadcastOctets.setStatus('mandatory')
mrmMonRepFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonRepFCSErrors.setStatus('mandatory')
mrmMonRepAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonRepAlignmentErrors.setStatus('mandatory')
mrmMonRepFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonRepFrameTooLongs.setStatus('mandatory')
mrmMonRepShortEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonRepShortEvents.setStatus('mandatory')
mrmMonRepRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonRepRunts.setStatus('mandatory')
mrmMonRepTxCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonRepTxCollisions.setStatus('mandatory')
mrmMonRepLateEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonRepLateEvents.setStatus('mandatory')
mrmMonRepVeryLongEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonRepVeryLongEvents.setStatus('mandatory')
mrmMonRepDataRateMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonRepDataRateMismatches.setStatus('mandatory')
mrmMonRepAutoPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonRepAutoPartitions.setStatus('mandatory')
mrmMonRepTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonRepTotalErrors.setStatus('mandatory')
mrmMonRepBound0 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonRepBound0.setStatus('mandatory')
mrmMonRepBound1 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 1, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonRepBound1.setStatus('mandatory')
mrmMonRepBound2 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 1, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonRepBound2.setStatus('mandatory')
mrmMonRepBound3 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 1, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonRepBound3.setStatus('mandatory')
mrmMonRepBound4 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 1, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonRepBound4.setStatus('mandatory')
mrmMonRepBound5 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 1, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonRepBound5.setStatus('mandatory')
mrmMonRepAction = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 128))).clone(namedValues=NamedValues(("clearCounters", 1), ("noAction", 128)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrmMonRepAction.setStatus('mandatory')
mrmMonRepBandwidthUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 1, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonRepBandwidthUsed.setStatus('mandatory')
mrmMonRepErrorsPer10000Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 1, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonRepErrorsPer10000Packets.setStatus('mandatory')
mrmMonitorCardTable = MibTable((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 2, 1), )
if mibBuilder.loadTexts: mrmMonitorCardTable.setStatus('mandatory')
mrmMonitorCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 2, 1, 1), ).setIndexNames((0, "LBHUB-FMS-MIB", "mrmMonCardServiceId"), (0, "LBHUB-FMS-MIB", "mrmMonCardIndex"))
if mibBuilder.loadTexts: mrmMonitorCardEntry.setStatus('mandatory')
mrmMonCardServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonCardServiceId.setStatus('mandatory')
mrmMonCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonCardIndex.setStatus('mandatory')
mrmMonCardReadableFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonCardReadableFrames.setStatus('mandatory')
mrmMonCardUnicastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonCardUnicastFrames.setStatus('mandatory')
mrmMonCardMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonCardMulticastFrames.setStatus('mandatory')
mrmMonCardBroadcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonCardBroadcastFrames.setStatus('mandatory')
mrmMonCardReadableOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonCardReadableOctets.setStatus('mandatory')
mrmMonCardUnicastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonCardUnicastOctets.setStatus('mandatory')
mrmMonCardMulticastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonCardMulticastOctets.setStatus('mandatory')
mrmMonCardBroadcastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonCardBroadcastOctets.setStatus('mandatory')
mrmMonCardFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonCardFCSErrors.setStatus('mandatory')
mrmMonCardAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonCardAlignmentErrors.setStatus('mandatory')
mrmMonCardFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonCardFrameTooLongs.setStatus('mandatory')
mrmMonCardShortEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonCardShortEvents.setStatus('mandatory')
mrmMonCardRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonCardRunts.setStatus('mandatory')
mrmMonCardLateEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonCardLateEvents.setStatus('mandatory')
mrmMonCardVeryLongEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonCardVeryLongEvents.setStatus('mandatory')
mrmMonCardDataRateMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonCardDataRateMismatches.setStatus('mandatory')
mrmMonCardAutoPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonCardAutoPartitions.setStatus('mandatory')
mrmMonCardTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonCardTotalErrors.setStatus('mandatory')
mrmMonCardBound0 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonCardBound0.setStatus('mandatory')
mrmMonCardBound1 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonCardBound1.setStatus('mandatory')
mrmMonCardBound2 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonCardBound2.setStatus('mandatory')
mrmMonCardBound3 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 2, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonCardBound3.setStatus('mandatory')
mrmMonCardBound4 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 2, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonCardBound4.setStatus('mandatory')
mrmMonCardBound5 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 2, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonCardBound5.setStatus('mandatory')
mrmMonCardClearCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noChangeCounters", 1), ("clearCounters", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrmMonCardClearCounters.setStatus('mandatory')
mrmMonCardBandwidthUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 2, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonCardBandwidthUsed.setStatus('mandatory')
mrmMonCardErrorsPer10000Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 2, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonCardErrorsPer10000Packets.setStatus('mandatory')
mrmMonitorPortTable = MibTable((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 3, 1), )
if mibBuilder.loadTexts: mrmMonitorPortTable.setStatus('mandatory')
mrmMonitorPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 3, 1, 1), ).setIndexNames((0, "LBHUB-FMS-MIB", "mrmMonPortServiceId"), (0, "LBHUB-FMS-MIB", "mrmMonPortCardIndex"), (0, "LBHUB-FMS-MIB", "mrmMonPortIndex"))
if mibBuilder.loadTexts: mrmMonitorPortEntry.setStatus('mandatory')
mrmMonPortServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonPortServiceId.setStatus('mandatory')
mrmMonPortCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonPortCardIndex.setStatus('mandatory')
mrmMonPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonPortIndex.setStatus('mandatory')
mrmMonPortReadableFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonPortReadableFrames.setStatus('mandatory')
mrmMonPortUnicastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonPortUnicastFrames.setStatus('mandatory')
mrmMonPortMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonPortMulticastFrames.setStatus('mandatory')
mrmMonPortBroadcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonPortBroadcastFrames.setStatus('mandatory')
mrmMonPortReadableOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonPortReadableOctets.setStatus('mandatory')
mrmMonPortUnicastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonPortUnicastOctets.setStatus('mandatory')
mrmMonPortMulticastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonPortMulticastOctets.setStatus('mandatory')
mrmMonPortBroadcastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonPortBroadcastOctets.setStatus('mandatory')
mrmMonPortFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonPortFCSErrors.setStatus('mandatory')
mrmMonPortAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonPortAlignmentErrors.setStatus('mandatory')
mrmMonPortFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonPortFrameTooLongs.setStatus('mandatory')
mrmMonPortShortEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonPortShortEvents.setStatus('mandatory')
mrmMonPortRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonPortRunts.setStatus('mandatory')
mrmMonPortCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonPortCollisions.setStatus('mandatory')
mrmMonPortLateEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonPortLateEvents.setStatus('mandatory')
mrmMonPortVeryLongEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonPortVeryLongEvents.setStatus('mandatory')
mrmMonPortDataRateMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonPortDataRateMismatches.setStatus('mandatory')
mrmMonPortAutoPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 3, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonPortAutoPartitions.setStatus('mandatory')
mrmMonPortTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 3, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonPortTotalErrors.setStatus('mandatory')
mrmMonPortBound0 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 3, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonPortBound0.setStatus('mandatory')
mrmMonPortBound1 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 3, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonPortBound1.setStatus('mandatory')
mrmMonPortBound2 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonPortBound2.setStatus('mandatory')
mrmMonPortBound3 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 3, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonPortBound3.setStatus('mandatory')
mrmMonPortBound4 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 3, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonPortBound4.setStatus('mandatory')
mrmMonPortBound5 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 3, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonPortBound5.setStatus('mandatory')
mrmMonPortBandwidthUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 3, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonPortBandwidthUsed.setStatus('mandatory')
mrmMonPortErrorsPer10000Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 3, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonPortErrorsPer10000Packets.setStatus('mandatory')
mrmMonPortClearCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 3, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noChangeCounters", 1), ("clearCounters", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mrmMonPortClearCounters.setStatus('mandatory')
mrmMonPortLastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 3, 1, 1, 32), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonPortLastAddress.setStatus('mandatory')
mrmMonPortAddressChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 3, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonPortAddressChanges.setStatus('mandatory')
trafficLevel = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficLevel.setStatus('deprecated')
errorFrames = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errorFrames.setStatus('deprecated')
mrmMonRepeaterTrafficLevel = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonRepeaterTrafficLevel.setStatus('mandatory')
mrmMonRepeaterErrorFrames = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonRepeaterErrorFrames.setStatus('mandatory')
mrmMonCardTrafficLevel = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 6, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonCardTrafficLevel.setStatus('mandatory')
mrmMonCardErrorFrames = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 6, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonCardErrorFrames.setStatus('mandatory')
mrmMonPortTrafficLevel = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 7, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonPortTrafficLevel.setStatus('mandatory')
mrmMonPortErrorFrames = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 17, 2, 7, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mrmMonPortErrorFrames.setStatus('mandatory')
repPartitionStateChange = NotificationType((1, 3, 6, 1, 4, 1, 43) + (0,38)).setObjects(("LBHUB-FMS-MIB", "mrmPortAutoPartitionState"))
repLinkStateChange = NotificationType((1, 3, 6, 1, 4, 1, 43) + (0,39)).setObjects(("LBHUB-FMS-MIB", "mrmPortLinkState"))
repAdminStateChange = NotificationType((1, 3, 6, 1, 4, 1, 43) + (0,40)).setObjects(("LBHUB-FMS-MIB", "mrmPortAdminStatus"))
repPortTopUsage = NotificationType((1, 3, 6, 1, 4, 1, 43) + (0,41)).setObjects(("LBHUB-FMS-MIB", "mrmMonPortBandwidthUsed"), ("LBHUB-FMS-MIB", "gaugeThresholdLevel"), ("LBHUB-FMS-MIB", "gaugeSamplePeriod"), ("LBHUB-FMS-MIB", "gaugeSamplesPerAverage"))
repPortErrors = NotificationType((1, 3, 6, 1, 4, 1, 43) + (0,42)).setObjects(("LBHUB-FMS-MIB", "mrmMonPortErrorsPer10000Packets"), ("LBHUB-FMS-MIB", "gaugeThresholdLevel"), ("LBHUB-FMS-MIB", "gaugeSamplePeriod"), ("LBHUB-FMS-MIB", "gaugeSamplesPerAverage"))
dudUnauthorisedDevice = NotificationType((1, 3, 6, 1, 4, 1, 43) + (0,66)).setObjects(("LBHUB-FMS-MIB", "mrmPortDUDAction"))
repRepTopUsage = NotificationType((1, 3, 6, 1, 4, 1, 43) + (0,67)).setObjects(("LBHUB-FMS-MIB", "mrmMonRepBandwidthUsed"), ("LBHUB-FMS-MIB", "gaugeThresholdLevel"), ("LBHUB-FMS-MIB", "gaugeSamplePeriod"), ("LBHUB-FMS-MIB", "gaugeSamplesPerAverage"))
repRepErrors = NotificationType((1, 3, 6, 1, 4, 1, 43) + (0,68)).setObjects(("LBHUB-FMS-MIB", "mrmMonRepErrorsPer10000Packets"), ("LBHUB-FMS-MIB", "gaugeThresholdLevel"), ("LBHUB-FMS-MIB", "gaugeSamplePeriod"), ("LBHUB-FMS-MIB", "gaugeSamplesPerAverage"))
repCardTopUsage = NotificationType((1, 3, 6, 1, 4, 1, 43) + (0,69)).setObjects(("LBHUB-FMS-MIB", "mrmMonCardBandwidthUsed"), ("LBHUB-FMS-MIB", "gaugeThresholdLevel"), ("LBHUB-FMS-MIB", "gaugeSamplePeriod"), ("LBHUB-FMS-MIB", "gaugeSamplesPerAverage"))
repCardErrors = NotificationType((1, 3, 6, 1, 4, 1, 43) + (0,70)).setObjects(("LBHUB-FMS-MIB", "mrmMonCardErrorsPer10000Packets"), ("LBHUB-FMS-MIB", "gaugeThresholdLevel"), ("LBHUB-FMS-MIB", "gaugeSamplePeriod"), ("LBHUB-FMS-MIB", "gaugeSamplesPerAverage"))
setupGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 2, 1))
heartbeatInterval = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: heartbeatInterval.setStatus('mandatory')
heartbeatEvent = NotificationType((1, 3, 6, 1, 4, 1, 43) + (0,13))
setupIp = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 2, 2))
setIpIfTable = MibTable((1, 3, 6, 1, 4, 1, 43, 10, 2, 2, 1), )
if mibBuilder.loadTexts: setIpIfTable.setStatus('mandatory')
setIpIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 10, 2, 2, 1, 1), ).setIndexNames((0, "LBHUB-FMS-MIB", "setIpIfIndex"))
if mibBuilder.loadTexts: setIpIfEntry.setStatus('mandatory')
setIpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: setIpIfIndex.setStatus('mandatory')
setIpIfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 2, 2, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpIfAddr.setStatus('mandatory')
setIpIfMask = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 2, 2, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpIfMask.setStatus('mandatory')
setIpIfRouter = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 2, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setIpIfRouter.setStatus('mandatory')
setupStart = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 2, 3))
startPROMSwVerNo = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 2, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: startPROMSwVerNo.setStatus('mandatory')
startRestartCount = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 2, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: startRestartCount.setStatus('mandatory')
startLastRestartType = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("command", 2), ("watchdog", 3), ("power-reset", 4), ("system-error", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: startLastRestartType.setStatus('mandatory')
startResetAction = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nochange", 1), ("manDefaultReset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startResetAction.setStatus('mandatory')
startLastSystemError = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 2, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: startLastSystemError.setStatus('mandatory')
startRestartAction = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 2, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nochange", 1), ("restart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startRestartAction.setStatus('mandatory')
loadableDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 43, 10, 3, 1), )
if mibBuilder.loadTexts: loadableDeviceTable.setStatus('mandatory')
loadableDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 10, 3, 1, 1), ).setIndexNames((0, "LBHUB-FMS-MIB", "slDeviceType"), (0, "LBHUB-FMS-MIB", "slDeviceInstance"))
if mibBuilder.loadTexts: loadableDeviceEntry.setStatus('mandatory')
slDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("system", 1), ("component", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slDeviceType.setStatus('mandatory')
slDeviceInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slDeviceInstance.setStatus('mandatory')
slLoadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 200, 201, 202, 203, 204, 205, 255))).clone(namedValues=NamedValues(("fileNotFound", 1), ("accessViolation", 2), ("illegalOperation", 4), ("unknownTransferID", 5), ("noSuchUser", 7), ("noResponse", 8), ("noResource", 9), ("recLenMismatch", 10), ("invalidRecType", 11), ("checksumError", 12), ("wrongDevice", 13), ("wrongHardwareVersion", 14), ("noFileHeader", 15), ("byteCountError", 16), ("invalidProgAddress", 17), ("eraseFailed", 18), ("progFailed", 19), ("loadPending", 20), ("loadActive", 21), ("success", 22), ("paused", 23), ("modInvalidAdress", 200), ("modChecksumError", 201), ("modTimeout", 202), ("modBusy", 203), ("modRemoved", 204), ("modNoResource", 205), ("modFailure", 255))).clone('success')).setMaxAccess("readonly")
if mibBuilder.loadTexts: slLoadStatus.setStatus('mandatory')
slSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slSoftwareVersion.setStatus('mandatory')
slHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slHardwareVersion.setStatus('mandatory')
slFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 3, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slFilename.setStatus('mandatory')
slServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 3, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slServerIpAddress.setStatus('deprecated')
slLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("startDownload", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: slLoad.setStatus('mandatory')
slServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 3, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slServerAddress.setStatus('mandatory')
slServerProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("tftp-ip", 2), ("tftp-ipx", 3))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: slServerProtocol.setStatus('mandatory')
slFailed = NotificationType((1, 3, 6, 1, 4, 1, 43) + (0,18)).setObjects(("LBHUB-FMS-MIB", "slLoadStatus"))
securityEnableTable = MibTable((1, 3, 6, 1, 4, 1, 43, 10, 4, 1), )
if mibBuilder.loadTexts: securityEnableTable.setStatus('mandatory')
securityEnableTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 10, 4, 1, 1), ).setIndexNames((0, "LBHUB-FMS-MIB", "securityLevel"))
if mibBuilder.loadTexts: securityEnableTableEntry.setStatus('mandatory')
securityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("monitor", 1), ("secureMonitor", 2), ("manager", 3), ("specialist", 4), ("security", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityLevel.setStatus('mandatory')
securityCommunityEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("permanentlyEnabled", 3), ("permanentlyDisabled", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityCommunityEnable.setStatus('mandatory')
securitySecureEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("permanentlyEnabled", 3), ("permanentlyDisabled", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securitySecureEnable.setStatus('mandatory')
securityTermEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("permanentlyEnabled", 3), ("permanentlyDisabled", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityTermEnable.setStatus('mandatory')
securityTelnetEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("permanentlyEnabled", 3), ("permanentlyDisabled", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityTelnetEnable.setStatus('mandatory')
securityFrontPanelEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("permanentlyEnabled", 3), ("permanentlyDisabled", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityFrontPanelEnable.setStatus('mandatory')
securityUserTable = MibTable((1, 3, 6, 1, 4, 1, 43, 10, 4, 2), )
if mibBuilder.loadTexts: securityUserTable.setStatus('mandatory')
securityUserTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 10, 4, 2, 1), ).setIndexNames((0, "LBHUB-FMS-MIB", "securityUserName"))
if mibBuilder.loadTexts: securityUserTableEntry.setStatus('mandatory')
securityUserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityUserStatus.setStatus('mandatory')
securityUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityUserName.setStatus('mandatory')
securityUserLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("monitor", 1), ("secureMonitor", 2), ("manager", 3), ("specialist", 4), ("security", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityUserLevel.setStatus('mandatory')
securityUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 4, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: securityUserPassword.setStatus('mandatory')
securityUserCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityUserCommunity.setStatus('mandatory')
securityUserLocParty = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 4, 2, 1, 6), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityUserLocParty.setStatus('mandatory')
securityUserMgrParty = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 4, 2, 1, 7), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityUserMgrParty.setStatus('mandatory')
securityAuditLogTable = MibTable((1, 3, 6, 1, 4, 1, 43, 10, 4, 3), )
if mibBuilder.loadTexts: securityAuditLogTable.setStatus('mandatory')
securityAuditLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 10, 4, 3, 1), ).setIndexNames((0, "LBHUB-FMS-MIB", "securityAuditIndex"))
if mibBuilder.loadTexts: securityAuditLogEntry.setStatus('mandatory')
securityAuditIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityAuditIndex.setStatus('mandatory')
securityAuditTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 4, 3, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityAuditTime.setStatus('mandatory')
securityAuditUser = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 4, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityAuditUser.setStatus('mandatory')
securityAuditObject = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 4, 3, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityAuditObject.setStatus('mandatory')
securityAuditValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 4, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityAuditValue.setStatus('mandatory')
securityAuditResult = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("success", 255), ("pending", 1), ("too-big", 2), ("failed", 3), ("locked", 4), ("security-violation", 5), ("no-such-function", 6), ("no-such-item", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityAuditResult.setStatus('mandatory')
gaugeTable = MibTable((1, 3, 6, 1, 4, 1, 43, 10, 5, 1), )
if mibBuilder.loadTexts: gaugeTable.setStatus('mandatory')
gaugeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 10, 5, 1, 1), ).setIndexNames((0, "LBHUB-FMS-MIB", "gaugeIndex"))
if mibBuilder.loadTexts: gaugeTableEntry.setStatus('mandatory')
gaugeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gaugeIndex.setStatus('mandatory')
gaugeItemId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 5, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gaugeItemId.setStatus('mandatory')
gaugeItemType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("counter", 1), ("signedMeter", 2), ("unsignedMeter", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gaugeItemType.setStatus('mandatory')
gaugeSamplesPerAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("nonAveraging", 1), ("twoSamples", 2), ("threeSamples", 3), ("maxSamples", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gaugeSamplesPerAverage.setStatus('mandatory')
gaugeSamplePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gaugeSamplePeriod.setStatus('mandatory')
gaugeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gaugeValue.setStatus('mandatory')
gaugePeakValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gaugePeakValue.setStatus('mandatory')
gaugeThresholdLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gaugeThresholdLevel.setStatus('mandatory')
gaugeRecoveryLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 5, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gaugeRecoveryLevel.setStatus('mandatory')
gaugeThresholdAction = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 8, 9, 12, 13, 14, 15, 18, 19, 20, 22, 23))).clone(namedValues=NamedValues(("noAction", 1), ("sendTrap", 2), ("disable", 3), ("enable", 4), ("notifyAndBlipPortOff", 5), ("notifyAndBlipCardOff", 6), ("notifyAndDisablePort", 8), ("notifyAndDisableCard", 9), ("blipPortOff", 12), ("blipCardOff", 13), ("disablePort", 14), ("disableCard", 15), ("notifyAndResilientSwitch", 18), ("notifyBandwidthExceeded", 19), ("notifyErrorsExceeded", 20), ("notifyPollFailed", 22), ("notifyFilterBridgePort", 23)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gaugeThresholdAction.setStatus('mandatory')
gaugeRecoveryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 10, 11, 16, 17, 21, 24))).clone(namedValues=NamedValues(("noAction", 1), ("sendTrap", 2), ("disable", 3), ("enable", 4), ("notifyAndEnablePort", 10), ("notifyAndEnableCard", 11), ("enablePort", 16), ("enableCard", 17), ("notifyPollSuccess", 21), ("notifyUnfilterBridgePort", 24)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gaugeRecoveryAction.setStatus('mandatory')
gaugeState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("onTriggersEnabled", 1), ("onTriggersDisabled", 2), ("off", 3), ("deleted", 4), ("autoCalibrate", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gaugeState.setStatus('mandatory')
gaugeOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 5, 1, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gaugeOwner.setStatus('mandatory')
gaugeTableSize = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gaugeTableSize.setStatus('mandatory')
gaugeThresholdLevelScaler = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gaugeThresholdLevelScaler.setStatus('mandatory')
gaugeRecoveryLevelScaler = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gaugeRecoveryLevelScaler.setStatus('mandatory')
gaugeTableUpdate = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("deleteAll", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: gaugeTableUpdate.setStatus('mandatory')
gaugeConfigureObjId = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 5, 6), ObjectIdentifier()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: gaugeConfigureObjId.setStatus('mandatory')
gaugeConfigureColumn = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("itemType", 1), ("samplesPerAverage", 2), ("samplePeriod", 3), ("thresholdLevel", 4), ("recoveryLevel", 5), ("thresholdAction", 6), ("recoveryAction", 7), ("gaugeState", 8)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: gaugeConfigureColumn.setStatus('mandatory')
gaugeConfigureValue = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 5, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: gaugeConfigureValue.setStatus('mandatory')
gaugeNextFreeIndex = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gaugeNextFreeIndex.setStatus('mandatory')
gaugesThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 43) + (0,16)).setObjects(("LBHUB-FMS-MIB", "gaugeItemId"), ("LBHUB-FMS-MIB", "gaugeThresholdLevel"), ("LBHUB-FMS-MIB", "gaugeSamplePeriod"), ("LBHUB-FMS-MIB", "gaugeSamplesPerAverage"))
gaugesRecoveryTrap = NotificationType((1, 3, 6, 1, 4, 1, 43) + (0,17)).setObjects(("LBHUB-FMS-MIB", "gaugeItemId"), ("LBHUB-FMS-MIB", "gaugeRecoveryLevel"), ("LBHUB-FMS-MIB", "gaugeSamplePeriod"), ("LBHUB-FMS-MIB", "gaugeSamplesPerAverage"))
rmon = MibIdentifier((1, 3, 6, 1, 2, 1, 16))
statistics = MibIdentifier((1, 3, 6, 1, 2, 1, 16, 1))
history = MibIdentifier((1, 3, 6, 1, 2, 1, 16, 2))
alarm = MibIdentifier((1, 3, 6, 1, 2, 1, 16, 3))
hosts = MibIdentifier((1, 3, 6, 1, 2, 1, 16, 4))
hostTopN = MibIdentifier((1, 3, 6, 1, 2, 1, 16, 5))
matrix = MibIdentifier((1, 3, 6, 1, 2, 1, 16, 6))
filter = MibIdentifier((1, 3, 6, 1, 2, 1, 16, 7))
capture = MibIdentifier((1, 3, 6, 1, 2, 1, 16, 8))
event = MibIdentifier((1, 3, 6, 1, 2, 1, 16, 9))
alarmTable = MibTable((1, 3, 6, 1, 2, 1, 16, 3, 1), )
if mibBuilder.loadTexts: alarmTable.setStatus('mandatory')
alarmEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 3, 1, 1), ).setIndexNames((0, "LBHUB-FMS-MIB", "alarmIndex"))
if mibBuilder.loadTexts: alarmEntry.setStatus('mandatory')
alarmIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmIndex.setStatus('mandatory')
alarmInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 3, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmInterval.setStatus('mandatory')
alarmVariable = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 3, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmVariable.setStatus('mandatory')
alarmSampleType = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absoluteValue", 1), ("deltaValue", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmSampleType.setStatus('mandatory')
alarmValue = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmValue.setStatus('mandatory')
alarmStartupAlarm = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("risingAlarm", 1), ("fallingAlarm", 2), ("risingOrFallingAlarm", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmStartupAlarm.setStatus('mandatory')
alarmRisingThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 3, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmRisingThreshold.setStatus('mandatory')
alarmFallingThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 3, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmFallingThreshold.setStatus('mandatory')
alarmRisingEventIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmRisingEventIndex.setStatus('mandatory')
alarmFallingEventIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmFallingEventIndex.setStatus('mandatory')
alarmOwner = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 3, 1, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmOwner.setStatus('mandatory')
alarmStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmStatus.setStatus('mandatory')
eventTable = MibTable((1, 3, 6, 1, 2, 1, 16, 9, 1), )
if mibBuilder.loadTexts: eventTable.setStatus('mandatory')
eventEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 9, 1, 1), ).setIndexNames((0, "LBHUB-FMS-MIB", "eventIndex"))
if mibBuilder.loadTexts: eventEntry.setStatus('mandatory')
eventIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventIndex.setStatus('mandatory')
eventDescription = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 9, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eventDescription.setStatus('mandatory')
eventType = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("log", 2), ("snmp-trap", 3), ("log-and-trap", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eventType.setStatus('mandatory')
eventCommunity = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 9, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eventCommunity.setStatus('mandatory')
eventLastTimeSent = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 9, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLastTimeSent.setStatus('mandatory')
eventOwner = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 9, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eventOwner.setStatus('mandatory')
eventStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eventStatus.setStatus('mandatory')
logTable = MibTable((1, 3, 6, 1, 2, 1, 16, 9, 2), )
if mibBuilder.loadTexts: logTable.setStatus('mandatory')
logEntry = MibTableRow((1, 3, 6, 1, 2, 1, 16, 9, 2, 1), ).setIndexNames((0, "LBHUB-FMS-MIB", "logEventIndex"), (0, "LBHUB-FMS-MIB", "logIndex"))
if mibBuilder.loadTexts: logEntry.setStatus('mandatory')
logEventIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logEventIndex.setStatus('mandatory')
logIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logIndex.setStatus('mandatory')
logTime = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 9, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logTime.setStatus('mandatory')
logDescription = MibTableColumn((1, 3, 6, 1, 2, 1, 16, 9, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logDescription.setStatus('mandatory')
risingAlarm = NotificationType((1, 3, 6, 1, 2, 1, 16) + (0,1)).setObjects(("LBHUB-FMS-MIB", "alarmIndex"), ("LBHUB-FMS-MIB", "alarmVariable"), ("LBHUB-FMS-MIB", "alarmSampleType"), ("LBHUB-FMS-MIB", "alarmValue"), ("LBHUB-FMS-MIB", "alarmRisingThreshold"))
fallingAlarm = NotificationType((1, 3, 6, 1, 2, 1, 16) + (0,2)).setObjects(("LBHUB-FMS-MIB", "alarmIndex"), ("LBHUB-FMS-MIB", "alarmVariable"), ("LBHUB-FMS-MIB", "alarmSampleType"), ("LBHUB-FMS-MIB", "alarmValue"), ("LBHUB-FMS-MIB", "alarmFallingThreshold"))
ascTimeAttemptedLogin = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 6, 1), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascTimeAttemptedLogin.setStatus('mandatory')
ascUserNameForLastAttemptedLogin = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascUserNameForLastAttemptedLogin.setStatus('mandatory')
ascLoginStatus = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("loginOKFromTelnet", 1), ("loginOKFromSerialPort", 2), ("deniedAccessFromTelnet", 3), ("deniedAccessFromSerialPort", 4), ("unknownUserFromTelnet", 5), ("unknownUserFromSerialPort", 6), ("incorrectPasswordFromTelnet", 7), ("incorrectPasswordFromSerialPort", 8), ("securityViolationFromTelnet", 9), ("securityViolationFromSerialPort", 10), ("nologin", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascLoginStatus.setStatus('mandatory')
ascLocalManagementBanner = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 6, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 490))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ascLocalManagementBanner.setStatus('mandatory')
localManagementUpdate = NotificationType((1, 3, 6, 1, 4, 1, 43) + (0,14))
securityViolation = NotificationType((1, 3, 6, 1, 4, 1, 43) + (0,15)).setObjects(("LBHUB-FMS-MIB", "ascUserNameForLastAttemptedLogin"), ("LBHUB-FMS-MIB", "ascLoginStatus"))
siSlipPort = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 7, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siSlipPort.setStatus('mandatory')
configV24Table = MibTable((1, 3, 6, 1, 4, 1, 43, 10, 7, 2), )
if mibBuilder.loadTexts: configV24Table.setStatus('mandatory')
configV24Entry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 10, 7, 2, 1), ).setIndexNames((0, "LBHUB-FMS-MIB", "configV24PortID"))
if mibBuilder.loadTexts: configV24Entry.setStatus('mandatory')
configV24PortID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configV24PortID.setStatus('mandatory')
configV24ConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configV24ConnType.setStatus('mandatory')
configV24AutoConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configV24AutoConfig.setStatus('mandatory')
configV24Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("speed1200", 4), ("speed2400", 5), ("speed4800", 6), ("speed9600", 7), ("speed19200", 8), ("speed38400", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configV24Speed.setStatus('mandatory')
configV24CharSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("size7", 3), ("size8", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configV24CharSize.setStatus('mandatory')
configV24StopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stopOne", 1), ("stopOneDotFive", 2), ("stopTwo", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configV24StopBits.setStatus('mandatory')
configV24Parity = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noParity", 1), ("spaceParity", 2), ("markParity", 3), ("oddParity", 4), ("evenParity", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configV24Parity.setStatus('mandatory')
configV24DSRControl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configV24DSRControl.setStatus('mandatory')
configV24DCDControl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configV24DCDControl.setStatus('mandatory')
configV24FlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noFlowControl", 1), ("xonXoff", 2), ("rtsCtsFullDplx", 3), ("rtsCtsHalfDplx", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configV24FlowControl.setStatus('mandatory')
configV24Update = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 7, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nochange", 1), ("update", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configV24Update.setStatus('mandatory')
esDatabaseState = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noChange", 1), ("modified", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esDatabaseState.setStatus('mandatory')
esDatabaseFlush = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("flush", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: esDatabaseFlush.setStatus('mandatory')
esTable = MibTable((1, 3, 6, 1, 4, 1, 43, 10, 9, 3), )
if mibBuilder.loadTexts: esTable.setStatus('mandatory')
esTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 10, 9, 3, 1), ).setIndexNames((0, "LBHUB-FMS-MIB", "esAddrType"), (0, "LBHUB-FMS-MIB", "esAddress"))
if mibBuilder.loadTexts: esTableEntry.setStatus('mandatory')
esAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ieee8021", 1), ("internet", 2), ("ipx", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esAddrType.setStatus('mandatory')
esAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 9, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: esAddress.setStatus('mandatory')
esSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 9, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esSlotNumber.setStatus('mandatory')
esPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 9, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esPortNumber.setStatus('mandatory')
esModTable = MibTable((1, 3, 6, 1, 4, 1, 43, 10, 9, 4), )
if mibBuilder.loadTexts: esModTable.setStatus('mandatory')
esModTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 10, 9, 4, 1), ).setIndexNames((0, "LBHUB-FMS-MIB", "esModAddrType"), (0, "LBHUB-FMS-MIB", "esModAddress"))
if mibBuilder.loadTexts: esModTableEntry.setStatus('mandatory')
esModAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 9, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ieee8021", 1), ("internet", 2), ("ipx", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModAddrType.setStatus('mandatory')
esModAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 9, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModAddress.setStatus('mandatory')
esModSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 9, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModSlotNumber.setStatus('mandatory')
esModPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 9, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModPortNumber.setStatus('mandatory')
esPortAccessTable = MibTable((1, 3, 6, 1, 4, 1, 43, 10, 9, 5), )
if mibBuilder.loadTexts: esPortAccessTable.setStatus('mandatory')
esPortAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 10, 9, 5, 1), ).setIndexNames((0, "LBHUB-FMS-MIB", "ecPortCardNo"), (0, "LBHUB-FMS-MIB", "ecPortPortNo"), (0, "LBHUB-FMS-MIB", "ecPortIndex"))
if mibBuilder.loadTexts: esPortAccessEntry.setStatus('mandatory')
ecPortCardNo = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 9, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecPortCardNo.setStatus('mandatory')
ecPortPortNo = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 9, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecPortPortNo.setStatus('mandatory')
ecPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 9, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecPortIndex.setStatus('mandatory')
ecPortAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 9, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ieee8021", 1), ("internet", 2), ("ipx", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecPortAddrType.setStatus('mandatory')
ecPortAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 9, 5, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecPortAddress.setStatus('mandatory')
estStateChange = NotificationType((1, 3, 6, 1, 4, 1, 43) + (0,19))
estTableFull = NotificationType((1, 3, 6, 1, 4, 1, 43) + (0,20))
pollTable = MibTable((1, 3, 6, 1, 4, 1, 43, 10, 20, 1), )
if mibBuilder.loadTexts: pollTable.setStatus('mandatory')
pollTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 10, 20, 1, 1), ).setIndexNames((0, "LBHUB-FMS-MIB", "pollIndex"))
if mibBuilder.loadTexts: pollTableEntry.setStatus('mandatory')
pollIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 20, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pollIndex.setStatus('mandatory')
pollAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 20, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pollAddress.setStatus('mandatory')
pollProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 20, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ip", 2), ("ipx", 3), ("learn", 4), ("llc", 5))).clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pollProtocol.setStatus('mandatory')
pollRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 20, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("once-only", 1), ("every-30-seconds", 2), ("every-minute", 3), ("every-5-minutes", 4), ("every-30-minutes", 5), ("every-hour", 6))).clone('once-only')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pollRate.setStatus('mandatory')
pollTargetType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 20, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("file-server", 2))).clone('other')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pollTargetType.setStatus('mandatory')
pollLastPollSent = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 20, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pollLastPollSent.setStatus('mandatory')
pollRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 20, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pollRoundTripTime.setStatus('mandatory')
pollInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 20, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pollInformation.setStatus('mandatory')
pollAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 20, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pollAlarmIndex.setStatus('mandatory')
pollOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 20, 1, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pollOwner.setStatus('mandatory')
pollRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 20, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pollRowStatus.setStatus('mandatory')
pollNextFreeIndex = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 20, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pollNextFreeIndex.setStatus('mandatory')
pollTableSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 43) + (0,61)).setObjects(("LBHUB-FMS-MIB", "pollAddress"), ("LBHUB-FMS-MIB", "pollProtocol"), ("LBHUB-FMS-MIB", "pollTargetType"))
pollTableFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 43) + (0,62)).setObjects(("LBHUB-FMS-MIB", "pollAddress"), ("LBHUB-FMS-MIB", "pollProtocol"), ("LBHUB-FMS-MIB", "pollTargetType"))
trapTable = MibTable((1, 3, 6, 1, 4, 1, 43, 10, 10, 1), )
if mibBuilder.loadTexts: trapTable.setStatus('deprecated')
trapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 10, 10, 1, 1), ).setIndexNames((0, "LBHUB-FMS-MIB", "trapDestination"))
if mibBuilder.loadTexts: trapEntry.setStatus('deprecated')
trapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapStatus.setStatus('deprecated')
trapDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 10, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapDestination.setStatus('deprecated')
trapCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 10, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapCommunity.setStatus('deprecated')
trapSubject = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 10, 1, 1, 4), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapSubject.setStatus('deprecated')
trapCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 10, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapCategory.setStatus('deprecated')
trapThrottle = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 10, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapThrottle.setStatus('deprecated')
snmpTrapTable = MibTable((1, 3, 6, 1, 4, 1, 43, 10, 10, 2), )
if mibBuilder.loadTexts: snmpTrapTable.setStatus('mandatory')
snmpTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 10, 10, 2, 1), ).setIndexNames((0, "LBHUB-FMS-MIB", "snmpTrapIndex"))
if mibBuilder.loadTexts: snmpTrapEntry.setStatus('mandatory')
snmpTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTrapIndex.setStatus('mandatory')
snmpTrapDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 10, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapDestination.setStatus('mandatory')
snmpTrapProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("ip", 2), ("ipx", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTrapProtocol.setStatus('mandatory')
snmpTrapCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 10, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapCommunity.setStatus('mandatory')
snmpTrapCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 10, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapCategory.setStatus('mandatory')
snmpTrapThrottle = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapThrottle.setStatus('mandatory')
snmpTrapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 10, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapRowStatus.setStatus('mandatory')
snmpTrapNextFreeIndex = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 10, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTrapNextFreeIndex.setStatus('mandatory')
novell = MibIdentifier((1, 3, 6, 1, 4, 1, 23))
mibDoc = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2))
ipx = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 5))
ipxSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 5, 1))
ipxCircuit = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 5, 2))
ipxForwarding = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 5, 3))
ipxServices = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 5, 4))
ipxTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 5, 5))
ipxBasicSysTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 1), )
if mibBuilder.loadTexts: ipxBasicSysTable.setStatus('mandatory')
ipxBasicSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 1, 1), ).setIndexNames((0, "LBHUB-FMS-MIB", "ipxBasicSysInstance"))
if mibBuilder.loadTexts: ipxBasicSysEntry.setStatus('mandatory')
ipxBasicSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxBasicSysInstance.setStatus('mandatory')
ipxBasicSysExistState = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxBasicSysExistState.setStatus('mandatory')
ipxBasicSysNetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxBasicSysNetNumber.setStatus('mandatory')
ipxBasicSysNode = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxBasicSysNode.setStatus('mandatory')
ipxBasicSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxBasicSysName.setStatus('mandatory')
ipxBasicSysInReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxBasicSysInReceives.setStatus('mandatory')
ipxBasicSysInHdrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxBasicSysInHdrErrors.setStatus('mandatory')
ipxBasicSysInUnknownSockets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxBasicSysInUnknownSockets.setStatus('mandatory')
ipxBasicSysInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxBasicSysInDiscards.setStatus('mandatory')
ipxBasicSysInBadChecksums = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxBasicSysInBadChecksums.setStatus('mandatory')
ipxBasicSysInDelivers = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxBasicSysInDelivers.setStatus('mandatory')
ipxBasicSysNoRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxBasicSysNoRoutes.setStatus('mandatory')
ipxBasicSysOutRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxBasicSysOutRequests.setStatus('mandatory')
ipxBasicSysOutMalformedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxBasicSysOutMalformedRequests.setStatus('mandatory')
ipxBasicSysOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxBasicSysOutDiscards.setStatus('mandatory')
ipxBasicSysOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxBasicSysOutPackets.setStatus('mandatory')
ipxBasicSysConfigSockets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxBasicSysConfigSockets.setStatus('mandatory')
ipxBasicSysOpenSocketFails = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxBasicSysOpenSocketFails.setStatus('mandatory')
ipxAdvSysTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 2), )
if mibBuilder.loadTexts: ipxAdvSysTable.setStatus('mandatory')
ipxAdvSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 2, 1), ).setIndexNames((0, "LBHUB-FMS-MIB", "ipxAdvSysInstance"))
if mibBuilder.loadTexts: ipxAdvSysEntry.setStatus('mandatory')
ipxAdvSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxAdvSysInstance.setStatus('mandatory')
ipxAdvSysMaxPathSplits = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxAdvSysMaxPathSplits.setStatus('mandatory')
ipxAdvSysMaxHops = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 2, 1, 3), Integer32().clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipxAdvSysMaxHops.setStatus('mandatory')
ipxAdvSysTooManyHops = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxAdvSysTooManyHops.setStatus('mandatory')
ipxAdvSysInFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxAdvSysInFiltered.setStatus('mandatory')
ipxAdvSysCompressDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxAdvSysCompressDiscards.setStatus('mandatory')
ipxAdvSysNETBIOSPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxAdvSysNETBIOSPackets.setStatus('mandatory')
ipxAdvSysForwPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxAdvSysForwPackets.setStatus('mandatory')
ipxAdvSysOutFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxAdvSysOutFiltered.setStatus('mandatory')
ipxAdvSysOutCompressDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxAdvSysOutCompressDiscards.setStatus('mandatory')
ipxAdvSysCircCount = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxAdvSysCircCount.setStatus('mandatory')
ipxAdvSysDestCount = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxAdvSysDestCount.setStatus('mandatory')
ipxAdvSysServCount = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 5, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipxAdvSysServCount.setStatus('mandatory')
resTable = MibTable((1, 3, 6, 1, 4, 1, 43, 10, 15, 1), )
if mibBuilder.loadTexts: resTable.setStatus('mandatory')
resTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 10, 15, 1, 1), ).setIndexNames((0, "LBHUB-FMS-MIB", "resRepeater"), (0, "LBHUB-FMS-MIB", "resMainSlot"), (0, "LBHUB-FMS-MIB", "resMainPort"))
if mibBuilder.loadTexts: resTableEntry.setStatus('mandatory')
resRepeater = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 15, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resRepeater.setStatus('mandatory')
resMainSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 15, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resMainSlot.setStatus('mandatory')
resMainPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 15, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resMainPort.setStatus('mandatory')
resMainState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 15, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("ok", 2), ("ok-and-active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: resMainState.setStatus('mandatory')
resStandbySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 15, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resStandbySlot.setStatus('mandatory')
resStandbyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 15, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resStandbyPort.setStatus('mandatory')
resStandbyState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 15, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("ok", 2), ("ok-and-active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: resStandbyState.setStatus('mandatory')
resPairState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 15, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("operational", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: resPairState.setStatus('mandatory')
resPairModificationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 15, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("under-modification", 1), ("stable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resPairModificationStatus.setStatus('mandatory')
resPairAction = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 15, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("create", 1), ("delete", 2), ("togglePort", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: resPairAction.setStatus('mandatory')
resPairEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 15, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resPairEnable.setStatus('mandatory')
resStandbyMapTable = MibTable((1, 3, 6, 1, 4, 1, 43, 10, 15, 2), )
if mibBuilder.loadTexts: resStandbyMapTable.setStatus('mandatory')
resStandbyMapTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 10, 15, 2, 1), ).setIndexNames((0, "LBHUB-FMS-MIB", "resSbRepeater"), (0, "LBHUB-FMS-MIB", "resSbSlot"), (0, "LBHUB-FMS-MIB", "resSbPort"))
if mibBuilder.loadTexts: resStandbyMapTableEntry.setStatus('mandatory')
resSbRepeater = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 15, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resSbRepeater.setStatus('mandatory')
resSbSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 15, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resSbSlot.setStatus('mandatory')
resSbPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 15, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resSbPort.setStatus('mandatory')
resSbType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 15, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("main", 1), ("standby", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: resSbType.setStatus('mandatory')
resSbMainSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 15, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resSbMainSlot.setStatus('mandatory')
resSbMainPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 15, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resSbMainPort.setStatus('mandatory')
resFlushTable = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 15, 3), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: resFlushTable.setStatus('mandatory')
resResilienceSwitch = NotificationType((1, 3, 6, 1, 4, 1, 43) + (0,43)).setObjects(("LBHUB-FMS-MIB", "resMainState"), ("LBHUB-FMS-MIB", "resStandbyState"))
resStateChange = NotificationType((1, 3, 6, 1, 4, 1, 43) + (0,44)).setObjects(("LBHUB-FMS-MIB", "resMainState"), ("LBHUB-FMS-MIB", "resStandbyState"))
powerStackPackage = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 10, 21, 1))
powerStackBackupPresent = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notPresent", 1), ("present", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerStackBackupPresent.setStatus('mandatory')
powerStackBackupData = MibScalar((1, 3, 6, 1, 4, 1, 43, 10, 21, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerStackBackupData.setStatus('mandatory')
powerStackTable = MibTable((1, 3, 6, 1, 4, 1, 43, 10, 21, 1, 3), )
if mibBuilder.loadTexts: powerStackTable.setStatus('mandatory')
powerStackTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 10, 21, 1, 3, 1), ).setIndexNames((0, "LBHUB-FMS-MIB", "powerStackTableIndex"))
if mibBuilder.loadTexts: powerStackTableEntry.setStatus('mandatory')
powerStackTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 21, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerStackTableIndex.setStatus('mandatory')
powerStackRBSPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 21, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rbsNotApplicable", 1), ("rbsPresent", 2), ("rbsNotPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerStackRBSPresent.setStatus('mandatory')
powerStackRBSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 21, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rbsNotApplicable", 1), ("rbsOK", 2), ("rbsFault", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerStackRBSStatus.setStatus('mandatory')
powerStackBackupFault = NotificationType((1, 3, 6, 1, 4, 1, 43) + (0,63))
powerStackBackupRecovered = NotificationType((1, 3, 6, 1, 4, 1, 43) + (0,64))
mibBuilder.exportSymbols("LBHUB-FMS-MIB", esModAddress=esModAddress, gaugeNextFreeIndex=gaugeNextFreeIndex, setIpIfRouter=setIpIfRouter, logTable=logTable, esModTable=esModTable, mrmMonCardBound4=mrmMonCardBound4, ipxAdvSysOutFiltered=ipxAdvSysOutFiltered, gaugeRecoveryLevelScaler=gaugeRecoveryLevelScaler, mrmMonPortSmartPackage=mrmMonPortSmartPackage, history=history, pddrmMonGroupAutoPartitions=pddrmMonGroupAutoPartitions, esModPortNumber=esModPortNumber, mrmMonCardPackage=mrmMonCardPackage, mrmMonPortBroadcastFrames=mrmMonPortBroadcastFrames, slServerProtocol=slServerProtocol, mrmPortAutoPartitionState=mrmPortAutoPartitionState, pddrmBasicPackage=pddrmBasicPackage, deprRptrBasicPackage=deprRptrBasicPackage, manager=manager, trapCategory=trapCategory, mrmMonRepBound0=mrmMonRepBound0, eventStatus=eventStatus, deprRptrPortInfo=deprRptrPortInfo, mrmMonPortMulticastOctets=mrmMonPortMulticastOctets, deprRptrPortAdminStatus=deprRptrPortAdminStatus, powerStackTableIndex=powerStackTableIndex, cards=cards, pddrmMonGroupMultiCastFrames=pddrmMonGroupMultiCastFrames, vmMacMonitorIndex=vmMacMonitorIndex, vmMacMonitorLateEvents=vmMacMonitorLateEvents, vmConfigGroupEntry=vmConfigGroupEntry, mrmMonCardUnicastFrames=mrmMonCardUnicastFrames, trapStatus=trapStatus, esModAddrType=esModAddrType, mrmPortLinkPulse=mrmPortLinkPulse, deprRpMauType=deprRpMauType, pollTable=pollTable, vmMacMonitorUnderflowErrors=vmMacMonitorUnderflowErrors, securityTelnetEnable=securityTelnetEnable, loadableDeviceEntry=loadableDeviceEntry, slServerAddress=slServerAddress, repPartitionStateChange=repPartitionStateChange, deprRpMauAdminState=deprRpMauAdminState, faultIndex=faultIndex, ipxAdvSysInFiltered=ipxAdvSysInFiltered, pddrmMonitorPackage=pddrmMonitorPackage, pddrmMonGroupPackage=pddrmMonGroupPackage, dedicatedBridgeServer=dedicatedBridgeServer, pddrmMonRepeaterTotalErrors=pddrmMonRepeaterTotalErrors, ipxForwarding=ipxForwarding, mrmMonCardBroadcastOctets=mrmMonCardBroadcastOctets, vmMonFaultTimeStamp=vmMonFaultTimeStamp, securityAuditTime=securityAuditTime, mrmMonRepServiceId=mrmMonRepServiceId, mrmMonPortCollisions=mrmMonPortCollisions, pddrmMonRepeaterPackage=pddrmMonRepeaterPackage, alarmInterval=alarmInterval, mrmMonRepBound3=mrmMonRepBound3, mrmCardEntry=mrmCardEntry, esDatabaseFlush=esDatabaseFlush, gaugeConfigureValue=gaugeConfigureValue, vmMonDvtEcho=vmMonDvtEcho, deprRptrMonitorPortFCSErrors=deprRptrMonitorPortFCSErrors, vmMonFaultErrorNumber=vmMonFaultErrorNumber, mrmMonRepFrameTooLongs=mrmMonRepFrameTooLongs, deprRptrMonitorPortShortEvents=deprRptrMonitorPortShortEvents, linkBuilderFMSII_cards_12tp_rj45=linkBuilderFMSII_cards_12tp_rj45, deprRpMauEntry=deprRpMauEntry, pddrmMonGroupBroadCastFrames=pddrmMonGroupBroadCastFrames, alarmIndex=alarmIndex, alarmRisingEventIndex=alarmRisingEventIndex, pddrmMonPortUniCastFrames=pddrmMonPortUniCastFrames, linkBuilderFMS_cards_24utp=linkBuilderFMS_cards_24utp, securityUserPassword=securityUserPassword, resStandbyMapTableEntry=resStandbyMapTableEntry, vmMonFaultEntry=vmMonFaultEntry, deprRptrMonitorPortAutoPartitions=deprRptrMonitorPortAutoPartitions, serialIf=serialIf, mrmMonCardBound2=mrmMonCardBound2, setupGeneral=setupGeneral, deprRptrPortOperStatus=deprRptrPortOperStatus, mrmMonRepBound2=mrmMonRepBound2, securityAuditUser=securityAuditUser, genericMSWorkstation=genericMSWorkstation, mrmMonPortReadableFrames=mrmMonPortReadableFrames, gaugeOwner=gaugeOwner, deprRpMauLostMedias=deprRpMauLostMedias, ipxBasicSysEntry=ipxBasicSysEntry, configV24Parity=configV24Parity, resSbMainSlot=resSbMainSlot, genericMSServer=genericMSServer, faultTimeStamp=faultTimeStamp, mrmMonPortBound0=mrmMonPortBound0, resStateChange=resStateChange, deprRptrHealthText=deprRptrHealthText, ipxAdvSysOutCompressDiscards=ipxAdvSysOutCompressDiscards, resPairEnable=resPairEnable, slFailed=slFailed, mrmMonCardTrafficLevel=mrmMonCardTrafficLevel, mrmMonPortShortEvents=mrmMonPortShortEvents, mrmMonPortTotalErrors=mrmMonPortTotalErrors, deprRptrPortIndex=deprRptrPortIndex, gaugesThresholdTrap=gaugesThresholdTrap, viewBuilderApps=viewBuilderApps, mrmMonRepBound1=mrmMonRepBound1, deprRptrMonitorPortCollisions=deprRptrMonitorPortCollisions, mrmPortServiceId=mrmPortServiceId, mrmMonRepErrorsPer10000Packets=mrmMonRepErrorsPer10000Packets, pddrmMonitorGroupTable=pddrmMonitorGroupTable, mrmPortESTFilter=mrmPortESTFilter, amp_mib=amp_mib, a3Com=a3Com, pddrmMonGroupFrameTooLongs=pddrmMonGroupFrameTooLongs, gaugePeakValue=gaugePeakValue, linkSwitchFMS=linkSwitchFMS, generic=generic, pollLastPollSent=pollLastPollSent, securityAuditLogTable=securityAuditLogTable, mrmCardTest=mrmCardTest, startPROMSwVerNo=startPROMSwVerNo, linkBuilderFMS_cards_12fiber=linkBuilderFMS_cards_12fiber, mrmMonRepAutoPartitions=mrmMonRepAutoPartitions, startLastRestartType=startLastRestartType, securityEnableTableEntry=securityEnableTableEntry, alarmVariable=alarmVariable, powerStackBackupData=powerStackBackupData, mrmMonPortErrorsPer10000Packets=mrmMonPortErrorsPer10000Packets, mrmMonitorCardEntry=mrmMonitorCardEntry, genericTrap=genericTrap, securityAuditLogEntry=securityAuditLogEntry, alarmEntry=alarmEntry, deprRptrMonitorPortIndex=deprRptrMonitorPortIndex, repeaterMgmt=repeaterMgmt, deprRptrAddrTrackSourceAddrChanges=deprRptrAddrTrackSourceAddrChanges, mrmPortConnectorType=mrmPortConnectorType, mrmPortBootState=mrmPortBootState, mrmMonRepLateEvents=mrmMonRepLateEvents, hub=hub, pddrmMonitorGroupEntry=pddrmMonitorGroupEntry, pddrmMonGroupUniCastFrames=pddrmMonGroupUniCastFrames, mrmMonRepeaterTrafficLevel=mrmMonRepeaterTrafficLevel, terminalServer=terminalServer, pddrmMonGroupClearCounters=pddrmMonGroupClearCounters, ipxAdvSysMaxPathSplits=ipxAdvSysMaxPathSplits, gaugeTable=gaugeTable, deprRptrGroupObjectID=deprRptrGroupObjectID, at=at, mrmMonitorCardTable=mrmMonitorCardTable, snmpTrapIndex=snmpTrapIndex, snmpTrapProtocol=snmpTrapProtocol, pddrmMonRepeaterReadableFrames=pddrmMonRepeaterReadableFrames, mrmMonCardErrorFrames=mrmMonCardErrorFrames, gaugeRecoveryLevel=gaugeRecoveryLevel, pollProtocol=pollProtocol, ipxBasicSysInDelivers=ipxBasicSysInDelivers, powerStackTable=powerStackTable, netBuilder_mib=netBuilder_mib, deprRptrAddrTrackGroupInfo=deprRptrAddrTrackGroupInfo, vmMacMonitorRetryErrors=vmMacMonitorRetryErrors, ipx=ipx, resTable=resTable, mrmMonCardServiceId=mrmMonCardServiceId, deprRptrPortAutoPartitionState=deprRptrPortAutoPartitionState, pddrmMonRepeaterFCSErrors=pddrmMonRepeaterFCSErrors, resPairModificationStatus=resPairModificationStatus, mrmMonRepRunts=mrmMonRepRunts, linkBuilder10BTi_cards_utp=linkBuilder10BTi_cards_utp, ipxAdvSysTable=ipxAdvSysTable, mrmMonPortIndex=mrmMonPortIndex, logIndex=logIndex, mrmMonRepReadableFrames=mrmMonRepReadableFrames, mrmMonRepUnicastOctets=mrmMonRepUnicastOctets, ipxBasicSysConfigSockets=ipxBasicSysConfigSockets, mrmMonCardTotalErrors=mrmMonCardTotalErrors, mrmMonRepBandwidthUsed=mrmMonRepBandwidthUsed, deprRptrMonitorPortRunts=deprRptrMonitorPortRunts, resMainPort=resMainPort, resSbRepeater=resSbRepeater, ipxCircuit=ipxCircuit, vmConPortSquelch=vmConPortSquelch, securityAuditObject=securityAuditObject, mrmMonPortAutoPartitions=mrmMonPortAutoPartitions, resSbPort=resSbPort, mrmMonCardIndex=mrmMonCardIndex, mrmMonCardAlignmentErrors=mrmMonCardAlignmentErrors, resMainState=resMainState, mrmMonRepeaterPackage=mrmMonRepeaterPackage, deprRptrMonitorGroupEntry=deprRptrMonitorGroupEntry, vmConMediaModuleRevNo=vmConMediaModuleRevNo, deprRptrMonitorPortInfo=deprRptrMonitorPortInfo, securityLevel=securityLevel, eventOwner=eventOwner, ipxAdvSysMaxHops=ipxAdvSysMaxHops, powerStackBackupPresent=powerStackBackupPresent, multiRepeater=multiRepeater, mrmPortLinkState=mrmPortLinkState, pollTableFailedTrap=pollTableFailedTrap, mrmMonPortReadableOctets=mrmMonPortReadableOctets, powerSupply=powerSupply, deprRpMauTable=deprRpMauTable, mrmMonPortFrameTooLongs=mrmMonPortFrameTooLongs, ipxAdvSysCircCount=ipxAdvSysCircCount, powerStackPackage=powerStackPackage, poll=poll, mrmPortPartitionEvent=mrmPortPartitionEvent, pddrmMonRepeaterCollisions=pddrmMonRepeaterCollisions, ipxBasicSysInBadChecksums=ipxBasicSysInBadChecksums, vmConfigGroupTable=vmConfigGroupTable, mrmPortTable=mrmPortTable, tcp=tcp, system=system, snmpTrapTable=snmpTrapTable, mrmPortInterfaceType=mrmPortInterfaceType, novell=novell, esPortAccessTable=esPortAccessTable, deprRptrGroupCapacity=deprRptrGroupCapacity, alarmSampleType=alarmSampleType, gaugeConfigureColumn=gaugeConfigureColumn, deprRptrAddrTrackLastSourceAddress=deprRptrAddrTrackLastSourceAddress, pollTableEntry=pollTableEntry, deprRptrGroupLastOperStatusChange=deprRptrGroupLastOperStatusChange, deprRptrHealth=deprRptrHealth, ipxBasicSysOutPackets=ipxBasicSysOutPackets, ip=ip, vmConMediaModuleCardType=vmConMediaModuleCardType, resRepeater=resRepeater, mrmPortAdminStatus=mrmPortAdminStatus, mrmMonPortAlignmentErrors=mrmMonPortAlignmentErrors, configV24Update=configV24Update, linkBuilderFMS_cards_utp=linkBuilderFMS_cards_utp, chipsets=chipsets, capture=capture, pollOwner=pollOwner, deprRptrAddrTrackPortIndex=deprRptrAddrTrackPortIndex, icmp=icmp, mrmMonCardVeryLongEvents=mrmMonCardVeryLongEvents, vmConGroupPortMask=vmConGroupPortMask, pddrmMonRepeaterVeryLongEvents=pddrmMonRepeaterVeryLongEvents, resSbMainPort=resSbMainPort, trafficLevel=trafficLevel, linkBuilderFMSII_cards_24tp_rj45=linkBuilderFMSII_cards_24tp_rj45, snmpTrapCommunity=snmpTrapCommunity, powerStackRBSPresent=powerStackRBSPresent, pddrmMonPortIndex=pddrmMonPortIndex, resStandbyState=resStandbyState, gaugeThresholdLevel=gaugeThresholdLevel, ipxAdvSysInstance=ipxAdvSysInstance, deprRptrGroupIndex=deprRptrGroupIndex, vmConfigMediaTable=vmConfigMediaTable, deprRptrRptrInfo=deprRptrRptrInfo, linkBuilder3GH_mib=linkBuilder3GH_mib, vmConPortLinkPulse=vmConPortLinkPulse, startLastSystemError=startLastSystemError, pddrmBasRepeaterPackage=pddrmBasRepeaterPackage)
mibBuilder.exportSymbols("LBHUB-FMS-MIB", pollRowStatus=pollRowStatus, deprRptrMonitorPackage=deprRptrMonitorPackage, mrmMonCardReadableOctets=mrmMonCardReadableOctets, alarmFallingEventIndex=alarmFallingEventIndex, loadableDeviceTable=loadableDeviceTable, securityAuditIndex=securityAuditIndex, deprRptrAddrTrackEntry=deprRptrAddrTrackEntry, repRepErrors=repRepErrors, vmMonMgmtBusOverflowError=vmMonMgmtBusOverflowError, logDescription=logDescription, pddrmMonRepeaterRunts=pddrmMonRepeaterRunts, setIpIfMask=setIpIfMask, unusedGeneric12=unusedGeneric12, mrmMonRepeaterErrorFrames=mrmMonRepeaterErrorFrames, vmConfigMediaEntry=vmConfigMediaEntry, logTime=logTime, mrmMonPortLastAddress=mrmMonPortLastAddress, trapTable=trapTable, setIpIfTable=setIpIfTable, securityViolation=securityViolation, pollAddress=pollAddress, configV24DSRControl=configV24DSRControl, PhysAddress=PhysAddress, setIpIfEntry=setIpIfEntry, deprRptrMonitorPortReadableOctets=deprRptrMonitorPortReadableOctets, esPortAccessEntry=esPortAccessEntry, dedicatedRouteServer=dedicatedRouteServer, deprRptrMonitorGroupTable=deprRptrMonitorGroupTable, testData=testData, localManagementUpdate=localManagementUpdate, startRestartAction=startRestartAction, linkBuilderFMSII_cards_6fiber_st=linkBuilderFMSII_cards_6fiber_st, hosts=hosts, mrmMonRepTxCollisions=mrmMonRepTxCollisions, endStation=endStation, pddrmMonGroupLateEvents=pddrmMonGroupLateEvents, mrmMonPortServiceId=mrmMonPortServiceId, trapDestination=trapDestination, setupIp=setupIp, deprRpMauPortIndex=deprRpMauPortIndex, setIpIfAddr=setIpIfAddr, mrmMonPortTrafficLevel=mrmMonPortTrafficLevel, gaugeItemType=gaugeItemType, filter=filter, trapSubject=trapSubject, deprRptrOperStatus=deprRptrOperStatus, mrmMonPortRunts=mrmMonPortRunts, mib_2=mib_2, gaugeThresholdLevelScaler=gaugeThresholdLevelScaler, resStandbyMapTable=resStandbyMapTable, deprRpMauGroupIndex=deprRpMauGroupIndex, pddrmMonRepeaterReadableOctets=pddrmMonRepeaterReadableOctets, alarmFallingThreshold=alarmFallingThreshold, ipxBasicSysNoRoutes=ipxBasicSysNoRoutes, linkBuilderFMS=linkBuilderFMS, estTableFull=estTableFull, mrmPortLinkStateEvent=mrmPortLinkStateEvent, gauges=gauges, vmConfigPortEntry=vmConfigPortEntry, deprRptrAddrTrackPackage=deprRptrAddrTrackPackage, mrmMonRepUnicastFrames=mrmMonRepUnicastFrames, securityAuditResult=securityAuditResult, eventIndex=eventIndex, linkBuilderMSH=linkBuilderMSH, deprRptrMonitorGroupInfo=deprRptrMonitorGroupInfo, mrmMonPortClearCounters=mrmMonPortClearCounters, hostTopN=hostTopN, dudUnauthorisedDevice=dudUnauthorisedDevice, gaugeValue=gaugeValue, mibDoc=mibDoc, configV24StopBits=configV24StopBits, mrmMonCardBroadcastFrames=mrmMonCardBroadcastFrames, linkBuilderFDDI_wghub_mib=linkBuilderFDDI_wghub_mib, faultEntry=faultEntry, snmpTrapThrottle=snmpTrapThrottle, ipxBasicSysInReceives=ipxBasicSysInReceives, repAdminStateChange=repAdminStateChange, alarm=alarm, powerStackBackupFault=powerStackBackupFault, securityCommunityEnable=securityCommunityEnable, gaugesRecoveryTrap=gaugesRecoveryTrap, pddrmMonPortDummyPackage=pddrmMonPortDummyPackage, mrmPortModule=mrmPortModule, configV24Table=configV24Table, dot1dBridge=dot1dBridge, resPairState=resPairState, linkBuilder10BTi=linkBuilder10BTi, securityUserTable=securityUserTable, deprRptrMonitorPortTotalErrors=deprRptrMonitorPortTotalErrors, deprRptrMonitorGroupTotalFrames=deprRptrMonitorGroupTotalFrames, setIpIfIndex=setIpIfIndex, gaugeTableEntry=gaugeTableEntry, ipxAdvSysServCount=ipxAdvSysServCount, faultModifiedFlag=faultModifiedFlag, linkBuilderECS_cards=linkBuilderECS_cards, specificTrap=specificTrap, mrmMonPortDataRateMismatches=mrmMonPortDataRateMismatches, vmMacMonitorEntry=vmMacMonitorEntry, mrmMonRepBound5=mrmMonRepBound5, mrmMonPortFCSErrors=mrmMonPortFCSErrors, vmConPortGroupIndex=vmConPortGroupIndex, mrmMonRepReadableOctets=mrmMonRepReadableOctets, ascLocalManagementBanner=ascLocalManagementBanner, ipxBasicSysExistState=ipxBasicSysExistState, esAddrType=esAddrType, vmMacMonitorMemoryErrors=vmMacMonitorMemoryErrors, deprRptrPortGroupIndex=deprRptrPortGroupIndex, deprRptrTotalPartitionedPorts=deprRptrTotalPartitionedPorts, mrmCardMDIenable=mrmCardMDIenable, snmpTrapRowStatus=snmpTrapRowStatus, mrmMonRepAlignmentErrors=mrmMonRepAlignmentErrors, mrmMonPortBroadcastOctets=mrmMonPortBroadcastOctets, gaugeRecoveryAction=gaugeRecoveryAction, mrmMonPortPackage=mrmMonPortPackage, products=products, mrmMonPortMulticastFrames=mrmMonPortMulticastFrames, repCardErrors=repCardErrors, configV24Entry=configV24Entry, pollInformation=pollInformation, ascTimeAttemptedLogin=ascTimeAttemptedLogin, pddrmMonPortESTFilter=pddrmMonPortESTFilter, mrmPortFunction=mrmPortFunction, event=event, deprRpMauJabberState=deprRpMauJabberState, resTableEntry=resTableEntry, pddrmMonPortBroadCastFrames=pddrmMonPortBroadCastFrames, esTableEntry=esTableEntry, securityUserMgrParty=securityUserMgrParty, repPortErrors=repPortErrors, gaugeSamplesPerAverage=gaugeSamplesPerAverage, mrmMonPortUnicastFrames=mrmMonPortUnicastFrames, ipxBasicSysOutRequests=ipxBasicSysOutRequests, vmMonFaultModifiedFlag=vmMonFaultModifiedFlag, resFlushTable=resFlushTable, pddrmMonGroupShortEvents=pddrmMonGroupShortEvents, deprRptrAddrTrackGroupIndex=deprRptrAddrTrackGroupIndex, linkBuilderMSH_cards=linkBuilderMSH_cards, deprRptrMonitorPortGroupIndex=deprRptrMonitorPortGroupIndex, linkBuilderFMSII_cards=linkBuilderFMSII_cards, startResetAction=startResetAction, mrmCardDOBPorts=mrmCardDOBPorts, DisplayString=DisplayString, mrmMonRepBroadcastOctets=mrmMonRepBroadcastOctets, vmAutoPartitionState=vmAutoPartitionState, mrmMonPortBandwidthUsed=mrmMonPortBandwidthUsed, ipxAdvSysEntry=ipxAdvSysEntry, mrmMonPortBound5=mrmMonPortBound5, ipxBasicSysInstance=ipxBasicSysInstance, mrmResilience=mrmResilience, logEntry=logEntry, mrmMonitorRepTable=mrmMonitorRepTable, pddrmMonRepeaterDummyPackage=pddrmMonRepeaterDummyPackage, repLinkStateChange=repLinkStateChange, resSbSlot=resSbSlot, ecPortPortNo=ecPortPortNo, vmConPortType=vmConPortType, linkBuilderFMSLBridge=linkBuilderFMSLBridge, linkSwitchMSH=linkSwitchMSH, linkBuilder10BT_cards_utp=linkBuilder10BT_cards_utp, tokenRing=tokenRing, pddrmMonGroupFCSErrors=pddrmMonGroupFCSErrors, ipxAdvSysForwPackets=ipxAdvSysForwPackets, configV24DCDControl=configV24DCDControl, vmMonMgmtBusFramingError=vmMonMgmtBusFramingError, eventTable=eventTable, pollRate=pollRate, pollAlarmIndex=pollAlarmIndex, alarmRisingThreshold=alarmRisingThreshold, pddrmMonitorPortEntry=pddrmMonitorPortEntry, mrmCardPortCapacity=mrmCardPortCapacity, linkBuilderFMS_cards=linkBuilderFMS_cards, pollRoundTripTime=pollRoundTripTime, linkBuilderFMSII_cards_12fiber_st=linkBuilderFMSII_cards_12fiber_st, brouter=brouter, mrmPortEntry=mrmPortEntry, ipxTraps=ipxTraps, siSlipPort=siSlipPort, mrmMonDummyPackage=mrmMonDummyPackage, vmMacMonitorTable=vmMacMonitorTable, mrmMonCardAutoPartitions=mrmMonCardAutoPartitions, mrmMonCardFrameTooLongs=mrmMonCardFrameTooLongs, vmMacMonitorOverflowErrors=vmMacMonitorOverflowErrors, resStandbyPort=resStandbyPort, mrmMonCardErrorsPer10000Packets=mrmMonCardErrorsPer10000Packets, vmMacMonitorFramingErrors=vmMacMonitorFramingErrors, ascUserNameForLastAttemptedLogin=ascUserNameForLastAttemptedLogin, deprRptrMonitorPortVeryLongEvents=deprRptrMonitorPortVeryLongEvents, esPortNumber=esPortNumber, trapCommunity=trapCommunity, mrmMonPortUnicastOctets=mrmMonPortUnicastOctets, eventType=eventType, ipxAdvSysCompressDiscards=ipxAdvSysCompressDiscards, mrmMonCardBound5=mrmMonCardBound5, vmMonBatteryStatus=vmMonBatteryStatus, linkbuilderConfigPackage=linkbuilderConfigPackage, mrmMonRepMulticastOctets=mrmMonRepMulticastOctets, securityUserLocParty=securityUserLocParty, ipxAdvSysDestCount=ipxAdvSysDestCount, mrmMonCardReadableFrames=mrmMonCardReadableFrames, deprRptrMonitorPortAlignmentErrors=deprRptrMonitorPortAlignmentErrors, alarmStatus=alarmStatus, securityUserLevel=securityUserLevel, trapThrottle=trapThrottle, chassis=chassis, resStandbySlot=resStandbySlot, statistics=statistics, slDeviceType=slDeviceType, alarmStartupAlarm=alarmStartupAlarm, ipxBasicSysInUnknownSockets=ipxBasicSysInUnknownSockets, gaugeThresholdAction=gaugeThresholdAction, deprRptrGroupDescr=deprRptrGroupDescr, mrmBasCardPackage=mrmBasCardPackage, mrmMonRepMulticastFrames=mrmMonRepMulticastFrames, ascLoginStatus=ascLoginStatus, linkBuilder3GH_cards=linkBuilder3GH_cards, alarmTable=alarmTable, genericUnixServer=genericUnixServer, linkBuilderFMS_cards_fiber=linkBuilderFMS_cards_fiber, mrmMonitorPortTable=mrmMonitorPortTable, mrmMonPortErrorFrames=mrmMonPortErrorFrames, pddrmMonPortAutoPartitionTraps=pddrmMonPortAutoPartitionTraps, deprRptrMonitorGroupTotalErrors=deprRptrMonitorGroupTotalErrors, configV24PortID=configV24PortID, deprRpMauJabbers=deprRpMauJabbers, mrmMonCardBound1=mrmMonCardBound1, ipxBasicSysName=ipxBasicSysName, matrix=matrix, slLoad=slLoad, ipxBasicSysNetNumber=ipxBasicSysNetNumber, deprRptrMonitorRptrInfo=deprRptrMonitorRptrInfo, deprRptrMonitorGroupIndex=deprRptrMonitorGroupIndex, deprRptrGroupChange=deprRptrGroupChange, deprSnmpDot3RptrMgt=deprSnmpDot3RptrMgt, mrmCardServiceId=mrmCardServiceId, faultTable=faultTable, mrmMonPortBound3=mrmMonPortBound3, mrmMonRepDataRateMismatches=mrmMonRepDataRateMismatches, deprRptrAddrTrackPortInfo=deprRptrAddrTrackPortInfo, pddrmMonPortGroupIndex=pddrmMonPortGroupIndex, slHardwareVersion=slHardwareVersion, pddrmMonGroupDummyPackage=pddrmMonGroupDummyPackage, pddrmMonGroupCollisions=pddrmMonGroupCollisions, pddrmMonGroupDataRateMismatches=pddrmMonGroupDataRateMismatches, repPortTopUsage=repPortTopUsage, esSlotNumber=esSlotNumber, ecPortAddrType=ecPortAddrType, linkBuilderFMS_cards_coax=linkBuilderFMS_cards_coax, pddrmMonGroupIndex=pddrmMonGroupIndex, mrmPortSecurityAvailable=mrmPortSecurityAvailable, faultErrorNumber=faultErrorNumber, deprRptrMonitorPortDataRateMismatches=deprRptrMonitorPortDataRateMismatches, setup=setup, linkBuilderFMSII=linkBuilderFMSII, mrmMonCardFCSErrors=mrmMonCardFCSErrors)
mibBuilder.exportSymbols("LBHUB-FMS-MIB", localSnmp=localSnmp, pollNextFreeIndex=pollNextFreeIndex, risingAlarm=risingAlarm, pddrmMonPortClearCounters=pddrmMonPortClearCounters, repCardTopUsage=repCardTopUsage, resSbType=resSbType, configV24FlowControl=configV24FlowControl, ipxSystem=ipxSystem, securityAuditValue=securityAuditValue, gaugeTableUpdate=gaugeTableUpdate, mrmMonCardClearCounters=mrmMonCardClearCounters, deprRptrAddrTrackRptrInfo=deprRptrAddrTrackRptrInfo, vmMonFaultIndex=vmMonFaultIndex, mrmMonPortAddressChanges=mrmMonPortAddressChanges, securityUserTableEntry=securityUserTableEntry, linkBuilder10BTi_mib=linkBuilder10BTi_mib, securityTermEnable=securityTermEnable, mrmMonCardMulticastFrames=mrmMonCardMulticastFrames, mrmMonRepShortEvents=mrmMonRepShortEvents, securityFrontPanelEnable=securityFrontPanelEnable, pddrmMonRepeaterMultiCastFrames=pddrmMonRepeaterMultiCastFrames, esModTableEntry=esModTableEntry, estStateChange=estStateChange, gaugeSamplePeriod=gaugeSamplePeriod, vmConPortIndex=vmConPortIndex, deprRpMauMediaAvailable=deprRpMauMediaAvailable, startRestartCount=startRestartCount, deprRptrMonitorPortFrameTooLongs=deprRptrMonitorPortFrameTooLongs, vmConGroupIndex=vmConGroupIndex, mrmMonCardRunts=mrmMonCardRunts, deprRptrAddrTrackTable=deprRptrAddrTrackTable, mrmMonCardLateEvents=mrmMonCardLateEvents, deprRptrMonitorGroupTotalOctets=deprRptrMonitorGroupTotalOctets, trapEntry=trapEntry, ipxServices=ipxServices, mrmPortDUDAction=mrmPortDUDAction, mrmMonCardUnicastOctets=mrmMonCardUnicastOctets, linkBuilderMSH_mib=linkBuilderMSH_mib, vmMauMediaAvailable=vmMauMediaAvailable, configV24CharSize=configV24CharSize, genExperimental=genExperimental, vmMacMonitorBabbleErrors=vmMacMonitorBabbleErrors, eventLastTimeSent=eventLastTimeSent, configV24AutoConfig=configV24AutoConfig, pddrmMonRepeaterFrameTooLongs=pddrmMonRepeaterFrameTooLongs, resMainSlot=resMainSlot, pddrmMonGroupAlignmentErrors=pddrmMonGroupAlignmentErrors, ipxAdvSysNETBIOSPackets=ipxAdvSysNETBIOSPackets, eventCommunity=eventCommunity, bridgeMgmt=bridgeMgmt, deprRptrNonDisruptTest=deprRptrNonDisruptTest, mrmMonRepAction=mrmMonRepAction, pddrmMonRepeaterClearCounters=pddrmMonRepeaterClearCounters, deprRpMauJabberTrap=deprRpMauJabberTrap, pddrmMonGroupVeryLongEvents=pddrmMonGroupVeryLongEvents, ipxAdvSysTooManyHops=ipxAdvSysTooManyHops, pddrmMonRepeaterUniCastFrames=pddrmMonRepeaterUniCastFrames, deprRptrMonitorPortTable=deprRptrMonitorPortTable, deprRptrGroupOperStatus=deprRptrGroupOperStatus, powerStackRBSStatus=powerStackRBSStatus, mrmMonCardBound3=mrmMonCardBound3, pollIndex=pollIndex, vmMacMonitorFCSErrors=vmMacMonitorFCSErrors, lBridgeECS_mib=lBridgeECS_mib, transmission=transmission, mrmMonRepFCSErrors=mrmMonRepFCSErrors, mrmMonCardShortEvents=mrmMonCardShortEvents, vmMonPOSTResults=vmMonPOSTResults, vmConPortXoverSwitchState=vmConPortXoverSwitchState, deprRptrGroupInfo=deprRptrGroupInfo, mrmMonRepBound4=mrmMonRepBound4, vmMonFaultRestartCount=vmMonFaultRestartCount, vmMonFaultTable=vmMonFaultTable, gaugeConfigureObjId=gaugeConfigureObjId, ipxBasicSysInDiscards=ipxBasicSysInDiscards, eventEntry=eventEntry, slSoftwareVersion=slSoftwareVersion, slDeviceInstance=slDeviceInstance, vmMonFault=vmMonFault, pddrmMonGroupRunts=pddrmMonGroupRunts, gaugeItemId=gaugeItemId, deprRpMauBasicGroup=deprRpMauBasicGroup, linkBuilderFDDIwg=linkBuilderFDDIwg, mrmMonPortBound1=mrmMonPortBound1, mrmMonRepBroadcastFrames=mrmMonRepBroadcastFrames, mrmPortIndex=mrmPortIndex, esModSlotNumber=esModSlotNumber, securityUserCommunity=securityUserCommunity, alarmOwner=alarmOwner, mrmMonitorPackage=mrmMonitorPackage, pddrmMonRepeaterAlignmentErrors=pddrmMonRepeaterAlignmentErrors, resPairAction=resPairAction, powerStackBackupRecovered=powerStackBackupRecovered, esTable=esTable, mrmMonPortBound4=mrmMonPortBound4, mrmMonitorRepEntry=mrmMonitorRepEntry, repRepTopUsage=repRepTopUsage, ipxBasicSysOutDiscards=ipxBasicSysOutDiscards, ipxBasicSysOpenSocketFails=ipxBasicSysOpenSocketFails, linkSwitch_mib=linkSwitch_mib, vmMonMgmtBusOverrunError=vmMonMgmtBusOverrunError, pollTableSuccessTrap=pollTableSuccessTrap, pollTargetType=pollTargetType, powerStackTableEntry=powerStackTableEntry, vmConfigPortTable=vmConfigPortTable, mrmCardTable=mrmCardTable, securityUserName=securityUserName, ifExtensions=ifExtensions, snmpTrapNextFreeIndex=snmpTrapNextFreeIndex, pddrmMonRepeaterBroadCastFrames=pddrmMonRepeaterBroadCastFrames, linkBuilder10BTi_cards=linkBuilder10BTi_cards, eventDescription=eventDescription, vmMacMonitorMissErrors=vmMacMonitorMissErrors, deprRptrGroupPortCapacity=deprRptrGroupPortCapacity, pddrmMonPortMediaAvailableTraps=pddrmMonPortMediaAvailableTraps, ecPortCardNo=ecPortCardNo, mrmBasicPackage=mrmBasicPackage, fallingAlarm=fallingAlarm, alarmValue=alarmValue, mrmMonCardSmartPackage=mrmMonCardSmartPackage, ecPortIndex=ecPortIndex, pddrmMonRepeaterMediaAvailableTraps=pddrmMonRepeaterMediaAvailableTraps, ipxBasicSysOutMalformedRequests=ipxBasicSysOutMalformedRequests, mrmMonRepeaterSmartPackage=mrmMonRepeaterSmartPackage, sysLoader=sysLoader, deprRptrPortEntry=deprRptrPortEntry, udp=udp, linkbuilderMonitorPackage=linkbuilderMonitorPackage, slLoadStatus=slLoadStatus, gaugeState=gaugeState, mrmMonCardBound0=mrmMonCardBound0, pddrmBasGroupPackage=pddrmBasGroupPackage, pddrmBasPortPackage=pddrmBasPortPackage, pddrmMonRepeaterAutoPartitionTraps=pddrmMonRepeaterAutoPartitionTraps, deprRptrGroupEntry=deprRptrGroupEntry, snmp=snmp, faultRestartCount=faultRestartCount, mrmPortCardIndex=mrmPortCardIndex, snmpTrapDestination=snmpTrapDestination, vmMacMonitorLCarErrors=vmMacMonitorLCarErrors, deprRptrMonitorPortLateEvents=deprRptrMonitorPortLateEvents, linkBuilderFMSII_cards_24tp_telco=linkBuilderFMSII_cards_24tp_telco, mrmMonCardDataRateMismatches=mrmMonCardDataRateMismatches, linkBuilderECS_mib=linkBuilderECS_mib, mrmMonRepTotalErrors=mrmMonRepTotalErrors, deprRptrGroupTable=deprRptrGroupTable, mrmCardIndex=mrmCardIndex, mrmBasPortPackage=mrmBasPortPackage, securityUserStatus=securityUserStatus, linkBuilderFMS_mib=linkBuilderFMS_mib, mrmMonCardMulticastOctets=mrmMonCardMulticastOctets, resResilienceSwitch=resResilienceSwitch, heartbeatInterval=heartbeatInterval, vmConMediaIndex=vmConMediaIndex, egp=egp, pddrmMonRepeaterLateEvents=pddrmMonRepeaterLateEvents, slServerIpAddress=slServerIpAddress, securityEnableTable=securityEnableTable, security=security, pddrmMonPortPackage=pddrmMonPortPackage, esAddress=esAddress, pddrmMonRepeaterShortEvents=pddrmMonRepeaterShortEvents, logEventIndex=logEventIndex, deprRptrMonitorTransmitCollisions=deprRptrMonitorTransmitCollisions, pddrmMonRepeaterAutoPartitions=pddrmMonRepeaterAutoPartitions, vmMonMgmtBusFiFoFullCounter=vmMonMgmtBusFiFoFullCounter, esDatabaseState=esDatabaseState, interfaces=interfaces, linkBuilder3GH=linkBuilder3GH, setupStart=setupStart, gaugeIndex=gaugeIndex, gaugeTableSize=gaugeTableSize, linkbuilderMonitorMacPackage=linkbuilderMonitorMacPackage, ipxBasicSysTable=ipxBasicSysTable, pddrmMonRepeaterDataRateMismatches=pddrmMonRepeaterDataRateMismatches, ecPortAddress=ecPortAddress, linkBuilderFMSII_cards_10coax_bnc=linkBuilderFMSII_cards_10coax_bnc, snmpTrapCategory=snmpTrapCategory, mrmMonPortVeryLongEvents=mrmMonPortVeryLongEvents, mrmMonPortBound2=mrmMonPortBound2, ipxBasicSysNode=ipxBasicSysNode, mrmMonPortLateEvents=mrmMonPortLateEvents, deprSnmpDot3RpMauMgt=deprSnmpDot3RpMauMgt, mrmMonCardBandwidthUsed=mrmMonCardBandwidthUsed, deprRptrMonitorPortEntry=deprRptrMonitorPortEntry, errorFrames=errorFrames, deprRptrResetEvent=deprRptrResetEvent, securitySecureEnable=securitySecureEnable, mrmMonitorPortEntry=mrmMonitorPortEntry, heartbeatEvent=heartbeatEvent, deprRptrMonitorPortReadableFrames=deprRptrMonitorPortReadableFrames, deprRptrPortTable=deprRptrPortTable, rmon=rmon, fault=fault, snmpTrapEntry=snmpTrapEntry, linkbuilderStatusPackage=linkbuilderStatusPackage, asciiAgent=asciiAgent, configV24Speed=configV24Speed, mrmMonRepVeryLongEvents=mrmMonRepVeryLongEvents, deprRpMauIndex=deprRpMauIndex, slFilename=slFilename, linkBuilderECS=linkBuilderECS, pddrmMonitorPortTable=pddrmMonitorPortTable, deskMan_mib=deskMan_mib, ipxBasicSysInHdrErrors=ipxBasicSysInHdrErrors, pddrmMonPortMultiCastFrames=pddrmMonPortMultiCastFrames, deprRptrReset=deprRptrReset, configV24ConnType=configV24ConnType, mrmMonPortCardIndex=mrmMonPortCardIndex)
