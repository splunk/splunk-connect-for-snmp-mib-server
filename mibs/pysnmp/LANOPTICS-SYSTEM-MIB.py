#
# PySNMP MIB module LANOPTICS-SYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LANOPTICS-SYSTEM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:55:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, MibIdentifier, enterprises, Counter32, Integer32, ModuleIdentity, Unsigned32, TimeTicks, Bits, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter64, NotificationType, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibIdentifier", "enterprises", "Counter32", "Integer32", "ModuleIdentity", "Unsigned32", "TimeTicks", "Bits", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter64", "NotificationType", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
lanOptics = MibIdentifier((1, 3, 6, 1, 4, 1, 224))
lanOpticsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 224, 2))
lanOpticsSystemCMOS = MibIdentifier((1, 3, 6, 1, 4, 1, 224, 2, 3))
lanOpticsSystemCMOSIp = MibIdentifier((1, 3, 6, 1, 4, 1, 224, 2, 3, 1))
lanOpticsSystemCMOSHub = MibIdentifier((1, 3, 6, 1, 4, 1, 224, 2, 3, 2))
lanOpticsSystemCMOSRPL = MibIdentifier((1, 3, 6, 1, 4, 1, 224, 2, 3, 3))
lanOpticsSystemCMOSSerial = MibIdentifier((1, 3, 6, 1, 4, 1, 224, 2, 3, 4))
lanOpticsSystemCMOSSRAM = MibIdentifier((1, 3, 6, 1, 4, 1, 224, 2, 3, 5))
lanOpticsSystemCMOSSNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 224, 2, 3, 6))
lanOpticsSystemCMOSACCESS = MibIdentifier((1, 3, 6, 1, 4, 1, 224, 2, 3, 7))
lanOpticsSystemCMOSBRDG = MibIdentifier((1, 3, 6, 1, 4, 1, 224, 2, 3, 8))
snSysDirectory = MibScalar((1, 3, 6, 1, 4, 1, 224, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSysDirectory.setStatus('mandatory')
snAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 224, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgentVersion.setStatus('mandatory')
snSysCMOSIpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 224, 2, 3, 1, 1), )
if mibBuilder.loadTexts: snSysCMOSIpInterfaceTable.setStatus('mandatory')
pysmiFakeCol1000 = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 2, 3, 1, 1, 1) + (1000, ), Integer32())
snSysCMOSIpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 224, 2, 3, 1, 1, 1), ).setIndexNames((0, "LANOPTICS-SYSTEM-MIB", "pysmiFakeCol1000"))
if mibBuilder.loadTexts: snSysCMOSIpInterfaceEntry.setStatus('mandatory')
snSysCMOSIpIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 2, 3, 1, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSysCMOSIpIpAddr.setStatus('mandatory')
snSysCMOSIpNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 2, 3, 1, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSysCMOSIpNetMask.setStatus('mandatory')
snSysCMOSIpDefGw = MibScalar((1, 3, 6, 1, 4, 1, 224, 2, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSysCMOSIpDefGw.setStatus('mandatory')
snSysCMOSIpTFTPOp = MibScalar((1, 3, 6, 1, 4, 1, 224, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noTFTP", 1), ("limited", 2), ("continuous", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSysCMOSIpTFTPOp.setStatus('mandatory')
snSysCMOSIpTFTPAddr = MibScalar((1, 3, 6, 1, 4, 1, 224, 2, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSysCMOSIpTFTPAddr.setStatus('mandatory')
snSysCMOSIpTFTPFileName = MibScalar((1, 3, 6, 1, 4, 1, 224, 2, 3, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSysCMOSIpTFTPFileName.setStatus('mandatory')
snSysCMOSIpTFTPDrive = MibScalar((1, 3, 6, 1, 4, 1, 224, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(41, 42, 43, 44))).clone(namedValues=NamedValues(("driveA", 41), ("driveB", 42), ("driveC", 43), ("driveD", 44)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSysCMOSIpTFTPDrive.setStatus('mandatory')
snSysCMOSHubSlotConfigTable = MibTable((1, 3, 6, 1, 4, 1, 224, 2, 3, 2, 1), )
if mibBuilder.loadTexts: snSysCMOSHubSlotConfigTable.setStatus('mandatory')
pysmiFakeCol1001 = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 2, 3, 2, 1, 1) + (1001, ), Integer32())
snSysCMOSHubSlotConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 224, 2, 3, 2, 1, 1), ).setIndexNames((0, "LANOPTICS-SYSTEM-MIB", "pysmiFakeCol1001"))
if mibBuilder.loadTexts: snSysCMOSHubSlotConfigEntry.setStatus('mandatory')
snSysSlotLastOperations = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 2, 3, 2, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSysSlotLastOperations.setStatus('mandatory')
snSysResetSlotQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 2, 3, 2, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSysResetSlotQueue.setStatus('mandatory')
snSysCMOSHubSaveHubFunctions = MibScalar((1, 3, 6, 1, 4, 1, 224, 2, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-saved", 1), ("saved", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSysCMOSHubSaveHubFunctions.setStatus('mandatory')
snSysCMOSRPLMode = MibScalar((1, 3, 6, 1, 4, 1, 224, 2, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rpl-off", 1), ("rpl-on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSysCMOSRPLMode.setStatus('mandatory')
snSysCMOSFlashMode = MibScalar((1, 3, 6, 1, 4, 1, 224, 2, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flash-off", 1), ("flash-on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSysCMOSFlashMode.setStatus('mandatory')
snSysCMOSSerialMode = MibScalar((1, 3, 6, 1, 4, 1, 224, 2, 3, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("proprietary", 1), ("slip", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSysCMOSSerialMode.setStatus('mandatory')
snSysCMOSSerialComSelect = MibScalar((1, 3, 6, 1, 4, 1, 224, 2, 3, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sr-COM1", 1), ("sr-COM2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSysCMOSSerialComSelect.setStatus('mandatory')
snSysCMOSSerialBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 224, 2, 3, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("baud1200", 1), ("baud2400", 2), ("baud4800", 3), ("baud9600", 4), ("baud19200", 5), ("baud38300", 6), ("baud57600", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSysCMOSSerialBaudRate.setStatus('mandatory')
snSysCMOSSerialWordLength = MibScalar((1, 3, 6, 1, 4, 1, 224, 2, 3, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bits-7", 1), ("bits-8", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSysCMOSSerialWordLength.setStatus('mandatory')
snSysCMOSSerialStopBits = MibScalar((1, 3, 6, 1, 4, 1, 224, 2, 3, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bits-1", 1), ("bits-15", 2), ("bits-2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSysCMOSSerialStopBits.setStatus('mandatory')
snSysCMOSSerialParityCheck = MibScalar((1, 3, 6, 1, 4, 1, 224, 2, 3, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("even", 1), ("odd", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSysCMOSSerialParityCheck.setStatus('mandatory')
snSysCMOSSRAMKeepAliveSecInterval = MibScalar((1, 3, 6, 1, 4, 1, 224, 2, 3, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSysCMOSSRAMKeepAliveSecInterval.setStatus('mandatory')
snSysCMOSSNMPCommunitiesNum = MibScalar((1, 3, 6, 1, 4, 1, 224, 2, 3, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSysCMOSSNMPCommunitiesNum.setStatus('mandatory')
snSysCMOSSNMPTrapManagersNum = MibScalar((1, 3, 6, 1, 4, 1, 224, 2, 3, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSysCMOSSNMPTrapManagersNum.setStatus('mandatory')
snSysCMOSSNMPCommunitiesTable = MibTable((1, 3, 6, 1, 4, 1, 224, 2, 3, 6, 3), )
if mibBuilder.loadTexts: snSysCMOSSNMPCommunitiesTable.setStatus('mandatory')
pysmiFakeCol1002 = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 2, 3, 6, 3, 1) + (1002, ), Integer32())
snSysCMOSSNMPCommunitiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 224, 2, 3, 6, 3, 1), ).setIndexNames((0, "LANOPTICS-SYSTEM-MIB", "pysmiFakeCol1002"))
if mibBuilder.loadTexts: snSysCMOSSNMPCommunitiesEntry.setStatus('mandatory')
snSysCMOSSNMPCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 2, 3, 6, 3, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSysCMOSSNMPCommunityName.setStatus('mandatory')
snSysCMOSSNMPCommunityPrivs = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 2, 3, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("read-Only", 1), ("read-Write", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSysCMOSSNMPCommunityPrivs.setStatus('mandatory')
snSysCMOSSNMPTrapCommunitiesTable = MibTable((1, 3, 6, 1, 4, 1, 224, 2, 3, 6, 4), )
if mibBuilder.loadTexts: snSysCMOSSNMPTrapCommunitiesTable.setStatus('mandatory')
pysmiFakeCol1003 = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 2, 3, 6, 4, 1) + (1003, ), Integer32())
snSysCMOSSNMPTrapCommunitiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 224, 2, 3, 6, 4, 1), ).setIndexNames((0, "LANOPTICS-SYSTEM-MIB", "pysmiFakeCol1003"))
if mibBuilder.loadTexts: snSysCMOSSNMPTrapCommunitiesEntry.setStatus('mandatory')
snSysCMOSSNMPTrapCommunityIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 2, 3, 6, 4, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSysCMOSSNMPTrapCommunityIpAddr.setStatus('mandatory')
snSysCMOSACCESSOffset = MibScalar((1, 3, 6, 1, 4, 1, 224, 2, 3, 7, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSysCMOSACCESSOffset.setStatus('mandatory')
snSysCMOSACCESSLength = MibScalar((1, 3, 6, 1, 4, 1, 224, 2, 3, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSysCMOSACCESSLength.setStatus('mandatory')
snSysCMOSACCESSSequence = MibScalar((1, 3, 6, 1, 4, 1, 224, 2, 3, 7, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSysCMOSACCESSSequence.setStatus('mandatory')
snSysCMOSBRDGradius = MibScalar((1, 3, 6, 1, 4, 1, 224, 2, 3, 8, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSysCMOSBRDGradius.setStatus('mandatory')
snSysCMOSBRDGlinkNumber = MibScalar((1, 3, 6, 1, 4, 1, 224, 2, 3, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSysCMOSBRDGlinkNumber.setStatus('mandatory')
snSysCMOSBRDGpassword = MibScalar((1, 3, 6, 1, 4, 1, 224, 2, 3, 8, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snSysCMOSBRDGpassword.setStatus('mandatory')
mibBuilder.exportSymbols("LANOPTICS-SYSTEM-MIB", lanOpticsSystemCMOSIp=lanOpticsSystemCMOSIp, snSysCMOSSNMPTrapCommunitiesTable=snSysCMOSSNMPTrapCommunitiesTable, snSysCMOSBRDGpassword=snSysCMOSBRDGpassword, snSysCMOSSerialMode=snSysCMOSSerialMode, snSysCMOSHubSaveHubFunctions=snSysCMOSHubSaveHubFunctions, lanOpticsSystem=lanOpticsSystem, lanOpticsSystemCMOSHub=lanOpticsSystemCMOSHub, lanOptics=lanOptics, lanOpticsSystemCMOSACCESS=lanOpticsSystemCMOSACCESS, snSysCMOSSerialParityCheck=snSysCMOSSerialParityCheck, snSysDirectory=snSysDirectory, snSysCMOSACCESSSequence=snSysCMOSACCESSSequence, snSysCMOSBRDGradius=snSysCMOSBRDGradius, snSysResetSlotQueue=snSysResetSlotQueue, snSysCMOSFlashMode=snSysCMOSFlashMode, snSysCMOSSerialStopBits=snSysCMOSSerialStopBits, snSysCMOSSerialBaudRate=snSysCMOSSerialBaudRate, pysmiFakeCol1002=pysmiFakeCol1002, snSysCMOSIpInterfaceTable=snSysCMOSIpInterfaceTable, snSysCMOSIpTFTPOp=snSysCMOSIpTFTPOp, lanOpticsSystemCMOSBRDG=lanOpticsSystemCMOSBRDG, snSysCMOSSNMPTrapManagersNum=snSysCMOSSNMPTrapManagersNum, snSysCMOSHubSlotConfigEntry=snSysCMOSHubSlotConfigEntry, snSysCMOSHubSlotConfigTable=snSysCMOSHubSlotConfigTable, lanOpticsSystemCMOSSRAM=lanOpticsSystemCMOSSRAM, lanOpticsSystemCMOSRPL=lanOpticsSystemCMOSRPL, lanOpticsSystemCMOS=lanOpticsSystemCMOS, snSysCMOSSNMPCommunitiesTable=snSysCMOSSNMPCommunitiesTable, snSysCMOSACCESSOffset=snSysCMOSACCESSOffset, snSysCMOSIpTFTPFileName=snSysCMOSIpTFTPFileName, pysmiFakeCol1003=pysmiFakeCol1003, snSysCMOSIpTFTPDrive=snSysCMOSIpTFTPDrive, snSysCMOSSNMPTrapCommunityIpAddr=snSysCMOSSNMPTrapCommunityIpAddr, pysmiFakeCol1001=pysmiFakeCol1001, snSysCMOSSNMPTrapCommunitiesEntry=snSysCMOSSNMPTrapCommunitiesEntry, snSysCMOSIpTFTPAddr=snSysCMOSIpTFTPAddr, snSysCMOSBRDGlinkNumber=snSysCMOSBRDGlinkNumber, snSysCMOSSerialComSelect=snSysCMOSSerialComSelect, snSysCMOSIpIpAddr=snSysCMOSIpIpAddr, snSysCMOSSRAMKeepAliveSecInterval=snSysCMOSSRAMKeepAliveSecInterval, pysmiFakeCol1000=pysmiFakeCol1000, snSysCMOSIpDefGw=snSysCMOSIpDefGw, snSysCMOSSNMPCommunitiesEntry=snSysCMOSSNMPCommunitiesEntry, snSysCMOSSNMPCommunityPrivs=snSysCMOSSNMPCommunityPrivs, snSysCMOSIpNetMask=snSysCMOSIpNetMask, snSysCMOSSNMPCommunityName=snSysCMOSSNMPCommunityName, lanOpticsSystemCMOSSerial=lanOpticsSystemCMOSSerial, lanOpticsSystemCMOSSNMP=lanOpticsSystemCMOSSNMP, snSysSlotLastOperations=snSysSlotLastOperations, snSysCMOSSNMPCommunitiesNum=snSysCMOSSNMPCommunitiesNum, snSysCMOSACCESSLength=snSysCMOSACCESSLength, snSysCMOSSerialWordLength=snSysCMOSSerialWordLength, snAgentVersion=snAgentVersion, snSysCMOSRPLMode=snSysCMOSRPLMode, snSysCMOSIpInterfaceEntry=snSysCMOSIpInterfaceEntry)
