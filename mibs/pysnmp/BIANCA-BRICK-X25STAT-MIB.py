#
# PySNMP MIB module BIANCA-BRICK-X25STAT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BIANCA-BRICK-X25STAT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:21:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
DisplayString, = mibBuilder.importSymbols("RFC1158-MIB", "DisplayString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Bits, Counter64, MibIdentifier, IpAddress, ModuleIdentity, NotificationType, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, enterprises, TimeTicks, Gauge32, Integer32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Bits", "Counter64", "MibIdentifier", "IpAddress", "ModuleIdentity", "NotificationType", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "enterprises", "TimeTicks", "Gauge32", "Integer32", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
bintec = MibIdentifier((1, 3, 6, 1, 4, 1, 272))
bibo = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4))
x25 = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 6))
x25statMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 6, 16))
x25SwStats = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 1))
x25MuxStats = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 2))
x25ToTcpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 3))
x25SwIncomingAttempts = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SwIncomingAttempts.setStatus('mandatory')
x25SwIncomingSucceeded = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SwIncomingSucceeded.setStatus('mandatory')
x25SwIncomingFailed = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SwIncomingFailed.setStatus('mandatory')
x25SwIncCurrentCalls = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SwIncCurrentCalls.setStatus('mandatory')
x25SwIncMaxConcCalls = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SwIncMaxConcCalls.setStatus('mandatory')
x25SwIncCurrentPending = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SwIncCurrentPending.setStatus('mandatory')
x25SwIncMaxConcPending = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SwIncMaxConcPending.setStatus('mandatory')
x25SwIncFailedTimeout = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SwIncFailedTimeout.setStatus('mandatory')
x25SwOutgoingAttempts = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SwOutgoingAttempts.setStatus('mandatory')
x25SwOutgoingSucceeded = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SwOutgoingSucceeded.setStatus('mandatory')
x25SwOutgoingFailed = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SwOutgoingFailed.setStatus('mandatory')
x25SwOutCurrentCalls = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SwOutCurrentCalls.setStatus('mandatory')
x25SwOutMaxConcCalls = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SwOutMaxConcCalls.setStatus('mandatory')
x25SwOutCurrentPending = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SwOutCurrentPending.setStatus('mandatory')
x25SwOutMaxConcPending = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SwOutMaxConcPending.setStatus('mandatory')
x25SwOutFailedTimeout = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SwOutFailedTimeout.setStatus('mandatory')
x25SwCallCnt = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SwCallCnt.setStatus('mandatory')
x25MuxIncomingAttempts = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25MuxIncomingAttempts.setStatus('mandatory')
x25MuxIncomingSucceeded = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25MuxIncomingSucceeded.setStatus('mandatory')
x25MuxIncomingFailed = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25MuxIncomingFailed.setStatus('mandatory')
x25MuxIncCurrentCalls = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25MuxIncCurrentCalls.setStatus('mandatory')
x25MuxIncMaxConcCalls = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25MuxIncMaxConcCalls.setStatus('mandatory')
x25MuxIncCurrentPending = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25MuxIncCurrentPending.setStatus('mandatory')
x25MuxIncMaxConcPending = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25MuxIncMaxConcPending.setStatus('mandatory')
x25MuxIncResets = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25MuxIncResets.setStatus('mandatory')
x25MuxOutgoingAttempts = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25MuxOutgoingAttempts.setStatus('mandatory')
x25MuxOutgoingSucceeded = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25MuxOutgoingSucceeded.setStatus('mandatory')
x25MuxOutgoingFailed = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25MuxOutgoingFailed.setStatus('mandatory')
x25MuxOutCurrentCalls = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25MuxOutCurrentCalls.setStatus('mandatory')
x25MuxOutMaxConcCalls = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25MuxOutMaxConcCalls.setStatus('mandatory')
x25MuxOutCurrentPending = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 2, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25MuxOutCurrentPending.setStatus('mandatory')
x25MuxOutMaxConcPending = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 2, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25MuxOutMaxConcPending.setStatus('mandatory')
x25MuxOutResets = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 2, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25MuxOutResets.setStatus('mandatory')
x25MuxInstCnt = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 2, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25MuxInstCnt.setStatus('mandatory')
x25ToTcpRestart = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25ToTcpRestart.setStatus('mandatory')
x25ToTcpCurrentRestart = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ToTcpCurrentRestart.setStatus('mandatory')
x25ToTcpTotalRestart = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ToTcpTotalRestart.setStatus('mandatory')
x25ToTcpIncX25Attempts = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ToTcpIncX25Attempts.setStatus('mandatory')
x25ToTcpIncX25Succeeded = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ToTcpIncX25Succeeded.setStatus('mandatory')
x25ToTcpIncX25Failed = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ToTcpIncX25Failed.setStatus('mandatory')
x25ToTcpOutTcpAttempts = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ToTcpOutTcpAttempts.setStatus('mandatory')
x25ToTcpOutTcpSucceeded = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ToTcpOutTcpSucceeded.setStatus('mandatory')
x25ToTcpOutTcpFailed = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ToTcpOutTcpFailed.setStatus('mandatory')
x25ToTcpIncX25CurrentCalls = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ToTcpIncX25CurrentCalls.setStatus('mandatory')
x25ToTcpIncX25MaxConcCalls = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ToTcpIncX25MaxConcCalls.setStatus('mandatory')
x25ToTcpIncX25CurrentPending = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ToTcpIncX25CurrentPending.setStatus('mandatory')
x25ToTcpIncX25MaxConcPending = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ToTcpIncX25MaxConcPending.setStatus('mandatory')
x25ToTcpIncTcpAttempts = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ToTcpIncTcpAttempts.setStatus('mandatory')
x25ToTcpIncTcpSucceeded = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ToTcpIncTcpSucceeded.setStatus('mandatory')
x25ToTcpIncTcpFailed = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ToTcpIncTcpFailed.setStatus('mandatory')
x25ToTcpOutX25Attempts = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 3, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ToTcpOutX25Attempts.setStatus('mandatory')
x25ToTcpOutX25Succeeded = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ToTcpOutX25Succeeded.setStatus('mandatory')
x25ToTcpOutX25Failed = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 3, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ToTcpOutX25Failed.setStatus('mandatory')
x25ToTcpIncTcpCurrentCalls = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 3, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ToTcpIncTcpCurrentCalls.setStatus('mandatory')
x25ToTcpIncTcpMaxConcCalls = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 3, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ToTcpIncTcpMaxConcCalls.setStatus('mandatory')
x25ToTcpIncTcpCurrentPending = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 3, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ToTcpIncTcpCurrentPending.setStatus('mandatory')
x25ToTcpIncTcpMaxConcPending = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 3, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ToTcpIncTcpMaxConcPending.setStatus('mandatory')
x25ToTcpUEvTcpListen = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 3, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ToTcpUEvTcpListen.setStatus('mandatory')
x25ToTcpUEvTcpData = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 3, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ToTcpUEvTcpData.setStatus('mandatory')
x25ToTcpUEvX25Listen = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 3, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ToTcpUEvX25Listen.setStatus('mandatory')
x25ToTcpUEvX25Data = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 3, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ToTcpUEvX25Data.setStatus('mandatory')
x25ToTcpX25CanPutEvDisc = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 3, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ToTcpX25CanPutEvDisc.setStatus('mandatory')
x25ToTcpX25CanPutEvTok = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 3, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ToTcpX25CanPutEvTok.setStatus('mandatory')
x25ToTcpX25CanPutEvReset = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 3, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ToTcpX25CanPutEvReset.setStatus('mandatory')
x25ToTcpTcpCanPutEvDisc = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 3, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ToTcpTcpCanPutEvDisc.setStatus('mandatory')
x25ToTcpTcpCanPutEvTok = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 6, 16, 3, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ToTcpTcpCanPutEvTok.setStatus('mandatory')
mibBuilder.exportSymbols("BIANCA-BRICK-X25STAT-MIB", x25SwIncMaxConcPending=x25SwIncMaxConcPending, x25SwIncCurrentPending=x25SwIncCurrentPending, x25SwOutgoingSucceeded=x25SwOutgoingSucceeded, x25ToTcpIncX25Attempts=x25ToTcpIncX25Attempts, x25ToTcpIncX25CurrentPending=x25ToTcpIncX25CurrentPending, x25ToTcpIncX25MaxConcPending=x25ToTcpIncX25MaxConcPending, x25ToTcpOutX25Attempts=x25ToTcpOutX25Attempts, x25SwOutMaxConcPending=x25SwOutMaxConcPending, x25ToTcpIncTcpSucceeded=x25ToTcpIncTcpSucceeded, x25ToTcpIncTcpCurrentPending=x25ToTcpIncTcpCurrentPending, x25MuxOutgoingFailed=x25MuxOutgoingFailed, x25SwOutMaxConcCalls=x25SwOutMaxConcCalls, x25ToTcpIncTcpMaxConcPending=x25ToTcpIncTcpMaxConcPending, x25ToTcpUEvX25Data=x25ToTcpUEvX25Data, x25MuxIncMaxConcPending=x25MuxIncMaxConcPending, x25MuxOutMaxConcCalls=x25MuxOutMaxConcCalls, x25MuxOutResets=x25MuxOutResets, bibo=bibo, x25MuxIncCurrentCalls=x25MuxIncCurrentCalls, x25SwOutgoingAttempts=x25SwOutgoingAttempts, x25ToTcpOutTcpFailed=x25ToTcpOutTcpFailed, x25ToTcpIncTcpFailed=x25ToTcpIncTcpFailed, x25MuxStats=x25MuxStats, x25ToTcpIncX25CurrentCalls=x25ToTcpIncX25CurrentCalls, x25ToTcpIncX25MaxConcCalls=x25ToTcpIncX25MaxConcCalls, x25ToTcpIncTcpCurrentCalls=x25ToTcpIncTcpCurrentCalls, x25ToTcpUEvTcpListen=x25ToTcpUEvTcpListen, x25MuxIncCurrentPending=x25MuxIncCurrentPending, x25MuxIncMaxConcCalls=x25MuxIncMaxConcCalls, x25MuxIncomingFailed=x25MuxIncomingFailed, x25ToTcpUEvTcpData=x25ToTcpUEvTcpData, x25ToTcpIncX25Succeeded=x25ToTcpIncX25Succeeded, x25statMIB=x25statMIB, x25=x25, x25ToTcpOutTcpAttempts=x25ToTcpOutTcpAttempts, x25ToTcpRestart=x25ToTcpRestart, x25MuxInstCnt=x25MuxInstCnt, x25ToTcpUEvX25Listen=x25ToTcpUEvX25Listen, x25ToTcpX25CanPutEvTok=x25ToTcpX25CanPutEvTok, x25SwIncomingSucceeded=x25SwIncomingSucceeded, x25MuxOutgoingSucceeded=x25MuxOutgoingSucceeded, x25SwIncomingAttempts=x25SwIncomingAttempts, x25SwIncFailedTimeout=x25SwIncFailedTimeout, x25SwOutCurrentPending=x25SwOutCurrentPending, x25ToTcpOutTcpSucceeded=x25ToTcpOutTcpSucceeded, x25ToTcpOutX25Failed=x25ToTcpOutX25Failed, x25MuxIncResets=x25MuxIncResets, x25ToTcpIncTcpAttempts=x25ToTcpIncTcpAttempts, x25MuxOutgoingAttempts=x25MuxOutgoingAttempts, x25ToTcpX25CanPutEvReset=x25ToTcpX25CanPutEvReset, x25ToTcpIncTcpMaxConcCalls=x25ToTcpIncTcpMaxConcCalls, x25SwIncMaxConcCalls=x25SwIncMaxConcCalls, x25ToTcpCurrentRestart=x25ToTcpCurrentRestart, x25ToTcpTotalRestart=x25ToTcpTotalRestart, x25SwOutFailedTimeout=x25SwOutFailedTimeout, x25SwOutgoingFailed=x25SwOutgoingFailed, x25SwOutCurrentCalls=x25SwOutCurrentCalls, x25SwStats=x25SwStats, x25ToTcpX25CanPutEvDisc=x25ToTcpX25CanPutEvDisc, x25ToTcpTcpCanPutEvTok=x25ToTcpTcpCanPutEvTok, x25SwCallCnt=x25SwCallCnt, x25MuxIncomingSucceeded=x25MuxIncomingSucceeded, x25MuxOutCurrentPending=x25MuxOutCurrentPending, x25ToTcpOutX25Succeeded=x25ToTcpOutX25Succeeded, x25MuxIncomingAttempts=x25MuxIncomingAttempts, x25ToTcpStats=x25ToTcpStats, x25SwIncomingFailed=x25SwIncomingFailed, x25MuxOutMaxConcPending=x25MuxOutMaxConcPending, x25ToTcpIncX25Failed=x25ToTcpIncX25Failed, x25SwIncCurrentCalls=x25SwIncCurrentCalls, x25MuxOutCurrentCalls=x25MuxOutCurrentCalls, x25ToTcpTcpCanPutEvDisc=x25ToTcpTcpCanPutEvDisc, bintec=bintec)
