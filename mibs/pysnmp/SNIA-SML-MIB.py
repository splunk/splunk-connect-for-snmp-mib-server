#
# PySNMP MIB module SNIA-SML-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SNIA-SML-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:00:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, MibIdentifier, ObjectIdentity, Bits, iso, TimeTicks, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter32, Gauge32, ModuleIdentity, Counter64, Unsigned32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "MibIdentifier", "ObjectIdentity", "Bits", "iso", "TimeTicks", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter32", "Gauge32", "ModuleIdentity", "Counter64", "Unsigned32", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class UShortReal(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class CimDateTime(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(24, 24)
    fixedLength = 24

class UINT64(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class UINT32(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class UINT16(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

snia = MibIdentifier((1, 3, 6, 1, 4, 1, 14851))
experimental = MibIdentifier((1, 3, 6, 1, 4, 1, 14851, 1))
common = MibIdentifier((1, 3, 6, 1, 4, 1, 14851, 2))
libraries = MibIdentifier((1, 3, 6, 1, 4, 1, 14851, 3))
smlRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 14851, 3, 1))
smlMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smlMibVersion.setStatus('mandatory')
smlCimVersion = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smlCimVersion.setStatus('mandatory')
productGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14851, 3, 1, 3))
product_Name = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("product-Name").setMaxAccess("readonly")
if mibBuilder.loadTexts: product_Name.setStatus('mandatory')
product_IdentifyingNumber = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("product-IdentifyingNumber").setMaxAccess("readonly")
if mibBuilder.loadTexts: product_IdentifyingNumber.setStatus('mandatory')
product_Vendor = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("product-Vendor").setMaxAccess("readonly")
if mibBuilder.loadTexts: product_Vendor.setStatus('mandatory')
product_Version = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("product-Version").setMaxAccess("readonly")
if mibBuilder.loadTexts: product_Version.setStatus('mandatory')
product_ElementName = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("product-ElementName").setMaxAccess("readonly")
if mibBuilder.loadTexts: product_ElementName.setStatus('mandatory')
chassisGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14851, 3, 1, 4))
chassis_Manufacturer = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("chassis-Manufacturer").setMaxAccess("readonly")
if mibBuilder.loadTexts: chassis_Manufacturer.setStatus('mandatory')
chassis_Model = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setLabel("chassis-Model").setMaxAccess("readonly")
if mibBuilder.loadTexts: chassis_Model.setStatus('mandatory')
chassis_SerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setLabel("chassis-SerialNumber").setMaxAccess("readonly")
if mibBuilder.loadTexts: chassis_SerialNumber.setStatus('mandatory')
chassis_LockPresent = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("true", 1), ("false", 2)))).setLabel("chassis-LockPresent").setMaxAccess("readonly")
if mibBuilder.loadTexts: chassis_LockPresent.setStatus('mandatory')
chassis_SecurityBreach = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("noBreach", 3), ("breachAttempted", 4), ("breachSuccessful", 5)))).setLabel("chassis-SecurityBreach").setMaxAccess("readonly")
if mibBuilder.loadTexts: chassis_SecurityBreach.setStatus('mandatory')
chassis_IsLocked = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("true", 1), ("false", 2)))).setLabel("chassis-IsLocked").setMaxAccess("readonly")
if mibBuilder.loadTexts: chassis_IsLocked.setStatus('mandatory')
chassis_Tag = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 4, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("chassis-Tag").setMaxAccess("readonly")
if mibBuilder.loadTexts: chassis_Tag.setStatus('mandatory')
chassis_ElementName = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 4, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("chassis-ElementName").setMaxAccess("readonly")
if mibBuilder.loadTexts: chassis_ElementName.setStatus('mandatory')
numberOfsubChassis = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfsubChassis.setStatus('mandatory')
subChassisTable = MibTable((1, 3, 6, 1, 4, 1, 14851, 3, 1, 4, 10), )
if mibBuilder.loadTexts: subChassisTable.setStatus('mandatory')
subChassisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14851, 3, 1, 4, 10, 1), ).setIndexNames((0, "SNIA-SML-MIB", "subChassisIndex"))
if mibBuilder.loadTexts: subChassisEntry.setStatus('mandatory')
subChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14851, 3, 1, 4, 10, 1, 1), UINT32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subChassisIndex.setStatus('mandatory')
subChassis_Manufacturer = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 4, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("subChassis-Manufacturer").setMaxAccess("readonly")
if mibBuilder.loadTexts: subChassis_Manufacturer.setStatus('mandatory')
subChassis_Model = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 4, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setLabel("subChassis-Model").setMaxAccess("readonly")
if mibBuilder.loadTexts: subChassis_Model.setStatus('mandatory')
subChassis_SerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 4, 10, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setLabel("subChassis-SerialNumber").setMaxAccess("readonly")
if mibBuilder.loadTexts: subChassis_SerialNumber.setStatus('mandatory')
subChassis_LockPresent = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 4, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("true", 1), ("false", 2)))).setLabel("subChassis-LockPresent").setMaxAccess("readonly")
if mibBuilder.loadTexts: subChassis_LockPresent.setStatus('mandatory')
subChassis_SecurityBreach = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 4, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("noBreach", 3), ("breachAttempted", 4), ("breachSuccessful", 5)))).setLabel("subChassis-SecurityBreach").setMaxAccess("readonly")
if mibBuilder.loadTexts: subChassis_SecurityBreach.setStatus('mandatory')
subChassis_IsLocked = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 4, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("true", 1), ("false", 2)))).setLabel("subChassis-IsLocked").setMaxAccess("readonly")
if mibBuilder.loadTexts: subChassis_IsLocked.setStatus('mandatory')
subChassis_Tag = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 4, 10, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("subChassis-Tag").setMaxAccess("readonly")
if mibBuilder.loadTexts: subChassis_Tag.setStatus('mandatory')
subChassis_ElementName = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 4, 10, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("subChassis-ElementName").setMaxAccess("readonly")
if mibBuilder.loadTexts: subChassis_ElementName.setStatus('mandatory')
subChassis_OperationalStatus = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 4, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 32768))).clone(namedValues=NamedValues(("unknown", 0), ("other", 1), ("ok", 2), ("degraded", 3), ("stressed", 4), ("predictiveFailure", 5), ("error", 6), ("non-RecoverableError", 7), ("starting", 8), ("stopping", 9), ("stopped", 10), ("inService", 11), ("noContact", 12), ("lostCommunication", 13), ("aborted", 14), ("dormant", 15), ("supportingEntityInError", 16), ("completed", 17), ("powerMode", 18), ("dMTFReserved", 19), ("vendorReserved", 32768)))).setLabel("subChassis-OperationalStatus").setMaxAccess("readonly")
if mibBuilder.loadTexts: subChassis_OperationalStatus.setStatus('mandatory')
subChassis_PackageType = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 4, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 17, 18, 19, 32769))).clone(namedValues=NamedValues(("unknown", 0), ("mainSystemChassis", 17), ("expansionChassis", 18), ("subChassis", 19), ("serviceBay", 32769)))).setLabel("subChassis-PackageType").setMaxAccess("readonly")
if mibBuilder.loadTexts: subChassis_PackageType.setStatus('mandatory')
storageLibraryGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14851, 3, 1, 5))
storageLibrary_Name = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("storageLibrary-Name").setMaxAccess("readonly")
if mibBuilder.loadTexts: storageLibrary_Name.setStatus('deprecated')
storageLibrary_Description = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("storageLibrary-Description").setMaxAccess("readonly")
if mibBuilder.loadTexts: storageLibrary_Description.setStatus('deprecated')
storageLibrary_Caption = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setLabel("storageLibrary-Caption").setMaxAccess("readonly")
if mibBuilder.loadTexts: storageLibrary_Caption.setStatus('deprecated')
storageLibrary_Status = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 5, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setLabel("storageLibrary-Status").setMaxAccess("readonly")
if mibBuilder.loadTexts: storageLibrary_Status.setStatus('deprecated')
storageLibrary_InstallDate = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 5, 5), CimDateTime()).setLabel("storageLibrary-InstallDate").setMaxAccess("readonly")
if mibBuilder.loadTexts: storageLibrary_InstallDate.setStatus('deprecated')
mediaAccessDeviceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14851, 3, 1, 6))
numberOfMediaAccessDevices = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfMediaAccessDevices.setStatus('mandatory')
mediaAccessDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 14851, 3, 1, 6, 2), )
if mibBuilder.loadTexts: mediaAccessDeviceTable.setStatus('mandatory')
mediaAccessDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14851, 3, 1, 6, 2, 1), ).setIndexNames((0, "SNIA-SML-MIB", "mediaAccessDeviceIndex"))
if mibBuilder.loadTexts: mediaAccessDeviceEntry.setStatus('mandatory')
mediaAccessDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14851, 3, 1, 6, 2, 1, 1), UINT32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaAccessDeviceIndex.setStatus('mandatory')
mediaAccessDeviceObjectType = MibTableColumn((1, 3, 6, 1, 4, 1, 14851, 3, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("wormDrive", 1), ("magnetoOpticalDrive", 2), ("tapeDrive", 3), ("dvdDrive", 4), ("cdromDrive", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaAccessDeviceObjectType.setStatus('mandatory')
mediaAccessDevice_Name = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 6, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("mediaAccessDevice-Name").setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaAccessDevice_Name.setStatus('deprecated')
mediaAccessDevice_Status = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 6, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setLabel("mediaAccessDevice-Status").setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaAccessDevice_Status.setStatus('deprecated')
mediaAccessDevice_Availability = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17), ("paused", 18), ("notReady", 19), ("notConfigured", 20), ("quiesced", 21)))).setLabel("mediaAccessDevice-Availability").setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaAccessDevice_Availability.setStatus('mandatory')
mediaAccessDevice_NeedsCleaning = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("true", 1), ("false", 2)))).setLabel("mediaAccessDevice-NeedsCleaning").setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaAccessDevice_NeedsCleaning.setStatus('mandatory')
mediaAccessDevice_MountCount = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 6, 2, 1, 7), UINT64()).setLabel("mediaAccessDevice-MountCount").setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaAccessDevice_MountCount.setStatus('mandatory')
mediaAccessDevice_DeviceID = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 6, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setLabel("mediaAccessDevice-DeviceID").setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaAccessDevice_DeviceID.setStatus('mandatory')
mediaAccessDevice_PowerOnHours = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 6, 2, 1, 9), UINT64()).setLabel("mediaAccessDevice-PowerOnHours").setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaAccessDevice_PowerOnHours.setStatus('mandatory')
mediaAccessDevice_TotalPowerOnHours = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 6, 2, 1, 10), UINT64()).setLabel("mediaAccessDevice-TotalPowerOnHours").setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaAccessDevice_TotalPowerOnHours.setStatus('mandatory')
mediaAccessDevice_OperationalStatus = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 6, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 32768))).clone(namedValues=NamedValues(("unknown", 0), ("other", 1), ("ok", 2), ("degraded", 3), ("stressed", 4), ("predictiveFailure", 5), ("error", 6), ("non-RecoverableError", 7), ("starting", 8), ("stopping", 9), ("stopped", 10), ("inService", 11), ("noContact", 12), ("lostCommunication", 13), ("aborted", 14), ("dormant", 15), ("supportingEntityInError", 16), ("completed", 17), ("powerMode", 18), ("dMTFReserved", 19), ("vendorReserved", 32768)))).setLabel("mediaAccessDevice-OperationalStatus").setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaAccessDevice_OperationalStatus.setStatus('mandatory')
mediaAccessDevice_Realizes_StorageLocationIndex = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 6, 2, 1, 12), UINT32()).setLabel("mediaAccessDevice-Realizes-StorageLocationIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaAccessDevice_Realizes_StorageLocationIndex.setStatus('mandatory')
mediaAccessDevice_Realizes_softwareElementIndex = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 6, 2, 1, 13), UINT32()).setLabel("mediaAccessDevice-Realizes-softwareElementIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaAccessDevice_Realizes_softwareElementIndex.setStatus('mandatory')
physicalPackageGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14851, 3, 1, 8))
numberOfPhysicalPackages = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfPhysicalPackages.setStatus('mandatory')
physicalPackageTable = MibTable((1, 3, 6, 1, 4, 1, 14851, 3, 1, 8, 2), )
if mibBuilder.loadTexts: physicalPackageTable.setStatus('mandatory')
physicalPackageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14851, 3, 1, 8, 2, 1), ).setIndexNames((0, "SNIA-SML-MIB", "physicalPackageIndex"))
if mibBuilder.loadTexts: physicalPackageEntry.setStatus('mandatory')
physicalPackageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14851, 3, 1, 8, 2, 1, 1), UINT32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPackageIndex.setStatus('mandatory')
physicalPackage_Manufacturer = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 8, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("physicalPackage-Manufacturer").setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPackage_Manufacturer.setStatus('mandatory')
physicalPackage_Model = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 8, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setLabel("physicalPackage-Model").setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPackage_Model.setStatus('mandatory')
physicalPackage_SerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 8, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setLabel("physicalPackage-SerialNumber").setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPackage_SerialNumber.setStatus('mandatory')
physicalPackage_Realizes_MediaAccessDeviceIndex = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 8, 2, 1, 5), Integer32()).setLabel("physicalPackage-Realizes-MediaAccessDeviceIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPackage_Realizes_MediaAccessDeviceIndex.setStatus('mandatory')
physicalPackage_Tag = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 8, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("physicalPackage-Tag").setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalPackage_Tag.setStatus('mandatory')
softwareElementGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14851, 3, 1, 9))
numberOfSoftwareElements = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfSoftwareElements.setStatus('mandatory')
softwareElementTable = MibTable((1, 3, 6, 1, 4, 1, 14851, 3, 1, 9, 2), )
if mibBuilder.loadTexts: softwareElementTable.setStatus('mandatory')
softwareElementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14851, 3, 1, 9, 2, 1), ).setIndexNames((0, "SNIA-SML-MIB", "softwareElementIndex"))
if mibBuilder.loadTexts: softwareElementEntry.setStatus('mandatory')
softwareElementIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14851, 3, 1, 9, 2, 1, 1), UINT32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareElementIndex.setStatus('mandatory')
softwareElement_Name = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 9, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("softwareElement-Name").setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareElement_Name.setStatus('deprecated')
softwareElement_Version = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 9, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("softwareElement-Version").setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareElement_Version.setStatus('mandatory')
softwareElement_SoftwareElementID = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 9, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("softwareElement-SoftwareElementID").setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareElement_SoftwareElementID.setStatus('mandatory')
softwareElement_Manufacturer = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 9, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setLabel("softwareElement-Manufacturer").setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareElement_Manufacturer.setStatus('mandatory')
softwareElement_BuildNumber = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 9, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setLabel("softwareElement-BuildNumber").setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareElement_BuildNumber.setStatus('mandatory')
softwareElement_SerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 9, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setLabel("softwareElement-SerialNumber").setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareElement_SerialNumber.setStatus('mandatory')
softwareElement_CodeSet = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 9, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setLabel("softwareElement-CodeSet").setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareElement_CodeSet.setStatus('deprecated')
softwareElement_IdentificationCode = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 9, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setLabel("softwareElement-IdentificationCode").setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareElement_IdentificationCode.setStatus('deprecated')
softwareElement_LanguageEdition = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 9, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setLabel("softwareElement-LanguageEdition").setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareElement_LanguageEdition.setStatus('deprecated')
softwareElement_InstanceID = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 9, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("softwareElement-InstanceID").setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareElement_InstanceID.setStatus('mandatory')
computerSystemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14851, 3, 1, 10))
computerSystem_ElementName = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 10, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("computerSystem-ElementName").setMaxAccess("readonly")
if mibBuilder.loadTexts: computerSystem_ElementName.setStatus('mandatory')
computerSystem_OperationalStatus = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 32768))).clone(namedValues=NamedValues(("unknown", 0), ("other", 1), ("ok", 2), ("degraded", 3), ("stressed", 4), ("predictiveFailure", 5), ("error", 6), ("non-RecoverableError", 7), ("starting", 8), ("stopping", 9), ("stopped", 10), ("inService", 11), ("noContact", 12), ("lostCommunication", 13), ("aborted", 14), ("dormant", 15), ("supportingEntityInError", 16), ("completed", 17), ("powerMode", 18), ("dMTFReserved", 19), ("vendorReserved", 32768)))).setLabel("computerSystem-OperationalStatus").setMaxAccess("readonly")
if mibBuilder.loadTexts: computerSystem_OperationalStatus.setStatus('mandatory')
computerSystem_Name = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 10, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("computerSystem-Name").setMaxAccess("readonly")
if mibBuilder.loadTexts: computerSystem_Name.setStatus('mandatory')
computerSystem_NameFormat = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 10, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("computerSystem-NameFormat").setMaxAccess("readonly")
if mibBuilder.loadTexts: computerSystem_NameFormat.setStatus('mandatory')
computerSystem_Dedicated = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("notDedicated", 0), ("unknown", 1), ("other", 2), ("storage", 3), ("router", 4), ("switch", 5), ("layer3switch", 6), ("centralOfficeSwitch", 7), ("hub", 8), ("accessServer", 9), ("firewall", 10), ("print", 11), ("io", 12), ("webCaching", 13), ("management", 14), ("blockServer", 15), ("fileServer", 16), ("mobileUserDevice", 17), ("repeater", 18), ("bridgeExtender", 19), ("gateway", 20)))).setLabel("computerSystem-Dedicated").setMaxAccess("readonly")
if mibBuilder.loadTexts: computerSystem_Dedicated.setStatus('mandatory')
computerSystem_PrimaryOwnerContact = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 10, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("computerSystem-PrimaryOwnerContact").setMaxAccess("readonly")
if mibBuilder.loadTexts: computerSystem_PrimaryOwnerContact.setStatus('mandatory')
computerSystem_PrimaryOwnerName = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 10, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("computerSystem-PrimaryOwnerName").setMaxAccess("readonly")
if mibBuilder.loadTexts: computerSystem_PrimaryOwnerName.setStatus('mandatory')
computerSystem_Description = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 10, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("computerSystem-Description").setMaxAccess("readonly")
if mibBuilder.loadTexts: computerSystem_Description.setStatus('mandatory')
computerSystem_Caption = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 10, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setLabel("computerSystem-Caption").setMaxAccess("readonly")
if mibBuilder.loadTexts: computerSystem_Caption.setStatus('mandatory')
computerSystem_Realizes_softwareElementIndex = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 10, 10), UINT32()).setLabel("computerSystem-Realizes-softwareElementIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: computerSystem_Realizes_softwareElementIndex.setStatus('mandatory')
changerDeviceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14851, 3, 1, 11))
numberOfChangerDevices = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfChangerDevices.setStatus('mandatory')
changerDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 14851, 3, 1, 11, 2), )
if mibBuilder.loadTexts: changerDeviceTable.setStatus('mandatory')
changerDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14851, 3, 1, 11, 2, 1), ).setIndexNames((0, "SNIA-SML-MIB", "changerDeviceIndex"))
if mibBuilder.loadTexts: changerDeviceEntry.setStatus('mandatory')
changerDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14851, 3, 1, 11, 2, 1, 1), UINT32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changerDeviceIndex.setStatus('mandatory')
changerDevice_DeviceID = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 11, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setLabel("changerDevice-DeviceID").setMaxAccess("readonly")
if mibBuilder.loadTexts: changerDevice_DeviceID.setStatus('mandatory')
changerDevice_MediaFlipSupported = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 11, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setLabel("changerDevice-MediaFlipSupported").setMaxAccess("readonly")
if mibBuilder.loadTexts: changerDevice_MediaFlipSupported.setStatus('mandatory')
changerDevice_ElementName = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 11, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("changerDevice-ElementName").setMaxAccess("readonly")
if mibBuilder.loadTexts: changerDevice_ElementName.setStatus('mandatory')
changerDevice_Caption = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 11, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setLabel("changerDevice-Caption").setMaxAccess("readonly")
if mibBuilder.loadTexts: changerDevice_Caption.setStatus('mandatory')
changerDevice_Description = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 11, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("changerDevice-Description").setMaxAccess("readonly")
if mibBuilder.loadTexts: changerDevice_Description.setStatus('mandatory')
changerDevice_Availability = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 11, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17), ("paused", 18), ("notReady", 19), ("notConfigured", 20), ("quiesced", 21)))).setLabel("changerDevice-Availability").setMaxAccess("readonly")
if mibBuilder.loadTexts: changerDevice_Availability.setStatus('mandatory')
changerDevice_OperationalStatus = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 11, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 32768))).clone(namedValues=NamedValues(("unknown", 0), ("other", 1), ("ok", 2), ("degraded", 3), ("stressed", 4), ("predictiveFailure", 5), ("error", 6), ("non-RecoverableError", 7), ("starting", 8), ("stopping", 9), ("stopped", 10), ("inService", 11), ("noContact", 12), ("lostCommunication", 13), ("aborted", 14), ("dormant", 15), ("supportingEntityInError", 16), ("completed", 17), ("powerMode", 18), ("dMTFReserved", 19), ("vendorReserved", 32768)))).setLabel("changerDevice-OperationalStatus").setMaxAccess("readonly")
if mibBuilder.loadTexts: changerDevice_OperationalStatus.setStatus('mandatory')
changerDevice_Realizes_StorageLocationIndex = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 11, 2, 1, 10), UINT32()).setLabel("changerDevice-Realizes-StorageLocationIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: changerDevice_Realizes_StorageLocationIndex.setStatus('mandatory')
scsiProtocolControllerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14851, 3, 1, 12))
numberOfSCSIProtocolControllers = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfSCSIProtocolControllers.setStatus('mandatory')
scsiProtocolControllerTable = MibTable((1, 3, 6, 1, 4, 1, 14851, 3, 1, 12, 2), )
if mibBuilder.loadTexts: scsiProtocolControllerTable.setStatus('mandatory')
scsiProtocolControllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14851, 3, 1, 12, 2, 1), ).setIndexNames((0, "SNIA-SML-MIB", "scsiProtocolControllerIndex"))
if mibBuilder.loadTexts: scsiProtocolControllerEntry.setStatus('mandatory')
scsiProtocolControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14851, 3, 1, 12, 2, 1, 1), UINT32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiProtocolControllerIndex.setStatus('mandatory')
scsiProtocolController_DeviceID = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 12, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setLabel("scsiProtocolController-DeviceID").setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiProtocolController_DeviceID.setStatus('mandatory')
scsiProtocolController_ElementName = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 12, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("scsiProtocolController-ElementName").setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiProtocolController_ElementName.setStatus('mandatory')
scsiProtocolController_OperationalStatus = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 12, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 32768))).clone(namedValues=NamedValues(("unknown", 0), ("other", 1), ("ok", 2), ("degraded", 3), ("stressed", 4), ("predictiveFailure", 5), ("error", 6), ("non-RecoverableError", 7), ("starting", 8), ("stopping", 9), ("stopped", 10), ("inService", 11), ("noContact", 12), ("lostCommunication", 13), ("aborted", 14), ("dormant", 15), ("supportingEntityInError", 16), ("completed", 17), ("powerMode", 18), ("dMTFReserved", 19), ("vendorReserved", 32768)))).setLabel("scsiProtocolController-OperationalStatus").setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiProtocolController_OperationalStatus.setStatus('mandatory')
scsiProtocolController_Description = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 12, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("scsiProtocolController-Description").setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiProtocolController_Description.setStatus('mandatory')
scsiProtocolController_Availability = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 12, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17), ("paused", 18), ("notReady", 19), ("notConfigured", 20), ("quiesced", 21)))).setLabel("scsiProtocolController-Availability").setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiProtocolController_Availability.setStatus('mandatory')
scsiProtocolController_Realizes_ChangerDeviceIndex = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 12, 2, 1, 7), UINT32()).setLabel("scsiProtocolController-Realizes-ChangerDeviceIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiProtocolController_Realizes_ChangerDeviceIndex.setStatus('mandatory')
scsiProtocolController_Realizes_MediaAccessDeviceIndex = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 12, 2, 1, 8), UINT32()).setLabel("scsiProtocolController-Realizes-MediaAccessDeviceIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiProtocolController_Realizes_MediaAccessDeviceIndex.setStatus('mandatory')
storageMediaLocationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14851, 3, 1, 13))
numberOfStorageMediaLocations = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfStorageMediaLocations.setStatus('mandatory')
numberOfPhysicalMedias = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 13, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfPhysicalMedias.setStatus('mandatory')
storageMediaLocationTable = MibTable((1, 3, 6, 1, 4, 1, 14851, 3, 1, 13, 3), )
if mibBuilder.loadTexts: storageMediaLocationTable.setStatus('mandatory')
storageMediaLocationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14851, 3, 1, 13, 3, 1), ).setIndexNames((0, "SNIA-SML-MIB", "storageMediaLocationIndex"))
if mibBuilder.loadTexts: storageMediaLocationEntry.setStatus('mandatory')
storageMediaLocationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14851, 3, 1, 13, 3, 1, 1), UINT32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: storageMediaLocationIndex.setStatus('mandatory')
storageMediaLocation_Tag = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 13, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("storageMediaLocation-Tag").setMaxAccess("readonly")
if mibBuilder.loadTexts: storageMediaLocation_Tag.setStatus('mandatory')
storageMediaLocation_LocationType = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 13, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unknown", 0), ("other", 1), ("slot", 2), ("magazine", 3), ("mediaAccessDevice", 4), ("interLibraryPort", 5), ("limitedAccessPort", 6), ("door", 7), ("shelf", 8), ("vault", 9)))).setLabel("storageMediaLocation-LocationType").setMaxAccess("readonly")
if mibBuilder.loadTexts: storageMediaLocation_LocationType.setStatus('mandatory')
storageMediaLocation_LocationCoordinates = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 13, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("storageMediaLocation-LocationCoordinates").setMaxAccess("readonly")
if mibBuilder.loadTexts: storageMediaLocation_LocationCoordinates.setStatus('mandatory')
storageMediaLocation_MediaTypesSupported = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 13, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66))).clone(namedValues=NamedValues(("unknown", 0), ("other", 1), ("tape", 2), ("qic", 3), ("ait", 4), ("dtf", 5), ("dat", 6), ("eightmmTape", 7), ("nineteenmmTape", 8), ("dlt", 9), ("halfInchMO", 10), ("catridgeDisk", 11), ("jazDisk", 12), ("zipDisk", 13), ("syQuestDisk", 14), ("winchesterDisk", 15), ("cdRom", 16), ("cdRomXA", 17), ("cdI", 18), ("cdRecordable", 19), ("wORM", 20), ("magneto-Optical", 21), ("dvd", 22), ("dvdRWPlus", 23), ("dvdRAM", 24), ("dvdROM", 25), ("dvdVideo", 26), ("divx", 27), ("floppyDiskette", 28), ("hardDisk", 29), ("memoryCard", 30), ("hardCopy", 31), ("clikDisk", 32), ("cdRW", 33), ("cdDA", 34), ("cdPlus", 35), ("dvdRecordable", 36), ("dvdRW", 37), ("dvdAudio", 38), ("dvd5", 39), ("dvd9", 40), ("dvd10", 41), ("dvd18", 42), ("moRewriteable", 43), ("moWriteOnce", 44), ("moLIMDOW", 45), ("phaseChangeWO", 46), ("phaseChangeRewriteable", 47), ("phaseChangeDualRewriteable", 48), ("ablativeWriteOnce", 49), ("nearField", 50), ("miniQic", 51), ("travan", 52), ("eightmmMetal", 53), ("eightmmAdvanced", 54), ("nctp", 55), ("ltoUltrium", 56), ("ltoAccelis", 57), ("tape9Track", 58), ("tape18Track", 59), ("tape36Track", 60), ("magstar3590", 61), ("magstarMP", 62), ("d2Tape", 63), ("dstSmall", 64), ("dstMedium", 65), ("dstLarge", 66)))).setLabel("storageMediaLocation-MediaTypesSupported").setMaxAccess("readonly")
if mibBuilder.loadTexts: storageMediaLocation_MediaTypesSupported.setStatus('mandatory')
storageMediaLocation_MediaCapacity = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 13, 3, 1, 6), UINT32()).setLabel("storageMediaLocation-MediaCapacity").setMaxAccess("readonly")
if mibBuilder.loadTexts: storageMediaLocation_MediaCapacity.setStatus('mandatory')
storageMediaLocation_Association_ChangerDeviceIndex = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 13, 3, 1, 7), UINT32()).setLabel("storageMediaLocation-Association-ChangerDeviceIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: storageMediaLocation_Association_ChangerDeviceIndex.setStatus('mandatory')
storageMediaLocation_PhysicalMediaPresent = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 13, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setLabel("storageMediaLocation-PhysicalMediaPresent").setMaxAccess("readonly")
if mibBuilder.loadTexts: storageMediaLocation_PhysicalMediaPresent.setStatus('mandatory')
storageMediaLocation_PhysicalMedia_Removable = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 13, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("true", 1), ("false", 2)))).setLabel("storageMediaLocation-PhysicalMedia-Removable").setMaxAccess("readonly")
if mibBuilder.loadTexts: storageMediaLocation_PhysicalMedia_Removable.setStatus('mandatory')
storageMediaLocation_PhysicalMedia_Replaceable = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 13, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("true", 1), ("false", 2)))).setLabel("storageMediaLocation-PhysicalMedia-Replaceable").setMaxAccess("readonly")
if mibBuilder.loadTexts: storageMediaLocation_PhysicalMedia_Replaceable.setStatus('mandatory')
storageMediaLocation_PhysicalMedia_HotSwappable = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 13, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("true", 1), ("false", 2)))).setLabel("storageMediaLocation-PhysicalMedia-HotSwappable").setMaxAccess("readonly")
if mibBuilder.loadTexts: storageMediaLocation_PhysicalMedia_HotSwappable.setStatus('mandatory')
storageMediaLocation_PhysicalMedia_Capacity = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 13, 3, 1, 14), UINT64()).setLabel("storageMediaLocation-PhysicalMedia-Capacity").setMaxAccess("readonly")
if mibBuilder.loadTexts: storageMediaLocation_PhysicalMedia_Capacity.setStatus('mandatory')
storageMediaLocation_PhysicalMedia_MediaType = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 13, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66))).clone(namedValues=NamedValues(("unknown", 0), ("other", 1), ("tape", 2), ("qic", 3), ("ait", 4), ("dtf", 5), ("dat", 6), ("eightmmTape", 7), ("nineteenmmTape", 8), ("dlt", 9), ("halfInchMO", 10), ("catridgeDisk", 11), ("jazDisk", 12), ("zipDisk", 13), ("syQuestDisk", 14), ("winchesterDisk", 15), ("cdRom", 16), ("cdRomXA", 17), ("cdI", 18), ("cdRecordable", 19), ("wORM", 20), ("magneto-Optical", 21), ("dvd", 22), ("dvdRWPlus", 23), ("dvdRAM", 24), ("dvdROM", 25), ("dvdVideo", 26), ("divx", 27), ("floppyDiskette", 28), ("hardDisk", 29), ("memoryCard", 30), ("hardCopy", 31), ("clikDisk", 32), ("cdRW", 33), ("cdDA", 34), ("cdPlus", 35), ("dvdRecordable", 36), ("dvdRW", 37), ("dvdAudio", 38), ("dvd5", 39), ("dvd9", 40), ("dvd10", 41), ("dvd18", 42), ("moRewriteable", 43), ("moWriteOnce", 44), ("moLIMDOW", 45), ("phaseChangeWO", 46), ("phaseChangeRewriteable", 47), ("phaseChangeDualRewriteable", 48), ("ablativeWriteOnce", 49), ("nearField", 50), ("miniQic", 51), ("travan", 52), ("eightmmMetal", 53), ("eightmmAdvanced", 54), ("nctp", 55), ("ltoUltrium", 56), ("ltoAccelis", 57), ("tape9Track", 58), ("tape18Track", 59), ("tape36Track", 60), ("magstar3590", 61), ("magstarMP", 62), ("d2Tape", 63), ("dstSmall", 64), ("dstMedium", 65), ("dstLarge", 66)))).setLabel("storageMediaLocation-PhysicalMedia-MediaType").setMaxAccess("readonly")
if mibBuilder.loadTexts: storageMediaLocation_PhysicalMedia_MediaType.setStatus('mandatory')
storageMediaLocation_PhysicalMedia_MediaDescription = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 13, 3, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("storageMediaLocation-PhysicalMedia-MediaDescription").setMaxAccess("readonly")
if mibBuilder.loadTexts: storageMediaLocation_PhysicalMedia_MediaDescription.setStatus('mandatory')
storageMediaLocation_PhysicalMedia_CleanerMedia = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 13, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("true", 1), ("false", 2)))).setLabel("storageMediaLocation-PhysicalMedia-CleanerMedia").setMaxAccess("readonly")
if mibBuilder.loadTexts: storageMediaLocation_PhysicalMedia_CleanerMedia.setStatus('mandatory')
storageMediaLocation_PhysicalMedia_DualSided = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 13, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("true", 1), ("false", 2)))).setLabel("storageMediaLocation-PhysicalMedia-DualSided").setMaxAccess("readonly")
if mibBuilder.loadTexts: storageMediaLocation_PhysicalMedia_DualSided.setStatus('mandatory')
storageMediaLocation_PhysicalMedia_PhysicalLabel = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 13, 3, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("storageMediaLocation-PhysicalMedia-PhysicalLabel").setMaxAccess("readonly")
if mibBuilder.loadTexts: storageMediaLocation_PhysicalMedia_PhysicalLabel.setStatus('mandatory')
storageMediaLocation_PhysicalMedia_Tag = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 13, 3, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("storageMediaLocation-PhysicalMedia-Tag").setMaxAccess("readonly")
if mibBuilder.loadTexts: storageMediaLocation_PhysicalMedia_Tag.setStatus('mandatory')
limitedAccessPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14851, 3, 1, 14))
numberOflimitedAccessPorts = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOflimitedAccessPorts.setStatus('mandatory')
limitedAccessPortTable = MibTable((1, 3, 6, 1, 4, 1, 14851, 3, 1, 14, 2), )
if mibBuilder.loadTexts: limitedAccessPortTable.setStatus('mandatory')
limitedAccessPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14851, 3, 1, 14, 2, 1), ).setIndexNames((0, "SNIA-SML-MIB", "limitedAccessPortIndex"))
if mibBuilder.loadTexts: limitedAccessPortEntry.setStatus('mandatory')
limitedAccessPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14851, 3, 1, 14, 2, 1, 1), UINT32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: limitedAccessPortIndex.setStatus('mandatory')
limitedAccessPort_DeviceID = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 14, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setLabel("limitedAccessPort-DeviceID").setMaxAccess("readonly")
if mibBuilder.loadTexts: limitedAccessPort_DeviceID.setStatus('mandatory')
limitedAccessPort_Extended = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setLabel("limitedAccessPort-Extended").setMaxAccess("readonly")
if mibBuilder.loadTexts: limitedAccessPort_Extended.setStatus('mandatory')
limitedAccessPort_ElementName = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 14, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("limitedAccessPort-ElementName").setMaxAccess("readonly")
if mibBuilder.loadTexts: limitedAccessPort_ElementName.setStatus('mandatory')
limitedAccessPort_Caption = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 14, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setLabel("limitedAccessPort-Caption").setMaxAccess("readonly")
if mibBuilder.loadTexts: limitedAccessPort_Caption.setStatus('mandatory')
limitedAccessPort_Description = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 14, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("limitedAccessPort-Description").setMaxAccess("readonly")
if mibBuilder.loadTexts: limitedAccessPort_Description.setStatus('mandatory')
limitedAccessPort_Realizes_StorageLocationIndex = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 14, 2, 1, 7), UINT32()).setLabel("limitedAccessPort-Realizes-StorageLocationIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: limitedAccessPort_Realizes_StorageLocationIndex.setStatus('mandatory')
fCPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14851, 3, 1, 15))
numberOffCPorts = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOffCPorts.setStatus('mandatory')
fCPortTable = MibTable((1, 3, 6, 1, 4, 1, 14851, 3, 1, 15, 2), )
if mibBuilder.loadTexts: fCPortTable.setStatus('mandatory')
fCPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14851, 3, 1, 15, 2, 1), ).setIndexNames((0, "SNIA-SML-MIB", "fCPortIndex"))
if mibBuilder.loadTexts: fCPortEntry.setStatus('mandatory')
fCPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14851, 3, 1, 15, 2, 1, 1), UINT32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fCPortIndex.setStatus('mandatory')
fCPort_DeviceID = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 15, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setLabel("fCPort-DeviceID").setMaxAccess("readonly")
if mibBuilder.loadTexts: fCPort_DeviceID.setStatus('mandatory')
fCPort_ElementName = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 15, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("fCPort-ElementName").setMaxAccess("readonly")
if mibBuilder.loadTexts: fCPort_ElementName.setStatus('mandatory')
fCPort_Caption = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 15, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setLabel("fCPort-Caption").setMaxAccess("readonly")
if mibBuilder.loadTexts: fCPort_Caption.setStatus('mandatory')
fCPort_Description = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 15, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setLabel("fCPort-Description").setMaxAccess("readonly")
if mibBuilder.loadTexts: fCPort_Description.setStatus('mandatory')
fCPortController_OperationalStatus = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 15, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 32768))).clone(namedValues=NamedValues(("unknown", 0), ("other", 1), ("ok", 2), ("degraded", 3), ("stressed", 4), ("predictiveFailure", 5), ("error", 6), ("non-RecoverableError", 7), ("starting", 8), ("stopping", 9), ("stopped", 10), ("inService", 11), ("noContact", 12), ("lostCommunication", 13), ("aborted", 14), ("dormant", 15), ("supportingEntityInError", 16), ("completed", 17), ("powerMode", 18), ("dMTFReserved", 19), ("vendorReserved", 32768)))).setLabel("fCPortController-OperationalStatus").setMaxAccess("readonly")
if mibBuilder.loadTexts: fCPortController_OperationalStatus.setStatus('mandatory')
fCPort_PermanentAddress = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 15, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setLabel("fCPort-PermanentAddress").setMaxAccess("readonly")
if mibBuilder.loadTexts: fCPort_PermanentAddress.setStatus('mandatory')
fCPort_Realizes_scsiProtocolControllerIndex = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 15, 2, 1, 8), UINT32()).setLabel("fCPort-Realizes-scsiProtocolControllerIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: fCPort_Realizes_scsiProtocolControllerIndex.setStatus('mandatory')
trapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14851, 3, 1, 16))
trapsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapsEnabled.setStatus('mandatory')
trapDriveAlertSummary = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 16, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60))).clone(namedValues=NamedValues(("readWarning", 1), ("writeWarning", 2), ("hardError", 3), ("media", 4), ("readFailure", 5), ("writeFailure", 6), ("mediaLife", 7), ("notDataGrade", 8), ("writeProtect", 9), ("noRemoval", 10), ("cleaningMedia", 11), ("unsupportedFormat", 12), ("recoverableSnappedTape", 13), ("unrecoverableSnappedTape", 14), ("memoryChipInCartridgeFailure", 15), ("forcedEject", 16), ("readOnlyFormat", 17), ("directoryCorruptedOnLoad", 18), ("nearingMediaLife", 19), ("cleanNow", 20), ("cleanPeriodic", 21), ("expiredCleaningMedia", 22), ("invalidCleaningMedia", 23), ("retentionRequested", 24), ("dualPortInterfaceError", 25), ("coolingFanError", 26), ("powerSupplyFailure", 27), ("powerConsumption", 28), ("driveMaintenance", 29), ("hardwareA", 30), ("hardwareB", 31), ("interface", 32), ("ejectMedia", 33), ("downloadFailure", 34), ("driveHumidity", 35), ("driveTemperature", 36), ("driveVoltage", 37), ("predictiveFailure", 38), ("diagnosticsRequired", 39), ("lostStatistics", 50), ("mediaDirectoryInvalidAtUnload", 51), ("mediaSystemAreaWriteFailure", 52), ("mediaSystemAreaReadFailure", 53), ("noStartOfData", 54), ("loadingFailure", 55), ("unrecoverableUnloadFailure", 56), ("automationInterfaceFailure", 57), ("firmwareFailure", 58), ("wormMediumIntegrityCheckFailed", 59), ("wormMediumOverwriteAttempted", 60)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapDriveAlertSummary.setStatus('mandatory')
trap_Association_MediaAccessDeviceIndex = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 16, 3), UINT32()).setLabel("trap-Association-MediaAccessDeviceIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: trap_Association_MediaAccessDeviceIndex.setStatus('mandatory')
trapChangerAlertSummary = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 16, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32))).clone(namedValues=NamedValues(("libraryHardwareA", 1), ("libraryHardwareB", 2), ("libraryHardwareC", 3), ("libraryHardwareD", 4), ("libraryDiagnosticsRequired", 5), ("libraryInterface", 6), ("failurePrediction", 7), ("libraryMaintenance", 8), ("libraryHumidityLimits", 9), ("libraryTemperatureLimits", 10), ("libraryVoltageLimits", 11), ("libraryStrayMedia", 12), ("libraryPickRetry", 13), ("libraryPlaceRetry", 14), ("libraryLoadRetry", 15), ("libraryDoor", 16), ("libraryMailslot", 17), ("libraryMagazine", 18), ("librarySecurity", 19), ("librarySecurityMode", 20), ("libraryOffline", 21), ("libraryDriveOffline", 22), ("libraryScanRetry", 23), ("libraryInventory", 24), ("libraryIllegalOperation", 25), ("dualPortInterfaceError", 26), ("coolingFanFailure", 27), ("powerSupply", 28), ("powerConsumption", 29), ("passThroughMechanismFailure", 30), ("cartridgeInPassThroughMechanism", 31), ("unreadableBarCodeLabels", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapChangerAlertSummary.setStatus('mandatory')
trap_Association_ChangerDeviceIndex = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 16, 5), UINT32()).setLabel("trap-Association-ChangerDeviceIndex").setMaxAccess("readonly")
if mibBuilder.loadTexts: trap_Association_ChangerDeviceIndex.setStatus('mandatory')
trapPerceivedSeverity = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 16, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 0), ("other", 1), ("information", 2), ("degradedWarning", 3), ("minor", 4), ("major", 5), ("critical", 6), ("fatalNonRecoverable", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapPerceivedSeverity.setStatus('mandatory')
trapDestinationTable = MibTable((1, 3, 6, 1, 4, 1, 14851, 3, 1, 16, 7), )
if mibBuilder.loadTexts: trapDestinationTable.setStatus('mandatory')
trapDestinationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14851, 3, 1, 16, 7, 1), ).setIndexNames((0, "SNIA-SML-MIB", "numberOfTrapDestinations"))
if mibBuilder.loadTexts: trapDestinationEntry.setStatus('mandatory')
numberOfTrapDestinations = MibTableColumn((1, 3, 6, 1, 4, 1, 14851, 3, 1, 16, 7, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: numberOfTrapDestinations.setStatus('mandatory')
trapDestinationHostType = MibTableColumn((1, 3, 6, 1, 4, 1, 14851, 3, 1, 16, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iPv4", 1), ("iPv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDestinationHostType.setStatus('mandatory')
trapDestinationHostAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 14851, 3, 1, 16, 7, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDestinationHostAddr.setStatus('mandatory')
trapDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 14851, 3, 1, 16, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDestinationPort.setStatus('mandatory')
driveAlert = NotificationType((1, 3, 6, 1, 4, 1, 14851, 3, 1) + (0,0)).setObjects(("SNIA-SML-MIB", "trapDriveAlertSummary"), ("SNIA-SML-MIB", "trap_Association_MediaAccessDeviceIndex"), ("SNIA-SML-MIB", "trapPerceivedSeverity"))
changerAlert = NotificationType((1, 3, 6, 1, 4, 1, 14851, 3, 1) + (0,1)).setObjects(("SNIA-SML-MIB", "trapChangerAlertSummary"), ("SNIA-SML-MIB", "trap_Association_ChangerDeviceIndex"), ("SNIA-SML-MIB", "trapPerceivedSeverity"))
trapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 14851, 3, 1, 16, 8))
currentOperationalStatus = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 16, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 32768))).clone(namedValues=NamedValues(("unknown", 0), ("other", 1), ("ok", 2), ("degraded", 3), ("stressed", 4), ("predictiveFailure", 5), ("error", 6), ("non-RecoverableError", 7), ("starting", 8), ("stopping", 9), ("stopped", 10), ("inService", 11), ("noContact", 12), ("lostCommunication", 13), ("aborted", 14), ("dormant", 15), ("supportingEntityInError", 16), ("completed", 17), ("powerMode", 18), ("dMTFReserved", 19), ("vendorReserved", 32768)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentOperationalStatus.setStatus('mandatory')
oldOperationalStatus = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 16, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 32768))).clone(namedValues=NamedValues(("unknown", 0), ("other", 1), ("ok", 2), ("degraded", 3), ("stressed", 4), ("predictiveFailure", 5), ("error", 6), ("non-RecoverableError", 7), ("starting", 8), ("stopping", 9), ("stopped", 10), ("inService", 11), ("noContact", 12), ("lostCommunication", 13), ("aborted", 14), ("dormant", 15), ("supportingEntityInError", 16), ("completed", 17), ("powerMode", 18), ("dMTFReserved", 19), ("vendorReserved", 32768)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oldOperationalStatus.setStatus('mandatory')
libraryAddedTrap = NotificationType((1, 3, 6, 1, 4, 1, 14851, 3, 1, 16) + (0,3)).setObjects(("SNIA-SML-MIB", "storageLibrary_Name"))
libraryDeletedTrap = NotificationType((1, 3, 6, 1, 4, 1, 14851, 3, 1, 16) + (0,4)).setObjects(("SNIA-SML-MIB", "storageLibrary_Name"))
libraryOpStatusChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 14851, 3, 1, 16) + (0,5)).setObjects(("SNIA-SML-MIB", "storageLibrary_Name"), ("SNIA-SML-MIB", "currentOperationalStatus"), ("SNIA-SML-MIB", "oldOperationalStatus"))
driveAddedTrap = NotificationType((1, 3, 6, 1, 4, 1, 14851, 3, 1, 16) + (0,6)).setObjects(("SNIA-SML-MIB", "storageLibrary_Name"), ("SNIA-SML-MIB", "mediaAccessDevice_DeviceID"))
driveDeletedTrap = NotificationType((1, 3, 6, 1, 4, 1, 14851, 3, 1, 16) + (0,7)).setObjects(("SNIA-SML-MIB", "storageLibrary_Name"), ("SNIA-SML-MIB", "mediaAccessDevice_DeviceID"))
driveOpStatusChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 14851, 3, 1, 16) + (0,8)).setObjects(("SNIA-SML-MIB", "storageLibrary_Name"), ("SNIA-SML-MIB", "mediaAccessDevice_DeviceID"), ("SNIA-SML-MIB", "currentOperationalStatus"), ("SNIA-SML-MIB", "oldOperationalStatus"))
changerAddedTrap = NotificationType((1, 3, 6, 1, 4, 1, 14851, 3, 1, 16) + (0,9)).setObjects(("SNIA-SML-MIB", "storageLibrary_Name"), ("SNIA-SML-MIB", "changerDevice_DeviceID"))
changerDeletedTrap = NotificationType((1, 3, 6, 1, 4, 1, 14851, 3, 1, 16) + (0,10)).setObjects(("SNIA-SML-MIB", "storageLibrary_Name"), ("SNIA-SML-MIB", "changerDevice_DeviceID"))
changerOpStatusChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 14851, 3, 1, 16) + (0,11)).setObjects(("SNIA-SML-MIB", "storageLibrary_Name"), ("SNIA-SML-MIB", "changerDevice_DeviceID"), ("SNIA-SML-MIB", "currentOperationalStatus"), ("SNIA-SML-MIB", "oldOperationalStatus"))
physicalMediaAddedTrap = NotificationType((1, 3, 6, 1, 4, 1, 14851, 3, 1, 16) + (0,12)).setObjects(("SNIA-SML-MIB", "storageMediaLocation_PhysicalMedia_Tag"))
physicalMediaDeletedTrap = NotificationType((1, 3, 6, 1, 4, 1, 14851, 3, 1, 16) + (0,13)).setObjects(("SNIA-SML-MIB", "storageMediaLocation_PhysicalMedia_Tag"))
endOfSmlMib = MibScalar((1, 3, 6, 1, 4, 1, 14851, 3, 1, 17), ObjectIdentifier())
if mibBuilder.loadTexts: endOfSmlMib.setStatus('mandatory')
mibBuilder.exportSymbols("SNIA-SML-MIB", storageMediaLocation_PhysicalMedia_CleanerMedia=storageMediaLocation_PhysicalMedia_CleanerMedia, scsiProtocolController_ElementName=scsiProtocolController_ElementName, smlCimVersion=smlCimVersion, product_ElementName=product_ElementName, physicalPackageIndex=physicalPackageIndex, trapDestinationPort=trapDestinationPort, trap_Association_ChangerDeviceIndex=trap_Association_ChangerDeviceIndex, storageLibrary_Caption=storageLibrary_Caption, experimental=experimental, numberOfSoftwareElements=numberOfSoftwareElements, changerDevice_Realizes_StorageLocationIndex=changerDevice_Realizes_StorageLocationIndex, storageMediaLocation_PhysicalMedia_DualSided=storageMediaLocation_PhysicalMedia_DualSided, storageMediaLocation_MediaCapacity=storageMediaLocation_MediaCapacity, subChassis_Manufacturer=subChassis_Manufacturer, chassis_SecurityBreach=chassis_SecurityBreach, scsiProtocolController_DeviceID=scsiProtocolController_DeviceID, mediaAccessDevice_DeviceID=mediaAccessDevice_DeviceID, storageMediaLocation_Association_ChangerDeviceIndex=storageMediaLocation_Association_ChangerDeviceIndex, driveAddedTrap=driveAddedTrap, subChassisIndex=subChassisIndex, subChassis_OperationalStatus=subChassis_OperationalStatus, mediaAccessDevice_MountCount=mediaAccessDevice_MountCount, storageMediaLocationEntry=storageMediaLocationEntry, product_Version=product_Version, mediaAccessDeviceGroup=mediaAccessDeviceGroup, scsiProtocolController_Realizes_MediaAccessDeviceIndex=scsiProtocolController_Realizes_MediaAccessDeviceIndex, trapDestinationHostType=trapDestinationHostType, softwareElementGroup=softwareElementGroup, limitedAccessPort_Extended=limitedAccessPort_Extended, softwareElement_Version=softwareElement_Version, driveOpStatusChangedTrap=driveOpStatusChangedTrap, CimDateTime=CimDateTime, smlMibVersion=smlMibVersion, physicalPackage_Model=physicalPackage_Model, mediaAccessDevice_Realizes_softwareElementIndex=mediaAccessDevice_Realizes_softwareElementIndex, changerDevice_Caption=changerDevice_Caption, scsiProtocolController_Description=scsiProtocolController_Description, mediaAccessDevice_PowerOnHours=mediaAccessDevice_PowerOnHours, libraryOpStatusChangedTrap=libraryOpStatusChangedTrap, physicalMediaAddedTrap=physicalMediaAddedTrap, changerDevice_Availability=changerDevice_Availability, trapGroup=trapGroup, fCPortGroup=fCPortGroup, changerDevice_Description=changerDevice_Description, subChassisEntry=subChassisEntry, fCPortIndex=fCPortIndex, storageMediaLocation_PhysicalMedia_Replaceable=storageMediaLocation_PhysicalMedia_Replaceable, subChassis_SecurityBreach=subChassis_SecurityBreach, storageLibrary_Name=storageLibrary_Name, numberOfSCSIProtocolControllers=numberOfSCSIProtocolControllers, storageLibraryGroup=storageLibraryGroup, computerSystem_OperationalStatus=computerSystem_OperationalStatus, storageMediaLocation_PhysicalMedia_Capacity=storageMediaLocation_PhysicalMedia_Capacity, driveAlert=driveAlert, limitedAccessPort_Realizes_StorageLocationIndex=limitedAccessPort_Realizes_StorageLocationIndex, storageMediaLocation_PhysicalMedia_MediaDescription=storageMediaLocation_PhysicalMedia_MediaDescription, changerDeviceIndex=changerDeviceIndex, numberOfTrapDestinations=numberOfTrapDestinations, limitedAccessPort_ElementName=limitedAccessPort_ElementName, numberOffCPorts=numberOffCPorts, scsiProtocolControllerEntry=scsiProtocolControllerEntry, chassis_IsLocked=chassis_IsLocked, numberOfMediaAccessDevices=numberOfMediaAccessDevices, scsiProtocolController_OperationalStatus=scsiProtocolController_OperationalStatus, changerAddedTrap=changerAddedTrap, trapDriveAlertSummary=trapDriveAlertSummary, trapDestinationHostAddr=trapDestinationHostAddr, physicalPackageGroup=physicalPackageGroup, softwareElementEntry=softwareElementEntry, trapPerceivedSeverity=trapPerceivedSeverity, trapsEnabled=trapsEnabled, UShortReal=UShortReal, fCPort_Caption=fCPort_Caption, subChassis_Model=subChassis_Model, scsiProtocolController_Realizes_ChangerDeviceIndex=scsiProtocolController_Realizes_ChangerDeviceIndex, computerSystem_Caption=computerSystem_Caption, product_IdentifyingNumber=product_IdentifyingNumber, mediaAccessDevice_TotalPowerOnHours=mediaAccessDevice_TotalPowerOnHours, storageMediaLocation_LocationType=storageMediaLocation_LocationType, limitedAccessPortEntry=limitedAccessPortEntry, computerSystem_Name=computerSystem_Name, numberOflimitedAccessPorts=numberOflimitedAccessPorts, numberOfPhysicalPackages=numberOfPhysicalPackages, limitedAccessPort_Description=limitedAccessPort_Description, storageMediaLocation_PhysicalMedia_Removable=storageMediaLocation_PhysicalMedia_Removable, computerSystem_PrimaryOwnerContact=computerSystem_PrimaryOwnerContact, storageMediaLocation_PhysicalMedia_PhysicalLabel=storageMediaLocation_PhysicalMedia_PhysicalLabel, limitedAccessPort_Caption=limitedAccessPort_Caption, productGroup=productGroup, fCPort_PermanentAddress=fCPort_PermanentAddress, libraryAddedTrap=libraryAddedTrap, computerSystem_NameFormat=computerSystem_NameFormat, smlRoot=smlRoot, oldOperationalStatus=oldOperationalStatus, libraries=libraries, mediaAccessDeviceEntry=mediaAccessDeviceEntry, softwareElement_InstanceID=softwareElement_InstanceID, UINT64=UINT64, mediaAccessDeviceIndex=mediaAccessDeviceIndex, storageLibrary_Description=storageLibrary_Description, numberOfPhysicalMedias=numberOfPhysicalMedias, changerDeviceGroup=changerDeviceGroup, changerAlert=changerAlert, mediaAccessDevice_Availability=mediaAccessDevice_Availability, storageMediaLocation_PhysicalMediaPresent=storageMediaLocation_PhysicalMediaPresent, fCPort_Description=fCPort_Description, softwareElement_CodeSet=softwareElement_CodeSet, storageMediaLocation_PhysicalMedia_HotSwappable=storageMediaLocation_PhysicalMedia_HotSwappable, fCPort_Realizes_scsiProtocolControllerIndex=fCPort_Realizes_scsiProtocolControllerIndex, softwareElement_Manufacturer=softwareElement_Manufacturer, changerDeviceEntry=changerDeviceEntry, mediaAccessDevice_Realizes_StorageLocationIndex=mediaAccessDevice_Realizes_StorageLocationIndex, scsiProtocolControllerIndex=scsiProtocolControllerIndex, driveDeletedTrap=driveDeletedTrap, storageMediaLocationGroup=storageMediaLocationGroup, softwareElement_IdentificationCode=softwareElement_IdentificationCode, chassis_ElementName=chassis_ElementName, computerSystemGroup=computerSystemGroup, storageMediaLocationTable=storageMediaLocationTable, subChassis_LockPresent=subChassis_LockPresent, subChassis_IsLocked=subChassis_IsLocked, numberOfStorageMediaLocations=numberOfStorageMediaLocations, trap_Association_MediaAccessDeviceIndex=trap_Association_MediaAccessDeviceIndex, fCPort_ElementName=fCPort_ElementName, UINT32=UINT32, trapChangerAlertSummary=trapChangerAlertSummary, storageMediaLocation_PhysicalMedia_Tag=storageMediaLocation_PhysicalMedia_Tag, endOfSmlMib=endOfSmlMib, softwareElementTable=softwareElementTable, numberOfChangerDevices=numberOfChangerDevices, changerDevice_DeviceID=changerDevice_DeviceID, mediaAccessDevice_Name=mediaAccessDevice_Name, softwareElement_SoftwareElementID=softwareElement_SoftwareElementID, mediaAccessDevice_Status=mediaAccessDevice_Status, limitedAccessPortIndex=limitedAccessPortIndex, product_Name=product_Name, storageLibrary_InstallDate=storageLibrary_InstallDate, subChassis_ElementName=subChassis_ElementName, mediaAccessDevice_OperationalStatus=mediaAccessDevice_OperationalStatus, storageMediaLocation_MediaTypesSupported=storageMediaLocation_MediaTypesSupported, mediaAccessDeviceObjectType=mediaAccessDeviceObjectType, mediaAccessDevice_NeedsCleaning=mediaAccessDevice_NeedsCleaning, physicalMediaDeletedTrap=physicalMediaDeletedTrap, chassis_Manufacturer=chassis_Manufacturer, subChassis_Tag=subChassis_Tag, computerSystem_Dedicated=computerSystem_Dedicated, computerSystem_Description=computerSystem_Description, fCPortController_OperationalStatus=fCPortController_OperationalStatus, snia=snia, changerDevice_MediaFlipSupported=changerDevice_MediaFlipSupported, limitedAccessPortGroup=limitedAccessPortGroup, currentOperationalStatus=currentOperationalStatus, computerSystem_ElementName=computerSystem_ElementName, physicalPackage_Manufacturer=physicalPackage_Manufacturer, scsiProtocolControllerTable=scsiProtocolControllerTable, physicalPackage_SerialNumber=physicalPackage_SerialNumber, computerSystem_Realizes_softwareElementIndex=computerSystem_Realizes_softwareElementIndex, physicalPackage_Realizes_MediaAccessDeviceIndex=physicalPackage_Realizes_MediaAccessDeviceIndex, chassis_LockPresent=chassis_LockPresent, softwareElement_LanguageEdition=softwareElement_LanguageEdition, trapObjects=trapObjects, subChassisTable=subChassisTable, softwareElement_Name=softwareElement_Name, changerDevice_ElementName=changerDevice_ElementName, fCPortTable=fCPortTable, mediaAccessDeviceTable=mediaAccessDeviceTable, softwareElement_SerialNumber=softwareElement_SerialNumber, fCPortEntry=fCPortEntry, storageMediaLocationIndex=storageMediaLocationIndex, physicalPackageEntry=physicalPackageEntry, softwareElement_BuildNumber=softwareElement_BuildNumber, subChassis_SerialNumber=subChassis_SerialNumber, changerDeviceTable=changerDeviceTable, libraryDeletedTrap=libraryDeletedTrap, chassis_Model=chassis_Model, trapDestinationEntry=trapDestinationEntry, scsiProtocolController_Availability=scsiProtocolController_Availability, changerDevice_OperationalStatus=changerDevice_OperationalStatus, changerDeletedTrap=changerDeletedTrap, limitedAccessPort_DeviceID=limitedAccessPort_DeviceID, trapDestinationTable=trapDestinationTable, numberOfsubChassis=numberOfsubChassis, storageMediaLocation_PhysicalMedia_MediaType=storageMediaLocation_PhysicalMedia_MediaType, chassis_Tag=chassis_Tag, scsiProtocolControllerGroup=scsiProtocolControllerGroup, fCPort_DeviceID=fCPort_DeviceID, chassisGroup=chassisGroup, physicalPackage_Tag=physicalPackage_Tag, limitedAccessPortTable=limitedAccessPortTable, computerSystem_PrimaryOwnerName=computerSystem_PrimaryOwnerName, subChassis_PackageType=subChassis_PackageType, UINT16=UINT16, product_Vendor=product_Vendor, chassis_SerialNumber=chassis_SerialNumber, changerOpStatusChangedTrap=changerOpStatusChangedTrap, softwareElementIndex=softwareElementIndex, storageLibrary_Status=storageLibrary_Status, storageMediaLocation_LocationCoordinates=storageMediaLocation_LocationCoordinates, storageMediaLocation_Tag=storageMediaLocation_Tag, physicalPackageTable=physicalPackageTable, common=common)
