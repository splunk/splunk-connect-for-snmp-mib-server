#
# PySNMP MIB module CISCO-WAN-CES-CONN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-WAN-CES-CONN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:04:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
cesmChan, circuitEmulation = mibBuilder.importSymbols("BASIS-MIB", "cesmChan", "circuitEmulation")
ciscoWan, = mibBuilder.importSymbols("CISCOWAN-SMI", "ciscoWan")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Unsigned32, Gauge32, Bits, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ObjectIdentity, IpAddress, Counter64, Counter32, MibIdentifier, Integer32, NotificationType, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Gauge32", "Bits", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ObjectIdentity", "IpAddress", "Counter64", "Counter32", "MibIdentifier", "Integer32", "NotificationType", "iso")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
ciscoWanCesConnMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 351, 150, 42))
ciscoWanCesConnMIB.setRevisions(('2002-09-18 00:00',))
if mibBuilder.loadTexts: ciscoWanCesConnMIB.setLastUpdated('200209180000Z')
if mibBuilder.loadTexts: ciscoWanCesConnMIB.setOrganization('Cisco Systems, Inc.')
cesmChanCnfGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1))
cesmChanCnfGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1), )
if mibBuilder.loadTexts: cesmChanCnfGrpTable.setStatus('current')
cesmChanCnfGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1), ).setIndexNames((0, "CISCO-WAN-CES-CONN-MIB", "cesCnfChanNum"))
if mibBuilder.loadTexts: cesmChanCnfGrpEntry.setStatus('current')
cesCnfChanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 2064))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesCnfChanNum.setStatus('current')
cesChanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("add", 1), ("del", 2), ("mod", 3), ("outOfService", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesChanRowStatus.setStatus('current')
cesMapPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesMapPortNum.setStatus('current')
cesMapVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesMapVpi.setStatus('current')
cesMapVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 2064))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesMapVci.setStatus('current')
cesCBRService = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unstructured", 1), ("structured", 2))).clone('unstructured')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesCBRService.setStatus('current')
cesCBRClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("synchronous", 1), ("srts", 2), ("adaptive", 3))).clone('synchronous')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesCBRClockMode.setStatus('current')
cesCas = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("basic", 1), ("e1Cas", 2), ("ds1SfCas", 3), ("ds1EsfCas", 4), ("ccs", 5), ("conditionedE1Cas", 6), ("basicNoPointer", 7), ("ds1SfCasMF", 8), ("ds1EsfCasMF", 9))).clone('basic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesCas.setStatus('current')
cesPartialFill = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 47)).clone(47)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesPartialFill.setStatus('current')
cesBufMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesBufMaxSize.setStatus('current')
cesCDVRxT = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(125, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesCDVRxT.setStatus('current')
cesCellLossIntegrationPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 65535))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesCellLossIntegrationPeriod.setStatus('current')
cesChanLocRmtLpbkState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesChanLocRmtLpbkState.setStatus('current')
cesChanTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("testcon", 1), ("testdelay", 2), ("notest", 3), ("testconsti", 4), ("testdelaysti", 5))).clone('notest')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesChanTestType.setStatus('current')
cesChanTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("passed", 1), ("failed", 2), ("inprogress", 3), ("notinprogress", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesChanTestState.setStatus('current')
cesChanRTDResult = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cesChanRTDResult.setStatus('current')
cesChanPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesChanPortNum.setStatus('current')
cesChanConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pvc", 1), ("svc", 2), ("spvc", 3))).clone('pvc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesChanConnType.setStatus('current')
cesChanStrauSciNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("nonStrauChannel", 1), ("sci1", 2), ("sci2", 3), ("sci3", 4), ("sci4", 5))).clone('nonStrauChannel')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesChanStrauSciNum.setStatus('current')
cesChanIdleDetEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enableOnhookDet", 2), ("enableIdlePatternDet", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesChanIdleDetEnable.setStatus('current')
cesChanIdleSignalCode = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesChanIdleSignalCode.setStatus('current')
cesChanIdleCodeIntgnPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesChanIdleCodeIntgnPeriod.setStatus('current')
cesChanOnhookCode = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesChanOnhookCode.setStatus('current')
cesChanConditionedData = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesChanConditionedData.setStatus('current')
cesmChanExtTrgIdleSupp = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disablesuppression", 1), ("enableSuppresion", 2))).clone('disablesuppression')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesmChanExtTrgIdleSupp.setStatus('current')
cesmChanConditionedSigCode = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesmChanConditionedSigCode.setStatus('current')
cesLocalVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesLocalVpi.setStatus('current')
cesLocalVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesLocalVci.setStatus('current')
cesLocalNSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesLocalNSAP.setStatus('current')
cesRemoteVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesRemoteVpi.setStatus('current')
cesRemoteVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesRemoteVci.setStatus('current')
cesRemoteNSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 32), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesRemoteNSAP.setStatus('current')
cesMastership = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("slave", 2), ("unkown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesMastership.setStatus('current')
cesVpcFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vpc", 1), ("vcc", 2))).clone('vcc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesVpcFlag.setStatus('current')
cesConnServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6, 7, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32))).clone(namedValues=NamedValues(("cbr", 1), ("vbr", 2), ("ubr", 4), ("atfr", 5), ("abrstd", 6), ("abrfst", 7), ("cbr1", 21), ("vbr1rt", 22), ("vbr2rt", 23), ("vbr3rt", 24), ("vbr1nrt", 25), ("vbr2nrt", 26), ("vbr3nrt", 27), ("ubr1", 28), ("ubr2", 29), ("stdabr", 30), ("cbr2", 31), ("cbr3", 32)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesConnServiceType.setStatus('current')
cesRoutingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesRoutingPriority.setStatus('current')
cesMaxCost = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesMaxCost.setStatus('current')
cesRestrictTrunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noresriction", 1), ("terrestrialTrunk", 2), ("sateliteTrunk", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesRestrictTrunkType.setStatus('current')
cesConnPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesConnPCR.setStatus('current')
cesConnMCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesConnMCR.setStatus('current')
cesConnPercentUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesConnPercentUtil.setStatus('current')
cesmConnRemotePCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesmConnRemotePCR.setStatus('current')
cesmConnRemoteMCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesmConnRemoteMCR.setStatus('current')
cesmConnRemotePercentUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesmConnRemotePercentUtil.setStatus('current')
cesmConnForeSightEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesmConnForeSightEnable.setStatus('current')
cesmConnFGCRAEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesmConnFGCRAEnable.setStatus('current')
cesmChanReroute = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesmChanReroute.setStatus('current')
cesmConnAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesmConnAdminStatus.setStatus('current')
cesmChanPrefRouteId = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesmChanPrefRouteId.setStatus('current')
cesmChanDirectRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 1, 1, 50), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesmChanDirectRoute.setStatus('current')
cesmChanNumNextAvailable = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesmChanNumNextAvailable.setStatus('current')
cesmEndPtMapGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 3))
cesmEndPtMapGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 3, 1), )
if mibBuilder.loadTexts: cesmEndPtMapGrpTable.setStatus('current')
cesmEndPtMapGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 3, 1, 1), ).setIndexNames((0, "CISCO-WAN-CES-CONN-MIB", "cesEndPortNum"))
if mibBuilder.loadTexts: cesmEndPtMapGrpEntry.setStatus('current')
cesEndPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesEndPortNum.setStatus('current')
cesEndChanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 2080))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesEndChanNum.setStatus('current')
cesEndLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesEndLineNum.setStatus('current')
ciscoWanCesConnMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 42, 2))
ciscoWanCesConnMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 42, 2, 1))
ciscoWanCesConnMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 42, 2, 2))
ciscoWanCesConnCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 42, 2, 2, 1)).setObjects(("CISCO-WAN-CES-CONN-MIB", "ciscoWanCesConnGroup"), ("CISCO-WAN-CES-CONN-MIB", "ciscoWanCesConnEndptGroup"), ("CISCO-WAN-CES-CONN-MIB", "ciscoWanCesConnGeneralGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanCesConnCompliance = ciscoWanCesConnCompliance.setStatus('current')
ciscoWanCesConnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 42, 2, 1, 1)).setObjects(("CISCO-WAN-CES-CONN-MIB", "cesCnfChanNum"), ("CISCO-WAN-CES-CONN-MIB", "cesChanRowStatus"), ("CISCO-WAN-CES-CONN-MIB", "cesMapPortNum"), ("CISCO-WAN-CES-CONN-MIB", "cesMapVpi"), ("CISCO-WAN-CES-CONN-MIB", "cesMapVci"), ("CISCO-WAN-CES-CONN-MIB", "cesCBRService"), ("CISCO-WAN-CES-CONN-MIB", "cesCBRClockMode"), ("CISCO-WAN-CES-CONN-MIB", "cesCas"), ("CISCO-WAN-CES-CONN-MIB", "cesPartialFill"), ("CISCO-WAN-CES-CONN-MIB", "cesBufMaxSize"), ("CISCO-WAN-CES-CONN-MIB", "cesCDVRxT"), ("CISCO-WAN-CES-CONN-MIB", "cesCellLossIntegrationPeriod"), ("CISCO-WAN-CES-CONN-MIB", "cesChanLocRmtLpbkState"), ("CISCO-WAN-CES-CONN-MIB", "cesChanTestType"), ("CISCO-WAN-CES-CONN-MIB", "cesChanTestState"), ("CISCO-WAN-CES-CONN-MIB", "cesChanRTDResult"), ("CISCO-WAN-CES-CONN-MIB", "cesChanPortNum"), ("CISCO-WAN-CES-CONN-MIB", "cesChanConnType"), ("CISCO-WAN-CES-CONN-MIB", "cesChanStrauSciNum"), ("CISCO-WAN-CES-CONN-MIB", "cesChanIdleDetEnable"), ("CISCO-WAN-CES-CONN-MIB", "cesChanIdleSignalCode"), ("CISCO-WAN-CES-CONN-MIB", "cesChanIdleCodeIntgnPeriod"), ("CISCO-WAN-CES-CONN-MIB", "cesChanOnhookCode"), ("CISCO-WAN-CES-CONN-MIB", "cesChanConditionedData"), ("CISCO-WAN-CES-CONN-MIB", "cesmChanExtTrgIdleSupp"), ("CISCO-WAN-CES-CONN-MIB", "cesmChanConditionedSigCode"), ("CISCO-WAN-CES-CONN-MIB", "cesLocalVpi"), ("CISCO-WAN-CES-CONN-MIB", "cesLocalVci"), ("CISCO-WAN-CES-CONN-MIB", "cesLocalNSAP"), ("CISCO-WAN-CES-CONN-MIB", "cesRemoteVpi"), ("CISCO-WAN-CES-CONN-MIB", "cesRemoteVci"), ("CISCO-WAN-CES-CONN-MIB", "cesRemoteNSAP"), ("CISCO-WAN-CES-CONN-MIB", "cesMastership"), ("CISCO-WAN-CES-CONN-MIB", "cesVpcFlag"), ("CISCO-WAN-CES-CONN-MIB", "cesConnServiceType"), ("CISCO-WAN-CES-CONN-MIB", "cesRoutingPriority"), ("CISCO-WAN-CES-CONN-MIB", "cesMaxCost"), ("CISCO-WAN-CES-CONN-MIB", "cesRestrictTrunkType"), ("CISCO-WAN-CES-CONN-MIB", "cesConnPCR"), ("CISCO-WAN-CES-CONN-MIB", "cesConnMCR"), ("CISCO-WAN-CES-CONN-MIB", "cesConnPercentUtil"), ("CISCO-WAN-CES-CONN-MIB", "cesmConnRemotePCR"), ("CISCO-WAN-CES-CONN-MIB", "cesmConnRemoteMCR"), ("CISCO-WAN-CES-CONN-MIB", "cesmConnRemotePercentUtil"), ("CISCO-WAN-CES-CONN-MIB", "cesmConnForeSightEnable"), ("CISCO-WAN-CES-CONN-MIB", "cesmConnFGCRAEnable"), ("CISCO-WAN-CES-CONN-MIB", "cesmChanReroute"), ("CISCO-WAN-CES-CONN-MIB", "cesmConnAdminStatus"), ("CISCO-WAN-CES-CONN-MIB", "cesmChanPrefRouteId"), ("CISCO-WAN-CES-CONN-MIB", "cesmChanDirectRoute"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanCesConnGroup = ciscoWanCesConnGroup.setStatus('current')
ciscoWanCesConnEndptGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 42, 2, 1, 2)).setObjects(("CISCO-WAN-CES-CONN-MIB", "cesEndPortNum"), ("CISCO-WAN-CES-CONN-MIB", "cesEndChanNum"), ("CISCO-WAN-CES-CONN-MIB", "cesEndLineNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanCesConnEndptGroup = ciscoWanCesConnEndptGroup.setStatus('current')
ciscoWanCesConnGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 42, 2, 1, 3)).setObjects(("CISCO-WAN-CES-CONN-MIB", "cesmChanNumNextAvailable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanCesConnGeneralGroup = ciscoWanCesConnGeneralGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-WAN-CES-CONN-MIB", cesmChanCnfGrpEntry=cesmChanCnfGrpEntry, cesCBRClockMode=cesCBRClockMode, cesmChanReroute=cesmChanReroute, cesRemoteVci=cesRemoteVci, ciscoWanCesConnGeneralGroup=ciscoWanCesConnGeneralGroup, cesMapPortNum=cesMapPortNum, cesmChanCnfGrpTable=cesmChanCnfGrpTable, cesChanPortNum=cesChanPortNum, cesConnMCR=cesConnMCR, cesChanTestType=cesChanTestType, cesmConnRemotePCR=cesmConnRemotePCR, cesmChanConditionedSigCode=cesmChanConditionedSigCode, cesmChanPrefRouteId=cesmChanPrefRouteId, ciscoWanCesConnMIBConformance=ciscoWanCesConnMIBConformance, cesRemoteNSAP=cesRemoteNSAP, cesmConnRemotePercentUtil=cesmConnRemotePercentUtil, cesmEndPtMapGrpEntry=cesmEndPtMapGrpEntry, cesmChanNumNextAvailable=cesmChanNumNextAvailable, cesMapVpi=cesMapVpi, ciscoWanCesConnMIBGroups=ciscoWanCesConnMIBGroups, cesChanIdleDetEnable=cesChanIdleDetEnable, cesLocalVpi=cesLocalVpi, cesMaxCost=cesMaxCost, cesmConnForeSightEnable=cesmConnForeSightEnable, cesCellLossIntegrationPeriod=cesCellLossIntegrationPeriod, cesChanLocRmtLpbkState=cesChanLocRmtLpbkState, cesChanStrauSciNum=cesChanStrauSciNum, cesConnPercentUtil=cesConnPercentUtil, cesmConnAdminStatus=cesmConnAdminStatus, cesChanIdleSignalCode=cesChanIdleSignalCode, cesChanConnType=cesChanConnType, cesCas=cesCas, cesmEndPtMapGrp=cesmEndPtMapGrp, cesLocalNSAP=cesLocalNSAP, cesChanRowStatus=cesChanRowStatus, cesMapVci=cesMapVci, ciscoWanCesConnMIB=ciscoWanCesConnMIB, ciscoWanCesConnMIBCompliances=ciscoWanCesConnMIBCompliances, cesmChanDirectRoute=cesmChanDirectRoute, cesMastership=cesMastership, PYSNMP_MODULE_ID=ciscoWanCesConnMIB, cesVpcFlag=cesVpcFlag, cesmEndPtMapGrpTable=cesmEndPtMapGrpTable, cesEndChanNum=cesEndChanNum, cesChanConditionedData=cesChanConditionedData, cesmConnFGCRAEnable=cesmConnFGCRAEnable, cesCnfChanNum=cesCnfChanNum, cesChanRTDResult=cesChanRTDResult, cesConnServiceType=cesConnServiceType, cesPartialFill=cesPartialFill, ciscoWanCesConnGroup=ciscoWanCesConnGroup, cesBufMaxSize=cesBufMaxSize, cesConnPCR=cesConnPCR, ciscoWanCesConnCompliance=ciscoWanCesConnCompliance, ciscoWanCesConnEndptGroup=ciscoWanCesConnEndptGroup, cesRoutingPriority=cesRoutingPriority, cesEndPortNum=cesEndPortNum, cesmChanCnfGrp=cesmChanCnfGrp, cesCDVRxT=cesCDVRxT, cesCBRService=cesCBRService, cesmChanExtTrgIdleSupp=cesmChanExtTrgIdleSupp, cesLocalVci=cesLocalVci, cesRestrictTrunkType=cesRestrictTrunkType, cesRemoteVpi=cesRemoteVpi, cesChanIdleCodeIntgnPeriod=cesChanIdleCodeIntgnPeriod, cesmConnRemoteMCR=cesmConnRemoteMCR, cesEndLineNum=cesEndLineNum, cesChanTestState=cesChanTestState, cesChanOnhookCode=cesChanOnhookCode)
