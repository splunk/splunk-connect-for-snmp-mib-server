#
# PySNMP MIB module HM2-WWAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HM2-WWAN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:19:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
hm2ConfigurationMibs, HmLargeDisplayString, HmTimeSeconds1970, HmActionValue, HmEnabledStatus = mibBuilder.importSymbols("HM2-TC-MIB", "hm2ConfigurationMibs", "HmLargeDisplayString", "HmTimeSeconds1970", "HmActionValue", "HmEnabledStatus")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, NotificationType, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Integer32, MibIdentifier, Counter32, IpAddress, Gauge32, TimeTicks, iso, Unsigned32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "NotificationType", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Integer32", "MibIdentifier", "Counter32", "IpAddress", "Gauge32", "TimeTicks", "iso", "Unsigned32", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
hm2WwanMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 11, 125))
hm2WwanMib.setRevisions(('2015-05-29 12:00',))
if mibBuilder.loadTexts: hm2WwanMib.setLastUpdated('201505291200Z')
if mibBuilder.loadTexts: hm2WwanMib.setOrganization('Hirschmann Automation and Control GmbH')
hm2WwanMibNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 125, 0))
hm2WwanMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 125, 1))
hm2WwanGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 1))
hm2WwanDataGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2))
hm2WwanSimCardGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 3))
hm2WwanInformationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 4))
class Hm2CellularNetworks(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("auto", 1), ("gsm", 2), ("umts", 3), ("lte", 4), ("gsmumts", 5), ("gsmlte", 6), ("umtslte", 7))

class Hm2TechnologyLevel(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("lte", 1), ("utms", 2))

class Hm2AuthType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("none", 1), ("pap", 2), ("chap", 3), ("papchap", 4))

class Hm2PdpType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("ipv4", 1), ("ipv6", 2), ("ipv4v6", 3))

class Hm2ConnectionStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("inactive", 1), ("active", 2), ("idle", 3), ("reconnecting", 4), ("failure", 5))

class Hm2LimitUnit(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("kb", 1), ("mb", 2), ("gb", 3))

class Hm2SimCardRole(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("auto", 1), ("primary", 2), ("backup", 3))

class Hm2SimCardStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("simPresent", 1), ("simAbsent", 2), ("simLocked", 3), ("simUnlocked", 4), ("simInactive", 5), ("simActive", 6))

class Hm2Pin1Status(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("notVerified", 1), ("verified", 2), ("blocked", 3), ("disabled", 4), ("wrongCode", 5))

class Hm2RegistrationStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("notRegistered", 1), ("registering", 2), ("registered", 3), ("failure", 4))

class Hm2RoamingStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("home", 1), ("roaming", 2), ("roamingDisabled", 3))

class Hm2TrapBits(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("roamingActive", 0), ("ltePersistenceSwitch", 1), ("cellularRegistrationFailed", 2), ("dataConnectionSetup", 3), ("dataPlanWarningThreshold", 4), ("simPin1Status", 5), ("failoverConnectionBackupSim", 6), ("failoverRegistrationBackupSim", 7), ("failoverRoamingBackupSim", 8), ("failoverDataLimitBackupSim", 9), ("failoverRegistrationModemReset", 10))

hm2WwanAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 1, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WwanAdminStatus.setStatus('current')
hm2WwanCellularSelection = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 1, 2), Hm2CellularNetworks().clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WwanCellularSelection.setStatus('current')
hm2WwanLtePersistence = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 1, 4), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WwanLtePersistence.setStatus('current')
hm2WwanLtePersistenceInterval = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WwanLtePersistenceInterval.setStatus('current')
hm2WwanFailoverTechnologyLevel = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 1, 6), Hm2TechnologyLevel().clone('utms')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WwanFailoverTechnologyLevel.setStatus('current')
hm2WwanBackupSimFailoverConnection = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 1, 7), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WwanBackupSimFailoverConnection.setStatus('current')
hm2WwanBackupSimFailoverRegistration = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 1, 8), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WwanBackupSimFailoverRegistration.setStatus('current')
hm2WwanBackupSimFailoverRoaming = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 1, 9), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WwanBackupSimFailoverRoaming.setStatus('current')
hm2WwanBackupSimFailoverDataLimit = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 1, 10), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WwanBackupSimFailoverDataLimit.setStatus('current')
hm2WwanModemResetFailoverRegistration = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 1, 11), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WwanModemResetFailoverRegistration.setStatus('current')
hm2WwanBackupSimTechnologyLevel = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 1, 12), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WwanBackupSimTechnologyLevel.setStatus('current')
hm2WwanFailoverCycle = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 1, 13), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WwanFailoverCycle.setStatus('current')
hm2WwanSetTrap = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 1, 14), Hm2TrapBits().clone(namedValues=NamedValues(("roamingActive", 0), ("ltePersistenceSwitch", 1), ("cellularRegistrationFailed", 2), ("dataConnectionSetup", 3), ("dataPlanWarningThreshold", 4), ("simPin1Status", 5), ("failoverConnectionBackupSim", 6), ("failoverRegistrationBackupSim", 7), ("failoverRoamingBackupSim", 8), ("failoverDataLimitBackupSim", 9), ("failoverRegistrationModemReset", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WwanSetTrap.setStatus('current')
hm2WwanDataConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 1), )
if mibBuilder.loadTexts: hm2WwanDataConnectionTable.setStatus('current')
hm2WwanDataConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 1, 1), ).setIndexNames((0, "HM2-WWAN-MIB", "hm2WwanDataConnectionSimId"))
if mibBuilder.loadTexts: hm2WwanDataConnectionEntry.setStatus('current')
hm2WwanDataConnectionSimId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: hm2WwanDataConnectionSimId.setStatus('current')
hm2WwanDataConnectionAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 1, 1, 2), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WwanDataConnectionAdminStatus.setStatus('current')
hm2WwanDataConnectionApn = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WwanDataConnectionApn.setStatus('current')
hm2WwanDataConnectionApnCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanDataConnectionApnCurrent.setStatus('current')
hm2WwanDataConnectionUser = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WwanDataConnectionUser.setStatus('current')
hm2WwanDataConnectionPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WwanDataConnectionPassword.setStatus('current')
hm2WwanDataConnectionAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 1, 1, 7), Hm2AuthType().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WwanDataConnectionAuth.setStatus('current')
hm2WwanDataConnectionPdpType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 1, 1, 8), Hm2PdpType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WwanDataConnectionPdpType.setStatus('current')
hm2WwanDataConnectionIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 1, 1, 9), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WwanDataConnectionIpAddressType.setStatus('current')
hm2WwanDataConnectionIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 1, 1, 10), InetAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WwanDataConnectionIpAddress.setStatus('current')
hm2WwanDataConnectionDnsPrimaryType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 1, 1, 11), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WwanDataConnectionDnsPrimaryType.setStatus('current')
hm2WwanDataConnectionDnsPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 1, 1, 12), InetAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WwanDataConnectionDnsPrimary.setStatus('current')
hm2WwanDataConnectionDnsSecondaryType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 1, 1, 13), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WwanDataConnectionDnsSecondaryType.setStatus('current')
hm2WwanDataConnectionDnsSecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 1, 1, 14), InetAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WwanDataConnectionDnsSecondary.setStatus('current')
hm2WwanDataConnectionIpAddressCurrentType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 1, 1, 15), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanDataConnectionIpAddressCurrentType.setStatus('current')
hm2WwanDataConnectionIpAddressCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 1, 1, 16), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanDataConnectionIpAddressCurrent.setStatus('current')
hm2WwanDataConnectionDnsPrimaryCurrentType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 1, 1, 17), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanDataConnectionDnsPrimaryCurrentType.setStatus('current')
hm2WwanDataConnectionDnsPrimaryCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 1, 1, 18), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanDataConnectionDnsPrimaryCurrent.setStatus('current')
hm2WwanDataConnectionDnsSecondaryCurrentType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 1, 1, 19), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanDataConnectionDnsSecondaryCurrentType.setStatus('current')
hm2WwanDataConnectionDnsSecondaryCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 1, 1, 20), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanDataConnectionDnsSecondaryCurrent.setStatus('current')
hm2WwanDataConnectionMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(552, 1500)).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WwanDataConnectionMtu.setStatus('current')
hm2WwanDataConnectionFailedRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 32)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WwanDataConnectionFailedRetry.setStatus('current')
hm2WwanDataConnectionFailedRetryCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanDataConnectionFailedRetryCurrent.setStatus('current')
hm2WwanDataConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 1, 1, 24), Hm2ConnectionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanDataConnectionStatus.setStatus('current')
hm2WwanDataConnectionStatusErrorReason = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 1, 1, 25), HmLargeDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanDataConnectionStatusErrorReason.setStatus('current')
hm2WwanDataConnectionActivatedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 1, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanDataConnectionActivatedCount.setStatus('current')
hm2WwanDataConnectionStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 1, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanDataConnectionStartTime.setStatus('current')
hm2WwanDataConnectionUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 1, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanDataConnectionUpTime.setStatus('current')
hm2WwanDataConnectionTotalUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 1, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanDataConnectionTotalUpTime.setStatus('current')
hm2WwanDataPlanTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 2), )
if mibBuilder.loadTexts: hm2WwanDataPlanTable.setStatus('current')
hm2WwanDataPlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 2, 1), ).setIndexNames((0, "HM2-WWAN-MIB", "hm2WwanDataPlanSimId"))
if mibBuilder.loadTexts: hm2WwanDataPlanEntry.setStatus('current')
hm2WwanDataPlanSimId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: hm2WwanDataPlanSimId.setStatus('current')
hm2WwanDataPlanMonthlyLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 2, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WwanDataPlanMonthlyLimit.setStatus('current')
hm2WwanDataPlanLimitMeasureUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 2, 1, 3), Hm2LimitUnit().clone('kb')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WwanDataPlanLimitMeasureUnit.setStatus('current')
hm2WwanDataPlanWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WwanDataPlanWarningThreshold.setStatus('current')
hm2WwanDataPlanReset = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 2, 1, 5), HmActionValue().clone('noop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WwanDataPlanReset.setStatus('current')
hm2WwanDataPlanResetDay = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WwanDataPlanResetDay.setStatus('current')
hm2WwanDataPlanLastReset = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 2, 1, 7), HmTimeSeconds1970()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanDataPlanLastReset.setStatus('current')
hm2WwanDataPlanCutoffThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 2, 1, 8), Integer32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WwanDataPlanCutoffThreshold.setStatus('current')
hm2WwanDataPlanMonthlyUsageTx = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanDataPlanMonthlyUsageTx.setStatus('current')
hm2WwanDataPlanMonthlyUsageRx = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanDataPlanMonthlyUsageRx.setStatus('current')
hm2WwanDataPacketStatsTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 3), )
if mibBuilder.loadTexts: hm2WwanDataPacketStatsTable.setStatus('current')
hm2WwanDataPacketStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 3, 1), ).setIndexNames((0, "HM2-WWAN-MIB", "hm2WwanDataPacketStatsSimId"))
if mibBuilder.loadTexts: hm2WwanDataPacketStatsEntry.setStatus('current')
hm2WwanDataPacketStatsSimId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: hm2WwanDataPacketStatsSimId.setStatus('current')
hm2WwanDataPacketStatsTxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanDataPacketStatsTxOk.setStatus('current')
hm2WwanDataPacketStatsRxOk = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanDataPacketStatsRxOk.setStatus('current')
hm2WwanDataPacketStatsTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanDataPacketStatsTxErrors.setStatus('current')
hm2WwanDataPacketStatsRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanDataPacketStatsRxErrors.setStatus('current')
hm2WwanDataPacketStatsTxOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanDataPacketStatsTxOverflows.setStatus('current')
hm2WwanDataPacketStatsRxOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanDataPacketStatsRxOverflows.setStatus('current')
hm2WwanDataPacketStatsTxBytesOk = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanDataPacketStatsTxBytesOk.setStatus('current')
hm2WwanDataPacketStatsRxBytesOk = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanDataPacketStatsRxBytesOk.setStatus('current')
hm2WwanDataPacketStatsTxDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanDataPacketStatsTxDropped.setStatus('current')
hm2WwanDataPacketStatsRxDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanDataPacketStatsRxDropped.setStatus('current')
hm2WwanSimCardTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 3, 1), )
if mibBuilder.loadTexts: hm2WwanSimCardTable.setStatus('current')
hm2WwanSimCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 3, 1, 1), ).setIndexNames((0, "HM2-WWAN-MIB", "hm2WwanSimCardSimId"))
if mibBuilder.loadTexts: hm2WwanSimCardEntry.setStatus('current')
hm2WwanSimCardSimId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: hm2WwanSimCardSimId.setStatus('current')
hm2WwanSimCardAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 3, 1, 1, 2), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WwanSimCardAdminStatus.setStatus('current')
hm2WwanSimCardRole = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 3, 1, 1, 3), Hm2SimCardRole().clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WwanSimCardRole.setStatus('current')
hm2WwanSimCardRoleCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 3, 1, 1, 4), Hm2SimCardRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanSimCardRoleCurrent.setStatus('current')
hm2WwanSimCardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 3, 1, 1, 5), Hm2SimCardStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanSimCardStatus.setStatus('current')
hm2WwanSimCardSetActive = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 3, 1, 1, 6), HmActionValue().clone('noop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WwanSimCardSetActive.setStatus('current')
hm2WwanSimCardPin1 = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 3, 1, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(4, 8)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WwanSimCardPin1.setStatus('current')
hm2WwanSimCardPin1Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 3, 1, 1, 8), HmEnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WwanSimCardPin1Mode.setStatus('current')
hm2WwanSimCardPin1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 3, 1, 1, 9), Hm2Pin1Status()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanSimCardPin1Status.setStatus('current')
hm2WwanSimCardPin1VerifyTries = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanSimCardPin1VerifyTries.setStatus('current')
hm2WwanSimCardPin1UnblockTries = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanSimCardPin1UnblockTries.setStatus('current')
hm2WwanSimCardPuk1 = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 3, 1, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WwanSimCardPuk1.setStatus('current')
hm2WwanSimCardRoamingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 3, 1, 1, 13), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WwanSimCardRoamingMode.setStatus('current')
hm2WwanSimCardIccid = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 3, 1, 1, 14), SnmpAdminString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(22, 22), )).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2WwanSimCardIccid.setStatus('current')
hm2WwanSimCardImsi = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 3, 1, 1, 15), SnmpAdminString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(15, 15), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanSimCardImsi.setStatus('current')
hm2WwanCellularInformationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 4, 1))
hm2WwanModemInformationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 4, 2))
hm2WwanCellularActiveSimId = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanCellularActiveSimId.setStatus('current')
hm2WwanCellularRegistration = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 4, 1, 2), Hm2RegistrationStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanCellularRegistration.setStatus('current')
hm2WwanCellularOperator = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 4, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanCellularOperator.setStatus('current')
hm2WwanCellularNetwork = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 4, 1, 4), Hm2CellularNetworks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanCellularNetwork.setStatus('current')
hm2WwanCellularMcc = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanCellularMcc.setStatus('current')
hm2WwanCellularMnc = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanCellularMnc.setStatus('current')
hm2WwanCellularLac = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanCellularLac.setStatus('current')
hm2WwanCellularBsic = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanCellularBsic.setStatus('current')
hm2WwanCellularCellId = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanCellularCellId.setStatus('current')
hm2WwanCellularBand = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanCellularBand.setStatus('current')
hm2WwanCellularChannel = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanCellularChannel.setStatus('current')
hm2WwanCellularSignalStrength = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanCellularSignalStrength.setStatus('current')
hm2WwanCellularSignalStrengthLte = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanCellularSignalStrengthLte.setStatus('current')
hm2WwanCellularSignalQuality = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanCellularSignalQuality.setStatus('current')
hm2WwanCellularSignalQualityLte = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanCellularSignalQualityLte.setStatus('current')
hm2WwanCellularRscp = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanCellularRscp.setStatus('current')
hm2WwanCellularRoamingStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 4, 1, 17), Hm2RoamingStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanCellularRoamingStatus.setStatus('current')
hm2WwanCellularBitErrorRate = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanCellularBitErrorRate.setStatus('current')
hm2WwanCellularCurrentTxRate = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 4, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanCellularCurrentTxRate.setStatus('current')
hm2WwanCellularCurrentRxRate = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 4, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanCellularCurrentRxRate.setStatus('current')
hm2WwanCellularMaxTxRate = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 4, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanCellularMaxTxRate.setStatus('current')
hm2WwanCellularMaxRxRate = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 4, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanCellularMaxRxRate.setStatus('current')
hm2WwanModemManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 4, 2, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanModemManufacturer.setStatus('current')
hm2WwanModemModel = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 4, 2, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanModemModel.setStatus('current')
hm2WwanModemRevision = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 4, 2, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanModemRevision.setStatus('current')
hm2WwanModemImei = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 125, 1, 4, 2, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2WwanModemImei.setStatus('current')
hm2WwanRoamingActiveTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 125, 0, 1)).setObjects(("HM2-WWAN-MIB", "hm2WwanCellularRoamingStatus"), ("HM2-WWAN-MIB", "hm2WwanCellularOperator"), ("HM2-WWAN-MIB", "hm2WwanCellularActiveSimId"))
if mibBuilder.loadTexts: hm2WwanRoamingActiveTrap.setStatus('current')
hm2WwanLtePersistenceSwitchTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 125, 0, 2)).setObjects(("HM2-WWAN-MIB", "hm2WwanLtePersistence"), ("HM2-WWAN-MIB", "hm2WwanLtePersistenceInterval"), ("HM2-WWAN-MIB", "hm2WwanCellularActiveSimId"))
if mibBuilder.loadTexts: hm2WwanLtePersistenceSwitchTrap.setStatus('current')
hm2WwanCelluarRegistrationFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 125, 0, 3)).setObjects(("HM2-WWAN-MIB", "hm2WwanCellularRegistration"), ("HM2-WWAN-MIB", "hm2WwanCellularActiveSimId"))
if mibBuilder.loadTexts: hm2WwanCelluarRegistrationFailedTrap.setStatus('current')
hm2WwanDataConnectionSetupTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 125, 0, 4)).setObjects(("HM2-WWAN-MIB", "hm2WwanDataConnectionStatus"), ("HM2-WWAN-MIB", "hm2WwanCellularActiveSimId"), ("HM2-WWAN-MIB", "hm2WwanDataConnectionApnCurrent"))
if mibBuilder.loadTexts: hm2WwanDataConnectionSetupTrap.setStatus('current')
hm2WwanDataPlanWarningThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 125, 0, 5)).setObjects(("HM2-WWAN-MIB", "hm2WwanDataPlanWarningThreshold"), ("HM2-WWAN-MIB", "hm2WwanCellularActiveSimId"), ("HM2-WWAN-MIB", "hm2WwanDataPlanMonthlyLimit"), ("HM2-WWAN-MIB", "hm2WwanDataPlanLimitMeasureUnit"), ("HM2-WWAN-MIB", "hm2WwanDataPlanMonthlyUsageTx"), ("HM2-WWAN-MIB", "hm2WwanDataPlanMonthlyUsageRx"))
if mibBuilder.loadTexts: hm2WwanDataPlanWarningThresholdTrap.setStatus('current')
hm2WwanSimCardPin1StatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 125, 0, 6)).setObjects(("HM2-WWAN-MIB", "hm2WwanSimCardPin1Status"), ("HM2-WWAN-MIB", "hm2WwanCellularActiveSimId"), ("HM2-WWAN-MIB", "hm2WwanSimCardRoleCurrent"), ("HM2-WWAN-MIB", "hm2WwanSimCardStatus"))
if mibBuilder.loadTexts: hm2WwanSimCardPin1StatusTrap.setStatus('current')
hm2WwanBackupSimFailoverConnectionTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 125, 0, 7)).setObjects(("HM2-WWAN-MIB", "hm2WwanCellularActiveSimId"), ("HM2-WWAN-MIB", "hm2WwanSimCardRoleCurrent"))
if mibBuilder.loadTexts: hm2WwanBackupSimFailoverConnectionTrap.setStatus('current')
hm2WwanBackupSimFailoverRegistrationTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 125, 0, 8)).setObjects(("HM2-WWAN-MIB", "hm2WwanCellularActiveSimId"), ("HM2-WWAN-MIB", "hm2WwanSimCardRoleCurrent"))
if mibBuilder.loadTexts: hm2WwanBackupSimFailoverRegistrationTrap.setStatus('current')
hm2WwanBackupSimFailoverRoamingTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 125, 0, 9)).setObjects(("HM2-WWAN-MIB", "hm2WwanCellularActiveSimId"), ("HM2-WWAN-MIB", "hm2WwanSimCardRoleCurrent"))
if mibBuilder.loadTexts: hm2WwanBackupSimFailoverRoamingTrap.setStatus('current')
hm2WwanBackupSimFailoverDataLimitTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 125, 0, 10)).setObjects(("HM2-WWAN-MIB", "hm2WwanCellularActiveSimId"), ("HM2-WWAN-MIB", "hm2WwanSimCardRoleCurrent"))
if mibBuilder.loadTexts: hm2WwanBackupSimFailoverDataLimitTrap.setStatus('current')
hm2WwanModemResetFailoverRegistrationTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 125, 0, 11)).setObjects(("HM2-WWAN-MIB", "hm2WwanCellularActiveSimId"), ("HM2-WWAN-MIB", "hm2WwanSimCardRoleCurrent"))
if mibBuilder.loadTexts: hm2WwanModemResetFailoverRegistrationTrap.setStatus('current')
mibBuilder.exportSymbols("HM2-WWAN-MIB", Hm2Pin1Status=Hm2Pin1Status, hm2WwanDataConnectionTable=hm2WwanDataConnectionTable, Hm2SimCardStatus=Hm2SimCardStatus, hm2WwanModemModel=hm2WwanModemModel, hm2WwanRoamingActiveTrap=hm2WwanRoamingActiveTrap, hm2WwanSimCardRoleCurrent=hm2WwanSimCardRoleCurrent, hm2WwanDataPlanMonthlyUsageTx=hm2WwanDataPlanMonthlyUsageTx, hm2WwanSimCardStatus=hm2WwanSimCardStatus, hm2WwanSimCardPuk1=hm2WwanSimCardPuk1, Hm2PdpType=Hm2PdpType, Hm2RegistrationStatus=Hm2RegistrationStatus, hm2WwanModemResetFailoverRegistration=hm2WwanModemResetFailoverRegistration, hm2WwanSetTrap=hm2WwanSetTrap, hm2WwanDataPlanResetDay=hm2WwanDataPlanResetDay, hm2WwanBackupSimFailoverDataLimitTrap=hm2WwanBackupSimFailoverDataLimitTrap, hm2WwanDataPacketStatsTxErrors=hm2WwanDataPacketStatsTxErrors, hm2WwanDataConnectionDnsPrimaryCurrentType=hm2WwanDataConnectionDnsPrimaryCurrentType, hm2WwanSimCardGroup=hm2WwanSimCardGroup, hm2WwanSimCardPin1Status=hm2WwanSimCardPin1Status, hm2WwanDataConnectionFailedRetry=hm2WwanDataConnectionFailedRetry, hm2WwanCellularNetwork=hm2WwanCellularNetwork, hm2WwanCellularMnc=hm2WwanCellularMnc, hm2WwanModemResetFailoverRegistrationTrap=hm2WwanModemResetFailoverRegistrationTrap, hm2WwanDataPlanCutoffThreshold=hm2WwanDataPlanCutoffThreshold, hm2WwanDataPacketStatsRxOverflows=hm2WwanDataPacketStatsRxOverflows, hm2WwanCellularCurrentTxRate=hm2WwanCellularCurrentTxRate, Hm2TrapBits=Hm2TrapBits, hm2WwanSimCardPin1StatusTrap=hm2WwanSimCardPin1StatusTrap, hm2WwanGeneralGroup=hm2WwanGeneralGroup, hm2WwanCellularRoamingStatus=hm2WwanCellularRoamingStatus, hm2WwanCellularBand=hm2WwanCellularBand, hm2WwanModemInformationGroup=hm2WwanModemInformationGroup, hm2WwanDataConnectionDnsPrimaryCurrent=hm2WwanDataConnectionDnsPrimaryCurrent, hm2WwanLtePersistence=hm2WwanLtePersistence, hm2WwanDataPacketStatsTxOk=hm2WwanDataPacketStatsTxOk, hm2WwanCellularInformationGroup=hm2WwanCellularInformationGroup, hm2WwanDataConnectionDnsPrimaryType=hm2WwanDataConnectionDnsPrimaryType, hm2WwanDataConnectionIpAddressCurrentType=hm2WwanDataConnectionIpAddressCurrentType, PYSNMP_MODULE_ID=hm2WwanMib, hm2WwanBackupSimTechnologyLevel=hm2WwanBackupSimTechnologyLevel, hm2WwanDataPlanMonthlyLimit=hm2WwanDataPlanMonthlyLimit, hm2WwanLtePersistenceSwitchTrap=hm2WwanLtePersistenceSwitchTrap, hm2WwanDataConnectionAdminStatus=hm2WwanDataConnectionAdminStatus, hm2WwanMibNotifications=hm2WwanMibNotifications, hm2WwanCellularCellId=hm2WwanCellularCellId, hm2WwanDataPacketStatsRxBytesOk=hm2WwanDataPacketStatsRxBytesOk, hm2WwanCellularLac=hm2WwanCellularLac, hm2WwanFailoverCycle=hm2WwanFailoverCycle, hm2WwanDataConnectionAuth=hm2WwanDataConnectionAuth, hm2WwanDataPacketStatsTable=hm2WwanDataPacketStatsTable, Hm2LimitUnit=Hm2LimitUnit, hm2WwanDataPacketStatsTxOverflows=hm2WwanDataPacketStatsTxOverflows, hm2WwanDataConnectionApnCurrent=hm2WwanDataConnectionApnCurrent, hm2WwanDataConnectionDnsSecondaryCurrentType=hm2WwanDataConnectionDnsSecondaryCurrentType, hm2WwanMibObjects=hm2WwanMibObjects, hm2WwanCellularBitErrorRate=hm2WwanCellularBitErrorRate, Hm2TechnologyLevel=Hm2TechnologyLevel, hm2WwanInformationGroup=hm2WwanInformationGroup, hm2WwanBackupSimFailoverRoamingTrap=hm2WwanBackupSimFailoverRoamingTrap, hm2WwanDataConnectionStartTime=hm2WwanDataConnectionStartTime, hm2WwanSimCardPin1Mode=hm2WwanSimCardPin1Mode, hm2WwanDataPlanLimitMeasureUnit=hm2WwanDataPlanLimitMeasureUnit, hm2WwanCellularOperator=hm2WwanCellularOperator, Hm2AuthType=Hm2AuthType, hm2WwanSimCardSimId=hm2WwanSimCardSimId, hm2WwanCellularRscp=hm2WwanCellularRscp, Hm2CellularNetworks=Hm2CellularNetworks, hm2WwanDataConnectionIpAddressType=hm2WwanDataConnectionIpAddressType, hm2WwanModemRevision=hm2WwanModemRevision, hm2WwanCellularCurrentRxRate=hm2WwanCellularCurrentRxRate, hm2WwanDataConnectionDnsSecondary=hm2WwanDataConnectionDnsSecondary, hm2WwanDataPlanEntry=hm2WwanDataPlanEntry, hm2WwanDataPacketStatsTxBytesOk=hm2WwanDataPacketStatsTxBytesOk, hm2WwanDataConnectionDnsSecondaryCurrent=hm2WwanDataConnectionDnsSecondaryCurrent, hm2WwanAdminStatus=hm2WwanAdminStatus, hm2WwanCellularSignalStrengthLte=hm2WwanCellularSignalStrengthLte, hm2WwanDataConnectionEntry=hm2WwanDataConnectionEntry, hm2WwanDataConnectionStatus=hm2WwanDataConnectionStatus, hm2WwanModemImei=hm2WwanModemImei, hm2WwanSimCardTable=hm2WwanSimCardTable, hm2WwanCellularChannel=hm2WwanCellularChannel, Hm2RoamingStatus=Hm2RoamingStatus, hm2WwanDataConnectionFailedRetryCurrent=hm2WwanDataConnectionFailedRetryCurrent, hm2WwanDataConnectionApn=hm2WwanDataConnectionApn, hm2WwanCellularSignalQuality=hm2WwanCellularSignalQuality, hm2WwanDataConnectionIpAddressCurrent=hm2WwanDataConnectionIpAddressCurrent, hm2WwanDataPacketStatsSimId=hm2WwanDataPacketStatsSimId, Hm2SimCardRole=Hm2SimCardRole, hm2WwanDataPlanWarningThresholdTrap=hm2WwanDataPlanWarningThresholdTrap, hm2WwanCelluarRegistrationFailedTrap=hm2WwanCelluarRegistrationFailedTrap, hm2WwanSimCardImsi=hm2WwanSimCardImsi, hm2WwanDataConnectionPdpType=hm2WwanDataConnectionPdpType, hm2WwanDataConnectionPassword=hm2WwanDataConnectionPassword, hm2WwanSimCardRole=hm2WwanSimCardRole, hm2WwanSimCardPin1VerifyTries=hm2WwanSimCardPin1VerifyTries, hm2WwanDataPacketStatsRxDropped=hm2WwanDataPacketStatsRxDropped, hm2WwanBackupSimFailoverConnection=hm2WwanBackupSimFailoverConnection, hm2WwanSimCardPin1UnblockTries=hm2WwanSimCardPin1UnblockTries, hm2WwanSimCardSetActive=hm2WwanSimCardSetActive, hm2WwanDataConnectionMtu=hm2WwanDataConnectionMtu, hm2WwanDataConnectionUpTime=hm2WwanDataConnectionUpTime, hm2WwanDataPacketStatsEntry=hm2WwanDataPacketStatsEntry, hm2WwanModemManufacturer=hm2WwanModemManufacturer, hm2WwanDataConnectionUser=hm2WwanDataConnectionUser, hm2WwanDataPlanTable=hm2WwanDataPlanTable, hm2WwanDataPlanLastReset=hm2WwanDataPlanLastReset, Hm2ConnectionStatus=Hm2ConnectionStatus, hm2WwanDataConnectionSimId=hm2WwanDataConnectionSimId, hm2WwanDataGroup=hm2WwanDataGroup, hm2WwanCellularSignalStrength=hm2WwanCellularSignalStrength, hm2WwanBackupSimFailoverRegistrationTrap=hm2WwanBackupSimFailoverRegistrationTrap, hm2WwanDataPacketStatsRxErrors=hm2WwanDataPacketStatsRxErrors, hm2WwanDataConnectionTotalUpTime=hm2WwanDataConnectionTotalUpTime, hm2WwanBackupSimFailoverRoaming=hm2WwanBackupSimFailoverRoaming, hm2WwanBackupSimFailoverDataLimit=hm2WwanBackupSimFailoverDataLimit, hm2WwanFailoverTechnologyLevel=hm2WwanFailoverTechnologyLevel, hm2WwanDataPacketStatsTxDropped=hm2WwanDataPacketStatsTxDropped, hm2WwanBackupSimFailoverRegistration=hm2WwanBackupSimFailoverRegistration, hm2WwanDataConnectionDnsSecondaryType=hm2WwanDataConnectionDnsSecondaryType, hm2WwanCellularActiveSimId=hm2WwanCellularActiveSimId, hm2WwanCellularRegistration=hm2WwanCellularRegistration, hm2WwanDataPlanReset=hm2WwanDataPlanReset, hm2WwanDataConnectionActivatedCount=hm2WwanDataConnectionActivatedCount, hm2WwanLtePersistenceInterval=hm2WwanLtePersistenceInterval, hm2WwanSimCardIccid=hm2WwanSimCardIccid, hm2WwanCellularSignalQualityLte=hm2WwanCellularSignalQualityLte, hm2WwanSimCardAdminStatus=hm2WwanSimCardAdminStatus, hm2WwanDataConnectionDnsPrimary=hm2WwanDataConnectionDnsPrimary, hm2WwanMib=hm2WwanMib, hm2WwanDataConnectionStatusErrorReason=hm2WwanDataConnectionStatusErrorReason, hm2WwanSimCardEntry=hm2WwanSimCardEntry, hm2WwanDataPlanWarningThreshold=hm2WwanDataPlanWarningThreshold, hm2WwanDataConnectionSetupTrap=hm2WwanDataConnectionSetupTrap, hm2WwanDataConnectionIpAddress=hm2WwanDataConnectionIpAddress, hm2WwanBackupSimFailoverConnectionTrap=hm2WwanBackupSimFailoverConnectionTrap, hm2WwanCellularMaxRxRate=hm2WwanCellularMaxRxRate, hm2WwanCellularBsic=hm2WwanCellularBsic, hm2WwanDataPacketStatsRxOk=hm2WwanDataPacketStatsRxOk, hm2WwanCellularMcc=hm2WwanCellularMcc, hm2WwanSimCardRoamingMode=hm2WwanSimCardRoamingMode, hm2WwanCellularMaxTxRate=hm2WwanCellularMaxTxRate, hm2WwanDataPlanMonthlyUsageRx=hm2WwanDataPlanMonthlyUsageRx, hm2WwanCellularSelection=hm2WwanCellularSelection, hm2WwanSimCardPin1=hm2WwanSimCardPin1, hm2WwanDataPlanSimId=hm2WwanDataPlanSimId)
