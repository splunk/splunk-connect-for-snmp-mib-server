#
# PySNMP MIB module UCD-IPFILTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/UCD-IPFILTER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:21:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Gauge32, Integer32, Counter64, TimeTicks, Bits, MibIdentifier, iso, ModuleIdentity, Counter32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Gauge32", "Integer32", "Counter64", "TimeTicks", "Bits", "MibIdentifier", "iso", "ModuleIdentity", "Counter32", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ucdExperimental, = mibBuilder.importSymbols("UCD-SNMP-MIB", "ucdExperimental")
ucdIpFilter = ModuleIdentity((1, 3, 6, 1, 4, 1, 2021, 13, 2))
ucdIpFilter.setRevisions(('2000-01-26 00:00', '1999-12-15 00:00',))
if mibBuilder.loadTexts: ucdIpFilter.setLastUpdated('200001260000Z')
if mibBuilder.loadTexts: ucdIpFilter.setOrganization('University of California, Davis')
ipfInTable = MibTable((1, 3, 6, 1, 4, 1, 2021, 13, 2, 1), )
if mibBuilder.loadTexts: ipfInTable.setStatus('current')
ipfInEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2021, 13, 2, 1, 1), ).setIndexNames((0, "UCD-IPFILTER-MIB", "ipfInIndex"))
if mibBuilder.loadTexts: ipfInEntry.setStatus('current')
ipfInIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfInIndex.setStatus('current')
ipfInRule = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfInRule.setStatus('current')
ipfInHits = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfInHits.setStatus('current')
ipfOutTable = MibTable((1, 3, 6, 1, 4, 1, 2021, 13, 2, 2), )
if mibBuilder.loadTexts: ipfOutTable.setStatus('current')
ipfOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2021, 13, 2, 2, 1), ).setIndexNames((0, "UCD-IPFILTER-MIB", "ipfOutIndex"))
if mibBuilder.loadTexts: ipfOutEntry.setStatus('current')
ipfOutIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfOutIndex.setStatus('current')
ipfOutRule = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfOutRule.setStatus('current')
ipfOutHits = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfOutHits.setStatus('current')
ipfAccInTable = MibTable((1, 3, 6, 1, 4, 1, 2021, 13, 2, 3), )
if mibBuilder.loadTexts: ipfAccInTable.setStatus('current')
ipfAccInEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2021, 13, 2, 3, 1), ).setIndexNames((0, "UCD-IPFILTER-MIB", "ipfAccInIndex"))
if mibBuilder.loadTexts: ipfAccInEntry.setStatus('current')
ipfAccInIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfAccInIndex.setStatus('current')
ipfAccInRule = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfAccInRule.setStatus('current')
ipfAccInHits = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfAccInHits.setStatus('current')
ipfAccInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfAccInBytes.setStatus('current')
ipfAccOutTable = MibTable((1, 3, 6, 1, 4, 1, 2021, 13, 2, 4), )
if mibBuilder.loadTexts: ipfAccOutTable.setStatus('current')
ipfAccOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2021, 13, 2, 4, 1), ).setIndexNames((0, "UCD-IPFILTER-MIB", "ipfAccOutIndex"))
if mibBuilder.loadTexts: ipfAccOutEntry.setStatus('current')
ipfAccOutIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfAccOutIndex.setStatus('current')
ipfAccOutRule = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfAccOutRule.setStatus('current')
ipfAccOutHits = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfAccOutHits.setStatus('current')
ipfAccOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipfAccOutBytes.setStatus('current')
mibBuilder.exportSymbols("UCD-IPFILTER-MIB", ipfAccInIndex=ipfAccInIndex, ipfOutRule=ipfOutRule, ipfAccOutHits=ipfAccOutHits, ipfAccOutIndex=ipfAccOutIndex, ipfOutHits=ipfOutHits, ipfInEntry=ipfInEntry, ipfInTable=ipfInTable, ipfOutEntry=ipfOutEntry, PYSNMP_MODULE_ID=ucdIpFilter, ipfInHits=ipfInHits, ipfInIndex=ipfInIndex, ipfOutIndex=ipfOutIndex, ipfOutTable=ipfOutTable, ipfAccInBytes=ipfAccInBytes, ipfAccOutRule=ipfAccOutRule, ipfAccInHits=ipfAccInHits, ipfAccOutBytes=ipfAccOutBytes, ipfAccInTable=ipfAccInTable, ipfAccInRule=ipfAccInRule, ipfInRule=ipfInRule, ipfAccInEntry=ipfAccInEntry, ipfAccOutTable=ipfAccOutTable, ipfAccOutEntry=ipfAccOutEntry, ucdIpFilter=ucdIpFilter)
