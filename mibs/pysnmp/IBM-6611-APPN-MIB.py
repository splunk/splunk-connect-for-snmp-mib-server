#
# PySNMP MIB module IBM-6611-APPN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IBM-6611-APPN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:39:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, ModuleIdentity, NotificationType, Unsigned32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter32, Gauge32, IpAddress, Integer32, enterprises, TimeTicks, iso, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ModuleIdentity", "NotificationType", "Unsigned32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter32", "Gauge32", "IpAddress", "Integer32", "enterprises", "TimeTicks", "iso", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2))
ibmProd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6))
ibm6611 = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2))
ibmappn = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13))
ibmappnNode = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1))
ibmappnGeneralInfoAndCaps = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 1))
ibmappnNnUniqueInfoAndCaps = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 2))
ibmappnEnUniqueCaps = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 3))
ibmappnPortInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4))
ibmappnLinkStationInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5))
ibmappnSnmpInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 6))
ibmappnMemoryUse = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 7))
ibmappnXidInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 8))
ibmappnNodeCpName = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeCpName.setStatus('mandatory')
ibmappnNodeNetid = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeNetid.setStatus('mandatory')
ibmappnNodeBlockNum = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeBlockNum.setStatus('mandatory')
ibmappnNodeIdNum = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeIdNum.setStatus('mandatory')
ibmappnNodeType = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("networkNode", 1), ("endNode", 2), ("len", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeType.setStatus('mandatory')
ibmappnNodeUpTime = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeUpTime.setStatus('mandatory')
ibmappnNodeNegotLs = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeNegotLs.setStatus('mandatory')
ibmappnNodeSegReasm = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeSegReasm.setStatus('mandatory')
ibmappnNodeBindReasm = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeBindReasm.setStatus('mandatory')
ibmappnNodeParallelTg = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeParallelTg.setStatus('mandatory')
ibmappnNodeService = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeService.setStatus('mandatory')
ibmappnNodeAdaptiveBindPacing = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeAdaptiveBindPacing.setStatus('mandatory')
ibmappnNodeNnRcvRegChar = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeNnRcvRegChar.setStatus('mandatory')
ibmappnNodeNnGateway = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeNnGateway.setStatus('mandatory')
ibmappnNodeNnCentralDirectory = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeNnCentralDirectory.setStatus('mandatory')
ibmappnNodeNnTreeCache = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeNnTreeCache.setStatus('mandatory')
ibmappnNodeNnTreeUpdate = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeNnTreeUpdate.setStatus('mandatory')
ibmappnNodeNnRouteAddResist = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeNnRouteAddResist.setStatus('mandatory')
ibmappnNodeNnIsr = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeNnIsr.setStatus('mandatory')
ibmappnNodeNnFrsn = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeNnFrsn.setStatus('mandatory')
ibmappnNodeEnSegGen = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeEnSegGen.setStatus('mandatory')
ibmappnNodeEnModeCosMap = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeEnModeCosMap.setStatus('mandatory')
ibmappnNodeEnLocateCdinit = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeEnLocateCdinit.setStatus('mandatory')
ibmappnNodeEnSendRegNames = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeEnSendRegNames.setStatus('mandatory')
ibmappnNodeEnSendRegChar = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeEnSendRegChar.setStatus('mandatory')
ibmappnNodePortTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 1), )
if mibBuilder.loadTexts: ibmappnNodePortTable.setStatus('mandatory')
ibmappnNodePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 1, 1), ).setIndexNames((0, "IBM-6611-APPN-MIB", "ibmappnNodePortName"))
if mibBuilder.loadTexts: ibmappnNodePortEntry.setStatus('mandatory')
ibmappnNodePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortName.setStatus('mandatory')
ibmappnNodePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("pendactive", 2), ("active", 3), ("pendinact", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnNodePortState.setStatus('mandatory')
ibmappnNodePortDlcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("sdlc", 2), ("dls", 3), ("socket", 4), ("ethernet", 5), ("tokenRing", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortDlcType.setStatus('mandatory')
ibmappnNodePortPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("leased", 1), ("switched", 2), ("sharedAccessFacilities", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortPortType.setStatus('mandatory')
ibmappnNodePortSIMRIM = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortSIMRIM.setStatus('mandatory')
ibmappnNodePortLsRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("negotiable", 3), ("abm", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortLsRole.setStatus('mandatory')
ibmappnNodePortMaxRcvBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortMaxRcvBtuSize.setStatus('mandatory')
ibmappnNodePortMaxIframeWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortMaxIframeWindow.setStatus('mandatory')
ibmappnNodePortDefLsGoodXids = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortDefLsGoodXids.setStatus('mandatory')
ibmappnNodePortDefLsBadXids = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortDefLsBadXids.setStatus('mandatory')
ibmappnNodePortDynLsGoodXids = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortDynLsGoodXids.setStatus('mandatory')
ibmappnNodePortDynLsBadXids = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortDynLsBadXids.setStatus('mandatory')
ibmappnNodePortSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 1, 1, 13), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortSpecific.setStatus('mandatory')
ibmappnNodePortIpTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 2), )
if mibBuilder.loadTexts: ibmappnNodePortIpTable.setStatus('mandatory')
ibmappnNodePortIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 2, 1), ).setIndexNames((0, "IBM-6611-APPN-MIB", "ibmappnNodePortIpName"))
if mibBuilder.loadTexts: ibmappnNodePortIpEntry.setStatus('mandatory')
ibmappnNodePortIpName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortIpName.setStatus('mandatory')
ibmappnNodePortIpPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortIpPortNum.setStatus('mandatory')
ibmappnNodePortDlsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 3), )
if mibBuilder.loadTexts: ibmappnNodePortDlsTable.setStatus('mandatory')
ibmappnNodePortDlsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 3, 1), ).setIndexNames((0, "IBM-6611-APPN-MIB", "ibmappnNodePortDlsName"))
if mibBuilder.loadTexts: ibmappnNodePortDlsEntry.setStatus('mandatory')
ibmappnNodePortDlsName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortDlsName.setStatus('mandatory')
ibmappnNodePortDlsMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortDlsMac.setStatus('mandatory')
ibmappnNodePortDlsSap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortDlsSap.setStatus('mandatory')
ibmappnNodePortTrTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 4), )
if mibBuilder.loadTexts: ibmappnNodePortTrTable.setStatus('mandatory')
ibmappnNodePortTrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 4, 1), ).setIndexNames((0, "IBM-6611-APPN-MIB", "ibmappnNodePortTrName"))
if mibBuilder.loadTexts: ibmappnNodePortTrEntry.setStatus('mandatory')
ibmappnNodePortTrName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortTrName.setStatus('mandatory')
ibmappnNodePortTrMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortTrMac.setStatus('mandatory')
ibmappnNodePortTrSap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortTrSap.setStatus('mandatory')
ibmappnNodePortDlcTraceTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 5), )
if mibBuilder.loadTexts: ibmappnNodePortDlcTraceTable.setStatus('mandatory')
ibmappnNodePortDlcTraceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 5, 1), ).setIndexNames((0, "IBM-6611-APPN-MIB", "ibmappnNodePortDlcTracPortName"), (0, "IBM-6611-APPN-MIB", "ibmappnNodePortDlcTracIndex"))
if mibBuilder.loadTexts: ibmappnNodePortDlcTraceEntry.setStatus('mandatory')
ibmappnNodePortDlcTracPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortDlcTracPortName.setStatus('mandatory')
ibmappnNodePortDlcTracIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortDlcTracIndex.setStatus('mandatory')
ibmappnNodePortDlcTracDlcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("sdlc", 2), ("dls", 3), ("socket", 4), ("ethernet", 5), ("tokenRing", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortDlcTracDlcType.setStatus('mandatory')
ibmappnNodePortDlcTracLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortDlcTracLocalAddr.setStatus('mandatory')
ibmappnNodePortDlcTracRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortDlcTracRemoteAddr.setStatus('mandatory')
ibmappnNodePortDlcTracMsgType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("request", 3), ("confirm", 4), ("indication", 5), ("response", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortDlcTracMsgType.setStatus('mandatory')
ibmappnNodePortDlcTracCmdType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 4124, 6001, 6002, 6003, 6004, 6005, 6006, 6007, 6008, 6009, 6010, 6012, 6013, 6014, 6015, 6016, 6017, 6018, 6019, 6020, 6021, 6022, 6023, 6024, 6025, 6026))).clone(namedValues=NamedValues(("testFrame", 1), ("respFrame", 2), ("curFrame", 3), ("icrFrame", 4), ("respAck", 5), ("dgrmFrame", 6), ("xidFrame", 7), ("contFrame", 8), ("contedFrame", 9), ("iFrame", 10), ("enterBusy", 12), ("exitBusy", 13), ("haltFrame", 14), ("lsHalted", 15), ("restartLs", 16), ("lsRestarted", 17), ("netBioSnq", 18), ("netBioSnr", 19), ("gnetFrame", 20), ("netdFrame", 21), ("oobFrame", 22), ("alterSap", 23), ("testRsp", 24), ("haltLsNow", 25), ("testReq", 26), ("ipTestFrame", 2001), ("ipRespFrame", 2002), ("ipCurFrame", 2003), ("ipIcrFrame", 2004), ("ipRespAck", 2005), ("ipDgrmFrame", 2006), ("ipXidFrame", 2007), ("ipContFrame", 2008), ("ipContedFrame", 2009), ("ipIFrame", 2010), ("ipEnterBusy", 2012), ("ipExitBusy", 2013), ("ipHaltFrame", 2014), ("ipLsHalted", 2015), ("ipRestartLs", 2016), ("ipLsRestarted", 2017), ("ipNetBioSnq", 2018), ("ipNetBioSnr", 2019), ("ipGnetFrame", 2020), ("ipNetdFrame", 2021), ("ipOobFrame", 2022), ("ipAlterSap", 2023), ("ipTestRsp", 2024), ("ipHaltLsNow", 2025), ("ipTestReq", 2026), ("dlsIpm", 4124), ("trTestFrame", 6001), ("trRespFrame", 6002), ("trCurFrame", 6003), ("trIcrFrame", 6004), ("trRespAck", 6005), ("trDgrmFrame", 6006), ("trXidFrame", 6007), ("trContFrame", 6008), ("trContedFrame", 6009), ("trIFrame", 6010), ("trEnterBusy", 6012), ("trExitBusy", 6013), ("trHaltFrame", 6014), ("trLsHalted", 6015), ("trRestartLs", 6016), ("trLsRestarted", 6017), ("trNetBioSnq", 6018), ("trNetBioSnr", 6019), ("trGnetFrame", 6020), ("trNetdFrame", 6021), ("trOobFrame", 6022), ("trAlterSap", 6023), ("trTestRsp", 6024), ("trHaltLsNow", 6025), ("trTestReq", 6026)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortDlcTracCmdType.setStatus('mandatory')
ibmappnNodePortDlcTracUseWan = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 4, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("notApplicable", 2), ("useUnknown", 3), ("useWan", 4), ("useLan", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodePortDlcTracUseWan.setStatus('mandatory')
ibmappnNodeLsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1), )
if mibBuilder.loadTexts: ibmappnNodeLsTable.setStatus('mandatory')
ibmappnNodeLsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1), ).setIndexNames((0, "IBM-6611-APPN-MIB", "ibmappnNodeLsName"))
if mibBuilder.loadTexts: ibmappnNodeLsEntry.setStatus('mandatory')
ibmappnNodeLsName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsName.setStatus('mandatory')
ibmappnNodeLsPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsPortName.setStatus('mandatory')
ibmappnNodeLsDlcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("sdlc", 2), ("dls", 3), ("socket", 4), ("ethernet", 5), ("tokenRing", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsDlcType.setStatus('mandatory')
ibmappnNodeLsDynamic = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsDynamic.setStatus('mandatory')
ibmappnNodeLsState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("pendactive", 2), ("active", 3), ("pendinact", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmappnNodeLsState.setStatus('mandatory')
ibmappnNodeLsCpName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsCpName.setStatus('mandatory')
ibmappnNodeLsTgNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsTgNum.setStatus('mandatory')
ibmappnNodeLsLimResource = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsLimResource.setStatus('mandatory')
ibmappnNodeLsMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsMigration.setStatus('mandatory')
ibmappnNodeLsBlockNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsBlockNum.setStatus('mandatory')
ibmappnNodeLsIdNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsIdNum.setStatus('mandatory')
ibmappnNodeLsCpCpSession = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsCpCpSession.setStatus('mandatory')
ibmappnNodeLsTargetPacingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsTargetPacingCount.setStatus('mandatory')
ibmappnNodeLsMaxSendBtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsMaxSendBtuSize.setStatus('mandatory')
ibmappnNodeLsEffCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsEffCap.setStatus('mandatory')
ibmappnNodeLsConnCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsConnCost.setStatus('mandatory')
ibmappnNodeLsByteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsByteCost.setStatus('mandatory')
ibmappnNodeLsSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 32, 64, 96, 128, 160, 192))).clone(namedValues=NamedValues(("nonsecure", 1), ("publicSwitchedNetwork", 32), ("undergroundCable", 64), ("secureConduit", 96), ("guardedConduit", 128), ("encrypted", 160), ("guardedRadiation", 192)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsSecurity.setStatus('mandatory')
ibmappnNodeLsDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 384, 9216, 147456, 294912, 2013265920))).clone(namedValues=NamedValues(("minimum", 0), ("negligible", 384), ("terrestrial", 9216), ("packet", 147456), ("long", 294912), ("maximum", 2013265920)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsDelay.setStatus('mandatory')
ibmappnNodeLsUsr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsUsr1.setStatus('mandatory')
ibmappnNodeLsUsr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsUsr2.setStatus('mandatory')
ibmappnNodeLsUsr3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsUsr3.setStatus('mandatory')
ibmappnNodeLsInXidBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsInXidBytes.setStatus('mandatory')
ibmappnNodeLsInMsgBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsInMsgBytes.setStatus('mandatory')
ibmappnNodeLsInXidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsInXidFrames.setStatus('mandatory')
ibmappnNodeLsInMsgFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsInMsgFrames.setStatus('mandatory')
ibmappnNodeLsOutXidBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsOutXidBytes.setStatus('mandatory')
ibmappnNodeLsOutMsgBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsOutMsgBytes.setStatus('mandatory')
ibmappnNodeLsOutXidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsOutXidFrames.setStatus('mandatory')
ibmappnNodeLsOutMsgFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsOutMsgFrames.setStatus('mandatory')
ibmappnNodeLsEchoRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsEchoRsps.setStatus('mandatory')
ibmappnNodeLsCurrentDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsCurrentDelay.setStatus('mandatory')
ibmappnNodeLsMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsMaxDelay.setStatus('mandatory')
ibmappnNodeLsMinDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsMinDelay.setStatus('mandatory')
ibmappnNodeLsMaxDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 35), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsMaxDelayTime.setStatus('mandatory')
ibmappnNodeLsGoodXids = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsGoodXids.setStatus('mandatory')
ibmappnNodeLsBadXids = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsBadXids.setStatus('mandatory')
ibmappnNodeLsSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 38), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsSpecific.setStatus('mandatory')
ibmappnNodeLsSubState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("inactive", 1), ("sentReqOpnstn", 2), ("pendXidExch", 3), ("sentActAs", 4), ("sentSetMode", 5), ("active", 6), ("sentDeactAsOrd", 7), ("sentDiscOrd", 8), ("sentDestroyTg", 9), ("sentCreateTg", 10), ("sentConnReq", 11), ("pendRcvConnInd", 12), ("pendSendConnRsp", 13), ("sentConnRsp", 14), ("pendDeact", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsSubState.setStatus('mandatory')
ibmappnNodeLsStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 40), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsStartTime.setStatus('mandatory')
ibmappnNodeLsActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 41), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsActiveTime.setStatus('mandatory')
ibmappnNodeLsCurrentStateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 1, 1, 42), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsCurrentStateTime.setStatus('mandatory')
ibmappnNodeLsIpTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 2), )
if mibBuilder.loadTexts: ibmappnNodeLsIpTable.setStatus('mandatory')
ibmappnNodeLsIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 2, 1), ).setIndexNames((0, "IBM-6611-APPN-MIB", "ibmappnNodeLsIpName"))
if mibBuilder.loadTexts: ibmappnNodeLsIpEntry.setStatus('mandatory')
ibmappnNodeLsIpName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsIpName.setStatus('mandatory')
ibmappnNodeLsIpState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("pendactive", 2), ("active", 3), ("pendinact", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsIpState.setStatus('mandatory')
ibmappnNodeLsLocalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsLocalIpAddr.setStatus('mandatory')
ibmappnNodeLsLocalIpPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsLocalIpPortNum.setStatus('mandatory')
ibmappnNodeLsRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsRemoteIpAddr.setStatus('mandatory')
ibmappnNodeLsRemoteIpPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsRemoteIpPortNum.setStatus('mandatory')
ibmappnNodeLsDlsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 3), )
if mibBuilder.loadTexts: ibmappnNodeLsDlsTable.setStatus('mandatory')
ibmappnNodeLsDlsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 3, 1), ).setIndexNames((0, "IBM-6611-APPN-MIB", "ibmappnNodeLsDlsName"))
if mibBuilder.loadTexts: ibmappnNodeLsDlsEntry.setStatus('mandatory')
ibmappnNodeLsDlsName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsDlsName.setStatus('mandatory')
ibmappnNodeLsDlsState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("pendactive", 2), ("active", 3), ("pendinact", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsDlsState.setStatus('mandatory')
ibmappnNodeLsLocalDlsMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsLocalDlsMac.setStatus('mandatory')
ibmappnNodeLsLocalDlsSap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsLocalDlsSap.setStatus('mandatory')
ibmappnNodeLsRemoteDlsMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsRemoteDlsMac.setStatus('mandatory')
ibmappnNodeLsRemoteDlsSap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsRemoteDlsSap.setStatus('mandatory')
ibmappnNodeLsTrTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 4), )
if mibBuilder.loadTexts: ibmappnNodeLsTrTable.setStatus('mandatory')
ibmappnNodeLsTrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 4, 1), ).setIndexNames((0, "IBM-6611-APPN-MIB", "ibmappnNodeLsTrName"))
if mibBuilder.loadTexts: ibmappnNodeLsTrEntry.setStatus('mandatory')
ibmappnNodeLsTrName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsTrName.setStatus('mandatory')
ibmappnNodeLsTrState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("pendactive", 2), ("active", 3), ("pendinact", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsTrState.setStatus('mandatory')
ibmappnNodeLsLocalTrMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsLocalTrMac.setStatus('mandatory')
ibmappnNodeLsLocalTrSap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsLocalTrSap.setStatus('mandatory')
ibmappnNodeLsRemoteTrMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsRemoteTrMac.setStatus('mandatory')
ibmappnNodeLsRemoteTrSap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsRemoteTrSap.setStatus('mandatory')
ibmappnNodeLsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 5), )
if mibBuilder.loadTexts: ibmappnNodeLsStatusTable.setStatus('mandatory')
ibmappnNodeLsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 5, 1), ).setIndexNames((0, "IBM-6611-APPN-MIB", "ibmappnNodeLsStatusIndex"))
if mibBuilder.loadTexts: ibmappnNodeLsStatusEntry.setStatus('mandatory')
ibmappnNodeLsStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsStatusIndex.setStatus('mandatory')
ibmappnNodeLsStatusTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 5, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsStatusTime.setStatus('mandatory')
ibmappnNodeLsStatusLsName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsStatusLsName.setStatus('mandatory')
ibmappnNodeLsStatusCpName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsStatusCpName.setStatus('mandatory')
ibmappnNodeLsStatusNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 5, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsStatusNodeId.setStatus('mandatory')
ibmappnNodeLsStatusTgNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsStatusTgNum.setStatus('mandatory')
ibmappnNodeLsStatusGeneralSense = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 5, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsStatusGeneralSense.setStatus('mandatory')
ibmappnNodeLsStatusNofRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("retry", 1), ("noretry", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsStatusNofRetry.setStatus('mandatory')
ibmappnNodeLsStatusEndSense = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 5, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsStatusEndSense.setStatus('mandatory')
ibmappnNodeLsStatusXidLocalSense = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 5, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsStatusXidLocalSense.setStatus('mandatory')
ibmappnNodeLsStatusXidRemoteSense = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 5, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsStatusXidRemoteSense.setStatus('mandatory')
ibmappnNodeLsStatusXidByteInError = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1000))).clone(namedValues=NamedValues(("na", 1000)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsStatusXidByteInError.setStatus('mandatory')
ibmappnNodeLsStatusXidBitInError = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8))).clone(namedValues=NamedValues(("na", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsStatusXidBitInError.setStatus('mandatory')
ibmappnNodeLsStatusDlcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("sdlc", 2), ("dls", 3), ("socket", 4), ("ethernet", 5), ("tr", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsStatusDlcType.setStatus('mandatory')
ibmappnNodeLsStatusLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 5, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsStatusLocalAddr.setStatus('mandatory')
ibmappnNodeLsStatusRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 5, 5, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeLsStatusRemoteAddr.setStatus('mandatory')
ibmappnSnmpInPkts = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 6, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnSnmpInPkts.setStatus('mandatory')
ibmappnSnmpInGetRequests = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 6, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnSnmpInGetRequests.setStatus('mandatory')
ibmappnSnmpInGetNexts = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 6, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnSnmpInGetNexts.setStatus('mandatory')
ibmappnSnmpInSetRequests = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 6, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnSnmpInSetRequests.setStatus('mandatory')
ibmappnSnmpInTotalVars = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 6, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnSnmpInTotalVars.setStatus('mandatory')
ibmappnSnmpInGetVars = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 6, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnSnmpInGetVars.setStatus('mandatory')
ibmappnSnmpInGetNextVars = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 6, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnSnmpInGetNextVars.setStatus('mandatory')
ibmappnSnmpInSetVars = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 6, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnSnmpInSetVars.setStatus('mandatory')
ibmappnSnmpOutNoSuchNames = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 6, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnSnmpOutNoSuchNames.setStatus('mandatory')
ibmappnSnmpOutGenErrs = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 6, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnSnmpOutGenErrs.setStatus('mandatory')
ibmappnMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnMemorySize.setStatus('mandatory')
ibmappnMemoryUsed = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnMemoryUsed.setStatus('mandatory')
ibmappnMemoryWarnThresh = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnMemoryWarnThresh.setStatus('mandatory')
ibmappnMemoryCritThresh = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnMemoryCritThresh.setStatus('mandatory')
ibmappnNodeDefLsGoodXids = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 8, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeDefLsGoodXids.setStatus('mandatory')
ibmappnNodeDefLsBadXids = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 8, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeDefLsBadXids.setStatus('mandatory')
ibmappnNodeDynLsGoodXids = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 8, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeDynLsGoodXids.setStatus('mandatory')
ibmappnNodeDynLsBadXids = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 1, 8, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNodeDynLsBadXids.setStatus('mandatory')
ibmappnNn = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2))
ibmappnNnTopo = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1))
ibmappnNnTopology = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3))
ibmappnNnTopoMaxNodes = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoMaxNodes.setStatus('mandatory')
ibmappnNnTopoCurNumNodes = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoCurNumNodes.setStatus('mandatory')
ibmappnNnTopoInTdus = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoInTdus.setStatus('mandatory')
ibmappnNnTopoOutTdus = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoOutTdus.setStatus('mandatory')
ibmappnNnTopoNodeLowRsns = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoNodeLowRsns.setStatus('mandatory')
ibmappnNnTopoNodeEqualRsns = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoNodeEqualRsns.setStatus('mandatory')
ibmappnNnTopoNodeGoodHighRsns = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoNodeGoodHighRsns.setStatus('mandatory')
ibmappnNnTopoNodeBadHighRsns = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoNodeBadHighRsns.setStatus('mandatory')
ibmappnNnTopoNodeStateUpdates = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoNodeStateUpdates.setStatus('mandatory')
ibmappnNnTopoNodeErrors = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoNodeErrors.setStatus('mandatory')
ibmappnNnTopoNodeTimerUpdates = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoNodeTimerUpdates.setStatus('mandatory')
ibmappnNnTopoNodePurges = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoNodePurges.setStatus('mandatory')
ibmappnNnTopoTgLowRsns = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoTgLowRsns.setStatus('mandatory')
ibmappnNnTopoTgEqualRsns = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoTgEqualRsns.setStatus('mandatory')
ibmappnNnTopoTgGoodHighRsns = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoTgGoodHighRsns.setStatus('mandatory')
ibmappnNnTopoTgBadHighRsns = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoTgBadHighRsns.setStatus('mandatory')
ibmappnNnTopoTgStateUpdates = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoTgStateUpdates.setStatus('mandatory')
ibmappnNnTopoTgErrors = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoTgErrors.setStatus('mandatory')
ibmappnNnTopoTgTimerUpdates = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoTgTimerUpdates.setStatus('mandatory')
ibmappnNnTopoTgPurges = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoTgPurges.setStatus('mandatory')
ibmappnNnTopoTotalRouteCalcs = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoTotalRouteCalcs.setStatus('mandatory')
ibmappnNnTopoTotalRouteRejs = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoTotalRouteRejs.setStatus('mandatory')
ibmappnNnTopoRouteTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 23), )
if mibBuilder.loadTexts: ibmappnNnTopoRouteTable.setStatus('mandatory')
ibmappnNnTopoRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 23, 1), ).setIndexNames((0, "IBM-6611-APPN-MIB", "ibmappnNnTopoRouteCos"))
if mibBuilder.loadTexts: ibmappnNnTopoRouteEntry.setStatus('mandatory')
ibmappnNnTopoRouteCos = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 23, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoRouteCos.setStatus('mandatory')
ibmappnNnTopoRouteTrees = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 23, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoRouteTrees.setStatus('mandatory')
ibmappnNnTopoRouteCalcs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 23, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoRouteCalcs.setStatus('mandatory')
ibmappnNnTopoRouteRejs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 1, 23, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTopoRouteRejs.setStatus('mandatory')
ibmappnNnAdjNodeTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 2), )
if mibBuilder.loadTexts: ibmappnNnAdjNodeTable.setStatus('mandatory')
ibmappnNnAdjNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 2, 1), ).setIndexNames((0, "IBM-6611-APPN-MIB", "ibmappnNnAdjNodeAdjName"))
if mibBuilder.loadTexts: ibmappnNnAdjNodeEntry.setStatus('mandatory')
ibmappnNnAdjNodeAdjName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnAdjNodeAdjName.setStatus('mandatory')
ibmappnNnAdjNodeCpCpSessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("conLoserActive", 2), ("conWinnerActive", 3), ("inactive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnAdjNodeCpCpSessStatus.setStatus('mandatory')
ibmappnNnAdjNodeOutOfSeqTdus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnAdjNodeOutOfSeqTdus.setStatus('mandatory')
ibmappnNnAdjNodeLastFrsnSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnAdjNodeLastFrsnSent.setStatus('mandatory')
ibmappnNnAdjNodeLastFrsnRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnAdjNodeLastFrsnRcvd.setStatus('mandatory')
ibmappnNnTopologyTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 1), )
if mibBuilder.loadTexts: ibmappnNnTopologyTable.setStatus('mandatory')
ibmappnNnTopologyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 1, 1), ).setIndexNames((0, "IBM-6611-APPN-MIB", "ibmappnNnNodeName"))
if mibBuilder.loadTexts: ibmappnNnTopologyEntry.setStatus('mandatory')
ibmappnNnNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeName.setStatus('mandatory')
ibmappnNnNodeFrsn = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeFrsn.setStatus('mandatory')
ibmappnNnNodeEntryTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeEntryTimeLeft.setStatus('mandatory')
ibmappnNnNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("networknode", 1), ("virtualnode", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeType.setStatus('mandatory')
ibmappnNnNodeRsn = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeRsn.setStatus('mandatory')
ibmappnNnNodeRouteAddResist = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeRouteAddResist.setStatus('mandatory')
ibmappnNnNodeCongested = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeCongested.setStatus('mandatory')
ibmappnNnNodeIsrDepleted = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeIsrDepleted.setStatus('mandatory')
ibmappnNnNodeEndptDepleted = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeEndptDepleted.setStatus('mandatory')
ibmappnNnNodeQuiescing = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeQuiescing.setStatus('mandatory')
ibmappnNnNodeGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeGateway.setStatus('mandatory')
ibmappnNnNodeCentralDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeCentralDirectory.setStatus('mandatory')
ibmappnNnNodeIsr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeIsr.setStatus('mandatory')
ibmappnNnNodeChainSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeChainSupport.setStatus('mandatory')
ibmappnNnTgTopologyTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 2), )
if mibBuilder.loadTexts: ibmappnNnTgTopologyTable.setStatus('mandatory')
ibmappnNnTgTopologyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 2, 1), ).setIndexNames((0, "IBM-6611-APPN-MIB", "ibmappnNnTgOwner"), (0, "IBM-6611-APPN-MIB", "ibmappnNnTgDest"), (0, "IBM-6611-APPN-MIB", "ibmappnNnTgNum"))
if mibBuilder.loadTexts: ibmappnNnTgTopologyEntry.setStatus('mandatory')
ibmappnNnTgOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgOwner.setStatus('mandatory')
ibmappnNnTgDest = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgDest.setStatus('mandatory')
ibmappnNnTgNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgNum.setStatus('mandatory')
ibmappnNnTgFrsn = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgFrsn.setStatus('mandatory')
ibmappnNnTgEntryTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgEntryTimeLeft.setStatus('mandatory')
ibmappnNnTgDestVirtual = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgDestVirtual.setStatus('mandatory')
ibmappnNnTgDlcData = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgDlcData.setStatus('mandatory')
ibmappnNnTgRsn = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgRsn.setStatus('mandatory')
ibmappnNnTgOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgOperational.setStatus('mandatory')
ibmappnNnTgQuiescing = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgQuiescing.setStatus('mandatory')
ibmappnNnTgCpCpSession = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgCpCpSession.setStatus('mandatory')
ibmappnNnTgEffCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgEffCap.setStatus('mandatory')
ibmappnNnTgConnCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgConnCost.setStatus('mandatory')
ibmappnNnTgByteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgByteCost.setStatus('mandatory')
ibmappnNnTgSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 32, 64, 96, 128, 160, 192))).clone(namedValues=NamedValues(("nonsecure", 1), ("publicSwitchedNetwork", 32), ("undergroundCable", 64), ("secureConduit", 96), ("guardedConduit", 128), ("encrypted", 160), ("guardedRadiation", 192)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgSecurity.setStatus('mandatory')
ibmappnNnTgDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 384, 9216, 147456, 294912, 2013265920))).clone(namedValues=NamedValues(("minimum", 0), ("negligible", 384), ("terrestrial", 9216), ("packet", 147456), ("long", 294912), ("maximum", 2013265920)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgDelay.setStatus('mandatory')
ibmappnNnTgModemClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgModemClass.setStatus('mandatory')
ibmappnNnTgUsr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgUsr1.setStatus('mandatory')
ibmappnNnTgUsr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgUsr2.setStatus('mandatory')
ibmappnNnTgUsr3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgUsr3.setStatus('mandatory')
ibmappnNnTopologyFRTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 3), )
if mibBuilder.loadTexts: ibmappnNnTopologyFRTable.setStatus('mandatory')
ibmappnNnTopologyFREntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 3, 1), ).setIndexNames((0, "IBM-6611-APPN-MIB", "ibmappnNnNodeFRFrsn"), (0, "IBM-6611-APPN-MIB", "ibmappnNnNodeFRName"))
if mibBuilder.loadTexts: ibmappnNnTopologyFREntry.setStatus('mandatory')
ibmappnNnNodeFRName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeFRName.setStatus('mandatory')
ibmappnNnNodeFRFrsn = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeFRFrsn.setStatus('mandatory')
ibmappnNnNodeFREntryTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeFREntryTimeLeft.setStatus('mandatory')
ibmappnNnNodeFRType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("networknode", 1), ("virtualnode", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeFRType.setStatus('mandatory')
ibmappnNnNodeFRRsn = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeFRRsn.setStatus('mandatory')
ibmappnNnNodeFRRouteAddResist = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeFRRouteAddResist.setStatus('mandatory')
ibmappnNnNodeFRCongested = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeFRCongested.setStatus('mandatory')
ibmappnNnNodeFRIsrDepleted = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeFRIsrDepleted.setStatus('mandatory')
ibmappnNnNodeFREndptDepleted = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeFREndptDepleted.setStatus('mandatory')
ibmappnNnNodeFRQuiescing = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeFRQuiescing.setStatus('mandatory')
ibmappnNnNodeFRGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeFRGateway.setStatus('mandatory')
ibmappnNnNodeFRCentralDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeFRCentralDirectory.setStatus('mandatory')
ibmappnNnNodeFRIsr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeFRIsr.setStatus('mandatory')
ibmappnNnNodeFRChainSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnNodeFRChainSupport.setStatus('mandatory')
ibmappnNnTgTopologyFRTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 4), )
if mibBuilder.loadTexts: ibmappnNnTgTopologyFRTable.setStatus('mandatory')
ibmappnNnTgTopologyFREntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 4, 1), ).setIndexNames((0, "IBM-6611-APPN-MIB", "ibmappnNnTgFRFrsn"), (0, "IBM-6611-APPN-MIB", "ibmappnNnTgFROwner"), (0, "IBM-6611-APPN-MIB", "ibmappnNnTgFRDest"), (0, "IBM-6611-APPN-MIB", "ibmappnNnTgFRNum"))
if mibBuilder.loadTexts: ibmappnNnTgTopologyFREntry.setStatus('mandatory')
ibmappnNnTgFROwner = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgFROwner.setStatus('mandatory')
ibmappnNnTgFRDest = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgFRDest.setStatus('mandatory')
ibmappnNnTgFRNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgFRNum.setStatus('mandatory')
ibmappnNnTgFRFrsn = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgFRFrsn.setStatus('mandatory')
ibmappnNnTgFREntryTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgFREntryTimeLeft.setStatus('mandatory')
ibmappnNnTgFRDestVirtual = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgFRDestVirtual.setStatus('mandatory')
ibmappnNnTgFRDlcData = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 4, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgFRDlcData.setStatus('mandatory')
ibmappnNnTgFRRsn = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgFRRsn.setStatus('mandatory')
ibmappnNnTgFROperational = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgFROperational.setStatus('mandatory')
ibmappnNnTgFRQuiescing = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgFRQuiescing.setStatus('mandatory')
ibmappnNnTgFRCpCpSession = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgFRCpCpSession.setStatus('mandatory')
ibmappnNnTgFREffCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgFREffCap.setStatus('mandatory')
ibmappnNnTgFRConnCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgFRConnCost.setStatus('mandatory')
ibmappnNnTgFRByteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgFRByteCost.setStatus('mandatory')
ibmappnNnTgFRSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 32, 64, 96, 128, 160, 192))).clone(namedValues=NamedValues(("nonsecure", 1), ("publicSwitchedNetwork", 32), ("undergroundCable", 64), ("secureConduit", 96), ("guardedConduit", 128), ("encrypted", 160), ("guardedRadiation", 192)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgFRSecurity.setStatus('mandatory')
ibmappnNnTgFRDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 384, 9216, 147456, 294912, 2013265920))).clone(namedValues=NamedValues(("minimum", 0), ("negligible", 384), ("terrestrial", 9216), ("packet", 147456), ("long", 294912), ("maximum", 2013265920)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgFRDelay.setStatus('mandatory')
ibmappnNnTgFRModemClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgFRModemClass.setStatus('mandatory')
ibmappnNnTgFRUsr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgFRUsr1.setStatus('mandatory')
ibmappnNnTgFRUsr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 4, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgFRUsr2.setStatus('mandatory')
ibmappnNnTgFRUsr3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 2, 3, 4, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnNnTgFRUsr3.setStatus('mandatory')
ibmappnLocalTopology = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3))
ibmappnLocalThisNode = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1))
ibmappnLocalGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 1))
ibmappnLocalNnSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 2))
ibmappnLocalTg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 3))
ibmappnLocalEnTopology = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2))
ibmappnLocalNodeName = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalNodeName.setStatus('mandatory')
ibmappnLocalNodeType = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("networknode", 1), ("endnode", 2), ("len", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalNodeType.setStatus('mandatory')
ibmappnLocalNnRsn = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalNnRsn.setStatus('mandatory')
ibmappnLocalNnRouteAddResist = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalNnRouteAddResist.setStatus('mandatory')
ibmappnLocalNnCongested = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalNnCongested.setStatus('mandatory')
ibmappnLocalNnIsrDepleted = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalNnIsrDepleted.setStatus('mandatory')
ibmappnLocalNnEndptDepleted = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalNnEndptDepleted.setStatus('mandatory')
ibmappnLocalNnQuiescing = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalNnQuiescing.setStatus('mandatory')
ibmappnLocalNnGateway = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalNnGateway.setStatus('mandatory')
ibmappnLocalNnCentralDirectory = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalNnCentralDirectory.setStatus('mandatory')
ibmappnLocalNnIsr = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalNnIsr.setStatus('mandatory')
ibmappnLocalNnChainSupport = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalNnChainSupport.setStatus('mandatory')
ibmappnLocalNnFrsn = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalNnFrsn.setStatus('mandatory')
ibmappnLocalTgTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 3, 1), )
if mibBuilder.loadTexts: ibmappnLocalTgTable.setStatus('mandatory')
ibmappnLocalTgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 3, 1, 1), ).setIndexNames((0, "IBM-6611-APPN-MIB", "ibmappnLocalTgDest"), (0, "IBM-6611-APPN-MIB", "ibmappnLocalTgNum"))
if mibBuilder.loadTexts: ibmappnLocalTgEntry.setStatus('mandatory')
ibmappnLocalTgDest = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalTgDest.setStatus('mandatory')
ibmappnLocalTgNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalTgNum.setStatus('mandatory')
ibmappnLocalTgDestVirtual = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalTgDestVirtual.setStatus('mandatory')
ibmappnLocalTgDlcData = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 3, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalTgDlcData.setStatus('mandatory')
ibmappnLocalTgRsn = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalTgRsn.setStatus('mandatory')
ibmappnLocalTgQuiescing = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalTgQuiescing.setStatus('mandatory')
ibmappnLocalTgOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalTgOperational.setStatus('mandatory')
ibmappnLocalTgCpCpSession = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalTgCpCpSession.setStatus('mandatory')
ibmappnLocalTgEffCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalTgEffCap.setStatus('mandatory')
ibmappnLocalTgConnCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalTgConnCost.setStatus('mandatory')
ibmappnLocalTgByteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalTgByteCost.setStatus('mandatory')
ibmappnLocalTgSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 32, 64, 96, 128, 160, 192))).clone(namedValues=NamedValues(("nonsecure", 1), ("publicSwitchedNetwork", 32), ("undergroundCable", 64), ("secureConduit", 96), ("guardedConduit", 128), ("encrypted", 160), ("guardedRadiation", 192)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalTgSecurity.setStatus('mandatory')
ibmappnLocalTgDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 384, 9216, 147456, 294912, 2013265920))).clone(namedValues=NamedValues(("minimum", 0), ("negligible", 384), ("terrestrial", 9216), ("packet", 147456), ("long", 294912), ("maximum", 2013265920)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalTgDelay.setStatus('mandatory')
ibmappnLocalTgModemClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 3, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalTgModemClass.setStatus('mandatory')
ibmappnLocalTgUsr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalTgUsr1.setStatus('mandatory')
ibmappnLocalTgUsr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalTgUsr2.setStatus('mandatory')
ibmappnLocalTgUsr3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 1, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalTgUsr3.setStatus('mandatory')
ibmappnLocalEnTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 1), )
if mibBuilder.loadTexts: ibmappnLocalEnTable.setStatus('mandatory')
ibmappnLocalEnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 1, 1), ).setIndexNames((0, "IBM-6611-APPN-MIB", "ibmappnLocalEnName"))
if mibBuilder.loadTexts: ibmappnLocalEnEntry.setStatus('mandatory')
ibmappnLocalEnName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalEnName.setStatus('mandatory')
ibmappnLocalEnEntryTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalEnEntryTimeLeft.setStatus('mandatory')
ibmappnLocalEnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4))).clone(namedValues=NamedValues(("endnode", 2), ("len", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalEnType.setStatus('mandatory')
ibmappnLocalEnTgTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 2), )
if mibBuilder.loadTexts: ibmappnLocalEnTgTable.setStatus('mandatory')
ibmappnLocalEnTgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 2, 1), ).setIndexNames((0, "IBM-6611-APPN-MIB", "ibmappnLocalEnTgOrigin"), (0, "IBM-6611-APPN-MIB", "ibmappnLocalEnTgDest"), (0, "IBM-6611-APPN-MIB", "ibmappnLocalEnTgNum"))
if mibBuilder.loadTexts: ibmappnLocalEnTgEntry.setStatus('mandatory')
ibmappnLocalEnTgOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalEnTgOrigin.setStatus('mandatory')
ibmappnLocalEnTgDest = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalEnTgDest.setStatus('mandatory')
ibmappnLocalEnTgNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalEnTgNum.setStatus('mandatory')
ibmappnLocalEnTgEntryTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalEnTgEntryTimeLeft.setStatus('mandatory')
ibmappnLocalEnTgDestVirtual = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalEnTgDestVirtual.setStatus('mandatory')
ibmappnLocalEnTgDlcData = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalEnTgDlcData.setStatus('mandatory')
ibmappnLocalEnTgOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalEnTgOperational.setStatus('mandatory')
ibmappnLocalEnTgCpCpSession = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalEnTgCpCpSession.setStatus('mandatory')
ibmappnLocalEnTgEffCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalEnTgEffCap.setStatus('mandatory')
ibmappnLocalEnTgConnCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalEnTgConnCost.setStatus('mandatory')
ibmappnLocalEnTgByteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalEnTgByteCost.setStatus('mandatory')
ibmappnLocalEnTgSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 32, 64, 96, 128, 160, 192))).clone(namedValues=NamedValues(("nonsecure", 1), ("publicSwitchedNetwork", 32), ("undergroundCable", 64), ("secureConduit", 96), ("guardedConduit", 128), ("encrypted", 160), ("guardedRadiation", 192)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalEnTgSecurity.setStatus('mandatory')
ibmappnLocalEnTgDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 384, 9216, 147456, 294912, 2013265920))).clone(namedValues=NamedValues(("minimum", 0), ("negligible", 384), ("terrestrial", 9216), ("packet", 147456), ("long", 294912), ("maximum", 2013265920)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalEnTgDelay.setStatus('mandatory')
ibmappnLocalEnTgModemClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalEnTgModemClass.setStatus('mandatory')
ibmappnLocalEnTgUsr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalEnTgUsr1.setStatus('mandatory')
ibmappnLocalEnTgUsr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalEnTgUsr2.setStatus('mandatory')
ibmappnLocalEnTgUsr3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 3, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnLocalEnTgUsr3.setStatus('mandatory')
ibmappnDir = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 5))
ibmappnDirPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 5, 1))
ibmappnDirMaxCaches = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnDirMaxCaches.setStatus('mandatory')
ibmappnDirCurCaches = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 5, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnDirCurCaches.setStatus('mandatory')
ibmappnDirCurHomeEntries = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 5, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnDirCurHomeEntries.setStatus('mandatory')
ibmappnDirRegEntries = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 5, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnDirRegEntries.setStatus('mandatory')
ibmappnDirInLocates = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnDirInLocates.setStatus('mandatory')
ibmappnDirInBcastLocates = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnDirInBcastLocates.setStatus('mandatory')
ibmappnDirOutLocates = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnDirOutLocates.setStatus('mandatory')
ibmappnDirOutBcastLocates = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnDirOutBcastLocates.setStatus('mandatory')
ibmappnDirNotFoundLocates = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnDirNotFoundLocates.setStatus('mandatory')
ibmappnDirNotFoundBcastLocates = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnDirNotFoundBcastLocates.setStatus('mandatory')
ibmappnDirLocateOutstands = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 5, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnDirLocateOutstands.setStatus('mandatory')
ibmappnDirTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 5, 2), )
if mibBuilder.loadTexts: ibmappnDirTable.setStatus('mandatory')
ibmappnDirEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 5, 2, 1), ).setIndexNames((0, "IBM-6611-APPN-MIB", "ibmappnDirLuName"))
if mibBuilder.loadTexts: ibmappnDirEntry.setStatus('mandatory')
ibmappnDirLuName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 5, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnDirLuName.setStatus('mandatory')
ibmappnDirServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 5, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnDirServerName.setStatus('mandatory')
ibmappnDirLuOwnerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 5, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnDirLuOwnerName.setStatus('mandatory')
ibmappnDirLuLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("local", 1), ("domain", 2), ("xdomain", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnDirLuLocation.setStatus('mandatory')
ibmappnDirType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("home", 1), ("cache", 2), ("registered", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnDirType.setStatus('mandatory')
ibmappnDirWildCard = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("explicit-entry", 2), ("partial-wildcard", 3), ("full-wildcard", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnDirWildCard.setStatus('mandatory')
ibmappnCos = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6))
ibmappnCosModeTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 1), )
if mibBuilder.loadTexts: ibmappnCosModeTable.setStatus('mandatory')
ibmappnCosModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 1, 1), ).setIndexNames((0, "IBM-6611-APPN-MIB", "ibmappnCosModeName"))
if mibBuilder.loadTexts: ibmappnCosModeEntry.setStatus('mandatory')
ibmappnCosModeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosModeName.setStatus('mandatory')
ibmappnCosModeCosName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosModeCosName.setStatus('mandatory')
ibmappnCosNameTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 2), )
if mibBuilder.loadTexts: ibmappnCosNameTable.setStatus('mandatory')
ibmappnCosNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 2, 1), ).setIndexNames((0, "IBM-6611-APPN-MIB", "ibmappnCosName"))
if mibBuilder.loadTexts: ibmappnCosNameEntry.setStatus('mandatory')
ibmappnCosName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosName.setStatus('mandatory')
ibmappnCosTransPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("high", 3), ("network", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosTransPriority.setStatus('mandatory')
ibmappnCosNodeRowTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 3), )
if mibBuilder.loadTexts: ibmappnCosNodeRowTable.setStatus('mandatory')
ibmappnCosNodeRowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 3, 1), ).setIndexNames((0, "IBM-6611-APPN-MIB", "ibmappnCosNodeRowName"), (0, "IBM-6611-APPN-MIB", "ibmappnCosNodeRowIndex"))
if mibBuilder.loadTexts: ibmappnCosNodeRowEntry.setStatus('mandatory')
ibmappnCosNodeRowName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosNodeRowName.setStatus('mandatory')
ibmappnCosNodeRowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosNodeRowIndex.setStatus('mandatory')
ibmappnCosNodeRowWgt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosNodeRowWgt.setStatus('mandatory')
ibmappnCosNodeRowResistMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosNodeRowResistMin.setStatus('mandatory')
ibmappnCosNodeRowResistMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosNodeRowResistMax.setStatus('mandatory')
ibmappnCosNodeRowMinCongestAllow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosNodeRowMinCongestAllow.setStatus('mandatory')
ibmappnCosNodeRowMaxCongestAllow = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosNodeRowMaxCongestAllow.setStatus('mandatory')
ibmappnCosTgRowTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 4), )
if mibBuilder.loadTexts: ibmappnCosTgRowTable.setStatus('mandatory')
ibmappnCosTgRowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 4, 1), ).setIndexNames((0, "IBM-6611-APPN-MIB", "ibmappnCosTgRowName"), (0, "IBM-6611-APPN-MIB", "ibmappnCosTgRowIndex"))
if mibBuilder.loadTexts: ibmappnCosTgRowEntry.setStatus('mandatory')
ibmappnCosTgRowName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosTgRowName.setStatus('mandatory')
ibmappnCosTgRowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosTgRowIndex.setStatus('mandatory')
ibmappnCosTgRowWgt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosTgRowWgt.setStatus('mandatory')
ibmappnCosTgRowEffCapMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosTgRowEffCapMin.setStatus('mandatory')
ibmappnCosTgRowEffCapMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosTgRowEffCapMax.setStatus('mandatory')
ibmappnCosTgRowConnCostMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosTgRowConnCostMin.setStatus('mandatory')
ibmappnCosTgRowConnCostMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosTgRowConnCostMax.setStatus('mandatory')
ibmappnCosTgRowByteCostMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosTgRowByteCostMin.setStatus('mandatory')
ibmappnCosTgRowByteCostMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosTgRowByteCostMax.setStatus('mandatory')
ibmappnCosTgRowSecurityMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 32, 64, 96, 128, 160, 192))).clone(namedValues=NamedValues(("nonsecure", 1), ("publicSwitchedNetwork", 32), ("undergroundCable", 64), ("secureConduit", 96), ("guardedConduit", 128), ("encrypted", 160), ("guardedRadiation", 192)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosTgRowSecurityMin.setStatus('mandatory')
ibmappnCosTgRowSecurityMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 32, 64, 96, 128, 160, 192))).clone(namedValues=NamedValues(("nonsecure", 1), ("publicSwitchedNetwork", 32), ("undergroundCable", 64), ("secureConduit", 96), ("guardedConduit", 128), ("encrypted", 160), ("guardedRadiation", 192)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosTgRowSecurityMax.setStatus('mandatory')
ibmappnCosTgRowDelayMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 384, 9216, 147456, 294912, 2013265920))).clone(namedValues=NamedValues(("minimum", 0), ("negligible", 384), ("terrestrial", 9216), ("packet", 147456), ("long", 294912), ("maximum", 2013265920)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosTgRowDelayMin.setStatus('mandatory')
ibmappnCosTgRowDelayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 384, 9216, 147456, 294912, 2013265920))).clone(namedValues=NamedValues(("minimum", 0), ("negligible", 384), ("terrestrial", 9216), ("packet", 147456), ("long", 294912), ("maximum", 2013265920)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosTgRowDelayMax.setStatus('mandatory')
ibmappnCosTgRowUsr1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosTgRowUsr1Min.setStatus('mandatory')
ibmappnCosTgRowUsr1Max = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosTgRowUsr1Max.setStatus('mandatory')
ibmappnCosTgRowUsr2Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosTgRowUsr2Min.setStatus('mandatory')
ibmappnCosTgRowUsr2Max = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosTgRowUsr2Max.setStatus('mandatory')
ibmappnCosTgRowUsr3Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosTgRowUsr3Min.setStatus('mandatory')
ibmappnCosTgRowUsr3Max = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 2, 13, 6, 4, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmappnCosTgRowUsr3Max.setStatus('mandatory')
mibBuilder.exportSymbols("IBM-6611-APPN-MIB", ibmappnLocalTgDestVirtual=ibmappnLocalTgDestVirtual, ibmappnNodeLsDlsEntry=ibmappnNodeLsDlsEntry, ibmappnNodeLsDynamic=ibmappnNodeLsDynamic, ibmappnCosTgRowSecurityMax=ibmappnCosTgRowSecurityMax, ibmappnNodeLsEchoRsps=ibmappnNodeLsEchoRsps, ibmappnNodeLsMaxSendBtuSize=ibmappnNodeLsMaxSendBtuSize, ibmappnNnTopoTgPurges=ibmappnNnTopoTgPurges, ibmappnNnTgTopologyEntry=ibmappnNnTgTopologyEntry, ibmappnLocalTgByteCost=ibmappnLocalTgByteCost, ibmappnNodePortDlcTraceEntry=ibmappnNodePortDlcTraceEntry, ibmappnNodePortSpecific=ibmappnNodePortSpecific, ibmappnNnTgDestVirtual=ibmappnNnTgDestVirtual, ibmappnNodeLsIpState=ibmappnNodeLsIpState, ibmappnNodeLsTrName=ibmappnNodeLsTrName, ibmappnNodePortDynLsGoodXids=ibmappnNodePortDynLsGoodXids, ibmappnNnTopoRouteTrees=ibmappnNnTopoRouteTrees, ibmappnNodeLsStatusNofRetry=ibmappnNodeLsStatusNofRetry, ibmappnNodeDynLsBadXids=ibmappnNodeDynLsBadXids, ibmappnCosNameEntry=ibmappnCosNameEntry, ibmappnNnTgDelay=ibmappnNnTgDelay, ibmappnNnNodeChainSupport=ibmappnNnNodeChainSupport, ibmappnLinkStationInformation=ibmappnLinkStationInformation, ibmappnNnTgFROperational=ibmappnNnTgFROperational, ibmappnNodePortMaxRcvBtuSize=ibmappnNodePortMaxRcvBtuSize, ibmappnCosTgRowEntry=ibmappnCosTgRowEntry, ibmappnDirInBcastLocates=ibmappnDirInBcastLocates, ibmappnMemorySize=ibmappnMemorySize, ibmappnNodeLsTrEntry=ibmappnNodeLsTrEntry, ibmappnNnTopologyEntry=ibmappnNnTopologyEntry, ibmappnNodePortDlsEntry=ibmappnNodePortDlsEntry, ibmappnNodeLsStatusGeneralSense=ibmappnNodeLsStatusGeneralSense, ibmappnLocalTgUsr3=ibmappnLocalTgUsr3, ibmappnNnTgEntryTimeLeft=ibmappnNnTgEntryTimeLeft, ibmappnSnmpInGetNexts=ibmappnSnmpInGetNexts, ibmappnNnTgTopologyFRTable=ibmappnNnTgTopologyFRTable, ibmappnLocalNnGateway=ibmappnLocalNnGateway, ibmappnNodePortTrSap=ibmappnNodePortTrSap, ibmappnNnNodeFREndptDepleted=ibmappnNnNodeFREndptDepleted, ibmappnNodeLsGoodXids=ibmappnNodeLsGoodXids, ibmappnDirServerName=ibmappnDirServerName, ibmappnNnNodeEndptDepleted=ibmappnNnNodeEndptDepleted, ibmappnNodeLsConnCost=ibmappnNodeLsConnCost, ibmappnNodeLsInMsgFrames=ibmappnNodeLsInMsgFrames, ibmappnNodeIdNum=ibmappnNodeIdNum, ibmappnNnTgFrsn=ibmappnNnTgFrsn, ibmappnNodeNnRcvRegChar=ibmappnNodeNnRcvRegChar, ibmappnCosTgRowByteCostMin=ibmappnCosTgRowByteCostMin, ibmappnNodePortDlcTracUseWan=ibmappnNodePortDlcTracUseWan, ibmappnNnNodeFRName=ibmappnNnNodeFRName, ibmappnNnTopoMaxNodes=ibmappnNnTopoMaxNodes, ibmappnNodePortTrMac=ibmappnNodePortTrMac, ibmappnNodePortDlsTable=ibmappnNodePortDlsTable, ibmappnNodeLsOutMsgFrames=ibmappnNodeLsOutMsgFrames, ibmappnNodeLsOutXidBytes=ibmappnNodeLsOutXidBytes, ibmappnNnTopoRouteRejs=ibmappnNnTopoRouteRejs, ibmappnNodeLsIdNum=ibmappnNodeLsIdNum, ibmappnNodeLsDlsName=ibmappnNodeLsDlsName, ibmappnCosTgRowByteCostMax=ibmappnCosTgRowByteCostMax, ibmappnCosTgRowUsr3Min=ibmappnCosTgRowUsr3Min, ibmappnNnTopoCurNumNodes=ibmappnNnTopoCurNumNodes, ibmappnNnTgSecurity=ibmappnNnTgSecurity, ibmappnNodeLsByteCost=ibmappnNodeLsByteCost, ibmappnNodeEnModeCosMap=ibmappnNodeEnModeCosMap, ibmappnNodeLsStatusIndex=ibmappnNodeLsStatusIndex, ibmappnLocalNodeName=ibmappnLocalNodeName, ibmappnLocalEnTgOperational=ibmappnLocalEnTgOperational, ibmappnNnTopologyFREntry=ibmappnNnTopologyFREntry, ibmappnNnAdjNodeTable=ibmappnNnAdjNodeTable, ibmappnNodeLsOutXidFrames=ibmappnNodeLsOutXidFrames, ibmProd=ibmProd, ibmappnNodeLsTrState=ibmappnNodeLsTrState, ibmappnNnTgDest=ibmappnNnTgDest, ibmappnNnTopoNodePurges=ibmappnNnTopoNodePurges, ibmappnNnTgFRByteCost=ibmappnNnTgFRByteCost, ibmappnGeneralInfoAndCaps=ibmappnGeneralInfoAndCaps, ibmappnLocalEnTgUsr3=ibmappnLocalEnTgUsr3, ibmappnNnTgFRNum=ibmappnNnTgFRNum, ibmappnNnTopoInTdus=ibmappnNnTopoInTdus, ibmappnNnTopoNodeTimerUpdates=ibmappnNnTopoNodeTimerUpdates, ibmappnNodeNnIsr=ibmappnNodeNnIsr, ibmappnNodeEnSendRegChar=ibmappnNodeEnSendRegChar, ibmappnNnNodeCentralDirectory=ibmappnNnNodeCentralDirectory, ibmappnNodeNnFrsn=ibmappnNodeNnFrsn, ibmappnNodePortLsRole=ibmappnNodePortLsRole, ibmappnNodePortDefLsGoodXids=ibmappnNodePortDefLsGoodXids, ibmappnNnTgOperational=ibmappnNnTgOperational, ibmappnNnTgUsr2=ibmappnNnTgUsr2, ibmappnCosNodeRowResistMax=ibmappnCosNodeRowResistMax, ibmappnNnTgModemClass=ibmappnNnTgModemClass, ibmappnNodeLsMaxDelayTime=ibmappnNodeLsMaxDelayTime, ibmappnNodeLsName=ibmappnNodeLsName, ibmappnLocalNnQuiescing=ibmappnLocalNnQuiescing, ibmappnSnmpOutGenErrs=ibmappnSnmpOutGenErrs, ibmappnNnTgFRCpCpSession=ibmappnNnTgFRCpCpSession, ibmappnLocalEnTable=ibmappnLocalEnTable, ibmappnDirLuLocation=ibmappnDirLuLocation, ibmappnNnTgFRDelay=ibmappnNnTgFRDelay, ibmappnNnNodeFrsn=ibmappnNnNodeFrsn, ibmappnNodeCpName=ibmappnNodeCpName, ibmappnLocalNnIsr=ibmappnLocalNnIsr, ibmappnNodeAdaptiveBindPacing=ibmappnNodeAdaptiveBindPacing, ibmappnNnNodeFRGateway=ibmappnNnNodeFRGateway, ibmappnNnTgFRUsr1=ibmappnNnTgFRUsr1, ibmappnNnTopoTgGoodHighRsns=ibmappnNnTopoTgGoodHighRsns, ibmappnNodePortTrTable=ibmappnNodePortTrTable, ibmappnNodeLsDlsState=ibmappnNodeLsDlsState, ibmappnNodePortMaxIframeWindow=ibmappnNodePortMaxIframeWindow, ibmappnNodePortDlcTracDlcType=ibmappnNodePortDlcTracDlcType, ibmappnLocalEnTgUsr1=ibmappnLocalEnTgUsr1, ibmappnNnTgFRQuiescing=ibmappnNnTgFRQuiescing, ibmappnLocalNnRouteAddResist=ibmappnLocalNnRouteAddResist, ibmappnNnTgConnCost=ibmappnNnTgConnCost, ibmappnDirLocateOutstands=ibmappnDirLocateOutstands, ibmappnNodeLsRemoteIpPortNum=ibmappnNodeLsRemoteIpPortNum, ibmappnNodeLsStatusXidRemoteSense=ibmappnNodeLsStatusXidRemoteSense, ibmappnNodeDynLsGoodXids=ibmappnNodeDynLsGoodXids, ibmappnXidInformation=ibmappnXidInformation, ibmappnNnNodeFRIsr=ibmappnNnNodeFRIsr, ibmappnLocalNnIsrDepleted=ibmappnLocalNnIsrDepleted, ibmappnLocalEnTgNum=ibmappnLocalEnTgNum, ibmappnNodeLsSubState=ibmappnNodeLsSubState, ibmappnNodeLsStatusTgNum=ibmappnNodeLsStatusTgNum, ibmappnNodeLsStatusLsName=ibmappnNodeLsStatusLsName, ibmappnNodeLsStatusDlcType=ibmappnNodeLsStatusDlcType, ibmappnCosModeTable=ibmappnCosModeTable, ibmappnCosName=ibmappnCosName, ibmappnNnTopoTgBadHighRsns=ibmappnNnTopoTgBadHighRsns, ibmappnLocalTgDest=ibmappnLocalTgDest, ibmappnLocalEnTgOrigin=ibmappnLocalEnTgOrigin, ibmappnCosNodeRowMaxCongestAllow=ibmappnCosNodeRowMaxCongestAllow, ibmappnNodePortDefLsBadXids=ibmappnNodePortDefLsBadXids, ibmappnNnAdjNodeLastFrsnRcvd=ibmappnNnAdjNodeLastFrsnRcvd, ibmappnNodeLsUsr3=ibmappnNodeLsUsr3, ibmappnNodeEnLocateCdinit=ibmappnNodeEnLocateCdinit, ibmappnNnTgUsr1=ibmappnNnTgUsr1, ibmappnNodeLsStatusNodeId=ibmappnNodeLsStatusNodeId, ibmappnSnmpInSetRequests=ibmappnSnmpInSetRequests, ibmappnNnTopoRouteCos=ibmappnNnTopoRouteCos, ibmappnLocalTgTable=ibmappnLocalTgTable, ibmappnNodeType=ibmappnNodeType, ibm=ibm, ibmappnNnNodeIsrDepleted=ibmappnNnNodeIsrDepleted, ibmappnLocalThisNode=ibmappnLocalThisNode, ibmappnLocalTgQuiescing=ibmappnLocalTgQuiescing, ibmappnNnTopoTgEqualRsns=ibmappnNnTopoTgEqualRsns, ibmappnCosModeEntry=ibmappnCosModeEntry, ibmappnNodeLsSpecific=ibmappnNodeLsSpecific, ibmappnNnTopoNodeStateUpdates=ibmappnNnTopoNodeStateUpdates, ibmappnNnNodeCongested=ibmappnNnNodeCongested, ibmappnCosTgRowEffCapMin=ibmappnCosTgRowEffCapMin, ibmappnNodeLsStatusLocalAddr=ibmappnNodeLsStatusLocalAddr, ibmappnNnNodeFRRouteAddResist=ibmappnNnNodeFRRouteAddResist, ibmappnLocalTgConnCost=ibmappnLocalTgConnCost, ibmappnNodeLsUsr1=ibmappnNodeLsUsr1, ibmappnNodePortDlcTraceTable=ibmappnNodePortDlcTraceTable, ibmappnNnNodeRsn=ibmappnNnNodeRsn, ibmappnNnTopoNodeGoodHighRsns=ibmappnNnTopoNodeGoodHighRsns, ibmappnNnNodeFRCongested=ibmappnNnNodeFRCongested, ibmappnNn=ibmappnNn, ibmappnNodeLsStatusRemoteAddr=ibmappnNodeLsStatusRemoteAddr, ibmappnNnNodeFRFrsn=ibmappnNnNodeFRFrsn, ibmappnLocalEnTgEntryTimeLeft=ibmappnLocalEnTgEntryTimeLeft, ibmappnNodeNnCentralDirectory=ibmappnNodeNnCentralDirectory, ibmappnNodeLsMigration=ibmappnNodeLsMigration, ibmappnCosTgRowUsr2Max=ibmappnCosTgRowUsr2Max, ibmappnNodeLsLimResource=ibmappnNodeLsLimResource, ibmappnNnNodeFRChainSupport=ibmappnNnNodeFRChainSupport, ibmappnNodeNegotLs=ibmappnNodeNegotLs, ibmappnNnTopologyTable=ibmappnNnTopologyTable, ibmappnNnTgFROwner=ibmappnNnTgFROwner, ibmappnNnNodeFREntryTimeLeft=ibmappnNnNodeFREntryTimeLeft, ibmappnSnmpInTotalVars=ibmappnSnmpInTotalVars, ibmappnNodeEnSendRegNames=ibmappnNodeEnSendRegNames, ibmappnNodeLsOutMsgBytes=ibmappnNodeLsOutMsgBytes, ibmappnNodePortDlcTracIndex=ibmappnNodePortDlcTracIndex, ibmappnNodeLsInXidFrames=ibmappnNodeLsInXidFrames, ibmappnNodeNnTreeCache=ibmappnNodeNnTreeCache, ibmappnLocalTgRsn=ibmappnLocalTgRsn, ibmappnSnmpInSetVars=ibmappnSnmpInSetVars, ibmappnNodePortPortType=ibmappnNodePortPortType, ibmappnLocalTg=ibmappnLocalTg, ibmappnLocalEnTgDelay=ibmappnLocalEnTgDelay, ibmappnLocalTgUsr1=ibmappnLocalTgUsr1, ibmappnNnNodeFRQuiescing=ibmappnNnNodeFRQuiescing, ibmappnCosTgRowUsr1Min=ibmappnCosTgRowUsr1Min, ibmappnLocalNnCentralDirectory=ibmappnLocalNnCentralDirectory, ibmappnLocalNnChainSupport=ibmappnLocalNnChainSupport, ibmappnCosTgRowDelayMin=ibmappnCosTgRowDelayMin, ibmappnNodeLsRemoteIpAddr=ibmappnNodeLsRemoteIpAddr, ibmappnLocalNnFrsn=ibmappnLocalNnFrsn, ibmappnNodePortName=ibmappnNodePortName, ibmappnDirEntry=ibmappnDirEntry, ibmappnNnTgFREntryTimeLeft=ibmappnNnTgFREntryTimeLeft, ibmappnNodePortDlsSap=ibmappnNodePortDlsSap, ibmappnDirInLocates=ibmappnDirInLocates, ibmappnLocalEnName=ibmappnLocalEnName, ibmappnNnTopoNodeLowRsns=ibmappnNnTopoNodeLowRsns, ibmappnNodeLsStatusXidLocalSense=ibmappnNodeLsStatusXidLocalSense, ibmappnCosModeName=ibmappnCosModeName, ibmappnNodePortEntry=ibmappnNodePortEntry, ibmappnNodePortDlcTracPortName=ibmappnNodePortDlcTracPortName, ibmappnLocalEnTgByteCost=ibmappnLocalEnTgByteCost, ibmappnNnAdjNodeLastFrsnSent=ibmappnNnAdjNodeLastFrsnSent, ibmappnNodeLsUsr2=ibmappnNodeLsUsr2, ibmappnMemoryWarnThresh=ibmappnMemoryWarnThresh, ibmappnCosNodeRowMinCongestAllow=ibmappnCosNodeRowMinCongestAllow, ibmappnCosNodeRowName=ibmappnCosNodeRowName, ibmappnNodeService=ibmappnNodeService, ibmappnNodeLsCpName=ibmappnNodeLsCpName, ibmappnDirNotFoundBcastLocates=ibmappnDirNotFoundBcastLocates, ibmappnDirNotFoundLocates=ibmappnDirNotFoundLocates, ibmappnNnTgFRDestVirtual=ibmappnNnTgFRDestVirtual, ibmappnLocalEnTgEntry=ibmappnLocalEnTgEntry, ibmappnMemoryCritThresh=ibmappnMemoryCritThresh, ibmappnEnUniqueCaps=ibmappnEnUniqueCaps, ibmappnNnTgUsr3=ibmappnNnTgUsr3, ibmappnNnNodeName=ibmappnNnNodeName, ibmappnNodeLsIpTable=ibmappnNodeLsIpTable, ibmappnNnNodeFRType=ibmappnNnNodeFRType, ibmappnNnTgEffCap=ibmappnNnTgEffCap, ibmappnNodePortIpEntry=ibmappnNodePortIpEntry, ibmappnLocalEnTgSecurity=ibmappnLocalEnTgSecurity, ibmappnLocalTopology=ibmappnLocalTopology, ibmappnDirMaxCaches=ibmappnDirMaxCaches, ibmappnCosTgRowSecurityMin=ibmappnCosTgRowSecurityMin, ibmappnNodeLsLocalTrMac=ibmappnNodeLsLocalTrMac, ibmappnNodeUpTime=ibmappnNodeUpTime, ibmappnNodeLsInXidBytes=ibmappnNodeLsInXidBytes, ibmappnNnTopoRouteTable=ibmappnNnTopoRouteTable, ibmappnLocalNodeType=ibmappnLocalNodeType, ibmappnNodeLsSecurity=ibmappnNodeLsSecurity, ibmappnNnTgFRModemClass=ibmappnNnTgFRModemClass, ibmappnNodePortIpName=ibmappnNodePortIpName, ibmappnNnTgNum=ibmappnNnTgNum, ibmappnNodePortDynLsBadXids=ibmappnNodePortDynLsBadXids, ibmappnCosNameTable=ibmappnCosNameTable, ibm6611=ibm6611, ibmappnNodeLsIpEntry=ibmappnNodeLsIpEntry, ibmappnCosTgRowUsr2Min=ibmappnCosTgRowUsr2Min, ibmappnNodePortDlcTracCmdType=ibmappnNodePortDlcTracCmdType, ibmappnLocalEnTgDestVirtual=ibmappnLocalEnTgDestVirtual, ibmappnNnNodeType=ibmappnNnNodeType, ibmappnNodeLsStatusTime=ibmappnNodeLsStatusTime, ibmappnNodeLsMinDelay=ibmappnNodeLsMinDelay, ibmappnCosTgRowConnCostMin=ibmappnCosTgRowConnCostMin, ibmappnLocalEnTgCpCpSession=ibmappnLocalEnTgCpCpSession, ibmappnNodeLsCurrentDelay=ibmappnNodeLsCurrentDelay, ibmappnDirWildCard=ibmappnDirWildCard, ibmappnNodePortTrName=ibmappnNodePortTrName, ibmappnDir=ibmappnDir, ibmappnNnTopoTgErrors=ibmappnNnTopoTgErrors, ibmappnLocalTgEntry=ibmappnLocalTgEntry, ibmappnNnTopoNodeErrors=ibmappnNnTopoNodeErrors, ibmappnLocalEnEntry=ibmappnLocalEnEntry)
mibBuilder.exportSymbols("IBM-6611-APPN-MIB", ibmappnNodeLsTrTable=ibmappnNodeLsTrTable, ibmappnNodeLsDlsTable=ibmappnNodeLsDlsTable, ibmappnSnmpInGetRequests=ibmappnSnmpInGetRequests, ibmappnNnNodeFRIsrDepleted=ibmappnNnNodeFRIsrDepleted, ibmappnCosTgRowDelayMax=ibmappnCosTgRowDelayMax, ibmappnLocalNnEndptDepleted=ibmappnLocalNnEndptDepleted, ibmappnNodeLsRemoteTrMac=ibmappnNodeLsRemoteTrMac, ibmappnNnNodeRouteAddResist=ibmappnNnNodeRouteAddResist, ibmappnNnNodeEntryTimeLeft=ibmappnNnNodeEntryTimeLeft, ibmappnNnTgFRConnCost=ibmappnNnTgFRConnCost, ibmappnNodePortSIMRIM=ibmappnNodePortSIMRIM, ibmappnLocalEnTgDest=ibmappnLocalEnTgDest, ibmappnNnTgFREffCap=ibmappnNnTgFREffCap, ibmappnLocalEnTgTable=ibmappnLocalEnTgTable, ibmappnNodeLsStartTime=ibmappnNodeLsStartTime, ibmappnCos=ibmappnCos, ibmappnNodeLsLocalTrSap=ibmappnNodeLsLocalTrSap, ibmappnDirRegEntries=ibmappnDirRegEntries, ibmappnLocalEnTgDlcData=ibmappnLocalEnTgDlcData, ibmappnNodeNnTreeUpdate=ibmappnNodeNnTreeUpdate, ibmappnNodePortDlcType=ibmappnNodePortDlcType, ibmappnNodeLsInMsgBytes=ibmappnNodeLsInMsgBytes, ibmappnNodeLsLocalDlsSap=ibmappnNodeLsLocalDlsSap, ibmappnNodeLsEffCap=ibmappnNodeLsEffCap, ibmappnNnTopoRouteCalcs=ibmappnNnTopoRouteCalcs, ibmappnCosNodeRowEntry=ibmappnCosNodeRowEntry, ibmappnDirOutLocates=ibmappnDirOutLocates, ibmappnDirOutBcastLocates=ibmappnDirOutBcastLocates, ibmappnNnTopoTotalRouteRejs=ibmappnNnTopoTotalRouteRejs, ibmappnCosNodeRowIndex=ibmappnCosNodeRowIndex, ibmappnNodeDefLsBadXids=ibmappnNodeDefLsBadXids, ibmappnNnTopoTgLowRsns=ibmappnNnTopoTgLowRsns, ibmappnCosTgRowConnCostMax=ibmappnCosTgRowConnCostMax, ibmappnSnmpOutNoSuchNames=ibmappnSnmpOutNoSuchNames, ibmappnNnTopoTgTimerUpdates=ibmappnNnTopoTgTimerUpdates, ibmappnNodeLsStatusCpName=ibmappnNodeLsStatusCpName, ibmappnLocalNnRsn=ibmappnLocalNnRsn, ibmappnNodeNnGateway=ibmappnNodeNnGateway, ibmappnCosNodeRowWgt=ibmappnCosNodeRowWgt, ibmappnCosTgRowWgt=ibmappnCosTgRowWgt, ibmappnNnTopology=ibmappnNnTopology, ibmappnNodeLsTable=ibmappnNodeLsTable, ibmappnNodeLsStatusXidBitInError=ibmappnNodeLsStatusXidBitInError, ibmappnNnTopo=ibmappnNnTopo, ibmappnNodePortState=ibmappnNodePortState, ibmappnNnNodeQuiescing=ibmappnNnNodeQuiescing, ibmappnNodeLsStatusEndSense=ibmappnNodeLsStatusEndSense, ibmappnNodeLsTgNum=ibmappnNodeLsTgNum, ibmappnNnTopoTotalRouteCalcs=ibmappnNnTopoTotalRouteCalcs, ibmappnDirLuName=ibmappnDirLuName, ibmappnNnTgRsn=ibmappnNnTgRsn, ibmappnLocalTgEffCap=ibmappnLocalTgEffCap, ibmappnSnmpInGetVars=ibmappnSnmpInGetVars, ibmappnLocalEnTopology=ibmappnLocalEnTopology, ibmappnSnmpInPkts=ibmappnSnmpInPkts, ibmappnNnTopologyFRTable=ibmappnNnTopologyFRTable, ibmappnNodePortIpTable=ibmappnNodePortIpTable, ibmappnNnTgCpCpSession=ibmappnNnTgCpCpSession, ibmappnNodeNnRouteAddResist=ibmappnNodeNnRouteAddResist, ibmappnDirTable=ibmappnDirTable, ibmappnNnNodeIsr=ibmappnNnNodeIsr, ibmappnLocalEnType=ibmappnLocalEnType, ibmappnNnTopoOutTdus=ibmappnNnTopoOutTdus, ibmappnNnTgOwner=ibmappnNnTgOwner, ibmappnNnAdjNodeCpCpSessStatus=ibmappnNnAdjNodeCpCpSessStatus, ibmappnCosTransPriority=ibmappnCosTransPriority, ibmappnNodeBlockNum=ibmappnNodeBlockNum, ibmappnNnAdjNodeAdjName=ibmappnNnAdjNodeAdjName, ibmappnNodeNetid=ibmappnNodeNetid, ibmappnPortInformation=ibmappnPortInformation, ibmappnLocalTgOperational=ibmappnLocalTgOperational, ibmappnNodeLsStatusTable=ibmappnNodeLsStatusTable, ibmappnNodeLsRemoteDlsMac=ibmappnNodeLsRemoteDlsMac, ibmappnNodeLsRemoteDlsSap=ibmappnNodeLsRemoteDlsSap, ibmappnLocalTgUsr2=ibmappnLocalTgUsr2, ibmappnSnmpInformation=ibmappnSnmpInformation, ibmappnNodeLsStatusEntry=ibmappnNodeLsStatusEntry, ibmappnNnTopoNodeEqualRsns=ibmappnNnTopoNodeEqualRsns, ibmappnLocalEnEntryTimeLeft=ibmappnLocalEnEntryTimeLeft, ibmappnCosTgRowUsr3Max=ibmappnCosTgRowUsr3Max, ibmappnNodePortDlsMac=ibmappnNodePortDlsMac, ibmappnNodeLsCurrentStateTime=ibmappnNodeLsCurrentStateTime, ibmappnLocalTgModemClass=ibmappnLocalTgModemClass, ibmappnLocalNnSpecific=ibmappnLocalNnSpecific, ibmappnDirCurCaches=ibmappnDirCurCaches, ibmappnLocalTgDelay=ibmappnLocalTgDelay, ibmappnCosNodeRowResistMin=ibmappnCosNodeRowResistMin, ibmappnLocalTgDlcData=ibmappnLocalTgDlcData, ibmappnSnmpInGetNextVars=ibmappnSnmpInGetNextVars, ibmappnMemoryUsed=ibmappnMemoryUsed, ibmappnNodeDefLsGoodXids=ibmappnNodeDefLsGoodXids, ibmappnDirPerf=ibmappnDirPerf, ibmappnNnTgQuiescing=ibmappnNnTgQuiescing, ibmappnNnTgFRRsn=ibmappnNnTgFRRsn, ibmappnCosNodeRowTable=ibmappnCosNodeRowTable, ibmappnNnTgFRSecurity=ibmappnNnTgFRSecurity, ibmappnNodePortTrEntry=ibmappnNodePortTrEntry, ibmappnCosModeCosName=ibmappnCosModeCosName, ibmappnNodePortDlcTracRemoteAddr=ibmappnNodePortDlcTracRemoteAddr, ibmappnNodeLsStatusXidByteInError=ibmappnNodeLsStatusXidByteInError, ibmappnNodeEnSegGen=ibmappnNodeEnSegGen, ibmappnNodeLsDlcType=ibmappnNodeLsDlcType, ibmappnLocalGeneral=ibmappnLocalGeneral, ibmappnNnTgTopologyFREntry=ibmappnNnTgTopologyFREntry, ibmappnNodeLsIpName=ibmappnNodeLsIpName, ibmappnNnTgFRUsr3=ibmappnNnTgFRUsr3, ibmappnLocalEnTgModemClass=ibmappnLocalEnTgModemClass, ibmappnNnTgFRDlcData=ibmappnNnTgFRDlcData, ibmappnCosTgRowName=ibmappnCosTgRowName, ibmappnNodeLsMaxDelay=ibmappnNodeLsMaxDelay, ibmappnNnNodeFRCentralDirectory=ibmappnNnNodeFRCentralDirectory, ibmappnCosTgRowTable=ibmappnCosTgRowTable, ibmappnNodeLsDelay=ibmappnNodeLsDelay, ibmappnNodeLsBadXids=ibmappnNodeLsBadXids, ibmappnNnNodeGateway=ibmappnNnNodeGateway, ibmappnNnUniqueInfoAndCaps=ibmappnNnUniqueInfoAndCaps, ibmappnNnTopoRouteEntry=ibmappnNnTopoRouteEntry, ibmappnNodeSegReasm=ibmappnNodeSegReasm, ibmappnLocalEnTgEffCap=ibmappnLocalEnTgEffCap, ibmappnNnTgDlcData=ibmappnNnTgDlcData, ibmappnNodePortIpPortNum=ibmappnNodePortIpPortNum, ibmappnNodeLsLocalDlsMac=ibmappnNodeLsLocalDlsMac, ibmappnNodePortDlcTracLocalAddr=ibmappnNodePortDlcTracLocalAddr, ibmappnNnTgTopologyTable=ibmappnNnTgTopologyTable, ibmappnDirCurHomeEntries=ibmappnDirCurHomeEntries, ibmappnNnTgFRDest=ibmappnNnTgFRDest, ibmappnNode=ibmappnNode, ibmappnMemoryUse=ibmappnMemoryUse, ibmappnNodeLsTargetPacingCount=ibmappnNodeLsTargetPacingCount, ibmappn=ibmappn, ibmappnDirType=ibmappnDirType, ibmappnLocalEnTgUsr2=ibmappnLocalEnTgUsr2, ibmappnNnTopoNodeBadHighRsns=ibmappnNnTopoNodeBadHighRsns, ibmappnNodeLsActiveTime=ibmappnNodeLsActiveTime, ibmappnNodeParallelTg=ibmappnNodeParallelTg, ibmappnNodePortDlcTracMsgType=ibmappnNodePortDlcTracMsgType, ibmappnCosTgRowIndex=ibmappnCosTgRowIndex, ibmappnNodeLsLocalIpPortNum=ibmappnNodeLsLocalIpPortNum, ibmappnCosTgRowUsr1Max=ibmappnCosTgRowUsr1Max, ibmappnNodeBindReasm=ibmappnNodeBindReasm, ibmappnNodePortTable=ibmappnNodePortTable, ibmappnNnAdjNodeOutOfSeqTdus=ibmappnNnAdjNodeOutOfSeqTdus, ibmappnNodeLsCpCpSession=ibmappnNodeLsCpCpSession, ibmappnLocalTgSecurity=ibmappnLocalTgSecurity, ibmappnLocalEnTgConnCost=ibmappnLocalEnTgConnCost, ibmappnNnTopoTgStateUpdates=ibmappnNnTopoTgStateUpdates, ibmappnNodeLsPortName=ibmappnNodeLsPortName, ibmappnNodePortDlsName=ibmappnNodePortDlsName, ibmappnNnTgFRUsr2=ibmappnNnTgFRUsr2, ibmappnNodeLsState=ibmappnNodeLsState, ibmappnLocalTgNum=ibmappnLocalTgNum, ibmappnNodeLsRemoteTrSap=ibmappnNodeLsRemoteTrSap, ibmappnNnTgFRFrsn=ibmappnNnTgFRFrsn, ibmappnCosTgRowEffCapMax=ibmappnCosTgRowEffCapMax, ibmappnLocalTgCpCpSession=ibmappnLocalTgCpCpSession, ibmappnNnAdjNodeEntry=ibmappnNnAdjNodeEntry, ibmappnNodeLsLocalIpAddr=ibmappnNodeLsLocalIpAddr, ibmappnNnTgByteCost=ibmappnNnTgByteCost, ibmappnNodeLsBlockNum=ibmappnNodeLsBlockNum, ibmappnNnNodeFRRsn=ibmappnNnNodeFRRsn, ibmappnDirLuOwnerName=ibmappnDirLuOwnerName, ibmappnNodeLsEntry=ibmappnNodeLsEntry, ibmappnLocalNnCongested=ibmappnLocalNnCongested)
