#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-LaneClientMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-LaneClientMIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:21:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
InterfaceIndex, Unsigned32, Counter32, StorageType, RowStatus, Integer32, MacAddress, DisplayString, RowPointer = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "InterfaceIndex", "Unsigned32", "Counter32", "StorageType", "RowStatus", "Integer32", "MacAddress", "DisplayString", "RowPointer")
NonReplicated, DashedHexString, AsciiString, Link, HexString = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TextualConventionsMIB", "NonReplicated", "DashedHexString", "AsciiString", "Link", "HexString")
mscComponents, mscPassportMIBs = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscComponents", "mscPassportMIBs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Counter32, MibIdentifier, NotificationType, iso, Integer32, TimeTicks, Counter64, ModuleIdentity, IpAddress, ObjectIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Counter32", "MibIdentifier", "NotificationType", "iso", "Integer32", "TimeTicks", "Counter64", "ModuleIdentity", "IpAddress", "ObjectIdentity", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
laneClientMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 71))
mscLec = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124))
mscLecRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 1), )
if mibBuilder.loadTexts: mscLecRowStatusTable.setStatus('mandatory')
mscLecRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LaneClientMIB", "mscLecIndex"))
if mibBuilder.loadTexts: mscLecRowStatusEntry.setStatus('mandatory')
mscLecRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLecRowStatus.setStatus('mandatory')
mscLecComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecComponentName.setStatus('mandatory')
mscLecStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecStorageType.setStatus('mandatory')
mscLecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)))
if mibBuilder.loadTexts: mscLecIndex.setStatus('mandatory')
mscLecCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 10), )
if mibBuilder.loadTexts: mscLecCidDataTable.setStatus('mandatory')
mscLecCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LaneClientMIB", "mscLecIndex"))
if mibBuilder.loadTexts: mscLecCidDataEntry.setStatus('mandatory')
mscLecCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLecCustomerIdentifier.setStatus('mandatory')
mscLecIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 11), )
if mibBuilder.loadTexts: mscLecIfEntryTable.setStatus('mandatory')
mscLecIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LaneClientMIB", "mscLecIndex"))
if mibBuilder.loadTexts: mscLecIfEntryEntry.setStatus('mandatory')
mscLecIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLecIfAdminStatus.setStatus('mandatory')
mscLecIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 11, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecIfIndex.setStatus('mandatory')
mscLecMpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 12), )
if mibBuilder.loadTexts: mscLecMpTable.setStatus('mandatory')
mscLecMpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LaneClientMIB", "mscLecIndex"))
if mibBuilder.loadTexts: mscLecMpEntry.setStatus('mandatory')
mscLecLinkToProtocolPort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 12, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLecLinkToProtocolPort.setStatus('mandatory')
mscLecProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 13), )
if mibBuilder.loadTexts: mscLecProvTable.setStatus('mandatory')
mscLecProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LaneClientMIB", "mscLecIndex"))
if mibBuilder.loadTexts: mscLecProvEntry.setStatus('mandatory')
mscLecLanType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unspecified", 1), ("ethernet", 2))).clone('unspecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLecLanType.setStatus('mandatory')
mscLecMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1516, 1580, 4544, 9234, 18190))).clone(namedValues=NamedValues(("unspecified", 0), ("n1516", 1516), ("n1580", 1580), ("n4544", 4544), ("n9234", 9234), ("n18190", 18190))).clone('unspecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLecMaxFrameSize.setStatus('mandatory')
mscLecLanName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 13, 1, 3), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLecLanName.setStatus('mandatory')
mscLecV2Capable = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLecV2Capable.setStatus('mandatory')
mscLecLecsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 13, 1, 5), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLecLecsAddress.setStatus('mandatory')
mscLecLesAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 13, 1, 6), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLecLesAddress.setStatus('mandatory')
mscLecMaxDataSvcs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 13, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1018)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLecMaxDataSvcs.setStatus('mandatory')
mscLecMaxArpEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 13, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(32, 10240)).clone(5120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLecMaxArpEntries.setStatus('mandatory')
mscLecIlsForwarder = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 13, 1, 9), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLecIlsForwarder.setStatus('mandatory')
mscLecStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 15), )
if mibBuilder.loadTexts: mscLecStateTable.setStatus('mandatory')
mscLecStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 15, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LaneClientMIB", "mscLecIndex"))
if mibBuilder.loadTexts: mscLecStateEntry.setStatus('mandatory')
mscLecAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecAdminState.setStatus('mandatory')
mscLecOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecOperationalState.setStatus('mandatory')
mscLecUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecUsageState.setStatus('mandatory')
mscLecOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 16), )
if mibBuilder.loadTexts: mscLecOperStatusTable.setStatus('mandatory')
mscLecOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 16, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LaneClientMIB", "mscLecIndex"))
if mibBuilder.loadTexts: mscLecOperStatusEntry.setStatus('mandatory')
mscLecSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecSnmpOperStatus.setStatus('mandatory')
mscLecOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 17), )
if mibBuilder.loadTexts: mscLecOperTable.setStatus('mandatory')
mscLecOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 17, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LaneClientMIB", "mscLecIndex"))
if mibBuilder.loadTexts: mscLecOperEntry.setStatus('mandatory')
mscLecActualLanType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unspecified", 1), ("ethernet", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecActualLanType.setStatus('mandatory')
mscLecActualMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1516, 1580, 4544, 9234, 18190))).clone(namedValues=NamedValues(("unspecified", 0), ("n1516", 1516), ("n1580", 1580), ("n4544", 4544), ("n9234", 9234), ("n18190", 18190)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecActualMaxFrameSize.setStatus('mandatory')
mscLecActualLanName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 17, 1, 3), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecActualLanName.setStatus('mandatory')
mscLecElanId = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 17, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecElanId.setStatus('mandatory')
mscLecActualV2Capable = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecActualV2Capable.setStatus('mandatory')
mscLecConfigurationSource = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 17, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("usedProvisionedLecsAddress", 1), ("gotLecsAddressViaIlmi", 2), ("usedWellKnownLecsAddress", 3), ("usedLecsPvc", 4), ("didNotUseLecs", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecConfigurationSource.setStatus('mandatory')
mscLecActualLecsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 17, 1, 7), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecActualLecsAddress.setStatus('mandatory')
mscLecActualLesAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 17, 1, 8), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecActualLesAddress.setStatus('mandatory')
mscLecAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 17, 1, 9), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecAtmAddress.setStatus('mandatory')
mscLecMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 17, 1, 10), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecMacAddress.setStatus('mandatory')
mscLecLecId = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 17, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65279))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecLecId.setStatus('mandatory')
mscLecInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 17, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("initialState", 1), ("lecsConnect", 2), ("configure", 3), ("join", 4), ("initialRegistration", 5), ("busConnect", 6), ("operational", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecInterfaceState.setStatus('mandatory')
mscLecLastFailureResponseCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 17, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("none", 1), ("timeout", 2), ("undefinedError", 3), ("versionNotSupported", 4), ("invalidRequestParameters", 5), ("duplicateLanDestination", 6), ("duplicateAtmAddress", 7), ("insufficientResources", 8), ("accessDenied", 9), ("invalidRequesterId", 10), ("invalidLanDestination", 11), ("invalidAtmAddress", 12), ("noConfiguration", 13), ("leConfigureError", 14), ("insufficientInformation", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecLastFailureResponseCode.setStatus('mandatory')
mscLecLastFailureState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 17, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("initialState", 1), ("lecsConnect", 2), ("configure", 3), ("join", 4), ("initialRegistration", 5), ("busConnect", 6), ("operational", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecLastFailureState.setStatus('mandatory')
mscLecStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 18), )
if mibBuilder.loadTexts: mscLecStatsTable.setStatus('mandatory')
mscLecStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 18, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LaneClientMIB", "mscLecIndex"))
if mibBuilder.loadTexts: mscLecStatsEntry.setStatus('mandatory')
mscLecArpRequestsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 18, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecArpRequestsOut.setStatus('mandatory')
mscLecArpRepliesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 18, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecArpRepliesIn.setStatus('mandatory')
mscLecArpRequestsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 18, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecArpRequestsIn.setStatus('mandatory')
mscLecArpRepliesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 18, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecArpRepliesOut.setStatus('mandatory')
mscLecControlFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 18, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecControlFramesOut.setStatus('mandatory')
mscLecControlFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 18, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecControlFramesIn.setStatus('mandatory')
mscLecSvcFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 18, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecSvcFailures.setStatus('mandatory')
mscLecCurrDataSvcs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 18, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4292967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecCurrDataSvcs.setStatus('mandatory')
mscLecPeakDataSvcs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 18, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4292967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecPeakDataSvcs.setStatus('mandatory')
mscLecCurrArpEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 18, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4292967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecCurrArpEntries.setStatus('mandatory')
mscLecPeakArpEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 18, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4292967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecPeakArpEntries.setStatus('mandatory')
mscLecBadControlFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 18, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecBadControlFrames.setStatus('mandatory')
mscLecProtocolViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 18, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecProtocolViolations.setStatus('mandatory')
mscLecUnsupportedTlvs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 18, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecUnsupportedTlvs.setStatus('mandatory')
mscLecLeArp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 2))
mscLecLeArpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 2, 1), )
if mibBuilder.loadTexts: mscLecLeArpRowStatusTable.setStatus('mandatory')
mscLecLeArpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LaneClientMIB", "mscLecIndex"), (0, "Nortel-MsCarrier-MscPassport-LaneClientMIB", "mscLecLeArpIndex"))
if mibBuilder.loadTexts: mscLecLeArpRowStatusEntry.setStatus('mandatory')
mscLecLeArpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecLeArpRowStatus.setStatus('mandatory')
mscLecLeArpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecLeArpComponentName.setStatus('mandatory')
mscLecLeArpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecLeArpStorageType.setStatus('mandatory')
mscLecLeArpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 2, 1, 1, 10), DashedHexString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6))
if mibBuilder.loadTexts: mscLecLeArpIndex.setStatus('mandatory')
mscLecLeArpOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 2, 10), )
if mibBuilder.loadTexts: mscLecLeArpOperTable.setStatus('mandatory')
mscLecLeArpOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LaneClientMIB", "mscLecIndex"), (0, "Nortel-MsCarrier-MscPassport-LaneClientMIB", "mscLecLeArpIndex"))
if mibBuilder.loadTexts: mscLecLeArpOperEntry.setStatus('mandatory')
mscLecLeArpAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 2, 10, 1, 1), HexString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecLeArpAtmAddress.setStatus('mandatory')
mscLecLeArpIsRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecLeArpIsRemoteAddress.setStatus('mandatory')
mscLecLeArpConnectionId = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 2, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1022))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecLeArpConnectionId.setStatus('mandatory')
mscLecConn = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 3))
mscLecConnRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 3, 1), )
if mibBuilder.loadTexts: mscLecConnRowStatusTable.setStatus('mandatory')
mscLecConnRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LaneClientMIB", "mscLecIndex"), (0, "Nortel-MsCarrier-MscPassport-LaneClientMIB", "mscLecConnIndex"))
if mibBuilder.loadTexts: mscLecConnRowStatusEntry.setStatus('mandatory')
mscLecConnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecConnRowStatus.setStatus('mandatory')
mscLecConnComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecConnComponentName.setStatus('mandatory')
mscLecConnStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecConnStorageType.setStatus('mandatory')
mscLecConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1022)))
if mibBuilder.loadTexts: mscLecConnIndex.setStatus('mandatory')
mscLecConnOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 3, 10), )
if mibBuilder.loadTexts: mscLecConnOperTable.setStatus('mandatory')
mscLecConnOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LaneClientMIB", "mscLecIndex"), (0, "Nortel-MsCarrier-MscPassport-LaneClientMIB", "mscLecConnIndex"))
if mibBuilder.loadTexts: mscLecConnOperEntry.setStatus('mandatory')
mscLecConnRemoteAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 3, 10, 1, 1), HexString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecConnRemoteAtmAddress.setStatus('mandatory')
mscLecConnAge = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 3, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4292967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecConnAge.setStatus('mandatory')
mscLecConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("configurationDirectVcc", 1), ("controlDirectVcc", 2), ("controlDistributeVcc", 3), ("dataDirectVcc", 4), ("defaultMulticastSendVcc", 5), ("multicastForward", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecConnType.setStatus('mandatory')
mscLecConnStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 3, 11), )
if mibBuilder.loadTexts: mscLecConnStatsTable.setStatus('mandatory')
mscLecConnStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 3, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LaneClientMIB", "mscLecIndex"), (0, "Nortel-MsCarrier-MscPassport-LaneClientMIB", "mscLecConnIndex"))
if mibBuilder.loadTexts: mscLecConnStatsEntry.setStatus('mandatory')
mscLecConnOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 3, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecConnOutFrames.setStatus('mandatory')
mscLecConnInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 3, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecConnInFrames.setStatus('mandatory')
mscLecConnAtmCon = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 3, 2))
mscLecConnAtmConRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 3, 2, 1), )
if mibBuilder.loadTexts: mscLecConnAtmConRowStatusTable.setStatus('mandatory')
mscLecConnAtmConRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 3, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LaneClientMIB", "mscLecIndex"), (0, "Nortel-MsCarrier-MscPassport-LaneClientMIB", "mscLecConnIndex"), (0, "Nortel-MsCarrier-MscPassport-LaneClientMIB", "mscLecConnAtmConIndex"))
if mibBuilder.loadTexts: mscLecConnAtmConRowStatusEntry.setStatus('mandatory')
mscLecConnAtmConRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 3, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecConnAtmConRowStatus.setStatus('mandatory')
mscLecConnAtmConComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecConnAtmConComponentName.setStatus('mandatory')
mscLecConnAtmConStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 3, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecConnAtmConStorageType.setStatus('mandatory')
mscLecConnAtmConIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 3, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscLecConnAtmConIndex.setStatus('mandatory')
mscLecConnAtmConOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 3, 2, 10), )
if mibBuilder.loadTexts: mscLecConnAtmConOperTable.setStatus('mandatory')
mscLecConnAtmConOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 3, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LaneClientMIB", "mscLecIndex"), (0, "Nortel-MsCarrier-MscPassport-LaneClientMIB", "mscLecConnIndex"), (0, "Nortel-MsCarrier-MscPassport-LaneClientMIB", "mscLecConnAtmConIndex"))
if mibBuilder.loadTexts: mscLecConnAtmConOperEntry.setStatus('mandatory')
mscLecConnAtmConNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 124, 3, 2, 10, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLecConnAtmConNextHop.setStatus('mandatory')
laneClientGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 71, 1))
laneClientGroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 71, 1, 1))
laneClientGroupCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 71, 1, 1, 3))
laneClientGroupCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 71, 1, 1, 3, 2))
laneClientCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 71, 3))
laneClientCapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 71, 3, 1))
laneClientCapabilitiesCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 71, 3, 1, 3))
laneClientCapabilitiesCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 71, 3, 1, 3, 2))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-LaneClientMIB", mscLecCurrDataSvcs=mscLecCurrDataSvcs, mscLecPeakArpEntries=mscLecPeakArpEntries, mscLecConnAtmConRowStatus=mscLecConnAtmConRowStatus, mscLecConn=mscLecConn, mscLecLeArpRowStatusEntry=mscLecLeArpRowStatusEntry, mscLecIfEntryEntry=mscLecIfEntryEntry, mscLecConnRowStatusEntry=mscLecConnRowStatusEntry, mscLecConnOperTable=mscLecConnOperTable, mscLecUnsupportedTlvs=mscLecUnsupportedTlvs, mscLecProtocolViolations=mscLecProtocolViolations, mscLecConnStatsTable=mscLecConnStatsTable, mscLecLeArpRowStatus=mscLecLeArpRowStatus, laneClientMIB=laneClientMIB, mscLecIfEntryTable=mscLecIfEntryTable, mscLecComponentName=mscLecComponentName, mscLecConnRowStatusTable=mscLecConnRowStatusTable, mscLecOperStatusEntry=mscLecOperStatusEntry, mscLecConnAtmCon=mscLecConnAtmCon, mscLecCidDataTable=mscLecCidDataTable, mscLecControlFramesOut=mscLecControlFramesOut, mscLecMaxDataSvcs=mscLecMaxDataSvcs, mscLecConnRemoteAtmAddress=mscLecConnRemoteAtmAddress, laneClientCapabilitiesCA=laneClientCapabilitiesCA, mscLecConnAtmConRowStatusEntry=mscLecConnAtmConRowStatusEntry, mscLecIfIndex=mscLecIfIndex, mscLecLinkToProtocolPort=mscLecLinkToProtocolPort, mscLecCustomerIdentifier=mscLecCustomerIdentifier, mscLecRowStatusTable=mscLecRowStatusTable, mscLecConnAtmConIndex=mscLecConnAtmConIndex, laneClientCapabilitiesCA02A=laneClientCapabilitiesCA02A, mscLecOperTable=mscLecOperTable, mscLecConfigurationSource=mscLecConfigurationSource, mscLecStatsEntry=mscLecStatsEntry, mscLecArpRequestsOut=mscLecArpRequestsOut, mscLecActualV2Capable=mscLecActualV2Capable, mscLecAdminState=mscLecAdminState, mscLecActualLanName=mscLecActualLanName, mscLecLeArpOperEntry=mscLecLeArpOperEntry, laneClientGroupCA02A=laneClientGroupCA02A, mscLecConnAtmConRowStatusTable=mscLecConnAtmConRowStatusTable, mscLecIlsForwarder=mscLecIlsForwarder, mscLecLeArpIsRemoteAddress=mscLecLeArpIsRemoteAddress, mscLecLeArpStorageType=mscLecLeArpStorageType, mscLecLeArpIndex=mscLecLeArpIndex, mscLecMpTable=mscLecMpTable, mscLecLecsAddress=mscLecLecsAddress, mscLecArpRepliesOut=mscLecArpRepliesOut, mscLecMaxArpEntries=mscLecMaxArpEntries, mscLecProvTable=mscLecProvTable, laneClientCapabilities=laneClientCapabilities, mscLecSvcFailures=mscLecSvcFailures, mscLec=mscLec, mscLecMacAddress=mscLecMacAddress, mscLecLeArpRowStatusTable=mscLecLeArpRowStatusTable, mscLecConnInFrames=mscLecConnInFrames, mscLecConnAtmConNextHop=mscLecConnAtmConNextHop, mscLecRowStatusEntry=mscLecRowStatusEntry, mscLecLeArpConnectionId=mscLecLeArpConnectionId, mscLecLanType=mscLecLanType, mscLecArpRequestsIn=mscLecArpRequestsIn, mscLecLeArpComponentName=mscLecLeArpComponentName, mscLecConnType=mscLecConnType, mscLecOperationalState=mscLecOperationalState, laneClientGroupCA=laneClientGroupCA, mscLecActualLesAddress=mscLecActualLesAddress, mscLecCurrArpEntries=mscLecCurrArpEntries, mscLecStateEntry=mscLecStateEntry, mscLecLeArpOperTable=mscLecLeArpOperTable, mscLecConnOutFrames=mscLecConnOutFrames, mscLecIndex=mscLecIndex, mscLecConnAtmConOperTable=mscLecConnAtmConOperTable, mscLecIfAdminStatus=mscLecIfAdminStatus, mscLecConnAtmConOperEntry=mscLecConnAtmConOperEntry, mscLecInterfaceState=mscLecInterfaceState, laneClientGroupCA02=laneClientGroupCA02, mscLecOperEntry=mscLecOperEntry, mscLecConnAge=mscLecConnAge, mscLecOperStatusTable=mscLecOperStatusTable, mscLecControlFramesIn=mscLecControlFramesIn, laneClientGroup=laneClientGroup, mscLecLanName=mscLecLanName, mscLecConnAtmConComponentName=mscLecConnAtmConComponentName, mscLecLastFailureState=mscLecLastFailureState, mscLecPeakDataSvcs=mscLecPeakDataSvcs, mscLecMaxFrameSize=mscLecMaxFrameSize, mscLecConnStorageType=mscLecConnStorageType, mscLecStorageType=mscLecStorageType, mscLecMpEntry=mscLecMpEntry, mscLecBadControlFrames=mscLecBadControlFrames, mscLecRowStatus=mscLecRowStatus, mscLecActualMaxFrameSize=mscLecActualMaxFrameSize, mscLecSnmpOperStatus=mscLecSnmpOperStatus, laneClientCapabilitiesCA02=laneClientCapabilitiesCA02, mscLecStateTable=mscLecStateTable, mscLecConnAtmConStorageType=mscLecConnAtmConStorageType, mscLecConnStatsEntry=mscLecConnStatsEntry, mscLecLecId=mscLecLecId, mscLecLastFailureResponseCode=mscLecLastFailureResponseCode, mscLecElanId=mscLecElanId, mscLecLeArp=mscLecLeArp, mscLecUsageState=mscLecUsageState, mscLecLesAddress=mscLecLesAddress, mscLecCidDataEntry=mscLecCidDataEntry, mscLecV2Capable=mscLecV2Capable, mscLecConnOperEntry=mscLecConnOperEntry, mscLecActualLanType=mscLecActualLanType, mscLecStatsTable=mscLecStatsTable, mscLecConnRowStatus=mscLecConnRowStatus, mscLecLeArpAtmAddress=mscLecLeArpAtmAddress, mscLecArpRepliesIn=mscLecArpRepliesIn, mscLecProvEntry=mscLecProvEntry, mscLecConnComponentName=mscLecConnComponentName, mscLecActualLecsAddress=mscLecActualLecsAddress, mscLecAtmAddress=mscLecAtmAddress, mscLecConnIndex=mscLecConnIndex)
