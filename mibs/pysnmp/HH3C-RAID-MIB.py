#
# PySNMP MIB module HH3C-RAID-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-RAID-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:16:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
Hh3cRaidIDType, Hh3cStorageActionType, Hh3cStorageOwnerType, hh3cStorageRef, Hh3cStorageEnableState = mibBuilder.importSymbols("HH3C-STORAGE-REF-MIB", "Hh3cRaidIDType", "Hh3cStorageActionType", "Hh3cStorageOwnerType", "hh3cStorageRef", "Hh3cStorageEnableState")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, IpAddress, Bits, NotificationType, Unsigned32, MibIdentifier, TimeTicks, ModuleIdentity, Counter64, Integer32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "IpAddress", "Bits", "NotificationType", "Unsigned32", "MibIdentifier", "TimeTicks", "ModuleIdentity", "Counter64", "Integer32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "iso")
RowStatus, DisplayString, TruthValue, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TruthValue", "DateAndTime", "TextualConvention")
hh3cRaid = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 10, 4))
if mibBuilder.loadTexts: hh3cRaid.setLastUpdated('200709041452Z')
if mibBuilder.loadTexts: hh3cRaid.setOrganization('H3C Technologies Co., Ltd.')
hh3cRaidMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1))
hh3cRaidCapacityTable = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 1))
hh3cPrimaryRaidCount = MibScalar((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cPrimaryRaidCount.setStatus('current')
hh3cRaidTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 2), )
if mibBuilder.loadTexts: hh3cRaidTable.setStatus('current')
hh3cRaidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 2, 1), ).setIndexNames((0, "HH3C-RAID-MIB", "hh3cRaidName"))
if mibBuilder.loadTexts: hh3cRaidEntry.setStatus('current')
hh3cRaidName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cRaidName.setStatus('current')
hh3cRaidId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRaidId.setStatus('current')
hh3cRaidUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 2, 1, 3), Hh3cRaidIDType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRaidUuid.setStatus('current')
hh3cRaidLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("jbod", 1), ("raid0", 2), ("raid1", 3), ("raid2", 4), ("raid3", 5), ("raid4", 6), ("raid5", 7), ("raid6", 8), ("raid10", 9), ("raid50", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRaidLevel.setStatus('current')
hh3cRaidTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRaidTimestamp.setStatus('current')
hh3cRaidDiskList = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRaidDiskList.setStatus('current')
hh3cRaidOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 2, 1, 7), Hh3cStorageOwnerType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRaidOwner.setStatus('current')
hh3cRaidSize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRaidSize.setStatus('current')
hh3cRaidFreeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 2, 1, 9), Integer32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRaidFreeSize.setStatus('current')
hh3cRaidAutoSync = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 2, 1, 10), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRaidAutoSync.setStatus('current')
hh3cRaidRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 2, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRaidRowStatus.setStatus('current')
hh3cRaidManageTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 3), )
if mibBuilder.loadTexts: hh3cRaidManageTable.setStatus('current')
hh3cRaidManageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 3, 1), ).setIndexNames((0, "HH3C-RAID-MIB", "hh3cRaidUuid"))
if mibBuilder.loadTexts: hh3cRaidManageEntry.setStatus('current')
hh3cRaidLocationState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 3, 1, 1), Hh3cStorageEnableState().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRaidLocationState.setStatus('current')
hh3cRaidAction = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("run", 1), ("pause", 2), ("rebuild", 3), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRaidAction.setStatus('current')
hh3cRaidRunState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("degraded", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRaidRunState.setStatus('current')
hh3cRaidAutoRebuild = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 3, 1, 4), Hh3cStorageEnableState().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRaidAutoRebuild.setStatus('current')
hh3cRaidSyncPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRaidSyncPercentage.setStatus('current')
hh3cRaidHideState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 3, 1, 6), Hh3cStorageEnableState().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRaidHideState.setStatus('current')
hh3cRaidLvRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 3, 1, 7), Hh3cStorageActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRaidLvRestore.setStatus('current')
hh3cRaidType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("virtualDevice", 1), ("directDevice", 2), ("serviceEnabledDevice", 3), ("unassigned", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRaidType.setStatus('current')
hh3cRaidCacheTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 4), )
if mibBuilder.loadTexts: hh3cRaidCacheTable.setStatus('current')
hh3cRaidCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 4, 1), ).setIndexNames((0, "HH3C-RAID-MIB", "hh3cRaidUuid"))
if mibBuilder.loadTexts: hh3cRaidCacheEntry.setStatus('current')
hh3cRaidReadCache = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 4, 1, 1), Hh3cStorageEnableState().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRaidReadCache.setStatus('current')
hh3cRaidReadCacheHitPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setUnits('minute').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRaidReadCacheHitPeriod.setStatus('current')
hh3cRaidReadCacheAverageRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRaidReadCacheAverageRate.setStatus('current')
hh3cRaidReadCachePhaseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRaidReadCachePhaseRate.setStatus('current')
hh3cRaidWriteCache = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 4, 1, 5), Hh3cStorageEnableState().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRaidWriteCache.setStatus('current')
hh3cRaidWriteCacheHitPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setUnits('minute').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRaidWriteCacheHitPeriod.setStatus('current')
hh3cRaidWriteCacheAverageRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRaidWriteCacheAverageRate.setStatus('current')
hh3cRaidWriteCachePhaseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cRaidWriteCachePhaseRate.setStatus('current')
hh3cRaidWriteCacheFlush = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 4, 1, 9), Hh3cStorageActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cRaidWriteCacheFlush.setStatus('current')
hh3cRaidSpareDiskTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 5), )
if mibBuilder.loadTexts: hh3cRaidSpareDiskTable.setStatus('current')
hh3cRaidSpareDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 5, 1), ).setIndexNames((0, "HH3C-RAID-MIB", "hh3cRaidUuid"), (0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: hh3cRaidSpareDiskEntry.setStatus('current')
hh3cRaidSpareDiskRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 5, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cRaidSpareDiskRowStatus.setStatus('current')
hh3cFreezeRaidTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 6), )
if mibBuilder.loadTexts: hh3cFreezeRaidTable.setStatus('current')
hh3cFreezeRaidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 6, 1), ).setIndexNames((0, "HH3C-RAID-MIB", "hh3cFreezeRaidUuid"))
if mibBuilder.loadTexts: hh3cFreezeRaidEntry.setStatus('current')
hh3cFreezeRaidUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 6, 1, 1), Hh3cRaidIDType())
if mibBuilder.loadTexts: hh3cFreezeRaidUuid.setStatus('current')
hh3cFreezeRaidName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFreezeRaidName.setStatus('current')
hh3cFreezeRaidRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFreezeRaidRowStatus.setStatus('current')
hh3c3rdRaidTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 7), )
if mibBuilder.loadTexts: hh3c3rdRaidTable.setStatus('current')
hh3c3rdRaidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 7, 1), ).setIndexNames((0, "HH3C-RAID-MIB", "hh3c3rdRaidUuid"))
if mibBuilder.loadTexts: hh3c3rdRaidEntry.setStatus('current')
hh3c3rdRaidUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 7, 1, 1), Hh3cRaidIDType())
if mibBuilder.loadTexts: hh3c3rdRaidUuid.setStatus('current')
hh3c3rdRaidName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3c3rdRaidName.setStatus('current')
hh3c3rdRaidOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 7, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3c3rdRaidOwner.setStatus('current')
hh3c3rdRaidImport = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 7, 1, 4), Hh3cStorageOwnerType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3c3rdRaidImport.setStatus('current')
hh3c3rdRaidRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 4, 1, 7, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3c3rdRaidRowStatus.setStatus('current')
mibBuilder.exportSymbols("HH3C-RAID-MIB", hh3cRaidWriteCacheAverageRate=hh3cRaidWriteCacheAverageRate, hh3c3rdRaidName=hh3c3rdRaidName, hh3c3rdRaidImport=hh3c3rdRaidImport, hh3cRaidType=hh3cRaidType, hh3cRaidReadCachePhaseRate=hh3cRaidReadCachePhaseRate, hh3cFreezeRaidName=hh3cFreezeRaidName, hh3cFreezeRaidUuid=hh3cFreezeRaidUuid, hh3cRaidName=hh3cRaidName, hh3cRaidReadCache=hh3cRaidReadCache, hh3cPrimaryRaidCount=hh3cPrimaryRaidCount, hh3cRaidWriteCacheHitPeriod=hh3cRaidWriteCacheHitPeriod, hh3cRaidCapacityTable=hh3cRaidCapacityTable, hh3cRaidRunState=hh3cRaidRunState, hh3cRaidEntry=hh3cRaidEntry, hh3cRaidAutoRebuild=hh3cRaidAutoRebuild, hh3cRaid=hh3cRaid, hh3cRaidOwner=hh3cRaidOwner, hh3cRaidCacheTable=hh3cRaidCacheTable, hh3c3rdRaidTable=hh3c3rdRaidTable, hh3cFreezeRaidRowStatus=hh3cFreezeRaidRowStatus, hh3cRaidTable=hh3cRaidTable, hh3cRaidManageTable=hh3cRaidManageTable, hh3cRaidSize=hh3cRaidSize, hh3c3rdRaidEntry=hh3c3rdRaidEntry, hh3c3rdRaidOwner=hh3c3rdRaidOwner, hh3cRaidAction=hh3cRaidAction, hh3cRaidLevel=hh3cRaidLevel, hh3cRaidLocationState=hh3cRaidLocationState, hh3cRaidAutoSync=hh3cRaidAutoSync, hh3cRaidCacheEntry=hh3cRaidCacheEntry, hh3cRaidMibObjects=hh3cRaidMibObjects, hh3cRaidFreeSize=hh3cRaidFreeSize, hh3cRaidReadCacheHitPeriod=hh3cRaidReadCacheHitPeriod, hh3cRaidSpareDiskTable=hh3cRaidSpareDiskTable, hh3cRaidRowStatus=hh3cRaidRowStatus, PYSNMP_MODULE_ID=hh3cRaid, hh3cRaidSpareDiskEntry=hh3cRaidSpareDiskEntry, hh3c3rdRaidRowStatus=hh3c3rdRaidRowStatus, hh3cRaidWriteCache=hh3cRaidWriteCache, hh3cRaidWriteCachePhaseRate=hh3cRaidWriteCachePhaseRate, hh3cRaidWriteCacheFlush=hh3cRaidWriteCacheFlush, hh3c3rdRaidUuid=hh3c3rdRaidUuid, hh3cRaidHideState=hh3cRaidHideState, hh3cRaidSyncPercentage=hh3cRaidSyncPercentage, hh3cRaidUuid=hh3cRaidUuid, hh3cRaidLvRestore=hh3cRaidLvRestore, hh3cRaidSpareDiskRowStatus=hh3cRaidSpareDiskRowStatus, hh3cRaidDiskList=hh3cRaidDiskList, hh3cRaidId=hh3cRaidId, hh3cRaidManageEntry=hh3cRaidManageEntry, hh3cFreezeRaidEntry=hh3cFreezeRaidEntry, hh3cRaidTimestamp=hh3cRaidTimestamp, hh3cRaidReadCacheAverageRate=hh3cRaidReadCacheAverageRate, hh3cFreezeRaidTable=hh3cFreezeRaidTable)
