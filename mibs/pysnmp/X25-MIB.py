#
# PySNMP MIB module X25-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/X25-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:35:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
rs232PortIndex, = mibBuilder.importSymbols("RS232-MIB", "rs232PortIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Gauge32, enterprises, ObjectIdentity, Unsigned32, MibIdentifier, Integer32, NotificationType, ModuleIdentity, IpAddress, Counter32, iso, NotificationType, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Gauge32", "enterprises", "ObjectIdentity", "Unsigned32", "MibIdentifier", "Integer32", "NotificationType", "ModuleIdentity", "IpAddress", "Counter32", "iso", "NotificationType", "TimeTicks")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
ngcan = MibIdentifier((1, 3, 6, 1, 4, 1, 1978))
tiger = MibIdentifier((1, 3, 6, 1, 4, 1, 1978, 2))
x25MIB = MibIdentifier((1, 3, 6, 1, 4, 1, 1978, 2, 14))
x25L3 = MibIdentifier((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1))
x25Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 1978, 2, 14, 2))
x25L3Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 1978, 2, 14, 2, 1))
class X25CallParamIndex(Integer32):
    pass

class InterfaceIndex(Integer32):
    pass

class X121Address(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 20)

x25AdmnTable = MibTable((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1), )
if mibBuilder.loadTexts: x25AdmnTable.setStatus('mandatory')
x25AdmnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1), ).setIndexNames((0, "X25-MIB", "x25AdmnIndex"))
if mibBuilder.loadTexts: x25AdmnEntry.setStatus('mandatory')
x25AdmnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 1), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25AdmnIndex.setStatus('mandatory')
x25AdmnInterfaceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2), ("dxe", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25AdmnInterfaceMode.setStatus('mandatory')
x25AdmnPacketSequencing = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("modulo8", 1), ("modulo128", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25AdmnPacketSequencing.setStatus('mandatory')
x25AdmnRestartTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 320000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25AdmnRestartTimer.setStatus('mandatory')
x25AdmnCallTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 320000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25AdmnCallTimer.setStatus('mandatory')
x25AdmnResetTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 320000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25AdmnResetTimer.setStatus('mandatory')
x25AdmnClearTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 320000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25AdmnClearTimer.setStatus('mandatory')
x25AdmnWindowTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 320000)).clone(60000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25AdmnWindowTimer.setStatus('mandatory')
x25AdmnDataRxmtTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 320000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25AdmnDataRxmtTimer.setStatus('mandatory')
x25AdmnInterruptTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 320000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25AdmnInterruptTimer.setStatus('mandatory')
x25AdmnRejectTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 320000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25AdmnRejectTimer.setStatus('mandatory')
x25AdmnRegistrationRequestTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 320000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25AdmnRegistrationRequestTimer.setStatus('mandatory')
x25AdmnRestartCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25AdmnRestartCount.setStatus('mandatory')
x25AdmnResetCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25AdmnResetCount.setStatus('mandatory')
x25AdmnClearCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25AdmnClearCount.setStatus('mandatory')
x25AdmnDataRxmtCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25AdmnDataRxmtCount.setStatus('mandatory')
x25AdmnRejectCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25AdmnRejectCount.setStatus('mandatory')
x25AdmnRegistrationRequestCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25AdmnRegistrationRequestCount.setStatus('mandatory')
x25AdmnNumberPVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25AdmnNumberPVCs.setStatus('mandatory')
x25AdmnDefCallParamId = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 20), X25CallParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25AdmnDefCallParamId.setStatus('mandatory')
x25AdmnProtocolVersionSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ccitt-1976", 1), ("ccitt-1980", 2), ("ccitt-1984", 3), ("ccitt-1988", 4), ("ccitt-1992", 5), ("qllc", 6))).clone('ccitt-1992')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25AdmnProtocolVersionSupported.setStatus('mandatory')
x25AdmnRegistrationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("auto", 2), ("user", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25AdmnRegistrationMode.setStatus('mandatory')
x25AdmnDiagnosticMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("standard", 1), ("on", 2), ("off", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25AdmnDiagnosticMode.setStatus('mandatory')
x25AdmnInterruptSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25AdmnInterruptSize.setStatus('mandatory')
x25AdmnMaxTxWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25AdmnMaxTxWindow.setStatus('mandatory')
x25AdmnMaxRxWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25AdmnMaxRxWindow.setStatus('mandatory')
x25AdmnFacilityLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(109)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25AdmnFacilityLength.setStatus('mandatory')
x25AdmnCallDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25AdmnCallDataSize.setStatus('mandatory')
x25AdmnFastSelectCallDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25AdmnFastSelectCallDataSize.setStatus('mandatory')
x25AdmnExtendedClear = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("convert", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25AdmnExtendedClear.setStatus('mandatory')
x25AdmnCause = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("asis", 1), ("ccitt-80", 2), ("ccitt-84", 3), ("clear", 4))).clone('ccitt-84')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25AdmnCause.setStatus('mandatory')
x25AdmnABit = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("ok", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25AdmnABit.setStatus('mandatory')
x25AdmnRRTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25AdmnRRTrigger.setStatus('mandatory')
x25AdmnRRTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 320000)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25AdmnRRTimer.setStatus('mandatory')
x25AdmnRRPiggy = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25AdmnRRPiggy.setStatus('mandatory')
x25AdmnTxRejectMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("reset", 1), ("rejectReset", 2), ("sendAlways", 3))).clone('reset')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25AdmnTxRejectMode.setStatus('mandatory')
x25AdmnRxRejectMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("reset", 1), ("retxReset", 2), ("retxAlways", 3))).clone('reset')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25AdmnRxRejectMode.setStatus('mandatory')
x25AdmnDBit = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("ok", 2), ("bill", 3))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25AdmnDBit.setStatus('mandatory')
x25AdmnR28Action = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fail", 1), ("ignore", 2))).clone('ignore')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25AdmnR28Action.setStatus('mandatory')
x25ChannelLIC = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25ChannelLIC.setStatus('mandatory')
x25ChannelHIC = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(4095)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25ChannelHIC.setStatus('mandatory')
x25ChannelLTC = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25ChannelLTC.setStatus('mandatory')
x25ChannelHTC = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(4095)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25ChannelHTC.setStatus('mandatory')
x25ChannelLOC = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25ChannelLOC.setStatus('mandatory')
x25ChannelHOC = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(4095)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25ChannelHOC.setStatus('mandatory')
x25StatInCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatInCalls.setStatus('mandatory')
x25StatInCallRefusals = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatInCallRefusals.setStatus('mandatory')
x25StatInProviderInitiatedClears = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatInProviderInitiatedClears.setStatus('mandatory')
x25StatInRemotelyInitiatedResets = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatInRemotelyInitiatedResets.setStatus('mandatory')
x25StatInProviderInitiatedResets = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatInProviderInitiatedResets.setStatus('mandatory')
x25StatInRestarts = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatInRestarts.setStatus('mandatory')
x25StatInDataPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatInDataPackets.setStatus('mandatory')
x25StatInAccusedOfProtocolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatInAccusedOfProtocolErrors.setStatus('mandatory')
x25StatInInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatInInterrupts.setStatus('mandatory')
x25StatOutCallAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatOutCallAttempts.setStatus('mandatory')
x25StatOutCallFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatOutCallFailures.setStatus('mandatory')
x25StatOutInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatOutInterrupts.setStatus('mandatory')
x25StatOutDataPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatOutDataPackets.setStatus('mandatory')
x25StatPVCCircuits = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatPVCCircuits.setStatus('mandatory')
x25StatSVCCircuits = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatSVCCircuits.setStatus('mandatory')
x25StatRestartTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatRestartTimeouts.setStatus('mandatory')
x25StatCallTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatCallTimeouts.setStatus('mandatory')
x25StatResetTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatResetTimeouts.setStatus('mandatory')
x25StatClearTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatClearTimeouts.setStatus('mandatory')
x25StatDataRxmtTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatDataRxmtTimeouts.setStatus('mandatory')
x25StatInterruptTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatInterruptTimeouts.setStatus('mandatory')
x25StatRetryCountExceededs = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatRetryCountExceededs.setStatus('mandatory')
x25StatClearCountExceededs = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25StatClearCountExceededs.setStatus('mandatory')
x25AdminTrapControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 1, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25AdminTrapControl.setStatus('mandatory')
x25CircuitTable = MibTable((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 2), )
if mibBuilder.loadTexts: x25CircuitTable.setStatus('mandatory')
x25CircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 2, 1), ).setIndexNames((0, "X25-MIB", "x25CircuitIndex"), (0, "X25-MIB", "x25CircuitChannel"))
if mibBuilder.loadTexts: x25CircuitEntry.setStatus('mandatory')
x25CircuitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CircuitIndex.setStatus('mandatory')
x25CircuitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CircuitChannel.setStatus('mandatory')
x25CircuitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("inactive", 1), ("wait-for-setup", 2), ("received-call", 3), ("sent-call", 4), ("data-unused", 5), ("call-collision", 6), ("sent-user-clear", 7), ("sent-net-clear", 8), ("data", 9), ("sent-user-reset", 10), ("sent-net-reset", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CircuitStatus.setStatus('mandatory')
x25CircuitEstablishTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 2, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CircuitEstablishTime.setStatus('mandatory')
x25CircuitDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2), ("pvc", 3))).clone('pvc')).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CircuitDirection.setStatus('mandatory')
x25CircuitInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CircuitInOctets.setStatus('mandatory')
x25CircuitInPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CircuitInPdus.setStatus('mandatory')
x25CircuitInRemotelyInitiatedResets = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CircuitInRemotelyInitiatedResets.setStatus('mandatory')
x25CircuitInProviderInitiatedResets = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CircuitInProviderInitiatedResets.setStatus('mandatory')
x25CircuitInInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CircuitInInterrupts.setStatus('mandatory')
x25CircuitOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CircuitOutOctets.setStatus('mandatory')
x25CircuitOutPdus = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CircuitOutPdus.setStatus('mandatory')
x25CircuitOutInterrupts = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CircuitOutInterrupts.setStatus('mandatory')
x25CircuitDataRetransmissionTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CircuitDataRetransmissionTimeouts.setStatus('mandatory')
x25CircuitResetTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CircuitResetTimeouts.setStatus('mandatory')
x25CircuitInterruptTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CircuitInterruptTimeouts.setStatus('mandatory')
x25CircuitCallParamId = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CircuitCallParamId.setStatus('mandatory')
x25CircuitCalledAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 2, 1, 18), X121Address().clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CircuitCalledAddress.setStatus('mandatory')
x25CircuitCallingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 2, 1, 19), X121Address().clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CircuitCallingAddress.setStatus('mandatory')
x25CircuitOriginallyCalledAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 2, 1, 20), X121Address().clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CircuitOriginallyCalledAddress.setStatus('mandatory')
x25CircuitDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 2, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CircuitDescr.setStatus('mandatory')
x25CircuitRNRReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-rnr", 1), ("rnr", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CircuitRNRReceive.setStatus('mandatory')
x25CircuitRNRSent = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-rnr", 1), ("rnr", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CircuitRNRSent.setStatus('mandatory')
x25CircuitTrapType = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("reset", 1), ("clear", 2), ("sent-rr2rnr", 3), ("sent-rnr2rr", 4), ("recv-rr2rnr", 5), ("recv-rnr2rr", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CircuitTrapType.setStatus('mandatory')
x25CircuitTrapCause = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CircuitTrapCause.setStatus('mandatory')
x25CircuitTrapDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CircuitTrapDiagnostic.setStatus('mandatory')
x25CallParmTable = MibTable((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 3), )
if mibBuilder.loadTexts: x25CallParmTable.setStatus('mandatory')
x25CallParmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 3, 1), ).setIndexNames((0, "X25-MIB", "x25CallParmIndex"))
if mibBuilder.loadTexts: x25CallParmEntry.setStatus('mandatory')
x25CallParmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmIndex.setStatus('mandatory')
x25CallParmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 3, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmStatus.setStatus('mandatory')
x25CallParmRefCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmRefCount.setStatus('mandatory')
x25CallParmInPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmInPacketSize.setStatus('mandatory')
x25CallParmOutPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmOutPacketSize.setStatus('mandatory')
x25CallParmInWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmInWindowSize.setStatus('mandatory')
x25CallParmOutWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmOutWindowSize.setStatus('mandatory')
x25CallParmAcceptReverseCharging = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("default", 1), ("alwaysAccept", 2), ("alwaysRefuse", 3), ("onlyIfNotBilled", 4))).clone('alwaysRefuse')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmAcceptReverseCharging.setStatus('mandatory')
x25CallParmProposeReverseCharging = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("reverse", 2), ("local", 3))).clone('local')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmProposeReverseCharging.setStatus('mandatory')
x25CallParmFastSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("default", 1), ("alwaysReject", 2), ("onlyIncomming", 3), ("onlyOutgoing", 4), ("alwaysAccept", 5), ("onlyIfNotBilled", 6))).clone('alwaysReject')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmFastSelect.setStatus('mandatory')
x25CallParmInThruPutClasSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("tcReserved1", 1), ("tcReserved2", 2), ("tc75", 3), ("tc150", 4), ("tc300", 5), ("tc600", 6), ("tc1200", 7), ("tc2400", 8), ("tc4800", 9), ("tc9600", 10), ("tc19200", 11), ("tc48000", 12), ("tc64000", 13), ("tcReserved14", 14), ("tcReserved15", 15), ("tcReserved0", 16), ("tcNone", 17), ("tcDefault", 18))).clone('tcNone')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmInThruPutClasSize.setStatus('mandatory')
x25CallParmOutThruPutClasSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("tcReserved1", 1), ("tcReserved2", 2), ("tc75", 3), ("tc150", 4), ("tc300", 5), ("tc600", 6), ("tc1200", 7), ("tc2400", 8), ("tc4800", 9), ("tc9600", 10), ("tc19200", 11), ("tc48000", 12), ("tc64000", 13), ("tcReserved14", 14), ("tcReserved15", 15), ("tcReserved0", 16), ("tcNone", 17), ("tcDefault", 18))).clone('tcNone')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmOutThruPutClasSize.setStatus('mandatory')
x25CallParmCug = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmCug.setStatus('mandatory')
x25CallParmCugoa = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 3, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmCugoa.setStatus('mandatory')
x25CallParmBcug = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmBcug.setStatus('mandatory')
x25CallParmNui = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 3, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmNui.setStatus('mandatory')
x25CallParmChargingInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("default", 1), ("noFacility", 2), ("noChargingInfo", 3), ("chargingInfo", 4))).clone('noFacility')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmChargingInfo.setStatus('mandatory')
x25CallParmRpoa = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 3, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmRpoa.setStatus('mandatory')
x25CallParmTrnstDly = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65537)).clone(65536)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmTrnstDly.setStatus('mandatory')
x25CallParmCallingExt = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 3, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmCallingExt.setStatus('mandatory')
x25CallParmCalledExt = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 3, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmCalledExt.setStatus('mandatory')
x25CallParmInMinThuPutCls = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 17)).clone(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmInMinThuPutCls.setStatus('mandatory')
x25CallParmOutMinThuPutCls = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 17)).clone(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmOutMinThuPutCls.setStatus('mandatory')
x25CallParmEndTrnsDly = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 3, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmEndTrnsDly.setStatus('mandatory')
x25CallParmPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 3, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmPriority.setStatus('mandatory')
x25CallParmProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 3, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmProtection.setStatus('mandatory')
x25CallParmExptData = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("noExpeditedData", 2), ("expeditedData", 3))).clone('noExpeditedData')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmExptData.setStatus('mandatory')
x25CallParmUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 3, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmUserData.setStatus('mandatory')
x25CallParmCallingNetworkFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 3, 1, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmCallingNetworkFacilities.setStatus('mandatory')
x25CallParmCalledNetworkFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 3, 1, 30), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 108)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmCalledNetworkFacilities.setStatus('mandatory')
x25CallParmInMaxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 3, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmInMaxPktSize.setStatus('mandatory')
x25CallParmOutMaxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1978, 2, 14, 1, 3, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CallParmOutMaxPktSize.setStatus('mandatory')
x25Restart = NotificationType((1, 3, 6, 1, 4, 1, 1978, 2, 14, 2, 1) + (0,1)).setObjects(("X25-MIB", "x25AdmnIndex"), ("RS232-MIB", "rs232PortIndex"))
x25VC = NotificationType((1, 3, 6, 1, 4, 1, 1978, 2, 14, 2, 1) + (0,2)).setObjects(("X25-MIB", "x25CircuitIndex"), ("X25-MIB", "x25CircuitChannel"), ("X25-MIB", "x25CircuitTrapType"), ("X25-MIB", "x25CircuitTrapCause"), ("X25-MIB", "x25CircuitTrapDiagnostic"), ("RS232-MIB", "rs232PortIndex"))
mibBuilder.exportSymbols("X25-MIB", x25CircuitTable=x25CircuitTable, x25AdmnDefCallParamId=x25AdmnDefCallParamId, x25AdmnTable=x25AdmnTable, x25AdmnProtocolVersionSupported=x25AdmnProtocolVersionSupported, x25CircuitEstablishTime=x25CircuitEstablishTime, x25AdmnEntry=x25AdmnEntry, x25AdmnTxRejectMode=x25AdmnTxRejectMode, x25StatResetTimeouts=x25StatResetTimeouts, x25AdmnInterruptSize=x25AdmnInterruptSize, x25CircuitIndex=x25CircuitIndex, x25CallParmOutMinThuPutCls=x25CallParmOutMinThuPutCls, x25CircuitRNRReceive=x25CircuitRNRReceive, x25ChannelHTC=x25ChannelHTC, x25CircuitInPdus=x25CircuitInPdus, x25CallParmInWindowSize=x25CallParmInWindowSize, x25CircuitRNRSent=x25CircuitRNRSent, x25AdmnRRTrigger=x25AdmnRRTrigger, x25Traps=x25Traps, x25AdmnRegistrationRequestCount=x25AdmnRegistrationRequestCount, x25AdmnExtendedClear=x25AdmnExtendedClear, x25CircuitOutInterrupts=x25CircuitOutInterrupts, x25StatInRestarts=x25StatInRestarts, x25AdmnDiagnosticMode=x25AdmnDiagnosticMode, x25CallParmOutMaxPktSize=x25CallParmOutMaxPktSize, x25StatClearTimeouts=x25StatClearTimeouts, x25CallParmCugoa=x25CallParmCugoa, x25CallParmNui=x25CallParmNui, x25Restart=x25Restart, x25AdmnRejectCount=x25AdmnRejectCount, x25CircuitEntry=x25CircuitEntry, x25L3=x25L3, x25AdmnRegistrationRequestTimer=x25AdmnRegistrationRequestTimer, x25CircuitDirection=x25CircuitDirection, x25StatOutInterrupts=x25StatOutInterrupts, x25AdmnWindowTimer=x25AdmnWindowTimer, x25CircuitInterruptTimeouts=x25CircuitInterruptTimeouts, x25CircuitCallingAddress=x25CircuitCallingAddress, x25StatInInterrupts=x25StatInInterrupts, x25AdmnResetCount=x25AdmnResetCount, x25CallParmCallingExt=x25CallParmCallingExt, tiger=tiger, x25AdmnRRPiggy=x25AdmnRRPiggy, x25CircuitInProviderInitiatedResets=x25CircuitInProviderInitiatedResets, x25CallParmInThruPutClasSize=x25CallParmInThruPutClasSize, x25AdmnPacketSequencing=x25AdmnPacketSequencing, x25StatCallTimeouts=x25StatCallTimeouts, x25CallParmInPacketSize=x25CallParmInPacketSize, x25CircuitDataRetransmissionTimeouts=x25CircuitDataRetransmissionTimeouts, x25CallParmProposeReverseCharging=x25CallParmProposeReverseCharging, x25AdmnNumberPVCs=x25AdmnNumberPVCs, x25StatRestartTimeouts=x25StatRestartTimeouts, x25AdmnRejectTimer=x25AdmnRejectTimer, x25StatDataRxmtTimeouts=x25StatDataRxmtTimeouts, x25CircuitStatus=x25CircuitStatus, x25CallParmRpoa=x25CallParmRpoa, x25CircuitCallParamId=x25CircuitCallParamId, x25AdmnR28Action=x25AdmnR28Action, x25AdmnIndex=x25AdmnIndex, x25AdmnResetTimer=x25AdmnResetTimer, x25AdmnFastSelectCallDataSize=x25AdmnFastSelectCallDataSize, x25StatRetryCountExceededs=x25StatRetryCountExceededs, x25AdmnClearTimer=x25AdmnClearTimer, x25StatOutCallAttempts=x25StatOutCallAttempts, x25AdmnFacilityLength=x25AdmnFacilityLength, x25AdminTrapControl=x25AdminTrapControl, x25CircuitInRemotelyInitiatedResets=x25CircuitInRemotelyInitiatedResets, x25CircuitInInterrupts=x25CircuitInInterrupts, x25CircuitOutOctets=x25CircuitOutOctets, x25StatSVCCircuits=x25StatSVCCircuits, x25CallParmCallingNetworkFacilities=x25CallParmCallingNetworkFacilities, x25CallParmCug=x25CallParmCug, x25L3Traps=x25L3Traps, x25AdmnRRTimer=x25AdmnRRTimer, x25StatInterruptTimeouts=x25StatInterruptTimeouts, x25VC=x25VC, x25CallParmEndTrnsDly=x25CallParmEndTrnsDly, x25StatPVCCircuits=x25StatPVCCircuits, x25AdmnInterfaceMode=x25AdmnInterfaceMode, X121Address=X121Address, x25AdmnCallDataSize=x25AdmnCallDataSize, x25ChannelHIC=x25ChannelHIC, x25CallParmExptData=x25CallParmExptData, x25CallParmUserData=x25CallParmUserData, x25StatInCalls=x25StatInCalls, x25CallParmCalledExt=x25CallParmCalledExt, x25StatClearCountExceededs=x25StatClearCountExceededs, x25CallParmCalledNetworkFacilities=x25CallParmCalledNetworkFacilities, x25StatInProviderInitiatedResets=x25StatInProviderInitiatedResets, x25ChannelLTC=x25ChannelLTC, x25CallParmAcceptReverseCharging=x25CallParmAcceptReverseCharging, ngcan=ngcan, x25AdmnDataRxmtTimer=x25AdmnDataRxmtTimer, x25CallParmChargingInfo=x25CallParmChargingInfo, x25CallParmBcug=x25CallParmBcug, x25AdmnDataRxmtCount=x25AdmnDataRxmtCount, x25AdmnMaxTxWindow=x25AdmnMaxTxWindow, x25CallParmIndex=x25CallParmIndex, x25CircuitTrapType=x25CircuitTrapType, x25AdmnRegistrationMode=x25AdmnRegistrationMode, x25AdmnDBit=x25AdmnDBit, x25AdmnRxRejectMode=x25AdmnRxRejectMode, x25CallParmEntry=x25CallParmEntry, x25CircuitCalledAddress=x25CircuitCalledAddress, x25StatInDataPackets=x25StatInDataPackets, x25CircuitTrapCause=x25CircuitTrapCause, x25CircuitOriginallyCalledAddress=x25CircuitOriginallyCalledAddress, x25CircuitChannel=x25CircuitChannel, x25AdmnClearCount=x25AdmnClearCount, x25CallParmTrnstDly=x25CallParmTrnstDly, x25AdmnCallTimer=x25AdmnCallTimer, x25StatInRemotelyInitiatedResets=x25StatInRemotelyInitiatedResets, x25AdmnRestartTimer=x25AdmnRestartTimer, x25CircuitDescr=x25CircuitDescr, x25CallParmFastSelect=x25CallParmFastSelect, x25ChannelLIC=x25ChannelLIC, x25CallParmTable=x25CallParmTable, x25CallParmOutPacketSize=x25CallParmOutPacketSize, x25CircuitTrapDiagnostic=x25CircuitTrapDiagnostic, InterfaceIndex=InterfaceIndex, x25AdmnRestartCount=x25AdmnRestartCount, x25CallParmProtection=x25CallParmProtection, x25MIB=x25MIB, x25CircuitResetTimeouts=x25CircuitResetTimeouts, x25CallParmRefCount=x25CallParmRefCount, x25StatInAccusedOfProtocolErrors=x25StatInAccusedOfProtocolErrors, x25ChannelLOC=x25ChannelLOC, x25CallParmInMaxPktSize=x25CallParmInMaxPktSize, x25AdmnABit=x25AdmnABit, x25StatOutCallFailures=x25StatOutCallFailures, x25ChannelHOC=x25ChannelHOC, x25StatInCallRefusals=x25StatInCallRefusals, x25CircuitInOctets=x25CircuitInOctets, x25CallParmInMinThuPutCls=x25CallParmInMinThuPutCls, x25StatInProviderInitiatedClears=x25StatInProviderInitiatedClears, x25CallParmStatus=x25CallParmStatus, x25AdmnCause=x25AdmnCause, x25CallParmOutWindowSize=x25CallParmOutWindowSize, x25CallParmOutThruPutClasSize=x25CallParmOutThruPutClasSize, x25AdmnMaxRxWindow=x25AdmnMaxRxWindow, x25CircuitOutPdus=x25CircuitOutPdus, x25CallParmPriority=x25CallParmPriority, x25StatOutDataPackets=x25StatOutDataPackets, X25CallParamIndex=X25CallParamIndex, x25AdmnInterruptTimer=x25AdmnInterruptTimer)
