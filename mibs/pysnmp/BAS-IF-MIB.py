#
# PySNMP MIB module BAS-IF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAS-IF-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:17:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
BasSlotId, BasChassisId, BasLogicalPortId, basExtIf, BasInterfaceId = mibBuilder.importSymbols("BAS-MIB", "BasSlotId", "BasChassisId", "BasLogicalPortId", "basExtIf", "BasInterfaceId")
InterfaceIndex, ifEntry = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifEntry")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Counter64, Gauge32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, TimeTicks, Bits, Unsigned32, NotificationType, IpAddress, iso, MibIdentifier, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter64", "Gauge32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "TimeTicks", "Bits", "Unsigned32", "NotificationType", "IpAddress", "iso", "MibIdentifier", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
basIfMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 3493, 2, 2, 1))
if mibBuilder.loadTexts: basIfMIB.setLastUpdated('9811061430Z')
if mibBuilder.loadTexts: basIfMIB.setOrganization('Broadband Access Systems, Inc.')
basIfTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 2, 1, 2), )
if mibBuilder.loadTexts: basIfTable.setStatus('current')
basIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 2, 1, 2, 1), )
ifEntry.registerAugmentions(("BAS-IF-MIB", "basIfEntry"))
basIfEntry.setIndexNames(*ifEntry.getIndexNames())
if mibBuilder.loadTexts: basIfEntry.setStatus('current')
basIfChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 2, 1, 2, 1, 1), BasChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basIfChassis.setStatus('current')
basIfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 2, 1, 2, 1, 2), BasSlotId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basIfSlot.setStatus('current')
basIfInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 2, 1, 2, 1, 3), BasInterfaceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basIfInterface.setStatus('current')
basIfLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 2, 1, 2, 1, 4), BasLogicalPortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basIfLPort.setStatus('current')
basIfClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 2, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("icl", 1), ("ccl", 2), ("egress", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basIfClass.setStatus('current')
basIfSimpleProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 2, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basIfSimpleProxyArp.setStatus('current')
basIfDhcpCmSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 2, 1, 2, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basIfDhcpCmSubnet.setStatus('current')
basIfDhcpHostSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 2, 1, 2, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basIfDhcpHostSubnet.setStatus('current')
basIfArpAgingDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 2, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basIfArpAgingDisable.setStatus('current')
basIfSecurityFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 2, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basIfSecurityFilter.setStatus('current')
mibBuilder.exportSymbols("BAS-IF-MIB", basIfClass=basIfClass, basIfLPort=basIfLPort, basIfDhcpCmSubnet=basIfDhcpCmSubnet, basIfDhcpHostSubnet=basIfDhcpHostSubnet, basIfArpAgingDisable=basIfArpAgingDisable, basIfSecurityFilter=basIfSecurityFilter, basIfChassis=basIfChassis, basIfSlot=basIfSlot, basIfInterface=basIfInterface, basIfMIB=basIfMIB, basIfSimpleProxyArp=basIfSimpleProxyArp, PYSNMP_MODULE_ID=basIfMIB, basIfTable=basIfTable, basIfEntry=basIfEntry)
