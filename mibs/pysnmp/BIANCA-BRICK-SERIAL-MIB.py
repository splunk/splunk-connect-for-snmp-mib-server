#
# PySNMP MIB module BIANCA-BRICK-SERIAL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BIANCA-BRICK-SERIAL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:21:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, IpAddress, Counter32, ObjectIdentity, TimeTicks, MibIdentifier, Integer32, Bits, Counter64, iso, ModuleIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "IpAddress", "Counter32", "ObjectIdentity", "TimeTicks", "MibIdentifier", "Integer32", "Bits", "Counter64", "iso", "ModuleIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
bintec = MibIdentifier((1, 3, 6, 1, 4, 1, 272))
bibo = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4))
serial = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 25))
class Date(Integer32):
    pass

class HexValue(Integer32):
    pass

serialIfTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 25, 1), )
if mibBuilder.loadTexts: serialIfTable.setStatus('mandatory')
serialIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 25, 1, 1), ).setIndexNames((0, "BIANCA-BRICK-SERIAL-MIB", "serialIfIndex"))
if mibBuilder.loadTexts: serialIfEntry.setStatus('mandatory')
serialIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 25, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialIfIndex.setStatus('mandatory')
serialIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 25, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("x21", 2), ("v35", 3), ("v36", 4), ("x21bis", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialIfType.setStatus('mandatory')
serialIfConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 25, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialIfConnector.setStatus('mandatory')
serialIfLeads = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 25, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialIfLeads.setStatus('mandatory')
serialIfClock = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 25, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("extern", 2), ("intern", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialIfClock.setStatus('mandatory')
serialIfSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 25, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialIfSpeed.setStatus('mandatory')
serialIfL2Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 25, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialIfL2Mode.setStatus('mandatory')
serialIfL1State = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 25, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dn", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialIfL1State.setStatus('mandatory')
serialIfSpeedReal = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 25, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialIfSpeedReal.setStatus('mandatory')
serialIfRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 25, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialIfRxPackets.setStatus('mandatory')
serialIfRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 25, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialIfRxOctets.setStatus('mandatory')
serialIfTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 25, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialIfTxPackets.setStatus('mandatory')
serialIfTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 25, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialIfTxOctets.setStatus('mandatory')
serialIfRxResets = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 25, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialIfRxResets.setStatus('mandatory')
serialIfRxAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 25, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialIfRxAborts.setStatus('mandatory')
serialIfRxOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 25, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialIfRxOverruns.setStatus('mandatory')
serialIfRxCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 25, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialIfRxCRCErrors.setStatus('mandatory')
serialIfRxGiantFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 25, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialIfRxGiantFrames.setStatus('mandatory')
serialIfTxResets = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 25, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialIfTxResets.setStatus('mandatory')
serialIfTxAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 25, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialIfTxAborts.setStatus('mandatory')
serialIfTxUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 25, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialIfTxUnderruns.setStatus('mandatory')
serialIfTxGiantFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 25, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialIfTxGiantFrames.setStatus('mandatory')
mibBuilder.exportSymbols("BIANCA-BRICK-SERIAL-MIB", serialIfTxOctets=serialIfTxOctets, dod=dod, serialIfIndex=serialIfIndex, serialIfClock=serialIfClock, serialIfRxAborts=serialIfRxAborts, serialIfRxResets=serialIfRxResets, enterprises=enterprises, serialIfTxAborts=serialIfTxAborts, bintec=bintec, serialIfRxCRCErrors=serialIfRxCRCErrors, serialIfTxGiantFrames=serialIfTxGiantFrames, serial=serial, serialIfRxOverruns=serialIfRxOverruns, serialIfConnector=serialIfConnector, serialIfRxPackets=serialIfRxPackets, serialIfTable=serialIfTable, serialIfSpeed=serialIfSpeed, serialIfL2Mode=serialIfL2Mode, serialIfRxOctets=serialIfRxOctets, Date=Date, serialIfTxPackets=serialIfTxPackets, serialIfTxResets=serialIfTxResets, serialIfEntry=serialIfEntry, org=org, serialIfSpeedReal=serialIfSpeedReal, private=private, internet=internet, serialIfTxUnderruns=serialIfTxUnderruns, serialIfType=serialIfType, serialIfL1State=serialIfL1State, HexValue=HexValue, bibo=bibo, serialIfLeads=serialIfLeads, serialIfRxGiantFrames=serialIfRxGiantFrames)
