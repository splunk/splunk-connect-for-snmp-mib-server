#
# PySNMP MIB module IPsecT1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IPsecT1-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:45:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Bits, ModuleIdentity, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Counter32, MibIdentifier, TimeTicks, IpAddress, NotificationType, Gauge32, Integer32, Unsigned32, enterprises, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ModuleIdentity", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Counter32", "MibIdentifier", "TimeTicks", "IpAddress", "NotificationType", "Gauge32", "Integer32", "Unsigned32", "enterprises", "iso")
TimeStamp, TimeInterval, TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TimeInterval", "TruthValue", "TextualConvention", "DisplayString")
ipsecMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1))
if mibBuilder.loadTexts: ipsecMIB.setLastUpdated('9911040000Z')
if mibBuilder.loadTexts: ipsecMIB.setOrganization('Tivoli Systems and Cisco Systems')
class IPSIpAddress(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )
class IkePeerType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ipAddrPeer", 1), ("namePeer", 2))

class IkeNegoMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("main", 1), ("aggressive", 2))

class IkeHashAlgo(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("md5", 2), ("sha", 3))

class IkeAuthMethod(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("none", 1), ("preSharedKey", 2), ("rsaSig", 3), ("rsaEncrypt", 4), ("revPublicKey", 5))

class DiffHellmanGrp(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("dhGroup1", 2), ("dhGroup2", 3))

class KeyType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ike", 1), ("manual", 2))

class EncapMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("tunnel", 1), ("transport", 2))

class EncryptAlgo(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("des", 2), ("des3", 3))

class AuthAlgo(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("hmacMd5", 2), ("hmacSha", 3))

class CompAlgo(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("none", 1), ("ldf", 2))

class EndPtType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("singleIpAddr", 1), ("ipAddrRange", 2), ("ipSubnet", 3))

class TunnelStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("active", 1), ("destroy", 2))

class TrapStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

ipsecMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1))
ipsecLevels = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 1))
ipsecPhaseOne = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2))
ipsecPhaseTwo = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3))
ipsecHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4))
ipsecFailures = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 5))
ipsecTrapCntl = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 6))
ipsecMibLevel = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecMibLevel.setStatus('current')
ikeGlobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 1))
ikeGlobalActiveTunnels = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeGlobalActiveTunnels.setStatus('current')
ikeGlobalPreviousTunnels = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeGlobalPreviousTunnels.setStatus('current')
ikeGlobalInOctets = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeGlobalInOctets.setStatus('current')
ikeGlobalInPkts = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeGlobalInPkts.setStatus('current')
ikeGlobalInDropPkts = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeGlobalInDropPkts.setStatus('current')
ikeGlobalInNotifys = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeGlobalInNotifys.setStatus('current')
ikeGlobalInP2Exchgs = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeGlobalInP2Exchgs.setStatus('current')
ikeGlobalInP2ExchgInvalids = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeGlobalInP2ExchgInvalids.setStatus('current')
ikeGlobalInP2ExchgRejects = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeGlobalInP2ExchgRejects.setStatus('current')
ikeGlobalInP2SaDelRequests = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeGlobalInP2SaDelRequests.setStatus('current')
ikeGlobalOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeGlobalOutOctets.setStatus('current')
ikeGlobalOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeGlobalOutPkts.setStatus('current')
ikeGlobalOutDropPkts = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeGlobalOutDropPkts.setStatus('current')
ikeGlobalOutNotifys = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeGlobalOutNotifys.setStatus('current')
ikeGlobalOutP2Exchgs = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeGlobalOutP2Exchgs.setStatus('current')
ikeGlobalOutP2ExchgInvalids = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeGlobalOutP2ExchgInvalids.setStatus('current')
ikeGlobalOutP2ExchgRejects = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeGlobalOutP2ExchgRejects.setStatus('current')
ikeGlobalOutP2SaDelRequests = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeGlobalOutP2SaDelRequests.setStatus('current')
ikeGlobalInitTunnels = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeGlobalInitTunnels.setStatus('current')
ikeGlobalInitTunnelFails = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeGlobalInitTunnelFails.setStatus('current')
ikeGlobalRespTunnelFails = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeGlobalRespTunnelFails.setStatus('current')
ikeGlobalSysCapFails = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeGlobalSysCapFails.setStatus('current')
ikeGlobalAuthFails = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeGlobalAuthFails.setStatus('current')
ikeGlobalDecryptFails = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeGlobalDecryptFails.setStatus('current')
ikeGlobalHashValidFails = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeGlobalHashValidFails.setStatus('current')
ikeGlobalNoSaFails = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeGlobalNoSaFails.setStatus('current')
ikePeerTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 2), )
if mibBuilder.loadTexts: ikePeerTable.setStatus('current')
ikePeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 2, 1), ).setIndexNames((0, "IPsecT1-MIB", "ikePeerLocalType"), (0, "IPsecT1-MIB", "ikePeerLocalValue"), (0, "IPsecT1-MIB", "ikePeerRemoteType"), (0, "IPsecT1-MIB", "ikePeerRemoteValue"), (0, "IPsecT1-MIB", "ikePeerIntIndex"))
if mibBuilder.loadTexts: ikePeerEntry.setStatus('current')
ikePeerLocalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 2, 1, 1), IkePeerType())
if mibBuilder.loadTexts: ikePeerLocalType.setStatus('current')
ikePeerLocalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 2, 1, 2), DisplayString())
if mibBuilder.loadTexts: ikePeerLocalValue.setStatus('current')
ikePeerRemoteType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 2, 1, 3), IkePeerType())
if mibBuilder.loadTexts: ikePeerRemoteType.setStatus('current')
ikePeerRemoteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 2, 1, 4), DisplayString())
if mibBuilder.loadTexts: ikePeerRemoteValue.setStatus('current')
ikePeerIntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 2, 1, 5), Integer32())
if mibBuilder.loadTexts: ikePeerIntIndex.setStatus('current')
ikePeerLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 2, 1, 6), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikePeerLocalAddr.setStatus('current')
ikePeerRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 2, 1, 7), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikePeerRemoteAddr.setStatus('current')
ikePeerActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 2, 1, 8), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikePeerActiveTime.setStatus('current')
ikePeerActiveTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikePeerActiveTunnelIndex.setStatus('current')
ikeTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 3), )
if mibBuilder.loadTexts: ikeTunnelTable.setStatus('current')
ikeTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 3, 1), ).setIndexNames((0, "IPsecT1-MIB", "ikeTunIndex"))
if mibBuilder.loadTexts: ikeTunnelEntry.setStatus('current')
ikeTunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: ikeTunIndex.setStatus('current')
ikeTunLocalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 3, 1, 2), IkePeerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunLocalType.setStatus('current')
ikeTunLocalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunLocalValue.setStatus('current')
ikeTunLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 3, 1, 4), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunLocalAddr.setStatus('current')
ikeTunLocalName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunLocalName.setStatus('current')
ikeTunRemoteType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 3, 1, 6), IkePeerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunRemoteType.setStatus('current')
ikeTunRemoteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunRemoteValue.setStatus('current')
ikeTunRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 3, 1, 8), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunRemoteAddr.setStatus('current')
ikeTunRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunRemoteName.setStatus('current')
ikeTunNegoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 3, 1, 10), IkeNegoMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunNegoMode.setStatus('current')
ikeTunDiffHellmanGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 3, 1, 11), DiffHellmanGrp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunDiffHellmanGrp.setStatus('current')
ikeTunEncryptAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 3, 1, 12), EncryptAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunEncryptAlgo.setStatus('current')
ikeTunHashAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 3, 1, 13), IkeHashAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunHashAlgo.setStatus('current')
ikeTunAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 3, 1, 14), IkeAuthMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunAuthMethod.setStatus('current')
ikeTunLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunLifeTime.setStatus('current')
ikeTunActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 3, 1, 16), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunActiveTime.setStatus('current')
ikeTunSaRefreshThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunSaRefreshThreshold.setStatus('current')
ikeTunTotalRefreshes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunTotalRefreshes.setStatus('current')
ikeTunInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunInOctets.setStatus('current')
ikeTunInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunInPkts.setStatus('current')
ikeTunInDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunInDropPkts.setStatus('current')
ikeTunInNotifys = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunInNotifys.setStatus('current')
ikeTunInP2Exchgs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunInP2Exchgs.setStatus('current')
ikeTunInP2ExchgInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunInP2ExchgInvalids.setStatus('current')
ikeTunInP2ExchgRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunInP2ExchgRejects.setStatus('current')
ikeTunInP2SaDelRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunInP2SaDelRequests.setStatus('current')
ikeTunOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunOutOctets.setStatus('current')
ikeTunOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunOutPkts.setStatus('current')
ikeTunOutDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunOutDropPkts.setStatus('current')
ikeTunOutNotifys = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunOutNotifys.setStatus('current')
ikeTunOutP2Exchgs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunOutP2Exchgs.setStatus('current')
ikeTunOutP2ExchgInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 3, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunOutP2ExchgInvalids.setStatus('current')
ikeTunOutP2ExchgRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 3, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunOutP2ExchgRejects.setStatus('current')
ikeTunOutP2SaDelRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 3, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunOutP2SaDelRequests.setStatus('current')
ikeTunStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 3, 1, 35), TunnelStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ikeTunStatus.setStatus('current')
ikePeerCorrTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 4), )
if mibBuilder.loadTexts: ikePeerCorrTable.setStatus('current')
ikePeerCorrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 4, 1), ).setIndexNames((0, "IPsecT1-MIB", "ikePeerCorrLocalType"), (0, "IPsecT1-MIB", "ikePeerCorrLocalValue"), (0, "IPsecT1-MIB", "ikePeerCorrRemoteType"), (0, "IPsecT1-MIB", "ikePeerCorrRemoteValue"), (0, "IPsecT1-MIB", "ikePeerCorrIntIndex"), (0, "IPsecT1-MIB", "ikePeerCorrSeqNum"))
if mibBuilder.loadTexts: ikePeerCorrEntry.setStatus('current')
ikePeerCorrLocalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 4, 1, 1), IkePeerType())
if mibBuilder.loadTexts: ikePeerCorrLocalType.setStatus('current')
ikePeerCorrLocalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 4, 1, 2), DisplayString())
if mibBuilder.loadTexts: ikePeerCorrLocalValue.setStatus('current')
ikePeerCorrRemoteType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 4, 1, 3), IkePeerType())
if mibBuilder.loadTexts: ikePeerCorrRemoteType.setStatus('current')
ikePeerCorrRemoteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 4, 1, 4), DisplayString())
if mibBuilder.loadTexts: ikePeerCorrRemoteValue.setStatus('current')
ikePeerCorrIntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 4, 1, 5), Integer32())
if mibBuilder.loadTexts: ikePeerCorrIntIndex.setStatus('current')
ikePeerCorrSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 4, 1, 6), Integer32())
if mibBuilder.loadTexts: ikePeerCorrSeqNum.setStatus('current')
ikePeerCorripsecTunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikePeerCorripsecTunIndex.setStatus('current')
ipsecGlobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 1))
ipsecGlobalActiveTunnels = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecGlobalActiveTunnels.setStatus('current')
ipsecGlobalPreviousTunnels = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecGlobalPreviousTunnels.setStatus('current')
ipsecGlobalInOctets = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecGlobalInOctets.setStatus('current')
ipsecGlobalHcInOctets = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecGlobalHcInOctets.setStatus('current')
ipsecGlobalInOctWraps = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecGlobalInOctWraps.setStatus('current')
ipsecGlobalInDecompOctets = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecGlobalInDecompOctets.setStatus('current')
ipsecGlobalHcInDecompOctets = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecGlobalHcInDecompOctets.setStatus('current')
ipsecGlobalInDecompOctWraps = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecGlobalInDecompOctWraps.setStatus('current')
ipsecGlobalInPkts = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecGlobalInPkts.setStatus('current')
ipsecGlobalInDrops = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecGlobalInDrops.setStatus('current')
ipsecGlobalInReplayDrops = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecGlobalInReplayDrops.setStatus('current')
ipsecGlobalInAuths = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecGlobalInAuths.setStatus('current')
ipsecGlobalInAuthFails = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecGlobalInAuthFails.setStatus('current')
ipsecGlobalInDecrypts = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecGlobalInDecrypts.setStatus('current')
ipsecGlobalInDecryptFails = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecGlobalInDecryptFails.setStatus('current')
ipsecGlobalOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecGlobalOutOctets.setStatus('current')
ipsecGlobalHcOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecGlobalHcOutOctets.setStatus('current')
ipsecGlobalOutOctWraps = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecGlobalOutOctWraps.setStatus('current')
ipsecGlobalOutUncompOctets = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecGlobalOutUncompOctets.setStatus('current')
ipsecGlobalHcOutUncompOctets = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecGlobalHcOutUncompOctets.setStatus('current')
ipsecGlobalOutUncompOctWraps = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecGlobalOutUncompOctWraps.setStatus('current')
ipsecGlobalOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecGlobalOutPkts.setStatus('current')
ipsecGlobalOutDrops = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecGlobalOutDrops.setStatus('current')
ipsecGlobalOutAuths = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecGlobalOutAuths.setStatus('current')
ipsecGlobalOutAuthFails = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecGlobalOutAuthFails.setStatus('current')
ipsecGlobalOutEncrypts = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecGlobalOutEncrypts.setStatus('current')
ipsecGlobalOutEncryptFails = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecGlobalOutEncryptFails.setStatus('current')
ipsecGlobalProtocolUseFails = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecGlobalProtocolUseFails.setStatus('current')
ipsecGlobalNoSaFails = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecGlobalNoSaFails.setStatus('current')
ipsecGlobalSysCapFails = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecGlobalSysCapFails.setStatus('current')
ipsecTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2), )
if mibBuilder.loadTexts: ipsecTunnelTable.setStatus('current')
ipsecTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1), ).setIndexNames((0, "IPsecT1-MIB", "ipsecTunIndex"))
if mibBuilder.loadTexts: ipsecTunnelEntry.setStatus('current')
ipsecTunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: ipsecTunIndex.setStatus('current')
ipsecTunIkeTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunIkeTunnelIndex.setStatus('current')
ipsecTunIkeTunnelAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunIkeTunnelAlive.setStatus('current')
ipsecTunLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 4), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunLocalAddr.setStatus('current')
ipsecTunRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 5), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunRemoteAddr.setStatus('current')
ipsecTunKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 6), KeyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunKeyType.setStatus('current')
ipsecTunEncapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 7), EncapMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunEncapMode.setStatus('current')
ipsecTunLifeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunLifeSize.setStatus('current')
ipsecTunLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunLifeTime.setStatus('current')
ipsecTunActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 10), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunActiveTime.setStatus('current')
ipsecTunSaLifeSizeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunSaLifeSizeThreshold.setStatus('current')
ipsecTunSaLifeTimeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunSaLifeTimeThreshold.setStatus('current')
ipsecTunTotalRefreshes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunTotalRefreshes.setStatus('current')
ipsecTunExpiredSaInstances = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunExpiredSaInstances.setStatus('current')
ipsecTunCurrentSaInstances = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunCurrentSaInstances.setStatus('current')
ipsecTunInSaDiffHellmanGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 16), DiffHellmanGrp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunInSaDiffHellmanGrp.setStatus('current')
ipsecTunInSaEncryptAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 17), EncryptAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunInSaEncryptAlgo.setStatus('current')
ipsecTunInSaAhAuthAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 18), AuthAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunInSaAhAuthAlgo.setStatus('current')
ipsecTunInSaEspAuthAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 19), AuthAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunInSaEspAuthAlgo.setStatus('current')
ipsecTunInSaDecompAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 20), CompAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunInSaDecompAlgo.setStatus('current')
ipsecTunOutSaDiffHellmanGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 21), DiffHellmanGrp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunOutSaDiffHellmanGrp.setStatus('current')
ipsecTunOutSaEncryptAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 22), EncryptAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunOutSaEncryptAlgo.setStatus('current')
ipsecTunOutSaAhAuthAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 23), AuthAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunOutSaAhAuthAlgo.setStatus('current')
ipsecTunOutSaEspAuthAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 24), AuthAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunOutSaEspAuthAlgo.setStatus('current')
ipsecTunOutSaCompAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 25), CompAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunOutSaCompAlgo.setStatus('current')
ipsecTunInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunInOctets.setStatus('current')
ipsecTunHcInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHcInOctets.setStatus('current')
ipsecTunInOctWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunInOctWraps.setStatus('current')
ipsecTunInDecompOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunInDecompOctets.setStatus('current')
ipsecTunHcInDecompOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHcInDecompOctets.setStatus('current')
ipsecTunInDecompOctWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunInDecompOctWraps.setStatus('current')
ipsecTunInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunInPkts.setStatus('current')
ipsecTunInDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunInDropPkts.setStatus('current')
ipsecTunInReplayDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunInReplayDropPkts.setStatus('current')
ipsecTunInAuths = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunInAuths.setStatus('current')
ipsecTunInAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunInAuthFails.setStatus('current')
ipsecTunInDecrypts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunInDecrypts.setStatus('current')
ipsecTunInDecryptFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunInDecryptFails.setStatus('current')
ipsecTunOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunOutOctets.setStatus('current')
ipsecTunHcOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHcOutOctets.setStatus('current')
ipsecTunOutOctWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunOutOctWraps.setStatus('current')
ipsecTunOutUncompOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunOutUncompOctets.setStatus('current')
ipsecTunHcOutUncompOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHcOutUncompOctets.setStatus('current')
ipsecTunOutUncompOctWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunOutUncompOctWraps.setStatus('current')
ipsecTunOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunOutPkts.setStatus('current')
ipsecTunOutDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunOutDropPkts.setStatus('current')
ipsecTunOutAuths = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunOutAuths.setStatus('current')
ipsecTunOutAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunOutAuthFails.setStatus('current')
ipsecTunOutEncrypts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunOutEncrypts.setStatus('current')
ipsecTunOutEncryptFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunOutEncryptFails.setStatus('current')
ipsecTunStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 2, 1, 51), TunnelStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecTunStatus.setStatus('current')
ipsecEndPtTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 3), )
if mibBuilder.loadTexts: ipsecEndPtTable.setStatus('current')
ipsecEndPtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 3, 1), ).setIndexNames((0, "IPsecT1-MIB", "ipsecTunIndex"), (0, "IPsecT1-MIB", "ipsecEndPtIndex"))
if mibBuilder.loadTexts: ipsecEndPtEntry.setStatus('current')
ipsecEndPtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: ipsecEndPtIndex.setStatus('current')
ipsecEndPtLocalName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecEndPtLocalName.setStatus('current')
ipsecEndPtLocalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 3, 1, 3), EndPtType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecEndPtLocalType.setStatus('current')
ipsecEndPtLocalAddr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 3, 1, 4), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecEndPtLocalAddr1.setStatus('current')
ipsecEndPtLocalAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 3, 1, 5), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecEndPtLocalAddr2.setStatus('current')
ipsecEndPtLocalProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecEndPtLocalProtocol.setStatus('current')
ipsecEndPtLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecEndPtLocalPort.setStatus('current')
ipsecEndPtRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecEndPtRemoteName.setStatus('current')
ipsecEndPtRemoteType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 3, 1, 9), EndPtType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecEndPtRemoteType.setStatus('current')
ipsecEndPtRemoteAddr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 3, 1, 10), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecEndPtRemoteAddr1.setStatus('current')
ipsecEndPtRemoteAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 3, 1, 11), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecEndPtRemoteAddr2.setStatus('current')
ipsecEndPtRemoteProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecEndPtRemoteProtocol.setStatus('current')
ipsecEndPtRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecEndPtRemotePort.setStatus('current')
ipsecSpiTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 4), )
if mibBuilder.loadTexts: ipsecSpiTable.setStatus('current')
ipsecSpiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 4, 1), ).setIndexNames((0, "IPsecT1-MIB", "ipsecTunIndex"), (0, "IPsecT1-MIB", "ipsecSpiIndex"))
if mibBuilder.loadTexts: ipsecSpiEntry.setStatus('current')
ipsecSpiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: ipsecSpiIndex.setStatus('current')
ipsecSpiDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSpiDirection.setStatus('current')
ipsecSpiValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSpiValue.setStatus('current')
ipsecSpiProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ah", 1), ("esp", 2), ("ipcomp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSpiProtocol.setStatus('current')
ipsecSpiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("expiring", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecSpiStatus.setStatus('current')
ipsecHistGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 1))
ipsecHistPhaseOne = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 2))
ipsecHistPhaseTwo = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3))
ipsecHistGlobalCntl = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 1, 1))
ipsecHistTableSize = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecHistTableSize.setStatus('current')
ikeTunnelHistTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 2, 1), )
if mibBuilder.loadTexts: ikeTunnelHistTable.setStatus('current')
ikeTunnelHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 2, 1, 1), ).setIndexNames((0, "IPsecT1-MIB", "ikeTunHistIndex"))
if mibBuilder.loadTexts: ikeTunnelHistEntry.setStatus('current')
ikeTunHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: ikeTunHistIndex.setStatus('current')
ikeTunHistTermReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("operRequest", 3), ("peerDelRequest", 4), ("peerLost", 5), ("seqNumRollOver", 6), ("localFailure", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunHistTermReason.setStatus('current')
ikeTunHistActiveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunHistActiveIndex.setStatus('current')
ikeTunHistPeerLocalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 2, 1, 1, 4), IkePeerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunHistPeerLocalType.setStatus('current')
ikeTunHistPeerLocalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunHistPeerLocalValue.setStatus('current')
ikeTunHistPeerIntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunHistPeerIntIndex.setStatus('current')
ikeTunHistPeerRemoteType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 2, 1, 1, 7), IkePeerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunHistPeerRemoteType.setStatus('current')
ikeTunHistPeerRemoteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunHistPeerRemoteValue.setStatus('current')
ikeTunHistLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 2, 1, 1, 9), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunHistLocalAddr.setStatus('current')
ikeTunHistLocalName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 2, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunHistLocalName.setStatus('current')
ikeTunHistRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 2, 1, 1, 11), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunHistRemoteAddr.setStatus('current')
ikeTunHistRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 2, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunHistRemoteName.setStatus('current')
ikeTunHistNegoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 2, 1, 1, 13), IkeNegoMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunHistNegoMode.setStatus('current')
ikeTunHistDiffHellmanGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 2, 1, 1, 14), DiffHellmanGrp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunHistDiffHellmanGrp.setStatus('current')
ikeTunHistEncryptAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 2, 1, 1, 15), EncryptAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunHistEncryptAlgo.setStatus('current')
ikeTunHistHashAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 2, 1, 1, 16), IkeHashAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunHistHashAlgo.setStatus('current')
ikeTunHistAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 2, 1, 1, 17), IkeAuthMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunHistAuthMethod.setStatus('current')
ikeTunHistLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 2, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunHistLifeTime.setStatus('current')
ikeTunHistStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 2, 1, 1, 19), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunHistStartTime.setStatus('current')
ikeTunHistActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 2, 1, 1, 20), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunHistActiveTime.setStatus('current')
ikeTunHistTotalRefreshes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunHistTotalRefreshes.setStatus('current')
ikeTunHistTotalSas = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunHistTotalSas.setStatus('current')
ikeTunHistInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunHistInOctets.setStatus('current')
ikeTunHistInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 2, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunHistInPkts.setStatus('current')
ikeTunHistInDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 2, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunHistInDropPkts.setStatus('current')
ikeTunHistInNotifys = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 2, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunHistInNotifys.setStatus('current')
ikeTunHistInP2Exchgs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 2, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunHistInP2Exchgs.setStatus('current')
ikeTunHistInP2ExchgInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 2, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunHistInP2ExchgInvalids.setStatus('current')
ikeTunHistInP2ExchgRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 2, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunHistInP2ExchgRejects.setStatus('current')
ikeTunHistInP2SaDelRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 2, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunHistInP2SaDelRequests.setStatus('current')
ikeTunHistOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 2, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunHistOutOctets.setStatus('current')
ikeTunHistOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 2, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunHistOutPkts.setStatus('current')
ikeTunHistOutDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 2, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunHistOutDropPkts.setStatus('current')
ikeTunHistOutNotifys = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 2, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunHistOutNotifys.setStatus('current')
ikeTunHistOutP2Exchgs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 2, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunHistOutP2Exchgs.setStatus('current')
ikeTunHistOutP2ExchgInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 2, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunHistOutP2ExchgInvalids.setStatus('current')
ikeTunHistOutP2ExchgRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 2, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunHistOutP2ExchgRejects.setStatus('current')
ikeTunHistOutP2SaDelRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 2, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeTunHistOutP2SaDelRequests.setStatus('current')
ipsecTunnelHistTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1), )
if mibBuilder.loadTexts: ipsecTunnelHistTable.setStatus('current')
ipsecTunnelHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1), ).setIndexNames((0, "IPsecT1-MIB", "ipsecTunHistIndex"))
if mibBuilder.loadTexts: ipsecTunnelHistEntry.setStatus('current')
ipsecTunHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: ipsecTunHistIndex.setStatus('current')
ipsecTunHistTermReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("operRequest", 3), ("peerDelRequest", 4), ("peerLost", 5), ("seqNumRollOver", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistTermReason.setStatus('current')
ipsecTunHistActiveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistActiveIndex.setStatus('current')
ipsecTunHistIkeTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistIkeTunnelIndex.setStatus('current')
ipsecTunHistLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 5), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistLocalAddr.setStatus('current')
ipsecTunHistRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 6), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistRemoteAddr.setStatus('current')
ipsecTunHistKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 7), KeyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistKeyType.setStatus('current')
ipsecTunHistEncapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 8), EncapMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistEncapMode.setStatus('current')
ipsecTunHistLifeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistLifeSize.setStatus('current')
ipsecTunHistLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistLifeTime.setStatus('current')
ipsecTunHistStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistStartTime.setStatus('current')
ipsecTunHistActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 12), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistActiveTime.setStatus('current')
ipsecTunHistTotalRefreshes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistTotalRefreshes.setStatus('current')
ipsecTunHistTotalSas = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistTotalSas.setStatus('current')
ipsecTunHistInSaDiffHellmanGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 15), DiffHellmanGrp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistInSaDiffHellmanGrp.setStatus('current')
ipsecTunHistInSaEncryptAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 16), EncryptAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistInSaEncryptAlgo.setStatus('current')
ipsecTunHistInSaAhAuthAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 17), AuthAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistInSaAhAuthAlgo.setStatus('current')
ipsecTunHistInSaEspAuthAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 18), AuthAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistInSaEspAuthAlgo.setStatus('current')
ipsecTunHistInSaDecompAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 19), CompAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistInSaDecompAlgo.setStatus('current')
ipsecTunHistOutSaDiffHellmanGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 20), DiffHellmanGrp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistOutSaDiffHellmanGrp.setStatus('current')
ipsecTunHistOutSaEncryptAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 21), EncryptAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistOutSaEncryptAlgo.setStatus('current')
ipsecTunHistOutSaAhAuthAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 22), AuthAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistOutSaAhAuthAlgo.setStatus('current')
ipsecTunHistOutSaEspAuthAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 23), AuthAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistOutSaEspAuthAlgo.setStatus('current')
ipsecTunHistOutSaCompAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 24), CompAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistOutSaCompAlgo.setStatus('current')
ipsecTunHistInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistInOctets.setStatus('current')
ipsecTunHistHcInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistHcInOctets.setStatus('current')
ipsecTunHistInOctWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistInOctWraps.setStatus('current')
ipsecTunHistInDecompOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistInDecompOctets.setStatus('current')
ipsecTunHistHcInDecompOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistHcInDecompOctets.setStatus('current')
ipsecTunHistInDecompOctWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistInDecompOctWraps.setStatus('current')
ipsecTunHistInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistInPkts.setStatus('current')
ipsecTunHistInDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistInDropPkts.setStatus('current')
ipsecTunHistInReplayDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistInReplayDropPkts.setStatus('current')
ipsecTunHistInAuths = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistInAuths.setStatus('current')
ipsecTunHistInAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistInAuthFails.setStatus('current')
ipsecTunHistInDecrypts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistInDecrypts.setStatus('current')
ipsecTunHistInDecryptFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistInDecryptFails.setStatus('current')
ipsecTunHistOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistOutOctets.setStatus('current')
ipsecTunHistHcOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistHcOutOctets.setStatus('current')
ipsecTunHistOutOctWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistOutOctWraps.setStatus('current')
ipsecTunHistOutUncompOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistOutUncompOctets.setStatus('current')
ipsecTunHistHcOutUncompOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistHcOutUncompOctets.setStatus('current')
ipsecTunHistOutUncompOctWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistOutUncompOctWraps.setStatus('current')
ipsecTunHistOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistOutPkts.setStatus('current')
ipsecTunHistOutDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistOutDropPkts.setStatus('current')
ipsecTunHistOutAuths = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistOutAuths.setStatus('current')
ipsecTunHistOutAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistOutAuthFails.setStatus('current')
ipsecTunHistOutEncrypts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistOutEncrypts.setStatus('current')
ipsecTunHistOutEncryptFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 1, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecTunHistOutEncryptFails.setStatus('current')
ipsecEndPtHistTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 2), )
if mibBuilder.loadTexts: ipsecEndPtHistTable.setStatus('current')
ipsecEndPtHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 2, 1), ).setIndexNames((0, "IPsecT1-MIB", "ipsecEndPtHistIndex"))
if mibBuilder.loadTexts: ipsecEndPtHistEntry.setStatus('current')
ipsecEndPtHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: ipsecEndPtHistIndex.setStatus('current')
ipsecEndPtHistTunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecEndPtHistTunIndex.setStatus('current')
ipsecEndPtHistActiveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecEndPtHistActiveIndex.setStatus('current')
ipsecEndPtHistLocalName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecEndPtHistLocalName.setStatus('current')
ipsecEndPtHistLocalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("singleIpAddr", 1), ("ipAddrRange", 2), ("ipSubnet", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecEndPtHistLocalType.setStatus('current')
ipsecEndPtHistLocalAddr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 2, 1, 6), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecEndPtHistLocalAddr1.setStatus('current')
ipsecEndPtHistLocalAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 2, 1, 7), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecEndPtHistLocalAddr2.setStatus('current')
ipsecEndPtHistLocalProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecEndPtHistLocalProtocol.setStatus('current')
ipsecEndPtHistLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecEndPtHistLocalPort.setStatus('current')
ipsecEndPtHistRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecEndPtHistRemoteName.setStatus('current')
ipsecEndPtHistRemoteType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("singleIpAddr", 1), ("ipAddrRange", 2), ("ipSubnet", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecEndPtHistRemoteType.setStatus('current')
ipsecEndPtHistRemoteAddr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 2, 1, 12), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecEndPtHistRemoteAddr1.setStatus('current')
ipsecEndPtHistRemoteAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 2, 1, 13), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecEndPtHistRemoteAddr2.setStatus('current')
ipsecEndPtHistRemoteProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecEndPtHistRemoteProtocol.setStatus('current')
ipsecEndPtHistRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 4, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecEndPtHistRemotePort.setStatus('current')
ipsecFailGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 5, 1))
ipsecFailPhaseOne = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 5, 2))
ipsecFailPhaseTwo = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 5, 3))
ipsecFailGlobalCntl = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 5, 1, 1))
ipsecFailTableSize = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecFailTableSize.setStatus('current')
ikeFailTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 5, 2, 1), )
if mibBuilder.loadTexts: ikeFailTable.setStatus('current')
ikeFailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 5, 2, 1, 1), ).setIndexNames((0, "IPsecT1-MIB", "ikeFailIndex"))
if mibBuilder.loadTexts: ikeFailEntry.setStatus('current')
ikeFailIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 5, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: ikeFailIndex.setStatus('current')
ikeFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("other", 1), ("peerDelRequest", 2), ("peerLost", 3), ("localFailure", 4), ("seqNumRollOver", 5), ("authFailure", 6), ("hashValidation", 7), ("encryptFailure", 8), ("internalError", 9), ("sysCapExceeded", 10), ("proposalFailure", 11), ("peerCertUnavailable", 12), ("peerCertNotValid", 13), ("localCertExpired", 14), ("crlFailure", 15), ("peerEncodingError", 16), ("nonExistentSa", 17), ("operRequest", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeFailReason.setStatus('current')
ikeFailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 5, 2, 1, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeFailTime.setStatus('current')
ikeFailLocalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 5, 2, 1, 1, 4), IkePeerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeFailLocalType.setStatus('current')
ikeFailLocalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 5, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeFailLocalValue.setStatus('current')
ikeFailRemoteType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 5, 2, 1, 1, 6), IkePeerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeFailRemoteType.setStatus('current')
ikeFailRemoteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 5, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeFailRemoteValue.setStatus('current')
ikeFailLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 5, 2, 1, 1, 8), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeFailLocalAddr.setStatus('current')
ikeFailRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 5, 2, 1, 1, 9), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikeFailRemoteAddr.setStatus('current')
ipsecFailTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 5, 3, 1), )
if mibBuilder.loadTexts: ipsecFailTable.setStatus('current')
ipsecFailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 5, 3, 1, 1), ).setIndexNames((0, "IPsecT1-MIB", "ipsecFailIndex"))
if mibBuilder.loadTexts: ipsecFailEntry.setStatus('current')
ipsecFailIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 5, 3, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: ipsecFailIndex.setStatus('current')
ipsecFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 5, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("other", 1), ("internalError", 2), ("peerEncodingError", 3), ("proposalFailure", 4), ("protocolUseFail", 5), ("nonExistentSa", 6), ("decryptFailure", 7), ("encryptFailure", 8), ("inAuthFailure", 9), ("outAuthFailure", 10), ("compression", 11), ("sysCapExceeded", 12), ("peerDelRequest", 13), ("peerLost", 14), ("seqNumRollOver", 15), ("operRequest", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecFailReason.setStatus('current')
ipsecFailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 5, 3, 1, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecFailTime.setStatus('current')
ipsecFailTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 5, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecFailTunnelIndex.setStatus('current')
ipsecFailSaSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 5, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecFailSaSpi.setStatus('current')
ipsecFailPktSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 5, 3, 1, 1, 6), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecFailPktSrcAddr.setStatus('current')
ipsecFailPktDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 5, 3, 1, 1, 7), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipsecFailPktDstAddr.setStatus('current')
ipsecTrapCntlIkeTunnelStart = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 6, 1), TrapStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecTrapCntlIkeTunnelStart.setStatus('current')
ipsecTrapCntlIkeTunnelStop = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 6, 2), TrapStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecTrapCntlIkeTunnelStop.setStatus('current')
ipsecTrapCntlIkeSysFailure = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 6, 3), TrapStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecTrapCntlIkeSysFailure.setStatus('current')
ipsecTrapCntlIkeCertCrlFailure = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 6, 4), TrapStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecTrapCntlIkeCertCrlFailure.setStatus('current')
ipsecTrapCntlIkeProtocolFailure = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 6, 5), TrapStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecTrapCntlIkeProtocolFailure.setStatus('current')
ipsecTrapCntlIkeNoSa = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 6, 6), TrapStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecTrapCntlIkeNoSa.setStatus('current')
ipsecTrapCntlipsecTunnelStart = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 6, 7), TrapStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecTrapCntlipsecTunnelStart.setStatus('current')
ipsecTrapCntlipsecTunnelStop = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 6, 8), TrapStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecTrapCntlipsecTunnelStop.setStatus('current')
ipsecTrapCntlipsecSysFailure = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 6, 9), TrapStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecTrapCntlipsecSysFailure.setStatus('current')
ipsecTrapCntlipsecSetUpFailure = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 6, 10), TrapStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecTrapCntlipsecSetUpFailure.setStatus('current')
ipsecTrapCntlipsecEarlyTunTerm = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 6, 11), TrapStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecTrapCntlipsecEarlyTunTerm.setStatus('current')
ipsecTrapCntlipsecProtocolFailure = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 6, 12), TrapStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecTrapCntlipsecProtocolFailure.setStatus('current')
ipsecTrapCntlipsecNoSa = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 1, 6, 13), TrapStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsecTrapCntlipsecNoSa.setStatus('current')
ipsecMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 0))
ikeTunnelStart = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 0, 1)).setObjects(("IPsecT1-MIB", "ikePeerLocalType"), ("IPsecT1-MIB", "ikePeerLocalValue"), ("IPsecT1-MIB", "ikePeerLocalAddr"), ("IPsecT1-MIB", "ikePeerRemoteType"), ("IPsecT1-MIB", "ikePeerRemoteValue"), ("IPsecT1-MIB", "ikePeerRemoteAddr"), ("IPsecT1-MIB", "ikePeerIntIndex"), ("IPsecT1-MIB", "ikeTunIndex"))
if mibBuilder.loadTexts: ikeTunnelStart.setStatus('current')
ikeTunnelStop = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 0, 2)).setObjects(("IPsecT1-MIB", "ikePeerLocalType"), ("IPsecT1-MIB", "ikePeerLocalValue"), ("IPsecT1-MIB", "ikePeerLocalAddr"), ("IPsecT1-MIB", "ikePeerRemoteType"), ("IPsecT1-MIB", "ikePeerRemoteValue"), ("IPsecT1-MIB", "ikePeerRemoteAddr"), ("IPsecT1-MIB", "ikePeerIntIndex"), ("IPsecT1-MIB", "ikeTunIndex"))
if mibBuilder.loadTexts: ikeTunnelStop.setStatus('current')
ikeSysFailure = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 0, 3)).setObjects(("IPsecT1-MIB", "ikePeerLocalType"), ("IPsecT1-MIB", "ikePeerLocalValue"), ("IPsecT1-MIB", "ikePeerLocalAddr"), ("IPsecT1-MIB", "ikePeerRemoteType"), ("IPsecT1-MIB", "ikePeerRemoteValue"), ("IPsecT1-MIB", "ikePeerRemoteAddr"), ("IPsecT1-MIB", "ikePeerIntIndex"))
if mibBuilder.loadTexts: ikeSysFailure.setStatus('current')
ikeCertCrlFailure = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 0, 4)).setObjects(("IPsecT1-MIB", "ikePeerLocalType"), ("IPsecT1-MIB", "ikePeerLocalValue"), ("IPsecT1-MIB", "ikePeerLocalAddr"), ("IPsecT1-MIB", "ikePeerRemoteType"), ("IPsecT1-MIB", "ikePeerRemoteValue"), ("IPsecT1-MIB", "ikePeerRemoteAddr"), ("IPsecT1-MIB", "ikePeerIntIndex"))
if mibBuilder.loadTexts: ikeCertCrlFailure.setStatus('current')
ikeProtocolFailure = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 0, 5)).setObjects(("IPsecT1-MIB", "ikePeerLocalType"), ("IPsecT1-MIB", "ikePeerLocalValue"), ("IPsecT1-MIB", "ikePeerLocalAddr"), ("IPsecT1-MIB", "ikePeerRemoteType"), ("IPsecT1-MIB", "ikePeerRemoteValue"), ("IPsecT1-MIB", "ikePeerRemoteAddr"), ("IPsecT1-MIB", "ikePeerIntIndex"))
if mibBuilder.loadTexts: ikeProtocolFailure.setStatus('current')
ikeNoSa = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 0, 6)).setObjects(("IPsecT1-MIB", "ikePeerLocalType"), ("IPsecT1-MIB", "ikePeerLocalValue"), ("IPsecT1-MIB", "ikePeerLocalAddr"), ("IPsecT1-MIB", "ikePeerRemoteType"), ("IPsecT1-MIB", "ikePeerRemoteValue"), ("IPsecT1-MIB", "ikePeerRemoteAddr"), ("IPsecT1-MIB", "ikePeerIntIndex"))
if mibBuilder.loadTexts: ikeNoSa.setStatus('current')
ipsecTunnelStart = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 0, 7)).setObjects(("IPsecT1-MIB", "ipsecTunIndex"))
if mibBuilder.loadTexts: ipsecTunnelStart.setStatus('current')
ipsecTunnelStop = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 0, 8)).setObjects(("IPsecT1-MIB", "ipsecTunIndex"))
if mibBuilder.loadTexts: ipsecTunnelStop.setStatus('current')
ipsecSysFailure = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 0, 9)).setObjects(("IPsecT1-MIB", "ikePeerLocalType"), ("IPsecT1-MIB", "ikePeerLocalValue"), ("IPsecT1-MIB", "ikePeerLocalAddr"), ("IPsecT1-MIB", "ikePeerRemoteType"), ("IPsecT1-MIB", "ikePeerRemoteValue"), ("IPsecT1-MIB", "ikePeerRemoteAddr"), ("IPsecT1-MIB", "ikePeerIntIndex"), ("IPsecT1-MIB", "ipsecTunIndex"), ("IPsecT1-MIB", "ipsecSpiIndex"))
if mibBuilder.loadTexts: ipsecSysFailure.setStatus('current')
ipsecSetUpFailure = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 0, 10)).setObjects(("IPsecT1-MIB", "ikePeerLocalType"), ("IPsecT1-MIB", "ikePeerLocalValue"), ("IPsecT1-MIB", "ikePeerLocalAddr"), ("IPsecT1-MIB", "ikePeerRemoteType"), ("IPsecT1-MIB", "ikePeerRemoteValue"), ("IPsecT1-MIB", "ikePeerRemoteAddr"), ("IPsecT1-MIB", "ikePeerIntIndex"))
if mibBuilder.loadTexts: ipsecSetUpFailure.setStatus('current')
ipsecEarilyTunnelTerm = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 0, 11)).setObjects(("IPsecT1-MIB", "ipsecTunIndex"), ("IPsecT1-MIB", "ipsecSpiIndex"))
if mibBuilder.loadTexts: ipsecEarilyTunnelTerm.setStatus('current')
ipsecProtocolFailure = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 0, 12)).setObjects(("IPsecT1-MIB", "ipsecTunIndex"), ("IPsecT1-MIB", "ipsecSpiIndex"))
if mibBuilder.loadTexts: ipsecProtocolFailure.setStatus('current')
ipsecNoSa = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 0, 13)).setObjects(("IPsecT1-MIB", "ipsecTunIndex"), ("IPsecT1-MIB", "ipsecSpiIndex"))
if mibBuilder.loadTexts: ipsecNoSa.setStatus('current')
ipsecMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 2))
ipsecMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 2, 1))
ipsecMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 2, 2))
ipsecMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 2, 2, 1)).setObjects(("IPsecT1-MIB", "ipsecLevelsGroup"), ("IPsecT1-MIB", "ipsecPhaseOneGroup"), ("IPsecT1-MIB", "ipsecPhaseTwoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsecMIBCompliance = ipsecMIBCompliance.setStatus('current')
ipsecLevelsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 2, 1, 1)).setObjects(("IPsecT1-MIB", "ipsecMibLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsecLevelsGroup = ipsecLevelsGroup.setStatus('current')
ipsecPhaseOneGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 2, 1, 2)).setObjects(("IPsecT1-MIB", "ikeGlobalActiveTunnels"), ("IPsecT1-MIB", "ikeGlobalPreviousTunnels"), ("IPsecT1-MIB", "ikeGlobalInOctets"), ("IPsecT1-MIB", "ikeGlobalInPkts"), ("IPsecT1-MIB", "ikeGlobalInDropPkts"), ("IPsecT1-MIB", "ikeGlobalInNotifys"), ("IPsecT1-MIB", "ikeGlobalInP2Exchgs"), ("IPsecT1-MIB", "ikeGlobalInP2ExchgInvalids"), ("IPsecT1-MIB", "ikeGlobalInP2ExchgRejects"), ("IPsecT1-MIB", "ikeGlobalInP2SaDelRequests"), ("IPsecT1-MIB", "ikeGlobalOutOctets"), ("IPsecT1-MIB", "ikeGlobalOutPkts"), ("IPsecT1-MIB", "ikeGlobalOutDropPkts"), ("IPsecT1-MIB", "ikeGlobalOutNotifys"), ("IPsecT1-MIB", "ikeGlobalOutP2Exchgs"), ("IPsecT1-MIB", "ikeGlobalOutP2ExchgInvalids"), ("IPsecT1-MIB", "ikeGlobalOutP2ExchgRejects"), ("IPsecT1-MIB", "ikeGlobalOutP2SaDelRequests"), ("IPsecT1-MIB", "ikeGlobalInitTunnels"), ("IPsecT1-MIB", "ikeGlobalInitTunnelFails"), ("IPsecT1-MIB", "ikeGlobalRespTunnelFails"), ("IPsecT1-MIB", "ikeGlobalSysCapFails"), ("IPsecT1-MIB", "ikeGlobalAuthFails"), ("IPsecT1-MIB", "ikeGlobalDecryptFails"), ("IPsecT1-MIB", "ikeGlobalHashValidFails"), ("IPsecT1-MIB", "ikeGlobalNoSaFails"), ("IPsecT1-MIB", "ikePeerLocalAddr"), ("IPsecT1-MIB", "ikePeerRemoteAddr"), ("IPsecT1-MIB", "ikePeerActiveTime"), ("IPsecT1-MIB", "ikePeerActiveTunnelIndex"), ("IPsecT1-MIB", "ikeTunLocalType"), ("IPsecT1-MIB", "ikeTunLocalValue"), ("IPsecT1-MIB", "ikeTunLocalAddr"), ("IPsecT1-MIB", "ikeTunLocalName"), ("IPsecT1-MIB", "ikeTunRemoteType"), ("IPsecT1-MIB", "ikeTunRemoteValue"), ("IPsecT1-MIB", "ikeTunRemoteAddr"), ("IPsecT1-MIB", "ikeTunRemoteName"), ("IPsecT1-MIB", "ikeTunNegoMode"), ("IPsecT1-MIB", "ikeTunDiffHellmanGrp"), ("IPsecT1-MIB", "ikeTunEncryptAlgo"), ("IPsecT1-MIB", "ikeTunHashAlgo"), ("IPsecT1-MIB", "ikeTunAuthMethod"), ("IPsecT1-MIB", "ikeTunLifeTime"), ("IPsecT1-MIB", "ikeTunActiveTime"), ("IPsecT1-MIB", "ikeTunSaRefreshThreshold"), ("IPsecT1-MIB", "ikeTunTotalRefreshes"), ("IPsecT1-MIB", "ikeTunInOctets"), ("IPsecT1-MIB", "ikeTunInPkts"), ("IPsecT1-MIB", "ikeTunInDropPkts"), ("IPsecT1-MIB", "ikeTunInNotifys"), ("IPsecT1-MIB", "ikeTunInP2Exchgs"), ("IPsecT1-MIB", "ikeTunInP2ExchgInvalids"), ("IPsecT1-MIB", "ikeTunInP2ExchgRejects"), ("IPsecT1-MIB", "ikeTunInP2SaDelRequests"), ("IPsecT1-MIB", "ikeTunOutOctets"), ("IPsecT1-MIB", "ikeTunOutPkts"), ("IPsecT1-MIB", "ikeTunOutDropPkts"), ("IPsecT1-MIB", "ikeTunOutNotifys"), ("IPsecT1-MIB", "ikeTunOutP2Exchgs"), ("IPsecT1-MIB", "ikeTunOutP2ExchgInvalids"), ("IPsecT1-MIB", "ikeTunOutP2ExchgRejects"), ("IPsecT1-MIB", "ikeTunOutP2SaDelRequests"), ("IPsecT1-MIB", "ikeTunStatus"), ("IPsecT1-MIB", "ikePeerCorripsecTunIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsecPhaseOneGroup = ipsecPhaseOneGroup.setStatus('current')
ipsecPhaseTwoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 2, 1, 3)).setObjects(("IPsecT1-MIB", "ipsecGlobalActiveTunnels"), ("IPsecT1-MIB", "ipsecGlobalPreviousTunnels"), ("IPsecT1-MIB", "ipsecGlobalInOctets"), ("IPsecT1-MIB", "ipsecGlobalHcInOctets"), ("IPsecT1-MIB", "ipsecGlobalInOctWraps"), ("IPsecT1-MIB", "ipsecGlobalInDecompOctets"), ("IPsecT1-MIB", "ipsecGlobalHcInDecompOctets"), ("IPsecT1-MIB", "ipsecGlobalInDecompOctWraps"), ("IPsecT1-MIB", "ipsecGlobalInPkts"), ("IPsecT1-MIB", "ipsecGlobalInDrops"), ("IPsecT1-MIB", "ipsecGlobalInReplayDrops"), ("IPsecT1-MIB", "ipsecGlobalInAuths"), ("IPsecT1-MIB", "ipsecGlobalInAuthFails"), ("IPsecT1-MIB", "ipsecGlobalInDecrypts"), ("IPsecT1-MIB", "ipsecGlobalInDecryptFails"), ("IPsecT1-MIB", "ipsecGlobalOutOctets"), ("IPsecT1-MIB", "ipsecGlobalHcOutOctets"), ("IPsecT1-MIB", "ipsecGlobalOutOctWraps"), ("IPsecT1-MIB", "ipsecGlobalOutUncompOctets"), ("IPsecT1-MIB", "ipsecGlobalHcOutUncompOctets"), ("IPsecT1-MIB", "ipsecGlobalOutUncompOctWraps"), ("IPsecT1-MIB", "ipsecGlobalOutPkts"), ("IPsecT1-MIB", "ipsecGlobalOutDrops"), ("IPsecT1-MIB", "ipsecGlobalOutAuths"), ("IPsecT1-MIB", "ipsecGlobalOutAuthFails"), ("IPsecT1-MIB", "ipsecGlobalOutEncrypts"), ("IPsecT1-MIB", "ipsecGlobalOutEncryptFails"), ("IPsecT1-MIB", "ipsecGlobalProtocolUseFails"), ("IPsecT1-MIB", "ipsecGlobalNoSaFails"), ("IPsecT1-MIB", "ipsecGlobalSysCapFails"), ("IPsecT1-MIB", "ipsecTunIkeTunnelIndex"), ("IPsecT1-MIB", "ipsecTunIkeTunnelAlive"), ("IPsecT1-MIB", "ipsecTunLocalAddr"), ("IPsecT1-MIB", "ipsecTunRemoteAddr"), ("IPsecT1-MIB", "ipsecTunKeyType"), ("IPsecT1-MIB", "ipsecTunEncapMode"), ("IPsecT1-MIB", "ipsecTunLifeSize"), ("IPsecT1-MIB", "ipsecTunLifeTime"), ("IPsecT1-MIB", "ipsecTunActiveTime"), ("IPsecT1-MIB", "ipsecTunSaLifeSizeThreshold"), ("IPsecT1-MIB", "ipsecTunSaLifeTimeThreshold"), ("IPsecT1-MIB", "ipsecTunTotalRefreshes"), ("IPsecT1-MIB", "ipsecTunExpiredSaInstances"), ("IPsecT1-MIB", "ipsecTunCurrentSaInstances"), ("IPsecT1-MIB", "ipsecTunInSaDiffHellmanGrp"), ("IPsecT1-MIB", "ipsecTunInSaEncryptAlgo"), ("IPsecT1-MIB", "ipsecTunInSaAhAuthAlgo"), ("IPsecT1-MIB", "ipsecTunInSaEspAuthAlgo"), ("IPsecT1-MIB", "ipsecTunInSaDecompAlgo"), ("IPsecT1-MIB", "ipsecTunOutSaDiffHellmanGrp"), ("IPsecT1-MIB", "ipsecTunOutSaEncryptAlgo"), ("IPsecT1-MIB", "ipsecTunOutSaAhAuthAlgo"), ("IPsecT1-MIB", "ipsecTunOutSaEspAuthAlgo"), ("IPsecT1-MIB", "ipsecTunOutSaCompAlgo"), ("IPsecT1-MIB", "ipsecTunInOctets"), ("IPsecT1-MIB", "ipsecTunHcInOctets"), ("IPsecT1-MIB", "ipsecTunInOctWraps"), ("IPsecT1-MIB", "ipsecTunInDecompOctets"), ("IPsecT1-MIB", "ipsecTunHcInDecompOctets"), ("IPsecT1-MIB", "ipsecTunInDecompOctWraps"), ("IPsecT1-MIB", "ipsecTunInPkts"), ("IPsecT1-MIB", "ipsecTunInDropPkts"), ("IPsecT1-MIB", "ipsecTunInReplayDropPkts"), ("IPsecT1-MIB", "ipsecTunInAuths"), ("IPsecT1-MIB", "ipsecTunInAuthFails"), ("IPsecT1-MIB", "ipsecTunInDecrypts"), ("IPsecT1-MIB", "ipsecTunInDecryptFails"), ("IPsecT1-MIB", "ipsecTunOutOctets"), ("IPsecT1-MIB", "ipsecTunHcOutOctets"), ("IPsecT1-MIB", "ipsecTunOutOctWraps"), ("IPsecT1-MIB", "ipsecTunOutUncompOctets"), ("IPsecT1-MIB", "ipsecTunHcOutUncompOctets"), ("IPsecT1-MIB", "ipsecTunOutUncompOctWraps"), ("IPsecT1-MIB", "ipsecTunOutPkts"), ("IPsecT1-MIB", "ipsecTunOutDropPkts"), ("IPsecT1-MIB", "ipsecTunOutAuths"), ("IPsecT1-MIB", "ipsecTunOutAuthFails"), ("IPsecT1-MIB", "ipsecTunOutEncrypts"), ("IPsecT1-MIB", "ipsecTunOutEncryptFails"), ("IPsecT1-MIB", "ipsecTunStatus"), ("IPsecT1-MIB", "ipsecEndPtLocalName"), ("IPsecT1-MIB", "ipsecEndPtLocalType"), ("IPsecT1-MIB", "ipsecEndPtLocalAddr1"), ("IPsecT1-MIB", "ipsecEndPtLocalAddr2"), ("IPsecT1-MIB", "ipsecEndPtLocalProtocol"), ("IPsecT1-MIB", "ipsecEndPtLocalPort"), ("IPsecT1-MIB", "ipsecEndPtRemoteName"), ("IPsecT1-MIB", "ipsecEndPtRemoteType"), ("IPsecT1-MIB", "ipsecEndPtRemoteAddr1"), ("IPsecT1-MIB", "ipsecEndPtRemoteAddr2"), ("IPsecT1-MIB", "ipsecEndPtRemoteProtocol"), ("IPsecT1-MIB", "ipsecEndPtRemotePort"), ("IPsecT1-MIB", "ipsecSpiDirection"), ("IPsecT1-MIB", "ipsecSpiValue"), ("IPsecT1-MIB", "ipsecSpiProtocol"), ("IPsecT1-MIB", "ipsecSpiStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsecPhaseTwoGroup = ipsecPhaseTwoGroup.setStatus('current')
ipsecHistoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 2, 1, 4)).setObjects(("IPsecT1-MIB", "ipsecHistTableSize"), ("IPsecT1-MIB", "ikeTunHistTermReason"), ("IPsecT1-MIB", "ikeTunHistActiveIndex"), ("IPsecT1-MIB", "ikeTunHistPeerLocalType"), ("IPsecT1-MIB", "ikeTunHistPeerLocalValue"), ("IPsecT1-MIB", "ikeTunHistPeerIntIndex"), ("IPsecT1-MIB", "ikeTunHistPeerRemoteType"), ("IPsecT1-MIB", "ikeTunHistPeerRemoteValue"), ("IPsecT1-MIB", "ikeTunHistLocalAddr"), ("IPsecT1-MIB", "ikeTunHistLocalName"), ("IPsecT1-MIB", "ikeTunHistRemoteAddr"), ("IPsecT1-MIB", "ikeTunHistRemoteName"), ("IPsecT1-MIB", "ikeTunHistNegoMode"), ("IPsecT1-MIB", "ikeTunHistDiffHellmanGrp"), ("IPsecT1-MIB", "ikeTunHistEncryptAlgo"), ("IPsecT1-MIB", "ikeTunHistHashAlgo"), ("IPsecT1-MIB", "ikeTunHistAuthMethod"), ("IPsecT1-MIB", "ikeTunHistLifeTime"), ("IPsecT1-MIB", "ikeTunHistStartTime"), ("IPsecT1-MIB", "ikeTunHistActiveTime"), ("IPsecT1-MIB", "ikeTunHistTotalRefreshes"), ("IPsecT1-MIB", "ikeTunHistTotalSas"), ("IPsecT1-MIB", "ikeTunHistInOctets"), ("IPsecT1-MIB", "ikeTunHistInPkts"), ("IPsecT1-MIB", "ikeTunHistInDropPkts"), ("IPsecT1-MIB", "ikeTunHistInNotifys"), ("IPsecT1-MIB", "ikeTunHistInP2Exchgs"), ("IPsecT1-MIB", "ikeTunHistInP2ExchgInvalids"), ("IPsecT1-MIB", "ikeTunHistInP2ExchgRejects"), ("IPsecT1-MIB", "ikeTunHistInP2SaDelRequests"), ("IPsecT1-MIB", "ikeTunHistOutOctets"), ("IPsecT1-MIB", "ikeTunHistOutPkts"), ("IPsecT1-MIB", "ikeTunHistOutDropPkts"), ("IPsecT1-MIB", "ikeTunHistOutNotifys"), ("IPsecT1-MIB", "ikeTunHistOutP2Exchgs"), ("IPsecT1-MIB", "ikeTunHistOutP2ExchgInvalids"), ("IPsecT1-MIB", "ikeTunHistOutP2ExchgRejects"), ("IPsecT1-MIB", "ikeTunHistOutP2SaDelRequests"), ("IPsecT1-MIB", "ipsecTunHistTermReason"), ("IPsecT1-MIB", "ipsecTunHistActiveIndex"), ("IPsecT1-MIB", "ipsecTunHistIkeTunnelIndex"), ("IPsecT1-MIB", "ipsecTunHistLocalAddr"), ("IPsecT1-MIB", "ipsecTunHistRemoteAddr"), ("IPsecT1-MIB", "ipsecTunHistKeyType"), ("IPsecT1-MIB", "ipsecTunHistEncapMode"), ("IPsecT1-MIB", "ipsecTunHistLifeSize"), ("IPsecT1-MIB", "ipsecTunHistLifeTime"), ("IPsecT1-MIB", "ipsecTunHistStartTime"), ("IPsecT1-MIB", "ipsecTunHistActiveTime"), ("IPsecT1-MIB", "ipsecTunHistTotalRefreshes"), ("IPsecT1-MIB", "ipsecTunHistTotalSas"), ("IPsecT1-MIB", "ipsecTunHistInSaDiffHellmanGrp"), ("IPsecT1-MIB", "ipsecTunHistInSaEncryptAlgo"), ("IPsecT1-MIB", "ipsecTunHistInSaAhAuthAlgo"), ("IPsecT1-MIB", "ipsecTunHistInSaEspAuthAlgo"), ("IPsecT1-MIB", "ipsecTunHistInSaDecompAlgo"), ("IPsecT1-MIB", "ipsecTunHistOutSaDiffHellmanGrp"), ("IPsecT1-MIB", "ipsecTunHistOutSaEncryptAlgo"), ("IPsecT1-MIB", "ipsecTunHistOutSaAhAuthAlgo"), ("IPsecT1-MIB", "ipsecTunHistOutSaEspAuthAlgo"), ("IPsecT1-MIB", "ipsecTunHistOutSaCompAlgo"), ("IPsecT1-MIB", "ipsecTunHistInOctets"), ("IPsecT1-MIB", "ipsecTunHistHcInOctets"), ("IPsecT1-MIB", "ipsecTunHistInOctWraps"), ("IPsecT1-MIB", "ipsecTunHistInDecompOctets"), ("IPsecT1-MIB", "ipsecTunHistHcInDecompOctets"), ("IPsecT1-MIB", "ipsecTunHistInDecompOctWraps"), ("IPsecT1-MIB", "ipsecTunHistInPkts"), ("IPsecT1-MIB", "ipsecTunHistInDropPkts"), ("IPsecT1-MIB", "ipsecTunHistInReplayDropPkts"), ("IPsecT1-MIB", "ipsecTunHistInAuths"), ("IPsecT1-MIB", "ipsecTunHistInAuthFails"), ("IPsecT1-MIB", "ipsecTunHistInDecrypts"), ("IPsecT1-MIB", "ipsecTunHistInDecryptFails"), ("IPsecT1-MIB", "ipsecTunHistOutOctets"), ("IPsecT1-MIB", "ipsecTunHistHcOutOctets"), ("IPsecT1-MIB", "ipsecTunHistOutOctWraps"), ("IPsecT1-MIB", "ipsecTunHistOutUncompOctets"), ("IPsecT1-MIB", "ipsecTunHistHcOutUncompOctets"), ("IPsecT1-MIB", "ipsecTunHistOutUncompOctWraps"), ("IPsecT1-MIB", "ipsecTunHistOutPkts"), ("IPsecT1-MIB", "ipsecTunHistOutDropPkts"), ("IPsecT1-MIB", "ipsecTunHistOutAuths"), ("IPsecT1-MIB", "ipsecTunHistOutAuthFails"), ("IPsecT1-MIB", "ipsecTunHistOutEncrypts"), ("IPsecT1-MIB", "ipsecTunHistOutEncryptFails"), ("IPsecT1-MIB", "ipsecEndPtHistTunIndex"), ("IPsecT1-MIB", "ipsecEndPtHistActiveIndex"), ("IPsecT1-MIB", "ipsecEndPtHistLocalName"), ("IPsecT1-MIB", "ipsecEndPtHistLocalType"), ("IPsecT1-MIB", "ipsecEndPtHistLocalAddr1"), ("IPsecT1-MIB", "ipsecEndPtHistLocalAddr2"), ("IPsecT1-MIB", "ipsecEndPtHistLocalProtocol"), ("IPsecT1-MIB", "ipsecEndPtHistLocalPort"), ("IPsecT1-MIB", "ipsecEndPtHistRemoteName"), ("IPsecT1-MIB", "ipsecEndPtHistRemoteType"), ("IPsecT1-MIB", "ipsecEndPtHistRemoteAddr1"), ("IPsecT1-MIB", "ipsecEndPtHistRemoteAddr2"), ("IPsecT1-MIB", "ipsecEndPtHistRemoteProtocol"), ("IPsecT1-MIB", "ipsecEndPtHistRemotePort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsecHistoryGroup = ipsecHistoryGroup.setStatus('current')
ipsecFailuresGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 2, 1, 5)).setObjects(("IPsecT1-MIB", "ipsecFailTableSize"), ("IPsecT1-MIB", "ikeFailReason"), ("IPsecT1-MIB", "ikeFailTime"), ("IPsecT1-MIB", "ikeFailLocalType"), ("IPsecT1-MIB", "ikeFailLocalValue"), ("IPsecT1-MIB", "ikeFailRemoteType"), ("IPsecT1-MIB", "ikeFailRemoteValue"), ("IPsecT1-MIB", "ikeFailLocalAddr"), ("IPsecT1-MIB", "ikeFailRemoteAddr"), ("IPsecT1-MIB", "ipsecFailReason"), ("IPsecT1-MIB", "ipsecFailTime"), ("IPsecT1-MIB", "ipsecFailTunnelIndex"), ("IPsecT1-MIB", "ipsecFailSaSpi"), ("IPsecT1-MIB", "ipsecFailPktSrcAddr"), ("IPsecT1-MIB", "ipsecFailPktDstAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsecFailuresGroup = ipsecFailuresGroup.setStatus('current')
ipsecTrapCntlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 2, 1, 6)).setObjects(("IPsecT1-MIB", "ipsecTrapCntlIkeTunnelStart"), ("IPsecT1-MIB", "ipsecTrapCntlIkeTunnelStop"), ("IPsecT1-MIB", "ipsecTrapCntlIkeSysFailure"), ("IPsecT1-MIB", "ipsecTrapCntlIkeCertCrlFailure"), ("IPsecT1-MIB", "ipsecTrapCntlIkeProtocolFailure"), ("IPsecT1-MIB", "ipsecTrapCntlIkeNoSa"), ("IPsecT1-MIB", "ipsecTrapCntlipsecTunnelStart"), ("IPsecT1-MIB", "ipsecTrapCntlipsecTunnelStop"), ("IPsecT1-MIB", "ipsecTrapCntlipsecSysFailure"), ("IPsecT1-MIB", "ipsecTrapCntlipsecSetUpFailure"), ("IPsecT1-MIB", "ipsecTrapCntlipsecEarlyTunTerm"), ("IPsecT1-MIB", "ipsecTrapCntlipsecProtocolFailure"), ("IPsecT1-MIB", "ipsecTrapCntlipsecNoSa"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsecTrapCntlGroup = ipsecTrapCntlGroup.setStatus('current')
ipsecNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2, 6, 168, 1, 1, 1, 2, 1, 7)).setObjects(("IPsecT1-MIB", "ikeTunnelStart"), ("IPsecT1-MIB", "ikeTunnelStop"), ("IPsecT1-MIB", "ikeSysFailure"), ("IPsecT1-MIB", "ikeCertCrlFailure"), ("IPsecT1-MIB", "ikeProtocolFailure"), ("IPsecT1-MIB", "ikeNoSa"), ("IPsecT1-MIB", "ipsecTunnelStart"), ("IPsecT1-MIB", "ipsecTunnelStop"), ("IPsecT1-MIB", "ipsecSysFailure"), ("IPsecT1-MIB", "ipsecSetUpFailure"), ("IPsecT1-MIB", "ipsecEarilyTunTerm"), ("IPsecT1-MIB", "ipsecProtocolFailure"), ("IPsecT1-MIB", "ipsecNoSa"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsecNotificationGroup = ipsecNotificationGroup.setStatus('current')
mibBuilder.exportSymbols("IPsecT1-MIB", ipsecMibLevel=ipsecMibLevel, ikeGlobalRespTunnelFails=ikeGlobalRespTunnelFails, ipsecTunHcOutUncompOctets=ipsecTunHcOutUncompOctets, ipsecMIBGroups=ipsecMIBGroups, ipsecGlobalInOctWraps=ipsecGlobalInOctWraps, ipsecTunHistInSaDecompAlgo=ipsecTunHistInSaDecompAlgo, CompAlgo=CompAlgo, ipsecSpiProtocol=ipsecSpiProtocol, ipsecTunIkeTunnelAlive=ipsecTunIkeTunnelAlive, ipsecTunHistInOctets=ipsecTunHistInOctets, ipsecGlobalProtocolUseFails=ipsecGlobalProtocolUseFails, ipsecEndPtEntry=ipsecEndPtEntry, ikePeerLocalAddr=ikePeerLocalAddr, ikeTunHistActiveTime=ikeTunHistActiveTime, ipsecEndPtRemoteAddr1=ipsecEndPtRemoteAddr1, ipsecFailTable=ipsecFailTable, ikeGlobalStats=ikeGlobalStats, ipsecMIBObjects=ipsecMIBObjects, ipsecEndPtHistRemoteName=ipsecEndPtHistRemoteName, ipsecTunInOctWraps=ipsecTunInOctWraps, ipsecGlobalNoSaFails=ipsecGlobalNoSaFails, ikeTunHistLocalName=ikeTunHistLocalName, ipsecTunnelHistTable=ipsecTunnelHistTable, ipsecTrapCntlIkeTunnelStop=ipsecTrapCntlIkeTunnelStop, ikeTunRemoteName=ikeTunRemoteName, ipsecGlobalOutUncompOctWraps=ipsecGlobalOutUncompOctWraps, ipsecGlobalHcOutOctets=ipsecGlobalHcOutOctets, ipsecTunOutEncrypts=ipsecTunOutEncrypts, ipsecHistory=ipsecHistory, ipsecEndPtRemoteAddr2=ipsecEndPtRemoteAddr2, ipsecTunOutAuths=ipsecTunOutAuths, ipsecTunHistTotalSas=ipsecTunHistTotalSas, ipsecTunInDropPkts=ipsecTunInDropPkts, ipsecFailReason=ipsecFailReason, ikeFailLocalAddr=ikeFailLocalAddr, ipsecGlobalInOctets=ipsecGlobalInOctets, ikePeerEntry=ikePeerEntry, ipsecSpiValue=ipsecSpiValue, ipsecEndPtHistLocalAddr1=ipsecEndPtHistLocalAddr1, ikeTunNegoMode=ikeTunNegoMode, ipsecTunHistLifeTime=ipsecTunHistLifeTime, ikeTunHistTotalSas=ikeTunHistTotalSas, ipsecEndPtHistRemoteProtocol=ipsecEndPtHistRemoteProtocol, ikePeerActiveTime=ikePeerActiveTime, ikeTunHistTermReason=ikeTunHistTermReason, ikeTunHistRemoteAddr=ikeTunHistRemoteAddr, ipsecGlobalPreviousTunnels=ipsecGlobalPreviousTunnels, ipsecEndPtLocalType=ipsecEndPtLocalType, ikeTunSaRefreshThreshold=ikeTunSaRefreshThreshold, ipsecTunInPkts=ipsecTunInPkts, ipsecMIBNotifications=ipsecMIBNotifications, ipsecGlobalHcInOctets=ipsecGlobalHcInOctets, ipsecGlobalInAuthFails=ipsecGlobalInAuthFails, ikeTunHistStartTime=ikeTunHistStartTime, ipsecTunInAuthFails=ipsecTunInAuthFails, ikeTunHistLifeTime=ikeTunHistLifeTime, ipsecTrapCntl=ipsecTrapCntl, ipsecEarilyTunnelTerm=ipsecEarilyTunnelTerm, ikeTunIndex=ikeTunIndex, ikeTunHistEncryptAlgo=ikeTunHistEncryptAlgo, ikeTunTotalRefreshes=ikeTunTotalRefreshes, ipsecTunHistInDecrypts=ipsecTunHistInDecrypts, ipsecTunInSaAhAuthAlgo=ipsecTunInSaAhAuthAlgo, ikeGlobalInP2SaDelRequests=ikeGlobalInP2SaDelRequests, ikeTunInP2ExchgInvalids=ikeTunInP2ExchgInvalids, ikePeerRemoteAddr=ikePeerRemoteAddr, ipsecTunOutAuthFails=ipsecTunOutAuthFails, ipsecTunRemoteAddr=ipsecTunRemoteAddr, ikePeerCorrSeqNum=ikePeerCorrSeqNum, ipsecEndPtHistLocalPort=ipsecEndPtHistLocalPort, ikeFailEntry=ikeFailEntry, ipsecTunInDecompOctets=ipsecTunInDecompOctets, ipsecTunOutSaCompAlgo=ipsecTunOutSaCompAlgo, ipsecTunTotalRefreshes=ipsecTunTotalRefreshes, ipsecHistPhaseTwo=ipsecHistPhaseTwo, ipsecFailGlobalCntl=ipsecFailGlobalCntl, ipsecTunHcInDecompOctets=ipsecTunHcInDecompOctets, IPSIpAddress=IPSIpAddress, ipsecTunHistInDecryptFails=ipsecTunHistInDecryptFails, ikeGlobalPreviousTunnels=ikeGlobalPreviousTunnels, ikeTunStatus=ikeTunStatus, ikeTunDiffHellmanGrp=ikeTunDiffHellmanGrp, IkePeerType=IkePeerType, ipsecEndPtRemoteName=ipsecEndPtRemoteName, ikePeerCorrEntry=ikePeerCorrEntry, ipsecEndPtHistLocalName=ipsecEndPtHistLocalName, ikeTunHistInNotifys=ikeTunHistInNotifys, ipsecTunIkeTunnelIndex=ipsecTunIkeTunnelIndex, ikeTunnelHistTable=ikeTunnelHistTable, ipsecGlobalInDecompOctWraps=ipsecGlobalInDecompOctWraps, ipsecTunOutOctWraps=ipsecTunOutOctWraps, ipsecGlobalOutEncryptFails=ipsecGlobalOutEncryptFails, ipsecGlobalInDecrypts=ipsecGlobalInDecrypts, ipsecTunHistInOctWraps=ipsecTunHistInOctWraps, TunnelStatus=TunnelStatus, ikeTunLocalName=ikeTunLocalName, ikeGlobalOutOctets=ikeGlobalOutOctets, ipsecTunHistIndex=ipsecTunHistIndex, ikeTunHistOutP2SaDelRequests=ikeTunHistOutP2SaDelRequests, ipsecEndPtHistLocalType=ipsecEndPtHistLocalType, ipsecGlobalOutAuthFails=ipsecGlobalOutAuthFails, ipsecMIBCompliances=ipsecMIBCompliances, ipsecHistGlobal=ipsecHistGlobal, ikeTunnelTable=ikeTunnelTable, ipsecEndPtLocalName=ipsecEndPtLocalName, ipsecEndPtRemotePort=ipsecEndPtRemotePort, ipsecNotificationGroup=ipsecNotificationGroup, ikeGlobalSysCapFails=ikeGlobalSysCapFails, ikeGlobalOutP2ExchgRejects=ikeGlobalOutP2ExchgRejects, ikePeerLocalValue=ikePeerLocalValue, ikeGlobalOutP2ExchgInvalids=ikeGlobalOutP2ExchgInvalids, ikeProtocolFailure=ikeProtocolFailure, ipsecPhaseTwo=ipsecPhaseTwo, ikeGlobalOutP2Exchgs=ikeGlobalOutP2Exchgs, ipsecEndPtHistRemoteType=ipsecEndPtHistRemoteType, ipsecGlobalActiveTunnels=ipsecGlobalActiveTunnels, ipsecTrapCntlGroup=ipsecTrapCntlGroup, ipsecSpiTable=ipsecSpiTable, ikeTunLifeTime=ikeTunLifeTime, ipsecEndPtLocalProtocol=ipsecEndPtLocalProtocol, ipsecTunInAuths=ipsecTunInAuths, ipsecTunHcInOctets=ipsecTunHcInOctets, ipsecHistoryGroup=ipsecHistoryGroup, ipsecTunHistOutSaCompAlgo=ipsecTunHistOutSaCompAlgo, ipsecGlobalInDecryptFails=ipsecGlobalInDecryptFails, ikePeerCorrRemoteType=ikePeerCorrRemoteType, ipsecTunOutUncompOctets=ipsecTunOutUncompOctets, ipsecTunHistLifeSize=ipsecTunHistLifeSize, ikeGlobalInOctets=ikeGlobalInOctets, ipsecTunHistOutUncompOctWraps=ipsecTunHistOutUncompOctWraps, ikeTunHistActiveIndex=ikeTunHistActiveIndex, ipsecFailuresGroup=ipsecFailuresGroup, ikeTunHistInP2SaDelRequests=ikeTunHistInP2SaDelRequests, ikeTunHashAlgo=ikeTunHashAlgo, ikePeerCorripsecTunIndex=ikePeerCorripsecTunIndex, ikeTunHistPeerRemoteType=ikeTunHistPeerRemoteType, ipsecGlobalInDrops=ipsecGlobalInDrops, ipsecTunOutSaDiffHellmanGrp=ipsecTunOutSaDiffHellmanGrp, ipsecEndPtRemoteType=ipsecEndPtRemoteType, ikeTunOutP2ExchgRejects=ikeTunOutP2ExchgRejects, ikeTunHistAuthMethod=ikeTunHistAuthMethod, ikeTunInDropPkts=ikeTunInDropPkts, ikePeerLocalType=ikePeerLocalType, ikeFailIndex=ikeFailIndex, ikeTunHistPeerLocalType=ikeTunHistPeerLocalType, DiffHellmanGrp=DiffHellmanGrp, ipsecGlobalOutDrops=ipsecGlobalOutDrops, ikeGlobalNoSaFails=ikeGlobalNoSaFails, ikePeerCorrLocalType=ikePeerCorrLocalType, ipsecHistPhaseOne=ipsecHistPhaseOne, ipsecTunHistLocalAddr=ipsecTunHistLocalAddr, ikeTunHistOutP2ExchgRejects=ikeTunHistOutP2ExchgRejects, ipsecGlobalHcOutUncompOctets=ipsecGlobalHcOutUncompOctets, ikeTunHistInOctets=ikeTunHistInOctets, ipsecTunHistOutAuths=ipsecTunHistOutAuths, ipsecTunActiveTime=ipsecTunActiveTime, ipsecEndPtRemoteProtocol=ipsecEndPtRemoteProtocol, ipsecTrapCntlipsecEarlyTunTerm=ipsecTrapCntlipsecEarlyTunTerm, ipsecTrapCntlIkeProtocolFailure=ipsecTrapCntlIkeProtocolFailure, ikeTunInNotifys=ikeTunInNotifys, ipsecTunHistInPkts=ipsecTunHistInPkts, ipsecTunCurrentSaInstances=ipsecTunCurrentSaInstances, ipsecSpiIndex=ipsecSpiIndex, ikeGlobalAuthFails=ikeGlobalAuthFails, EncapMode=EncapMode, ipsecTrapCntlIkeTunnelStart=ipsecTrapCntlIkeTunnelStart, ipsecEndPtHistTable=ipsecEndPtHistTable, ikeGlobalInP2ExchgInvalids=ikeGlobalInP2ExchgInvalids, ikeTunLocalAddr=ikeTunLocalAddr, ikeTunOutDropPkts=ikeTunOutDropPkts, ipsecTunHistInSaEncryptAlgo=ipsecTunHistInSaEncryptAlgo, ikeTunOutNotifys=ikeTunOutNotifys, ipsecSpiEntry=ipsecSpiEntry, AuthAlgo=AuthAlgo, ipsecEndPtHistEntry=ipsecEndPtHistEntry, ikeTunHistInP2ExchgRejects=ikeTunHistInP2ExchgRejects, ipsecTunHistInAuthFails=ipsecTunHistInAuthFails, ipsecEndPtTable=ipsecEndPtTable, ipsecTunHistOutEncryptFails=ipsecTunHistOutEncryptFails, ipsecGlobalStats=ipsecGlobalStats, ikePeerRemoteValue=ikePeerRemoteValue, ikeTunHistOutP2Exchgs=ikeTunHistOutP2Exchgs, ikeTunOutP2ExchgInvalids=ikeTunOutP2ExchgInvalids, ikeFailLocalValue=ikeFailLocalValue, ipsecTunnelStop=ipsecTunnelStop, ipsecEndPtHistLocalProtocol=ipsecEndPtHistLocalProtocol, ikeGlobalOutP2SaDelRequests=ikeGlobalOutP2SaDelRequests, ipsecTunHistOutSaEncryptAlgo=ipsecTunHistOutSaEncryptAlgo, ikePeerCorrIntIndex=ikePeerCorrIntIndex, IkeNegoMode=IkeNegoMode, ipsecTunOutSaEncryptAlgo=ipsecTunOutSaEncryptAlgo, ipsecMIB=ipsecMIB, ipsecTunExpiredSaInstances=ipsecTunExpiredSaInstances, ikeFailTime=ikeFailTime, ipsecFailEntry=ipsecFailEntry, ikeFailReason=ikeFailReason, ikeTunHistInP2Exchgs=ikeTunHistInP2Exchgs, ipsecTunInSaDecompAlgo=ipsecTunInSaDecompAlgo, ipsecTunOutOctets=ipsecTunOutOctets, ikeTunHistOutP2ExchgInvalids=ikeTunHistOutP2ExchgInvalids, ipsecTunHistHcOutOctets=ipsecTunHistHcOutOctets, ikeGlobalInitTunnels=ikeGlobalInitTunnels, ikeTunInP2Exchgs=ikeTunInP2Exchgs, ipsecTrapCntlipsecTunnelStart=ipsecTrapCntlipsecTunnelStart, ipsecGlobalInPkts=ipsecGlobalInPkts, ipsecTunLifeTime=ipsecTunLifeTime, ikeTunOutP2Exchgs=ikeTunOutP2Exchgs, ipsecTunKeyType=ipsecTunKeyType, ikeTunHistIndex=ikeTunHistIndex, ipsecPhaseOneGroup=ipsecPhaseOneGroup, ikeGlobalDecryptFails=ikeGlobalDecryptFails, ipsecFailures=ipsecFailures, ipsecGlobalOutOctets=ipsecGlobalOutOctets, ipsecMIBConformance=ipsecMIBConformance, ipsecTunnelStart=ipsecTunnelStart, ipsecTunLifeSize=ipsecTunLifeSize, ipsecHistGlobalCntl=ipsecHistGlobalCntl, ikeTunnelStart=ikeTunnelStart, ipsecTunIndex=ipsecTunIndex, ipsecGlobalOutOctWraps=ipsecGlobalOutOctWraps, ipsecTunHistHcInOctets=ipsecTunHistHcInOctets, ipsecTunHistKeyType=ipsecTunHistKeyType, ipsecLevelsGroup=ipsecLevelsGroup, ikeTunHistInPkts=ikeTunHistInPkts, ipsecGlobalInAuths=ipsecGlobalInAuths, ikeGlobalInNotifys=ikeGlobalInNotifys, ikeGlobalInitTunnelFails=ikeGlobalInitTunnelFails, ikeTunRemoteType=ikeTunRemoteType, ipsecGlobalInReplayDrops=ipsecGlobalInReplayDrops, ipsecTunSaLifeTimeThreshold=ipsecTunSaLifeTimeThreshold, ikeTunHistDiffHellmanGrp=ikeTunHistDiffHellmanGrp, ipsecTrapCntlipsecTunnelStop=ipsecTrapCntlipsecTunnelStop, ikeTunLocalValue=ikeTunLocalValue, ipsecEndPtLocalPort=ipsecEndPtLocalPort, ipsecTunHcOutOctets=ipsecTunHcOutOctets, ikeTunInPkts=ikeTunInPkts, ikeTunHistHashAlgo=ikeTunHistHashAlgo, ipsecSpiDirection=ipsecSpiDirection, ipsecEndPtHistRemotePort=ipsecEndPtHistRemotePort, ikeTunRemoteAddr=ikeTunRemoteAddr, ipsecFailSaSpi=ipsecFailSaSpi, ikeNoSa=ikeNoSa, ipsecFailPktDstAddr=ipsecFailPktDstAddr, ipsecTunEncapMode=ipsecTunEncapMode, ikeTunHistRemoteName=ikeTunHistRemoteName, ipsecTunnelHistEntry=ipsecTunnelHistEntry, ikeGlobalInPkts=ikeGlobalInPkts, ipsecEndPtHistIndex=ipsecEndPtHistIndex, ikeTunOutP2SaDelRequests=ikeTunOutP2SaDelRequests, ipsecTunInDecompOctWraps=ipsecTunInDecompOctWraps, ipsecTunHistStartTime=ipsecTunHistStartTime, ipsecEndPtHistTunIndex=ipsecEndPtHistTunIndex, ikeTunHistOutPkts=ikeTunHistOutPkts, ipsecTunHistTotalRefreshes=ipsecTunHistTotalRefreshes)
mibBuilder.exportSymbols("IPsecT1-MIB", ipsecTunHistInSaEspAuthAlgo=ipsecTunHistInSaEspAuthAlgo, ipsecTunInOctets=ipsecTunInOctets, ipsecTunnelEntry=ipsecTunnelEntry, ipsecTunHistOutEncrypts=ipsecTunHistOutEncrypts, ikeGlobalOutPkts=ikeGlobalOutPkts, ikePeerCorrRemoteValue=ikePeerCorrRemoteValue, ipsecEndPtLocalAddr2=ipsecEndPtLocalAddr2, ipsecSetUpFailure=ipsecSetUpFailure, IkeHashAlgo=IkeHashAlgo, ikeTunnelEntry=ikeTunnelEntry, ipsecTunOutPkts=ipsecTunOutPkts, ipsecTunLocalAddr=ipsecTunLocalAddr, ikeTunHistOutDropPkts=ikeTunHistOutDropPkts, ipsecTunOutDropPkts=ipsecTunOutDropPkts, ikeSysFailure=ikeSysFailure, ipsecFailPhaseOne=ipsecFailPhaseOne, ipsecGlobalOutEncrypts=ipsecGlobalOutEncrypts, ipsecTunInReplayDropPkts=ipsecTunInReplayDropPkts, ikeTunHistInP2ExchgInvalids=ikeTunHistInP2ExchgInvalids, ipsecTunnelTable=ipsecTunnelTable, ikeTunInP2ExchgRejects=ikeTunInP2ExchgRejects, ipsecFailPktSrcAddr=ipsecFailPktSrcAddr, ikeGlobalOutDropPkts=ikeGlobalOutDropPkts, ipsecEndPtHistLocalAddr2=ipsecEndPtHistLocalAddr2, ipsecTunHistActiveIndex=ipsecTunHistActiveIndex, ipsecTunHistInDecompOctets=ipsecTunHistInDecompOctets, ipsecTunHistInReplayDropPkts=ipsecTunHistInReplayDropPkts, ikeTunnelHistEntry=ikeTunnelHistEntry, ipsecEndPtHistActiveIndex=ipsecEndPtHistActiveIndex, ikePeerTable=ikePeerTable, ipsecFailTunnelIndex=ipsecFailTunnelIndex, ipsecEndPtHistRemoteAddr2=ipsecEndPtHistRemoteAddr2, ipsecTunHistOutOctWraps=ipsecTunHistOutOctWraps, ipsecTrapCntlIkeNoSa=ipsecTrapCntlIkeNoSa, ikeTunnelStop=ikeTunnelStop, ikePeerIntIndex=ikePeerIntIndex, ipsecFailIndex=ipsecFailIndex, ikeFailRemoteAddr=ikeFailRemoteAddr, ipsecTrapCntlIkeCertCrlFailure=ipsecTrapCntlIkeCertCrlFailure, ipsecSpiStatus=ipsecSpiStatus, ipsecGlobalInDecompOctets=ipsecGlobalInDecompOctets, ikeTunOutPkts=ikeTunOutPkts, ipsecEndPtHistRemoteAddr1=ipsecEndPtHistRemoteAddr1, ipsecTunHistRemoteAddr=ipsecTunHistRemoteAddr, ipsecFailPhaseTwo=ipsecFailPhaseTwo, ikeTunHistOutOctets=ikeTunHistOutOctets, ipsecTunHistInAuths=ipsecTunHistInAuths, ipsecEndPtIndex=ipsecEndPtIndex, ipsecFailTime=ipsecFailTime, ipsecTunHistEncapMode=ipsecTunHistEncapMode, ikeTunHistPeerIntIndex=ikeTunHistPeerIntIndex, ikeCertCrlFailure=ikeCertCrlFailure, ikeFailTable=ikeFailTable, ipsecMIBCompliance=ipsecMIBCompliance, ipsecTunHistHcOutUncompOctets=ipsecTunHistHcOutUncompOctets, ikeTunHistInDropPkts=ikeTunHistInDropPkts, ikeTunHistLocalAddr=ikeTunHistLocalAddr, ikePeerCorrLocalValue=ikePeerCorrLocalValue, ipsecTunOutSaAhAuthAlgo=ipsecTunOutSaAhAuthAlgo, ikeTunHistPeerLocalValue=ikeTunHistPeerLocalValue, ipsecTunHistInDecompOctWraps=ipsecTunHistInDecompOctWraps, ipsecTunHistActiveTime=ipsecTunHistActiveTime, ipsecTunInSaEspAuthAlgo=ipsecTunInSaEspAuthAlgo, ipsecGlobalHcInDecompOctets=ipsecGlobalHcInDecompOctets, ikeFailLocalType=ikeFailLocalType, ikeTunHistNegoMode=ikeTunHistNegoMode, ipsecTunInSaEncryptAlgo=ipsecTunInSaEncryptAlgo, ipsecTunHistOutDropPkts=ipsecTunHistOutDropPkts, ipsecSysFailure=ipsecSysFailure, ipsecHistTableSize=ipsecHistTableSize, ipsecTunHistOutSaDiffHellmanGrp=ipsecTunHistOutSaDiffHellmanGrp, ipsecTunStatus=ipsecTunStatus, ikeTunOutOctets=ikeTunOutOctets, ipsecTunHistInDropPkts=ipsecTunHistInDropPkts, ipsecNoSa=ipsecNoSa, ipsecTunInDecrypts=ipsecTunInDecrypts, ipsecTunHistHcInDecompOctets=ipsecTunHistHcInDecompOctets, ikeTunHistOutNotifys=ikeTunHistOutNotifys, ipsecTrapCntlipsecSetUpFailure=ipsecTrapCntlipsecSetUpFailure, ipsecPhaseOne=ipsecPhaseOne, ipsecTunHistOutAuthFails=ipsecTunHistOutAuthFails, ipsecFailTableSize=ipsecFailTableSize, ikeTunActiveTime=ikeTunActiveTime, TrapStatus=TrapStatus, ipsecTunHistOutPkts=ipsecTunHistOutPkts, IkeAuthMethod=IkeAuthMethod, ipsecTunHistOutOctets=ipsecTunHistOutOctets, ipsecTunOutSaEspAuthAlgo=ipsecTunOutSaEspAuthAlgo, ipsecGlobalOutUncompOctets=ipsecGlobalOutUncompOctets, ikePeerCorrTable=ikePeerCorrTable, ipsecTunHistTermReason=ipsecTunHistTermReason, ikeTunEncryptAlgo=ikeTunEncryptAlgo, ipsecFailGlobal=ipsecFailGlobal, ipsecTunHistOutUncompOctets=ipsecTunHistOutUncompOctets, ipsecTrapCntlipsecSysFailure=ipsecTrapCntlipsecSysFailure, EndPtType=EndPtType, KeyType=KeyType, ipsecTunHistOutSaEspAuthAlgo=ipsecTunHistOutSaEspAuthAlgo, ikeTunInP2SaDelRequests=ikeTunInP2SaDelRequests, ipsecTunHistIkeTunnelIndex=ipsecTunHistIkeTunnelIndex, ikeGlobalHashValidFails=ikeGlobalHashValidFails, ikeFailRemoteValue=ikeFailRemoteValue, ipsecTunHistOutSaAhAuthAlgo=ipsecTunHistOutSaAhAuthAlgo, ipsecTunOutEncryptFails=ipsecTunOutEncryptFails, EncryptAlgo=EncryptAlgo, ipsecGlobalSysCapFails=ipsecGlobalSysCapFails, ipsecGlobalOutPkts=ipsecGlobalOutPkts, ipsecGlobalOutAuths=ipsecGlobalOutAuths, ikeGlobalInP2ExchgRejects=ikeGlobalInP2ExchgRejects, ipsecTrapCntlipsecProtocolFailure=ipsecTrapCntlipsecProtocolFailure, ikeGlobalInP2Exchgs=ikeGlobalInP2Exchgs, ipsecTrapCntlIkeSysFailure=ipsecTrapCntlIkeSysFailure, ipsecTunInDecryptFails=ipsecTunInDecryptFails, ikeTunHistTotalRefreshes=ikeTunHistTotalRefreshes, ikeTunHistPeerRemoteValue=ikeTunHistPeerRemoteValue, ipsecLevels=ipsecLevels, ipsecTunSaLifeSizeThreshold=ipsecTunSaLifeSizeThreshold, ikeFailRemoteType=ikeFailRemoteType, ipsecTunHistInSaDiffHellmanGrp=ipsecTunHistInSaDiffHellmanGrp, ikeGlobalActiveTunnels=ikeGlobalActiveTunnels, ipsecTunOutUncompOctWraps=ipsecTunOutUncompOctWraps, ikeGlobalInDropPkts=ikeGlobalInDropPkts, ipsecProtocolFailure=ipsecProtocolFailure, ipsecPhaseTwoGroup=ipsecPhaseTwoGroup, ikeGlobalOutNotifys=ikeGlobalOutNotifys, ipsecTrapCntlipsecNoSa=ipsecTrapCntlipsecNoSa, ikeTunLocalType=ikeTunLocalType, ipsecTunInSaDiffHellmanGrp=ipsecTunInSaDiffHellmanGrp, ikeTunAuthMethod=ikeTunAuthMethod, ikePeerActiveTunnelIndex=ikePeerActiveTunnelIndex, PYSNMP_MODULE_ID=ipsecMIB, ipsecTunHistInSaAhAuthAlgo=ipsecTunHistInSaAhAuthAlgo, ikePeerRemoteType=ikePeerRemoteType, ipsecEndPtLocalAddr1=ipsecEndPtLocalAddr1, ikeTunInOctets=ikeTunInOctets, ikeTunRemoteValue=ikeTunRemoteValue)
