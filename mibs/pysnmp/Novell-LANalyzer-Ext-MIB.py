#
# PySNMP MIB module Novell-LANalyzer-Ext-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Novell-LANalyzer-Ext-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:22:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
rmon, OwnerString, alarmValue, EntryStatus, channelIndex, alarmFallingThreshold, alarmIndex, alarmSampleType, alarmVariable, alarmRisingThreshold, channelDescription, channelMatches = mibBuilder.importSymbols("RFC1271-MIB", "rmon", "OwnerString", "alarmValue", "EntryStatus", "channelIndex", "alarmFallingThreshold", "alarmIndex", "alarmSampleType", "alarmVariable", "alarmRisingThreshold", "channelDescription", "channelMatches")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, NotificationType, IpAddress, Integer32, Gauge32, iso, NotificationType, ObjectIdentity, Counter32, Counter64, ModuleIdentity, Bits, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "NotificationType", "IpAddress", "Integer32", "Gauge32", "iso", "NotificationType", "ObjectIdentity", "Counter32", "Counter64", "ModuleIdentity", "Bits", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "enterprises")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
novell = MibIdentifier((1, 3, 6, 1, 4, 1, 23))
productType = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 1))
mibDoc = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2))
lantern = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 1, 1))
lantern_rmonPlus = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 1, 1, 3)).setLabel("lantern-rmonPlus")
rmonPlus_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 13)).setLabel("rmonPlus-mib")
rmonShadow = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 13, 1))
rmonExtensions = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 13, 2))
rpAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 3))
rpHosts = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 4))
rpMatrix = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 6))
rpFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 7))
rpBuffer = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 8))
rpAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 1))
rpHostMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 2))
rpDuplicateIp = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 3))
rpMacToIp = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 4))
rpAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 3, 1), )
if mibBuilder.loadTexts: rpAlarmTable.setStatus('mandatory')
rpAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 3, 1, 1), ).setIndexNames((0, "Novell-LANalyzer-Ext-MIB", "rpAlarmIndex"))
if mibBuilder.loadTexts: rpAlarmEntry.setStatus('mandatory')
rpAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpAlarmIndex.setStatus('mandatory')
rpAlarmRisingDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpAlarmRisingDescription.setStatus('mandatory')
rpAlarmFallingDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpAlarmFallingDescription.setStatus('mandatory')
rpHostTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 4, 2), )
if mibBuilder.loadTexts: rpHostTable.setStatus('mandatory')
rpHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 4, 2, 1), ).setIndexNames((0, "Novell-LANalyzer-Ext-MIB", "rpHostIndex"), (0, "Novell-LANalyzer-Ext-MIB", "rpHostAddress"))
if mibBuilder.loadTexts: rpHostEntry.setStatus('mandatory')
rpHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 4, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpHostAddress.setStatus('mandatory')
rpHostCreationOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpHostCreationOrder.setStatus('mandatory')
rpHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpHostIndex.setStatus('mandatory')
rpHostProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpHostProtocols.setStatus('mandatory')
rpHostFirstTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 4, 2, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpHostFirstTransmit.setStatus('mandatory')
rpHostLastTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 4, 2, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpHostLastTransmit.setStatus('mandatory')
rpHostTimeTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 4, 3), )
if mibBuilder.loadTexts: rpHostTimeTable.setStatus('mandatory')
rpHostTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 4, 3, 1), ).setIndexNames((0, "Novell-LANalyzer-Ext-MIB", "rpHostTimeIndex"), (0, "Novell-LANalyzer-Ext-MIB", "rpHostTimeCreationOrder"))
if mibBuilder.loadTexts: rpHostTimeEntry.setStatus('mandatory')
rpHostTimeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 4, 3, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpHostTimeAddress.setStatus('mandatory')
rpHostTimeCreationOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpHostTimeCreationOrder.setStatus('mandatory')
rpHostTimeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpHostTimeIndex.setStatus('mandatory')
rpHostTimeProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpHostTimeProtocols.setStatus('mandatory')
rpHostTimeFirstTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 4, 3, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpHostTimeFirstTransmit.setStatus('mandatory')
rpHostTimeLastTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 4, 3, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpHostTimeLastTransmit.setStatus('mandatory')
rpMatrixSDTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 6, 2), )
if mibBuilder.loadTexts: rpMatrixSDTable.setStatus('mandatory')
rpMatrixSDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 6, 2, 1), ).setIndexNames((0, "Novell-LANalyzer-Ext-MIB", "rpMatrixSDIndex"), (0, "Novell-LANalyzer-Ext-MIB", "rpMatrixSDSourceAddress"), (0, "Novell-LANalyzer-Ext-MIB", "rpMatrixSDDestAddress"))
if mibBuilder.loadTexts: rpMatrixSDEntry.setStatus('mandatory')
rpMatrixSDSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 6, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpMatrixSDSourceAddress.setStatus('mandatory')
rpMatrixSDDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 6, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpMatrixSDDestAddress.setStatus('mandatory')
rpMatrixSDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpMatrixSDIndex.setStatus('mandatory')
rpMatrixSDProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 6, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpMatrixSDProtocols.setStatus('mandatory')
rpMatrixSDFirstTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 6, 2, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpMatrixSDFirstTransmit.setStatus('mandatory')
rpMatrixSDLastTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 6, 2, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpMatrixSDLastTransmit.setStatus('mandatory')
rpMatrixDSTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 6, 3), )
if mibBuilder.loadTexts: rpMatrixDSTable.setStatus('mandatory')
rpMatrixDSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 6, 3, 1), ).setIndexNames((0, "Novell-LANalyzer-Ext-MIB", "rpMatrixDSIndex"), (0, "Novell-LANalyzer-Ext-MIB", "rpMatrixDSDestAddress"), (0, "Novell-LANalyzer-Ext-MIB", "rpMatrixDSSourceAddress"))
if mibBuilder.loadTexts: rpMatrixDSEntry.setStatus('mandatory')
rpMatrixDSSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 6, 3, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpMatrixDSSourceAddress.setStatus('mandatory')
rpMatrixDSDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 6, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpMatrixDSDestAddress.setStatus('mandatory')
rpMatrixDSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpMatrixDSIndex.setStatus('mandatory')
rpMatrixDSProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 6, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpMatrixDSProtocols.setStatus('mandatory')
rpMatrixDSFirstTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 6, 3, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpMatrixDSFirstTransmit.setStatus('mandatory')
rpMatrixDSLastTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 6, 3, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpMatrixDSLastTransmit.setStatus('mandatory')
rpFilterTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 7, 1), )
if mibBuilder.loadTexts: rpFilterTable.setStatus('mandatory')
rpFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 7, 1, 1), ).setIndexNames((0, "Novell-LANalyzer-Ext-MIB", "rpFilterIndex"))
if mibBuilder.loadTexts: rpFilterEntry.setStatus('mandatory')
rpFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpFilterIndex.setStatus('mandatory')
rpFilterProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 7, 1, 1, 2), Integer32().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpFilterProtocols.setStatus('mandatory')
rpChannelTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 7, 2), )
if mibBuilder.loadTexts: rpChannelTable.setStatus('mandatory')
rpChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 7, 2, 1), ).setIndexNames((0, "Novell-LANalyzer-Ext-MIB", "rpChannelIndex"))
if mibBuilder.loadTexts: rpChannelEntry.setStatus('mandatory')
rpChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpChannelIndex.setStatus('mandatory')
rpChannelMatchOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 7, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpChannelMatchOctets.setStatus('mandatory')
rpChannelControlBufferFull = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpChannelControlBufferFull.setStatus('mandatory')
rpBufferControlTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 8, 1), )
if mibBuilder.loadTexts: rpBufferControlTable.setStatus('mandatory')
rpBufferControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 8, 1, 1), ).setIndexNames((0, "Novell-LANalyzer-Ext-MIB", "rpBufferControlIndex"))
if mibBuilder.loadTexts: rpBufferControlEntry.setStatus('mandatory')
rpBufferControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpBufferControlIndex.setStatus('mandatory')
rpBufferCaptureOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 1, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpBufferCaptureOctets.setStatus('mandatory')
rpAdminSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpAdminSerialNumber.setStatus('mandatory')
rpAdminProbeCopies = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpAdminProbeCopies.setStatus('mandatory')
rpHostMonitorControlTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 2, 1), )
if mibBuilder.loadTexts: rpHostMonitorControlTable.setStatus('mandatory')
rpHostMonitorControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 2, 1, 1), ).setIndexNames((0, "Novell-LANalyzer-Ext-MIB", "rpHostMonitorControlIndex"))
if mibBuilder.loadTexts: rpHostMonitorControlEntry.setStatus('mandatory')
rpHostMonitorControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpHostMonitorControlIndex.setStatus('mandatory')
rpHostMonitorControlHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpHostMonitorControlHostIndex.setStatus('mandatory')
rpHostMonitorControlActiveEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpHostMonitorControlActiveEvent.setStatus('mandatory')
rpHostMonitorControlInactiveEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpHostMonitorControlInactiveEvent.setStatus('mandatory')
rpHostMonitorControlTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpHostMonitorControlTimeout.setStatus('mandatory')
rpHostMonitorControlOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 2, 1, 1, 6), OwnerString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpHostMonitorControlOwner.setStatus('mandatory')
rpHostMonitorControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 2, 1, 1, 7), EntryStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpHostMonitorControlStatus.setStatus('mandatory')
rpHostMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 2, 2), )
if mibBuilder.loadTexts: rpHostMonitorTable.setStatus('mandatory')
rpHostMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 2, 2, 1), ).setIndexNames((0, "Novell-LANalyzer-Ext-MIB", "rpHostMonitorIndex"), (0, "Novell-LANalyzer-Ext-MIB", "rpHostMonitorAddress"))
if mibBuilder.loadTexts: rpHostMonitorEntry.setStatus('mandatory')
rpHostMonitorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpHostMonitorIndex.setStatus('mandatory')
rpHostMonitorAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 2, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpHostMonitorAddress.setStatus('mandatory')
rpHostMonitorActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpHostMonitorActivity.setStatus('mandatory')
rpHostMonitorAddDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpHostMonitorAddDelete.setStatus('mandatory')
rpDuplicateIpTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 3, 1), )
if mibBuilder.loadTexts: rpDuplicateIpTable.setStatus('mandatory')
rpDuplicateIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 3, 1, 1), ).setIndexNames((0, "Novell-LANalyzer-Ext-MIB", "rpDuplicateIpAddress"))
if mibBuilder.loadTexts: rpDuplicateIpEntry.setStatus('mandatory')
rpDuplicateIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 3, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpDuplicateIpAddress.setStatus('mandatory')
rpDuplicateIpNewMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 3, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpDuplicateIpNewMAC.setStatus('mandatory')
rpDuplicateIpOldMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 3, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpDuplicateIpOldMAC.setStatus('mandatory')
rpDuplicateIpTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 3, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpDuplicateIpTimestamp.setStatus('mandatory')
rpMacToIpTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 4, 1), )
if mibBuilder.loadTexts: rpMacToIpTable.setStatus('mandatory')
rpMacToIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 4, 1, 1), ).setIndexNames((0, "Novell-LANalyzer-Ext-MIB", "rpMacToIpHostIndex"), (0, "Novell-LANalyzer-Ext-MIB", "rpMacToIpMACAddress"), (0, "Novell-LANalyzer-Ext-MIB", "rpMacToIpIPAddress"))
if mibBuilder.loadTexts: rpMacToIpEntry.setStatus('mandatory')
rpMacToIpHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpMacToIpHostIndex.setStatus('mandatory')
rpMacToIpMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 4, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpMacToIpMACAddress.setStatus('mandatory')
rpMacToIpIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 13, 2, 4, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpMacToIpIPAddress.setStatus('mandatory')
risingAlarm = NotificationType((1, 3, 6, 1, 2, 1, 16) + (0,1)).setObjects(("RFC1271-MIB", "alarmIndex"), ("RFC1271-MIB", "alarmVariable"), ("RFC1271-MIB", "alarmSampleType"), ("RFC1271-MIB", "alarmValue"), ("RFC1271-MIB", "alarmRisingThreshold"), ("Novell-LANalyzer-Ext-MIB", "rpAlarmRisingDescription"))
fallingAlarm = NotificationType((1, 3, 6, 1, 2, 1, 16) + (0,2)).setObjects(("RFC1271-MIB", "alarmIndex"), ("RFC1271-MIB", "alarmVariable"), ("RFC1271-MIB", "alarmSampleType"), ("RFC1271-MIB", "alarmValue"), ("RFC1271-MIB", "alarmFallingThreshold"), ("Novell-LANalyzer-Ext-MIB", "rpAlarmFallingDescription"))
packetMatch = NotificationType((1, 3, 6, 1, 2, 1, 16) + (0,3)).setObjects(("RFC1271-MIB", "channelIndex"), ("RFC1271-MIB", "channelMatches"), ("RFC1271-MIB", "channelDescription"))
rpHostActive = NotificationType((1, 3, 6, 1, 4, 1, 23, 1, 1, 3) + (0,1)).setObjects(("Novell-LANalyzer-Ext-MIB", "rpHostMonitorAddress"))
rpHostInactive = NotificationType((1, 3, 6, 1, 4, 1, 23, 1, 1, 3) + (0,2)).setObjects(("Novell-LANalyzer-Ext-MIB", "rpHostMonitorAddress"))
rpDuplicateIpAddr = NotificationType((1, 3, 6, 1, 4, 1, 23, 1, 1, 3) + (0,3)).setObjects(("Novell-LANalyzer-Ext-MIB", "rpDuplicateIpAddress"), ("Novell-LANalyzer-Ext-MIB", "rpDuplicateIpNewMAC"), ("Novell-LANalyzer-Ext-MIB", "rpDuplicateIpOldMAC"))
mibBuilder.exportSymbols("Novell-LANalyzer-Ext-MIB", rpMacToIp=rpMacToIp, rpMatrixDSDestAddress=rpMatrixDSDestAddress, rpBufferControlIndex=rpBufferControlIndex, rpMatrixDSSourceAddress=rpMatrixDSSourceAddress, rpDuplicateIpAddress=rpDuplicateIpAddress, rpHostIndex=rpHostIndex, mibDoc=mibDoc, rpMatrixDSLastTransmit=rpMatrixDSLastTransmit, rpMatrixSDSourceAddress=rpMatrixSDSourceAddress, rpMatrixSDLastTransmit=rpMatrixSDLastTransmit, rpHostFirstTransmit=rpHostFirstTransmit, rpHostEntry=rpHostEntry, rpFilterProtocols=rpFilterProtocols, rmonShadow=rmonShadow, rpHostCreationOrder=rpHostCreationOrder, rpMatrixDSIndex=rpMatrixDSIndex, rpHostMonitor=rpHostMonitor, rpFilterEntry=rpFilterEntry, rpHostMonitorControlEntry=rpHostMonitorControlEntry, rpHostMonitorAddress=rpHostMonitorAddress, rpMacToIpTable=rpMacToIpTable, rpChannelEntry=rpChannelEntry, fallingAlarm=fallingAlarm, rpBuffer=rpBuffer, rpHostActive=rpHostActive, rpHostMonitorControlIndex=rpHostMonitorControlIndex, rpHostTimeAddress=rpHostTimeAddress, rpMacToIpEntry=rpMacToIpEntry, rpHostTimeIndex=rpHostTimeIndex, rpMacToIpHostIndex=rpMacToIpHostIndex, packetMatch=packetMatch, lantern=lantern, rpBufferControlTable=rpBufferControlTable, rpHostTimeEntry=rpHostTimeEntry, rpHostMonitorControlTimeout=rpHostMonitorControlTimeout, rpHostMonitorEntry=rpHostMonitorEntry, rpHostMonitorControlHostIndex=rpHostMonitorControlHostIndex, rpAdminSerialNumber=rpAdminSerialNumber, rpFilter=rpFilter, rpDuplicateIpAddr=rpDuplicateIpAddr, rpAdminProbeCopies=rpAdminProbeCopies, rpHostMonitorControlActiveEvent=rpHostMonitorControlActiveEvent, rpFilterTable=rpFilterTable, rpHostTimeLastTransmit=rpHostTimeLastTransmit, rpHostMonitorAddDelete=rpHostMonitorAddDelete, rpDuplicateIpTimestamp=rpDuplicateIpTimestamp, rpAlarm=rpAlarm, rpDuplicateIpEntry=rpDuplicateIpEntry, rpMatrixSDDestAddress=rpMatrixSDDestAddress, rpMatrixSDIndex=rpMatrixSDIndex, rpMatrixDSProtocols=rpMatrixDSProtocols, rpChannelTable=rpChannelTable, risingAlarm=risingAlarm, rpAlarmEntry=rpAlarmEntry, rpBufferControlEntry=rpBufferControlEntry, rpMatrixDSFirstTransmit=rpMatrixDSFirstTransmit, rpChannelMatchOctets=rpChannelMatchOctets, rpHostMonitorControlInactiveEvent=rpHostMonitorControlInactiveEvent, rpHostLastTransmit=rpHostLastTransmit, rpHostMonitorActivity=rpHostMonitorActivity, rpHosts=rpHosts, rpAlarmTable=rpAlarmTable, rpMatrixDSEntry=rpMatrixDSEntry, rpDuplicateIpTable=rpDuplicateIpTable, rmonExtensions=rmonExtensions, rpChannelIndex=rpChannelIndex, rpMacToIpMACAddress=rpMacToIpMACAddress, rpMatrixDSTable=rpMatrixDSTable, rpAlarmFallingDescription=rpAlarmFallingDescription, rpAdmin=rpAdmin, rpHostMonitorControlTable=rpHostMonitorControlTable, rpHostTimeFirstTransmit=rpHostTimeFirstTransmit, rpDuplicateIpOldMAC=rpDuplicateIpOldMAC, rpHostMonitorControlOwner=rpHostMonitorControlOwner, rpMatrixSDTable=rpMatrixSDTable, rpAlarmRisingDescription=rpAlarmRisingDescription, rmonPlus_mib=rmonPlus_mib, rpHostInactive=rpHostInactive, rpHostTimeTable=rpHostTimeTable, rpMacToIpIPAddress=rpMacToIpIPAddress, rpHostMonitorTable=rpHostMonitorTable, rpDuplicateIp=rpDuplicateIp, rpDuplicateIpNewMAC=rpDuplicateIpNewMAC, rpHostTimeCreationOrder=rpHostTimeCreationOrder, rpChannelControlBufferFull=rpChannelControlBufferFull, productType=productType, rpHostTable=rpHostTable, rpHostAddress=rpHostAddress, rpBufferCaptureOctets=rpBufferCaptureOctets, rpHostMonitorControlStatus=rpHostMonitorControlStatus, rpMatrixSDProtocols=rpMatrixSDProtocols, rpAlarmIndex=rpAlarmIndex, rpHostProtocols=rpHostProtocols, rpMatrixSDFirstTransmit=rpMatrixSDFirstTransmit, rpFilterIndex=rpFilterIndex, rpHostTimeProtocols=rpHostTimeProtocols, rpHostMonitorIndex=rpHostMonitorIndex, rpMatrix=rpMatrix, lantern_rmonPlus=lantern_rmonPlus, novell=novell, rpMatrixSDEntry=rpMatrixSDEntry)
