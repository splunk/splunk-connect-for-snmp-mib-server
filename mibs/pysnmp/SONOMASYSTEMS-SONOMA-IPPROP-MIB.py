#
# PySNMP MIB module SONOMASYSTEMS-SONOMA-IPPROP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SONOMASYSTEMS-SONOMA-IPPROP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:01:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Counter32, Bits, Integer32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, MibIdentifier, TimeTicks, Counter64, iso, ObjectIdentity, IpAddress, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter32", "Bits", "Integer32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "MibIdentifier", "TimeTicks", "Counter64", "iso", "ObjectIdentity", "IpAddress", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
sonomaRouting, = mibBuilder.importSymbols("SONOMASYSTEMS-SONOMA-MIB", "sonomaRouting")
ipRouting = MibIdentifier((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1))
ipRIPState = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRIPState.setStatus('mandatory')
ipSecurity = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSecurity.setStatus('mandatory')
ipPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 3), )
if mibBuilder.loadTexts: ipPortConfigTable.setStatus('mandatory')
ipPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 3, 1), ).setIndexNames((0, "SONOMASYSTEMS-SONOMA-IPPROP-MIB", "ipPortConfigIndex"))
if mibBuilder.loadTexts: ipPortConfigEntry.setStatus('mandatory')
ipPortConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPortConfigIndex.setStatus('mandatory')
ipPortForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortForwarding.setStatus('mandatory')
ipPortMACEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noencap", 1), ("ethernet", 2), ("ieee8023", 3), ("tokenRing", 4), ("tokenRingSnap", 5), ("fddiSnap", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortMACEncapsulation.setStatus('mandatory')
ipPortDisposition = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bridge", 1), ("discard", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortDisposition.setStatus('mandatory')
ipPortMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortMTU.setStatus('mandatory')
ipPortDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 3, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortDefaultGateway.setStatus('mandatory')
ipPortDefaultGatewayLP = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortDefaultGatewayLP.setStatus('mandatory')
ipPortAddrTable = MibTable((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 4), )
if mibBuilder.loadTexts: ipPortAddrTable.setStatus('mandatory')
ipPortAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 4, 1), ).setIndexNames((0, "SONOMASYSTEMS-SONOMA-IPPROP-MIB", "ipPortAddrIndex"), (0, "SONOMASYSTEMS-SONOMA-IPPROP-MIB", "ipPortIpAddress"))
if mibBuilder.loadTexts: ipPortAddrEntry.setStatus('mandatory')
ipPortAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortAddrIndex.setStatus('mandatory')
ipPortIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 4, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortIpAddress.setStatus('mandatory')
ipPortIpAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 4, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortIpAddressMask.setStatus('mandatory')
ipPortAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortAddrType.setStatus('mandatory')
ipAccessViolations = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAccessViolations.setStatus('mandatory')
ipOtherDiscards = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOtherDiscards.setStatus('mandatory')
ipOutTransmits = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOutTransmits.setStatus('mandatory')
ipRelay = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRelay.setStatus('mandatory')
ipRelayServerTable = MibTable((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 9), )
if mibBuilder.loadTexts: ipRelayServerTable.setStatus('mandatory')
ipRelayServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 9, 1), ).setIndexNames((0, "SONOMASYSTEMS-SONOMA-IPPROP-MIB", "ipRelayServerAddress"))
if mibBuilder.loadTexts: ipRelayServerEntry.setStatus('mandatory')
ipRelayServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 9, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRelayServerAddress.setStatus('mandatory')
ipRelayServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRelayServerStatus.setStatus('mandatory')
ipDhcpClient = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDhcpClient.setStatus('mandatory')
ipCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11))
ipInternalReceived = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInternalReceived.setStatus('mandatory')
ipLoopback = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipLoopback.setStatus('mandatory')
ipNonFastPath = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNonFastPath.setStatus('mandatory')
ipBackgroundPath = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipBackgroundPath.setStatus('mandatory')
ipNotForwarding = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNotForwarding.setStatus('mandatory')
ipVlanMismatch = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipVlanMismatch.setStatus('mandatory')
ipShortHeader = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipShortHeader.setStatus('mandatory')
ipHeaderLengthError = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipHeaderLengthError.setStatus('mandatory')
ipVersionError = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipVersionError.setStatus('mandatory')
ipCsumError = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCsumError.setStatus('mandatory')
ipFwdFormatError = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdFormatError.setStatus('mandatory')
ipConvFailedInbound = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipConvFailedInbound.setStatus('mandatory')
ipConvFailedOutbound = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipConvFailedOutbound.setStatus('mandatory')
ipArpRequestsSent = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipArpRequestsSent.setStatus('mandatory')
ipArpRepliesSent = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipArpRepliesSent.setStatus('mandatory')
ipArpRequestsRecv = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipArpRequestsRecv.setStatus('mandatory')
ipArpRepliesRecv = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipArpRepliesRecv.setStatus('mandatory')
ipArpQueueSatisfied = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipArpQueueSatisfied.setStatus('mandatory')
ipArpQueueDropped = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipArpQueueDropped.setStatus('mandatory')
ipArpNotQueuedLimit = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipArpNotQueuedLimit.setStatus('mandatory')
ipRequestsThrottled = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRequestsThrottled.setStatus('mandatory')
ipRequestsThrottledLastSecond = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRequestsThrottledLastSecond.setStatus('mandatory')
ipParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 12))
ipparamBackwardingThrottle = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 12, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 64000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipparamBackwardingThrottle.setStatus('mandatory')
mibBuilder.exportSymbols("SONOMASYSTEMS-SONOMA-IPPROP-MIB", ipBackgroundPath=ipBackgroundPath, ipArpQueueDropped=ipArpQueueDropped, ipPortDefaultGatewayLP=ipPortDefaultGatewayLP, ipPortDefaultGateway=ipPortDefaultGateway, ipPortAddrType=ipPortAddrType, ipHeaderLengthError=ipHeaderLengthError, ipNonFastPath=ipNonFastPath, ipparamBackwardingThrottle=ipparamBackwardingThrottle, ipArpRepliesSent=ipArpRepliesSent, ipCsumError=ipCsumError, ipPortConfigTable=ipPortConfigTable, ipNotForwarding=ipNotForwarding, ipArpRequestsRecv=ipArpRequestsRecv, ipPortConfigEntry=ipPortConfigEntry, ipPortIpAddressMask=ipPortIpAddressMask, ipOtherDiscards=ipOtherDiscards, ipRelayServerStatus=ipRelayServerStatus, ipFwdFormatError=ipFwdFormatError, ipPortConfigIndex=ipPortConfigIndex, ipPortForwarding=ipPortForwarding, ipPortIpAddress=ipPortIpAddress, ipRelay=ipRelay, ipRelayServerTable=ipRelayServerTable, ipRelayServerEntry=ipRelayServerEntry, ipConvFailedInbound=ipConvFailedInbound, ipInternalReceived=ipInternalReceived, ipArpRepliesRecv=ipArpRepliesRecv, ipAccessViolations=ipAccessViolations, ipPortMACEncapsulation=ipPortMACEncapsulation, ipCounters=ipCounters, ipArpQueueSatisfied=ipArpQueueSatisfied, ipShortHeader=ipShortHeader, ipPortAddrIndex=ipPortAddrIndex, ipDhcpClient=ipDhcpClient, ipVersionError=ipVersionError, ipArpNotQueuedLimit=ipArpNotQueuedLimit, ipSecurity=ipSecurity, ipParameters=ipParameters, ipOutTransmits=ipOutTransmits, ipPortAddrEntry=ipPortAddrEntry, ipConvFailedOutbound=ipConvFailedOutbound, ipArpRequestsSent=ipArpRequestsSent, ipPortDisposition=ipPortDisposition, ipRouting=ipRouting, ipVlanMismatch=ipVlanMismatch, ipLoopback=ipLoopback, ipRequestsThrottledLastSecond=ipRequestsThrottledLastSecond, ipPortAddrTable=ipPortAddrTable, ipRequestsThrottled=ipRequestsThrottled, ipPortMTU=ipPortMTU, ipRelayServerAddress=ipRelayServerAddress, ipRIPState=ipRIPState)
