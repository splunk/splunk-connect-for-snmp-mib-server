#
# PySNMP MIB module OMNI-gx2GS1000-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OMNI-gx2GS1000-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:24:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
gx2Gs1000, = mibBuilder.importSymbols("GX2HFC-MIB", "gx2Gs1000")
motproxies, gi = mibBuilder.importSymbols("NLS-BBNIDENT-MIB", "motproxies", "gi")
trapNetworkElemAvailStatus, trapIdentifier, trapPerceivedSeverity, trapNetworkElemSerialNum, trapNetworkElemOperState, trapText, trapChangedValueDisplayString, trapNetworkElemAdminState, trapNetworkElemModelNumber, trapNETrapLastTrapTimeStamp, trapChangedValueInteger, trapNetworkElemAlarmStatus, trapChangedObjectId = mibBuilder.importSymbols("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus", "trapIdentifier", "trapPerceivedSeverity", "trapNetworkElemSerialNum", "trapNetworkElemOperState", "trapText", "trapChangedValueDisplayString", "trapNetworkElemAdminState", "trapNetworkElemModelNumber", "trapNETrapLastTrapTimeStamp", "trapChangedValueInteger", "trapNetworkElemAlarmStatus", "trapChangedObjectId")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysUpTime, = mibBuilder.importSymbols("SNMPv2-MIB", "sysUpTime")
ObjectIdentity, Gauge32, Counter64, IpAddress, Unsigned32, MibIdentifier, Integer32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter32, ModuleIdentity, NotificationType, iso, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Gauge32", "Counter64", "IpAddress", "Unsigned32", "MibIdentifier", "Integer32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter32", "ModuleIdentity", "NotificationType", "iso", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class Float(Counter32):
    pass

gx2gs1000Descriptor = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 1))
gx2gs1000AnalogTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2), )
if mibBuilder.loadTexts: gx2gs1000AnalogTable.setStatus('mandatory')
gx2gs1000AnalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1), ).setIndexNames((0, "OMNI-gx2GS1000-MIB", "gx2gs1000AnalogTableIndex"))
if mibBuilder.loadTexts: gx2gs1000AnalogEntry.setStatus('mandatory')
gx2gs1000DigitalTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 3), )
if mibBuilder.loadTexts: gx2gs1000DigitalTable.setStatus('mandatory')
gx2gs1000DigitalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 3, 2), ).setIndexNames((0, "OMNI-gx2GS1000-MIB", "gx2gs1000DigitalTableIndex"))
if mibBuilder.loadTexts: gx2gs1000DigitalEntry.setStatus('mandatory')
gx2gs1000StatusTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 4), )
if mibBuilder.loadTexts: gx2gs1000StatusTable.setStatus('mandatory')
gx2gs1000StatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 4, 3), ).setIndexNames((0, "OMNI-gx2GS1000-MIB", "gx2gs1000StatusTableIndex"))
if mibBuilder.loadTexts: gx2gs1000StatusEntry.setStatus('mandatory')
gx2gs1000FactoryTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 5), )
if mibBuilder.loadTexts: gx2gs1000FactoryTable.setStatus('mandatory')
gx2gs1000FactoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 5, 4), ).setIndexNames((0, "OMNI-gx2GS1000-MIB", "gx2gs1000FactoryTableIndex"))
if mibBuilder.loadTexts: gx2gs1000FactoryEntry.setStatus('mandatory')
gx2gs1000AnalogTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2gs1000AnalogTableIndex.setStatus('mandatory')
gs1000labelOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000labelOffsetNomMonitor.setStatus('optional')
gs1000uomOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000uomOffsetNomMonitor.setStatus('optional')
gs1000majorHighOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 4), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000majorHighOffsetNomMonitor.setStatus('mandatory')
gs1000majorLowOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 5), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000majorLowOffsetNomMonitor.setStatus('mandatory')
gs1000minorHighOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 6), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000minorHighOffsetNomMonitor.setStatus('mandatory')
gs1000minorLowOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 7), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000minorLowOffsetNomMonitor.setStatus('mandatory')
gs1000currentValueOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 8), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000currentValueOffsetNomMonitor.setStatus('mandatory')
gs1000stateFlagOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000stateFlagOffsetNomMonitor.setStatus('mandatory')
gs1000minValueOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 10), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000minValueOffsetNomMonitor.setStatus('mandatory')
gs1000maxValueOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 11), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000maxValueOffsetNomMonitor.setStatus('mandatory')
gs1000alarmStateOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000alarmStateOffsetNomMonitor.setStatus('mandatory')
gs1000labelOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000labelOffsetNomCnt.setStatus('optional')
gs1000uomOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000uomOffsetNomCnt.setStatus('optional')
gs1000majorHighOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 15), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000majorHighOffsetNomCnt.setStatus('optional')
gs1000majorLowOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 16), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000majorLowOffsetNomCnt.setStatus('optional')
gs1000minorHighOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 17), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000minorHighOffsetNomCnt.setStatus('optional')
gs1000minorLowOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 18), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000minorLowOffsetNomCnt.setStatus('optional')
gs1000currentValueOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 19), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gs1000currentValueOffsetNomCnt.setStatus('mandatory')
gs1000stateFlagOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000stateFlagOffsetNomCnt.setStatus('mandatory')
gs1000minValueOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 21), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000minValueOffsetNomCnt.setStatus('mandatory')
gs1000maxValueOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 22), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000maxValueOffsetNomCnt.setStatus('mandatory')
gs1000alarmStateOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000alarmStateOffsetNomCnt.setStatus('mandatory')
gs1000labelOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000labelOptPower.setStatus('optional')
gs1000uomOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000uomOptPower.setStatus('optional')
gs1000majorHighOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 26), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000majorHighOptPower.setStatus('mandatory')
gs1000majorLowOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 27), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000majorLowOptPower.setStatus('mandatory')
gs1000minorHighOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 28), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000minorHighOptPower.setStatus('optional')
gs1000minorLowOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 29), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000minorLowOptPower.setStatus('optional')
gs1000currentValueOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 30), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000currentValueOptPower.setStatus('mandatory')
gs1000stateFlagOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000stateFlagOptPower.setStatus('mandatory')
gs1000minValueOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 32), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000minValueOptPower.setStatus('mandatory')
gs1000maxValueOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 33), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000maxValueOptPower.setStatus('mandatory')
gs1000alarmStateOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000alarmStateOptPower.setStatus('mandatory')
gs1000labelLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000labelLaserTemp.setStatus('optional')
gs1000uomLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000uomLaserTemp.setStatus('optional')
gs1000majorHighLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 37), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000majorHighLaserTemp.setStatus('mandatory')
gs1000majorLowLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 38), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000majorLowLaserTemp.setStatus('mandatory')
gs1000minorHighLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 39), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000minorHighLaserTemp.setStatus('mandatory')
gs1000minorLowLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 40), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000minorLowLaserTemp.setStatus('mandatory')
gs1000currentValueLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 41), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000currentValueLaserTemp.setStatus('mandatory')
gs1000stateFlagLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000stateFlagLaserTemp.setStatus('mandatory')
gs1000minValueLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 43), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000minValueLaserTemp.setStatus('mandatory')
gs1000maxValueLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 44), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000maxValueLaserTemp.setStatus('mandatory')
gs1000alarmStateLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000alarmStateLaserTemp.setStatus('mandatory')
gs1000labelLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000labelLaserBias.setStatus('optional')
gs1000uomLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000uomLaserBias.setStatus('optional')
gs1000majorHighLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 48), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000majorHighLaserBias.setStatus('mandatory')
gs1000majorLowLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 49), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000majorLowLaserBias.setStatus('mandatory')
gs1000minorHighLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 50), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000minorHighLaserBias.setStatus('optional')
gs1000minorLowLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 51), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000minorLowLaserBias.setStatus('optional')
gs1000currentValueLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 52), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000currentValueLaserBias.setStatus('mandatory')
gs1000stateFlagLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000stateFlagLaserBias.setStatus('mandatory')
gs1000minValueLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 54), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000minValueLaserBias.setStatus('mandatory')
gs1000maxValueLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 55), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000maxValueLaserBias.setStatus('mandatory')
gs1000alarmStateLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000alarmStateLaserBias.setStatus('mandatory')
gs1000labelTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000labelTecCurrent.setStatus('optional')
gs1000uomTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000uomTecCurrent.setStatus('optional')
gs1000majorHighTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 59), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000majorHighTecCurrent.setStatus('mandatory')
gs1000majorLowTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 60), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000majorLowTecCurrent.setStatus('mandatory')
gs1000minorHighTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 61), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000minorHighTecCurrent.setStatus('optional')
gs1000minorLowTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 62), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000minorLowTecCurrent.setStatus('optional')
gs1000currentValueTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 63), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000currentValueTecCurrent.setStatus('mandatory')
gs1000stateFlagTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000stateFlagTecCurrent.setStatus('mandatory')
gs1000minValueTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 65), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000minValueTecCurrent.setStatus('mandatory')
gs1000maxValueTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 66), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000maxValueTecCurrent.setStatus('mandatory')
gs1000alarmStateTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000alarmStateTecCurrent.setStatus('mandatory')
gs1000labelModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 68), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000labelModuleTemp.setStatus('optional')
gs1000uomModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 69), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000uomModuleTemp.setStatus('optional')
gs1000majorHighModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 70), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000majorHighModuleTemp.setStatus('mandatory')
gs1000majorLowModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 71), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000majorLowModuleTemp.setStatus('mandatory')
gs1000minorHighModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 72), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000minorHighModuleTemp.setStatus('mandatory')
gs1000minorLowModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 73), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000minorLowModuleTemp.setStatus('mandatory')
gs1000currentValueModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 74), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000currentValueModuleTemp.setStatus('mandatory')
gs1000stateFlagModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000stateFlagModuleTemp.setStatus('mandatory')
gs1000minValueModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 76), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000minValueModuleTemp.setStatus('mandatory')
gs1000maxValueModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 77), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000maxValueModuleTemp.setStatus('mandatory')
gs1000alarmStateModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000alarmStateModuleTemp.setStatus('mandatory')
gs1000labelFan1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 79), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000labelFan1Speed.setStatus('optional')
gs1000uomFan1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 80), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000uomFan1Speed.setStatus('optional')
gs1000majorHighFan1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 81), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000majorHighFan1Speed.setStatus('optional')
gs1000majorLowFan1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 82), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000majorLowFan1Speed.setStatus('mandatory')
gs1000minorHighFan1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 83), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000minorHighFan1Speed.setStatus('optional')
gs1000minorLowFan1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 84), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000minorLowFan1Speed.setStatus('mandatory')
gs1000currentValueFan1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 85), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000currentValueFan1Speed.setStatus('mandatory')
gs1000stateFlagFan1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000stateFlagFan1Speed.setStatus('mandatory')
gs1000minValueFan1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 87), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000minValueFan1Speed.setStatus('mandatory')
gs1000maxValueFan1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 88), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000maxValueFan1Speed.setStatus('mandatory')
gs1000alarmStateFan1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000alarmStateFan1Speed.setStatus('mandatory')
gs1000labelFan2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 90), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000labelFan2Speed.setStatus('optional')
gs1000uomFan2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 91), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000uomFan2Speed.setStatus('optional')
gs1000majorHighFan2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 92), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000majorHighFan2Speed.setStatus('optional')
gs1000majorLowFan2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 93), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000majorLowFan2Speed.setStatus('mandatory')
gs1000minorHighFan2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 94), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000minorHighFan2Speed.setStatus('optional')
gs1000minorLowFan2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 95), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000minorLowFan2Speed.setStatus('mandatory')
gs1000currentValueFan2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 96), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000currentValueFan2Speed.setStatus('mandatory')
gs1000stateFlagFan2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 97), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000stateFlagFan2Speed.setStatus('mandatory')
gs1000minValueFan2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 98), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000minValueFan2Speed.setStatus('mandatory')
gs1000maxValueFan2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 99), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000maxValueFan2Speed.setStatus('mandatory')
gs1000alarmStateFan2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000alarmStateFan2Speed.setStatus('mandatory')
gs1000label12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 101), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000label12Volt.setStatus('optional')
gs1000uom12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 102), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000uom12Volt.setStatus('optional')
gs1000majorHigh12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 103), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000majorHigh12Volt.setStatus('mandatory')
gs1000majorLow12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 104), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000majorLow12Volt.setStatus('mandatory')
gs1000minorHigh12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 105), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000minorHigh12Volt.setStatus('mandatory')
gs1000minorLow12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 106), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000minorLow12Volt.setStatus('mandatory')
gs1000currentValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 107), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000currentValue12Volt.setStatus('mandatory')
gs1000stateFlag12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 108), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000stateFlag12Volt.setStatus('mandatory')
gs1000minValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 109), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000minValue12Volt.setStatus('mandatory')
gs1000maxValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 110), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000maxValue12Volt.setStatus('mandatory')
gs1000alarmState12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 2, 1, 111), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000alarmState12Volt.setStatus('mandatory')
gx2gs1000DigitalTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2gs1000DigitalTableIndex.setStatus('mandatory')
gs1000labelRfInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 3, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000labelRfInput.setStatus('optional')
gs1000enumRfInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 3, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000enumRfInput.setStatus('optional')
gs1000valueRfInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gs1000valueRfInput.setStatus('mandatory')
gs1000stateflagRfInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000stateflagRfInput.setStatus('mandatory')
gs1000labelOptOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 3, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000labelOptOutput.setStatus('optional')
gs1000enumOptOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 3, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000enumOptOutput.setStatus('optional')
gs1000valueOptOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 3, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gs1000valueOptOutput.setStatus('mandatory')
gs1000stateflagOptOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 3, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000stateflagOptOutput.setStatus('mandatory')
gs1000labelLaserMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 3, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000labelLaserMode.setStatus('optional')
gs1000enumLaserMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 3, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000enumLaserMode.setStatus('optional')
gs1000valueLaserMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 3, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("preset", 1), ("set", 2), ("setEquate", 3), ("manual", 4), ("manualEquate", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gs1000valueLaserMode.setStatus('mandatory')
gs1000stateflagLaserMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 3, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000stateflagLaserMode.setStatus('mandatory')
gs1000labelAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 3, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000labelAttenSetting.setStatus('optional')
gs1000enumAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 3, 2, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000enumAttenSetting.setStatus('optional')
gs1000valueAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 3, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("attn0pt0", 1), ("attn0pt5", 2), ("attn1pt0", 3), ("attn1pt5", 4), ("attn2pt0", 5), ("attn2pt5", 6), ("attn3pt0", 7), ("attn3pt5", 8), ("attn4pt0", 9), ("attn4pt5", 10), ("attn5pt0", 11), ("attn5pt5", 12), ("attn6pt0", 13), ("attn6pt5", 14), ("attn7pt0", 15), ("attn7pt5", 16), ("attn8pt0", 17), ("attn8pt5", 18), ("attn9pt0", 19), ("attn9pt5", 20), ("attn10pt0", 21), ("attn10pt5", 22), ("attn11pt0", 23), ("attn11pt5", 24), ("attn12pt0", 25)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gs1000valueAttenSetting.setStatus('mandatory')
gs1000stateflagAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 3, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000stateflagAttenSetting.setStatus('mandatory')
gs1000labelLaserSecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 3, 2, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000labelLaserSecMode.setStatus('optional')
gs1000enumLaserSecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 3, 2, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000enumLaserSecMode.setStatus('optional')
gs1000valueLaserSecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 3, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cw", 1), ("video", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gs1000valueLaserSecMode.setStatus('mandatory')
gs1000stateflagLaserSecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 3, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000stateflagLaserSecMode.setStatus('mandatory')
gs1000labelVideoOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 3, 2, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000labelVideoOffset.setStatus('optional')
gs1000enumVideoOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 3, 2, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000enumVideoOffset.setStatus('optional')
gs1000valueVideoOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 3, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("minus1dB", 1), ("minus2dB", 2), ("minus3dB", 3), ("minus4dB", 4), ("minus5dB", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gs1000valueVideoOffset.setStatus('mandatory')
gs1000stateflagVideoOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 3, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000stateflagVideoOffset.setStatus('mandatory')
gs1000labelFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 3, 2, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000labelFactoryDefault.setStatus('optional')
gs1000enumFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 3, 2, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000enumFactoryDefault.setStatus('optional')
gs1000valueFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 3, 2, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gs1000valueFactoryDefault.setStatus('mandatory')
gs1000stateflagFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 3, 2, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000stateflagFactoryDefault.setStatus('mandatory')
gx2gs1000StatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 4, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2gs1000StatusTableIndex.setStatus('mandatory')
gs1000labelBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 4, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000labelBoot.setStatus('optional')
gs1000valueBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000valueBoot.setStatus('mandatory')
gs1000stateflagBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000stateflagBoot.setStatus('mandatory')
gs1000labelFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 4, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000labelFlash.setStatus('optional')
gs1000valueFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000valueFlash.setStatus('mandatory')
gs1000stateflagFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 4, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000stateflagFlash.setStatus('mandatory')
gs1000labelFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 4, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000labelFactoryDataCRC.setStatus('optional')
gs1000valueFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 4, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000valueFactoryDataCRC.setStatus('mandatory')
gs1000stateflagFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 4, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000stateflagFactoryDataCRC.setStatus('mandatory')
gs1000labelLaserDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 4, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000labelLaserDataCRC.setStatus('optional')
gs1000valueLaserDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 4, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000valueLaserDataCRC.setStatus('mandatory')
gs1000stateflagLaserDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 4, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000stateflagLaserDataCRC.setStatus('mandatory')
gs1000labelAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 4, 3, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000labelAlarmDataCrc.setStatus('optional')
gs1000valueAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 4, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000valueAlarmDataCrc.setStatus('mandatory')
gs1000stateflagAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 4, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000stateflagAlarmDataCrc.setStatus('mandatory')
gs1000labelRFInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 4, 3, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000labelRFInputStatus.setStatus('optional')
gs1000valueRFInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 4, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000valueRFInputStatus.setStatus('mandatory')
gs1000stateflagRFInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 4, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000stateflagRFInputStatus.setStatus('mandatory')
gx2gs1000FactoryTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 5, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2gs1000FactoryTableIndex.setStatus('mandatory')
gs1000bootControlByteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 5, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000bootControlByteValue.setStatus('mandatory')
gs1000bootStatusByteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 5, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000bootStatusByteValue.setStatus('mandatory')
gs1000bank1CRCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 5, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000bank1CRCValue.setStatus('mandatory')
gs1000bank2CRCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 5, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000bank2CRCValue.setStatus('mandatory')
gs1000prgEEPROMByteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 5, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000prgEEPROMByteValue.setStatus('mandatory')
gs1000factoryCRCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 5, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000factoryCRCValue.setStatus('mandatory')
gs1000calculateCRCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 5, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("factory", 1), ("laserData", 2), ("alarm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000calculateCRCValue.setStatus('mandatory')
gs1000hourMeterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 5, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000hourMeterValue.setStatus('mandatory')
gs1000flashPrgCntAValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 5, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000flashPrgCntAValue.setStatus('mandatory')
gs1000flashPrgCntBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 5, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000flashPrgCntBValue.setStatus('mandatory')
gs1000flashBankARevValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 5, 4, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000flashBankARevValue.setStatus('mandatory')
gs1000flashBankBRevValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36, 5, 4, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gs1000flashBankBRevValue.setStatus('mandatory')
trapGS1000ConfigChangeInteger = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36) + (0,1)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapGS1000ConfigChangeDisplayString = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36) + (0,2)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueDisplayString"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapGS1000RFInputAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36) + (0,3)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapGS1000RFOverloadAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36) + (0,4)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapGS1000RFOffsetAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36) + (0,5)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapGS1000OpticalPowerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36) + (0,6)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapGS1000LaserBiasAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36) + (0,7)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapGS1000LaserTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36) + (0,8)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapGS1000TECCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36) + (0,9)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapGS1000Fan1SpeedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36) + (0,10)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapGS1000Fan2SpeedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36) + (0,11)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapGS100012vAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36) + (0,12)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapGS1000ModuleTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36) + (0,13)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapGS1000FlashAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36) + (0,14)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapGS1000LaserBiasCntLoopAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36) + (0,15)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapGS1000BankBootAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36) + (0,16)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapGS1000LaserBiasCntLoopInitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36) + (0,17)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapGS1000RFParamInitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36) + (0,18)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapGS1000TECParamInitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36) + (0,19)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapGS1000AttnTableInitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36) + (0,20)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapGS1000PowerMeterTableInitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36) + (0,21)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapGS1000LaserDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36) + (0,22)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapGS1000AlarmDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36) + (0,23)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapGS1000FactoryDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36) + (0,24)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapGS1000UserRFOffAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36) + (0,25)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapGS1000UserOpticalOffAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36) + (0,26)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapGS1000ResetFactoryDefaultAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 36) + (0,27)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
mibBuilder.exportSymbols("OMNI-gx2GS1000-MIB", gs1000uomOptPower=gs1000uomOptPower, gs1000uomModuleTemp=gs1000uomModuleTemp, trapGS1000UserRFOffAlarm=trapGS1000UserRFOffAlarm, gs1000labelOffsetNomCnt=gs1000labelOffsetNomCnt, gs1000valueAttenSetting=gs1000valueAttenSetting, gs1000stateFlagTecCurrent=gs1000stateFlagTecCurrent, gs1000stateflagFactoryDefault=gs1000stateflagFactoryDefault, gs1000uomLaserTemp=gs1000uomLaserTemp, gs1000majorHighLaserTemp=gs1000majorHighLaserTemp, Float=Float, gs1000minorLowOptPower=gs1000minorLowOptPower, gs1000majorLowModuleTemp=gs1000majorLowModuleTemp, trapGS1000AttnTableInitAlarm=trapGS1000AttnTableInitAlarm, gs1000stateflagLaserDataCRC=gs1000stateflagLaserDataCRC, gs1000labelRfInput=gs1000labelRfInput, gs1000alarmStateFan1Speed=gs1000alarmStateFan1Speed, gs1000currentValueOffsetNomMonitor=gs1000currentValueOffsetNomMonitor, gx2gs1000FactoryTable=gx2gs1000FactoryTable, gs1000minValueLaserTemp=gs1000minValueLaserTemp, gs1000majorHighOptPower=gs1000majorHighOptPower, gs1000currentValueModuleTemp=gs1000currentValueModuleTemp, gs1000currentValueLaserBias=gs1000currentValueLaserBias, gs1000uomLaserBias=gs1000uomLaserBias, gs1000uomTecCurrent=gs1000uomTecCurrent, gs1000maxValueFan1Speed=gs1000maxValueFan1Speed, gx2gs1000AnalogTableIndex=gx2gs1000AnalogTableIndex, gs1000majorHighLaserBias=gs1000majorHighLaserBias, trapGS1000PowerMeterTableInitAlarm=trapGS1000PowerMeterTableInitAlarm, trapGS1000UserOpticalOffAlarm=trapGS1000UserOpticalOffAlarm, gs1000majorLowOffsetNomMonitor=gs1000majorLowOffsetNomMonitor, gs1000majorLowOptPower=gs1000majorLowOptPower, gs1000valueLaserDataCRC=gs1000valueLaserDataCRC, gs1000enumLaserMode=gs1000enumLaserMode, gs1000minValueFan2Speed=gs1000minValueFan2Speed, gs1000minValueOptPower=gs1000minValueOptPower, gs1000maxValueFan2Speed=gs1000maxValueFan2Speed, gs1000stateflagOptOutput=gs1000stateflagOptOutput, gs1000labelModuleTemp=gs1000labelModuleTemp, gs1000stateFlagLaserTemp=gs1000stateFlagLaserTemp, gs1000stateflagAttenSetting=gs1000stateflagAttenSetting, gs1000majorHighFan2Speed=gs1000majorHighFan2Speed, gs1000enumFactoryDefault=gs1000enumFactoryDefault, gs1000enumLaserSecMode=gs1000enumLaserSecMode, gs1000maxValueOffsetNomCnt=gs1000maxValueOffsetNomCnt, gs1000valueBoot=gs1000valueBoot, gs1000labelFactoryDefault=gs1000labelFactoryDefault, gs1000minorHighFan2Speed=gs1000minorHighFan2Speed, gs1000minorHighTecCurrent=gs1000minorHighTecCurrent, gs1000hourMeterValue=gs1000hourMeterValue, gs1000currentValueOptPower=gs1000currentValueOptPower, trapGS1000RFInputAlarm=trapGS1000RFInputAlarm, trapGS1000FactoryDataCRCAlarm=trapGS1000FactoryDataCRCAlarm, gs1000flashPrgCntBValue=gs1000flashPrgCntBValue, gs1000minorHighLaserTemp=gs1000minorHighLaserTemp, trapGS1000LaserBiasAlarm=trapGS1000LaserBiasAlarm, gs1000stateFlag12Volt=gs1000stateFlag12Volt, gs1000minValue12Volt=gs1000minValue12Volt, gs1000stateFlagOffsetNomMonitor=gs1000stateFlagOffsetNomMonitor, gs1000minorHighModuleTemp=gs1000minorHighModuleTemp, gs1000labelLaserMode=gs1000labelLaserMode, gx2gs1000DigitalEntry=gx2gs1000DigitalEntry, gs1000alarmState12Volt=gs1000alarmState12Volt, trapGS1000Fan1SpeedAlarm=trapGS1000Fan1SpeedAlarm, gx2gs1000DigitalTable=gx2gs1000DigitalTable, gs1000labelBoot=gs1000labelBoot, gs1000valueFactoryDefault=gs1000valueFactoryDefault, gs1000minValueOffsetNomCnt=gs1000minValueOffsetNomCnt, gs1000valueLaserSecMode=gs1000valueLaserSecMode, gs1000stateflagAlarmDataCrc=gs1000stateflagAlarmDataCrc, gx2gs1000StatusEntry=gx2gs1000StatusEntry, gs1000minorLowOffsetNomCnt=gs1000minorLowOffsetNomCnt, gs1000currentValue12Volt=gs1000currentValue12Volt, gs1000majorLowFan1Speed=gs1000majorLowFan1Speed, gs1000maxValueOptPower=gs1000maxValueOptPower, gs1000labelAttenSetting=gs1000labelAttenSetting, gs1000maxValueLaserTemp=gs1000maxValueLaserTemp, gs1000minorHighOffsetNomMonitor=gs1000minorHighOffsetNomMonitor, gs1000flashPrgCntAValue=gs1000flashPrgCntAValue, gs1000valueOptOutput=gs1000valueOptOutput, gs1000calculateCRCValue=gs1000calculateCRCValue, gs1000alarmStateOffsetNomCnt=gs1000alarmStateOffsetNomCnt, gs1000minorLowLaserTemp=gs1000minorLowLaserTemp, gs1000labelTecCurrent=gs1000labelTecCurrent, gs1000majorHighTecCurrent=gs1000majorHighTecCurrent, gs1000minValueTecCurrent=gs1000minValueTecCurrent, gs1000labelOptOutput=gs1000labelOptOutput, gs1000labelLaserBias=gs1000labelLaserBias, gs1000minorHighFan1Speed=gs1000minorHighFan1Speed, gx2gs1000Descriptor=gx2gs1000Descriptor, trapGS1000LaserTempAlarm=trapGS1000LaserTempAlarm, trapGS1000RFParamInitAlarm=trapGS1000RFParamInitAlarm, gs1000currentValueFan2Speed=gs1000currentValueFan2Speed, gs1000alarmStateOptPower=gs1000alarmStateOptPower, gs1000alarmStateLaserTemp=gs1000alarmStateLaserTemp, gs1000majorLow12Volt=gs1000majorLow12Volt, gs1000stateflagLaserMode=gs1000stateflagLaserMode, gs1000maxValueLaserBias=gs1000maxValueLaserBias, gs1000stateflagRfInput=gs1000stateflagRfInput, gs1000maxValueTecCurrent=gs1000maxValueTecCurrent, gs1000stateflagRFInputStatus=gs1000stateflagRFInputStatus, gs1000labelFan1Speed=gs1000labelFan1Speed, gs1000enumRfInput=gs1000enumRfInput, gs1000majorHigh12Volt=gs1000majorHigh12Volt, gs1000stateFlagFan2Speed=gs1000stateFlagFan2Speed, trapGS1000BankBootAlarm=trapGS1000BankBootAlarm, gs1000bootControlByteValue=gs1000bootControlByteValue, gs1000prgEEPROMByteValue=gs1000prgEEPROMByteValue, gx2gs1000AnalogEntry=gx2gs1000AnalogEntry, gs1000factoryCRCValue=gs1000factoryCRCValue, gs1000valueFlash=gs1000valueFlash, trapGS1000AlarmDataCRCAlarm=trapGS1000AlarmDataCRCAlarm, gs1000majorHighOffsetNomCnt=gs1000majorHighOffsetNomCnt, trapGS1000OpticalPowerAlarm=trapGS1000OpticalPowerAlarm, gs1000alarmStateFan2Speed=gs1000alarmStateFan2Speed, gs1000stateflagVideoOffset=gs1000stateflagVideoOffset, gs1000alarmStateOffsetNomMonitor=gs1000alarmStateOffsetNomMonitor, gs1000uomFan1Speed=gs1000uomFan1Speed, gs1000majorLowLaserTemp=gs1000majorLowLaserTemp, gx2gs1000FactoryTableIndex=gx2gs1000FactoryTableIndex, gs1000alarmStateLaserBias=gs1000alarmStateLaserBias, gs1000labelOffsetNomMonitor=gs1000labelOffsetNomMonitor, gs1000label12Volt=gs1000label12Volt, gs1000valueLaserMode=gs1000valueLaserMode, gs1000stateflagFactoryDataCRC=gs1000stateflagFactoryDataCRC, gx2gs1000DigitalTableIndex=gx2gs1000DigitalTableIndex, gs1000uomOffsetNomCnt=gs1000uomOffsetNomCnt, gs1000minorHighLaserBias=gs1000minorHighLaserBias, gs1000uom12Volt=gs1000uom12Volt, trapGS1000ResetFactoryDefaultAlarm=trapGS1000ResetFactoryDefaultAlarm, gx2gs1000StatusTableIndex=gx2gs1000StatusTableIndex, gs1000minorLowFan2Speed=gs1000minorLowFan2Speed, gs1000maxValue12Volt=gs1000maxValue12Volt, gs1000minorLow12Volt=gs1000minorLow12Volt, gs1000majorLowTecCurrent=gs1000majorLowTecCurrent, gs1000alarmStateModuleTemp=gs1000alarmStateModuleTemp, gx2gs1000AnalogTable=gx2gs1000AnalogTable, gs1000valueFactoryDataCRC=gs1000valueFactoryDataCRC, gs1000valueRfInput=gs1000valueRfInput, gs1000valueAlarmDataCrc=gs1000valueAlarmDataCrc, gs1000minorLowTecCurrent=gs1000minorLowTecCurrent, gs1000uomFan2Speed=gs1000uomFan2Speed, gs1000minValueModuleTemp=gs1000minValueModuleTemp, gs1000minValueOffsetNomMonitor=gs1000minValueOffsetNomMonitor, gs1000currentValueTecCurrent=gs1000currentValueTecCurrent, gs1000labelLaserSecMode=gs1000labelLaserSecMode, trapGS1000LaserBiasCntLoopInitAlarm=trapGS1000LaserBiasCntLoopInitAlarm, gx2gs1000FactoryEntry=gx2gs1000FactoryEntry, gs1000currentValueLaserTemp=gs1000currentValueLaserTemp, gs1000enumOptOutput=gs1000enumOptOutput, gs1000currentValueOffsetNomCnt=gs1000currentValueOffsetNomCnt, gs1000labelVideoOffset=gs1000labelVideoOffset, gs1000minorLowLaserBias=gs1000minorLowLaserBias, gs1000uomOffsetNomMonitor=gs1000uomOffsetNomMonitor, gs1000minorLowModuleTemp=gs1000minorLowModuleTemp, gs1000minorHighOptPower=gs1000minorHighOptPower, gs1000stateflagLaserSecMode=gs1000stateflagLaserSecMode, gs1000enumVideoOffset=gs1000enumVideoOffset, gs1000bootStatusByteValue=gs1000bootStatusByteValue, trapGS1000FlashAlarm=trapGS1000FlashAlarm, gs1000currentValueFan1Speed=gs1000currentValueFan1Speed, gs1000minValueFan1Speed=gs1000minValueFan1Speed, trapGS1000LaserBiasCntLoopAlarm=trapGS1000LaserBiasCntLoopAlarm, gs1000valueVideoOffset=gs1000valueVideoOffset, gs1000alarmStateTecCurrent=gs1000alarmStateTecCurrent, gs1000majorLowFan2Speed=gs1000majorLowFan2Speed, trapGS100012vAlarm=trapGS100012vAlarm, gs1000majorHighModuleTemp=gs1000majorHighModuleTemp, gs1000minValueLaserBias=gs1000minValueLaserBias, gs1000stateflagBoot=gs1000stateflagBoot, gs1000stateflagFlash=gs1000stateflagFlash, trapGS1000TECParamInitAlarm=trapGS1000TECParamInitAlarm, gs1000labelAlarmDataCrc=gs1000labelAlarmDataCrc, gs1000minorHigh12Volt=gs1000minorHigh12Volt, trapGS1000RFOverloadAlarm=trapGS1000RFOverloadAlarm, gs1000flashBankBRevValue=gs1000flashBankBRevValue, trapGS1000TECCurrentAlarm=trapGS1000TECCurrentAlarm, gs1000majorLowOffsetNomCnt=gs1000majorLowOffsetNomCnt, gs1000maxValueModuleTemp=gs1000maxValueModuleTemp, gs1000labelRFInputStatus=gs1000labelRFInputStatus, gs1000stateFlagFan1Speed=gs1000stateFlagFan1Speed, gs1000labelLaserDataCRC=gs1000labelLaserDataCRC, gs1000maxValueOffsetNomMonitor=gs1000maxValueOffsetNomMonitor, trapGS1000LaserDataCRCAlarm=trapGS1000LaserDataCRCAlarm, gs1000labelFlash=gs1000labelFlash, gs1000bank2CRCValue=gs1000bank2CRCValue, trapGS1000ModuleTempAlarm=trapGS1000ModuleTempAlarm, gs1000labelFactoryDataCRC=gs1000labelFactoryDataCRC, gs1000valueRFInputStatus=gs1000valueRFInputStatus, trapGS1000ConfigChangeInteger=trapGS1000ConfigChangeInteger, gs1000enumAttenSetting=gs1000enumAttenSetting, gs1000majorHighFan1Speed=gs1000majorHighFan1Speed, gs1000stateFlagLaserBias=gs1000stateFlagLaserBias, gs1000bank1CRCValue=gs1000bank1CRCValue, gs1000minorLowOffsetNomMonitor=gs1000minorLowOffsetNomMonitor, gs1000majorHighOffsetNomMonitor=gs1000majorHighOffsetNomMonitor, gs1000minorLowFan1Speed=gs1000minorLowFan1Speed, trapGS1000RFOffsetAlarm=trapGS1000RFOffsetAlarm, gs1000stateFlagOptPower=gs1000stateFlagOptPower, gs1000flashBankARevValue=gs1000flashBankARevValue, gs1000stateFlagOffsetNomCnt=gs1000stateFlagOffsetNomCnt, gs1000majorLowLaserBias=gs1000majorLowLaserBias, gs1000minorHighOffsetNomCnt=gs1000minorHighOffsetNomCnt, gs1000labelLaserTemp=gs1000labelLaserTemp, gs1000stateFlagModuleTemp=gs1000stateFlagModuleTemp, trapGS1000ConfigChangeDisplayString=trapGS1000ConfigChangeDisplayString, gs1000labelFan2Speed=gs1000labelFan2Speed, trapGS1000Fan2SpeedAlarm=trapGS1000Fan2SpeedAlarm, gx2gs1000StatusTable=gx2gs1000StatusTable, gs1000labelOptPower=gs1000labelOptPower)
