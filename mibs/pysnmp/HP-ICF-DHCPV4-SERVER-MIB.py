#
# PySNMP MIB module HP-ICF-DHCPV4-SERVER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-DHCPV4-SERVER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:21:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
VidList, = mibBuilder.importSymbols("HP-ICF-FTRCO", "VidList")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
ifName, = mibBuilder.importSymbols("IF-MIB", "ifName")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Integer32, TimeTicks, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter32, iso, IpAddress, ObjectIdentity, MibIdentifier, Bits, Unsigned32, ModuleIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "TimeTicks", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter32", "iso", "IpAddress", "ObjectIdentity", "MibIdentifier", "Bits", "Unsigned32", "ModuleIdentity", "Counter64")
TextualConvention, DisplayString, MacAddress, TruthValue, DateAndTime, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "MacAddress", "TruthValue", "DateAndTime", "RowStatus")
hpicfDhcpv4ServerMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99))
hpicfDhcpv4ServerMIB.setRevisions(('2015-10-15 00:00', '2015-01-28 00:00', '2014-03-07 00:00', '2013-04-05 00:00',))
if mibBuilder.loadTexts: hpicfDhcpv4ServerMIB.setLastUpdated('201510150000Z')
if mibBuilder.loadTexts: hpicfDhcpv4ServerMIB.setOrganization('HP Networking')
hpicfDhcpv4ServerNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 0))
hpicfDhcpv4ServerObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1))
hpicfDhcpv4LeaseDataBase = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 1))
hpicfDhcpv4BootpCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 2))
hpicfDhcpv4Counters = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 3))
hpicfDhcpv4IpPool = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4))
hpicfDhcpv4PoolIpRange = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 5))
hpicfDhcpv4PoolOption = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 6))
hpicfDhcpv4PoolDynamicBind = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 7))
hpicfDhcpv4ServerConflicts = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 8))
hpicfDhcpv4ServerConform = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 2))
class InetAddressIPv4(TextualConvention, OctetString):
    status = 'current'
    displayHint = '1d.1d.1d.1d'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

hpicfDhcpv4ServerEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("disableWithClearConfig", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpv4ServerEnable.setStatus('current')
hpicfDhcpv4PingPktNumber = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpv4PingPktNumber.setStatus('current')
hpicfDhcpv4PingTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpv4PingTimeOut.setStatus('current')
hpicfDhcpv4ClearStatistics = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpv4ClearStatistics.setStatus('current')
hpicfDhcpv4ClearBindings = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 14), InetAddressIPv4()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpv4ClearBindings.setStatus('current')
hpicfDhcpv4ClearConflictIP = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 15), InetAddressIPv4()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpv4ClearConflictIP.setStatus('current')
hpicfDhcpv4ConflictsLog = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 16), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpv4ConflictsLog.setStatus('current')
hpicfDhcpv4TrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 17), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpv4TrapEnable.setStatus('current')
hpicfDhcpv4ServerVlanEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 18), VidList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpv4ServerVlanEnable.setStatus('current')
hpicfDhcpv4ServerOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("paused", 2), ("inprogress", 3), ("shuttingdown", 4))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpv4ServerOperStatus.setStatus('current')
hpicfDhcpv4ServerDBFile = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpv4ServerDBFile.setStatus('current')
hpicfDhcpv4ServerDBWriteDelay = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(15, 86400)).clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpv4ServerDBWriteDelay.setStatus('current')
hpicfDhcpv4ServerDBWriteTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400)).clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpv4ServerDBWriteTimeout.setStatus('current')
hpicfDhcpServerDBFileWriteAttempts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpServerDBFileWriteAttempts.setStatus('current')
hpicfDhcpServerDBFileWriteFailures = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpServerDBFileWriteFailures.setStatus('current')
hpicfDhcpServerDBFileReadStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notConfigured", 1), ("inProgress", 2), ("succeeded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpServerDBFileReadStatus.setStatus('current')
hpicfDhcpServerDBFileWriteStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notConfigured", 1), ("delaying", 2), ("inProgress", 3), ("succeeded", 4), ("failed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpServerDBFileWriteStatus.setStatus('current')
hpicfDhcpServerDBFileLastWriteTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpServerDBFileLastWriteTime.setStatus('current')
hpicfDhcpv4ServerDBFTPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpv4ServerDBFTPort.setStatus('current')
hpicfDhcpv4ServerDBSFTPUsername = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpv4ServerDBSFTPUsername.setStatus('current')
hpicfDhcpv4ServerDBSFTPPassword = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpv4ServerDBSFTPPassword.setStatus('current')
hpicfDhcpv4ServerDBValidateSFTPServer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpv4ServerDBValidateSFTPServer.setStatus('current')
hpicfBootpCountRequests = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfBootpCountRequests.setStatus('current')
hpicfBootpCountReplies = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfBootpCountReplies.setStatus('current')
hpicfDhcpv4CountDiscovers = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpv4CountDiscovers.setStatus('current')
hpicfDhcpv4CountOffers = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpv4CountOffers.setStatus('current')
hpicfDhcpv4CountRequests = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpv4CountRequests.setStatus('current')
hpicfDhcpv4CountDeclines = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpv4CountDeclines.setStatus('current')
hpicfDhcpv4CountAcks = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpv4CountAcks.setStatus('current')
hpicfDhcpv4CountNaks = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpv4CountNaks.setStatus('current')
hpicfDhcpv4CountReleases = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpv4CountReleases.setStatus('current')
hpicfDhcpv4CountInforms = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpv4CountInforms.setStatus('current')
hpicfDhcpv4CountBadMsgs = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpv4CountBadMsgs.setStatus('current')
hpicfDhcpv4CountPools = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpv4CountPools.setStatus('current')
hpicfDhcpv4CountAutoBindings = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpv4CountAutoBindings.setStatus('current')
hpicfDhcpv4CountStaticBindings = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpv4CountStaticBindings.setStatus('current')
hpicfDhcpv4CountExpiredOrFreeBindings = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpv4CountExpiredOrFreeBindings.setStatus('current')
hpicfDhcpv4ServerPoolTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4, 1), )
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolTable.setStatus('current')
hpicfDhcpv4ServerPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4, 1, 1), ).setIndexNames((0, "HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolName"))
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolEntry.setStatus('current')
hpicfDhcpv4ServerPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolName.setStatus('current')
hpicfDhcpv4ServerPoolNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4, 1, 1, 2), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolNetworkAddress.setStatus('current')
hpicfDhcpv4ServerPoolNetworkAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4, 1, 1, 3), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolNetworkAddressMask.setStatus('current')
hpicfDhcpv4ServerPoolDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolDomainName.setStatus('current')
hpicfDhcpv4ServerPoolNetBIOSNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("broadcast", 1), ("peerTopeer", 2), ("mixed", 3), ("hybrid", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolNetBIOSNodeType.setStatus('current')
hpicfDhcpv4ServerPoolLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4, 1, 1, 6), Unsigned32().clone(86400)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolLeaseTime.setStatus('current')
hpicfDhcpv4ServerPoolBootFile = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolBootFile.setStatus('current')
hpicfDhcpv4ServerPoolLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolLowThreshold.setStatus('current')
hpicfDhcpv4ServerPoolHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolHighThreshold.setStatus('current')
hpicfDhcpv4ServerPoolFreeAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolFreeAddresses.setStatus('current')
hpicfDhcpv4ServerDNSServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDhcpv4ServerDNSServerAddress.setStatus('current')
hpicfDhcpv4ServerNetBIOSNameServer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpv4ServerNetBIOSNameServer.setStatus('current')
hpicfDhcpv4ServerDefaultRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDhcpv4ServerDefaultRouter.setStatus('current')
hpicfDhcpv4ServerTFTPServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDhcpv4ServerTFTPServerName.setStatus('current')
hpicfDhcpv4ServerTFTPServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4, 1, 1, 15), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDhcpv4ServerTFTPServerIpAddress.setStatus('current')
hpicfDhcpv4ServerStaticIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4, 1, 1, 16), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDhcpv4ServerStaticIpAddress.setStatus('current')
hpicfDhcpv4ServerStaticIpAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4, 1, 1, 17), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDhcpv4ServerStaticIpAddressMask.setStatus('current')
hpicfDhcpv4ServerStaticHardwareAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4, 1, 1, 18), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDhcpv4ServerStaticHardwareAddress.setStatus('current')
hpicfDhcpv4ServerPoolIsAuthoritative = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4, 1, 1, 19), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolIsAuthoritative.setStatus('current')
hpicfDhcpv4ServerPoolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4, 1, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolStatus.setStatus('current')
hpicfDhcpv4ServerRangeTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 5, 1), )
if mibBuilder.loadTexts: hpicfDhcpv4ServerRangeTable.setStatus('current')
hpicfDhcpv4ServerRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 5, 1, 1), ).setIndexNames((0, "HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolName"), (0, "HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerRangeStartAddress"))
if mibBuilder.loadTexts: hpicfDhcpv4ServerRangeEntry.setStatus('current')
hpicfDhcpv4ServerRangeStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 5, 1, 1, 1), InetAddressIPv4())
if mibBuilder.loadTexts: hpicfDhcpv4ServerRangeStartAddress.setStatus('current')
hpicfDhcpv4ServerRangeEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 5, 1, 1, 2), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDhcpv4ServerRangeEndAddress.setStatus('current')
hpicfDhcpv4ServerRangeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 5, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDhcpv4ServerRangeStatus.setStatus('current')
hpicfDhcpv4ServerPoolOptionTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 6, 1), )
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolOptionTable.setStatus('current')
hpicfDhcpv4ServerPoolOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 6, 1, 1), ).setIndexNames((0, "HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolName"), (0, "HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolOptionCode"))
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolOptionEntry.setStatus('current')
hpicfDhcpv4ServerPoolOptionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 6, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 254)))
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolOptionCode.setStatus('current')
hpicfDhcpv4ServerPoolOptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("hexString", 1), ("asciiString", 2), ("ipAddresses", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolOptionType.setStatus('current')
hpicfDhcpv4ServerPoolOptionData = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 6, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolOptionData.setStatus('current')
hpicfDhcpv4ServerPoolOptionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 6, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolOptionStatus.setStatus('current')
hpicfDhcpv4BindingTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 7, 1), )
if mibBuilder.loadTexts: hpicfDhcpv4BindingTable.setStatus('current')
hpicfDhcpv4BindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 7, 1, 1), ).setIndexNames((0, "HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolName"), (0, "HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4BindingIpAddress"))
if mibBuilder.loadTexts: hpicfDhcpv4BindingEntry.setStatus('current')
hpicfDhcpv4BindingIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 7, 1, 1, 1), InetAddressIPv4())
if mibBuilder.loadTexts: hpicfDhcpv4BindingIpAddress.setStatus('current')
hpicfDhcpv4BindingHardwareAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 7, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpv4BindingHardwareAddress.setStatus('current')
hpicfDhcpv4BindingType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("automatic", 2), ("dynamic", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpv4BindingType.setStatus('current')
hpicfDhcpv4BindingLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 7, 1, 1, 4), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpv4BindingLifeTime.setStatus('current')
hpicfDhcpv4ConflictIPTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 8, 1), )
if mibBuilder.loadTexts: hpicfDhcpv4ConflictIPTable.setStatus('current')
hpicfDhcpv4ConflictIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 8, 1, 1), ).setIndexNames((0, "HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ConflictIPAddress"))
if mibBuilder.loadTexts: hpicfDhcpv4ConflictIPEntry.setStatus('current')
hpicfDhcpv4ConflictIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 8, 1, 1, 1), InetAddressIPv4())
if mibBuilder.loadTexts: hpicfDhcpv4ConflictIPAddress.setStatus('current')
hpicfDhcpv4ConflictIPDetectionMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ping", 1), ("gratuitousArp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpv4ConflictIPDetectionMethod.setStatus('current')
hpicfDhcpv4ConflictIPDetectionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 8, 1, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpv4ConflictIPDetectionTime.setStatus('current')
hpicfDhcpv4ServerNotifyDuplicateIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 0, 1), InetAddressIPv4()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfDhcpv4ServerNotifyDuplicateIpAddr.setStatus('current')
hpicfDhcpv4ServerNotifyDuplicateMac = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 0, 2), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfDhcpv4ServerNotifyDuplicateMac.setStatus('current')
hpicfDhcpv4ServerNotifyClientOrServerDetected = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 0, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("client", 1), ("server", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfDhcpv4ServerNotifyClientOrServerDetected.setStatus('current')
hpicfDhcpv4ServerClientPhysicalAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 0, 4), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfDhcpv4ServerClientPhysicalAddress.setStatus('current')
hpicfDhcpv4ServerFreeAddressLow = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 0, 5)).setObjects(("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolLowThreshold"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolFreeAddresses"))
if mibBuilder.loadTexts: hpicfDhcpv4ServerFreeAddressLow.setStatus('current')
hpicfDhcpv4ServerFreeAddressHigh = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 0, 6)).setObjects(("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolHighThreshold"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolFreeAddresses"))
if mibBuilder.loadTexts: hpicfDhcpv4ServerFreeAddressHigh.setStatus('current')
hpicfDhcpv4ServerDuplicateAddress = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 0, 7)).setObjects(("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerNotifyDuplicateIpAddr"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerNotifyDuplicateMac"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerNotifyClientOrServerDetected"))
if mibBuilder.loadTexts: hpicfDhcpv4ServerDuplicateAddress.setStatus('current')
hpicfDhcpv4ServerIfLeaseLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 0, 8)).setObjects(("IF-MIB", "ifName"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerClientPhysicalAddress"))
if mibBuilder.loadTexts: hpicfDhcpv4ServerIfLeaseLimitExceeded.setStatus('current')
hpicfDhcpv4ServerCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 2, 1))
hpicfDhcpv4ServerGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 2, 2))
hpicfDhcpv4ServerCompliances1 = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 2, 3))
hpicfDhcpv4ServerCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 2, 1, 1)).setObjects(("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerBaseGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerLeaseDataBaseGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerBootpCountersGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerCounterGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerRangeGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerOptionGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerBindingGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerConflictGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerNotifyObjectsGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpv4ServerCompliance = hpicfDhcpv4ServerCompliance.setStatus('deprecated')
hpicfDhcpv4ServerCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 2, 1, 2)).setObjects(("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerBaseGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerBootpCountersGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerCounterGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerRangeGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerOptionGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerBindingGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerConflictGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerNotifyObjectsGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerNotificationsGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerLeaseDataBaseGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpv4ServerCompliance1 = hpicfDhcpv4ServerCompliance1.setStatus('deprecated')
hpicfDhcpv4ServerCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 2, 1, 3)).setObjects(("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerBootpCountersGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerCounterGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerRangeGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerOptionGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerBindingGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerConflictGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerNotifyObjectsGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerNotificationsGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerLeaseDataBaseGroup1"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerBaseGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpv4ServerCompliance2 = hpicfDhcpv4ServerCompliance2.setStatus('current')
hpicfDhcpv4ServerBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 2, 2, 1)).setObjects(("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerEnable"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4PingPktNumber"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4PingTimeOut"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ConflictsLog"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ClearStatistics"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ClearBindings"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ClearConflictIP"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4TrapEnable"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerVlanEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpv4ServerBaseGroup = hpicfDhcpv4ServerBaseGroup.setStatus('deprecated')
hpicfDhcpv4ServerLeaseDataBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 2, 2, 2)).setObjects(("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerDBFile"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerDBWriteDelay"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerDBWriteTimeout"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpServerDBFileWriteAttempts"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpServerDBFileWriteFailures"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpServerDBFileReadStatus"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpServerDBFileWriteStatus"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpServerDBFileLastWriteTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpv4ServerLeaseDataBaseGroup = hpicfDhcpv4ServerLeaseDataBaseGroup.setStatus('deprecated')
hpicfDhcpv4ServerBootpCountersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 2, 2, 3)).setObjects(("HP-ICF-DHCPV4-SERVER-MIB", "hpicfBootpCountRequests"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfBootpCountReplies"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpv4ServerBootpCountersGroup = hpicfDhcpv4ServerBootpCountersGroup.setStatus('current')
hpicfDhcpv4ServerCounterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 2, 2, 4)).setObjects(("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4CountDiscovers"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4CountOffers"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4CountRequests"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4CountDeclines"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4CountAcks"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4CountNaks"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4CountReleases"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4CountInforms"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4CountBadMsgs"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4CountPools"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4CountAutoBindings"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4CountStaticBindings"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4CountExpiredOrFreeBindings"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpv4ServerCounterGroup = hpicfDhcpv4ServerCounterGroup.setStatus('current')
hpicfDhcpv4ServerPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 2, 2, 5)).setObjects(("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolNetworkAddress"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolNetworkAddressMask"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolDomainName"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolNetBIOSNodeType"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolLeaseTime"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolBootFile"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolLowThreshold"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolHighThreshold"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolFreeAddresses"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerDNSServerAddress"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerNetBIOSNameServer"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerDefaultRouter"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerTFTPServerName"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerTFTPServerIpAddress"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerStaticIpAddress"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerStaticIpAddressMask"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerStaticHardwareAddress"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolIsAuthoritative"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpv4ServerPoolGroup = hpicfDhcpv4ServerPoolGroup.setStatus('current')
hpicfDhcpv4ServerRangeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 2, 2, 6)).setObjects(("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerRangeEndAddress"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerRangeStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpv4ServerRangeGroup = hpicfDhcpv4ServerRangeGroup.setStatus('current')
hpicfDhcpv4ServerOptionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 2, 2, 7)).setObjects(("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolOptionType"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolOptionData"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolOptionStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpv4ServerOptionGroup = hpicfDhcpv4ServerOptionGroup.setStatus('current')
hpicfDhcpv4ServerBindingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 2, 2, 8)).setObjects(("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4BindingHardwareAddress"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4BindingType"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4BindingLifeTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpv4ServerBindingGroup = hpicfDhcpv4ServerBindingGroup.setStatus('current')
hpicfDhcpv4ServerConflictGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 2, 2, 9)).setObjects(("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ConflictIPDetectionMethod"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ConflictIPDetectionTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpv4ServerConflictGroup = hpicfDhcpv4ServerConflictGroup.setStatus('current')
hpicfDhcpv4ServerNotifyObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 2, 2, 10)).setObjects(("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolLowThreshold"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolFreeAddresses"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolHighThreshold"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerNotifyDuplicateIpAddr"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerNotifyDuplicateMac"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerNotifyClientOrServerDetected"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerClientPhysicalAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpv4ServerNotifyObjectsGroup = hpicfDhcpv4ServerNotifyObjectsGroup.setStatus('current')
hpicfDhcpv4ServerNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 2, 2, 11)).setObjects(("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerFreeAddressLow"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerFreeAddressHigh"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerDuplicateAddress"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerIfLeaseLimitExceeded"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpv4ServerNotificationsGroup = hpicfDhcpv4ServerNotificationsGroup.setStatus('current')
hpicfDhcpv4ServerLeaseDataBaseGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 2, 2, 12)).setObjects(("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerDBFile"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerDBWriteDelay"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerDBWriteTimeout"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpServerDBFileWriteAttempts"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpServerDBFileWriteFailures"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpServerDBFileReadStatus"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpServerDBFileWriteStatus"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpServerDBFileLastWriteTime"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerDBFTPort"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerDBSFTPUsername"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerDBSFTPPassword"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerDBValidateSFTPServer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpv4ServerLeaseDataBaseGroup1 = hpicfDhcpv4ServerLeaseDataBaseGroup1.setStatus('current')
hpicfDhcpv4ServerBaseGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 2, 2, 13)).setObjects(("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerEnable"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4PingPktNumber"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4PingTimeOut"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ConflictsLog"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ClearStatistics"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ClearBindings"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ClearConflictIP"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4TrapEnable"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerVlanEnable"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpv4ServerBaseGroup1 = hpicfDhcpv4ServerBaseGroup1.setStatus('current')
mibBuilder.exportSymbols("HP-ICF-DHCPV4-SERVER-MIB", hpicfDhcpv4ServerStaticIpAddressMask=hpicfDhcpv4ServerStaticIpAddressMask, hpicfDhcpv4ServerPoolNetworkAddressMask=hpicfDhcpv4ServerPoolNetworkAddressMask, hpicfDhcpv4ServerRangeEndAddress=hpicfDhcpv4ServerRangeEndAddress, hpicfDhcpv4ServerPoolEntry=hpicfDhcpv4ServerPoolEntry, hpicfDhcpv4ServerNotificationsGroup=hpicfDhcpv4ServerNotificationsGroup, hpicfDhcpv4CountStaticBindings=hpicfDhcpv4CountStaticBindings, hpicfDhcpv4ServerBindingGroup=hpicfDhcpv4ServerBindingGroup, hpicfDhcpv4ServerPoolNetworkAddress=hpicfDhcpv4ServerPoolNetworkAddress, PYSNMP_MODULE_ID=hpicfDhcpv4ServerMIB, hpicfDhcpv4ServerDNSServerAddress=hpicfDhcpv4ServerDNSServerAddress, hpicfDhcpv4ServerRangeStartAddress=hpicfDhcpv4ServerRangeStartAddress, hpicfDhcpv4ServerCounterGroup=hpicfDhcpv4ServerCounterGroup, hpicfDhcpv4CountPools=hpicfDhcpv4CountPools, hpicfDhcpv4CountAutoBindings=hpicfDhcpv4CountAutoBindings, hpicfDhcpv4ServerDBFile=hpicfDhcpv4ServerDBFile, hpicfDhcpv4ServerPoolOptionEntry=hpicfDhcpv4ServerPoolOptionEntry, hpicfDhcpv4ConflictIPTable=hpicfDhcpv4ConflictIPTable, hpicfDhcpv4CountDeclines=hpicfDhcpv4CountDeclines, hpicfDhcpv4ServerPoolFreeAddresses=hpicfDhcpv4ServerPoolFreeAddresses, hpicfDhcpv4PoolDynamicBind=hpicfDhcpv4PoolDynamicBind, hpicfDhcpv4CountAcks=hpicfDhcpv4CountAcks, hpicfDhcpv4ServerFreeAddressLow=hpicfDhcpv4ServerFreeAddressLow, hpicfDhcpv4ServerNotifyClientOrServerDetected=hpicfDhcpv4ServerNotifyClientOrServerDetected, hpicfDhcpv4ConflictIPDetectionTime=hpicfDhcpv4ConflictIPDetectionTime, hpicfDhcpv4BindingHardwareAddress=hpicfDhcpv4BindingHardwareAddress, hpicfDhcpv4ServerLeaseDataBaseGroup1=hpicfDhcpv4ServerLeaseDataBaseGroup1, hpicfDhcpv4PoolOption=hpicfDhcpv4PoolOption, hpicfDhcpv4LeaseDataBase=hpicfDhcpv4LeaseDataBase, hpicfDhcpv4ServerFreeAddressHigh=hpicfDhcpv4ServerFreeAddressHigh, hpicfDhcpv4PingTimeOut=hpicfDhcpv4PingTimeOut, hpicfDhcpv4ServerPoolIsAuthoritative=hpicfDhcpv4ServerPoolIsAuthoritative, hpicfDhcpv4CountInforms=hpicfDhcpv4CountInforms, hpicfDhcpv4ConflictIPAddress=hpicfDhcpv4ConflictIPAddress, hpicfDhcpv4ConflictIPDetectionMethod=hpicfDhcpv4ConflictIPDetectionMethod, InetAddressIPv4=InetAddressIPv4, hpicfDhcpv4ServerConflictGroup=hpicfDhcpv4ServerConflictGroup, hpicfDhcpv4ServerBaseGroup=hpicfDhcpv4ServerBaseGroup, hpicfDhcpv4CountNaks=hpicfDhcpv4CountNaks, hpicfDhcpv4ServerDBFTPort=hpicfDhcpv4ServerDBFTPort, hpicfDhcpv4ServerRangeGroup=hpicfDhcpv4ServerRangeGroup, hpicfDhcpv4ServerPoolName=hpicfDhcpv4ServerPoolName, hpicfDhcpv4ClearBindings=hpicfDhcpv4ClearBindings, hpicfDhcpv4ServerPoolOptionData=hpicfDhcpv4ServerPoolOptionData, hpicfDhcpv4ServerObjects=hpicfDhcpv4ServerObjects, hpicfDhcpv4CountDiscovers=hpicfDhcpv4CountDiscovers, hpicfDhcpServerDBFileReadStatus=hpicfDhcpServerDBFileReadStatus, hpicfDhcpv4ServerPoolLowThreshold=hpicfDhcpv4ServerPoolLowThreshold, hpicfDhcpv4ServerCompliance1=hpicfDhcpv4ServerCompliance1, hpicfDhcpv4ServerPoolOptionType=hpicfDhcpv4ServerPoolOptionType, hpicfDhcpv4ServerPoolOptionCode=hpicfDhcpv4ServerPoolOptionCode, hpicfDhcpv4IpPool=hpicfDhcpv4IpPool, hpicfDhcpv4CountExpiredOrFreeBindings=hpicfDhcpv4CountExpiredOrFreeBindings, hpicfDhcpServerDBFileLastWriteTime=hpicfDhcpServerDBFileLastWriteTime, hpicfDhcpv4BindingLifeTime=hpicfDhcpv4BindingLifeTime, hpicfDhcpv4ClearConflictIP=hpicfDhcpv4ClearConflictIP, hpicfDhcpv4ServerPoolNetBIOSNodeType=hpicfDhcpv4ServerPoolNetBIOSNodeType, hpicfDhcpv4PoolIpRange=hpicfDhcpv4PoolIpRange, hpicfDhcpv4ConflictsLog=hpicfDhcpv4ConflictsLog, hpicfDhcpv4ServerDuplicateAddress=hpicfDhcpv4ServerDuplicateAddress, hpicfDhcpv4ServerPoolHighThreshold=hpicfDhcpv4ServerPoolHighThreshold, hpicfDhcpv4ConflictIPEntry=hpicfDhcpv4ConflictIPEntry, hpicfDhcpv4ServerCompliance2=hpicfDhcpv4ServerCompliance2, hpicfDhcpv4ServerMIB=hpicfDhcpv4ServerMIB, hpicfDhcpv4ServerOptionGroup=hpicfDhcpv4ServerOptionGroup, hpicfDhcpv4ServerDBWriteDelay=hpicfDhcpv4ServerDBWriteDelay, hpicfDhcpv4ServerOperStatus=hpicfDhcpv4ServerOperStatus, hpicfDhcpv4BindingType=hpicfDhcpv4BindingType, hpicfDhcpv4ServerCompliance=hpicfDhcpv4ServerCompliance, hpicfDhcpv4ServerConflicts=hpicfDhcpv4ServerConflicts, hpicfDhcpv4ServerCompliances=hpicfDhcpv4ServerCompliances, hpicfDhcpv4ServerPoolStatus=hpicfDhcpv4ServerPoolStatus, hpicfDhcpv4ServerNotifyDuplicateIpAddr=hpicfDhcpv4ServerNotifyDuplicateIpAddr, hpicfDhcpv4ServerPoolDomainName=hpicfDhcpv4ServerPoolDomainName, hpicfDhcpServerDBFileWriteFailures=hpicfDhcpServerDBFileWriteFailures, hpicfBootpCountReplies=hpicfBootpCountReplies, hpicfDhcpv4CountOffers=hpicfDhcpv4CountOffers, hpicfDhcpv4ServerConform=hpicfDhcpv4ServerConform, hpicfBootpCountRequests=hpicfBootpCountRequests, hpicfDhcpv4ServerNotifyObjectsGroup=hpicfDhcpv4ServerNotifyObjectsGroup, hpicfDhcpv4ServerPoolOptionTable=hpicfDhcpv4ServerPoolOptionTable, hpicfDhcpv4ServerDefaultRouter=hpicfDhcpv4ServerDefaultRouter, hpicfDhcpv4BindingEntry=hpicfDhcpv4BindingEntry, hpicfDhcpv4CountReleases=hpicfDhcpv4CountReleases, hpicfDhcpv4ServerClientPhysicalAddress=hpicfDhcpv4ServerClientPhysicalAddress, hpicfDhcpv4ServerEnable=hpicfDhcpv4ServerEnable, hpicfDhcpv4ClearStatistics=hpicfDhcpv4ClearStatistics, hpicfDhcpv4ServerStaticHardwareAddress=hpicfDhcpv4ServerStaticHardwareAddress, hpicfDhcpv4PingPktNumber=hpicfDhcpv4PingPktNumber, hpicfDhcpv4ServerVlanEnable=hpicfDhcpv4ServerVlanEnable, hpicfDhcpv4CountRequests=hpicfDhcpv4CountRequests, hpicfDhcpv4ServerRangeEntry=hpicfDhcpv4ServerRangeEntry, hpicfDhcpv4ServerStaticIpAddress=hpicfDhcpv4ServerStaticIpAddress, hpicfDhcpv4ServerPoolBootFile=hpicfDhcpv4ServerPoolBootFile, hpicfDhcpv4ServerLeaseDataBaseGroup=hpicfDhcpv4ServerLeaseDataBaseGroup, hpicfDhcpv4ServerCompliances1=hpicfDhcpv4ServerCompliances1, hpicfDhcpv4ServerDBValidateSFTPServer=hpicfDhcpv4ServerDBValidateSFTPServer, hpicfDhcpv4ServerRangeTable=hpicfDhcpv4ServerRangeTable, hpicfDhcpv4TrapEnable=hpicfDhcpv4TrapEnable, hpicfDhcpv4BindingIpAddress=hpicfDhcpv4BindingIpAddress, hpicfDhcpv4BootpCounters=hpicfDhcpv4BootpCounters, hpicfDhcpv4ServerDBWriteTimeout=hpicfDhcpv4ServerDBWriteTimeout, hpicfDhcpv4CountBadMsgs=hpicfDhcpv4CountBadMsgs, hpicfDhcpv4ServerBootpCountersGroup=hpicfDhcpv4ServerBootpCountersGroup, hpicfDhcpv4ServerPoolGroup=hpicfDhcpv4ServerPoolGroup, hpicfDhcpv4ServerNotifs=hpicfDhcpv4ServerNotifs, hpicfDhcpv4ServerDBSFTPPassword=hpicfDhcpv4ServerDBSFTPPassword, hpicfDhcpv4ServerPoolTable=hpicfDhcpv4ServerPoolTable, hpicfDhcpv4ServerRangeStatus=hpicfDhcpv4ServerRangeStatus, hpicfDhcpv4ServerTFTPServerName=hpicfDhcpv4ServerTFTPServerName, hpicfDhcpv4Counters=hpicfDhcpv4Counters, hpicfDhcpv4ServerBaseGroup1=hpicfDhcpv4ServerBaseGroup1, hpicfDhcpv4ServerNetBIOSNameServer=hpicfDhcpv4ServerNetBIOSNameServer, hpicfDhcpv4ServerDBSFTPUsername=hpicfDhcpv4ServerDBSFTPUsername, hpicfDhcpv4ServerPoolLeaseTime=hpicfDhcpv4ServerPoolLeaseTime, hpicfDhcpv4ServerTFTPServerIpAddress=hpicfDhcpv4ServerTFTPServerIpAddress, hpicfDhcpv4ServerPoolOptionStatus=hpicfDhcpv4ServerPoolOptionStatus, hpicfDhcpv4ServerNotifyDuplicateMac=hpicfDhcpv4ServerNotifyDuplicateMac, hpicfDhcpv4ServerIfLeaseLimitExceeded=hpicfDhcpv4ServerIfLeaseLimitExceeded, hpicfDhcpv4ServerGroups=hpicfDhcpv4ServerGroups, hpicfDhcpServerDBFileWriteAttempts=hpicfDhcpServerDBFileWriteAttempts, hpicfDhcpv4BindingTable=hpicfDhcpv4BindingTable, hpicfDhcpServerDBFileWriteStatus=hpicfDhcpServerDBFileWriteStatus)
