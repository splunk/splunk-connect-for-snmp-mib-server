#
# PySNMP MIB module SKYCONTROL-SYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SKYCONTROL-SYSTEM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:56:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter64, Unsigned32, ModuleIdentity, NotificationType, iso, Counter32, enterprises, Gauge32, TimeTicks, ObjectIdentity, Integer32, IpAddress, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter64", "Unsigned32", "ModuleIdentity", "NotificationType", "iso", "Counter32", "enterprises", "Gauge32", "TimeTicks", "ObjectIdentity", "Integer32", "IpAddress", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
skycontrol = ModuleIdentity((1, 3, 6, 1, 4, 1, 39052))
if mibBuilder.loadTexts: skycontrol.setLastUpdated('200811010000Z')
if mibBuilder.loadTexts: skycontrol.setOrganization('SkyControl s.r.o.')
ctlUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 39052, 1))
ctlNotifiers = MibIdentifier((1, 3, 6, 1, 4, 1, 39052, 2))
ctlVirtualDevices = MibIdentifier((1, 3, 6, 1, 4, 1, 39052, 3))
ctlHardwareDevices = MibIdentifier((1, 3, 6, 1, 4, 1, 39052, 4))
ctIInternalSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 39052, 5))
ctlCANSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 39052, 6))
ctlRsSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 39052, 7))
ctlUnitModulesTable = MibTable((1, 3, 6, 1, 4, 1, 39052, 1, 1), )
if mibBuilder.loadTexts: ctlUnitModulesTable.setStatus('current')
ctlUnitModulesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39052, 1, 1, 1), ).setIndexNames((0, "SKYCONTROL-SYSTEM-MIB", "ctlUnitModuleId"))
if mibBuilder.loadTexts: ctlUnitModulesEntry.setStatus('current')
ctlUnitModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlUnitModuleId.setStatus('current')
ctlUnitModulePcode = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlUnitModulePcode.setStatus('current')
ctlUnitModuleSN = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlUnitModuleSN.setStatus('current')
ctlUnitModuleClass = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlUnitModuleClass.setStatus('current')
ctlUnitModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlUnitModuleType.setStatus('current')
ctlUnitModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlUnitModuleName.setStatus('current')
ctlUnitModuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlUnitModuleState.setStatus('current')
ctlUnitGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 39052, 1, 2), )
if mibBuilder.loadTexts: ctlUnitGroupsTable.setStatus('current')
ctlUnitGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39052, 1, 2, 1), ).setIndexNames((0, "SKYCONTROL-SYSTEM-MIB", "ctlUnitGroupId"))
if mibBuilder.loadTexts: ctlUnitGroupsEntry.setStatus('current')
ctlUnitGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlUnitGroupId.setStatus('current')
ctlUnitGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlUnitGroupName.setStatus('current')
ctlUnitGroupDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlUnitGroupDesc.setStatus('current')
ctlUnitElementsTable = MibTable((1, 3, 6, 1, 4, 1, 39052, 1, 3), )
if mibBuilder.loadTexts: ctlUnitElementsTable.setStatus('current')
ctlUnitElementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39052, 1, 3, 1), ).setIndexNames((0, "SKYCONTROL-SYSTEM-MIB", "ctlUnitElementId"))
if mibBuilder.loadTexts: ctlUnitElementsEntry.setStatus('current')
ctlUnitElementId = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlUnitElementId.setStatus('current')
ctlUnitElementGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlUnitElementGroup.setStatus('current')
ctlUnitElementModule = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlUnitElementModule.setStatus('current')
ctlUnitElementNum = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlUnitElementNum.setStatus('current')
ctlUnitElementClass = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlUnitElementClass.setStatus('current')
ctlUnitElementType = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 3, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlUnitElementType.setStatus('current')
ctlUnitElementName = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlUnitElementName.setStatus('current')
ctlUnitElementState = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 3, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlUnitElementState.setStatus('current')
ctlUnitElementValue = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 3, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlUnitElementValue.setStatus('current')
ctlUnitElementSpec = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 3, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlUnitElementSpec.setStatus('current')
ctlUnitLogicsTable = MibTable((1, 3, 6, 1, 4, 1, 39052, 1, 4), )
if mibBuilder.loadTexts: ctlUnitLogicsTable.setStatus('current')
ctlUnitLogicsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39052, 1, 4, 1), ).setIndexNames((0, "SKYCONTROL-SYSTEM-MIB", "ctlUnitLogicId"))
if mibBuilder.loadTexts: ctlUnitLogicsEntry.setStatus('current')
ctlUnitLogicId = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlUnitLogicId.setStatus('current')
ctlUnitLogicName = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctlUnitLogicName.setStatus('current')
ctlUnitLogicDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctlUnitLogicDesc.setStatus('current')
ctlUnitLogicDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 4, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctlUnitLogicDisable.setStatus('current')
ctlUnitLogicRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 4, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctlUnitLogicRowStatus.setStatus('current')
ctlUnitTrapNotification = NotificationType((1, 3, 6, 1, 4, 1, 39052, 1, 5))
if mibBuilder.loadTexts: ctlUnitTrapNotification.setStatus('current')
ctlUnitSaveToFlash = MibScalar((1, 3, 6, 1, 4, 1, 39052, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlUnitSaveToFlash.setStatus('current')
ctlNotifiersMailersTable = MibTable((1, 3, 6, 1, 4, 1, 39052, 2, 1), )
if mibBuilder.loadTexts: ctlNotifiersMailersTable.setStatus('current')
ctlNotifiersMailersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39052, 2, 1, 1), ).setIndexNames((0, "SKYCONTROL-SYSTEM-MIB", "ctlNotifiersMailerId"))
if mibBuilder.loadTexts: ctlNotifiersMailersEntry.setStatus('current')
ctlNotifiersMailerId = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlNotifiersMailerId.setStatus('current')
ctlNotifiersMailerModule = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlNotifiersMailerModule.setStatus('current')
ctlNotifiersMailerNum = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlNotifiersMailerNum.setStatus('current')
ctlNotifiersMailerGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlNotifiersMailerGroup.setStatus('current')
ctlNotifiersMailerType = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlNotifiersMailerType.setStatus('current')
ctlNotifiersMailerName = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlNotifiersMailerName.setStatus('current')
ctlNotifiersMailerState = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlNotifiersMailerState.setStatus('current')
ctlNotifiersMailerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 1, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlNotifiersMailerValue.setStatus('current')
ctlNotifiersMailerServer = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlNotifiersMailerServer.setStatus('current')
ctlNotifiersMailerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlNotifiersMailerPort.setStatus('current')
ctlNotifiersMailerLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlNotifiersMailerLogin.setStatus('current')
ctlNotifiersMailerPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlNotifiersMailerPassword.setStatus('current')
ctlNotifiersMailersTo = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlNotifiersMailersTo.setStatus('current')
ctlNotifiersMailersFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlNotifiersMailersFrom.setStatus('current')
ctlNotifiersMailerMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlNotifiersMailerMessage.setStatus('current')
ctlNotifiersTrapsTable = MibTable((1, 3, 6, 1, 4, 1, 39052, 2, 2), )
if mibBuilder.loadTexts: ctlNotifiersTrapsTable.setStatus('current')
ctlNotifiersTrapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39052, 2, 2, 1), ).setIndexNames((0, "SKYCONTROL-SYSTEM-MIB", "ctlNotifiersTrapId"))
if mibBuilder.loadTexts: ctlNotifiersTrapsEntry.setStatus('current')
ctlNotifiersTrapId = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlNotifiersTrapId.setStatus('current')
ctlNotifiersTrapModule = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlNotifiersTrapModule.setStatus('current')
ctlNotifiersTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlNotifiersTrapNum.setStatus('current')
ctlNotifiersTrapGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlNotifiersTrapGroup.setStatus('current')
ctlNotifiersTrapType = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlNotifiersTrapType.setStatus('current')
ctlNotifiersTrapName = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 2, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlNotifiersTrapName.setStatus('current')
ctlNotifiersTrapState = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlNotifiersTrapState.setStatus('current')
ctlNotifiersTrapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 2, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlNotifiersTrapValue.setStatus('current')
ctlNotifiersTrapServer = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlNotifiersTrapServer.setStatus('current')
ctlNotifiersTrapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlNotifiersTrapPort.setStatus('current')
ctlNotifiersTrapVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlNotifiersTrapVersion.setStatus('current')
ctlNotifiersTrapCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlNotifiersTrapCommunity.setStatus('current')
ctlNotifiersSMSsTable = MibTable((1, 3, 6, 1, 4, 1, 39052, 2, 3), )
if mibBuilder.loadTexts: ctlNotifiersSMSsTable.setStatus('current')
ctlNotifiersSMSsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39052, 2, 3, 1), ).setIndexNames((0, "SKYCONTROL-SYSTEM-MIB", "ctlNotifiersSMSId"))
if mibBuilder.loadTexts: ctlNotifiersSMSsEntry.setStatus('current')
ctlNotifiersSMSId = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlNotifiersSMSId.setStatus('current')
ctlNotifiersSMSModule = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlNotifiersSMSModule.setStatus('current')
ctlNotifiersSMSNum = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlNotifiersSMSNum.setStatus('current')
ctlNotifiersSMSGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlNotifiersSMSGroup.setStatus('current')
ctlNotifiersSMSType = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlNotifiersSMSType.setStatus('current')
ctlNotifiersSMSName = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlNotifiersSMSName.setStatus('current')
ctlNotifiersSMSState = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 3, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlNotifiersSMSState.setStatus('current')
ctlNotifiersSMSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 3, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlNotifiersSMSValue.setStatus('current')
ctlNotifiersSMSTo = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlNotifiersSMSTo.setStatus('current')
ctlNotifiersSMSMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlNotifiersSMSMessage.setStatus('current')
ctlVirtualDevicesTimersTable = MibTable((1, 3, 6, 1, 4, 1, 39052, 3, 1), )
if mibBuilder.loadTexts: ctlVirtualDevicesTimersTable.setStatus('current')
ctlVirtualDevicesTimersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39052, 3, 1, 1), ).setIndexNames((0, "SKYCONTROL-SYSTEM-MIB", "ctlVirtualDevicesTimerId"))
if mibBuilder.loadTexts: ctlVirtualDevicesTimersEntry.setStatus('current')
ctlVirtualDevicesTimerId = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlVirtualDevicesTimerId.setStatus('current')
ctlVirtualDevicesTimerModule = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlVirtualDevicesTimerModule.setStatus('current')
ctlVirtualDevicesTimerNum = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlVirtualDevicesTimerNum.setStatus('current')
ctlVirtualDevicesTimerGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlVirtualDevicesTimerGroup.setStatus('current')
ctlVirtualDevicesTimerType = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlVirtualDevicesTimerType.setStatus('current')
ctlVirtualDevicesTimerName = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlVirtualDevicesTimerName.setStatus('current')
ctlVirtualDevicesTimerState = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlVirtualDevicesTimerState.setStatus('current')
ctlVirtualDevicesTimerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 1, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlVirtualDevicesTimerValue.setStatus('current')
ctlVirtualDevicesTimerBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 1, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlVirtualDevicesTimerBegin.setStatus('current')
ctlVirtualDevicesTimerEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 1, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlVirtualDevicesTimerEnd.setStatus('current')
ctlVirtualDevicesTimerDays = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 1, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlVirtualDevicesTimerDays.setStatus('current')
ctlVirtualDevicesTimerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 1, 1, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlVirtualDevicesTimerMode.setStatus('current')
ctlVirtualDevicesPingsTable = MibTable((1, 3, 6, 1, 4, 1, 39052, 3, 2), )
if mibBuilder.loadTexts: ctlVirtualDevicesPingsTable.setStatus('current')
ctlVirtualDevicesPingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39052, 3, 2, 1), ).setIndexNames((0, "SKYCONTROL-SYSTEM-MIB", "ctlVirtualDevicesPingId"))
if mibBuilder.loadTexts: ctlVirtualDevicesPingsEntry.setStatus('current')
ctlVirtualDevicesPingId = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlVirtualDevicesPingId.setStatus('current')
ctlVirtualDevicesPingModule = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlVirtualDevicesPingModule.setStatus('current')
ctlVirtualDevicesPingNum = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlVirtualDevicesPingNum.setStatus('current')
ctlVirtualDevicesPingGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlVirtualDevicesPingGroup.setStatus('current')
ctlVirtualDevicesPingType = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlVirtualDevicesPingType.setStatus('current')
ctlVirtualDevicesPingName = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlVirtualDevicesPingName.setStatus('current')
ctlVirtualDevicesPingState = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlVirtualDevicesPingState.setStatus('current')
ctlVirtualDevicesPingValue = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 2, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlVirtualDevicesPingValue.setStatus('current')
ctlVirtualDevicesPingPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlVirtualDevicesPingPeriod.setStatus('current')
ctlVirtualDevicesPingRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlVirtualDevicesPingRTT.setStatus('current')
ctlVirtualDevicesPingServer = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlVirtualDevicesPingServer.setStatus('current')
ctlVirtualDevicesPingIP = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 2, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlVirtualDevicesPingIP.setStatus('current')
ctlVirtualDevicesPingSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlVirtualDevicesPingSent.setStatus('current')
ctlVirtualDevicesPingReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlVirtualDevicesPingReceived.setStatus('current')
ctlVirtualDevicesPingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 2, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlVirtualDevicesPingStatus.setStatus('current')
ctlHardwareDevicesCamerasTable = MibTable((1, 3, 6, 1, 4, 1, 39052, 4, 1), )
if mibBuilder.loadTexts: ctlHardwareDevicesCamerasTable.setStatus('current')
ctlHardwareDevicesCamerasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39052, 4, 1, 1), ).setIndexNames((0, "SKYCONTROL-SYSTEM-MIB", "ctlHardwareDevicesCameraId"))
if mibBuilder.loadTexts: ctlHardwareDevicesCamerasEntry.setStatus('current')
ctlHardwareDevicesCameraId = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlHardwareDevicesCameraId.setStatus('current')
ctlHardwareDevicesCameraModule = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlHardwareDevicesCameraModule.setStatus('current')
ctlHardwareDevicesCameraNum = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlHardwareDevicesCameraNum.setStatus('current')
ctlHardwareDevicesCameraGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 4, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlHardwareDevicesCameraGroup.setStatus('current')
ctlHardwareDevicesCameraType = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 4, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlHardwareDevicesCameraType.setStatus('current')
ctlHardwareDevicesCameraName = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 4, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlHardwareDevicesCameraName.setStatus('current')
ctlHardwareDevicesCameraState = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 4, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlHardwareDevicesCameraState.setStatus('current')
ctlHardwareDevicesCameraValue = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 4, 1, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlHardwareDevicesCameraValue.setStatus('current')
ctlHardwareDevicesCameraURL = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 4, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlHardwareDevicesCameraURL.setStatus('current')
ctlHardwareDevicesCameraFPS = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 4, 1, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlHardwareDevicesCameraFPS.setStatus('current')
ctlHardwareDevicesCameraResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 4, 1, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlHardwareDevicesCameraResolution.setStatus('current')
ctlInternalSensorsDiscretsTable = MibTable((1, 3, 6, 1, 4, 1, 39052, 5, 1), )
if mibBuilder.loadTexts: ctlInternalSensorsDiscretsTable.setStatus('current')
ctlInternalSensorsDiscretsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39052, 5, 1, 1), ).setIndexNames((0, "SKYCONTROL-SYSTEM-MIB", "ctlInternalSensorsDiscretId"))
if mibBuilder.loadTexts: ctlInternalSensorsDiscretsEntry.setStatus('current')
ctlInternalSensorsDiscretId = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlInternalSensorsDiscretId.setStatus('current')
ctlInternalSensorsDiscretModule = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlInternalSensorsDiscretModule.setStatus('current')
ctlInternalSensorsDiscretNum = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlInternalSensorsDiscretNum.setStatus('current')
ctlInternalSensorsDiscretGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlInternalSensorsDiscretGroup.setStatus('current')
ctlInternalSensorsDiscretType = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlInternalSensorsDiscretType.setStatus('current')
ctlInternalSensorsDiscretName = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlInternalSensorsDiscretName.setStatus('current')
ctlInternalSensorsDiscretState = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlInternalSensorsDiscretState.setStatus('current')
ctlInternalSensorsDiscretValue = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlInternalSensorsDiscretValue.setStatus('current')
ctlInternalSensorsDiscretReset = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlInternalSensorsDiscretReset.setStatus('current')
ctlInternalSensorsDiscretLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlInternalSensorsDiscretLevel.setStatus('current')
ctlInternalSensorsDiscretReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlInternalSensorsDiscretReverse.setStatus('current')
ctlInternalSensorsDiscretSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlInternalSensorsDiscretSpecific.setStatus('current')
ctlInternalSensorsAnalogsTable = MibTable((1, 3, 6, 1, 4, 1, 39052, 5, 2), )
if mibBuilder.loadTexts: ctlInternalSensorsAnalogsTable.setStatus('current')
ctlInternalSensorsAnalogsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39052, 5, 2, 1), ).setIndexNames((0, "SKYCONTROL-SYSTEM-MIB", "ctlInternalSensorsAnalogId"))
if mibBuilder.loadTexts: ctlInternalSensorsAnalogsEntry.setStatus('current')
ctlInternalSensorsAnalogId = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlInternalSensorsAnalogId.setStatus('current')
ctlInternalSensorsAnalogModule = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlInternalSensorsAnalogModule.setStatus('current')
ctlInternalSensorsAnalogNum = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlInternalSensorsAnalogNum.setStatus('current')
ctlInternalSensorsAnalogGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlInternalSensorsAnalogGroup.setStatus('current')
ctlInternalSensorsAnalogType = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlInternalSensorsAnalogType.setStatus('current')
ctlInternalSensorsAnalogName = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlInternalSensorsAnalogName.setStatus('current')
ctlInternalSensorsAnalogState = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlInternalSensorsAnalogState.setStatus('current')
ctlInternalSensorsAnalogValue = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 2, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlInternalSensorsAnalogValue.setStatus('current')
ctlInternalSensorsAnalogMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 2, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlInternalSensorsAnalogMin.setStatus('current')
ctlInternalSensorsAnalogMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlInternalSensorsAnalogMax.setStatus('current')
ctlInternalSensorsAnalogLow = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlInternalSensorsAnalogLow.setStatus('current')
ctlInternalSensorsAnalogWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlInternalSensorsAnalogWarning.setStatus('current')
ctlInternalSensorsAnalogHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlInternalSensorsAnalogHigh.setStatus('current')
ctlInternalSensorsAnalogAt0 = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlInternalSensorsAnalogAt0.setStatus('current')
ctlInternalSensorsAnalogAt75 = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 2, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlInternalSensorsAnalogAt75.setStatus('current')
ctlInternalSensorsAnalogExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 2, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlInternalSensorsAnalogExpression.setStatus('current')
ctlInternalSensorsAnalogSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 2, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlInternalSensorsAnalogSpecific.setStatus('current')
ctlInternalSensorsOutletsTable = MibTable((1, 3, 6, 1, 4, 1, 39052, 5, 3), )
if mibBuilder.loadTexts: ctlInternalSensorsOutletsTable.setStatus('current')
ctlInternalSensorsOutletsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39052, 5, 3, 1), ).setIndexNames((0, "SKYCONTROL-SYSTEM-MIB", "ctlInternalSensorsOutletId"))
if mibBuilder.loadTexts: ctlInternalSensorsOutletsEntry.setStatus('current')
ctlInternalSensorsOutletId = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlInternalSensorsOutletId.setStatus('current')
ctlInternalSensorsOutletModule = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlInternalSensorsOutletModule.setStatus('current')
ctlInternalSensorsOutletNum = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlInternalSensorsOutletNum.setStatus('current')
ctlInternalSensorsOutletGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlInternalSensorsOutletGroup.setStatus('current')
ctlInternalSensorsOutletType = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlInternalSensorsOutletType.setStatus('current')
ctlInternalSensorsOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlInternalSensorsOutletName.setStatus('current')
ctlInternalSensorsOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 3, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlInternalSensorsOutletState.setStatus('current')
ctlInternalSensorsOutletValue = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 3, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlInternalSensorsOutletValue.setStatus('current')
ctlInternalSensorsOutletInitial = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 3, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlInternalSensorsOutletInitial.setStatus('current')
ctlInternalSensorsDiscretPulse = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlInternalSensorsDiscretPulse.setStatus('current')
ctlCANSensorsDiscretsTable = MibTable((1, 3, 6, 1, 4, 1, 39052, 6, 1), )
if mibBuilder.loadTexts: ctlCANSensorsDiscretsTable.setStatus('current')
ctlCANSensorsDiscretsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39052, 6, 1, 1), ).setIndexNames((0, "SKYCONTROL-SYSTEM-MIB", "ctlCANSensorsDiscretId"))
if mibBuilder.loadTexts: ctlCANSensorsDiscretsEntry.setStatus('current')
ctlCANSensorsDiscretId = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlCANSensorsDiscretId.setStatus('current')
ctlCANSensorsDiscretModule = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlCANSensorsDiscretModule.setStatus('current')
ctlCANSensorsDiscretNum = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlCANSensorsDiscretNum.setStatus('current')
ctlCANSensorsDiscretGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCANSensorsDiscretGroup.setStatus('current')
ctlCANSensorsDiscretType = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlCANSensorsDiscretType.setStatus('current')
ctlCANSensorsDiscretName = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCANSensorsDiscretName.setStatus('current')
ctlCANSensorsDiscretState = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlCANSensorsDiscretState.setStatus('current')
ctlCANSensorsDiscretValue = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 1, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCANSensorsDiscretValue.setStatus('current')
ctlCANSensorsDiscretReset = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCANSensorsDiscretReset.setStatus('current')
ctlCANSensorsDiscretLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCANSensorsDiscretLevel.setStatus('current')
ctlCANSensorsDiscretReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCANSensorsDiscretReverse.setStatus('current')
ctlCANSensorsDiscretSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlCANSensorsDiscretSpecific.setStatus('current')
ctlCANSensorsAnalogsTable = MibTable((1, 3, 6, 1, 4, 1, 39052, 6, 2), )
if mibBuilder.loadTexts: ctlCANSensorsAnalogsTable.setStatus('current')
ctlCANSensorsAnalogsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39052, 6, 2, 1), ).setIndexNames((0, "SKYCONTROL-SYSTEM-MIB", "ctlCANSensorsAnalogId"))
if mibBuilder.loadTexts: ctlCANSensorsAnalogsEntry.setStatus('current')
ctlCANSensorsAnalogId = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlCANSensorsAnalogId.setStatus('current')
ctlCANSensorsAnalogModule = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlCANSensorsAnalogModule.setStatus('current')
ctlCANSensorsAnalogNum = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlCANSensorsAnalogNum.setStatus('current')
ctlCANSensorsAnalogGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCANSensorsAnalogGroup.setStatus('current')
ctlCANSensorsAnalogType = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlCANSensorsAnalogType.setStatus('current')
ctlCANSensorsAnalogName = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCANSensorsAnalogName.setStatus('current')
ctlCANSensorsAnalogState = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlCANSensorsAnalogState.setStatus('current')
ctlCANSensorsAnalogValue = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 2, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCANSensorsAnalogValue.setStatus('current')
ctlCANSensorsAnalogMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 2, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlCANSensorsAnalogMin.setStatus('current')
ctlCANSensorsAnalogMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlCANSensorsAnalogMax.setStatus('current')
ctlCANSensorsAnalogLow = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCANSensorsAnalogLow.setStatus('current')
ctlCANSensorsAnalogWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCANSensorsAnalogWarning.setStatus('current')
ctlCANSensorsAnalogHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCANSensorsAnalogHigh.setStatus('current')
ctlCANSensorsAnalogAt0 = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCANSensorsAnalogAt0.setStatus('current')
ctlCANSensorsAnalogAt75 = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 2, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCANSensorsAnalogAt75.setStatus('current')
ctlCANSensorsAnalogExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 2, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCANSensorsAnalogExpression.setStatus('current')
ctlCANSensorsAnalogSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 2, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlCANSensorsAnalogSpecific.setStatus('current')
ctlCANSensorsOutletsTable = MibTable((1, 3, 6, 1, 4, 1, 39052, 6, 3), )
if mibBuilder.loadTexts: ctlCANSensorsOutletsTable.setStatus('current')
ctlCANSensorsOutletsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39052, 6, 3, 1), ).setIndexNames((0, "SKYCONTROL-SYSTEM-MIB", "ctlCANSensorsOutletId"))
if mibBuilder.loadTexts: ctlCANSensorsOutletsEntry.setStatus('current')
ctlCANSensorsOutletId = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlCANSensorsOutletId.setStatus('current')
ctlCANSensorsOutletModule = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlCANSensorsOutletModule.setStatus('current')
ctlCANSensorsOutletNum = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlCANSensorsOutletNum.setStatus('current')
ctlCANSensorsOutletGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCANSensorsOutletGroup.setStatus('current')
ctlCANSensorsOutletType = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlCANSensorsOutletType.setStatus('current')
ctlCANSensorsOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCANSensorsOutletName.setStatus('current')
ctlCANSensorsOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 3, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlCANSensorsOutletState.setStatus('current')
ctlCANSensorsOutletValue = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 3, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCANSensorsOutletValue.setStatus('current')
ctlCANSensorsOutletInitial = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 3, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCANSensorsOutletInitial.setStatus('current')
ctlCANSensorsDiscretPulse = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCANSensorsDiscretPulse.setStatus('current')
ctlRsSensorsDiscretsTable = MibTable((1, 3, 6, 1, 4, 1, 39052, 7, 1), )
if mibBuilder.loadTexts: ctlRsSensorsDiscretsTable.setStatus('current')
ctlRsSensorsDiscretsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39052, 7, 1, 1), ).setIndexNames((0, "SKYCONTROL-SYSTEM-MIB", "ctlRsSensorsDiscretId"))
if mibBuilder.loadTexts: ctlRsSensorsDiscretsEntry.setStatus('current')
ctlRsSensorsDiscretId = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlRsSensorsDiscretId.setStatus('current')
ctlRsSensorsDiscretModule = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlRsSensorsDiscretModule.setStatus('current')
ctlRsSensorsDiscretNum = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlRsSensorsDiscretNum.setStatus('current')
ctlRsSensorsDiscretGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlRsSensorsDiscretGroup.setStatus('current')
ctlRsSensorsDiscretType = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlRsSensorsDiscretType.setStatus('current')
ctlRsSensorsDiscretName = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlRsSensorsDiscretName.setStatus('current')
ctlRsSensorsDiscretState = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlRsSensorsDiscretState.setStatus('current')
ctlRsSensorsDiscretValue = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 1, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlRsSensorsDiscretValue.setStatus('current')
ctlRsSensorsDiscretReset = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlRsSensorsDiscretReset.setStatus('current')
ctlRsSensorsDiscretLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlRsSensorsDiscretLevel.setStatus('current')
ctlRsSensorsDiscretReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlRsSensorsDiscretReverse.setStatus('current')
ctlRsSensorsDiscretSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlRsSensorsDiscretSpecific.setStatus('current')
ctlRsSensorsAnalogsTable = MibTable((1, 3, 6, 1, 4, 1, 39052, 7, 2), )
if mibBuilder.loadTexts: ctlRsSensorsAnalogsTable.setStatus('current')
ctlRsSensorsAnalogsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39052, 7, 2, 1), ).setIndexNames((0, "SKYCONTROL-SYSTEM-MIB", "ctlRsSensorsAnalogId"))
if mibBuilder.loadTexts: ctlRsSensorsAnalogsEntry.setStatus('current')
ctlRsSensorsAnalogId = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlRsSensorsAnalogId.setStatus('current')
ctlRsSensorsAnalogModule = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlRsSensorsAnalogModule.setStatus('current')
ctlRsSensorsAnalogNum = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlRsSensorsAnalogNum.setStatus('current')
ctlRsSensorsAnalogGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlRsSensorsAnalogGroup.setStatus('current')
ctlRsSensorsAnalogType = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlRsSensorsAnalogType.setStatus('current')
ctlRsSensorsAnalogName = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlRsSensorsAnalogName.setStatus('current')
ctlRsSensorsAnalogState = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlRsSensorsAnalogState.setStatus('current')
ctlRsSensorsAnalogValue = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 2, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlRsSensorsAnalogValue.setStatus('current')
ctlRsSensorsAnalogMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 2, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlRsSensorsAnalogMin.setStatus('current')
ctlRsSensorsAnalogMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlRsSensorsAnalogMax.setStatus('current')
ctlRsSensorsAnalogLow = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlRsSensorsAnalogLow.setStatus('current')
ctlRsSensorsAnalogWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlRsSensorsAnalogWarning.setStatus('current')
ctlRsSensorsAnalogHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlRsSensorsAnalogHigh.setStatus('current')
ctlRsSensorsAnalogAt0 = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlRsSensorsAnalogAt0.setStatus('current')
ctlRsSensorsAnalogAt75 = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 2, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlRsSensorsAnalogAt75.setStatus('current')
ctlRsSensorsAnalogExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 2, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlRsSensorsAnalogExpression.setStatus('current')
ctlRsSensorsAnalogSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 2, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlRsSensorsAnalogSpecific.setStatus('current')
ctlRsSensorsOutletsTable = MibTable((1, 3, 6, 1, 4, 1, 39052, 7, 3), )
if mibBuilder.loadTexts: ctlRsSensorsOutletsTable.setStatus('current')
ctlRsSensorsOutletsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39052, 7, 3, 1), ).setIndexNames((0, "SKYCONTROL-SYSTEM-MIB", "ctlRsSensorsOutletId"))
if mibBuilder.loadTexts: ctlRsSensorsOutletsEntry.setStatus('current')
ctlRsSensorsOutletId = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlRsSensorsOutletId.setStatus('current')
ctlRsSensorsOutletModule = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlRsSensorsOutletModule.setStatus('current')
ctlRsSensorsOutletNum = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlRsSensorsOutletNum.setStatus('current')
ctlRsSensorsOutletGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlRsSensorsOutletGroup.setStatus('current')
ctlRsSensorsOutletType = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlRsSensorsOutletType.setStatus('current')
ctlRsSensorsOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlRsSensorsOutletName.setStatus('current')
ctlRsSensorsOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 3, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlRsSensorsOutletState.setStatus('current')
ctlRsSensorsOutletValue = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 3, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlRsSensorsOutletValue.setStatus('current')
ctlRsSensorsOutletInitial = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 3, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlRsSensorsOutletInitial.setStatus('current')
ctlRsSensorsDiscretPulse = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlRsSensorsDiscretPulse.setStatus('current')
mibBuilder.exportSymbols("SKYCONTROL-SYSTEM-MIB", ctlInternalSensorsAnalogsEntry=ctlInternalSensorsAnalogsEntry, ctlInternalSensorsOutletInitial=ctlInternalSensorsOutletInitial, ctlVirtualDevicesPingPeriod=ctlVirtualDevicesPingPeriod, ctlCANSensorsAnalogType=ctlCANSensorsAnalogType, ctlUnitElementType=ctlUnitElementType, ctlVirtualDevices=ctlVirtualDevices, ctlRsSensorsAnalogAt75=ctlRsSensorsAnalogAt75, ctlUnitLogicName=ctlUnitLogicName, ctlNotifiersSMSGroup=ctlNotifiersSMSGroup, ctlNotifiersMailersEntry=ctlNotifiersMailersEntry, ctlRsSensorsDiscretModule=ctlRsSensorsDiscretModule, ctIInternalSensors=ctIInternalSensors, ctlInternalSensorsAnalogHigh=ctlInternalSensorsAnalogHigh, ctlUnitLogicDisable=ctlUnitLogicDisable, ctlVirtualDevicesTimersEntry=ctlVirtualDevicesTimersEntry, ctlRsSensorsAnalogAt0=ctlRsSensorsAnalogAt0, ctlCANSensorsAnalogName=ctlCANSensorsAnalogName, ctlRsSensorsAnalogType=ctlRsSensorsAnalogType, ctlUnitElementClass=ctlUnitElementClass, ctlVirtualDevicesTimerDays=ctlVirtualDevicesTimerDays, ctlInternalSensorsOutletId=ctlInternalSensorsOutletId, ctlNotifiersTrapCommunity=ctlNotifiersTrapCommunity, ctlInternalSensorsOutletGroup=ctlInternalSensorsOutletGroup, ctlNotifiersMailersFrom=ctlNotifiersMailersFrom, ctlVirtualDevicesPingSent=ctlVirtualDevicesPingSent, ctlInternalSensorsOutletNum=ctlInternalSensorsOutletNum, ctlNotifiersTrapVersion=ctlNotifiersTrapVersion, ctlUnitGroupId=ctlUnitGroupId, ctlVirtualDevicesPingReceived=ctlVirtualDevicesPingReceived, ctlCANSensorsOutletNum=ctlCANSensorsOutletNum, ctlRsSensorsAnalogValue=ctlRsSensorsAnalogValue, ctlRsSensorsOutletsEntry=ctlRsSensorsOutletsEntry, ctlNotifiersMailerName=ctlNotifiersMailerName, ctlNotifiersMailerMessage=ctlNotifiersMailerMessage, ctlNotifiersSMSTo=ctlNotifiersSMSTo, ctlCANSensorsOutletId=ctlCANSensorsOutletId, ctlVirtualDevicesPingState=ctlVirtualDevicesPingState, ctlRsSensorsAnalogWarning=ctlRsSensorsAnalogWarning, ctlVirtualDevicesTimerGroup=ctlVirtualDevicesTimerGroup, ctlInternalSensorsDiscretsEntry=ctlInternalSensorsDiscretsEntry, ctlInternalSensorsAnalogModule=ctlInternalSensorsAnalogModule, ctlRsSensorsDiscretId=ctlRsSensorsDiscretId, ctlHardwareDevicesCamerasTable=ctlHardwareDevicesCamerasTable, ctlVirtualDevicesPingModule=ctlVirtualDevicesPingModule, ctlInternalSensorsAnalogLow=ctlInternalSensorsAnalogLow, ctlCANSensorsDiscretName=ctlCANSensorsDiscretName, ctlRsSensorsAnalogModule=ctlRsSensorsAnalogModule, ctlUnitElementNum=ctlUnitElementNum, ctlNotifiersTrapsEntry=ctlNotifiersTrapsEntry, ctlCANSensorsAnalogHigh=ctlCANSensorsAnalogHigh, ctlInternalSensorsDiscretsTable=ctlInternalSensorsDiscretsTable, ctlInternalSensorsAnalogGroup=ctlInternalSensorsAnalogGroup, ctlCANSensorsAnalogWarning=ctlCANSensorsAnalogWarning, ctlCANSensorsAnalogAt75=ctlCANSensorsAnalogAt75, ctlUnitModulesEntry=ctlUnitModulesEntry, ctlCANSensorsDiscretReset=ctlCANSensorsDiscretReset, ctlVirtualDevicesPingName=ctlVirtualDevicesPingName, ctlNotifiersTrapGroup=ctlNotifiersTrapGroup, ctlInternalSensorsDiscretType=ctlInternalSensorsDiscretType, ctlUnitElementName=ctlUnitElementName, ctlHardwareDevicesCamerasEntry=ctlHardwareDevicesCamerasEntry, ctlCANSensorsDiscretsEntry=ctlCANSensorsDiscretsEntry, ctlCANSensorsDiscretId=ctlCANSensorsDiscretId, ctlUnitModulesTable=ctlUnitModulesTable, ctlCANSensorsAnalogExpression=ctlCANSensorsAnalogExpression, ctlCANSensorsDiscretNum=ctlCANSensorsDiscretNum, ctlCANSensorsAnalogState=ctlCANSensorsAnalogState, ctlRsSensorsAnalogName=ctlRsSensorsAnalogName, ctlRsSensorsAnalogExpression=ctlRsSensorsAnalogExpression, ctlUnitGroupDesc=ctlUnitGroupDesc, ctlVirtualDevicesPingStatus=ctlVirtualDevicesPingStatus, ctlUnitElementSpec=ctlUnitElementSpec, ctlUnitLogicRowStatus=ctlUnitLogicRowStatus, ctlVirtualDevicesTimerId=ctlVirtualDevicesTimerId, ctlCANSensorsDiscretValue=ctlCANSensorsDiscretValue, ctlCANSensorsDiscretType=ctlCANSensorsDiscretType, PYSNMP_MODULE_ID=skycontrol, ctlUnitTrapNotification=ctlUnitTrapNotification, ctlVirtualDevicesTimerMode=ctlVirtualDevicesTimerMode, ctlInternalSensorsDiscretModule=ctlInternalSensorsDiscretModule, ctlVirtualDevicesTimerType=ctlVirtualDevicesTimerType, ctlInternalSensorsOutletsEntry=ctlInternalSensorsOutletsEntry, ctlCANSensorsOutletsEntry=ctlCANSensorsOutletsEntry, ctlHardwareDevicesCameraType=ctlHardwareDevicesCameraType, ctlInternalSensorsDiscretSpecific=ctlInternalSensorsDiscretSpecific, ctlCANSensorsAnalogNum=ctlCANSensorsAnalogNum, ctlNotifiersTrapsTable=ctlNotifiersTrapsTable, ctlCANSensorsAnalogSpecific=ctlCANSensorsAnalogSpecific, ctlUnitModuleState=ctlUnitModuleState, ctlNotifiersMailersTo=ctlNotifiersMailersTo, ctlCANSensorsOutletModule=ctlCANSensorsOutletModule, ctlRsSensorsAnalogsTable=ctlRsSensorsAnalogsTable, ctlRsSensorsAnalogMin=ctlRsSensorsAnalogMin, ctlRsSensorsOutletValue=ctlRsSensorsOutletValue, ctlNotifiersMailerValue=ctlNotifiersMailerValue, ctlCANSensorsOutletValue=ctlCANSensorsOutletValue, ctlVirtualDevicesPingsTable=ctlVirtualDevicesPingsTable, ctlVirtualDevicesPingType=ctlVirtualDevicesPingType, ctlVirtualDevicesPingRTT=ctlVirtualDevicesPingRTT, ctlVirtualDevicesTimerBegin=ctlVirtualDevicesTimerBegin, ctlUnitModulePcode=ctlUnitModulePcode, ctlNotifiersMailerServer=ctlNotifiersMailerServer, ctlRsSensorsDiscretPulse=ctlRsSensorsDiscretPulse, ctlNotifiersSMSNum=ctlNotifiersSMSNum, ctlRsSensorsAnalogsEntry=ctlRsSensorsAnalogsEntry, ctlRsSensorsAnalogLow=ctlRsSensorsAnalogLow, ctlNotifiersSMSType=ctlNotifiersSMSType, ctlVirtualDevicesTimerEnd=ctlVirtualDevicesTimerEnd, ctlInternalSensorsAnalogAt0=ctlInternalSensorsAnalogAt0, ctlUnitElementsTable=ctlUnitElementsTable, ctlHardwareDevicesCameraFPS=ctlHardwareDevicesCameraFPS, ctlInternalSensorsDiscretReverse=ctlInternalSensorsDiscretReverse, ctlCANSensorsDiscretModule=ctlCANSensorsDiscretModule, ctlRsSensorsOutletId=ctlRsSensorsOutletId, ctlInternalSensorsAnalogAt75=ctlInternalSensorsAnalogAt75, ctlUnitGroupsEntry=ctlUnitGroupsEntry, ctlCANSensorsAnalogMax=ctlCANSensorsAnalogMax, ctlHardwareDevicesCameraGroup=ctlHardwareDevicesCameraGroup, ctlUnitModuleType=ctlUnitModuleType, ctlNotifiersTrapType=ctlNotifiersTrapType, ctlHardwareDevicesCameraState=ctlHardwareDevicesCameraState, ctlUnitGroupsTable=ctlUnitGroupsTable, ctlInternalSensorsAnalogsTable=ctlInternalSensorsAnalogsTable, ctlRsSensorsDiscretState=ctlRsSensorsDiscretState, ctlRsSensorsOutletGroup=ctlRsSensorsOutletGroup, ctlCANSensorsDiscretReverse=ctlCANSensorsDiscretReverse, ctlRsSensorsOutletModule=ctlRsSensorsOutletModule, ctlInternalSensorsDiscretLevel=ctlInternalSensorsDiscretLevel, ctlCANSensorsOutletType=ctlCANSensorsOutletType, ctlCANSensorsAnalogLow=ctlCANSensorsAnalogLow, ctlNotifiersTrapPort=ctlNotifiersTrapPort, ctlRsSensorsDiscretValue=ctlRsSensorsDiscretValue, ctlRsSensorsAnalogNum=ctlRsSensorsAnalogNum, ctlInternalSensorsOutletName=ctlInternalSensorsOutletName, ctlRsSensorsAnalogSpecific=ctlRsSensorsAnalogSpecific, ctlUnitLogicId=ctlUnitLogicId, ctlVirtualDevicesPingsEntry=ctlVirtualDevicesPingsEntry, ctlUnitElementState=ctlUnitElementState, ctlRsSensorsDiscretGroup=ctlRsSensorsDiscretGroup, ctlRsSensorsDiscretsEntry=ctlRsSensorsDiscretsEntry, ctlInternalSensorsAnalogValue=ctlInternalSensorsAnalogValue, ctlCANSensorsAnalogModule=ctlCANSensorsAnalogModule, ctlNotifiersMailerNum=ctlNotifiersMailerNum, ctlNotifiersMailerId=ctlNotifiersMailerId, ctlInternalSensorsDiscretReset=ctlInternalSensorsDiscretReset, ctlInternalSensorsOutletType=ctlInternalSensorsOutletType, ctlCANSensorsDiscretLevel=ctlCANSensorsDiscretLevel, ctlNotifiersTrapId=ctlNotifiersTrapId, ctlVirtualDevicesPingNum=ctlVirtualDevicesPingNum, ctlNotifiersTrapState=ctlNotifiersTrapState, ctlUnitSaveToFlash=ctlUnitSaveToFlash, ctlNotifiersTrapName=ctlNotifiersTrapName, ctlNotifiersSMSMessage=ctlNotifiersSMSMessage, ctlCANSensorsDiscretSpecific=ctlCANSensorsDiscretSpecific, ctlRsSensorsDiscretName=ctlRsSensorsDiscretName, ctlNotifiersSMSsEntry=ctlNotifiersSMSsEntry, ctlUnitGroupName=ctlUnitGroupName, ctlNotifiersSMSName=ctlNotifiersSMSName, ctlInternalSensorsAnalogName=ctlInternalSensorsAnalogName, ctlUnit=ctlUnit, ctlUnitElementModule=ctlUnitElementModule, ctlInternalSensorsAnalogWarning=ctlInternalSensorsAnalogWarning, ctlInternalSensorsOutletModule=ctlInternalSensorsOutletModule, ctlInternalSensorsOutletState=ctlInternalSensorsOutletState, ctlInternalSensorsOutletValue=ctlInternalSensorsOutletValue, ctlHardwareDevicesCameraModule=ctlHardwareDevicesCameraModule, ctlInternalSensorsAnalogMax=ctlInternalSensorsAnalogMax, ctlUnitElementValue=ctlUnitElementValue, ctlVirtualDevicesTimerModule=ctlVirtualDevicesTimerModule, ctlRsSensors=ctlRsSensors, ctlHardwareDevicesCameraResolution=ctlHardwareDevicesCameraResolution, ctlInternalSensorsDiscretValue=ctlInternalSensorsDiscretValue, ctlInternalSensorsAnalogMin=ctlInternalSensorsAnalogMin, ctlCANSensorsOutletName=ctlCANSensorsOutletName, ctlRsSensorsDiscretLevel=ctlRsSensorsDiscretLevel, ctlNotifiersSMSValue=ctlNotifiersSMSValue, ctlUnitLogicDesc=ctlUnitLogicDesc, ctlUnitElementGroup=ctlUnitElementGroup, ctlCANSensorsDiscretState=ctlCANSensorsDiscretState, ctlRsSensorsDiscretsTable=ctlRsSensorsDiscretsTable, ctlCANSensorsDiscretGroup=ctlCANSensorsDiscretGroup, ctlUnitElementId=ctlUnitElementId, ctlRsSensorsOutletType=ctlRsSensorsOutletType, ctlVirtualDevicesTimerValue=ctlVirtualDevicesTimerValue, ctlVirtualDevicesPingServer=ctlVirtualDevicesPingServer, ctlNotifiersMailerModule=ctlNotifiersMailerModule, ctlUnitElementsEntry=ctlUnitElementsEntry, ctlNotifiersSMSState=ctlNotifiersSMSState, ctlNotifiersTrapServer=ctlNotifiersTrapServer, ctlVirtualDevicesPingGroup=ctlVirtualDevicesPingGroup, ctlRsSensorsAnalogGroup=ctlRsSensorsAnalogGroup, ctlNotifiersMailerPort=ctlNotifiersMailerPort, ctlUnitLogicsEntry=ctlUnitLogicsEntry, ctlVirtualDevicesTimerNum=ctlVirtualDevicesTimerNum, ctlHardwareDevicesCameraId=ctlHardwareDevicesCameraId, ctlHardwareDevicesCameraName=ctlHardwareDevicesCameraName, ctlNotifiersMailerState=ctlNotifiersMailerState, ctlNotifiersTrapModule=ctlNotifiersTrapModule, ctlInternalSensorsDiscretGroup=ctlInternalSensorsDiscretGroup, ctlCANSensorsAnalogAt0=ctlCANSensorsAnalogAt0, ctlVirtualDevicesPingId=ctlVirtualDevicesPingId, ctlInternalSensorsAnalogExpression=ctlInternalSensorsAnalogExpression, ctlNotifiersSMSModule=ctlNotifiersSMSModule, ctlInternalSensorsAnalogType=ctlInternalSensorsAnalogType, ctlCANSensorsOutletInitial=ctlCANSensorsOutletInitial, ctlRsSensorsOutletsTable=ctlRsSensorsOutletsTable, ctlInternalSensorsOutletsTable=ctlInternalSensorsOutletsTable, ctlRsSensorsOutletNum=ctlRsSensorsOutletNum, ctlInternalSensorsDiscretNum=ctlInternalSensorsDiscretNum, ctlInternalSensorsDiscretState=ctlInternalSensorsDiscretState, ctlInternalSensorsDiscretId=ctlInternalSensorsDiscretId, ctlInternalSensorsAnalogState=ctlInternalSensorsAnalogState, ctlNotifiersMailerGroup=ctlNotifiersMailerGroup, ctlCANSensorsDiscretPulse=ctlCANSensorsDiscretPulse, ctlCANSensors=ctlCANSensors, ctlCANSensorsAnalogValue=ctlCANSensorsAnalogValue, ctlRsSensorsDiscretReverse=ctlRsSensorsDiscretReverse, ctlCANSensorsAnalogId=ctlCANSensorsAnalogId, ctlRsSensorsAnalogId=ctlRsSensorsAnalogId, ctlInternalSensorsDiscretName=ctlInternalSensorsDiscretName, ctlRsSensorsDiscretNum=ctlRsSensorsDiscretNum, ctlNotifiersSMSId=ctlNotifiersSMSId, ctlCANSensorsOutletState=ctlCANSensorsOutletState, ctlHardwareDevices=ctlHardwareDevices, ctlRsSensorsOutletInitial=ctlRsSensorsOutletInitial, ctlRsSensorsAnalogMax=ctlRsSensorsAnalogMax, ctlInternalSensorsDiscretPulse=ctlInternalSensorsDiscretPulse, ctlNotifiersMailerPassword=ctlNotifiersMailerPassword, ctlVirtualDevicesTimerName=ctlVirtualDevicesTimerName, ctlCANSensorsAnalogMin=ctlCANSensorsAnalogMin, ctlRsSensorsAnalogHigh=ctlRsSensorsAnalogHigh, ctlCANSensorsDiscretsTable=ctlCANSensorsDiscretsTable, ctlInternalSensorsAnalogId=ctlInternalSensorsAnalogId, skycontrol=skycontrol, ctlNotifiersTrapNum=ctlNotifiersTrapNum, ctlCANSensorsAnalogsTable=ctlCANSensorsAnalogsTable, ctlRsSensorsDiscretSpecific=ctlRsSensorsDiscretSpecific, ctlUnitModuleName=ctlUnitModuleName, ctlUnitLogicsTable=ctlUnitLogicsTable, ctlUnitModuleId=ctlUnitModuleId, ctlNotifiersTrapValue=ctlNotifiersTrapValue, ctlHardwareDevicesCameraNum=ctlHardwareDevicesCameraNum, ctlCANSensorsOutletGroup=ctlCANSensorsOutletGroup, ctlUnitModuleClass=ctlUnitModuleClass, ctlNotifiersMailerType=ctlNotifiersMailerType, ctlCANSensorsAnalogsEntry=ctlCANSensorsAnalogsEntry, ctlCANSensorsAnalogGroup=ctlCANSensorsAnalogGroup, ctlHardwareDevicesCameraValue=ctlHardwareDevicesCameraValue, ctlRsSensorsDiscretReset=ctlRsSensorsDiscretReset, ctlNotifiersMailersTable=ctlNotifiersMailersTable, ctlNotifiers=ctlNotifiers, ctlInternalSensorsAnalogNum=ctlInternalSensorsAnalogNum, ctlCANSensorsOutletsTable=ctlCANSensorsOutletsTable, ctlRsSensorsOutletState=ctlRsSensorsOutletState)
mibBuilder.exportSymbols("SKYCONTROL-SYSTEM-MIB", ctlVirtualDevicesPingIP=ctlVirtualDevicesPingIP, ctlRsSensorsAnalogState=ctlRsSensorsAnalogState, ctlRsSensorsOutletName=ctlRsSensorsOutletName, ctlHardwareDevicesCameraURL=ctlHardwareDevicesCameraURL, ctlNotifiersSMSsTable=ctlNotifiersSMSsTable, ctlInternalSensorsAnalogSpecific=ctlInternalSensorsAnalogSpecific, ctlRsSensorsDiscretType=ctlRsSensorsDiscretType, ctlNotifiersMailerLogin=ctlNotifiersMailerLogin, ctlVirtualDevicesTimersTable=ctlVirtualDevicesTimersTable, ctlVirtualDevicesPingValue=ctlVirtualDevicesPingValue, ctlUnitModuleSN=ctlUnitModuleSN, ctlVirtualDevicesTimerState=ctlVirtualDevicesTimerState)
