#
# PySNMP MIB module AP553LIU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AP553LIU-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:07:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
liuGroup, = mibBuilder.importSymbols("INNOVX-CORE-MIB", "liuGroup")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, ObjectIdentity, MibIdentifier, NotificationType, Bits, ModuleIdentity, Counter32, Gauge32, Counter64, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, iso, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "ObjectIdentity", "MibIdentifier", "NotificationType", "Bits", "ModuleIdentity", "Counter32", "Gauge32", "Counter64", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "iso", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
liuAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 1))
liuCsuNetCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 2))
liuDsuCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 3))
liuNetAlarmCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 4))
liuDiagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 5))
liuStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 6))
liuCurrentStats = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 7))
liuTotalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 8))
liuHistoryStats = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 9))
ap553MIBversion = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553MIBversion.setStatus('mandatory')
ap553NetSetFrameType = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("esf", 1), ("d4", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553NetSetFrameType.setStatus('mandatory')
ap553NetOperFrameType = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("esf", 1), ("d4", 2), ("auto", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553NetOperFrameType.setStatus('mandatory')
ap553NetEsfMode = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ansi-T1-403", 1), ("tr-54016", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553NetEsfMode.setStatus('mandatory')
ap553NetLineCoding = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("b8zs", 1), ("ami", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553NetLineCoding.setStatus('mandatory')
ap553NetIntfType = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("ds1-auto-lbo", 1), ("ds1-zero-dB", 2), ("ds1-neg7pt5-dB", 3), ("ds1-neg15pt0-dB", 4), ("ds1-neg22pt5-dB", 5), ("dsx1-preeq133-ft", 6), ("dsx1-preeq266-ft", 7), ("dsx1-preeq399-ft", 8), ("dsx1-preeq533-ft", 9), ("dsx1-preeq655-ft", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553NetIntfType.setStatus('mandatory')
ap553NetDS1IntfRcvLevel = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noSignal", 1), ("pos2toNeg7pt5-dB", 2), ("neg7pt5toNeg15-dB", 3), ("neg15toNeg22pt5-dB", 4), ("lessThanNeg22pt5-dB", 5), ("invalidDSX1intf", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553NetDS1IntfRcvLevel.setStatus('mandatory')
ap553DS0AllocationScheme = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("consecutive", 1), ("alternate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553DS0AllocationScheme.setStatus('mandatory')
ap553DS0Fmt = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nx56k", 1), ("nx64k", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553DS0Fmt.setStatus('mandatory')
ap553StartingDS0 = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553StartingDS0.setStatus('mandatory')
ap553NumDS0s = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553NumDS0s.setStatus('mandatory')
ap553LIUAggregateRate = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(11, 11)).setFixedLength(11)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553LIUAggregateRate.setStatus('mandatory')
ap553SystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553SystemStatus.setStatus('mandatory')
ap553CircuitAssurance = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553CircuitAssurance.setStatus('mandatory')
ap553InbandLoop = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inhibit", 1), ("payloadloop", 2), ("lineloop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553InbandLoop.setStatus('mandatory')
ap553NetBpvTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inhibit", 1), ("critical", 2), ("major", 3), ("minor", 4), ("warning", 5), ("info", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553NetBpvTrapSeverity.setStatus('mandatory')
ap553NetBpvWindow = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("oneMinute", 1), ("fifteenMinutes", 2), ("oneHour", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553NetBpvWindow.setStatus('mandatory')
ap553NetBpvThresh = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("thr1", 1), ("thr10", 2), ("thr100", 3), ("thr1000", 4), ("thr10000", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553NetBpvThresh.setStatus('mandatory')
ap553NetCrcTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inhibit", 1), ("critical", 2), ("major", 3), ("minor", 4), ("warning", 5), ("info", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553NetCrcTrapSeverity.setStatus('mandatory')
ap553NetCrcWindow = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("oneMinute", 1), ("fifteenMinutes", 2), ("oneHour", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553NetCrcWindow.setStatus('mandatory')
ap553NetCrcThresh = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("thr1", 1), ("thr10", 2), ("thr100", 3), ("thr1000", 4), ("thr10000", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553NetCrcThresh.setStatus('mandatory')
ap553NetLadTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inhibit", 1), ("critical", 2), ("major", 3), ("minor", 4), ("warning", 5), ("info", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553NetLadTrapSeverity.setStatus('mandatory')
ap553NetLadWindow = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("oneMinute", 1), ("fifteenMinutes", 2), ("oneHour", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553NetLadWindow.setStatus('mandatory')
ap553NetLadThresh = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("thr1", 1), ("thr10", 2), ("thr100", 3), ("thr1000", 4), ("thr10000", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553NetLadThresh.setStatus('mandatory')
ap553NetAisTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inhibit", 1), ("critical", 2), ("major", 3), ("minor", 4), ("warning", 5), ("info", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553NetAisTrapSeverity.setStatus('mandatory')
ap553NetLosTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inhibit", 1), ("critical", 2), ("major", 3), ("minor", 4), ("warning", 5), ("info", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553NetLosTrapSeverity.setStatus('mandatory')
ap553NetOofTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inhibit", 1), ("critical", 2), ("major", 3), ("minor", 4), ("warning", 5), ("info", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553NetOofTrapSeverity.setStatus('mandatory')
ap553NetRcdYelTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inhibit", 1), ("critical", 2), ("major", 3), ("minor", 4), ("warning", 5), ("info", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553NetRcdYelTrapSeverity.setStatus('mandatory')
ap553NetUssTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 4, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inhibit", 1), ("critical", 2), ("major", 3), ("minor", 4), ("warning", 5), ("info", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553NetUssTrapSeverity.setStatus('mandatory')
ap553DiagT1Test = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("t1LineLoopback", 1), ("t1PayLoadLoopback", 2), ("t1StopTest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553DiagT1Test.setStatus('mandatory')
ap553DiagTestDuration = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("testTime1Min", 1), ("testTime5Mins", 2), ("testTime10Mins", 3), ("testTime20Mins", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap553DiagTestDuration.setStatus('mandatory')
ap553DiagTestStatus = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("statT1LineLoopback", 1), ("statT1PayLoadLoopback", 2), ("statNoTestinProgress", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553DiagTestStatus.setStatus('mandatory')
ap553LedStatus = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 6, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553LedStatus.setStatus('mandatory')
ap553PortStatus = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 6, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553PortStatus.setStatus('mandatory')
ap553PortFrameCounts = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 6, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553PortFrameCounts.setStatus('mandatory')
ap553CurrentIntervalCompletion = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553CurrentIntervalCompletion.setStatus('mandatory')
ap553CurrentErroredSeconds = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 7, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553CurrentErroredSeconds.setStatus('mandatory')
ap553CurrentSeverelyErroredSeconds = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 7, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553CurrentSeverelyErroredSeconds.setStatus('mandatory')
ap553CurrentBurstyErroredSeconds = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 7, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553CurrentBurstyErroredSeconds.setStatus('mandatory')
ap553CurrentCrcErrors = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 7, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553CurrentCrcErrors.setStatus('mandatory')
ap553CurrentUnavailableSeconds = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 7, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553CurrentUnavailableSeconds.setStatus('mandatory')
ap553CurrentLossOfFrameErrors = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 7, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553CurrentLossOfFrameErrors.setStatus('mandatory')
ap553CurrentBipolarViolationsErrors = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 7, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553CurrentBipolarViolationsErrors.setStatus('mandatory')
ap553CurrentLossOfSignalErrors = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 7, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553CurrentLossOfSignalErrors.setStatus('mandatory')
ap553TotalErroredSeconds = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 8, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553TotalErroredSeconds.setStatus('mandatory')
ap553TotalSeverelyErroredSeconds = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 8, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553TotalSeverelyErroredSeconds.setStatus('mandatory')
ap553TotalBurstyErroredSeconds = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 8, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553TotalBurstyErroredSeconds.setStatus('mandatory')
ap553TotalCrcErrors = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 8, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553TotalCrcErrors.setStatus('mandatory')
ap553TotalUnavailableSeconds = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 8, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553TotalUnavailableSeconds.setStatus('mandatory')
ap553TotalLossOfFrameErrors = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 8, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553TotalLossOfFrameErrors.setStatus('mandatory')
ap553TotalBipolarViolationsErrors = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 8, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553TotalBipolarViolationsErrors.setStatus('mandatory')
ap553TotalLossOfSignalErrors = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 8, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553TotalLossOfSignalErrors.setStatus('mandatory')
ap553ValidHistoryIntervals = MibScalar((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553ValidHistoryIntervals.setStatus('mandatory')
ap553LineStats24hrHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 9, 2), )
if mibBuilder.loadTexts: ap553LineStats24hrHistoryTable.setStatus('mandatory')
ap553HistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 9, 2, 1), ).setIndexNames((0, "AP553LIU-MIB", "ap553HistoryInterval"))
if mibBuilder.loadTexts: ap553HistoryEntry.setStatus('mandatory')
ap553HistoryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553HistoryInterval.setStatus('mandatory')
ap553ErroredSecondsData = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 9, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553ErroredSecondsData.setStatus('mandatory')
ap553SeverelyErroredSecondsData = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 9, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553SeverelyErroredSecondsData.setStatus('mandatory')
ap553BurstyErroredSecondsData = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 9, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553BurstyErroredSecondsData.setStatus('mandatory')
ap553CrcErrorsData = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 9, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553CrcErrorsData.setStatus('mandatory')
ap553UnavailableSecondsData = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 9, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553UnavailableSecondsData.setStatus('mandatory')
ap553LossOfFrameErrorsData = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 9, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553LossOfFrameErrorsData.setStatus('mandatory')
ap553BipolarViolationsErrorsData = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 9, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553BipolarViolationsErrorsData.setStatus('mandatory')
ap553LossOfSignalErrorsData = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 22, 1, 3, 9, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ap553LossOfSignalErrorsData.setStatus('mandatory')
mibBuilder.exportSymbols("AP553LIU-MIB", ap553PortFrameCounts=ap553PortFrameCounts, ap553DiagT1Test=ap553DiagT1Test, ap553DS0AllocationScheme=ap553DS0AllocationScheme, ap553LIUAggregateRate=ap553LIUAggregateRate, ap553NetLadTrapSeverity=ap553NetLadTrapSeverity, ap553NetDS1IntfRcvLevel=ap553NetDS1IntfRcvLevel, ap553CurrentErroredSeconds=ap553CurrentErroredSeconds, liuTotalStats=liuTotalStats, liuCurrentStats=liuCurrentStats, ap553TotalBipolarViolationsErrors=ap553TotalBipolarViolationsErrors, ap553InbandLoop=ap553InbandLoop, ap553NetUssTrapSeverity=ap553NetUssTrapSeverity, ap553ValidHistoryIntervals=ap553ValidHistoryIntervals, ap553CurrentLossOfFrameErrors=ap553CurrentLossOfFrameErrors, liuHistoryStats=liuHistoryStats, ap553NetOperFrameType=ap553NetOperFrameType, liuNetAlarmCfg=liuNetAlarmCfg, ap553NumDS0s=ap553NumDS0s, ap553TotalLossOfFrameErrors=ap553TotalLossOfFrameErrors, ap553DiagTestDuration=ap553DiagTestDuration, ap553NetOofTrapSeverity=ap553NetOofTrapSeverity, ap553NetAisTrapSeverity=ap553NetAisTrapSeverity, ap553NetRcdYelTrapSeverity=ap553NetRcdYelTrapSeverity, ap553TotalSeverelyErroredSeconds=ap553TotalSeverelyErroredSeconds, liuStatus=liuStatus, ap553NetIntfType=ap553NetIntfType, ap553TotalUnavailableSeconds=ap553TotalUnavailableSeconds, ap553HistoryInterval=ap553HistoryInterval, ap553NetBpvThresh=ap553NetBpvThresh, ap553LedStatus=ap553LedStatus, ap553LineStats24hrHistoryTable=ap553LineStats24hrHistoryTable, ap553NetEsfMode=ap553NetEsfMode, ap553LossOfSignalErrorsData=ap553LossOfSignalErrorsData, ap553CurrentIntervalCompletion=ap553CurrentIntervalCompletion, liuDsuCfg=liuDsuCfg, ap553NetCrcThresh=ap553NetCrcThresh, ap553NetCrcTrapSeverity=ap553NetCrcTrapSeverity, ap553NetBpvWindow=ap553NetBpvWindow, ap553HistoryEntry=ap553HistoryEntry, liuDiagnostics=liuDiagnostics, ap553CurrentSeverelyErroredSeconds=ap553CurrentSeverelyErroredSeconds, ap553UnavailableSecondsData=ap553UnavailableSecondsData, liuAdmin=liuAdmin, ap553LossOfFrameErrorsData=ap553LossOfFrameErrorsData, ap553CurrentBurstyErroredSeconds=ap553CurrentBurstyErroredSeconds, ap553SystemStatus=ap553SystemStatus, ap553CurrentLossOfSignalErrors=ap553CurrentLossOfSignalErrors, ap553CurrentUnavailableSeconds=ap553CurrentUnavailableSeconds, ap553ErroredSecondsData=ap553ErroredSecondsData, ap553CurrentBipolarViolationsErrors=ap553CurrentBipolarViolationsErrors, ap553TotalCrcErrors=ap553TotalCrcErrors, ap553NetLadWindow=ap553NetLadWindow, ap553CrcErrorsData=ap553CrcErrorsData, ap553TotalLossOfSignalErrors=ap553TotalLossOfSignalErrors, ap553BipolarViolationsErrorsData=ap553BipolarViolationsErrorsData, liuCsuNetCfg=liuCsuNetCfg, ap553NetSetFrameType=ap553NetSetFrameType, ap553NetBpvTrapSeverity=ap553NetBpvTrapSeverity, ap553DiagTestStatus=ap553DiagTestStatus, ap553PortStatus=ap553PortStatus, ap553BurstyErroredSecondsData=ap553BurstyErroredSecondsData, ap553NetLadThresh=ap553NetLadThresh, ap553NetLosTrapSeverity=ap553NetLosTrapSeverity, ap553StartingDS0=ap553StartingDS0, ap553TotalErroredSeconds=ap553TotalErroredSeconds, ap553CurrentCrcErrors=ap553CurrentCrcErrors, ap553MIBversion=ap553MIBversion, ap553DS0Fmt=ap553DS0Fmt, ap553CircuitAssurance=ap553CircuitAssurance, ap553TotalBurstyErroredSeconds=ap553TotalBurstyErroredSeconds, ap553NetLineCoding=ap553NetLineCoding, ap553NetCrcWindow=ap553NetCrcWindow, ap553SeverelyErroredSecondsData=ap553SeverelyErroredSecondsData)
