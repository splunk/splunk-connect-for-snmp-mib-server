#
# PySNMP MIB module STATISTICS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/STATISTICS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:03:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
VidList, HpSwitchPortType = mibBuilder.importSymbols("HP-ICF-TC", "VidList", "HpSwitchPortType")
InetAddress, InetAddressType, InetPortNumber = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType", "InetPortNumber")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ModuleIdentity, Counter32, TimeTicks, ObjectIdentity, IpAddress, Integer32, Counter64, Unsigned32, Gauge32, iso, Bits, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ModuleIdentity", "Counter32", "TimeTicks", "ObjectIdentity", "IpAddress", "Integer32", "Counter64", "Unsigned32", "Gauge32", "iso", "Bits", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
hpSwitchStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9))
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class VlanID(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 65535)

hpSwitchIpxStat = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 1))
hpSwitchIpxStatTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 1, 1), )
if mibBuilder.loadTexts: hpSwitchIpxStatTable.setStatus('mandatory')
hpSwitchIpxStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 1, 1, 1), ).setIndexNames((0, "STATISTICS-MIB", "hpSwitchIpxStatIndex"))
if mibBuilder.loadTexts: hpSwitchIpxStatEntry.setStatus('mandatory')
hpSwitchIpxStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 1, 1, 1, 1), VlanID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchIpxStatIndex.setStatus('mandatory')
hpSwitchIpxStatNodeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 1, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchIpxStatNodeAddr.setStatus('mandatory')
hpSwitchIpxStatGatewayAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 1, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchIpxStatGatewayAddr.setStatus('mandatory')
hpSwitchIpxStatGatewayEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ethernetII", 1), ("ieee8022", 2), ("snap", 3), ("ieee8023Raw", 4), ("noGateway", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchIpxStatGatewayEncap.setStatus('mandatory')
hpSwitchIpxStatAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchIpxStatAdminStatus.setStatus('mandatory')
hpSwitchIpStat = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 2))
hpSwitchIpStatTimepAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchIpStatTimepAdminStatus.setStatus('obsolete')
hpSwitchIpStatTimepServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 2, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchIpStatTimepServerAddr.setStatus('obsolete')
hpSwitchIpStatTimepPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchIpStatTimepPollInterval.setStatus('obsolete')
hpSwitchIpStatTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 2, 4), )
if mibBuilder.loadTexts: hpSwitchIpStatTable.setStatus('obsolete')
hpSwitchIpStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 2, 4, 1), ).setIndexNames((0, "STATISTICS-MIB", "hpSwitchIpStatIndex"))
if mibBuilder.loadTexts: hpSwitchIpStatEntry.setStatus('obsolete')
hpSwitchIpStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 2, 4, 1, 1), VlanID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchIpStatIndex.setStatus('obsolete')
hpSwitchIpStatAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 2, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchIpStatAddr.setStatus('obsolete')
hpSwitchIpStatMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 2, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchIpStatMask.setStatus('obsolete')
hpSwitchIpStatGatewayAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 2, 4, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchIpStatGatewayAddr.setStatus('obsolete')
hpSwitchIpStatAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("bootp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchIpStatAdminStatus.setStatus('obsolete')
hpSwitchFdbInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 4))
hpSwitchVlanFdbAddrTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 4, 1), )
if mibBuilder.loadTexts: hpSwitchVlanFdbAddrTable.setStatus('mandatory')
hpSwitchVlanFdbAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 4, 1, 1), ).setIndexNames((0, "STATISTICS-MIB", "hpSwitchVlanFdbId"), (0, "STATISTICS-MIB", "hpSwitchVlanFdbAddress"))
if mibBuilder.loadTexts: hpSwitchVlanFdbAddrEntry.setStatus('mandatory')
hpSwitchVlanFdbId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 4, 1, 1, 1), VlanID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchVlanFdbId.setStatus('mandatory')
hpSwitchVlanFdbAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 4, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchVlanFdbAddress.setStatus('mandatory')
hpSwitchVlanFdbPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchVlanFdbPort.setStatus('mandatory')
hpSwitchPortFdbAddrTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 4, 2), )
if mibBuilder.loadTexts: hpSwitchPortFdbAddrTable.setStatus('mandatory')
hpSwitchPortFdbAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 4, 2, 1), ).setIndexNames((0, "STATISTICS-MIB", "hpSwitchPortFdbId"), (0, "STATISTICS-MIB", "hpSwitchPortFdbAddress"))
if mibBuilder.loadTexts: hpSwitchPortFdbAddrEntry.setStatus('mandatory')
hpSwitchPortFdbId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortFdbId.setStatus('mandatory')
hpSwitchPortFdbAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 4, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortFdbAddress.setStatus('mandatory')
hpSwitchPortFdbVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 4, 2, 1, 3), VlanID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortFdbVlanId.setStatus('deprecated')
hpSwitchPortFdbVidList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 4, 2, 1, 4), VidList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPortFdbVidList.setStatus('mandatory')
hpSwitchStpStat = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 5))
hpSwitchStpStatAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchStpStatAdminStatus.setStatus('mandatory')
hpSwitchMiscStat = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 6))
hpSwitchCpuStat = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchCpuStat.setStatus('mandatory')
hpSwitchFddiIpFragStat = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 7))
hpSwitchFddiIpFragStatTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 7, 1), )
if mibBuilder.loadTexts: hpSwitchFddiIpFragStatTable.setStatus('mandatory')
hpSwitchFddiIpFragStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 7, 1, 1), ).setIndexNames((0, "STATISTICS-MIB", "hpSwitchFddiIpFragStatIndex"))
if mibBuilder.loadTexts: hpSwitchFddiIpFragStatEntry.setStatus('mandatory')
hpSwitchFddiIpFragStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFddiIpFragStatIndex.setStatus('mandatory')
hpSwitchFddiIpFragFramesFragmented = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 7, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFddiIpFragFramesFragmented.setStatus('mandatory')
hpSwitchFddiIpFragFramesCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 7, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFddiIpFragFramesCreated.setStatus('mandatory')
hpSwitchFddiIpFragFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 7, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFddiIpFragFrameErrors.setStatus('mandatory')
hpSwitchFddiSystemStat = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 8))
hpSwitchFddiSystemStatTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 8, 1), )
if mibBuilder.loadTexts: hpSwitchFddiSystemStatTable.setStatus('mandatory')
hpSwitchFddiSystemStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 8, 1, 1), ).setIndexNames((0, "STATISTICS-MIB", "hpSwitchFddiSystemStatIndex"))
if mibBuilder.loadTexts: hpSwitchFddiSystemStatEntry.setStatus('mandatory')
hpSwitchFddiSystemStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFddiSystemStatIndex.setStatus('mandatory')
hpSwitchFddiSystemOsVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 8, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFddiSystemOsVersion.setStatus('mandatory')
hpSwitchFddiSystemRomVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 8, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFddiSystemRomVersion.setStatus('mandatory')
hpSwitchFddiSystemMemoryTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 8, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFddiSystemMemoryTotal.setStatus('mandatory')
hpSwitchFddiSystemMemoryFree = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 8, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFddiSystemMemoryFree.setStatus('mandatory')
hpSwitchFddiSystemCpuUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFddiSystemCpuUtil.setStatus('mandatory')
hpSwitchFddiSystemBuildDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 8, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(80, 80)).setFixedLength(80)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFddiSystemBuildDirectory.setStatus('mandatory')
hpSwitchFddiSystemBuildDate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 8, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(40, 40)).setFixedLength(40)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFddiSystemBuildDate.setStatus('mandatory')
hpSwitchFddiSystemBuildNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 8, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFddiSystemBuildNumber.setStatus('mandatory')
hpABCStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 9))
hpABCStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 9, 1), )
if mibBuilder.loadTexts: hpABCStatsTable.setStatus('mandatory')
hpABCStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 9, 1, 1), ).setIndexNames((0, "STATISTICS-MIB", "hpABCStatsVlanIndex"), (0, "STATISTICS-MIB", "hpABCStatsPortIndex"))
if mibBuilder.loadTexts: hpABCStatsEntry.setStatus('mandatory')
hpABCStatsVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 9, 1, 1, 1), VlanID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpABCStatsVlanIndex.setStatus('mandatory')
hpABCStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpABCStatsPortIndex.setStatus('mandatory')
hpABCStatsPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 9, 1, 1, 3), HpSwitchPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpABCStatsPortType.setStatus('mandatory')
hpABCStatsArpReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 9, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpABCStatsArpReplies.setStatus('mandatory')
hpABCStatsIpxReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 9, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpABCStatsIpxReplies.setStatus('mandatory')
hpABCStatsIpRipControl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forwarding", 1), ("notforwarding", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpABCStatsIpRipControl.setStatus('mandatory')
hpABCStatsIpxRipSapControl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forwarding", 1), ("notforwarding", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpABCStatsIpxRipSapControl.setStatus('mandatory')
hpIgmpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 10))
hpIgmpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 10, 1), )
if mibBuilder.loadTexts: hpIgmpStatsTable.setStatus('mandatory')
hpIgmpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 10, 1, 1), ).setIndexNames((0, "STATISTICS-MIB", "hpIgmpStatsVlanIndex"), (0, "STATISTICS-MIB", "hpIgmpStatsActiveGroupAddr"))
if mibBuilder.loadTexts: hpIgmpStatsEntry.setStatus('mandatory')
hpIgmpStatsVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 10, 1, 1, 1), VlanID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpIgmpStatsVlanIndex.setStatus('mandatory')
hpIgmpStatsActiveGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 10, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpIgmpStatsActiveGroupAddr.setStatus('mandatory')
hpIgmpStatsReports = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 10, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpIgmpStatsReports.setStatus('mandatory')
hpIgmpStatsQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 10, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpIgmpStatsQueries.setStatus('mandatory')
hpIgmpStatsQuerierAccessPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 10, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpIgmpStatsQuerierAccessPort.setStatus('mandatory')
hpIgmpStatsPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 10, 2), )
if mibBuilder.loadTexts: hpIgmpStatsPortTable.setStatus('deprecated')
hpIgmpStatsPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 10, 2, 1), ).setIndexNames((0, "STATISTICS-MIB", "hpIgmpStatsActiveGroupAddr"), (0, "STATISTICS-MIB", "hpIgmpStatsPortIndex"))
if mibBuilder.loadTexts: hpIgmpStatsPortEntry.setStatus('deprecated')
hpIgmpStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpIgmpStatsPortIndex.setStatus('deprecated')
hpIgmpStatsPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 10, 2, 1, 2), HpSwitchPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpIgmpStatsPortType.setStatus('deprecated')
hpIgmpStatsPortAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("host", 1), ("router", 2), ("host-router", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpIgmpStatsPortAccess.setStatus('deprecated')
hpIgmpStatsPortTable2 = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 10, 3), )
if mibBuilder.loadTexts: hpIgmpStatsPortTable2.setStatus('mandatory')
hpIgmpStatsPortEntry2 = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 10, 3, 1), ).setIndexNames((0, "STATISTICS-MIB", "hpIgmpStatsVlanIndex"), (0, "STATISTICS-MIB", "hpIgmpStatsActiveGroupAddr"), (0, "STATISTICS-MIB", "hpIgmpStatsPortIndex2"))
if mibBuilder.loadTexts: hpIgmpStatsPortEntry2.setStatus('mandatory')
hpIgmpStatsPortIndex2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpIgmpStatsPortIndex2.setStatus('mandatory')
hpIgmpStatsPortType2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 10, 3, 1, 2), HpSwitchPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpIgmpStatsPortType2.setStatus('mandatory')
hpIgmpStatsPortAccess2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 10, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("host", 1), ("router", 2), ("host-router", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpIgmpStatsPortAccess2.setStatus('mandatory')
hpIgmpStatsPortAgeTimer2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 10, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpIgmpStatsPortAgeTimer2.setStatus('mandatory')
hpIgmpStatsPortLeaveTimer2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 10, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpIgmpStatsPortLeaveTimer2.setStatus('mandatory')
hpLdbalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 11))
hpLdbalStatsPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 11, 1), )
if mibBuilder.loadTexts: hpLdbalStatsPortTable.setStatus('mandatory')
hpLdbalStatsPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 11, 1, 1), ).setIndexNames((0, "STATISTICS-MIB", "hpLdbalStatsPortIndex"))
if mibBuilder.loadTexts: hpLdbalStatsPortEntry.setStatus('mandatory')
hpLdbalStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpLdbalStatsPortIndex.setStatus('mandatory')
hpLdbalStatsPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("error", 2), ("initial", 3), ("notEstablished", 4), ("established", 5), ("topologyError", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpLdbalStatsPortState.setStatus('mandatory')
hpLdbalStatsAdjacentSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 11, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpLdbalStatsAdjacentSwitch.setStatus('mandatory')
hpLdbalStatsPeerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 11, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpLdbalStatsPeerPort.setStatus('mandatory')
hpLdbalStatsAdjacentHost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 11, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpLdbalStatsAdjacentHost.setStatus('mandatory')
hpLdbalStatsMeshWarningStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpLdbalStatsMeshWarningStatus.setStatus('mandatory')
hpSwitchMacStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 12))
hpSwitchFdbAddressCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 12, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFdbAddressCount.setStatus('mandatory')
hpSwitchFlowControlStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 13))
hpSwitchFlowControlStatusTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 13, 1), )
if mibBuilder.loadTexts: hpSwitchFlowControlStatusTable.setStatus('mandatory')
hpSwitchFlowControlStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 13, 1, 1), ).setIndexNames((0, "STATISTICS-MIB", "hpSwitchFlowControlStatusPortIndex"))
if mibBuilder.loadTexts: hpSwitchFlowControlStatusEntry.setStatus('mandatory')
hpSwitchFlowControlStatusPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFlowControlStatusPortIndex.setStatus('mandatory')
hpSwitchFlowControlState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("on-rx", 3), ("on-tx", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFlowControlState.setStatus('mandatory')
hpFECStatsTrunk = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 14))
hpFECStatsTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 14, 1), )
if mibBuilder.loadTexts: hpFECStatsTrunkTable.setStatus('mandatory')
hpFECStatsTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 14, 1, 1), ).setIndexNames((0, "STATISTICS-MIB", "hpFECStatsTrunkIndex"))
if mibBuilder.loadTexts: hpFECStatsTrunkEntry.setStatus('mandatory')
hpFECStatsTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFECStatsTrunkIndex.setStatus('mandatory')
hpFECStatsTrunkName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 14, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFECStatsTrunkName.setStatus('mandatory')
hpFECStatsTrunkNegotiationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("successful", 1), ("failed", 2), ("initialized", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFECStatsTrunkNegotiationStatus.setStatus('mandatory')
hpFECStatsTrunkForwardingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sa-only", 1), ("sa-da", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFECStatsTrunkForwardingMode.setStatus('mandatory')
hpFECStatsTrunkFlushPktsEchoed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 14, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFECStatsTrunkFlushPktsEchoed.setStatus('mandatory')
hpFECStatsPort = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 15))
hpFECStatsPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 15, 1), )
if mibBuilder.loadTexts: hpFECStatsPortTable.setStatus('mandatory')
hpFECStatsPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 15, 1, 1), ).setIndexNames((0, "STATISTICS-MIB", "hpFECStatsPortIndex"))
if mibBuilder.loadTexts: hpFECStatsPortEntry.setStatus('mandatory')
hpFECStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFECStatsPortIndex.setStatus('mandatory')
hpFECStatsPortTrunkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFECStatsPortTrunkNumber.setStatus('mandatory')
hpFECStatsPortTrunkName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 15, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFECStatsPortTrunkName.setStatus('mandatory')
hpFECStatsPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 15, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("down", 1), ("forwarding", 2), ("blocking", 3), ("up", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFECStatsPortMode.setStatus('mandatory')
hpFECStatsPortNegotiationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 15, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("successful", 1), ("failed", 2), ("initialized", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFECStatsPortNegotiationStatus.setStatus('mandatory')
hpFECStatsPortHellosSent = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 15, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFECStatsPortHellosSent.setStatus('mandatory')
hpFECStatsPortHellosReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 15, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFECStatsPortHellosReceived.setStatus('mandatory')
hpFECStatsPortMySlowHello = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 15, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fast", 1), ("slow", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFECStatsPortMySlowHello.setStatus('mandatory')
hpFECStatsPortMyAutoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 15, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("desirable", 1), ("auto", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFECStatsPortMyAutoMode.setStatus('mandatory')
hpFECStatsPortPartner = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 15, 1, 1, 10), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFECStatsPortPartner.setStatus('mandatory')
hpFECStatsPortFlushPktsEchoed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 15, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFECStatsPortFlushPktsEchoed.setStatus('mandatory')
hpGvrpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 16))
hpGvrpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 16, 1), )
if mibBuilder.loadTexts: hpGvrpStatsTable.setStatus('mandatory')
hpGvrpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 16, 1, 1), ).setIndexNames((0, "STATISTICS-MIB", "hpGvrpStatsVlanIndex"), (0, "STATISTICS-MIB", "hpGvrpStatsPortIndex"))
if mibBuilder.loadTexts: hpGvrpStatsEntry.setStatus('mandatory')
hpGvrpStatsVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 16, 1, 1, 1), VlanID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpGvrpStatsVlanIndex.setStatus('mandatory')
hpGvrpStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpGvrpStatsPortIndex.setStatus('mandatory')
hpGvrpStatsPortVlanMember = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pending", 1), ("yes", 2), ("no", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpGvrpStatsPortVlanMember.setStatus('mandatory')
hpGvrpPortIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 16, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpGvrpPortIfOperStatus.setStatus('mandatory')
hpPortGvrpCtrlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 16, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("learn", 1), ("block", 2), ("disable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpPortGvrpCtrlStatus.setStatus('mandatory')
hpSshStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 17))
hpSshStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 17, 1), )
if mibBuilder.loadTexts: hpSshStatsTable.setStatus('mandatory')
hpSshStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 17, 1, 1), ).setIndexNames((0, "STATISTICS-MIB", "hpSshStatsSesIndex"))
if mibBuilder.loadTexts: hpSshStatsEntry.setStatus('mandatory')
hpSshStatsSesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSshStatsSesIndex.setStatus('mandatory')
hpSshStatsSesType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("console", 1), ("telnet", 2), ("ssh", 3), ("inactive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSshStatsSesType.setStatus('mandatory')
hpSshStatsSourceIpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 17, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSshStatsSourceIpPort.setStatus('deprecated')
hpSshStatsSesVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 17, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("version1", 1), ("version2", 2), ("noConnect", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSshStatsSesVersion.setStatus('mandatory')
hpSshStatsSourceIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 17, 1, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSshStatsSourceIpType.setStatus('mandatory')
hpSshStatsSourceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 17, 1, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSshStatsSourceIpAddress.setStatus('mandatory')
hpSshStatsSourceIpPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 17, 1, 1, 7), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSshStatsSourceIpPortNum.setStatus('mandatory')
hpSwitchPhysicalPort = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 18))
hpSwitchPhysicalPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 18, 1), )
if mibBuilder.loadTexts: hpSwitchPhysicalPortTable.setStatus('mandatory')
hpSwitchPhysicalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 18, 1, 1), ).setIndexNames((0, "STATISTICS-MIB", "hpSwitchPhysicalPortIndex"))
if mibBuilder.loadTexts: hpSwitchPhysicalPortEntry.setStatus('mandatory')
hpSwitchPhysicalPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 18, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPhysicalPortIndex.setStatus('mandatory')
hpSwitchPhysicalPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 18, 1, 1, 2), HpSwitchPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchPhysicalPortType.setStatus('mandatory')
hpSwitchCosStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 19))
hpSwitchQueueWatchStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 19, 1), )
if mibBuilder.loadTexts: hpSwitchQueueWatchStatsTable.setStatus('mandatory')
hpSwitchQueueWatchStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 19, 1, 1), ).setIndexNames((0, "STATISTICS-MIB", "hpSwitchQueueWatchStatsPortIndex"), (0, "STATISTICS-MIB", "hpSwitchQueueWatchStatsQueueIndex"))
if mibBuilder.loadTexts: hpSwitchQueueWatchStatsEntry.setStatus('mandatory')
hpSwitchQueueWatchStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 19, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchQueueWatchStatsPortIndex.setStatus('mandatory')
hpSwitchQueueWatchStatsQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 19, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchQueueWatchStatsQueueIndex.setStatus('mandatory')
hpSwitchQueueWatchStatsQueueDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 9, 19, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchQueueWatchStatsQueueDrops.setStatus('mandatory')
mibBuilder.exportSymbols("STATISTICS-MIB", hpGvrpPortIfOperStatus=hpGvrpPortIfOperStatus, hpSwitchFddiIpFragFramesFragmented=hpSwitchFddiIpFragFramesFragmented, hpSwitchMacStats=hpSwitchMacStats, hpSwitchFddiSystemStatIndex=hpSwitchFddiSystemStatIndex, hpLdbalStatsPortEntry=hpLdbalStatsPortEntry, hpIgmpStatsPortEntry=hpIgmpStatsPortEntry, hpFECStatsPortNegotiationStatus=hpFECStatsPortNegotiationStatus, hpSwitchIpxStatIndex=hpSwitchIpxStatIndex, hpSwitchPortFdbVlanId=hpSwitchPortFdbVlanId, hpIgmpStatsPortTable2=hpIgmpStatsPortTable2, hpSwitchIpStatTimepAdminStatus=hpSwitchIpStatTimepAdminStatus, hpSwitchIpStatGatewayAddr=hpSwitchIpStatGatewayAddr, hpIgmpStatsEntry=hpIgmpStatsEntry, hpSwitchFlowControlState=hpSwitchFlowControlState, hpIgmpStatsPortAccess=hpIgmpStatsPortAccess, hpFECStatsPortMyAutoMode=hpFECStatsPortMyAutoMode, hpSwitchCpuStat=hpSwitchCpuStat, hpSwitchPortFdbId=hpSwitchPortFdbId, hpSwitchVlanFdbAddrEntry=hpSwitchVlanFdbAddrEntry, hpABCStatsPortType=hpABCStatsPortType, hpIgmpStatsPortTable=hpIgmpStatsPortTable, hpLdbalStatsAdjacentSwitch=hpLdbalStatsAdjacentSwitch, hpIgmpStatsPortAccess2=hpIgmpStatsPortAccess2, hpSwitchMiscStat=hpSwitchMiscStat, hpSwitchFddiSystemStatEntry=hpSwitchFddiSystemStatEntry, hpSwitchVlanFdbAddrTable=hpSwitchVlanFdbAddrTable, hpABCStats=hpABCStats, hpSwitchFddiIpFragFramesCreated=hpSwitchFddiIpFragFramesCreated, hpIgmpStatsReports=hpIgmpStatsReports, hpSwitchFddiSystemBuildDirectory=hpSwitchFddiSystemBuildDirectory, hpFECStatsPortFlushPktsEchoed=hpFECStatsPortFlushPktsEchoed, hpIgmpStats=hpIgmpStats, hpGvrpStatsTable=hpGvrpStatsTable, hpSshStatsSesVersion=hpSshStatsSesVersion, hpSwitchFlowControlStatusTable=hpSwitchFlowControlStatusTable, hpLdbalStatsPortIndex=hpLdbalStatsPortIndex, hpLdbalStats=hpLdbalStats, hpSshStatsSourceIpType=hpSshStatsSourceIpType, hpSwitchPortFdbAddrTable=hpSwitchPortFdbAddrTable, hpFECStatsTrunkName=hpFECStatsTrunkName, hpSwitchQueueWatchStatsTable=hpSwitchQueueWatchStatsTable, hpSwitchFdbInfo=hpSwitchFdbInfo, hpSwitchPhysicalPort=hpSwitchPhysicalPort, hpABCStatsEntry=hpABCStatsEntry, hpFECStatsTrunkNegotiationStatus=hpFECStatsTrunkNegotiationStatus, hpSwitchFddiIpFragStatTable=hpSwitchFddiIpFragStatTable, hpFECStatsPortHellosSent=hpFECStatsPortHellosSent, hpIgmpStatsPortType=hpIgmpStatsPortType, hpFECStatsPortTable=hpFECStatsPortTable, hpGvrpStatsPortIndex=hpGvrpStatsPortIndex, hpSwitchIpStatIndex=hpSwitchIpStatIndex, hpFECStatsTrunkIndex=hpFECStatsTrunkIndex, hpABCStatsIpRipControl=hpABCStatsIpRipControl, hpSwitchIpStatTimepServerAddr=hpSwitchIpStatTimepServerAddr, hpSwitchStpStatAdminStatus=hpSwitchStpStatAdminStatus, hpFECStatsTrunkEntry=hpFECStatsTrunkEntry, hpSwitchStpStat=hpSwitchStpStat, hpFECStatsPortEntry=hpFECStatsPortEntry, hpFECStatsTrunk=hpFECStatsTrunk, hpFECStatsPortTrunkName=hpFECStatsPortTrunkName, hpSwitchStatistics=hpSwitchStatistics, hpABCStatsArpReplies=hpABCStatsArpReplies, hpIgmpStatsQueries=hpIgmpStatsQueries, hpFECStatsTrunkFlushPktsEchoed=hpFECStatsTrunkFlushPktsEchoed, hpIgmpStatsPortType2=hpIgmpStatsPortType2, hpIgmpStatsPortEntry2=hpIgmpStatsPortEntry2, hpSwitchIpxStat=hpSwitchIpxStat, hpPortGvrpCtrlStatus=hpPortGvrpCtrlStatus, hpSwitchIpxStatGatewayAddr=hpSwitchIpxStatGatewayAddr, hpSwitchFddiSystemMemoryTotal=hpSwitchFddiSystemMemoryTotal, hpSwitchIpStatTable=hpSwitchIpStatTable, hpIgmpStatsPortIndex2=hpIgmpStatsPortIndex2, hpSshStatsSourceIpPort=hpSshStatsSourceIpPort, hpSwitchVlanFdbPort=hpSwitchVlanFdbPort, hpSshStatsSourceIpAddress=hpSshStatsSourceIpAddress, hpSwitchQueueWatchStatsPortIndex=hpSwitchQueueWatchStatsPortIndex, hpSwitchFddiSystemBuildNumber=hpSwitchFddiSystemBuildNumber, hpSwitchQueueWatchStatsEntry=hpSwitchQueueWatchStatsEntry, hpSwitchIpStatEntry=hpSwitchIpStatEntry, hpIgmpStatsQuerierAccessPort=hpIgmpStatsQuerierAccessPort, hpFECStatsTrunkForwardingMode=hpFECStatsTrunkForwardingMode, hpSshStats=hpSshStats, hpIgmpStatsPortIndex=hpIgmpStatsPortIndex, hpSwitchQueueWatchStatsQueueIndex=hpSwitchQueueWatchStatsQueueIndex, hpSwitchFddiIpFragFrameErrors=hpSwitchFddiIpFragFrameErrors, hpSwitchFddiSystemCpuUtil=hpSwitchFddiSystemCpuUtil, hpGvrpStats=hpGvrpStats, hpSwitchPortFdbAddrEntry=hpSwitchPortFdbAddrEntry, hpSwitchIpStatMask=hpSwitchIpStatMask, hpIgmpStatsVlanIndex=hpIgmpStatsVlanIndex, hpIgmpStatsActiveGroupAddr=hpIgmpStatsActiveGroupAddr, hpFECStatsTrunkTable=hpFECStatsTrunkTable, hpSshStatsEntry=hpSshStatsEntry, hpABCStatsVlanIndex=hpABCStatsVlanIndex, hpSwitchFddiSystemOsVersion=hpSwitchFddiSystemOsVersion, hpSwitchIpxStatNodeAddr=hpSwitchIpxStatNodeAddr, hpSwitchVlanFdbAddress=hpSwitchVlanFdbAddress, hpGvrpStatsPortVlanMember=hpGvrpStatsPortVlanMember, hpFECStatsPortIndex=hpFECStatsPortIndex, hpGvrpStatsVlanIndex=hpGvrpStatsVlanIndex, hpSwitchFddiSystemRomVersion=hpSwitchFddiSystemRomVersion, hpSwitchIpxStatEntry=hpSwitchIpxStatEntry, hpLdbalStatsPortState=hpLdbalStatsPortState, hpSwitchPhysicalPortTable=hpSwitchPhysicalPortTable, hpSwitchVlanFdbId=hpSwitchVlanFdbId, hpFECStatsPort=hpFECStatsPort, hpSwitchPhysicalPortType=hpSwitchPhysicalPortType, hpSwitchIpxStatTable=hpSwitchIpxStatTable, hpFECStatsPortHellosReceived=hpFECStatsPortHellosReceived, hpLdbalStatsAdjacentHost=hpLdbalStatsAdjacentHost, hpABCStatsIpxRipSapControl=hpABCStatsIpxRipSapControl, hpIgmpStatsPortLeaveTimer2=hpIgmpStatsPortLeaveTimer2, VlanID=VlanID, hpSwitchIpStatAdminStatus=hpSwitchIpStatAdminStatus, hpSwitchPhysicalPortIndex=hpSwitchPhysicalPortIndex, hpSwitchFlowControlStatusPortIndex=hpSwitchFlowControlStatusPortIndex, hpABCStatsIpxReplies=hpABCStatsIpxReplies, hpSwitchFlowControlStatus=hpSwitchFlowControlStatus, hpSwitchIpStat=hpSwitchIpStat, hpSwitchPortFdbVidList=hpSwitchPortFdbVidList, hpSshStatsSesType=hpSshStatsSesType, hpFECStatsPortMode=hpFECStatsPortMode, hpSwitchFddiSystemStatTable=hpSwitchFddiSystemStatTable, hpLdbalStatsPeerPort=hpLdbalStatsPeerPort, hpSwitchPhysicalPortEntry=hpSwitchPhysicalPortEntry, hpIgmpStatsPortAgeTimer2=hpIgmpStatsPortAgeTimer2, hpFECStatsPortTrunkNumber=hpFECStatsPortTrunkNumber, hpSshStatsSourceIpPortNum=hpSshStatsSourceIpPortNum, hpGvrpStatsEntry=hpGvrpStatsEntry, hpIgmpStatsTable=hpIgmpStatsTable, MacAddress=MacAddress, hpSshStatsTable=hpSshStatsTable, hpFECStatsPortPartner=hpFECStatsPortPartner, hpSshStatsSesIndex=hpSshStatsSesIndex, hpSwitchQueueWatchStatsQueueDrops=hpSwitchQueueWatchStatsQueueDrops, hpSwitchFddiSystemStat=hpSwitchFddiSystemStat, hpLdbalStatsPortTable=hpLdbalStatsPortTable, hpSwitchIpxStatGatewayEncap=hpSwitchIpxStatGatewayEncap, hpFECStatsPortMySlowHello=hpFECStatsPortMySlowHello, hpSwitchIpxStatAdminStatus=hpSwitchIpxStatAdminStatus, hpSwitchCosStats=hpSwitchCosStats, hpSwitchIpStatTimepPollInterval=hpSwitchIpStatTimepPollInterval, hpSwitchFddiIpFragStat=hpSwitchFddiIpFragStat, hpSwitchFlowControlStatusEntry=hpSwitchFlowControlStatusEntry, hpSwitchFddiSystemMemoryFree=hpSwitchFddiSystemMemoryFree, hpSwitchFdbAddressCount=hpSwitchFdbAddressCount, hpSwitchFddiIpFragStatEntry=hpSwitchFddiIpFragStatEntry, hpSwitchFddiSystemBuildDate=hpSwitchFddiSystemBuildDate, hpABCStatsPortIndex=hpABCStatsPortIndex, hpABCStatsTable=hpABCStatsTable, hpSwitchPortFdbAddress=hpSwitchPortFdbAddress, hpSwitchFddiIpFragStatIndex=hpSwitchFddiIpFragStatIndex, hpSwitchIpStatAddr=hpSwitchIpStatAddr, hpLdbalStatsMeshWarningStatus=hpLdbalStatsMeshWarningStatus)
