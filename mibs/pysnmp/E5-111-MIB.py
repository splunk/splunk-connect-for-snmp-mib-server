#
# PySNMP MIB module E5-111-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/E5-111-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:44:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
BridgeId, Timeout, dot1dBasePort = mibBuilder.importSymbols("BRIDGE-MIB", "BridgeId", "Timeout", "dot1dBasePort")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
dot1dTrafficClass, = mibBuilder.importSymbols("P-BRIDGE-MIB", "dot1dTrafficClass")
PortList, dot1qVlanIndex, VlanIndex = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList", "dot1qVlanIndex", "VlanIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, iso, Bits, TimeTicks, MibIdentifier, NotificationType, Integer32, Unsigned32, Counter32, enterprises, ModuleIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "iso", "Bits", "TimeTicks", "MibIdentifier", "NotificationType", "Integer32", "Unsigned32", "Counter32", "enterprises", "ModuleIdentity", "IpAddress")
RowStatus, MacAddress, DisplayString, PhysAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "MacAddress", "DisplayString", "PhysAddress", "TextualConvention")
calixNetworks = MibIdentifier((1, 3, 6, 1, 4, 1, 6321))
calixRegistrations = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1))
calixProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2))
e5x100 = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3))
e5x111 = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2))
alarmconf = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2))
diagnostic = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4))
multicast = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7))
port = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8))
profile = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9))
switch = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10))
sys = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11))
trap = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 12))
statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13))
clear = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 14))
voip = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16))
aesSeriesCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 97))
iesSeriesCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98))
accessSwitchCommonATM = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 99))
alarmOps = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmOps.setStatus('current')
alarmConfTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 2), )
if mibBuilder.loadTexts: alarmConfTable.setStatus('current')
alarmConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 2, 1), ).setIndexNames((0, "E5-111-MIB", "alarmConfId"))
if mibBuilder.loadTexts: alarmConfEntry.setStatus('current')
alarmConfId = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmConfId.setStatus('current')
alarmConfFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("local1", 1), ("local2", 2), ("local3", 3), ("local4", 4), ("local5", 5), ("local6", 6), ("local7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmConfFacility.setStatus('current')
alarmConfTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmConfTarget.setStatus('current')
alarmConfSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("info", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmConfSeverity.setStatus('current')
alarmConfClearable = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clearable", 1), ("unclearable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmConfClearable.setStatus('current')
alarmCurrTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 3), )
if mibBuilder.loadTexts: alarmCurrTable.setStatus('current')
alarmCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 3, 1), ).setIndexNames((0, "E5-111-MIB", "alarmCurrIndex"))
if mibBuilder.loadTexts: alarmCurrEntry.setStatus('current')
alarmCurrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCurrIndex.setStatus('current')
alarmCurrOccurTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 3, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCurrOccurTime.setStatus('current')
alarmCurrTrapOid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 3, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCurrTrapOid.setStatus('current')
alarmCurrParam1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCurrParam1.setStatus('current')
alarmCurrParam2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCurrParam2.setStatus('current')
alarmCurrParam3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCurrParam3.setStatus('current')
alarmCurrParam4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCurrParam4.setStatus('current')
alarmCurrParam5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCurrParam5.setStatus('current')
alarmCurrParam6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCurrParam6.setStatus('current')
alarmCurrParam7 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCurrParam7.setStatus('current')
alarmCurrParam8 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCurrParam8.setStatus('current')
alarmCurrTimeDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCurrTimeDescr.setStatus('current')
alarmCurrSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("info", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCurrSeverity.setStatus('current')
alarmCurrDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 3, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCurrDescr.setStatus('current')
alarmSeverityPortTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 4), )
if mibBuilder.loadTexts: alarmSeverityPortTable.setStatus('current')
alarmSeverityPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: alarmSeverityPortEntry.setStatus('current')
severityThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("info", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: severityThresh.setStatus('current')
selt = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 3))
mlt = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4))
seltTarget = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: seltTarget.setStatus('current')
seltOps = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: seltOps.setStatus('current')
seltStatus = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: seltStatus.setStatus('current')
seltCableType = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("awg24", 1), ("awg26", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: seltCableType.setStatus('current')
seltLoopEstimateLengthFt = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 3, 5), Integer32()).setUnits('feet').setMaxAccess("readonly")
if mibBuilder.loadTexts: seltLoopEstimateLengthFt.setStatus('current')
seltLoopEstimateLengthMeter = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 3, 6), Integer32()).setUnits('meter').setMaxAccess("readonly")
if mibBuilder.loadTexts: seltLoopEstimateLengthMeter.setStatus('current')
mltTarget = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltTarget.setStatus('current')
mltOps = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltOps.setStatus('current')
mltOption = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("all", 1), ("vac", 2), ("vdc", 3), ("rload", 4), ("riso", 5), ("cap", 6), ("ren", 7), ("ring", 8), ("metering", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltOption.setStatus('current')
mltForce = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("force", 1), ("notForce", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltForce.setStatus('current')
mltResult = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 5))
mltVacTip = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 5, 1), Integer32()).setUnits('0.1 rms').setMaxAccess("readonly")
if mibBuilder.loadTexts: mltVacTip.setStatus('current')
mltVacRing = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 5, 2), Integer32()).setUnits('0.1 rms').setMaxAccess("readonly")
if mibBuilder.loadTexts: mltVacRing.setStatus('current')
mltVacDiff = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 5, 3), Integer32()).setUnits('0.1 rms').setMaxAccess("readonly")
if mibBuilder.loadTexts: mltVacDiff.setStatus('current')
mltVdcTip = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 5, 4), Integer32()).setUnits('0.1 volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: mltVdcTip.setStatus('current')
mltVdcRing = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 5, 5), Integer32()).setUnits('0.1 volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: mltVdcRing.setStatus('current')
mltVdcDiff = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 5, 6), Integer32()).setUnits('0.1 volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: mltVdcDiff.setStatus('current')
mltRLoop = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 5, 7), Integer32()).setUnits('0.1 ohm').setMaxAccess("readonly")
if mibBuilder.loadTexts: mltRLoop.setStatus('current')
mltRtg = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 5, 8), Integer32()).setUnits('0.1 ohm').setMaxAccess("readonly")
if mibBuilder.loadTexts: mltRtg.setStatus('current')
mltRrg = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 5, 9), Integer32()).setUnits('0.1 ohm').setMaxAccess("readonly")
if mibBuilder.loadTexts: mltRrg.setStatus('current')
mltRtr = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 5, 10), Integer32()).setUnits('0.1 ohm').setMaxAccess("readonly")
if mibBuilder.loadTexts: mltRtr.setStatus('current')
mltCtg = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 5, 11), Integer32()).setUnits('10^-9 F').setMaxAccess("readonly")
if mibBuilder.loadTexts: mltCtg.setStatus('current')
mltCrg = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 5, 12), Integer32()).setUnits('10^-9 F').setMaxAccess("readonly")
if mibBuilder.loadTexts: mltCrg.setStatus('current')
mltCtr = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 5, 13), Integer32()).setUnits('10^-9 F').setMaxAccess("readonly")
if mibBuilder.loadTexts: mltCtr.setStatus('current')
mltRen = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 5, 14), Integer32()).setUnits('0.1 ren').setMaxAccess("readonly")
if mibBuilder.loadTexts: mltRen.setStatus('current')
mltVRing = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 5, 15), Integer32()).setUnits('0.1 rms').setMaxAccess("readonly")
if mibBuilder.loadTexts: mltVRing.setStatus('current')
mltVMetering = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 5, 16), Integer32()).setUnits('0.1 vpeak').setMaxAccess("readonly")
if mibBuilder.loadTexts: mltVMetering.setStatus('current')
mltDialToneDetected = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 5, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltDialToneDetected.setStatus('current')
mltDetectedDtmfCount = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 5, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mltDetectedDtmfCount.setStatus('current')
mltDialToneDelay = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 5, 19), Integer32()).setUnits('0.001 sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: mltDialToneDelay.setStatus('current')
mltRelayTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 6), )
if mibBuilder.loadTexts: mltRelayTable.setStatus('current')
mltRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: mltRelayEntry.setStatus('current')
mltRelaySet = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 4, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("in", 1), ("out", 2), ("both", 3), ("off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mltRelaySet.setStatus('current')
mcastBandwidth = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 4))
igmpCount = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 5))
mvlan = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 6))
queryVid = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 7))
igmpTimer = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 11))
auditQuery = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 12))
igmpProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 13))
igmpEnable = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableProxy", 1), ("enableSnooping", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpEnable.setStatus('current')
igmpVersion = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("v2", 1), ("v3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpVersion.setStatus('current')
igmpLeaveMode = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("immediateLeave", 1), ("lastMemberQuery", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpLeaveMode.setStatus('current')
mcastDefaultBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000))).setUnits('Kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcastDefaultBandwidth.setStatus('current')
maxNumOfMcastBw = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNumOfMcastBw.setStatus('current')
mcastBwTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 4, 3), )
if mibBuilder.loadTexts: mcastBwTable.setStatus('current')
mcastBwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 4, 3, 1), ).setIndexNames((0, "E5-111-MIB", "mcastBwIndex"), (0, "E5-111-MIB", "mcastBwStartIp"), (0, "E5-111-MIB", "mcastBwEndIp"))
if mibBuilder.loadTexts: mcastBwEntry.setStatus('current')
mcastBwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcastBwIndex.setStatus('current')
mcastBwStartIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 4, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcastBwStartIp.setStatus('current')
mcastBwEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 4, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcastBwEndIp.setStatus('current')
mcastBwBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 4, 3, 1, 4), Integer32()).setUnits('Kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mcastBwBandwidth.setStatus('current')
mcastBwRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 4, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mcastBwRowStatus.setStatus('current')
mcastBwPortTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 4, 4), )
if mibBuilder.loadTexts: mcastBwPortTable.setStatus('current')
mcastBwPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 4, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: mcastBwPortEntry.setStatus('current')
mcastBwPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcastBwPortEnable.setStatus('current')
mcastBwPortBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 4, 4, 1, 2), Integer32()).setUnits('Kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcastBwPortBandwidth.setStatus('current')
igmpCountPortTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 5, 1), )
if mibBuilder.loadTexts: igmpCountPortTable.setStatus('current')
igmpCountPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: igmpCountPortEntry.setStatus('current')
igmpCountPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpCountPortEnable.setStatus('current')
igmpCountPortLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpCountPortLimit.setStatus('current')
maxNumOfMvlan = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNumOfMvlan.setStatus('current')
mvlanTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 6, 2), )
if mibBuilder.loadTexts: mvlanTable.setStatus('current')
mvlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 6, 2, 1), ).setIndexNames((0, "E5-111-MIB", "mvlanIndex"))
if mibBuilder.loadTexts: mvlanEntry.setStatus('current')
mvlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 6, 2, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvlanIndex.setStatus('current')
mvlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 6, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mvlanName.setStatus('current')
mvlanEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 6, 2, 1, 3), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mvlanEgressPorts.setStatus('current')
mvlanUntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 6, 2, 1, 4), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mvlanUntaggedPorts.setStatus('current')
mvlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 6, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mvlanRowStatus.setStatus('current')
mvlanTranslateTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 6, 3), )
if mibBuilder.loadTexts: mvlanTranslateTable.setStatus('current')
mvlanTranslateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 6, 3, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"), (0, "E5-111-MIB", "mvlanTranslateIndex"))
if mibBuilder.loadTexts: mvlanTranslateEntry.setStatus('current')
mvlanTranslateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvlanTranslateIndex.setStatus('current')
mvlanTranslateStartIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 6, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvlanTranslateStartIp.setStatus('current')
mvlanTranslateEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 6, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvlanTranslateEndIp.setStatus('current')
maxNumOfQryVid = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNumOfQryVid.setStatus('current')
qryVidConfTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 7, 2), )
if mibBuilder.loadTexts: qryVidConfTable.setStatus('current')
qryVidConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 7, 2, 1), ).setIndexNames((0, "E5-111-MIB", "qryVid"))
if mibBuilder.loadTexts: qryVidConfEntry.setStatus('current')
qryVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qryVid.setStatus('current')
qryVidRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 7, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qryVidRowStatus.setStatus('current')
qryVidStatusTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 7, 3), )
if mibBuilder.loadTexts: qryVidStatusTable.setStatus('current')
qryVidStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 7, 3, 1), ).setIndexNames((0, "E5-111-MIB", "qryVid"))
if mibBuilder.loadTexts: qryVidStatusEntry.setStatus('current')
qryVidType = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qryVidType.setStatus('current')
igmpQryInterval = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 11, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpQryInterval.setStatus('current')
igmpRobust = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpRobust.setStatus('current')
igmpQryRespInterval = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 11, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpQryRespInterval.setStatus('current')
igmpLastMemQryInterval = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 11, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpLastMemQryInterval.setStatus('current')
igmpLastMemQryRobust = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 11, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpLastMemQryRobust.setStatus('current')
auditQryEnable = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditQryEnable.setStatus('current')
auditQryInterval = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 12, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditQryInterval.setStatus('current')
auditQryRobust = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 12, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: auditQryRobust.setStatus('current')
maxNumberOfIgmpProfiles = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNumberOfIgmpProfiles.setStatus('current')
igmpProfileTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 13, 2), )
if mibBuilder.loadTexts: igmpProfileTable.setStatus('current')
igmpProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 13, 2, 1), ).setIndexNames((1, "E5-111-MIB", "igmpProfileName"))
if mibBuilder.loadTexts: igmpProfileEntry.setStatus('current')
igmpProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 13, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpProfileName.setStatus('current')
igmpProfileEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 13, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpProfileEnable.setStatus('current')
igmpProfileMaxGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpProfileMaxGroup.setStatus('current')
igmpProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 13, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpProfileRowStatus.setStatus('current')
igmpFilterTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 13, 3), )
if mibBuilder.loadTexts: igmpFilterTable.setStatus('current')
igmpFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 13, 3, 1), ).setIndexNames((0, "E5-111-MIB", "igmpProfileName"), (0, "E5-111-MIB", "igmpFilterIndex"))
if mibBuilder.loadTexts: igmpFilterEntry.setStatus('current')
igmpFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 13, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpFilterIndex.setStatus('current')
igmpFilterStartIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 13, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpFilterStartIp.setStatus('current')
igmpFilterEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 13, 3, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpFilterEndIp.setStatus('current')
igmpProfilePortTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 13, 4), )
if mibBuilder.loadTexts: igmpProfilePortTable.setStatus('current')
igmpProfilePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 13, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: igmpProfilePortEntry.setStatus('current')
igmpProfilePortProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 7, 13, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpProfilePortProfile.setStatus('current')
adslPort = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2))
pvc = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4))
ppvc = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 5))
rpvc = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8))
paepvc = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 10))
tlspvc = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 11))
ipbpvc = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12))
voipPort = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13))
dtpvc = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14))
snrMgn = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 15))
dslRate = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 16))
gbond = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 51))
subrPortTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 1), )
if mibBuilder.loadTexts: subrPortTable.setStatus('current')
subrPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: subrPortEntry.setStatus('current')
subrPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subrPortName.setStatus('current')
subrPortTel = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subrPortTel.setStatus('current')
adslLineConfTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1), )
if mibBuilder.loadTexts: adslLineConfTable.setStatus('current')
adslLineConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: adslLineConfEntry.setStatus('current')
adslLineConfAdslMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("gDotLite", 1), ("gDotDmt", 2), ("t1Dot413", 3), ("auto", 4), ("etsi", 5), ("adsl2", 6), ("adsl2Plus", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfAdslMode.setStatus('current')
adslLineConfAnnexL = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableNarrowMode", 1), ("enableWideMode", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfAnnexL.setStatus('current')
adslLineConfAnnexM = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfAnnexM.setStatus('current')
adslLineConfAnnexI = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfAnnexI.setStatus('current')
adslLineConfOptionMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfOptionMask.setStatus('current')
adslLineConfPowerMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableL2", 1), ("enableL2", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfPowerMgmt.setStatus('current')
adslLineConfPowerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fix", 1), ("priorityToPower", 2), ("priorityToRate", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfPowerMode.setStatus('current')
adslLineConfAturMaxTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-130, 200))).setUnits('tenth dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfAturMaxTxPower.setStatus('current')
adslLineConfAtucMaxTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 200))).setUnits('tenth dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfAtucMaxTxPower.setStatus('current')
adslLineConfMaxRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-255, 255))).setUnits('tenth dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfMaxRxPower.setStatus('current')
adslLineConfAturCarrierMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfAturCarrierMask.setStatus('current')
adslLineConfAtucCarrierMask0 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfAtucCarrierMask0.setStatus('current')
adslLineConfAtucCarrierMask1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 13), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfAtucCarrierMask1.setStatus('current')
adslLineConfAturInp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("zero", 1), ("zeroPointFive", 2), ("one", 3), ("two", 4), ("four", 5), ("eight", 6), ("sixteen", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfAturInp.setStatus('current')
adslLineConfAtucInp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("zero", 1), ("zeroPointFive", 2), ("one", 3), ("two", 4), ("four", 5), ("eight", 6), ("sixteen", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfAtucInp.setStatus('current')
adslLineConfL0Time = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfL0Time.setStatus('current')
adslLineConfL2Time = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfL2Time.setStatus('current')
adslLineConfL2ATPR = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 18), Integer32()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfL2ATPR.setStatus('current')
adslLineConfL2ATPRT = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 19), Integer32()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfL2ATPRT.setStatus('current')
adslLineConfMaxL2Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 20), Integer32()).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfMaxL2Rate.setStatus('current')
adslLineConfMinL2Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 21), Integer32()).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfMinL2Rate.setStatus('current')
adslLineConfL0toL2Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 22), Integer32()).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfL0toL2Rate.setStatus('current')
adslLineConfNitro = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfNitro.setStatus('current')
adslLineConfUSPhyr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfUSPhyr.setStatus('current')
adslLineConfDSPhyr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineConfDSPhyr.setStatus('current')
adslPortBatchSet = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3))
adslPortTarget = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslPortTarget.setStatus('current')
adslPortOps = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslPortOps.setStatus('current')
adslPortOps2 = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslPortOps2.setStatus('current')
adslModeForBatchSet = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("gDotLite", 1), ("gDotDmt", 2), ("t1Dot413", 3), ("auto", 4), ("etsi", 5), ("adsl2", 6), ("adsl2Plus", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslModeForBatchSet.setStatus('current')
adslLineProfileForBatchSet = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslLineProfileForBatchSet.setStatus('current')
adslAlarmProfileForBatchSet = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslAlarmProfileForBatchSet.setStatus('current')
adslOptionMaskForBatchSet = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslOptionMaskForBatchSet.setStatus('current')
adslAturMaxTxPowerForBatchSet = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-130, 200))).setUnits('tenth dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslAturMaxTxPowerForBatchSet.setStatus('current')
adslAtucMaxTxPowerForBatchSet = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 200))).setUnits('tenth dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslAtucMaxTxPowerForBatchSet.setStatus('current')
adslMaxRxPowerForBatchSet = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-255, 255))).setUnits('tenth dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslMaxRxPowerForBatchSet.setStatus('current')
adslAturCarrierMaskForBatchSet = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslAturCarrierMaskForBatchSet.setStatus('current')
adslAtucCarrierMask0ForBatchSet = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslAtucCarrierMask0ForBatchSet.setStatus('current')
adslAtucCarrierMask1ForBatchSet = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3, 13), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslAtucCarrierMask1ForBatchSet.setStatus('current')
adslAturInpForBatchSet = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("zero", 1), ("zeroPointFive", 2), ("one", 3), ("two", 4), ("four", 5), ("eight", 6), ("sixteen", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslAturInpForBatchSet.setStatus('current')
adslAtucInpForBatchSet = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("zero", 1), ("zeroPointFive", 2), ("one", 3), ("two", 4), ("four", 5), ("eight", 6), ("sixteen", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslAtucInpForBatchSet.setStatus('current')
adslL0TimeForBatchSet = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslL0TimeForBatchSet.setStatus('current')
adslL2TimeForBatchSet = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslL2TimeForBatchSet.setStatus('current')
adslL2ATPRForBatchSet = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3, 18), Integer32()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslL2ATPRForBatchSet.setStatus('current')
adslL2ATPRTForBatchSet = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3, 19), Integer32()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslL2ATPRTForBatchSet.setStatus('current')
adslMaxL2RateForBatchSet = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3, 20), Integer32()).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslMaxL2RateForBatchSet.setStatus('current')
adslMinL2RateForBatchSet = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3, 21), Integer32()).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslMinL2RateForBatchSet.setStatus('current')
adslL0toL2RateForBatchSet = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 3, 22), Integer32()).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslL0toL2RateForBatchSet.setStatus('current')
adslLineStatusTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 4), )
if mibBuilder.loadTexts: adslLineStatusTable.setStatus('current')
adslLineStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: adslLineStatusEntry.setStatus('current')
adslLineStatusMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("gDotLite", 1), ("gDotDmt", 2), ("t1Dot413", 3), ("etsi", 4), ("adsl2", 5), ("adsl2Plus", 6), ("none", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslLineStatusMode.setStatus('current')
adslLineUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslLineUpTime.setStatus('current')
powerMgmtParamTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 5), )
if mibBuilder.loadTexts: powerMgmtParamTable.setStatus('current')
powerMgmtParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: powerMgmtParamEntry.setStatus('current')
powerMgmtL0Time = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 5, 1, 1), Integer32()).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerMgmtL0Time.setStatus('current')
powerMgmtL2Time = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 5, 1, 2), Integer32()).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerMgmtL2Time.setStatus('current')
powerMgmtL2Atpr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 5, 1, 3), Integer32()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerMgmtL2Atpr.setStatus('current')
powerMgmtL2Atprt = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 5, 1, 4), Integer32()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerMgmtL2Atprt.setStatus('current')
powerMgmtL2MinRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 5, 1, 5), Integer32()).setUnits('Kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerMgmtL2MinRate.setStatus('current')
powerMgmtL2MaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 5, 1, 6), Integer32()).setUnits('Kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerMgmtL2MaxRate.setStatus('current')
powerMgmtL2ThreshRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 5, 1, 7), Integer32()).setUnits('Kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerMgmtL2ThreshRate.setStatus('current')
powerMgmtPSDTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 6), )
if mibBuilder.loadTexts: powerMgmtPSDTable.setStatus('current')
powerMgmtPSDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: powerMgmtPSDEntry.setStatus('current')
powerMgmtAtucMaxPSD = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 6, 1, 1), Integer32()).setUnits('0.1dBm/Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerMgmtAtucMaxPSD.setStatus('current')
powerMgmtAturMaxPSD = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 2, 6, 1, 2), Integer32()).setUnits('0.1dBm/Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerMgmtAturMaxPSD.setStatus('current')
maxNumOfPvcs = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNumOfPvcs.setStatus('current')
pvcTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 2), )
if mibBuilder.loadTexts: pvcTable.setStatus('current')
pvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-MIB", "pvcVpi"), (0, "E5-111-MIB", "pvcVci"), (0, "E5-111-MIB", "pvcPvid"))
if mibBuilder.loadTexts: pvcEntry.setStatus('current')
pvcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcVpi.setStatus('current')
pvcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcVci.setStatus('current')
pvcPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 2, 1, 3), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcPvid.setStatus('current')
pvcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvcPriority.setStatus('current')
pvcProfileDS = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvcProfileDS.setStatus('current')
pvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvcRowStatus.setStatus('current')
pvcProfileUS = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvcProfileUS.setStatus('current')
pvcAcName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 2, 1, 11), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvcAcName.setStatus('current')
pvcServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 2, 1, 12), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvcServiceName.setStatus('current')
pvcHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 2, 1, 13), Integer32()).setUnits('second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: pvcHelloTime.setStatus('current')
pvcStateTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 3), )
if mibBuilder.loadTexts: pvcStateTable.setStatus('current')
pvcStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-MIB", "pvcStateVpi"), (0, "E5-111-MIB", "pvcStateVci"), (0, "E5-111-MIB", "pvcStatePvid"))
if mibBuilder.loadTexts: pvcStateEntry.setStatus('current')
pvcStateVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcStateVpi.setStatus('current')
pvcStateVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcStateVci.setStatus('current')
pvcStatePvid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 3, 1, 3), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcStatePvid.setStatus('current')
pvcStatePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcStatePriority.setStatus('current')
pvcStateChannelType = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcStateChannelType.setStatus('current')
pvcStateEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvcStateEncap.setStatus('current')
pvcUsRateLimitTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 4), )
if mibBuilder.loadTexts: pvcUsRateLimitTable.setStatus('current')
pvcUsRateLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-MIB", "pvcVpi"), (0, "E5-111-MIB", "pvcVci"))
if mibBuilder.loadTexts: pvcUsRateLimitEntry.setStatus('current')
pvcUsRateLimitEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcUsRateLimitEnable.setStatus('current')
pvcUsRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 4, 4, 1, 2), Integer32()).setUnits('Kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvcUsRateLimit.setStatus('current')
maxNumOfPriorityPvcs = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNumOfPriorityPvcs.setStatus('current')
ppvcTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 5, 2), )
if mibBuilder.loadTexts: ppvcTable.setStatus('current')
ppvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 5, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-MIB", "ppvcVpi"), (0, "E5-111-MIB", "ppvcVci"), (0, "E5-111-MIB", "ppvcPvid"))
if mibBuilder.loadTexts: ppvcEntry.setStatus('current')
ppvcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppvcVpi.setStatus('current')
ppvcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppvcVci.setStatus('current')
ppvcPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 5, 2, 1, 3), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppvcPvid.setStatus('current')
ppvcEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("llc", 1), ("vc", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ppvcEncap.setStatus('current')
ppvcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ppvcPriority.setStatus('current')
ppvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 5, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ppvcRowStatus.setStatus('current')
ppvcMemberTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 5, 4), )
if mibBuilder.loadTexts: ppvcMemberTable.setStatus('current')
ppvcMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 5, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-MIB", "ppvcVpi"), (0, "E5-111-MIB", "ppvcVci"), (0, "E5-111-MIB", "ppvcMemberVpi"), (0, "E5-111-MIB", "ppvcMemberVci"), (0, "E5-111-MIB", "ppvcMemberPriority"))
if mibBuilder.loadTexts: ppvcMemberEntry.setStatus('current')
ppvcMemberVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppvcMemberVpi.setStatus('current')
ppvcMemberVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppvcMemberVci.setStatus('current')
ppvcMemberPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppvcMemberPriority.setStatus('current')
ppvcMemberProfileDS = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 5, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ppvcMemberProfileDS.setStatus('current')
ppvcMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 5, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ppvcMemberRowStatus.setStatus('current')
ppvcMemberProfileUS = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 5, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ppvcMemberProfileUS.setStatus('current')
rpvcGatewayTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 1), )
if mibBuilder.loadTexts: rpvcGatewayTable.setStatus('current')
rpvcGatewayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 1, 1), ).setIndexNames((0, "E5-111-MIB", "rpvcGatewayIp"))
if mibBuilder.loadTexts: rpvcGatewayEntry.setStatus('current')
rpvcGatewayIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpvcGatewayIp.setStatus('current')
rpvcGatewayVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 1, 1, 2), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpvcGatewayVlanId.setStatus('current')
rpvcGatewayRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rpvcGatewayRowStatus.setStatus('current')
rpvcGatewayPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpvcGatewayPriority.setStatus('current')
rpvcTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 2), )
if mibBuilder.loadTexts: rpvcTable.setStatus('current')
rpvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-MIB", "rpvcVpi"), (0, "E5-111-MIB", "rpvcVci"), (0, "E5-111-MIB", "rpvcIp"), (0, "E5-111-MIB", "rpvcNetmask"))
if mibBuilder.loadTexts: rpvcEntry.setStatus('current')
rpvcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpvcVpi.setStatus('current')
rpvcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpvcVci.setStatus('current')
rpvcDSProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rpvcDSProfile.setStatus('current')
rpvcUSProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rpvcUSProfile.setStatus('current')
rpvcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpvcIp.setStatus('current')
rpvcNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpvcNetmask.setStatus('current')
rpvcGatewayIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 2, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rpvcGatewayIpAddress.setStatus('current')
rpvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rpvcRowStatus.setStatus('current')
rpvcRouteDomainTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 3), )
if mibBuilder.loadTexts: rpvcRouteDomainTable.setStatus('current')
rpvcRouteDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-MIB", "rpvcRouteDomainVpi"), (0, "E5-111-MIB", "rpvcRouteDomainVci"), (0, "E5-111-MIB", "rpvcRouteDomainIp"), (0, "E5-111-MIB", "rpvcRouteDomainNetmask"))
if mibBuilder.loadTexts: rpvcRouteDomainEntry.setStatus('current')
rpvcRouteDomainVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpvcRouteDomainVpi.setStatus('current')
rpvcRouteDomainVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpvcRouteDomainVci.setStatus('current')
rpvcRouteDomainIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpvcRouteDomainIp.setStatus('current')
rpvcRouteDomainNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpvcRouteDomainNetmask.setStatus('current')
rpvcRouteDomainRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rpvcRouteDomainRowStatus.setStatus('current')
rpvcArpAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpvcArpAgingTime.setStatus('current')
rpvcArpFlush = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpvcArpFlush.setStatus('current')
dsBcastDisableTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 9), )
if mibBuilder.loadTexts: dsBcastDisableTable.setStatus('current')
dsBcastDisableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-MIB", "dsBcastDisableVlanId"))
if mibBuilder.loadTexts: dsBcastDisableEntry.setStatus('current')
dsBcastDisableVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsBcastDisableVlanId.setStatus('current')
dsBcastDisableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 9, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dsBcastDisableRowStatus.setStatus('current')
paepvcTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 10, 1), )
if mibBuilder.loadTexts: paepvcTable.setStatus('current')
paepvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 10, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-MIB", "paepvcVpi"), (0, "E5-111-MIB", "paepvcVci"), (0, "E5-111-MIB", "paepvcPvid"))
if mibBuilder.loadTexts: paepvcEntry.setStatus('current')
paepvcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcVpi.setStatus('current')
paepvcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcVci.setStatus('current')
paepvcPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 10, 1, 1, 3), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcPvid.setStatus('current')
paepvcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: paepvcPriority.setStatus('current')
paepvcProfileDS = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 10, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: paepvcProfileDS.setStatus('current')
paepvcAcName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 10, 1, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: paepvcAcName.setStatus('current')
paepvcServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 10, 1, 1, 8), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: paepvcServiceName.setStatus('current')
paepvcHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 10, 1, 1, 9), Integer32()).setUnits('second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: paepvcHelloTime.setStatus('current')
paepvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 10, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: paepvcRowStatus.setStatus('current')
paepvcProfileUS = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 10, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: paepvcProfileUS.setStatus('current')
paepvcCvid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 10, 1, 1, 12), VlanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: paepvcCvid.setStatus('current')
paepvcCPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 10, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: paepvcCPriority.setStatus('current')
tlspvcTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 11, 1), )
if mibBuilder.loadTexts: tlspvcTable.setStatus('current')
tlspvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 11, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-MIB", "tlspvcVpi"), (0, "E5-111-MIB", "tlspvcVci"), (0, "E5-111-MIB", "tlspvcSvid"))
if mibBuilder.loadTexts: tlspvcEntry.setStatus('current')
tlspvcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlspvcVpi.setStatus('current')
tlspvcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlspvcVci.setStatus('current')
tlspvcSvid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 11, 1, 1, 3), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlspvcSvid.setStatus('current')
tlspvcSpriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlspvcSpriority.setStatus('current')
tlspvcProfileDS = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 11, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlspvcProfileDS.setStatus('current')
tlspvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 11, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlspvcRowStatus.setStatus('current')
tlspvcProfileUS = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 11, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlspvcProfileUS.setStatus('current')
ipbpvcDomainTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 1), )
if mibBuilder.loadTexts: ipbpvcDomainTable.setStatus('current')
ipbpvcDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 1, 1), ).setIndexNames((0, "E5-111-MIB", "ipbpvcDomainName"))
if mibBuilder.loadTexts: ipbpvcDomainEntry.setStatus('current')
ipbpvcDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcDomainName.setStatus('current')
ipbpvcDomainRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipbpvcDomainRowStatus.setStatus('current')
ipbpvcDomainVlanTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 2), )
if mibBuilder.loadTexts: ipbpvcDomainVlanTable.setStatus('current')
ipbpvcDomainVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 2, 1), ).setIndexNames((0, "E5-111-MIB", "ipbpvcDomainName"), (0, "E5-111-MIB", "ipbpvcDomainVlanId"))
if mibBuilder.loadTexts: ipbpvcDomainVlanEntry.setStatus('current')
ipbpvcDomainVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 2, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcDomainVlanId.setStatus('current')
ipbpvcDomainDhcpVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipbpvcDomainDhcpVlanEnable.setStatus('current')
ipbpvcDomainVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipbpvcDomainVlanRowStatus.setStatus('current')
ipbpvcEdgeRouterTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 3), )
if mibBuilder.loadTexts: ipbpvcEdgeRouterTable.setStatus('current')
ipbpvcEdgeRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 3, 1), ).setIndexNames((0, "E5-111-MIB", "ipbpvcDomainName"), (0, "E5-111-MIB", "ipbpvcEdgeRouterIp"), (0, "E5-111-MIB", "ipbpvcEdgeRouterMask"), (0, "E5-111-MIB", "ipbpvcEdgeRouterVid"))
if mibBuilder.loadTexts: ipbpvcEdgeRouterEntry.setStatus('current')
ipbpvcEdgeRouterIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcEdgeRouterIp.setStatus('current')
ipbpvcEdgeRouterVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 3, 1, 2), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcEdgeRouterVid.setStatus('current')
ipbpvcEdgeRouterMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcEdgeRouterMask.setStatus('current')
ipbpvcEdgeRouterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipbpvcEdgeRouterRowStatus.setStatus('current')
ipbpvcInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 4), )
if mibBuilder.loadTexts: ipbpvcInterfaceTable.setStatus('current')
ipbpvcInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 4, 1), ).setIndexNames((0, "E5-111-MIB", "ipbpvcDomainName"), (0, "E5-111-MIB", "ipbpvcInterfaceIp"), (0, "E5-111-MIB", "ipbpvcInterfaceMask"), (0, "E5-111-MIB", "ipbpvcInterfaceVid"))
if mibBuilder.loadTexts: ipbpvcInterfaceEntry.setStatus('current')
ipbpvcInterfaceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcInterfaceIp.setStatus('current')
ipbpvcInterfaceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcInterfaceMask.setStatus('current')
ipbpvcInterfaceVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 4, 1, 3), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcInterfaceVid.setStatus('current')
ipbpvcInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 4, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipbpvcInterfaceIfIndex.setStatus('current')
ipbpvcInterfaceVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 4, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipbpvcInterfaceVpi.setStatus('current')
ipbpvcInterfaceVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 4, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipbpvcInterfaceVci.setStatus('current')
ipbpvcInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 4, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipbpvcInterfaceRowStatus.setStatus('current')
ipbpvcRouteTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 5), )
if mibBuilder.loadTexts: ipbpvcRouteTable.setStatus('current')
ipbpvcRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 5, 1), ).setIndexNames((0, "E5-111-MIB", "ipbpvcDomainName"), (0, "E5-111-MIB", "ipbpvcRouteIp"), (0, "E5-111-MIB", "ipbpvcRouteMask"), (0, "E5-111-MIB", "ipbpvcRouteNextHop"))
if mibBuilder.loadTexts: ipbpvcRouteEntry.setStatus('current')
ipbpvcRouteIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcRouteIp.setStatus('current')
ipbpvcRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcRouteMask.setStatus('current')
ipbpvcRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 5, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcRouteNextHop.setStatus('current')
ipbpvcRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipbpvcRouteMetric.setStatus('current')
ipbpvcRoutePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 5, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipbpvcRoutePriority.setStatus('current')
ipbpvcRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 5, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipbpvcRouteRowStatus.setStatus('current')
ipbpvcTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 6), )
if mibBuilder.loadTexts: ipbpvcTable.setStatus('current')
ipbpvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-MIB", "ipbpvcVpi"), (0, "E5-111-MIB", "ipbpvcVci"), (0, "E5-111-MIB", "ipbpvcPvid"))
if mibBuilder.loadTexts: ipbpvcEntry.setStatus('current')
ipbpvcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcVpi.setStatus('current')
ipbpvcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcVci.setStatus('current')
ipbpvcPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcPvid.setStatus('current')
ipbpvcEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ipoe", 1), ("reserved", 2), ("ipoa", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipbpvcEncap.setStatus('current')
ipbpvcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipbpvcPriority.setStatus('current')
ipbpvcProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 6, 1, 6), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipbpvcProfile.setStatus('current')
ipbpvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 6, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipbpvcRowStatus.setStatus('current')
ipbpvcProfileUS = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 6, 1, 8), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipbpvcProfileUS.setStatus('current')
arpproxy = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 8))
arpproxyAge = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 10000))).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpproxyAge.setStatus('current')
arpproxyFlush = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 8, 2))
arpproxyFlushTarget = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 8, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all", 1), ("edgerouter", 2), ("interface", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpproxyFlushTarget.setStatus('current')
arpproxyFlushOps = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 8, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpproxyFlushOps.setStatus('current')
arpproxyFlushEdgeRouterIp = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 8, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpproxyFlushEdgeRouterIp.setStatus('current')
arpproxyFlushEdgeRouterVid = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 8, 2, 4), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpproxyFlushEdgeRouterVid.setStatus('current')
arpproxyFlushInterfaceIp = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 8, 2, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpproxyFlushInterfaceIp.setStatus('current')
arpproxyFlushInterfaceMask = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 8, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpproxyFlushInterfaceMask.setStatus('current')
arpproxyFlushInterfaceVid = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 12, 8, 2, 7), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpproxyFlushInterfaceVid.setStatus('current')
dtpvcTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 1), )
if mibBuilder.loadTexts: dtpvcTable.setStatus('current')
dtpvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-MIB", "dtpvcVpi"), (0, "E5-111-MIB", "dtpvcVci"), (0, "E5-111-MIB", "dtpvcSvid"))
if mibBuilder.loadTexts: dtpvcEntry.setStatus('current')
dtpvcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtpvcVpi.setStatus('current')
dtpvcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtpvcVci.setStatus('current')
dtpvcSvid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 1, 1, 3), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtpvcSvid.setStatus('current')
dtpvcSpriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dtpvcSpriority.setStatus('current')
dtpvcCvid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 1, 1, 5), VlanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dtpvcCvid.setStatus('current')
dtpvcCpriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dtpvcCpriority.setStatus('current')
dtpvcDSProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dtpvcDSProfile.setStatus('current')
dtpvcUSProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dtpvcUSProfile.setStatus('current')
dtpvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dtpvcRowStatus.setStatus('current')
dtpvcSuperChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dtpvcSuperChannel.setStatus('current')
dtpvcAcName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 1, 1, 11), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dtpvcAcName.setStatus('current')
dtpvcServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 1, 1, 12), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dtpvcServiceName.setStatus('current')
dtpvcHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 1, 1, 13), Integer32()).setUnits('second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: dtpvcHelloTime.setStatus('current')
dtpvcStateTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 2), )
if mibBuilder.loadTexts: dtpvcStateTable.setStatus('current')
dtpvcStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-MIB", "dtpvcStateVpi"), (0, "E5-111-MIB", "dtpvcStateVci"), (0, "E5-111-MIB", "dtpvcStateSvid"))
if mibBuilder.loadTexts: dtpvcStateEntry.setStatus('current')
dtpvcStateVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtpvcStateVpi.setStatus('current')
dtpvcStateVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtpvcStateVci.setStatus('current')
dtpvcStateSvid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 2, 1, 3), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtpvcStateSvid.setStatus('current')
dtpvcStateSPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtpvcStateSPriority.setStatus('current')
dtpvcStateCvid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 2, 1, 5), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtpvcStateCvid.setStatus('current')
dtpvcStateCPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtpvcStateCPriority.setStatus('current')
dtpvcStateChannelType = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtpvcStateChannelType.setStatus('current')
dtpvcStateEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 14, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtpvcStateEncap.setStatus('current')
gbondGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 51, 1), )
if mibBuilder.loadTexts: gbondGroupTable.setStatus('current')
gbondGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 51, 1, 1), ).setIndexNames((0, "E5-111-MIB", "gbondGroupName"))
if mibBuilder.loadTexts: gbondGroupEntry.setStatus('current')
gbondGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 51, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gbondGroupName.setStatus('current')
gbondGroupPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 51, 1, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gbondGroupPorts.setStatus('current')
gbondGroupUpRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 51, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gbondGroupUpRate.setStatus('current')
gbondGroupDownRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 51, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gbondGroupDownRate.setStatus('current')
gbondGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 51, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gbondGroupRowStatus.setStatus('current')
voipSipLineConfTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 1), )
if mibBuilder.loadTexts: voipSipLineConfTable.setStatus('current')
voipSipLineConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: voipSipLineConfEntry.setStatus('current')
voipSipLineConfSipProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipSipLineConfSipProfile.setStatus('current')
voipSipLineConfSipCallSvcProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipSipLineConfSipCallSvcProfile.setStatus('current')
voipSipLineConfDspProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipSipLineConfDspProfile.setStatus('current')
portOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 2))
voipPortTarget = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 2, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipPortTarget.setStatus('current')
voipPortOps = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipPortOps.setStatus('current')
voipPortEnableStatus = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 2, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipPortEnableStatus.setStatus('current')
voipPortTelTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 3), )
if mibBuilder.loadTexts: voipPortTelTable.setStatus('current')
voipPortTelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: voipPortTelEntry.setStatus('current')
voipPortTel = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipPortTel.setStatus('current')
voipH248LineConfTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 7), )
if mibBuilder.loadTexts: voipH248LineConfTable.setStatus('current')
voipH248LineConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: voipH248LineConfEntry.setStatus('current')
voipH248LineConfMgName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 7, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipH248LineConfMgName.setStatus('current')
voipH248LineConfDspProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 7, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipH248LineConfDspProfile.setStatus('current')
voipH248LineConfVBDProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 7, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipH248LineConfVBDProfile.setStatus('current')
voipPortH248TerminationTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 8), )
if mibBuilder.loadTexts: voipPortH248TerminationTable.setStatus('current')
voipPortH248TerminationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: voipPortH248TerminationEntry.setStatus('current')
voipPortH248TermName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 8, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipPortH248TermName.setStatus('current')
voipPortGainTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 6), )
if mibBuilder.loadTexts: voipPortGainTable.setStatus('current')
voipPortGainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: voipPortGainEntry.setStatus('current')
voipPortTXGain = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 6, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipPortTXGain.setStatus('current')
voipPortRXGain = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 13, 6, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipPortRXGain.setStatus('current')
snrMgnTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 15, 1), )
if mibBuilder.loadTexts: snrMgnTable.setStatus('current')
snrMgnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 15, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: snrMgnEntry.setStatus('current')
snrMgnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("profile", 0), ("line", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snrMgnMode.setStatus('current')
snrMgnUcTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('tenth dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: snrMgnUcTarget.setStatus('current')
snrMgnUcMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('tenth dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: snrMgnUcMax.setStatus('current')
snrMgnUcMin = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 15, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('tenth dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: snrMgnUcMin.setStatus('current')
snrMgnUcDownshift = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 15, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('tenth dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: snrMgnUcDownshift.setStatus('current')
snrMgnUcUpshift = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 15, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('tenth dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: snrMgnUcUpshift.setStatus('current')
snrMgnUrTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 15, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('tenth dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: snrMgnUrTarget.setStatus('current')
snrMgnUrMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 15, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('tenth dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: snrMgnUrMax.setStatus('current')
snrMgnUrMin = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 15, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('tenth dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: snrMgnUrMin.setStatus('current')
snrMgnUrDownshift = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 15, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('tenth dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: snrMgnUrDownshift.setStatus('current')
snrMgnUrUpshift = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 15, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 310))).setUnits('tenth dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: snrMgnUrUpshift.setStatus('current')
dslRateTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 16, 1), )
if mibBuilder.loadTexts: dslRateTable.setStatus('current')
dslRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 16, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dslRateEntry.setStatus('current')
dslRateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("profile", 0), ("line", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dslRateMode.setStatus('current')
dslRateLatencyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("interleave", 1), ("fast", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dslRateLatencyMode.setStatus('current')
dslRateXtucMaxInterleaveDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('milli-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dslRateXtucMaxInterleaveDelay.setStatus('current')
dslRateXtucMaxTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 16, 1, 1, 4), Unsigned32()).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dslRateXtucMaxTxRate.setStatus('current')
dslRateXtucMinTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 16, 1, 1, 5), Unsigned32()).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dslRateXtucMinTxRate.setStatus('current')
dslRateXturMaxInterleaveDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 16, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('milli-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dslRateXturMaxInterleaveDelay.setStatus('current')
dslRateXturMaxTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 16, 1, 1, 7), Unsigned32()).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dslRateXturMaxTxRate.setStatus('current')
dslRateXturMinTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 8, 16, 1, 1, 8), Unsigned32()).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dslRateXturMinTxRate.setStatus('current')
voipProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7))
sipProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1))
maxNumOfSipProfiles = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNumOfSipProfiles.setStatus('current')
sipProfileTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 2), )
if mibBuilder.loadTexts: sipProfileTable.setStatus('current')
sipProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 2, 1), ).setIndexNames((1, "E5-111-MIB", "sipProfileName"))
if mibBuilder.loadTexts: sipProfileEntry.setStatus('current')
sipProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipProfileName.setStatus('current')
sipProfileSipSvr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 2, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipProfileSipSvr.setStatus('current')
sipProfileRegSvr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 2, 1, 3), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipProfileRegSvr.setStatus('current')
sipProfileProxySvr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 2, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipProfileProxySvr.setStatus('current')
sipProfileSipPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1025, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipProfileSipPort.setStatus('current')
sipProfileRegSvrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1025, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipProfileRegSvrPort.setStatus('current')
sipProfileProxySvrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1025, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipProfileProxySvrPort.setStatus('current')
sipProfileUriType = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("useSipUri", 1), ("useTelUri", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipProfileUriType.setStatus('current')
sipProfilePbit = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipProfilePbit.setStatus('current')
sipProfileDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipProfileDscp.setStatus('current')
sipProfileKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipProfileKeepAlive.setStatus('current')
sipProfileSe = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(90, 65535))).setUnits('second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipProfileSe.setStatus('current')
sipProfilePrack = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipProfilePrack.setStatus('current')
sipProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 2, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipProfileRowStatus.setStatus('current')
sipProfileRegExpire = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(120, 2073600))).setUnits('second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipProfileRegExpire.setStatus('current')
maxNumOfSipCallSvcProfiles = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNumOfSipCallSvcProfiles.setStatus('current')
sipCallSvcProfileTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 4), )
if mibBuilder.loadTexts: sipCallSvcProfileTable.setStatus('current')
sipCallSvcProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 4, 1), ).setIndexNames((1, "E5-111-MIB", "sipCallSvcProfileName"))
if mibBuilder.loadTexts: sipCallSvcProfileEntry.setStatus('current')
sipCallSvcProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipCallSvcProfileName.setStatus('current')
sipCallSvcProfilePasswdOn = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipCallSvcProfilePasswdOn.setStatus('current')
sipCallSvcProfilePasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 4, 1, 3), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipCallSvcProfilePasswd.setStatus('current')
sipCallSvcProfileNumberPlanOn = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipCallSvcProfileNumberPlanOn.setStatus('current')
sipCallSvcProfileNumberPlanCc = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 4, 1, 5), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipCallSvcProfileNumberPlanCc.setStatus('current')
sipCallSvcProfileNumberPlanNdc = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 4, 1, 6), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipCallSvcProfileNumberPlanNdc.setStatus('current')
sipCallSvcProfileNumberPlanTable = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 4, 1, 7), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipCallSvcProfileNumberPlanTable.setStatus('current')
sipCallSvcProfileStateMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 4, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipCallSvcProfileStateMask.setStatus('current')
sipCallSvcProfileDtmf = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bypass", 1), ("rfc2833", 2), ("rfc2833like", 3), ("sipinfo", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipCallSvcProfileDtmf.setStatus('current')
sipCallSvcProfileFax = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("g711", 1), ("t38", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipCallSvcProfileFax.setStatus('current')
sipCallSvcProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 4, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipCallSvcProfileRowStatus.setStatus('current')
sipCallSvcProfileFlashType = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("invite", 1), ("rfc2833", 2), ("rfc2833like", 3), ("sipinfo-1", 4), ("sipinfo-2", 5), ("sipinfo-3", 6), ("sipinfo-4", 7), ("sipinfo-5", 8), ("sipinfo-6", 9), ("bypass", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipCallSvcProfileFlashType.setStatus('current')
sipCallSvcProfileFlashInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 4, 1, 13), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipCallSvcProfileFlashInfo.setStatus('current')
sipCallSvcProfileSoftSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("metaswitch", 1), ("nortel", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sipCallSvcProfileSoftSwitchType.setStatus('current')
maxNumOfDspProfiles = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNumOfDspProfiles.setStatus('current')
dspProfileTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 3), )
if mibBuilder.loadTexts: dspProfileTable.setStatus('current')
dspProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 3, 1), ).setIndexNames((1, "E5-111-MIB", "dspProfileName"))
if mibBuilder.loadTexts: dspProfileEntry.setStatus('current')
dspProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dspProfileName.setStatus('current')
dspProfileCodec = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 3, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dspProfileCodec.setStatus('current')
dspProfilePlayBufferMinDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 500))).setUnits('millisecond').setMaxAccess("readcreate")
if mibBuilder.loadTexts: dspProfilePlayBufferMinDelay.setStatus('current')
dspProfilePlayBufferMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 500))).setUnits('millisecond').setMaxAccess("readcreate")
if mibBuilder.loadTexts: dspProfilePlayBufferMaxDelay.setStatus('current')
dspProfileEchoTail = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("echotail8", 1), ("echotail16", 2), ("echotail32", 3), ("echotail128", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dspProfileEchoTail.setStatus('current')
dspProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dspProfileRowStatus.setStatus('current')
dspProfileG711Vpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("g711x10ms", 1), ("g711x20ms", 2), ("g711x30ms", 3), ("g711x40ms", 4)))).setUnits('millisecond').setMaxAccess("readcreate")
if mibBuilder.loadTexts: dspProfileG711Vpi.setStatus('current')
dspProfileG723Vpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("g723x30ms", 1), ("g723x60ms", 2)))).setUnits('millisecond').setMaxAccess("readcreate")
if mibBuilder.loadTexts: dspProfileG723Vpi.setStatus('current')
dspProfileG726Vpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("g726x10ms", 1), ("g726x20ms", 2), ("g726x30ms", 3), ("g726x40ms", 4)))).setUnits('millisecond').setMaxAccess("readcreate")
if mibBuilder.loadTexts: dspProfileG726Vpi.setStatus('current')
dspProfileG729Vpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("g729x10ms", 1), ("g729x20ms", 2), ("g729x30ms", 3), ("g729x40ms", 4), ("g729x50ms", 5), ("g729x60ms", 6)))).setUnits('millisecond').setMaxAccess("readcreate")
if mibBuilder.loadTexts: dspProfileG729Vpi.setStatus('current')
h248Profile = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4))
maxNumOfH248Profiles = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNumOfH248Profiles.setStatus('current')
h248ProfileTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2), )
if mibBuilder.loadTexts: h248ProfileTable.setStatus('current')
h248ProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1), ).setIndexNames((1, "E5-111-MIB", "h248ProfileName"))
if mibBuilder.loadTexts: h248ProfileEntry.setStatus('current')
h248ProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h248ProfileName.setStatus('current')
h248ProfileMgcSvr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h248ProfileMgcSvr.setStatus('current')
h248ProfileMgcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1025, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h248ProfileMgcPort.setStatus('current')
h248ProfileMgc2On = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h248ProfileMgc2On.setStatus('current')
h248ProfileMgc2Svr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1, 5), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h248ProfileMgc2Svr.setStatus('current')
h248ProfileMgc2Port = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1025, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h248ProfileMgc2Port.setStatus('current')
h248ProfileTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("udp", 1), ("tcp", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h248ProfileTransport.setStatus('current')
h248ProfileEncode = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("longtext", 1), ("shorttext", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h248ProfileEncode.setStatus('current')
h248ProfilePbit = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h248ProfilePbit.setStatus('current')
h248ProfileDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h248ProfileDscp.setStatus('current')
h248ProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h248ProfileRowStatus.setStatus('current')
h248ProfileVbd = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h248ProfileVbd.setStatus('current')
h248ProfileEphemeralPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h248ProfileEphemeralPrefix.setStatus('current')
h248ProfileSoftswitch = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("metaswitch", 1), ("nortelCs1500", 2), ("nortelCs2000", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h248ProfileSoftswitch.setStatus('current')
h248ProfileForceVer = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h248ProfileForceVer.setStatus('current')
h248ProfileStartRTPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4000, 64000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h248ProfileStartRTPPort.setStatus('current')
h248ProfileEndRTPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5000, 65000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h248ProfileEndRTPPort.setStatus('current')
h248ProfileEphemeralStartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1, 19), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h248ProfileEphemeralStartNumber.setStatus('current')
h248ProfileEphemeralSuffixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h248ProfileEphemeralSuffixLength.setStatus('current')
h248ProfilePhysicalPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h248ProfilePhysicalPrefix.setStatus('current')
h248ProfilePhysicalStartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1, 22), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h248ProfilePhysicalStartNumber.setStatus('current')
h248ProfilePhysicalSuffixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 9, 7, 4, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h248ProfilePhysicalSuffixLength.setStatus('current')
dscp = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 10))
vlanIsolation = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 12))
enetMtu = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 13))
dhcp = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51))
macfilter = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53))
dhcpSnoop = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 55))
acl = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56))
pppoeAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 57))
macff = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 60))
dscpMappingTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 10, 1), )
if mibBuilder.loadTexts: dscpMappingTable.setStatus('current')
dscpMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 10, 1, 1), ).setIndexNames((0, "E5-111-MIB", "dscpSrcCodePoint"))
if mibBuilder.loadTexts: dscpMappingEntry.setStatus('current')
dscpSrcCodePoint = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dscpSrcCodePoint.setStatus('current')
dscpMapPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dscpMapPriority.setStatus('current')
dscpPortTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 10, 2), )
if mibBuilder.loadTexts: dscpPortTable.setStatus('current')
dscpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 10, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dscpPortEntry.setStatus('current')
dscpStatusEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dscpStatusEnable.setStatus('current')
vlanIsolationTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 12, 1), )
if mibBuilder.loadTexts: vlanIsolationTable.setStatus('current')
vlanIsolationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 12, 1, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: vlanIsolationEntry.setStatus('current')
vlanIsolationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 12, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanIsolationRowStatus.setStatus('current')
enetMtuEntry = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 13, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enetMtuEntry.setStatus('current')
dhcpRelay82Table = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 2), )
if mibBuilder.loadTexts: dhcpRelay82Table.setStatus('current')
dhcpRelay82Entry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 2, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: dhcpRelay82Entry.setStatus('current')
dhcpRelay82PrimaryServer = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelay82PrimaryServer.setStatus('current')
dhcpRelay82SecondaryServer = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelay82SecondaryServer.setStatus('current')
dhcpRelay82ActiveServer = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("third", 3), ("fourth", 4), ("fifth", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRelay82ActiveServer.setStatus('current')
dhcpRelay82Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRelay82Enable.setStatus('current')
dhcpRelay82Info = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRelay82Info.setStatus('current')
dhcpRelay82RelayMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("all", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRelay82RelayMode.setStatus('current')
dhcpRelay82Suboption2Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRelay82Suboption2Enable.setStatus('current')
dhcpRelay82Suboption2Info = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 2, 1, 9), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRelay82Suboption2Info.setStatus('current')
dhcpRelay82EntryEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("all", 2), ("disable", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRelay82EntryEnable.setStatus('current')
dhcpRelay82EntryOptionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("private", 1), ("tr101", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpRelay82EntryOptionMode.setStatus('current')
dhcpRelay82VlanIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 2, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelay82VlanIp.setStatus('current')
dhcpRelay82VlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelay82VlanMask.setStatus('current')
dhcpRelay82VlanGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 2, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelay82VlanGateway.setStatus('current')
dhcpRelay82ThirdServer = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 2, 1, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelay82ThirdServer.setStatus('current')
dhcpRelay82FourthServer = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 2, 1, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelay82FourthServer.setStatus('current')
dhcpRelay82FifthServer = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 2, 1, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelay82FifthServer.setStatus('current')
dhcpRelay82ServerVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelay82ServerVid.setStatus('current')
dhcpRelayTest = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 8))
dhcpRelayTestVid = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 8, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayTestVid.setStatus('current')
dhcpRelayTestIp = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 8, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayTestIp.setStatus('current')
dhcpRelayTestOps = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 8, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayTestOps.setStatus('current')
dhcpRelayTestStatus = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 8, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRelayTestStatus.setStatus('current')
dhcpRelayArp = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 9))
dhcpRelayArpShowTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 9, 1), )
if mibBuilder.loadTexts: dhcpRelayArpShowTable.setStatus('current')
dhcpRelayArpShowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 9, 1, 1), ).setIndexNames((0, "E5-111-MIB", "dhcpRelayArpShowVid"), (0, "E5-111-MIB", "dhcpRelayArpShowIp"))
if mibBuilder.loadTexts: dhcpRelayArpShowEntry.setStatus('current')
dhcpRelayArpShowVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRelayArpShowVid.setStatus('current')
dhcpRelayArpShowIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 9, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRelayArpShowIp.setStatus('current')
dhcpRelayArpShowMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 9, 1, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRelayArpShowMac.setStatus('current')
dhcpRelayArpFlushOps = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 51, 9, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayArpFlushOps.setStatus('current')
macFilterPortTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 1), )
if mibBuilder.loadTexts: macFilterPortTable.setStatus('current')
macFilterPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: macFilterPortEntry.setStatus('current')
macFilterPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("enableMacFilter", 1), ("enableMacCount", 2), ("disable", 4), ("enableMacFilterAndMacCount", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macFilterPortEnable.setStatus('current')
macFilterPortMacCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macFilterPortMacCount.setStatus('current')
macFilterPortFilterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accept", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macFilterPortFilterMode.setStatus('current')
maxNumOfMacFiltersInSystem = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNumOfMacFiltersInSystem.setStatus('current')
maxNumOfMacFiltersPerPort = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNumOfMacFiltersPerPort.setStatus('current')
currNumOfMacFiltersInSystem = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currNumOfMacFiltersInSystem.setStatus('current')
macFilterTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 5), )
if mibBuilder.loadTexts: macFilterTable.setStatus('current')
macFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-MIB", "macFilterAddr"))
if mibBuilder.loadTexts: macFilterEntry.setStatus('current')
macFilterAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 5, 1, 1), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFilterAddr.setStatus('current')
macFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macFilterRowStatus.setStatus('current')
macfilterBatchSet = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 6))
macfilterTarget = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 6, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macfilterTarget.setStatus('current')
macfilterOps = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macfilterOps.setStatus('current')
macFilterMacCountForBatchSet = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macFilterMacCountForBatchSet.setStatus('current')
ouiFilterTableOld = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 7), )
if mibBuilder.loadTexts: ouiFilterTableOld.setStatus('current')
ouiFilterEntryOld = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-MIB", "ouiFilterAddrOld"))
if mibBuilder.loadTexts: ouiFilterEntryOld.setStatus('current')
ouiFilterAddrOld = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 7, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ouiFilterAddrOld.setStatus('current')
ouiFilterRowStatusOld = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ouiFilterRowStatusOld.setStatus('current')
maxNumOfOuiFiltersPerPort = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNumOfOuiFiltersPerPort.setStatus('current')
ouiFilterPortTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 9), )
if mibBuilder.loadTexts: ouiFilterPortTable.setStatus('current')
ouiFilterPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ouiFilterPortEntry.setStatus('current')
ouiFilterPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enableOuiFilter", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ouiFilterPortEnable.setStatus('current')
ouiFilterPortFilterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accept", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ouiFilterPortFilterMode.setStatus('current')
maxNumOfOuiFiltersInSystem = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNumOfOuiFiltersInSystem.setStatus('current')
maxNumOfOuiFiltersPerVlan = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNumOfOuiFiltersPerVlan.setStatus('current')
ouiFilterTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 12), )
if mibBuilder.loadTexts: ouiFilterTable.setStatus('current')
ouiFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 12, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"), (0, "E5-111-MIB", "ouiFilterAddr"))
if mibBuilder.loadTexts: ouiFilterEntry.setStatus('current')
ouiFilterAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 12, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ouiFilterAddr.setStatus('current')
ouiFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 12, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ouiFilterRowStatus.setStatus('current')
ouiFilterVlanTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 13), )
if mibBuilder.loadTexts: ouiFilterVlanTable.setStatus('current')
ouiFilterVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 13, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: ouiFilterVlanEntry.setStatus('current')
ouiFilterVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enableOuiFilter", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ouiFilterVlanEnable.setStatus('current')
ouiFilterVlanFilterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 53, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accept", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ouiFilterVlanFilterMode.setStatus('current')
dhcpSnoopPortTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 55, 1), )
if mibBuilder.loadTexts: dhcpSnoopPortTable.setStatus('current')
dhcpSnoopPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 55, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dhcpSnoopPortEntry.setStatus('current')
dhcpSnoopEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 55, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopEnable.setStatus('current')
dhcpSnoopMaxcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 55, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopMaxcnt.setStatus('current')
dhcpSnoopSmacverifyEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 55, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopSmacverifyEnable.setStatus('current')
dhcpSnoopTarget = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 55, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopTarget.setStatus('current')
dhcpSnoopOps = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 55, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopOps.setStatus('current')
dhcpStaticTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 55, 4), )
if mibBuilder.loadTexts: dhcpStaticTable.setStatus('current')
dhcpStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 55, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-MIB", "dhcpStaticIpAddr"))
if mibBuilder.loadTexts: dhcpStaticEntry.setStatus('current')
dhcpStaticIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 55, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpStaticIpAddr.setStatus('current')
dhcpStaticRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 55, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpStaticRowStatus.setStatus('current')
maxNumOfDhcpStaticIp = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 55, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNumOfDhcpStaticIp.setStatus('current')
dhcpSnoopMaxcntMode = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 55, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("replace", 1), ("drop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopMaxcntMode.setStatus('current')
aclSetTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 1), )
if mibBuilder.loadTexts: aclSetTable.setStatus('current')
aclSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-MIB", "aclSetVpi"), (0, "E5-111-MIB", "aclSetVci"), (0, "E5-111-MIB", "aclSetProfileName"))
if mibBuilder.loadTexts: aclSetEntry.setStatus('current')
aclSetVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclSetVpi.setStatus('current')
aclSetVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclSetVci.setStatus('current')
aclSetProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclSetProfileName.setStatus('current')
aclSetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclSetRowStatus.setStatus('current')
aclProfileTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2), )
if mibBuilder.loadTexts: aclProfileTable.setStatus('current')
aclProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1), ).setIndexNames((0, "E5-111-MIB", "aclProfileRuleName"))
if mibBuilder.loadTexts: aclProfileEntry.setStatus('current')
aclProfileRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclProfileRuleName.setStatus('current')
aclProfileRuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileRuleNumber.setStatus('current')
aclProfileActionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileActionNumber.setStatus('current')
aclProfileRuleParamMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileRuleParamMask.setStatus('current')
aclProfileRuleEtype = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileRuleEtype.setStatus('current')
aclProfileRuleVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileRuleVid.setStatus('current')
aclProfileRuleSmac = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 7), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileRuleSmac.setStatus('current')
aclProfileRuleDmac = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 8), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileRuleDmac.setStatus('current')
aclProfileRulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileRulePriority.setStatus('current')
aclProfileRuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileRuleProtocol.setStatus('current')
aclProfileRuleSrcIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileRuleSrcIP.setStatus('current')
aclProfileRuleSrcIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileRuleSrcIPMask.setStatus('current')
aclProfileRuleDestIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileRuleDestIP.setStatus('current')
aclProfileRuleDestIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileRuleDestIPMask.setStatus('current')
aclProfileRuleStartTos = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileRuleStartTos.setStatus('current')
aclProfileRuleEndTos = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileRuleEndTos.setStatus('current')
aclProfileRuleSrcStartPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileRuleSrcStartPort.setStatus('current')
aclProfileRuleSrcEndPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileRuleSrcEndPort.setStatus('current')
aclProfileRuleDestStartPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileRuleDestStartPort.setStatus('current')
aclProfileRuleDestEndPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileRuleDestEndPort.setStatus('current')
aclProfileActionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileActionRate.setStatus('current')
aclProfileActionrvlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileActionrvlan.setStatus('current')
aclProfileActionrpri = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileActionrpri.setStatus('current')
aclProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 56, 2, 1, 24), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclProfileRowStatus.setStatus('current')
pppoeAgentTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 57, 1), )
if mibBuilder.loadTexts: pppoeAgentTable.setStatus('current')
pppoeAgentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 57, 1, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: pppoeAgentEntry.setStatus('current')
pppoeAgentEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 57, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppoeAgentEnable.setStatus('current')
pppoeAgentInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 57, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppoeAgentInfo.setStatus('current')
pppoeAgentRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 57, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppoeAgentRowStatus.setStatus('current')
pppoeAgentOptionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 57, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("private", 1), ("tr101", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pppoeAgentOptionMode.setStatus('current')
maxNumOfPppoeDhcpRelay82Conf = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 57, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNumOfPppoeDhcpRelay82Conf.setStatus('current')
macFfTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 60, 1), )
if mibBuilder.loadTexts: macFfTable.setStatus('current')
macFfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 60, 1, 1), ).setIndexNames((0, "E5-111-MIB", "macFfIndex"))
if mibBuilder.loadTexts: macFfEntry.setStatus('current')
macFfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 60, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFfIndex.setStatus('current')
macFfVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 60, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macFfVid.setStatus('current')
macFfArIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 60, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macFfArIP.setStatus('current')
macFfSrcIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 60, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macFfSrcIP.setStatus('current')
macFfSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 60, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macFfSrcMask.setStatus('current')
macFfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 60, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macFfRowStatus.setStatus('current')
macFfArpFlush = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 60, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macFfArpFlush.setStatus('current')
maxNumOfMacFfVlanInSystem = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 60, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNumOfMacFfVlanInSystem.setStatus('current')
macFfVlanTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 60, 5), )
if mibBuilder.loadTexts: macFfVlanTable.setStatus('current')
macFfVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 60, 5, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: macFfVlanEntry.setStatus('current')
macFfVlanRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 60, 5, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macFfVlanRowstatus.setStatus('current')
macFfVlanUnknownUnicast = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 60, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flood", 1), ("drop", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macFfVlanUnknownUnicast.setStatus('current')
macFfStaticIPTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 60, 6), )
if mibBuilder.loadTexts: macFfStaticIPTable.setStatus('current')
macFfStaticIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 60, 6, 1), ).setIndexNames((0, "E5-111-MIB", "macFfStaticIPPort"), (0, "E5-111-MIB", "macFfStaticIPVid"), (0, "E5-111-MIB", "macFfstaticIP"), (0, "E5-111-MIB", "macFfStaticIPMask"))
if mibBuilder.loadTexts: macFfStaticIPEntry.setStatus('current')
macFfStaticIPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 60, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFfStaticIPPort.setStatus('current')
macFfStaticIPVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 60, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFfStaticIPVid.setStatus('current')
macFfstaticIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 60, 6, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFfstaticIP.setStatus('current')
macFfStaticIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 60, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFfStaticIPMask.setStatus('current')
macFfStaticIPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 10, 60, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macFfStaticIPRowStatus.setStatus('current')
accessCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 5))
extAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 8))
user = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 9))
usbCastCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 10))
dsbCastCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 11))
stdioTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stdioTimeout.setStatus('current')
isConfigChanged = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isConfigChanged.setStatus('current')
fwUpgrade = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 14))
delayedReboot = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 15))
securedClientTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 5, 2), )
if mibBuilder.loadTexts: securedClientTable.setStatus('current')
securedClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 5, 2, 1), ).setIndexNames((0, "E5-111-MIB", "securedClientIndex"))
if mibBuilder.loadTexts: securedClientEntry.setStatus('current')
securedClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securedClientIndex.setStatus('current')
securedClientStartIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 5, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securedClientStartIp.setStatus('current')
securedClientEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 5, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securedClientEndIp.setStatus('current')
securedClientService = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 5, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securedClientService.setStatus('current')
securedClientEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securedClientEnable.setStatus('current')
extAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 8, 1), )
if mibBuilder.loadTexts: extAlarmTable.setStatus('current')
extAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 8, 1, 1), ).setIndexNames((0, "E5-111-MIB", "extAlarmIndex"))
if mibBuilder.loadTexts: extAlarmEntry.setStatus('current')
extAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extAlarmIndex.setStatus('current')
extAlarmname = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 8, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extAlarmname.setStatus('current')
extAlarmstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 8, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extAlarmstatus.setStatus('current')
extAlarmTriggeredMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("closeAlarm", 1), ("openAlarm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extAlarmTriggeredMode.setStatus('current')
userAuthMode = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("local", 1), ("radius", 2), ("localThenRadius", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userAuthMode.setStatus('current')
userAuthServerIp = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 9, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userAuthServerIp.setStatus('current')
userAuthServerPort = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 9, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userAuthServerPort.setStatus('current')
userAuthServerSecret = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 9, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userAuthServerSecret.setStatus('current')
userTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 9, 5), )
if mibBuilder.loadTexts: userTable.setStatus('current')
userEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 9, 5, 1), ).setIndexNames((0, "E5-111-MIB", "userName"))
if mibBuilder.loadTexts: userEntry.setStatus('current')
userName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 9, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userName.setStatus('current')
userPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 9, 5, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userPassword.setStatus('current')
userPriviledge = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 9, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("high", 1), ("middle", 2), ("low", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userPriviledge.setStatus('current')
userRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 9, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userRowStatus.setStatus('current')
userAuthDefaultPriviledge = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("high", 1), ("middle", 2), ("low", 3), ("deny", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userAuthDefaultPriviledge.setStatus('current')
usBcastCtrlEnable = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usBcastCtrlEnable.setStatus('current')
usBcastCtrlRate = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 10, 2), Integer32()).setUnits('Kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: usBcastCtrlRate.setStatus('current')
dsBcastCtrlEnable = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsBcastCtrlEnable.setStatus('current')
dsBcastCtrlRate = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 11, 2), Integer32()).setUnits('Kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsBcastCtrlRate.setStatus('current')
fwUpgradeVersion = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 14, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fwUpgradeVersion.setStatus('current')
fwUpgradeCheck = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 14, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fwUpgradeCheck.setStatus('current')
fwUpgradeStatus = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 14, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fwUpgradeStatus.setStatus('current')
delayedRebootTimer = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 15, 1), Integer32()).setUnits('sec').setMaxAccess("readwrite")
if mibBuilder.loadTexts: delayedRebootTimer.setStatus('current')
delayedRebootRemainingTime = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 15, 2), Integer32()).setUnits('sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: delayedRebootRemainingTime.setStatus('current')
delayedRebootCancel = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 11, 15, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("cancel", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: delayedRebootCancel.setStatus('current')
dhcpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11))
paepvcStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12))
macStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 13))
ipbpvcStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14))
voipStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15))
macffStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 16))
enetStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 17))
adslStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 18))
igmpQueryCntTotal = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpQueryCntTotal.setStatus('current')
igmpReportCntTotal = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpReportCntTotal.setStatus('current')
igmpLeaveCntTotal = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpLeaveCntTotal.setStatus('current')
igmpNumOfActiveGroups = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpNumOfActiveGroups.setStatus('current')
igmpGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 5), )
if mibBuilder.loadTexts: igmpGroupTable.setStatus('current')
igmpGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 5, 1), ).setIndexNames((0, "E5-111-MIB", "igmpGroupIp"))
if mibBuilder.loadTexts: igmpGroupEntry.setStatus('current')
igmpGroupIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupIp.setStatus('current')
igmpGroupvid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupvid.setStatus('current')
igmpGroupnumberOfMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupnumberOfMembers.setStatus('current')
igmpGroupMemberPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 5, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupMemberPorts.setStatus('current')
igmpGroupPortTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 6), )
if mibBuilder.loadTexts: igmpGroupPortTable.setStatus('current')
igmpGroupPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-MIB", "igmpGroupPortIp"), (0, "E5-111-MIB", "igmpGroupPortvid"))
if mibBuilder.loadTexts: igmpGroupPortEntry.setStatus('current')
igmpGroupPortIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupPortIp.setStatus('current')
igmpGroupPortvid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupPortvid.setStatus('current')
igmpGroupV2Table = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 7), )
if mibBuilder.loadTexts: igmpGroupV2Table.setStatus('current')
igmpGroupV2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 7, 1), ).setIndexNames((0, "E5-111-MIB", "igmpGroupV2Vid"), (0, "E5-111-MIB", "igmpGroupV2Ip"))
if mibBuilder.loadTexts: igmpGroupV2Entry.setStatus('current')
igmpGroupV2Vid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 7, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupV2Vid.setStatus('current')
igmpGroupV2Ip = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 7, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupV2Ip.setStatus('current')
igmpGroupV2NumOfMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupV2NumOfMembers.setStatus('current')
igmpGroupV2MemberPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 7, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupV2MemberPorts.setStatus('current')
igmpGroupPortV2Table = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 8), )
if mibBuilder.loadTexts: igmpGroupPortV2Table.setStatus('current')
igmpGroupPortV2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-MIB", "igmpGroupPortV2Vid"), (0, "E5-111-MIB", "igmpGroupPortV2Ip"), (0, "E5-111-MIB", "igmpGroupPortV2SourceIp"))
if mibBuilder.loadTexts: igmpGroupPortV2Entry.setStatus('current')
igmpGroupPortV2Vid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 8, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupPortV2Vid.setStatus('current')
igmpGroupPortV2Ip = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 8, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupPortV2Ip.setStatus('current')
igmpGroupPortV2SourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 8, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpGroupPortV2SourceIp.setStatus('current')
igmpPortCtrlPduTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 9), )
if mibBuilder.loadTexts: igmpPortCtrlPduTable.setStatus('current')
igmpPortCtrlPduEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: igmpPortCtrlPduEntry.setStatus('current')
igmpPortCtrlPduQueryCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 9, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpPortCtrlPduQueryCnt.setStatus('current')
igmpPortCtrlPduReportCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 9, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpPortCtrlPduReportCnt.setStatus('current')
igmpPortCtrlPduLeaveCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpPortCtrlPduLeaveCnt.setStatus('current')
igmpPortNumOfActiveGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpPortNumOfActiveGroups.setStatus('current')
igmpPortCtrlAuditLeaveCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpPortCtrlAuditLeaveCnt.setStatus('current')
dhcpSnoopIpTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11, 1), )
if mibBuilder.loadTexts: dhcpSnoopIpTable.setStatus('current')
dhcpSnoopIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-MIB", "dhcpSnoopIp"))
if mibBuilder.loadTexts: dhcpSnoopIpEntry.setStatus('current')
dhcpSnoopIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopIp.setStatus('current')
dhcpSnoopMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11, 1, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopMac.setStatus('current')
dhcpSnoopVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11, 1, 1, 3), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopVid.setStatus('current')
dhcpSnoopMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopMask.setStatus('current')
dhcpSnoopGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopGateway.setStatus('current')
dhcpSnoopRouteMap = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopRouteMap.setStatus('current')
dhcpSnoopCounterTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11, 2), )
if mibBuilder.loadTexts: dhcpSnoopCounterTable.setStatus('current')
dhcpSnoopCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dhcpSnoopCounterEntry.setStatus('current')
dhcpDiscovery = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpDiscovery.setStatus('current')
dhcpOffer = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpOffer.setStatus('current')
dhcpRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRequest.setStatus('current')
dhcpAck = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpAck.setStatus('current')
dhcpAckBySnoopFull = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpAckBySnoopFull.setStatus('current')
dhcpRouteTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11, 3), )
if mibBuilder.loadTexts: dhcpRouteTable.setStatus('current')
dhcpRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11, 3, 1), ).setIndexNames((0, "E5-111-MIB", "dhcpRouteIndex"))
if mibBuilder.loadTexts: dhcpRouteEntry.setStatus('current')
dhcpRouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRouteIndex.setStatus('current')
dhcpRouteVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11, 3, 1, 2), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRouteVid.setStatus('current')
dhcpRouteIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRouteIP.setStatus('current')
dhcpRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRouteMask.setStatus('current')
dhcpRouteGwIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 11, 3, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpRouteGwIP.setStatus('current')
paepvcSessionTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 1), )
if mibBuilder.loadTexts: paepvcSessionTable.setStatus('current')
paepvcSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-MIB", "paepvcSessionVpi"), (0, "E5-111-MIB", "paepvcSessionVci"))
if mibBuilder.loadTexts: paepvcSessionEntry.setStatus('current')
paepvcSessionVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcSessionVpi.setStatus('current')
paepvcSessionVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcSessionVci.setStatus('current')
paepvcSessionState = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("down", 1), ("pppoe", 2), ("ppp", 3), ("up", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcSessionState.setStatus('current')
paepvcSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcSessionId.setStatus('current')
paepvcSessionUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 1, 1, 5), Unsigned32()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcSessionUptime.setStatus('current')
paepvcSessionacname = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcSessionacname.setStatus('current')
paepvcSessionsrvcname = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcSessionsrvcname.setStatus('current')
paepvcCountTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 2), )
if mibBuilder.loadTexts: paepvcCountTable.setStatus('current')
paepvcCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-MIB", "paepvcCountVpi"), (0, "E5-111-MIB", "paepvcCountVci"))
if mibBuilder.loadTexts: paepvcCountEntry.setStatus('current')
paepvcCountVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcCountVpi.setStatus('current')
paepvcCountVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcCountVci.setStatus('current')
paepvcCountPppLcpCfgReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcCountPppLcpCfgReqRx.setStatus('current')
paepvcCountPppLcpEchoReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcCountPppLcpEchoReqRx.setStatus('current')
paepvcCountPppLcpEchoReplyRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcCountPppLcpEchoReplyRx.setStatus('current')
paepvcCountPadiTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcCountPadiTx.setStatus('current')
paepvcCountPadoRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcCountPadoRx.setStatus('current')
paepvcCountPadrTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcCountPadrTx.setStatus('current')
paepvcCountPadsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcCountPadsRx.setStatus('current')
paepvcCountPadtTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcCountPadtTx.setStatus('current')
paepvcCountPadtRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcCountPadtRx.setStatus('current')
paepvcCountSrvcnameErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcCountSrvcnameErrRx.setStatus('current')
paepvcCountAcSystemErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 2, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcCountAcSystemErrRx.setStatus('current')
paepvcCountGenericErrTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 2, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcCountGenericErrTx.setStatus('current')
paepvcCountGenericErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 12, 2, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: paepvcCountGenericErrRx.setStatus('current')
macDisplayTarget = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 13, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macDisplayTarget.setStatus('current')
macTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 13, 2), )
if mibBuilder.loadTexts: macTable.setStatus('current')
macEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 13, 2, 1), ).setIndexNames((0, "E5-111-MIB", "macAddress"))
if mibBuilder.loadTexts: macEntry.setStatus('current')
macAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 13, 2, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macAddress.setStatus('current')
macPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 13, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macPort.setStatus('current')
macStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("learned", 3), ("self", 4), ("mgmt", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: macStatus.setStatus('current')
arpproxyTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 1), )
if mibBuilder.loadTexts: arpproxyTable.setStatus('current')
arpproxyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 1, 1), ).setIndexNames((0, "E5-111-MIB", "ipbpvcDomainName"), (0, "E5-111-MIB", "arpproxyIp"))
if mibBuilder.loadTexts: arpproxyEntry.setStatus('current')
arpproxyIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpproxyIp.setStatus('current')
arpproxyMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpproxyMac.setStatus('current')
arpproxyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpproxyIfIndex.setStatus('current')
arpproxyVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpproxyVpi.setStatus('current')
arpproxyVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpproxyVci.setStatus('current')
arpproxyInterfaceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpproxyInterfaceIp.setStatus('current')
arpproxyInterfaceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpproxyInterfaceMask.setStatus('current')
arpproxyInterfaceVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 1, 1, 8), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpproxyInterfaceVid.setStatus('current')
arpproxyDhcpIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpproxyDhcpIp.setStatus('current')
arpproxyType = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upstream", 1), ("downstream", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpproxyType.setStatus('current')
ipbpvcIfDynamicTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 2), )
if mibBuilder.loadTexts: ipbpvcIfDynamicTable.setStatus('current')
ipbpvcIfDynamicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 2, 1), ).setIndexNames((0, "E5-111-MIB", "ipbpvcDomainName"), (0, "E5-111-MIB", "ipbpvcIfDynamicIp"), (0, "E5-111-MIB", "ipbpvcIfDynamicMask"), (0, "E5-111-MIB", "ipbpvcDomainVlanId"))
if mibBuilder.loadTexts: ipbpvcIfDynamicEntry.setStatus('current')
ipbpvcIfDynamicIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcIfDynamicIp.setStatus('current')
ipbpvcIfDynamicMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcIfDynamicMask.setStatus('current')
ipbpvcIfDynamicIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcIfDynamicIfIndex.setStatus('current')
ipbpvcIfDynamicVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcIfDynamicVpi.setStatus('current')
ipbpvcIfDynamicVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcIfDynamicVci.setStatus('current')
ipbpvcRouteDynamicTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 3), )
if mibBuilder.loadTexts: ipbpvcRouteDynamicTable.setStatus('current')
ipbpvcRouteDynamicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 3, 1), ).setIndexNames((0, "E5-111-MIB", "ipbpvcDomainName"), (0, "E5-111-MIB", "ipbpvcRouteDynamicType"), (0, "E5-111-MIB", "ipbpvcRouteDynamicIp"), (0, "E5-111-MIB", "ipbpvcRouteDynamicMask"))
if mibBuilder.loadTexts: ipbpvcRouteDynamicEntry.setStatus('current')
ipbpvcRouteDynamicType = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upstream", 1), ("downstream", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcRouteDynamicType.setStatus('current')
ipbpvcRouteDynamicIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcRouteDynamicIp.setStatus('current')
ipbpvcRouteDynamicMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcRouteDynamicMask.setStatus('current')
ipbpvcRouteDynamicNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcRouteDynamicNextHop.setStatus('current')
ipbpvcRouteDynamicMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcRouteDynamicMetric.setStatus('current')
ipbpvcRouteDynamicPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 14, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipbpvcRouteDynamicPriority.setStatus('current')
enetSfpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 17, 2), )
if mibBuilder.loadTexts: enetSfpInfoTable.setStatus('current')
enetSfpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 17, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: enetSfpInfoEntry.setStatus('current')
enetSfpInfoTxpower = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 17, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('10^-4 mW').setMaxAccess("readonly")
if mibBuilder.loadTexts: enetSfpInfoTxpower.setStatus('current')
enetSfpInfoRxpower = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 17, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('10^-4 C').setMaxAccess("readonly")
if mibBuilder.loadTexts: enetSfpInfoRxpower.setStatus('current')
enetSfpInfoTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 17, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1280000, 1280000))).setUnits('10^-4 C').setMaxAccess("readonly")
if mibBuilder.loadTexts: enetSfpInfoTemperature.setStatus('current')
enetSfpInfoTxBias = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 17, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 131000))).setUnits('10^-3 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: enetSfpInfoTxBias.setStatus('current')
enetSfpInfoVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 17, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65000))).setUnits('0.1mV').setMaxAccess("readonly")
if mibBuilder.loadTexts: enetSfpInfoVoltage.setStatus('current')
adslPortUtilTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 18, 1), )
if mibBuilder.loadTexts: adslPortUtilTable.setStatus('current')
adslPortUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 18, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: adslPortUtilEntry.setStatus('current')
adslPortUtilTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 18, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslPortUtilTx.setStatus('current')
adslPortUtilRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 18, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslPortUtilRx.setStatus('current')
macFfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 16, 1), )
if mibBuilder.loadTexts: macFfStatsTable.setStatus('current')
macFfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 16, 1, 1), ).setIndexNames((0, "E5-111-MIB", "macFfStatsIndex"))
if mibBuilder.loadTexts: macFfStatsEntry.setStatus('current')
macFfStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 16, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFfStatsIndex.setStatus('current')
macFfStatsVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 16, 1, 1, 2), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFfStatsVid.setStatus('current')
macFfStatsArIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 16, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFfStatsArIP.setStatus('current')
macFfStatsSrcIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 16, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFfStatsSrcIP.setStatus('current')
macFfStatsSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 16, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFfStatsSrcMask.setStatus('current')
macFfArpTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 16, 2), )
if mibBuilder.loadTexts: macFfArpTable.setStatus('current')
macFfArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 16, 2, 1), ).setIndexNames((0, "E5-111-MIB", "macFfArpVid"), (0, "E5-111-MIB", "macFfArpIP"))
if mibBuilder.loadTexts: macFfArpEntry.setStatus('current')
macFfArpVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 16, 2, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFfArpVid.setStatus('current')
macFfArpIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 16, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFfArpIP.setStatus('current')
macFfArpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 16, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFfArpPort.setStatus('current')
macFfArpMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 16, 2, 1, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFfArpMac.setStatus('current')
macFfArpCounterTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 16, 3), )
if mibBuilder.loadTexts: macFfArpCounterTable.setStatus('current')
macFfArpCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 16, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: macFfArpCounterEntry.setStatus('current')
macFfArpCounterRequestTX = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 16, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFfArpCounterRequestTX.setStatus('current')
macFfArpCounterRequestRX = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 16, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFfArpCounterRequestRX.setStatus('current')
macFfArpCounterRequestRXDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 16, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFfArpCounterRequestRXDrop.setStatus('current')
macFfArpCounterReplyTX = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 16, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFfArpCounterReplyTX.setStatus('current')
macFfArpCounterReplyRX = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 16, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFfArpCounterReplyRX.setStatus('current')
macFfArpCounterReplyRXDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 16, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFfArpCounterReplyRXDrop.setStatus('current')
voipLineStatusTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 1), )
if mibBuilder.loadTexts: voipLineStatusTable.setStatus('current')
voipLineStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: voipLineStatusEntry.setStatus('current')
voipLineStatusPhoneStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("disabled", 1), ("onHook", 2), ("offHook", 3), ("ringing", 4), ("powerCutDown", 5), ("testing", 6), ("fault", 7), ("bad", 8), ("uninitialized", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLineStatusPhoneStatus.setStatus('current')
voipLineStatusServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("disabled", 1), ("outOfService", 2), ("idle", 3), ("waitingForDialing", 4), ("dialingOut", 5), ("ringing", 6), ("conversationCaller", 7), ("conversationCallee", 8), ("faxModemCaller", 9), ("faxModemCallee", 10), ("waitingForOnHook", 11), ("dialingTimeout", 12), ("alertingOffHook", 13), ("powerCutDown", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLineStatusServiceStatus.setStatus('current')
voipLineInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 2), )
if mibBuilder.loadTexts: voipLineInfoTable.setStatus('current')
voipLineInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: voipLineInfoEntry.setStatus('current')
voipLineInfoSipLocalUri = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLineInfoSipLocalUri.setStatus('current')
voipLineInfoSipRemoteUri = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLineInfoSipRemoteUri.setStatus('current')
voipLineInfoRtpTxCodecType = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLineInfoRtpTxCodecType.setStatus('current')
voipLineInfoRtpRxCodecType = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLineInfoRtpRxCodecType.setStatus('current')
voipLineInfoRtpTxPt = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLineInfoRtpTxPt.setStatus('current')
voipLineInfoRtpRxPt = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLineInfoRtpRxPt.setStatus('current')
voipLineInfoRtpLocalIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 2, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLineInfoRtpLocalIp.setStatus('current')
voipLineInfoRtpRemoteIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 2, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLineInfoRtpRemoteIp.setStatus('current')
voipLineInfoRtpLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLineInfoRtpLocalPort.setStatus('current')
voipLineInfoRtpRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLineInfoRtpRemotePort.setStatus('current')
voipLineInfoSipLocalUri2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 2, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLineInfoSipLocalUri2.setStatus('current')
voipLineInfoSipRemoteUri2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 2, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLineInfoSipRemoteUri2.setStatus('current')
voipLineInfoRtpTxCodecType2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 2, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLineInfoRtpTxCodecType2.setStatus('current')
voipLineInfoRtpRxCodecType2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 2, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLineInfoRtpRxCodecType2.setStatus('current')
voipLineInfoRtpTxPt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLineInfoRtpTxPt2.setStatus('current')
voipLineInfoRtpRxPt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLineInfoRtpRxPt2.setStatus('current')
voipLineInfoRtpLocalIp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 2, 1, 17), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLineInfoRtpLocalIp2.setStatus('current')
voipLineInfoRtpRemoteIp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 2, 1, 18), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLineInfoRtpRemoteIp2.setStatus('current')
voipLineInfoRtpLocalPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLineInfoRtpLocalPort2.setStatus('current')
voipLineInfoRtpRemotePort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipLineInfoRtpRemotePort2.setStatus('current')
voipH248Status = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 3))
voipH248StatusMgName = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 3, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipH248StatusMgName.setStatus('current')
voipH248StatusMgStatus = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("registering", 2), ("registered", 3), ("unregistering", 4), ("unregistered", 5), ("disconnected", 6), ("disabled", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipH248StatusMgStatus.setStatus('current')
voipActiveCallStat = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 4))
voipActiveCallStatCurrentActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipActiveCallStatCurrentActiveCalls.setStatus('current')
voipActiveCallStatFailAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 13, 15, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipActiveCallStatFailAttempts.setStatus('current')
counterClearTarget = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 14, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: counterClearTarget.setStatus('current')
counterClearOps = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 14, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: counterClearOps.setStatus('current')
counterClearVpi = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 14, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: counterClearVpi.setStatus('current')
counterClearVci = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 14, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: counterClearVci.setStatus('current')
voipArp = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 1))
voipSip = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 2))
voipIp = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 3))
voipDns = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 4))
voipH248 = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 10))
voipRing = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 11))
voipActiveCall = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 13))
voipArpFlushOps = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipArpFlushOps.setStatus('current')
voipArpShowTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 1, 2), )
if mibBuilder.loadTexts: voipArpShowTable.setStatus('current')
voipArpShowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 1, 2, 1), ).setIndexNames((0, "E5-111-MIB", "voipArpShowIp"))
if mibBuilder.loadTexts: voipArpShowEntry.setStatus('current')
voipArpShowIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 1, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipArpShowIp.setStatus('current')
voipArpShowMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 1, 2, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipArpShowMac.setStatus('current')
maxNumOfVoipNumberPlan = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNumOfVoipNumberPlan.setStatus('current')
voipNumberPlanTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 2, 2), )
if mibBuilder.loadTexts: voipNumberPlanTable.setStatus('current')
voipNumberPlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 2, 2, 1), ).setIndexNames((0, "E5-111-MIB", "voipNumberPlanName"), (0, "E5-111-MIB", "voipNumberPlanIndex"))
if mibBuilder.loadTexts: voipNumberPlanEntry.setStatus('current')
voipNumberPlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 2, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipNumberPlanName.setStatus('current')
voipNumberPlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipNumberPlanIndex.setStatus('current')
voipNumberPlanPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 2, 2, 1, 3), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: voipNumberPlanPattern.setStatus('current')
voipNumberPlanRule = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 2, 2, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: voipNumberPlanRule.setStatus('current')
voipNumberPlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 2, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: voipNumberPlanRowStatus.setStatus('current')
voipNumberPlanDftTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 2, 3), )
if mibBuilder.loadTexts: voipNumberPlanDftTable.setStatus('current')
voipNumberPlanDftEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 2, 3, 1), ).setIndexNames((0, "E5-111-MIB", "voipNumberPlanName"))
if mibBuilder.loadTexts: voipNumberPlanDftEntry.setStatus('current')
voipNumberPlanDftRule = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 2, 3, 1, 1), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: voipNumberPlanDftRule.setStatus('current')
digitSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 2, 4))
timeoutSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 2, 4, 1))
initialTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: initialTimeout.setStatus('current')
interDigitTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interDigitTimeout.setStatus('current')
digitPauseTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: digitPauseTimeout.setStatus('current')
matchingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matchingTimeout.setStatus('current')
voipIpSetIp = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipIpSetIp.setStatus('current')
voipIpSetVid = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 3, 2), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipIpSetVid.setStatus('current')
voipIpSetMask = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipIpSetMask.setStatus('current')
voipDnsIp = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 4, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipDnsIp.setStatus('current')
maxNumOfVoipRoute = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNumOfVoipRoute.setStatus('current')
voipRouteTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 8), )
if mibBuilder.loadTexts: voipRouteTable.setStatus('current')
voipRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 8, 1), ).setIndexNames((0, "E5-111-MIB", "voipRouteIp"), (0, "E5-111-MIB", "voipRouteGateway"), (0, "E5-111-MIB", "voipRouteMask"))
if mibBuilder.loadTexts: voipRouteEntry.setStatus('current')
voipRouteIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 8, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipRouteIp.setStatus('current')
voipRouteGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 8, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipRouteGateway.setStatus('current')
voipRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipRouteMask.setStatus('current')
voipRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: voipRouteMetric.setStatus('current')
voipRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 8, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: voipRouteRowStatus.setStatus('current')
voipCountryCode = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("usa", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipCountryCode.setStatus('current')
voipBootRegDelay = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipBootRegDelay.setStatus('current')
voipRingTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 11, 1), )
if mibBuilder.loadTexts: voipRingTable.setStatus('current')
voipRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 11, 1, 1), ).setIndexNames((0, "E5-111-MIB", "voipRingIndex"))
if mibBuilder.loadTexts: voipRingEntry.setStatus('current')
voipRingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voipRingIndex.setStatus('current')
voipRingName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 11, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: voipRingName.setStatus('current')
voipRingOn1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: voipRingOn1.setStatus('current')
voipRingOff1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: voipRingOff1.setStatus('current')
voipRingOn2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: voipRingOn2.setStatus('current')
voipRingOff2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: voipRingOff2.setStatus('current')
voipRingOn3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: voipRingOn3.setStatus('current')
voipRingOff3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 11, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: voipRingOff3.setStatus('current')
voipRingSetDefault = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipRingSetDefault.setStatus('current')
voipActiveCallMaxActiveCalls = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 13, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipActiveCallMaxActiveCalls.setStatus('current')
voipActiveCallThreshold = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 13, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipActiveCallThreshold.setStatus('current')
voipMode = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sip", 1), ("csip", 2), ("h248", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipMode.setStatus('current')
maxNumOfVoipH248MgConf = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxNumOfVoipH248MgConf.setStatus('current')
voipH248MgConf = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 10, 2))
voipH248MgName = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 10, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipH248MgName.setStatus('current')
voipH248MgEnable = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 10, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipH248MgEnable.setStatus('current')
voipH248MgH248Profile = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 10, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipH248MgH248Profile.setStatus('current')
voipH248MgPort = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 16, 10, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1025, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipH248MgPort.setStatus('current')
mibBuilder.exportSymbols("E5-111-MIB", pvcVci=pvcVci, arpproxyDhcpIp=arpproxyDhcpIp, seltTarget=seltTarget, voipPortTXGain=voipPortTXGain, ppvcMemberEntry=ppvcMemberEntry, diagnostic=diagnostic, h248ProfileVbd=h248ProfileVbd, dscpSrcCodePoint=dscpSrcCodePoint, snrMgnUcDownshift=snrMgnUcDownshift, auditQryInterval=auditQryInterval, mltRtg=mltRtg, igmpProfilePortTable=igmpProfilePortTable, sipProfileEntry=sipProfileEntry, macFfEntry=macFfEntry, h248ProfileRowStatus=h248ProfileRowStatus, macFfStaticIPPort=macFfStaticIPPort, rpvcRouteDomainVpi=rpvcRouteDomainVpi, alarmCurrIndex=alarmCurrIndex, h248ProfileTransport=h248ProfileTransport, dhcpRelay82ActiveServer=dhcpRelay82ActiveServer, maxNumOfMacFfVlanInSystem=maxNumOfMacFfVlanInSystem, dhcpStats=dhcpStats, enetSfpInfoTable=enetSfpInfoTable, voipLineInfoRtpRemoteIp=voipLineInfoRtpRemoteIp, h248ProfilePbit=h248ProfilePbit, auditQryRobust=auditQryRobust, sipProfile=sipProfile, interDigitTimeout=interDigitTimeout, rpvcRouteDomainRowStatus=rpvcRouteDomainRowStatus, sipCallSvcProfileFax=sipCallSvcProfileFax, ipbpvcIfDynamicIfIndex=ipbpvcIfDynamicIfIndex, pvcStateChannelType=pvcStateChannelType, dhcpSnoopMaxcnt=dhcpSnoopMaxcnt, paepvcCPriority=paepvcCPriority, ipbpvcDomainRowStatus=ipbpvcDomainRowStatus, sipProfileDscp=sipProfileDscp, arpproxyFlushTarget=arpproxyFlushTarget, aclProfileRowStatus=aclProfileRowStatus, rpvcRowStatus=rpvcRowStatus, adslPortUtilEntry=adslPortUtilEntry, voipLineStatusPhoneStatus=voipLineStatusPhoneStatus, voipLineInfoEntry=voipLineInfoEntry, voipRingOn3=voipRingOn3, maxNumOfOuiFiltersPerPort=maxNumOfOuiFiltersPerPort, ppvcMemberProfileDS=ppvcMemberProfileDS, ouiFilterRowStatus=ouiFilterRowStatus, igmpGroupPortEntry=igmpGroupPortEntry, macFfArpCounterReplyRXDrop=macFfArpCounterReplyRXDrop, dspProfilePlayBufferMinDelay=dspProfilePlayBufferMinDelay, voipH248MgConf=voipH248MgConf, ipbpvcIfDynamicVci=ipbpvcIfDynamicVci, mltRelayEntry=mltRelayEntry, pvcVpi=pvcVpi, h248ProfileSoftswitch=h248ProfileSoftswitch, dhcpSnoopGateway=dhcpSnoopGateway, enetSfpInfoVoltage=enetSfpInfoVoltage, mltVdcDiff=mltVdcDiff, voipSip=voipSip, macfilter=macfilter, igmpProfile=igmpProfile, voipLineInfoRtpTxCodecType=voipLineInfoRtpTxCodecType, dtpvcHelloTime=dtpvcHelloTime, userAuthMode=userAuthMode, sipProfilePrack=sipProfilePrack, voipLineInfoRtpLocalIp2=voipLineInfoRtpLocalIp2, sipProfileSipPort=sipProfileSipPort, aclProfileRuleSrcIP=aclProfileRuleSrcIP, maxNumOfH248Profiles=maxNumOfH248Profiles, mltVacDiff=mltVacDiff, gbondGroupName=gbondGroupName, paepvcCountPadtRx=paepvcCountPadtRx, voipDns=voipDns, voipActiveCallMaxActiveCalls=voipActiveCallMaxActiveCalls, fwUpgradeStatus=fwUpgradeStatus, macFfArpCounterTable=macFfArpCounterTable, pppoeAgentEnable=pppoeAgentEnable, voipNumberPlanDftRule=voipNumberPlanDftRule, voipArpShowMac=voipArpShowMac, igmpFilterIndex=igmpFilterIndex, adslLineConfNitro=adslLineConfNitro, dhcpSnoopMac=dhcpSnoopMac, macFfRowStatus=macFfRowStatus, igmpGroupV2Ip=igmpGroupV2Ip, alarmCurrParam4=alarmCurrParam4, adslLineProfileForBatchSet=adslLineProfileForBatchSet, voipH248LineConfDspProfile=voipH248LineConfDspProfile, igmpLastMemQryInterval=igmpLastMemQryInterval, dtpvcSvid=dtpvcSvid, dhcpRelayTestIp=dhcpRelayTestIp, ouiFilterPortTable=ouiFilterPortTable, enetSfpInfoTxpower=enetSfpInfoTxpower, voipRouteGateway=voipRouteGateway, dhcpRelay82SecondaryServer=dhcpRelay82SecondaryServer, aclSetRowStatus=aclSetRowStatus, dhcpRelay82FifthServer=dhcpRelay82FifthServer, ouiFilterAddrOld=ouiFilterAddrOld, dscpMapPriority=dscpMapPriority, mltVMetering=mltVMetering, paepvcCountPppLcpCfgReqRx=paepvcCountPppLcpCfgReqRx, aclProfileRuleParamMask=aclProfileRuleParamMask, macFfArpCounterReplyTX=macFfArpCounterReplyTX, aclSetVci=aclSetVci, sipCallSvcProfileRowStatus=sipCallSvcProfileRowStatus, securedClientEntry=securedClientEntry, dhcpStaticEntry=dhcpStaticEntry, macAddress=macAddress, dhcpRequest=dhcpRequest, profile=profile, dhcpAck=dhcpAck, dslRateMode=dslRateMode, digitPauseTimeout=digitPauseTimeout, aclProfileRuleName=aclProfileRuleName, adslLineConfUSPhyr=adslLineConfUSPhyr, extAlarmname=extAlarmname, macPort=macPort, arpproxyInterfaceMask=arpproxyInterfaceMask, qryVidType=qryVidType, sipCallSvcProfileFlashType=sipCallSvcProfileFlashType, ipbpvcRouteDynamicType=ipbpvcRouteDynamicType, pvcPriority=pvcPriority, paepvcCvid=paepvcCvid, mcastBwPortBandwidth=mcastBwPortBandwidth, qryVidStatusEntry=qryVidStatusEntry, snrMgnEntry=snrMgnEntry, h248ProfileEncode=h248ProfileEncode, dhcpRelayArpShowVid=dhcpRelayArpShowVid, voipIpSetIp=voipIpSetIp, dhcpDiscovery=dhcpDiscovery, ipbpvcRouteDynamicMask=ipbpvcRouteDynamicMask, acl=acl, adslAtucCarrierMask1ForBatchSet=adslAtucCarrierMask1ForBatchSet, igmpGroupPortvid=igmpGroupPortvid, dhcpRelay82VlanMask=dhcpRelay82VlanMask, voipProfile=voipProfile, macFfArpIP=macFfArpIP, maxNumOfMcastBw=maxNumOfMcastBw, macFfArpCounterRequestTX=macFfArpCounterRequestTX, voipRingTable=voipRingTable, igmpEnable=igmpEnable, h248ProfilePhysicalStartNumber=h248ProfilePhysicalStartNumber, dhcpRelay82VlanIp=dhcpRelay82VlanIp, voipLineInfoSipRemoteUri2=voipLineInfoSipRemoteUri2, paepvcCountPadoRx=paepvcCountPadoRx, mltForce=mltForce, voipNumberPlanPattern=voipNumberPlanPattern, ouiFilterPortEnable=ouiFilterPortEnable, ipbpvcIfDynamicTable=ipbpvcIfDynamicTable, sipProfileKeepAlive=sipProfileKeepAlive, voipNumberPlanRule=voipNumberPlanRule, paepvcVpi=paepvcVpi, voipH248MgName=voipH248MgName, snrMgn=snrMgn, trap=trap, h248ProfileMgcPort=h248ProfileMgcPort, adslLineStatusMode=adslLineStatusMode, voipH248LineConfEntry=voipH248LineConfEntry, adslLineConfPowerMgmt=adslLineConfPowerMgmt, dhcpRelay82ThirdServer=dhcpRelay82ThirdServer, alarmCurrOccurTime=alarmCurrOccurTime, adslPortUtilTx=adslPortUtilTx, gbondGroupUpRate=gbondGroupUpRate, igmpFilterEntry=igmpFilterEntry, paepvcProfileUS=paepvcProfileUS, voip=voip, paepvcPvid=paepvcPvid, macFfVlanTable=macFfVlanTable, ipbpvcRouteDynamicNextHop=ipbpvcRouteDynamicNextHop, vlanIsolationEntry=vlanIsolationEntry, arpproxyFlushInterfaceIp=arpproxyFlushInterfaceIp, powerMgmtL2ThreshRate=powerMgmtL2ThreshRate, h248ProfileMgcSvr=h248ProfileMgcSvr, rpvcArpFlush=rpvcArpFlush, ipbpvcRowStatus=ipbpvcRowStatus, voipRingOff3=voipRingOff3, dslRateXturMaxInterleaveDelay=dslRateXturMaxInterleaveDelay, enetSfpInfoTemperature=enetSfpInfoTemperature, subrPortTable=subrPortTable, isConfigChanged=isConfigChanged, voipLineInfoRtpTxPt2=voipLineInfoRtpTxPt2, voipActiveCallStat=voipActiveCallStat, accessSwitchCommonATM=accessSwitchCommonATM, timeoutSetup=timeoutSetup, ppvcVci=ppvcVci, dhcpRelay82VlanGateway=dhcpRelay82VlanGateway, adslAturInpForBatchSet=adslAturInpForBatchSet, mltTarget=mltTarget, ipbpvcRouteDynamicMetric=ipbpvcRouteDynamicMetric, voipH248LineConfVBDProfile=voipH248LineConfVBDProfile, powerMgmtL2Atprt=powerMgmtL2Atprt, ipbpvcRoutePriority=ipbpvcRoutePriority, tlspvcEntry=tlspvcEntry, accessCtrl=accessCtrl, dspProfileG723Vpi=dspProfileG723Vpi, ipbpvcEdgeRouterEntry=ipbpvcEdgeRouterEntry, extAlarmEntry=extAlarmEntry, arpproxyIfIndex=arpproxyIfIndex, seltCableType=seltCableType, voipLineInfoRtpTxCodecType2=voipLineInfoRtpTxCodecType2, voipLineInfoSipRemoteUri=voipLineInfoSipRemoteUri, voipActiveCallStatCurrentActiveCalls=voipActiveCallStatCurrentActiveCalls, igmpQryRespInterval=igmpQryRespInterval, ipbpvcInterfaceVci=ipbpvcInterfaceVci, voipSipLineConfSipProfile=voipSipLineConfSipProfile, voipIpSetVid=voipIpSetVid, adslAtucInpForBatchSet=adslAtucInpForBatchSet, ppvcMemberRowStatus=ppvcMemberRowStatus, mltRrg=mltRrg, adslLineConfAtucCarrierMask0=adslLineConfAtucCarrierMask0, dsBcastDisableEntry=dsBcastDisableEntry, igmpPortCtrlPduQueryCnt=igmpPortCtrlPduQueryCnt, ipbpvcVpi=ipbpvcVpi, alarmConfSeverity=alarmConfSeverity, igmpCountPortEnable=igmpCountPortEnable, sipCallSvcProfileFlashInfo=sipCallSvcProfileFlashInfo, macfilterTarget=macfilterTarget, macFfStaticIPTable=macFfStaticIPTable, usbCastCtrl=usbCastCtrl, paepvcPriority=paepvcPriority, dhcpSnoop=dhcpSnoop, paepvcVci=paepvcVci, paepvcCountPadtTx=paepvcCountPadtTx, paepvc=paepvc, vlanIsolation=vlanIsolation, igmpGroupPortV2Entry=igmpGroupPortV2Entry, macFfArpMac=macFfArpMac, voipMode=voipMode, counterClearTarget=counterClearTarget, igmpGroupV2Entry=igmpGroupV2Entry, arpproxyTable=arpproxyTable, alarmConfTarget=alarmConfTarget, ppvc=ppvc, tlspvcTable=tlspvcTable, macFilterEntry=macFilterEntry, ipbpvcDomainDhcpVlanEnable=ipbpvcDomainDhcpVlanEnable, igmpFilterStartIp=igmpFilterStartIp, mcastBwEndIp=mcastBwEndIp, ouiFilterEntry=ouiFilterEntry, igmpPortCtrlPduLeaveCnt=igmpPortCtrlPduLeaveCnt, alarmConfClearable=alarmConfClearable, h248ProfileMgc2On=h248ProfileMgc2On, mcastBwEntry=mcastBwEntry, alarmCurrTimeDescr=alarmCurrTimeDescr, paepvcCountGenericErrTx=paepvcCountGenericErrTx, voipLineInfoRtpRemotePort=voipLineInfoRtpRemotePort, ipbpvcRouteTable=ipbpvcRouteTable, ipbpvcInterfaceVid=ipbpvcInterfaceVid, sipCallSvcProfileEntry=sipCallSvcProfileEntry, igmpLeaveMode=igmpLeaveMode, adslLineConfL2Time=adslLineConfL2Time, ppvcEncap=ppvcEncap, dhcpSnoopCounterTable=dhcpSnoopCounterTable, dtpvc=dtpvc, rpvcRouteDomainNetmask=rpvcRouteDomainNetmask, alarmConfFacility=alarmConfFacility)
mibBuilder.exportSymbols("E5-111-MIB", mvlanEntry=mvlanEntry, voipH248MgPort=voipH248MgPort, igmpGroupPortV2Vid=igmpGroupPortV2Vid, ppvcMemberVpi=ppvcMemberVpi, snrMgnUrUpshift=snrMgnUrUpshift, dsBcastCtrlRate=dsBcastCtrlRate, dhcpRelayArpShowTable=dhcpRelayArpShowTable, tlspvcProfileUS=tlspvcProfileUS, ouiFilterVlanFilterMode=ouiFilterVlanFilterMode, auditQuery=auditQuery, rpvcUSProfile=rpvcUSProfile, macFfStatsIndex=macFfStatsIndex, voipH248MgH248Profile=voipH248MgH248Profile, dsBcastDisableTable=dsBcastDisableTable, macFfTable=macFfTable, rpvcGatewayRowStatus=rpvcGatewayRowStatus, macFilterPortMacCount=macFilterPortMacCount, aclSetVpi=aclSetVpi, adslLineConfAnnexL=adslLineConfAnnexL, voipPortOps=voipPortOps, dhcpStaticRowStatus=dhcpStaticRowStatus, voipLineInfoRtpLocalIp=voipLineInfoRtpLocalIp, dhcpRelayTest=dhcpRelayTest, igmpGroupPortTable=igmpGroupPortTable, powerMgmtL2MaxRate=powerMgmtL2MaxRate, subrPortEntry=subrPortEntry, userTable=userTable, dtpvcSpriority=dtpvcSpriority, igmpCountPortLimit=igmpCountPortLimit, paepvcSessionVpi=paepvcSessionVpi, aclProfileEntry=aclProfileEntry, adslL2ATPRForBatchSet=adslL2ATPRForBatchSet, extAlarmTable=extAlarmTable, voipLineInfoRtpRemotePort2=voipLineInfoRtpRemotePort2, dhcpRelayArp=dhcpRelayArp, mltCtg=mltCtg, sipProfilePbit=sipProfilePbit, securedClientEndIp=securedClientEndIp, dhcpSnoopCounterEntry=dhcpSnoopCounterEntry, voipRouteIp=voipRouteIp, paepvcHelloTime=paepvcHelloTime, macfilterBatchSet=macfilterBatchSet, voipLineInfoTable=voipLineInfoTable, igmpQryInterval=igmpQryInterval, ipbpvcIfDynamicEntry=ipbpvcIfDynamicEntry, igmpCountPortEntry=igmpCountPortEntry, enetSfpInfoRxpower=enetSfpInfoRxpower, aclProfileTable=aclProfileTable, dspProfileRowStatus=dspProfileRowStatus, qryVidConfEntry=qryVidConfEntry, paepvcCountTable=paepvcCountTable, initialTimeout=initialTimeout, dhcpSnoopIpEntry=dhcpSnoopIpEntry, dsBcastCtrlEnable=dsBcastCtrlEnable, macFilterRowStatus=macFilterRowStatus, voipDnsIp=voipDnsIp, calixProducts=calixProducts, ipbpvcRouteIp=ipbpvcRouteIp, igmpGroupPortV2Table=igmpGroupPortV2Table, adslLineConfL0Time=adslLineConfL0Time, arpproxyFlushOps=arpproxyFlushOps, dspProfileEntry=dspProfileEntry, voipRingOff1=voipRingOff1, dhcpRelay82RelayMode=dhcpRelay82RelayMode, snrMgnUcTarget=snrMgnUcTarget, maxNumOfOuiFiltersInSystem=maxNumOfOuiFiltersInSystem, dhcpRelayTestStatus=dhcpRelayTestStatus, mltRelaySet=mltRelaySet, macFfArpEntry=macFfArpEntry, selt=selt, ipbpvcVci=ipbpvcVci, snrMgnUcMax=snrMgnUcMax, vlanIsolationRowStatus=vlanIsolationRowStatus, dsBcastDisableVlanId=dsBcastDisableVlanId, adslLineConfL2ATPRT=adslLineConfL2ATPRT, dhcpRelay82Entry=dhcpRelay82Entry, arpproxyFlushEdgeRouterIp=arpproxyFlushEdgeRouterIp, macFfStatsArIP=macFfStatsArIP, macFfArpCounterReplyRX=macFfArpCounterReplyRX, pvcUsRateLimitTable=pvcUsRateLimitTable, ouiFilterEntryOld=ouiFilterEntryOld, voipSipLineConfSipCallSvcProfile=voipSipLineConfSipCallSvcProfile, ipbpvcInterfaceIp=ipbpvcInterfaceIp, dsbCastCtrl=dsbCastCtrl, voipActiveCall=voipActiveCall, ipbpvcInterfaceEntry=ipbpvcInterfaceEntry, voipRingOn1=voipRingOn1, igmpProfilePortEntry=igmpProfilePortEntry, dtpvcStateCPriority=dtpvcStateCPriority, adslLineUpTime=adslLineUpTime, macFilterPortTable=macFilterPortTable, igmpPortCtrlPduEntry=igmpPortCtrlPduEntry, dhcpRouteMask=dhcpRouteMask, dsBcastDisableRowStatus=dsBcastDisableRowStatus, voipArpShowIp=voipArpShowIp, mvlanTable=mvlanTable, voipLineInfoRtpLocalPort2=voipLineInfoRtpLocalPort2, ipbpvcInterfaceVpi=ipbpvcInterfaceVpi, powerMgmtAtucMaxPSD=powerMgmtAtucMaxPSD, delayedReboot=delayedReboot, adslLineConfAturInp=adslLineConfAturInp, voipPort=voipPort, pvcUsRateLimitEnable=pvcUsRateLimitEnable, sipCallSvcProfileNumberPlanTable=sipCallSvcProfileNumberPlanTable, ouiFilterVlanTable=ouiFilterVlanTable, ipbpvcInterfaceIfIndex=ipbpvcInterfaceIfIndex, paepvcProfileDS=paepvcProfileDS, dslRateXtucMinTxRate=dslRateXtucMinTxRate, dslRateEntry=dslRateEntry, igmpTimer=igmpTimer, clear=clear, pvcStateEntry=pvcStateEntry, paepvcSessionTable=paepvcSessionTable, paepvcStats=paepvcStats, mcastBwIndex=mcastBwIndex, voipRingName=voipRingName, dhcpRelay82Info=dhcpRelay82Info, paepvcSessionState=paepvcSessionState, ipbpvc=ipbpvc, pvcStateVpi=pvcStateVpi, maxNumOfQryVid=maxNumOfQryVid, adslAtucMaxTxPowerForBatchSet=adslAtucMaxTxPowerForBatchSet, igmpFilterTable=igmpFilterTable, macFfArIP=macFfArIP, fwUpgradeVersion=fwUpgradeVersion, igmpGroupEntry=igmpGroupEntry, adslMaxRxPowerForBatchSet=adslMaxRxPowerForBatchSet, dscpStatusEnable=dscpStatusEnable, igmpQueryCntTotal=igmpQueryCntTotal, subrPortName=subrPortName, adslLineConfPowerMode=adslLineConfPowerMode, ipbpvcDomainVlanId=ipbpvcDomainVlanId, ipbpvcEncap=ipbpvcEncap, macStats=macStats, dhcpSnoopIp=dhcpSnoopIp, counterClearVci=counterClearVci, sipProfileTable=sipProfileTable, mvlanTranslateTable=mvlanTranslateTable, mvlanTranslateIndex=mvlanTranslateIndex, voipLineInfoRtpRxCodecType=voipLineInfoRtpRxCodecType, mltRtr=mltRtr, arpproxyFlushInterfaceVid=arpproxyFlushInterfaceVid, aclSetProfileName=aclSetProfileName, matchingTimeout=matchingTimeout, maxNumOfVoipH248MgConf=maxNumOfVoipH248MgConf, ipbpvcEntry=ipbpvcEntry, paepvcCountSrvcnameErrRx=paepvcCountSrvcnameErrRx, adslLineConfAturCarrierMask=adslLineConfAturCarrierMask, adslPortBatchSet=adslPortBatchSet, aclProfileRuleProtocol=aclProfileRuleProtocol, multicast=multicast, aclProfileRuleDestStartPort=aclProfileRuleDestStartPort, arpproxyFlushEdgeRouterVid=arpproxyFlushEdgeRouterVid, snrMgnUcMin=snrMgnUcMin, enetStats=enetStats, paepvcTable=paepvcTable, igmpGroupTable=igmpGroupTable, aclProfileActionNumber=aclProfileActionNumber, dhcpOffer=dhcpOffer, pvcRowStatus=pvcRowStatus, dhcpRouteIndex=dhcpRouteIndex, igmpProfileEntry=igmpProfileEntry, dtpvcEntry=dtpvcEntry, voipH248LineConfTable=voipH248LineConfTable, alarmCurrParam2=alarmCurrParam2, dhcpRouteEntry=dhcpRouteEntry, userPriviledge=userPriviledge, arpproxy=arpproxy, ppvcEntry=ppvcEntry, mltVRing=mltVRing, dtpvcStateChannelType=dtpvcStateChannelType, alarmOps=alarmOps, dtpvcCpriority=dtpvcCpriority, dslRateXturMinTxRate=dslRateXturMinTxRate, h248ProfileDscp=h248ProfileDscp, voipRingEntry=voipRingEntry, adslPortUtilTable=adslPortUtilTable, ipbpvcDomainVlanEntry=ipbpvcDomainVlanEntry, macFfStatsTable=macFfStatsTable, aclProfileActionrpri=aclProfileActionrpri, dhcpSnoopMask=dhcpSnoopMask, tlspvcProfileDS=tlspvcProfileDS, voipH248MgEnable=voipH248MgEnable, arpproxyFlush=arpproxyFlush, dtpvcVpi=dtpvcVpi, switch=switch, userName=userName, mvlanTranslateStartIp=mvlanTranslateStartIp, mltDetectedDtmfCount=mltDetectedDtmfCount, voipNumberPlanDftEntry=voipNumberPlanDftEntry, voipPortH248TerminationEntry=voipPortH248TerminationEntry, h248ProfileName=h248ProfileName, dhcpRelayArpShowEntry=dhcpRelayArpShowEntry, maxNumberOfIgmpProfiles=maxNumberOfIgmpProfiles, adslOptionMaskForBatchSet=adslOptionMaskForBatchSet, voipPortGainTable=voipPortGainTable, dscpMappingEntry=dscpMappingEntry, voipLineInfoRtpLocalPort=voipLineInfoRtpLocalPort, gbondGroupDownRate=gbondGroupDownRate, voipRingIndex=voipRingIndex, maxNumOfSipCallSvcProfiles=maxNumOfSipCallSvcProfiles, adslL0TimeForBatchSet=adslL0TimeForBatchSet, rpvcGatewayPriority=rpvcGatewayPriority, alarmconf=alarmconf, mltVacRing=mltVacRing, sipProfileUriType=sipProfileUriType, igmpPortCtrlAuditLeaveCnt=igmpPortCtrlAuditLeaveCnt, alarmCurrParam5=alarmCurrParam5, sipCallSvcProfileStateMask=sipCallSvcProfileStateMask, enetSfpInfoTxBias=enetSfpInfoTxBias, rpvcNetmask=rpvcNetmask, gbondGroupPorts=gbondGroupPorts, voipPortGainEntry=voipPortGainEntry, macFfStaticIPVid=macFfStaticIPVid, macFfArpCounterRequestRX=macFfArpCounterRequestRX, adslLineConfL0toL2Rate=adslLineConfL0toL2Rate, usBcastCtrlRate=usBcastCtrlRate, sipCallSvcProfilePasswdOn=sipCallSvcProfilePasswdOn, adslPortTarget=adslPortTarget, igmpPortCtrlPduReportCnt=igmpPortCtrlPduReportCnt, userPassword=userPassword, macFfStaticIPMask=macFfStaticIPMask, rpvcVpi=rpvcVpi, mltVacTip=mltVacTip, gbondGroupRowStatus=gbondGroupRowStatus, dhcpRouteTable=dhcpRouteTable, paepvcCountVpi=paepvcCountVpi, igmpGroupV2MemberPorts=igmpGroupV2MemberPorts, dhcpStaticIpAddr=dhcpStaticIpAddr, voipIpSetMask=voipIpSetMask, igmpProfileTable=igmpProfileTable, aclSetEntry=aclSetEntry, aclProfileActionrvlan=aclProfileActionrvlan, dspProfileCodec=dspProfileCodec, pppoeAgentTable=pppoeAgentTable, securedClientService=securedClientService, maxNumOfMacFiltersPerPort=maxNumOfMacFiltersPerPort, dhcpSnoopOps=dhcpSnoopOps, ppvcVpi=ppvcVpi, dtpvcStateEntry=dtpvcStateEntry, voipLineInfoSipLocalUri=voipLineInfoSipLocalUri, sipProfileName=sipProfileName, delayedRebootRemainingTime=delayedRebootRemainingTime, aclProfileRuleVid=aclProfileRuleVid, dhcpSnoopIpTable=dhcpSnoopIpTable, dslRateXtucMaxInterleaveDelay=dslRateXtucMaxInterleaveDelay, snrMgnUrMax=snrMgnUrMax, powerMgmtL0Time=powerMgmtL0Time, adslAturMaxTxPowerForBatchSet=adslAturMaxTxPowerForBatchSet, dhcpStaticTable=dhcpStaticTable, alarmCurrParam7=alarmCurrParam7, ipbpvcDomainVlanTable=ipbpvcDomainVlanTable, macFfArpTable=macFfArpTable, paepvcSessionVci=paepvcSessionVci)
mibBuilder.exportSymbols("E5-111-MIB", powerMgmtL2MinRate=powerMgmtL2MinRate, dhcpRelayArpShowMac=dhcpRelayArpShowMac, macStatus=macStatus, tlspvcVpi=tlspvcVpi, adslAtucCarrierMask0ForBatchSet=adslAtucCarrierMask0ForBatchSet, igmpProfileEnable=igmpProfileEnable, dhcpRelay82ServerVid=dhcpRelay82ServerVid, macFfVlanEntry=macFfVlanEntry, dspProfileEchoTail=dspProfileEchoTail, dhcpRelayTestVid=dhcpRelayTestVid, voipPortTel=voipPortTel, pvcUsRateLimitEntry=pvcUsRateLimitEntry, mvlan=mvlan, delayedRebootTimer=delayedRebootTimer, igmpPortCtrlPduTable=igmpPortCtrlPduTable, aclSetTable=aclSetTable, h248Profile=h248Profile, igmpRobust=igmpRobust, dhcpRelayArpFlushOps=dhcpRelayArpFlushOps, alarmCurrSeverity=alarmCurrSeverity, port=port, seltLoopEstimateLengthMeter=seltLoopEstimateLengthMeter, mltDialToneDetected=mltDialToneDetected, tlspvc=tlspvc, rpvcRouteDomainEntry=rpvcRouteDomainEntry, powerMgmtAturMaxPSD=powerMgmtAturMaxPSD, dtpvcStateCvid=dtpvcStateCvid, macfilterOps=macfilterOps, mlt=mlt, adslL0toL2RateForBatchSet=adslL0toL2RateForBatchSet, aclProfileRuleEndTos=aclProfileRuleEndTos, macFfVid=macFfVid, voipRouteRowStatus=voipRouteRowStatus, ipbpvcRouteDynamicEntry=ipbpvcRouteDynamicEntry, pvcProfileUS=pvcProfileUS, qryVidStatusTable=qryVidStatusTable, ipbpvcProfile=ipbpvcProfile, pvc=pvc, voipLineInfoRtpTxPt=voipLineInfoRtpTxPt, maxNumOfVoipNumberPlan=maxNumOfVoipNumberPlan, paepvcRowStatus=paepvcRowStatus, h248ProfilePhysicalSuffixLength=h248ProfilePhysicalSuffixLength, dhcpRelay82Table=dhcpRelay82Table, securedClientTable=securedClientTable, ipbpvcEdgeRouterTable=ipbpvcEdgeRouterTable, ouiFilterVlanEntry=ouiFilterVlanEntry, dspProfileG711Vpi=dspProfileG711Vpi, e5x100=e5x100, snrMgnUrMin=snrMgnUrMin, powerMgmtPSDEntry=powerMgmtPSDEntry, igmpGroupvid=igmpGroupvid, voipPortTarget=voipPortTarget, alarmCurrTable=alarmCurrTable, dslRateLatencyMode=dslRateLatencyMode, pvcEntry=pvcEntry, adslLineConfOptionMask=adslLineConfOptionMask, gbond=gbond, pvcStateEncap=pvcStateEncap, dscpPortEntry=dscpPortEntry, voipArpShowEntry=voipArpShowEntry, igmpCount=igmpCount, adslLineConfAtucMaxTxPower=adslLineConfAtucMaxTxPower, voipLineInfoRtpRxPt2=voipLineInfoRtpRxPt2, mltCrg=mltCrg, rpvcGatewayVlanId=rpvcGatewayVlanId, pppoeAgentRowStatus=pppoeAgentRowStatus, voipRing=voipRing, dtpvcServiceName=dtpvcServiceName, sipCallSvcProfileTable=sipCallSvcProfileTable, dtpvcUSProfile=dtpvcUSProfile, voipRingOff2=voipRingOff2, adslLineConfAdslMode=adslLineConfAdslMode, powerMgmtPSDTable=powerMgmtPSDTable, sipProfileProxySvrPort=sipProfileProxySvrPort, dhcpRelay82FourthServer=dhcpRelay82FourthServer, macFilterAddr=macFilterAddr, pvcHelloTime=pvcHelloTime, voipLineStatusEntry=voipLineStatusEntry, adslLineConfTable=adslLineConfTable, ipbpvcInterfaceRowStatus=ipbpvcInterfaceRowStatus, macFfSrcMask=macFfSrcMask, dtpvcStateVpi=dtpvcStateVpi, maxNumOfMacFiltersInSystem=maxNumOfMacFiltersInSystem, sipProfileRegExpire=sipProfileRegExpire, ouiFilterVlanEnable=ouiFilterVlanEnable, voipLineInfoRtpRemoteIp2=voipLineInfoRtpRemoteIp2, seltStatus=seltStatus, rpvcRouteDomainIp=rpvcRouteDomainIp, arpproxyType=arpproxyType, voipStats=voipStats, voipActiveCallThreshold=voipActiveCallThreshold, voipSipLineConfTable=voipSipLineConfTable, macFfStatsEntry=macFfStatsEntry, counterClearVpi=counterClearVpi, voipArp=voipArp, alarmCurrParam6=alarmCurrParam6, alarmCurrParam8=alarmCurrParam8, maxNumOfPppoeDhcpRelay82Conf=maxNumOfPppoeDhcpRelay82Conf, dtpvcVci=dtpvcVci, mcastBwBandwidth=mcastBwBandwidth, adslLineStatusTable=adslLineStatusTable, ipbpvcPvid=ipbpvcPvid, aclProfileRuleDestIP=aclProfileRuleDestIP, macFfStatsSrcMask=macFfStatsSrcMask, mvlanUntaggedPorts=mvlanUntaggedPorts, h248ProfileEndRTPPort=h248ProfileEndRTPPort, ipbpvcRouteEntry=ipbpvcRouteEntry, voipLineStatusServiceStatus=voipLineStatusServiceStatus, voipNumberPlanIndex=voipNumberPlanIndex, mltCtr=mltCtr, ipbpvcRouteNextHop=ipbpvcRouteNextHop, dtpvcCvid=dtpvcCvid, qryVidRowStatus=qryVidRowStatus, dhcpSnoopPortTable=dhcpSnoopPortTable, snrMgnUrDownshift=snrMgnUrDownshift, paepvcCountPadiTx=paepvcCountPadiTx, powerMgmtL2Time=powerMgmtL2Time, sipCallSvcProfileNumberPlanCc=sipCallSvcProfileNumberPlanCc, voipLineInfoRtpRxPt=voipLineInfoRtpRxPt, voipH248LineConfMgName=voipH248LineConfMgName, paepvcCountAcSystemErrRx=paepvcCountAcSystemErrRx, tlspvcSpriority=tlspvcSpriority, alarmCurrEntry=alarmCurrEntry, dhcpRelay82Suboption2Enable=dhcpRelay82Suboption2Enable, dhcpSnoopRouteMap=dhcpSnoopRouteMap, rpvcGatewayIp=rpvcGatewayIp, sipProfileRegSvr=sipProfileRegSvr, dhcpSnoopMaxcntMode=dhcpSnoopMaxcntMode, aclProfileRuleSrcIPMask=aclProfileRuleSrcIPMask, pppoeAgentInfo=pppoeAgentInfo, voipSipLineConfDspProfile=voipSipLineConfDspProfile, ipbpvcPriority=ipbpvcPriority, maxNumOfDhcpStaticIp=maxNumOfDhcpStaticIp, adslLineConfAnnexI=adslLineConfAnnexI, dspProfilePlayBufferMaxDelay=dspProfilePlayBufferMaxDelay, gbondGroupEntry=gbondGroupEntry, igmpGroupnumberOfMembers=igmpGroupnumberOfMembers, ipbpvcEdgeRouterVid=ipbpvcEdgeRouterVid, voipRouteMask=voipRouteMask, mltOps=mltOps, ouiFilterAddr=ouiFilterAddr, seltLoopEstimateLengthFt=seltLoopEstimateLengthFt, sys=sys, pvcStatePriority=pvcStatePriority, arpproxyVpi=arpproxyVpi, ppvcRowStatus=ppvcRowStatus, ipbpvcIfDynamicIp=ipbpvcIfDynamicIp, pppoeAgent=pppoeAgent, rpvcArpAgingTime=rpvcArpAgingTime, igmpGroupPortV2SourceIp=igmpGroupPortV2SourceIp, rpvcGatewayTable=rpvcGatewayTable, ipbpvcRouteDynamicTable=ipbpvcRouteDynamicTable, counterClearOps=counterClearOps, paepvcSessionacname=paepvcSessionacname, igmpPortNumOfActiveGroups=igmpPortNumOfActiveGroups, securedClientStartIp=securedClientStartIp, dspProfileG726Vpi=dspProfileG726Vpi, macFfSrcIP=macFfSrcIP, ipbpvcRouteDynamicPriority=ipbpvcRouteDynamicPriority, ouiFilterTable=ouiFilterTable, voipLineInfoRtpRxCodecType2=voipLineInfoRtpRxCodecType2, h248ProfileEntry=h248ProfileEntry, voipPortTelTable=voipPortTelTable, dspProfileG729Vpi=dspProfileG729Vpi, macFfIndex=macFfIndex, voipH248StatusMgName=voipH248StatusMgName, powerMgmtParamTable=powerMgmtParamTable, alarmSeverityPortTable=alarmSeverityPortTable, h248ProfileMgc2Svr=h248ProfileMgc2Svr, voipNumberPlanEntry=voipNumberPlanEntry, aclProfileRuleEtype=aclProfileRuleEtype, alarmCurrTrapOid=alarmCurrTrapOid, voipCountryCode=voipCountryCode, pvcServiceName=pvcServiceName, sipCallSvcProfileDtmf=sipCallSvcProfileDtmf, dhcpSnoopVid=dhcpSnoopVid, sipCallSvcProfileNumberPlanOn=sipCallSvcProfileNumberPlanOn, alarmSeverityPortEntry=alarmSeverityPortEntry, ppvcMemberProfileUS=ppvcMemberProfileUS, h248ProfileMgc2Port=h248ProfileMgc2Port, ouiFilterPortEntry=ouiFilterPortEntry, igmpNumOfActiveGroups=igmpNumOfActiveGroups, adslPortOps=adslPortOps, dspProfileTable=dspProfileTable, paepvcSessionId=paepvcSessionId, macFfStaticIPRowStatus=macFfStaticIPRowStatus, maxNumOfPriorityPvcs=maxNumOfPriorityPvcs, igmpVersion=igmpVersion, ipbpvcInterfaceTable=ipbpvcInterfaceTable, igmpReportCntTotal=igmpReportCntTotal, voipH248StatusMgStatus=voipH248StatusMgStatus, macFfStatsSrcIP=macFfStatsSrcIP, macFilterMacCountForBatchSet=macFilterMacCountForBatchSet, enetSfpInfoEntry=enetSfpInfoEntry, seltOps=seltOps, mvlanEgressPorts=mvlanEgressPorts, alarmConfId=alarmConfId, ppvcTable=ppvcTable, maxNumOfDspProfiles=maxNumOfDspProfiles, paepvcCountEntry=paepvcCountEntry, pvcPvid=pvcPvid, fwUpgrade=fwUpgrade, macDisplayTarget=macDisplayTarget, adslLineConfAnnexM=adslLineConfAnnexM, dhcpRelayTestOps=dhcpRelayTestOps, adslPortUtilRx=adslPortUtilRx, aclProfileRuleDestEndPort=aclProfileRuleDestEndPort, ppvcPvid=ppvcPvid, mltRelayTable=mltRelayTable, igmpGroupV2Vid=igmpGroupV2Vid, voipRingOn2=voipRingOn2, maxNumOfSipProfiles=maxNumOfSipProfiles, dhcpSnoopEnable=dhcpSnoopEnable, pvcUsRateLimit=pvcUsRateLimit, mltVdcRing=mltVdcRing, ipbpvcDomainTable=ipbpvcDomainTable, adslLineConfAturMaxTxPower=adslLineConfAturMaxTxPower, rpvcRouteDomainTable=rpvcRouteDomainTable, igmpGroupV2NumOfMembers=igmpGroupV2NumOfMembers, adslModeForBatchSet=adslModeForBatchSet, adslLineConfAtucInp=adslLineConfAtucInp, enetMtu=enetMtu, statistics=statistics, macFilterPortEnable=macFilterPortEnable, mltRen=mltRen, ipbpvcEdgeRouterMask=ipbpvcEdgeRouterMask, userEntry=userEntry, alarmCurrDescr=alarmCurrDescr, sipCallSvcProfileNumberPlanNdc=sipCallSvcProfileNumberPlanNdc, ipbpvcStats=ipbpvcStats, stdioTimeout=stdioTimeout, igmpLeaveCntTotal=igmpLeaveCntTotal, ipbpvcTable=ipbpvcTable, macFilterPortEntry=macFilterPortEntry, digitSetup=digitSetup, maxNumOfVoipRoute=maxNumOfVoipRoute, mltVdcTip=mltVdcTip, snrMgnMode=snrMgnMode, sipCallSvcProfileName=sipCallSvcProfileName, voipLineStatusTable=voipLineStatusTable, dspProfileName=dspProfileName, dtpvcStateTable=dtpvcStateTable, voipActiveCallStatFailAttempts=voipActiveCallStatFailAttempts, adslLineConfEntry=adslLineConfEntry, pppoeAgentEntry=pppoeAgentEntry, igmpGroupPortV2Ip=igmpGroupPortV2Ip, dscp=dscp, ipbpvcDomainName=ipbpvcDomainName, ipbpvcIfDynamicMask=ipbpvcIfDynamicMask, mcastBandwidth=mcastBandwidth, dhcpRelayArpShowIp=dhcpRelayArpShowIp, mvlanRowStatus=mvlanRowStatus, ipbpvcDomainVlanRowStatus=ipbpvcDomainVlanRowStatus, adslLineConfL2ATPR=adslLineConfL2ATPR)
mibBuilder.exportSymbols("E5-111-MIB", igmpGroupIp=igmpGroupIp, aclProfileRulePriority=aclProfileRulePriority, securedClientIndex=securedClientIndex, voipNumberPlanTable=voipNumberPlanTable, dslRateTable=dslRateTable, paepvcSessionUptime=paepvcSessionUptime, paepvcCountPadsRx=paepvcCountPadsRx, mltResult=mltResult, extAlarmstatus=extAlarmstatus, ipbpvcIfDynamicVpi=ipbpvcIfDynamicVpi, maxNumOfMvlan=maxNumOfMvlan, extAlarmTriggeredMode=extAlarmTriggeredMode, rpvc=rpvc, adslLineConfAtucCarrierMask1=adslLineConfAtucCarrierMask1, dtpvcAcName=dtpvcAcName, aclProfileRuleDmac=aclProfileRuleDmac, paepvcServiceName=paepvcServiceName, arpproxyIp=arpproxyIp, snrMgnTable=snrMgnTable, ipbpvcRouteMetric=ipbpvcRouteMetric, pvcProfileDS=pvcProfileDS, ppvcPriority=ppvcPriority, dscpPortTable=dscpPortTable, dhcpRouteGwIP=dhcpRouteGwIP, dhcpSnoopSmacverifyEnable=dhcpSnoopSmacverifyEnable, voipPortTelEntry=voipPortTelEntry, macFfArpPort=macFfArpPort, ipbpvcRouteDynamicIp=ipbpvcRouteDynamicIp, paepvcCountPppLcpEchoReqRx=paepvcCountPppLcpEchoReqRx, macFfArpVid=macFfArpVid, enetMtuEntry=enetMtuEntry, qryVidConfTable=qryVidConfTable, adslStats=adslStats, arpproxyEntry=arpproxyEntry, sipCallSvcProfilePasswd=sipCallSvcProfilePasswd, arpproxyInterfaceVid=arpproxyInterfaceVid, voipH248Status=voipH248Status, fwUpgradeCheck=fwUpgradeCheck, macFilterPortFilterMode=macFilterPortFilterMode, rpvcEntry=rpvcEntry, sipProfileSipSvr=sipProfileSipSvr, paepvcSessionEntry=paepvcSessionEntry, portOperations=portOperations, adslPort=adslPort, sipProfileProxySvr=sipProfileProxySvr, rpvcGatewayEntry=rpvcGatewayEntry, aclProfileRuleNumber=aclProfileRuleNumber, macFfArpCounterRequestRXDrop=macFfArpCounterRequestRXDrop, ipbpvcEdgeRouterIp=ipbpvcEdgeRouterIp, delayedRebootCancel=delayedRebootCancel, voipRouteMetric=voipRouteMetric, adslLineConfDSPhyr=adslLineConfDSPhyr, macFfVlanUnknownUnicast=macFfVlanUnknownUnicast, voipH248=voipH248, macff=macff, ipbpvcEdgeRouterRowStatus=ipbpvcEdgeRouterRowStatus, usBcastCtrlEnable=usBcastCtrlEnable, dhcpRouteIP=dhcpRouteIP, voipArpShowTable=voipArpShowTable, alarmCurrParam1=alarmCurrParam1, arpproxyVci=arpproxyVci, h248ProfileEphemeralPrefix=h248ProfileEphemeralPrefix, userRowStatus=userRowStatus, userAuthServerIp=userAuthServerIp, mcastBwPortTable=mcastBwPortTable, dtpvcStateVci=dtpvcStateVci, voipRouteTable=voipRouteTable, subrPortTel=subrPortTel, mcastBwPortEntry=mcastBwPortEntry, paepvcEntry=paepvcEntry, extAlarmIndex=extAlarmIndex, adslLineConfMaxRxPower=adslLineConfMaxRxPower, h248ProfileStartRTPPort=h248ProfileStartRTPPort, macFfVlanRowstatus=macFfVlanRowstatus, mvlanIndex=mvlanIndex, adslLineStatusEntry=adslLineStatusEntry, adslL2ATPRTForBatchSet=adslL2ATPRTForBatchSet, severityThresh=severityThresh, igmpProfilePortProfile=igmpProfilePortProfile, mcastBwStartIp=mcastBwStartIp, macTable=macTable, macEntry=macEntry, voipIp=voipIp, aclProfileRuleSrcStartPort=aclProfileRuleSrcStartPort, rpvcTable=rpvcTable, tlspvcVci=tlspvcVci, ipbpvcDomainEntry=ipbpvcDomainEntry, dhcpAckBySnoopFull=dhcpAckBySnoopFull, mcastDefaultBandwidth=mcastDefaultBandwidth, pvcAcName=pvcAcName, mcastBwPortEnable=mcastBwPortEnable, ipbpvcProfileUS=ipbpvcProfileUS, paepvcAcName=paepvcAcName, vlanIsolationTable=vlanIsolationTable, dhcpRelay82Suboption2Info=dhcpRelay82Suboption2Info, voipNumberPlanName=voipNumberPlanName, dtpvcRowStatus=dtpvcRowStatus, ouiFilterPortFilterMode=ouiFilterPortFilterMode, adslMaxL2RateForBatchSet=adslMaxL2RateForBatchSet, voipPortH248TermName=voipPortH248TermName, ipbpvcRouteMask=ipbpvcRouteMask, rpvcGatewayIpAddress=rpvcGatewayIpAddress, adslL2TimeForBatchSet=adslL2TimeForBatchSet, voipNumberPlanRowStatus=voipNumberPlanRowStatus, pvcStateTable=pvcStateTable, paepvcSessionsrvcname=paepvcSessionsrvcname, adslLineConfMaxL2Rate=adslLineConfMaxL2Rate, mltRLoop=mltRLoop, ouiFilterRowStatusOld=ouiFilterRowStatusOld, gbondGroupTable=gbondGroupTable, adslPortOps2=adslPortOps2, mvlanTranslateEntry=mvlanTranslateEntry, macFfStatsVid=macFfStatsVid, macFfArpFlush=macFfArpFlush, maxNumOfPvcs=maxNumOfPvcs, ppvcMemberPriority=ppvcMemberPriority, alarmCurrParam3=alarmCurrParam3, mltOption=mltOption, adslAlarmProfileForBatchSet=adslAlarmProfileForBatchSet, igmpGroupV2Table=igmpGroupV2Table, igmpLastMemQryRobust=igmpLastMemQryRobust, auditQryEnable=auditQryEnable, aesSeriesCommon=aesSeriesCommon, paepvcCountVci=paepvcCountVci, voipSipLineConfEntry=voipSipLineConfEntry, dhcpSnoopPortEntry=dhcpSnoopPortEntry, ppvcMemberTable=ppvcMemberTable, paepvcCountPadrTx=paepvcCountPadrTx, securedClientEnable=securedClientEnable, userAuthDefaultPriviledge=userAuthDefaultPriviledge, voipNumberPlanDftTable=voipNumberPlanDftTable, arpproxyMac=arpproxyMac, calixNetworks=calixNetworks, ipbpvcInterfaceMask=ipbpvcInterfaceMask, dhcpRelay82EntryEnable=dhcpRelay82EntryEnable, igmpProfileMaxGroup=igmpProfileMaxGroup, user=user, arpproxyInterfaceIp=arpproxyInterfaceIp, rpvcRouteDomainVci=rpvcRouteDomainVci, rpvcVci=rpvcVci, mvlanName=mvlanName, igmpProfileName=igmpProfileName, dhcp=dhcp, calixRegistrations=calixRegistrations, igmpGroupMemberPorts=igmpGroupMemberPorts, voipRouteEntry=voipRouteEntry, dhcpRelay82EntryOptionMode=dhcpRelay82EntryOptionMode, e5x111=e5x111, snrMgnUrTarget=snrMgnUrTarget, powerMgmtL2Atpr=powerMgmtL2Atpr, pvcStateVci=pvcStateVci, dtpvcStateSvid=dtpvcStateSvid, pppoeAgentOptionMode=pppoeAgentOptionMode, paepvcCountGenericErrRx=paepvcCountGenericErrRx, mcastBwTable=mcastBwTable, dscpMappingTable=dscpMappingTable, sipProfileRowStatus=sipProfileRowStatus, h248ProfileEphemeralSuffixLength=h248ProfileEphemeralSuffixLength, mltDialToneDelay=mltDialToneDelay, arpproxyAge=arpproxyAge, ppvcMemberVci=ppvcMemberVci, ipbpvcRouteRowStatus=ipbpvcRouteRowStatus, alarmConfEntry=alarmConfEntry, powerMgmtParamEntry=powerMgmtParamEntry, iesSeriesCommon=iesSeriesCommon, rpvcIp=rpvcIp, voipPortH248TerminationTable=voipPortH248TerminationTable, macFilterTable=macFilterTable, extAlarm=extAlarm, voipPortEnableStatus=voipPortEnableStatus, mcastBwRowStatus=mcastBwRowStatus, macFfArpCounterEntry=macFfArpCounterEntry, igmpFilterEndIp=igmpFilterEndIp, voipBootRegDelay=voipBootRegDelay, qryVid=qryVid, rpvcDSProfile=rpvcDSProfile, voipPortRXGain=voipPortRXGain, igmpProfileRowStatus=igmpProfileRowStatus, adslAturCarrierMaskForBatchSet=adslAturCarrierMaskForBatchSet, dhcpSnoopTarget=dhcpSnoopTarget, sipProfileRegSvrPort=sipProfileRegSvrPort, macFfstaticIP=macFfstaticIP, h248ProfileEphemeralStartNumber=h248ProfileEphemeralStartNumber, dtpvcDSProfile=dtpvcDSProfile, h248ProfileTable=h248ProfileTable, aclProfileRuleSmac=aclProfileRuleSmac, aclProfileRuleDestIPMask=aclProfileRuleDestIPMask, userAuthServerPort=userAuthServerPort, dslRateXtucMaxTxRate=dslRateXtucMaxTxRate, sipCallSvcProfileSoftSwitchType=sipCallSvcProfileSoftSwitchType, dslRateXturMaxTxRate=dslRateXturMaxTxRate, macffStats=macffStats, ouiFilterTableOld=ouiFilterTableOld, queryVid=queryVid, igmpCountPortTable=igmpCountPortTable, adslMinL2RateForBatchSet=adslMinL2RateForBatchSet, dtpvcSuperChannel=dtpvcSuperChannel, dhcpRouteVid=dhcpRouteVid, voipArpFlushOps=voipArpFlushOps, adslLineConfMinL2Rate=adslLineConfMinL2Rate, aclProfileRuleStartTos=aclProfileRuleStartTos, tlspvcSvid=tlspvcSvid, dhcpRelay82PrimaryServer=dhcpRelay82PrimaryServer, aclProfileRuleSrcEndPort=aclProfileRuleSrcEndPort, pvcTable=pvcTable, dhcpRelay82Enable=dhcpRelay82Enable, userAuthServerSecret=userAuthServerSecret, h248ProfileForceVer=h248ProfileForceVer, dtpvcStateSPriority=dtpvcStateSPriority, paepvcCountPppLcpEchoReplyRx=paepvcCountPppLcpEchoReplyRx, sipProfileSe=sipProfileSe, alarmConfTable=alarmConfTable, macFfStaticIPEntry=macFfStaticIPEntry, igmpGroupPortIp=igmpGroupPortIp, dslRate=dslRate, mvlanTranslateEndIp=mvlanTranslateEndIp, tlspvcRowStatus=tlspvcRowStatus, dtpvcStateEncap=dtpvcStateEncap, aclProfileActionRate=aclProfileActionRate, snrMgnUcUpshift=snrMgnUcUpshift, maxNumOfOuiFiltersPerVlan=maxNumOfOuiFiltersPerVlan, pvcStatePvid=pvcStatePvid, dtpvcTable=dtpvcTable, currNumOfMacFiltersInSystem=currNumOfMacFiltersInSystem, h248ProfilePhysicalPrefix=h248ProfilePhysicalPrefix, voipLineInfoSipLocalUri2=voipLineInfoSipLocalUri2, voipRingSetDefault=voipRingSetDefault, arpproxyFlushInterfaceMask=arpproxyFlushInterfaceMask)
