#
# PySNMP MIB module A3Com-DLSW-r1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-DLSW-R1-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 16:48:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, NotificationType, Counter64, ModuleIdentity, IpAddress, MibIdentifier, NotificationType, Counter32, enterprises, iso, TimeTicks, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Integer32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "NotificationType", "Counter64", "ModuleIdentity", "IpAddress", "MibIdentifier", "NotificationType", "Counter32", "enterprises", "iso", "TimeTicks", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Integer32", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class NBName(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 16)

class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class TAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class DlswTimeStamp(TimeTicks):
    pass

class EndStationLocation(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("other", 1), ("internal", 2), ("remote", 3), ("local", 4))

class DlcType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("other", 1), ("na", 2), ("llc", 3), ("sdlc", 4))

class LFSize(Integer32):
    pass

class Truthvalue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("false", 1), ("true", 2))

class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

class Instancepointer(Integer32):
    pass

a3Com = MibIdentifier((1, 3, 6, 1, 4, 1, 43))
brouterMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2))
dlswMIB_3Com = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 24)).setLabel("dlswMIB-3Com")
dlswNode = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 24, 1))
dlswTConn = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 24, 2))
dlswInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 24, 3))
dlswDirectory = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 24, 4))
dlswCircuit = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 24, 5))
dlswSdlc = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 24, 6))
dlswVersion = MibScalar((1, 3, 6, 1, 4, 1, 43, 2, 24, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswVersion.setStatus('mandatory')
dlswVendorID = MibScalar((1, 3, 6, 1, 4, 1, 43, 2, 24, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswVendorID.setStatus('mandatory')
dlswVersionString = MibScalar((1, 3, 6, 1, 4, 1, 43, 2, 24, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswVersionString.setStatus('mandatory')
dlswStdPacingSupport = MibScalar((1, 3, 6, 1, 4, 1, 43, 2, 24, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("adaptiveRcvWindow", 2), ("fixedRcvWindow", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswStdPacingSupport.setStatus('mandatory')
dlswStatus = MibScalar((1, 3, 6, 1, 4, 1, 43, 2, 24, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswStatus.setStatus('mandatory')
dlswUpTime = MibScalar((1, 3, 6, 1, 4, 1, 43, 2, 24, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswUpTime.setStatus('mandatory')
dlswVirtualSegmentLFSize = MibScalar((1, 3, 6, 1, 4, 1, 43, 2, 24, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswVirtualSegmentLFSize.setStatus('mandatory')
dlswResourceNBExclusivity = MibScalar((1, 3, 6, 1, 4, 1, 43, 2, 24, 1, 8), Truthvalue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswResourceNBExclusivity.setStatus('mandatory')
dlswResourceMacExclusivity = MibScalar((1, 3, 6, 1, 4, 1, 43, 2, 24, 1, 9), Truthvalue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswResourceMacExclusivity.setStatus('mandatory')
dlswTConnStat = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 1))
dlswTConnStatActiveConnections = MibScalar((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswTConnStatActiveConnections.setStatus('mandatory')
dlswTConnStatCloseIdles = MibScalar((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswTConnStatCloseIdles.setStatus('mandatory')
dlswTConnStatCloseBusys = MibScalar((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswTConnStatCloseBusys.setStatus('mandatory')
dlswTConnConfigTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 2), )
if mibBuilder.loadTexts: dlswTConnConfigTable.setStatus('mandatory')
dlswTConnConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 2, 1), ).setIndexNames((0, "A3Com-DLSW-r1-MIB", "dlswTConnConfigIndex"))
if mibBuilder.loadTexts: dlswTConnConfigEntry.setStatus('mandatory')
dlswTConnConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswTConnConfigIndex.setStatus('mandatory')
dlswTConnConfigTDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswTConnConfigTDomain.setStatus('mandatory')
dlswTConnConfigLocalTAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 2, 1, 3), TAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswTConnConfigLocalTAddr.setStatus('mandatory')
dlswTConnConfigRemoteTAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 2, 1, 4), TAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswTConnConfigRemoteTAddr.setStatus('mandatory')
dlswTConnConfigLastModifyTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 2, 1, 5), DlswTimeStamp()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswTConnConfigLastModifyTime.setStatus('mandatory')
dlswTConnConfigEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("individual", 1), ("global", 2), ("group", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswTConnConfigEntryType.setStatus('mandatory')
dlswTConnConfigGroupDefinition = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 2, 1, 7), Instancepointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswTConnConfigGroupDefinition.setStatus('mandatory')
dlswTConnConfigSetupType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("activePersistent", 2), ("activeOnDemand", 3), ("passive", 4), ("excluded", 5))).clone('passive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswTConnConfigSetupType.setStatus('mandatory')
dlswTConnConfigSapList = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswTConnConfigSapList.setStatus('mandatory')
dlswTConnConfigAdvertiseMacNB = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 2, 1, 10), Truthvalue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswTConnConfigAdvertiseMacNB.setStatus('mandatory')
dlswTConnConfigInitCirRecvWndw = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswTConnConfigInitCirRecvWndw.setStatus('mandatory')
dlswTConnConfigOpens = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswTConnConfigOpens.setStatus('mandatory')
dlswTConnConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 2, 1, 13), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswTConnConfigRowStatus.setStatus('mandatory')
dlswTConnOperTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 3), )
if mibBuilder.loadTexts: dlswTConnOperTable.setStatus('mandatory')
dlswTConnOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 3, 1), ).setIndexNames((0, "A3Com-DLSW-r1-MIB", "dlswTConnOperTDomain"), (0, "A3Com-DLSW-r1-MIB", "dlswTConnOperRemoteTAddr"))
if mibBuilder.loadTexts: dlswTConnOperEntry.setStatus('mandatory')
dlswTConnOperTDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 3, 1, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswTConnOperTDomain.setStatus('mandatory')
dlswTConnOperLocalTAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 3, 1, 2), TAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswTConnOperLocalTAddr.setStatus('mandatory')
dlswTConnOperRemoteTAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 3, 1, 3), TAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswTConnOperRemoteTAddr.setStatus('mandatory')
dlswTConnOperEntryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 3, 1, 4), DlswTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswTConnOperEntryTime.setStatus('mandatory')
dlswTConnOperConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 3, 1, 5), DlswTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswTConnOperConnectTime.setStatus('mandatory')
dlswTConnOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("connecting", 1), ("initCapExchange", 2), ("connected", 3), ("quiescing", 4), ("disconnecting", 5), ("disconnected", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswTConnOperState.setStatus('mandatory')
dlswTConnOperConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswTConnOperConfigIndex.setStatus('mandatory')
dlswTConnOperFlowCntlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undetermined", 1), ("pacing", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswTConnOperFlowCntlMode.setStatus('mandatory')
dlswTConnOperPartnerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswTConnOperPartnerVersion.setStatus('mandatory')
dlswTConnOperPartnerVendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswTConnOperPartnerVendorID.setStatus('mandatory')
dlswTConnOperPartnerVersionStr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 253))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswTConnOperPartnerVersionStr.setStatus('mandatory')
dlswTConnOperPartnerInitPacingWndw = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswTConnOperPartnerInitPacingWndw.setStatus('mandatory')
dlswTConnOperPartnerSapList = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 3, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswTConnOperPartnerSapList.setStatus('mandatory')
dlswTConnOperPartnerNBExcl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 3, 1, 14), Truthvalue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswTConnOperPartnerNBExcl.setStatus('mandatory')
dlswTConnOperPartnerMacExcl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 3, 1, 15), Truthvalue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswTConnOperPartnerMacExcl.setStatus('mandatory')
dlswTConnOperPartnerNBInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("partial", 2), ("complete", 3), ("notApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswTConnOperPartnerNBInfo.setStatus('mandatory')
dlswTConnOperPartnerMacInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("partial", 2), ("complete", 3), ("notApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswTConnOperPartnerMacInfo.setStatus('mandatory')
dlswTConnOperDiscTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 3, 1, 18), DlswTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswTConnOperDiscTime.setStatus('mandatory')
dlswTConnOperDiscReason = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("capExFailed", 2), ("transportLayerDisc", 3), ("operatorCommand", 4), ("lastCircuitDiscd", 5), ("protocolError", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswTConnOperDiscReason.setStatus('mandatory')
dlswTConnOperDiscActiveCir = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswTConnOperDiscActiveCir.setStatus('mandatory')
dlswTConnOperInDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswTConnOperInDataPkts.setStatus('mandatory')
dlswTConnOperOutDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswTConnOperOutDataPkts.setStatus('mandatory')
dlswTConnOperInDataOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswTConnOperInDataOctets.setStatus('mandatory')
dlswTConnOperOutDataOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswTConnOperOutDataOctets.setStatus('mandatory')
dlswTConnOperInCntlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswTConnOperInCntlPkts.setStatus('mandatory')
dlswTConnOperOutCntlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswTConnOperOutCntlPkts.setStatus('mandatory')
dlswTConnOperCURexSents = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswTConnOperCURexSents.setStatus('mandatory')
dlswTConnOperICRexRcvds = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswTConnOperICRexRcvds.setStatus('mandatory')
dlswTConnOperCURexRcvds = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswTConnOperCURexRcvds.setStatus('mandatory')
dlswTConnOperICRexSents = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswTConnOperICRexSents.setStatus('mandatory')
dlswTConnOperNQexSents = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswTConnOperNQexSents.setStatus('mandatory')
dlswTConnOperNRexRcvds = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 3, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswTConnOperNRexRcvds.setStatus('mandatory')
dlswTConnOperNQexRcvds = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 3, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswTConnOperNQexRcvds.setStatus('mandatory')
dlswTConnOperNRexSents = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 3, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswTConnOperNRexSents.setStatus('mandatory')
dlswTConnOperCirCreates = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 3, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswTConnOperCirCreates.setStatus('mandatory')
dlswTConnOperCircuits = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 2, 3, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswTConnOperCircuits.setStatus('mandatory')
dlswDirStat = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 24, 4, 1))
dlswDirMacEntries = MibScalar((1, 3, 6, 1, 4, 1, 43, 2, 24, 4, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswDirMacEntries.setStatus('mandatory')
dlswDirNBEntries = MibScalar((1, 3, 6, 1, 4, 1, 43, 2, 24, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswDirNBEntries.setStatus('mandatory')
dlswDirCache = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 24, 4, 2))
dlswDirMacTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 24, 4, 2, 1), )
if mibBuilder.loadTexts: dlswDirMacTable.setStatus('mandatory')
dlswDirMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 24, 4, 2, 1, 1), ).setIndexNames((0, "A3Com-DLSW-r1-MIB", "dlswDirMacIndex"))
if mibBuilder.loadTexts: dlswDirMacEntry.setStatus('mandatory')
dlswDirMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 4, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswDirMacIndex.setStatus('mandatory')
dlswDirMacMac = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 4, 2, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswDirMacMac.setStatus('mandatory')
dlswDirMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 4, 2, 1, 1, 3), MacAddress().clone(hexValue="FFFFFFFFFFFF")).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswDirMacMask.setStatus('mandatory')
dlswDirMacEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 4, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("userConfiguredPublic", 2), ("userConfiguredPrivate", 3), ("partnerCapExMsg", 4), ("dynamic", 5))).clone('userConfiguredPublic')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswDirMacEntryType.setStatus('mandatory')
dlswDirMacLocationType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 4, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("remote", 3))).clone('local')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswDirMacLocationType.setStatus('mandatory')
dlswDirMacLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 4, 2, 1, 1, 6), Instancepointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswDirMacLocation.setStatus('mandatory')
dlswDirMacStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 4, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("reachable", 2), ("notReachable", 3))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswDirMacStatus.setStatus('mandatory')
dlswDirMacLFSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 4, 2, 1, 1, 8), LFSize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswDirMacLFSize.setStatus('mandatory')
dlswDirMacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 4, 2, 1, 1, 9), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswDirMacRowStatus.setStatus('mandatory')
dlswDirNBTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 24, 4, 2, 2), )
if mibBuilder.loadTexts: dlswDirNBTable.setStatus('mandatory')
dlswDirNBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 24, 4, 2, 2, 1), ).setIndexNames((0, "A3Com-DLSW-r1-MIB", "dlswDirNBIndex"))
if mibBuilder.loadTexts: dlswDirNBEntry.setStatus('mandatory')
dlswDirNBIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 4, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswDirNBIndex.setStatus('mandatory')
dlswDirNBName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 4, 2, 2, 1, 2), NBName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswDirNBName.setStatus('mandatory')
dlswDirNBNameType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 4, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("individual", 2), ("group", 3))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswDirNBNameType.setStatus('mandatory')
dlswDirNBEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 4, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("userConfiguredPublic", 2), ("userConfiguredPrivate", 3), ("partnerCapExMsg", 4), ("dynamic", 5))).clone('userConfiguredPublic')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswDirNBEntryType.setStatus('mandatory')
dlswDirNBLocationType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 4, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("remote", 3))).clone('local')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswDirNBLocationType.setStatus('mandatory')
dlswDirNBLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 4, 2, 2, 1, 6), Instancepointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswDirNBLocation.setStatus('mandatory')
dlswDirNBStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 4, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("reachable", 2), ("notReachable", 3))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswDirNBStatus.setStatus('mandatory')
dlswDirNBLFSize = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 4, 2, 2, 1, 8), LFSize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswDirNBLFSize.setStatus('mandatory')
dlswDirNBRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 4, 2, 2, 1, 9), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswDirNBRowStatus.setStatus('mandatory')
dlswCircuitStat = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 24, 5, 1))
dlswActiveCircuits = MibScalar((1, 3, 6, 1, 4, 1, 43, 2, 24, 5, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswActiveCircuits.setStatus('mandatory')
dlswCircuitCreates = MibScalar((1, 3, 6, 1, 4, 1, 43, 2, 24, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitCreates.setStatus('mandatory')
dlswCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 24, 5, 2), )
if mibBuilder.loadTexts: dlswCircuitTable.setStatus('mandatory')
dlswCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 24, 5, 2, 1), ).setIndexNames((0, "A3Com-DLSW-r1-MIB", "dlswCircuitS1Mac"), (0, "A3Com-DLSW-r1-MIB", "dlswCircuitS1Sap"), (0, "A3Com-DLSW-r1-MIB", "dlswCircuitS2Mac"), (0, "A3Com-DLSW-r1-MIB", "dlswCircuitS2Sap"))
if mibBuilder.loadTexts: dlswCircuitEntry.setStatus('mandatory')
dlswCircuitS1Mac = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 5, 2, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitS1Mac.setStatus('mandatory')
dlswCircuitS1Sap = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 5, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitS1Sap.setStatus('mandatory')
dlswCircuitS1IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitS1IfIndex.setStatus('mandatory')
dlswCircuitS1DlcType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 5, 2, 1, 4), DlcType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitS1DlcType.setStatus('mandatory')
dlswCircuitS1RouteInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 5, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitS1RouteInfo.setStatus('mandatory')
dlswCircuitS1CircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 5, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitS1CircuitId.setStatus('mandatory')
dlswCircuitS1Dlc = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 5, 2, 1, 7), Instancepointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitS1Dlc.setStatus('mandatory')
dlswCircuitS2Mac = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 5, 2, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitS2Mac.setStatus('mandatory')
dlswCircuitS2Sap = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 5, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitS2Sap.setStatus('mandatory')
dlswCircuitS2Location = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 5, 2, 1, 10), EndStationLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitS2Location.setStatus('mandatory')
dlswCircuitS2TDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 5, 2, 1, 11), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitS2TDomain.setStatus('mandatory')
dlswCircuitS2TAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 5, 2, 1, 12), TAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitS2TAddress.setStatus('mandatory')
dlswCircuitS2CircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 5, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitS2CircuitId.setStatus('mandatory')
dlswCircuitOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 5, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("s1", 1), ("s2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitOrigin.setStatus('mandatory')
dlswCircuitEntryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 5, 2, 1, 15), DlswTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitEntryTime.setStatus('mandatory')
dlswCircuitStateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 5, 2, 1, 16), DlswTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitStateTime.setStatus('mandatory')
dlswCircuitState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 5, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("disconnected", 1), ("circuitStart", 2), ("resolvePending", 3), ("circuitPending", 4), ("circuitEstablished", 5), ("connectPending", 6), ("contactPending", 7), ("connected", 8), ("disconnectPending", 9), ("haltPending", 10), ("haltPendingNoack", 11), ("circuitRestart", 12), ("restartPending", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswCircuitState.setStatus('mandatory')
dlswCircuitPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 5, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unsupported", 0), ("low", 1), ("medium", 2), ("high", 3), ("highest", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitPriority.setStatus('mandatory')
dlswCircuitFCSendGrantedUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 5, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitFCSendGrantedUnits.setStatus('mandatory')
dlswCircuitFCSendCurrentWndw = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 5, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitFCSendCurrentWndw.setStatus('mandatory')
dlswCircuitFCRecvGrantedUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 5, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitFCRecvGrantedUnits.setStatus('mandatory')
dlswCircuitFCRecvCurrentWndw = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 5, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitFCRecvCurrentWndw.setStatus('mandatory')
dlswCircuitFCLargestRecvGranted = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 5, 2, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitFCLargestRecvGranted.setStatus('mandatory')
dlswCircuitFCLargestSendGranted = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 5, 2, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitFCLargestSendGranted.setStatus('mandatory')
dlswCircuitFCHalveWndwSents = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 5, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitFCHalveWndwSents.setStatus('mandatory')
dlswCircuitFCResetOpSents = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 5, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitFCResetOpSents.setStatus('mandatory')
dlswCircuitFCHalveWndwRcvds = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 5, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitFCHalveWndwRcvds.setStatus('mandatory')
dlswCircuitFCResetOpRcvds = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 5, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitFCResetOpRcvds.setStatus('mandatory')
dlswCircuitDiscReasonLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 5, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("endStationDiscRcvd", 1), ("endStationDlcError", 2), ("protocolError", 3), ("operatorCommand", 4), ("haltDlRcvd", 5), ("haltDlNoAckRcvd", 6), ("transportConnClosed", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitDiscReasonLocal.setStatus('mandatory')
dlswCircuitDiscReasonRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 5, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("endStationDiscRcvd", 1), ("endStationDlcError", 2), ("protocolError", 3), ("operatorCommand", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitDiscReasonRemote.setStatus('mandatory')
dlswCircuitDiscReasonRemoteData = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 24, 5, 2, 1, 31), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlswCircuitDiscReasonRemoteData.setStatus('mandatory')
dlswTrapControl = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 24, 1, 10))
dlswTrapCntlTConn = MibScalar((1, 3, 6, 1, 4, 1, 43, 2, 24, 1, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswTrapCntlTConn.setStatus('mandatory')
dlswTrapCntlCircuit = MibScalar((1, 3, 6, 1, 4, 1, 43, 2, 24, 1, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlswTrapCntlCircuit.setStatus('mandatory')
dlswTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 24, 7))
dlswTrapTConnUp = NotificationType((1, 3, 6, 1, 4, 1, 43, 2, 24) + (0,1)).setObjects(("A3Com-DLSW-r1-MIB", "dlswTConnOperTDomain"), ("A3Com-DLSW-r1-MIB", "dlswTConnOperRemoteTAddr"))
dlswTrapTConnDown = NotificationType((1, 3, 6, 1, 4, 1, 43, 2, 24) + (0,2)).setObjects(("A3Com-DLSW-r1-MIB", "dlswTConnOperTDomain"), ("A3Com-DLSW-r1-MIB", "dlswTConnOperRemoteTAddr"))
dlswTrapCircuitUp = NotificationType((1, 3, 6, 1, 4, 1, 43, 2, 24) + (0,3)).setObjects(("A3Com-DLSW-r1-MIB", "dlswCircuitS1Mac"), ("A3Com-DLSW-r1-MIB", "dlswCircuitS1Sap"), ("A3Com-DLSW-r1-MIB", "dlswCircuitS2Mac"), ("A3Com-DLSW-r1-MIB", "dlswCircuitS2Sap"))
dlswTrapCircuitDown = NotificationType((1, 3, 6, 1, 4, 1, 43, 2, 24) + (0,4)).setObjects(("A3Com-DLSW-r1-MIB", "dlswCircuitS1Mac"), ("A3Com-DLSW-r1-MIB", "dlswCircuitS1Sap"), ("A3Com-DLSW-r1-MIB", "dlswCircuitS2Mac"), ("A3Com-DLSW-r1-MIB", "dlswCircuitS2Sap"))
mibBuilder.exportSymbols("A3Com-DLSW-r1-MIB", dlswDirMacEntryType=dlswDirMacEntryType, dlswCircuitFCHalveWndwSents=dlswCircuitFCHalveWndwSents, dlswDirNBNameType=dlswDirNBNameType, dlswCircuitEntryTime=dlswCircuitEntryTime, dlswCircuitFCHalveWndwRcvds=dlswCircuitFCHalveWndwRcvds, dlswDirNBLFSize=dlswDirNBLFSize, dlswDirNBEntry=dlswDirNBEntry, dlswTConnOperPartnerVersion=dlswTConnOperPartnerVersion, dlswCircuitS1CircuitId=dlswCircuitS1CircuitId, dlswTConnConfigSetupType=dlswTConnConfigSetupType, dlswDirNBEntries=dlswDirNBEntries, dlswDirMacLFSize=dlswDirMacLFSize, dlswTConnOperDiscReason=dlswTConnOperDiscReason, RowStatus=RowStatus, TAddress=TAddress, dlswTConnOperRemoteTAddr=dlswTConnOperRemoteTAddr, dlswDirMacEntries=dlswDirMacEntries, dlswTConnOperState=dlswTConnOperState, dlswCircuitFCLargestSendGranted=dlswCircuitFCLargestSendGranted, dlswMIB_3Com=dlswMIB_3Com, dlswTConnOperDiscTime=dlswTConnOperDiscTime, dlswTConnOperICRexSents=dlswTConnOperICRexSents, dlswTConnConfigIndex=dlswTConnConfigIndex, dlswCircuitState=dlswCircuitState, dlswCircuitDiscReasonRemoteData=dlswCircuitDiscReasonRemoteData, dlswTConnConfigGroupDefinition=dlswTConnConfigGroupDefinition, Truthvalue=Truthvalue, dlswTConnOperEntry=dlswTConnOperEntry, LFSize=LFSize, dlswTraps=dlswTraps, dlswResourceMacExclusivity=dlswResourceMacExclusivity, dlswUpTime=dlswUpTime, dlswCircuitS1Sap=dlswCircuitS1Sap, dlswTrapTConnUp=dlswTrapTConnUp, dlswTConnConfigEntryType=dlswTConnConfigEntryType, dlswCircuitS2TDomain=dlswCircuitS2TDomain, dlswCircuitFCResetOpSents=dlswCircuitFCResetOpSents, dlswDirNBRowStatus=dlswDirNBRowStatus, dlswDirStat=dlswDirStat, dlswTConnOperPartnerInitPacingWndw=dlswTConnOperPartnerInitPacingWndw, dlswCircuitS1Mac=dlswCircuitS1Mac, dlswCircuitS1IfIndex=dlswCircuitS1IfIndex, dlswDirNBEntryType=dlswDirNBEntryType, dlswTConnOperTDomain=dlswTConnOperTDomain, dlswTConnOperCURexRcvds=dlswTConnOperCURexRcvds, dlswCircuitStateTime=dlswCircuitStateTime, dlswTConnConfigAdvertiseMacNB=dlswTConnConfigAdvertiseMacNB, dlswTConnConfigRowStatus=dlswTConnConfigRowStatus, dlswCircuitS2CircuitId=dlswCircuitS2CircuitId, dlswDirectory=dlswDirectory, dlswTConnConfigLastModifyTime=dlswTConnConfigLastModifyTime, dlswTrapCircuitDown=dlswTrapCircuitDown, dlswTConnOperNQexRcvds=dlswTConnOperNQexRcvds, dlswTConnConfigEntry=dlswTConnConfigEntry, dlswCircuitS2Sap=dlswCircuitS2Sap, MacAddress=MacAddress, dlswCircuitTable=dlswCircuitTable, dlswVirtualSegmentLFSize=dlswVirtualSegmentLFSize, dlswTConnOperPartnerMacInfo=dlswTConnOperPartnerMacInfo, dlswCircuitFCSendCurrentWndw=dlswCircuitFCSendCurrentWndw, dlswTConnStatCloseBusys=dlswTConnStatCloseBusys, dlswCircuitStat=dlswCircuitStat, dlswCircuitS1DlcType=dlswCircuitS1DlcType, dlswTrapTConnDown=dlswTrapTConnDown, dlswCircuitCreates=dlswCircuitCreates, dlswTConnOperCURexSents=dlswTConnOperCURexSents, dlswCircuitOrigin=dlswCircuitOrigin, brouterMIB=brouterMIB, dlswSdlc=dlswSdlc, dlswCircuitDiscReasonRemote=dlswCircuitDiscReasonRemote, dlswDirCache=dlswDirCache, dlswVersionString=dlswVersionString, dlswTConnOperOutDataOctets=dlswTConnOperOutDataOctets, dlswCircuitS1Dlc=dlswCircuitS1Dlc, dlswCircuitS1RouteInfo=dlswCircuitS1RouteInfo, dlswTConnStat=dlswTConnStat, a3Com=a3Com, dlswTConnOperPartnerVendorID=dlswTConnOperPartnerVendorID, dlswVendorID=dlswVendorID, dlswTConnStatCloseIdles=dlswTConnStatCloseIdles, dlswDirMacTable=dlswDirMacTable, dlswTConnOperNRexRcvds=dlswTConnOperNRexRcvds, dlswTConnOperInCntlPkts=dlswTConnOperInCntlPkts, dlswTConnStatActiveConnections=dlswTConnStatActiveConnections, dlswDirMacEntry=dlswDirMacEntry, dlswDirMacStatus=dlswDirMacStatus, dlswCircuitFCResetOpRcvds=dlswCircuitFCResetOpRcvds, dlswTConnConfigLocalTAddr=dlswTConnConfigLocalTAddr, dlswDirMacRowStatus=dlswDirMacRowStatus, dlswCircuitDiscReasonLocal=dlswCircuitDiscReasonLocal, dlswTrapCntlTConn=dlswTrapCntlTConn, dlswTConnOperEntryTime=dlswTConnOperEntryTime, dlswTConnOperICRexRcvds=dlswTConnOperICRexRcvds, dlswTConnOperPartnerVersionStr=dlswTConnOperPartnerVersionStr, dlswTConnConfigInitCirRecvWndw=dlswTConnConfigInitCirRecvWndw, dlswTConnOperCirCreates=dlswTConnOperCirCreates, dlswCircuitS2Location=dlswCircuitS2Location, dlswDirNBStatus=dlswDirNBStatus, dlswTConnOperLocalTAddr=dlswTConnOperLocalTAddr, dlswTConnOperPartnerSapList=dlswTConnOperPartnerSapList, dlswCircuitEntry=dlswCircuitEntry, dlswTConnOperInDataOctets=dlswTConnOperInDataOctets, dlswDirMacIndex=dlswDirMacIndex, dlswStdPacingSupport=dlswStdPacingSupport, dlswTConnOperOutCntlPkts=dlswTConnOperOutCntlPkts, dlswTConnOperOutDataPkts=dlswTConnOperOutDataPkts, dlswDirMacMask=dlswDirMacMask, dlswVersion=dlswVersion, dlswTrapCircuitUp=dlswTrapCircuitUp, dlswTConnOperPartnerNBExcl=dlswTConnOperPartnerNBExcl, dlswTConnOperCircuits=dlswTConnOperCircuits, dlswTConnOperConnectTime=dlswTConnOperConnectTime, dlswDirMacLocationType=dlswDirMacLocationType, dlswTConnOperTable=dlswTConnOperTable, dlswTConnOperConfigIndex=dlswTConnOperConfigIndex, dlswDirNBName=dlswDirNBName, dlswCircuitPriority=dlswCircuitPriority, dlswCircuitS2Mac=dlswCircuitS2Mac, dlswTConn=dlswTConn, dlswTConnOperNRexSents=dlswTConnOperNRexSents, dlswDirMacLocation=dlswDirMacLocation, dlswCircuit=dlswCircuit, dlswCircuitS2TAddress=dlswCircuitS2TAddress, dlswStatus=dlswStatus, dlswTConnConfigTDomain=dlswTConnConfigTDomain, dlswActiveCircuits=dlswActiveCircuits, dlswDirNBLocation=dlswDirNBLocation, dlswTConnOperFlowCntlMode=dlswTConnOperFlowCntlMode, dlswTConnConfigSapList=dlswTConnConfigSapList, dlswTConnOperInDataPkts=dlswTConnOperInDataPkts, dlswCircuitFCSendGrantedUnits=dlswCircuitFCSendGrantedUnits, dlswTConnOperNQexSents=dlswTConnOperNQexSents, Instancepointer=Instancepointer, dlswCircuitFCRecvCurrentWndw=dlswCircuitFCRecvCurrentWndw, dlswCircuitFCRecvGrantedUnits=dlswCircuitFCRecvGrantedUnits, dlswInterface=dlswInterface, NBName=NBName, dlswDirNBIndex=dlswDirNBIndex, dlswTConnOperDiscActiveCir=dlswTConnOperDiscActiveCir, dlswDirNBTable=dlswDirNBTable, DlswTimeStamp=DlswTimeStamp, dlswTrapCntlCircuit=dlswTrapCntlCircuit, dlswDirNBLocationType=dlswDirNBLocationType, DlcType=DlcType, dlswTConnOperPartnerNBInfo=dlswTConnOperPartnerNBInfo, dlswCircuitFCLargestRecvGranted=dlswCircuitFCLargestRecvGranted, dlswResourceNBExclusivity=dlswResourceNBExclusivity, dlswTConnConfigTable=dlswTConnConfigTable, EndStationLocation=EndStationLocation, dlswTConnConfigRemoteTAddr=dlswTConnConfigRemoteTAddr, dlswTrapControl=dlswTrapControl, dlswDirMacMac=dlswDirMacMac, dlswTConnConfigOpens=dlswTConnConfigOpens, dlswNode=dlswNode, dlswTConnOperPartnerMacExcl=dlswTConnOperPartnerMacExcl)
