#
# PySNMP MIB module HM2-L2REDUNDANCY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HM2-L2REDUNDANCY-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:18:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
hm2ConfigurationMibs, HmEnabledStatus = mibBuilder.importSymbols("HM2-TC-MIB", "hm2ConfigurationMibs", "HmEnabledStatus")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
MibIdentifier, Bits, Counter64, iso, ObjectIdentity, Counter32, IpAddress, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Integer32, Gauge32, ModuleIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Bits", "Counter64", "iso", "ObjectIdentity", "Counter32", "IpAddress", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Integer32", "Gauge32", "ModuleIdentity", "NotificationType")
MacAddress, TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "RowStatus", "DisplayString")
hm2L2RedundancyMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 11, 40))
hm2L2RedundancyMib.setRevisions(('2011-11-23 00:00',))
if mibBuilder.loadTexts: hm2L2RedundancyMib.setLastUpdated('201111230000Z')
if mibBuilder.loadTexts: hm2L2RedundancyMib.setOrganization('Hirschmann Automation and Control GmbH')
hm2L2RedundancyMibNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 40, 0))
hm2L2RedundancyMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 40, 1))
hm2L2RedundancyMibSNMPExtensionGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 40, 3))
hm2MrpMibGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 1))
hm2SrmMibGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 4))
hm2RingRedMibGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 7))
hm2RingCouplingMibGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 8))
hm2RedundantCplConfigMibGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 9))
class Hm2CplPortOpState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("not-connected", 1), ("active", 2), ("standby", 3), ("not-applicable", 4))

hm2MrpTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 1, 1), )
if mibBuilder.loadTexts: hm2MrpTable.setStatus('current')
hm2MrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 1, 1, 1), ).setIndexNames((0, "HM2-L2REDUNDANCY-MIB", "hm2MrpDomainID"))
if mibBuilder.loadTexts: hm2MrpEntry.setStatus('current')
hm2MrpDomainID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 1, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hm2MrpDomainID.setStatus('current')
hm2MrpDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 1, 1, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2MrpDomainName.setStatus('current')
hm2MrpRingport1GroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2MrpRingport1GroupID.setStatus('obsolete')
hm2MrpRingport1IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2MrpRingport1IfIndex.setStatus('current')
hm2MrpRingport1OperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("blocked", 2), ("forwarding", 3), ("notConnected", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2MrpRingport1OperState.setStatus('current')
hm2MrpRingport2GroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 1, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2MrpRingport2GroupID.setStatus('obsolete')
hm2MrpRingport2IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 1, 1, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2MrpRingport2IfIndex.setStatus('current')
hm2MrpRingport2OperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("blocked", 2), ("forwarding", 3), ("notConnected", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2MrpRingport2OperState.setStatus('current')
hm2MrpRoleAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("client", 1), ("manager", 2))).clone('client')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2MrpRoleAdminState.setStatus('current')
hm2MrpRoleOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("client", 1), ("manager", 2), ("undefined", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2MrpRoleOperState.setStatus('current')
hm2MrpRecoveryDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("delay500", 1), ("delay200", 2), ("delay30", 3), ("delay10", 4))).clone('delay200')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2MrpRecoveryDelay.setStatus('current')
hm2MrpRecoveryDelaySupported = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supportedAll", 1), ("supported200500", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2MrpRecoveryDelaySupported.setStatus('current')
hm2MrpVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 1, 1, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2MrpVlanID.setStatus('current')
hm2MrpMRMPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(32768)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2MrpMRMPriority.setStatus('current')
hm2MrpMRMReactOnLinkChange = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2MrpMRMReactOnLinkChange.setStatus('current')
hm2MrpMRMRingOpenCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2MrpMRMRingOpenCount.setStatus('current')
hm2MrpMRMLastRingOpenChange = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 1, 1, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2MrpMRMLastRingOpenChange.setStatus('current')
hm2MrpMRMRoundTripDelayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 1, 1, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2MrpMRMRoundTripDelayMax.setStatus('current')
hm2MrpMRMRoundTripDelayMin = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 1, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2MrpMRMRoundTripDelayMin.setStatus('current')
hm2MrpMRMRoundTripDelayReset = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2MrpMRMRoundTripDelayReset.setStatus('current')
hm2MrpMRMNonBlockingMRCSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2MrpMRMNonBlockingMRCSupported.setStatus('current')
hm2MrpMRCBlockedSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2MrpMRCBlockedSupported.setStatus('current')
hm2MrpRingOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("undefined", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2MrpRingOperState.setStatus('current')
hm2MrpRedundancyOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("available", 1), ("notAvailable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2MrpRedundancyOperState.setStatus('current')
hm2MrpConfigOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noError", 1), ("ringportLinkError", 2), ("multipleMRM", 3), ("singleSideReceive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2MrpConfigOperState.setStatus('current')
hm2MrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 1, 1, 1, 26), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2MrpRowStatus.setStatus('current')
hm2MrpRingport2FixedBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 1, 1, 1, 27), HmEnabledStatus().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2MrpRingport2FixedBackup.setStatus('current')
hm2MrpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 1, 2))
hm2MrpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 1, 2, 1))
hm2MrpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 1, 2, 1, 1)).setObjects(("HM2-L2REDUNDANCY-MIB", "hm2MrpDomainBasicGroup"), ("HM2-L2REDUNDANCY-MIB", "hm2MrpDomainManagerGroup"), ("HM2-L2REDUNDANCY-MIB", "hm2MrpNotificationsGroup"), ("HM2-L2REDUNDANCY-MIB", "hm2MrpDomainDiagGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hm2MrpCompliance = hm2MrpCompliance.setStatus('current')
hm2MrpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 1, 2, 2))
hm2MrpDomainBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 1, 2, 2, 1)).setObjects(("HM2-L2REDUNDANCY-MIB", "hm2MrpDomainID"), ("HM2-L2REDUNDANCY-MIB", "hm2MrpDomainName"), ("HM2-L2REDUNDANCY-MIB", "hm2MrpRingport1IfIndex"), ("HM2-L2REDUNDANCY-MIB", "hm2MrpRingport1OperState"), ("HM2-L2REDUNDANCY-MIB", "hm2MrpRingport2IfIndex"), ("HM2-L2REDUNDANCY-MIB", "hm2MrpRingport2OperState"), ("HM2-L2REDUNDANCY-MIB", "hm2MrpRoleAdminState"), ("HM2-L2REDUNDANCY-MIB", "hm2MrpRoleOperState"), ("HM2-L2REDUNDANCY-MIB", "hm2MrpRecoveryDelay"), ("HM2-L2REDUNDANCY-MIB", "hm2MrpRecoveryDelaySupported"), ("HM2-L2REDUNDANCY-MIB", "hm2MrpVlanID"), ("HM2-L2REDUNDANCY-MIB", "hm2MrpMRCBlockedSupported"), ("HM2-L2REDUNDANCY-MIB", "hm2MrpRedundancyOperState"), ("HM2-L2REDUNDANCY-MIB", "hm2MrpConfigOperState"), ("HM2-L2REDUNDANCY-MIB", "hm2MrpRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hm2MrpDomainBasicGroup = hm2MrpDomainBasicGroup.setStatus('current')
hm2MrpDomainManagerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 1, 2, 2, 2)).setObjects(("HM2-L2REDUNDANCY-MIB", "hm2MrpMRMPriority"), ("HM2-L2REDUNDANCY-MIB", "hm2MrpMRMReactOnLinkChange"), ("HM2-L2REDUNDANCY-MIB", "hm2MrpMRMNonBlockingMRCSupported"), ("HM2-L2REDUNDANCY-MIB", "hm2MrpRingOperState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hm2MrpDomainManagerGroup = hm2MrpDomainManagerGroup.setStatus('current')
hm2MrpDomainDiagGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 1, 2, 2, 3)).setObjects(("HM2-L2REDUNDANCY-MIB", "hm2MrpMRMRingOpenCount"), ("HM2-L2REDUNDANCY-MIB", "hm2MrpMRMLastRingOpenChange"), ("HM2-L2REDUNDANCY-MIB", "hm2MrpMRMRoundTripDelayMax"), ("HM2-L2REDUNDANCY-MIB", "hm2MrpMRMRoundTripDelayMin"), ("HM2-L2REDUNDANCY-MIB", "hm2MrpMRMRoundTripDelayReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hm2MrpDomainDiagGroup = hm2MrpDomainDiagGroup.setStatus('current')
hm2MrpNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 1, 2, 2, 4)).setObjects(("HM2-L2REDUNDANCY-MIB", "hm2MrpReconfig"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hm2MrpNotificationsGroup = hm2MrpNotificationsGroup.setStatus('current')
hm2MrpFastMrp = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("supported", 1), ("notSupported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2MrpFastMrp.setStatus('current')
hm2SrmGlobalAdminState = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 4, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SrmGlobalAdminState.setStatus('current')
hm2SrmMaxInstances = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SrmMaxInstances.setStatus('current')
hm2SrmTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 4, 3), )
if mibBuilder.loadTexts: hm2SrmTable.setStatus('current')
hm2SrmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 4, 3, 1), ).setIndexNames((0, "HM2-L2REDUNDANCY-MIB", "hm2SrmRingID"))
if mibBuilder.loadTexts: hm2SrmEntry.setStatus('current')
hm2SrmRingID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 4, 3, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hm2SrmRingID.setStatus('current')
hm2SrmAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manager", 1), ("redundantManager", 2), ("singleManager", 3))).clone('manager')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2SrmAdminState.setStatus('current')
hm2SrmOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("manager", 1), ("redundantManager", 2), ("singleManager", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SrmOperState.setStatus('current')
hm2SrmVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4042))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2SrmVlanID.setStatus('current')
hm2SrmMRPDomainID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 4, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16).clone(hexValue="FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2SrmMRPDomainID.setStatus('current')
hm2SrmPartnerMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 4, 3, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SrmPartnerMAC.setStatus('current')
hm2SrmSubRingProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4))).clone(namedValues=NamedValues(("iec-62439-mrp", 4))).clone('iec-62439-mrp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2SrmSubRingProtocol.setStatus('current')
hm2SrmSubRingName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 4, 3, 1, 8), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2SrmSubRingName.setStatus('current')
hm2SrmSubRingPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 4, 3, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2SrmSubRingPortIfIndex.setStatus('current')
hm2SrmSubRingPortOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 4, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("blocked", 2), ("forwarding", 3), ("not-connected", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SrmSubRingPortOperState.setStatus('current')
hm2SrmSubRingOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 4, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undefined", 1), ("open", 2), ("closed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SrmSubRingOperState.setStatus('current')
hm2SrmRedundancyOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 4, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("redGuaranteed", 1), ("redNotGuaranteed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SrmRedundancyOperState.setStatus('current')
hm2SrmConfigOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 4, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noError", 1), ("ringPortLinkError", 2), ("multipleSRM", 3), ("noPartnerManager", 4), ("concurrentVLAN", 5), ("concurrentPort", 6), ("concurrentRedundancy", 7), ("trunkMember", 8), ("sharedVLAN", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SrmConfigOperState.setStatus('current')
hm2SrmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 4, 3, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2SrmRowStatus.setStatus('current')
hm2RingRedAdminState = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 7, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2RingRedAdminState.setStatus('current')
hm2RingRedMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ring-switch", 1))).clone('ring-switch')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2RingRedMode.setStatus('current')
hm2RingRedPrimaryIntf = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 7, 3), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2RingRedPrimaryIntf.setStatus('current')
hm2RingRedPrimaryIntfState = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-available", 1), ("active", 2), ("inactive", 3))).clone('not-available')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2RingRedPrimaryIntfState.setStatus('current')
hm2RingRedSecondaryIntf = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 7, 5), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2RingRedSecondaryIntf.setStatus('current')
hm2RingRedSecondaryIntfState = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-available", 1), ("active", 2), ("inactive", 3))).clone('not-available')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2RingRedSecondaryIntfState.setStatus('current')
hm2RingCouplingTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 8, 1), )
if mibBuilder.loadTexts: hm2RingCouplingTable.setStatus('current')
hm2RingCouplingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 8, 1, 1), ).setIndexNames((0, "HM2-L2REDUNDANCY-MIB", "hm2RingCplInterconnIfIndex"))
if mibBuilder.loadTexts: hm2RingCouplingEntry.setStatus('current')
hm2RingCplInterconnIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 8, 1, 1, 1), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2RingCplInterconnIfIndex.setStatus('current')
hm2RingCplInterconnIfOpState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 8, 1, 1, 2), Hm2CplPortOpState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2RingCplInterconnIfOpState.setStatus('current')
hm2RingCplControlIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 8, 1, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2RingCplControlIfIndex.setStatus('current')
hm2RingCplControlIfOpState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 8, 1, 1, 4), Hm2CplPortOpState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2RingCplControlIfOpState.setStatus('current')
hm2RingCplPartnerInterconnIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 8, 1, 1, 5), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2RingCplPartnerInterconnIfIndex.setStatus('current')
hm2RingCplPartnerInterconnIfOpState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 8, 1, 1, 6), Hm2CplPortOpState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2RingCplPartnerInterconnIfOpState.setStatus('current')
hm2RingCplPartnerIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 8, 1, 1, 7), InetAddressType().clone('ipv4')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2RingCplPartnerIpAddrType.setStatus('current')
hm2RingCplPartnerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 8, 1, 1, 8), InetAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2RingCplPartnerIpAddr.setStatus('current')
hm2RingCplCouplingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("single", 1), ("dual-master-inband", 2), ("dual-master-outband", 3), ("dual-slave-inband", 4), ("dual-slave-outband", 5), ("unknown", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2RingCplCouplingMode.setStatus('current')
hm2RingCplControlModeOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("outband", 1), ("inband", 2), ("unknown", 3), ("local", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2RingCplControlModeOperState.setStatus('current')
hm2RingCplModeOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 8, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("slaveOff", 1), ("slaveOn", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2RingCplModeOperState.setStatus('current')
hm2RingCplOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 8, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("underCreation", 1), ("slave", 2), ("master", 3), ("local", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2RingCplOperState.setStatus('current')
hm2RingCplConfigOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 8, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("noError", 1), ("slaveCouplingLinkError", 2), ("slaveControlLinkError", 3), ("masterControlLinkError", 4), ("twoSlaves", 5), ("localPartnerLinkError", 6), ("localInvalidCouplingPort", 7), ("couplingPortNotAvailable", 8), ("controlPortNotAvailable", 9), ("partnerPortNotAvailable", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2RingCplConfigOperState.setStatus('current')
hm2RingCplCouplingLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 8, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("basicRedundancy", 1), ("extendedRedundancy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2RingCplCouplingLinks.setStatus('current')
hm2RingCplExtendedDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 8, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noError", 1), ("basicRedundancyInactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2RingCplExtendedDiag.setStatus('current')
hm2RingCplNetCoupling = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 8, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ringCoupling", 1), ("netCoupling", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2RingCplNetCoupling.setStatus('current')
hm2RingCplRedOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 8, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("redGuaranteed", 1), ("redNotGuaranteed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2RingCplRedOperState.setStatus('current')
hm2RingCplRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 8, 1, 1, 22), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2RingCplRowStatus.setStatus('current')
hm2RedundantCplAdminState = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 9, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2RedundantCplAdminState.setStatus('current')
hm2RedundantCplInPrimaryPort = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 9, 2), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2RedundantCplInPrimaryPort.setStatus('current')
hm2RedundantCplOutPrimaryPort = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 9, 3), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2RedundantCplOutPrimaryPort.setStatus('current')
hm2RedundantCplInSecondaryPort = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 9, 4), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2RedundantCplInSecondaryPort.setStatus('current')
hm2RedundantCplOutSecondaryPort = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 9, 5), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2RedundantCplOutSecondaryPort.setStatus('current')
hm2RedundantCplRole = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("master", 1), ("slave", 2), ("auto", 4))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2RedundantCplRole.setStatus('current')
hm2RedundantCplCurrentRole = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 9, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("master", 1), ("slave", 2), ("listening", 3), ("error", 4), ("disabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2RedundantCplCurrentRole.setStatus('current')
hm2RedundantCplTimeout = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 9, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 60000)).clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2RedundantCplTimeout.setStatus('current')
hm2RedundantCplPartner = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 9, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2RedundantCplPartner.setStatus('current')
hm2RedundantCplPartnerPrimaryPort = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 9, 10), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2RedundantCplPartnerPrimaryPort.setStatus('current')
hm2RedundantCplPartnerSecodaryPort = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 9, 11), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2RedundantCplPartnerSecodaryPort.setStatus('current')
hm2RedundantCplState = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 9, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forwarding", 1), ("blocking", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2RedundantCplState.setStatus('current')
hm2RedundantCplRedundancyState = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 9, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("redAvailable", 1), ("redNotAvailable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2RedundantCplRedundancyState.setStatus('current')
hm2RedundantCplPartnerIPAddrType = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 9, 14), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2RedundantCplPartnerIPAddrType.setStatus('current')
hm2RedundantCplPartnerIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 40, 1, 9, 15), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2RedundantCplPartnerIPAddr.setStatus('current')
hm2MrpReconfig = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 40, 0, 1)).setObjects(("HM2-L2REDUNDANCY-MIB", "hm2MrpRingOperState"))
if mibBuilder.loadTexts: hm2MrpReconfig.setStatus('current')
hm2SrmReconfig = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 40, 0, 2)).setObjects(("HM2-L2REDUNDANCY-MIB", "hm2SrmRingID"), ("HM2-L2REDUNDANCY-MIB", "hm2SrmSubRingOperState"))
if mibBuilder.loadTexts: hm2SrmReconfig.setStatus('current')
hm2RingCplReconfig = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 40, 0, 3)).setObjects(("HM2-L2REDUNDANCY-MIB", "hm2RingCplInterconnIfOpState"), ("HM2-L2REDUNDANCY-MIB", "hm2RingCplPartnerInterconnIfOpState"), ("HM2-L2REDUNDANCY-MIB", "hm2RingCplPartnerIpAddrType"), ("HM2-L2REDUNDANCY-MIB", "hm2RingCplPartnerIpAddr"))
if mibBuilder.loadTexts: hm2RingCplReconfig.setStatus('current')
hm2RedundantCplReconfig = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 40, 0, 4)).setObjects(("HM2-L2REDUNDANCY-MIB", "hm2RedundantCplCurrentRole"), ("HM2-L2REDUNDANCY-MIB", "hm2RedundantCplState"))
if mibBuilder.loadTexts: hm2RedundantCplReconfig.setStatus('current')
hm2RingCouplingMibSESGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 40, 3, 8))
hm2RedundantCplSESGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 40, 3, 9))
hm2RingCouplingInvalidPortConfiguration = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 11, 40, 3, 8, 1))
if mibBuilder.loadTexts: hm2RingCouplingInvalidPortConfiguration.setStatus('current')
hm2RedundantCplPortsMissing = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 11, 40, 3, 9, 1))
if mibBuilder.loadTexts: hm2RedundantCplPortsMissing.setStatus('current')
mibBuilder.exportSymbols("HM2-L2REDUNDANCY-MIB", hm2MrpRowStatus=hm2MrpRowStatus, hm2SrmSubRingPortIfIndex=hm2SrmSubRingPortIfIndex, hm2MrpDomainDiagGroup=hm2MrpDomainDiagGroup, hm2SrmGlobalAdminState=hm2SrmGlobalAdminState, hm2MrpVlanID=hm2MrpVlanID, hm2MrpDomainID=hm2MrpDomainID, Hm2CplPortOpState=Hm2CplPortOpState, hm2MrpTable=hm2MrpTable, hm2MrpMibGroup=hm2MrpMibGroup, hm2RingCplInterconnIfOpState=hm2RingCplInterconnIfOpState, hm2MrpCompliance=hm2MrpCompliance, hm2MrpMRMRoundTripDelayMin=hm2MrpMRMRoundTripDelayMin, hm2MrpRingport1IfIndex=hm2MrpRingport1IfIndex, hm2RingRedMibGroup=hm2RingRedMibGroup, hm2RingCplNetCoupling=hm2RingCplNetCoupling, hm2MrpMRCBlockedSupported=hm2MrpMRCBlockedSupported, hm2RedundantCplRole=hm2RedundantCplRole, hm2RingCouplingMibGroup=hm2RingCouplingMibGroup, hm2SrmRingID=hm2SrmRingID, hm2SrmSubRingOperState=hm2SrmSubRingOperState, hm2MrpRingport2FixedBackup=hm2MrpRingport2FixedBackup, hm2MrpMRMLastRingOpenChange=hm2MrpMRMLastRingOpenChange, hm2RingRedMode=hm2RingRedMode, hm2MrpMRMRingOpenCount=hm2MrpMRMRingOpenCount, hm2RingCplModeOperState=hm2RingCplModeOperState, hm2L2RedundancyMibObjects=hm2L2RedundancyMibObjects, hm2RingCplExtendedDiag=hm2RingCplExtendedDiag, hm2L2RedundancyMibNotifications=hm2L2RedundancyMibNotifications, hm2MrpDomainBasicGroup=hm2MrpDomainBasicGroup, hm2MrpRingport1GroupID=hm2MrpRingport1GroupID, hm2SrmSubRingName=hm2SrmSubRingName, hm2RedundantCplInPrimaryPort=hm2RedundantCplInPrimaryPort, hm2RingRedSecondaryIntfState=hm2RingRedSecondaryIntfState, hm2RingRedPrimaryIntf=hm2RingRedPrimaryIntf, hm2RedundantCplPartnerPrimaryPort=hm2RedundantCplPartnerPrimaryPort, hm2L2RedundancyMib=hm2L2RedundancyMib, hm2MrpRingport2OperState=hm2MrpRingport2OperState, hm2RedundantCplPartnerIPAddr=hm2RedundantCplPartnerIPAddr, hm2RingCplControlIfIndex=hm2RingCplControlIfIndex, hm2SrmMaxInstances=hm2SrmMaxInstances, hm2SrmRowStatus=hm2SrmRowStatus, hm2RedundantCplSESGroup=hm2RedundantCplSESGroup, hm2MrpRingport2IfIndex=hm2MrpRingport2IfIndex, hm2RingCplCouplingLinks=hm2RingCplCouplingLinks, hm2MrpDomainManagerGroup=hm2MrpDomainManagerGroup, hm2RedundantCplRedundancyState=hm2RedundantCplRedundancyState, hm2RingCouplingEntry=hm2RingCouplingEntry, hm2RingCplOperState=hm2RingCplOperState, hm2SrmMRPDomainID=hm2SrmMRPDomainID, hm2RingCplReconfig=hm2RingCplReconfig, hm2RingCouplingTable=hm2RingCouplingTable, hm2MrpRoleOperState=hm2MrpRoleOperState, hm2MrpRecoveryDelaySupported=hm2MrpRecoveryDelaySupported, hm2MrpCompliances=hm2MrpCompliances, hm2RedundantCplState=hm2RedundantCplState, hm2MrpConfigOperState=hm2MrpConfigOperState, hm2MrpRedundancyOperState=hm2MrpRedundancyOperState, hm2RingCplInterconnIfIndex=hm2RingCplInterconnIfIndex, hm2SrmTable=hm2SrmTable, hm2SrmOperState=hm2SrmOperState, hm2RedundantCplCurrentRole=hm2RedundantCplCurrentRole, hm2RedundantCplReconfig=hm2RedundantCplReconfig, hm2RedundantCplOutSecondaryPort=hm2RedundantCplOutSecondaryPort, hm2SrmConfigOperState=hm2SrmConfigOperState, hm2MrpNotificationsGroup=hm2MrpNotificationsGroup, hm2RingCplPartnerInterconnIfOpState=hm2RingCplPartnerInterconnIfOpState, hm2MrpReconfig=hm2MrpReconfig, hm2SrmRedundancyOperState=hm2SrmRedundancyOperState, hm2SrmMibGroup=hm2SrmMibGroup, hm2RedundantCplTimeout=hm2RedundantCplTimeout, hm2MrpEntry=hm2MrpEntry, hm2MrpRingport2GroupID=hm2MrpRingport2GroupID, hm2MrpGroups=hm2MrpGroups, hm2MrpMRMPriority=hm2MrpMRMPriority, hm2RingCouplingInvalidPortConfiguration=hm2RingCouplingInvalidPortConfiguration, PYSNMP_MODULE_ID=hm2L2RedundancyMib, hm2SrmEntry=hm2SrmEntry, hm2RingCplRowStatus=hm2RingCplRowStatus, hm2RedundantCplPortsMissing=hm2RedundantCplPortsMissing, hm2SrmVlanID=hm2SrmVlanID, hm2RedundantCplOutPrimaryPort=hm2RedundantCplOutPrimaryPort, hm2MrpRecoveryDelay=hm2MrpRecoveryDelay, hm2RingCplPartnerIpAddr=hm2RingCplPartnerIpAddr, hm2SrmSubRingPortOperState=hm2SrmSubRingPortOperState, hm2RingCplCouplingMode=hm2RingCplCouplingMode, hm2RingCouplingMibSESGroup=hm2RingCouplingMibSESGroup, hm2MrpRingport1OperState=hm2MrpRingport1OperState, hm2MrpMRMNonBlockingMRCSupported=hm2MrpMRMNonBlockingMRCSupported, hm2RingCplConfigOperState=hm2RingCplConfigOperState, hm2RingCplPartnerInterconnIfIndex=hm2RingCplPartnerInterconnIfIndex, hm2SrmAdminState=hm2SrmAdminState, hm2SrmSubRingProtocol=hm2SrmSubRingProtocol, hm2MrpFastMrp=hm2MrpFastMrp, hm2RedundantCplAdminState=hm2RedundantCplAdminState, hm2SrmReconfig=hm2SrmReconfig, hm2MrpConformance=hm2MrpConformance, hm2RedundantCplPartnerIPAddrType=hm2RedundantCplPartnerIPAddrType, hm2RedundantCplConfigMibGroup=hm2RedundantCplConfigMibGroup, hm2SrmPartnerMAC=hm2SrmPartnerMAC, hm2RingCplPartnerIpAddrType=hm2RingCplPartnerIpAddrType, hm2MrpMRMRoundTripDelayMax=hm2MrpMRMRoundTripDelayMax, hm2L2RedundancyMibSNMPExtensionGroup=hm2L2RedundancyMibSNMPExtensionGroup, hm2MrpRoleAdminState=hm2MrpRoleAdminState, hm2RingCplControlModeOperState=hm2RingCplControlModeOperState, hm2RedundantCplInSecondaryPort=hm2RedundantCplInSecondaryPort, hm2RingCplRedOperState=hm2RingCplRedOperState, hm2RingCplControlIfOpState=hm2RingCplControlIfOpState, hm2RingRedAdminState=hm2RingRedAdminState, hm2MrpDomainName=hm2MrpDomainName, hm2MrpMRMReactOnLinkChange=hm2MrpMRMReactOnLinkChange, hm2MrpMRMRoundTripDelayReset=hm2MrpMRMRoundTripDelayReset, hm2RingRedSecondaryIntf=hm2RingRedSecondaryIntf, hm2RedundantCplPartnerSecodaryPort=hm2RedundantCplPartnerSecodaryPort, hm2MrpRingOperState=hm2MrpRingOperState, hm2RedundantCplPartner=hm2RedundantCplPartner, hm2RingRedPrimaryIntfState=hm2RingRedPrimaryIntfState)
