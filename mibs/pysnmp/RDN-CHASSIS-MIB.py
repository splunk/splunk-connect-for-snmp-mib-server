#
# PySNMP MIB module RDN-CHASSIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RDN-CHASSIS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:46:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
docsDevEvLevel, = mibBuilder.importSymbols("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel")
ifType, ifOperStatus, ifIndex, ifDescr, ifAdminStatus = mibBuilder.importSymbols("IF-MIB", "ifType", "ifOperStatus", "ifIndex", "ifDescr", "ifAdminStatus")
riverdelta, = mibBuilder.importSymbols("RDN-MIB", "riverdelta")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysDescr, = mibBuilder.importSymbols("SNMPv2-MIB", "sysDescr")
MibIdentifier, iso, NotificationType, Integer32, Bits, Unsigned32, Counter64, ObjectIdentity, Counter32, IpAddress, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "iso", "NotificationType", "Integer32", "Bits", "Unsigned32", "Counter64", "ObjectIdentity", "Counter32", "IpAddress", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "TimeTicks")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
rdnChassis = ModuleIdentity((1, 3, 6, 1, 4, 1, 4981, 1))
rdnChassis.setRevisions(('2011-11-09 00:00', '2008-08-08 00:00', '2006-01-06 00:00', '2005-03-01 00:00', '2005-02-22 00:00', '2004-03-18 00:00', '2003-11-04 00:00', '2003-04-30 00:00', '2003-04-29 00:00', '2001-05-08 00:00', '2001-01-15 00:00', '2000-05-23 00:00', '2000-04-04 00:00', '2000-04-04 00:00',))
if mibBuilder.loadTexts: rdnChassis.setLastUpdated('201111090000Z')
if mibBuilder.loadTexts: rdnChassis.setOrganization('Motorola')
rdnChassisType = MibScalar((1, 3, 6, 1, 4, 1, 4981, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("bsr64000", 2), ("bsr1000", 3), ("osr2000", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnChassisType.setStatus('current')
rdnChassisVersion = MibScalar((1, 3, 6, 1, 4, 1, 4981, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnChassisVersion.setStatus('current')
rdnChassisId = MibScalar((1, 3, 6, 1, 4, 1, 4981, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnChassisId.setStatus('current')
rdnProcessorRam = MibScalar((1, 3, 6, 1, 4, 1, 4981, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnProcessorRam.setStatus('current')
rdnNvRAMSize = MibScalar((1, 3, 6, 1, 4, 1, 4981, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnNvRAMSize.setStatus('current')
rdnNvRAMUsed = MibScalar((1, 3, 6, 1, 4, 1, 4981, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnNvRAMUsed.setStatus('current')
rdnFlashSize = MibScalar((1, 3, 6, 1, 4, 1, 4981, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnFlashSize.setStatus('current')
rdnCardTable = MibTable((1, 3, 6, 1, 4, 1, 4981, 1, 8), )
if mibBuilder.loadTexts: rdnCardTable.setStatus('current')
rdnCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4981, 1, 8, 1), ).setIndexNames((0, "RDN-CHASSIS-MIB", "rdnCardIndex"))
if mibBuilder.loadTexts: rdnCardEntry.setStatus('current')
rdnCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: rdnCardIndex.setStatus('current')
rdnCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("srm", 2), ("io", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnCardType.setStatus('current')
rdnCardDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnCardDescr.setStatus('current')
rdnCardSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 8, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnCardSerial.setStatus('current')
rdnCardHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 8, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnCardHwVersion.setStatus('current')
rdnCardSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 8, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnCardSwVersion.setStatus('current')
rdnCardSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnCardSlotNumber.setStatus('current')
rdnCardContainedByIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnCardContainedByIndex.setStatus('current')
rdnCardOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("not-specified", 1), ("up", 2), ("down", 3), ("standby", 4), ("rom", 5), ("flash", 6), ("diag", 7), ("boot", 8), ("config", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnCardOperStatus.setStatus('current')
rdnChassisSlots = MibScalar((1, 3, 6, 1, 4, 1, 4981, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnChassisSlots.setStatus('current')
rdnSlotTable = MibTable((1, 3, 6, 1, 4, 1, 4981, 1, 10), )
if mibBuilder.loadTexts: rdnSlotTable.setStatus('current')
rdnSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4981, 1, 10, 1), ).setIndexNames((0, "RDN-CHASSIS-MIB", "rdnSlotIndex"))
if mibBuilder.loadTexts: rdnSlotEntry.setStatus('current')
rdnSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: rdnSlotIndex.setStatus('current')
rdnSlotType = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("srm", 2), ("io", 3), ("hsim", 4), ("cmts", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnSlotType.setStatus('current')
rdnSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnSlotNumber.setStatus('current')
rdnSlotOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("not-specified", 1), ("up", 2), ("down", 3), ("standby", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnSlotOperStatus.setStatus('current')
rdnOfflineModemCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnOfflineModemCount.setStatus('current')
rdnOnlineModemCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnOnlineModemCount.setStatus('current')
rdnActiveModemCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnActiveModemCount.setStatus('current')
rdnRegisteredModemCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnRegisteredModemCount.setStatus('current')
rdnProvisionedModemCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnProvisionedModemCount.setStatus('current')
rdnUnregisteredModemCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 10, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnUnregisteredModemCount.setStatus('current')
rdnResetSlotStats = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 10, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnResetSlotStats.setStatus('current')
rdnSlotUnerroreds = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 10, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnSlotUnerroreds.setStatus('current')
rdnSlotCorrecteds = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 10, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnSlotCorrecteds.setStatus('current')
rdnSlotUncorrectables = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 10, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnSlotUncorrectables.setStatus('current')
rdnCardIfIndexTable = MibTable((1, 3, 6, 1, 4, 1, 4981, 1, 11), )
if mibBuilder.loadTexts: rdnCardIfIndexTable.setStatus('current')
rdnCardIfIndexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4981, 1, 11, 1), ).setIndexNames((0, "RDN-CHASSIS-MIB", "rdnCardIfIndex"))
if mibBuilder.loadTexts: rdnCardIfIndexEntry.setStatus('current')
rdnCardIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnCardIfIndex.setStatus('current')
rdnCardIfSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnCardIfSlotNumber.setStatus('current')
rdnCardIfPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnCardIfPortNumber.setStatus('current')
rdnCardIfCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnCardIfCardIndex.setStatus('current')
rdnCardIfConnectorTypeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("not-specified", 1), ("none", 2), ("rj-45", 3), ("db-40", 4), ("db-15", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnCardIfConnectorTypeEnabled.setStatus('current')
rdnCardIfLinkUpDownEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnCardIfLinkUpDownEnable.setStatus('current')
rdnCardIfPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 1, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ethernet", 1), ("gige", 2), ("cmts", 3), ("cmts-dn", 4), ("cmts-up", 5), ("cmts-up-log", 6), ("pos", 7), ("lag", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnCardIfPortType.setStatus('current')
rdnSysUpTimeAtLastChassisChange = MibScalar((1, 3, 6, 1, 4, 1, 4981, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnSysUpTimeAtLastChassisChange.setStatus('current')
rdnSysUpTimeAtLastConfigChange = MibScalar((1, 3, 6, 1, 4, 1, 4981, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnSysUpTimeAtLastConfigChange.setStatus('current')
rdnChassisPowerTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 4981, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnChassisPowerTrapEnable.setStatus('current')
rdnChassisFanTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 4981, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnChassisFanTrapEnable.setStatus('current')
rdnChassisBSRSrmSwitchoverTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 4981, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnChassisBSRSrmSwitchoverTrapEnable.setStatus('current')
chassisNotificationObject = MibIdentifier((1, 3, 6, 1, 4, 1, 4981, 1, 0))
chassisPowerFailureTrapInfo = MibScalar((1, 3, 6, 1, 4, 1, 4981, 1, 0, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("powerFailureA", 1), ("powerFailureB", 2), ("powerRestoredA", 3), ("powerRestoredB", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: chassisPowerFailureTrapInfo.setStatus('current')
chassisPowerFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 4981, 1, 0, 2)).setObjects(("RDN-CHASSIS-MIB", "chassisPowerFailureTrapInfo"))
if mibBuilder.loadTexts: chassisPowerFailureTrap.setStatus('current')
chassisFanFailureTrapInfo = MibScalar((1, 3, 6, 1, 4, 1, 4981, 1, 0, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upperFanFailure", 1), ("lowerFanFailure", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: chassisFanFailureTrapInfo.setStatus('current')
chassisFanFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 4981, 1, 0, 4)).setObjects(("RDN-CHASSIS-MIB", "chassisFanFailureTrapInfo"))
if mibBuilder.loadTexts: chassisFanFailureTrap.setStatus('current')
rdnRedundancyFailedSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 4981, 1, 0, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rdnRedundancyFailedSlotNumber.setStatus('current')
rdnRedundancyBackupSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 4981, 1, 0, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rdnRedundancyBackupSlotNumber.setStatus('current')
rdnBSRSrmSwitchoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 4981, 1, 0, 7)).setObjects(("RDN-CHASSIS-MIB", "rdnRedundancyFailedSlotNumber"), ("RDN-CHASSIS-MIB", "rdnRedundancyBackupSlotNumber"))
if mibBuilder.loadTexts: rdnBSRSrmSwitchoverTrap.setStatus('current')
rdnLinkUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 4981, 1, 0, 8)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("IF-MIB", "ifType"), ("IF-MIB", "ifAdminStatus"), ("IF-MIB", "ifOperStatus"))
if mibBuilder.loadTexts: rdnLinkUpTrap.setStatus('current')
rdnLinkDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 4981, 1, 0, 9)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("IF-MIB", "ifType"), ("IF-MIB", "ifAdminStatus"), ("IF-MIB", "ifOperStatus"))
if mibBuilder.loadTexts: rdnLinkDownTrap.setStatus('current')
rdnBsrTestTrap = NotificationType((1, 3, 6, 1, 4, 1, 4981, 1, 0, 10)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("SNMPv2-MIB", "sysDescr"))
if mibBuilder.loadTexts: rdnBsrTestTrap.setStatus('current')
mibBuilder.exportSymbols("RDN-CHASSIS-MIB", rdnCardIndex=rdnCardIndex, rdnCardIfCardIndex=rdnCardIfCardIndex, rdnCardEntry=rdnCardEntry, rdnChassisVersion=rdnChassisVersion, rdnRedundancyBackupSlotNumber=rdnRedundancyBackupSlotNumber, rdnFlashSize=rdnFlashSize, rdnActiveModemCount=rdnActiveModemCount, PYSNMP_MODULE_ID=rdnChassis, rdnCardContainedByIndex=rdnCardContainedByIndex, rdnChassisBSRSrmSwitchoverTrapEnable=rdnChassisBSRSrmSwitchoverTrapEnable, rdnUnregisteredModemCount=rdnUnregisteredModemCount, rdnBsrTestTrap=rdnBsrTestTrap, rdnSlotTable=rdnSlotTable, rdnCardSerial=rdnCardSerial, rdnCardOperStatus=rdnCardOperStatus, rdnOnlineModemCount=rdnOnlineModemCount, rdnSlotType=rdnSlotType, rdnChassis=rdnChassis, rdnSysUpTimeAtLastChassisChange=rdnSysUpTimeAtLastChassisChange, chassisPowerFailureTrapInfo=chassisPowerFailureTrapInfo, rdnLinkUpTrap=rdnLinkUpTrap, rdnSlotEntry=rdnSlotEntry, rdnCardSwVersion=rdnCardSwVersion, rdnCardIfSlotNumber=rdnCardIfSlotNumber, rdnCardIfPortNumber=rdnCardIfPortNumber, rdnSysUpTimeAtLastConfigChange=rdnSysUpTimeAtLastConfigChange, rdnCardType=rdnCardType, rdnCardIfLinkUpDownEnable=rdnCardIfLinkUpDownEnable, rdnChassisPowerTrapEnable=rdnChassisPowerTrapEnable, rdnChassisSlots=rdnChassisSlots, rdnSlotCorrecteds=rdnSlotCorrecteds, rdnBSRSrmSwitchoverTrap=rdnBSRSrmSwitchoverTrap, rdnCardDescr=rdnCardDescr, rdnLinkDownTrap=rdnLinkDownTrap, rdnNvRAMUsed=rdnNvRAMUsed, chassisFanFailureTrap=chassisFanFailureTrap, chassisPowerFailureTrap=chassisPowerFailureTrap, rdnSlotIndex=rdnSlotIndex, rdnCardHwVersion=rdnCardHwVersion, rdnProcessorRam=rdnProcessorRam, rdnCardTable=rdnCardTable, rdnOfflineModemCount=rdnOfflineModemCount, rdnResetSlotStats=rdnResetSlotStats, rdnCardIfIndexEntry=rdnCardIfIndexEntry, rdnCardSlotNumber=rdnCardSlotNumber, rdnSlotUncorrectables=rdnSlotUncorrectables, rdnChassisId=rdnChassisId, rdnRegisteredModemCount=rdnRegisteredModemCount, rdnCardIfConnectorTypeEnabled=rdnCardIfConnectorTypeEnabled, rdnSlotUnerroreds=rdnSlotUnerroreds, rdnChassisType=rdnChassisType, rdnNvRAMSize=rdnNvRAMSize, rdnProvisionedModemCount=rdnProvisionedModemCount, chassisFanFailureTrapInfo=chassisFanFailureTrapInfo, chassisNotificationObject=chassisNotificationObject, rdnRedundancyFailedSlotNumber=rdnRedundancyFailedSlotNumber, rdnCardIfIndexTable=rdnCardIfIndexTable, rdnSlotNumber=rdnSlotNumber, rdnChassisFanTrapEnable=rdnChassisFanTrapEnable, rdnSlotOperStatus=rdnSlotOperStatus, rdnCardIfIndex=rdnCardIfIndex, rdnCardIfPortType=rdnCardIfPortType)
